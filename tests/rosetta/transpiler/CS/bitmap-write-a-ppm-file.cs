// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

struct Colour {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Colour {{R = {R}, G = {G}, B = {B}}}";
}
struct Bitmap {
    public long width;
    public long height;
    public Colour[][] pixels;
    public override string ToString() => $"Bitmap {{width = {width}, height = {height}, pixels = {pixels}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Bitmap newBitmap(long w, long h, Colour c) {
        Colour[][] rows_0 = new Colour[][]{};
        long y_1 = 0;
        while ((y_1 < h)) {
            Colour[] row_2 = new Colour[]{};
            long x_3 = 0;
            while ((x_3 < w)) {
                row_2 = (Enumerable.ToArray(Enumerable.Append(row_2, c)));
                x_3 = (x_3 + 1);
            }
            rows_0 = (Enumerable.ToArray(Enumerable.Append(rows_0, row_2)));
            y_1 = (y_1 + 1);
        };
        return new Bitmap{width = w, height = h, pixels = rows_0};
    }

    static void setPixel(Bitmap b, long x, long y, Colour c) {
        Colour[][] rows_4 = b.pixels;
        Colour[] row_5 = rows_4[(int)(y)];
        row_5[x] = c;
        rows_4[y] = row_5;
        b.pixels = rows_4;
    }

    static void fillRect(Bitmap b, long x, long y, long w, long h, Colour c) {
        long yy_6 = y;
        while ((yy_6 < (y + h))) {
            long xx_7 = x;
            while ((xx_7 < (x + w))) {
                setPixel(b, xx_7, yy_6, c);
                xx_7 = (xx_7 + 1);
            }
            yy_6 = (yy_6 + 1);
        };
    }

    static string pad(long n, long width) {
        string s_8 = (n).ToString();
        while ((s_8.Length < width)) {
            s_8 = (" " + s_8);
        };
        return s_8;
    }

    static string writePPMP3(Bitmap b) {
        long maxv_9 = 0;
        long y_10 = 0;
        while ((y_10 < b.height)) {
            long x_11 = 0;
            while ((x_11 < b.width)) {
                Colour p_12 = b.pixels[(int)(y_10)][(int)(x_11)];
                if ((p_12.R > maxv_9)) {
                    maxv_9 = p_12.R;
                }
                if ((p_12.G > maxv_9)) {
                    maxv_9 = p_12.G;
                }
                if ((p_12.B > maxv_9)) {
                    maxv_9 = p_12.B;
                }
                x_11 = (x_11 + 1);
            }
            y_10 = (y_10 + 1);
        };
        string out_13 = (((((("P3\n# generated from Bitmap.writeppmp3\n" + (b.width).ToString()) + " ") + (b.height).ToString()) + "\n") + (maxv_9).ToString()) + "\n");
        var numsize_14 = (maxv_9).ToString().Length;
        y_10 = (b.height - 1);
        while ((y_10 >= 0)) {
            string line_15 = "";
            long x_16 = 0;
            while ((x_16 < b.width)) {
                Colour p_17 = b.pixels[(int)(y_10)][(int)(x_16)];
                line_15 = ((((((line_15 + "   ") + pad(p_17.R, numsize_14)) + " ") + pad(p_17.G, numsize_14)) + " ") + pad(p_17.B, numsize_14));
                x_16 = (x_16 + 1);
            }
            out_13 = (out_13 + line_15);
            if ((y_10 > 0)) {
                out_13 = (out_13 + "\n");
            } else {
                out_13 = (out_13 + "\n");
            }
            y_10 = (y_10 - 1);
        };
        return out_13;
    }

    static void main() {
        Colour black_18 = new Colour{R = 0, G = 0, B = 0};
        Colour white_19 = new Colour{R = 255, G = 255, B = 255};
        Bitmap bm_20 = newBitmap(4, 4, black_18);
        fillRect(bm_20, 1, 0, 1, 2, white_19);
        setPixel(bm_20, 3, 3, new Colour{R = 127, G = 0, B = 63});
        string ppm_21 = writePPMP3(bm_20);
        Console.WriteLine(_fmtTop(ppm_21));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
