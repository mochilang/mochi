// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Colour {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Colour {{R = {R}, G = {G}, B = {B}}}";
}
class Bitmap {
    public long width;
    public long height;
    public Colour[][] pixels;
    public override string ToString() => $"Bitmap {{width = {width}, height = {height}, pixels = {pixels}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Bitmap newBitmap(long w_0, long h_1, Colour c_2) {
        Colour[][] rows_3 = new Colour[][]{};
        long y_4 = 0;
        while ((y_4 < h_1)) {
            Colour[] row_5 = new Colour[]{};
            long x_6 = 0;
            while ((x_6 < w_0)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append(row_5, c_2)));
                x_6 = (x_6 + 1);
            }
            rows_3 = (Enumerable.ToArray(Enumerable.Append(rows_3, row_5)));
            y_4 = (y_4 + 1);
        };
        return new Bitmap{width = w_0, height = h_1, pixels = rows_3};
    }

    static void setPixel(Bitmap b_7, long x_8, long y_9, Colour c_10) {
        Colour[][] rows_11 = b_7.pixels;
        Colour[] row_12 = rows_11[(int)(y_9)];
        row_12[x_8] = c_10;
        rows_11[y_9] = row_12;
        b_7.pixels = rows_11;
    }

    static void fillRect(Bitmap b_13, long x_14, long y_15, long w_16, long h_17, Colour c_18) {
        long yy_19 = y_15;
        while ((yy_19 < (y_15 + h_17))) {
            long xx_20 = x_14;
            while ((xx_20 < (x_14 + w_16))) {
                setPixel(b_13, xx_20, yy_19, c_18);
                xx_20 = (xx_20 + 1);
            }
            yy_19 = (yy_19 + 1);
        };
    }

    static string pad(long n_21, long width_22) {
        string s_23 = _fmt(n_21);
        while ((Convert.ToDouble(s_23.Length) < Convert.ToDouble(width_22))) {
            s_23 = (" " + s_23);
        };
        return s_23;
    }

    static string writePPMP3(Bitmap b_24) {
        long maxv_25 = 0;
        long y_26 = 0;
        while ((y_26 < b_24.height)) {
            long x_27 = 0;
            while ((x_27 < b_24.width)) {
                Colour p_28 = b_24.pixels[(int)(y_26)][(int)(x_27)];
                if ((p_28.R > maxv_25)) {
                    maxv_25 = p_28.R;
                }
                if ((p_28.G > maxv_25)) {
                    maxv_25 = p_28.G;
                }
                if ((p_28.B > maxv_25)) {
                    maxv_25 = p_28.B;
                }
                x_27 = (x_27 + 1);
            }
            y_26 = (y_26 + 1);
        };
        string out_29 = (((((("P3\n# generated from Bitmap.writeppmp3\n" + _fmt(b_24.width)) + " ") + _fmt(b_24.height)) + "\n") + _fmt(maxv_25)) + "\n");
        var numsize_30 = _fmt(maxv_25).Length;
        y_26 = (b_24.height - 1);
        while ((y_26 >= 0)) {
            string line_31 = "";
            long x_32 = 0;
            while ((x_32 < b_24.width)) {
                Colour p_33 = b_24.pixels[(int)(y_26)][(int)(x_32)];
                line_31 = ((((((line_31 + "   ") + pad(p_33.R, numsize_30)) + " ") + pad(p_33.G, numsize_30)) + " ") + pad(p_33.B, numsize_30));
                x_32 = (x_32 + 1);
            }
            out_29 = (out_29 + line_31);
            if ((y_26 > 0)) {
                out_29 = (out_29 + "\n");
            } else {
                out_29 = (out_29 + "\n");
            }
            y_26 = (y_26 - 1);
        };
        return out_29;
    }

    static void main() {
        Colour black_34 = new Colour{R = 0, G = 0, B = 0};
        Colour white_35 = new Colour{R = 255, G = 255, B = 255};
        Bitmap bm_36 = newBitmap(4, 4, black_34);
        fillRect(bm_36, 1, 0, 1, 2, white_35);
        setPixel(bm_36, 3, 3, new Colour{R = 127, G = 0, B = 63});
        string ppm_37 = writePPMP3(bm_36);
        Console.WriteLine(_fmtTop(ppm_37));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
