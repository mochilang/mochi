// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static long[] primeFactors(long n_0) {
        long[] factors_1 = new long[]{};
        long x_2 = n_0;
        while (((x_2 % 2) == 0)) {
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, 2)));
            x_2 = Convert.ToInt64((x_2 / 2));
        };
        long p_3 = 3;
        while (((p_3 * p_3) <= x_2)) {
            while (((x_2 % p_3) == 0)) {
                factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, p_3)));
                x_2 = Convert.ToInt64((x_2 / p_3));
            }
            p_3 = (p_3 + 2);
        };
        if ((x_2 > 1)) {
            factors_1 = (Enumerable.ToArray(Enumerable.Append(factors_1, x_2)));
        };
        return factors_1;
    }

    public static string commatize(long n_4) {
        string s_5 = _fmt(n_4);
        string out_6 = "";
        long i_7 = (s_5.Length - 1);
        long c_8 = 0;
        while ((i_7 >= 0)) {
            out_6 = (s_5.Substring((int)(i_7), (int)((i_7 + 1) - i_7)) + out_6);
            c_8 = (c_8 + 1);
            if ((((c_8 % 3) == 0) && (i_7 > 0))) {
                out_6 = ("," + out_6);
            }
            i_7 = (i_7 - 1);
        };
        return out_6;
    }

    public static long indexOf(string s_9, string sub_10) {
        long i_11 = 0;
        while (((i_11 + sub_10.Length) <= s_9.Length)) {
            if ((s_9.Substring((int)(i_11), (int)((i_11 + sub_10.Length) - i_11)) == sub_10)) {
                return i_11;
            }
            i_11 = (i_11 + 1);
        };
        return -1;
    }

    public static string pad10(string s_12) {
        string str_13 = s_12;
        while ((str_13.Length < 10)) {
            str_13 = (" " + str_13);
        };
        return str_13;
    }

    public static string trimRightStr(string s_14) {
        int end_15 = s_14.Length;
        while (((end_15 > 0) && (s_14.Substring((int)((end_15 - 1)), (int)(end_15 - (end_15 - 1))) == " "))) {
            end_15 = (end_15 - 1);
        };
        return s_14.Substring((int)(0), (int)(end_15 - 0));
    }

    public static void main() {
        long[] res_16 = new long[]{};
        long count_17 = 0;
        long k_18 = (11 * 11);
        while ((count_17 < 20)) {
            if (((((k_18 % 3) == 0) || ((k_18 % 5) == 0)) || ((k_18 % 7) == 0))) {
                k_18 = (k_18 + 2);
                continue;
            }
            long[] factors_19 = Program.primeFactors(k_18);
            if ((factors_19.Length > 1)) {
                string s_20 = _fmt(k_18);
                bool includesAll_21 = true;
                long prev_22 = -1;
                foreach (long f_23 in factors_19) {
                    if ((f_23 == prev_22)) {
                        continue;
                    }
                    string fs_24 = _fmt(f_23);
                    if ((Program.indexOf(s_20, fs_24) == -1)) {
                        includesAll_21 = false;
                        break;
                    }
                    prev_22 = f_23;
                }
                if (includesAll_21) {
                    res_16 = (Enumerable.ToArray(Enumerable.Append(res_16, k_18)));
                    count_17 = (count_17 + 1);
                }
            }
            k_18 = (k_18 + 2);
        };
        string line_25 = "";
        foreach (long e_26 in res_16.Skip((int)(0)).Take((int)((10 - 0))).ToArray()) {
            line_25 = ((line_25 + Program.pad10(Program.commatize(e_26))) + " ");
        };
        Console.WriteLine(Program._fmtTop(Program.trimRightStr(line_25)));
        line_25 = "";
        foreach (long e_27 in res_16.Skip((int)(10)).Take((int)((20 - 10))).ToArray()) {
            line_25 = ((line_25 + Program.pad10(Program.commatize(e_27))) + " ");
        };
        Console.WriteLine(Program._fmtTop(Program.trimRightStr(line_25)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
