// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public double x;
    public double y;
    public override string ToString() => $"Point {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}}}";
}
class Triangle {
    public Point p1;
    public Point p2;
    public Point p3;
    public override string ToString() => $"Triangle {{p1 = {p1}, p2 = {p2}, p3 = {p3}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static string fmt1(double f_0) {
        string s_1 = _fmt(f_0);
        var idx_2 = s_1.IndexOf(".");
        if ((Convert.ToDouble(idx_2) < Convert.ToDouble(0))) {
            s_1 = (s_1 + ".0");
        } else {
            long need_3 = (((dynamic)(idx_2)) + ((dynamic)(2)));
            if ((Convert.ToDouble(s_1.Length) > Convert.ToDouble(need_3))) {
                s_1 = s_1.Substring((int)(0), (int)(need_3 - 0));
            } else {
                while ((Convert.ToDouble(s_1.Length) < Convert.ToDouble(need_3))) {
                    s_1 = (s_1 + "0");
                }
            }
        };
        return s_1;
    }

    public static string pointStr(Point p_4) {
        return (((("(" + Program.fmt1(p_4.x)) + ", ") + Program.fmt1(p_4.y)) + ")");
    }

    public static string triangleStr(Triangle t_5) {
        return ((((("Triangle " + Program.pointStr(t_5.p1)) + ", ") + Program.pointStr(t_5.p2)) + ", ") + Program.pointStr(t_5.p3));
    }

    public static double orient(Point a_6, Point b_7, Point c_8) {
        return (((b_7.x - a_6.x) * (c_8.y - a_6.y)) - ((b_7.y - a_6.y) * (c_8.x - a_6.x)));
    }

    public static bool pointInTri(Point p_9, Triangle t_10, bool onBoundary_11) {
        double d1_12 = Program.orient(p_9, t_10.p1, t_10.p2);
        double d2_13 = Program.orient(p_9, t_10.p2, t_10.p3);
        double d3_14 = Program.orient(p_9, t_10.p3, t_10.p1);
        bool hasNeg_15 = (((d1_12 < 0.0) || (d2_13 < 0.0)) || (d3_14 < 0.0));
        bool hasPos_16 = (((d1_12 > 0.0) || (d2_13 > 0.0)) || (d3_14 > 0.0));
        if (onBoundary_11) {
            return (!(hasNeg_15 && hasPos_16));
        };
        return ((((!(hasNeg_15 && hasPos_16)) && (d1_12 != 0.0)) && (d2_13 != 0.0)) && (d3_14 != 0.0));
    }

    public static bool edgeCheck(Point a0_17, Point a1_18, Point[] bs_19, bool onBoundary_20) {
        double d0_21 = Program.orient(a0_17, a1_18, bs_19[(int)(0)]);
        double d1_22 = Program.orient(a0_17, a1_18, bs_19[(int)(1)]);
        double d2_23 = Program.orient(a0_17, a1_18, bs_19[(int)(2)]);
        if (onBoundary_20) {
            return (((d0_21 <= 0.0) && (d1_22 <= 0.0)) && (d2_23 <= 0.0));
        };
        return (((d0_21 < 0.0) && (d1_22 < 0.0)) && (d2_23 < 0.0));
    }

    public static bool triTri2D(Triangle t1_24, Triangle t2_25, bool onBoundary_26) {
        Point[] a_27 = new Point[]{t1_24.p1, t1_24.p2, t1_24.p3};
        Point[] b_28 = new Point[]{t2_25.p1, t2_25.p2, t2_25.p3};
        long i_29 = 0;
        while ((i_29 < 3)) {
            long j_30 = ((i_29 + 1) % 3);
            if (Program.edgeCheck(a_27[(int)(i_29)], a_27[(int)(j_30)], b_28, onBoundary_26)) {
                return false;
            }
            i_29 = (i_29 + 1);
        };
        i_29 = 0;
        while ((i_29 < 3)) {
            long j_31 = ((i_29 + 1) % 3);
            if (Program.edgeCheck(b_28[(int)(i_29)], b_28[(int)(j_31)], a_27, onBoundary_26)) {
                return false;
            }
            i_29 = (i_29 + 1);
        };
        return true;
    }

    public static string iff(bool cond_32, string a_33, string b_34) {
        if (cond_32) {
            return a_33;
        } else {
            return b_34;
        };
    }

    public static void main() {
        Triangle t1_35 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 5.0, y = 0.0}, p3 = new Point{x = 0.0, y = 5.0}};
        Triangle t2_36 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 5.0, y = 0.0}, p3 = new Point{x = 0.0, y = 6.0}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        bool overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t1_35 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 0.0, y = 5.0}, p3 = new Point{x = 5.0, y = 0.0}};
        t2_36 = t1_35;
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap (reversed)", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t1_35 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 5.0, y = 0.0}, p3 = new Point{x = 0.0, y = 5.0}};
        t2_36 = new Triangle{p1 = new Point{x = -10.0, y = 0.0}, p2 = new Point{x = -5.0, y = 0.0}, p3 = new Point{x = -1.0, y = 6.0}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t1_35.p3 = new Point{x = 2.5, y = 5.0};
        t2_36 = new Triangle{p1 = new Point{x = 0.0, y = 4.0}, p2 = new Point{x = 2.5, y = -1.0}, p3 = new Point{x = 5.0, y = 4.0}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t1_35 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 1.0, y = 1.0}, p3 = new Point{x = 0.0, y = 2.0}};
        t2_36 = new Triangle{p1 = new Point{x = 2.0, y = 1.0}, p2 = new Point{x = 3.0, y = 0.0}, p3 = new Point{x = 3.0, y = 2.0}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t2_36 = new Triangle{p1 = new Point{x = 2.0, y = 1.0}, p2 = new Point{x = 3.0, y = -2.0}, p3 = new Point{x = 3.0, y = 4.0}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        t1_35 = new Triangle{p1 = new Point{x = 0.0, y = 0.0}, p2 = new Point{x = 1.0, y = 0.0}, p3 = new Point{x = 0.0, y = 1.0}};
        t2_36 = new Triangle{p1 = new Point{x = 1.0, y = 0.0}, p2 = new Point{x = 2.0, y = 0.0}, p3 = new Point{x = 1.0, y = 1.1}};
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        Console.WriteLine(Program._fmtTop("which have only a single corner in contact, if boundary points collide"));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, true);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
        Console.WriteLine(Program._fmtTop(""));
        Console.WriteLine(Program._fmtTop((Program.triangleStr(t1_35) + " and")));
        Console.WriteLine(Program._fmtTop(Program.triangleStr(t2_36)));
        Console.WriteLine(Program._fmtTop("which have only a single corner in contact, if boundary points do not collide"));
        overlapping_37 = Program.triTri2D(t1_35, t2_36, false);
        Console.WriteLine(Program._fmtTop(Program.iff(overlapping_37, "overlap", "do not overlap")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
