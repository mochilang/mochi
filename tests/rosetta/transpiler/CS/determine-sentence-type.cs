// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            if ((s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static string join(string[] xs_3, string sep_4) {
        string res_5 = "";
        long i_6 = 0;
        while ((i_6 < xs_3.Length)) {
            if ((i_6 > 0)) {
                res_5 = (res_5 + sep_4);
            }
            res_5 = (res_5 + xs_3[(int)(i_6)]);
            i_6 = (i_6 + 1);
        };
        return res_5;
    }

    static string sentenceType(string s_7) {
        if ((s_7.Length == 0)) {
            return "";
        };
        string[] types_8 = new string[]{};
        long i_9 = 0;
        while ((i_9 < s_7.Length)) {
            string ch_10 = s_7.Substring((int)(i_9), (int)((i_9 + 1) - i_9));
            if ((ch_10 == "?")) {
                types_8 = (Enumerable.ToArray(Enumerable.Append(types_8, "Q")));
            } else {
                if ((ch_10 == "!")) {
                    types_8 = (Enumerable.ToArray(Enumerable.Append(types_8, "E")));
                } else {
                    if ((ch_10 == ".")) {
                        types_8 = (Enumerable.ToArray(Enumerable.Append(types_8, "S")));
                    }
                }
            }
            i_9 = (i_9 + 1);
        };
        string last_11 = s_7.Substring((int)((((dynamic)s_7.Length) - ((dynamic)1))), (int)(s_7.Length - (((dynamic)s_7.Length) - ((dynamic)1))));
        if ((indexOf("?!.", last_11) == -1)) {
            types_8 = (Enumerable.ToArray(Enumerable.Append(types_8, "N")));
        };
        return join(types_8, "|");
    }

    static void main() {
        string s_12 = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it";
        string result_13 = sentenceType(s_12);
        Console.WriteLine(_fmtTop(result_13));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
