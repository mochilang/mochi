// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long xor(long a_0, long b_1) {
        long res_2 = 0;
        long bit_3 = 1;
        long x_4 = a_0;
        long y_5 = b_1;
        while (((x_4 > 0) || (y_5 > 0))) {
            if (((((x_4 % 2) + (y_5 % 2)) % 2) == 1)) {
                res_2 = (res_2 + bit_3);
            }
            x_4 = (x_4 / 2);
            y_5 = (y_5 / 2);
            bit_3 = (bit_3 * 2);
        };
        return res_2;
    }

    static long enc(long b_6) {
        return xor(b_6, (b_6 / 2));
    }

    static long dec(long g_7) {
        long b_8 = 0;
        long x_9 = g_7;
        while ((x_9 > 0)) {
            b_8 = xor(b_8, x_9);
            x_9 = (x_9 / 2);
        };
        return b_8;
    }

    static string binary(long n_10) {
        if ((n_10 == 0)) {
            return "0";
        };
        string s_11 = "";
        long x_12 = n_10;
        while ((x_12 > 0)) {
            if (((x_12 % 2) == 1)) {
                s_11 = ("1" + s_11);
            } else {
                s_11 = ("0" + s_11);
            }
            x_12 = (x_12 / 2);
        };
        return s_11;
    }

    static string pad5(string s_13) {
        string p_14 = s_13;
        while ((p_14.Length < 5)) {
            p_14 = ("0" + p_14);
        };
        return p_14;
    }

    static void main() {
        Console.WriteLine(_fmtTop("decimal  binary   gray    decoded"));
        long b_15 = 0;
        while ((b_15 < 32)) {
            long g_16 = enc(b_15);
            long d_17 = dec(g_16);
            Console.WriteLine(_fmtTop(((((((("  " + pad5(binary(b_15))) + "   ") + pad5(binary(g_16))) + "   ") + pad5(binary(d_17))) + "  ") + (d_17).ToString())));
            b_15 = (b_15 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
