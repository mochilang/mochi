// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double xMin_0 = -2.182;
    static double xMax_1 = 2.6558;
    static double yMin_2 = 0;
    static double yMax_3 = 9.9983;
    static long width_4 = 60;
    static long nIter_5 = 10000;
    static double dx_6 = (xMax_1 - xMin_0);
    static double dy_7 = (yMax_3 - yMin_2);
    static dynamic height_8 = Convert.ToInt64(((width_4 * dy_7) / dx_6));
    static string[][] grid_9 = new string[][]{};
    static long row_10 = 0;
    static long seed_13 = 1;
    static double x_15 = 0;
    static double y_16 = 0;
    static dynamic ix_17 = Convert.ToInt64(((((dynamic)Convert.ToDouble(width_4)) * ((dynamic)(x_15 - xMin_0))) / dx_6));
    static dynamic iy_18 = Convert.ToInt64(((((dynamic)Convert.ToDouble(height_8)) * ((dynamic)(yMax_3 - y_16))) / dy_7));
    static long i_19 = 0;
    static long[] randInt(long s, long n) {
        long next_14 = (((s * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_14, (next_14 % n)};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((row_10 < height_8)) {
                string[] line_11 = new string[]{};
                long col_12 = 0;
                while ((col_12 < width_4)) {
                    line_11 = (Enumerable.ToArray(Enumerable.Append(line_11, " ")));
                    col_12 = (col_12 + 1);
                }
                grid_9 = (Enumerable.ToArray(Enumerable.Append(grid_9, line_11)));
                row_10 = (row_10 + 1);
            }
            if (((((ix_17 >= 0) && (ix_17 < width_4)) && (iy_18 >= 0)) && (iy_18 < height_8))) {
                grid_9[(int)(iy_18)][ix_17] = "*";
            }
            while ((i_19 < nIter_5)) {
                long[] res_20 = randInt(seed_13, 100);
                seed_13 = res_20[(int)(0)];
                long r_21 = res_20[(int)(1)];
                if ((r_21 < 85)) {
                    double nx_22 = ((0.85 * x_15) + (0.04 * y_16));
                    double ny_23 = (((-0.04 * x_15) + (0.85 * y_16)) + 1.6);
                    x_15 = nx_22;
                    y_16 = ny_23;
                } else {
                    if ((r_21 < 92)) {
                        double nx_24 = ((0.2 * x_15) - (0.26 * y_16));
                        double ny_25 = (((0.23 * x_15) + (0.22 * y_16)) + 1.6);
                        x_15 = nx_24;
                        y_16 = ny_25;
                    } else {
                        if ((r_21 < 99)) {
                            double nx_26 = ((-0.15 * x_15) + (0.28 * y_16));
                            double ny_27 = (((0.26 * x_15) + (0.24 * y_16)) + 0.44);
                            x_15 = nx_26;
                            y_16 = ny_27;
                        } else {
                            x_15 = 0;
                            y_16 = (0.16 * y_16);
                        }
                    }
                }
                ix_17 = Convert.ToInt64(((((dynamic)Convert.ToDouble(width_4)) * ((dynamic)(x_15 - xMin_0))) / dx_6));
                iy_18 = Convert.ToInt64(((((dynamic)Convert.ToDouble(height_8)) * ((dynamic)(yMax_3 - y_16))) / dy_7));
                if (((((ix_17 >= 0) && (ix_17 < width_4)) && (iy_18 >= 0)) && (iy_18 < height_8))) {
                    grid_9[(int)(iy_18)][ix_17] = "*";
                }
                i_19 = (i_19 + 1);
            }
            row_10 = 0;
            while ((row_10 < height_8)) {
                string line_28 = "";
                long col_29 = 0;
                while ((col_29 < width_4)) {
                    line_28 = (line_28 + grid_9[(int)(row_10)][(int)(col_29)]);
                    col_29 = (col_29 + 1);
                }
                Console.WriteLine(_fmtTop(line_28));
                row_10 = (row_10 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
