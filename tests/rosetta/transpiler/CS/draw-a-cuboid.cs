// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string repeat(string ch_0, long n_1) {
        string s_2 = "";
        long i_3 = 0;
        while ((i_3 < n_1)) {
            s_2 = (s_2 + ch_0);
            i_3 = (i_3 + 1);
        };
        return s_2;
    }

    static void cubLine(long n_4, long dx_5, long dy_6, string cde_7) {
        string line_8 = (repeat(" ", (n_4 + 1)) + cde_7.Substring((int)(0), (int)(1 - 0)));
        long d_9 = ((9 * dx_5) - 1);
        while ((d_9 > 0)) {
            line_8 = (line_8 + cde_7.Substring((int)(1), (int)(2 - 1)));
            d_9 = (d_9 - 1);
        };
        line_8 = (line_8 + cde_7.Substring((int)(0), (int)(1 - 0)));
        line_8 = ((line_8 + repeat(" ", dy_6)) + cde_7.Substring((int)(2), (int)(cde_7.Length - 2)));
        Console.WriteLine(_fmtTop(line_8));
    }

    static void cuboid(long dx_10, long dy_11, long dz_12) {
        Console.WriteLine(_fmtTop((((((("cuboid " + (dx_10).ToString()) + " ") + (dy_11).ToString()) + " ") + (dz_12).ToString()) + ":")));
        cubLine((dy_11 + 1), dx_10, 0, "+-");
        long i_13 = 1;
        while ((i_13 <= dy_11)) {
            cubLine(((dy_11 - i_13) + 1), dx_10, (i_13 - 1), "/ |");
            i_13 = (i_13 + 1);
        };
        cubLine(0, dx_10, dy_11, "+-|");
        long j_14 = (((4 * dz_12) - dy_11) - 2);
        while ((j_14 > 0)) {
            cubLine(0, dx_10, dy_11, "| |");
            j_14 = (j_14 - 1);
        };
        cubLine(0, dx_10, dy_11, "| +");
        i_13 = 1;
        while ((i_13 <= dy_11)) {
            cubLine(0, dx_10, (dy_11 - i_13), "| /");
            i_13 = (i_13 + 1);
        };
        cubLine(0, dx_10, 0, "+-\n");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            cuboid(2, 3, 4);
            Console.WriteLine(_fmtTop(""));
            cuboid(1, 1, 1);
            Console.WriteLine(_fmtTop(""));
            cuboid(6, 2, 1);
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
