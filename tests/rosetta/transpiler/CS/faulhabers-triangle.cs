// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    class BigRat {
        public BigInteger num;
        public BigInteger den;
        public BigRat(BigInteger n, BigInteger d) {
            if (d.Sign < 0) { n = BigInteger.Negate(n); d = BigInteger.Negate(d); }
            var g = BigInteger.GreatestCommonDivisor(n, d);
            num = n / g; den = d / g;
        }
        public override string ToString() => den.Equals(BigInteger.One) ? num.ToString() : num.ToString()+"/"+den.ToString();
    }
    static BigInteger _toBigInt(object x) {
        if (x is BigInteger bi) return bi;
        if (x is BigRat br) return br.num;
        if (x is int ii) return new BigInteger(ii);
        if (x is long ll) return new BigInteger(ll);
        if (x is double dd) return new BigInteger((long)dd);
        if (x is string ss) return BigInteger.Parse(ss);
        return BigInteger.Zero;
    }
    static BigRat _bigrat(object n, object d = null) {
        var nn = _toBigInt(n);
        var dd = d == null ? BigInteger.One : _toBigInt(d);
        return new BigRat(nn, dd);
    }
    static BigRat _add(object a, object b) { var x=_bigrat(a, null); var y=_bigrat(b, null); return new BigRat(x.num*y.den + y.num*x.den, x.den*y.den); }
    static BigRat _sub(object a, object b) { var x=_bigrat(a, null); var y=_bigrat(b, null); return new BigRat(x.num*y.den - y.num*x.den, x.den*y.den); }
    static BigRat _mul(object a, object b) { var x=_bigrat(a, null); var y=_bigrat(b, null); return new BigRat(x.num*y.num, x.den*y.den); }
    static BigRat _div(object a, object b) { var x=_bigrat(a, null); var y=_bigrat(b, null); return new BigRat(x.num*y.den, x.den*y.num); }
    static BigRat _neg(object a) { var x=_bigrat(a, null); return new BigRat(BigInteger.Negate(x.num), x.den); }
    static BigInteger _num(object x) { return x is BigRat br ? br.num : _toBigInt(x); }
    static BigInteger _denom(object x) { return x is BigRat br ? br.den : BigInteger.One; }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static BigRat bernoulli(long n_0) {
        BigRat[] a_1 = new BigRat[]{};
        long m_2 = 0;
        while ((m_2 <= n_0)) {
            a_1 = (Enumerable.ToArray(Enumerable.Append(a_1, _div(_bigrat(1), _bigrat((m_2 + 1))))));
            long j_3 = m_2;
            while ((j_3 >= 1)) {
                a_1[(j_3 - 1)] = _mul(_bigrat(j_3), _sub(a_1[(int)((j_3 - 1))], a_1[(int)(j_3)]));
                j_3 = (j_3 - 1);
            }
            m_2 = (m_2 + 1);
        };
        if ((n_0 != 1)) {
            return a_1[(int)(0)];
        };
        return _neg(a_1[(int)(0)]);
    }

    static BigInteger binom(long n_4, long k_5) {
        if (((k_5 < 0) || (k_5 > n_4))) {
            return new BigInteger(0);
        };
        long kk_6 = k_5;
        if ((kk_6 > (n_4 - kk_6))) {
            kk_6 = (n_4 - kk_6);
        };
        BigInteger res_7 = 1;
        long i_8 = 0;
        while ((i_8 < kk_6)) {
            res_7 = (res_7 * new BigInteger((n_4 - i_8)));
            i_8 = (i_8 + 1);
            res_7 = (res_7 / new BigInteger(i_8));
        };
        return res_7;
    }

    static BigRat[] faulhaberRow(long p_9) {
        BigRat[] coeffs_10 = new BigRat[]{};
        long i_11 = 0;
        while ((i_11 <= p_9)) {
            coeffs_10 = (Enumerable.ToArray(Enumerable.Append(coeffs_10, _bigrat(0))));
            i_11 = (i_11 + 1);
        };
        long j_12 = 0;
        long sign_13 = -1;
        while ((j_12 <= p_9)) {
            sign_13 = -sign_13;
            BigRat c_14 = _div(_bigrat(1), _bigrat((p_9 + 1)));
            if ((sign_13 < 0)) {
                c_14 = _neg(c_14);
            }
            c_14 = _mul(c_14, _bigrat(binom((p_9 + 1), j_12)));
            c_14 = _mul(c_14, bernoulli(j_12));
            coeffs_10[(p_9 - j_12)] = c_14;
            j_12 = (j_12 + 1);
        };
        return coeffs_10;
    }

    static string ratStr(BigRat r_15) {
        string s_16 = (r_15).ToString();
        if (endsWith(s_16, "/1")) {
            return s_16.Substring((int)(0), (int)((((dynamic)s_16.Length) - ((dynamic)2)) - 0));
        };
        return s_16;
    }

    static bool endsWith(string s_17, string suf_18) {
        if ((s_17.Length < suf_18.Length)) {
            return false;
        };
        return (s_17.Substring((int)((((dynamic)s_17.Length) - ((dynamic)suf_18.Length))), (int)(s_17.Length - (((dynamic)s_17.Length) - ((dynamic)suf_18.Length)))) == suf_18);
    }

    static void main() {
        long p_19 = 0;
        while ((p_19 < 10)) {
            BigRat[] row_20 = faulhaberRow(p_19);
            string line_21 = "";
            long idx_22 = 0;
            while ((idx_22 < row_20.Length)) {
                line_21 = (((dynamic)line_21) + ((dynamic)ratStr(row_20[(int)(idx_22)]).PadLeft(5, ' ')));
                if ((idx_22 < (((dynamic)row_20.Length) - ((dynamic)1)))) {
                    line_21 = (line_21 + "  ");
                }
                idx_22 = (idx_22 + 1);
            }
            Console.WriteLine(_fmtTop(line_21));
            p_19 = (p_19 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long k_23 = 17;
        BigRat[] coeffs_24 = faulhaberRow(k_23);
        BigRat nn_25 = _bigrat(1000);
        BigRat np_26 = _bigrat(1);
        BigRat sum_27 = _bigrat(0);
        long i_28 = 0;
        while ((i_28 < coeffs_24.Length)) {
            np_26 = _mul(np_26, nn_25);
            sum_27 = _add(sum_27, _mul(coeffs_24[(int)(i_28)], np_26));
            i_28 = (i_28 + 1);
        };
        Console.WriteLine(_fmtTop(ratStr(sum_27)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
