// Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] words_0 = new string[]{};
        string cur_1 = "";
        long i_2 = 0;
        while ((i_2 < s.Length)) {
            string ch_3 = s.Substring((int)(i_2), (int)((i_2 + 1) - i_2));
            if ((((ch_3 == " ") || (ch_3 == "\n")) || (ch_3 == "\t"))) {
                if ((cur_1.Length > 0)) {
                    words_0 = (Enumerable.ToArray(Enumerable.Append(words_0, cur_1)));
                    cur_1 = "";
                }
            } else {
                cur_1 = (cur_1 + ch_3);
            }
            i_2 = (i_2 + 1);
        };
        if ((cur_1.Length > 0)) {
            words_0 = (Enumerable.ToArray(Enumerable.Append(words_0, cur_1)));
        };
        return words_0;
    }

    static string join(string[] xs, string sep) {
        string res_4 = "";
        long i_5 = 0;
        while ((i_5 < xs.Length)) {
            if ((i_5 > 0)) {
                res_4 = (res_4 + sep);
            }
            res_4 = (res_4 + xs[i_5]);
            i_5 = (i_5 + 1);
        };
        return res_4;
    }

    static string numberName(long n) {
        string[] small_6 = new string[]{"no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
        string[] tens_7 = new string[]{"ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
        if ((n < 0)) {
            return "";
        };
        if ((n < 20)) {
            return small_6[n];
        };
        if ((n < 100)) {
            string t_8 = tens_7[Convert.ToInt32((n / 10))];
            long s_9 = (n % 10);
            if ((s_9 > 0)) {
                t_8 = ((t_8 + " ") + small_6[s_9]);
            }
            return t_8;
        };
        return "";
    }

    static string pluralizeFirst(string s, long n) {
        if ((n == 1)) {
            return s;
        };
        string[] w_10 = fields(s);
        if ((w_10.Length > 0)) {
            w_10[0] = (w_10[0] + "s");
        };
        return join(w_10, " ");
    }

    static long randInt(long seed, long n) {
        long next_11 = (((seed * 1664525) + 1013904223) % 2147483647);
        return (next_11 % n);
    }

    static string slur(string p, long d) {
        if ((p.Length <= 2)) {
            return p;
        };
        string[] a_12 = new string[]{};
        long i_13 = 1;
        while ((i_13 < (p.Length - 1))) {
            a_12 = (Enumerable.ToArray(Enumerable.Append(a_12, p.Substring((int)(i_13), (int)((i_13 + 1) - i_13)))));
            i_13 = (i_13 + 1);
        };
        long idx_14 = (a_12.Length - 1);
        long seed_15 = d;
        while ((idx_14 >= 1)) {
            seed_15 = (((seed_15 * 1664525) + 1013904223) % 2147483647);
            if (((seed_15 % 100) >= d)) {
                long j_16 = (seed_15 % (idx_14 + 1));
                string tmp_17 = a_12[idx_14];
                a_12[idx_14] = a_12[j_16];
                a_12[j_16] = tmp_17;
            }
            idx_14 = (idx_14 - 1);
        };
        string s_18 = p.Substring((int)(0), (int)(1 - 0));
        long k_19 = 0;
        while ((k_19 < a_12.Length)) {
            s_18 = (s_18 + a_12[k_19]);
            k_19 = (k_19 + 1);
        };
        s_18 = (s_18 + p.Substring((int)((p.Length - 1)), (int)(p.Length - (p.Length - 1))));
        string[] w_20 = fields(s_18);
        return join(w_20, " ");
    }

    static void main() {
        long i_21 = 99;
        while ((i_21 > 0)) {
            Console.WriteLine(_fmtTop(((((slur(numberName(i_21), i_21) + " ") + pluralizeFirst(slur("bottle of", i_21), i_21)) + " ") + slur("beer on the wall", i_21))));
            Console.WriteLine(_fmtTop(((((slur(numberName(i_21), i_21) + " ") + pluralizeFirst(slur("bottle of", i_21), i_21)) + " ") + slur("beer", i_21))));
            Console.WriteLine(_fmtTop(((((slur("take one", i_21) + " ") + slur("down", i_21)) + " ") + slur("pass it around", i_21))));
            Console.WriteLine(_fmtTop(((((slur(numberName((i_21 - 1)), i_21) + " ") + pluralizeFirst(slur("bottle of", i_21), (i_21 - 1))) + " ") + slur("beer on the wall", i_21))));
            i_21 = (i_21 - 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
