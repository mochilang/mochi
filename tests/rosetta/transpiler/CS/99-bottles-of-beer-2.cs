// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s_0) {
        string[] words_1 = new string[]{};
        string cur_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string ch_4 = s_0.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            if ((((ch_4 == " ") || (ch_4 == "\n")) || (ch_4 == "\t"))) {
                if ((cur_2.Length > 0)) {
                    words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
                    cur_2 = "";
                }
            } else {
                cur_2 = (cur_2 + ch_4);
            }
            i_3 = (i_3 + 1);
        };
        if ((cur_2.Length > 0)) {
            words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
        };
        return words_1;
    }

    static string join(string[] xs_5, string sep_6) {
        string res_7 = "";
        long i_8 = 0;
        while ((i_8 < xs_5.Length)) {
            if ((i_8 > 0)) {
                res_7 = (res_7 + sep_6);
            }
            res_7 = (res_7 + xs_5[(int)(i_8)]);
            i_8 = (i_8 + 1);
        };
        return res_7;
    }

    static string numberName(long n_9) {
        string[] small_10 = new string[]{"no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
        string[] tens_11 = new string[]{"ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
        if ((n_9 < 0)) {
            return "";
        };
        if ((n_9 < 20)) {
            return small_10[(int)(n_9)];
        };
        if ((n_9 < 100)) {
            string t_12 = tens_11[(int)(Convert.ToInt64((n_9 / 10)))];
            long s_13 = (n_9 % 10);
            if ((s_13 > 0)) {
                t_12 = ((t_12 + " ") + small_10[(int)(s_13)]);
            }
            return t_12;
        };
        return "";
    }

    static string pluralizeFirst(string s_14, long n_15) {
        if ((n_15 == 1)) {
            return s_14;
        };
        string[] w_16 = fields(s_14);
        if ((w_16.Length > 0)) {
            w_16[0] = (w_16[(int)(0)] + "s");
        };
        return join(w_16, " ");
    }

    static long randInt(long seed_17, long n_18) {
        long next_19 = (((seed_17 * 1664525) + 1013904223) % 2147483647);
        return (next_19 % n_18);
    }

    static string slur(string p_20, long d_21) {
        if ((p_20.Length <= 2)) {
            return p_20;
        };
        string[] a_22 = new string[]{};
        long i_23 = 1;
        while ((i_23 < (((dynamic)(p_20.Length)) - ((dynamic)(1))))) {
            a_22 = (Enumerable.ToArray(Enumerable.Append(a_22, p_20.Substring((int)(i_23), (int)((i_23 + 1) - i_23)))));
            i_23 = (i_23 + 1);
        };
        long idx_24 = (((dynamic)(a_22.Length)) - ((dynamic)(1)));
        long seed_25 = d_21;
        while ((idx_24 >= 1)) {
            seed_25 = (((seed_25 * 1664525) + 1013904223) % 2147483647);
            if (((seed_25 % 100) >= d_21)) {
                long j_26 = (seed_25 % (idx_24 + 1));
                string tmp_27 = a_22[(int)(idx_24)];
                a_22[idx_24] = a_22[(int)(j_26)];
                a_22[j_26] = tmp_27;
            }
            idx_24 = (idx_24 - 1);
        };
        string s_28 = p_20.Substring((int)(0), (int)(1 - 0));
        long k_29 = 0;
        while ((k_29 < a_22.Length)) {
            s_28 = (s_28 + a_22[(int)(k_29)]);
            k_29 = (k_29 + 1);
        };
        s_28 = (s_28 + p_20.Substring((int)((((dynamic)(p_20.Length)) - ((dynamic)(1)))), (int)(p_20.Length - (((dynamic)(p_20.Length)) - ((dynamic)(1))))));
        string[] w_30 = fields(s_28);
        return join(w_30, " ");
    }

    static void main() {
        long i_31 = 99;
        while ((i_31 > 0)) {
            Console.WriteLine(_fmtTop(((((slur(numberName(i_31), i_31) + " ") + pluralizeFirst(slur("bottle of", i_31), i_31)) + " ") + slur("beer on the wall", i_31))));
            Console.WriteLine(_fmtTop(((((slur(numberName(i_31), i_31) + " ") + pluralizeFirst(slur("bottle of", i_31), i_31)) + " ") + slur("beer", i_31))));
            Console.WriteLine(_fmtTop(((((slur("take one", i_31) + " ") + slur("down", i_31)) + " ") + slur("pass it around", i_31))));
            Console.WriteLine(_fmtTop(((((slur(numberName((i_31 - 1)), i_31) + " ") + pluralizeFirst(slur("bottle of", i_31), (i_31 - 1))) + " ") + slur("beer on the wall", i_31))));
            i_31 = (i_31 - 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
