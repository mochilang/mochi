// Generated by Mochi 0.10.39 on 2025-07-24 08:16 UTC
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] words = new string[]{};
        string cur = "";
        int i = 0;
        while ((i < s.Length)) {
            string ch = s.Substring(i, ((i + 1) - i));
            if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
                if ((cur.Length > 0)) {
                    words = (words.Append(cur).ToArray());
                    cur = "";
                }
            } else {
                cur = (cur + ch);
            }
            i = (i + 1);
        };
        if ((cur.Length > 0)) {
            words = (words.Append(cur).ToArray());
        };
        return words;
    }

    static string join(string[] xs, string sep) {
        string res = "";
        int i = 0;
        while ((i < xs.Length)) {
            if ((i > 0)) {
                res = (res + sep);
            }
            res = (res + xs[i]);
            i = (i + 1);
        };
        return res;
    }

    static string numberName(int n) {
        string[] small = new string[]{"no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
        string[] tens = new string[]{"ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
        if ((n < 0)) {
            return "";
        };
        if ((n < 20)) {
            return small[n];
        };
        if ((n < 100)) {
            var t = tens[Convert.ToInt32((n / 10))];
            int s = (n % 10);
            if ((s > 0)) {
                t = ((t + " ") + small[s]);
            }
            return t;
        };
        return "";
    }

    static string pluralizeFirst(string s, int n) {
        if ((n == 1)) {
            return s;
        };
        string[] w = fields(s);
        if ((w.Length > 0)) {
            w[0] = (w[0] + "s");
        };
        return join(w, " ");
    }

    static int randInt(int seed, int n) {
        int next = (((seed * 1664525) + 1013904223) % 2147483647);
        return (next % n);
    }

    static string slur(string p, int d) {
        if ((p.Length <= 2)) {
            return p;
        };
        string[] a = new string[]{};
        int i = 1;
        while ((i < (p.Length - 1))) {
            a = (a.Append(p.Substring(i, ((i + 1) - i))).ToArray());
            i = (i + 1);
        };
        int idx = (a.Length - 1);
        int seed = d;
        while ((idx >= 1)) {
            seed = (((seed * 1664525) + 1013904223) % 2147483647);
            if (((seed % 100) >= d)) {
                int j = (seed % (idx + 1));
                var tmp = a[idx];
                a[idx] = a[j];
                a[j] = tmp;
            }
            idx = (idx - 1);
        };
        string s = p.Substring(0, (1 - 0));
        int k = 0;
        while ((k < a.Length)) {
            s = (s + a[k]);
            k = (k + 1);
        };
        s = (s + p.Substring((p.Length - 1), (p.Length - (p.Length - 1))));
        string[] w = fields(s);
        return join(w, " ");
    }

    static void main() {
        int i = 99;
        while ((i > 0)) {
            Console.WriteLine(_fmtTop(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer on the wall", i))));
            Console.WriteLine(_fmtTop(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer", i))));
            Console.WriteLine(_fmtTop(((((slur("take one", i) + " ") + slur("down", i)) + " ") + slur("pass it around", i))));
            Console.WriteLine(_fmtTop(((((slur(numberName((i - 1)), i) + " ") + pluralizeFirst(slur("bottle of", i), (i - 1))) + " ") + slur("beer on the wall", i))));
            i = (i - 1);
        };
    }

    static void Main() {
        main();
    }
}
