// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static long w_0 = 400;
    static long h_1 = 300;
    static long n_2 = 15000;
    static long frost_3 = 255;
    static long[][] grid_4 = new long[][]{};
    static long y_5 = 0;
    static long a_16 = 0;
    static bool inBounds(long x_8, long y_9) {
        return ((((x_8 >= 0) && (x_8 < w_0)) && (y_9 >= 0)) && (y_9 < h_1));
    }

    static bool hasNeighbor(long x_10, long y_11) {
        long dy_12 = -1;
        while ((dy_12 <= 1)) {
            long dx_13 = -1;
            while ((dx_13 <= 1)) {
                if ((!((dx_13 == 0) && (dy_12 == 0)))) {
                    long nx_14 = (x_10 + dx_13);
                    long ny_15 = (y_11 + dy_12);
                    if ((inBounds(nx_14, ny_15) && (grid_4[(int)(ny_15)][(int)(nx_14)] == frost_3))) {
                        return true;
                    }
                }
                dx_13 = (dx_13 + 1);
            }
            dy_12 = (dy_12 + 1);
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((y_5 < h_1)) {
                long[] row_6 = new long[]{};
                long x_7 = 0;
                while ((x_7 < w_0)) {
                    row_6 = (Enumerable.ToArray(Enumerable.Append(row_6, 0)));
                    x_7 = (x_7 + 1);
                }
                grid_4 = (Enumerable.ToArray(Enumerable.Append(grid_4, row_6)));
                y_5 = (y_5 + 1);
            }
            grid_4[(int)((h_1 / 3))][(w_0 / 3)] = frost_3;
            while ((a_16 < n_2)) {
                long px_17 = (_now() % w_0);
                long py_18 = (_now() % h_1);
                if ((grid_4[(int)(py_18)][(int)(px_17)] == frost_3)) {
                    bool lost_19 = false;
                    while (true) {
                        px_17 = ((px_17 + (_now() % 3)) - 1);
                        py_18 = ((py_18 + (_now() % 3)) - 1);
                        if ((!inBounds(px_17, py_18))) {
                            lost_19 = true;
                            break;
                        }
                        if ((grid_4[(int)(py_18)][(int)(px_17)] != frost_3)) {
                            break;
                        }
                    }
                    if (lost_19) {
                        continue;
                    }
                } else {
                    bool lost_20 = false;
                    while ((!hasNeighbor(px_17, py_18))) {
                        px_17 = ((px_17 + (_now() % 3)) - 1);
                        py_18 = ((py_18 + (_now() % 3)) - 1);
                        if ((!inBounds(px_17, py_18))) {
                            lost_20 = true;
                            break;
                        }
                    }
                    if (lost_20) {
                        continue;
                    }
                }
                grid_4[(int)(py_18)][px_17] = frost_3;
                a_16 = (a_16 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
