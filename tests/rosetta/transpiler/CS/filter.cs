// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] randPerm(long n_0) {
        long[] arr_1 = new long[]{};
        long i_2 = 0;
        while ((i_2 < n_0)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append(arr_1, i_2)));
            i_2 = (i_2 + 1);
        };
        long idx_3 = (n_0 - 1);
        while ((idx_3 > 0)) {
            long j_4 = (_now() % (idx_3 + 1));
            long tmp_5 = arr_1[(int)(idx_3)];
            arr_1[idx_3] = arr_1[(int)(j_4)];
            arr_1[j_4] = tmp_5;
            idx_3 = (idx_3 - 1);
        };
        return arr_1;
    }

    static long[] even(long[] xs_6) {
        long[] r_7 = new long[]{};
        foreach (var x_8 in xs_6) {
            if (((x_8 % 2) == 0)) {
                r_7 = (Enumerable.ToArray(Enumerable.Append(r_7, x_8)));
            }
        };
        return r_7;
    }

    static long[] reduceToEven(long[] xs_9) {
        long[] arr_10 = xs_9;
        long last_11 = 0;
        long i_12 = 0;
        while ((i_12 < arr_10.Length)) {
            long e_13 = arr_10[(int)(i_12)];
            if (((e_13 % 2) == 0)) {
                arr_10[last_11] = e_13;
                last_11 = (last_11 + 1);
            }
            i_12 = (i_12 + 1);
        };
        return arr_10.Skip((int)(0)).Take((int)((last_11 - 0))).ToArray();
    }

    static string listStr(long[] xs_14) {
        string s_15 = "[";
        long i_16 = 0;
        while ((i_16 < xs_14.Length)) {
            s_15 = (s_15 + (xs_14[(int)(i_16)]).ToString());
            if (((i_16 + 1) < xs_14.Length)) {
                s_15 = (s_15 + " ");
            }
            i_16 = (i_16 + 1);
        };
        s_15 = (s_15 + "]");
        return s_15;
    }

    static void main() {
        long[] a_17 = randPerm(20);
        long cap_a_18 = 20;
        Console.WriteLine(_fmtTop(listStr(a_17)));
        Console.WriteLine(_fmtTop(listStr(even(a_17))));
        Console.WriteLine(_fmtTop(listStr(a_17)));
        a_17 = reduceToEven(a_17);
        Console.WriteLine(_fmtTop(listStr(a_17)));
        Console.WriteLine(_fmtTop(((("a len: " + (a_17.Length).ToString()) + " cap: ") + (cap_a_18).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
