// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class cds {
    public long i;
    public string s;
    public long[] b;
    public Dictionary<long, bool> m;
    public override string ToString() => $"cds {{i = {i}, s = \"{s}\", b = {b}, m = {m}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static cds c1_13 = new cds{i = 1, s = "one", b = new long[]{117, 110, 105, 116}, m = new Dictionary<long, bool>{{1, true}}};
    static cds c2_14 = deepcopy(c1_13);
    static long[] copyList(long[] src_0) {
        long[] out_1 = new long[]{};
        foreach (var v_2 in src_0) {
            out_1 = (Enumerable.ToArray(Enumerable.Append(out_1, v_2)));
        };
        return out_1;
    }

    static Dictionary<long, bool> copyMap(Dictionary<long, bool> src_3) {
        Dictionary<long, bool> out_4 = new Dictionary<long, bool>{};
        foreach (var k_5 in src_3.Keys) {
            out_4[k_5] = (src_3.ContainsKey(k_5) ? src_3[k_5] : false);
        };
        return out_4;
    }

    static cds deepcopy(cds c_6) {
        return new cds{i = c_6.i, s = c_6.s, b = copyList(c_6.b), m = copyMap(c_6.m)};
    }

    static string cdsStr(cds c_7) {
        string bs_8 = "[";
        long i_9 = 0;
        while ((i_9 < c_7.b.Length)) {
            bs_8 = (bs_8 + (c_7.b[(int)(i_9)]).ToString());
            if ((i_9 < (((dynamic)c_7.b.Length) - ((dynamic)1)))) {
                bs_8 = (bs_8 + " ");
            }
            i_9 = (i_9 + 1);
        };
        bs_8 = (bs_8 + "]");
        string ms_10 = "map[";
        bool first_11 = true;
        foreach (var k_12 in c_7.m.Keys) {
            if ((!first_11)) {
                ms_10 = (ms_10 + " ");
            }
            ms_10 = (((ms_10 + (k_12).ToString()) + ":") + ((c_7.m.ContainsKey(k_12) ? c_7.m[k_12] : false)).ToString());
            first_11 = false;
        };
        ms_10 = (ms_10 + "]");
        return (((((((("{" + (c_7.i).ToString()) + " ") + c_7.s) + " ") + bs_8) + " ") + ms_10) + "}");
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(cdsStr(c1_13)));
            Console.WriteLine(_fmtTop(cdsStr(c2_14)));
            c1_13 = new cds{i = 0, s = "nil", b = new long[]{122, 101, 114, 111}, m = new Dictionary<long, bool>{{1, false}}};
            Console.WriteLine(_fmtTop(cdsStr(c1_13)));
            Console.WriteLine(_fmtTop(cdsStr(c2_14)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
