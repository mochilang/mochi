// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Point {
    public double x;
    public double y;
    public override string ToString() => $"Point {{x = {x.ToString("0.0")}, y = {y.ToString("0.0")}}}";
}
class Line {
    public double slope;
    public double yint;
    public override string ToString() => $"Line {{slope = {slope.ToString("0.0")}, yint = {yint.ToString("0.0")}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Line createLine(Point a_0, Point b_1) {
        double slope_2 = ((b_1.y - a_0.y) / (b_1.x - a_0.x));
        double yint_3 = (a_0.y - (slope_2 * a_0.x));
        return new Line{slope = slope_2, yint = yint_3};
    }

    static double evalX(Line l_4, double x_5) {
        return ((l_4.slope * x_5) + l_4.yint);
    }

    static Point intersection(Line l1_6, Line l2_7) {
        if ((l1_6.slope == l2_7.slope)) {
            return new Point{x = 0, y = 0};
        };
        double x_8 = ((l2_7.yint - l1_6.yint) / (l1_6.slope - l2_7.slope));
        double y_9 = evalX(l1_6, x_8);
        return new Point{x = x_8, y = y_9};
    }

    static void main() {
        Line l1_10 = createLine(new Point{x = 4, y = 0}, new Point{x = 6, y = 10});
        Line l2_11 = createLine(new Point{x = 0, y = 3}, new Point{x = 10, y = 7});
        Point p_12 = intersection(l1_10, l2_11);
        Console.WriteLine(_fmtTop((((("{" + (p_12.x).ToString()) + " ") + (p_12.y).ToString()) + "}")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
