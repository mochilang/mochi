// Generated by Mochi 0.10.40 on 2025-07-25 12:58 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI = 3.141592653589793;
    static double L = 10;
    static double G = 9.81;
    static double dt = 0.2;
    static double phi0 = (PI / 4);
    static double omega = sqrtApprox((G / L));
    static double t = 0;
    static double sinApprox(double x) {
        double term = x;
        double sum = x;
        long n = 1;
        while ((n <= 10)) {
            var denom = Convert.ToDouble(((2 * n) * ((2 * n) + 1)));
            term = (((-term * x) * x) / denom);
            sum = (sum + term);
            n = (n + 1);
        };
        return sum;
    }

    static double cosApprox(double x) {
        double term = 1;
        double sum = 1;
        long n = 1;
        while ((n <= 10)) {
            var denom = Convert.ToDouble((((2 * n) - 1) * (2 * n)));
            term = (((-term * x) * x) / denom);
            sum = (sum + term);
            n = (n + 1);
        };
        return sum;
    }

    static double sqrtApprox(double x) {
        double guess = x;
        long i = 0;
        while ((i < 10)) {
            guess = ((guess + (x / guess)) / 2);
            i = (i + 1);
        };
        return guess;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var step_0 = 0; step_0 < 10; step_0++) {
                double phi = (phi0 * cosApprox((omega * t)));
                var pos = Convert.ToInt32(((10 * sinApprox(phi)) + 0.5));
                Console.WriteLine(_fmtTop((pos).ToString()));
                t = (t + dt);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
