// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double L_11 = 10;
    static double G_12 = 9.81;
    static double dt_13 = 0.2;
    static double phi0_14 = (PI_0 / 4);
    static double omega_15 = sqrtApprox((G_12 / L_11));
    static double t_16 = 0;
    static double sinApprox(double x) {
        double term_1 = x;
        double sum_2 = x;
        long n_3 = 1;
        while ((n_3 <= 10)) {
            var denom_4 = Convert.ToDouble(((2 * n_3) * ((2 * n_3) + 1)));
            term_1 = (((dynamic)((-term_1 * x) * x)) / ((dynamic)denom_4));
            sum_2 = (sum_2 + term_1);
            n_3 = (n_3 + 1);
        };
        return sum_2;
    }

    static double cosApprox(double x) {
        double term_5 = 1;
        double sum_6 = 1;
        long n_7 = 1;
        while ((n_7 <= 10)) {
            var denom_8 = Convert.ToDouble((((2 * n_7) - 1) * (2 * n_7)));
            term_5 = (((dynamic)((-term_5 * x) * x)) / ((dynamic)denom_8));
            sum_6 = (sum_6 + term_5);
            n_7 = (n_7 + 1);
        };
        return sum_6;
    }

    static double sqrtApprox(double x) {
        double guess_9 = x;
        long i_10 = 0;
        while ((i_10 < 10)) {
            guess_9 = ((guess_9 + (x / guess_9)) / 2);
            i_10 = (i_10 + 1);
        };
        return guess_9;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var step_17 = 0; step_17 < 10; step_17++) {
                double phi_18 = (phi0_14 * cosApprox((omega_15 * t_16)));
                var pos_19 = Convert.ToInt64(((10 * sinApprox(phi_18)) + 0.5));
                Console.WriteLine(_fmtTop((pos_19).ToString()));
                t_16 = (t_16 + dt_13);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
