// Generated by Mochi 0.10.50 on 2025-07-30 21:05 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string glyphs_0 = "♜♞♝♛♚♖♘♗♕♔";
    static Dictionary<string, string> g2lMap_1 = new Dictionary<string, string>{{"♜", "R"}, {"♞", "N"}, {"♝", "B"}, {"♛", "Q"}, {"♚", "K"}, {"♖", "R"}, {"♘", "N"}, {"♗", "B"}, {"♕", "Q"}, {"♔", "K"}};
    static Dictionary<string, string> names_2 = new Dictionary<string, string>{{"R", "rook"}, {"N", "knight"}, {"B", "bishop"}, {"Q", "queen"}, {"K", "king"}};
    static Dictionary<string, long> ntable_3 = new Dictionary<string, long>{{"01", 0}, {"02", 1}, {"03", 2}, {"04", 3}, {"12", 4}, {"13", 5}, {"14", 6}, {"23", 7}, {"24", 8}, {"34", 9}};
    static long indexOf(string s_4, string sub_5) {
        long i_6 = 0;
        while ((i_6 <= (((dynamic)s_4.Length) - ((dynamic)sub_5.Length)))) {
            if ((s_4.Substring((int)(i_6), (int)((((dynamic)i_6) + ((dynamic)sub_5.Length)) - i_6)) == sub_5)) {
                return i_6;
            }
            i_6 = (i_6 + 1);
        };
        return -1;
    }

    static string strReplace(string s_7, string old_8, string new_9) {
        string res_10 = "";
        long i_11 = 0;
        while ((i_11 < s_7.Length)) {
            if ((((old_8.Length > 0) && ((((dynamic)i_11) + ((dynamic)old_8.Length)) <= s_7.Length)) && (s_7.Substring((int)(i_11), (int)((((dynamic)i_11) + ((dynamic)old_8.Length)) - i_11)) == old_8))) {
                res_10 = (res_10 + new_9);
                i_11 = (((dynamic)i_11) + ((dynamic)old_8.Length));
            } else {
                res_10 = (res_10 + s_7.Substring((int)(i_11), (int)((i_11 + 1) - i_11)));
                i_11 = (i_11 + 1);
            }
        };
        return res_10;
    }

    static string g2l(string pieces_12) {
        string lets_13 = "";
        long i_14 = 0;
        while ((i_14 < pieces_12.Length)) {
            string ch_15 = pieces_12.Substring((int)(i_14), (int)((i_14 + 1) - i_14));
            lets_13 = (lets_13 + (g2lMap_1.ContainsKey(ch_15) ? g2lMap_1[ch_15] : ""));
            i_14 = (i_14 + 1);
        };
        return lets_13;
    }

    static long spid(string pieces_16) {
        pieces_16 = g2l(pieces_16);
        if ((pieces_16.Length != 8)) {
            return -1;
        };
        foreach (var one_17 in new string[]{"K", "Q"}) {
            long count_18 = 0;
            long i_19 = 0;
            while ((i_19 < pieces_16.Length)) {
                if ((pieces_16.Substring((int)(i_19), (int)((i_19 + 1) - i_19)) == one_17)) {
                    count_18 = (count_18 + 1);
                }
                i_19 = (i_19 + 1);
            }
            if ((count_18 != 1)) {
                return -1;
            }
        };
        foreach (var two_20 in new string[]{"R", "N", "B"}) {
            long count_21 = 0;
            long i_22 = 0;
            while ((i_22 < pieces_16.Length)) {
                if ((pieces_16.Substring((int)(i_22), (int)((i_22 + 1) - i_22)) == two_20)) {
                    count_21 = (count_21 + 1);
                }
                i_22 = (i_22 + 1);
            }
            if ((count_21 != 2)) {
                return -1;
            }
        };
        long r1_23 = indexOf(pieces_16, "R");
        long r2_24 = ((indexOf(pieces_16.Substring((int)((r1_23 + 1)), (int)(pieces_16.Length - (r1_23 + 1))), "R") + r1_23) + 1);
        long k_25 = indexOf(pieces_16, "K");
        if (((k_25 < r1_23) || (k_25 > r2_24))) {
            return -1;
        };
        long b1_26 = indexOf(pieces_16, "B");
        long b2_27 = ((indexOf(pieces_16.Substring((int)((b1_26 + 1)), (int)(pieces_16.Length - (b1_26 + 1))), "B") + b1_26) + 1);
        if ((((b2_27 - b1_26) % 2) == 0)) {
            return -1;
        };
        string piecesN_28 = strReplace(pieces_16, "Q", "");
        piecesN_28 = strReplace(piecesN_28, "B", "");
        long n1_29 = indexOf(piecesN_28, "N");
        long n2_30 = ((indexOf(piecesN_28.Substring((int)((n1_29 + 1)), (int)(piecesN_28.Length - (n1_29 + 1))), "N") + n1_29) + 1);
        string np_31 = ((n1_29).ToString() + (n2_30).ToString());
        long N_32 = (ntable_3.ContainsKey(np_31) ? ntable_3[np_31] : 0);
        string piecesQ_33 = strReplace(pieces_16, "B", "");
        long Q_34 = indexOf(piecesQ_33, "Q");
        long D_35 = indexOf("0246", (b1_26).ToString());
        long L_36 = indexOf("1357", (b2_27).ToString());
        if ((D_35 == (0 - 1))) {
            D_35 = indexOf("0246", (b2_27).ToString());
            L_36 = indexOf("1357", (b1_26).ToString());
        };
        return ((((96 * N_32) + (16 * Q_34)) + (4 * D_35)) + L_36);
    }

    static void main() {
        foreach (var pieces_37 in new string[]{"♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"}) {
            Console.WriteLine(_fmtTop(((((pieces_37 + " or ") + g2l(pieces_37)) + " has SP-ID of ") + (spid(pieces_37)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
