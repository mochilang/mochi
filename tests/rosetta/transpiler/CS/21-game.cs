// Generated by Mochi 0.10.40 on 2025-07-25 12:29 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.IO;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        return Console.ReadLine();
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long parseIntStr(string str) {
        long i = 0;
        bool neg = false;
        if (((str.Length > 0) && (str.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg = true;
            i = 1;
        };
        long n = 0;
        Dictionary<string, long> digits = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i < str.Length)) {
            n = ((n * 10) + digits[str.Substring((int)(i), (int)((i + 1) - i))]);
            i = (i + 1);
        };
        if (neg) {
            n = -n;
        };
        return n;
    }

    static void main() {
        long total = 0;
        bool computer = ((_now() % 2) == 0);
        Console.WriteLine(_fmtTop("Enter q to quit at any time\n"));
        if (computer) {
            Console.WriteLine(_fmtTop("The computer will choose first"));
        } else {
            Console.WriteLine(_fmtTop("You will choose first"));
        };
        Console.WriteLine(_fmtTop("\n\nRunning total is now 0\n\n"));
        long round = 1;
        bool done = false;
        while ((!done)) {
            Console.WriteLine(_fmtTop((("ROUND " + (round).ToString()) + ":\n\n")));
            long i = 0;
            while (((i < 2) && (!done))) {
                if (computer) {
                    long choice = 0;
                    if ((total < 18)) {
                        choice = ((_now() % 3) + 1);
                    } else {
                        choice = (21 - total);
                    }
                    total = (total + choice);
                    Console.WriteLine(_fmtTop(("The computer chooses " + (choice).ToString())));
                    Console.WriteLine(_fmtTop(("Running total is now " + (total).ToString())));
                    if ((total == 21)) {
                        Console.WriteLine(_fmtTop("\nSo, commiserations, the computer has won!"));
                        done = true;
                    }
                } else {
                    while (true) {
                        Console.WriteLine(_fmtTop("Your choice 1 to 3 : "));
                        string line = _input();
                        if (((line == "q") || (line == "Q"))) {
                            Console.WriteLine(_fmtTop("OK, quitting the game"));
                            done = true;
                            break;
                        }
                        long num = parseIntStr(line);
                        if (((num < 1) || (num > 3))) {
                            if (((total + num) > 21)) {
                                Console.WriteLine(_fmtTop("Too big, try again"));
                            } else {
                                Console.WriteLine(_fmtTop("Out of range, try again"));
                            }
                            continue;
                        }
                        if (((total + num) > 21)) {
                            Console.WriteLine(_fmtTop("Too big, try again"));
                            continue;
                        }
                        total = (total + num);
                        Console.WriteLine(_fmtTop(("Running total is now " + (total).ToString())));
                        break;
                    }
                    if ((total == 21)) {
                        Console.WriteLine(_fmtTop("\nSo, congratulations, you've won!"));
                        done = true;
                    }
                }
                Console.WriteLine(_fmtTop("\n"));
                computer = (!computer);
                i = (i + 1);
            }
            round = (round + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
