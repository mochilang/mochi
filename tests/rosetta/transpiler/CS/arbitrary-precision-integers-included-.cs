// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long e1_10 = pow_int(3, 2);
    static long e2_11 = pow_int(4, e1_10);
    static BigInteger base_12 = 5;
    static BigInteger x_13 = pow_big(base_12, e2_11);
    static string s_14 = (x_13).ToString();
    static long pow_int(long base_0, long exp_1) {
        long result_2 = 1;
        long b_3 = base_0;
        long e_4 = exp_1;
        while ((e_4 > 0)) {
            if (((e_4 % 2) == 1)) {
                result_2 = (result_2 * b_3);
            }
            b_3 = (b_3 * b_3);
            e_4 = Convert.ToInt64((e_4 / 2));
        };
        return result_2;
    }

    static BigInteger pow_big(BigInteger base_5, long exp_6) {
        BigInteger result_7 = 1;
        BigInteger b_8 = base_5;
        long e_9 = exp_6;
        while ((e_9 > 0)) {
            if (((e_9 % 2) == 1)) {
                result_7 = (result_7 * b_8);
            }
            b_8 = (b_8 * b_8);
            e_9 = Convert.ToInt64((e_9 / 2));
        };
        return result_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("5^(4^(3^2)) has"), _fmtTop(s_14.Length), _fmtTop("digits:"), _fmtTop(s_14.Substring((int)(0), (int)(20 - 0))), _fmtTop("..."), _fmtTop(s_14.Substring((int)((((dynamic)(s_14.Length)) - ((dynamic)(20)))), (int)(s_14.Length - (((dynamic)(s_14.Length)) - ((dynamic)(20))))))}));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
