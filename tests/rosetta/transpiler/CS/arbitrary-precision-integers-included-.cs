// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long e1_6 = pow_int(3, 2);
    static long e2_7 = pow_int(4, e1_6);
    static long base_8 = 5;
    static BigInteger x_9 = pow_big(base_8, e2_7);
    static string s_10 = (x_9).ToString();
    static long pow_int(long _base, long exp) {
        long result_0 = 1;
        long b_1 = _base;
        long e_2 = exp;
        while ((e_2 > 0)) {
            if (((e_2 % 2) == 1)) {
                result_0 = (result_0 * b_1);
            }
            b_1 = (b_1 * b_1);
            e_2 = Convert.ToInt64((e_2 / 2));
        };
        return result_0;
    }

    static BigInteger pow_big(BigInteger _base, long exp) {
        BigInteger result_3 = 1;
        BigInteger b_4 = _base;
        long e_5 = exp;
        while ((e_5 > 0)) {
            if (((e_5 % 2) == 1)) {
                result_3 = (result_3 * b_4);
            }
            b_4 = (b_4 * b_4);
            e_5 = Convert.ToInt64((e_5 / 2));
        };
        return result_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop("5^(4^(3^2)) has"), _fmtTop(s_10.Length), _fmtTop("digits:"), _fmtTop(s_10.Substring((int)(0), (int)(20 - 0))), _fmtTop("..."), _fmtTop(s_10.Substring((int)((((dynamic)s_10.Length) - ((dynamic)20))), (int)(s_10.Length - (((dynamic)s_10.Length) - ((dynamic)20)))))}));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
