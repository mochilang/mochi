// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

struct Pixel {
    public long r;
    public long g;
    public long b;
    public override string ToString() => $"Pixel {{r = {r}, g = {g}, b = {b}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static long b2Seg_0 = 20;
    static Dictionary<string, object> b_38 = newBitmap(400, 300);
    static Pixel pixelFromRgb(long rgb) {
        var r_1 = Convert.ToInt64(((rgb / 65536) % 256));
        var g_2 = Convert.ToInt64(((rgb / 256) % 256));
        var b_3 = Convert.ToInt64((rgb % 256));
        return new Pixel{r = r_1, g = g_2, b = b_3};
    }

    static Dictionary<string, object> newBitmap(long cols, long rows) {
        Pixel[][] d_4 = new Pixel[][]{};
        long y_5 = 0;
        while ((y_5 < rows)) {
            Pixel[] row_6 = new Pixel[]{};
            long x_7 = 0;
            while ((x_7 < cols)) {
                row_6 = (Enumerable.ToArray(Enumerable.Append(row_6, new Pixel{r = 0, g = 0, b = 0})));
                x_7 = (x_7 + 1);
            }
            d_4 = (Enumerable.ToArray(Enumerable.Append(d_4, row_6)));
            y_5 = (y_5 + 1);
        };
        return new Dictionary<string, object>{{"cols", cols}, {"rows", rows}, {"data", d_4}};
    }

    static void setPx(Dictionary<string, object> b, long x, long y, Pixel p) {
        var cols_8 = Convert.ToInt64(((dynamic)b)["cols"]);
        var rows_9 = Convert.ToInt64(((dynamic)b)["rows"]);
        if (((((x >= 0) && (x < cols_8)) && (y >= 0)) && (y < rows_9))) {
            ((dynamic)((dynamic)b)["data"])[y][x] = p;
        };
    }

    static void fill(Dictionary<string, object> b, Pixel p) {
        var cols_10 = Convert.ToInt64(((dynamic)b)["cols"]);
        var rows_11 = Convert.ToInt64(((dynamic)b)["rows"]);
        long y_12 = 0;
        while ((y_12 < rows_11)) {
            long x_13 = 0;
            while ((x_13 < cols_10)) {
                ((dynamic)((dynamic)b)["data"])[y_12][x_13] = p;
                x_13 = (x_13 + 1);
            }
            y_12 = (y_12 + 1);
        };
    }

    static void fillRgb(Dictionary<string, object> b, long rgb) {
        fill(b, pixelFromRgb(rgb));
    }

    static void line(Dictionary<string, object> b, long x0, long y0, long x1, long y1, Pixel p) {
        long dx_14 = (x1 - x0);
        if ((dx_14 < 0)) {
            dx_14 = -dx_14;
        };
        long dy_15 = (y1 - y0);
        if ((dy_15 < 0)) {
            dy_15 = -dy_15;
        };
        long sx_16 = -1;
        if ((x0 < x1)) {
            sx_16 = 1;
        };
        long sy_17 = -1;
        if ((y0 < y1)) {
            sy_17 = 1;
        };
        long err_18 = (dx_14 - dy_15);
        while (true) {
            setPx(b, x0, y0, p);
            if (((x0 == x1) && (y0 == y1))) {
                break;
            }
            long e2_19 = (2 * err_18);
            if ((e2_19 > (0 - dy_15))) {
                err_18 = (err_18 - dy_15);
                x0 = (x0 + sx_16);
            }
            if ((e2_19 < dx_14)) {
                err_18 = (err_18 + dx_14);
                y0 = (y0 + sy_17);
            }
        };
    }

    static void bezier2(Dictionary<string, object> b, long x1, long y1, long x2, long y2, long x3, long y3, Pixel p) {
        long[] px_20 = new long[]{};
        long[] py_21 = new long[]{};
        long i_22 = 0;
        while ((i_22 <= b2Seg_0)) {
            px_20 = (Enumerable.ToArray(Enumerable.Append(px_20, 0)));
            py_21 = (Enumerable.ToArray(Enumerable.Append(py_21, 0)));
            i_22 = (i_22 + 1);
        };
        var fx1_23 = Convert.ToDouble(x1);
        var fy1_24 = Convert.ToDouble(y1);
        var fx2_25 = Convert.ToDouble(x2);
        var fy2_26 = Convert.ToDouble(y2);
        var fx3_27 = Convert.ToDouble(x3);
        var fy3_28 = Convert.ToDouble(y3);
        i_22 = 0;
        while ((i_22 <= b2Seg_0)) {
            var c_29 = (((dynamic)Convert.ToDouble(i_22)) / ((dynamic)Convert.ToDouble(b2Seg_0)));
            double a_30 = (((dynamic)1) - ((dynamic)c_29));
            double a2_31 = (a_30 * a_30);
            double b2_32 = ((((dynamic)2) * ((dynamic)c_29)) * a_30);
            var c2_33 = (((dynamic)c_29) * ((dynamic)c_29));
            px_20[i_22] = Convert.ToInt64((((dynamic)((((dynamic)a2_31) * ((dynamic)fx1_23)) + (((dynamic)b2_32) * ((dynamic)fx2_25)))) + ((dynamic)(((dynamic)c2_33) * ((dynamic)fx3_27)))));
            py_21[i_22] = Convert.ToInt64((((dynamic)((((dynamic)a2_31) * ((dynamic)fy1_24)) + (((dynamic)b2_32) * ((dynamic)fy2_26)))) + ((dynamic)(((dynamic)c2_33) * ((dynamic)fy3_28)))));
            i_22 = (i_22 + 1);
        };
        long x0_34 = px_20[(int)(0)];
        long y0_35 = py_21[(int)(0)];
        i_22 = 1;
        while ((i_22 <= b2Seg_0)) {
            long x_36 = px_20[(int)(i_22)];
            long y_37 = py_21[(int)(i_22)];
            line(b, x0_34, y0_35, x_36, y_37, p);
            x0_34 = x_36;
            y0_35 = y_37;
            i_22 = (i_22 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            fillRgb(b_38, 14614575);
            bezier2(b_38, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
