// Generated by Mochi 0.10.42 on 2025-07-27 16:28 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] daysInMonth_0 = new long[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    static long[] start_1 = new long[]{3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1};
    static string[] months_2 = new string[]{" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"};
    static string[] days_3 = new string[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"};
    static long qtr_4 = 0;
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("                                [SNOOPY]\n"));
            Console.WriteLine(_fmtTop("                                  1969\n"));
            while ((qtr_4 < 4)) {
                long mi_5 = 0;
                while ((mi_5 < 3)) {
                    Console.WriteLine(string.Join(" ", new string[]{_fmtTop((("      " + months_2[(int)(((qtr_4 * 3) + mi_5))]) + "           ")), _fmtTop(false)}));
                    mi_5 = (mi_5 + 1);
                }
                Console.WriteLine(_fmtTop(""));
                mi_5 = 0;
                while ((mi_5 < 3)) {
                    long d_6 = 0;
                    while ((d_6 < 7)) {
                        Console.WriteLine(string.Join(" ", new string[]{_fmtTop((" " + days_3[(int)(d_6)])), _fmtTop(false)}));
                        d_6 = (d_6 + 1);
                    }
                    Console.WriteLine(string.Join(" ", new string[]{_fmtTop("     "), _fmtTop(false)}));
                    mi_5 = (mi_5 + 1);
                }
                Console.WriteLine(_fmtTop(""));
                long week_7 = 0;
                while ((week_7 < 6)) {
                    mi_5 = 0;
                    while ((mi_5 < 3)) {
                        long day_8 = 0;
                        while ((day_8 < 7)) {
                            long m_9 = ((qtr_4 * 3) + mi_5);
                            long val_10 = ((((week_7 * 7) + day_8) - start_1[(int)(m_9)]) + 1);
                            if (((val_10 >= 1) && (val_10 <= daysInMonth_0[(int)(m_9)]))) {
                                string s_11 = (val_10).ToString();
                                if ((s_11.Length == 1)) {
                                    s_11 = (" " + s_11);
                                }
                                Console.WriteLine(string.Join(" ", new string[]{_fmtTop((" " + s_11)), _fmtTop(false)}));
                            } else {
                                Console.WriteLine(string.Join(" ", new string[]{_fmtTop("   "), _fmtTop(false)}));
                            }
                            day_8 = (day_8 + 1);
                        }
                        Console.WriteLine(string.Join(" ", new string[]{_fmtTop("     "), _fmtTop(false)}));
                        mi_5 = (mi_5 + 1);
                    }
                    Console.WriteLine(_fmtTop(""));
                    week_7 = (week_7 + 1);
                }
                Console.WriteLine(_fmtTop(""));
                qtr_4 = (qtr_4 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
