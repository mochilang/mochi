// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class MDRResult {
    public long mp;
    public long mdr;
    public override string ToString() => $"MDRResult {{mp = {mp}, mdr = {mdr}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static string pad(string s_0, long width_1) {
        string out_2 = s_0;
        while ((Convert.ToDouble(out_2.Length) < Convert.ToDouble(width_1))) {
            out_2 = (" " + out_2);
        };
        return out_2;
    }

    public static BigInteger mult(BigInteger n_3, long base_4) {
        BigInteger m_5 = 1;
        BigInteger x_6 = n_3;
        BigInteger b_7 = new BigInteger(base_4);
        while ((x_6 > new BigInteger(0))) {
            m_5 = (m_5 * (x_6 % b_7));
            x_6 = (x_6 / b_7);
        };
        return m_5;
    }

    public static MDRResult multDigitalRoot(BigInteger n_8, long base_9) {
        BigInteger m_10 = n_8;
        long mp_11 = 0;
        BigInteger b_12 = new BigInteger(base_9);
        while ((m_10 >= b_12)) {
            m_10 = Program.mult(m_10, base_9);
            mp_11 = (mp_11 + 1);
        };
        return new MDRResult{mp = mp_11, mdr = (int)(m_10)};
    }

    public static void main() {
        long base_13 = 10;
        long size_14 = 5;
        Console.WriteLine(Program._fmtTop(((((Program.pad("Number", 20) + " ") + Program.pad("MDR", 3)) + " ") + Program.pad("MP", 3))));
        BigInteger[] nums_15 = new BigInteger[]{new BigInteger(123321), new BigInteger(7739), new BigInteger(893), new BigInteger(899998), new BigInteger(3778888999L), new BigInteger(277777788888899L)};
        long i_16 = 0;
        while ((Convert.ToDouble(i_16) < Convert.ToDouble(nums_15.Length))) {
            BigInteger n_17 = nums_15[(int)(i_16)];
            MDRResult r_18 = Program.multDigitalRoot(n_17, base_13);
            Console.WriteLine(Program._fmtTop(((((Program.pad(_fmt(n_17), 20) + " ") + Program.pad(_fmt(r_18.mdr), 3)) + " ") + Program.pad(_fmt(r_18.mp), 3))));
            i_16 = (i_16 + 1);
        };
        Console.WriteLine(Program._fmtTop(""));
        long[][] list_19 = new long[][]{};
        long idx_20 = 0;
        while ((idx_20 < base_13)) {
            list_19 = (Enumerable.ToArray(Enumerable.Append(list_19, new long[]{})));
            idx_20 = (idx_20 + 1);
        };
        long cnt_21 = (size_14 * base_13);
        BigInteger n_22 = 0;
        BigInteger b_23 = new BigInteger(base_13);
        while ((cnt_21 > 0)) {
            MDRResult r_24 = Program.multDigitalRoot(n_22, base_13);
            long mdr_25 = r_24.mdr;
            if ((Convert.ToDouble(list_19[(int)(mdr_25)].Length) < Convert.ToDouble(size_14))) {
                list_19[mdr_25] = (Enumerable.ToArray(Enumerable.Append(list_19[(int)(mdr_25)], (int)(n_22))));
                cnt_21 = (cnt_21 - 1);
            }
            n_22 = (n_22 + new BigInteger(1));
        };
        Console.WriteLine(Program._fmtTop("MDR: First"));
        long j_26 = 0;
        while ((j_26 < base_13)) {
            Console.WriteLine(Program._fmtTop(((Program.pad(_fmt(j_26), 3) + ": ") + _fmt(list_19[(int)(j_26)]))));
            j_26 = (j_26 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
