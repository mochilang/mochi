// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double[] a_8 = new double[]{1.0, -2.7756e-16, 0.33333333, -1.85e-17};
    static double[] b_9 = new double[]{0.16666667, 0.5, 0.5, 0.16666667};
    static double[] sig_10 = new double[]{-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589};
    static double[] res_11 = applyFilter(sig_10, a_8, b_9);
    static long k_12 = 0;
    static double[] applyFilter(double[] input_0, double[] a_1, double[] b_2) {
        double[] out_3 = new double[]{};
        double scale_4 = (1.0 / a_1[(int)(0)]);
        long i_5 = 0;
        while ((string.Compare(Convert.ToString(i_5), Convert.ToString(input_0.Length)) < 0)) {
            double tmp_6 = 0.0;
            long j_7 = 0;
            while (((j_7 <= i_5) && (string.Compare(Convert.ToString(j_7), Convert.ToString(b_2.Length)) < 0))) {
                tmp_6 = (tmp_6 + (b_2[(int)(j_7)] * input_0[(int)((i_5 - j_7))]));
                j_7 = (j_7 + 1);
            }
            j_7 = 0;
            while (((j_7 < i_5) && (string.Compare(Convert.ToString((j_7 + 1)), Convert.ToString(a_1.Length)) < 0))) {
                tmp_6 = (tmp_6 - (a_1[(int)((j_7 + 1))] * out_3[(int)(((i_5 - j_7) - 1))]));
                j_7 = (j_7 + 1);
            }
            out_3 = (Enumerable.ToArray(Enumerable.Append(out_3, (tmp_6 * scale_4))));
            i_5 = (i_5 + 1);
        };
        return out_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((string.Compare(Convert.ToString(k_12), Convert.ToString(res_11.Length)) < 0)) {
                Console.WriteLine(_fmtTop(res_11[(int)(k_12)]));
                k_12 = (k_12 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
