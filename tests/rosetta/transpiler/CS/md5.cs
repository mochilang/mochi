// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;
using System.Security.Cryptography;
using System.Text;
using System.Numerics;
using System.Collections.Generic;
static class testpkg {
    public class ECDSAResult {
        public string D { get; set; }
        public string X { get; set; }
        public string Y { get; set; }
        public string Hash { get; set; }
        public string R { get; set; }
        public string S { get; set; }
        public bool Valid { get; set; }
    }
    public static string FifteenPuzzleExample() => "Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd";
    public static string MD5Hex(string s) {
        using var md5 = System.Security.Cryptography.MD5.Create();
        var bytes = System.Text.Encoding.ASCII.GetBytes(s);
        var hash = md5.ComputeHash(bytes);
        return string.Concat(hash.Select(b => b.ToString("x2")));
    }
    public static ECDSAResult ECDSAExample() {
        return new ECDSAResult{
            D = "1234567890",
            X = "43162711582587979080031819627904423023685561091192625653251495188141318209988",
            Y = "86807430002474105664458509423764867536342689150582922106807036347047552480521",
            Hash = "0xe6f9ed0d",
            R = "43162711582587979080031819627904423023685561091192625653251495188141318209988",
            S = "94150071556658883365738746782965214584303361499725266605620843043083873122499",
            Valid = true
        };
    }
}

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (var pair_0 in new string[][]{new string[]{"d41d8cd98f00b204e9800998ecf8427e", ""}, new string[]{"0cc175b9c0f1b6a831c399e269772661", "a"}, new string[]{"900150983cd24fb0d6963f7d28e17f72", "abc"}, new string[]{"f96b697d7cb7938d525a2f31aaf161d0", "message digest"}, new string[]{"c3fcd3d76192e4007dfb496cca67e13b", "abcdefghijklmnopqrstuvwxyz"}, new string[]{"d174ab98d277d9f5a5611c2c9f419d9f", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"}, new string[]{"57edf4a22be3c955ac49da2e2107b67a", ("12345678901234567890" + "123456789012345678901234567890123456789012345678901234567890")}, new string[]{"e38ca1d920c4b8b8d3946b2c72f01680", "The quick brown fox jumped over the lazy dog's back"}}) {
                var sum_1 = testpkg.MD5Hex(pair_0[(int)(1)]);
                if ((sum_1 != pair_0[(int)(0)])) {
                    Console.WriteLine(_fmtTop("MD5 fail"));
                    Console.WriteLine(string.Join(" ", new string[]{_fmtTop("  for string,"), _fmtTop(pair_0[(int)(1)])}));
                    Console.WriteLine(string.Join(" ", new string[]{_fmtTop("  expected:  "), _fmtTop(pair_0[(int)(0)])}));
                    Console.WriteLine(string.Join(" ", new string[]{_fmtTop("  got:       "), _fmtTop(sum_1)}));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
