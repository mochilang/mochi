// Generated by Mochi 0.10.39 on 2025-07-24 14:23 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long THRESHOLD = 140737488355328L;
    static long indexOf(long[] xs, long value) {
        long i = 0;
        while ((i < xs.Length)) {
            if ((xs[i] == value)) {
                return i;
            }
            i = (i + 1);
        };
        return (0 - 1);
    }

    static bool contains(long[] xs, long value) {
        return (indexOf(xs, value) != (0 - 1));
    }

    static long maxOf(long a, long b) {
        if ((a > b)) {
            return a;
        } else {
            return b;
        };
    }

    static long intSqrt(long n) {
        if ((n == 0)) {
            return 0;
        };
        long x = n;
        long y = ((x + 1) / 2);
        while ((y < x)) {
            x = y;
            y = ((x + (n / x)) / 2);
        };
        return x;
    }

    static long sumProperDivisors(long n) {
        if ((n < 2)) {
            return 0;
        };
        long sqrt = intSqrt(n);
        long sum = 1;
        long i_0 = 2;
        while ((i_0 <= sqrt)) {
            if (((n % i_0) == 0)) {
                sum = ((sum + i_0) + (n / i_0));
            }
            i_0 = (i_0 + 1);
        };
        if (((sqrt * sqrt) == n)) {
            sum = (sum - sqrt);
        };
        return sum;
    }

    static Dictionary<string, object> classifySequence(long k) {
        long last = k;
        long[] seq = new long[]{k};
        while (true) {
            last = sumProperDivisors(last);
            seq = (seq.Append(last).ToArray());
            var n = seq.Length;
            string aliquot = "";
            if ((last == 0)) {
                aliquot = "Terminating";
            } else {
                if (((n == 2) && (last == k))) {
                    aliquot = "Perfect";
                } else {
                    if (((n == 3) && (last == k))) {
                        aliquot = "Amicable";
                    } else {
                        if (((n >= 4) && (last == k))) {
                            aliquot = (("Sociable[" + ((n - 1)).ToString()) + "]");
                        } else {
                            if ((last == seq[(n - 2)])) {
                                aliquot = "Aspiring";
                            } else {
                                if (contains(seq.Skip((int)(1)).Take((int)((maxOf(1, (n - 2)) - 1))).ToArray(), last)) {
                                    long idx = indexOf(seq, last);
                                    aliquot = (("Cyclic[" + (((n - 1) - idx)).ToString()) + "]");
                                } else {
                                    if (((n == 16) || (last > THRESHOLD))) {
                                        aliquot = "Non-Terminating";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((aliquot != "")) {
                return new Dictionary<string, object>{{"seq", seq}, {"aliquot", aliquot}};
            }
        };
        return new Dictionary<string, object>{{"seq", seq}, {"aliquot", ""}};
    }

    static string padLeft(long n, long w) {
        string s = (n).ToString();
        while ((s.Length < w)) {
            s = (" " + s);
        };
        return s;
    }

    static string padRight(string s, long w) {
        string r = s;
        while ((r.Length < w)) {
            r = (r + " ");
        };
        return r;
    }

    static string joinWithCommas(long[] seq) {
        string s_1 = "[";
        long i_2 = 0;
        while ((i_2 < seq.Length)) {
            s_1 = (s_1 + (seq[i_2]).ToString());
            if ((i_2 < (seq.Length - 1))) {
                s_1 = (s_1 + ", ");
            }
            i_2 = (i_2 + 1);
        };
        s_1 = (s_1 + "]");
        return s_1;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"));
        long k = 1;
        while ((k <= 10)) {
            Dictionary<string, object> res = classifySequence(k);
            Console.WriteLine(_fmtTop(((((padLeft(k, 2) + ": ") + padRight(((dynamic)res)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)res)["seq"]))));
            k = (k + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long[] s_3 = new long[]{11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488};
        long i_4 = 0;
        while ((i_4 < s_3.Length)) {
            long val = s_3[i_4];
            Dictionary<string, object> res_5 = classifySequence(val);
            Console.WriteLine(_fmtTop(((((padLeft(val, 7) + ": ") + padRight(((dynamic)res_5)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)res_5)["seq"]))));
            i_4 = (i_4 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long big = 15355717786080L;
        Dictionary<string, object> r_6 = classifySequence(big);
        Console.WriteLine(_fmtTop((((((big).ToString() + ": ") + padRight(((dynamic)r_6)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)r_6)["seq"]))));
    }

    static void Main() {
        main();
    }
}
