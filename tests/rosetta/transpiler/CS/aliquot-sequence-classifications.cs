// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long THRESHOLD_0 = 140737488355328L;
    static long indexOf(long[] xs_1, long value_2) {
        long i_3 = 0;
        while ((i_3 < xs_1.Length)) {
            if ((xs_1[(int)(i_3)] == value_2)) {
                return i_3;
            }
            i_3 = (i_3 + 1);
        };
        return (0 - 1);
    }

    static bool contains(long[] xs_4, long value_5) {
        return (indexOf(xs_4, value_5) != (0 - 1));
    }

    static long maxOf(long a_6, long b_7) {
        if ((a_6 > b_7)) {
            return a_6;
        } else {
            return b_7;
        };
    }

    static long intSqrt(long n_8) {
        if ((n_8 == 0)) {
            return 0;
        };
        long x_9 = n_8;
        long y_10 = ((x_9 + 1) / 2);
        while ((y_10 < x_9)) {
            x_9 = y_10;
            y_10 = ((x_9 + (n_8 / x_9)) / 2);
        };
        return x_9;
    }

    static long sumProperDivisors(long n_11) {
        if ((n_11 < 2)) {
            return 0;
        };
        long sqrt_12 = intSqrt(n_11);
        long sum_13 = 1;
        long i_14 = 2;
        while ((i_14 <= sqrt_12)) {
            if (((n_11 % i_14) == 0)) {
                sum_13 = ((sum_13 + i_14) + (n_11 / i_14));
            }
            i_14 = (i_14 + 1);
        };
        if (((sqrt_12 * sqrt_12) == n_11)) {
            sum_13 = (sum_13 - sqrt_12);
        };
        return sum_13;
    }

    static Dictionary<string, object> classifySequence(long k_15) {
        long last_16 = k_15;
        long[] seq_17 = new long[]{k_15};
        while (true) {
            last_16 = sumProperDivisors(last_16);
            seq_17 = (Enumerable.ToArray(Enumerable.Append(seq_17, last_16)));
            var n_18 = seq_17.Length;
            string aliquot_19 = "";
            if ((last_16 == 0)) {
                aliquot_19 = "Terminating";
            } else {
                if (((n_18 == 2) && (last_16 == k_15))) {
                    aliquot_19 = "Perfect";
                } else {
                    if (((n_18 == 3) && (last_16 == k_15))) {
                        aliquot_19 = "Amicable";
                    } else {
                        if (((n_18 >= 4) && (last_16 == k_15))) {
                            aliquot_19 = (("Sociable[" + ((((dynamic)(n_18)) - ((dynamic)(1)))).ToString()) + "]");
                        } else {
                            if ((last_16 == seq_17[(int)((((dynamic)(n_18)) - ((dynamic)(2))))])) {
                                aliquot_19 = "Aspiring";
                            } else {
                                if (contains(seq_17.Skip((int)(1)).Take((int)((maxOf(1, (((dynamic)(n_18)) - ((dynamic)(2)))) - 1))).ToArray(), last_16)) {
                                    long idx_20 = indexOf(seq_17, last_16);
                                    aliquot_19 = (("Cyclic[" + (((((dynamic)(n_18)) - ((dynamic)(1))) - idx_20)).ToString()) + "]");
                                } else {
                                    if (((n_18 == 16) || (last_16 > THRESHOLD_0))) {
                                        aliquot_19 = "Non-Terminating";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((aliquot_19 != "")) {
                return new Dictionary<string, object>{{"seq", seq_17}, {"aliquot", aliquot_19}};
            }
        };
        return new Dictionary<string, object>{{"seq", seq_17}, {"aliquot", ""}};
    }

    static string padLeft(long n_21, long w_22) {
        string s_23 = (n_21).ToString();
        while ((s_23.Length < w_22)) {
            s_23 = (" " + s_23);
        };
        return s_23;
    }

    static string padRight(string s_24, long w_25) {
        string r_26 = s_24;
        while ((r_26.Length < w_25)) {
            r_26 = (r_26 + " ");
        };
        return r_26;
    }

    static string joinWithCommas(long[] seq_27) {
        string s_28 = "[";
        long i_29 = 0;
        while ((i_29 < seq_27.Length)) {
            s_28 = (s_28 + (seq_27[(int)(i_29)]).ToString());
            if ((i_29 < (((dynamic)(seq_27.Length)) - ((dynamic)(1))))) {
                s_28 = (s_28 + ", ");
            }
            i_29 = (i_29 + 1);
        };
        s_28 = (s_28 + "]");
        return s_28;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"));
        long k_30 = 1;
        while ((k_30 <= 10)) {
            Dictionary<string, object> res_31 = classifySequence(k_30);
            Console.WriteLine(_fmtTop(((((padLeft(k_30, 2) + ": ") + padRight(Convert.ToString(((dynamic)res_31)["aliquot"]), 15)) + " ") + joinWithCommas((((dynamic)res_31)["seq"] as long[]) ?? new long[]{}))));
            k_30 = (k_30 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long[] s_32 = new long[]{11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488};
        long i_33 = 0;
        while ((i_33 < s_32.Length)) {
            long val_34 = s_32[(int)(i_33)];
            Dictionary<string, object> res_35 = classifySequence(val_34);
            Console.WriteLine(_fmtTop(((((padLeft(val_34, 7) + ": ") + padRight(Convert.ToString(((dynamic)res_35)["aliquot"]), 15)) + " ") + joinWithCommas((((dynamic)res_35)["seq"] as long[]) ?? new long[]{}))));
            i_33 = (i_33 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long big_36 = 15355717786080L;
        Dictionary<string, object> r_37 = classifySequence(big_36);
        Console.WriteLine(_fmtTop((((((big_36).ToString() + ": ") + padRight(Convert.ToString(((dynamic)r_37)["aliquot"]), 15)) + " ") + joinWithCommas((((dynamic)r_37)["seq"] as long[]) ?? new long[]{}))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
