// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long THRESHOLD_0 = 140737488355328L;
    static long indexOf(long[] xs, long value) {
        long i_1 = 0;
        while ((i_1 < xs.Length)) {
            if ((xs[(int)(i_1)] == value)) {
                return i_1;
            }
            i_1 = (i_1 + 1);
        };
        return (0 - 1);
    }

    static bool contains(long[] xs, long value) {
        return (indexOf(xs, value) != (0 - 1));
    }

    static long maxOf(long a, long b) {
        if ((a > b)) {
            return a;
        } else {
            return b;
        };
    }

    static long intSqrt(long n) {
        if ((n == 0)) {
            return 0;
        };
        long x_2 = n;
        long y_3 = ((x_2 + 1) / 2);
        while ((y_3 < x_2)) {
            x_2 = y_3;
            y_3 = ((x_2 + (n / x_2)) / 2);
        };
        return x_2;
    }

    static long sumProperDivisors(long n) {
        if ((n < 2)) {
            return 0;
        };
        long sqrt_4 = intSqrt(n);
        long sum_5 = 1;
        long i_6 = 2;
        while ((i_6 <= sqrt_4)) {
            if (((n % i_6) == 0)) {
                sum_5 = ((sum_5 + i_6) + (n / i_6));
            }
            i_6 = (i_6 + 1);
        };
        if (((sqrt_4 * sqrt_4) == n)) {
            sum_5 = (sum_5 - sqrt_4);
        };
        return sum_5;
    }

    static Dictionary<string, object> classifySequence(long k) {
        long last_7 = k;
        long[] seq_8 = new long[]{k};
        while (true) {
            last_7 = sumProperDivisors(last_7);
            seq_8 = (Enumerable.ToArray(Enumerable.Append(seq_8, last_7)));
            var n_9 = seq_8.Length;
            string aliquot_10 = "";
            if ((last_7 == 0)) {
                aliquot_10 = "Terminating";
            } else {
                if (((n_9 == 2) && (last_7 == k))) {
                    aliquot_10 = "Perfect";
                } else {
                    if (((n_9 == 3) && (last_7 == k))) {
                        aliquot_10 = "Amicable";
                    } else {
                        if (((n_9 >= 4) && (last_7 == k))) {
                            aliquot_10 = (("Sociable[" + ((((dynamic)n_9) - ((dynamic)1))).ToString()) + "]");
                        } else {
                            if ((last_7 == seq_8[(int)((((dynamic)n_9) - ((dynamic)2)))])) {
                                aliquot_10 = "Aspiring";
                            } else {
                                if (contains(seq_8.Skip((int)(1)).Take((int)((maxOf(1, (((dynamic)n_9) - ((dynamic)2))) - 1))).ToArray(), last_7)) {
                                    long idx_11 = indexOf(seq_8, last_7);
                                    aliquot_10 = (("Cyclic[" + (((((dynamic)n_9) - ((dynamic)1)) - idx_11)).ToString()) + "]");
                                } else {
                                    if (((n_9 == 16) || (last_7 > THRESHOLD_0))) {
                                        aliquot_10 = "Non-Terminating";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((aliquot_10 != "")) {
                return new Dictionary<string, object>{{"seq", seq_8}, {"aliquot", aliquot_10}};
            }
        };
        return new Dictionary<string, object>{{"seq", seq_8}, {"aliquot", ""}};
    }

    static string padLeft(long n, long w) {
        string s_12 = (n).ToString();
        while ((s_12.Length < w)) {
            s_12 = (" " + s_12);
        };
        return s_12;
    }

    static string padRight(string s, long w) {
        string r_13 = s;
        while ((r_13.Length < w)) {
            r_13 = (r_13 + " ");
        };
        return r_13;
    }

    static string joinWithCommas(long[] seq) {
        string s_14 = "[";
        long i_15 = 0;
        while ((i_15 < seq.Length)) {
            s_14 = (s_14 + (seq[(int)(i_15)]).ToString());
            if ((i_15 < (((dynamic)seq.Length) - ((dynamic)1)))) {
                s_14 = (s_14 + ", ");
            }
            i_15 = (i_15 + 1);
        };
        s_14 = (s_14 + "]");
        return s_14;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"));
        long k_16 = 1;
        while ((k_16 <= 10)) {
            Dictionary<string, object> res_17 = classifySequence(k_16);
            Console.WriteLine(_fmtTop(((((padLeft(k_16, 2) + ": ") + padRight(((dynamic)res_17)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)res_17)["seq"]))));
            k_16 = (k_16 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long[] s_18 = new long[]{11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488};
        long i_19 = 0;
        while ((i_19 < s_18.Length)) {
            long val_20 = s_18[(int)(i_19)];
            Dictionary<string, object> res_21 = classifySequence(val_20);
            Console.WriteLine(_fmtTop(((((padLeft(val_20, 7) + ": ") + padRight(((dynamic)res_21)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)res_21)["seq"]))));
            i_19 = (i_19 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        long big_22 = 15355717786080L;
        Dictionary<string, object> r_23 = classifySequence(big_22);
        Console.WriteLine(_fmtTop((((((big_22).ToString() + ": ") + padRight(((dynamic)r_23)["aliquot"], 15)) + " ") + joinWithCommas((long[])((dynamic)r_23)["seq"]))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
