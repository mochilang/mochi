// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static int THRESHOLD = 140737488355328;
    static int indexOf(int[] xs, int value) {
        int i = 0;
        while ((i < xs.Length)) {
            if ((xs[i] == value)) {
                return i;
            }
            i = (i + 1);
        };
        return (0 - 1);
    }

    static bool contains(int[] xs, int value) {
        return (indexOf(xs, value) != (0 - 1));
    }

    static int maxOf(int a, int b) {
        if ((a > b)) {
            return a;
        } else {
            return b;
        };
    }

    static int intSqrt(int n) {
        if ((n == 0)) {
            return 0;
        };
        int x = n;
        int y = ((x + 1) / 2);
        while ((y < x)) {
            x = y;
            y = ((x + (n / x)) / 2);
        };
        return x;
    }

    static int sumProperDivisors(int n) {
        if ((n < 2)) {
            return 0;
        };
        int sqrt = intSqrt(n);
        int sum = 1;
        int i = 2;
        while ((i <= sqrt)) {
            if (((n % i) == 0)) {
                sum = ((sum + i) + (n / i));
            }
            i = (i + 1);
        };
        if (((sqrt * sqrt) == n)) {
            sum = (sum - sqrt);
        };
        return sum;
    }

    static Dictionary<string, object> classifySequence(int k) {
        int last = k;
        int[] seq = new int[]{k};
        while (true) {
            last = sumProperDivisors(last);
            seq = (seq.Append(last).ToArray());
            var n = seq.Length;
            string aliquot = "";
            if ((last == 0)) {
                aliquot = "Terminating";
            } else {
                if (((n == 2) && (last == k))) {
                    aliquot = "Perfect";
                } else {
                    if (((n == 3) && (last == k))) {
                        aliquot = "Amicable";
                    } else {
                        if (((n >= 4) && (last == k))) {
                            aliquot = (("Sociable[" + (n - 1).ToString()) + "]");
                        } else {
                            if ((last == seq[(n - 2)])) {
                                aliquot = "Aspiring";
                            } else {
                                if (contains(seq.Skip(1).Take((maxOf(1, (n - 2)) - 1)).ToArray(), last)) {
                                    int idx = indexOf(seq, last);
                                    aliquot = (("Cyclic[" + ((n - 1) - idx).ToString()) + "]");
                                } else {
                                    if (((n == 16) || (last > THRESHOLD))) {
                                        aliquot = "Non-Terminating";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((aliquot != "")) {
                return new Dictionary<string, object>{{"seq", seq}, {"aliquot", aliquot}};
            }
        };
        return new Dictionary<string, object>{{"seq", seq}, {"aliquot", ""}};
    }

    static string padLeft(int n, int w) {
        string s = n.ToString();
        while ((s.Length < w)) {
            s = (" " + s);
        };
        return s;
    }

    static string padRight(string s, int w) {
        string r = s;
        while ((r.Length < w)) {
            r = (r + " ");
        };
        return r;
    }

    static string joinWithCommas(int[] seq) {
        string s = "[";
        int i = 0;
        while ((i < seq.Length)) {
            s = (s + seq[i].ToString());
            if ((i < (seq.Length - 1))) {
                s = (s + ", ");
            }
            i = (i + 1);
        };
        s = (s + "]");
        return s;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"));
        int k = 1;
        while ((k <= 10)) {
            Dictionary<string, object> res = classifySequence(k);
            Console.WriteLine(_fmtTop(((((padLeft(k, 2) + ": ") + padRight(res["aliquot"], 15)) + " ") + joinWithCommas((int[])((dynamic)res)["seq"]))));
            k = (k + 1);
        };
        Console.WriteLine(_fmtTop(""));
        int[] s = new int[]{11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488};
        int i = 0;
        while ((i < s.Length)) {
            var val = s[i];
            Dictionary<string, object> res = classifySequence(val);
            Console.WriteLine(_fmtTop(((((padLeft(val, 7) + ": ") + padRight(res["aliquot"], 15)) + " ") + joinWithCommas((int[])((dynamic)res)["seq"]))));
            i = (i + 1);
        };
        Console.WriteLine(_fmtTop(""));
        int big = 15355717786080;
        Dictionary<string, object> r = classifySequence(big);
        Console.WriteLine(_fmtTop(((((big.ToString() + ": ") + padRight(r["aliquot"], 15)) + " ") + joinWithCommas((int[])((dynamic)r)["seq"]))));
    }

    static void Main() {
        main();
    }
}
