// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] primes_18 = primesUpTo(3200000);
    static long[] primesUpTo(long n_0) {
        bool[] sieve_1 = new bool[]{};
        long i_2 = 0;
        while ((i_2 <= n_0)) {
            sieve_1 = (Enumerable.ToArray(Enumerable.Append(sieve_1, true)));
            i_2 = (i_2 + 1);
        };
        long p_3 = 2;
        while (((p_3 * p_3) <= n_0)) {
            if (sieve_1[(int)(p_3)]) {
                long m_4 = (p_3 * p_3);
                while ((m_4 <= n_0)) {
                    sieve_1[m_4] = false;
                    m_4 = (m_4 + p_3);
                }
            }
            p_3 = (p_3 + 1);
        };
        long[] res_5 = new long[]{};
        long x_6 = 2;
        while ((x_6 <= n_0)) {
            if (sieve_1[(int)(x_6)]) {
                res_5 = (Enumerable.ToArray(Enumerable.Append(res_5, x_6)));
            }
            x_6 = (x_6 + 1);
        };
        return res_5;
    }

    static long[] sortInts(long[] xs_7) {
        long[] res_8 = new long[]{};
        long[] tmp_9 = xs_7;
        while ((Convert.ToDouble(tmp_9.Length) > Convert.ToDouble(0))) {
            long min_10 = tmp_9[(int)(0)];
            long idx_11 = 0;
            long i_12 = 1;
            while ((Convert.ToDouble(i_12) < Convert.ToDouble(tmp_9.Length))) {
                if ((tmp_9[(int)(i_12)] < min_10)) {
                    min_10 = tmp_9[(int)(i_12)];
                    idx_11 = i_12;
                }
                i_12 = (i_12 + 1);
            }
            res_8 = (Enumerable.ToArray(Enumerable.Append(res_8, min_10)));
            long[] out_13 = new long[]{};
            long j_14 = 0;
            while ((Convert.ToDouble(j_14) < Convert.ToDouble(tmp_9.Length))) {
                if ((j_14 != idx_11)) {
                    out_13 = (Enumerable.ToArray(Enumerable.Append(out_13, tmp_9[(int)(j_14)])));
                }
                j_14 = (j_14 + 1);
            }
            tmp_9 = out_13;
        };
        return res_8;
    }

    static string commatize(long n_15) {
        string s_16 = _fmt(n_15);
        long i_17 = (((dynamic)(s_16.Length)) - ((dynamic)(3)));
        while ((i_17 >= 1)) {
            s_16 = ((s_16.Substring((int)(0), (int)(i_17 - 0)) + ",") + s_16.Substring((int)(i_17), (int)(s_16.Length - i_17)));
            i_17 = (i_17 - 3);
        };
        return s_16;
    }

    static Dictionary<string, object> getBrilliant(long digits_19, long limit_20, bool countOnly_21) {
        long[] brilliant_22 = new long[]{};
        long count_23 = 0;
        long pow_24 = 1;
        long next_25 = 999999999999999L;
        long k_26 = 1;
        while ((k_26 <= digits_19)) {
            long[] s_27 = new long[]{};
            foreach (var p_28 in primes_18) {
                if ((p_28 >= (pow_24 * 10))) {
                    break;
                }
                if ((p_28 > pow_24)) {
                    s_27 = (Enumerable.ToArray(Enumerable.Append(s_27, p_28)));
                }
            }
            long i_29 = 0;
            while ((Convert.ToDouble(i_29) < Convert.ToDouble(s_27.Length))) {
                long j_30 = i_29;
                while ((Convert.ToDouble(j_30) < Convert.ToDouble(s_27.Length))) {
                    long prod_31 = (s_27[(int)(i_29)] * s_27[(int)(j_30)]);
                    if ((prod_31 < limit_20)) {
                        if (countOnly_21) {
                            count_23 = (count_23 + 1);
                        } else {
                            brilliant_22 = (Enumerable.ToArray(Enumerable.Append(brilliant_22, prod_31)));
                        }
                    } else {
                        if ((prod_31 < next_25)) {
                            next_25 = prod_31;
                        }
                        break;
                    }
                    j_30 = (j_30 + 1);
                }
                i_29 = (i_29 + 1);
            }
            pow_24 = (pow_24 * 10);
            k_26 = (k_26 + 1);
        };
        if (countOnly_21) {
            return new Dictionary<string, object>{{"bc", count_23}, {"next", next_25}};
        };
        return new Dictionary<string, object>{{"bc", brilliant_22}, {"next", next_25}};
    }

    static void main() {
        Console.WriteLine(_fmtTop("First 100 brilliant numbers:"));
        Dictionary<string, object> r_32 = getBrilliant(2, 10000, false);
        long[] br_33 = sortInts((long[])((dynamic)r_32)["bc"]);
        br_33 = br_33.Skip((int)(0)).Take((int)((100 - 0))).ToArray();
        long i_34 = 0;
        while ((Convert.ToDouble(i_34) < Convert.ToDouble(br_33.Length))) {
            Console.WriteLine(string.Join(" ", new string[]{_fmtTop((((dynamic)(_fmt(br_33[(int)(i_34)]).PadLeft(4, ' '))) + ((dynamic)(" ")))), _fmtTop(false)}));
            if ((((i_34 + 1) % 10) == 0)) {
                Console.WriteLine(string.Join(" ", new string[]{_fmtTop(""), _fmtTop(true)}));
            }
            i_34 = (i_34 + 1);
        };
        Console.WriteLine(string.Join(" ", new string[]{_fmtTop(""), _fmtTop(true)}));
        long k_35 = 1;
        while ((k_35 <= 13)) {
            long limit_36 = (long)Math.Pow(10, k_35);
            Dictionary<string, object> r2_37 = getBrilliant(k_35, limit_36, true);
            object total_38 = ((dynamic)r2_37)["bc"];
            object next_39 = ((dynamic)r2_37)["next"];
            string climit_40 = commatize(limit_36);
            string ctotal_41 = commatize((((dynamic)(total_38)) + ((dynamic)(1))));
            string cnext_42 = commatize(Convert.ToInt64(next_39));
            Console.WriteLine(_fmtTop((((dynamic)(((((dynamic)(((((dynamic)("First >= ")) + ((dynamic)(climit_40.PadLeft(18, ' ')))) + " is "))) + ((dynamic)(ctotal_41.PadLeft(14, ' ')))) + " in the series: "))) + ((dynamic)(cnext_42.PadLeft(18, ' '))))));
            k_35 = (k_35 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
