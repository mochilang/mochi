// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class MoveResult {
    public long idx;
    public bool ok;
    public override string ToString() => $"MoveResult {{idx = {idx}, ok = {ok}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] board_0 = new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
    static long[] solved_1 = new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
    static long empty_2 = 15;
    static long moves_3 = 0;
    static bool quit_4 = false;
    static long randMove() {
        return (_now() % 4);
    }

    static bool isSolved() {
        long i_5 = 0;
        while ((i_5 < 16)) {
            if ((board_0[(int)(i_5)] != solved_1[(int)(i_5)])) {
                return false;
            }
            i_5 = (i_5 + 1);
        };
        return true;
    }

    static MoveResult isValidMove(long m_6) {
        if ((m_6 == 0)) {
            return new MoveResult{idx = (empty_2 - 4), ok = ((empty_2 / 4) > 0)};
        };
        if ((m_6 == 1)) {
            return new MoveResult{idx = (empty_2 + 4), ok = ((empty_2 / 4) < 3)};
        };
        if ((m_6 == 2)) {
            return new MoveResult{idx = (empty_2 + 1), ok = ((empty_2 % 4) < 3)};
        };
        if ((m_6 == 3)) {
            return new MoveResult{idx = (empty_2 - 1), ok = ((empty_2 % 4) > 0)};
        };
        return new MoveResult{idx = 0, ok = false};
    }

    static bool doMove(long m_7) {
        MoveResult r_8 = isValidMove(m_7);
        if ((!r_8.ok)) {
            return false;
        };
        long i_9 = empty_2;
        long j_10 = r_8.idx;
        long tmp_11 = board_0[(int)(i_9)];
        board_0[i_9] = board_0[(int)(j_10)];
        board_0[j_10] = tmp_11;
        empty_2 = j_10;
        moves_3 = (moves_3 + 1);
        return true;
    }

    static void shuffle(long n_12) {
        long i_13 = 0;
        while (((i_13 < n_12) || isSolved())) {
            if (doMove(randMove())) {
                i_13 = (i_13 + 1);
            }
        };
    }

    static void printBoard() {
        string line_14 = "";
        long i_15 = 0;
        while ((i_15 < 16)) {
            long val_16 = board_0[(int)(i_15)];
            if ((val_16 == 0)) {
                line_14 = (line_14 + "  .");
            } else {
                string s_17 = (val_16).ToString();
                if ((val_16 < 10)) {
                    line_14 = ((line_14 + "  ") + s_17);
                } else {
                    line_14 = ((line_14 + " ") + s_17);
                }
            }
            if (((i_15 % 4) == 3)) {
                Console.WriteLine(_fmtTop(line_14));
                line_14 = "";
            }
            i_15 = (i_15 + 1);
        };
    }

    static void playOneMove() {
        while (true) {
            Console.WriteLine(_fmtTop((("Enter move #" + ((moves_3 + 1)).ToString()) + " (U, D, L, R, or Q): ")));
            string s_18 = _input();
            if ((s_18 == "")) {
                continue;
            }
            string c_19 = s_18.Substring((int)(0), (int)(1 - 0));
            long m_20 = 0;
            if (((c_19 == "U") || (c_19 == "u"))) {
                m_20 = 0;
            } else {
                if (((c_19 == "D") || (c_19 == "d"))) {
                    m_20 = 1;
                } else {
                    if (((c_19 == "R") || (c_19 == "r"))) {
                        m_20 = 2;
                    } else {
                        if (((c_19 == "L") || (c_19 == "l"))) {
                            m_20 = 3;
                        } else {
                            if (((c_19 == "Q") || (c_19 == "q"))) {
                                Console.WriteLine(_fmtTop((("Quiting after " + (moves_3).ToString()) + " moves.")));
                                quit_4 = true;
                                return;
                            } else {
                                Console.WriteLine(_fmtTop(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like).")));
                                continue;
                            }
                        }
                    }
                }
            }
            if ((!doMove(m_20))) {
                Console.WriteLine(_fmtTop("That is not a valid move at the moment."));
                continue;
            }
            return;
        };
    }

    static void play() {
        Console.WriteLine(_fmtTop("Starting board:"));
        while (((!quit_4) && (isSolved() == false))) {
            Console.WriteLine(_fmtTop(""));
            printBoard();
            playOneMove();
        };
        if (isSolved()) {
            Console.WriteLine(_fmtTop((("You solved the puzzle in " + (moves_3).ToString()) + " moves.")));
        };
    }

    static void main() {
        shuffle(50);
        play();
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
