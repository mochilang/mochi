// Generated by Mochi 0.10.37 on 2025-07-23 00:00 +0700
using System;
using System.Collections.Generic;
using System.IO;

class Program {
    static bool seededNow = false;
    static int nowSeed = 0;
    static int _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (int.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647;
            return nowSeed;
        }
        return (int)(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % int.MaxValue);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        return Console.ReadLine();
    }
    static int[] board = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
    static int[] solved = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0};
    static int empty = 15;
    static int moves = 0;
    static bool quit = false;
    static int randMove() {
    return (_now() % 4);
}

    static bool isSolved() {
    int i = 0;
    while ((i < 16)) {
    if ((board[i] != solved[i])) {
    return false;
}
    i = (i + 1);
};
    return true;
}

    static Dictionary<string, object> isValidMove(int m) {
    if ((m == 0)) {
    return new Dictionary<string, object>{{"idx", (empty - 4)}, {"ok", ((empty / 4) > 0)}};
};
    if ((m == 1)) {
    return new Dictionary<string, object>{{"idx", (empty + 4)}, {"ok", ((empty / 4) < 3)}};
};
    if ((m == 2)) {
    return new Dictionary<string, object>{{"idx", (empty + 1)}, {"ok", ((empty % 4) < 3)}};
};
    if ((m == 3)) {
    return new Dictionary<string, object>{{"idx", (empty - 1)}, {"ok", ((empty % 4) > 0)}};
};
    return new Dictionary<string, object>{{"idx", 0}, {"ok", false}};
}

    static bool doMove(int m) {
    Dictionary<string, object> r = isValidMove(m);
    if ((!Convert.ToBoolean(r["ok"]))) {
    return false;
};
    int i = empty;
    var j = Convert.ToInt32(r["idx"]);
    int tmp = board[i];
    board[i] = board[j];
    board[j] = tmp;
    empty = j;
    moves = (moves + 1);
    return true;
}

    static void shuffle(int n) {
    int i = 0;
    while (((i < n) || isSolved())) {
    if (doMove(randMove())) {
    i = (i + 1);
}
};
}

    static void printBoard() {
    string line = "";
    int i = 0;
    while ((i < 16)) {
    int val = board[i];
    if ((val == 0)) {
    line = (line + "  .");
} else {
    string s = val.ToString();
    if ((val < 10)) {
    line = ((line + "  ") + s);
} else {
    line = ((line + " ") + s);
}
}
    if (((i % 4) == 3)) {
    Console.WriteLine(line);
    line = "";
}
    i = (i + 1);
};
}

    static void playOneMove() {
    while (true) {
    Console.WriteLine((("Enter move #" + (moves + 1).ToString()) + " (U, D, L, R, or Q): "));
    string s = _input();
    if ((s == "")) {
    continue;
}
    string c = s.Substring(0, (1 - 0));
    int m = 0;
    if (((c == "U") || (c == "u"))) {
    m = 0;
} else {
    if (((c == "D") || (c == "d"))) {
    m = 1;
} else {
    if (((c == "R") || (c == "r"))) {
    m = 2;
} else {
    if (((c == "L") || (c == "l"))) {
    m = 3;
} else {
    if (((c == "Q") || (c == "q"))) {
    Console.WriteLine((("Quiting after " + moves.ToString()) + " moves."));
    quit = true;
    return;
} else {
    Console.WriteLine(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like)."));
    continue;
}
}
}
}
}
    if ((!doMove(m))) {
    Console.WriteLine("That is not a valid move at the moment.");
    continue;
}
    return;
};
}

    static void play() {
    Console.WriteLine("Starting board:");
    while (((!quit) && (isSolved() == false))) {
    Console.WriteLine("");
    printBoard();
    playOneMove();
};
    if (isSolved()) {
    Console.WriteLine((("You solved the puzzle in " + moves.ToString()) + " moves."));
};
}

    static void main() {
    shuffle(50);
    play();
}

    static void Main() {
        main();
    }
}
