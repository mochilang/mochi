// Generated by Mochi 0.10.40 on 2025-07-25 14:18 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] asc_1 = new long[]{};
    static bool isPrime(long n) {
        if ((n < 2)) {
            return false;
        };
        if (((n % 2) == 0)) {
            return (n == 2);
        };
        if (((n % 3) == 0)) {
            return (n == 3);
        };
        long d_0 = 5;
        while (((d_0 * d_0) <= n)) {
            if (((n % d_0) == 0)) {
                return false;
            }
            d_0 = (d_0 + 2);
            if (((n % d_0) == 0)) {
                return false;
            }
            d_0 = (d_0 + 4);
        };
        return true;
    }

    static void gen(long first, long cand, long digits) {
        if ((digits == 0)) {
            if (isPrime(cand)) {
                asc_1 = (asc_1.Concat(new long[]{cand}).ToArray());
            }
            return;
        };
        long i_2 = first;
        while ((i_2 < 10)) {
            gen((i_2 + 1), ((cand * 10) + i_2), (digits - 1));
            i_2 = (i_2 + 1);
        };
    }

    static string pad(long n, long width) {
        string s_3 = (n).ToString();
        while ((s_3.Length < width)) {
            s_3 = (" " + s_3);
        };
        return s_3;
    }

    static void main() {
        long digits_4 = 1;
        while ((digits_4 < 10)) {
            gen(1, 0, digits_4);
            digits_4 = (digits_4 + 1);
        };
        Console.WriteLine(_fmtTop((("There are " + (asc_1.Length).ToString()) + " ascending primes, namely:")));
        long i_5 = 0;
        string line_6 = "";
        while ((i_5 < asc_1.Length)) {
            line_6 = ((line_6 + pad(asc_1[(int)(i_5)], 8)) + " ");
            if ((((i_5 + 1) % 10) == 0)) {
                Console.WriteLine(_fmtTop(line_6.Substring((int)(0), (int)((((dynamic)line_6.Length) - ((dynamic)1)) - 0))));
                line_6 = "";
            }
            i_5 = (i_5 + 1);
        };
        if ((line_6.Length > 0)) {
            Console.WriteLine(_fmtTop(line_6.Substring((int)(0), (int)((((dynamic)line_6.Length) - ((dynamic)1)) - 0))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
