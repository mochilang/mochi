// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] asc_2 = new long[]{};
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static void gen(long first_3, long cand_4, long digits_5) {
        if ((digits_5 == 0)) {
            if (isPrime(cand_4)) {
                asc_2 = (asc_2.Concat(new long[]{cand_4}).ToArray());
            }
            return;
        };
        long i_6 = first_3;
        while ((i_6 < 10)) {
            gen((i_6 + 1), ((cand_4 * 10) + i_6), (digits_5 - 1));
            i_6 = (i_6 + 1);
        };
    }

    static string pad(long n_7, long width_8) {
        string s_9 = (n_7).ToString();
        while ((string.Compare(Convert.ToString(s_9.Length), Convert.ToString(width_8)) < 0)) {
            s_9 = (" " + s_9);
        };
        return s_9;
    }

    static void main() {
        long digits_10 = 1;
        while ((digits_10 < 10)) {
            gen(1, 0, digits_10);
            digits_10 = (digits_10 + 1);
        };
        Console.WriteLine(_fmtTop((("There are " + (asc_2.Length).ToString()) + " ascending primes, namely:")));
        long i_11 = 0;
        string line_12 = "";
        while ((string.Compare(Convert.ToString(i_11), Convert.ToString(asc_2.Length)) < 0)) {
            line_12 = ((line_12 + pad(asc_2[(int)(i_11)], 8)) + " ");
            if ((((i_11 + 1) % 10) == 0)) {
                Console.WriteLine(_fmtTop(line_12.Substring((int)(0), (int)((((dynamic)(line_12.Length)) - ((dynamic)(1))) - 0))));
                line_12 = "";
            }
            i_11 = (i_11 + 1);
        };
        if ((string.Compare(Convert.ToString(line_12.Length), Convert.ToString(0)) > 0)) {
            Console.WriteLine(_fmtTop(line_12.Substring((int)(0), (int)((((dynamic)(line_12.Length)) - ((dynamic)(1))) - 0))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
