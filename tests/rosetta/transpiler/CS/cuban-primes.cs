// Generated by Mochi 0.10.41 on 2025-07-27 14:57 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long modPow(long base_0, long exp_1, long m_2) {
        long result_3 = (1 % m_2);
        long b_4 = (base_0 % m_2);
        long e_5 = exp_1;
        while ((e_5 > 0)) {
            if (((e_5 % 2) == 1)) {
                result_3 = ((result_3 * b_4) % m_2);
            }
            b_4 = ((b_4 * b_4) % m_2);
            e_5 = Convert.ToInt64((e_5 / 2));
        };
        return result_3;
    }

    static bool isPrime(long n_6) {
        if ((n_6 < 2)) {
            return false;
        };
        foreach (var p_7 in new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29}) {
            if (((n_6 % p_7) == 0)) {
                return (n_6 == p_7);
            }
        };
        long d_8 = (n_6 - 1);
        long s_9 = 0;
        while (((d_8 % 2) == 0)) {
            d_8 = (d_8 / 2);
            s_9 = (s_9 + 1);
        };
        foreach (var a_10 in new long[]{2, 325, 9375, 28178, 450775, 9780504, 1795265022}) {
            if (((a_10 % n_6) == 0)) {
                return true;
            }
            long x_11 = modPow(a_10, d_8, n_6);
            if (((x_11 == 1) || (x_11 == (n_6 - 1)))) {
                continue;
            }
            long r_12 = 1;
            bool passed_13 = false;
            while ((r_12 < s_9)) {
                x_11 = ((x_11 * x_11) % n_6);
                if ((x_11 == (n_6 - 1))) {
                    passed_13 = true;
                    break;
                }
                r_12 = (r_12 + 1);
            }
            if ((!passed_13)) {
                return false;
            }
        };
        return true;
    }

    static string commatize(long n_14) {
        string s_15 = (n_14).ToString();
        long i_16 = (((dynamic)s_15.Length) - ((dynamic)3));
        while ((i_16 > 0)) {
            s_15 = ((s_15.Substring((int)(0), (int)(i_16 - 0)) + ",") + s_15.Substring((int)(i_16), (int)(s_15.Length - i_16)));
            i_16 = (i_16 - 3);
        };
        return s_15;
    }

    static string pad(string s_17, long width_18) {
        string out_19 = s_17;
        while ((out_19.Length < width_18)) {
            out_19 = (" " + out_19);
        };
        return out_19;
    }

    static string join(string[] xs_20, string sep_21) {
        string res_22 = "";
        long i_23 = 0;
        while ((i_23 < xs_20.Length)) {
            if ((i_23 > 0)) {
                res_22 = (res_22 + sep_21);
            }
            res_22 = (res_22 + xs_20[(int)(i_23)]);
            i_23 = (i_23 + 1);
        };
        return res_22;
    }

    static string formatRow(string[] row_24) {
        string[] padded_25 = new string[]{};
        long i_26 = 0;
        while ((i_26 < row_24.Length)) {
            padded_25 = (Enumerable.ToArray(Enumerable.Append(padded_25, pad(row_24[(int)(i_26)], 9))));
            i_26 = (i_26 + 1);
        };
        return (("[" + join(padded_25, " ")) + "]");
    }

    static void main() {
        string[] cubans_27 = new string[]{};
        long cube1_28 = 1;
        long count_29 = 0;
        long cube100k_30 = 0;
        long i_31 = 1;
        while (true) {
            long j_32 = (i_31 + 1);
            long cube2_33 = ((j_32 * j_32) * j_32);
            long diff_34 = (cube2_33 - cube1_28);
            if (isPrime(diff_34)) {
                if ((count_29 < 200)) {
                    cubans_27 = (Enumerable.ToArray(Enumerable.Append(cubans_27, commatize(diff_34))));
                }
                count_29 = (count_29 + 1);
                if ((count_29 == 100000)) {
                    cube100k_30 = diff_34;
                    break;
                }
            }
            cube1_28 = cube2_33;
            i_31 = (i_31 + 1);
        };
        Console.WriteLine(_fmtTop("The first 200 cuban primes are:-"));
        long row_35 = 0;
        while ((row_35 < 20)) {
            string[] slice_36 = new string[]{};
            long k_37 = 0;
            while ((k_37 < 10)) {
                slice_36 = (Enumerable.ToArray(Enumerable.Append(slice_36, cubans_27[(int)(((row_35 * 10) + k_37))])));
                k_37 = (k_37 + 1);
            }
            Console.WriteLine(_fmtTop(formatRow(slice_36)));
            row_35 = (row_35 + 1);
        };
        Console.WriteLine(_fmtTop(("\nThe 100,000th cuban prime is " + commatize(cube100k_30))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
