// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool isPrime(long n_0) {
        if ((n_0 < 2)) {
            return false;
        };
        if (((n_0 % 2) == 0)) {
            return (n_0 == 2);
        };
        if (((n_0 % 3) == 0)) {
            return (n_0 == 3);
        };
        long d_1 = 5;
        while (((d_1 * d_1) <= n_0)) {
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 2);
            if (((n_0 % d_1) == 0)) {
                return false;
            }
            d_1 = (d_1 + 4);
        };
        return true;
    }

    static long countPrimeFactors(long n_2) {
        if ((n_2 == 1)) {
            return 0;
        };
        if (isPrime(n_2)) {
            return 1;
        };
        long count_3 = 0;
        long f_4 = 2;
        while (true) {
            if (((n_2 % f_4) == 0)) {
                count_3 = (count_3 + 1);
                n_2 = (n_2 / f_4);
                if ((n_2 == 1)) {
                    return count_3;
                }
                if (isPrime(n_2)) {
                    f_4 = n_2;
                }
            } else {
                if ((f_4 >= 3)) {
                    f_4 = (f_4 + 2);
                } else {
                    f_4 = 3;
                }
            }
        };
        return count_3;
    }

    static string pad4(long n_5) {
        string s_6 = (n_5).ToString();
        while ((string.Compare(Convert.ToString(s_6.Length), Convert.ToString(4)) < 0)) {
            s_6 = (" " + s_6);
        };
        return s_6;
    }

    static void main() {
        long max_7 = 120;
        Console.WriteLine(_fmtTop((("The attractive numbers up to and including " + (max_7).ToString()) + " are:")));
        long count_8 = 0;
        string line_9 = "";
        long lineCount_10 = 0;
        long i_11 = 1;
        while ((i_11 <= max_7)) {
            long c_12 = countPrimeFactors(i_11);
            if (isPrime(c_12)) {
                line_9 = (line_9 + pad4(i_11));
                count_8 = (count_8 + 1);
                lineCount_10 = (lineCount_10 + 1);
                if ((lineCount_10 == 20)) {
                    Console.WriteLine(_fmtTop(line_9));
                    line_9 = "";
                    lineCount_10 = 0;
                }
            }
            i_11 = (i_11 + 1);
        };
        if ((lineCount_10 > 0)) {
            Console.WriteLine(_fmtTop(line_9));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
