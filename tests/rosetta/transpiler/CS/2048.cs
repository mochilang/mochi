// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.IO;
using System.Collections;

class Board {
    public long[][] cells;
    public override string ToString() => $"Board {{cells = {cells}}}";
}
class SpawnResult {
    public Board board;
    public bool full;
    public override string ToString() => $"SpawnResult {{board = {board}, full = {full}}}";
}
class SlideResult {
    public long[] row;
    public long gain;
    public override string ToString() => $"SlideResult {{row = {row}, gain = {gain}}}";
}
class MoveResult {
    public Board board;
    public long score;
    public bool moved;
    public override string ToString() => $"MoveResult {{board = {board}, score = {score}, moved = {moved}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        var line = Console.ReadLine();
        return line == null ? "" : line;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long SIZE_0 = 4;
    static Board board_82 = newBoard();
    static SpawnResult r_83 = spawnTile(board_82);
    static Board newBoard() {
        long[][] b_1 = new long[][]{};
        long y_2 = 0;
        while ((y_2 < SIZE_0)) {
            long[] row_3 = new long[]{};
            long x_4 = 0;
            while ((x_4 < SIZE_0)) {
                row_3 = (Enumerable.ToArray(Enumerable.Append(row_3, 0)));
                x_4 = (x_4 + 1);
            }
            b_1 = (Enumerable.ToArray(Enumerable.Append(b_1, row_3)));
            y_2 = (y_2 + 1);
        };
        return new Board{cells = b_1};
    }

    static SpawnResult spawnTile(Board b_5) {
        long[][] grid_6 = b_5.cells;
        long[][] empty_7 = new long[][]{};
        long y_8 = 0;
        while ((y_8 < SIZE_0)) {
            long x_9 = 0;
            while ((x_9 < SIZE_0)) {
                if ((grid_6[(int)(y_8)][(int)(x_9)] == 0)) {
                    empty_7 = (Enumerable.ToArray(Enumerable.Append(empty_7, new long[]{x_9, y_8})));
                }
                x_9 = (x_9 + 1);
            }
            y_8 = (y_8 + 1);
        };
        if ((empty_7.Length == 0)) {
            return new SpawnResult{board = b_5, full = true};
        };
        long idx_10 = (((dynamic)(_now())) % ((dynamic)(empty_7.Length)));
        long[] cell_11 = empty_7[(int)(idx_10)];
        long val_12 = 4;
        if (((_now() % 10) < 9)) {
            val_12 = 2;
        };
        grid_6[(int)(cell_11[(int)(1)])][cell_11[(int)(0)]] = val_12;
        return new SpawnResult{board = new Board{cells = grid_6}, full = (empty_7.Length == 1)};
    }

    static string pad(long n_13) {
        string s_14 = (n_13).ToString();
        long pad_15 = (((dynamic)(4)) - ((dynamic)(s_14.Length)));
        long i_16 = 0;
        string out_17 = "";
        while ((i_16 < pad_15)) {
            out_17 = (out_17 + " ");
            i_16 = (i_16 + 1);
        };
        return (out_17 + s_14);
    }

    static void draw(Board b_18, long score_19) {
        Console.WriteLine(_fmtTop(("Score: " + (score_19).ToString())));
        long y_20 = 0;
        while ((y_20 < SIZE_0)) {
            Console.WriteLine(_fmtTop("+----+----+----+----+"));
            string line_21 = "|";
            long x_22 = 0;
            while ((x_22 < SIZE_0)) {
                long v_23 = b_18.cells[(int)(y_20)][(int)(x_22)];
                if ((v_23 == 0)) {
                    line_21 = (line_21 + "    |");
                } else {
                    line_21 = ((line_21 + pad(v_23)) + "|");
                }
                x_22 = (x_22 + 1);
            }
            Console.WriteLine(_fmtTop(line_21));
            y_20 = (y_20 + 1);
        };
        Console.WriteLine(_fmtTop("+----+----+----+----+"));
        Console.WriteLine(_fmtTop("W=Up S=Down A=Left D=Right Q=Quit"));
    }

    static long[] reverseRow(long[] r_24) {
        long[] out_25 = new long[]{};
        long i_26 = (((dynamic)(r_24.Length)) - ((dynamic)(1)));
        while ((i_26 >= 0)) {
            out_25 = (Enumerable.ToArray(Enumerable.Append(out_25, r_24[(int)(i_26)])));
            i_26 = (i_26 - 1);
        };
        return out_25;
    }

    static SlideResult slideLeft(long[] row_27) {
        long[] xs_28 = new long[]{};
        long i_29 = 0;
        while ((i_29 < row_27.Length)) {
            if ((row_27[(int)(i_29)] != 0)) {
                xs_28 = (Enumerable.ToArray(Enumerable.Append(xs_28, row_27[(int)(i_29)])));
            }
            i_29 = (i_29 + 1);
        };
        long[] res_30 = new long[]{};
        long gain_31 = 0;
        i_29 = 0;
        while ((i_29 < xs_28.Length)) {
            if ((((i_29 + 1) < xs_28.Length) && (xs_28[(int)(i_29)] == xs_28[(int)((i_29 + 1))]))) {
                long v_32 = (xs_28[(int)(i_29)] * 2);
                gain_31 = (gain_31 + v_32);
                res_30 = (Enumerable.ToArray(Enumerable.Append(res_30, v_32)));
                i_29 = (i_29 + 2);
            } else {
                res_30 = (Enumerable.ToArray(Enumerable.Append(res_30, xs_28[(int)(i_29)])));
                i_29 = (i_29 + 1);
            }
        };
        while ((res_30.Length < SIZE_0)) {
            res_30 = (Enumerable.ToArray(Enumerable.Append(res_30, 0)));
        };
        return new SlideResult{row = res_30, gain = gain_31};
    }

    static MoveResult moveLeft(Board b_33, long score_34) {
        long[][] grid_35 = b_33.cells;
        bool moved_36 = false;
        long y_37 = 0;
        while ((y_37 < SIZE_0)) {
            SlideResult r_38 = slideLeft(grid_35[(int)(y_37)]);
            long[] new_39 = r_38.row;
            score_34 = (score_34 + r_38.gain);
            long x_40 = 0;
            while ((x_40 < SIZE_0)) {
                if ((grid_35[(int)(y_37)][(int)(x_40)] != new_39[(int)(x_40)])) {
                    moved_36 = true;
                }
                grid_35[(int)(y_37)][x_40] = new_39[(int)(x_40)];
                x_40 = (x_40 + 1);
            }
            y_37 = (y_37 + 1);
        };
        return new MoveResult{board = new Board{cells = grid_35}, score = score_34, moved = moved_36};
    }

    static MoveResult moveRight(Board b_41, long score_42) {
        long[][] grid_43 = b_41.cells;
        bool moved_44 = false;
        long y_45 = 0;
        while ((y_45 < SIZE_0)) {
            long[] rev_46 = reverseRow(grid_43[(int)(y_45)]);
            SlideResult r_47 = slideLeft(rev_46);
            rev_46 = r_47.row;
            score_42 = (score_42 + r_47.gain);
            rev_46 = reverseRow(rev_46);
            long x_48 = 0;
            while ((x_48 < SIZE_0)) {
                if ((grid_43[(int)(y_45)][(int)(x_48)] != rev_46[(int)(x_48)])) {
                    moved_44 = true;
                }
                grid_43[(int)(y_45)][x_48] = rev_46[(int)(x_48)];
                x_48 = (x_48 + 1);
            }
            y_45 = (y_45 + 1);
        };
        return new MoveResult{board = new Board{cells = grid_43}, score = score_42, moved = moved_44};
    }

    static long[] getCol(Board b_49, long x_50) {
        long[] col_51 = new long[]{};
        long y_52 = 0;
        while ((y_52 < SIZE_0)) {
            col_51 = (Enumerable.ToArray(Enumerable.Append(col_51, b_49.cells[(int)(y_52)][(int)(x_50)])));
            y_52 = (y_52 + 1);
        };
        return col_51;
    }

    static void setCol(Board b_53, long x_54, long[] col_55) {
        long[][] rows_56 = b_53.cells;
        long y_57 = 0;
        while ((y_57 < SIZE_0)) {
            long[] row_58 = rows_56[(int)(y_57)];
            row_58[x_54] = col_55[(int)(y_57)];
            rows_56[y_57] = row_58;
            y_57 = (y_57 + 1);
        };
        b_53.cells = rows_56;
    }

    static MoveResult moveUp(Board b_59, long score_60) {
        long[][] grid_61 = b_59.cells;
        bool moved_62 = false;
        long x_63 = 0;
        while ((x_63 < SIZE_0)) {
            long[] col_64 = getCol(b_59, x_63);
            SlideResult r_65 = slideLeft(col_64);
            long[] new_66 = r_65.row;
            score_60 = (score_60 + r_65.gain);
            long y_67 = 0;
            while ((y_67 < SIZE_0)) {
                if ((grid_61[(int)(y_67)][(int)(x_63)] != new_66[(int)(y_67)])) {
                    moved_62 = true;
                }
                grid_61[(int)(y_67)][x_63] = new_66[(int)(y_67)];
                y_67 = (y_67 + 1);
            }
            x_63 = (x_63 + 1);
        };
        return new MoveResult{board = new Board{cells = grid_61}, score = score_60, moved = moved_62};
    }

    static MoveResult moveDown(Board b_68, long score_69) {
        long[][] grid_70 = b_68.cells;
        bool moved_71 = false;
        long x_72 = 0;
        while ((x_72 < SIZE_0)) {
            long[] col_73 = reverseRow(getCol(b_68, x_72));
            SlideResult r_74 = slideLeft(col_73);
            col_73 = r_74.row;
            score_69 = (score_69 + r_74.gain);
            col_73 = reverseRow(col_73);
            long y_75 = 0;
            while ((y_75 < SIZE_0)) {
                if ((grid_70[(int)(y_75)][(int)(x_72)] != col_73[(int)(y_75)])) {
                    moved_71 = true;
                }
                grid_70[(int)(y_75)][x_72] = col_73[(int)(y_75)];
                y_75 = (y_75 + 1);
            }
            x_72 = (x_72 + 1);
        };
        return new MoveResult{board = new Board{cells = grid_70}, score = score_69, moved = moved_71};
    }

    static bool hasMoves(Board b_76) {
        long y_77 = 0;
        while ((y_77 < SIZE_0)) {
            long x_78 = 0;
            while ((x_78 < SIZE_0)) {
                if ((b_76.cells[(int)(y_77)][(int)(x_78)] == 0)) {
                    return true;
                }
                if ((((x_78 + 1) < SIZE_0) && (b_76.cells[(int)(y_77)][(int)(x_78)] == b_76.cells[(int)(y_77)][(int)((x_78 + 1))]))) {
                    return true;
                }
                if ((((y_77 + 1) < SIZE_0) && (b_76.cells[(int)(y_77)][(int)(x_78)] == b_76.cells[(int)((y_77 + 1))][(int)(x_78)]))) {
                    return true;
                }
                x_78 = (x_78 + 1);
            }
            y_77 = (y_77 + 1);
        };
        return false;
    }

    static bool has2048(Board b_79) {
        long y_80 = 0;
        while ((y_80 < SIZE_0)) {
            long x_81 = 0;
            while ((x_81 < SIZE_0)) {
                if ((b_79.cells[(int)(y_80)][(int)(x_81)] >= 2048)) {
                    return true;
                }
                x_81 = (x_81 + 1);
            }
            y_80 = (y_80 + 1);
        };
        return false;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            board_82 = r_83.board;
            bool full_84 = r_83.full;
            r_83 = spawnTile(board_82);
            board_82 = r_83.board;
            full_84 = r_83.full;
            long score_85 = 0;
            draw(board_82, score_85);
            while (true) {
                Console.WriteLine(_fmtTop("Move: "));
                string cmd_86 = _input();
                bool moved_87 = false;
                if (((cmd_86 == "a") || (cmd_86 == "A"))) {
                    MoveResult m_88 = moveLeft(board_82, score_85);
                    board_82 = m_88.board;
                    score_85 = m_88.score;
                    moved_87 = m_88.moved;
                }
                if (((cmd_86 == "d") || (cmd_86 == "D"))) {
                    MoveResult m_89 = moveRight(board_82, score_85);
                    board_82 = m_89.board;
                    score_85 = m_89.score;
                    moved_87 = m_89.moved;
                }
                if (((cmd_86 == "w") || (cmd_86 == "W"))) {
                    MoveResult m_90 = moveUp(board_82, score_85);
                    board_82 = m_90.board;
                    score_85 = m_90.score;
                    moved_87 = m_90.moved;
                }
                if (((cmd_86 == "s") || (cmd_86 == "S"))) {
                    MoveResult m_91 = moveDown(board_82, score_85);
                    board_82 = m_91.board;
                    score_85 = m_91.score;
                    moved_87 = m_91.moved;
                }
                if (((cmd_86 == "q") || (cmd_86 == "Q"))) {
                    break;
                }
                if (moved_87) {
                    SpawnResult r2_92 = spawnTile(board_82);
                    board_82 = r2_92.board;
                    full_84 = r2_92.full;
                    if ((full_84 && (!hasMoves(board_82)))) {
                        draw(board_82, score_85);
                        Console.WriteLine(_fmtTop("Game Over"));
                        break;
                    }
                }
                draw(board_82, score_85);
                if (has2048(board_82)) {
                    Console.WriteLine(_fmtTop("You win!"));
                    break;
                }
                if ((!hasMoves(board_82))) {
                    Console.WriteLine(_fmtTop("Game Over"));
                    break;
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
