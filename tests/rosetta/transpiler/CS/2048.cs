// Generated by Mochi 0.10.37 on 2025-07-23 11:32 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

class Program {
    static bool seededNow = false;
    static int nowSeed = 0;
    static int _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (int.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647;
            return nowSeed;
        }
        return (int)(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() % int.MaxValue);
    }
    static string[] inputLines;
    static int inputIndex = 0;
    static string _input() {
        if (inputLines == null) {
            var path = Environment.GetEnvironmentVariable("MOCHI_INPUT_FILE");
            if (!string.IsNullOrEmpty(path) && File.Exists(path)) {
                inputLines = File.ReadAllLines(path);
            } else {
                inputLines = new string[]{};
            }
        }
        if (inputIndex < inputLines.Length) {
            return inputLines[inputIndex++];
        }
        return Console.ReadLine();
    }
    static int SIZE = 4;
    static int[][] board = newBoard();
    static Dictionary<string, object> r = spawnTile(board);
    static dynamic full = (dynamic)(r["full"]);
    static int score = 0;
    static int[][] newBoard() {
        int[][] b = new int[][]{};
        int y = 0;
        while ((y < SIZE)) {
            int[] row = new int[]{};
            int x = 0;
            while ((x < SIZE)) {
                row = (row.Append(0).ToArray());
                x = (x + 1);
            }
            b = (b.Append(row).ToArray());
            y = (y + 1);
        };
        return b;
    }

    static Dictionary<string, object> spawnTile(int[][] b) {
        int[][] empty = new int[][]{};
        int y = 0;
        while ((y < SIZE)) {
            int x = 0;
            while ((x < SIZE)) {
                if ((b[y][x] == 0)) {
                    empty = (empty.Append(new int[]{x, y}).ToArray());
                }
                x = (x + 1);
            }
            y = (y + 1);
        };
        if ((empty.Length == 0)) {
            return new Dictionary<string, object>{{"board", b}, {"full", true}};
        };
        int idx = (_now() % empty.Length);
        int[] cell = empty[idx];
        int val = 4;
        if (((_now() % 10) < 9)) {
            val = 2;
        };
        b[cell[1]][cell[0]] = val;
        return new Dictionary<string, object>{{"board", b}, {"full", (empty.Length == 1)}};
    }

    static string pad(int n) {
        string s = n.ToString();
        int pad = (4 - s.Length);
        int i = 0;
        string _out = "";
        while ((i < pad)) {
            _out = (_out + " ");
            i = (i + 1);
        };
        return (_out + s);
    }

    static void draw(int[][] b, int score) {
        Console.WriteLine(("Score: " + score.ToString()));
        int y = 0;
        while ((y < SIZE)) {
            Console.WriteLine("+----+----+----+----+");
            string line = "|";
            int x = 0;
            while ((x < SIZE)) {
                int v = b[y][x];
                if ((v == 0)) {
                    line = (line + "    |");
                } else {
                    line = ((line + pad(v)) + "|");
                }
                x = (x + 1);
            }
            Console.WriteLine(line);
            y = (y + 1);
        };
        Console.WriteLine("+----+----+----+----+");
        Console.WriteLine("W=Up S=Down A=Left D=Right Q=Quit");
    }

    static int[] reverseRow(int[] r) {
        int[] _out = new int[]{};
        int i = (r.Length - 1);
        while ((i >= 0)) {
            _out = (_out.Append(r[i]).ToArray());
            i = (i - 1);
        };
        return _out;
    }

    static Dictionary<string, object> slideLeft(int[] row) {
        int[] xs = new int[]{};
        int i = 0;
        while ((i < row.Length)) {
            if ((row[i] != 0)) {
                xs = (xs.Append(row[i]).ToArray());
            }
            i = (i + 1);
        };
        int[] res = new int[]{};
        int gain = 0;
        i = 0;
        while ((i < xs.Length)) {
            if ((((i + 1) < xs.Length) && (xs[i] == xs[(i + 1)]))) {
                int v = (xs[i] * 2);
                gain = (gain + v);
                res = (res.Append(v).ToArray());
                i = (i + 2);
            } else {
                res = (res.Append(xs[i]).ToArray());
                i = (i + 1);
            }
        };
        while ((res.Length < SIZE)) {
            res = (res.Append(0).ToArray());
        };
        return new Dictionary<string, object>{{"row", res}, {"gain", gain}};
    }

    static Dictionary<string, object> moveLeft(int[][] b, int score) {
        bool moved = false;
        int y = 0;
        while ((y < SIZE)) {
            Dictionary<string, object> r = slideLeft(b[y]);
            var _new = (dynamic)(r["row"]);
            score = (score + (dynamic)(r["gain"]));
            int x = 0;
            while ((x < SIZE)) {
                if ((b[y][x] != _new[x])) {
                    moved = true;
                }
                b[y][x] = _new[x];
                x = (x + 1);
            }
            y = (y + 1);
        };
        return new Dictionary<string, object>{{"board", b}, {"score", score}, {"moved", moved}};
    }

    static Dictionary<string, object> moveRight(int[][] b, int score) {
        bool moved = false;
        int y = 0;
        while ((y < SIZE)) {
            int[] rev = reverseRow(b[y]);
            Dictionary<string, object> r = slideLeft(rev);
            rev = (dynamic)(r["row"]);
            score = (score + (dynamic)(r["gain"]));
            rev = reverseRow(rev);
            int x = 0;
            while ((x < SIZE)) {
                if ((b[y][x] != rev[x])) {
                    moved = true;
                }
                b[y][x] = rev[x];
                x = (x + 1);
            }
            y = (y + 1);
        };
        return new Dictionary<string, object>{{"board", b}, {"score", score}, {"moved", moved}};
    }

    static int[] getCol(int[][] b, int x) {
        int[] col = new int[]{};
        int y = 0;
        while ((y < SIZE)) {
            col = (col.Append(b[y][x]).ToArray());
            y = (y + 1);
        };
        return col;
    }

    static void setCol(int[][] b, int x, int[] col) {
        int y = 0;
        while ((y < SIZE)) {
            b[y][x] = col[y];
            y = (y + 1);
        };
    }

    static Dictionary<string, object> moveUp(int[][] b, int score) {
        bool moved = false;
        int x = 0;
        while ((x < SIZE)) {
            int[] col = getCol(b, x);
            Dictionary<string, object> r = slideLeft(col);
            var _new = (dynamic)(r["row"]);
            score = (score + (dynamic)(r["gain"]));
            int y = 0;
            while ((y < SIZE)) {
                if ((b[y][x] != _new[y])) {
                    moved = true;
                }
                b[y][x] = _new[y];
                y = (y + 1);
            }
            x = (x + 1);
        };
        return new Dictionary<string, object>{{"board", b}, {"score", score}, {"moved", moved}};
    }

    static Dictionary<string, object> moveDown(int[][] b, int score) {
        bool moved = false;
        int x = 0;
        while ((x < SIZE)) {
            int[] col = reverseRow(getCol(b, x));
            Dictionary<string, object> r = slideLeft(col);
            col = (dynamic)(r["row"]);
            score = (score + (dynamic)(r["gain"]));
            col = reverseRow(col);
            int y = 0;
            while ((y < SIZE)) {
                if ((b[y][x] != col[y])) {
                    moved = true;
                }
                b[y][x] = col[y];
                y = (y + 1);
            }
            x = (x + 1);
        };
        return new Dictionary<string, object>{{"board", b}, {"score", score}, {"moved", moved}};
    }

    static bool hasMoves(int[][] b) {
        int y = 0;
        while ((y < SIZE)) {
            int x = 0;
            while ((x < SIZE)) {
                if ((b[y][x] == 0)) {
                    return true;
                }
                if ((((x + 1) < SIZE) && (b[y][x] == b[y][(x + 1)]))) {
                    return true;
                }
                if ((((y + 1) < SIZE) && (b[y][x] == b[(y + 1)][x]))) {
                    return true;
                }
                x = (x + 1);
            }
            y = (y + 1);
        };
        return false;
    }

    static bool has2048(int[][] b) {
        int y = 0;
        while ((y < SIZE)) {
            int x = 0;
            while ((x < SIZE)) {
                if ((b[y][x] >= 2048)) {
                    return true;
                }
                x = (x + 1);
            }
            y = (y + 1);
        };
        return false;
    }

    static void Main() {
        board = (dynamic)(r["board"]);
        r = spawnTile(board);
        board = (dynamic)(r["board"]);
        full = (dynamic)(r["full"]);
        draw(board, score);
        while (true) {
            Console.WriteLine("Move: ");
            string cmd = _input();
            bool moved = false;
            if (((cmd == "a") || (cmd == "A"))) {
                Dictionary<string, object> m = moveLeft(board, score);
                board = (dynamic)(m["board"]);
                score = (dynamic)(m["score"]);
                moved = (dynamic)(m["moved"]);
            }
            if (((cmd == "d") || (cmd == "D"))) {
                Dictionary<string, object> m = moveRight(board, score);
                board = (dynamic)(m["board"]);
                score = (dynamic)(m["score"]);
                moved = (dynamic)(m["moved"]);
            }
            if (((cmd == "w") || (cmd == "W"))) {
                Dictionary<string, object> m = moveUp(board, score);
                board = (dynamic)(m["board"]);
                score = (dynamic)(m["score"]);
                moved = (dynamic)(m["moved"]);
            }
            if (((cmd == "s") || (cmd == "S"))) {
                Dictionary<string, object> m = moveDown(board, score);
                board = (dynamic)(m["board"]);
                score = (dynamic)(m["score"]);
                moved = (dynamic)(m["moved"]);
            }
            if (((cmd == "q") || (cmd == "Q"))) {
                break;
            }
            if (moved) {
                Dictionary<string, object> r2 = spawnTile(board);
                board = (dynamic)(r2["board"]);
                full = (dynamic)(r2["full"]);
                if ((full && (!hasMoves(board)))) {
                    draw(board, score);
                    Console.WriteLine("Game Over");
                    break;
                }
            }
            draw(board, score);
            if (has2048(board)) {
                Console.WriteLine("You win!");
                break;
            }
            if ((!hasMoves(board))) {
                Console.WriteLine("Game Over");
                break;
            }
        }
    }
}
