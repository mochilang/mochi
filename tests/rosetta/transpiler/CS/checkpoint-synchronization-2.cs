// Generated by Mochi 0.10.42 on 2025-07-27 16:53 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] partList_4 = new string[]{"A", "B", "C", "D"};
    static long nAssemblies_5 = 3;
    static string lower(string ch_0) {
        string upper_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_2 = "abcdefghijklmnopqrstuvwxyz";
        long i_3 = 0;
        while ((i_3 < upper_1.Length)) {
            if ((ch_0 == upper_1.Substring((int)(i_3), (int)((i_3 + 1) - i_3)))) {
                return lower_2.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            }
            i_3 = (i_3 + 1);
        };
        return ch_0;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var cycle_6 = 1; cycle_6 < (nAssemblies_5 + 1); cycle_6++) {
                Console.WriteLine(_fmtTop(("begin assembly cycle " + (cycle_6).ToString())));
                string a_7 = "";
                foreach (var p_8 in partList_4) {
                    Console.WriteLine(_fmtTop((p_8 + " worker begins part")));
                    Console.WriteLine(_fmtTop(((p_8 + " worker completed ") + p_8.ToLower())));
                    a_7 = (a_7 + p_8.ToLower());
                }
                Console.WriteLine(_fmtTop((((a_7 + " assembled.  cycle ") + (cycle_6).ToString()) + " complete")));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
