// Generated by Mochi 0.10.39 on 2025-07-24 21:18 +0700
using System;
using System.Collections.Generic;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static dynamic tr = null;
    static int i = 1;
    static Dictionary<string, object> node(string cl, object le, int aa, object ri) {
        return new Dictionary<string, object>{{"cl", cl}, {"le", le}, {"aa", aa}, {"ri", ri}};
    }

    static string treeString(object t) {
        if ((t == null)) {
            return "E";
        };
        Dictionary<string, object> m = (Dictionary<string, object>)t;
        return (((((((("T(" + ((dynamic)m)["cl"]) + ", ") + treeString(((dynamic)m)["le"])) + ", ") + (((dynamic)m)["aa"]).ToString()) + ", ") + treeString(((dynamic)m)["ri"])) + ")");
    }

    static object balance(object t) {
        if ((t == null)) {
            return t;
        };
        Dictionary<string, object> m_0 = (Dictionary<string, object>)t;
        if ((((dynamic)m_0)["cl"] != "B")) {
            return t;
        };
        var le = ((dynamic)m_0)["le"];
        var ri = ((dynamic)m_0)["ri"];
        if ((le != null)) {
            Dictionary<string, object> leMap = (Dictionary<string, object>)le;
            if ((((dynamic)leMap)["cl"] == "R")) {
                var lele = ((dynamic)leMap)["le"];
                if ((lele != null)) {
                    Dictionary<string, object> leleMap = (Dictionary<string, object>)lele;
                    if ((((dynamic)leleMap)["cl"] == "R")) {
                        return node("R", node("B", ((dynamic)leleMap)["le"], ((dynamic)leleMap)["aa"], ((dynamic)leleMap)["ri"]), ((dynamic)leMap)["aa"], node("B", ((dynamic)leMap)["ri"], ((dynamic)m_0)["aa"], ri));
                    }
                }
                var leri = ((dynamic)leMap)["ri"];
                if ((leri != null)) {
                    Dictionary<string, object> leriMap = (Dictionary<string, object>)leri;
                    if ((((dynamic)leriMap)["cl"] == "R")) {
                        return node("R", node("B", ((dynamic)leMap)["le"], ((dynamic)leMap)["aa"], ((dynamic)leriMap)["le"]), ((dynamic)leriMap)["aa"], node("B", ((dynamic)leriMap)["ri"], ((dynamic)m_0)["aa"], ri));
                    }
                }
            }
        };
        if ((ri != null)) {
            Dictionary<string, object> riMap = (Dictionary<string, object>)ri;
            if ((((dynamic)riMap)["cl"] == "R")) {
                var rile = ((dynamic)riMap)["le"];
                if ((rile != null)) {
                    Dictionary<string, object> rileMap = (Dictionary<string, object>)rile;
                    if ((((dynamic)rileMap)["cl"] == "R")) {
                        return node("R", node("B", ((dynamic)m_0)["le"], ((dynamic)m_0)["aa"], ((dynamic)rileMap)["le"]), ((dynamic)rileMap)["aa"], node("B", ((dynamic)rileMap)["ri"], ((dynamic)riMap)["aa"], ((dynamic)riMap)["ri"]));
                    }
                }
                var riri = ((dynamic)riMap)["ri"];
                if ((riri != null)) {
                    Dictionary<string, object> ririMap = (Dictionary<string, object>)riri;
                    if ((((dynamic)ririMap)["cl"] == "R")) {
                        return node("R", node("B", ((dynamic)m_0)["le"], ((dynamic)m_0)["aa"], ((dynamic)riMap)["le"]), ((dynamic)riMap)["aa"], node("B", ((dynamic)ririMap)["le"], ((dynamic)ririMap)["aa"], ((dynamic)ririMap)["ri"]));
                    }
                }
            }
        };
        return t;
    }

    static object ins(object tr, int x) {
        if ((tr == null)) {
            return node("R", null, x, null);
        };
        if ((x < ((dynamic)tr)["aa"])) {
            return balance(node(((dynamic)tr)["cl"], ins(((dynamic)tr)["le"], x), ((dynamic)tr)["aa"], ((dynamic)tr)["ri"]));
        };
        if ((x > ((dynamic)tr)["aa"])) {
            return balance(node(((dynamic)tr)["cl"], ((dynamic)tr)["le"], ((dynamic)tr)["aa"], ins(((dynamic)tr)["ri"], x)));
        };
        return tr;
    }

    static object insert(object tr, int x) {
        var t = ins(tr, x);
        if ((t == null)) {
            return null;
        };
        Dictionary<string, object> m_1 = (Dictionary<string, object>)t;
        return node("B", ((dynamic)m_1)["le"], ((dynamic)m_1)["aa"], ((dynamic)m_1)["ri"]);
    }

    static void Main() {
        while ((i <= 16)) {
            tr = insert(tr, i);
            i = (i + 1);
        }
        Console.WriteLine(_fmtTop(treeString(tr)));
    }
}
