// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string ppmData_18 = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n";
    static Dictionary<string, object> img_19 = parsePpm(ppmData_18);
    static long parseIntStr(string str_0) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((Convert.ToDouble(str_0.Length) > Convert.ToDouble(0)) && (str_0.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        long n_3 = 0;
        Dictionary<string, long> digits_4 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((Convert.ToDouble(i_1) < Convert.ToDouble(str_0.Length))) {
            n_3 = ((n_3 * 10) + (digits_4.ContainsKey(str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))) ? digits_4[str_0.Substring((int)(i_1), (int)((i_1 + 1) - i_1))] : 0));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static string[] splitWs(string s_5) {
        string[] parts_6 = new string[]{};
        string cur_7 = "";
        long i_8 = 0;
        while ((Convert.ToDouble(i_8) < Convert.ToDouble(s_5.Length))) {
            string ch_9 = s_5.Substring((int)(i_8), (int)((i_8 + 1) - i_8));
            if (((((ch_9 == " ") || (ch_9 == "\n")) || (ch_9 == "\t")) || (ch_9 == "\r"))) {
                if ((Convert.ToDouble(cur_7.Length) > Convert.ToDouble(0))) {
                    parts_6 = (Enumerable.ToArray(Enumerable.Append(parts_6, cur_7)));
                    cur_7 = "";
                }
            } else {
                cur_7 = (cur_7 + ch_9);
            }
            i_8 = (i_8 + 1);
        };
        if ((Convert.ToDouble(cur_7.Length) > Convert.ToDouble(0))) {
            parts_6 = (Enumerable.ToArray(Enumerable.Append(parts_6, cur_7)));
        };
        return parts_6;
    }

    static Dictionary<string, object> parsePpm(string data_10) {
        string[] toks_11 = splitWs(data_10);
        if ((Convert.ToDouble(toks_11.Length) < Convert.ToDouble(4))) {
            return new Dictionary<string, object>{{"err", true}};
        };
        string magic_12 = toks_11[(int)(0)];
        long w_13 = parseIntStr(toks_11[(int)(1)]);
        long h_14 = parseIntStr(toks_11[(int)(2)]);
        long maxv_15 = parseIntStr(toks_11[(int)(3)]);
        long[] px_16 = new long[]{};
        long i_17 = 4;
        while ((Convert.ToDouble(i_17) < Convert.ToDouble(toks_11.Length))) {
            px_16 = (Enumerable.ToArray(Enumerable.Append(px_16, parseIntStr(toks_11[(int)(i_17)]))));
            i_17 = (i_17 + 1);
        };
        return new Dictionary<string, object>{{"magic", magic_12}, {"w", w_13}, {"h", h_14}, {"max", maxv_15}, {"px", px_16}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(((("width=" + _fmt(((dynamic)(img_19["w"])))) + " height=") + _fmt(((dynamic)(img_19["h"]))))));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
