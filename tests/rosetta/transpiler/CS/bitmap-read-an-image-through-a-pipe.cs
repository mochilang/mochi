// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string ppmData_15 = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n";
    static Dictionary<string, object> img_16 = parsePpm(ppmData_15);
    static long parseIntStr(string str) {
        long i_0 = 0;
        bool neg_1 = false;
        if (((str.Length > 0) && (str.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_1 = true;
            i_0 = 1;
        };
        long n_2 = 0;
        Dictionary<string, long> digits_3 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_0 < str.Length)) {
            n_2 = ((n_2 * 10) + (digits_3.ContainsKey(str.Substring((int)(i_0), (int)((i_0 + 1) - i_0))) ? digits_3[str.Substring((int)(i_0), (int)((i_0 + 1) - i_0))] : 0));
            i_0 = (i_0 + 1);
        };
        if (neg_1) {
            n_2 = -n_2;
        };
        return n_2;
    }

    static string[] splitWs(string s) {
        string[] parts_4 = new string[]{};
        string cur_5 = "";
        long i_6 = 0;
        while ((i_6 < s.Length)) {
            string ch_7 = s.Substring((int)(i_6), (int)((i_6 + 1) - i_6));
            if (((((ch_7 == " ") || (ch_7 == "\n")) || (ch_7 == "\t")) || (ch_7 == "\r"))) {
                if ((cur_5.Length > 0)) {
                    parts_4 = (Enumerable.ToArray(Enumerable.Append(parts_4, cur_5)));
                    cur_5 = "";
                }
            } else {
                cur_5 = (cur_5 + ch_7);
            }
            i_6 = (i_6 + 1);
        };
        if ((cur_5.Length > 0)) {
            parts_4 = (Enumerable.ToArray(Enumerable.Append(parts_4, cur_5)));
        };
        return parts_4;
    }

    static Dictionary<string, object> parsePpm(string data) {
        string[] toks_8 = splitWs(data);
        if ((toks_8.Length < 4)) {
            return new Dictionary<string, object>{{"err", true}};
        };
        string magic_9 = toks_8[(int)(0)];
        long w_10 = parseIntStr(toks_8[(int)(1)]);
        long h_11 = parseIntStr(toks_8[(int)(2)]);
        long maxv_12 = parseIntStr(toks_8[(int)(3)]);
        long[] px_13 = new long[]{};
        long i_14 = 4;
        while ((i_14 < toks_8.Length)) {
            px_13 = (Enumerable.ToArray(Enumerable.Append(px_13, parseIntStr(toks_8[(int)(i_14)]))));
            i_14 = (i_14 + 1);
        };
        return new Dictionary<string, object>{{"magic", magic_9}, {"w", w_10}, {"h", h_11}, {"max", maxv_12}, {"px", px_13}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(((("width=" + (((dynamic)(img_16["w"]))).ToString()) + " height=") + (((dynamic)(img_16["h"]))).ToString())));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
