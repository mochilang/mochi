// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static object[] doors_0 = new object[]{};
    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var i_1 = 0; i_1 < 100; i_1++) {
                doors_0 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(doors_0.Cast<object>()), false)));
            }
            for (var pass_2 = 1; pass_2 < 101; pass_2++) {
                long idx_3 = (pass_2 - 1);
                while ((idx_3 < 100)) {
                    doors_0[idx_3] = (!Convert.ToBoolean(((dynamic)doors_0)[idx_3]));
                    idx_3 = (idx_3 + pass_2);
                }
            }
            for (var row_4 = 0; row_4 < 10; row_4++) {
                string line_5 = "";
                for (var col_6 = 0; col_6 < 10; col_6++) {
                    long idx_7 = ((row_4 * 10) + col_6);
                    if (((dynamic)doors_0)[idx_7]) {
                        line_5 = (line_5 + "1");
                    } else {
                        line_5 = (line_5 + "0");
                    }
                    if ((col_6 < 9)) {
                        line_5 = (line_5 + " ");
                    }
                }
                Console.WriteLine(_fmtTop(line_5));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
