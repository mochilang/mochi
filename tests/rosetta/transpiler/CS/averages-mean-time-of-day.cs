// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double PI_0 = 3.141592653589793;
    static double sinApprox(double x_1) {
        double term_2 = x_1;
        double sum_3 = x_1;
        long n_4 = 1;
        while ((n_4 <= 8)) {
            var denom_5 = Convert.ToDouble(((2 * n_4) * ((2 * n_4) + 1)));
            term_2 = (((dynamic)(((-term_2 * x_1) * x_1))) / ((dynamic)(denom_5)));
            sum_3 = (sum_3 + term_2);
            n_4 = (n_4 + 1);
        };
        return sum_3;
    }

    static double cosApprox(double x_6) {
        double term_7 = 1.0;
        double sum_8 = 1.0;
        long n_9 = 1;
        while ((n_9 <= 8)) {
            var denom_10 = Convert.ToDouble((((2 * n_9) - 1) * (2 * n_9)));
            term_7 = (((dynamic)(((-term_7 * x_6) * x_6))) / ((dynamic)(denom_10)));
            sum_8 = (sum_8 + term_7);
            n_9 = (n_9 + 1);
        };
        return sum_8;
    }

    static double atanApprox(double x_11) {
        if ((x_11 > 1.0)) {
            return ((PI_0 / 2.0) - (x_11 / ((x_11 * x_11) + 0.28)));
        };
        if ((x_11 < -1.0)) {
            return ((-PI_0 / 2.0) - (x_11 / ((x_11 * x_11) + 0.28)));
        };
        return (x_11 / (1.0 + ((0.28 * x_11) * x_11)));
    }

    static double atan2Approx(double y_12, double x_13) {
        if ((x_13 > 0.0)) {
            return atanApprox((y_12 / x_13));
        };
        if ((x_13 < 0.0)) {
            if ((y_12 >= 0.0)) {
                return (atanApprox((y_12 / x_13)) + PI_0);
            }
            return (atanApprox((y_12 / x_13)) - PI_0);
        };
        if ((y_12 > 0.0)) {
            return (PI_0 / 2.0);
        };
        if ((y_12 < 0.0)) {
            return (-PI_0 / 2.0);
        };
        return 0.0;
    }

    static long digit(string ch_14) {
        string digits_15 = "0123456789";
        long i_16 = 0;
        while ((string.Compare(Convert.ToString(i_16), Convert.ToString(digits_15.Length)) < 0)) {
            if ((digits_15.Substring((int)(i_16), (int)((i_16 + 1) - i_16)) == ch_14)) {
                return i_16;
            }
            i_16 = (i_16 + 1);
        };
        return 0;
    }

    static long parseTwo(string s_17, long idx_18) {
        return ((digit(s_17.Substring((int)(idx_18), (int)((idx_18 + 1) - idx_18))) * 10) + digit(s_17.Substring((int)((idx_18 + 1)), (int)((idx_18 + 2) - (idx_18 + 1)))));
    }

    static double parseSec(string s_19) {
        long h_20 = parseTwo(s_19, 0);
        long m_21 = parseTwo(s_19, 3);
        long sec_22 = parseTwo(s_19, 6);
        long tmp_23 = ((((h_20 * 60) + m_21) * 60) + sec_22);
        return Convert.ToDouble(tmp_23);
    }

    static string pad(long n_24) {
        if ((n_24 < 10)) {
            return ("0" + (n_24).ToString());
        };
        return (n_24).ToString();
    }

    static string meanTime(string[] times_25) {
        double ssum_26 = 0.0;
        double csum_27 = 0.0;
        long i_28 = 0;
        while ((string.Compare(Convert.ToString(i_28), Convert.ToString(times_25.Length)) < 0)) {
            double sec_29 = parseSec(times_25[(int)(i_28)]);
            double ang_30 = (((sec_29 * 2.0) * PI_0) / 86400.0);
            ssum_26 = (ssum_26 + sinApprox(ang_30));
            csum_27 = (csum_27 + cosApprox(ang_30));
            i_28 = (i_28 + 1);
        };
        double theta_31 = atan2Approx(ssum_26, csum_27);
        double frac_32 = (theta_31 / (2.0 * PI_0));
        while ((frac_32 < 0.0)) {
            frac_32 = (frac_32 + 1.0);
        };
        double total_33 = (frac_32 * 86400.0);
        var si_34 = Convert.ToInt64(total_33);
        var h_35 = Convert.ToInt64((((dynamic)(si_34)) / ((dynamic)(3600))));
        var m_36 = Convert.ToInt64(((((dynamic)(si_34)) % ((dynamic)(3600))) / 60));
        var s_37 = Convert.ToInt64((((dynamic)(si_34)) % ((dynamic)(60))));
        return ((((pad(h_35) + ":") + pad(m_36)) + ":") + pad(s_37));
    }

    static void main() {
        string[] inputs_38 = new string[]{"23:00:17", "23:40:20", "00:12:45", "00:17:19"};
        Console.WriteLine(_fmtTop(meanTime(inputs_38)));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
