// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

struct Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
struct Bitmap {
    public long w;
    public long h;
    public long max;
    public Pixel[][] data;
    public override string ToString() => $"Bitmap {{w = {w}, h = {h}, max = {max}, data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string ppmtxt_52 = ((((((("P3\n" + "# feep.ppm\n") + "4 4\n") + "15\n") + " 0  0  0    0  0  0    0  0  0   15  0 15\n") + " 0  0  0    0 15  7    0  0  0    0  0  0\n") + " 0  0  0    0  0  0    0 15  7    0  0  0\n") + "15  0 15    0  0  0    0  0  0    0  0  0\n");
    static Bitmap bm_53 = readP3(ppmtxt_52);
    static string out_54 = writeP3(bm_53);
    static Bitmap newBitmap(long w, long h, long max) {
        Pixel[][] rows_0 = new Pixel[][]{};
        long y_1 = 0;
        while ((y_1 < h)) {
            Pixel[] row_2 = new Pixel[]{};
            long x_3 = 0;
            while ((x_3 < w)) {
                row_2 = (Enumerable.ToArray(Enumerable.Append(row_2, new Pixel{R = 0, G = 0, B = 0})));
                x_3 = (x_3 + 1);
            }
            rows_0 = (Enumerable.ToArray(Enumerable.Append(rows_0, row_2)));
            y_1 = (y_1 + 1);
        };
        return new Bitmap{w = w, h = h, max = max, data = rows_0};
    }

    static void setPx(Bitmap b, long x, long y, Pixel p) {
        Pixel[][] rows_4 = b.data;
        Pixel[] row_5 = rows_4[(int)(y)];
        row_5[x] = p;
        rows_4[y] = row_5;
        b.data = rows_4;
    }

    static Pixel getPx(Bitmap b, long x, long y) {
        return b.data[(int)(y)][(int)(x)];
    }

    static string[] splitLines(string s) {
        string[] out_6 = new string[]{};
        string cur_7 = "";
        long i_8 = 0;
        while ((i_8 < s.Length)) {
            string ch_9 = s.Substring((int)(i_8), (int)((i_8 + 1) - i_8));
            if ((ch_9 == "\n")) {
                out_6 = (Enumerable.ToArray(Enumerable.Append(out_6, cur_7)));
                cur_7 = "";
            } else {
                cur_7 = (cur_7 + ch_9);
            }
            i_8 = (i_8 + 1);
        };
        out_6 = (Enumerable.ToArray(Enumerable.Append(out_6, cur_7)));
        return out_6;
    }

    static string[] splitWS(string s) {
        string[] out_10 = new string[]{};
        string cur_11 = "";
        long i_12 = 0;
        while ((i_12 < s.Length)) {
            string ch_13 = s.Substring((int)(i_12), (int)((i_12 + 1) - i_12));
            if (((((ch_13 == " ") || (ch_13 == "\t")) || (ch_13 == "\r")) || (ch_13 == "\n"))) {
                if ((cur_11.Length > 0)) {
                    out_10 = (Enumerable.ToArray(Enumerable.Append(out_10, cur_11)));
                    cur_11 = "";
                }
            } else {
                cur_11 = (cur_11 + ch_13);
            }
            i_12 = (i_12 + 1);
        };
        if ((cur_11.Length > 0)) {
            out_10 = (Enumerable.ToArray(Enumerable.Append(out_10, cur_11)));
        };
        return out_10;
    }

    static long parseIntStr(string str) {
        long i_14 = 0;
        bool neg_15 = false;
        if (((str.Length > 0) && (str.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_15 = true;
            i_14 = 1;
        };
        long n_16 = 0;
        Dictionary<string, long> digits_17 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_14 < str.Length)) {
            n_16 = ((n_16 * 10) + (digits_17.ContainsKey(str.Substring((int)(i_14), (int)((i_14 + 1) - i_14))) ? digits_17[str.Substring((int)(i_14), (int)((i_14 + 1) - i_14))] : 0));
            i_14 = (i_14 + 1);
        };
        if (neg_15) {
            n_16 = -n_16;
        };
        return n_16;
    }

    static string[] tokenize(string s) {
        string[] lines_18 = splitLines(s);
        string[] toks_19 = new string[]{};
        long i_20 = 0;
        while ((i_20 < lines_18.Length)) {
            string line_21 = lines_18[(int)(i_20)];
            if (((line_21.Length > 0) && (line_21.Substring((int)(0), (int)(1 - 0)) == "#"))) {
                i_20 = (i_20 + 1);
                continue;
            }
            string[] parts_22 = splitWS(line_21);
            long j_23 = 0;
            while ((j_23 < parts_22.Length)) {
                toks_19 = (Enumerable.ToArray(Enumerable.Append(toks_19, parts_22[(int)(j_23)])));
                j_23 = (j_23 + 1);
            }
            i_20 = (i_20 + 1);
        };
        return toks_19;
    }

    static Bitmap readP3(string text) {
        string[] toks_24 = tokenize(text);
        if ((toks_24.Length < 4)) {
            return newBitmap(0, 0, 0);
        };
        if ((toks_24[(int)(0)] != "P3")) {
            return newBitmap(0, 0, 0);
        };
        long w_25 = parseIntStr(toks_24[(int)(1)]);
        long h_26 = parseIntStr(toks_24[(int)(2)]);
        long maxv_27 = parseIntStr(toks_24[(int)(3)]);
        long idx_28 = 4;
        Bitmap bm_29 = newBitmap(w_25, h_26, maxv_27);
        long y_30 = (h_26 - 1);
        while ((y_30 >= 0)) {
            long x_31 = 0;
            while ((x_31 < w_25)) {
                long r_32 = parseIntStr(toks_24[(int)(idx_28)]);
                long g_33 = parseIntStr(toks_24[(int)((idx_28 + 1))]);
                long b_34 = parseIntStr(toks_24[(int)((idx_28 + 2))]);
                setPx(bm_29, x_31, y_30, new Pixel{R = r_32, G = g_33, B = b_34});
                idx_28 = (idx_28 + 3);
                x_31 = (x_31 + 1);
            }
            y_30 = (y_30 - 1);
        };
        return bm_29;
    }

    static void toGrey(Bitmap b) {
        long h_35 = b.h;
        long w_36 = b.w;
        long m_37 = 0;
        long y_38 = 0;
        while ((y_38 < h_35)) {
            long x_39 = 0;
            while ((x_39 < w_36)) {
                Pixel p_40 = getPx(b, x_39, y_38);
                long l_41 = ((((p_40.R * 2126) + (p_40.G * 7152)) + (p_40.B * 722)) / 10000);
                if ((l_41 > b.max)) {
                    l_41 = b.max;
                }
                setPx(b, x_39, y_38, new Pixel{R = l_41, G = l_41, B = l_41});
                if ((l_41 > m_37)) {
                    m_37 = l_41;
                }
                x_39 = (x_39 + 1);
            }
            y_38 = (y_38 + 1);
        };
        b.max = m_37;
    }

    static string pad(long n, long w) {
        string s_42 = (n).ToString();
        while ((s_42.Length < w)) {
            s_42 = (" " + s_42);
        };
        return s_42;
    }

    static string writeP3(Bitmap b) {
        long h_43 = b.h;
        long w_44 = b.w;
        long max_45 = b.max;
        var digits_46 = (max_45).ToString().Length;
        string out_47 = (((((("P3\n# generated from Bitmap.writeppmp3\n" + (w_44).ToString()) + " ") + (h_43).ToString()) + "\n") + (max_45).ToString()) + "\n");
        long y_48 = (h_43 - 1);
        while ((y_48 >= 0)) {
            string line_49 = "";
            long x_50 = 0;
            while ((x_50 < w_44)) {
                Pixel p_51 = getPx(b, x_50, y_48);
                line_49 = ((((((line_49 + "   ") + pad(p_51.R, digits_46)) + " ") + pad(p_51.G, digits_46)) + " ") + pad(p_51.B, digits_46));
                x_50 = (x_50 + 1);
            }
            out_47 = ((out_47 + line_49) + "\n");
            y_48 = (y_48 - 1);
        };
        return out_47;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("Original Colour PPM file"));
            Console.WriteLine(_fmtTop(ppmtxt_52));
            Console.WriteLine(_fmtTop("Grey PPM:"));
            toGrey(bm_53);
            Console.WriteLine(_fmtTop(out_54));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
