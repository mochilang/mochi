// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
class Bitmap {
    public long w;
    public long h;
    public long max;
    public Pixel[][] data;
    public override string ToString() => $"Bitmap {{w = {w}, h = {h}, max = {max}, data = {data}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string ppmtxt_71 = ((((((("P3\n" + "# feep.ppm\n") + "4 4\n") + "15\n") + " 0  0  0    0  0  0    0  0  0   15  0 15\n") + " 0  0  0    0 15  7    0  0  0    0  0  0\n") + " 0  0  0    0  0  0    0 15  7    0  0  0\n") + "15  0 15    0  0  0    0  0  0    0  0  0\n");
    static Bitmap newBitmap(long w_0, long h_1, long max_2) {
        Pixel[][] rows_3 = new Pixel[][]{};
        long y_4 = 0;
        while ((y_4 < h_1)) {
            Pixel[] row_5 = new Pixel[]{};
            long x_6 = 0;
            while ((x_6 < w_0)) {
                row_5 = (Enumerable.ToArray(Enumerable.Append(row_5, new Pixel{R = 0, G = 0, B = 0})));
                x_6 = (x_6 + 1);
            }
            rows_3 = (Enumerable.ToArray(Enumerable.Append(rows_3, row_5)));
            y_4 = (y_4 + 1);
        };
        return new Bitmap{w = w_0, h = h_1, max = max_2, data = rows_3};
    }

    static void setPx(Bitmap b_7, long x_8, long y_9, Pixel p_10) {
        Pixel[][] rows_11 = b_7.data;
        Pixel[] row_12 = rows_11[(int)(y_9)];
        row_12[x_8] = p_10;
        rows_11[y_9] = row_12;
        b_7.data = rows_11;
    }

    static Pixel getPx(Bitmap b_13, long x_14, long y_15) {
        return b_13.data[(int)(y_15)][(int)(x_14)];
    }

    static string[] splitLines(string s_16) {
        string[] out_17 = new string[]{};
        string cur_18 = "";
        long i_19 = 0;
        while ((Convert.ToDouble(i_19) < Convert.ToDouble(s_16.Length))) {
            string ch_20 = s_16.Substring((int)(i_19), (int)((i_19 + 1) - i_19));
            if ((ch_20 == "\n")) {
                out_17 = (Enumerable.ToArray(Enumerable.Append(out_17, cur_18)));
                cur_18 = "";
            } else {
                cur_18 = (cur_18 + ch_20);
            }
            i_19 = (i_19 + 1);
        };
        out_17 = (Enumerable.ToArray(Enumerable.Append(out_17, cur_18)));
        return out_17;
    }

    static string[] splitWS(string s_21) {
        string[] out_22 = new string[]{};
        string cur_23 = "";
        long i_24 = 0;
        while ((Convert.ToDouble(i_24) < Convert.ToDouble(s_21.Length))) {
            string ch_25 = s_21.Substring((int)(i_24), (int)((i_24 + 1) - i_24));
            if (((((ch_25 == " ") || (ch_25 == "\t")) || (ch_25 == "\r")) || (ch_25 == "\n"))) {
                if ((Convert.ToDouble(cur_23.Length) > Convert.ToDouble(0))) {
                    out_22 = (Enumerable.ToArray(Enumerable.Append(out_22, cur_23)));
                    cur_23 = "";
                }
            } else {
                cur_23 = (cur_23 + ch_25);
            }
            i_24 = (i_24 + 1);
        };
        if ((Convert.ToDouble(cur_23.Length) > Convert.ToDouble(0))) {
            out_22 = (Enumerable.ToArray(Enumerable.Append(out_22, cur_23)));
        };
        return out_22;
    }

    static long parseIntStr(string str_26) {
        long i_27 = 0;
        bool neg_28 = false;
        if (((Convert.ToDouble(str_26.Length) > Convert.ToDouble(0)) && (str_26.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_28 = true;
            i_27 = 1;
        };
        long n_29 = 0;
        Dictionary<string, long> digits_30 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((Convert.ToDouble(i_27) < Convert.ToDouble(str_26.Length))) {
            n_29 = ((n_29 * 10) + (digits_30.ContainsKey(str_26.Substring((int)(i_27), (int)((i_27 + 1) - i_27))) ? digits_30[str_26.Substring((int)(i_27), (int)((i_27 + 1) - i_27))] : 0));
            i_27 = (i_27 + 1);
        };
        if (neg_28) {
            n_29 = -n_29;
        };
        return n_29;
    }

    static string[] tokenize(string s_31) {
        string[] lines_32 = splitLines(s_31);
        string[] toks_33 = new string[]{};
        long i_34 = 0;
        while ((Convert.ToDouble(i_34) < Convert.ToDouble(lines_32.Length))) {
            string line_35 = lines_32[(int)(i_34)];
            if (((Convert.ToDouble(line_35.Length) > Convert.ToDouble(0)) && (line_35.Substring((int)(0), (int)(1 - 0)) == "#"))) {
                i_34 = (i_34 + 1);
                continue;
            }
            string[] parts_36 = splitWS(line_35);
            long j_37 = 0;
            while ((Convert.ToDouble(j_37) < Convert.ToDouble(parts_36.Length))) {
                toks_33 = (Enumerable.ToArray(Enumerable.Append(toks_33, parts_36[(int)(j_37)])));
                j_37 = (j_37 + 1);
            }
            i_34 = (i_34 + 1);
        };
        return toks_33;
    }

    static Bitmap readP3(string text_38) {
        string[] toks_39 = tokenize(text_38);
        if ((Convert.ToDouble(toks_39.Length) < Convert.ToDouble(4))) {
            return newBitmap(0, 0, 0);
        };
        if ((toks_39[(int)(0)] != "P3")) {
            return newBitmap(0, 0, 0);
        };
        long w_40 = parseIntStr(toks_39[(int)(1)]);
        long h_41 = parseIntStr(toks_39[(int)(2)]);
        long maxv_42 = parseIntStr(toks_39[(int)(3)]);
        long idx_43 = 4;
        Bitmap bm_44 = newBitmap(w_40, h_41, maxv_42);
        long y_45 = (h_41 - 1);
        while ((y_45 >= 0)) {
            long x_46 = 0;
            while ((x_46 < w_40)) {
                long r_47 = parseIntStr(toks_39[(int)(idx_43)]);
                long g_48 = parseIntStr(toks_39[(int)((idx_43 + 1))]);
                long b_49 = parseIntStr(toks_39[(int)((idx_43 + 2))]);
                setPx(bm_44, x_46, y_45, new Pixel{R = r_47, G = g_48, B = b_49});
                idx_43 = (idx_43 + 3);
                x_46 = (x_46 + 1);
            }
            y_45 = (y_45 - 1);
        };
        return bm_44;
    }

    static void toGrey(Bitmap b_50) {
        long h_51 = b_50.h;
        long w_52 = b_50.w;
        long m_53 = 0;
        long y_54 = 0;
        while ((y_54 < h_51)) {
            long x_55 = 0;
            while ((x_55 < w_52)) {
                Pixel p_56 = getPx(b_50, x_55, y_54);
                long l_57 = ((((p_56.R * 2126) + (p_56.G * 7152)) + (p_56.B * 722)) / 10000);
                if ((l_57 > b_50.max)) {
                    l_57 = b_50.max;
                }
                setPx(b_50, x_55, y_54, new Pixel{R = l_57, G = l_57, B = l_57});
                if ((l_57 > m_53)) {
                    m_53 = l_57;
                }
                x_55 = (x_55 + 1);
            }
            y_54 = (y_54 + 1);
        };
        b_50.max = m_53;
    }

    static string pad(long n_58, long w_59) {
        string s_60 = _fmt(n_58);
        while ((Convert.ToDouble(s_60.Length) < Convert.ToDouble(w_59))) {
            s_60 = (" " + s_60);
        };
        return s_60;
    }

    static string writeP3(Bitmap b_61) {
        long h_62 = b_61.h;
        long w_63 = b_61.w;
        long max_64 = b_61.max;
        var digits_65 = _fmt(max_64).Length;
        string out_66 = (((((("P3\n# generated from Bitmap.writeppmp3\n" + _fmt(w_63)) + " ") + _fmt(h_62)) + "\n") + _fmt(max_64)) + "\n");
        long y_67 = (h_62 - 1);
        while ((y_67 >= 0)) {
            string line_68 = "";
            long x_69 = 0;
            while ((x_69 < w_63)) {
                Pixel p_70 = getPx(b_61, x_69, y_67);
                line_68 = ((((((line_68 + "   ") + pad(p_70.R, digits_65)) + " ") + pad(p_70.G, digits_65)) + " ") + pad(p_70.B, digits_65));
                x_69 = (x_69 + 1);
            }
            out_66 = ((out_66 + line_68) + "\n");
            y_67 = (y_67 - 1);
        };
        return out_66;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("Original Colour PPM file"));
            Console.WriteLine(_fmtTop(ppmtxt_71));
            Bitmap bm_72 = readP3(ppmtxt_71);
            Console.WriteLine(_fmtTop("Grey PPM:"));
            toGrey(bm_72);
            string out_73 = writeP3(bm_72);
            Console.WriteLine(_fmtTop(out_73));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
