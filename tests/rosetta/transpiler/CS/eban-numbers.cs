// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] vals_0 = new long[]{0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66};
    static long[] billions_1 = new long[]{0, 2, 4, 6};
    static long[] ebanNumbers(long start_2, long stop_3) {
        long[] nums_4 = new long[]{};
        foreach (var b_5 in billions_1) {
            foreach (var m_6 in vals_0) {
                foreach (var t_7 in vals_0) {
                    foreach (var r_8 in vals_0) {
                        long n_9 = ((((b_5 * 1000000000) + (m_6 * 1000000)) + (t_7 * 1000)) + r_8);
                        if (((n_9 >= start_2) && (n_9 <= stop_3))) {
                            nums_4 = (Enumerable.ToArray(Enumerable.Append(nums_4, n_9)));
                        }
                    }
                }
            }
        };
        return nums_4;
    }

    static long countEban(long start_10, long stop_11) {
        long count_12 = 0;
        foreach (var b_13 in billions_1) {
            foreach (var m_14 in vals_0) {
                foreach (var t_15 in vals_0) {
                    foreach (var r_16 in vals_0) {
                        long n_17 = ((((b_13 * 1000000000) + (m_14 * 1000000)) + (t_15 * 1000)) + r_16);
                        if (((n_17 >= start_10) && (n_17 <= stop_11))) {
                            count_12 = (count_12 + 1);
                        }
                    }
                }
            }
        };
        return count_12;
    }

    static void main() {
        object[] ranges_18 = new object[]{new object[]{2, 1000, true}, new object[]{1000, 4000, true}, new object[]{2, 10000, false}, new object[]{2, 100000, false}, new object[]{2, 1000000, false}, new object[]{2, 10000000, false}, new object[]{2, 100000000, false}, new object[]{2, 1000000000, false}};
        foreach (var rg_19 in ranges_18) {
            var start_20 = Convert.ToInt64(((dynamic)rg_19)[0]);
            var stop_21 = Convert.ToInt64(((dynamic)rg_19)[1]);
            var show_22 = ((dynamic)rg_19)[2];
            if ((start_20 == 2)) {
                Console.WriteLine(_fmtTop((("eban numbers up to and including " + (stop_21).ToString()) + ":")));
            } else {
                Console.WriteLine(_fmtTop((((("eban numbers between " + (start_20).ToString()) + " and ") + (stop_21).ToString()) + " (inclusive):")));
            }
            if (show_22) {
                long[] nums_23 = ebanNumbers(start_20, stop_21);
                string line_24 = "";
                long i_25 = 0;
                while ((i_25 < nums_23.Length)) {
                    line_24 = ((line_24 + (nums_23[(int)(i_25)]).ToString()) + " ");
                    i_25 = (i_25 + 1);
                }
                if ((line_24.Length > 0)) {
                    Console.WriteLine(_fmtTop(line_24.Substring((int)(0), (int)((((dynamic)line_24.Length) - ((dynamic)1)) - 0))));
                }
            }
            long c_26 = countEban(start_20, stop_21);
            Console.WriteLine(_fmtTop((("count = " + (c_26).ToString()) + "\n")));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
