// Generated by Mochi 0.10.47 on 2025-07-28 05:03 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[][] rows_9 = new string[][]{new string[]{"A", "B", "C"}, new string[]{"1", "2", "3"}, new string[]{"4", "5", "6"}, new string[]{"7", "8", "9"}};
    static long i_10 = 1;
    static string join(string[] xs_0, string sep_1) {
        string res_2 = "";
        long i_3 = 0;
        while ((i_3 < xs_0.Length)) {
            if ((i_3 > 0)) {
                res_2 = (res_2 + sep_1);
            }
            res_2 = (res_2 + xs_0[(int)(i_3)]);
            i_3 = (i_3 + 1);
        };
        return res_2;
    }

    static long parseIntStr(string str_4) {
        long i_5 = 0;
        bool neg_6 = false;
        if (((str_4.Length > 0) && (str_4.Substring((int)(0), (int)(1 - 0)) == "-"))) {
            neg_6 = true;
            i_5 = 1;
        };
        long n_7 = 0;
        Dictionary<string, long> digits_8 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_5 < str_4.Length)) {
            n_7 = ((n_7 * 10) + (digits_8.ContainsKey(str_4.Substring((int)(i_5), (int)((i_5 + 1) - i_5))) ? digits_8[str_4.Substring((int)(i_5), (int)((i_5 + 1) - i_5))] : 0));
            i_5 = (i_5 + 1);
        };
        if (neg_6) {
            n_7 = -n_7;
        };
        return n_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            rows_9[0] = (Enumerable.ToArray(Enumerable.Append(rows_9[(int)(0)], "SUM")));
            while ((i_10 < rows_9.Length)) {
                long sum_11 = 0;
                foreach (var s_12 in rows_9[(int)(i_10)]) {
                    sum_11 = (sum_11 + parseIntStr(s_12));
                }
                rows_9[i_10] = (Enumerable.ToArray(Enumerable.Append(rows_9[(int)(i_10)], (sum_11).ToString())));
                i_10 = (i_10 + 1);
            }
            foreach (var r_13 in rows_9) {
                Console.WriteLine(_fmtTop(join(r_13, ",")));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
