// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] hailstone(long n_0) {
        long[] seq_1 = new long[]{};
        long x_2 = n_0;
        seq_1 = (Enumerable.ToArray(Enumerable.Append(seq_1, x_2)));
        while ((x_2 > 1)) {
            if (((x_2 % 2) == 0)) {
                x_2 = (x_2 / 2);
            } else {
                x_2 = ((3 * x_2) + 1);
            }
            seq_1 = (Enumerable.ToArray(Enumerable.Append(seq_1, x_2)));
        };
        return seq_1;
    }

    static string listString(long[] xs_3) {
        string s_4 = "[";
        long i_5 = 0;
        while ((i_5 < xs_3.Length)) {
            s_4 = (s_4 + (xs_3[(int)(i_5)]).ToString());
            if ((i_5 < (((dynamic)(xs_3.Length)) - ((dynamic)(1))))) {
                s_4 = (s_4 + " ");
            }
            i_5 = (i_5 + 1);
        };
        s_4 = (s_4 + "]");
        return s_4;
    }

    static void libMain() {
        long[] seq_6 = hailstone(27);
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("Hailstone sequence for the number 27:"));
        Console.WriteLine(_fmtTop((("  has " + (seq_6.Length).ToString()) + " elements")));
        Console.WriteLine(_fmtTop(("  starts with " + listString(seq_6.Skip((int)(0)).Take((int)((4 - 0))).ToArray()))));
        Console.WriteLine(_fmtTop(("  ends with " + listString(seq_6.Skip((int)((((dynamic)(seq_6.Length)) - ((dynamic)(4))))).Take((int)((seq_6.Length - (((dynamic)(seq_6.Length)) - ((dynamic)(4)))))).ToArray()))));
        long longest_7 = 0;
        long length_8 = 0;
        long i_9 = 1;
        while ((i_9 < 100000)) {
            var l_10 = hailstone(i_9).Length;
            if ((l_10 > length_8)) {
                longest_7 = i_9;
                length_8 = l_10;
            }
            i_9 = (i_9 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop(((((longest_7).ToString() + " has the longest Hailstone sequence, its length being ") + (length_8).ToString()) + ".")));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            libMain();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
