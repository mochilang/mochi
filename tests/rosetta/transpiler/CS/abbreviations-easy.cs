// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s_0) {
        string[] words_1 = new string[]{};
        string cur_2 = "";
        long i_3 = 0;
        while ((i_3 < s_0.Length)) {
            string ch_4 = s_0.Substring((int)(i_3), (int)((i_3 + 1) - i_3));
            if ((((ch_4 == " ") || (ch_4 == "\n")) || (ch_4 == "\t"))) {
                if ((cur_2.Length > 0)) {
                    words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
                    cur_2 = "";
                }
            } else {
                cur_2 = (cur_2 + ch_4);
            }
            i_3 = (i_3 + 1);
        };
        if ((cur_2.Length > 0)) {
            words_1 = (Enumerable.ToArray(Enumerable.Append(words_1, cur_2)));
        };
        return words_1;
    }

    static string padRight(string s_5, long width_6) {
        string out_7 = s_5;
        long i_8 = s_5.Length;
        while ((i_8 < width_6)) {
            out_7 = (out_7 + " ");
            i_8 = (i_8 + 1);
        };
        return out_7;
    }

    static string join(string[] xs_9, string sep_10) {
        string res_11 = "";
        long i_12 = 0;
        while ((i_12 < xs_9.Length)) {
            if ((i_12 > 0)) {
                res_11 = (res_11 + sep_10);
            }
            res_11 = (res_11 + xs_9[(int)(i_12)]);
            i_12 = (i_12 + 1);
        };
        return res_11;
    }

    static string[] validate(string[] commands_13, string[] words_14, long[] mins_15) {
        string[] results_16 = new string[]{};
        if ((words_14.Length == 0)) {
            return results_16;
        };
        long wi_17 = 0;
        while ((wi_17 < words_14.Length)) {
            string w_18 = words_14[(int)(wi_17)];
            bool found_19 = false;
            var wlen_20 = w_18.Length;
            long ci_21 = 0;
            while ((ci_21 < commands_13.Length)) {
                string cmd_22 = commands_13[(int)(ci_21)];
                if ((((mins_15[(int)(ci_21)] != 0) && (wlen_20 >= mins_15[(int)(ci_21)])) && (wlen_20 <= cmd_22.Length))) {
                    string c_23 = cmd_22.ToUpper();
                    string ww_24 = w_18.ToUpper();
                    if ((c_23.Substring((int)(0), (int)(wlen_20 - 0)) == ww_24)) {
                        results_16 = (Enumerable.ToArray(Enumerable.Append(results_16, c_23)));
                        found_19 = true;
                        break;
                    }
                }
                ci_21 = (ci_21 + 1);
            }
            if ((!found_19)) {
                results_16 = (Enumerable.ToArray(Enumerable.Append(results_16, "*error*")));
            }
            wi_17 = (wi_17 + 1);
        };
        return results_16;
    }

    static void main() {
        string table_25 = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ");
        string[] commands_26 = fields(table_25);
        long[] mins_27 = new long[]{};
        long i_28 = 0;
        while ((i_28 < commands_26.Length)) {
            long count_29 = 0;
            long j_30 = 0;
            string cmd_31 = commands_26[(int)(i_28)];
            while ((j_30 < cmd_31.Length)) {
                string ch_32 = cmd_31.Substring((int)(j_30), (int)((j_30 + 1) - j_30));
                if (((string.Compare(ch_32, "A") >= 0) && (string.Compare(ch_32, "Z") <= 0))) {
                    count_29 = (count_29 + 1);
                }
                j_30 = (j_30 + 1);
            }
            mins_27 = (Enumerable.ToArray(Enumerable.Append(mins_27, count_29)));
            i_28 = (i_28 + 1);
        };
        string sentence_33 = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
        string[] words_34 = fields(sentence_33);
        string[] results_35 = validate(commands_26, words_34, mins_27);
        string out1_36 = "user words:  ";
        long k_37 = 0;
        while ((k_37 < words_34.Length)) {
            out1_36 = ((out1_36 + padRight(words_34[(int)(k_37)], results_35[(int)(k_37)].Length)) + " ");
            k_37 = (k_37 + 1);
        };
        Console.WriteLine(_fmtTop(out1_36));
        Console.WriteLine(_fmtTop(("full words:  " + join(results_35, " "))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
