// Generated by Mochi 0.10.40 on 2025-07-25 19:02 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] words_0 = new string[]{};
        string cur_1 = "";
        long i_2 = 0;
        while ((i_2 < s.Length)) {
            string ch_3 = s.Substring((int)(i_2), (int)((i_2 + 1) - i_2));
            if ((((ch_3 == " ") || (ch_3 == "\n")) || (ch_3 == "\t"))) {
                if ((cur_1.Length > 0)) {
                    words_0 = (Enumerable.ToArray(Enumerable.Append(words_0, cur_1)));
                    cur_1 = "";
                }
            } else {
                cur_1 = (cur_1 + ch_3);
            }
            i_2 = (i_2 + 1);
        };
        if ((cur_1.Length > 0)) {
            words_0 = (Enumerable.ToArray(Enumerable.Append(words_0, cur_1)));
        };
        return words_0;
    }

    static string padRight(string s, long width) {
        string out_4 = s;
        var i_5 = s.Length;
        while ((i_5 < width)) {
            out_4 = (out_4 + " ");
            i_5 = (i_5 + 1);
        };
        return out_4;
    }

    static string join(string[] xs, string sep) {
        string res_6 = "";
        long i_7 = 0;
        while ((i_7 < xs.Length)) {
            if ((i_7 > 0)) {
                res_6 = (res_6 + sep);
            }
            res_6 = (res_6 + xs[i_7]);
            i_7 = (i_7 + 1);
        };
        return res_6;
    }

    static string[] validate(string[] commands, string[] words, long[] mins) {
        string[] results_8 = new string[]{};
        if ((words.Length == 0)) {
            return results_8;
        };
        long wi_9 = 0;
        while ((wi_9 < words.Length)) {
            string w_10 = words[wi_9];
            bool found_11 = false;
            var wlen_12 = w_10.Length;
            long ci_13 = 0;
            while ((ci_13 < commands.Length)) {
                string cmd_14 = commands[ci_13];
                if ((((mins[ci_13] != 0) && (wlen_12 >= mins[ci_13])) && (wlen_12 <= cmd_14.Length))) {
                    var c_15 = cmd_14.ToUpper();
                    var ww_16 = w_10.ToUpper();
                    if ((c_15.Substring((int)(0), (int)(wlen_12 - 0)) == ww_16)) {
                        results_8 = (Enumerable.ToArray(Enumerable.Append(results_8, c_15)));
                        found_11 = true;
                        break;
                    }
                }
                ci_13 = (ci_13 + 1);
            }
            if ((!found_11)) {
                results_8 = (Enumerable.ToArray(Enumerable.Append(results_8, "*error*")));
            }
            wi_9 = (wi_9 + 1);
        };
        return results_8;
    }

    static void main() {
        string table_17 = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ");
        string[] commands_18 = fields(table_17);
        long[] mins_19 = new long[]{};
        long i_20 = 0;
        while ((i_20 < commands_18.Length)) {
            long count_21 = 0;
            long j_22 = 0;
            string cmd_23 = commands_18[i_20];
            while ((j_22 < cmd_23.Length)) {
                string ch_24 = cmd_23.Substring((int)(j_22), (int)((j_22 + 1) - j_22));
                if (((string.Compare(ch_24, "A") >= 0) && (string.Compare(ch_24, "Z") <= 0))) {
                    count_21 = (count_21 + 1);
                }
                j_22 = (j_22 + 1);
            }
            mins_19 = (Enumerable.ToArray(Enumerable.Append(mins_19, count_21)));
            i_20 = (i_20 + 1);
        };
        string sentence_25 = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
        string[] words_26 = fields(sentence_25);
        string[] results_27 = validate(commands_18, words_26, mins_19);
        string out1_28 = "user words:  ";
        long k_29 = 0;
        while ((k_29 < words_26.Length)) {
            out1_28 = ((out1_28 + padRight(words_26[k_29], results_27[k_29].Length)) + " ");
            k_29 = (k_29 + 1);
        };
        Console.WriteLine(_fmtTop(out1_28));
        Console.WriteLine(_fmtTop(("full words:  " + join(results_27, " "))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
