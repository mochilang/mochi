// Generated by Mochi 0.10.39 on 2025-07-24 08:16 UTC
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] fields(string s) {
        string[] words = new string[]{};
        string cur = "";
        int i = 0;
        while ((i < s.Length)) {
            string ch = s.Substring(i, ((i + 1) - i));
            if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
                if ((cur.Length > 0)) {
                    words = (words.Append(cur).ToArray());
                    cur = "";
                }
            } else {
                cur = (cur + ch);
            }
            i = (i + 1);
        };
        if ((cur.Length > 0)) {
            words = (words.Append(cur).ToArray());
        };
        return words;
    }

    static string padRight(string s, int width) {
        string _out = s;
        var i = s.Length;
        while ((i < width)) {
            _out = (_out + " ");
            i = (i + 1);
        };
        return _out;
    }

    static string join(string[] xs, string sep) {
        string res = "";
        int i = 0;
        while ((i < xs.Length)) {
            if ((i > 0)) {
                res = (res + sep);
            }
            res = (res + xs[i]);
            i = (i + 1);
        };
        return res;
    }

    static string[] validate(string[] commands, string[] words, int[] mins) {
        string[] results = new string[]{};
        if ((words.Length == 0)) {
            return results;
        };
        int wi = 0;
        while ((wi < words.Length)) {
            string w = words[wi];
            bool found = false;
            var wlen = w.Length;
            int ci = 0;
            while ((ci < commands.Length)) {
                string cmd = commands[ci];
                if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= cmd.Length))) {
                    var c = cmd.ToUpper();
                    var ww = w.ToUpper();
                    if ((c.Substring(0, (wlen - 0)) == ww)) {
                        results = (results.Append(c).ToArray());
                        found = true;
                        break;
                    }
                }
                ci = (ci + 1);
            }
            if ((!found)) {
                results = (results.Append("*error*").ToArray());
            }
            wi = (wi + 1);
        };
        return results;
    }

    static void main() {
        string table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ");
        string[] commands = fields(table);
        int[] mins = new int[]{};
        int i = 0;
        while ((i < commands.Length)) {
            int count = 0;
            int j = 0;
            var cmd = commands[i];
            while ((j < cmd.Length)) {
                string ch = cmd.Substring(j, ((j + 1) - j));
                if (((string.Compare(ch, "A") >= 0) && (string.Compare(ch, "Z") <= 0))) {
                    count = (count + 1);
                }
                j = (j + 1);
            }
            mins = (mins.Append(count).ToArray());
            i = (i + 1);
        };
        string sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
        string[] words = fields(sentence);
        string[] results = validate(commands, words, mins);
        string out1 = "user words:  ";
        int k = 0;
        while ((k < words.Length)) {
            out1 = ((out1 + padRight(words[k], results[k].Length)) + " ");
            k = (k + 1);
        };
        Console.WriteLine(_fmtTop(out1));
        Console.WriteLine(_fmtTop(("full words:  " + join(results, " "))));
    }

    static void Main() {
        main();
    }
}
