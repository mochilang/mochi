// Generated by Mochi 0.10.40 on 2025-07-25 12:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] shuffle(long[] xs) {
        long[] arr = xs;
        long i = 99;
        while ((i > 0)) {
            long j = (_now() % (i + 1));
            long tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i = (i - 1);
        };
        return arr;
    }

    static void doTrials(long trials, long np, string strategy) {
        long pardoned = 0;
        long t = 0;
        while ((t < trials)) {
            long[] drawers = new long[]{};
            long i = 0;
            while ((i < 100)) {
                drawers = (Enumerable.ToArray(Enumerable.Append(drawers, i)));
                i = (i + 1);
            }
            drawers = shuffle(drawers);
            long p = 0;
            bool success = true;
            while ((p < np)) {
                bool found = false;
                if ((strategy == "optimal")) {
                    long prev = p;
                    long d = 0;
                    while ((d < 50)) {
                        long _this = drawers[prev];
                        if ((_this == p)) {
                            found = true;
                            break;
                        }
                        prev = _this;
                        d = (d + 1);
                    }
                } else {
                    bool[] opened = new bool[]{};
                    long k = 0;
                    while ((k < 100)) {
                        opened = (Enumerable.ToArray(Enumerable.Append(opened, false)));
                        k = (k + 1);
                    }
                    long d_0 = 0;
                    while ((d_0 < 50)) {
                        long n = (_now() % 100);
                        while (opened[n]) {
                            n = (_now() % 100);
                        }
                        opened[n] = true;
                        if ((drawers[n] == p)) {
                            found = true;
                            break;
                        }
                        d_0 = (d_0 + 1);
                    }
                }
                if ((!found)) {
                    success = false;
                    break;
                }
                p = (p + 1);
            }
            if (success) {
                pardoned = (pardoned + 1);
            }
            t = (t + 1);
        };
        double rf = ((Convert.ToDouble(pardoned) / Convert.ToDouble(trials)) * 100);
        Console.WriteLine(_fmtTop((((((("  strategy = " + strategy) + "  pardoned = ") + (pardoned).ToString()) + " relative frequency = ") + (rf).ToString()) + "%")));
    }

    static void main() {
        long trials = 1000;
        foreach (var np_0 in new long[]{10, 100}) {
            Console.WriteLine(_fmtTop((((("Results from " + (trials).ToString()) + " trials with ") + (np_0).ToString()) + " prisoners:\n")));
            foreach (var strat_1 in new string[]{"random", "optimal"}) {
                doTrials(trials, np_0, strat_1);
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
