// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] shuffle(long[] xs_0) {
        long[] arr_1 = xs_0;
        long i_2 = 99;
        while ((i_2 > 0)) {
            long j_3 = (_now() % (i_2 + 1));
            long tmp_4 = arr_1[(int)(i_2)];
            arr_1[i_2] = arr_1[(int)(j_3)];
            arr_1[j_3] = tmp_4;
            i_2 = (i_2 - 1);
        };
        return arr_1;
    }

    static void doTrials(long trials_5, long np_6, string strategy_7) {
        long pardoned_8 = 0;
        long t_9 = 0;
        while ((t_9 < trials_5)) {
            long[] drawers_10 = new long[]{};
            long i_11 = 0;
            while ((i_11 < 100)) {
                drawers_10 = (Enumerable.ToArray(Enumerable.Append(drawers_10, i_11)));
                i_11 = (i_11 + 1);
            }
            drawers_10 = shuffle(drawers_10);
            long p_12 = 0;
            bool success_13 = true;
            while ((p_12 < np_6)) {
                bool found_14 = false;
                if ((strategy_7 == "optimal")) {
                    long prev_15 = p_12;
                    long d_16 = 0;
                    while ((d_16 < 50)) {
                        long this_17 = drawers_10[(int)(prev_15)];
                        if ((this_17 == p_12)) {
                            found_14 = true;
                            break;
                        }
                        prev_15 = this_17;
                        d_16 = (d_16 + 1);
                    }
                } else {
                    bool[] opened_18 = new bool[]{};
                    long k_19 = 0;
                    while ((k_19 < 100)) {
                        opened_18 = (Enumerable.ToArray(Enumerable.Append(opened_18, false)));
                        k_19 = (k_19 + 1);
                    }
                    long d_20 = 0;
                    while ((d_20 < 50)) {
                        long n_21 = (_now() % 100);
                        while (opened_18[(int)(n_21)]) {
                            n_21 = (_now() % 100);
                        }
                        opened_18[n_21] = true;
                        if ((drawers_10[(int)(n_21)] == p_12)) {
                            found_14 = true;
                            break;
                        }
                        d_20 = (d_20 + 1);
                    }
                }
                if ((!found_14)) {
                    success_13 = false;
                    break;
                }
                p_12 = (p_12 + 1);
            }
            if (success_13) {
                pardoned_8 = (pardoned_8 + 1);
            }
            t_9 = (t_9 + 1);
        };
        double rf_22 = (((dynamic)((((dynamic)(Convert.ToDouble(pardoned_8))) / ((dynamic)(Convert.ToDouble(trials_5)))))) * ((dynamic)(100.0)));
        Console.WriteLine(_fmtTop((((((("  strategy = " + strategy_7) + "  pardoned = ") + (pardoned_8).ToString()) + " relative frequency = ") + (rf_22).ToString()) + "%")));
    }

    static void main() {
        long trials_23 = 1000;
        foreach (var np_24 in new long[]{10, 100}) {
            Console.WriteLine(_fmtTop((((("Results from " + (trials_23).ToString()) + " trials with ") + (np_24).ToString()) + " prisoners:\n")));
            foreach (var strat_25 in new string[]{"random", "optimal"}) {
                doTrials(trials_23, np_24, strat_25);
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
