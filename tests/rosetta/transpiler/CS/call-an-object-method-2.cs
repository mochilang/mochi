// Generated by Mochi 0.10.57 on 2025-08-04 16:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Box {
    public string Contents;
    public long secret;
    public long TellSecret() {
        return secret;
    }

    public override string ToString() => $"Box {{Contents = \"{Contents}\", secret = {secret}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static Func<object>[] funcs_2 = Program.newFactory();
    static Func<object> New_3 = funcs_2[(int)(0)];
    static Func<object> Count_4 = funcs_2[(int)(1)];
    public static Func<object>[] newFactory() {
        long sn_0 = 0;
        Func<Box> New = null;
        New = () => {sn_0 = (sn_0 + 1); Box b_1 = new Box{secret = sn_0}; if ((sn_0 == 1)) {
            b_1.Contents = "rabbit";
        } else {
            if ((sn_0 == 2)) {
                b_1.Contents = "rock";
            }
        }; return b_1;};
        Func<long> Count = null;
        Count = () => {return sn_0;};
        return new Func<object>[]{() => (object)(New()), () => (object)(Count())};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
