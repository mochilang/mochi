// Generated by Mochi 0.10.40 on 2025-07-25 14:11 UTC
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] a_6 = new long[]{1, 2, 3};
    static long[] b_7 = new long[]{7, 12, 60};
    static object[] i_8 = new object[]{1, 2, 3};
    static object[] j_9 = new object[]{"Crosby", "Stills", "Nash", "Young"};
    static long[] l_10 = new long[]{1, 2, 3};
    static long[] m_11 = new long[]{7, 12, 60};
    static long[] concatInts(long[] a, long[] b) {
        long[] out_0 = new long[]{};
        foreach (var v_1 in a) {
            out_0 = (Enumerable.ToArray(Enumerable.Append(out_0, v_1)));
        };
        foreach (var v_2 in b) {
            out_0 = (Enumerable.ToArray(Enumerable.Append(out_0, v_2)));
        };
        return out_0;
    }

    static object[] concatAny(object[] a, object[] b) {
        object[] out_3 = new object[]{};
        foreach (var v_4 in a) {
            out_3 = (Enumerable.ToArray(Enumerable.Append(out_3, (object)v_4)));
        };
        foreach (var v_5 in b) {
            out_3 = (Enumerable.ToArray(Enumerable.Append(out_3, (object)v_5)));
        };
        return out_3;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((concatInts(a_6, b_7)).ToString()));
            Console.WriteLine(_fmtTop((concatAny(i_8, j_9)).ToString()));
            Console.WriteLine(_fmtTop((concatInts(l_10, m_11)).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
