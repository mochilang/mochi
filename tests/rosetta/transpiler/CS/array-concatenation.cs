// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] a_10 = new long[]{1, 2, 3};
    static long[] b_11 = new long[]{7, 12, 60};
    static long[] concatInts(long[] a_0, long[] b_1) {
        long[] out_2 = new long[]{};
        foreach (var v_3 in a_0) {
            out_2 = (Enumerable.ToArray(Enumerable.Append(out_2, v_3)));
        };
        foreach (var v_4 in b_1) {
            out_2 = (Enumerable.ToArray(Enumerable.Append(out_2, v_4)));
        };
        return out_2;
    }

    static object[] concatAny(object[] a_5, object[] b_6) {
        object[] out_7 = new object[]{};
        foreach (var v_8 in a_5) {
            out_7 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(out_7.Cast<object>()), v_8)));
        };
        foreach (var v_9 in b_6) {
            out_7 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(out_7.Cast<object>()), v_9)));
        };
        return out_7;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop((concatInts(a_10, b_11)).ToString()));
            object[] i_12 = new object[]{1, 2, 3};
            object[] j_13 = new object[]{"Crosby", "Stills", "Nash", "Young"};
            Console.WriteLine(_fmtTop((concatAny(Enumerable.ToArray(i_12.Cast<object>()), Enumerable.ToArray(j_13.Cast<object>()))).ToString()));
            long[] l_14 = new long[]{1, 2, 3};
            long[] m_15 = new long[]{7, 12, 60};
            Console.WriteLine(_fmtTop((concatInts(l_14, m_15)).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
