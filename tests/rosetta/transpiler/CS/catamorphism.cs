// Generated by Mochi 0.10.42 on 2025-07-27 16:47 UTC
using System;
using System.Linq;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] n_10 = new long[]{1, 2, 3, 4, 5};
    static long add(long a_0, long b_1) {
        return (a_0 + b_1);
    }

    static long sub(long a_2, long b_3) {
        return (a_2 - b_3);
    }

    static long mul(long a_4, long b_5) {
        return (a_4 * b_5);
    }

    static long fold(Func<long, long, long> f_6, long[] xs_7) {
        long r_8 = xs_7[(int)(0)];
        long i_9 = 1;
        while ((i_9 < xs_7.Length)) {
            r_8 = f_6(r_8, xs_7[(int)(i_9)]);
            i_9 = (i_9 + 1);
        };
        return r_8;
    }

    static void Main() {
        Console.WriteLine(_fmtTop(fold((long a, long b) => add(a, b), n_10)));
        Console.WriteLine(_fmtTop(fold((long a, long b) => sub(a, b), n_10)));
        Console.WriteLine(_fmtTop(fold((long a, long b) => mul(a, b), n_10)));
    }
}
