// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class SumCarry {
    public bool s;
    public bool c;
    public override string ToString() => $"SumCarry {{s = {s}, c = {c}}}";
}
class Add4Result {
    public bool v;
    public bool s3;
    public bool s2;
    public bool s1;
    public bool s0;
    public override string ToString() => $"Add4Result {{v = {v}, s3 = {s3}, s2 = {s2}, s1 = {s1}, s0 = {s0}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool xor(bool a_0, bool b_1) {
        return ((a_0 && (!b_1)) || ((!a_0) && b_1));
    }

    static SumCarry ha(bool a_2, bool b_3) {
        return new SumCarry{s = xor(a_2, b_3), c = (a_2 && b_3)};
    }

    static SumCarry fa(bool a_4, bool b_5, bool c0_6) {
        SumCarry r1_7 = ha(a_4, c0_6);
        SumCarry r2_8 = ha(r1_7.s, b_5);
        return new SumCarry{s = r2_8.s, c = (r1_7.c || r2_8.c)};
    }

    static Add4Result add4(bool a3_9, bool a2_10, bool a1_11, bool a0_12, bool b3_13, bool b2_14, bool b1_15, bool b0_16) {
        SumCarry r0_17 = fa(a0_12, b0_16, false);
        SumCarry r1_18 = fa(a1_11, b1_15, r0_17.c);
        SumCarry r2_19 = fa(a2_10, b2_14, r1_18.c);
        SumCarry r3_20 = fa(a3_9, b3_13, r2_19.c);
        return new Add4Result{v = r3_20.c, s3 = r3_20.s, s2 = r2_19.s, s1 = r1_18.s, s0 = r0_17.s};
    }

    static long b2i(bool b_21) {
        if (b_21) {
            return 1;
        };
        return 0;
    }

    static void main() {
        Add4Result r_22 = add4(true, false, true, false, true, false, false, true);
        Console.WriteLine(_fmtTop((((((((((b2i(r_22.v)).ToString() + " ") + (b2i(r_22.s3)).ToString()) + " ") + (b2i(r_22.s2)).ToString()) + " ") + (b2i(r_22.s1)).ToString()) + " ") + (b2i(r_22.s0)).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
