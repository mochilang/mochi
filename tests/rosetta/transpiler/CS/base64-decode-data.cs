// Generated by Mochi 0.10.52 on 2025-07-31 11:48 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string msg_42 = "Rosetta Code Base64 decode data task";
    static long indexOf(string s_0, string ch_1) {
        long i_2 = 0;
        while ((string.Compare(Convert.ToString(i_2), Convert.ToString(s_0.Length)) < 0)) {
            if ((s_0.Substring((int)(i_2), 1) == ch_1)) {
                return i_2;
            }
            i_2 = (i_2 + 1);
        };
        return -1;
    }

    static long parseIntStr(string str_3) {
        long i_4 = 0;
        bool neg_5 = false;
        if (((string.Compare(Convert.ToString(str_3.Length), Convert.ToString(0)) > 0) && (str_3.Substring((int)(0), 1) == "-"))) {
            neg_5 = true;
            i_4 = 1;
        };
        long n_6 = 0;
        Dictionary<string, long> digits_7 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((string.Compare(Convert.ToString(i_4), Convert.ToString(str_3.Length)) < 0)) {
            n_6 = ((n_6 * 10) + (digits_7.ContainsKey(str_3.Substring((int)(i_4), 1)) ? digits_7[str_3.Substring((int)(i_4), 1)] : 0));
            i_4 = (i_4 + 1);
        };
        if (neg_5) {
            n_6 = -n_6;
        };
        return n_6;
    }

    static long ord(string ch_8) {
        string upper_9 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_10 = "abcdefghijklmnopqrstuvwxyz";
        long idx_11 = indexOf(upper_9, ch_8);
        if ((idx_11 >= 0)) {
            return (65 + idx_11);
        };
        idx_11 = indexOf(lower_10, ch_8);
        if ((idx_11 >= 0)) {
            return (97 + idx_11);
        };
        if (((string.Compare(ch_8, "0") >= 0) && (string.Compare(ch_8, "9") <= 0))) {
            return (48 + parseIntStr(ch_8));
        };
        if ((ch_8 == "+")) {
            return 43;
        };
        if ((ch_8 == "/")) {
            return 47;
        };
        if ((ch_8 == " ")) {
            return 32;
        };
        if ((ch_8 == "=")) {
            return 61;
        };
        return 0;
    }

    static string chr(long n_12) {
        string upper_13 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_14 = "abcdefghijklmnopqrstuvwxyz";
        if (((n_12 >= 65) && (n_12 < 91))) {
            return upper_13.Substring((int)((n_12 - 65)), (int)((n_12 - 64) - (n_12 - 65)));
        };
        if (((n_12 >= 97) && (n_12 < 123))) {
            return lower_14.Substring((int)((n_12 - 97)), (int)((n_12 - 96) - (n_12 - 97)));
        };
        if (((n_12 >= 48) && (n_12 < 58))) {
            string digits_15 = "0123456789";
            return digits_15.Substring((int)((n_12 - 48)), (int)((n_12 - 47) - (n_12 - 48)));
        };
        if ((n_12 == 43)) {
            return "+";
        };
        if ((n_12 == 47)) {
            return "/";
        };
        if ((n_12 == 32)) {
            return " ";
        };
        if ((n_12 == 61)) {
            return "=";
        };
        return "?";
    }

    static string toBinary(long n_16, long bits_17) {
        string b_18 = "";
        long val_19 = n_16;
        long i_20 = 0;
        while ((i_20 < bits_17)) {
            b_18 = (((val_19 % 2)).ToString() + b_18);
            val_19 = Convert.ToInt64((val_19 / 2));
            i_20 = (i_20 + 1);
        };
        return b_18;
    }

    static long binToInt(string bits_21) {
        long n_22 = 0;
        long i_23 = 0;
        while ((string.Compare(Convert.ToString(i_23), Convert.ToString(bits_21.Length)) < 0)) {
            n_22 = ((n_22 * 2) + parseIntStr(bits_21.Substring((int)(i_23), (int)((i_23 + 1) - i_23))));
            i_23 = (i_23 + 1);
        };
        return n_22;
    }

    static string base64Encode(string text_24) {
        string alphabet_25 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        string bin_26 = "";
        for (var _i45 = 0; _i45 < text_24.Length; _i45++) {
            var ch_27 = text_24.Substring((int)(_i45), 1);
            bin_26 = (bin_26 + toBinary(ord(ch_27), 8));
        };
        while (((((dynamic)(bin_26.Length)) % ((dynamic)(6))) != 0)) {
            bin_26 = (bin_26 + "0");
        };
        string out_28 = "";
        long i_29 = 0;
        while ((string.Compare(Convert.ToString(i_29), Convert.ToString(bin_26.Length)) < 0)) {
            string chunk_30 = bin_26.Substring((int)(i_29), (int)((i_29 + 6) - i_29));
            long val_31 = binToInt(chunk_30);
            out_28 = (out_28 + alphabet_25.Substring((int)(val_31), (int)((val_31 + 1) - val_31)));
            i_29 = (i_29 + 6);
        };
        long pad_32 = ((3 - (((dynamic)(text_24.Length)) % ((dynamic)(3)))) % 3);
        if ((pad_32 == 1)) {
            out_28 = (out_28.Substring((int)(0), (int)((((dynamic)(out_28.Length)) - ((dynamic)(1))) - 0)) + "=");
        };
        if ((pad_32 == 2)) {
            out_28 = (out_28.Substring((int)(0), (int)((((dynamic)(out_28.Length)) - ((dynamic)(2))) - 0)) + "==");
        };
        return out_28;
    }

    static string base64Decode(string enc_33) {
        string alphabet_34 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        string bin_35 = "";
        long i_36 = 0;
        while ((string.Compare(Convert.ToString(i_36), Convert.ToString(enc_33.Length)) < 0)) {
            string ch_37 = enc_33.Substring((int)(i_36), 1);
            if ((ch_37 == "=")) {
                break;
            }
            long idx_38 = indexOf(alphabet_34, ch_37);
            bin_35 = (bin_35 + toBinary(idx_38, 6));
            i_36 = (i_36 + 1);
        };
        string out_39 = "";
        i_36 = 0;
        while ((string.Compare(Convert.ToString((i_36 + 8)), Convert.ToString(bin_35.Length)) <= 0)) {
            string chunk_40 = bin_35.Substring((int)(i_36), (int)((i_36 + 8) - i_36));
            long val_41 = binToInt(chunk_40);
            out_39 = (out_39 + chr(val_41));
            i_36 = (i_36 + 8);
        };
        return out_39;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("Original : " + msg_42)));
            string enc_43 = base64Encode(msg_42);
            Console.WriteLine(_fmtTop(("\nEncoded  : " + enc_43)));
            string dec_44 = base64Decode(enc_43);
            Console.WriteLine(_fmtTop(("\nDecoded  : " + dec_44)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
