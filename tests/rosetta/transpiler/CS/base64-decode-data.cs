// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string msg_32 = "Rosetta Code Base64 decode data task";
    static string enc_33 = base64Encode(msg_32);
    static string dec_34 = base64Decode(enc_33);
    static long indexOf(string s, string ch) {
        long i_0 = 0;
        while ((i_0 < s.Length)) {
            if ((s.Substring((int)(i_0), 1) == ch)) {
                return i_0;
            }
            i_0 = (i_0 + 1);
        };
        return -1;
    }

    static long parseIntStr(string str) {
        long i_1 = 0;
        bool neg_2 = false;
        if (((str.Length > 0) && (str.Substring((int)(0), 1) == "-"))) {
            neg_2 = true;
            i_1 = 1;
        };
        long n_3 = 0;
        Dictionary<string, long> digits_4 = new Dictionary<string, long>{{"0", 0}, {"1", 1}, {"2", 2}, {"3", 3}, {"4", 4}, {"5", 5}, {"6", 6}, {"7", 7}, {"8", 8}, {"9", 9}};
        while ((i_1 < str.Length)) {
            n_3 = ((n_3 * 10) + (digits_4.ContainsKey(str.Substring((int)(i_1), 1)) ? digits_4[str.Substring((int)(i_1), 1)] : 0));
            i_1 = (i_1 + 1);
        };
        if (neg_2) {
            n_3 = -n_3;
        };
        return n_3;
    }

    static long ord(string ch) {
        string upper_5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_6 = "abcdefghijklmnopqrstuvwxyz";
        long idx_7 = indexOf(upper_5, ch);
        if ((idx_7 >= 0)) {
            return (65 + idx_7);
        };
        idx_7 = indexOf(lower_6, ch);
        if ((idx_7 >= 0)) {
            return (97 + idx_7);
        };
        if (((string.Compare(ch, "0") >= 0) && (string.Compare(ch, "9") <= 0))) {
            return (48 + parseIntStr(ch));
        };
        if ((ch == "+")) {
            return 43;
        };
        if ((ch == "/")) {
            return 47;
        };
        if ((ch == " ")) {
            return 32;
        };
        if ((ch == "=")) {
            return 61;
        };
        return 0;
    }

    static string chr(long n) {
        string upper_8 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        string lower_9 = "abcdefghijklmnopqrstuvwxyz";
        if (((n >= 65) && (n < 91))) {
            return upper_8.Substring((int)((n - 65)), (int)((n - 64) - (n - 65)));
        };
        if (((n >= 97) && (n < 123))) {
            return lower_9.Substring((int)((n - 97)), (int)((n - 96) - (n - 97)));
        };
        if (((n >= 48) && (n < 58))) {
            string digits_10 = "0123456789";
            return digits_10.Substring((int)((n - 48)), (int)((n - 47) - (n - 48)));
        };
        if ((n == 43)) {
            return "+";
        };
        if ((n == 47)) {
            return "/";
        };
        if ((n == 32)) {
            return " ";
        };
        if ((n == 61)) {
            return "=";
        };
        return "?";
    }

    static string toBinary(long n, long bits) {
        string b_11 = "";
        long val_12 = n;
        long i_13 = 0;
        while ((i_13 < bits)) {
            b_11 = (((val_12 % 2)).ToString() + b_11);
            val_12 = Convert.ToInt64((val_12 / 2));
            i_13 = (i_13 + 1);
        };
        return b_11;
    }

    static long binToInt(string bits) {
        long n_14 = 0;
        long i_15 = 0;
        while ((i_15 < bits.Length)) {
            n_14 = ((n_14 * 2) + parseIntStr(bits.Substring((int)(i_15), (int)((i_15 + 1) - i_15))));
            i_15 = (i_15 + 1);
        };
        return n_14;
    }

    static string base64Encode(string text) {
        string alphabet_16 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        string bin_17 = "";
        foreach (var ch_18 in text) {
            bin_17 = (bin_17 + toBinary(ord(ch_18), 8));
        };
        while (((((dynamic)bin_17.Length) % ((dynamic)6)) != 0)) {
            bin_17 = (bin_17 + "0");
        };
        string out_19 = "";
        long i_20 = 0;
        while ((i_20 < bin_17.Length)) {
            string chunk_21 = bin_17.Substring((int)(i_20), (int)((i_20 + 6) - i_20));
            long val_22 = binToInt(chunk_21);
            out_19 = (out_19 + alphabet_16.Substring((int)(val_22), (int)((val_22 + 1) - val_22)));
            i_20 = (i_20 + 6);
        };
        long pad_23 = ((3 - (((dynamic)text.Length) % ((dynamic)3))) % 3);
        if ((pad_23 == 1)) {
            out_19 = (out_19.Substring((int)(0), (int)((((dynamic)out_19.Length) - ((dynamic)1)) - 0)) + "=");
        };
        if ((pad_23 == 2)) {
            out_19 = (out_19.Substring((int)(0), (int)((((dynamic)out_19.Length) - ((dynamic)2)) - 0)) + "==");
        };
        return out_19;
    }

    static string base64Decode(string enc) {
        string alphabet_24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        string bin_25 = "";
        long i_26 = 0;
        while ((i_26 < enc.Length)) {
            string ch_27 = enc.Substring((int)(i_26), 1);
            if ((ch_27 == "=")) {
                break;
            }
            long idx_28 = indexOf(alphabet_24, ch_27);
            bin_25 = (bin_25 + toBinary(idx_28, 6));
            i_26 = (i_26 + 1);
        };
        string out_29 = "";
        i_26 = 0;
        while (((i_26 + 8) <= bin_25.Length)) {
            string chunk_30 = bin_25.Substring((int)(i_26), (int)((i_26 + 8) - i_26));
            long val_31 = binToInt(chunk_30);
            out_29 = (out_29 + chr(val_31));
            i_26 = (i_26 + 8);
        };
        return out_29;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(("Original : " + msg_32)));
            Console.WriteLine(_fmtTop(("\nEncoded  : " + enc_33)));
            Console.WriteLine(_fmtTop(("\nDecoded  : " + dec_34)));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
