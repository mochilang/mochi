// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s_0) {
        string[] arr_1 = new string[]{};
        long i_2 = 0;
        while ((i_2 < s_0.Length)) {
            arr_1 = (Enumerable.ToArray(Enumerable.Append(arr_1, s_0.Substring((int)(i_2), (int)((i_2 + 1) - i_2)))));
            i_2 = (i_2 + 1);
        };
        var n_3 = arr_1.Length;
        long m_4 = 0;
        while ((m_4 < n_3)) {
            long j_5 = 0;
            while ((j_5 < (((dynamic)(n_3)) - ((dynamic)(1))))) {
                if ((string.Compare(arr_1[(int)(j_5)], arr_1[(int)((j_5 + 1))]) > 0)) {
                    string tmp_6 = arr_1[(int)(j_5)];
                    arr_1[j_5] = arr_1[(int)((j_5 + 1))];
                    arr_1[(j_5 + 1)] = tmp_6;
                }
                j_5 = (j_5 + 1);
            }
            m_4 = (m_4 + 1);
        };
        string out_7 = "";
        i_2 = 0;
        while ((i_2 < n_3)) {
            out_7 = (out_7 + arr_1[(int)(i_2)]);
            i_2 = (i_2 + 1);
        };
        return out_7;
    }

    static string[] sortStrings(string[] xs_8) {
        string[] res_9 = new string[]{};
        string[] tmp_10 = xs_8;
        while ((tmp_10.Length > 0)) {
            string min_11 = tmp_10[(int)(0)];
            long idx_12 = 0;
            long i_13 = 1;
            while ((i_13 < tmp_10.Length)) {
                if ((string.Compare(tmp_10[(int)(i_13)], min_11) < 0)) {
                    min_11 = tmp_10[(int)(i_13)];
                    idx_12 = i_13;
                }
                i_13 = (i_13 + 1);
            }
            res_9 = (Enumerable.ToArray(Enumerable.Append(res_9, min_11)));
            string[] out_14 = new string[]{};
            long j_15 = 0;
            while ((j_15 < tmp_10.Length)) {
                if ((j_15 != idx_12)) {
                    out_14 = (Enumerable.ToArray(Enumerable.Append(out_14, tmp_10[(int)(j_15)])));
                }
                j_15 = (j_15 + 1);
            }
            tmp_10 = out_14;
        };
        return res_9;
    }

    static void main() {
        string[] words_16 = new string[]{"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"};
        Dictionary<string, string[]> groups_17 = new Dictionary<string, string[]>{};
        long maxLen_18 = 0;
        foreach (var w_19 in words_16) {
            string k_20 = sortRunes(w_19);
            if ((!(groups_17.ContainsKey(k_20)))) {
                groups_17[k_20] = new string[]{w_19};
            } else {
                groups_17[k_20] = (Enumerable.ToArray(Enumerable.Append((groups_17.ContainsKey(k_20) ? groups_17[k_20] : null), w_19)));
            }
            if (((groups_17.ContainsKey(k_20) ? groups_17[k_20] : null).Length > maxLen_18)) {
                maxLen_18 = (groups_17.ContainsKey(k_20) ? groups_17[k_20] : null).Length;
            }
        };
        Dictionary<string, bool> printed_21 = new Dictionary<string, bool>{};
        foreach (var w_22 in words_16) {
            string k_23 = sortRunes(w_22);
            if (((groups_17.ContainsKey(k_23) ? groups_17[k_23] : null).Length == maxLen_18)) {
                if ((!(printed_21.ContainsKey(k_23)))) {
                    string[] g_24 = sortStrings((groups_17.ContainsKey(k_23) ? groups_17[k_23] : null));
                    string line_25 = ("[" + g_24[(int)(0)]);
                    long i_26 = 1;
                    while ((i_26 < g_24.Length)) {
                        line_25 = ((line_25 + " ") + g_24[(int)(i_26)]);
                        i_26 = (i_26 + 1);
                    }
                    line_25 = (line_25 + "]");
                    Console.WriteLine(_fmtTop(line_25));
                    printed_21[k_23] = true;
                }
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
