// Generated by Mochi 0.10.40 on 2025-07-25 12:58 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s) {
        string[] arr = new string[]{};
        long i = 0;
        while ((i < s.Length)) {
            arr = (Enumerable.ToArray(Enumerable.Append(arr, s.Substring((int)(i), (int)((i + 1) - i)))));
            i = (i + 1);
        };
        var n = arr.Length;
        long m = 0;
        while ((m < n)) {
            long j = 0;
            while ((j < (n - 1))) {
                if ((string.Compare(arr[j], arr[(j + 1)]) > 0)) {
                    string tmp = arr[j];
                    arr[j] = arr[(j + 1)];
                    arr[(j + 1)] = tmp;
                }
                j = (j + 1);
            }
            m = (m + 1);
        };
        string _out = "";
        i = 0;
        while ((i < n)) {
            _out = (_out + arr[i]);
            i = (i + 1);
        };
        return _out;
    }

    static string[] sortStrings(string[] xs) {
        string[] res = new string[]{};
        string[] tmp = xs;
        while ((tmp.Length > 0)) {
            string min = tmp[0];
            long idx = 0;
            long i = 1;
            while ((i < tmp.Length)) {
                if ((string.Compare(tmp[i], min) < 0)) {
                    min = tmp[i];
                    idx = i;
                }
                i = (i + 1);
            }
            res = (Enumerable.ToArray(Enumerable.Append(res, min)));
            string[] _out = new string[]{};
            long j = 0;
            while ((j < tmp.Length)) {
                if ((j != idx)) {
                    _out = (Enumerable.ToArray(Enumerable.Append(_out, tmp[j])));
                }
                j = (j + 1);
            }
            tmp = _out;
        };
        return res;
    }

    static void main() {
        string[] words = new string[]{"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"};
        Dictionary<string, string[]> groups = new Dictionary<string, string[]>{};
        long maxLen = 0;
        foreach (var w_0 in words) {
            string k = sortRunes(w_0);
            if ((!(groups.ContainsKey(k)))) {
                groups[k] = new string[]{w_0};
            } else {
                groups[k] = (Enumerable.ToArray(Enumerable.Append(groups[k], w_0)));
            }
            if ((groups[k].Length > maxLen)) {
                maxLen = groups[k].Length;
            }
        };
        Dictionary<string, bool> printed = new Dictionary<string, bool>{};
        foreach (var w_1 in words) {
            string k_2 = sortRunes(w_1);
            if ((groups[k_2].Length == maxLen)) {
                if ((!(printed.ContainsKey(k_2)))) {
                    string[] g = sortStrings(groups[k_2]);
                    string line = ("[" + g[0]);
                    long i = 1;
                    while ((i < g.Length)) {
                        line = ((line + " ") + g[i]);
                        i = (i + 1);
                    }
                    line = (line + "]");
                    Console.WriteLine(_fmtTop(line));
                    printed[k_2] = true;
                }
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
