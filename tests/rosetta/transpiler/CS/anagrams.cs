// Generated by Mochi 0.10.39 on 2025-07-24 15:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s) {
        string[] arr = new string[]{};
        int i = 0;
        while ((i < s.Length)) {
            arr = (arr.Append(s.Substring(i, ((i + 1) - i))).ToArray());
            i = (i + 1);
        };
        var n = arr.Length;
        int m = 0;
        while ((m < n)) {
            int j = 0;
            while ((j < (n - 1))) {
                if ((arr[j] > arr[(j + 1)])) {
                    var tmp = arr[j];
                    arr[j] = arr[(j + 1)];
                    arr[(j + 1)] = tmp;
                }
                j = (j + 1);
            }
            m = (m + 1);
        };
        string _out = "";
        i = 0;
        while ((i < n)) {
            _out = (_out + arr[i]);
            i = (i + 1);
        };
        return _out;
    }

    static string[] sortStrings(string[] xs) {
        string[] res = new string[]{};
        string[] tmp = xs;
        while ((tmp.Length > 0)) {
            var min = tmp[0];
            int idx = 0;
            int i = 1;
            while ((i < tmp.Length)) {
                if ((tmp[i] < min)) {
                    min = tmp[i];
                    idx = i;
                }
                i = (i + 1);
            }
            res = (res.Append(min).ToArray());
            string[] _out = new string[]{};
            int j = 0;
            while ((j < tmp.Length)) {
                if ((j != idx)) {
                    _out = (_out.Append(tmp[j]).ToArray());
                }
                j = (j + 1);
            }
            tmp = _out;
        };
        return res;
    }

    static void main() {
        string[] words = new string[]{"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"};
        Dictionary<string, string[]> groups = new Dictionary<string, string[]>{};
        int maxLen = 0;
        foreach (var w_0 in words) {
            string k = sortRunes(w_0);
            if ((!(groups.ContainsKey(k)))) {
                groups[k] = new object[]{w_0};
            } else {
                groups[k] = (groups[k].Append(w_0).ToArray());
            }
            if ((groups[k].Length > maxLen)) {
                maxLen = groups[k].Length;
            }
        };
        Dictionary<string, bool> printed = new Dictionary<string, bool>{};
        foreach (var w_1 in words) {
            string k = sortRunes(w_1);
            if ((groups[k].Length == maxLen)) {
                if ((!(printed.ContainsKey(k)))) {
                    string[] g = sortStrings(groups[k]);
                    string line = ("[" + g[0]);
                    int i = 1;
                    while ((i < g.Length)) {
                        line = ((line + " ") + g[i]);
                        i = (i + 1);
                    }
                    line = (line + "]");
                    Console.WriteLine(_fmtTop(line));
                    printed[k] = true;
                }
            }
        };
    }

    static void Main() {
        main();
    }
}
