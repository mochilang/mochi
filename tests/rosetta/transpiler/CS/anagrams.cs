// Generated by Mochi 0.10.40 on 2025-07-25 20:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string sortRunes(string s) {
        string[] arr_0 = new string[]{};
        long i_1 = 0;
        while ((i_1 < s.Length)) {
            arr_0 = (Enumerable.ToArray(Enumerable.Append(arr_0, s.Substring((int)(i_1), (int)((i_1 + 1) - i_1)))));
            i_1 = (i_1 + 1);
        };
        var n_2 = arr_0.Length;
        long m_3 = 0;
        while ((m_3 < n_2)) {
            long j_4 = 0;
            while ((j_4 < (((dynamic)n_2) - ((dynamic)1)))) {
                if ((string.Compare(arr_0[(int)(j_4)], arr_0[(int)((j_4 + 1))]) > 0)) {
                    string tmp_5 = arr_0[(int)(j_4)];
                    arr_0[j_4] = arr_0[(int)((j_4 + 1))];
                    arr_0[(j_4 + 1)] = tmp_5;
                }
                j_4 = (j_4 + 1);
            }
            m_3 = (m_3 + 1);
        };
        string out_6 = "";
        i_1 = 0;
        while ((i_1 < n_2)) {
            out_6 = (out_6 + arr_0[(int)(i_1)]);
            i_1 = (i_1 + 1);
        };
        return out_6;
    }

    static string[] sortStrings(string[] xs) {
        string[] res_7 = new string[]{};
        string[] tmp_8 = xs;
        while ((tmp_8.Length > 0)) {
            string min_9 = tmp_8[(int)(0)];
            long idx_10 = 0;
            long i_11 = 1;
            while ((i_11 < tmp_8.Length)) {
                if ((string.Compare(tmp_8[(int)(i_11)], min_9) < 0)) {
                    min_9 = tmp_8[(int)(i_11)];
                    idx_10 = i_11;
                }
                i_11 = (i_11 + 1);
            }
            res_7 = (Enumerable.ToArray(Enumerable.Append(res_7, min_9)));
            string[] out_12 = new string[]{};
            long j_13 = 0;
            while ((j_13 < tmp_8.Length)) {
                if ((j_13 != idx_10)) {
                    out_12 = (Enumerable.ToArray(Enumerable.Append(out_12, tmp_8[(int)(j_13)])));
                }
                j_13 = (j_13 + 1);
            }
            tmp_8 = out_12;
        };
        return res_7;
    }

    static void main() {
        string[] words_14 = new string[]{"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"};
        Dictionary<string, string[]> groups_15 = new Dictionary<string, string[]>{};
        long maxLen_16 = 0;
        foreach (var w_17 in words_14) {
            string k_18 = sortRunes(w_17);
            if ((!(groups_15.ContainsKey(k_18)))) {
                groups_15[k_18] = new string[]{w_17};
            } else {
                groups_15[k_18] = (Enumerable.ToArray(Enumerable.Append(groups_15[k_18], w_17)));
            }
            if ((groups_15[k_18].Length > maxLen_16)) {
                maxLen_16 = groups_15[k_18].Length;
            }
        };
        Dictionary<string, bool> printed_19 = new Dictionary<string, bool>{};
        foreach (var w_20 in words_14) {
            string k_21 = sortRunes(w_20);
            if ((groups_15[k_21].Length == maxLen_16)) {
                if ((!(printed_19.ContainsKey(k_21)))) {
                    string[] g_22 = sortStrings(groups_15[k_21]);
                    string line_23 = ("[" + g_22[(int)(0)]);
                    long i_24 = 1;
                    while ((i_24 < g_22.Length)) {
                        line_23 = ((line_23 + " ") + g_22[(int)(i_24)]);
                        i_24 = (i_24 + 1);
                    }
                    line_23 = (line_23 + "]");
                    Console.WriteLine(_fmtTop(line_23));
                    printed_19[k_21] = true;
                }
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
