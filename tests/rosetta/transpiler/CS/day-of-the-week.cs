// Generated by Mochi 0.10.50 on 2025-07-31 00:08 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long weekday(long y_0, long m_1, long d_2) {
        long yy_3 = y_0;
        long mm_4 = m_1;
        if ((mm_4 < 3)) {
            mm_4 = (mm_4 + 12);
            yy_3 = (yy_3 - 1);
        };
        long k_5 = (yy_3 % 100);
        var j_6 = Convert.ToInt64((yy_3 / 100));
        var a_7 = Convert.ToInt64(((13 * (mm_4 + 1)) / 5));
        var b_8 = Convert.ToInt64((k_5 / 4));
        var c_9 = Convert.ToInt64((((dynamic)j_6) / ((dynamic)4)));
        return (((((dynamic)(((dynamic)((((dynamic)d_2) + ((dynamic)a_7)) + k_5)) + ((dynamic)b_8))) + ((dynamic)c_9)) + (((dynamic)5) * ((dynamic)j_6))) % 7);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            for (var year_10 = 2008; year_10 < 2122; year_10++) {
                if ((weekday(year_10, 12, 25) == 1)) {
                    Console.WriteLine(_fmtTop((("25 December " + (year_10).ToString()) + " is Sunday")));
                }
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
