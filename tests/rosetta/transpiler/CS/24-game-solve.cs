// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Rational {
    public long num;
    public long denom;
    public override string ToString() => $"Rational {{num = {num}, denom = {denom}}}";
}
class Node {
    public Rational val;
    public string txt;
    public override string ToString() => $"Node {{val = {val}, txt = \"{txt}\"}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long OP_ADD_0 = 1;
    static long OP_SUB_1 = 2;
    static long OP_MUL_2 = 3;
    static long OP_DIV_3 = 4;
    static long n_cards_12 = 4;
    static long goal_13 = 24;
    static long digit_range_14 = 9;
    static Node makeNode(long n_4) {
        return new Node{val = new Rational{num = n_4, denom = 1}, txt = (n_4).ToString()};
    }

    static Node combine(long op_5, Node l_6, Node r_7) {
        Rational res_8 = new Rational();
        if ((op_5 == OP_ADD_0)) {
            res_8 = new Rational{num = ((l_6.val.num * r_7.val.denom) + (l_6.val.denom * r_7.val.num)), denom = (l_6.val.denom * r_7.val.denom)};
        } else {
            if ((op_5 == OP_SUB_1)) {
                res_8 = new Rational{num = ((l_6.val.num * r_7.val.denom) - (l_6.val.denom * r_7.val.num)), denom = (l_6.val.denom * r_7.val.denom)};
            } else {
                if ((op_5 == OP_MUL_2)) {
                    res_8 = new Rational{num = (l_6.val.num * r_7.val.num), denom = (l_6.val.denom * r_7.val.denom)};
                } else {
                    res_8 = new Rational{num = (l_6.val.num * r_7.val.denom), denom = (l_6.val.denom * r_7.val.num)};
                }
            }
        };
        string opstr_9 = "";
        if ((op_5 == OP_ADD_0)) {
            opstr_9 = " + ";
        } else {
            if ((op_5 == OP_SUB_1)) {
                opstr_9 = " - ";
            } else {
                if ((op_5 == OP_MUL_2)) {
                    opstr_9 = " * ";
                } else {
                    opstr_9 = " / ";
                }
            }
        };
        return new Node{val = res_8, txt = (((("(" + l_6.txt) + opstr_9) + r_7.txt) + ")")};
    }

    static Rational exprEval(Node x_10) {
        return x_10.val;
    }

    static string exprString(Node x_11) {
        return x_11.txt;
    }

    static bool solve(Node[] xs_15) {
        if ((xs_15.Length == 1)) {
            Rational f_16 = exprEval(xs_15[(int)(0)]);
            if (((f_16.denom != 0) && (f_16.num == (f_16.denom * goal_13)))) {
                Console.WriteLine(_fmtTop(exprString(xs_15[(int)(0)])));
                return true;
            }
            return false;
        };
        long i_17 = 0;
        while ((i_17 < xs_15.Length)) {
            long j_18 = (i_17 + 1);
            while ((j_18 < xs_15.Length)) {
                Node[] rest_19 = new Node[]{};
                long k_20 = 0;
                while ((k_20 < xs_15.Length)) {
                    if (((k_20 != i_17) && (k_20 != j_18))) {
                        rest_19 = (Enumerable.ToArray(Enumerable.Append(rest_19, xs_15[(int)(k_20)])));
                    }
                    k_20 = (k_20 + 1);
                }
                Node a_21 = xs_15[(int)(i_17)];
                Node b_22 = xs_15[(int)(j_18)];
                Node node_23 = new Node();
                foreach (var op_24 in new long[]{OP_ADD_0, OP_SUB_1, OP_MUL_2, OP_DIV_3}) {
                    node_23 = combine(op_24, a_21, b_22);
                    if (solve((Enumerable.ToArray(Enumerable.Append(rest_19, node_23))))) {
                        return true;
                    }
                }
                node_23 = combine(OP_SUB_1, b_22, a_21);
                if (solve((Enumerable.ToArray(Enumerable.Append(rest_19, node_23))))) {
                    return true;
                }
                node_23 = combine(OP_DIV_3, b_22, a_21);
                if (solve((Enumerable.ToArray(Enumerable.Append(rest_19, node_23))))) {
                    return true;
                }
                j_18 = (j_18 + 1);
            }
            i_17 = (i_17 + 1);
        };
        return false;
    }

    static void main() {
        long iter_25 = 0;
        while ((iter_25 < 10)) {
            Node[] cards_26 = new Node[]{};
            long i_27 = 0;
            while ((i_27 < n_cards_12)) {
                long n_28 = ((_now() % (digit_range_14 - 1)) + 1);
                cards_26 = (Enumerable.ToArray(Enumerable.Append(cards_26, makeNode(n_28))));
                Console.WriteLine(_fmtTop((" " + (n_28).ToString())));
                i_27 = (i_27 + 1);
            }
            Console.WriteLine(_fmtTop(":  "));
            if ((!solve(cards_26))) {
                Console.WriteLine(_fmtTop("No solution"));
            }
            iter_25 = (iter_25 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
