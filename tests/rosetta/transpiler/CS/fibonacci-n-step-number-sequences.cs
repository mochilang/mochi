// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string show(long[] xs_0) {
        string s_1 = "";
        long i_2 = 0;
        while ((i_2 < xs_0.Length)) {
            s_1 = (s_1 + (xs_0[(int)(i_2)]).ToString());
            if ((i_2 < (((dynamic)(xs_0.Length)) - ((dynamic)(1))))) {
                s_1 = (s_1 + " ");
            }
            i_2 = (i_2 + 1);
        };
        return s_1;
    }

    static long[] gen(long[] init_3, long n_4) {
        long[] b_5 = init_3;
        long[] res_6 = new long[]{};
        long sum_7 = 0;
        foreach (var x_8 in b_5) {
            res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, x_8)));
            sum_7 = (sum_7 + x_8);
        };
        while ((res_6.Length < n_4)) {
            long next_9 = sum_7;
            res_6 = (Enumerable.ToArray(Enumerable.Append(res_6, next_9)));
            sum_7 = ((sum_7 + next_9) - b_5[(int)(0)]);
            b_5 = (Enumerable.ToArray(Enumerable.Append(b_5.Skip((int)(1)).Take((int)((b_5.Length - 1))).ToArray(), next_9)));
        };
        return res_6;
    }

    static void main() {
        long n_10 = 10;
        Console.WriteLine(_fmtTop((" Fibonacci: " + show(gen(new long[]{1, 1}, n_10)))));
        Console.WriteLine(_fmtTop(("Tribonacci: " + show(gen(new long[]{1, 1, 2}, n_10)))));
        Console.WriteLine(_fmtTop(("Tetranacci: " + show(gen(new long[]{1, 1, 2, 4}, n_10)))));
        Console.WriteLine(_fmtTop(("     Lucas: " + show(gen(new long[]{2, 1}, n_10)))));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
