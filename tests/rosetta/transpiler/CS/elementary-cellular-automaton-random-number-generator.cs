// Generated by Mochi 0.10.50 on 2025-07-31 07:41 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long n_0 = 64;
    static long[] init_23 = new long[]{};
    static long i_24 = 0;
    static long pow2(long k_1) {
        long v_2 = 1;
        long i_3 = 0;
        while ((i_3 < k_1)) {
            v_2 = (v_2 * 2);
            i_3 = (i_3 + 1);
        };
        return v_2;
    }

    static long ruleBit(long ruleNum_4, long idx_5) {
        long r_6 = ruleNum_4;
        long i_7 = 0;
        while ((i_7 < idx_5)) {
            r_6 = (r_6 / 2);
            i_7 = (i_7 + 1);
        };
        return (r_6 % 2);
    }

    static long[] evolve(long[] state_8, long ruleNum_9) {
        long[] out_10 = new long[]{};
        long p_11 = 0;
        while ((p_11 < 10)) {
            long b_12 = 0;
            long q_13 = 7;
            while ((q_13 >= 0)) {
                long[] st_14 = state_8;
                b_12 = (b_12 + (st_14[(int)(0)] * pow2(q_13)));
                long[] next_15 = new long[]{};
                long i_16 = 0;
                while ((i_16 < n_0)) {
                    long lidx_17 = (i_16 - 1);
                    if ((lidx_17 < 0)) {
                        lidx_17 = (n_0 - 1);
                    }
                    long left_18 = st_14[(int)(lidx_17)];
                    long center_19 = st_14[(int)(i_16)];
                    long ridx_20 = (i_16 + 1);
                    if ((ridx_20 >= n_0)) {
                        ridx_20 = 0;
                    }
                    long right_21 = st_14[(int)(ridx_20)];
                    long index_22 = (((left_18 * 4) + (center_19 * 2)) + right_21);
                    next_15 = (Enumerable.ToArray(Enumerable.Append(next_15, ruleBit(ruleNum_9, index_22))));
                    i_16 = (i_16 + 1);
                }
                state_8 = next_15;
                q_13 = (q_13 - 1);
            }
            out_10 = (Enumerable.ToArray(Enumerable.Append(out_10, b_12)));
            p_11 = (p_11 + 1);
        };
        return out_10;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            while ((i_24 < n_0)) {
                init_23 = (Enumerable.ToArray(Enumerable.Append(init_23, 0)));
                i_24 = (i_24 + 1);
            }
            init_23[0] = 1;
            long[] bytes_25 = evolve(init_23, 30);
            Console.WriteLine(_fmtTop((bytes_25).ToString()));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
