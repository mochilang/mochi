// Generated by Mochi 0.10.41 on 2025-07-27 11:31 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static string[] compassPoint_17 = new string[]{"North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"};
    static double[] headings_19 = new double[]{0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38};
    static long i_20 = 0;
    static string padLeft(string s_0, long w_1) {
        string res_2 = "";
        long n_3 = (((dynamic)w_1) - ((dynamic)s_0.Length));
        while ((n_3 > 0)) {
            res_2 = (res_2 + " ");
            n_3 = (n_3 - 1);
        };
        return (res_2 + s_0);
    }

    static string padRight(string s_4, long w_5) {
        string out_6 = s_4;
        long i_7 = s_4.Length;
        while ((i_7 < w_5)) {
            out_6 = (out_6 + " ");
            i_7 = (i_7 + 1);
        };
        return out_6;
    }

    static long indexOf(string s_8, string ch_9) {
        long i_10 = 0;
        while ((i_10 < s_8.Length)) {
            if ((s_8.Substring((int)(i_10), (int)((i_10 + 1) - i_10)) == ch_9)) {
                return i_10;
            }
            i_10 = (i_10 + 1);
        };
        return -1;
    }

    static string format2(double f_11) {
        string s_12 = (f_11).ToString();
        var idx_13 = s_12.IndexOf(".");
        if ((idx_13 < 0)) {
            s_12 = (s_12 + ".00");
        } else {
            long need_14 = (((dynamic)idx_13) + ((dynamic)3));
            if ((s_12.Length > need_14)) {
                s_12 = s_12.Substring((int)(0), (int)(need_14 - 0));
            } else {
                while ((s_12.Length < need_14)) {
                    s_12 = (s_12 + "0");
                }
            }
        };
        return s_12;
    }

    static long cpx(double h_15) {
        long x_16 = Convert.ToInt64(((h_15 / 11.25) + 0.5));
        x_16 = (x_16 % 32);
        if ((x_16 < 0)) {
            x_16 = (x_16 + 32);
        };
        return x_16;
    }

    static string degrees2compasspoint(double h_18) {
        return compassPoint_17[(int)(cpx(h_18))];
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop("Index  Compass point         Degree"));
            while ((i_20 < headings_19.Length)) {
                double h_21 = headings_19[(int)(i_20)];
                long idx_22 = ((i_20 % 32) + 1);
                string cp_23 = degrees2compasspoint(h_21);
                Console.WriteLine(_fmtTop((((((padLeft((idx_22).ToString(), 4) + "   ") + padRight(cp_23, 19)) + " ") + format2(h_21)) + "Â°")));
                i_20 = (i_20 + 1);
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
