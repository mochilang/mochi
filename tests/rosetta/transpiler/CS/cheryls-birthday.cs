// Generated by Mochi 0.10.57 on 2025-08-04 21:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Birthday {
    public long month;
    public long day;
    public override string ToString() => $"Birthday {{month = {month}, day = {day}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static long _len(object v) {
        if (v is Array a) return a.Length;
        if (v is string s) return s.Length;
        if (v is System.Collections.ICollection c) return c.Count;
        return Convert.ToString(v).Length;
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Birthday[] choices_13 = new Birthday[]{new Birthday{month = 5, day = 15}, new Birthday{month = 5, day = 16}, new Birthday{month = 5, day = 19}, new Birthday{month = 6, day = 17}, new Birthday{month = 6, day = 18}, new Birthday{month = 7, day = 14}, new Birthday{month = 7, day = 16}, new Birthday{month = 8, day = 14}, new Birthday{month = 8, day = 15}, new Birthday{month = 8, day = 17}};
    static Birthday[] filtered_14 = new Birthday[]{};
    public static bool monthUnique(Birthday b_0, Birthday[] list_1) {
        long c_2 = 0;
        foreach (Birthday x_3 in list_1) {
            if ((x_3.month == b_0.month)) {
                c_2 = (c_2 + 1);
            }
        };
        return (c_2 == 1);
    }

    public static bool dayUnique(Birthday b_4, Birthday[] list_5) {
        long c_6 = 0;
        foreach (Birthday x_7 in list_5) {
            if ((x_7.day == b_4.day)) {
                c_6 = (c_6 + 1);
            }
        };
        return (c_6 == 1);
    }

    public static bool monthWithUniqueDay(Birthday b_8, Birthday[] list_9) {
        foreach (Birthday x_10 in list_9) {
            if (((x_10.month == b_8.month) && Program.dayUnique(x_10, list_9))) {
                return true;
            }
        };
        return false;
    }

    public static string bstr(Birthday b_11) {
        string[] months_12 = new string[]{"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        return ((months_12[(int)(b_11.month)] + " ") + _fmt(b_11.day));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            foreach (Birthday bd_15 in choices_13) {
                if ((!Program.monthUnique(bd_15, choices_13))) {
                    filtered_14 = (Enumerable.ToArray(Enumerable.Append(filtered_14, bd_15)));
                }
            }
            Birthday[] filtered2_16 = new Birthday[]{};
            foreach (Birthday bd_17 in filtered_14) {
                if ((!Program.monthWithUniqueDay(bd_17, filtered_14))) {
                    filtered2_16 = (Enumerable.ToArray(Enumerable.Append(filtered2_16, bd_17)));
                }
            }
            Birthday[] filtered3_18 = new Birthday[]{};
            foreach (Birthday bd_19 in filtered2_16) {
                if (Program.dayUnique(bd_19, filtered2_16)) {
                    filtered3_18 = (Enumerable.ToArray(Enumerable.Append(filtered3_18, bd_19)));
                }
            }
            Birthday[] filtered4_20 = new Birthday[]{};
            foreach (Birthday bd_21 in filtered3_18) {
                if (Program.monthUnique(bd_21, filtered3_18)) {
                    filtered4_20 = (Enumerable.ToArray(Enumerable.Append(filtered4_20, bd_21)));
                }
            }
            if ((filtered4_20.Length == 1)) {
                Console.WriteLine(Program._fmtTop(("Cheryl's birthday is " + Program.bstr(filtered4_20[(int)(0)]))));
            } else {
                Console.WriteLine(Program._fmtTop("Something went wrong!"));
            }
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
