// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Edge {
    public long a;
    public long b;
    public override string ToString() => $"Edge {{a = {a}, b = {b}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static bool contains(long[] xs_0, long v_1) {
        foreach (var x_2 in xs_0) {
            if ((x_2 == v_1)) {
                return true;
            }
        };
        return false;
    }

    static long[] copyInts(long[] xs_3) {
        long[] out_4 = new long[]{};
        foreach (var x_5 in xs_3) {
            out_4 = (Enumerable.ToArray(Enumerable.Append(out_4, x_5)));
        };
        return out_4;
    }

    static bool sliceEqual(long[] a_6, long[] b_7) {
        long i_8 = 0;
        while ((i_8 < a_6.Length)) {
            if ((a_6[(int)(i_8)] != b_7[(int)(i_8)])) {
                return false;
            }
            i_8 = (i_8 + 1);
        };
        return true;
    }

    static void reverse(long[] xs_9) {
        long i_10 = 0;
        long j_11 = (((dynamic)(xs_9.Length)) - ((dynamic)(1)));
        while ((i_10 < j_11)) {
            long t_12 = xs_9[(int)(i_10)];
            xs_9[i_10] = xs_9[(int)(j_11)];
            xs_9[j_11] = t_12;
            i_10 = (i_10 + 1);
            j_11 = (j_11 - 1);
        };
    }

    static bool perimEqual(long[] p1_13, long[] p2_14) {
        if ((p1_13.Length != p2_14.Length)) {
            return false;
        };
        foreach (var v_15 in p1_13) {
            if ((!contains(p2_14, v_15))) {
                return false;
            }
        };
        long[] c_16 = copyInts(p1_13);
        long r_17 = 0;
        while ((r_17 < 2)) {
            long i_18 = 0;
            while ((i_18 < c_16.Length)) {
                if (sliceEqual(c_16, p2_14)) {
                    return true;
                }
                long t_19 = c_16[(int)((((dynamic)(c_16.Length)) - ((dynamic)(1))))];
                long j_20 = (((dynamic)(c_16.Length)) - ((dynamic)(1)));
                while ((j_20 > 0)) {
                    c_16[j_20] = c_16[(int)((j_20 - 1))];
                    j_20 = (j_20 - 1);
                }
                c_16[0] = t_19;
                i_18 = (i_18 + 1);
            }
            reverse(c_16);
            r_17 = (r_17 + 1);
        };
        return false;
    }

    static Edge[] sortEdges(Edge[] es_21) {
        Edge[] arr_22 = es_21;
        var n_23 = arr_22.Length;
        long i_24 = 0;
        while ((i_24 < n_23)) {
            long j_25 = 0;
            while ((j_25 < (((dynamic)(n_23)) - ((dynamic)(1))))) {
                Edge a_26 = arr_22[(int)(j_25)];
                Edge b_27 = arr_22[(int)((j_25 + 1))];
                if (((a_26.a > b_27.a) || ((a_26.a == b_27.a) && (a_26.b > b_27.b)))) {
                    arr_22[j_25] = b_27;
                    arr_22[(j_25 + 1)] = a_26;
                }
                j_25 = (j_25 + 1);
            }
            i_24 = (i_24 + 1);
        };
        return arr_22;
    }

    static Edge[] concat(Edge[] a_28, Edge[] b_29) {
        Edge[] out_30 = new Edge[]{};
        foreach (var x_31 in a_28) {
            out_30 = (Enumerable.ToArray(Enumerable.Append(out_30, x_31)));
        };
        foreach (var x_32 in b_29) {
            out_30 = (Enumerable.ToArray(Enumerable.Append(out_30, x_32)));
        };
        return out_30;
    }

    static object faceToPerim(Edge[] face_33) {
        long le_34 = face_33.Length;
        if ((le_34 == 0)) {
            return null;
        };
        Edge[] edges_35 = new Edge[]{};
        long i_36 = 0;
        while ((i_36 < le_34)) {
            Edge e_37 = face_33[(int)(i_36)];
            if ((e_37.b <= e_37.a)) {
                return null;
            }
            edges_35 = (Enumerable.ToArray(Enumerable.Append(edges_35, e_37)));
            i_36 = (i_36 + 1);
        };
        edges_35 = sortEdges(edges_35);
        Edge firstEdge_38 = edges_35[(int)(0)];
        long[] perim_39 = new long[]{firstEdge_38.a, firstEdge_38.b};
        long first_40 = firstEdge_38.a;
        long last_41 = firstEdge_38.b;
        edges_35 = edges_35.Skip((int)(1)).Take((int)((edges_35.Length - 1))).ToArray();
        le_34 = edges_35.Length;
        bool done_42 = false;
        while (((le_34 > 0) && (!done_42))) {
            long idx_43 = 0;
            bool found_44 = false;
            while ((idx_43 < le_34)) {
                Edge e_45 = edges_35[(int)(idx_43)];
                if ((e_45.a == last_41)) {
                    perim_39 = (Enumerable.ToArray(Enumerable.Append(perim_39, e_45.b)));
                    last_41 = e_45.b;
                    found_44 = true;
                } else {
                    if ((e_45.b == last_41)) {
                        perim_39 = (Enumerable.ToArray(Enumerable.Append(perim_39, e_45.a)));
                        last_41 = e_45.a;
                        found_44 = true;
                    }
                }
                if (found_44) {
                    edges_35 = concat(edges_35.Skip((int)(0)).Take((int)((idx_43 - 0))).ToArray(), edges_35.Skip((int)((idx_43 + 1))).Take((int)((edges_35.Length - (idx_43 + 1)))).ToArray());
                    le_34 = (le_34 - 1);
                    if ((last_41 == first_40)) {
                        if ((le_34 == 0)) {
                            done_42 = true;
                        } else {
                            return null;
                        }
                    }
                    break;
                }
                idx_43 = (idx_43 + 1);
            }
            if ((!found_44)) {
                return null;
            }
        };
        return (object)perim_39.Skip((int)(0)).Take((int)(((((dynamic)(perim_39.Length)) - ((dynamic)(1))) - 0))).ToArray();
    }

    static string listStr(long[] xs_46) {
        string s_47 = "[";
        long i_48 = 0;
        while ((i_48 < xs_46.Length)) {
            s_47 = (s_47 + (xs_46[(int)(i_48)]).ToString());
            if ((i_48 < (((dynamic)(xs_46.Length)) - ((dynamic)(1))))) {
                s_47 = (s_47 + " ");
            }
            i_48 = (i_48 + 1);
        };
        s_47 = (s_47 + "]");
        return s_47;
    }

    static void main() {
        Console.WriteLine(_fmtTop("Perimeter format equality checks:"));
        Console.WriteLine(_fmtTop(("  Q == R is " + (perimEqual(new long[]{8, 1, 3}, new long[]{1, 3, 8})).ToString())));
        Console.WriteLine(_fmtTop(("  U == V is " + (perimEqual(new long[]{18, 8, 14, 10, 12, 17, 19}, new long[]{8, 14, 10, 12, 17, 19, 18})).ToString())));
        Edge[] e_49 = new Edge[]{new Edge{a = 7, b = 11}, new Edge{a = 1, b = 11}, new Edge{a = 1, b = 7}};
        Edge[] f_50 = new Edge[]{new Edge{a = 11, b = 23}, new Edge{a = 1, b = 17}, new Edge{a = 17, b = 23}, new Edge{a = 1, b = 11}};
        Edge[] g_51 = new Edge[]{new Edge{a = 8, b = 14}, new Edge{a = 17, b = 19}, new Edge{a = 10, b = 12}, new Edge{a = 10, b = 14}, new Edge{a = 12, b = 17}, new Edge{a = 8, b = 18}, new Edge{a = 18, b = 19}};
        Edge[] h_52 = new Edge[]{new Edge{a = 1, b = 3}, new Edge{a = 9, b = 11}, new Edge{a = 3, b = 11}, new Edge{a = 1, b = 11}};
        Console.WriteLine(_fmtTop("\nEdge to perimeter format translations:"));
        Edge[][] faces_53 = new Edge[][]{e_49, f_50, g_51, h_52};
        string[] names_54 = new string[]{"E", "F", "G", "H"};
        long idx_55 = 0;
        while ((idx_55 < faces_53.Length)) {
            var per_56 = faceToPerim(faces_53[(int)(idx_55)]);
            if ((per_56 == null)) {
                Console.WriteLine(_fmtTop((("  " + names_54[(int)(idx_55)]) + " => Invalid edge format")));
            } else {
                Console.WriteLine(_fmtTop(((("  " + names_54[(int)(idx_55)]) + " => ") + listStr((per_56 as long[]) ?? new long[]{}))));
            }
            idx_55 = (idx_55 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
