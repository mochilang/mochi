// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] randInt(long s, long n) {
        long next_0 = (((s * 1664525) + 1013904223) % 2147483647);
        return new long[]{next_0, (next_0 % n)};
    }

    static string padLeft(string s, long w) {
        string res_1 = "";
        long n_2 = (((dynamic)w) - ((dynamic)s.Length));
        while ((n_2 > 0)) {
            res_1 = (res_1 + " ");
            n_2 = (n_2 - 1);
        };
        return (res_1 + s);
    }

    static object[] makeSeq(long s, long le) {
        string bases_3 = "ACGT";
        string out_4 = "";
        long i_5 = 0;
        while ((i_5 < le)) {
            long[] r_6 = randInt(s, 4);
            s = r_6[(int)(0)];
            var idx_7 = Convert.ToInt64(r_6[(int)(1)]);
            out_4 = (out_4 + bases_3.Substring((int)(idx_7), (int)((((dynamic)idx_7) + ((dynamic)1)) - idx_7)));
            i_5 = (i_5 + 1);
        };
        return new object[]{s, out_4};
    }

    static object[] mutate(long s, string dna, long[] w) {
        string bases_8 = "ACGT";
        var le_9 = dna.Length;
        long[] r_10 = randInt(s, le_9);
        s = r_10[(int)(0)];
        var p_11 = Convert.ToInt64(r_10[(int)(1)]);
        r_10 = randInt(s, 300);
        s = r_10[(int)(0)];
        var x_12 = Convert.ToInt64(r_10[(int)(1)]);
        string[] arr_13 = new string[]{};
        long i_14 = 0;
        while ((i_14 < le_9)) {
            arr_13 = (Enumerable.ToArray(Enumerable.Append(arr_13, dna.Substring((int)(i_14), (int)((i_14 + 1) - i_14)))));
            i_14 = (i_14 + 1);
        };
        if ((x_12 < w[(int)(0)])) {
            r_10 = randInt(s, 4);
            s = r_10[(int)(0)];
            var idx_15 = Convert.ToInt64(r_10[(int)(1)]);
            string b_16 = bases_8.Substring((int)(idx_15), (int)((((dynamic)idx_15) + ((dynamic)1)) - idx_15));
            Console.WriteLine(_fmtTop((((((("  Change @" + padLeft((p_11).ToString(), 3)) + " '") + arr_13[(int)(p_11)]) + "' to '") + b_16) + "'")));
            arr_13[p_11] = b_16;
        } else {
            if ((x_12 < (w[(int)(0)] + w[(int)(1)]))) {
                Console.WriteLine(_fmtTop((((("  Delete @" + padLeft((p_11).ToString(), 3)) + " '") + arr_13[(int)(p_11)]) + "'")));
                long j_17 = p_11;
                while ((j_17 < (((dynamic)arr_13.Length) - ((dynamic)1)))) {
                    arr_13[j_17] = arr_13[(int)((j_17 + 1))];
                    j_17 = (j_17 + 1);
                }
                arr_13 = arr_13.Skip((int)(0)).Take((int)(((((dynamic)arr_13.Length) - ((dynamic)1)) - 0))).ToArray();
            } else {
                r_10 = randInt(s, 4);
                s = r_10[(int)(0)];
                var idx2_18 = Convert.ToInt64(r_10[(int)(1)]);
                string b_19 = bases_8.Substring((int)(idx2_18), (int)((((dynamic)idx2_18) + ((dynamic)1)) - idx2_18));
                arr_13 = (Enumerable.ToArray(Enumerable.Append(arr_13, "")));
                long j_20 = (((dynamic)arr_13.Length) - ((dynamic)1));
                while ((j_20 > p_11)) {
                    arr_13[j_20] = arr_13[(int)((j_20 - 1))];
                    j_20 = (j_20 - 1);
                }
                Console.WriteLine(_fmtTop((((("  Insert @" + padLeft((p_11).ToString(), 3)) + " '") + b_19) + "'")));
                arr_13[p_11] = b_19;
            }
        };
        string out_21 = "";
        i_14 = 0;
        while ((i_14 < arr_13.Length)) {
            out_21 = (out_21 + arr_13[(int)(i_14)]);
            i_14 = (i_14 + 1);
        };
        return new object[]{s, out_21};
    }

    static void prettyPrint(string dna, long rowLen) {
        Console.WriteLine(_fmtTop("SEQUENCE:"));
        var le_22 = dna.Length;
        long i_23 = 0;
        while ((i_23 < le_22)) {
            long k_24 = (i_23 + rowLen);
            if ((k_24 > le_22)) {
                k_24 = le_22;
            }
            Console.WriteLine(_fmtTop(((padLeft((i_23).ToString(), 5) + ": ") + dna.Substring((int)(i_23), (int)(k_24 - i_23)))));
            i_23 = (i_23 + rowLen);
        };
        long a_25 = 0;
        long c_26 = 0;
        long g_27 = 0;
        long t_28 = 0;
        long idx_29 = 0;
        while ((idx_29 < le_22)) {
            string ch_30 = dna.Substring((int)(idx_29), (int)((idx_29 + 1) - idx_29));
            if ((ch_30 == "A")) {
                a_25 = (a_25 + 1);
            } else {
                if ((ch_30 == "C")) {
                    c_26 = (c_26 + 1);
                } else {
                    if ((ch_30 == "G")) {
                        g_27 = (g_27 + 1);
                    } else {
                        if ((ch_30 == "T")) {
                            t_28 = (t_28 + 1);
                        }
                    }
                }
            }
            idx_29 = (idx_29 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        Console.WriteLine(_fmtTop("BASE COUNT:"));
        Console.WriteLine(_fmtTop(("    A: " + padLeft((a_25).ToString(), 3))));
        Console.WriteLine(_fmtTop(("    C: " + padLeft((c_26).ToString(), 3))));
        Console.WriteLine(_fmtTop(("    G: " + padLeft((g_27).ToString(), 3))));
        Console.WriteLine(_fmtTop(("    T: " + padLeft((t_28).ToString(), 3))));
        Console.WriteLine(_fmtTop("    ------"));
        Console.WriteLine(_fmtTop(("    Î£: " + (le_22).ToString())));
        Console.WriteLine(_fmtTop("    ======"));
    }

    static string wstring(long[] w) {
        return (((((("  Change: " + (w[(int)(0)]).ToString()) + "\n  Delete: ") + (w[(int)(1)]).ToString()) + "\n  Insert: ") + (w[(int)(2)]).ToString()) + "\n");
    }

    static void main() {
        var seed_31 = 1;
        object[] res_32 = makeSeq(seed_31, 250);
        seed_31 = ((dynamic)res_32)[0];
        var dna_33 = ((dynamic)res_32)[1];
        prettyPrint(dna_33, 50);
        long muts_34 = 10;
        long[] w_35 = new long[]{100, 100, 100};
        Console.WriteLine(_fmtTop("\nWEIGHTS (ex 300):"));
        Console.WriteLine(_fmtTop(wstring(w_35)));
        Console.WriteLine(_fmtTop((("MUTATIONS (" + (muts_34).ToString()) + "):")));
        long i_36 = 0;
        while ((i_36 < muts_34)) {
            res_32 = mutate(seed_31, dna_33, w_35);
            seed_31 = ((dynamic)res_32)[0];
            dna_33 = ((dynamic)res_32)[1];
            i_36 = (i_36 + 1);
        };
        Console.WriteLine(_fmtTop(""));
        prettyPrint(dna_33, 50);
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
