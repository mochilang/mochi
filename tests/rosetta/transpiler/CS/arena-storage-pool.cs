// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] poolPut(long[] p, long x) {
        return (Enumerable.ToArray(Enumerable.Append(p, x)));
    }

    static Dictionary<string, object> poolGet(long[] p) {
        if ((p.Length == 0)) {
            Console.WriteLine(_fmtTop("pool empty"));
            return new Dictionary<string, object>{{"pool", p}, {"val", 0}};
        };
        long idx_0 = (p.Length - 1);
        long v_1 = p[idx_0];
        p = p.Skip((int)(0)).Take((int)((idx_0 - 0))).ToArray();
        return new Dictionary<string, object>{{"pool", p}, {"val", v_1}};
    }

    static long[] clearPool(long[] p) {
        return new long[]{};
    }

    static void main() {
        long[] pool_2 = new long[]{};
        long i_3 = 1;
        long j_4 = 2;
        Console.WriteLine(_fmtTop(((i_3 + j_4)).ToString()));
        pool_2 = poolPut(pool_2, i_3);
        pool_2 = poolPut(pool_2, j_4);
        i_3 = 0;
        j_4 = 0;
        Dictionary<string, object> res1_5 = poolGet(pool_2);
        pool_2 = (long[])((dynamic)res1_5)["pool"];
        i_3 = Convert.ToInt32(((dynamic)res1_5)["val"]);
        Dictionary<string, object> res2_6 = poolGet(pool_2);
        pool_2 = (long[])((dynamic)res2_6)["pool"];
        j_4 = Convert.ToInt32(((dynamic)res2_6)["val"]);
        i_3 = 4;
        j_4 = 5;
        Console.WriteLine(_fmtTop(((i_3 + j_4)).ToString()));
        pool_2 = poolPut(pool_2, i_3);
        pool_2 = poolPut(pool_2, j_4);
        i_3 = 0;
        j_4 = 0;
        pool_2 = clearPool(pool_2);
        Dictionary<string, object> res3_7 = poolGet(pool_2);
        pool_2 = (long[])((dynamic)res3_7)["pool"];
        i_3 = Convert.ToInt32(((dynamic)res3_7)["val"]);
        Dictionary<string, object> res4_8 = poolGet(pool_2);
        pool_2 = (long[])((dynamic)res4_8)["pool"];
        j_4 = Convert.ToInt32(((dynamic)res4_8)["val"]);
        i_3 = 7;
        j_4 = 8;
        Console.WriteLine(_fmtTop(((i_3 + j_4)).ToString()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
