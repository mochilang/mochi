// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long[] poolPut(long[] p_0, long x_1) {
        return (Enumerable.ToArray(Enumerable.Append(p_0, x_1)));
    }

    static Dictionary<string, object> poolGet(long[] p_2) {
        if ((p_2.Length == 0)) {
            Console.WriteLine(_fmtTop("pool empty"));
            return new Dictionary<string, object>{{"pool", p_2}, {"val", 0}};
        };
        long idx_3 = (((dynamic)(p_2.Length)) - ((dynamic)(1)));
        long v_4 = p_2[(int)(idx_3)];
        p_2 = p_2.Skip((int)(0)).Take((int)((idx_3 - 0))).ToArray();
        return new Dictionary<string, object>{{"pool", p_2}, {"val", v_4}};
    }

    static long[] clearPool(long[] p_5) {
        return new long[]{};
    }

    static void main() {
        long[] pool_6 = new long[]{};
        long i_7 = 1;
        long j_8 = 2;
        Console.WriteLine(_fmtTop(((i_7 + j_8)).ToString()));
        pool_6 = poolPut(pool_6, i_7);
        pool_6 = poolPut(pool_6, j_8);
        i_7 = 0;
        j_8 = 0;
        Dictionary<string, object> res1_9 = poolGet(pool_6);
        pool_6 = (((dynamic)res1_9)["pool"] as long[]) ?? new long[]{};
        i_7 = Convert.ToInt64(((dynamic)res1_9)["val"]);
        Dictionary<string, object> res2_10 = poolGet(pool_6);
        pool_6 = (((dynamic)res2_10)["pool"] as long[]) ?? new long[]{};
        j_8 = Convert.ToInt64(((dynamic)res2_10)["val"]);
        i_7 = 4;
        j_8 = 5;
        Console.WriteLine(_fmtTop(((i_7 + j_8)).ToString()));
        pool_6 = poolPut(pool_6, i_7);
        pool_6 = poolPut(pool_6, j_8);
        i_7 = 0;
        j_8 = 0;
        pool_6 = clearPool(pool_6);
        Dictionary<string, object> res3_11 = poolGet(pool_6);
        pool_6 = (((dynamic)res3_11)["pool"] as long[]) ?? new long[]{};
        i_7 = Convert.ToInt64(((dynamic)res3_11)["val"]);
        Dictionary<string, object> res4_12 = poolGet(pool_6);
        pool_6 = (((dynamic)res4_12)["pool"] as long[]) ?? new long[]{};
        j_8 = Convert.ToInt64(((dynamic)res4_12)["val"]);
        i_7 = 7;
        j_8 = 8;
        Console.WriteLine(_fmtTop(((i_7 + j_8)).ToString()));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
