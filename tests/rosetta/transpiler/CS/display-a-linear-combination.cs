// Generated by Mochi 0.10.55 on 2025-08-03 10:56 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalAllocatedBytes(true);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    public static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    public static string padRight(string s_0, long w_1) {
        string r_2 = s_0;
        while ((Convert.ToDouble(r_2.Length) < Convert.ToDouble(w_1))) {
            r_2 = (r_2 + " ");
        };
        return r_2;
    }

    public static string linearCombo(long[] c_3) {
        string out_4 = "";
        long i_5 = 0;
        while ((Convert.ToDouble(i_5) < Convert.ToDouble(c_3.Length))) {
            long n_6 = c_3[(int)(i_5)];
            if ((n_6 != 0)) {
                string op_7 = "";
                if (((n_6 < 0) && (out_4.Length == 0))) {
                    op_7 = "-";
                } else {
                    if ((n_6 < 0)) {
                        op_7 = " - ";
                    } else {
                        if (((n_6 > 0) && (out_4.Length == 0))) {
                            op_7 = "";
                        } else {
                            op_7 = " + ";
                        }
                    }
                }
                long av_8 = n_6;
                if ((av_8 < 0)) {
                    av_8 = -av_8;
                }
                string coeff_9 = (_fmt(av_8) + "*");
                if ((av_8 == 1)) {
                    coeff_9 = "";
                }
                out_4 = (((((out_4 + op_7) + coeff_9) + "e(") + _fmt((i_5 + 1))) + ")");
            }
            i_5 = (i_5 + 1);
        };
        if ((out_4.Length == 0)) {
            return "0";
        };
        return out_4;
    }

    public static void main() {
        long[][] combos_10 = new long[][]{new long[]{1, 2, 3}, new long[]{0, 1, 2, 3}, new long[]{1, 0, 3, 4}, new long[]{1, 2, 0}, new long[]{0, 0, 0}, new long[]{0}, new long[]{1, 1, 1}, new long[]{-1, -1, -1}, new long[]{-1, -2, 0, -3}, new long[]{-1}};
        long idx_11 = 0;
        while ((Convert.ToDouble(idx_11) < Convert.ToDouble(combos_10.Length))) {
            long[] c_12 = combos_10[(int)(idx_11)];
            string t_13 = "[";
            long j_14 = 0;
            while ((Convert.ToDouble(j_14) < Convert.ToDouble(c_12.Length))) {
                t_13 = (t_13 + _fmt(c_12[(int)(j_14)]));
                if ((j_14 < (((dynamic)(c_12.Length)) - ((dynamic)(1))))) {
                    t_13 = (t_13 + ", ");
                }
                j_14 = (j_14 + 1);
            }
            t_13 = (t_13 + "]");
            string lc_15 = Program.linearCombo(c_12);
            Console.WriteLine(Program._fmtTop(((Program.padRight(t_13, 15) + "  ->  ") + lc_15)));
            idx_11 = (idx_11 + 1);
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Program.main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            if (__dur <= 0) __dur = 1;
            var __memDiff = __memEnd - __memStart;
            if (__memDiff <= 0) __memDiff = __memEnd;
            Console.WriteLine("{\"name\":\"main\",\"duration_us\":" + __dur + ",\"memory_bytes\":" + __memDiff + "}");
        }
    }
}
