// Generated by Mochi 0.10.52 on 2025-07-31 09:21 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double sqrtApprox(double x_0) {
        if ((x_0 <= 0.0)) {
            return 0.0;
        };
        double g_1 = x_0;
        long i_2 = 0;
        while ((i_2 < 20)) {
            g_1 = ((g_1 + (x_0 / g_1)) / 2.0);
            i_2 = (i_2 + 1);
        };
        return g_1;
    }

    static double abs(double x_3) {
        if ((x_3 < 0.0)) {
            return -x_3;
        };
        return x_3;
    }

    static void main() {
        double oldPhi_4 = 1.0;
        double phi_5 = 0.0;
        long iters_6 = 0;
        double limit_7 = 1e-05;
        while (true) {
            phi_5 = (1.0 + (1.0 / oldPhi_4));
            iters_6 = (iters_6 + 1);
            if ((abs((phi_5 - oldPhi_4)) <= limit_7)) {
                break;
            }
            oldPhi_4 = phi_5;
        };
        double actual_8 = ((1.0 + sqrtApprox(5.0)) / 2.0);
        Console.WriteLine(_fmtTop(("Final value of phi : " + (phi_5).ToString())));
        Console.WriteLine(_fmtTop(("Number of iterations : " + (iters_6).ToString())));
        Console.WriteLine(_fmtTop(("Error (approx) : " + ((phi_5 - actual_8)).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
