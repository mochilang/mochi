// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static object[] f() {
        return new object[]{0, 0.0};
    }

    static long g(long a_0, double b_1) {
        return 0;
    }

    static void h(string s_2, long[] nums_3) {
    }

    static void main() {
        object[] ab_4 = f();
        object a_5 = ((dynamic)ab_4)[0];
        object b_6 = ((dynamic)ab_4)[1];
        object cb_7 = ((dynamic)f())[1];
        long d_8 = g(Convert.ToInt64(a_5), Convert.ToDouble(cb_7));
        long e_9 = g(d_8, Convert.ToDouble(b_6));
        long i_10 = g(d_8, 2.0);
        long[] list_11 = new long[]{};
        list_11 = (Enumerable.ToArray(Enumerable.Append(list_11, a_5)));
        list_11 = (Enumerable.ToArray(Enumerable.Append(list_11, d_8)));
        list_11 = (Enumerable.ToArray(Enumerable.Append(list_11, e_9)));
        list_11 = (Enumerable.ToArray(Enumerable.Append(list_11, i_10)));
        i_10 = list_11.Length;
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
