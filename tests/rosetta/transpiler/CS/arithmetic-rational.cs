// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static long intSqrt(long x_0) {
        if ((x_0 < 2)) {
            return x_0;
        };
        long left_1 = 1;
        long right_2 = (x_0 / 2);
        long ans_3 = 0;
        while ((left_1 <= right_2)) {
            long mid_4 = (left_1 + ((right_2 - left_1) / 2));
            long sq_5 = (mid_4 * mid_4);
            if ((sq_5 == x_0)) {
                return mid_4;
            }
            if ((sq_5 < x_0)) {
                left_1 = (mid_4 + 1);
                ans_3 = mid_4;
            } else {
                right_2 = (mid_4 - 1);
            }
        };
        return ans_3;
    }

    static long sumRecip(long n_6) {
        long s_7 = 1;
        long limit_8 = intSqrt(n_6);
        long f_9 = 2;
        while ((f_9 <= limit_8)) {
            if (((n_6 % f_9) == 0)) {
                s_7 = (s_7 + (n_6 / f_9));
                long f2_10 = (n_6 / f_9);
                if ((f2_10 != f_9)) {
                    s_7 = (s_7 + f_9);
                }
            }
            f_9 = (f_9 + 1);
        };
        return s_7;
    }

    static void main() {
        long[] nums_11 = new long[]{6, 28, 120, 496, 672, 8128, 30240, 32760, 523776};
        foreach (var n_12 in nums_11) {
            long s_13 = sumRecip(n_12);
            if (((s_13 % n_12) == 0)) {
                long val_14 = (s_13 / n_12);
                string perfect_15 = "";
                if ((val_14 == 1)) {
                    perfect_15 = "perfect!";
                }
                Console.WriteLine(_fmtTop(((((("Sum of recipr. factors of " + (n_12).ToString()) + " = ") + (val_14).ToString()) + " exactly ") + perfect_15)));
            }
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
