// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double powf(double base_0, long exp_1) {
        double result_2 = 1.0;
        long i_3 = 0;
        while ((i_3 < exp_1)) {
            result_2 = (result_2 * base_0);
            i_3 = (i_3 + 1);
        };
        return result_2;
    }

    static double nthRoot(double x_4, long n_5) {
        double low_6 = 0.0;
        double high_7 = x_4;
        long i_8 = 0;
        while ((i_8 < 60)) {
            double mid_9 = ((low_6 + high_7) / 2.0);
            if ((powf(mid_9, n_5) > x_4)) {
                high_7 = mid_9;
            } else {
                low_6 = mid_9;
            }
            i_8 = (i_8 + 1);
        };
        return low_6;
    }

    static void main() {
        double sum_10 = 0.0;
        double sumRecip_11 = 0.0;
        double prod_12 = 1.0;
        long n_13 = 1;
        while ((n_13 <= 10)) {
            var f_14 = Convert.ToDouble(n_13);
            sum_10 = (((dynamic)(sum_10)) + ((dynamic)(f_14)));
            sumRecip_11 = (sumRecip_11 + (((dynamic)(1.0)) / ((dynamic)(f_14))));
            prod_12 = (((dynamic)(prod_12)) * ((dynamic)(f_14)));
            n_13 = (n_13 + 1);
        };
        double count_15 = 10.0;
        double a_16 = (sum_10 / count_15);
        double g_17 = nthRoot(prod_12, 10);
        double h_18 = (count_15 / sumRecip_11);
        Console.WriteLine(_fmtTop(((((("A: " + (a_16).ToString()) + " G: ") + (g_17).ToString()) + " H: ") + (h_18).ToString())));
        Console.WriteLine(_fmtTop(("A >= G >= H: " + (((a_16 >= g_17) && (g_17 >= h_18))).ToString())));
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
