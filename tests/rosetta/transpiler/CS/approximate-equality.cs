// Generated by Mochi 0.10.52 on 2025-07-31 10:42 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double abs(double x_0) {
        if ((x_0 < 0.0)) {
            return -x_0;
        };
        return x_0;
    }

    static double maxf(double a_1, double b_2) {
        if ((a_1 > b_2)) {
            return a_1;
        };
        return b_2;
    }

    static bool isClose(double a_3, double b_4) {
        double relTol_5 = 1e-09;
        double t_6 = abs((a_3 - b_4));
        double u_7 = (relTol_5 * maxf(abs(a_3), abs(b_4)));
        return (t_6 <= u_7);
    }

    static double sqrtApprox(double x_8) {
        double guess_9 = x_8;
        long i_10 = 0;
        while ((i_10 < 10)) {
            guess_9 = ((guess_9 + (x_8 / guess_9)) / 2.0);
            i_10 = (i_10 + 1);
        };
        return guess_9;
    }

    static void main() {
        double root2_11 = sqrtApprox(2.0);
        double[][] pairs_12 = new double[][]{new double[]{1.0000000000000002e+14, 1.0000000000000002e+14}, new double[]{100.01, 100.011}, new double[]{(1.0000000000000002e+13 / 10000.0), 1.0000000000000001e+09}, new double[]{0.001, 0.0010000001}, new double[]{1.01e-22, 0.0}, new double[]{(root2_11 * root2_11), 2.0}, new double[]{(-root2_11 * root2_11), -2.0}, new double[]{1e+17, 1e+17}, new double[]{3.141592653589793, 3.141592653589793}};
        foreach (var pair_13 in pairs_12) {
            double a_14 = pair_13[(int)(0)];
            double b_15 = pair_13[(int)(1)];
            string s_16 = (isClose(a_14, b_15) ? "≈" : "≉");
            Console.WriteLine(_fmtTop((((((a_14).ToString() + " ") + s_16) + " ") + (b_15).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
