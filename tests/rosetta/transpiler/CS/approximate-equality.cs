// Generated by Mochi 0.10.40 on 2025-07-25 13:09 +0700
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static double abs(double x) {
        if ((x < 0)) {
            return -x;
        };
        return x;
    }

    static double maxf(double a, double b) {
        if ((a > b)) {
            return a;
        };
        return b;
    }

    static bool isClose(double a, double b) {
        double relTol = 1e-09;
        var t = Math.Abs((a - b));
        double u = (relTol * maxf(Math.Abs(a), Math.Abs(b)));
        return (t <= u);
    }

    static double sqrtApprox(double x) {
        double guess = x;
        long i = 0;
        while ((i < 10)) {
            guess = ((guess + (x / guess)) / 2);
            i = (i + 1);
        };
        return guess;
    }

    static void main() {
        double root2 = sqrtApprox(2);
        double[][] pairs = new double[][]{new double[]{1.0000000000000002e+14, 1.0000000000000002e+14}, new double[]{100.01, 100.011}, new double[]{(1.0000000000000002e+13 / 10000), 1.0000000000000001e+09}, new double[]{0.001, 0.0010000001}, new double[]{1.01e-22, 0}, new double[]{(root2 * root2), 2}, new double[]{(-root2 * root2), -2}, new double[]{1e+17, 1e+17}, new double[]{3.141592653589793, 3.141592653589793}};
        foreach (var pair_0 in pairs) {
            double a = pair_0[0];
            double b = pair_0[1];
            string s = (isClose(a, b) ? "≈" : "≉");
            Console.WriteLine(_fmtTop((((((a).ToString() + " ") + s) + " ") + (b).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
