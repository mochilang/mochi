// Generated by Mochi 0.10.40 on 2025-07-25 12:29 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> r1 = getCombs(1, 7, true);
    static Dictionary<string, object> r2 = getCombs(3, 9, true);
    static Dictionary<string, object> r3 = getCombs(0, 9, false);
    static bool validComb(long a, long b, long c, long d, long e, long f, long g) {
        long square1 = (a + b);
        long square2 = ((b + c) + d);
        long square3 = ((d + e) + f);
        long square4 = (f + g);
        return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
    }

    static bool isUnique(long a, long b, long c, long d, long e, long f, long g) {
        long[] nums = new long[]{a, b, c, d, e, f, g};
        long i = 0;
        while ((i < nums.Length)) {
            long j = (i + 1);
            while ((j < nums.Length)) {
                if ((nums[i] == nums[j])) {
                    return false;
                }
                j = (j + 1);
            }
            i = (i + 1);
        };
        return true;
    }

    static Dictionary<string, object> getCombs(long low, long high, bool unique) {
        object[] valid = new object[]{};
        long count = 0;
        for (var b_0 = low; b_0 < (high + 1); b_0++) {
            for (var c_1 = low; c_1 < (high + 1); c_1++) {
                for (var d_2 = low; d_2 < (high + 1); d_2++) {
                    long s = ((b_0 + c_1) + d_2);
                    for (var e_3 = low; e_3 < (high + 1); e_3++) {
                        for (var f_4 = low; f_4 < (high + 1); f_4++) {
                            long a = (s - b_0);
                            long g = (s - f_4);
                            if (((a < low) || (a > high))) {
                                continue;
                            }
                            if (((g < low) || (g > high))) {
                                continue;
                            }
                            if ((((d_2 + e_3) + f_4) != s)) {
                                continue;
                            }
                            if (((f_4 + g) != s)) {
                                continue;
                            }
                            if (((!unique) || isUnique(a, b_0, c_1, d_2, e_3, f_4, g))) {
                                valid = (Enumerable.ToArray(Enumerable.Append(valid, (object)new long[]{a, b_0, c_1, d_2, e_3, f_4, g})));
                                count = (count + 1);
                            }
                        }
                    }
                }
            }
        };
        return new Dictionary<string, object>{{"count", count}, {"list", valid}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(((((dynamic)r1)["count"]).ToString() + " unique solutions in 1 to 7")));
            Console.WriteLine(_fmtTop(((dynamic)r1)["list"]));
            Console.WriteLine(_fmtTop(((((dynamic)r2)["count"]).ToString() + " unique solutions in 3 to 9")));
            Console.WriteLine(_fmtTop(((dynamic)r2)["list"]));
            Console.WriteLine(_fmtTop(((((dynamic)r3)["count"]).ToString() + " non-unique solutions in 0 to 9")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
