// Generated by Mochi 0.10.52 on 2025-07-31 10:06 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> r1_34 = getCombs(1, 7, true);
    static bool validComb(long a_0, long b_1, long c_2, long d_3, long e_4, long f_5, long g_6) {
        long square1_7 = (a_0 + b_1);
        long square2_8 = ((b_1 + c_2) + d_3);
        long square3_9 = ((d_3 + e_4) + f_5);
        long square4_10 = (f_5 + g_6);
        return (((square1_7 == square2_8) && (square2_8 == square3_9)) && (square3_9 == square4_10));
    }

    static bool isUnique(long a_11, long b_12, long c_13, long d_14, long e_15, long f_16, long g_17) {
        long[] nums_18 = new long[]{a_11, b_12, c_13, d_14, e_15, f_16, g_17};
        long i_19 = 0;
        while ((i_19 < nums_18.Length)) {
            long j_20 = (i_19 + 1);
            while ((j_20 < nums_18.Length)) {
                if ((nums_18[(int)(i_19)] == nums_18[(int)(j_20)])) {
                    return false;
                }
                j_20 = (j_20 + 1);
            }
            i_19 = (i_19 + 1);
        };
        return true;
    }

    static Dictionary<string, object> getCombs(long low_21, long high_22, bool unique_23) {
        object[] valid_24 = new object[]{};
        long count_25 = 0;
        for (var b_26 = low_21; b_26 < (high_22 + 1); b_26++) {
            for (var c_27 = low_21; c_27 < (high_22 + 1); c_27++) {
                for (var d_28 = low_21; d_28 < (high_22 + 1); d_28++) {
                    long s_29 = ((b_26 + c_27) + d_28);
                    for (var e_30 = low_21; e_30 < (high_22 + 1); e_30++) {
                        for (var f_31 = low_21; f_31 < (high_22 + 1); f_31++) {
                            long a_32 = (s_29 - b_26);
                            long g_33 = (s_29 - f_31);
                            if (((a_32 < low_21) || (a_32 > high_22))) {
                                continue;
                            }
                            if (((g_33 < low_21) || (g_33 > high_22))) {
                                continue;
                            }
                            if ((((d_28 + e_30) + f_31) != s_29)) {
                                continue;
                            }
                            if (((f_31 + g_33) != s_29)) {
                                continue;
                            }
                            if (((!unique_23) || isUnique(a_32, b_26, c_27, d_28, e_30, f_31, g_33))) {
                                valid_24 = (Enumerable.ToArray(Enumerable.Append(Enumerable.ToArray(valid_24.Cast<object>()), new long[]{a_32, b_26, c_27, d_28, e_30, f_31, g_33})));
                                count_25 = (count_25 + 1);
                            }
                        }
                    }
                }
            }
        };
        return new Dictionary<string, object>{{"count", count_25}, {"list", valid_24}};
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            Console.WriteLine(_fmtTop(((((dynamic)r1_34)["count"]).ToString() + " unique solutions in 1 to 7")));
            Console.WriteLine(_fmtTop(((dynamic)r1_34)["list"]));
            Dictionary<string, object> r2_35 = getCombs(3, 9, true);
            Console.WriteLine(_fmtTop(((((dynamic)r2_35)["count"]).ToString() + " unique solutions in 3 to 9")));
            Console.WriteLine(_fmtTop(((dynamic)r2_35)["list"]));
            Dictionary<string, object> r3_36 = getCombs(0, 9, false);
            Console.WriteLine(_fmtTop(((((dynamic)r3_36)["count"]).ToString() + " non-unique solutions in 0 to 9")));
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
