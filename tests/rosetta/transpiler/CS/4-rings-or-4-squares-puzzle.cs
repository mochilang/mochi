// Generated by Mochi 0.10.39 on 2025-07-24 14:25 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

class Program {
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, object> r1 = getCombs(1, 7, true);
    static Dictionary<string, object> r2 = getCombs(3, 9, true);
    static Dictionary<string, object> r3 = getCombs(0, 9, false);
    static bool validComb(int a, int b, int c, int d, int e, int f, int g) {
        int square1 = (a + b);
        int square2 = ((b + c) + d);
        int square3 = ((d + e) + f);
        int square4 = (f + g);
        return (((square1 == square2) && (square2 == square3)) && (square3 == square4));
    }

    static bool isUnique(int a, int b, int c, int d, int e, int f, int g) {
        int[] nums = new int[]{a, b, c, d, e, f, g};
        int i = 0;
        while ((i < nums.Length)) {
            int j = (i + 1);
            while ((j < nums.Length)) {
                if ((nums[i] == nums[j])) {
                    return false;
                }
                j = (j + 1);
            }
            i = (i + 1);
        };
        return true;
    }

    static Dictionary<string, object> getCombs(int low, int high, bool unique) {
        object[] valid = new object[]{};
        int count = 0;
        for (var b_0 = low; b_0 < (high + 1); b_0++) {
            for (var c_1 = low; c_1 < (high + 1); c_1++) {
                for (var d_2 = low; d_2 < (high + 1); d_2++) {
                    var s = ((b_0 + c_1) + d_2);
                    for (var e_3 = low; e_3 < (high + 1); e_3++) {
                        for (var f_4 = low; f_4 < (high + 1); f_4++) {
                            var a = (s - b_0);
                            var g = (s - f_4);
                            if (((a < low) || (a > high))) {
                                continue;
                            }
                            if (((g < low) || (g > high))) {
                                continue;
                            }
                            if ((((d_2 + e_3) + f_4) != s)) {
                                continue;
                            }
                            if (((f_4 + g) != s)) {
                                continue;
                            }
                            if (((!unique) || isUnique(a, b_0, c_1, d_2, e_3, f_4, g))) {
                                valid = (valid.Append(new object[]{a, b_0, c_1, d_2, e_3, f_4, g}).ToArray());
                                count = (count + 1);
                            }
                        }
                    }
                }
            }
        };
        return new Dictionary<string, object>{{"count", count}, {"list", valid}};
    }

    static void Main() {
        Console.WriteLine(_fmtTop((((dynamic)r1)["count"].ToString() + " unique solutions in 1 to 7")));
        Console.WriteLine(_fmtTop(((dynamic)r1)["list"]));
        Console.WriteLine(_fmtTop((((dynamic)r2)["count"].ToString() + " unique solutions in 3 to 9")));
        Console.WriteLine(_fmtTop(((dynamic)r2)["list"]));
        Console.WriteLine(_fmtTop((((dynamic)r3)["count"].ToString() + " non-unique solutions in 0 to 9")));
    }
}
