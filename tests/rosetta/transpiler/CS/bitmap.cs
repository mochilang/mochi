// Generated by Mochi 0.10.52 on 2025-07-31 14:19 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
class Bitmap {
    public long cols;
    public long rows;
    public Pixel[][] px;
    public override string ToString() => $"Bitmap {{cols = {cols}, rows = {rows}, px = {px}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "true" : "false";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Pixel pixelFromRgb(long c_0) {
        long r_1 = (Convert.ToInt64((c_0 / 65536)) % 256);
        long g_2 = (Convert.ToInt64((c_0 / 256)) % 256);
        long b_3 = (c_0 % 256);
        return new Pixel{R = r_1, G = g_2, B = b_3};
    }

    static long rgbFromPixel(Pixel p_4) {
        return (((p_4.R * 65536) + (p_4.G * 256)) + p_4.B);
    }

    static Bitmap NewBitmap(long x_5, long y_6) {
        Pixel[][] data_7 = new Pixel[][]{};
        long row_8 = 0;
        while ((row_8 < y_6)) {
            Pixel[] r_9 = new Pixel[]{};
            long col_10 = 0;
            while ((col_10 < x_5)) {
                r_9 = (Enumerable.ToArray(Enumerable.Append(r_9, new Pixel{R = 0, G = 0, B = 0})));
                col_10 = (col_10 + 1);
            }
            data_7 = (Enumerable.ToArray(Enumerable.Append(data_7, r_9)));
            row_8 = (row_8 + 1);
        };
        return new Bitmap{cols = x_5, rows = y_6, px = data_7};
    }

    static Dictionary<string, long> Extent(Bitmap b_11) {
        return new Dictionary<string, long>{{"cols", b_11.cols}, {"rows", b_11.rows}};
    }

    static void Fill(Bitmap b_12, Pixel p_13) {
        long y_14 = 0;
        while ((y_14 < b_12.rows)) {
            long x_15 = 0;
            while ((x_15 < b_12.cols)) {
                Pixel[][] px_16 = b_12.px;
                Pixel[] row_17 = px_16[(int)(y_14)];
                row_17[x_15] = p_13;
                px_16[y_14] = row_17;
                b_12.px = px_16;
                x_15 = (x_15 + 1);
            }
            y_14 = (y_14 + 1);
        };
    }

    static void FillRgb(Bitmap b_18, long c_19) {
        Fill(b_18, pixelFromRgb(c_19));
    }

    static bool SetPx(Bitmap b_20, long x_21, long y_22, Pixel p_23) {
        if (((((x_21 < 0) || (x_21 >= b_20.cols)) || (y_22 < 0)) || (y_22 >= b_20.rows))) {
            return false;
        };
        Pixel[][] px_24 = b_20.px;
        Pixel[] row_25 = px_24[(int)(y_22)];
        row_25[x_21] = p_23;
        px_24[y_22] = row_25;
        b_20.px = px_24;
        return true;
    }

    static bool SetPxRgb(Bitmap b_26, long x_27, long y_28, long c_29) {
        return SetPx(b_26, x_27, y_28, pixelFromRgb(c_29));
    }

    static Dictionary<string, object> GetPx(Bitmap b_30, long x_31, long y_32) {
        if (((((x_31 < 0) || (x_31 >= b_30.cols)) || (y_32 < 0)) || (y_32 >= b_30.rows))) {
            return new Dictionary<string, object>{{"ok", false}};
        };
        Pixel[] row_33 = b_30.px[(int)(y_32)];
        return new Dictionary<string, object>{{"ok", true}, {"pixel", row_33[(int)(x_31)]}};
    }

    static Dictionary<string, object> GetPxRgb(Bitmap b_34, long x_35, long y_36) {
        Dictionary<string, object> r_37 = GetPx(b_34, x_35, y_36);
        if ((!Convert.ToBoolean(((dynamic)(r_37["ok"]))))) {
            return new Dictionary<string, object>{{"ok", false}};
        };
        return new Dictionary<string, object>{{"ok", true}, {"rgb", rgbFromPixel(((dynamic)(r_37["pixel"])))}};
    }

    static long ppmSize(Bitmap b_38) {
        string header_39 = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + _fmt(b_38.cols)) + " ") + _fmt(b_38.rows)) + "\n255\n");
        return (((dynamic)(header_39.Length)) + ((dynamic)(((3 * b_38.cols) * b_38.rows))));
    }

    static string pixelStr(Pixel p_40) {
        return (((((("{" + _fmt(p_40.R)) + " ") + _fmt(p_40.G)) + " ") + _fmt(p_40.B)) + "}");
    }

    static void main() {
        Bitmap bm_41 = NewBitmap(300, 240);
        FillRgb(bm_41, 16711680);
        SetPxRgb(bm_41, 10, 20, 255);
        SetPxRgb(bm_41, 20, 30, 0);
        SetPxRgb(bm_41, 30, 40, 1056816);
        Dictionary<string, object> c1_42 = GetPx(bm_41, 0, 0);
        Dictionary<string, object> c2_43 = GetPx(bm_41, 10, 20);
        Dictionary<string, object> c3_44 = GetPx(bm_41, 30, 40);
        Console.WriteLine(_fmtTop(((("Image size: " + _fmt(bm_41.cols)) + " Ã— ") + _fmt(bm_41.rows))));
        Console.WriteLine(_fmtTop((_fmt(ppmSize(bm_41)) + " bytes when encoded as PPM.")));
        if (((dynamic)(c1_42["ok"]))) {
            Console.WriteLine(_fmtTop(("Pixel at (0,0) is " + pixelStr(((dynamic)(c1_42["pixel"]))))));
        };
        if (((dynamic)(c2_43["ok"]))) {
            Console.WriteLine(_fmtTop(("Pixel at (10,20) is " + pixelStr(((dynamic)(c2_43["pixel"]))))));
        };
        if (((dynamic)(c3_44["ok"]))) {
            object p_45 = ((dynamic)(c3_44["pixel"]));
            long r16_46 = (((dynamic)(((dynamic)(p_45)).R)) * ((dynamic)(257)));
            long g16_47 = (((dynamic)(((dynamic)(p_45)).G)) * ((dynamic)(257)));
            long b16_48 = (((dynamic)(((dynamic)(p_45)).B)) * ((dynamic)(257)));
            Console.WriteLine(_fmtTop(((((("Pixel at (30,40) has R=" + _fmt(r16_46)) + ", G=") + _fmt(g16_47)) + ", B=") + _fmt(b16_48))));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
