// Generated by Mochi 0.10.40 on 2025-07-26 09:54 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Collections;

struct Pixel {
    public long R;
    public long G;
    public long B;
    public override string ToString() => $"Pixel {{R = {R}, G = {G}, B = {B}}}";
}
struct Bitmap {
    public long cols;
    public long rows;
    public Pixel[][] px;
    public override string ToString() => $"Bitmap {{cols = {cols}, rows = {rows}, px = {px}}}";
}
class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Pixel pixelFromRgb(long c) {
        long r_0 = (((dynamic)Convert.ToInt64((c / 65536))) % ((dynamic)256));
        long g_1 = (((dynamic)Convert.ToInt64((c / 256))) % ((dynamic)256));
        long b_2 = (c % 256);
        return new Pixel{R = r_0, G = g_1, B = b_2};
    }

    static long rgbFromPixel(Pixel p) {
        return (((p.R * 65536) + (p.G * 256)) + p.B);
    }

    static Bitmap NewBitmap(long x, long y) {
        Pixel[][] data_3 = new Pixel[][]{};
        long row_4 = 0;
        while ((row_4 < y)) {
            Pixel[] r_5 = new Pixel[]{};
            long col_6 = 0;
            while ((col_6 < x)) {
                r_5 = (Enumerable.ToArray(Enumerable.Append(r_5, new Pixel{R = 0, G = 0, B = 0})));
                col_6 = (col_6 + 1);
            }
            data_3 = (Enumerable.ToArray(Enumerable.Append(data_3, r_5)));
            row_4 = (row_4 + 1);
        };
        return new Bitmap{cols = x, rows = y, px = data_3};
    }

    static Dictionary<string, long> Extent(Bitmap b) {
        return new Dictionary<string, long>{{"cols", b.cols}, {"rows", b.rows}};
    }

    static void Fill(Bitmap b, Pixel p) {
        long y_7 = 0;
        while ((y_7 < b.rows)) {
            long x_8 = 0;
            while ((x_8 < b.cols)) {
                Pixel[][] px_9 = b.px;
                Pixel[] row_10 = px_9[(int)(y_7)];
                row_10[x_8] = p;
                px_9[y_7] = row_10;
                b.px = px_9;
                x_8 = (x_8 + 1);
            }
            y_7 = (y_7 + 1);
        };
    }

    static void FillRgb(Bitmap b, long c) {
        Fill(b, pixelFromRgb(c));
    }

    static bool SetPx(Bitmap b, long x, long y, Pixel p) {
        if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
            return false;
        };
        Pixel[][] px_11 = b.px;
        Pixel[] row_12 = px_11[(int)(y)];
        row_12[x] = p;
        px_11[y] = row_12;
        b.px = px_11;
        return true;
    }

    static bool SetPxRgb(Bitmap b, long x, long y, long c) {
        return SetPx(b, x, y, pixelFromRgb(c));
    }

    static Dictionary<string, object> GetPx(Bitmap b, long x, long y) {
        if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
            return new Dictionary<string, object>{{"ok", false}};
        };
        Pixel[] row_13 = b.px[(int)(y)];
        return new Dictionary<string, object>{{"ok", true}, {"pixel", row_13[(int)(x)]}};
    }

    static Dictionary<string, object> GetPxRgb(Bitmap b, long x, long y) {
        Dictionary<string, object> r_14 = GetPx(b, x, y);
        if ((!Convert.ToBoolean(((dynamic)(r_14["ok"]))))) {
            return new Dictionary<string, object>{{"ok", false}};
        };
        return new Dictionary<string, object>{{"ok", true}, {"rgb", rgbFromPixel(((dynamic)(r_14["pixel"])))}};
    }

    static long ppmSize(Bitmap b) {
        string header_15 = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + (b.cols).ToString()) + " ") + (b.rows).ToString()) + "\n255\n");
        return (((dynamic)header_15.Length) + ((dynamic)((3 * b.cols) * b.rows)));
    }

    static string pixelStr(Pixel p) {
        return (((((("{" + (p.R).ToString()) + " ") + (p.G).ToString()) + " ") + (p.B).ToString()) + "}");
    }

    static void main() {
        Bitmap bm_16 = NewBitmap(300, 240);
        FillRgb(bm_16, 16711680);
        SetPxRgb(bm_16, 10, 20, 255);
        SetPxRgb(bm_16, 20, 30, 0);
        SetPxRgb(bm_16, 30, 40, 1056816);
        Dictionary<string, object> c1_17 = GetPx(bm_16, 0, 0);
        Dictionary<string, object> c2_18 = GetPx(bm_16, 10, 20);
        Dictionary<string, object> c3_19 = GetPx(bm_16, 30, 40);
        Console.WriteLine(_fmtTop(((("Image size: " + (bm_16.cols).ToString()) + " Ã— ") + (bm_16.rows).ToString())));
        Console.WriteLine(_fmtTop(((ppmSize(bm_16)).ToString() + " bytes when encoded as PPM.")));
        if (((dynamic)(c1_17["ok"]))) {
            Console.WriteLine(_fmtTop(("Pixel at (0,0) is " + pixelStr(((dynamic)(c1_17["pixel"]))))));
        };
        if (((dynamic)(c2_18["ok"]))) {
            Console.WriteLine(_fmtTop(("Pixel at (10,20) is " + pixelStr(((dynamic)(c2_18["pixel"]))))));
        };
        if (((dynamic)(c3_19["ok"]))) {
            var p_20 = ((dynamic)(c3_19["pixel"]));
            long r16_21 = (((dynamic)p_20.R) * ((dynamic)257));
            long g16_22 = (((dynamic)p_20.G) * ((dynamic)257));
            long b16_23 = (((dynamic)p_20.B) * ((dynamic)257));
            Console.WriteLine(_fmtTop(((((("Pixel at (30,40) has R=" + (r16_21).ToString()) + ", G=") + (g16_22).ToString()) + ", B=") + (b16_23).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
