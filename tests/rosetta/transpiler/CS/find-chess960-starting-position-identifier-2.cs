// Generated by Mochi 0.10.50 on 2025-07-31 08:23 +0700
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Numerics;
using System.Collections;

class Program {
    static bool seededNow = false;
    static long nowSeed = 0;
    static long _now() {
        if (!seededNow) {
            var s = Environment.GetEnvironmentVariable("MOCHI_NOW_SEED");
            if (long.TryParse(s, out var v)) {
                nowSeed = v;
                seededNow = true;
            }
        }
        if (seededNow) {
            nowSeed = unchecked(nowSeed * 1664525 + 1013904223);
            nowSeed %= 9223372036854775783L;
            if (nowSeed < 0) nowSeed += 9223372036854775783L;
            return nowSeed;
        }
        return DateTime.UtcNow.Ticks / 100;
    }
    static long _mem() {
        return GC.GetTotalMemory(false);
    }
    static string _fmt(object v) {
        if (v is Array a) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return "[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IDictionary d) {
            var keys = new List<string>();
            foreach (var k in d.Keys) keys.Add(k.ToString());
            keys.Sort();
            var parts = new List<string>();
            foreach (var k in keys) parts.Add(k + ":" + _fmt(d[k]));
            return "map[" + string.Join(" ", parts) + "]";
        }
        if (v is System.Collections.IEnumerable e && !(v is string)) {
            var parts = new List<string>();
            foreach (var x in e) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        if (v is bool b) return b ? "1" : "0";
        return Convert.ToString(v);
    }
    static string _fmtTop(object v) {
        if (v is Array a && a.Length > 0 && a.GetValue(0) is Array) {
            var parts = new List<string>();
            foreach (var x in a) parts.Add(_fmt(x));
            return string.Join(" ", parts);
        }
        return _fmt(v);
    }
    static Dictionary<string, string> g2lMap_0 = new Dictionary<string, string>{{"♜", "R"}, {"♞", "N"}, {"♝", "B"}, {"♛", "Q"}, {"♚", "K"}, {"♖", "R"}, {"♘", "N"}, {"♗", "B"}, {"♕", "Q"}, {"♔", "K"}};
    static Dictionary<string, string> names_1 = new Dictionary<string, string>{{"R", "rook"}, {"N", "knight"}, {"B", "bishop"}, {"Q", "queen"}, {"K", "king"}};
    static Dictionary<string, long> ntable_2 = new Dictionary<string, long>{{"01", 0}, {"02", 1}, {"03", 2}, {"04", 3}, {"12", 4}, {"13", 5}, {"14", 6}, {"23", 7}, {"24", 8}, {"34", 9}};
    static long indexOf(string s_3, string sub_4) {
        long i_5 = 0;
        while ((i_5 <= (((dynamic)(s_3.Length)) - ((dynamic)(sub_4.Length))))) {
            if ((s_3.Substring((int)(i_5), (int)((((dynamic)(i_5)) + ((dynamic)(sub_4.Length))) - i_5)) == sub_4)) {
                return i_5;
            }
            i_5 = (i_5 + 1);
        };
        return -1;
    }

    static string removeChar(string s_6, string ch_7) {
        string res_8 = "";
        long i_9 = 0;
        while ((i_9 < s_6.Length)) {
            string c_10 = s_6.Substring((int)(i_9), (int)((i_9 + 1) - i_9));
            if ((c_10 != ch_7)) {
                res_8 = (res_8 + c_10);
            }
            i_9 = (i_9 + 1);
        };
        return res_8;
    }

    static string g2l(string pieces_11) {
        string res_12 = "";
        long i_13 = 0;
        while ((i_13 < pieces_11.Length)) {
            string ch_14 = pieces_11.Substring((int)(i_13), (int)((i_13 + 1) - i_13));
            res_12 = (res_12 + (g2lMap_0.ContainsKey(ch_14) ? g2lMap_0[ch_14] : ""));
            i_13 = (i_13 + 1);
        };
        return res_12;
    }

    static long countChar(string s_15, string ch_16) {
        long c_17 = 0;
        long i_18 = 0;
        while ((i_18 < s_15.Length)) {
            if ((s_15.Substring((int)(i_18), (int)((i_18 + 1) - i_18)) == ch_16)) {
                c_17 = (c_17 + 1);
            }
            i_18 = (i_18 + 1);
        };
        return c_17;
    }

    static long spid(string pieces_19) {
        pieces_19 = g2l(pieces_19);
        if ((pieces_19.Length != 8)) {
            return -1;
        };
        foreach (var one_20 in new string[]{"K", "Q"}) {
            if ((countChar(pieces_19, one_20) != 1)) {
                return -1;
            }
        };
        foreach (var two_21 in new string[]{"R", "N", "B"}) {
            if ((countChar(pieces_19, two_21) != 2)) {
                return -1;
            }
        };
        long r1_22 = indexOf(pieces_19, "R");
        long r2_23 = ((indexOf(pieces_19.Substring((int)((r1_22 + 1)), (int)(pieces_19.Length - (r1_22 + 1))), "R") + r1_22) + 1);
        long k_24 = indexOf(pieces_19, "K");
        if (((k_24 < r1_22) || (k_24 > r2_23))) {
            return -1;
        };
        long b1_25 = indexOf(pieces_19, "B");
        long b2_26 = ((indexOf(pieces_19.Substring((int)((b1_25 + 1)), (int)(pieces_19.Length - (b1_25 + 1))), "B") + b1_25) + 1);
        if ((((b2_26 - b1_25) % 2) == 0)) {
            return -1;
        };
        string piecesN_27 = removeChar(removeChar(pieces_19, "Q"), "B");
        long n1_28 = indexOf(piecesN_27, "N");
        long n2_29 = ((indexOf(piecesN_27.Substring((int)((n1_28 + 1)), (int)(piecesN_27.Length - (n1_28 + 1))), "N") + n1_28) + 1);
        long N_30 = (ntable_2.ContainsKey(((n1_28).ToString() + (n2_29).ToString())) ? ntable_2[((n1_28).ToString() + (n2_29).ToString())] : 0);
        string piecesQ_31 = removeChar(pieces_19, "B");
        long Q_32 = indexOf(piecesQ_31, "Q");
        long D_33 = indexOf("0246", (b1_25).ToString());
        long L_34 = indexOf("1357", (b2_26).ToString());
        if ((D_33 == (0 - 1))) {
            D_33 = indexOf("0246", (b2_26).ToString());
            L_34 = indexOf("1357", (b1_25).ToString());
        };
        return ((((96 * N_30) + (16 * Q_32)) + (4 * D_33)) + L_34);
    }

    static void main() {
        foreach (var pieces_35 in new string[]{"♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"}) {
            Console.WriteLine(_fmtTop(((((pieces_35 + " or ") + g2l(pieces_35)) + " has SP-ID of ") + (spid(pieces_35)).ToString())));
        };
    }

    static void Main() {
        {
            var __memStart = _mem();
            var __start = _now();
            main();
            var __end = _now();
            var __memEnd = _mem();
            var __dur = (__end - __start);
            var __memDiff = __memEnd - __memStart;
            Console.WriteLine(JsonSerializer.Serialize(new SortedDictionary<string, object>{{"name", "main"}, {"duration_us", __dur}, {"memory_bytes", __memDiff}}, new JsonSerializerOptions{ WriteIndented = true }));
        }
    }
}
