# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 10:59 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
n = 64
def pow2(k):
    v = 1
    i = 0
    while i < k:
        v = v * 2
        i = i + 1
    return v
def ruleBit(ruleNum, idx):
    r = ruleNum
    i = 0
    while i < idx:
        r = r // 2
        i = i + 1
    return r % 2
def evolve(state, ruleNum):
    out = []
    p = 0
    while p < 10:
        b = 0
        q = 7
        while q >= 0:
            st = state
            b = b + st[0] * pow2(q)
            next = []
            i = 0
            while i < n:
                lidx = i - 1
                if lidx < 0:
                    lidx = n - 1
                left = st[lidx]
                center = st[i]
                ridx = i + 1
                if ridx >= n:
                    ridx = 0
                right = st[ridx]
                index = left * 4 + center * 2 + right
                next = next + [ruleBit(ruleNum, index)]
                i = i + 1
            state = next
            q = q - 1
        out = out + [b]
        p = p + 1
    return out
init = []
i = 0
while i < n:
    init = init + [0]
    i = i + 1
init[0] = 1
bytes = evolve(init, 30)
print(str(bytes))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
