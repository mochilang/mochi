# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Window:
    x: int
    y: int
    w: int
    h: int
    maximized: bool
    iconified: bool
    visible: bool
    shifted: bool

def showState(w, label):
    print(label + ": pos=(" + str(w.x) + "," + str(w.y) + ") size=(" + str(w.w) + "x" + str(w.h) + ") max=" + str(w.maximized) + " icon=" + str(w.iconified) + " visible=" + str(w.visible))
def maximize(w):
    w = dataclasses.replace(w, maximized=True)
    w = dataclasses.replace(w, w=800)
    w = dataclasses.replace(w, h=600)
    return w
def unmaximize(w):
    w = dataclasses.replace(w, maximized=False)
    w = dataclasses.replace(w, w=640)
    w = dataclasses.replace(w, h=480)
    return w
def iconify(w):
    w = dataclasses.replace(w, iconified=True)
    w = dataclasses.replace(w, visible=False)
    return w
def deiconify(w):
    w = dataclasses.replace(w, iconified=False)
    w = dataclasses.replace(w, visible=True)
    return w
def hide(w):
    w = dataclasses.replace(w, visible=False)
    return w
def showWindow(w):
    w = dataclasses.replace(w, visible=True)
    return w
def move(w):
    if w.shifted:
        w = dataclasses.replace(w, x=w.x - 10)
        w = dataclasses.replace(w, y=w.y - 10)
    else:
        w = dataclasses.replace(w, x=w.x + 10)
        w = dataclasses.replace(w, y=w.y + 10)
    w = dataclasses.replace(w, shifted=not w.shifted)
    return w
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    win = Window(x=100, y=100, w=640, h=480, maximized=False, iconified=False, visible=True, shifted=False)
    showState(win, "Start")
    win = maximize(win)
    showState(win, "Maximize")
    win = unmaximize(win)
    showState(win, "Unmaximize")
    win = iconify(win)
    showState(win, "Iconify")
    win = deiconify(win)
    showState(win, "Deiconify")
    win = hide(win)
    showState(win, "Hide")
    win = showWindow(win)
    showState(win, "Show")
    win = move(win)
    showState(win, "Move")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
