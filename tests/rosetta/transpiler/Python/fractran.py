# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class StepResult:
    n: bigint
    ok: bool

def step(n, program):
    i = 0
    while i < len(program):
        num = program[i][0]
        den = program[i][1]
        if n % den == 0:
            n = (n // den) * num
            return StepResult(n=n, ok=True)
        i = i + 1
    return StepResult(n=n, ok=False)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    program = [[17, 91], [78, 85], [19, 51], [23, 38], [29, 33], [77, 29], [95, 23], [77, 19], [1, 17], [11, 13], [13, 11], [15, 14], [15, 2], [55, 1]]
    n = 2
    primes = 0
    count = 0
    limit = 1000000
    two = 2
    line = ""
    while primes < 20 and count < limit:
        res = step(n, program)
        n = res.n
        if not res.ok:
            break
        m = n
        pow = 0
        while m % two == 0:
            m = m // two
            pow = pow + 1
        if m == 1 and pow > 1:
            line = line + str(pow) + " "
            primes = primes + 1
        count = count + 1
    if len(line) > 0:
        print(line[0:len(line) - 1])
    else:
        print("")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
