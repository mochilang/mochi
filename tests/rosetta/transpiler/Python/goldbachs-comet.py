# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:08 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def sieve(limit):
    primes = []
    i = 0
    while i < limit:
        primes = primes + [True]
        i = i + 1
    primes[0] = False
    primes[1] = False
    p = 2
    while p * p < limit:
        if primes[p]:
            k = p * p
            while k < limit:
                primes[k] = False
                k = k + p
        p = p + 1
    return primes
def goldbachCount(primes, n):
    c = 0
    i = 1
    while i <= (n // 2):
        if primes[i] and primes[n - i]:
            c = c + 1
        i = i + 1
    return c
def pad(n):
    if n < 10:
        return "  " + str(n)
    if n < 100:
        return " " + str(n)
    return str(n)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    primes = sieve(1000)
    print("The first 100 Goldbach numbers:")
    line = ""
    n = 2
    count = 0
    while count < 100:
        v = goldbachCount(primes, 2 * n)
        line = line + pad(v) + " "
        count = count + 1
        n = n + 1
        if count % 10 == 0:
            print(line[0:len(line) - 1])
            line = ""
    val = goldbachCount(primes, 1000)
    print("\nThe 1,000th Goldbach number = " + str(val))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
