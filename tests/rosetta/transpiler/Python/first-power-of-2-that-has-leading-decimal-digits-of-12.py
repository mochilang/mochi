# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 01:07 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def commatize(n):
    s = str(n)
    i = len(s) % 3
    if i == 0:
        i = 3
    out = s[0:i]
    while i < len(s):
        out = out + "," + "".join(s[i:i + 3])
        i = i + 3
    return out
def p(L, n):
    Ls = str(L)
    digits = 1
    d = 1
    while d <= 18 - len(Ls):
        digits = digits * 10
        d = d + 1
    ten18 = 1000000000000000000
    count = 0
    i = 0
    probe = 1
    while True:
        probe = probe * 2
        i = i + 1
        if probe >= ten18:
            while True:
                if probe >= ten18:
                    probe = probe // 10
                if (probe // digits) == L:
                    count = count + 1
                    if count >= n:
                        count = count - 1
                        break
                probe = probe * 2
                i = i + 1
        ps = str(probe)
        le = len(Ls)
        if le > len(ps):
            le = len(ps)
        if ps[0:le] == Ls:
            count = count + 1
            if count >= n:
                break
    return i
params = [[12, 1], [12, 2], [123, 45]]
idx = 0
while idx < len(params):
    L = params[idx][0]
    m = params[idx][1]
    print("p(" + str(L) + ", " + str(m) + ") = " + commatize(p(L, m)))
    idx = idx + 1
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
