# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 14:09 +0700
import sys
sys.set_int_max_str_digits(0)

def trimLeftZeros(s):
    i = 0
    while i < len(s) and s[i:i + 1] == "0":
        i = i + 1
    return s[i:len(s)]
def btString(s):
    s = trimLeftZeros(s)
    b = []
    i = len(s) - 1
    while i >= 0:
        ch = s[i:i + 1]
        if ch == "+":
            b = b + [1]
        else:
            if ch == "0":
                b = b + [0]
            else:
                if ch == "-":
                    b = b + [0 - 1]
                else:
                    return {"bt": [], "ok": False}
        i = i - 1
    return {"bt": b, "ok": True}
def btToString(b):
    if len(b) == 0:
        return "0"
    r = ""
    i = len(b) - 1
    while i >= 0:
        d = b[i]
        if d == 0 - 1:
            r = r + "-"
        else:
            if d == 0:
                r = r + "0"
            else:
                r = r + "+"
        i = i - 1
    return r
def btInt(i):
    if i == 0:
        return []
    n = i
    b = []
    while n != 0:
        m = n % 3
        n = int(n // 3)
        if m == 2:
            m = 0 - 1
            n = n + 1
        else:
            if m == 0 - 2:
                m = 1
                n = n - 1
        b = b + [m]
    return b
def btToInt(b):
    r = 0
    pt = 1
    i = 0
    while i < len(b):
        r = r + b[i] * pt
        pt = pt * 3
        i = i + 1
    return r
def btNeg(b):
    r = []
    i = 0
    while i < len(b):
        r = r + [-b[i]]
        i = i + 1
    return r
def btAdd(a, b):
    return btInt(btToInt(a) + btToInt(b))
def btMul(a, b):
    return btInt(btToInt(a) * btToInt(b))
def padLeft(s, w):
    r = s
    while len(r) < w:
        r = " " + r
    return r
def show(label, b):
    l = padLeft(label, 7)
    bs = padLeft(btToString(b), 12)
    is_ = padLeft(str(btToInt(b)), 7)
    print(l + " " + bs + " " + is_)
def main():
    ares = btString("+-0++0+")
    a = ares["bt"]
    b = btInt(-436)
    cres = btString("+-++-")
    c = cres["bt"]
    show("a:", a)
    show("b:", b)
    show("c:", c)
    show("a(b-c):", btMul(a, btAdd(b, btNeg(c))))
main()
