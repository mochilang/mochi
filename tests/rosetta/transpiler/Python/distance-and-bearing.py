# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:54 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

PI = 3.141592653589793
def sinApprox(x):
    term = x
    sum = x
    n = 1
    while n <= 8:
        denom = float(((2 * n) * (2 * n + 1)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    return sum
def cosApprox(x):
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 8:
        denom = float(((2 * n - 1) * (2 * n)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    return sum
def atanApprox(x):
    if x > 1.0:
        return PI / 2.0 - x / (x * x + 0.28)
    if x < (-1.0):
        return -PI / 2.0 - x / (x * x + 0.28)
    return x / (1.0 + 0.28 * x * x)
def atan2Approx(y, x):
    if x > 0.0:
        r = atanApprox(y // x)
        return r
    if x < 0.0:
        if y >= 0.0:
            return atanApprox(y // x) + PI
        return atanApprox(y // x) - PI
    if y > 0.0:
        return PI / 2.0
    if y < 0.0:
        return -PI / 2.0
    return 0.0
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def rad(x):
    return x * PI / 180.0
def deg(x):
    return x * 180.0 / PI
def distance(lat1, lon1, lat2, lon2):
    phi1 = rad(lat1)
    phi2 = rad(lat2)
    dphi = rad(lat2 - lat1)
    dlambda = rad(lon2 - lon1)
    sdphi = sinApprox(dphi // 2)
    sdlambda = sinApprox(dlambda // 2)
    a = sdphi * sdphi + cosApprox(phi1) * cosApprox(phi2) * sdlambda * sdlambda
    c = 2 * atan2Approx(sqrtApprox(a), sqrtApprox(1 - a))
    return (6371.0 / 1.852) * c
def bearing(lat1, lon1, lat2, lon2):
    phi1 = rad(lat1)
    phi2 = rad(lat2)
    dl = rad(lon2 - lon1)
    y = sinApprox(dl) * cosApprox(phi2)
    x = cosApprox(phi1) * sinApprox(phi2) - sinApprox(phi1) * cosApprox(phi2) * cosApprox(dl)
    br = deg(atan2Approx(y, x))
    if br < 0:
        br = br + 360
    return br
@dataclass
class Airport:
    name: str
    country: str
    icao: str
    lat: float
    lon: float

airports = [Airport(name="Koksijde Air Base", country="Belgium", icao="EBFN", lat=51.090301513671875, lon=2.652780055999756), Airport(name="Ostend-Bruges International Airport", country="Belgium", icao="EBOS", lat=51.198898315399994, lon=2.8622200489), Airport(name="Kent International Airport", country="United Kingdom", icao="EGMH", lat=51.342201, lon=1.34611), Airport(name="Calais-Dunkerque Airport", country="France", icao="LFAC", lat=50.962100982666016, lon=1.954759955406189), Airport(name="Westkapelle heliport", country="Belgium", icao="EBKW", lat=51.32222366333, lon=3.2930560112), Airport(name="Lympne Airport", country="United Kingdom", icao="EGMK", lat=51.08, lon=1.013), Airport(name="Ursel Air Base", country="Belgium", icao="EBUL", lat=51.14419937133789, lon=3.475559949874878), Airport(name="Southend Airport", country="United Kingdom", icao="EGMC", lat=51.5713996887207, lon=0.6955559849739075), Airport(name="Merville-Calonne Airport", country="France", icao="LFQT", lat=50.61840057373047, lon=2.642240047454834), Airport(name="Wevelgem Airport", country="Belgium", icao="EBKT", lat=50.817199707, lon=3.20472002029), Airport(name="Midden-Zeeland Airport", country="Netherlands", icao="EHMZ", lat=51.5121994019, lon=3.73111009598), Airport(name="Lydd Airport", country="United Kingdom", icao="EGMD", lat=50.95610046386719, lon=0.9391670227050781), Airport(name="RAF Wattisham", country="United Kingdom", icao="EGUW", lat=52.1273002625, lon=0.956264019012), Airport(name="Beccles Airport", country="United Kingdom", icao="EGSM", lat=52.435298919699996, lon=1.6183300018300002), Airport(name="Lille/Marcq-en-Baroeul Airport", country="France", icao="LFQO", lat=50.687198638916016, lon=3.0755600929260254), Airport(name="Lashenden (Headcorn) Airfield", country="United Kingdom", icao="EGKH", lat=51.156898, lon=0.641667), Airport(name="Le Touquet-CÃ´te d'Opale Airport", country="France", icao="LFAT", lat=50.517398834228516, lon=1.6205899715423584), Airport(name="Rochester Airport", country="United Kingdom", icao="EGTO", lat=51.351898193359375, lon=0.5033329725265503), Airport(name="Lille-Lesquin Airport", country="France", icao="LFQQ", lat=50.563332, lon=3.086886), Airport(name="Thurrock Airfield", country="United Kingdom", icao="EGMT", lat=51.537505, lon=0.367634)]
def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def pow10(n):
    p = 1.0
    i = 0
    while i < n:
        p = p * 10.0
        i = i + 1
    return p
def round(x, n):
    m = pow10(n)
    return floor(x * m + 0.5) / m
def sortByDistance(xs):
    arr = xs
    i = 1
    while i < len(arr):
        j = i
        while j > 0 and arr[j - 1][0] > arr[j][0]:
            tmp = arr[j - 1]
            arr[j - 1] = arr[j]
            arr[j] = tmp
            j = j - 1
        i = i + 1
    return arr
def main():
    planeLat = 51.514669
    planeLon = 2.198581
    results = []
    for ap in airports:
        d = distance(planeLat, planeLon, ap.lat, ap.lon)
        b = bearing(planeLat, planeLon, ap.lat, ap.lon)
        results = results + [[d, b, ap]]
    results = sortByDistance(results)
    print("Distance Bearing ICAO Country               Airport")
    print("--------------------------------------------------------------")
    i = 0
    while i < len(results):
        r = results[i]
        ap = r[2]
        dist = r[0]
        bear = r[1]
        line = str(round(dist, 1)) + "\t" + str(round(bear, 0)) + "\t" + ap.icao + "\t" + ap.country + " " + ap.name
        print(line)
        i = i + 1
main()
