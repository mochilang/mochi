# Code generated by Mochi transpiler.
# Version 0.10.57, generated on 2025-08-04 17:02 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

def pow10(n):
    r = 1.0
    i = 0
    while i < n:
        r = r * 10.0
        i = i + 1
    return r
def formatFloat(f, prec):
    scale = pow10(prec)
    scaled = (f * scale) + 0.5
    n = (int(scaled))
    digits = str(n)
    while len(digits) <= prec:
        digits = "0" + digits
    intPart = digits[0:len(digits) - prec]
    fracPart = digits[len(digits) - prec:len(digits)]
    return intPart + "." + fracPart
def padLeft(s, w):
    res = ""
    n = w - len(s)
    while n > 0:
        res = res + " "
        n = n - 1
    return res + s
def repeat(ch, n):
    s = ""
    i = 0
    while i < n:
        s = s + ch
        i = i + 1
    return s
def toFloat(i):
    return float(i)
def newNode(name, weight, coverage):
    return {"name": name, "weight": weight, "coverage": coverage, "children": []}
def addChildren(n, nodes):
    cs = n.get("children")
    for node in nodes:
        cs = _append(cs, node)
    n["children"] = cs
def setCoverage(n, value):
    n["coverage"] = value
def computeCoverage(n):
    cs = n.get("children")
    if len(cs) == 0:
        return float(n.get("coverage"))
    v1 = 0.0
    v2 = 0
    for node in cs:
        m = node
        c = computeCoverage(m)
        v1 = v1 + toFloat(int(m.get("weight"))) * c
        v2 = v2 + (int(m.get("weight")))
    return v1 / toFloat(v2)
def spaces(n):
    return " " * n
def show(n, level):
    indent = level * 4
    name = str(n.get("name"))
    nl = len(name) + indent
    line = spaces(indent) + name
    line = line + spaces(32 - nl) + "|  "
    line = line + padLeft(str(int(n.get("weight"))), 3) + "   | "
    line = line + formatFloat(computeCoverage(n), 6) + " |"
    print(line)
    cs = n.get("children")
    for child in cs:
        show(child, level + 1)
house1 = newNode("house1", 40, 0.0)
house2 = newNode("house2", 60, 0.0)
h1_bedrooms = newNode("bedrooms", 1, 0.25)
h1_bathrooms = newNode("bathrooms", 1, 0.0)
h1_attic = newNode("attic", 1, 0.75)
h1_kitchen = newNode("kitchen", 1, 0.1)
h1_living_rooms = newNode("living_rooms", 1, 0.0)
h1_basement = newNode("basement", 1, 0.0)
h1_garage = newNode("garage", 1, 0.0)
h1_garden = newNode("garden", 1, 0.8)
h2_upstairs = newNode("upstairs", 1, 0.0)
h2_groundfloor = newNode("groundfloor", 1, 0.0)
h2_basement = newNode("basement", 1, 0.0)
h1_bathroom1 = newNode("bathroom1", 1, 0.5)
h1_bathroom2 = newNode("bathroom2", 1, 0.0)
h1_outside = newNode("outside_lavatory", 1, 1.0)
h1_lounge = newNode("lounge", 1, 0.0)
h1_dining = newNode("dining_room", 1, 0.0)
h1_conservatory = newNode("conservatory", 1, 0.0)
h1_playroom = newNode("playroom", 1, 1.0)
h2_bedrooms = newNode("bedrooms", 1, 0.0)
h2_bathroom = newNode("bathroom", 1, 0.0)
h2_toilet = newNode("toilet", 1, 0.0)
h2_attics = newNode("attics", 1, 0.6)
h2_kitchen = newNode("kitchen", 1, 0.0)
h2_living_rooms = newNode("living_rooms", 1, 0.0)
h2_wet_room = newNode("wet_room_&_toilet", 1, 0.0)
h2_garage = newNode("garage", 1, 0.0)
h2_garden = newNode("garden", 1, 0.9)
h2_hot_tub = newNode("hot_tub_suite", 1, 1.0)
h2_cellars = newNode("cellars", 1, 1.0)
h2_wine_cellar = newNode("wine_cellar", 1, 1.0)
h2_cinema = newNode("cinema", 1, 0.75)
h2_suite1 = newNode("suite_1", 1, 0.0)
h2_suite2 = newNode("suite_2", 1, 0.0)
h2_bedroom3 = newNode("bedroom_3", 1, 0.0)
h2_bedroom4 = newNode("bedroom_4", 1, 0.0)
h2_lounge = newNode("lounge", 1, 0.0)
h2_dining = newNode("dining_room", 1, 0.0)
h2_conservatory = newNode("conservatory", 1, 0.0)
h2_playroom = newNode("playroom", 1, 0.0)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        cleaning = newNode("cleaning", 1, 0.0)
        addChildren(h1_bathrooms, [h1_bathroom1, h1_bathroom2, h1_outside])
        addChildren(h1_living_rooms, [h1_lounge, h1_dining, h1_conservatory, h1_playroom])
        addChildren(house1, [h1_bedrooms, h1_bathrooms, h1_attic, h1_kitchen, h1_living_rooms, h1_basement, h1_garage, h1_garden])
        addChildren(h2_bedrooms, [h2_suite1, h2_suite2, h2_bedroom3, h2_bedroom4])
        addChildren(h2_upstairs, [h2_bedrooms, h2_bathroom, h2_toilet, h2_attics])
        addChildren(h2_living_rooms, [h2_lounge, h2_dining, h2_conservatory, h2_playroom])
        addChildren(h2_groundfloor, [h2_kitchen, h2_living_rooms, h2_wet_room, h2_garage, h2_garden, h2_hot_tub])
        addChildren(h2_basement, [h2_cellars, h2_wine_cellar, h2_cinema])
        addChildren(house2, [h2_upstairs, h2_groundfloor, h2_basement])
        addChildren(cleaning, [house1, house2])
        topCoverage = computeCoverage(cleaning)
        print("TOP COVERAGE = " + formatFloat(topCoverage, 6))
        print("")
        print("NAME HIERARCHY                 | WEIGHT | COVERAGE |")
        show(cleaning, 0)
        setCoverage(h2_cinema, 1.0)
        diff = computeCoverage(cleaning) - topCoverage
        print("")
        print("If the coverage of the Cinema node were increased from 0.75 to 1")
        print("the top level coverage would increase by " + formatFloat(diff, 6) + " to " + formatFloat(topCoverage + diff, 6))
        setCoverage(h2_cinema, 0.75)
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
