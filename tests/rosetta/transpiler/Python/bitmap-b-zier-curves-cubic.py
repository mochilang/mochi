# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 15:05 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict

import sys
sys.set_int_max_str_digits(0)

b3Seg = 30
@dataclass
class Pixel:
    r: int
    g: int
    b: int

def pixelFromRgb(rgb):
    r = int((rgb // 65536) % 256)
    g = int((rgb // 256) % 256)
    b = int(rgb % 256)
    return Pixel(r=r, g=g, b=b)
def newBitmap(cols, rows):
    d = []
    y = 0
    while y < rows:
        row = []
        x = 0
        while x < cols:
            row = row + [Pixel(r=0, g=0, b=0)]
            x = x + 1
        d = d + [row]
        y = y + 1
    return {"cols": cols, "rows": rows, "data": d}
def setPx(b, x, y, p):
    cols = int(b["cols"])
    rows = int(b["rows"])
    if x >= 0 and x < cols and y >= 0 and y < rows:
        b["data"][y][x] = p
def fill(b, p):
    cols = int(b["cols"])
    rows = int(b["rows"])
    y = 0
    while y < rows:
        x = 0
        while x < cols:
            b["data"][y][x] = p
            x = x + 1
        y = y + 1
def fillRgb(b, rgb):
    fill(b, pixelFromRgb(rgb))
def line(b, x0, y0, x1, y1, p):
    dx = x1 - x0
    if dx < 0:
        dx = -dx
    dy = y1 - y0
    if dy < 0:
        dy = -dy
    sx = -1
    if x0 < x1:
        sx = 1
    sy = -1
    if y0 < y1:
        sy = 1
    err = dx - dy
    while True:
        setPx(b, x0, y0, p)
        if x0 == x1 and y0 == y1:
            break
        e2 = 2 * err
        if e2 > 0 - dy:
            err = err - dy
            x0 = x0 + sx
        if e2 < dx:
            err = err + dx
            y0 = y0 + sy
def bezier3(b, x1, y1, x2, y2, x3, y3, x4, y4, p):
    px = []
    py = []
    i = 0
    while i <= b3Seg:
        px = px + [0]
        py = py + [0]
        i = i + 1
    fx1 = float(x1)
    fy1 = float(y1)
    fx2 = float(x2)
    fy2 = float(y2)
    fx3 = float(x3)
    fy3 = float(y3)
    fx4 = float(x4)
    fy4 = float(y4)
    i = 0
    while i <= b3Seg:
        d = float(i) // float(b3Seg)
        a = 1.0 - d
        bcoef = a * a
        ccoef = d * d
        a2 = a * bcoef
        b2 = 3.0 * bcoef * d
        c2 = 3.0 * a * ccoef
        d2 = ccoef * d
        px[i] = int(a2 * fx1 + b2 * fx2 + c2 * fx3 + d2 * fx4)
        py[i] = int(a2 * fy1 + b2 * fy2 + c2 * fy3 + d2 * fy4)
        i = i + 1
    x0 = px[0]
    y0 = py[0]
    i = 1
    while i <= b3Seg:
        x = px[i]
        y = py[i]
        line(b, x0, y0, x, y, p)
        x0 = x
        y0 = y
        i = i + 1
b = newBitmap(400, 300)
fillRgb(b, 16773055)
bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615))
