# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def generatePrimes(n):
    primes = [2]
    cand = 3
    while len(primes) < n:
        isP = True
        i = 0
        while i < len(primes):
            p = primes[i]
            if p * p > cand:
                break
            if cand % p == 0:
                isP = False
                break
            i = i + 1
        if isP:
            primes = primes + [cand]
        cand = cand + 2
    return primes
def primeFactors(n, primes):
    factors = []
    num = n
    i = 0
    while i < len(primes) and primes[i] * primes[i] <= num:
        p = primes[i]
        while num % p == 0:
            factors = factors + [p]
            num = num / p
        i = i + 1
    if num > 1:
        factors = factors + [num]
    return factors
prevCats = {}
def cat(p, primes):
    if p in prevCats:
        return prevCats.get(p)
    pf = primeFactors(p + 1, primes)
    all23 = True
    for f in pf:
        if f != 2 and f != 3:
            all23 = False
            break
    if all23:
        prevCats[p] = 1
        return 1
    if p > 2:
        unique = []
        last = -1
        for f in pf:
            if f != last:
                unique = unique + [f]
                last = f
        pf = unique
    c = 2
    while c <= 11:
        ok = True
        for f in pf:
            if cat(f, primes) >= c:
                ok = False
                break
        if ok:
            prevCats[p] = c
            return c
        c = c + 1
    prevCats[p] = 12
    return 12
def padLeft(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    primes = generatePrimes(1000)
    es = []
    for _ in range(0, 12):
        es = es + [[]]
    print("First 200 primes:\n")
    idx = 0
    while idx < 200:
        p = primes[idx]
        c = cat(p, primes)
        es[c - 1] = es[c - 1] + [p]
        idx = idx + 1
    c = 1
    while c <= 6:
        if len(es[c - 1]) > 0:
            print("Category " + str(c) + ":")
            print(str(es[c - 1]))
            print("")
        c = c + 1
    print("First thousand primes:\n")
    while idx < 1000:
        p = primes[idx]
        cv = cat(p, primes)
        es[cv - 1] = es[cv - 1] + [p]
        idx = idx + 1
    c = 1
    while c <= 12:
        e = es[c - 1]
        if len(e) > 0:
            line = "Category " + padLeft(c, 2) + ": First = " + padLeft(e[0], 7) + "  Last = " + padLeft(e[len(e) - 1], 8) + "  Count = " + padLeft(len(e), 6)
            print(line)
        c = c + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
