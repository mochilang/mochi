# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 00:47 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    if n % 3 == 0:
        return n == 3
    d = 5
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
        if n % d == 0:
            return False
        d = d + 4
    return True
def countPrimeFactors(n):
    if n == 1:
        return 0
    if isPrime(n):
        return 1
    count = 0
    f = 2
    while True:
        if n % f == 0:
            count = count + 1
            n = n // f
            if n == 1:
                return count
            if isPrime(n):
                f = n
        else:
            if f >= 3:
                f = f + 2
            else:
                f = 3
    return count
def pad4(n):
    s = str(n)
    while len(s) < 4:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    max = 120
    print("The attractive numbers up to and including " + str(max) + " are:")
    count = 0
    line = ""
    lineCount = 0
    i = 1
    while i <= max:
        c = countPrimeFactors(i)
        if isPrime(c):
            line = line + pad4(i)
            count = count + 1
            lineCount = lineCount + 1
            if lineCount == 20:
                print(line)
                line = ""
                lineCount = 0
        i = i + 1
    if lineCount > 0:
        print(line)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
