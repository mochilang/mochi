# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
rows = 20
cols = 30
p = 0.01
f = 0.001
def repeat(ch, n):
    s = ""
    i = 0
    while i < n:
        s = s + ch
        i = i + 1
    return s
def chance(prob):
    threshold = int(prob * 1000.0)
    return _now() % 1000 < threshold
def newBoard():
    b = []
    r = 0
    while r < rows:
        row = []
        c = 0
        while c < cols:
            if _now() % 2 == 0:
                row = row + ["T"]
            else:
                row = row + [" "]
            c = c + 1
        b = b + [row]
        r = r + 1
    return b
def step(src):
    dst = []
    r = 0
    while r < rows:
        row = []
        c = 0
        while c < cols:
            cell = src[r][c]
            next = cell
            if cell == "#":
                next = " "
            else:
                if cell == "T":
                    burning = False
                    dr = -1
                    while dr <= 1:
                        dc = -1
                        while dc <= 1:
                            if dr != 0 or dc != 0:
                                rr = r + dr
                                cc = c + dc
                                if rr >= 0 and rr < rows and cc >= 0 and cc < cols:
                                    if src[rr][cc] == "#":
                                        burning = True
                            dc = dc + 1
                        dr = dr + 1
                    if burning or chance(f):
                        next = "#"
                else:
                    if chance(p):
                        next = "T"
            row = row + [next]
            c = c + 1
        dst = dst + [row]
        r = r + 1
    return dst
def printBoard(b):
    print("__" * cols + "\n\n")
    r = 0
    while r < rows:
        line = ""
        c = 0
        while c < cols:
            cell = b[r][c]
            if cell == " ":
                line = line + "  "
            else:
                line = line + " " + cell
            c = c + 1
        print(line + "\n")
        r = r + 1
board = newBoard()
printBoard(board)
board = step(board)
printBoard(board)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
