# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:22 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pow(base, exp):
    result = 1
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def ackermann2(m, n):
    if m == 0:
        return n + 1
    if m == 1:
        return n + 2
    if m == 2:
        return 2 * n + 3
    if m == 3:
        return 8 * pow(2, n) - 3
    if n == 0:
        return ackermann2(m - 1, 1)
    return ackermann2(m - 1, ackermann2(m, n - 1))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("A(0, 0) = " + str(ackermann2(0, 0)))
    print("A(1, 2) = " + str(ackermann2(1, 2)))
    print("A(2, 4) = " + str(ackermann2(2, 4)))
    print("A(3, 4) = " + str(ackermann2(3, 4)))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
