# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def _lambda0():
    draw.get(1)()
    draw.get(4)()
def _lambda1():
    draw.get(1)()
    draw.get(6)()
def _lambda2():
    draw.get(2)()
    draw.get(6)()
def _lambda3():
    draw.get(1)()
    draw.get(8)()
def _lambda4():
    draw.get(10)()
    draw.get(40)()
def _lambda5():
    draw.get(10)()
    draw.get(60)()
def _lambda6():
    draw.get(20)()
    draw.get(60)()
def _lambda7():
    draw.get(10)()
    draw.get(80)()
def _lambda8():
    draw.get(100)()
    draw.get(400)()
def _lambda9():
    draw.get(100)()
    draw.get(600)()
def _lambda10():
    draw.get(200)()
    draw.get(600)()
def _lambda11():
    draw.get(100)()
    draw.get(800)()
def _lambda12():
    draw.get(1000)()
    draw.get(4000)()
def _lambda13():
    draw.get(1000)()
    draw.get(6000)()
def _lambda14():
    draw.get(2000)()
    draw.get(6000)()
def _lambda15():
    draw.get(1000)()
    draw.get(8000)()
_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
n = []
def initN():
    global n
    i = 0
    while i < 15:
        row = []
        j = 0
        while j < 11:
            row = row + [" "]
            j = j + 1
        row[5] = "x"
        n = n + [row]
        i = i + 1
def horiz(c1, c2, r):
    c = c1
    while c <= c2:
        n[r][c] = "x"
        c = c + 1
def verti(r1, r2, c):
    r = r1
    while r <= r2:
        n[r][c] = "x"
        r = r + 1
def diagd(c1, c2, r):
    c = c1
    while c <= c2:
        n[r + c - c1][c] = "x"
        c = c + 1
def diagu(c1, c2, r):
    c = c1
    while c <= c2:
        n[r - c + c1][c] = "x"
        c = c + 1
draw = {}
def initDraw():
    draw[1] = lambda : horiz(6, 10, 0)
    draw[2] = lambda : horiz(6, 10, 4)
    draw[3] = lambda : diagd(6, 10, 0)
    draw[4] = lambda : diagu(6, 10, 4)
    draw[5] = _lambda0
    draw[6] = lambda : verti(0, 4, 10)
    draw[7] = _lambda1
    draw[8] = _lambda2
    draw[9] = _lambda3
    draw[10] = lambda : horiz(0, 4, 0)
    draw[20] = lambda : horiz(0, 4, 4)
    draw[30] = lambda : diagu(0, 4, 4)
    draw[40] = lambda : diagd(0, 4, 0)
    draw[50] = _lambda4
    draw[60] = lambda : verti(0, 4, 0)
    draw[70] = _lambda5
    draw[80] = _lambda6
    draw[90] = _lambda7
    draw[100] = lambda : horiz(6, 10, 14)
    draw[200] = lambda : horiz(6, 10, 10)
    draw[300] = lambda : diagu(6, 10, 14)
    draw[400] = lambda : diagd(6, 10, 10)
    draw[500] = _lambda8
    draw[600] = lambda : verti(10, 14, 10)
    draw[700] = _lambda9
    draw[800] = _lambda10
    draw[900] = _lambda11
    draw[1000] = lambda : horiz(0, 4, 14)
    draw[2000] = lambda : horiz(0, 4, 10)
    draw[3000] = lambda : diagd(0, 4, 10)
    draw[4000] = lambda : diagu(0, 4, 14)
    draw[5000] = _lambda12
    draw[6000] = lambda : verti(10, 14, 0)
    draw[7000] = _lambda13
    draw[8000] = _lambda14
    draw[9000] = _lambda15
def printNumeral():
    i = 0
    while i < 15:
        line = ""
        j = 0
        while j < 11:
            line = line + n[i][j] + " "
            j = j + 1
        print(line)
        i = i + 1
    print("")
initDraw()
numbers = [0, 1, 20, 300, 4000, 5555, 6789, 9999]
for number in numbers:
    initN()
    print(str(number) + ":")
    num = number
    thousands = num // 1000
    num = num % 1000
    hundreds = num // 100
    num = num % 100
    tens = num // 10
    ones = num % 10
    if thousands > 0:
        draw.get(thousands * 1000)()
    if hundreds > 0:
        draw.get(hundreds * 100)()
    if tens > 0:
        draw.get(tens * 10)()
    if ones > 0:
        draw.get(ones)()
    printNumeral()
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
