# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 11:14 +0000
import sys
sys.set_int_max_str_digits(0)

n = []
def initN():
    global n
    i = 0
    while i < 15:
        row = []
        j = 0
        while j < 11:
            row = row + [" "]
            j = j + 1
        row[5] = "x"
        n = n + [row]
        i = i + 1
def horiz(c1, c2, r):
    c = c1
    while c <= c2:
        n[r][c] = "x"
        c = c + 1
def verti(r1, r2, c):
    r = r1
    while r <= r2:
        n[r][c] = "x"
        r = r + 1
def diagd(c1, c2, r):
    c = c1
    while c <= c2:
        n[r + c - c1][c] = "x"
        c = c + 1
def diagu(c1, c2, r):
    c = c1
    while c <= c2:
        n[r - c + c1][c] = "x"
        c = c + 1
draw = {}
def initDraw():
    draw[1] = lambda : horiz(6, 10, 0)
    draw[2] = lambda : horiz(6, 10, 4)
    draw[3] = lambda : diagd(6, 10, 0)
    draw[4] = lambda : diagu(6, 10, 4)
    draw[5] = lambda : [draw[1](), draw[4]()]
    draw[6] = lambda : verti(0, 4, 10)
    draw[7] = lambda : [draw[1](), draw[6]()]
    draw[8] = lambda : [draw[2](), draw[6]()]
    draw[9] = lambda : [draw[1](), draw[8]()]
    draw[10] = lambda : horiz(0, 4, 0)
    draw[20] = lambda : horiz(0, 4, 4)
    draw[30] = lambda : diagu(0, 4, 4)
    draw[40] = lambda : diagd(0, 4, 0)
    draw[50] = lambda : [draw[10](), draw[40]()]
    draw[60] = lambda : verti(0, 4, 0)
    draw[70] = lambda : [draw[10](), draw[60]()]
    draw[80] = lambda : [draw[20](), draw[60]()]
    draw[90] = lambda : [draw[10](), draw[80]()]
    draw[100] = lambda : horiz(6, 10, 14)
    draw[200] = lambda : horiz(6, 10, 10)
    draw[300] = lambda : diagu(6, 10, 14)
    draw[400] = lambda : diagd(6, 10, 10)
    draw[500] = lambda : [draw[100](), draw[400]()]
    draw[600] = lambda : verti(10, 14, 10)
    draw[700] = lambda : [draw[100](), draw[600]()]
    draw[800] = lambda : [draw[200](), draw[600]()]
    draw[900] = lambda : [draw[100](), draw[800]()]
    draw[1000] = lambda : horiz(0, 4, 14)
    draw[2000] = lambda : horiz(0, 4, 10)
    draw[3000] = lambda : diagd(0, 4, 10)
    draw[4000] = lambda : diagu(0, 4, 14)
    draw[5000] = lambda : [draw[1000](), draw[4000]()]
    draw[6000] = lambda : verti(10, 14, 0)
    draw[7000] = lambda : [draw[1000](), draw[6000]()]
    draw[8000] = lambda : [draw[2000](), draw[6000]()]
    draw[9000] = lambda : [draw[1000](), draw[8000]()]
def printNumeral():
    i = 0
    while i < 15:
        line = ""
        j = 0
        while j < 11:
            line = line + n[i][j] + " "
            j = j + 1
        print(line)
        i = i + 1
    print("")
initDraw()
numbers = [0, 1, 20, 300, 4000, 5555, 6789, 9999]
for number in numbers:
    initN()
    print(str(number) + ":")
    num = number
    thousands = num // 1000
    num = num % 1000
    hundreds = num // 100
    num = num % 100
    tens = num // 10
    ones = num % 10
    if thousands > 0:
        draw[thousands * 1000]()
    if hundreds > 0:
        draw[hundreds * 100]()
    if tens > 0:
        draw[tens * 10]()
    if ones > 0:
        draw[ones]()
    printNumeral()
