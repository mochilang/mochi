# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def initGrid(size):
    g = []
    y = 0
    while y < size:
        row = []
        x = 0
        while x < size:
            row = row + [" "]
            x = x + 1
        g = g + [row]
        y = y + 1
    return g
def set(g, x, y):
    if x >= 0 and x < len(g[0]) and y >= 0 and y < len(g):
        g[y][x] = "#"
def circle(r):
    size = r * 2 + 1
    g = initGrid(size)
    x = r
    y = 0
    err = 1 - r
    while y <= x:
        set(g, r + x, r + y)
        set(g, r + y, r + x)
        set(g, r - x, r + y)
        set(g, r - y, r + x)
        set(g, r - x, r - y)
        set(g, r - y, r - x)
        set(g, r + x, r - y)
        set(g, r + y, r - x)
        y = y + 1
        if err < 0:
            err = err + 2 * y + 1
        else:
            x = x - 1
            err = err + 2 * (y - x) + 1
    return g
def trimRight(row):
    end = len(row)
    while end > 0 and row[end - 1] == " ":
        end = end - 1
    s = ""
    i = 0
    while i < end:
        s = s + row[i]
        i = i + 1
    return s
g = circle(10)
for row in g:
    print(trimRight(row))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
