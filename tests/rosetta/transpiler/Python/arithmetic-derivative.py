# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:40 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def primeFactors(n):
    factors = []
    x = n
    while x % 2 == 0:
        factors = factors + [2]
        x = int((x // 2))
    p = 3
    while p * p <= x:
        while x % p == 0:
            factors = factors + [p]
            x = int((x // p))
        p = p + 2
    if x > 1:
        factors = factors + [x]
    return factors
def repeat(ch, n):
    s = ""
    i = 0
    while i < n:
        s = s + ch
        i = i + 1
    return s
def D(n):
    if n < 0.0:
        return -D(-n)
    if n < 2.0:
        return 0.0
    factors = []
    if n < 1e+19:
        factors = primeFactors(int((n)))
    else:
        g = int((n / 100.0))
        factors = primeFactors(g)
        factors = factors + [2]
        factors = factors + [2]
        factors = factors + [5]
        factors = factors + [5]
    c = len(factors)
    if c == 1:
        return 1.0
    if c == 2:
        return float((factors[0] + factors[1]))
    d = n / (float(factors[0]))
    return D(d) * (float(factors[0])) + d
def pad(n):
    s = str(n)
    while len(s) < 4:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    vals = []
    n = -99
    while n < 101:
        vals = vals + [int((D(float(n))))]
        n = n + 1
    i = 0
    while i < len(vals):
        line = ""
        j = 0
        while j < 10:
            line = line + pad(vals[i + j])
            if j < 9:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 10
    pow = 1.0
    m = 1
    while m < 21:
        pow = pow * 10.0
        exp = str(m)
        if len(exp) < 2:
            exp = exp + " "
        res = str(m) + repeat("0", m - 1)
        print("D(10^" + exp + ") / 7 = " + res)
        m = m + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
