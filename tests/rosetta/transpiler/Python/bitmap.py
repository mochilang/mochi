# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Pixel:
    R: int
    G: int
    B: int

def pixelFromRgb(c):
    r = (int((c // 65536))) % 256
    g = (int((c // 256))) % 256
    b = c % 256
    return Pixel(R=r, G=g, B=b)
def rgbFromPixel(p):
    return p.R * 65536 + p.G * 256 + p.B
@dataclass
class Bitmap:
    cols: int
    rows: int
    px: [[Pixel]]

def NewBitmap(x, y):
    data = []
    row = 0
    while row < y:
        r = []
        col = 0
        while col < x:
            r = r + [Pixel(R=0, G=0, B=0)]
            col = col + 1
        data = data + [r]
        row = row + 1
    return Bitmap(cols=x, rows=y, px=data)
def Extent(b):
    return {"cols": b.cols, "rows": b.rows}
def Fill(b, p):
    y = 0
    while y < b.rows:
        x = 0
        while x < b.cols:
            px = b.px
            row = px[y]
            row[x] = p
            px[y] = row
            b = dataclasses.replace(b, px=px)
            x = x + 1
        y = y + 1
def FillRgb(b, c):
    Fill(b, pixelFromRgb(c))
def SetPx(b, x, y, p):
    if x < 0 or x >= b.cols or y < 0 or y >= b.rows:
        return False
    px = b.px
    row = px[y]
    row[x] = p
    px[y] = row
    b = dataclasses.replace(b, px=px)
    return True
def SetPxRgb(b, x, y, c):
    return SetPx(b, x, y, pixelFromRgb(c))
def GetPx(b, x, y):
    if x < 0 or x >= b.cols or y < 0 or y >= b.rows:
        return {"ok": False}
    row = b.px[y]
    return {"ok": True, "pixel": row[x]}
def GetPxRgb(b, x, y):
    r = GetPx(b, x, y)
    if not r["ok"]:
        return {"ok": False}
    return {"ok": True, "rgb": rgbFromPixel(r["pixel"])}
def ppmSize(b):
    header = "P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + str(b.cols) + " " + str(b.rows) + "\n255\n"
    return len(header) + 3 * b.cols * b.rows
def pixelStr(p):
    return "{" + str(p.R) + " " + str(p.G) + " " + str(p.B) + "}"
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    bm = NewBitmap(300, 240)
    FillRgb(bm, 16711680)
    SetPxRgb(bm, 10, 20, 255)
    SetPxRgb(bm, 20, 30, 0)
    SetPxRgb(bm, 30, 40, 1056816)
    c1 = GetPx(bm, 0, 0)
    c2 = GetPx(bm, 10, 20)
    c3 = GetPx(bm, 30, 40)
    print("Image size: " + str(bm.cols) + " Ã— " + str(bm.rows))
    print(str(ppmSize(bm)) + " bytes when encoded as PPM.")
    if c1["ok"]:
        print("Pixel at (0,0) is " + pixelStr(c1["pixel"]))
    if c2["ok"]:
        print("Pixel at (10,20) is " + pixelStr(c2["pixel"]))
    if c3["ok"]:
        p = c3["pixel"]
        r16 = p.R * 257
        g16 = p.G * 257
        b16 = p.B * 257
        print("Pixel at (30,40) has R=" + str(r16) + ", G=" + str(g16) + ", B=" + str(b16))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
