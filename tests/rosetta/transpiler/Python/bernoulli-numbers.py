# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
from fractions import Fraction
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def bernoulli(n):
    a = []
    m = 0
    while m <= n:
        a = a + [Fraction(1) / (Fraction((m + 1)))]
        j = m
        while j >= 1:
            a[j - 1] = (Fraction(j)) * (a[j - 1] - a[j])
            j = j - 1
        m = m + 1
    return a[0]
def padStart(s, width, pad):
    out = s
    while len(out) < width:
        out = pad + out
    return out
for i in range(0, 61):
    b = bernoulli(i)
    if b.numerator != 0:
        numStr = str(b.numerator)
        denStr = str(b.denominator)
        print("B(" + str(i).rjust(2, " ") + ") =" + numStr.rjust(45, " ") + "/" + denStr)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
