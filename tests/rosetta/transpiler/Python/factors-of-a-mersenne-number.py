# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 16:50 +0700
import sys
sys.set_int_max_str_digits(0)

qlimit = 50000
def powf(base, exp):
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    g = x
    i = 0
    while i < 20:
        g = (g + x // g) / 2.0
        i = i + 1
    return g
def modPow(base, exp, mod):
    result = 1 % mod
    b = base % mod
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = (result * b) % mod
        b = (b * b) % mod
        e = e // 2
    return result
def mtest(m):
    if m < 4:
        print(str(m) + " < 4.  M" + str(m) + " not tested.")
        return
    flimit = sqrtApprox(powf(2.0, m) - 1.0)
    qlast = 0
    if flimit < qlimit:
        qlast = int(flimit)
    else:
        qlast = qlimit
    composite = []
    i = 0
    while i <= qlast:
        composite = composite + [False]
        i = i + 1
    sq = int(sqrtApprox(float(qlast)))
    q = 3
    while True:
        if q <= sq:
            j = q * q
            while j <= qlast:
                composite[j] = True
                j = j + q
        q8 = q % 8
        if (q8 == 1 or q8 == 7) and modPow(2, m, q) == 1:
            print("M" + str(m) + " has factor " + str(q))
            return
        while True:
            q = q + 2
            if q > qlast:
                print("No factors of M" + str(m) + " found.")
                return
            if not composite[q]:
                break
def main():
    mtest(31)
    mtest(67)
main()
