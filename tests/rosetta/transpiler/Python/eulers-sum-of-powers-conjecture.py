# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def eulerSum():
    pow5 = []
    i = 0
    while i < 250:
        pow5 = pow5 + [i * i * i * i * i]
        i = i + 1
    sums = {}
    x2 = 2
    while x2 < 250:
        x3 = 1
        while x3 < x2:
            s = pow5[x2] + pow5[x3]
            if not (s in sums):
                sums[s] = [x2, x3]
            x3 = x3 + 1
        x2 = x2 + 1
    x0 = 4
    while x0 < 250:
        x1 = 3
        while x1 < x0:
            y = x0 + 1
            while y < 250:
                rem = pow5[y] - pow5[x0] - pow5[x1]
                if rem in sums:
                    pair = sums[rem]
                    a = pair[0]
                    b = pair[1]
                    if x1 > a and a > b:
                        sys.exit([x0, x1, a, b, y])
                y = y + 1
            x1 = x1 + 1
        x0 = x0 + 1
    sys.exit([0, 0, 0, 0, 0])
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    r = eulerSum()
    print(str(r[0]) + " " + str(r[1]) + " " + str(r[2]) + " " + str(r[3]) + " " + str(r[4]))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
