# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class SumCarry:
    s: bool
    c: bool

@dataclass
class Add4Result:
    v: bool
    s3: bool
    s2: bool
    s1: bool
    s0: bool

def xor(a, b):
    return (a and (not b)) or ((not a) and b)
def ha(a, b):
    return SumCarry(s=xor(a, b), c=a and b)
def fa(a, b, c0):
    r1 = ha(a, c0)
    r2 = ha(r1.s, b)
    return SumCarry(s=r2.s, c=r1.c or r2.c)
def add4(a3, a2, a1, a0, b3, b2, b1, b0):
    r0 = fa(a0, b0, False)
    r1 = fa(a1, b1, r0.c)
    r2 = fa(a2, b2, r1.c)
    r3 = fa(a3, b3, r2.c)
    return Add4Result(v=r3.c, s3=r3.s, s2=r2.s, s1=r1.s, s0=r0.s)
def b2i(b):
    if b:
        return 1
    return 0
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    r = add4(True, False, True, False, True, False, False, True)
    print(str(b2i(r.v)) + " " + str(b2i(r.s3)) + " " + str(b2i(r.s2)) + " " + str(b2i(r.s1)) + " " + str(b2i(r.s0)))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
