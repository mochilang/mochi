# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:14 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

small = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
smallOrd = ["zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"]
tensOrd = ["", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"]
def say(n):
    if n < 20:
        return small[n]
    if n < 100:
        res = tens[n // 10]
        m = n % 10
        if m != 0:
            res = res + "-" + small[m]
        return res
    if n < 1000:
        res = say(n // 100) + " hundred"
        m = n % 100
        if m != 0:
            res = res + " " + say(m)
        return res
    if n < 1000000:
        res = say(n // 1000) + " thousand"
        m = n % 1000
        if m != 0:
            res = res + " " + say(m)
        return res
    res = say(n // 1000000) + " million"
    m = n % 1000000
    if m != 0:
        res = res + " " + say(m)
    return res
def sayOrdinal(n):
    if n < 20:
        return smallOrd[n]
    if n < 100:
        if n % 10 == 0:
            return tensOrd[n // 10]
        return say(n - n % 10) + "-" + smallOrd[n % 10]
    if n < 1000:
        if n % 100 == 0:
            return say(n // 100) + " hundredth"
        return say(n // 100) + " hundred " + sayOrdinal(n % 100)
    if n < 1000000:
        if n % 1000 == 0:
            return say(n // 1000) + " thousandth"
        return say(n // 1000) + " thousand " + sayOrdinal(n % 1000)
    if n % 1000000 == 0:
        return say(n // 1000000) + " millionth"
    return say(n // 1000000) + " million " + sayOrdinal(n % 1000000)
def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = parts + [cur]
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + "".join(s[i:i + 1])
            i = i + 1
    parts = parts + [cur]
    return parts
def countLetters(s):
    cnt = 0
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch >= "A" and ch <= "Z" or ch >= "a" and ch <= "z":
            cnt = cnt + 1
        i = i + 1
    return cnt
words = ["Four", "is", "the", "number", "of", "letters", "in", "the", "first", "word", "of", "this", "sentence,"]
idx = 0
def wordLen(w):
    global idx, words
    while len(words) < w:
        idx = idx + 1
        n = countLetters(words[idx])
        parts = say(n).split(" ")
        j = 0
        while j < len(parts):
            words = words + [parts[j]]
            j = j + 1
        words = words + ["in"]
        words = words + ["the"]
        parts = sayOrdinal(idx + 1) + ",".split(" ")
        j = 0
        while j < len(parts):
            words = words + [parts[j]]
            j = j + 1
    word = words[w - 1]
    return [word, countLetters(word)]
def totalLength():
    tot = 0
    i = 0
    while i < len(words):
        tot = tot + len(words[i])
        if i < len(words) - 1:
            tot = tot + 1
        i = i + 1
    return tot
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("The lengths of the first 201 words are:")
    line = ""
    i = 1
    while i <= 201:
        if i % 25 == 1:
            if i != 1:
                print(line)
            line = pad(i, 3) + ":"
        r = wordLen(i)
        n = r[1]
        line = line + " " + pad(n, 2)
        i = i + 1
    print(line)
    print("Length of sentence so far: " + str(totalLength()))
    for n in [1000, 10000, 100000, 1000000, 10000000]:
        r = wordLen(n)
        w = r[0]
        l = r[1]
        print("Word " + pad(n, 8) + " is \"" + w + "\", with " + str(l) + " letters.  Length of sentence so far: " + str(totalLength()))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
