# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:05 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def _lambda0(i):
    if i == 0:
        return 1.0
    return 0.0
def _lambda1(a, b, n):
    s = 0.0
    k = 0
    while k <= n:
        s = s + extract(a, k) * extract(b, n - k)
        k = k + 1
    return s
def _lambda2(a, b, q, n):
    b0 = extract(b, 0)
    if b0 == 0.0:
        return (0.0 / 0.0)
    s = extract(a, n)
    k = 1
    while k <= n:
        s = s - extract(b, k) * extract(q, n - k)
        k = k + 1
    return s // b0
def _lambda3(a, n):
    if n == 0:
        return 0.0
    return extract(a, n - 1) / (float(n))
def _lambda4(cos, n):
    if n == 0:
        return 0.0
    return extract(cos, n - 1) / (float(n))
@dataclass
class Fps:
    coeffs: [float]
    compute: Callable[[int], float]

def newFps(fn):
    return Fps(coeffs=[], compute=fn)
def extract(f, n):
    while len(f.coeffs) <= n:
        idx = len(f.coeffs)
        v = f.compute(idx)
        f = dataclasses.replace(f, coeffs=f.coeffs + [v])
    return f.coeffs[n]
def one():
    return newFps(_lambda0)
def add(a, b):
    return newFps(lambda n: extract(a, n) + extract(b, n))
def sub(a, b):
    return newFps(lambda n: extract(a, n) - extract(b, n))
def mul(a, b):
    return newFps(lambda n: _lambda1(a, b, n))
def div(a, b):
    q = newFps(lambda n: 0.0)
    q = dataclasses.replace(q, compute=lambda n: _lambda2(a, b, q, n))
    return q
def differentiate(a):
    return newFps(lambda n: (float((n + 1))) * extract(a, n + 1))
def integrate(a):
    return newFps(lambda n: _lambda3(a, n))
@dataclass
class Pair:
    sin: Fps
    cos: Fps

def sinCos():
    sin = newFps(lambda n: 0.0)
    cos = sub(one(), integrate(sin))
    sin = dataclasses.replace(sin, compute=lambda n: _lambda4(cos, n))
    return Pair(sin=sin, cos=cos)
def floorf(x):
    y = int(x)
    return float(y)
def fmtF5(x):
    y = floorf(x * 100000.0 + 0.5) / 100000.0
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + ".00000"
    else:
        decs = len(s) - dot - 1
        if decs > 5:
            s = s[0:dot + 6]
        else:
            while decs < 5:
                s = s + "0"
                decs = decs + 1
    return s
def padFloat5(x, width):
    s = fmtF5(x)
    while len(s) < width:
        s = " " + s
    return s
def partialSeries(f):
    out = ""
    i = 0
    while i < 6:
        out = out + " " + padFloat5(extract(f, i), 8) + " "
        i = i + 1
    return out
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    p = sinCos()
    print("sin:" + partialSeries(p.sin))
    print("cos:" + partialSeries(p.cos))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
