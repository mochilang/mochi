# Code generated by Mochi transpiler.
# Version 0.10.57, generated on 2025-08-04 16:12 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

EVEN_ROOT = 0
ODD_ROOT = 1
def newNode(len):
    return {"length": len, "edges": {}, "suffix": 0}
def eertree(s):
    tree = []
    tree = tree + [{"length": 0, "suffix": ODD_ROOT, "edges": {}}]
    tree = tree + [{"length": -1, "suffix": ODD_ROOT, "edges": {}}]
    suffix = ODD_ROOT
    i = 0
    while i < len(s):
        c = s[i:i + 1]
        n = suffix
        k = 0
        while True:
            k = int(tree[n].get("length"))
            b = i - k - 1
            if b >= 0 and s[b:b + 1] == c:
                break
            n = int(tree[n].get("suffix"))
        edges = tree[n].get("edges")
        if c in edges:
            suffix = edges[c]
            i = i + 1
            continue
        suffix = len(tree)
        tree = tree + [newNode(k + 2)]
        edges[c] = suffix
        tree[n]["edges"] = edges
        if (int(tree[suffix].get("length"))) == 1:
            tree[suffix]["suffix"] = 0
            i = i + 1
            continue
        while True:
            n = int(tree[n].get("suffix"))
            b = i - (int(tree[n].get("length"))) - 1
            if b >= 0 and s[b:b + 1] == c:
                break
        en = tree[n].get("edges")
        tree[suffix]["suffix"] = en[c]
        i = i + 1
    return tree
def child(tree, idx, p, acc):
    edges = tree[idx].get("edges")
    for ch in edges:
        nxt = edges[ch]
        pal = ch + p + ch
        acc = acc + [pal]
        acc = child(tree, nxt, pal, acc)
    return acc
def subPalindromes(tree):
    res = []
    res = child(tree, EVEN_ROOT, "", res)
    oEdges = tree[ODD_ROOT].get("edges")
    for ch in oEdges:
        res = res + [ch]
        res = child(tree, oEdges[ch], ch, res)
    return res
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        tree = eertree("eertree")
        subs = subPalindromes(tree)
        print(str(subs))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
