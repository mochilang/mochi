# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 23:57 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    if n % 3 == 0:
        return n == 3
    d = 5
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
        if n % d == 0:
            return False
        d = d + 4
    return True
def sumDigits(n):
    s = 0
    x = n
    while x > 0:
        s = s + x % 10
        x = int((x // 10))
    return s
def pad(n):
    if n < 10:
        return "  " + str(n)
    if n < 100:
        return " " + str(n)
    return str(n)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("Additive primes less than 500:")
    count = 0
    line = ""
    lineCount = 0
    i = 2
    while i < 500:
        if isPrime(i) and isPrime(sumDigits(i)):
            count = count + 1
            line = line + pad(i) + "  "
            lineCount = lineCount + 1
            if lineCount == 10:
                print(line[0:len(line) - 2])
                line = ""
                lineCount = 0
        if i > 2:
            i = i + 2
        else:
            i = i + 1
    if lineCount > 0:
        print(line[0:len(line) - 2])
    print(str(count) + " additive primes found.")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
