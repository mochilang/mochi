# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 18:10 +0700
import sys
sys.set_int_max_str_digits(0)

def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    if n % 3 == 0:
        return n == 3
    d = 5
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
        if n % d == 0:
            return False
        d = d + 4
    return True
def bigTrim(a):
    n = len(a)
    while n > 1 and a[n - 1] == 0:
        a = a[0:n - 1]
        n = n - 1
    return a
def bigFromInt(x):
    if x == 0:
        return [0]
    digits = []
    n = x
    while n > 0:
        digits = digits + [n % 10]
        n = n // 10
    return digits
def bigMulSmall(a, m):
    if m == 0:
        return [0]
    res = []
    carry = 0
    i = 0
    while i < len(a):
        prod = a[i] * m + carry
        res = res + [prod % 10]
        carry = prod // 10
        i = i + 1
    while carry > 0:
        res = res + [carry % 10]
        carry = carry // 10
    return bigTrim(res)
def bigToString(a):
    s = ""
    i = len(a) - 1
    while i >= 0:
        s = s + str(a[i])
        i = i - 1
    return s
def pow2(k):
    r = 1
    i = 0
    while i < k:
        r = r * 2
        i = i + 1
    return r
def ccFactors(n, m):
    p = 6 * m + 1
    if not isPrime(p):
        return []
    prod = bigFromInt(p)
    p = 12 * m + 1
    if not isPrime(p):
        return []
    prod = bigMulSmall(prod, p)
    i = 1
    while i <= n - 2:
        p = (pow2(i) * 9 * m) + 1
        if not isPrime(p):
            return []
        prod = bigMulSmall(prod, p)
        i = i + 1
    return prod
def ccNumbers(start, end):
    n = start
    while n <= end:
        m = 1
        if n > 4:
            m = pow2(n - 4)
        while True:
            num = ccFactors(n, m)
            if len(num) > 0:
                print("a(" + str(n) + ") = " + bigToString(num))
                break
            if n <= 4:
                m = m + 1
            else:
                m = m + pow2(n - 4)
        n = n + 1
ccNumbers(3, 9)
