# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 00:20 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

PI = 3.141592653589793
@dataclass
class Complex:
    re: float
    im: float

def sinApprox(x):
    term = x
    sum = x
    n = 1
    while n <= 10:
        denom = float(((2 * n) * (2 * n + 1)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    return sum
def cosApprox(x):
    term = 1.0
    sum = 1.0
    n = 1
    while n <= 10:
        denom = float(((2 * n - 1) * (2 * n)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    return sum
def cis(x):
    return Complex(re=cosApprox(x), im=sinApprox(x))
def add(a, b):
    return Complex(re=a.re + b.re, im=a.im + b.im)
def cstr(a):
    s = "(" + str(a.re)
    if a.im >= 0:
        s = s + "+" + str(a.im) + "i)"
    else:
        s = s + str(a.im) + "i)"
    return s
def main():
    result = add(cis(PI), Complex(re=1.0, im=0.0))
    print(cstr(result))
main()
