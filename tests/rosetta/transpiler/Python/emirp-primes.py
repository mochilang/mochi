# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 10:59 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
    return True
def revInt(n):
    r = 0
    t = n
    while t > 0:
        r = r * 10 + t % 10
        t = int((t // 10))
    return r
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    emirps = []
    n = 2
    while len(emirps) < 10000:
        if isPrime(n):
            r = revInt(n)
            if r != n and isPrime(r):
                emirps = emirps + [n]
        n = n + 1
    line = "   ["
    i = 0
    while i < 20:
        line = line + str(emirps[i])
        if i < 19:
            line = line + ", "
        i = i + 1
    line = line + "]"
    print("First 20:")
    print(line)
    line = "  ["
    for e in emirps:
        if e >= 8000:
            break
        if e >= 7700:
            line = line + str(e) + ", "
    line = line + "]"
    print("Between 7700 and 8000:")
    print(line)
    print("10000th:")
    print("   [" + str(emirps[9999]) + "]")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
