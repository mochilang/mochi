# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:40 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pfacSum(i):
    sum = 0
    p = 1
    while p <= i / 2:
        if i % p == 0:
            sum = sum + p
        p = p + 1
    return sum
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    sums = []
    i = 0
    while i < 20000:
        sums = sums + [0]
        i = i + 1
    i = 1
    while i < 20000:
        sums[i] = pfacSum(i)
        i = i + 1
    print("The amicable pairs below 20,000 are:")
    n = 2
    while n < 19999:
        m = sums[n]
        if m > n and m < 20000 and n == sums[m]:
            print("  " + pad(n, 5) + " and " + pad(m, 5))
        n = n + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
