# Code generated by Mochi transpiler.
# Version 0.10.57, generated on 2025-08-04 15:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class TinyInt:
    value: int
    def Add(self, t2):
        return NewTinyInt(self.value + t2.value)
    def Sub(self, t2):
        return NewTinyInt(self.value - t2.value)
    def Mul(self, t2):
        return NewTinyInt(self.value * t2.value)
    def Div(self, t2):
        return NewTinyInt(self.value // t2.value)
    def Rem(self, t2):
        return NewTinyInt(self.value % t2.value)
    def Inc(self):
        return self.Add(NewTinyInt(1))
    def Dec(self):
        return self.Sub(NewTinyInt(1))

def NewTinyInt(i):
    if i < 1:
        i = 1
    else:
        if i > 10:
            i = 10
    return TinyInt(value=i)
def main():
    t1 = NewTinyInt(6)
    t2 = NewTinyInt(3)
    print("t1      = " + str(t1.value))
    print("t2      = " + str(t2.value))
    print("t1 + t2 = " + str(t1.Add(t2).value))
    print("t1 - t2 = " + str(t1.Sub(t2).value))
    print("t1 * t2 = " + str(t1.Mul(t2).value))
    print("t1 / t2 = " + str(t1.Div(t2).value))
    print("t1 % t2 = " + str(t1.Rem(t2).value))
    print("t1 + 1  = " + str(t1.Inc().value))
    print("t1 - 1  = " + str(t1.Dec().value))
main()
