# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-25 00:22 +0700
import sys
sys.set_int_max_str_digits(0)

months = {"January": 1, "February": 2, "March": 3, "April": 4, "May": 5, "June": 6, "July": 7, "August": 8, "September": 9, "October": 10, "November": 11, "December": 12}
def isLeap(y):
    if y % 400 == 0:
        return True
    if y % 100 == 0:
        return False
    return y % 4 == 0
def daysInMonth(y, m):
    feb = (29 if isLeap(y) else 28)
    lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return lengths[m - 1]
def daysBeforeYear(y):
    days = 0
    yy = 1970
    while yy < y:
        days = days + 365
        if isLeap(yy):
            days = days + 1
        yy = yy + 1
    return days
def daysBeforeMonth(y, m):
    days = 0
    mm = 1
    while mm < m:
        days = days + daysInMonth(y, mm)
        mm = mm + 1
    return days
def epochSeconds(y, m, d, h, mi):
    days = daysBeforeYear(y) + daysBeforeMonth(y, m) + (d - 1)
    return days * 86400 + h * 3600 + mi * 60
def fromEpoch(sec):
    days = sec // 86400
    rem = sec % 86400
    y = 1970
    while True:
        dy = (366 if isLeap(y) else 365)
        if days >= dy:
            days = days - dy
            y = y + 1
        else:
            break
    m = 1
    while True:
        dim = daysInMonth(y, m)
        if days >= dim:
            days = days - dim
            m = m + 1
        else:
            break
    d = days + 1
    h = rem // 3600
    mi = (rem % 3600) // 60
    return [y, m, d, h, mi]
def pad2(n):
    if n < 10:
        return "0" + str(n)
    return str(n)
def absInt(n):
    if n < 0:
        return -n
    return n
def formatDate(parts, offset, abbr):
    y = parts[0]
    m = parts[1]
    d = parts[2]
    h = parts[3]
    mi = parts[4]
    sign = "+"
    if offset < 0:
        sign = "-"
    off = absInt(offset) // 60
    offh = pad2(off // 60)
    offm = pad2(off % 60)
    return str(y) + "-" + pad2(m) + "-" + pad2(d) + " " + pad2(h) + ":" + pad2(mi) + ":00 " + sign + offh + offm + " " + abbr
def parseIntStr(str):
    i = 0
    neg = False
    if len(str) > 0 and str[0:1] == "-":
        neg = True
        i = 1
    n = 0
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    while i < len(str):
        n = n * 10 + digits[str[i:i + 1]]
        i = i + 1
    if neg:
        n = -n
    return n
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return -1
def parseTime(s):
    c = s.find(":")
    h = parseIntStr(s[0:c])
    mi = parseIntStr(s[c + 1:c + 3])
    ampm = s[len(s) - 2:len(s)]
    hh = h
    if ampm == "pm" and h != 12:
        hh = h + 12
    if ampm == "am" and h == 12:
        hh = 0
    return [hh, mi]
def main():
    input = "March 7 2009 7:30pm EST"
    print("Input:              " + input)
    parts = []
    cur = ""
    i = 0
    while i < len(input):
        ch = input[i:i + 1]
        if ch == " ":
            if len(cur) > 0:
                parts = parts + [cur]
                cur = ""
        else:
            cur = cur + ch
        i = i + 1
    if len(cur) > 0:
        parts = parts + [cur]
    month = months.get(parts[0], 0)
    day = parseIntStr(parts[1])
    year = parseIntStr(parts[2])
    tm = parseTime(parts[3])
    hour = tm[0]
    minute = tm[1]
    tz = parts[4]
    zoneOffsets = {"EST": -18000, "EDT": -14400, "MST": -25200}
    local = epochSeconds(year, month, day, hour, minute)
    utc = local - zoneOffsets[tz]
    utc12 = utc + 43200
    startDST = epochSeconds(2009, 3, 8, 7, 0)
    offEast = -18000
    if utc12 >= startDST:
        offEast = -14400
    eastParts = fromEpoch(utc12 + offEast)
    eastAbbr = "EST"
    if offEast == (-14400):
        eastAbbr = "EDT"
    print("+12 hrs:            " + formatDate(eastParts, offEast, eastAbbr))
    offAZ = -25200
    azParts = fromEpoch(utc12 + offAZ)
    print("+12 hrs in Arizona: " + formatDate(azParts, offAZ, "MST"))
main()
