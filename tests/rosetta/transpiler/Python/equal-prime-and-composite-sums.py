# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 00:14 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def commatize(n):
    s = str(n)
    i = len(s) - 3
    while i >= 1:
        s = "".join(s[0:i]) + "," + "".join(s[i:len(s)])
        i = i - 3
    return s
def primeSieve(n):
    sieve = []
    i = 0
    while i <= n:
        sieve = sieve + [False]
        i = i + 1
    sieve[0] = True
    sieve[1] = True
    p = 2
    while p * p <= n:
        if not sieve[p]:
            m = p * p
            while m <= n:
                sieve[m] = True
                m = m + p
        p = p + 1
    return sieve
def search(xs, target):
    low = 0
    high = len(xs)
    while low < high:
        mid = (low + high) // 2
        if xs[mid] < target:
            low = mid + 1
        else:
            high = mid
    return low
def main():
    limit = 45000
    compMap = primeSieve(limit)
    compSums = []
    primeSums = []
    csum = 0
    psum = 0
    i = 2
    while i <= limit:
        if compMap[i]:
            csum = csum + i
            compSums = compSums + [csum]
        else:
            psum = psum + i
            primeSums = primeSums + [psum]
        i = i + 1
    print("Sum        | Prime Index | Composite Index")
    print("------------------------------------------")
    idx = 0
    while idx < len(primeSums):
        s = primeSums[idx]
        j = search(compSums, s)
        if j < len(compSums) and compSums[j] == s:
            sumStr = commatize(s).rjust(10, " ")
            piStr = commatize(idx + 1).rjust(11, " ")
            ciStr = commatize(j + 1).rjust(15, " ")
            print(sumStr + " | " + piStr + " | " + ciStr)
        idx = idx + 1
main()
