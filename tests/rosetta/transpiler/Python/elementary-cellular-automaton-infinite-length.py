# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 10:59 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pow2(n):
    p = 1
    i = 0
    while i < n:
        p = p * 2
        i = i + 1
    return p
def btoi(b):
    if b:
        return 1
    return 0
def addNoCells(cells):
    l = "O"
    r = "O"
    if cells[0:1] == "O":
        l = "."
    if cells[len(cells) - 1:len(cells)] == "O":
        r = "."
    cells = l + cells + r
    cells = l + cells + r
    return cells
def step(cells, ruleVal):
    newCells = ""
    i = 0
    while i < len(cells) - 2:
        bin = 0
        b = 2
        n = i
        while n < i + 3:
            bin = bin + btoi(cells[n:n + 1] == "O") * pow2(b)
            b = b - 1
            n = n + 1
        a = "."
        if ((ruleVal / pow2(bin)) % 2 == 1):
            a = "O"
        newCells = newCells + a
        i = i + 1
    return newCells
def repeat(ch, n):
    s = ""
    i = 0
    while i < n:
        s = s + ch
        i = i + 1
    return s
def evolve(l, ruleVal):
    print(" Rule #" + str(ruleVal) + ":")
    cells = "O"
    x = 0
    while x < l:
        cells = addNoCells(cells)
        width = 40 + (len(cells) // 2)
        spaces = repeat(" ", width - len(cells))
        print(spaces + cells)
        cells = step(cells, ruleVal)
        x = x + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    for r in [90, 30]:
        evolve(25, r)
        print("")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
