# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:14 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def shuffle(xs):
    arr = xs
    i = 99
    while i > 0:
        j = _now() % (i + 1)
        tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        i = i - 1
    return arr
def doTrials(trials, np, strategy):
    pardoned = 0
    t = 0
    while t < trials:
        drawers = []
        i = 0
        while i < 100:
            drawers = drawers + [i]
            i = i + 1
        drawers = shuffle(drawers)
        p = 0
        success = True
        while p < np:
            found = False
            if strategy == "optimal":
                prev = p
                d = 0
                while d < 50:
                    this = drawers[prev]
                    if this == p:
                        found = True
                        break
                    prev = this
                    d = d + 1
            else:
                opened = []
                k = 0
                while k < 100:
                    opened = opened + [False]
                    k = k + 1
                d = 0
                while d < 50:
                    n = _now() % 100
                    while opened[n]:
                        n = _now() % 100
                    opened[n] = True
                    if drawers[n] == p:
                        found = True
                        break
                    d = d + 1
            if not found:
                success = False
                break
            p = p + 1
        if success:
            pardoned = pardoned + 1
        t = t + 1
    rf = (float(pardoned)) / (float(trials)) * 100.0
    print("  strategy = " + strategy + "  pardoned = " + str(pardoned) + " relative frequency = " + str(rf) + "%")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    trials = 1000
    for np in [10, 100]:
        print("Results from " + str(trials) + " trials with " + str(np) + " prisoners:\n")
        for strat in ["random", "optimal"]:
            doTrials(trials, np, strat)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
