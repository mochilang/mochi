# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:27 +0700
import sys
sys.set_int_max_str_digits(0)

def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def parseIntStr(str):
    i = 0
    neg = False
    if len(str) > 0 and str[0] == "-":
        neg = True
        i = 1
    n = 0
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    while i < len(str):
        n = n * 10 + digits[str[i]]
        i = i + 1
    if neg:
        n = -n
    return n
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = upper.find(ch)
    if idx >= 0:
        return 65 + idx
    idx = lower.find(ch)
    if idx >= 0:
        return 97 + idx
    if ch >= "0" and ch <= "9":
        return 48 + parseIntStr(ch)
    if ch == "+":
        return 43
    if ch == "/":
        return 47
    if ch == " ":
        return 32
    if ch == "=":
        return 61
    return 0
def chr(n):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 and n < 91:
        return upper[n - 65:n - 64]
    if n >= 97 and n < 123:
        return lower[n - 97:n - 96]
    if n >= 48 and n < 58:
        digits = "0123456789"
        return digits[n - 48:n - 47]
    if n == 43:
        return "+"
    if n == 47:
        return "/"
    if n == 32:
        return " "
    if n == 61:
        return "="
    return "?"
def toBinary(n, bits):
    b = ""
    val = n
    i = 0
    while i < bits:
        b = str(val % 2) + b
        val = int((val // 2))
        i = i + 1
    return b
def binToInt(bits):
    n = 0
    i = 0
    while i < len(bits):
        n = n * 2 + parseIntStr(bits[i:i + 1])
        i = i + 1
    return n
def base64Encode(text):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    bin = ""
    for ch in text:
        bin = bin + toBinary(ord(ch), 8)
    while len(bin) % 6 != 0:
        bin = bin + "0"
    out = ""
    i = 0
    while i < len(bin):
        chunk = bin[i:i + 6]
        val = binToInt(chunk)
        out = out + "".join(alphabet[val:val + 1])
        i = i + 6
    pad = (3 - (len(text) % 3)) % 3
    if pad == 1:
        out = "".join(out[0:len(out) - 1]) + "="
    if pad == 2:
        out = "".join(out[0:len(out) - 2]) + "=="
    return out
def base64Decode(enc):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    bin = ""
    i = 0
    while i < len(enc):
        ch = enc[i]
        if ch == "=":
            break
        idx = alphabet.find(ch)
        bin = bin + toBinary(idx, 6)
        i = i + 1
    out = ""
    i = 0
    while i + 8 <= len(bin):
        chunk = bin[i:i + 8]
        val = binToInt(chunk)
        out = out + chr(val)
        i = i + 8
    return out
msg = "Rosetta Code Base64 decode data task"
print("Original : " + msg)
enc = base64Encode(msg)
print("\nEncoded  : " + enc)
dec = base64Decode(enc)
print("\nDecoded  : " + dec)
