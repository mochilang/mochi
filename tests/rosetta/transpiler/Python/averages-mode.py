# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 16:52 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
arr1 = [2, 7, 1, 8, 2]
counts1 = {}
keys1 = []
i = 0
while i < len(arr1):
    v = arr1[i]
    if v in counts1:
        counts1[v] = counts1.get(v) + 1
    else:
        counts1[v] = 1
        keys1 = keys1 + [v]
    i = i + 1
max1 = 0
i = 0
while i < len(keys1):
    k = keys1[i]
    c = counts1.get(k)
    if c > max1:
        max1 = c
    i = i + 1
modes1 = []
i = 0
while i < len(keys1):
    k = keys1[i]
    if counts1.get(k) == max1:
        modes1 = modes1 + [k]
    i = i + 1
print(str(modes1))
arr2 = [2, 7, 1, 8, 2, 8]
counts2 = {}
keys2 = []
i = 0
while i < len(arr2):
    v = arr2[i]
    if v in counts2:
        counts2[v] = counts2.get(v) + 1
    else:
        counts2[v] = 1
        keys2 = keys2 + [v]
    i = i + 1
max2 = 0
i = 0
while i < len(keys2):
    k = keys2[i]
    c = counts2.get(k)
    if c > max2:
        max2 = c
    i = i + 1
modes2 = []
i = 0
while i < len(keys2):
    k = keys2[i]
    if counts2.get(k) == max2:
        modes2 = modes2 + [k]
    i = i + 1
print(str(modes2))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
