# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def square_to_maps(square):
    emap = {}
    dmap = {}
    x = 0
    while x < len(square):
        row = square[x]
        y = 0
        while y < len(row):
            ch = row[y]
            emap[ch] = [x, y]
            dmap[str(x) + "," + str(y)] = ch
            y = y + 1
        x = x + 1
    return {"e": emap, "d": dmap}
def remove_space(text, emap):
    s = text.upper()
    out = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch != " " and ch in emap:
            out = out + ch
        i = i + 1
    return out
def encrypt(text, emap, dmap):
    text = remove_space(text, emap)
    row0 = []
    row1 = []
    i = 0
    while i < len(text):
        ch = text[i:i + 1]
        xy = emap[ch]
        row0 = row0 + [xy[0]]
        row1 = row1 + [xy[1]]
        i = i + 1
    for v in row1:
        row0 = row0 + [v]
    res = ""
    j = 0
    while j < len(row0):
        key = str(row0[j]) + "," + str(row0[j + 1])
        res = res + dmap[key]
        j = j + 2
    return res
def decrypt(text, emap, dmap):
    text = remove_space(text, emap)
    coords = []
    i = 0
    while i < len(text):
        ch = text[i:i + 1]
        xy = emap[ch]
        coords = coords + [xy[0]]
        coords = coords + [xy[1]]
        i = i + 1
    half = len(coords) // 2
    k1 = []
    k2 = []
    idx = 0
    while idx < half:
        k1 = k1 + [coords[idx]]
        idx = idx + 1
    while idx < len(coords):
        k2 = k2 + [coords[idx]]
        idx = idx + 1
    res = ""
    j = 0
    while j < half:
        key = str(k1[j]) + "," + str(k2[j])
        res = res + dmap[key]
        j = j + 1
    return res
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    squareRosetta = [["A", "B", "C", "D", "E"], ["F", "G", "H", "I", "K"], ["L", "M", "N", "O", "P"], ["Q", "R", "S", "T", "U"], ["V", "W", "X", "Y", "Z"], ["J", "1", "2", "3", "4"]]
    squareWikipedia = [["B", "G", "W", "K", "Z"], ["Q", "P", "N", "D", "S"], ["I", "O", "A", "X", "E"], ["F", "C", "L", "U", "M"], ["T", "H", "Y", "V", "R"], ["J", "1", "2", "3", "4"]]
    textRosetta = "0ATTACKATDAWN"
    textWikipedia = "FLEEATONCE"
    textTest = "The invasion will start on the first of January"
    maps = square_to_maps(squareRosetta)
    emap = maps.get("e")
    dmap = maps.get("d")
    print("from Rosettacode")
    print("original:\t " + textRosetta)
    s = encrypt(textRosetta, emap, dmap)
    print("codiert:\t " + s)
    s = decrypt(s, emap, dmap)
    print("and back:\t " + s)
    maps = square_to_maps(squareWikipedia)
    emap = maps.get("e")
    dmap = maps.get("d")
    print("from Wikipedia")
    print("original:\t " + textWikipedia)
    s = encrypt(textWikipedia, emap, dmap)
    print("codiert:\t " + s)
    s = decrypt(s, emap, dmap)
    print("and back:\t " + s)
    maps = square_to_maps(squareWikipedia)
    emap = maps.get("e")
    dmap = maps.get("d")
    print("from Rosettacode long part")
    print("original:\t " + textTest)
    s = encrypt(textTest, emap, dmap)
    print("codiert:\t " + s)
    s = decrypt(s, emap, dmap)
    print("and back:\t " + s)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
