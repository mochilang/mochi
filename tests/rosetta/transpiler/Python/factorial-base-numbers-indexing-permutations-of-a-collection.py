# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 16:50 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = parts + [cur]
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + "".join(s[i:i + 1])
            i = i + 1
    parts = parts + [cur]
    return parts
def parseIntStr(str):
    i = 0
    neg = False
    if len(str) > 0 and str[0:1] == "-":
        neg = True
        i = 1
    n = 0
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    while i < len(str):
        n = n * 10 + digits[str[i:i + 1]]
        i = i + 1
    if neg:
        n = -n
    return n
def joinInts(nums, sep):
    s = ""
    i = 0
    while i < len(nums):
        if i > 0:
            s = s + sep
        s = s + str(nums[i])
        i = i + 1
    return s
def undot(s):
    parts = s.split(".")
    nums = []
    for p in parts:
        nums = nums + [parseIntStr(p)]
    return nums
def factorial(n):
    f = 1
    i = 2
    while i <= n:
        f = f * i
        i = i + 1
    return f
def genFactBaseNums(size, countOnly):
    results = []
    count = 0
    n = 0
    while True:
        radix = 2
        res = []
        if not countOnly:
            z = 0
            while z < size:
                res = res + [0]
                z = z + 1
        k = n
        while k > 0:
            div = k // radix
            rem = k % radix
            if not countOnly and radix <= size + 1:
                res[size - radix + 1] = rem
            k = div
            radix = radix + 1
        if radix > size + 2:
            break
        count = count + 1
        if not countOnly:
            results = results + [res]
        n = n + 1
    return [results, count]
def mapToPerms(factNums):
    perms = []
    psize = len(factNums[0]) + 1
    start = []
    i = 0
    while i < psize:
        start = start + [i]
        i = i + 1
    for fn in factNums:
        perm = []
        j = 0
        while j < len(start):
            perm = perm + [start[j]]
            j = j + 1
        m = 0
        while m < len(fn):
            g = fn[m]
            if g != 0:
                first = m
                last = m + g
                t = 1
                while t <= g:
                    temp = perm[first]
                    x = first + 1
                    while x <= last:
                        perm[x - 1] = perm[x]
                        x = x + 1
                    perm[last] = temp
                    t = t + 1
            m = m + 1
        perms = perms + [perm]
    return perms
seed = 1
def randInt(n):
    global seed
    seed = (seed * 1664525 + 1013904223) % 2147483647
    return seed % n
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    g = genFactBaseNums(3, False)
    factNums = g[0]
    perms = mapToPerms(factNums)
    i = 0
    while i < len(factNums):
        print(joinInts(factNums[i], ".") + " -> " + joinInts(perms[i], ""))
        i = i + 1
    count2 = factorial(11)
    print("\nPermutations generated = " + str(count2))
    print("compared to 11! which  = " + str(factorial(11)))
    print("")
    fbn51s = ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"]
    factNums = [undot(fbn51s[0]), undot(fbn51s[1])]
    perms = mapToPerms(factNums)
    shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣"
    cards = []
    i = 0
    while i < 52:
        card = shoe[2 * i:2 * i + 2]
        if card[0:1] == "T":
            card = "10" + "".join(card[1:2])
        cards = cards + [card]
        i = i + 1
    i = 0
    while i < len(fbn51s):
        print(fbn51s[i])
        perm = perms[i]
        j = 0
        line = ""
        while j < len(perm):
            line = line + cards[perm[j]]
            j = j + 1
        print(line + "\n")
        i = i + 1
    fbn51 = []
    i = 0
    while i < 51:
        fbn51 = fbn51 + [randInt(52 - i)]
        i = i + 1
    print(joinInts(fbn51, "."))
    perms = mapToPerms([fbn51])
    line = ""
    i = 0
    while i < len(perms[0]):
        line = line + cards[perms[0][i]]
        i = i + 1
    print(line)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
