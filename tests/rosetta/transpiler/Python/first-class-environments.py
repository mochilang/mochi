# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 01:06 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

jobs = 12
def pad(n):
    s = str(n)
    while len(s) < 4:
        s = " " + s
    return s
@dataclass
class HailResult:
    seq: int
    cnt: int
    out: str

def hail(seq, cnt):
    out = pad(seq)
    if seq != 1:
        cnt = cnt + 1
        if seq % 2 != 0:
            seq = 3 * seq + 1
        else:
            seq = seq // 2
    return HailResult(seq=seq, cnt=cnt, out=out)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    seqs = []
    cnts = []
    for i in range(0, jobs):
        seqs = seqs + [i + 1]
        cnts = cnts + [0]
    while True:
        line = ""
        i = 0
        while i < jobs:
            res = hail(seqs[i], cnts[i])
            seqs[i] = res.seq
            cnts[i] = res.cnt
            line = line + res.out
            i = i + 1
        print(line)
        done = True
        j = 0
        while j < jobs:
            if seqs[j] != 1:
                done = False
            j = j + 1
        if done:
            break
    print("")
    print("COUNTS:")
    counts = ""
    k = 0
    while k < jobs:
        counts = counts + pad(cnts[k])
        k = k + 1
    print(counts)
    print("")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
