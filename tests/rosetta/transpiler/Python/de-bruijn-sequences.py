# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 20:06 +0700
import sys
sys.set_int_max_str_digits(0)

def dbRec(k, n, t, p, a, seq):
    if t > n:
        if n % p == 0:
            j = 1
            while j <= p:
                seq = seq + [a[j]]
                j = j + 1
    else:
        a[t] = a[t - p]
        seq = dbRec(k, n, t + 1, p, a, seq)
        j = a[t - p] + 1
        while j < k:
            a[t] = j
            seq = dbRec(k, n, t + 1, t, a, seq)
            j = j + 1
    return seq
def deBruijn(k, n):
    digits = "0123456789"
    alphabet = digits
    if k < 10:
        alphabet = digits[0:k]
    a = []
    i = 0
    while i < k * n:
        a = a + [0]
        i = i + 1
    seq = []
    seq = dbRec(k, n, 1, 1, a, seq)
    b = ""
    idx = 0
    while idx < len(seq):
        b = b + alphabet[seq[idx]]
        idx = idx + 1
    b = b + "".join(b[0:n - 1])
    return b
def allDigits(s):
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch < "0" or ch > "9":
            return False
        i = i + 1
    return True
def parseIntStr(str):
    n = 0
    i = 0
    while i < len(str):
        n = n * 10 + (int(str[i:i + 1]))
        i = i + 1
    return n
def validate(db):
    le = len(db)
    found = []
    i = 0
    while i < 10000:
        found = found + [0]
        i = i + 1
    j = 0
    while j < le - 3:
        s = db[j:j + 4]
        if allDigits(s):
            n = parseIntStr(s)
            found[n] = found[n] + 1
        j = j + 1
    errs = []
    k = 0
    while k < 10000:
        if found[k] == 0:
            errs = errs + ["    PIN number " + padLeft(k, 4) + " missing"]
        else:
            if found[k] > 1:
                errs = errs + ["    PIN number " + padLeft(k, 4) + " occurs " + str(found[k]) + " times"]
        k = k + 1
    lerr = len(errs)
    if lerr == 0:
        print("  No errors found")
    else:
        pl = "s"
        if lerr == 1:
            pl = ""
        print("  " + str(lerr) + " error" + pl + " found:")
        msg = joinStr(errs, "\n")
        print(msg)
def padLeft(n, width):
    s = str(n)
    while len(s) < width:
        s = "0" + s
    return s
def joinStr(xs, sep):
    res = ""
    i = 0
    while i < len(xs):
        if i > 0:
            res = res + sep
        res = res + xs[i]
        i = i + 1
    return res
def reverse(s):
    out = ""
    i = len(s) - 1
    while i >= 0:
        out = out + "".join(s[i:i + 1])
        i = i - 1
    return out
def main():
    db = deBruijn(10, 4)
    le = len(db)
    print("The length of the de Bruijn sequence is " + str(le))
    print("\nThe first 130 digits of the de Bruijn sequence are:")
    print(db[0:130])
    print("\nThe last 130 digits of the de Bruijn sequence are:")
    print(db[le - 130:])
    print("\nValidating the de Bruijn sequence:")
    validate(db)
    print("\nValidating the reversed de Bruijn sequence:")
    dbr = reverse(db)
    validate(dbr)
    db = "".join(db[0:4443]) + "." + "".join(db[4444:len(db)])
    print("\nValidating the overlaid de Bruijn sequence:")
    validate(db)
main()
