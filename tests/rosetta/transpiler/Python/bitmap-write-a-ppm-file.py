# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 01:29 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Colour:
    R: int
    G: int
    B: int

@dataclass
class Bitmap:
    width: int
    height: int
    pixels: [[Colour]]

def newBitmap(w, h, c):
    rows = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            row = row + [c]
            x = x + 1
        rows = rows + [row]
        y = y + 1
    return Bitmap(width=w, height=h, pixels=rows)
def setPixel(b, x, y, c):
    rows = b.pixels
    row = rows[y]
    row[x] = c
    rows[y] = row
    b = dataclasses.replace(b, pixels=rows)
def fillRect(b, x, y, w, h, c):
    yy = y
    while yy < y + h:
        xx = x
        while xx < x + w:
            setPixel(b, xx, yy, c)
            xx = xx + 1
        yy = yy + 1
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def writePPMP3(b):
    maxv = 0
    y = 0
    while y < b.height:
        x = 0
        while x < b.width:
            p = b.pixels[y][x]
            if p.R > maxv:
                maxv = p.R
            if p.G > maxv:
                maxv = p.G
            if p.B > maxv:
                maxv = p.B
            x = x + 1
        y = y + 1
    out = "P3\n# generated from Bitmap.writeppmp3\n" + str(b.width) + " " + str(b.height) + "\n" + str(maxv) + "\n"
    numsize = len(str(maxv))
    y = b.height - 1
    while y >= 0:
        line = ""
        x = 0
        while x < b.width:
            p = b.pixels[y][x]
            line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize)
            x = x + 1
        out = out + line
        if y > 0:
            out = out + "\n"
        else:
            out = out + "\n"
        y = y - 1
    return out
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    black = Colour(R=0, G=0, B=0)
    white = Colour(R=255, G=255, B=255)
    bm = newBitmap(4, 4, black)
    fillRect(bm, 1, 0, 1, 2, white)
    setPixel(bm, 3, 3, Colour(R=127, G=0, B=63))
    ppm = writePPMP3(bm)
    print(ppm)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
