# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 15:05 +0700
import sys
sys.set_int_max_str_digits(0)

PI = 3.141592653589793
TWO_PI = 6.283185307179586
def sinApprox(x):
    term = x
    sum = x
    n = 1
    while n <= 8:
        denom = float(2 * n * (2 * n + 1))
        term = -term * x * x // denom
        sum = sum + term
        n = n + 1
    return sum
def floor(x):
    i = int(x)
    if float(i) > x:
        i = i - 1
    return float(i)
def absFloat(x):
    if x < 0.0:
        return -x
    return x
def absInt(n):
    if n < 0:
        return -n
    return n
def parseIntStr(str):
    i = 0
    neg = False
    if len(str) > 0 and str[0:1] == "-":
        neg = True
        i = 1
    n = 0
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    while i < len(str):
        n = n * 10 + digits[str[i:i + 1]]
        i = i + 1
    if neg:
        n = -n
    return n
def parseDate(s):
    y = parseIntStr(s[0:4])
    m = parseIntStr(s[5:7])
    d = parseIntStr(s[8:10])
    return [y, m, d]
def leap(y):
    if y % 400 == 0:
        return True
    if y % 100 == 0:
        return False
    return y % 4 == 0
def daysInMonth(y, m):
    feb = (29 if leap(y) else 28)
    lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return lengths[m - 1]
def addDays(y, m, d, n):
    yy = y
    mm = m
    dd = d
    if n >= 0:
        i = 0
        while i < n:
            dd = dd + 1
            if dd > daysInMonth(yy, mm):
                dd = 1
                mm = mm + 1
                if mm > 12:
                    mm = 1
                    yy = yy + 1
            i = i + 1
    else:
        i = 0
        while i > n:
            dd = dd - 1
            if dd < 1:
                mm = mm - 1
                if mm < 1:
                    mm = 12
                    yy = yy - 1
                dd = daysInMonth(yy, mm)
            i = i - 1
    return [yy, mm, dd]
def pad2(n):
    if n < 10:
        return "0" + str(n)
    return str(n)
def dateString(y, m, d):
    return str(y) + "-" + pad2(m) + "-" + pad2(d)
def day(y, m, d):
    part1 = 367 * y
    part2 = int(7 * int(y + (m + 9 // 12)) // 4)
    part3 = int(275 * m // 9)
    return part1 - part2 + part3 + d - 730530
def biorhythms(birth, target):
    bparts = parseDate(birth)
    by = bparts[0]
    bm = bparts[1]
    bd = bparts[2]
    tparts = parseDate(target)
    ty = tparts[0]
    tm = tparts[1]
    td = tparts[2]
    diff = absInt(day(ty, tm, td) - day(by, bm, bd))
    print("Born " + birth + ", Target " + target)
    print("Day " + str(diff))
    cycles = ["Physical day ", "Emotional day", "Mental day   "]
    lengths = [23, 28, 33]
    quadrants = [["up and rising", "peak"], ["up but falling", "transition"], ["down and falling", "valley"], ["down but rising", "transition"]]
    i = 0
    while i < 3:
        length = lengths[i]
        cycle = cycles[i]
        position = diff % length
        quadrant = position * 4 // length
        percent = sinApprox(2.0 * PI * float(position) // float(length))
        percent = floor(percent * 1000.0) / 10.0
        description = ""
        if percent > 95.0:
            description = " peak"
        else:
            if percent < -95.0:
                description = " valley"
            else:
                if absFloat(percent) < 5.0:
                    description = " critical transition"
                else:
                    daysToAdd = ((quadrant + 1) * length // 4) - position
                    res = addDays(ty, tm, td, daysToAdd)
                    ny = res[0]
                    nm = res[1]
                    nd = res[2]
                    transition = dateString(ny, nm, nd)
                    trend = quadrants[quadrant][0]
                    next = quadrants[quadrant][1]
                    pct = str(percent)
                    if not contains(pct, "."):
                        pct = pct + ".0"
                    description = " " + pct + "% (" + trend + ", next " + next + " " + transition + ")"
        posStr = str(position)
        if position < 10:
            posStr = " " + posStr
        print(cycle + posStr + " : " + description)
        i = i + 1
    print("")
def main():
    pairs = [["1943-03-09", "1972-07-11"], ["1809-01-12", "1863-11-19"], ["1809-02-12", "1863-11-19"]]
    idx = 0
    while idx < len(pairs):
        p = pairs[idx]
        biorhythms(p[0], p[1])
        idx = idx + 1
main()
