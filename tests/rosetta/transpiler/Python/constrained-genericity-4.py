# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 21:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Eatable:
    eat: fun()

@dataclass
class Foodbox:
    items: [PeelFirst]

@dataclass
class PeelFirst:
    value: str

def peelFirstEat(p):
    print("mm, that " + p.value + " was good!")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    fb = Foodbox(items=[PeelFirst(value="banana"), PeelFirst(value="mango")])
    f0 = fb.items[0]
    peelFirstEat(f0)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
