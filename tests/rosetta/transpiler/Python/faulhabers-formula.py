# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 16:50 +0700
from fractions import Fraction

import sys
sys.set_int_max_str_digits(0)

def bernoulli(n):
    a = []
    m = 0
    while m <= n:
        a = a + [Fraction(1) / (Fraction((m + 1)))]
        j = m
        while j >= 1:
            a[j - 1] = (Fraction(j)) * (a[j - 1] - a[j])
            j = j - 1
        m = m + 1
    return a[0]
def binom(n, k):
    if k < 0 or k > n:
        return 0
    kk = k
    if kk > n - kk:
        kk = n - kk
    res = 1
    i = 0
    while i < kk:
        res = res * ((n - i))
        i = i + 1
        res = res // (i)
    return res
def coeff(p, j):
    base = Fraction(1) / (Fraction((p + 1)))
    c = base
    if j % 2 == 1:
        c = -c
    c = c * (Fraction(binom(p + 1, j)))
    c = c * bernoulli(j)
    return c
def main():
    p = 0
    while p < 10:
        line = str(p) + " :"
        j = 0
        while j <= p:
            c = coeff(p, j)
            if str(c) != "0/1":
                line = line + " " + str(c) + "Ã—n"
                exp = p + 1 - j
                if exp > 1:
                    line = line + "^" + str(exp)
            j = j + 1
        print(line)
        p = p + 1
main()
