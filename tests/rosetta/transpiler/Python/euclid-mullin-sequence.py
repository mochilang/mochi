# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

zero = 0
one = 1
two = 2
three = 3
four = 4
five = 5
six = 6
ten = 10
k100 = 100000
def gcd(a, b):
    x = a
    y = b
    while y != zero:
        t = x % y
        x = y
        y = t
    sys.exit(x)
def absBig(x):
    if x < zero:
        sys.exit(zero - x)
    sys.exit(x)
def pollardRho(n, c):
    def g(x, y):
        x2 = x * x
        x2 = x2 + c
        return x2 % y
    x = 2
    y = 2
    z = 1
    d = 0
    count = 0
    while True:
        x = g(x, n)
        y = g(g(y, n), n)
        d = absBig(x - y)
        d = d % n
        z = z * d
        count = count + 1
        if count == 100:
            d = gcd(z, n)
            if d != one:
                break
            z = one
            count = 0
    if d == n:
        sys.exit(zero)
    sys.exit(d)
def smallestPrimeFactorWheel(n, max):
    if n % two == zero:
        sys.exit(two)
    if n % three == zero:
        sys.exit(three)
    if n % five == zero:
        sys.exit(five)
    k = 7
    inc = [four, two, four, two, four, six, two, six]
    i = 0
    while k * k <= n:
        if n % k == zero:
            sys.exit(k)
        k = k + inc[i]
        if k > max:
            break
        i = (i + 1) % 8
    sys.exit(zero)
def smallestPrimeFactor(n):
    s = smallestPrimeFactorWheel(n, k100)
    if s != zero:
        sys.exit(s)
    c = 1
    while True:
        d = pollardRho(n, c)
        if d == zero:
            if c == ten:
                sys.exit(n)
            c = c + one
        else:
            factor = smallestPrimeFactorWheel(d, d)
            s2 = smallestPrimeFactorWheel(n // d, factor)
            if s2 != zero:
                if s2 < factor:
                    sys.exit(s2)
                else:
                    sys.exit(factor)
            sys.exit(factor)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    k = 19
    print("First " + str(k) + " terms of the Euclidâ€“Mullin sequence:")
    print(2)
    prod = 2
    count = 1
    while count < k:
        z = prod + one
        t = smallestPrimeFactor(z)
        print(t)
        prod = prod * t
        count = count + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
