# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 09:30 +0000
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict

import sys
sys.set_int_max_str_digits(0)

def parseIntBase(s, base):
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    n = 0
    i = 0
    while i < len(s):
        j = 0
        v = 0
        while j < len(digits):
            if digits[j:j + 1] == s[i:i + 1]:
                v = j
                break
            j = j + 1
        n = n * base + v
        i = i + 1
    return n
def intToBase(n, base):
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n == 0:
        return "0"
    out = ""
    v = n
    while v > 0:
        d = v % base
        out = "".join(digits[d:d + 1]) + out
        v = v // base
    return out
def subset(base, begin, end):
    b = parseIntBase(begin, base)
    e = parseIntBase(end, base)
    out = []
    k = b
    while k <= e:
        ks = intToBase(k, base)
        mod = base - 1
        r1 = parseIntBase(ks, base) % mod
        r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % mod
        if r1 == r2:
            out = out + [ks]
        k = k + 1
    return out
@dataclass
class TestCase:
    base: int
    begin: str
    end: str
    kaprekar: [string]

testCases = [TestCase(10, "1", "100", ["1", "9", "45", "55", "99"]), TestCase(17, "10", "gg", ["3d", "d4", "gg"])]
idx = 0
while idx < len(testCases):
    tc = testCases[idx]
    print("\nTest case base = " + str(tc["base"]) + ", begin = " + tc["begin"] + ", end = " + tc["end"] + ":")
    s = subset(tc["base"], tc["begin"], tc["end"])
    print("Subset:  " + str(s))
    print("Kaprekar:" + str(tc["kaprekar"]))
    sx = 0
    valid = True
    i = 0
    while i < len(tc["kaprekar"]):
        k = tc["kaprekar"][i]
        found = False
        while sx < len(s):
            if s[sx] == k:
                found = True
                sx = sx + 1
                break
            sx = sx + 1
        if not found:
            print("Fail:" + k + " not in subset")
            valid = False
            break
        i = i + 1
    if valid:
        print("Valid subset.")
    idx = idx + 1
