# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 19:37 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def parseIntBase(s, base):
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    n = 0
    i = 0
    while i < len(s):
        j = 0
        v = 0
        while j < len(digits):
            if digits[j:j + 1] == s[i:i + 1]:
                v = j
                break
            j = j + 1
        n = n * base + v
        i = i + 1
    return n
def intToBase(n, base):
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n == 0:
        return "0"
    out = ""
    v = n
    while v > 0:
        d = v % base
        out = "".join(digits[d:d + 1]) + out
        v = v // base
    return out
def subset(base, begin, end):
    b = parseIntBase(begin, base)
    e = parseIntBase(end, base)
    out = []
    k = b
    while k <= e:
        ks = intToBase(k, base)
        mod = base - 1
        r1 = parseIntBase(ks, base) % mod
        r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % mod
        if r1 == r2:
            out = out + [ks]
        k = k + 1
    return out
testCases = [{"base": 10, "begin": "1", "end": "100", "kaprekar": ["1", "9", "45", "55", "99"]}, {"base": 17, "begin": "10", "end": "gg", "kaprekar": ["3d", "d4", "gg"]}]
idx = 0
while idx < len(testCases):
    tc = testCases[idx]
    print("\nTest case base = " + str(tc.get("base")) + ", begin = " + tc.get("begin") + ", end = " + tc.get("end") + ":")
    s = subset(tc.get("base"), tc.get("begin"), tc.get("end"))
    print("Subset:  " + str(s))
    print("Kaprekar:" + str(tc.get("kaprekar")))
    sx = 0
    valid = True
    i = 0
    while i < len(tc.get("kaprekar")):
        k = tc.get("kaprekar")[i]
        found = False
        while sx < len(s):
            if s[sx] == k:
                found = True
                sx = sx + 1
                break
            sx = sx + 1
        if not found:
            print("Fail:" + k + " not in subset")
            valid = False
            break
        i = i + 1
    if valid:
        print("Valid subset.")
    idx = idx + 1
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
