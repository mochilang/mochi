# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:22 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def neighborsList():
    return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]
def plus(a, b):
    res = []
    i = 0
    while i < len(a):
        res = res + [a[i] + b[i]]
        i = i + 1
    return res
def isStable(p):
    for v in p:
        if v > 3:
            return False
    return True
def topple(p):
    neighbors = neighborsList()
    i = 0
    while i < len(p):
        if p[i] > 3:
            p[i] = p[i] - 4
            nbs = neighbors[i]
            for j in nbs:
                p[j] = p[j] + 1
            return 0
        i = i + 1
    return 0
def pileString(p):
    s = ""
    r = 0
    while r < 3:
        c = 0
        while c < 3:
            s = s + str(p[3 * r + c]) + " "
            c = c + 1
        s = s + "\n"
        r = r + 1
    return s
print("Avalanche of topplings:\n")
s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3]
print(pileString(s4))
while not isStable(s4):
    topple(s4)
    print(pileString(s4))
print("Commutative additions:\n")
s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3]
s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0]
s3_a = plus(s1, s2)
while not isStable(s3_a):
    topple(s3_a)
s3_b = plus(s2, s1)
while not isStable(s3_b):
    topple(s3_b)
print(pileString(s1) + "\nplus\n\n" + pileString(s2) + "\nequals\n\n" + pileString(s3_a))
print("and\n\n" + pileString(s2) + "\nplus\n\n" + pileString(s1) + "\nalso equals\n\n" + pileString(s3_b))
print("Addition of identity sandpile:\n")
s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]
s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2]
s4b = plus(s3, s3_id)
while not isStable(s4b):
    topple(s4b)
print(pileString(s3) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s4b))
print("Addition of identities:\n")
s5 = plus(s3_id, s3_id)
while not isStable(s5):
    topple(s5)
print(pileString(s3_id) + "\nplus\n\n" + pileString(s3_id) + "\nequals\n\n" + pileString(s5))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
