# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-25 10:11 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Rational:
    num: int
    denom: int

OP_ADD = 1
OP_SUB = 2
OP_MUL = 3
OP_DIV = 4
@dataclass
class Num:
    value: Rational

@dataclass
class Bin:
    op: int
    left: Expr
    right: Expr

def binEval(op, l, r):
    lv = exprEval(l)
    rv = exprEval(r)
    if op == OP_ADD:
        return Rational(num=lv.num * rv.denom + lv.denom * rv.num, denom=lv.denom * rv.denom)
    if op == OP_SUB:
        return Rational(num=lv.num * rv.denom - lv.denom * rv.num, denom=lv.denom * rv.denom)
    if op == OP_MUL:
        return Rational(num=lv.num * rv.num, denom=lv.denom * rv.denom)
    return Rational(num=lv.num * rv.denom, denom=lv.denom * rv.num)
def binString(op, l, r):
    ls = exprString(l)
    rs = exprString(r)
    opstr = ""
    if op == OP_ADD:
        opstr = " + "
    else:
        if op == OP_SUB:
            opstr = " - "
        else:
            if op == OP_MUL:
                opstr = " * "
            else:
                opstr = " / "
    return "(" + ls + opstr + rs + ")"
def newNum(n):
    return Num(value=Rational(num=n, denom=1))
def exprEval(x):
    return (x.value if isinstance(x, Num) else (binEval(x.op, x.left, x.right) if isinstance(x, Bin) else None))
def exprString(x):
    return (str(x.value.num) if isinstance(x, Num) else (binString(x.op, x.left, x.right) if isinstance(x, Bin) else None))
n_cards = 4
goal = 24
digit_range = 9
def solve(xs):
    if len(xs) == 1:
        f = exprEval(xs[0])
        if f.denom != 0 and f.num == f.denom * goal:
            print(exprString(xs[0]))
            return True
        return False
    i = 0
    while i < len(xs):
        j = i + 1
        while j < len(xs):
            rest = []
            k = 0
            while k < len(xs):
                if k != i and k != j:
                    rest = rest + [xs[k]]
                k = k + 1
            a = xs[i]
            b = xs[j]
            node = Bin(op=OP_ADD, left=a, right=b)
            for op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV]:
                node = Bin(op=op, left=a, right=b)
                if solve(rest + [node]):
                    return True
            node = Bin(op=OP_SUB, left=b, right=a)
            if solve(rest + [node]):
                return True
            node = Bin(op=OP_DIV, left=b, right=a)
            if solve(rest + [node]):
                return True
            j = j + 1
        i = i + 1
    return False
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    iter = 0
    while iter < 10:
        cards = []
        i = 0
        while i < n_cards:
            n = (_now() % (digit_range - 1)) + 1
            cards = cards + [newNum(n)]
            print(" " + str(n))
            i = i + 1
        print(":  ")
        if not solve(cards):
            print("No solution")
        iter = iter + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
