# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-25 10:11 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def validComb(a, b, c, d, e, f, g):
    square1 = a + b
    square2 = b + c + d
    square3 = d + e + f
    square4 = f + g
    return square1 == square2 and square2 == square3 and square3 == square4
def isUnique(a, b, c, d, e, f, g):
    nums = [a, b, c, d, e, f, g]
    i = 0
    while i < len(nums):
        j = i + 1
        while j < len(nums):
            if nums[i] == nums[j]:
                return False
            j = j + 1
        i = i + 1
    return True
def getCombs(low, high, unique):
    valid = []
    count = 0
    for b in range(low, (high + 1)):
        for c in range(low, (high + 1)):
            for d in range(low, (high + 1)):
                s = b + c + d
                for e in range(low, (high + 1)):
                    for f in range(low, (high + 1)):
                        a = s - b
                        g = s - f
                        if a < low or a > high:
                            continue
                        if g < low or g > high:
                            continue
                        if d + e + f != s:
                            continue
                        if f + g != s:
                            continue
                        if not unique or isUnique(a, b, c, d, e, f, g):
                            valid = valid + [[a, b, c, d, e, f, g]]
                            count = count + 1
    return {"count": count, "list": valid}
r1 = getCombs(1, 7, True)
print(str(r1["count"]) + " unique solutions in 1 to 7")
print(r1["list"])
r2 = getCombs(3, 9, True)
print(str(r2["count"]) + " unique solutions in 3 to 9")
print(r2["list"])
r3 = getCombs(0, 9, False)
print(str(r3["count"]) + " non-unique solutions in 0 to 9")
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
