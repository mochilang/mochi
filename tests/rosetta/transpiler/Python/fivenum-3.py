# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 01:08 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def sortFloat(xs):
    arr = xs
    n = len(arr)
    i = 0
    while i < n:
        j = 0
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                t = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = t
            j = j + 1
        i = i + 1
    return arr
def ceilf(x):
    i = int(x)
    if x > (float(i)):
        return i + 1
    return i
def fivenum(a):
    arr = sortFloat(a)
    n = len(arr)
    half = (n + 3) - ((n + 3) % 2)
    n4 = float((half // 2)) / 2.0
    nf = float(n)
    d = [1.0, n4, (nf + 1.0) / 2.0, nf + 1.0 - n4, nf]
    result = []
    idx = 0
    while idx < len(d):
        de = d[idx]
        fl = int(de - 1.0)
        cl = ceilf(de - 1.0)
        result = result + [0.5 * (arr[fl] + arr[cl])]
        idx = idx + 1
    return result
x1 = [36.0, 40.0, 7.0, 39.0, 41.0, 15.0]
x2 = [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0]
x3 = [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578]
print(str(fivenum(x1)))
print(str(fivenum(x2)))
print(str(fivenum(x3)))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
