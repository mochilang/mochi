# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 01:23 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def bsearch(arr, x):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] > x:
            high = mid - 1
        else:
            if arr[mid] < x:
                low = mid + 1
            else:
                return mid
    return -1
def bsearchRec(arr, x, low, high):
    if high < low:
        return -1
    mid = (low + high) // 2
    if arr[mid] > x:
        return bsearchRec(arr, x, low, mid - 1)
    else:
        if arr[mid] < x:
            return bsearchRec(arr, x, mid + 1, high)
    return mid
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    nums = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782]
    x = 2
    idx = bsearch(nums, x)
    if idx >= 0:
        print(str(x) + " is at index " + str(idx) + ".")
    else:
        print(str(x) + " is not found.")
    x = 5
    idx = bsearchRec(nums, x, 0, len(nums) - 1)
    if idx >= 0:
        print(str(x) + " is at index " + str(idx) + ".")
    else:
        print(str(x) + " is not found.")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
