# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:08 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def primeFactors(n):
    factors = []
    last = 0
    x = n
    while x % 2 == 0:
        if last == 2:
            return []
        factors = factors + [2]
        last = 2
        x = x // 2
    p = 3
    while p * p <= x:
        while x % p == 0:
            if last == p:
                return []
            factors = factors + [p]
            last = p
            x = x // p
        p = p + 2
    if x > 1:
        if last == x:
            return []
        factors = factors + [x]
    return factors
def isGiuga(n):
    facs = primeFactors(n)
    if len(facs) <= 2:
        return False
    for f in facs:
        if ((n // f - 1) % f) != 0:
            return False
    return True
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    known = [30, 858, 1722, 66198]
    nums = []
    for n in known:
        if isGiuga(n):
            nums = nums + [n]
    print("The first 4 Giuga numbers are:")
    print(nums)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
