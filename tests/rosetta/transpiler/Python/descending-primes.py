# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 17:30 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
    return True
digits = [9, 8, 7, 6, 5, 4, 3, 2, 1]
def gen(idx, cur, used):
    if idx == len(digits):
        if used and isPrime(cur):
            return [cur]
        return []
    with_ = gen(idx + 1, cur * 10 + digits[idx], True)
    without = gen(idx + 1, cur, used)
    return (with_ + without)
primes = gen(0, 0, False)
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
print("There are " + str(len(primes)) + " descending primes, namely:")
i = 0
line = ""
while i < len(primes):
    line = line + pad(primes[i], 8) + " "
    if (i + 1) % 10 == 0:
        print(line[0:len(line) - 1])
        line = ""
    i = i + 1
if len(line) > 0:
    print(line[0:len(line) - 1])
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
