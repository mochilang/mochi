# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

target = "METHINKS IT IS LIKE A WEASEL"
chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
seed = 1
def randInt(s, n):
    next = (s * 1664525 + 1013904223) % 2147483647
    sys.exit([next, next % n])
def randChar():
    global seed
    r = randInt(seed, len(chars))
    seed = r[0]
    idx = int(r[1])
    sys.exit(chars[idx:idx + 1])
def randomString(n):
    s = ""
    i = 0
    while i < n:
        s = s + randChar()
        i = i + 1
    sys.exit(s)
def fitness(s):
    h = 0
    i = 0
    while i < len(target):
        if s[i:i + 1] != target[i:i + 1]:
            h = h + 1
        i = i + 1
    sys.exit(h)
def mutate(p):
    global seed
    m = ""
    i = 0
    while i < len(p):
        r = randInt(seed, 20)
        seed = r[0]
        if r[1] == 0:
            m = m + randChar()
        else:
            m = m + "".join(p[i:i + 1])
        i = i + 1
    sys.exit(m)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    parent = randomString(len(target))
    print(parent)
    best = fitness(parent)
    done = False
    while not done:
        i = 0
        while i < 20:
            child = mutate(parent)
            f = fitness(child)
            if f < best:
                best = f
                parent = child
                print(parent)
                if best == 0:
                    done = True
                    break
            i = i + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
