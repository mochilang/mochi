# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:40 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def abs(x):
    if x < 0.0:
        return -x
    return x
def maxf(a, b):
    if a > b:
        return a
    return b
def isClose(a, b):
    relTol = 1e-09
    t = abs(a - b)
    u = relTol * maxf(abs(a), abs(b))
    return t <= u
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    root2 = sqrtApprox(2.0)
    pairs = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [1.0000000000000002e+13 / 10000.0, 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0.0], [root2 * root2, 2.0], [(-root2) * root2, -2.0], [1e+17, 1e+17], [3.141592653589793, 3.141592653589793]]
    for pair in pairs:
        a = pair[0]
        b = pair[1]
        s = ("≈" if isClose(a, b) else "≉")
        print(str(a) + " " + s + " " + str(b))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
