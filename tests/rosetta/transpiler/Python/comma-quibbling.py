# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def quibble(items):
    n = len(items)
    if n == 0:
        return "{}"
    else:
        if n == 1:
            return "{" + items[0] + "}"
        else:
            if n == 2:
                return "{" + items[0] + " and " + items[1] + "}"
            else:
                prefix = ""
                for i in range(0, n - 1):
                    if i == n - 1:
                        break
                    if i > 0:
                        prefix = prefix + ", "
                    prefix = prefix + items[i]
                return "{" + prefix + " and " + items[n - 1] + "}"
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print(quibble([]))
    print(quibble(["ABC"]))
    print(quibble(["ABC", "DEF"]))
    print(quibble(["ABC", "DEF", "G", "H"]))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
