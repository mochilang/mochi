# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def floorf(x):
    y = int(x)
    return float(y)
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return -1
def fmtF3(x):
    y = floorf(x * 1000.0 + 0.5) / 1000.0
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + ".000"
    else:
        decs = len(s) - dot - 1
        if decs > 3:
            s = s[0:dot + 4]
        else:
            while decs < 3:
                s = s + "0"
                decs = decs + 1
    return s
def padFloat3(x, width):
    s = fmtF3(x)
    while len(s) < width:
        s = " " + s
    return s
def fib1000():
    a = 0.0
    b = 1.0
    res = []
    i = 0
    while i < 1000:
        res = res + [b]
        t = b
        b = b + a
        a = t
        i = i + 1
    return res
def leadingDigit(x):
    if x < 0.0:
        x = -x
    while x >= 10.0:
        x = x / 10.0
    while x > 0.0 and x < 1.0:
        x = x * 10.0
    return int(x)
def show(nums, title):
    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0]
    for n in nums:
        d = leadingDigit(n)
        if d >= 1 and d <= 9:
            counts[d - 1] = counts[d - 1] + 1
    preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]
    total = len(nums)
    print(title)
    print("Digit  Observed  Predicted")
    i = 0
    while i < 9:
        obs = (float(counts[i])) / (float(total))
        line = "  " + str(i + 1) + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8)
        print(line)
        i = i + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    show(fib1000(), "First 1000 Fibonacci numbers")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
