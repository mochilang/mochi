# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def printExpI(b, p):
    if p < 0:
        print(str(b) + "^" + str(p) + ": negative power not allowed")
        return
    r = 1
    i = 1
    while i <= p:
        r = r * b
        i = i + 1
    print(str(b) + "^" + str(p) + ": " + str(r))
def expF(b, p):
    neg = False
    if p < 0:
        neg = True
        p = -p
    r = 1.0
    pow = b
    while p > 0:
        if p % 2 == 1:
            r = r * pow
        pow = pow * pow
        p = p // 2
    if neg:
        r = 1.0 / r
    return r
def printExpF(b, p):
    if b == 0.0 and p < 0:
        print(str(b) + "^" + str(p) + ": +Inf")
        return
    print(str(b) + "^" + str(p) + ": " + str(expF(b, p)))
print("expI tests")
printExpI(2, 10)
printExpI(2, -10)
printExpI(-2, 10)
printExpI(-2, 11)
printExpI(11, 0)
print("overflow undetected")
printExpI(10, 10)
print("\nexpF tests:")
printExpF(2.0, 10)
printExpF(2.0, -10)
printExpF(-2.0, 10)
printExpF(-2.0, 11)
printExpF(11.0, 0)
print("disallowed in expI, allowed here")
printExpF(0.0, -1)
print("other interesting cases for 32 bit float type")
printExpF(10.0, 39)
printExpF(10.0, -39)
printExpF(-10.0, 39)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
