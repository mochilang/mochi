# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 16:50 +0700
import math

import sys
sys.set_int_max_str_digits(0)

def entropy(s):
    counts = {}
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch in counts:
            counts[ch] = counts[ch] + 1
        else:
            counts[ch] = 1
        i = i + 1
    hm = 0.0
    for k in list(counts.keys()):
        c = float(counts[k])
        hm = hm + c * (math.log(c) / math.log(2.0))
    l = float(len(s))
    return (math.log(l) / math.log(2.0)) - hm / l
def fibonacciWord(n):
    a = "1"
    b = "0"
    i = 1
    while i < n:
        tmp = b
        b = b + a
        a = tmp
        i = i + 1
    return a
def main():
    print(pad("N", 3) + pad("Length", 9) + "  Entropy      Word")
    n = 1
    while n < 10:
        s = fibonacciWord(n)
        print(pad(str(n), 3) + pad(str(len(s)), 9) + "  " + fmt(entropy(s)) + "  " + s)
        n = n + 1
    while n <= 37:
        s = fibonacciWord(n)
        print(pad(str(n), 3) + pad(str(len(s)), 9) + "  " + fmt(entropy(s)))
        n = n + 1
def pad(s, w):
    t = s
    while len(t) < w:
        t = " " + t
    return t
def fmt(x):
    y = floorf(x * 1e+08 + 0.5) / 1e+08
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + ".00000000"
    else:
        d = len(s) - dot - 1
        while d < 8:
            s = s + "0"
            d = d + 1
    return s
def floorf(x):
    y = int(x)
    return float(y)
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return 0 - 1
main()
