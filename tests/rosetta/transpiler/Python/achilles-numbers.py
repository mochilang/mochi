# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 23:57 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pow10(exp):
    n = 1
    i = 0
    while i < exp:
        n = n * 10
        i = i + 1
    return n
def totient(n):
    tot = n
    nn = n
    i = 2
    while i * i <= nn:
        if nn % i == 0:
            while nn % i == 0:
                nn = nn // i
            tot = tot - (tot // i)
        if i == 2:
            i = 1
        i = i + 2
    if nn > 1:
        tot = tot - (tot // nn)
    return tot
pps = {}
def getPerfectPowers(maxExp):
    upper = pow10(maxExp)
    i = 2
    while i * i < upper:
        p = i
        while True:
            p = p * i
            if p >= upper:
                break
            pps[p] = True
        i = i + 1
def getAchilles(minExp, maxExp):
    lower = pow10(minExp)
    upper = pow10(maxExp)
    achilles = {}
    b = 1
    while b * b * b < upper:
        b3 = b * b * b
        a = 1
        while True:
            p = b3 * a * a
            if p >= upper:
                break
            if p >= lower:
                if not (p in pps):
                    achilles[p] = True
            a = a + 1
        b = b + 1
    return achilles
def sortInts(xs):
    res = []
    tmp = xs
    while len(tmp) > 0:
        min = tmp[0]
        idx = 0
        i = 1
        while i < len(tmp):
            if tmp[i] < min:
                min = tmp[i]
                idx = i
            i = i + 1
        res = res + [min]
        out = []
        j = 0
        while j < len(tmp):
            if j != idx:
                out = out + [tmp[j]]
            j = j + 1
        tmp = out
    return res
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    maxDigits = 15
    getPerfectPowers(5)
    achSet = getAchilles(1, 5)
    ach = []
    for k in achSet.keys():
        ach = ach + [k]
    ach = sortInts(ach)
    print("First 50 Achilles numbers:")
    i = 0
    while i < 50:
        line = ""
        j = 0
        while j < 10:
            line = line + pad(ach[i], 4)
            if j < 9:
                line = line + " "
            i = i + 1
            j = j + 1
        print(line)
    print("\nFirst 30 strong Achilles numbers:")
    strong = []
    count = 0
    idx = 0
    while count < 30:
        tot = totient(ach[idx])
        if tot in achSet:
            strong = strong + [ach[idx]]
            count = count + 1
        idx = idx + 1
    i = 0
    while i < 30:
        line = ""
        j = 0
        while j < 10:
            line = line + pad(strong[i], 5)
            if j < 9:
                line = line + " "
            i = i + 1
            j = j + 1
        print(line)
    print("\nNumber of Achilles numbers with:")
    counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383]
    d = 2
    while d <= maxDigits:
        c = counts[d - 2]
        print(pad(d, 2) + " digits: " + str(c))
        d = d + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
