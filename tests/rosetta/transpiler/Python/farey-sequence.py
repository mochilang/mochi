# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 16:50 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

@dataclass
class Frac:
    num: int
    den: int

def fracStr(f):
    return str(f.num) + "/" + str(f.den)
def gen(l, r, n, acc):
    m = Frac(num=l.num + r.num, den=l.den + r.den)
    if m.den <= n:
        acc = gen(l, m, n, acc)
        acc = acc + [m]
        acc = gen(m, r, n, acc)
    return acc
def totient(n):
    tot = n
    nn = n
    p = 2
    while p * p <= nn:
        if nn % p == 0:
            while nn % p == 0:
                nn = nn // p
            tot = tot - (tot // p)
        if p == 2:
            p = 1
        p = p + 2
    if nn > 1:
        tot = tot - (tot // nn)
    return tot
def main():
    n = 1
    while n <= 11:
        l = Frac(num=0, den=1)
        r = Frac(num=1, den=1)
        seq = gen(l, r, n, [])
        line = "F(" + str(n) + "): " + fracStr(l)
        for f in seq:
            line = line + " " + fracStr(f)
        line = line + " " + fracStr(r)
        print(line)
        n = n + 1
    sum = 1
    i = 1
    next = 100
    while i <= 1000:
        sum = sum + totient(i)
        if i == next:
            print("|F(" + str(i) + ")|: " + str(sum))
            next = next + 100
        i = i + 1
main()
