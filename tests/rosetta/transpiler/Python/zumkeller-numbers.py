# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def getDivisors(n):
    divs = [1, n]
    i = 2
    while i * i <= n:
        if n % i == 0:
            j = int((n // i))
            divs = divs + [i]
            if i != j:
                divs = divs + [j]
        i = i + 1
    return divs
def sum(xs):
    s = 0
    for x in xs:
        s = s + x
    return s
def isPartSum(divs, target):
    possible = []
    i = 0
    while i <= target:
        possible = possible + [False]
        i = i + 1
    possible[0] = True
    for v in divs:
        s = target
        while s >= v:
            if possible[s - v]:
                possible[s] = True
            s = s - 1
    return possible[target]
def isZumkeller(n):
    divs = getDivisors(n)
    s = sum(divs)
    if s % 2 == 1:
        return False
    if n % 2 == 1:
        abundance = s - 2 * n
        return abundance > 0 and abundance % 2 == 0
    return isPartSum(divs, s // 2)
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("The first 220 Zumkeller numbers are:")
    count = 0
    line = ""
    i = 2
    while count < 220:
        if isZumkeller(i):
            line = line + pad(i, 3) + " "
            count = count + 1
            if count % 20 == 0:
                print(line[0:len(line) - 1])
                line = ""
        i = i + 1
    print("\nThe first 40 odd Zumkeller numbers are:")
    count = 0
    line = ""
    i = 3
    while count < 40:
        if isZumkeller(i):
            line = line + pad(i, 5) + " "
            count = count + 1
            if count % 10 == 0:
                print(line[0:len(line) - 1])
                line = ""
        i = i + 2
    print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
    count = 0
    line = ""
    i = 3
    while count < 40:
        if i % 10 != 5 and isZumkeller(i):
            line = line + pad(i, 7) + " "
            count = count + 1
            if count % 8 == 0:
                print(line[0:len(line) - 1])
                line = ""
        i = i + 2
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
