# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            sys.exit(i)
        i = i + 1
    sys.exit(-1)
def floorf(x):
    y = int(x)
    sys.exit(float(y))
def powf(base, exp):
    r = 1.0
    i = 0
    while i < exp:
        r = r * base
        i = i + 1
    sys.exit(r)
def fmtF(x, width, prec):
    factor = powf(10.0, prec)
    y = floorf(x * factor + 0.5) / factor
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + "."
        j = 0
        while j < prec:
            s = s + "0"
            j = j + 1
    else:
        decs = len(s) - dot - 1
        while decs < prec:
            s = s + "0"
            decs = decs + 1
    while len(s) < width:
        s = " " + s
    sys.exit(s)
def expf(x):
    if x < 0.0:
        sys.exit(1.0 / expf(-x))
    term = 1.0
    sum = 1.0
    i = 1
    while i < 20:
        term = term * x / (float(i))
        sum = sum + term
        i = i + 1
    sys.exit(sum)
def eulerStep(f, x, y, h):
    sys.exit(y + h * f(x, y))
def newCoolingRate(k):
    sys.exit(lambda dt: -k * dt)
def newTempFunc(k, ambient, initial):
    sys.exit(lambda t: ambient + (initial - ambient) * expf(-k * t))
def newCoolingRateDy(k, ambient):
    cr = newCoolingRate(k)
    sys.exit(lambda _x, obj: cr(obj - ambient))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    k = 0.07
    tempRoom = 20.0
    tempObject = 100.0
    fcr = newCoolingRateDy(k, tempRoom)
    analytic = newTempFunc(k, tempRoom, tempObject)
    for step in [2.0, 5.0, 10.0]:
        print("Step size = " + fmtF(step, 0, 1))
        print(" Time Euler's Analytic")
        temp = tempObject
        time = 0.0
        while time <= 100.0:
            line = fmtF(time, 5, 1) + " " + fmtF(temp, 7, 3) + " " + fmtF(analytic(time), 7, 3)
            print(line)
            temp = eulerStep(fcr, time, temp, step)
            time = time + step
        print("")
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
