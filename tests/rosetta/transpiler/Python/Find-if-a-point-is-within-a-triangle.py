# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:14 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def sign(px, py, ax, ay, bx, by):
    return (px - bx) * (ay - by) - (ax - bx) * (py - by)
def pointInTriangle(px, py, ax, ay, bx, by, cx, cy):
    d1 = sign(px, py, ax, ay, bx, by)
    d2 = sign(px, py, bx, by, cx, cy)
    d3 = sign(px, py, cx, cy, ax, ay)
    hasNeg = d1 < 0.0 or d2 < 0.0 or d3 < 0.0
    hasPos = d1 > 0.0 or d2 > 0.0 or d3 > 0.0
    return not (hasNeg and hasPos)
points = [[0.0, 0.0], [0.0, 1.0], [3.0, 1.0]]
tri1 = [[3.0 / 2.0, 12.0 / 5.0], [51.0 / 10.0, -31.0 / 10.0], [-19.0 / 5.0, 1.2]]
print("Triangle is", tri1)
ax = tri1[0][0]
ay = tri1[0][1]
bx = tri1[1][0]
by = tri1[1][1]
cx = tri1[2][0]
cy = tri1[2][1]
for p in points:
    inside = pointInTriangle(p[0], p[1], ax, ay, bx, by, cx, cy)
    print("Point", p, "is within triangle?", inside)
print("")
tri2 = [[1.0 / 10.0, 1.0 / 9.0], [100.0 / 8.0, 100.0 / 3.0], [100.0 / 4.0, 100.0 / 9.0]]
print("Triangle is", tri2)
ax = tri2[0][0]
ay = tri2[0][1]
bx = tri2[1][0]
by = tri2[1][1]
cx = tri2[2][0]
cy = tri2[2][1]
x = ax + (3.0 / 7.0) * (bx - ax)
y = ay + (3.0 / 7.0) * (by - ay)
pt = [x, y]
inside = pointInTriangle(x, y, ax, ay, bx, by, cx, cy)
print("Point", pt, "is within triangle ?", ("True" if inside else "False"))
print("")
tri3 = [[1.0 / 10.0, 1.0 / 9.0], [100.0 / 8.0, 100.0 / 3.0], [-100.0 / 8.0, 100.0 / 6.0]]
print("Triangle is", tri3)
cx = tri3[2][0]
cy = tri3[2][1]
inside = pointInTriangle(x, y, ax, ay, bx, by, cx, cy)
print("Point", pt, "is within triangle ?", ("True" if inside else "False"))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
