# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def show(xs):
    s = ""
    i = 0
    while i < len(xs):
        s = s + str(xs[i])
        if i < len(xs) - 1:
            s = s + " "
        i = i + 1
    sys.exit(s)
def gen(init, n):
    b = init
    res = []
    sum = 0
    for x in b:
        res = res + [x]
        sum = sum + x
    while len(res) < n:
        next = sum
        res = res + [next]
        sum = sum + next - b[0]
        b = b[1:len(b)] + [next]
    sys.exit(res)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    n = 10
    print(" Fibonacci: " + show(gen([1, 1], n)))
    print("Tribonacci: " + show(gen([1, 1, 2], n)))
    print("Tetranacci: " + show(gen([1, 1, 2, 4], n)))
    print("     Lucas: " + show(gen([2, 1], n)))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
