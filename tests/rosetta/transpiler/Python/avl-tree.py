# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 14:09 +0700
import sys
sys.set_int_max_str_digits(0)

def Node(data):
    return {"Data": data, "Balance": 0, "Link": [None, None]}
def getLink(n, dir):
    return n["Link"][dir]
def setLink(n, dir, v):
    links = n["Link"]
    links[dir] = v
    n["Link"] = links
def opp(dir):
    return 1 - dir
def single(root, dir):
    tmp = getLink(root, opp(dir))
    setLink(root, opp(dir), getLink(tmp, dir))
    setLink(tmp, dir, root)
    return tmp
def double(root, dir):
    tmp = getLink(getLink(root, opp(dir)), dir)
    setLink(getLink(root, opp(dir)), dir, getLink(tmp, opp(dir)))
    setLink(tmp, opp(dir), getLink(root, opp(dir)))
    setLink(root, opp(dir), tmp)
    tmp = getLink(root, opp(dir))
    setLink(root, opp(dir), getLink(tmp, dir))
    setLink(tmp, dir, root)
    return tmp
def adjustBalance(root, dir, bal):
    n = getLink(root, dir)
    nn = getLink(n, opp(dir))
    if nn["Balance"] == 0:
        root["Balance"] = 0
        n["Balance"] = 0
    else:
        if nn["Balance"] == bal:
            root["Balance"] = -bal
            n["Balance"] = 0
        else:
            root["Balance"] = 0
            n["Balance"] = bal
    nn["Balance"] = 0
def insertBalance(root, dir):
    n = getLink(root, dir)
    bal = 2 * dir - 1
    if n["Balance"] == bal:
        root["Balance"] = 0
        n["Balance"] = 0
        return single(root, opp(dir))
    adjustBalance(root, dir, bal)
    return double(root, opp(dir))
def insertR(root, data):
    if root == None:
        return {"node": Node(data), "done": False}
    node = root
    dir = 0
    if int(node["Data"]) < data:
        dir = 1
    r = insertR(getLink(node, dir), data)
    setLink(node, dir, r["node"])
    if r["done"]:
        return {"node": node, "done": True}
    node["Balance"] = int(node["Balance"]) + (2 * dir - 1)
    if node["Balance"] == 0:
        return {"node": node, "done": True}
    if node["Balance"] == 1 or node["Balance"] == -1:
        return {"node": node, "done": False}
    return {"node": insertBalance(node, dir), "done": True}
def Insert(tree, data):
    r = insertR(tree, data)
    return r["node"]
def removeBalance(root, dir):
    n = getLink(root, opp(dir))
    bal = 2 * dir - 1
    if n["Balance"] == -bal:
        root["Balance"] = 0
        n["Balance"] = 0
        return {"node": single(root, dir), "done": False}
    if n["Balance"] == bal:
        adjustBalance(root, opp(dir), -bal)
        return {"node": double(root, dir), "done": False}
    root["Balance"] = -bal
    n["Balance"] = bal
    return {"node": single(root, dir), "done": True}
def removeR(root, data):
    if root == None:
        return {"node": None, "done": False}
    node = root
    if int(node["Data"]) == data:
        if getLink(node, 0) == None:
            return {"node": getLink(node, 1), "done": False}
        if getLink(node, 1) == None:
            return {"node": getLink(node, 0), "done": False}
        heir = getLink(node, 0)
        while getLink(heir, 1) != None:
            heir = getLink(heir, 1)
        node["Data"] = heir["Data"]
        data = int(heir["Data"])
    dir = 0
    if int(node["Data"]) < data:
        dir = 1
    r = removeR(getLink(node, dir), data)
    setLink(node, dir, r["node"])
    if r["done"]:
        return {"node": node, "done": True}
    node["Balance"] = int(node["Balance"]) + 1 - 2 * dir
    if node["Balance"] == 1 or node["Balance"] == -1:
        return {"node": node, "done": True}
    if node["Balance"] == 0:
        return {"node": node, "done": False}
    return removeBalance(node, dir)
def Remove(tree, data):
    r = removeR(tree, data)
    return r["node"]
def indentStr(n):
    s = ""
    i = 0
    while i < n:
        s = s + " "
        i = i + 1
    return s
def dumpNode(node, indent, comma):
    sp = indentStr(indent)
    if node == None:
        line = sp + "null"
        if comma:
            line = line + ","
        print(line)
    else:
        print(sp + "{")
        print(indentStr(indent + 3) + "\"Data\": " + str(node["Data"]) + ",")
        print(indentStr(indent + 3) + "\"Balance\": " + str(node["Balance"]) + ",")
        print(indentStr(indent + 3) + "\"Link\": [")
        dumpNode(getLink(node, 0), indent + 6, True)
        dumpNode(getLink(node, 1), indent + 6, False)
        print(indentStr(indent + 3) + "]")
        end = sp + "}"
        if comma:
            end = end + ","
        print(end)
def dump(node, indent):
    dumpNode(node, indent, False)
def main():
    tree = None
    print("Empty tree:")
    dump(tree, 0)
    print("")
    print("Insert test:")
    tree = Insert(tree, 3)
    tree = Insert(tree, 1)
    tree = Insert(tree, 4)
    tree = Insert(tree, 1)
    tree = Insert(tree, 5)
    dump(tree, 0)
    print("")
    print("Remove test:")
    tree = Remove(tree, 3)
    tree = Remove(tree, 1)
    t = tree
    t["Balance"] = 0
    tree = t
    dump(tree, 0)
main()
