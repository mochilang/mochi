# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 00:39 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

INF = 1000000000
graph = {}
def addEdge(u, v, w):
    if not (u in graph):
        graph[u] = {}
    graph.get(u)[v] = w
    if not (v in graph):
        graph[v] = {}
def removeAt(xs, idx):
    out = []
    i = 0
    for x in xs:
        if i != idx:
            out = out + [x]
        i = i + 1
    return out
def dijkstra(source):
    dist = {}
    prev = {}
    for v in graph:
        dist[v] = INF
        prev[v] = ""
    dist[source] = 0
    q = []
    for v in graph:
        q = q + [v]
    while len(q) > 0:
        bestIdx = 0
        u = q[0]
        i = 1
        while i < len(q):
            v = q[i]
            if dist[v] < dist[u]:
                u = v
                bestIdx = i
            i = i + 1
        q = removeAt(q, bestIdx)
        for v in graph.get(u):
            alt = dist[u] + graph.get(u)[v]
            if alt < dist[v]:
                dist[v] = alt
                prev[v] = u
    return {"dist": dist, "prev": prev}
def path(prev, v):
    s = v
    cur = v
    while prev[cur] != "":
        cur = prev[cur]
        s = cur + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    addEdge("a", "b", 7)
    addEdge("a", "c", 9)
    addEdge("a", "f", 14)
    addEdge("b", "c", 10)
    addEdge("b", "d", 15)
    addEdge("c", "d", 11)
    addEdge("c", "f", 2)
    addEdge("d", "e", 6)
    addEdge("e", "f", 9)
    res = dijkstra("a")
    dist = res.get("dist")
    prev = res.get("prev")
    print("Distance to e: " + str(dist.get("e")) + ", Path: " + path(prev, "e"))
    print("Distance to f: " + str(dist.get("f")) + ", Path: " + path(prev, "f"))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
