# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def toUnsigned16(n):
    u = n
    if u < 0:
        u = u + 65536
    return u % 65536
def bin16(n):
    u = toUnsigned16(n)
    bits = ""
    mask = 32768
    for i in range(0, 16):
        if u >= mask:
            bits = bits + "1"
            u = u - mask
        else:
            bits = bits + "0"
        mask = int((mask // 2))
    return bits
def bit_and(a, b):
    ua = toUnsigned16(a)
    ub = toUnsigned16(b)
    res = 0
    bit = 1
    for i in range(0, 16):
        if ua % 2 == 1 and ub % 2 == 1:
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def bit_or(a, b):
    ua = toUnsigned16(a)
    ub = toUnsigned16(b)
    res = 0
    bit = 1
    for i in range(0, 16):
        if ua % 2 == 1 or ub % 2 == 1:
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def bit_xor(a, b):
    ua = toUnsigned16(a)
    ub = toUnsigned16(b)
    res = 0
    bit = 1
    for i in range(0, 16):
        abit = ua % 2
        bbit = ub % 2
        if (abit == 1 and bbit == 0) or (abit == 0 and bbit == 1):
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def bit_not(a):
    ua = toUnsigned16(a)
    return 65535 - ua
def shl(a, b):
    ua = toUnsigned16(a)
    i = 0
    while i < b:
        ua = (ua * 2) % 65536
        i = i + 1
    return ua
def shr(a, b):
    ua = toUnsigned16(a)
    i = 0
    while i < b:
        ua = int((ua // 2))
        i = i + 1
    return ua
def las(a, b):
    return shl(a, b)
def ras(a, b):
    val = a
    i = 0
    while i < b:
        if val >= 0:
            val = int((val // 2))
        else:
            val = int(((val - 1) // 2))
        i = i + 1
    return toUnsigned16(val)
def rol(a, b):
    ua = toUnsigned16(a)
    left = shl(ua, b)
    right = shr(ua, 16 - b)
    return toUnsigned16(left + right)
def ror(a, b):
    ua = toUnsigned16(a)
    right = shr(ua, b)
    left = shl(ua, 16 - b)
    return toUnsigned16(left + right)
def bitwise(a, b):
    print("a:   " + bin16(a))
    print("b:   " + bin16(b))
    print("and: " + bin16(bit_and(a, b)))
    print("or:  " + bin16(bit_or(a, b)))
    print("xor: " + bin16(bit_xor(a, b)))
    print("not: " + bin16(bit_not(a)))
    if b < 0:
        print("Right operand is negative, but all shifts require an unsigned right operand (shift distance).")
        return None
    print("shl: " + bin16(shl(a, b)))
    print("shr: " + bin16(shr(a, b)))
    print("las: " + bin16(las(a, b)))
    print("ras: " + bin16(ras(a, b)))
    print("rol: " + bin16(rol(a, b)))
    print("ror: " + bin16(ror(a, b)))
bitwise(-460, 6)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
