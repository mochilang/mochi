# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 23:57 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = parts + [cur]
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + "".join(s[i:i + 1])
            i = i + 1
    parts = parts + [cur]
    return parts
def rstripEmpty(words):
    n = len(words)
    while n > 0 and words[n - 1] == "":
        n = n - 1
    return words[:n]
def spaces(n):
    out = ""
    i = 0
    while i < n:
        out = out + " "
        i = i + 1
    return out
def pad(word, width, align):
    diff = width - len(word)
    if align == 0:
        return word + spaces(diff)
    if align == 2:
        return spaces(diff) + word
    left = int((diff // 2))
    right = diff - left
    return spaces(left) + word + spaces(right)
def newFormatter(text):
    lines = text.split("\n")
    fmtLines = []
    width = []
    i = 0
    while i < len(lines):
        if len(lines[i]) == 0:
            i = i + 1
            continue
        words = rstripEmpty(lines[i].split("$"))
        fmtLines = fmtLines + [words]
        j = 0
        while j < len(words):
            wlen = len(words[j])
            if j == len(width):
                width = width + [wlen]
            else:
                if wlen > width[j]:
                    width[j] = wlen
            j = j + 1
        i = i + 1
    return {"text": fmtLines, "width": width}
def printFmt(f, align):
    lines = f.get("text")
    width = f.get("width")
    i = 0
    while i < len(lines):
        words = lines[i]
        line = ""
        j = 0
        while j < len(words):
            line = line + pad(words[j], width[j], align) + " "
            j = j + 1
        print(line)
        i = i + 1
    print("")
text = "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" + "column$are$separated$by$at$least$one$space.\n" + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" + "justified,$right$justified,$or$center$justified$within$its$column."
f = newFormatter(text)
printFmt(f, 0)
printFmt(f, 1)
printFmt(f, 2)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
