# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 17:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def image():
    return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]]
def histogram(g, bins):
    if bins <= 0:
        bins = len(g[0])
    h = []
    i = 0
    while i < bins:
        h = h + [0]
        i = i + 1
    y = 0
    while y < len(g):
        row = g[y]
        x = 0
        while x < len(row):
            p = row[x]
            idx = int(((p * (bins - 1)) // 65535))
            h[idx] = h[idx] + 1
            x = x + 1
        y = y + 1
    return h
def medianThreshold(h):
    lb = 0
    ub = len(h) - 1
    lSum = 0
    uSum = 0
    while lb <= ub:
        if lSum + h[lb] < uSum + h[ub]:
            lSum = lSum + h[lb]
            lb = lb + 1
        else:
            uSum = uSum + h[ub]
            ub = ub - 1
    return int(((ub * 65535) / len(h)))
def threshold(g, t):
    out = []
    y = 0
    while y < len(g):
        row = g[y]
        newRow = []
        x = 0
        while x < len(row):
            if row[x] < t:
                newRow = newRow + [0]
            else:
                newRow = newRow + [65535]
            x = x + 1
        out = out + [newRow]
        y = y + 1
    return out
def printImage(g):
    y = 0
    while y < len(g):
        row = g[y]
        line = ""
        x = 0
        while x < len(row):
            if row[x] == 0:
                line = line + "0"
            else:
                line = line + "1"
            x = x + 1
        print(line)
        y = y + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    img = image()
    h = histogram(img, 0)
    print("Histogram: " + str(h))
    t = medianThreshold(h)
    print("Threshold: " + str(t))
    bw = threshold(img, t)
    printImage(bw)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
