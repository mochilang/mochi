# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 07:52 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
width = 60
height = int((float(width) * 0.86602540378))
iterations = 5000
grid = []
y = 0
while y < height:
    line = []
    x = 0
    while x < width:
        line = line + [" "]
        x = x + 1
    grid = grid + [line]
    y = y + 1
def randInt(s, n):
    next = (s * 1664525 + 1013904223) % 2147483647
    return [next, next % n]
seed = 1
vertices = [[0, height - 1], [width - 1, height - 1], [int((width // 2)), 0]]
px = int((width // 2))
py = int((height // 2))
i = 0
while i < iterations:
    r = randInt(seed, 3)
    seed = r[0]
    idx = int(r[1])
    v = vertices[idx]
    px = int(((px + v[0]) / 2))
    py = int(((py + v[1]) / 2))
    if px >= 0 and px < width and py >= 0 and py < height:
        grid[py][px] = "*"
    i = i + 1
y = 0
while y < height:
    line = ""
    x = 0
    while x < width:
        line = line + grid[y][x]
        x = x + 1
    print(line)
    y = y + 1
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
