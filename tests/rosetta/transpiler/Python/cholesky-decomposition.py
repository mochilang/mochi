# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def cholesky(a):
    n = len(a)
    l = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            row = row + [0.0]
            j = j + 1
        l = l + [row]
        i = i + 1
    i = 0
    while i < n:
        j = 0
        while j <= i:
            sum = a[i][j]
            k = 0
            while k < j:
                sum = sum - l[i][k] * l[j][k]
                k = k + 1
            if i == j:
                l[i][j] = sqrtApprox(sum)
            else:
                l[i][j] = sum / l[j][j]
            j = j + 1
        i = i + 1
    return l
def printMat(m):
    i = 0
    while i < len(m):
        line = ""
        j = 0
        while j < len(m[i]):
            line = line + str(m[i][j])
            if j < len(m[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def demo(a):
    print("A:")
    printMat(a)
    l = cholesky(a)
    print("L:")
    printMat(l)
demo([[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]])
demo([[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]])
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
