# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def newTerm(a, b):
    return {"a": a, "b": b}
def cfSqrt2(nTerms):
    f = []
    n = 0
    while n < nTerms:
        f = f + [newTerm(2, 1)]
        n = n + 1
    if nTerms > 0:
        f[0]["a"] = 1
    return f
def cfNap(nTerms):
    f = []
    n = 0
    while n < nTerms:
        f = f + [newTerm(n, n - 1)]
        n = n + 1
    if nTerms > 0:
        f[0]["a"] = 2
    if nTerms > 1:
        f[1]["b"] = 1
    return f
def cfPi(nTerms):
    f = []
    n = 0
    while n < nTerms:
        g = 2 * n - 1
        f = f + [newTerm(6, g * g)]
        n = n + 1
    if nTerms > 0:
        f[0]["a"] = 3
    return f
def real(f):
    r = 0.0
    i = len(f) - 1
    while i > 0:
        r = (float(f[i].get("b"))) / ((float(f[i].get("a"))) + r)
        i = i - 1
    if len(f) > 0:
        r = r + (float(f[0].get("a")))
    return r
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("sqrt2: " + str(real(cfSqrt2(20))))
    print("nap:   " + str(real(cfNap(20))))
    print("pi:    " + str(real(cfPi(20))))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
