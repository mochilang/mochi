# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 15:05 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

def pow2(n):
    v = 1
    i = 0
    while i < n:
        v = v * 2
        i = i + 1
    return v
def lshift(x, n):
    return x * pow2(n)
def rshift(x, n):
    return x // pow2(n)
@dataclass
class Writer:
    order: str
    bits: int
    nbits: int
    data: [int]

def NewWriter(order):
    return Writer(order=order, bits=0, nbits=0, data=[])
def writeBitsLSB(w, c, width):
    w = dataclasses.replace(w, bits=w.bits + lshift(c, w.nbits))
    w = dataclasses.replace(w, nbits=w.nbits + width)
    while w.nbits >= 8:
        b = w.bits % 256
        w = dataclasses.replace(w, data=w.data + [b])
        w = dataclasses.replace(w, bits=rshift(w.bits, 8))
        w = dataclasses.replace(w, nbits=w.nbits - 8)
    return w
def writeBitsMSB(w, c, width):
    w = dataclasses.replace(w, bits=w.bits + lshift(c, 32 - width - w.nbits))
    w = dataclasses.replace(w, nbits=w.nbits + width)
    while w.nbits >= 8:
        b = rshift(w.bits, 24) % 256
        w = dataclasses.replace(w, data=w.data + [b])
        w = dataclasses.replace(w, bits=w.bits % pow2(24) * 256)
        w = dataclasses.replace(w, nbits=w.nbits - 8)
    return w
def WriteBits(w, c, width):
    if w.order == "LSB":
        return writeBitsLSB(w, c, width)
    return writeBitsMSB(w, c, width)
def CloseWriter(w):
    if w.nbits > 0:
        if w.order == "MSB":
            w = dataclasses.replace(w, bits=rshift(w.bits, 24))
        w = dataclasses.replace(w, data=w.data + [w.bits % 256])
    w = dataclasses.replace(w, bits=0)
    w = dataclasses.replace(w, nbits=0)
    return w
def toBinary(n, bits):
    b = ""
    val = n
    i = 0
    while i < bits:
        b = str(val % 2) + b
        val = val // 2
        i = i + 1
    return b
def bytesToBits(bs):
    out = "["
    i = 0
    while i < len(bs):
        out = out + toBinary(bs[i], 8)
        if i + 1 < len(bs):
            out = out + " "
        i = i + 1
    out = out + "]"
    return out
def ExampleWriter_WriteBits():
    bw = NewWriter("MSB")
    bw = WriteBits(bw, 15, 4)
    bw = WriteBits(bw, 0, 1)
    bw = WriteBits(bw, 19, 5)
    bw = CloseWriter(bw)
    print(bytesToBits(bw.data))
ExampleWriter_WriteBits()
