# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:40 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def sortRunes(s):
    arr = []
    i = 0
    while i < len(s):
        arr = arr + [s[i:i + 1]]
        i = i + 1
    n = len(arr)
    m = 0
    while m < n:
        j = 0
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            j = j + 1
        m = m + 1
    out = ""
    i = 0
    while i < n:
        out = out + arr[i]
        i = i + 1
    return out
def sortStrings(xs):
    res = []
    tmp = xs
    while len(tmp) > 0:
        min = tmp[0]
        idx = 0
        i = 1
        while i < len(tmp):
            if tmp[i] < min:
                min = tmp[i]
                idx = i
            i = i + 1
        res = res + [min]
        out = []
        j = 0
        while j < len(tmp):
            if j != idx:
                out = out + [tmp[j]]
            j = j + 1
        tmp = out
    return res
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    words = ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"]
    groups = {}
    maxLen = 0
    for w in words:
        k = sortRunes(w)
        if not (k in groups):
            groups[k] = [w]
        else:
            groups[k] = groups[k] + [w]
        if len(groups[k]) > maxLen:
            maxLen = len(groups[k])
    printed = {}
    for w in words:
        k = sortRunes(w)
        if len(groups[k]) == maxLen:
            if not (k in printed):
                g = sortStrings(groups[k])
                line = "[" + g[0]
                i = 1
                while i < len(g):
                    line = line + " " + g[i]
                    i = i + 1
                line = line + "]"
                print(line)
                printed[k] = True
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
