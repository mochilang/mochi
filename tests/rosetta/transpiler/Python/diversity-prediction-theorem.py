# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:54 +0700
import sys
sys.set_int_max_str_digits(0)

def pow10(n):
    r = 1.0
    i = 0
    while i < n:
        r = r * 10.0
        i = i + 1
    return r
def formatFloat(f, prec):
    scale = pow10(prec)
    scaled = (f * scale) + 0.5
    n = (int(scaled))
    digits = str(n)
    while len(digits) <= prec:
        digits = "0" + digits
    intPart = digits[0:len(digits) - prec]
    fracPart = digits[len(digits) - prec:len(digits)]
    return intPart + "." + fracPart
def padLeft(s, w):
    res = ""
    n = w - len(s)
    while n > 0:
        res = res + " "
        n = n - 1
    return res + s
def averageSquareDiff(f, preds):
    av = 0.0
    i = 0
    while i < len(preds):
        av = av + (preds[i] - f) * (preds[i] - f)
        i = i + 1
    av = av / (float(len(preds)))
    return av
def diversityTheorem(truth, preds):
    av = 0.0
    i = 0
    while i < len(preds):
        av = av + preds[i]
        i = i + 1
    av = av / (float(len(preds)))
    avErr = averageSquareDiff(truth, preds)
    crowdErr = (truth - av) * (truth - av)
    div = averageSquareDiff(av, preds)
    return [avErr, crowdErr, div]
def main():
    predsArray = [[48.0, 47.0, 51.0], [48.0, 47.0, 51.0, 42.0]]
    truth = 49.0
    i = 0
    while i < len(predsArray):
        preds = predsArray[i]
        res = diversityTheorem(truth, preds)
        print("Average-error : " + padLeft(formatFloat(res[0], 3), 6))
        print("Crowd-error   : " + padLeft(formatFloat(res[1], 3), 6))
        print("Diversity     : " + padLeft(formatFloat(res[2], 3), 6))
        print("")
        i = i + 1
main()
