# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def capitalize(s):
    if len(s) == 0:
        return s
    return s[0:1].upper() + "".join(s[1:len(s)])
small = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
illions = ["", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"]
def say(n):
    t = ""
    if n < 0:
        t = "negative "
        n = -n
    if n < 20:
        return t + small[n]
    else:
        if n < 100:
            t = tens[n // 10]
            s = n % 10
            if s > 0:
                t = t + "-" + small[s]
            return t
        else:
            if n < 1000:
                t = small[n // 100] + " hundred"
                s = n % 100
                if s > 0:
                    t = t + " " + say(s)
                return t
    sx = ""
    i = 0
    nn = n
    while nn > 0:
        p = nn % 1000
        nn = nn // 1000
        if p > 0:
            ix = say(p) + illions[i]
            if sx != "":
                ix = ix + " " + sx
            sx = ix
        i = i + 1
    return t + sx
def fourIsMagic(n):
    s = say(n)
    s = capitalize(s)
    t = s
    while n != 4:
        n = len(s)
        s = say(n)
        t = t + " is " + s + ", " + s
    t = t + " is magic."
    return t
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    nums = [0, 4, 6, 11, 13, 75, 100, 337, -164, 9223372036854775807]
    for n in nums:
        print(fourIsMagic(n))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
