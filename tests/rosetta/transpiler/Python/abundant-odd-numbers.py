# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:22 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def divisors(n):
    divs = [1]
    divs2 = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            j = int((n // i))
            divs = divs + [i]
            if i != j:
                divs2 = divs2 + [j]
        i = i + 1
    j = len(divs2) - 1
    while j >= 0:
        divs = divs + [divs2[j]]
        j = j - 1
    return divs
def sum(xs):
    tot = 0
    for v in xs:
        tot = tot + v
    return tot
def sumStr(xs):
    s = ""
    i = 0
    while i < len(xs):
        s = s + str(xs[i]) + " + "
        i = i + 1
    return s[0:len(s) - 3]
def pad2(n):
    s = str(n)
    if len(s) < 2:
        return " " + s
    return s
def pad5(n):
    s = str(n)
    while len(s) < 5:
        s = " " + s
    return s
def abundantOdd(searchFrom, countFrom, countTo, printOne):
    count = countFrom
    n = searchFrom
    while count < countTo:
        divs = divisors(n)
        tot = sum(divs)
        if tot > n:
            count = count + 1
            if printOne and count < countTo:
                n = n + 2
                continue
            s = sumStr(divs)
            if not printOne:
                print(pad2(count) + ". " + pad5(n) + " < " + s + " = " + str(tot))
            else:
                print(str(n) + " < " + s + " = " + str(tot))
        n = n + 2
    return n
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    max = 25
    print("The first " + str(max) + " abundant odd numbers are:")
    n = abundantOdd(1, 0, max, False)
    print("\nThe one thousandth abundant odd number is:")
    abundantOdd(n, max, 1000, True)
    print("\nThe first abundant odd number above one billion is:")
    abundantOdd(1000000001, 0, 1, True)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
