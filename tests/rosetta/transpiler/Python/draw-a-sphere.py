# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:54 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

@dataclass
class V3:
    x: float
    y: float
    z: float

def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def powf(base, exp):
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def normalize(v):
    len = sqrtApprox(v.x * v.x + v.y * v.y + v.z * v.z)
    return V3(x=v.x / len, y=v.y / len, z=v.z / len)
def dot(a, b):
    d = a.x * b.x + a.y * b.y + a.z * b.z
    if d < 0.0:
        return -d
    return 0.0
def drawSphere(r, k, ambient, light, shades):
    i = -r
    while i <= r:
        x = (float(i)) + 0.5
        line = ""
        j = -(2 * r)
        while j <= 2 * r:
            y = (float(j)) / 2.0 + 0.5
            if x * x + y * y <= (float(r)) * (float(r)):
                zsq = (float(r)) * (float(r)) - x * x - y * y
                vec = normalize(V3(x=x, y=y, z=sqrtApprox(zsq)))
                b = powf(dot(light, vec), k) + ambient
                intensity = int(((1.0 - b) * ((float(len(shades))) - 1.0)))
                if intensity < 0:
                    intensity = 0
                if intensity >= len(shades):
                    intensity = len(shades) - 1
                line = line + "".join(shades[intensity:intensity + 1])
            else:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def main():
    shades = ".:!*oe&#%@"
    light = normalize(V3(x=30.0, y=30.0, z=-50.0))
    drawSphere(20, 4, 0.1, light, shades)
    drawSphere(10, 2, 0.4, light, shades)
main()
