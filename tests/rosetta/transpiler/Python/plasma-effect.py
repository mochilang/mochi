# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
PI = 3.141592653589793
def floorf(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def frac(x):
    return x - floorf(x)
def sinApprox(x):
    term = x
    sum = x
    n = 1
    while n <= 10:
        denom = float(((2 * n) * (2 * n + 1)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    return sum
def sqrtApprox(x):
    if x <= 0:
        return 0.0
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
nframes = 10
w = 32
h = 32
total = 0
f = 1
while f <= nframes:
    y = 0
    while y < h:
        x = 0
        while x < w:
            fx = float(x)
            fy = float(y)
            value = sinApprox(fx / 16.0)
            value = value + sinApprox(fy / 8.0)
            value = value + sinApprox((fx + fy) / 16.0)
            value = value + sinApprox(sqrtApprox(fx * fx + fy * fy) / 8.0)
            value = value + 4.0
            value = value / 8.0
            rem = frac(value + (float(f)) / (float(nframes)))
            ci = int((float(nframes) * rem)) + 1
            total = total + ci
            x = x + 1
        y = y + 1
    f = f + 1
print(total)
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
