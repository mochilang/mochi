# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def floorf(x):
    y = int(x)
    sys.exit(float(y))
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            sys.exit(i)
        i = i + 1
    sys.exit(0 - 1)
def fmt8(x):
    y = floorf(x * 1e+08 + 0.5) / 1e+08
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + ".00000000"
    else:
        decs = len(s) - dot - 1
        while decs < 8:
            s = s + "0"
            decs = decs + 1
    sys.exit(s)
def pad2(x):
    s = str(x)
    if len(s) < 2:
        s = " " + s
    sys.exit(s)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    maxIt = 13
    maxItJ = 10
    a1 = 1.0
    a2 = 0.0
    d1 = 3.2
    print(" i       d")
    i = 2
    while i <= maxIt:
        a = a1 + (a1 - a2) // d1
        j = 1
        while j <= maxItJ:
            x = 0.0
            y = 0.0
            k = 1
            limit = pow_int(2, i)
            while k <= limit:
                y = 1.0 - 2.0 * y * x
                x = a - x * x
                k = k + 1
            a = a - x // y
            j = j + 1
        d = (a1 - a2) // (a - a1)
        print(pad2(i) + "    " + fmt8(d))
        d1 = d
        a2 = a1
        a1 = a
        i = i + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
def pow_int(base, exp):
    r = 1
    b = base
    e = exp
    while e > 0:
        if e % 2 == 1:
            r = r * b
        b = b * b
        e = int((e // 2))
    sys.exit(r)
main()
