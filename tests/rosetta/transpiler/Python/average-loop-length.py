# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 00:48 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def absf(x):
    if x < 0.0:
        return -x
    return x
def floorf(x):
    y = int(x)
    return float(y)
def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return -1
def fmtF(x):
    y = floorf(x * 10000.0 + 0.5) / 10000.0
    s = str(y)
    dot = s.find(".")
    if dot == 0 - 1:
        s = s + ".0000"
    else:
        decs = len(s) - dot - 1
        if decs > 4:
            s = s[0:dot + 5]
        else:
            while decs < 4:
                s = s + "0"
                decs = decs + 1
    return s
def padInt(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def padFloat(x, width):
    s = fmtF(x)
    while len(s) < width:
        s = " " + s
    return s
def avgLen(n):
    tests = 10000
    sum = 0
    seed = 1
    t = 0
    while t < tests:
        visited = []
        i = 0
        while i < n:
            visited = visited + [False]
            i = i + 1
        x = 0
        while not visited[x]:
            visited[x] = True
            sum = sum + 1
            seed = (seed * 1664525 + 1013904223) % 2147483647
            x = seed % n
        t = t + 1
    return (float(sum)) / tests
def ana(n):
    nn = float(n)
    term = 1.0
    sum = 1.0
    i = nn - 1.0
    while i >= 1.0:
        term = term * (i // nn)
        sum = sum + term
        i = i - 1.0
    return sum
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    nmax = 20
    print(" N    average    analytical    (error)")
    print("===  =========  ============  =========")
    n = 1
    while n <= nmax:
        a = avgLen(n)
        b = ana(n)
        err = absf(a - b) / b * 100.0
        line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
        print(line)
        n = n + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
