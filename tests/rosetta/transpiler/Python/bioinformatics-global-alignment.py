# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 01:24 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def padLeft(s, w):
    res = ""
    n = w - len(s)
    while n > 0:
        res = res + " "
        n = n - 1
    return res + s
def indexOfFrom(s, ch, start):
    i = start
    while i < len(s):
        if s[i:i + 1] == ch:
            return i
        i = i + 1
    return -1
def containsStr(s, sub):
    i = 0
    sl = len(s)
    subl = len(sub)
    while i <= sl - subl:
        if s[i:i + subl] == sub:
            return True
        i = i + 1
    return False
def distinct(slist):
    res = []
    for s in slist:
        found = False
        for r in res:
            if r == s:
                found = True
                break
        if not found:
            res = res + [s]
    return res
def permutations(xs):
    if len(xs) <= 1:
        return [xs]
    res = []
    i = 0
    while i < len(xs):
        rest = []
        j = 0
        while j < len(xs):
            if j != i:
                rest = rest + [xs[j]]
            j = j + 1
        subs = permutations(rest)
        for p in subs:
            perm = [xs[i]]
            k = 0
            while k < len(p):
                perm = perm + [p[k]]
                k = k + 1
            res = res + [perm]
        i = i + 1
    return res
def headTailOverlap(s1, s2):
    start = 0
    while True:
        ix = indexOfFrom(s1, s2[0:1], start)
        if ix == 0 - 1:
            return 0
        start = ix
        sublen = len(s1) - start
        if sublen > len(s2):
            sublen = len(s2)
        if s2[0:sublen] == s1[start:start + sublen]:
            return sublen
        start = start + 1
def deduplicate(slist):
    arr = distinct(slist)
    filtered = []
    i = 0
    while i < len(arr):
        s1 = arr[i]
        within = False
        j = 0
        while j < len(arr):
            if j != i and containsStr(arr[j], s1):
                within = True
                break
            j = j + 1
        if not within:
            filtered = filtered + [s1]
        i = i + 1
    return filtered
def joinAll(ss):
    out = ""
    for s in ss:
        out = out + s
    return out
def shortestCommonSuperstring(slist):
    ss = deduplicate(slist)
    shortest = joinAll(ss)
    perms = permutations(ss)
    idx = 0
    while idx < len(perms):
        perm = perms[idx]
        sup = perm[0]
        i = 0
        while i < len(ss) - 1:
            ov = headTailOverlap(perm[i], perm[i + 1])
            sup = sup + "".join(perm[i + 1][ov:len(perm[i + 1])])
            i = i + 1
        if len(sup) < len(shortest):
            shortest = sup
        idx = idx + 1
    return shortest
def printCounts(seq):
    a = 0
    c = 0
    g = 0
    t = 0
    i = 0
    while i < len(seq):
        ch = seq[i:i + 1]
        if ch == "A":
            a = a + 1
        else:
            if ch == "C":
                c = c + 1
            else:
                if ch == "G":
                    g = g + 1
                else:
                    if ch == "T":
                        t = t + 1
        i = i + 1
    total = len(seq)
    print("\nNucleotide counts for " + seq + ":\n")
    print(padLeft("A", 10) + padLeft(str(a), 12))
    print(padLeft("C", 10) + padLeft(str(c), 12))
    print(padLeft("G", 10) + padLeft(str(g), 12))
    print(padLeft("T", 10) + padLeft(str(t), 12))
    print(padLeft("Other", 10) + padLeft(str(total - (a + c + g + t)), 12))
    print("  ____________________")
    print(padLeft("Total length", 14) + padLeft(str(total), 8))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    tests = [["TA", "AAG", "TA", "GAA", "TA"], ["CATTAGGG", "ATTAG", "GGG", "TA"], ["AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"], ["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"]]
    for seqs in tests:
        scs = shortestCommonSuperstring(seqs)
        printCounts(scs)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
