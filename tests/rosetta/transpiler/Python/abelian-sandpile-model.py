# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-25 10:11 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

dim = 16
def newPile(d):
    b = []
    y = 0
    while y < d:
        row = []
        x = 0
        while x < d:
            row = row + [0]
            x = x + 1
        b = b + [row]
        y = y + 1
    return b
def handlePile(pile, x, y):
    if pile[y][x] >= 4:
        pile[y][x] = pile[y][x] - 4
        if y > 0:
            pile[y - 1][x] = pile[y - 1][x] + 1
            if pile[y - 1][x] >= 4:
                pile = handlePile(pile, x, y - 1)
        if x > 0:
            pile[y][x - 1] = pile[y][x - 1] + 1
            if pile[y][x - 1] >= 4:
                pile = handlePile(pile, x - 1, y)
        if y < dim - 1:
            pile[y + 1][x] = pile[y + 1][x] + 1
            if pile[y + 1][x] >= 4:
                pile = handlePile(pile, x, y + 1)
        if x < dim - 1:
            pile[y][x + 1] = pile[y][x + 1] + 1
            if pile[y][x + 1] >= 4:
                pile = handlePile(pile, x + 1, y)
        pile = handlePile(pile, x, y)
    return pile
def drawPile(pile, d):
    chars = [" ", "░", "▓", "█"]
    row = 0
    while row < d:
        line = ""
        col = 0
        while col < d:
            v = pile[row][col]
            if v > 3:
                v = 3
            line = line + chars[v]
            col = col + 1
        print(line)
        row = row + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    pile = newPile(16)
    hdim = 7
    pile[hdim][hdim] = 16
    pile = handlePile(pile, hdim, hdim)
    drawPile(pile, 16)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
