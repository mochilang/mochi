# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 04:31 +0000
import sys
sys.set_int_max_str_digits(0)

def node(cl, le, aa, ri):
    return {"cl": cl, "le": le, "aa": aa, "ri": ri}
def treeString(t):
    if t == None:
        return "E"
    m = t
    return "T(" + m["cl"] + ", " + treeString(m["le"]) + ", " + str(m["aa"]) + ", " + treeString(m["ri"]) + ")"
def balance(t):
    if t == None:
        return t
    m = t
    if m["cl"] != "B":
        return t
    le = m["le"]
    ri = m["ri"]
    if le != None:
        leMap = le
        if leMap["cl"] == "R":
            lele = leMap["le"]
            if lele != None:
                leleMap = lele
                if leleMap["cl"] == "R":
                    return node("R", node("B", leleMap["le"], leleMap["aa"], leleMap["ri"]), leMap["aa"], node("B", leMap["ri"], m["aa"], ri))
            leri = leMap["ri"]
            if leri != None:
                leriMap = leri
                if leriMap["cl"] == "R":
                    return node("R", node("B", leMap["le"], leMap["aa"], leriMap["le"]), leriMap["aa"], node("B", leriMap["ri"], m["aa"], ri))
    if ri != None:
        riMap = ri
        if riMap["cl"] == "R":
            rile = riMap["le"]
            if rile != None:
                rileMap = rile
                if rileMap["cl"] == "R":
                    return node("R", node("B", m["le"], m["aa"], rileMap["le"]), rileMap["aa"], node("B", rileMap["ri"], riMap["aa"], riMap["ri"]))
            riri = riMap["ri"]
            if riri != None:
                ririMap = riri
                if ririMap["cl"] == "R":
                    return node("R", node("B", m["le"], m["aa"], riMap["le"]), riMap["aa"], node("B", ririMap["le"], ririMap["aa"], ririMap["ri"]))
    return t
def ins(tr, x):
    if tr == None:
        return node("R", None, x, None)
    if x < tr["aa"]:
        return balance(node(tr["cl"], ins(tr["le"], x), tr["aa"], tr["ri"]))
    if x > tr["aa"]:
        return balance(node(tr["cl"], tr["le"], tr["aa"], ins(tr["ri"], x)))
    return tr
def insert(tr, x):
    t = ins(tr, x)
    if t == None:
        return None
    m = t
    return node("B", m["le"], m["aa"], m["ri"])
tr = None
i = 1
while i <= 16:
    tr = insert(tr, i)
    i = i + 1
print(treeString(tr))
