# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 23:57 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def node(cl, le, aa, ri):
    return {"cl": cl, "le": le, "aa": aa, "ri": ri}
def treeString(t):
    if t == None:
        return "E"
    m = t
    return "T(" + m.get("cl") + ", " + treeString(m.get("le")) + ", " + str(m.get("aa")) + ", " + treeString(m.get("ri")) + ")"
def balance(t):
    if t == None:
        return t
    m = t
    if m.get("cl") != "B":
        return t
    le = m.get("le")
    ri = m.get("ri")
    if le != None:
        leMap = le
        if leMap.get("cl") == "R":
            lele = leMap.get("le")
            if lele != None:
                leleMap = lele
                if leleMap.get("cl") == "R":
                    return node("R", node("B", leleMap.get("le"), leleMap.get("aa"), leleMap.get("ri")), leMap.get("aa"), node("B", leMap.get("ri"), m.get("aa"), ri))
            leri = leMap.get("ri")
            if leri != None:
                leriMap = leri
                if leriMap.get("cl") == "R":
                    return node("R", node("B", leMap.get("le"), leMap.get("aa"), leriMap.get("le")), leriMap.get("aa"), node("B", leriMap.get("ri"), m.get("aa"), ri))
    if ri != None:
        riMap = ri
        if riMap.get("cl") == "R":
            rile = riMap.get("le")
            if rile != None:
                rileMap = rile
                if rileMap.get("cl") == "R":
                    return node("R", node("B", m.get("le"), m.get("aa"), rileMap.get("le")), rileMap.get("aa"), node("B", rileMap.get("ri"), riMap.get("aa"), riMap.get("ri")))
            riri = riMap.get("ri")
            if riri != None:
                ririMap = riri
                if ririMap.get("cl") == "R":
                    return node("R", node("B", m.get("le"), m.get("aa"), riMap.get("le")), riMap.get("aa"), node("B", ririMap.get("le"), ririMap.get("aa"), ririMap.get("ri")))
    return t
def ins(tr, x):
    if tr == None:
        return node("R", None, x, None)
    if x < tr.get("aa"):
        return balance(node(tr.get("cl"), ins(tr.get("le"), x), tr.get("aa"), tr.get("ri")))
    if x > tr.get("aa"):
        return balance(node(tr.get("cl"), tr.get("le"), tr.get("aa"), ins(tr.get("ri"), x)))
    return tr
def insert(tr, x):
    t = ins(tr, x)
    if t == None:
        return None
    m = t
    return node("B", m.get("le"), m.get("aa"), m.get("ri"))
tr = None
i = 1
while i <= 16:
    tr = insert(tr, i)
    i = i + 1
print(treeString(tr))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
