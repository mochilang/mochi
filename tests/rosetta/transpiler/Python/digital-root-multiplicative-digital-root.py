# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:54 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

@dataclass
class MDRResult:
    mp: int
    mdr: int

def pad(s, width):
    out = s
    while len(out) < width:
        out = " " + out
    return out
def mult(n, base):
    m = 1
    x = n
    b = base
    while x > 0:
        m = m * (x % b)
        x = x // b
    return m
def multDigitalRoot(n, base):
    m = n
    mp = 0
    b = base
    while m >= b:
        m = mult(m, base)
        mp = mp + 1
    return MDRResult(mp=mp, mdr=(int(m)))
def main():
    base = 10
    size = 5
    print(pad("Number", 20) + " " + pad("MDR", 3) + " " + pad("MP", 3))
    nums = [123321, 7739, 893, 899998, 3778888999, 277777788888899]
    i = 0
    while i < len(nums):
        n = nums[i]
        r = multDigitalRoot(n, base)
        print(pad(str(n), 20) + " " + pad(str(r.mdr), 3) + " " + pad(str(r.mp), 3))
        i = i + 1
    print("")
    list = []
    idx = 0
    while idx < base:
        list = list + [[]]
        idx = idx + 1
    cnt = size * base
    n = 0
    b = base
    while cnt > 0:
        r = multDigitalRoot(n, base)
        mdr = r.mdr
        if len(list[mdr]) < size:
            list[mdr] = list[mdr] + [int(n)]
            cnt = cnt - 1
        n = n + 1
    print("MDR: First")
    j = 0
    while j < base:
        print(pad(str(j), 3) + ": " + str(list[j]))
        j = j + 1
main()
