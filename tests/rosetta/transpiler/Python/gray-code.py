# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def xor(a, b):
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 or y > 0:
        if ((x % 2 + y % 2) % 2 == 1):
            res = res + bit
        x = x // 2
        y = y // 2
        bit = bit * 2
    return res
def enc(b):
    return xor(b, b // 2)
def dec(g):
    b = 0
    x = g
    while x > 0:
        b = xor(b, x)
        x = x // 2
    return b
def binary(n):
    if n == 0:
        return "0"
    s = ""
    x = n
    while x > 0:
        if x % 2 == 1:
            s = "1" + s
        else:
            s = "0" + s
        x = x // 2
    return s
def pad5(s):
    p = s
    while len(p) < 5:
        p = "0" + p
    return p
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    print("decimal  binary   gray    decoded")
    b = 0
    while b < 32:
        g = enc(b)
        d = dec(g)
        print("  " + pad5(binary(b)) + "   " + pad5(binary(g)) + "   " + pad5(binary(d)) + "  " + str(d))
        b = b + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
