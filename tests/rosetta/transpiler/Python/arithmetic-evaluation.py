# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 00:41 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Parser:
    expr: str
    pos: int

@dataclass
class Res:
    v: int
    p: Parser

def skipWS(p):
    i = p.pos
    while i < len(p.expr) and p.expr[i:i + 1] == " ":
        i = i + 1
    p = dataclasses.replace(p, pos=i)
    return p
def parseIntStr(str):
    i = 0
    n = 0
    while i < len(str):
        n = n * 10 + (int(str[i:i + 1])) - 48
        i = i + 1
    return n
def parseNumber(p):
    p = skipWS(p)
    start = p.pos
    while p.pos < len(p.expr):
        ch = p.expr[p.pos:p.pos + 1]
        if ch >= "0" and ch <= "9":
            p = dataclasses.replace(p, pos=p.pos + 1)
        else:
            break
    token = p.expr[start:p.pos]
    return Res(v=parseIntStr(token), p=p)
def parseFactor(p):
    p = skipWS(p)
    if p.pos < len(p.expr) and p.expr[p.pos:p.pos + 1] == "(":
        p = dataclasses.replace(p, pos=p.pos + 1)
        r = parseExpr(p)
        v = r.v
        p = r.p
        p = skipWS(p)
        if p.pos < len(p.expr) and p.expr[p.pos:p.pos + 1] == ")":
            p = dataclasses.replace(p, pos=p.pos + 1)
        return Res(v=v, p=p)
    if p.pos < len(p.expr) and p.expr[p.pos:p.pos + 1] == "-":
        p = dataclasses.replace(p, pos=p.pos + 1)
        r = parseFactor(p)
        v = r.v
        p = r.p
        return Res(v=-v, p=p)
    return parseNumber(p)
def powInt(base, exp):
    r = 1
    b = base
    e = exp
    while e > 0:
        if e % 2 == 1:
            r = r * b
        b = b * b
        e = e // int(2)
    return r
def parsePower(p):
    r = parseFactor(p)
    v = r.v
    p = r.p
    while True:
        p = skipWS(p)
        if p.pos < len(p.expr) and p.expr[p.pos:p.pos + 1] == "^":
            p = dataclasses.replace(p, pos=p.pos + 1)
            r2 = parseFactor(p)
            rhs = r2.v
            p = r2.p
            v = powInt(v, rhs)
        else:
            break
    return Res(v=v, p=p)
def parseTerm(p):
    r = parsePower(p)
    v = r.v
    p = r.p
    while True:
        p = skipWS(p)
        if p.pos < len(p.expr):
            op = p.expr[p.pos:p.pos + 1]
            if op == "*":
                p = dataclasses.replace(p, pos=p.pos + 1)
                r2 = parsePower(p)
                rhs = r2.v
                p = r2.p
                v = v * rhs
                continue
            if op == "/":
                p = dataclasses.replace(p, pos=p.pos + 1)
                r2 = parsePower(p)
                rhs = r2.v
                p = r2.p
                v = v / int(rhs)
                continue
        break
    return Res(v=v, p=p)
def parseExpr(p):
    r = parseTerm(p)
    v = r.v
    p = r.p
    while True:
        p = skipWS(p)
        if p.pos < len(p.expr):
            op = p.expr[p.pos:p.pos + 1]
            if op == "+":
                p = dataclasses.replace(p, pos=p.pos + 1)
                r2 = parseTerm(p)
                rhs = r2.v
                p = r2.p
                v = v + rhs
                continue
            if op == "-":
                p = dataclasses.replace(p, pos=p.pos + 1)
                r2 = parseTerm(p)
                rhs = r2.v
                p = r2.p
                v = v - rhs
                continue
        break
    return Res(v=v, p=p)
def evalExpr(expr):
    p = Parser(expr=expr, pos=0)
    r = parseExpr(p)
    return r.v
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    expr = "2*(3-1)+2*5"
    print(expr + " = " + str(evalExpr(expr)))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
