# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-31 00:29 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def makeInf():
    x = 1.0
    i = 0
    while i < 400:
        x = x * 10.0
        i = i + 1
    return x
def makeMax():
    x = 1.0
    i = 0
    while i < 308:
        x = x * 10.0
        i = i + 1
    return x
def isNaN(x):
    return x != x
def validateNaN(n, op):
    if isNaN(n):
        print(op + " -> NaN")
    else:
        print("!!! Expected NaN from", op, " Found", n)
def validateZero(n, op):
    if n == 0:
        print(op + " -> 0")
    else:
        print("!!! Expected 0 from", op, " Found", n)
def validateGT(a, b, op):
    if a > b:
        print(op)
    else:
        print("!!! Expected", op, " Found not true.")
def validateNE(a, b, op):
    if a == b:
        print("!!! Expected", op, " Found not true.")
    else:
        print(op)
def validateEQ(a, b, op):
    if a == b:
        print(op)
    else:
        print("!!! Expected", op, " Found not true.")
def main():
    negZero = -0.0
    posInf = makeInf()
    negInf = -posInf
    nan = posInf // posInf
    maxVal = makeMax()
    print(negZero, posInf, negInf, nan)
    print(negZero, posInf, negInf, nan)
    print("")
    validateNaN(negInf + posInf, "-Inf + Inf")
    validateNaN(0.0 * posInf, "0 * Inf")
    validateNaN(posInf // posInf, "Inf / Inf")
    validateNaN(posInf % 1.0, "Inf % 1")
    validateNaN(1.0 + nan, "1 + NaN")
    validateZero(1.0 / posInf, "1 / Inf")
    validateGT(posInf, maxVal, "Inf > max value")
    validateGT(-maxVal, negInf, "-Inf < max neg value")
    validateNE(nan, nan, "NaN != NaN")
    validateEQ(negZero, 0.0, "-0 == 0")
main()
