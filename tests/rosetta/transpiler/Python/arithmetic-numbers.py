# Code generated by Mochi transpiler.
# Version 0.10.37, generated on 2025-07-23 14:09 +0700
import sys
sys.set_int_max_str_digits(0)

def sieve(limit):
    spf = []
    i = 0
    while i <= limit:
        spf = spf + [0]
        i = i + 1
    i = 2
    while i <= limit:
        if spf[i] == 0:
            spf[i] = i
            if i * i <= limit:
                j = i * i
                while j <= limit:
                    if spf[j] == 0:
                        spf[j] = i
                    j = j + i
        i = i + 1
    return spf
def primesFrom(spf, limit):
    primes = []
    i = 3
    while i <= limit:
        if spf[i] == i:
            primes = primes + [i]
        i = i + 1
    return primes
def pad3(n):
    s = str(n)
    while len(s) < 3:
        s = " " + s
    return s
def commatize(n):
    s = str(n)
    out = ""
    i = len(s) - 1
    c = 0
    while i >= 0:
        out = "".join(s[i:i + 1]) + out
        c = c + 1
        if c % 3 == 0 and i > 0:
            out = "," + out
        i = i - 1
    return out
def primeCount(primes, last, spf):
    lo = 0
    hi = len(primes)
    while lo < hi:
        mid = int(lo + hi // 2)
        if primes[mid] < last:
            lo = mid + 1
        else:
            hi = mid
    count = lo + 1
    if spf[last] != last:
        count = count - 1
    return count
def arithmeticNumbers(limit, spf):
    arr = [1]
    n = 3
    while len(arr) < limit:
        if spf[n] == n:
            arr = arr + [n]
        else:
            x = n
            sigma = 1
            tau = 1
            while x > 1:
                p = spf[x]
                if p == 0:
                    p = x
                cnt = 0
                power = p
                sum = 1
                while x % p == 0:
                    x = x // p
                    cnt = cnt + 1
                    sum = sum + power
                    power = power * p
                sigma = sigma * sum
                tau = tau * (cnt + 1)
            if sigma % tau == 0:
                arr = arr + [n]
        n = n + 1
    return arr
def main():
    limit = 1228663
    spf = sieve(limit)
    primes = primesFrom(spf, limit)
    arr = arithmeticNumbers(1000000, spf)
    print("The first 100 arithmetic numbers are:")
    i = 0
    while i < 100:
        line = ""
        j = 0
        while j < 10:
            line = line + pad3(arr[i + j])
            if j < 9:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 10
    for x in [1000, 10000, 100000, 1000000]:
        last = arr[x - 1]
        lastc = commatize(last)
        print("\nThe " + commatize(x) + "th arithmetic number is: " + lastc)
        pc = primeCount(primes, last, spf)
        comp = x - pc - 1
        print("The count of such numbers <= " + lastc + " which are composite is " + commatize(comp) + ".")
main()
