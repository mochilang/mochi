# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 18:31 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)

@dataclass
class Field:
    s: [[bool]]
    w: int
    h: int

@dataclass
class Life:
    a: Field
    b: Field
    w: int
    h: int

seed = 1
def randN(n):
    global seed
    seed = (seed * 1664525 + 1013904223) % 2147483647
    return seed % n
def newField(w, h):
    rows = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            row = row + [False]
            x = x + 1
        rows = rows + [row]
        y = y + 1
    return Field(s=rows, w=w, h=h)
def setCell(f, x, y, b):
    rows = f.s
    row = rows[y]
    row[x] = b
    rows[y] = row
    f = dataclasses.replace(f, s=rows)
def state(f, x, y):
    while y < 0:
        y = y + f.h
    while x < 0:
        x = x + f.w
    return f.s[y % f.h][x % f.w]
def nextState(f, x, y):
    count = 0
    dy = -1
    while dy <= 1:
        dx = -1
        while dx <= 1:
            if not (dx == 0 and dy == 0) and state(f, x + dx, y + dy):
                count = count + 1
            dx = dx + 1
        dy = dy + 1
    return count == 3 or (count == 2 and state(f, x, y))
def newLife(w, h):
    a = newField(w, h)
    i = 0
    while i < (w * h // 2):
        setCell(a, randN(w), randN(h), True)
        i = i + 1
    return Life(a=a, b=newField(w, h), w=w, h=h)
def step(l):
    y = 0
    while y < l.h:
        x = 0
        while x < l.w:
            setCell(l.b, x, y, nextState(l.a, x, y))
            x = x + 1
        y = y + 1
    tmp = l.a
    l = dataclasses.replace(l, a=l.b)
    l = dataclasses.replace(l, b=tmp)
def lifeString(l):
    out = ""
    y = 0
    while y < l.h:
        x = 0
        while x < l.w:
            if state(l.a, x, y):
                out = out + "*"
            else:
                out = out + " "
            x = x + 1
        out = out + "\n"
        y = y + 1
    return out
def main():
    l = newLife(80, 15)
    i = 0
    while i < 300:
        step(l)
        print("\f")
        print(lifeString(l))
        i = i + 1
main()
