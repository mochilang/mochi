# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:59 +0700
import sys
sys.set_int_max_str_digits(0)

def contains(xs, n):
    i = 0
    while i < len(xs):
        if xs[i] == n:
            return True
        i = i + 1
    return False
def gcd(a, b):
    x = a
    y = b
    while y != 0:
        t = x % y
        x = y
        y = t
    if x < 0:
        x = -x
    return x
def sortInts(xs):
    arr = xs
    n = len(arr)
    i = 0
    while i < n:
        j = 0
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            j = j + 1
        i = i + 1
    return arr
def areSame(s, t):
    if len(s) != len(t):
        return False
    a = sortInts(s)
    b = sortInts(t)
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def printSlice(start, seq):
    first = []
    i = 0
    while i < 30:
        first = first + [seq[i]]
        i = i + 1
    pad = ""
    if start < 10:
        pad = " "
    print("EKG(" + pad + str(start) + "): " + str(first))
def main():
    limit = 100
    starts = [2, 5, 7, 9, 10]
    ekg = []
    s = 0
    while s < len(starts):
        seq = [1, starts[s]]
        n = 2
        while n < limit:
            i = 2
            done = False
            while not done:
                if not i in seq and gcd(seq[n - 1], i) > 1:
                    seq = seq + [i]
                    done = True
                i = i + 1
            n = n + 1
        ekg = ekg + [seq]
        printSlice(starts[s], seq)
        s = s + 1
    i = 2
    found = False
    while i < limit:
        if ekg[1][i] == ekg[2][i] and areSame(ekg[1][:i], ekg[2][:i]):
            print("\nEKG(5) and EKG(7) converge at term " + str(i + 1))
            found = True
            break
        i = i + 1
    if not found:
        print("\nEKG5(5) and EKG(7) do not converge within " + str(limit) + " terms")
main()
