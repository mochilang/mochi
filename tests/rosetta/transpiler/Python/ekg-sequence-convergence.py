# Code generated by Mochi transpiler.
# Version 0.10.57, generated on 2025-08-04 16:12 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def contains(xs, n):
    i = 0
    while i < len(xs):
        if xs[i] == n:
            return True
        i = i + 1
    return False
def gcd(a, b):
    x = a
    y = b
    while y != 0:
        t = x % y
        x = y
        y = t
    if x < 0:
        x = -x
    return x
def sortInts(xs):
    arr = xs
    n = len(arr)
    i = 0
    while i < n:
        j = 0
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            j = j + 1
        i = i + 1
    return arr
def areSame(s, t):
    if len(s) != len(t):
        return False
    a = sortInts(s)
    b = sortInts(t)
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def printSlice(start, seq):
    first = []
    i = 0
    while i < 30:
        first = first + [seq[i]]
        i = i + 1
    pad = ""
    if start < 10:
        pad = " "
    print("EKG(" + pad + str(start) + "): " + str(first))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        limit = 100
        starts = [2, 5, 7, 9, 10]
        ekg = []
        s = 0
        while s < len(starts):
            seq = [1, starts[s]]
            n = 2
            while n < limit:
                i = 2
                done = False
                while not done:
                    if not i in seq and gcd(seq[n - 1], i) > 1:
                        seq = seq + [i]
                        done = True
                    i = i + 1
                n = n + 1
            ekg = ekg + [seq]
            printSlice(starts[s], seq)
            s = s + 1
        i = 2
        found = False
        while i < limit:
            if ekg[1][i] == ekg[2][i] and areSame(ekg[1][:i], ekg[2][:i]):
                print("\nEKG(5) and EKG(7) converge at term " + str(i + 1))
                found = True
                break
            i = i + 1
        if not found:
            print("\nEKG5(5) and EKG(7) do not converge within " + str(limit) + " terms")
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
