# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-27 23:57 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def gcd(a, b):
    x = a
    if x < 0:
        x = -x
    y = b
    if y < 0:
        y = -y
    while y != 0:
        t = x % y
        x = y
        y = t
    return x
def divisors(n):
    divs = []
    i = 1
    while i * i <= n:
        if n % i == 0:
            divs = divs + [i]
            j = int((n // i))
            if i != j:
                divs = divs + [j]
        i = i + 1
    return divs
def sum(xs):
    s = 0
    for v in xs:
        s = s + v
    return s
def isDuffinian(n):
    divs = divisors(n)
    if len(divs) <= 2:
        return False
    sigma = sum(divs)
    return gcd(sigma, n) == 1
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def printTable(nums, perRow, width):
    i = 0
    line = ""
    while i < len(nums):
        line = line + " " + pad(nums[i], width)
        if (i + 1) % perRow == 0:
            print(line[1:len(line)])
            line = ""
        i = i + 1
    if len(line) > 0:
        print(line[1:len(line)])
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    duff = []
    n = 1
    while len(duff) < 50:
        if isDuffinian(n):
            duff = duff + [n]
        n = n + 1
    print("First 50 Duffinian numbers:")
    printTable(duff, 10, 3)
    triplets = []
    n = 1
    while len(triplets) < 20:
        if isDuffinian(n) and isDuffinian(n + 1) and isDuffinian(n + 2):
            triplets = triplets + ["(" + str(n) + "," + str(n + 1) + "," + str(n + 2) + ")"]
            n = n + 3
        n = n + 1
    print("\nFirst 20 Duffinian triplets:")
    i = 0
    while i < len(triplets):
        line = ""
        j = 0
        while j < 4 and i < len(triplets):
            line = line + padStr(triplets[i], 16)
            j = j + 1
            i = i + 1
        print(line)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
def padStr(s, width):
    res = s
    while len(res) < width:
        res = res + " "
    return res
main()
