# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 00:45 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def isPrime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    if n % 3 == 0:
        return n == 3
    d = 5
    while d * d <= n:
        if n % d == 0:
            return False
        d = d + 2
        if n % d == 0:
            return False
        d = d + 4
    return True
asc = []
def gen(first, cand, digits):
    global asc
    if digits == 0:
        if isPrime(cand):
            asc = asc + [cand]
        return
    i = first
    while i < 10:
        gen(i + 1, cand * 10 + i, digits - 1)
        i = i + 1
def pad(n, width):
    s = str(n)
    while len(s) < width:
        s = " " + s
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    digits = 1
    while digits < 10:
        gen(1, 0, digits)
        digits = digits + 1
    print("There are " + str(len(asc)) + " ascending primes, namely:")
    i = 0
    line = ""
    while i < len(asc):
        line = line + pad(asc[i], 8) + " "
        if (i + 1) % 10 == 0:
            print(line[0:len(line) - 1])
            line = ""
        i = i + 1
    if len(line) > 0:
        print(line[0:len(line) - 1])
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
