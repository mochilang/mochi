# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-26 19:01 +0700
import sys
sys.set_int_max_str_digits(0)

def powInt(base, exp):
    r = 1
    b = base
    e = exp
    while e > 0:
        if e % 2 == 1:
            r = r * b
        b = b * b
        e = e // int(2)
    return r
def minInt(x, y):
    if x < y:
        return x
    return y
def throwDie(nSides, nDice, s, counts):
    if nDice == 0:
        counts[s] = counts[s] + 1
        return
    i = 1
    while i <= nSides:
        throwDie(nSides, nDice - 1, s + i, counts)
        i = i + 1
def beatingProbability(nSides1, nDice1, nSides2, nDice2):
    len1 = (nSides1 + 1) * nDice1
    c1 = []
    i = 0
    while i < len1:
        c1 = c1 + [0]
        i = i + 1
    throwDie(nSides1, nDice1, 0, c1)
    len2 = (nSides2 + 1) * nDice2
    c2 = []
    j = 0
    while j < len2:
        c2 = c2 + [0]
        j = j + 1
    throwDie(nSides2, nDice2, 0, c2)
    p12 = (float(powInt(nSides1, nDice1))) * (float(powInt(nSides2, nDice2)))
    tot = 0.0
    i = 0
    while i < len1:
        j = 0
        m = minInt(i, len2)
        while j < m:
            tot = tot + (c1[i] * float(c2[j])) / p12
            j = j + 1
        i = i + 1
    return tot
print(str(beatingProbability(4, 9, 6, 6)))
print(str(beatingProbability(10, 5, 7, 6)))
