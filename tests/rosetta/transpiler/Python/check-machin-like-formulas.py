# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 19:37 +0700
from fractions import Fraction
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def br(n, d):
    return (Fraction(n)) / Fraction((Fraction(d)))
testCases = [[{"a": 1, "n": 1, "d": 2}, {"a": 1, "n": 1, "d": 3}], [{"a": 2, "n": 1, "d": 3}, {"a": 1, "n": 1, "d": 7}], [{"a": 4, "n": 1, "d": 5}, {"a": -1, "n": 1, "d": 239}], [{"a": 5, "n": 1, "d": 7}, {"a": 2, "n": 3, "d": 79}], [{"a": 1, "n": 1, "d": 2}, {"a": 1, "n": 1, "d": 5}, {"a": 1, "n": 1, "d": 8}], [{"a": 4, "n": 1, "d": 5}, {"a": -1, "n": 1, "d": 70}, {"a": 1, "n": 1, "d": 99}], [{"a": 5, "n": 1, "d": 7}, {"a": 4, "n": 1, "d": 53}, {"a": 2, "n": 1, "d": 4443}], [{"a": 6, "n": 1, "d": 8}, {"a": 2, "n": 1, "d": 57}, {"a": 1, "n": 1, "d": 239}], [{"a": 8, "n": 1, "d": 10}, {"a": -1, "n": 1, "d": 239}, {"a": -4, "n": 1, "d": 515}], [{"a": 12, "n": 1, "d": 18}, {"a": 8, "n": 1, "d": 57}, {"a": -5, "n": 1, "d": 239}], [{"a": 16, "n": 1, "d": 21}, {"a": 3, "n": 1, "d": 239}, {"a": 4, "n": 3, "d": 1042}], [{"a": 22, "n": 1, "d": 28}, {"a": 2, "n": 1, "d": 443}, {"a": -5, "n": 1, "d": 1393}, {"a": -10, "n": 1, "d": 11018}], [{"a": 22, "n": 1, "d": 38}, {"a": 17, "n": 7, "d": 601}, {"a": 10, "n": 7, "d": 8149}], [{"a": 44, "n": 1, "d": 57}, {"a": 7, "n": 1, "d": 239}, {"a": -12, "n": 1, "d": 682}, {"a": 24, "n": 1, "d": 12943}], [{"a": 88, "n": 1, "d": 172}, {"a": 51, "n": 1, "d": 239}, {"a": 32, "n": 1, "d": 682}, {"a": 44, "n": 1, "d": 5357}, {"a": 68, "n": 1, "d": 12943}], [{"a": 88, "n": 1, "d": 172}, {"a": 51, "n": 1, "d": 239}, {"a": 32, "n": 1, "d": 682}, {"a": 44, "n": 1, "d": 5357}, {"a": 68, "n": 1, "d": 12944}]]
def format(ts):
    s = "["
    i = 0
    while i < len(ts):
        t = ts[i]
        s = s + "{" + str(t.get("a")) + " " + str(t.get("n")) + " " + str(t.get("d")) + "}"
        if i < len(ts) - 1:
            s = s + " "
        i = i + 1
    return s + "]"
def tanEval(coef, f):
    if coef == 1:
        return f
    if coef < 0:
        return -Fraction((tanEval(-coef, f)))
    ca = coef // 2
    cb = coef - ca
    a = tanEval(ca, f)
    b = tanEval(cb, f)
    return Fraction((a + b)) / Fraction((Fraction(1) - a * b))
def tans(m):
    if len(m) == 1:
        t = m[0]
        return tanEval(t.get("a"), br(t.get("n"), t.get("d")))
    half = len(m) // 2
    a = tans(m[0:half])
    b = tans(m[half:])
    return Fraction((a + b)) / Fraction((Fraction(1) - a * b))
for ts in testCases:
    print("tan " + format(ts) + " = " + str(tans(ts)))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
