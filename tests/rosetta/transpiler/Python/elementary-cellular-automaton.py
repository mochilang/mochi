# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 10:59 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def bitAt(x, idx):
    v = x
    i = 0
    while i < idx:
        v = int((v // 2))
        i = i + 1
    return v % 2
def outputState(state):
    line = ""
    i = 0
    while i < len(state):
        if state[i:i + 1] == "1":
            line = line + "#"
        else:
            line = line + " "
        i = i + 1
    print(line)
def step(state, r):
    cells = len(state)
    out = ""
    i = 0
    while i < cells:
        l = state[(i - 1 + cells) % cells:(i - 1 + cells) % cells + 1]
        c = state[i:i + 1]
        rt = state[(i + 1) % cells:(i + 1) % cells + 1]
        idx = 0
        if l == "1":
            idx = idx + 4
        if c == "1":
            idx = idx + 2
        if rt == "1":
            idx = idx + 1
        if bitAt(r, idx) == 1:
            out = out + "1"
        else:
            out = out + "0"
        i = i + 1
    return out
def elem(r, cells, generations, state):
    outputState(state)
    g = 0
    s = state
    while g < generations:
        s = step(s, r)
        outputState(s)
        g = g + 1
def randInit(cells, seed):
    s = ""
    val = seed
    i = 0
    while i < cells:
        val = (val * 1664525 + 1013904223) % 2147483647
        if val % 2 == 0:
            s = s + "0"
        else:
            s = s + "1"
        i = i + 1
    return s
def singleInit(cells):
    s = ""
    i = 0
    while i < cells:
        if i == (cells // 2):
            s = s + "1"
        else:
            s = s + "0"
        i = i + 1
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    cells = 20
    generations = 9
    print("Single 1, rule 90:")
    state = singleInit(cells)
    elem(90, cells, generations, state)
    print("Random intial state, rule 30:")
    state = randInit(cells, 3)
    elem(30, cells, generations, state)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
