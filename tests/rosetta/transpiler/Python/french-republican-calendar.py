# Code generated by Mochi transpiler.
# Version 0.10.50, generated on 2025-07-30 21:42 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
gregorianStr = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
gregorian = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
republicanStr = ["Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"]
sansculotidesStr = ["Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"]
def greLeap(year):
    a = int((year % 4))
    b = int((year % 100))
    c = int((year % 400))
    return a == 0 and (b != 0 or c == 0)
def repLeap(year):
    a = int(((year + 1) % 4))
    b = int(((year + 1) % 100))
    c = int(((year + 1) % 400))
    return a == 0 and (b != 0 or c == 0)
def greToDay(d, m, y):
    yy = y
    mm = m
    if mm < 3:
        yy = yy - 1
        mm = mm + 12
    return (yy * 36525 // 100) - (yy // 100) + (yy // 400) + 306 * (mm + 1) // 10 + d - 654842
def repToDay(d, m, y):
    dd = d
    mm = m
    if mm == 13:
        mm = mm - 1
        dd = dd + 30
    if repLeap(y):
        dd = dd - 1
    return 365 * y + (y + 1) // 4 - (y + 1) // 100 + (y + 1) // 400 + 30 * mm + dd - 395
def dayToGre(day):
    y = day * 100 // 36525
    d = day - (y * 36525 // 100) + 21
    y = y + 1792
    d = d + (y // 100) - (y // 400) - 13
    m = 8
    while d > gregorian[m]:
        d = d - gregorian[m]
        m = m + 1
        if m == 12:
            m = 0
            y = y + 1
            if greLeap(y):
                gregorian[1] = 29
            else:
                gregorian[1] = 28
    m = m + 1
    return [d, m, y]
def dayToRep(day):
    y = (day - 1) * 100 // 36525
    if repLeap(y):
        y = y - 1
    d = day - (y + 1) * 36525 // 100 + 365 + (y + 1) // 100 - (y + 1) // 400
    y = y + 1
    m = 1
    sc = 5
    if repLeap(y):
        sc = 6
    while d > 30:
        d = d - 30
        m = m + 1
        if m == 13:
            if d > sc:
                d = d - sc
                m = 1
                y = y + 1
                sc = 5
                if repLeap(y):
                    sc = 6
    return [d, m, y]
def formatRep(d, m, y):
    if m == 13:
        return sansculotidesStr[d - 1] + " " + str(y)
    return str(d) + " " + republicanStr[m - 1] + " " + str(y)
def formatGre(d, m, y):
    return str(d) + " " + gregorianStr[m - 1] + " " + str(y)
rep = dayToRep(greToDay(20, 5, 1795))
print(formatRep(rep[0], rep[1], rep[2]))
gre = dayToGre(repToDay(1, 9, 3))
print(formatGre(gre[0], gre[1], gre[2]))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
