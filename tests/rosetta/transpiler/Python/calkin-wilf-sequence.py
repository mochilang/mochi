# Code generated by Mochi transpiler.
# Version 0.10.38, generated on 2025-07-24 00:17 +0700
from fractions import Fraction

import sys
sys.set_int_max_str_digits(0)

def bigrat(a, b):
    return (Fraction(a)) // (Fraction(b))
def calkinWilf(n):
    seq = []
    seq = seq + [bigrat(1, 1)]
    i = 1
    while i < n:
        prev = seq[i - 1]
        a = prev.numerator
        b = prev.denominator
        f = a // b
        t = bigrat(f, 1)
        t = t * (Fraction(2))
        t = t - prev
        t = t + (Fraction(1))
        t = (Fraction(1)) // t
        seq = seq + [t]
        i = i + 1
    return seq
def toContinued(r):
    a = r.numerator
    b = r.denominator
    res = []
    while True:
        res = res + [int((a // b))]
        t = a % b
        a = b
        b = t
        if a == 1:
            break
    if len(res) % 2 == 0:
        res[len(res) - 1] = res[len(res) - 1] - 1
        res = res + [1]
    return res
def termNumber(cf):
    b = ""
    d = "1"
    for n in cf:
        b = repeat(d, n) + b
        if d == "1":
            d = "0"
        else:
            d = "1"
    return parseIntStr(b, 2)
def commatize(n):
    s = str(n)
    out = ""
    i = 0
    cnt = 0
    neg = False
    if s[0:1] == "-":
        neg = True
        s = s[1:]
    i = len(s) - 1
    while i >= 0:
        out = "".join(s[i:i + 1]) + out
        cnt = cnt + 1
        if cnt == 3 and i != 0:
            out = "," + out
            cnt = 0
        i = i - 1
    if neg:
        out = "-" + out
    return out
def main():
    cw = calkinWilf(20)
    print("The first 20 terms of the Calkin-Wilf sequnence are:")
    i = 0
    while i < 20:
        r = cw[i]
        s = str(r.numerator)
        if r.denominator != 1:
            s = s + "/" + str(r.denominator)
        print((i + int(1)).rjust(2, " ") + ": " + s)
        i = i + 1
    r = bigrat(83116, 51639)
    cf = toContinued(r)
    tn = termNumber(cf)
    print("" + str(r.numerator) + "/" + str(r.denominator) + " is the " + commatize(tn) + "th term of the sequence.")
main()
