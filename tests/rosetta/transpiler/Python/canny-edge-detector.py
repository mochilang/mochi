# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 07:52 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

PI = 3.141592653589793
def conv2d(img, k):
    h = len(img)
    w = len(img[0])
    n = len(k)
    half = n // 2
    out = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            sum = 0.0
            j = 0
            while j < n:
                i = 0
                while i < n:
                    yy = y + j - half
                    if yy < 0:
                        yy = 0
                    if yy >= h:
                        yy = h - 1
                    xx = x + i - half
                    if xx < 0:
                        xx = 0
                    if xx >= w:
                        xx = w - 1
                    sum = sum + img[yy][xx] * k[j][i]
                    i = i + 1
                j = j + 1
            row = row + [sum]
            x = x + 1
        out = out + [row]
        y = y + 1
    return out
def gradient(img):
    hx = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]]
    hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]]
    gx = conv2d(img, hx)
    gy = conv2d(img, hy)
    h = len(img)
    w = len(img[0])
    out = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            g = gx[y][x] * gx[y][x] + gy[y][x] * gy[y][x]
            row = row + [g]
            x = x + 1
        out = out + [row]
        y = y + 1
    return out
def threshold(g, t):
    h = len(g)
    w = len(g[0])
    out = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            if g[y][x] >= t:
                row = row + [1]
            else:
                row = row + [0]
            x = x + 1
        out = out + [row]
        y = y + 1
    return out
def printMatrix(m):
    y = 0
    while y < len(m):
        line = ""
        x = 0
        while x < len(m[0]):
            line = line + str(m[y][x])
            if x < len(m[0]) - 1:
                line = line + " "
            x = x + 1
        print(line)
        y = y + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]]
    g = gradient(img)
    edges = threshold(g, 1020.0 * 1020.0)
    printMatrix(edges)
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
