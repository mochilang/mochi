# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 19:43 +0700
import sys
sys.set_int_max_str_digits(0)

def xor(a, b):
    res = 0
    bit = 1
    x = a
    y = b
    while x > 0 or y > 0:
        abit = x % 2
        bbit = y % 2
        if abit != bbit:
            res = res + bit
        x = x // 2
        y = y // 2
        bit = bit * 2
    return res
def rshift(x, n):
    v = x
    i = 0
    while i < n:
        v = v // 2
        i = i + 1
    return v
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    idx = upper.find(ch)
    if idx >= 0:
        return 65 + idx
    idx = lower.find(ch)
    if idx >= 0:
        return 97 + idx
    if ch == " ":
        return 32
    return 0
def toHex(n):
    digits = "0123456789ABCDEF"
    if n == 0:
        return "0"
    v = n
    out = ""
    while v > 0:
        d = v % 16
        out = "".join(digits[d:d + 1]) + out
        v = v // 16
    return out
def crc32Table():
    table = []
    i = 0
    while i < 256:
        word = i
        j = 0
        while j < 8:
            if word % 2 == 1:
                word = xor(rshift(word, 1), 3988292384)
            else:
                word = rshift(word, 1)
            j = j + 1
        table = table + [word]
        i = i + 1
    return table
table = crc32Table()
def crc32(s):
    crc = 4294967295
    i = 0
    while i < len(s):
        c = ord(s[i:i + 1])
        idx = xor(crc % 256, c)
        crc = xor(table[idx], rshift(crc, 8))
        i = i + 1
    return 4294967295 - crc
def main():
    s = "The quick brown fox jumps over the lazy dog"
    result = crc32(s)
    hex = toHex(result)
    print(hex)
main()
