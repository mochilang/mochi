# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 20:04 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def primeFactors(n):
    factors = []
    x = n
    while x % 2 == 0:
        factors = factors + [2]
        x = int((x // 2))
    p = 3
    while p * p <= x:
        while x % p == 0:
            factors = factors + [p]
            x = int((x // p))
        p = p + 2
    if x > 1:
        factors = factors + [x]
    return factors
def commatize(n):
    s = str(n)
    out = ""
    i = len(s) - 1
    c = 0
    while i >= 0:
        out = "".join(s[i:i + 1]) + out
        c = c + 1
        if c % 3 == 0 and i > 0:
            out = "," + out
        i = i - 1
    return out
def indexOf(s, sub):
    i = 0
    while i + len(sub) <= len(s):
        if s[i:i + len(sub)] == sub:
            return i
        i = i + 1
    return -1
def pad10(s):
    str = s
    while len(str) < 10:
        str = " " + str
    return str
def trimRightStr(s):
    end = len(s)
    while end > 0 and s[end - 1:end] == " ":
        end = end - 1
    return s[0:end]
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    res = []
    count = 0
    k = 11 * 11
    while count < 20:
        if k % 3 == 0 or k % 5 == 0 or k % 7 == 0:
            k = k + 2
            continue
        factors = primeFactors(k)
        if len(factors) > 1:
            s = str(k)
            includesAll = True
            prev = -1
            for f in factors:
                if f == prev:
                    continue
                fs = str(f)
                if s.find(fs) == (-1):
                    includesAll = False
                    break
                prev = f
            if includesAll:
                res = res + [k]
                count = count + 1
        k = k + 2
    line = ""
    for e in res[0:10]:
        line = line + pad10(commatize(e)) + " "
    print(trimRightStr(line))
    line = ""
    for e in res[10:20]:
        line = line + pad10(commatize(e)) + " "
    print(trimRightStr(line))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
