# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
@dataclass
class Point:
    x: float
    y: float
def sqrtApprox(x):
    g = x
    i = 0
    while i < 40:
        g = (g + x // g) / 2.0
        i = i + 1
    return g
def hypot(x, y):
    return sqrtApprox(x * x + y * y)
Two = "Two circles."
R0 = "R==0.0 does not describe circles."
Co = "Coincident points describe an infinite number of circles."
CoR0 = "Coincident points with r==0.0 describe a degenerate circle."
Diam = "Points form a diameter and describe only a single circle."
Far = "Points too far apart to form circles."
def circles(p1, p2, r):
    if p1.x == p2.x and p1.y == p2.y:
        if r == 0.0:
            return [p1, p1, "Coincident points with r==0.0 describe a degenerate circle."]
        return [p1, p2, "Coincident points describe an infinite number of circles."]
    if r == 0.0:
        return [p1, p2, "R==0.0 does not describe circles."]
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    q = hypot(dx, dy)
    if q > 2.0 * r:
        return [p1, p2, "Points too far apart to form circles."]
    m = Point(x=(p1.x + p2.x) / 2.0, y=(p1.y + p2.y) / 2.0)
    if q == 2.0 * r:
        return [m, m, "Points form a diameter and describe only a single circle."]
    d = sqrtApprox(r * r - q * q / 4.0)
    ox = d * dx // q
    oy = d * dy // q
    return [Point(x=m.x - oy, y=m.y + ox), Point(x=m.x + oy, y=m.y - ox), "Two circles."]
td = [[Point(x=0.1234, y=0.9876), Point(x=0.8765, y=0.2345), 2.0], [Point(x=0.0, y=2.0), Point(x=0.0, y=0.0), 1.0], [Point(x=0.1234, y=0.9876), Point(x=0.1234, y=0.9876), 2.0], [Point(x=0.1234, y=0.9876), Point(x=0.8765, y=0.2345), 0.5], [Point(x=0.1234, y=0.9876), Point(x=0.1234, y=0.9876), 0.0]]
for tc in td:
    p1 = tc[0]
    p2 = tc[1]
    r = tc[2]
    print("p1:  {" + str(p1.x) + " " + str(p1.y) + "}")
    print("p2:  {" + str(p2.x) + " " + str(p2.y) + "}")
    print("r:  " + str(r))
    res = circles(p1, p2, r)
    c1 = res[0]
    c2 = res[1]
    caseStr = res[2]
    print("   " + caseStr)
    if caseStr == "Points form a diameter and describe only a single circle." or caseStr == "Coincident points with r==0.0 describe a degenerate circle.":
        print("   Center:  {" + str(c1.x) + " " + str(c1.y) + "}")
    else:
        if caseStr == "Two circles.":
            print("   Center 1:  {" + str(c1.x) + " " + str(c1.y) + "}")
            print("   Center 2:  {" + str(c2.x) + " " + str(c2.y) + "}")
    print("")
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
