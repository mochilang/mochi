# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 11:14 +0000
import sys
sys.set_int_max_str_digits(0)

def sqrtApprox(x):
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def makeSym(order, elements):
    return {"order": order, "ele": elements}
def unpackSym(m):
    n = m["order"]
    ele = m["ele"]
    mat = []
    idx = 0
    r = 0
    while r < n:
        row = []
        c = 0
        while c <= r:
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        while c < n:
            row = row + [0.0]
            c = c + 1
        mat = mat + [row]
        r = r + 1
    r = 0
    while r < n:
        c = r + 1
        while c < n:
            mat[r][c] = mat[c][r]
            c = c + 1
        r = r + 1
    return mat
def printMat(m):
    i = 0
    while i < len(m):
        line = ""
        j = 0
        while j < len(m[i]):
            line = line + str(m[i][j])
            if j < len(m[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def printSym(m):
    printMat(unpackSym(m))
def printLower(m):
    n = m["order"]
    ele = m["ele"]
    mat = []
    idx = 0
    r = 0
    while r < n:
        row = []
        c = 0
        while c <= r:
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        while c < n:
            row = row + [0.0]
            c = c + 1
        mat = mat + [row]
        r = r + 1
    printMat(mat)
def choleskyLower(a):
    n = a["order"]
    ae = a["ele"]
    le = []
    idx = 0
    while idx < len(ae):
        le = le + [0.0]
        idx = idx + 1
    row = 1
    col = 1
    dr = 0
    dc = 0
    i = 0
    while i < len(ae):
        e = ae[i]
        if i < dr:
            d = (e - le[i]) // le[dc]
            le[i] = d
            ci = col
            cx = dc
            j = i + 1
            while j <= dr:
                cx = cx + ci
                ci = ci + 1
                le[j] = le[j] + d * le[cx]
                j = j + 1
            col = col + 1
            dc = dc + col
        else:
            le[i] = sqrtApprox(e - le[i])
            row = row + 1
            dr = dr + row
            col = 1
            dc = 0
        i = i + 1
    return {"order": n, "ele": le}
def demo(a):
    print("A:")
    printSym(a)
    print("L:")
    l = choleskyLower(a)
    printLower(l)
demo(makeSym(3, [25.0, 15.0, 18.0, -5.0, 0.0, 11.0]))
demo(makeSym(4, [18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0]))
