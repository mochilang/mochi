# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 08:06 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def makeSym(order, elements):
    return {"order": order, "ele": elements}
def unpackSym(m):
    n = m.get("order")
    ele = m.get("ele")
    mat = []
    idx = 0
    r = 0
    while r < n:
        row = []
        c = 0
        while c <= r:
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        while c < n:
            row = row + [0.0]
            c = c + 1
        mat = mat + [row]
        r = r + 1
    r = 0
    while r < n:
        c = r + 1
        while c < n:
            mat[r][c] = mat[c][r]
            c = c + 1
        r = r + 1
    return mat
def printMat(m):
    i = 0
    while i < len(m):
        line = ""
        j = 0
        while j < len(m[i]):
            line = line + str(m[i][j])
            if j < len(m[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def printSym(m):
    printMat(unpackSym(m))
def printLower(m):
    n = m.get("order")
    ele = m.get("ele")
    mat = []
    idx = 0
    r = 0
    while r < n:
        row = []
        c = 0
        while c <= r:
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        while c < n:
            row = row + [0.0]
            c = c + 1
        mat = mat + [row]
        r = r + 1
    printMat(mat)
def choleskyLower(a):
    n = a.get("order")
    ae = a.get("ele")
    le = []
    idx = 0
    while idx < len(ae):
        le = le + [0.0]
        idx = idx + 1
    row = 1
    col = 1
    dr = 0
    dc = 0
    i = 0
    while i < len(ae):
        e = ae[i]
        if i < dr:
            d = (e - le[i]) / le[dc]
            le[i] = d
            ci = col
            cx = dc
            j = i + 1
            while j <= dr:
                cx = cx + ci
                ci = ci + 1
                le[j] = le[j] + d * le[cx]
                j = j + 1
            col = col + 1
            dc = dc + col
        else:
            le[i] = sqrtApprox(e - le[i])
            row = row + 1
            dr = dr + row
            col = 1
            dc = 0
        i = i + 1
    return {"order": n, "ele": le}
def demo(a):
    print("A:")
    printSym(a)
    print("L:")
    l = choleskyLower(a)
    printLower(l)
demo(makeSym(3, [25.0, 15.0, 18.0, -5.0, 0.0, 11.0]))
demo(makeSym(4, [18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0]))
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
