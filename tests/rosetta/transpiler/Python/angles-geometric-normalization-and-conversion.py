# Code generated by Mochi transpiler.
# Version 0.10.40, generated on 2025-07-25 14:40 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def d2d(d):
    return d % 360.0
def g2g(g):
    return g % 400.0
def m2m(m):
    return m % 6400.0
def r2r(r):
    return r % (2.0 * 3.141592653589793)
def d2g(d):
    return d2d(d) * 400.0 / 360.0
def d2m(d):
    return d2d(d) * 6400.0 / 360.0
def d2r(d):
    return d2d(d) * 3.141592653589793 / 180.0
def g2d(g):
    return g2g(g) * 360.0 / 400.0
def g2m(g):
    return g2g(g) * 6400.0 / 400.0
def g2r(g):
    return g2g(g) * 3.141592653589793 / 200.0
def m2d(m):
    return m2m(m) * 360.0 / 6400.0
def m2g(m):
    return m2m(m) * 400.0 / 6400.0
def m2r(m):
    return m2m(m) * 3.141592653589793 / 3200.0
def r2d(r):
    return r2r(r) * 180.0 / 3.141592653589793
def r2g(r):
    return r2r(r) * 200.0 / 3.141592653589793
def r2m(r):
    return r2r(r) * 3200.0 / 3.141592653589793
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    angles = [-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1e+06]
    print("degrees normalized_degs gradians mils radians")
    for a in angles:
        print(str(a) + " " + str(d2d(a)) + " " + str(d2g(a)) + " " + str(d2m(a)) + " " + str(d2r(a)))
    print("\ngradians normalized_grds degrees mils radians")
    for a in angles:
        print(str(a) + " " + str(g2g(a)) + " " + str(g2d(a)) + " " + str(g2m(a)) + " " + str(g2r(a)))
    print("\nmils normalized_mils degrees gradians radians")
    for a in angles:
        print(str(a) + " " + str(m2m(a)) + " " + str(m2d(a)) + " " + str(m2g(a)) + " " + str(m2r(a)))
    print("\nradians normalized_rads degrees gradians mils")
    for a in angles:
        print(str(a) + " " + str(r2r(a)) + " " + str(r2d(a)) + " " + str(r2g(a)) + " " + str(r2m(a)))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
