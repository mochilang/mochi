# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 00:51 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def push(h, it):
    h = h + [it]
    i = len(h) - 1
    while i > 0 and h[i - 1].get("s") > h[i].get("s"):
        tmp = h[i - 1]
        h[i - 1] = h[i]
        h[i] = tmp
        i = i - 1
    return h
def step(h, nv, dir):
    while len(h) == 0 or nv * nv <= h[0].get("s"):
        h = push(h, {"s": nv * nv, "a": nv, "b": 0})
        nv = nv + 1
    s = h[0].get("s")
    v = []
    while len(h) > 0 and h[0].get("s") == s:
        it = h[0]
        h = h[1:]
        v = v + [[it.get("a"), it.get("b")]]
        if it.get("a") > it.get("b"):
            h = push(h, {"s": it.get("a") * it.get("a") + (it.get("b") + 1) * (it.get("b") + 1), "a": it.get("a"), "b": it.get("b") + 1})
    list = []
    for p in v:
        list = list + [p]
    temp = list
    for p in temp:
        if p[0] != p[1]:
            list = list + [[p[1], p[0]]]
    temp = list
    for p in temp:
        if p[1] != 0:
            list = list + [[p[0], -p[1]]]
    temp = list
    for p in temp:
        if p[0] != 0:
            list = list + [[-p[0], p[1]]]
    bestDot = -999999999
    best = dir
    for p in list:
        cross = p[0] * dir[1] - p[1] * dir[0]
        if cross >= 0:
            dot = p[0] * dir[0] + p[1] * dir[1]
            if dot > bestDot:
                bestDot = dot
                best = p
    return {"d": best, "heap": h, "n": nv}
def positions(n):
    pos = []
    x = 0
    y = 0
    dir = [0, 1]
    heap = []
    nv = 1
    i = 0
    while i < n:
        pos = pos + [[x, y]]
        st = step(heap, nv, dir)
        dir = st.get("d")
        heap = st.get("heap")
        nv = int(st.get("n"))
        x = x + dir[0]
        y = y + dir[1]
        i = i + 1
    return pos
def pad(s, w):
    r = s
    while len(r) < w:
        r = r + " "
    return r
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    pts = positions(40)
    print("The first 40 Babylonian spiral points are:")
    line = ""
    i = 0
    while i < len(pts):
        p = pts[i]
        s = pad("(" + str(p[0]) + ", " + str(p[1]) + ")", 10)
        line = line + s
        if (i + 1) % 10 == 0:
            print(line)
            line = ""
        i = i + 1
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
