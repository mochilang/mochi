# Code generated by Mochi transpiler.
# Version 0.10.42, generated on 2025-07-28 10:14 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def fields(s):
    words = []
    cur = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == " " or ch == "\n" or ch == "\t":
            if len(cur) > 0:
                words = words + [cur]
                cur = ""
        else:
            cur = cur + ch
        i = i + 1
    if len(cur) > 0:
        words = words + [cur]
    return words
def padRight(s, width):
    out = s
    i = len(s)
    while i < width:
        out = out + " "
        i = i + 1
    return out
def join(xs, sep):
    res = ""
    i = 0
    while i < len(xs):
        if i > 0:
            res = res + sep
        res = res + xs[i]
        i = i + 1
    return res
def validate(commands, words, mins):
    results = []
    if len(words) == 0:
        return results
    wi = 0
    while wi < len(words):
        w = words[wi]
        found = False
        wlen = len(w)
        ci = 0
        while ci < len(commands):
            cmd = commands[ci]
            if mins[ci] != 0 and wlen >= mins[ci] and wlen <= len(cmd):
                c = cmd.upper()
                ww = w.upper()
                if c[0:wlen] == ww:
                    results = results + [c]
                    found = True
                    break
            ci = ci + 1
        if not found:
            results = results + ["*error*"]
        wi = wi + 1
    return results
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
    commands = fields(table)
    mins = []
    i = 0
    while i < len(commands):
        count = 0
        j = 0
        cmd = commands[i]
        while j < len(cmd):
            ch = cmd[j:j + 1]
            if ch >= "A" and ch <= "Z":
                count = count + 1
            j = j + 1
        mins = mins + [count]
        i = i + 1
    sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
    words = fields(sentence)
    results = validate(commands, words, mins)
    out1 = "user words:  "
    k = 0
    while k < len(words):
        out1 = out1 + padRight(words[k], len(results[k])) + " "
        k = k + 1
    print(out1)
    print("full words:  " + join(results, " "))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
