# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 16:18 +0700
import sys
sys.set_int_max_str_digits(0)

def trimSpace(s):
    start = 0
    while start < len(s) and s[start:start + 1] == " ":
        start = start + 1
    end = len(s)
    while end > start and s[end - 1:end] == " ":
        end = end - 1
    return s[start:end]
def isUpper(ch):
    return ch >= "A" and ch <= "Z"
def padLeft(s, w):
    res = ""
    n = w - len(s)
    while n > 0:
        res = res + " "
        n = n - 1
    return res + s
def snakeToCamel(s):
    s = trimSpace(s)
    out = ""
    up = False
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == "_" or ch == "-" or ch == " " or ch == ".":
            up = True
            i = i + 1
            continue
        if i == 0:
            out = out + ch.lower()
            up = False
            i = i + 1
            continue
        if up:
            out = out + ch.upper()
            up = False
        else:
            out = out + ch
        i = i + 1
    return out
def camelToSnake(s):
    s = trimSpace(s)
    out = ""
    prevUnd = False
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == " " or ch == "-" or ch == ".":
            if not prevUnd and len(out) > 0:
                out = out + "_"
                prevUnd = True
            i = i + 1
            continue
        if ch == "_":
            if not prevUnd and len(out) > 0:
                out = out + "_"
                prevUnd = True
            i = i + 1
            continue
        if isUpper(ch):
            if i > 0 and (not prevUnd):
                out = out + "_"
            out = out + ch.lower()
            prevUnd = False
        else:
            out = out + ch.lower()
            prevUnd = False
        i = i + 1
    start = 0
    while start < len(out) and out[start:start + 1] == "_":
        start = start + 1
    end = len(out)
    while end > start and out[end - 1:end] == "_":
        end = end - 1
    out = out[start:end]
    res = ""
    j = 0
    lastUnd = False
    while j < len(out):
        c = out[j:j + 1]
        if c == "_":
            if not lastUnd:
                res = res + c
            lastUnd = True
        else:
            res = res + c
            lastUnd = False
        j = j + 1
    return res
def main():
    samples = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "]
    print("=== To snake_case ===")
    for s in samples:
        print(padLeft(s, 34) + " => " + camelToSnake(s))
    print("")
    print("=== To camelCase ===")
    for s in samples:
        print(padLeft(s, 34) + " => " + snakeToCamel(s))
main()
