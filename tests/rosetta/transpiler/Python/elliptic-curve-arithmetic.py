# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 10:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Pt:
    x: float
    y: float
    inf: bool

bCoeff = 7.0
def zero():
    return Pt(x=0.0, y=0.0, inf=True)
def isZero(p):
    return p.inf
def neg(p):
    return Pt(x=p.x, y=-p.y, inf=p.inf)
def dbl(p):
    if isZero(p):
        return p
    L = (3.0 * p.x * p.x) / (2.0 * p.y)
    x = L * L - 2.0 * p.x
    return Pt(x=x, y=L * (p.x - x) - p.y, inf=False)
def add(p, q):
    if isZero(p):
        return q
    if isZero(q):
        return p
    if p.x == q.x:
        if p.y == q.y:
            return dbl(p)
        return zero()
    L = (q.y - p.y) / (q.x - p.x)
    x = L * L - p.x - q.x
    return Pt(x=x, y=L * (p.x - x) - p.y, inf=False)
def mul(p, n):
    r = zero()
    q = p
    k = n
    while k > 0:
        if k % 2 == 1:
            r = add(r, q)
        q = dbl(q)
        k = k // 2
    return r
def cbrtApprox(x):
    guess = x
    i = 0
    while i < 40:
        guess = (2.0 * guess + x // (guess * guess)) / 3.0
        i = i + 1
    return guess
def fromY(y):
    return Pt(x=cbrtApprox(y * y - bCoeff), y=y, inf=False)
def show(s, p):
    if isZero(p):
        print(s + "Zero")
    else:
        print(s + "(" + str(p.x) + ", " + str(p.y) + ")")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    a = fromY(1.0)
    b = fromY(2.0)
    show("a = ", a)
    show("b = ", b)
    c = add(a, b)
    show("c = a + b = ", c)
    d = neg(c)
    show("d = -c = ", d)
    show("c + d = ", add(c, d))
    show("a + b + d = ", add(a, add(b, d)))
    show("a * 12345 = ", mul(a, 12345))
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
