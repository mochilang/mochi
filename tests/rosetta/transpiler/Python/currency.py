# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 20:06 +0700
import sys
sys.set_int_max_str_digits(0)

def parseIntDigits(s):
    n = 0
    i = 0
    digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
    while i < len(s):
        ch = s[i:i + 1]
        if not (ch in digits):
            return 0
        n = n * 10 + digits[ch]
        i = i + 1
    return n
def parseDC(s):
    neg = False
    if len(s) > 0 and s[0:1] == "-":
        neg = True
        s = s[1:len(s)]
    dollars = 0
    cents = 0
    i = 0
    seenDot = False
    centDigits = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == ".":
            seenDot = True
            i = i + 1
            continue
        d = parseIntDigits(ch)
        if seenDot:
            if centDigits < 2:
                cents = cents * 10 + d
                centDigits = centDigits + 1
        else:
            dollars = dollars * 10 + d
        i = i + 1
    if centDigits == 1:
        cents = cents * 10
    val = dollars * 100 + cents
    if neg:
        val = -val
    return val
def parseRate(s):
    neg = False
    if len(s) > 0 and s[0:1] == "-":
        neg = True
        s = s[1:len(s)]
    whole = 0
    frac = 0
    digits = 0
    seenDot = False
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == ".":
            seenDot = True
            i = i + 1
            continue
        d = parseIntDigits(ch)
        if seenDot:
            if digits < 4:
                frac = frac * 10 + d
                digits = digits + 1
        else:
            whole = whole * 10 + d
        i = i + 1
    while digits < 4:
        frac = frac * 10
        digits = digits + 1
    val = whole * 10000 + frac
    if neg:
        val = -val
    return val
def dcString(dc):
    d = dc // 100
    n = dc
    if n < 0:
        n = -n
    c = n % 100
    cstr = str(c)
    if len(cstr) == 1:
        cstr = "0" + cstr
    return str(d) + "." + cstr
def extend(dc, n):
    return dc * n
def tax(total, rate):
    return int(((total * rate + 5000) // 10000))
def padLeft(s, n):
    out = s
    while len(out) < n:
        out = " " + out
    return out
def main():
    hp = parseDC("5.50")
    mp = parseDC("2.86")
    rate = parseRate("0.0765")
    totalBeforeTax = extend(hp, 4000000000000000) + extend(mp, 2)
    t = tax(totalBeforeTax, rate)
    total = totalBeforeTax + t
    print("Total before tax: " + padLeft(dcString(totalBeforeTax), 22))
    print("             Tax: " + padLeft(dcString(t), 22))
    print("           Total: " + padLeft(dcString(total), 22))
main()
