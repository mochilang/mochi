# Code generated by Mochi transpiler.
# Version 0.10.39, generated on 2025-07-24 18:31 +0700
import sys
sys.set_int_max_str_digits(0)

def primesUpTo(n):
    sieve = []
    i = 0
    while i <= n:
        sieve = sieve + [True]
        i = i + 1
    p = 2
    while p * p <= n:
        if sieve[p]:
            m = p * p
            while m <= n:
                sieve[m] = False
                m = m + p
        p = p + 1
    res = []
    x = 2
    while x <= n:
        if sieve[x]:
            res = res + [x]
        x = x + 1
    return res
LIMIT = 999999
primes = primesUpTo(LIMIT)
def longestSeq(dir):
    pd = 0
    longSeqs = [[2]]
    currSeq = [2]
    i = 1
    while i < len(primes):
        d = primes[i] - primes[i - 1]
        if (dir == "ascending" and d <= pd) or (dir == "descending" and d >= pd):
            if len(currSeq) > len(longSeqs[0]):
                longSeqs = [currSeq]
            else:
                if len(currSeq) == len(longSeqs[0]):
                    longSeqs = longSeqs + [currSeq]
            currSeq = [primes[i - 1], primes[i]]
        else:
            currSeq = currSeq + [primes[i]]
        pd = d
        i = i + 1
    if len(currSeq) > len(longSeqs[0]):
        longSeqs = [currSeq]
    else:
        if len(currSeq) == len(longSeqs[0]):
            longSeqs = longSeqs + [currSeq]
    print("Longest run(s) of primes with " + dir + " differences is " + str(len(longSeqs[0])) + " :")
    for ls in longSeqs:
        diffs = []
        j = 1
        while j < len(ls):
            diffs = diffs + [ls[j] - ls[j - 1]]
            j = j + 1
        k = 0
        while k < len(ls) - 1:
            print(str(ls[k]) + " (" + str(diffs[k]) + ") ", ("true" if False else "false"))
            k = k + 1
        print(str(ls[len(ls) - 1]))
    print("")
def main():
    print("For primes < 1 million:\n")
    for dir in ["ascending", "descending"]:
        longestSeq(dir)
main()
