# Code generated by Mochi transpiler.
# Version 0.10.41, generated on 2025-07-27 12:53 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
def hailstone(n):
    seq = []
    x = n
    seq = seq + [x]
    while x > 1:
        if x % 2 == 0:
            x = x // 2
        else:
            x = 3 * x + 1
        seq = seq + [x]
    return seq
def listString(xs):
    s = "["
    i = 0
    while i < len(xs):
        s = s + str(xs[i])
        if i < len(xs) - 1:
            s = s + " "
        i = i + 1
    s = s + "]"
    return s
def libMain():
    seq = hailstone(27)
    print("")
    print("Hailstone sequence for the number 27:")
    print("  has " + str(len(seq)) + " elements")
    print("  starts with " + listString(seq[0:4]))
    print("  ends with " + listString(seq[len(seq) - 4:len(seq)]))
    longest = 0
    length = 0
    i = 1
    while i < 100000:
        l = len(hailstone(i))
        if l > length:
            longest = i
            length = l
        i = i + 1
    print("")
    print(str(longest) + " has the longest Hailstone sequence, its length being " + str(length) + ".")
libMain()
_bench_end = _now()
_bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
