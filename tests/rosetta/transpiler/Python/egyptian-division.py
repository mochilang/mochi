# Code generated by Mochi transpiler.
# Version 0.10.57, generated on 2025-08-04 16:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class DivResult:
    q: int
    r: int

def egyptianDivide(dividend, divisor):
    if dividend < 0 or divisor <= 0:
        panic("Invalid argument(s)")
    if dividend < divisor:
        return DivResult(q=0, r=dividend)
    powers = [1]
    doublings = [divisor]
    doubling = divisor * 2
    while doubling <= dividend:
        powers = powers + [powers[len(powers) - 1] * 2]
        doublings = doublings + [doubling]
        doubling = doubling * 2
    ans = 0
    accum = 0
    i = len(doublings) - 1
    while i >= 0:
        if accum + doublings[i] <= dividend:
            accum = accum + doublings[i]
            ans = ans + powers[i]
            if accum == dividend:
                break
        i = i - 1
    return DivResult(q=ans, r=dividend - accum)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        dividend = 580
        divisor = 34
        res = egyptianDivide(dividend, divisor)
        print(str(dividend) + " divided by " + str(divisor) + " is " + str(res.q) + " with remainder " + str(res.r))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
