run: exit status 1

/workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:71:20: error:
    • Ambiguous type variable ‘a0’ arising from the literal ‘1’
      prevents the constraint ‘(Num a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Num Integer -- Defined in ‘GHC.Num’
        instance Num Double -- Defined in ‘GHC.Float’
        ...plus three others
        ...plus 8 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the first argument of ‘newIORef’, namely ‘(1)’
      In a stmt of a 'do' block: i <- newIORef (1)
      In the expression:
        do d <- newIORef (0)
           a <- newIORef (0)
           pnum <- newIORef (0)
           i <- newIORef (1)
           ....
   |
71 |     i <- newIORef (1)
   |                    ^

/workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:74:26: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘<=’
      prevents the constraint ‘(Ord a0)’ from being solved.
      Relevant bindings include
        i :: IORef a0
          (bound at /workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:71:5)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Ord Aeson.Key -- Defined in ‘Data.Aeson.Key’
        instance Ord Aeson.DotNetTime
          -- Defined in ‘aeson-2.1.2.1:Data.Aeson.Types.Internal’
        ...plus 28 others
        ...plus 19 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: (deref i) <= 20000
      In a stmt of a 'do' block:
        if (deref i) <= 20000 then
            do j <- pfacSum (deref i)
               if j < (deref i) then do ... else return ()
               if j == (deref i) then do ... else return ()
               ....
        else
            return ()
      In the expression:
        do if (deref i) <= 20000 then
               do j <- pfacSum (deref i)
                  ....
           else
               return ()
   |
74 |             if (deref i) <= 20000 then do
   |                          ^^

/workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:74:29: error:
    • Ambiguous type variable ‘a0’ arising from the literal ‘20000’
      prevents the constraint ‘(Num a0)’ from being solved.
      Relevant bindings include
        i :: IORef a0
          (bound at /workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:71:5)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Num Integer -- Defined in ‘GHC.Num’
        instance Num Double -- Defined in ‘GHC.Float’
        ...plus three others
        ...plus 8 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the second argument of ‘(<=)’, namely ‘20000’
      In the expression: (deref i) <= 20000
      In a stmt of a 'do' block:
        if (deref i) <= 20000 then
            do j <- pfacSum (deref i)
               if j < (deref i) then do ... else return ()
               if j == (deref i) then do ... else return ()
               ....
        else
            return ()
   |
74 |             if (deref i) <= 20000 then do
   |                             ^^^^^

/workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:75:22: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘pfacSum’
      prevents the constraint ‘(Fractional a0)’ from being solved.
      Relevant bindings include
        i :: IORef a0
          (bound at /workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:71:5)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Fractional Double -- Defined in ‘GHC.Float’
        instance Fractional Float -- Defined in ‘GHC.Float’
        ...plus two instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In a stmt of a 'do' block: j <- pfacSum (deref i)
      In the expression:
        do j <- pfacSum (deref i)
           if j < (deref i) then
               do writeIORef d $! ((deref d) + 1)
           else
               return ()
           if j == (deref i) then
               do writeIORef pnum $! ((deref pnum) + 1)
           else
               return ()
           if j > (deref i) then
               do writeIORef a $! ((deref a) + 1)
           else
               return ()
           ....
      In a stmt of a 'do' block:
        if (deref i) <= 20000 then
            do j <- pfacSum (deref i)
               if j < (deref i) then do ... else return ()
               if j == (deref i) then do ... else return ()
               ....
        else
            return ()
   |
75 |                 j <- pfacSum (deref i)
   |                      ^^^^^^^

/workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:80:22: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘==’
      prevents the constraint ‘(Eq a0)’ from being solved.
      Relevant bindings include
        j :: a0
          (bound at /workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:75:17)
        i :: IORef a0
          (bound at /workspace/mochi/tests/rosetta/transpiler/Haskell/abundant-deficient-and-perfect-number-classifications.hs:71:5)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Eq Aeson.Key -- Defined in ‘Data.Aeson.Key’
        instance Eq Aeson.DotNetTime
          -- Defined in ‘aeson-2.1.2.1:Data.Aeson.Types.Internal’
        ...plus 31 others
        ...plus 23 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: j == (deref i)
      In a stmt of a 'do' block:
        if j == (deref i) then
            do writeIORef pnum $! ((deref pnum) + 1)
        else
            return ()
      In the expression:
        do j <- pfacSum (deref i)
           if j < (deref i) then
               do writeIORef d $! ((deref d) + 1)
           else
               return ()
           if j == (deref i) then
               do writeIORef pnum $! ((deref pnum) + 1)
           else
               return ()
           if j > (deref i) then
               do writeIORef a $! ((deref a) + 1)
           else
               return ()
           ....
   |
80 |                 if j == (deref i) then do
   |                      ^^
