{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
-- Generated by Mochi transpiler v0.10.37 on 2025-07-23 12:18 GMT+7
import Data.IORef
import System.IO.Unsafe (unsafePerformIO)
deref :: IORef a -> a
{-# NOINLINE deref #-}
deref r = unsafePerformIO (atomicModifyIORef' r (\x -> (x, x)))
main :: IO ()
main = do
    doors <- newIORef ([])
    mapM_ (\i -> do
        writeIORef doors $! ((deref doors) ++ [False])
        ) [0 .. (100 - 1)]
    mapM_ (\pass -> do
        idx <- newIORef (pass - 1)
        let
            loop = do
                if (deref idx) < 100 then do
                    writeIORef doors $! (take (deref idx) (deref doors) ++ [not (((deref doors) !! (deref idx)))] ++ drop ((deref idx) + 1) (deref doors))
                    writeIORef idx $! ((deref idx) + pass)
                    loop
                else return ()
        loop
        ) [1 .. (101 - 1)]
    mapM_ (\row -> do
        line <- newIORef ("")
        mapM_ (\col -> do
            idx <- newIORef (row * 10 + col)
            if ((deref doors) !! (deref idx)) then do
                writeIORef line $! ((deref line) ++ "1")
            else do
                writeIORef line $! ((deref line) ++ "0")

            if col < 9 then do
                writeIORef line $! ((deref line) ++ " ")
            else return ()

            ) [0 .. (10 - 1)]
        putStrLn ((deref line))
        ) [0 .. (10 - 1)]
