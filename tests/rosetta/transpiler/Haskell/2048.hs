{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (board, cells, full, gain, moved, row, score)
-- Generated by Mochi transpiler v0.10.38 on 2025-07-24 00:44 GMT+7
import Data.IORef
import System.IO.Unsafe (unsafePerformIO)
import System.Environment (lookupEnv)
import Data.Time.Clock.POSIX (getPOSIXTime)
import Data.Char (isDigit)
import System.IO (isEOF)
input :: IO String
input = do
    eof <- isEOF
    if eof then return "" else getLine
deref :: IORef a -> a
{-# NOINLINE deref #-}
deref r = unsafePerformIO (atomicModifyIORef' r (\x -> (x, x)))
_nowSeed :: IORef Int
_nowSeed = unsafePerformIO (newIORef 0)
{-# NOINLINE _nowSeed #-}
_nowSeeded :: IORef Bool
_nowSeeded = unsafePerformIO (newIORef False)
{-# NOINLINE _nowSeeded #-}
_now :: IO Int
_now = do
    seeded <- readIORef _nowSeeded
    if not seeded then do
        m <- lookupEnv "MOCHI_NOW_SEED"
        case m of
            Just s | all isDigit s -> do writeIORef _nowSeed (read s); writeIORef _nowSeeded True
            _ -> return ()
     else return ()
    seeded2 <- readIORef _nowSeeded
    if seeded2 then do
        modifyIORef' _nowSeed (\x -> (x * 1664525 + 1013904223) `mod` 2147483647)
        readIORef _nowSeed
    else do
        t <- getPOSIXTime
        return (floor (t * 1000000000))
data SpawnResult = SpawnResult
  { board :: Board,
    full :: Bool
  } deriving (Show, Eq)


data SlideResult = SlideResult
  { row :: String,
    gain :: Int
  } deriving (Show, Eq)


data MoveResult = MoveResult
  { board :: Board,
    score :: Int,
    moved :: Bool
  } deriving (Show, Eq)


data Board = Board
  { cells :: String
  } deriving (Show, Eq)


newBoard = do
    b <- newIORef ([])
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                row <- newIORef ([])
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            writeIORef row $! ((deref row) ++ [0])
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef b $! ((deref b) ++ [(deref row)])
                writeIORef y $! ((deref y) + 1)
                loop
            else return (Board {cells = (deref b)})
    in loop))


spawnTile b = do
    grid <- newIORef (b.cells)
    empty <- newIORef ([])
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref grid) !! (deref y)) !! (deref x)) == 0 then do
                                writeIORef empty $! ((deref empty) ++ [[(deref x), (deref y)]])
                            else return ()

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    if length (deref empty) == 0 then do
        return (SpawnResult {board = b, full = True})
    else do
        let idx = unsafePerformIO (_now) `mod` length (deref empty)
        let cell = ((deref empty) !! idx)
        val <- newIORef (4)
        if unsafePerformIO (_now) `mod` 10 < 9 then do
            writeIORef val $! (2)
        else return ()

        writeIORef grid $! (take ((cell !! 1)) (deref grid) ++ [take ((cell !! 0)) (((deref grid) !! (cell !! 1))) ++ [(deref val)] ++ drop ((cell !! 0) + 1) (((deref grid) !! (cell !! 1)))] ++ drop ((cell !! 1) + 1) (deref grid))
        return (SpawnResult {board = Board {cells = (deref grid)}, full = length (deref empty) == 1})



pad n = do
    let s = show n
    let pad = 4 - length s
    i <- newIORef (0)
    out <- newIORef ("")
    return ((let
        in loop = do
            if (deref i) < pad then do
                writeIORef out $! ((deref out) ++ " ")
                writeIORef i $! ((deref i) + 1)
                loop
            else return ((deref out) ++ s)
    in loop))


draw b score = do
    putStrLn ("Score: " ++ show (deref score))
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                putStrLn ("+----+----+----+----+")
                line <- newIORef ("|")
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            let v = ((b.cells !! (deref y)) !! (deref x))
                            if v == 0 then do
                                writeIORef line $! ((deref line) ++ "    |")
                            else do
                                writeIORef line $! ((deref line) ++ pad v ++ "|")

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                putStrLn ((deref line))
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    putStrLn ("+----+----+----+----+")
    putStrLn ("W=Up S=Down A=Left D=Right Q=Quit")


reverseRow r = do
    out <- newIORef ([])
    i <- newIORef (length (deref r) - 1)
    return ((let
        in loop = do
            if (deref i) >= 0 then do
                writeIORef out $! ((deref out) ++ [((deref r) !! (deref i))])
                writeIORef i $! ((deref i) - 1)
                loop
            else return ((deref out))
    in loop))


slideLeft row = do
    xs <- newIORef ([])
    i <- newIORef (0)
    let
        loop = do
            if (deref i) < length row then do
                if (row !! (deref i)) /= 0 then do
                    writeIORef xs $! ((deref xs) ++ [(row !! (deref i))])
                else return ()

                writeIORef i $! ((deref i) + 1)
                loop
            else return ()
    loop
    res <- newIORef ([])
    gain <- newIORef (0)
    writeIORef i $! (0)
    let
        loop = do
            if (deref i) < length (deref xs) then do
                if (deref i) + 1 < length (deref xs) && ((deref xs) !! (deref i)) == ((deref xs) !! (deref i) + 1) then do
                    let v = ((deref xs) !! (deref i)) * 2
                    writeIORef gain $! ((deref gain) + v)
                    writeIORef res $! ((deref res) ++ [v])
                    writeIORef i $! ((deref i) + 2)
                else do
                    writeIORef res $! ((deref res) ++ [((deref xs) !! (deref i))])
                    writeIORef i $! ((deref i) + 1)

                loop
            else return ()
    loop
    return ((let
        in loop = do
            if length (deref res) < SIZE then do
                writeIORef res $! ((deref res) ++ [0])
                loop
            else return (SlideResult {row = (deref res), gain = (deref gain)})
    in loop))


moveLeft b score = do
    grid <- newIORef (b.cells)
    moved <- newIORef (False)
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                r <- newIORef (slideLeft (((deref grid) !! (deref y))))
                let new = (deref r).row
                writeIORef score $! ((deref score) + (deref r).gain)
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref grid) !! (deref y)) !! (deref x)) /= (new !! (deref x)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef grid $! (take (deref y) (deref grid) ++ [take (deref x) (((deref grid) !! (deref y))) ++ [(new !! (deref x))] ++ drop ((deref x) + 1) (((deref grid) !! (deref y)))] ++ drop ((deref y) + 1) (deref grid))
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return (MoveResult {board = Board {cells = (deref grid)}, score = (deref score), moved = (deref moved)})
    in loop))


moveRight b score = do
    grid <- newIORef (b.cells)
    moved <- newIORef (False)
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                rev <- newIORef (reverseRow (((deref grid) !! (deref y))))
                r <- newIORef (slideLeft (deref rev))
                writeIORef rev $! ((deref r).row)
                writeIORef score $! ((deref score) + (deref r).gain)
                writeIORef rev $! (reverseRow (deref rev))
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref grid) !! (deref y)) !! (deref x)) /= ((deref rev) !! (deref x)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef grid $! (take (deref y) (deref grid) ++ [take (deref x) (((deref grid) !! (deref y))) ++ [((deref rev) !! (deref x))] ++ drop ((deref x) + 1) (((deref grid) !! (deref y)))] ++ drop ((deref y) + 1) (deref grid))
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return (MoveResult {board = Board {cells = (deref grid)}, score = (deref score), moved = (deref moved)})
    in loop))


getCol b x = do
    col <- newIORef ([])
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                writeIORef col $! ((deref col) ++ [((b.cells !! (deref y)) !! x)])
                writeIORef y $! ((deref y) + 1)
                loop
            else return ((deref col))
    in loop))


setCol b x col = do
    rows <- newIORef ((deref b).cells)
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                row <- newIORef (((deref rows) !! (deref y)))
                writeIORef row $! (take x (deref row) ++ [(col !! (deref y))] ++ drop (x + 1) (deref row))
                writeIORef rows $! (take (deref y) (deref rows) ++ [(deref row)] ++ drop ((deref y) + 1) (deref rows))
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    writeIORef b $! ((deref b) {cells = (deref rows)})


moveUp b score = do
    grid <- newIORef (b.cells)
    moved <- newIORef (False)
    x <- newIORef (0)
    return ((let
        in loop = do
            if (deref x) < SIZE then do
                let col = getCol b (deref x)
                r <- newIORef (slideLeft col)
                let new = (deref r).row
                writeIORef score $! ((deref score) + (deref r).gain)
                y <- newIORef (0)
                let
                    loop = do
                        if (deref y) < SIZE then do
                            if (((deref grid) !! (deref y)) !! (deref x)) /= (new !! (deref y)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef grid $! (take (deref y) (deref grid) ++ [take (deref x) (((deref grid) !! (deref y))) ++ [(new !! (deref y))] ++ drop ((deref x) + 1) (((deref grid) !! (deref y)))] ++ drop ((deref y) + 1) (deref grid))
                            writeIORef y $! ((deref y) + 1)
                            loop
                        else return ()
                loop
                writeIORef x $! ((deref x) + 1)
                loop
            else return (MoveResult {board = Board {cells = (deref grid)}, score = (deref score), moved = (deref moved)})
    in loop))


moveDown b score = do
    grid <- newIORef (b.cells)
    moved <- newIORef (False)
    x <- newIORef (0)
    return ((let
        in loop = do
            if (deref x) < SIZE then do
                col <- newIORef (reverseRow (getCol b (deref x)))
                r <- newIORef (slideLeft (deref col))
                writeIORef col $! ((deref r).row)
                writeIORef score $! ((deref score) + (deref r).gain)
                writeIORef col $! (reverseRow (deref col))
                y <- newIORef (0)
                let
                    loop = do
                        if (deref y) < SIZE then do
                            if (((deref grid) !! (deref y)) !! (deref x)) /= ((deref col) !! (deref y)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef grid $! (take (deref y) (deref grid) ++ [take (deref x) (((deref grid) !! (deref y))) ++ [((deref col) !! (deref y))] ++ drop ((deref x) + 1) (((deref grid) !! (deref y)))] ++ drop ((deref y) + 1) (deref grid))
                            writeIORef y $! ((deref y) + 1)
                            loop
                        else return ()
                loop
                writeIORef x $! ((deref x) + 1)
                loop
            else return (MoveResult {board = Board {cells = (deref grid)}, score = (deref score), moved = (deref moved)})
    in loop))


hasMoves b = do
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return (False)
    in loop))


has2048 b = do
    y <- newIORef (0)
    return ((let
        in loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return (False)
    in loop))


SIZE = 4

main :: IO ()
main = do
    board <- newIORef ((deref r).board)
    full <- newIORef ((deref r).full)
    r <- newIORef (spawnTile (deref board))
    score <- newIORef (0)
    draw (deref board) (deref score)
    let
        loop = do
            if True then do
                putStrLn ("Move: ")
                cmd <- input
                moved <- newIORef (False)
                if cmd == "a" || cmd == "A" then do
                    let m = moveLeft (deref board) (deref score)
                    writeIORef board $! (m.board)
                    writeIORef score $! (m.score)
                    writeIORef moved $! (m.moved)
                else return ()

                if cmd == "d" || cmd == "D" then do
                    let m = moveRight (deref board) (deref score)
                    writeIORef board $! (m.board)
                    writeIORef score $! (m.score)
                    writeIORef moved $! (m.moved)
                else return ()

                if cmd == "w" || cmd == "W" then do
                    let m = moveUp (deref board) (deref score)
                    writeIORef board $! (m.board)
                    writeIORef score $! (m.score)
                    writeIORef moved $! (m.moved)
                else return ()

                if cmd == "s" || cmd == "S" then do
                    let m = moveDown (deref board) (deref score)
                    writeIORef board $! (m.board)
                    writeIORef score $! (m.score)
                    writeIORef moved $! (m.moved)
                else return ()

                if cmd == "q" || cmd == "Q" then do
                    return ()
                else return ()

                if (deref moved) then do
                    let r2 = spawnTile (deref board)
                    writeIORef board $! (r2.board)
                    writeIORef full $! (r2.full)
                    if (deref full) && (not (hasMoves (deref board))) then do
                        draw (deref board) (deref score)
                        putStrLn ("Game Over")
                        return ()
                    else return ()

                else return ()

                draw (deref board) (deref score)
                if has2048 (deref board) then do
                    putStrLn ("You win!")
                    return ()
                else return ()

                if not (hasMoves (deref board)) then do
                    putStrLn ("Game Over")
                    return ()
                else return ()

                loop
            else return ()
    loop
