{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (board, full, gain, moved, row, score)
-- Generated by Mochi transpiler v0.10.37 on 2025-07-23 12:18 GMT+7
import Data.IORef
import System.IO.Unsafe (unsafePerformIO)
deref :: IORef a -> a
{-# NOINLINE deref #-}
deref r = unsafePerformIO (atomicModifyIORef' r (\x -> (x, x)))
data GenType5 = GenType5
  { board :: [String],
    score :: String,
    moved :: Bool
  } deriving (Show, Eq)


data GenType6 = GenType6
  { board :: [String],
    score :: String,
    moved :: Bool
  } deriving (Show, Eq)


data GenType7 = GenType7
  { board :: [String],
    score :: String,
    moved :: Bool
  } deriving (Show, Eq)


data GenType1 = GenType1
  { board :: [String],
    full :: Bool
  } deriving (Show, Eq)


data GenType2 = GenType2
  { board :: [String],
    full :: Bool
  } deriving (Show, Eq)


data GenType3 = GenType3
  { row :: [String],
    gain :: Int
  } deriving (Show, Eq)


data GenType4 = GenType4
  { board :: [String],
    score :: String,
    moved :: Bool
  } deriving (Show, Eq)


newBoard = do
    b <- newIORef ([])
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                row <- newIORef ([])
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            writeIORef row $! ((deref row) ++ [0])
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef b $! ((deref b) ++ [(deref row)])
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return ((deref b))


spawnTile b = do
    empty <- newIORef ([])
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) == 0 then do
                                writeIORef empty $! ((deref empty) ++ [[(deref x), (deref y)]])
                            else return ()

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    if length (deref empty) == 0 then do
        return (GenType1 {board = (deref b), full = True})
    else return ()

    idx = now `mod` length (deref empty)
    cell = ((deref empty) !! idx)
    val <- newIORef (4)
    if now `mod` 10 < 9 then do
        writeIORef val $! (2)
    else return ()

    writeIORef b $! (take ((cell !! 1)) (deref b) ++ [take ((cell !! 0)) (((deref b) !! (cell !! 1))) ++ [(deref val)] ++ drop ((cell !! 0) + 1) (((deref b) !! (cell !! 1)))] ++ drop ((cell !! 1) + 1) (deref b))
    return (GenType2 {board = (deref b), full = length (deref empty) == 1})


pad n = do
    s = show n
    pad = 4 - length s
    i <- newIORef (0)
    out <- newIORef ("")
    let
        loop = do
            if (deref i) < pad then do
                writeIORef out $! ((deref out) ++ " ")
                writeIORef i $! ((deref i) + 1)
                loop
            else return ()
    loop
    return ((deref out) ++ s)


draw b score = do
    putStrLn ("Score: " ++ show (deref score))
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                putStrLn ("+----+----+----+----+")
                line <- newIORef ("|")
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            v = (((deref b) !! (deref y)) !! (deref x))
                            if v == 0 then do
                                writeIORef line $! ((deref line) ++ "    |")
                            else do
                                writeIORef line $! ((deref line) ++ pad v ++ "|")

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                putStrLn ((deref line))
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    putStrLn ("+----+----+----+----+")
    putStrLn ("W=Up S=Down A=Left D=Right Q=Quit")


reverseRow r = do
    out <- newIORef ([])
    i <- newIORef (length r - 1)
    let
        loop = do
            if (deref i) >= 0 then do
                writeIORef out $! ((deref out) ++ [(r !! (deref i))])
                writeIORef i $! ((deref i) - 1)
                loop
            else return ()
    loop
    return ((deref out))


slideLeft row = do
    xs <- newIORef ([])
    i <- newIORef (0)
    let
        loop = do
            if (deref i) < length (deref row) then do
                if ((deref row) !! (deref i)) != 0 then do
                    writeIORef xs $! ((deref xs) ++ [((deref row) !! (deref i))])
                else return ()

                writeIORef i $! ((deref i) + 1)
                loop
            else return ()
    loop
    res <- newIORef ([])
    gain <- newIORef (0)
    writeIORef i $! (0)
    let
        loop = do
            if (deref i) < length (deref xs) then do
                if (deref i) + 1 < length (deref xs) && ((deref xs) !! (deref i)) == ((deref xs) !! (deref i) + 1) then do
                    v = ((deref xs) !! (deref i)) * 2
                    writeIORef gain $! ((deref gain) + v)
                    writeIORef res $! ((deref res) ++ [v])
                    writeIORef i $! ((deref i) + 2)
                else do
                    writeIORef res $! ((deref res) ++ [((deref xs) !! (deref i))])
                    writeIORef i $! ((deref i) + 1)

                loop
            else return ()
    loop
    let
        loop = do
            if length (deref res) < SIZE then do
                writeIORef res $! ((deref res) ++ [0])
                loop
            else return ()
    loop
    return (GenType3 {row = (deref res), gain = (deref gain)})


moveLeft b score = do
    moved <- newIORef (False)
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                r = slideLeft (((deref b) !! (deref y)))
                new = (r !! "row")
                writeIORef score $! ((deref score) + (r !! "gain"))
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) != (new !! (deref x)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef b $! (take (deref y) (deref b) ++ [take (deref x) (((deref b) !! (deref y))) ++ [(new !! (deref x))] ++ drop ((deref x) + 1) (((deref b) !! (deref y)))] ++ drop ((deref y) + 1) (deref b))
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return (GenType4 {board = (deref b), score = (deref score), moved = (deref moved)})


moveRight b score = do
    moved <- newIORef (False)
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                rev <- newIORef (reverseRow (((deref b) !! (deref y))))
                r = slideLeft (deref rev)
                writeIORef rev $! ((r !! "row"))
                writeIORef score $! ((deref score) + (r !! "gain"))
                writeIORef rev $! (reverseRow (deref rev))
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) != ((deref rev) !! (deref x)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef b $! (take (deref y) (deref b) ++ [take (deref x) (((deref b) !! (deref y))) ++ [((deref rev) !! (deref x))] ++ drop ((deref x) + 1) (((deref b) !! (deref y)))] ++ drop ((deref y) + 1) (deref b))
                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return (GenType5 {board = (deref b), score = (deref score), moved = (deref moved)})


getCol b x = do
    col <- newIORef ([])
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                writeIORef col $! ((deref col) ++ [(((deref b) !! (deref y)) !! (deref x))])
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return ((deref col))


setCol b x col = do
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                writeIORef b $! (take (deref y) (deref b) ++ [take (deref x) (((deref b) !! (deref y))) ++ [((deref col) !! (deref y))] ++ drop ((deref x) + 1) (((deref b) !! (deref y)))] ++ drop ((deref y) + 1) (deref b))
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop


moveUp b score = do
    moved <- newIORef (False)
    x <- newIORef (0)
    let
        loop = do
            if (deref x) < SIZE then do
                col <- newIORef (getCol (deref b) (deref x))
                r = slideLeft (deref col)
                new = (r !! "row")
                writeIORef score $! ((deref score) + (r !! "gain"))
                y <- newIORef (0)
                let
                    loop = do
                        if (deref y) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) != (new !! (deref y)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef b $! (take (deref y) (deref b) ++ [take (deref x) (((deref b) !! (deref y))) ++ [(new !! (deref y))] ++ drop ((deref x) + 1) (((deref b) !! (deref y)))] ++ drop ((deref y) + 1) (deref b))
                            writeIORef y $! ((deref y) + 1)
                            loop
                        else return ()
                loop
                writeIORef x $! ((deref x) + 1)
                loop
            else return ()
    loop
    return (GenType6 {board = (deref b), score = (deref score), moved = (deref moved)})


moveDown b score = do
    moved <- newIORef (False)
    x <- newIORef (0)
    let
        loop = do
            if (deref x) < SIZE then do
                col <- newIORef (reverseRow (getCol (deref b) (deref x)))
                r = slideLeft (deref col)
                writeIORef col $! ((r !! "row"))
                writeIORef score $! ((deref score) + (r !! "gain"))
                writeIORef col $! (reverseRow (deref col))
                y <- newIORef (0)
                let
                    loop = do
                        if (deref y) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) != ((deref col) !! (deref y)) then do
                                writeIORef moved $! (True)
                            else return ()

                            writeIORef b $! (take (deref y) (deref b) ++ [take (deref x) (((deref b) !! (deref y))) ++ [((deref col) !! (deref y))] ++ drop ((deref x) + 1) (((deref b) !! (deref y)))] ++ drop ((deref y) + 1) (deref b))
                            writeIORef y $! ((deref y) + 1)
                            loop
                        else return ()
                loop
                writeIORef x $! ((deref x) + 1)
                loop
            else return ()
    loop
    return (GenType7 {board = (deref b), score = (deref score), moved = (deref moved)})


hasMoves b = do
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) == 0 then do
                                return (True)
                            else return ()

                            if (deref x) + 1 < SIZE && (((deref b) !! (deref y)) !! (deref x)) == (((deref b) !! (deref y)) !! (deref x) + 1) then do
                                return (True)
                            else return ()

                            if (deref y) + 1 < SIZE && (((deref b) !! (deref y)) !! (deref x)) == (((deref b) !! (deref y) + 1) !! (deref x)) then do
                                return (True)
                            else return ()

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return (False)


has2048 b = do
    y <- newIORef (0)
    let
        loop = do
            if (deref y) < SIZE then do
                x <- newIORef (0)
                let
                    loop = do
                        if (deref x) < SIZE then do
                            if (((deref b) !! (deref y)) !! (deref x)) >= 2048 then do
                                return (True)
                            else return ()

                            writeIORef x $! ((deref x) + 1)
                            loop
                        else return ()
                loop
                writeIORef y $! ((deref y) + 1)
                loop
            else return ()
    loop
    return (False)


SIZE = 4

r = spawnTile (deref board)

main :: IO ()
main = do
    board <- newIORef ((r !! "board"))
    full <- newIORef ((r !! "full"))
    score <- newIORef (0)
    draw (deref board) (deref score)
    let
        loop = do
            if True then do
                putStrLn ("Move: ")
                cmd = input
                moved <- newIORef (False)
                if cmd == "a" || cmd == "A" then do
                    m = moveLeft (deref board) (deref score)
                    writeIORef board $! ((m !! "board"))
                    writeIORef score $! ((m !! "score"))
                    writeIORef moved $! ((m !! "moved"))
                else return ()

                if cmd == "d" || cmd == "D" then do
                    m = moveRight (deref board) (deref score)
                    writeIORef board $! ((m !! "board"))
                    writeIORef score $! ((m !! "score"))
                    writeIORef moved $! ((m !! "moved"))
                else return ()

                if cmd == "w" || cmd == "W" then do
                    m = moveUp (deref board) (deref score)
                    writeIORef board $! ((m !! "board"))
                    writeIORef score $! ((m !! "score"))
                    writeIORef moved $! ((m !! "moved"))
                else return ()

                if cmd == "s" || cmd == "S" then do
                    m = moveDown (deref board) (deref score)
                    writeIORef board $! ((m !! "board"))
                    writeIORef score $! ((m !! "score"))
                    writeIORef moved $! ((m !! "moved"))
                else return ()

                if cmd == "q" || cmd == "Q" then do
                    return ()
                else return ()

                if (deref moved) then do
                    r2 = spawnTile (deref board)
                    writeIORef board $! ((r2 !! "board"))
                    writeIORef full $! ((r2 !! "full"))
                    if (deref full) && (not (hasMoves (deref board))) then do
                        draw (deref board) (deref score)
                        putStrLn ("Game Over")
                        return ()
                    else return ()

                else return ()

                draw (deref board) (deref score)
                if has2048 (deref board) then do
                    putStrLn ("You win!")
                    return ()
                else return ()

                if not (hasMoves (deref board)) then do
                    putStrLn ("Game Over")
                    return ()
                else return ()

                loop
            else return ()
    loop
