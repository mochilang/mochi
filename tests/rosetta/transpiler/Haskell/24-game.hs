{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
-- Generated by Mochi transpiler v0.10.37 on 2025-07-23 12:18 GMT+7
import Data.IORef
import System.IO.Unsafe (unsafePerformIO)
deref :: IORef a -> a
{-# NOINLINE deref #-}
deref r = unsafePerformIO (atomicModifyIORef' r (\x -> (x, x)))
randDigit = (now `mod` 9) + 1

main = do
    digits <- newIORef ([])
    mapM_ (\i -> do
        writeIORef digits $! ((deref digits) ++ [randDigit])
        ) [0 .. (4 - 1)]
    numstr <- newIORef ("")
    mapM_ (\i -> do
        writeIORef numstr $! ((deref numstr) ++ show (((deref digits) !! (deref i))))
        ) [0 .. (4 - 1)]
    putStrLn ("Your numbers: " ++ (deref numstr) ++ "\n")
    putStrLn ("Enter RPN: ")
    expr = input
    if length expr != 7 then do
        putStrLn ("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
        return (0)
    else return ()

    stack <- newIORef ([])
    i <- newIORef (0)
    valid <- newIORef (True)
    let
        loop = do
            if (deref i) < length expr then do
                ch = take ((deref i) + 1 - (deref i)) (drop (deref i) expr)
                if ch >= "0" && ch <= "9" then do
                    if length (deref digits) == 0 then do
                        putStrLn ("too many numbers.")
                        return (0)
                    else return ()

                    j <- newIORef (0)
                    let
                        loop = do
                            if ((deref digits) !! (deref j)) != int ch - int "0" then do
                                writeIORef j $! ((deref j) + 1)
                                if (deref j) == length (deref digits) then do
                                    putStrLn ("wrong numbers.")
                                    return (0)
                                else return ()

                                loop
                            else return ()
                    loop
                    writeIORef digits $! (take ((deref j) - 0) (drop 0 (deref digits)) + take (0 - (deref j) + 1) (drop (deref j) + 1 (deref digits)))
                    writeIORef stack $! ((deref stack) ++ [float (int ch - int "0")])
                else do
                    if length (deref stack) < 2 then do
                        putStrLn ("invalid expression syntax.")
                        writeIORef valid $! (False)
                        return ()
                    else return ()

                    b = ((deref stack) !! length (deref stack) - 1)
                    a = ((deref stack) !! length (deref stack) - 2)
                    if ch == "+" then do
                        writeIORef stack $! (take (length (deref stack) - 2) (deref stack) ++ [a + b] ++ drop (length (deref stack) - 2 + 1) (deref stack))
                    else do
                        if ch == "-" then do
                            writeIORef stack $! (take (length (deref stack) - 2) (deref stack) ++ [a - b] ++ drop (length (deref stack) - 2 + 1) (deref stack))
                        else do
                            if ch == "*" then do
                                writeIORef stack $! (take (length (deref stack) - 2) (deref stack) ++ [a * b] ++ drop (length (deref stack) - 2 + 1) (deref stack))
                            else do
                                if ch == "/" then do
                                    writeIORef stack $! (take (length (deref stack) - 2) (deref stack) ++ [a / b] ++ drop (length (deref stack) - 2 + 1) (deref stack))
                                else do
                                    putStrLn (ch ++ " invalid.")
                                    writeIORef valid $! (False)
                                    return ()




                    writeIORef stack $! (take (length (deref stack) - 1 - 0) (drop 0 (deref stack)))

                writeIORef i $! ((deref i) + 1)
                loop
            else return ()
    loop
    if (deref valid) then do
        if abs (((deref stack) !! 0) - 24) > 1e-06 then do
            putStrLn ("incorrect. " ++ show (((deref stack) !! 0)) ++ " != 24")
        else do
            putStrLn ("correct.")

    else return ()



main :: IO ()
main = do
    main
