{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
{-# LANGUAGE OverloadedStrings #-}
-- Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 GMT+7
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Encode.Pretty as Pretty
import qualified Data.ByteString.Lazy.Char8 as BSL
import Data.IORef
import System.IO.Unsafe (unsafePerformIO)
import System.Environment (lookupEnv)
import Data.Time.Clock.POSIX (getPOSIXTime)
import Data.Char (isDigit)
import GHC.Stats (getRTSStats, max_mem_in_use_bytes)
import System.IO (isEOF)
input :: IO String
input = do
    eof <- isEOF
    if eof then return "" else getLine
int :: String -> Int
int = read
float :: Int -> Double
float n = fromIntegral n
deref :: IORef a -> a
{-# NOINLINE deref #-}
deref r = unsafePerformIO (atomicModifyIORef' r (\x -> (x, x)))
_nowSeed :: IORef Int
_nowSeed = unsafePerformIO (newIORef 0)
{-# NOINLINE _nowSeed #-}
_nowSeeded :: IORef Bool
_nowSeeded = unsafePerformIO (newIORef False)
{-# NOINLINE _nowSeeded #-}
_now :: IO Int
_now = do
    seeded <- readIORef _nowSeeded
    if not seeded then do
        m <- lookupEnv "MOCHI_NOW_SEED"
        case m of
            Just s | all isDigit s -> do writeIORef _nowSeed (read s); writeIORef _nowSeeded True
            _ -> return ()
     else return ()
    seeded2 <- readIORef _nowSeeded
    if seeded2 then do
        modifyIORef' _nowSeed (\x -> (x * 1664525 + 1013904223) `mod` 2147483647)
        readIORef _nowSeed
    else do
        t <- getPOSIXTime
        return (floor (t * 1000000000))
_mem :: IO Int
_mem = fmap (fromIntegral . max_mem_in_use_bytes) getRTSStats
pfacSum i = do
    sum <- newIORef (0)
    p <- newIORef (1)
    (let {
        loop = do
            if (deref p) <= i / fromIntegral 2 then do
                if i `mod` (deref p) == 0 then do
                    writeIORef sum $! ((deref sum) + (deref p))
                else return ()

                writeIORef p $! ((deref p) + 1)
                loop
            else return ((deref sum))
    } in loop)


mainEntry = do
    d <- newIORef (0)
    a <- newIORef (0)
    pnum <- newIORef (0)
    i <- newIORef (1)
    let
        loop = do
            if (deref i) <= 20000 then do
                j <- pfacSum (deref i)
                if j < (deref i) then do
                    writeIORef d $! ((deref d) + 1)
                else return ()

                if j == (deref i) then do
                    writeIORef pnum $! ((deref pnum) + 1)
                else return ()

                if j > (deref i) then do
                    writeIORef a $! ((deref a) + 1)
                else return ()

                writeIORef i $! ((deref i) + 1)
                loop
            else return ()
    loop
    putStrLn ("There are " ++ show (deref d) ++ " deficient numbers between 1 and 20000")
    putStrLn ("There are " ++ show (deref a) ++ " abundant numbers  between 1 and 20000")
    putStrLn ("There are " ++ show (deref pnum) ++ " perfect numbers between 1 and 20000")


main = do
    do
        start <- _now
        mainEntry
        end <- _now
        memEnd <- _mem
        let benchData = Aeson.object ["duration_us" Aeson..= ((end - start) `div` 1000), "memory_bytes" Aeson..= memEnd, "name" Aeson..= ("main" :: String)]
        BSL.putStrLn (Pretty.encodePretty' Pretty.defConfig{Pretty.confIndent = Pretty.Spaces 2} benchData)



