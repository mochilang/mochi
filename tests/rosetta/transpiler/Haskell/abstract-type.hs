{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (Beast, kind, name)
-- Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:17 GMT+7
import System.IO (isEOF)
input :: IO String
input = do
    eof <- isEOF
    if eof then return "" else getLine
int :: String -> Int
int = read
float :: Int -> Double
float n = fromIntegral n
data Beast = Dog {kind :: String, name :: String} | Cat {kind :: String, name :: String}
  deriving (Show, Eq)


beastKind b = (case b of Dog {kind = k, name = _} -> k; Cat {kind = k, name = _} -> k; )

beastName b = (case b of Dog {kind = _, name = n} -> n; Cat {kind = _, name = n} -> n; )

beastCry b = (case b of Dog {kind = _, name = _} -> "Woof"; Cat {kind = _, name = _} -> "Meow"; )

bprint b = do
    putStrLn (beastName b ++ ", who's a " ++ beastKind b ++ ", cries: \"" ++ beastCry b ++ "\".")


main = do
    let d = Dog {kind = "labrador", name = "Max"}
    let c = Cat {kind = "siamese", name = "Sammy"}
    bprint d
    bprint c


