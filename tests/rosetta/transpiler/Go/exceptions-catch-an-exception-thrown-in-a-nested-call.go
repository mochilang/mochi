//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var bazCall int

func baz() string {
	bazCall = (bazCall + 1)
	fmt.Println("baz: start")
	if bazCall == 1 {
		fmt.Println("baz: raising U0")
		return "U0"
	}
	if bazCall == 2 {
		fmt.Println("baz: raising U1")
		return "U1"
	}
	fmt.Println("baz: end")
	return ""
}

func bar() string {
	fmt.Println("bar: start")
	var err string = baz()
	_ = err
	if len(err) > 0 {
		return err
	}
	fmt.Println("bar: end")
	return ""
}

func foo() string {
	fmt.Println("foo: start")
	var err string = bar()
	_ = err
	if err == "U0" {
		fmt.Println("foo: caught U0")
	} else {
		if len(err) > 0 {
			return err
		}
	}
	err = bar()
	if err == "U0" {
		fmt.Println("foo: caught U0")
	} else {
		if len(err) > 0 {
			return err
		}
	}
	fmt.Println("foo: end")
	return ""
}

func mochiMain() {
	fmt.Println("main: start")
	var err string = foo()
	_ = err
	if len(err) > 0 {
		fmt.Println(("main: unhandled " + err))
	} else {
		fmt.Println("main: success")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		bazCall = 0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
