//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func weekday(y int, m int, d int) int {
	var yy int = y
	_ = yy
	var mm int = m
	_ = mm
	if mm < 3 {
		mm = (mm + 12)
		yy = (yy - 1)
	}
	var k int = (yy % 100)
	_ = k
	_ = k
	var j int = int((yy / 100))
	_ = j
	_ = j
	var a int = int(((13 * (mm + 1)) / 5))
	_ = a
	_ = a
	var b int = int((k / 4))
	_ = b
	_ = b
	var c int = int((j / 4))
	_ = c
	_ = c
	return ((((((d + a) + k) + b) + c) + (5 * j)) % 7)
}

func mochiMain() {
	var months31 []int = []int{1, 3, 5, 7, 8, 10, 12}
	_ = months31
	var names []string = []string{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
	_ = names
	var count int = 0
	_ = count
	var firstY int = 0
	_ = firstY
	var firstM int = 0
	_ = firstM
	var lastY int = 0
	_ = lastY
	var lastM int = 0
	_ = lastM
	var haveNone []int = []int{}
	_ = haveNone
	fmt.Println("Months with five weekends:")
	for year := 1900; year < 2101; year++ {
		var hasOne bool = false
		_ = hasOne
		for _, m := range months31 {
			if weekday(year, m, 1) == 6 {
				fmt.Println(((("  " + fmt.Sprint(year)) + " ") + names[(m-1)]))
				count = (count + 1)
				hasOne = true
				lastY = year
				lastM = m
				if firstY == 0 {
					firstY = year
					firstM = m
				}
			}
		}
		if !hasOne {
			haveNone = append(haveNone, year)
		}
	}
	fmt.Println((fmt.Sprint(count) + " total"))
	fmt.Println("")
	fmt.Println("First five dates of weekends:")
	for i := 0; i < 5; i++ {
		var day int = (1 + (7 * i))
		_ = day
		fmt.Println(((((("  Friday, " + names[(firstM-1)]) + " ") + fmt.Sprint(day)) + ", ") + fmt.Sprint(firstY)))
	}
	fmt.Println("Last five dates of weekends:")
	for i := 0; i < 5; i++ {
		var day int = (1 + (7 * i))
		_ = day
		fmt.Println(((((("  Friday, " + names[(lastM-1)]) + " ") + fmt.Sprint(day)) + ", ") + fmt.Sprint(lastY)))
	}
	fmt.Println("")
	fmt.Println("Years with no months with five weekends:")
	for _, y := range haveNone {
		fmt.Println(("  " + fmt.Sprint(y)))
	}
	fmt.Println((fmt.Sprint(len(haveNone)) + " total"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
