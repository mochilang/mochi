//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 19:16:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func egcd(a int, b int) []int {
	if a == 0 {
		return []int{b, 0, 1}
	}
	var res []int = egcd((b % a), a)
	_ = res
	var g int = res[0]
	_ = g
	var x1 int = res[1]
	_ = x1
	var y1 int = res[2]
	_ = y1
	return []int{g, (y1 - ((b / a) * x1)), x1}
}

func modInv(a int, m int) int {
	var r []int = egcd(a, m)
	_ = r
	if r[0] != 1 {
		return 0
	}
	var x int = r[1]
	_ = x
	if x < 0 {
		return (x + m)
	}
	return x
}

func crt(a []int, n []int) int {
	var prod int = 1
	_ = prod
	var i int = 0
	_ = i
	for i < len(n) {
		prod = (prod * n[i])
		i = (i + 1)
	}
	var x int = 0
	_ = x
	i = 0
	for i < len(n) {
		var ni int = n[i]
		_ = ni
		var ai int = a[i]
		_ = ai
		var p int = (prod / ni)
		_ = p
		var inv int = modInv((p % ni), ni)
		_ = inv
		x = (x + ((ai * inv) * p))
		i = (i + 1)
	}
	return (x % prod)
}

var n []int

var a []int

var res int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n = []int{3, 5, 7}
		a = []int{2, 3, 2}
		res = crt(a, n)
		fmt.Println((fmt.Sprint(res) + " <nil>"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
