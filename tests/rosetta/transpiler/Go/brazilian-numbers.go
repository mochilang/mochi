//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:04:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sameDigits(n int, b int) bool {
	var f int = (n % b)
	_ = f
	n = int((n / b))
	for n > 0 {
		if (n % b) != f {
			return false
		}
		n = int((n / b))
	}
	return true
}

func isBrazilian(n int) bool {
	if n < 7 {
		return false
	}
	if ((n % 2) == 0) && (n >= 8) {
		return true
	}
	var b int = 2
	_ = b
	for b < (n - 1) {
		if sameDigits(n, b) {
			return true
		}
		b = (b + 1)
	}
	return false
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func mochiMain() {
	var kinds []string = []string{" ", " odd ", " prime "}
	_ = kinds
	for _, kind := range kinds {
		fmt.Println((("First 20" + kind) + "Brazilian numbers:"))
		var c int = 0
		_ = c
		var n int = 7
		_ = n
		for {
			if isBrazilian(n) {
				fmt.Println((fmt.Sprint(n) + " "))
				c = (c + 1)
				if c == 20 {
					fmt.Println("\n")
					break
				}
			}
			if kind == " " {
				n = (n + 1)
			} else {
				if kind == " odd " {
					n = (n + 2)
				} else {
					for {
						n = (n + 2)
						if isPrime(n) {
							break
						}
					}
				}
			}
		}
	}
	var n int = 7
	_ = n
	var c int = 0
	_ = c
	for c < 100000 {
		if isBrazilian(n) {
			c = (c + 1)
		}
		n = (n + 1)
	}
	fmt.Println(("The 100,000th Brazilian number: " + fmt.Sprint((n - 1))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
