//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isNumeric(s string) bool {
	if s == "NaN" {
		return true
	}
	var i int = 0
	if len(s) == 0 {
		return false
	}
	if (string([]rune(s)[0]) == "+") || (string([]rune(s)[0]) == "-") {
		if len(s) == 1 {
			return false
		}
		i = 1
	}
	var digits bool = false
	var dot bool = false
	for i < len(s) {
		var ch string = string([]rune(s)[i])
		if (ch >= "0") && (ch <= "9") {
			digits = true
			i = (i + 1)
		} else {
			if (ch == ".") && (dot == false) {
				dot = true
				i = (i + 1)
			} else {
				if ((ch == "e") || (ch == "E")) && digits {
					i = (i + 1)
					if (i < len(s)) && ((string([]rune(s)[i]) == "+") || (string([]rune(s)[i]) == "-")) {
						i = (i + 1)
					}
					var ed bool = false
					for ((i < len(s)) && (string([]rune(s)[i]) >= "0")) && (string([]rune(s)[i]) <= "9") {
						ed = true
						i = (i + 1)
					}
					return (ed && (i == len(s)))
				} else {
					return false
				}
			}
		}
	}
	return digits
}

func mochiMain() {
	fmt.Println("Are these strings numeric?")
	var strs []string = []string{"1", "3.14", "-100", "1e2", "NaN", "rose"}
	for _, _ch := range strs {
		s := string(_ch)
		fmt.Println(((("  " + s) + " -> ") + fmt.Sprint(isNumeric(s))))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
