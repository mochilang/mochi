//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 18:06:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var gregorianStr []string

var gregorian []int

var republicanStr []string

var sansculotidesStr []string

func greLeap(year int) bool {
	var a int = int((year % 4))
	_ = a
	_ = a
	var b int = int((year % 100))
	_ = b
	_ = b
	var c int = int((year % 400))
	_ = c
	_ = c
	return ((a == 0) && ((b != 0) || (c == 0)))
}

func repLeap(year int) bool {
	var a int = int(((year + 1) % 4))
	_ = a
	_ = a
	var b int = int(((year + 1) % 100))
	_ = b
	_ = b
	var c int = int(((year + 1) % 400))
	_ = c
	_ = c
	return ((a == 0) && ((b != 0) || (c == 0)))
}

func greToDay(d int, m int, y int) int {
	var yy int = y
	_ = yy
	var mm int = m
	_ = mm
	if mm < 3 {
		yy = (yy - 1)
		mm = (mm + 12)
	}
	return (((((((yy * 36525) / 100) - (yy / 100)) + (yy / 400)) + ((306 * (mm + 1)) / 10)) + d) - 654842)
}

func repToDay(d int, m int, y int) int {
	var dd int = d
	_ = dd
	var mm int = m
	_ = mm
	if mm == 13 {
		mm = (mm - 1)
		dd = (dd + 30)
	}
	if repLeap(y) {
		dd = (dd - 1)
	}
	return (((((((365 * y) + ((y + 1) / 4)) - ((y + 1) / 100)) + ((y + 1) / 400)) + (30 * mm)) + dd) - 395)
}

func dayToGre(day int) []int {
	var y int = ((day * 100) / 36525)
	_ = y
	var d int = ((day - ((y * 36525) / 100)) + 21)
	_ = d
	y = (y + 1792)
	d = (((d + (y / 100)) - (y / 400)) - 13)
	var m int = 8
	_ = m
	for d > gregorian[m] {
		d = (d - gregorian[m])
		m = (m + 1)
		if m == 12 {
			m = 0
			y = (y + 1)
			if greLeap(y) {
				gregorian[1] = 29
			} else {
				gregorian[1] = 28
			}
		}
	}
	m = (m + 1)
	return []int{d, m, y}
}

func dayToRep(day int) []int {
	var y int = (((day - 1) * 100) / 36525)
	_ = y
	if repLeap(y) {
		y = (y - 1)
	}
	var d int = ((((day - (((y + 1) * 36525) / 100)) + 365) + ((y + 1) / 100)) - ((y + 1) / 400))
	_ = d
	y = (y + 1)
	var m int = 1
	_ = m
	var sc int = 5
	_ = sc
	if repLeap(y) {
		sc = 6
	}
	for d > 30 {
		d = (d - 30)
		m = (m + 1)
		if m == 13 {
			if d > sc {
				d = (d - sc)
				m = 1
				y = (y + 1)
				sc = 5
				if repLeap(y) {
					sc = 6
				}
			}
		}
	}
	return []int{d, m, y}
}

func formatRep(d int, m int, y int) string {
	if m == 13 {
		return ((sansculotidesStr[(d-1)] + " ") + fmt.Sprint(y))
	}
	return ((((fmt.Sprint(d) + " ") + republicanStr[(m-1)]) + " ") + fmt.Sprint(y))
}

func formatGre(d int, m int, y int) string {
	return ((((fmt.Sprint(d) + " ") + gregorianStr[(m-1)]) + " ") + fmt.Sprint(y))
}

var rep []int

var gre []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		gregorianStr = []string{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
		gregorian = []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
		republicanStr = []string{"Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"}
		sansculotidesStr = []string{"Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"}
		rep = dayToRep(greToDay(20, 5, 1795))
		fmt.Println(formatRep(rep[0], rep[1], rep[2]))
		gre = dayToGre(repToDay(1, 9, 3))
		fmt.Println(formatGre(gre[0], gre[1], gre[2]))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
