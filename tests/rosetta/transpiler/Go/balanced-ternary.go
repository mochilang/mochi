//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:05:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func trimLeftZeros(s string) string {
	var i int = 0
	_ = i
	for (i < len(s)) && (_substr(s, i, (i+1)) == "0") {
		i = (i + 1)
	}
	return _substr(s, i, len(s))
}

func btString(s string) map[string]any {
	s = trimLeftZeros(s)
	var b []int = []int{}
	_ = b
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == "+" {
			b = append(b, 1)
		} else {
			if ch == "0" {
				b = append(b, 0)
			} else {
				if ch == "-" {
					b = append(b, (0 - 1))
				} else {
					return map[string]any{"bt": []any{}, "ok": false}
				}
			}
		}
		i = (i - 1)
	}
	return map[string]any{"bt": b, "ok": true}
}

func btToString(b []int) string {
	if len(b) == 0 {
		return "0"
	}
	var r string = ""
	_ = r
	var i int = (len(b) - 1)
	_ = i
	for i >= 0 {
		var d int = b[i]
		_ = d
		if d == (0 - 1) {
			r = (r + "-")
		} else {
			if d == 0 {
				r = (r + "0")
			} else {
				r = (r + "+")
			}
		}
		i = (i - 1)
	}
	return r
}

func btInt(i int) []int {
	if i == 0 {
		return []int{}
	}
	var n int = i
	_ = n
	var b []int = []int{}
	_ = b
	for n != 0 {
		var m int = (n % 3)
		_ = m
		n = int((n / 3))
		if m == 2 {
			m = (0 - 1)
			n = (n + 1)
		} else {
			if m == (0 - 2) {
				m = 1
				n = (n - 1)
			}
		}
		b = append(b, m)
	}
	return b
}

func btToInt(b []int) int {
	var r int = 0
	_ = r
	var pt int = 1
	_ = pt
	var i int = 0
	_ = i
	for i < len(b) {
		r = (r + (b[i] * pt))
		pt = (pt * 3)
		i = (i + 1)
	}
	return r
}

func btNeg(b []int) []int {
	var r []int = []int{}
	_ = r
	var i int = 0
	_ = i
	for i < len(b) {
		r = append(r, (0 - b[i]))
		i = (i + 1)
	}
	return r
}

func btAdd(a []int, b []int) []int {
	return btInt((btToInt(a) + btToInt(b)))
}

func btMul(a []int, b []int) []int {
	return btInt((btToInt(a) * btToInt(b)))
}

func padLeft(s string, w int) string {
	var r string = s
	_ = r
	for len(r) < w {
		r = (" " + r)
	}
	return r
}

func show(label string, b []int) {
	var l string = padLeft(label, 7)
	_ = l
	var bs string = padLeft(btToString(b), 12)
	_ = bs
	var is string = padLeft(fmt.Sprint(btToInt(b)), 7)
	_ = is
	fmt.Println(((((l + " ") + bs) + " ") + is))
}

func mochiMain() {
	var ares map[string]any = btString("+-0++0+")
	_ = ares
	a := ares["bt"]
	_ = a
	var b []int = btInt((0 - 436))
	_ = b
	var cres map[string]any = btString("+-++-")
	_ = cres
	c := cres["bt"]
	_ = c
	show("a:", a.([]int))
	show("b:", b)
	show("c:", c.([]int))
	show("a(b-c):", btMul(a.([]int), btAdd(b, btNeg(c.([]int)))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
