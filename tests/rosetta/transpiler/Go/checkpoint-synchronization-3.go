//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:33:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func lower(ch string) string {
	var up string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = up
	var low string = "abcdefghijklmnopqrstuvwxyz"
	_ = low
	_ = low
	var i int = 0
	_ = i
	for i < len(up) {
		if ch == _substr(up, i, (i+1)) {
			return _substr(low, i, (i + 1))
		}
		i = (i + 1)
	}
	return ch
}

var partList []string

var nAssemblies int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		partList = []string{"A", "B", "C", "D"}
		nAssemblies = 3
		for _, p := range partList {
			fmt.Println((p + " worker running"))
		}
		for cycle := 1; cycle < (nAssemblies + 1); cycle++ {
			fmt.Println(("begin assembly cycle " + fmt.Sprint(cycle)))
			var a string = ""
			_ = a
			for _, p := range partList {
				fmt.Println((p + " worker begins part"))
				fmt.Println(((p + " worker completed ") + strings.ToLower(p)))
				a = (a + strings.ToLower(p))
			}
			fmt.Println((((a + " assembled.  cycle ") + fmt.Sprint(cycle)) + " complete"))
		}
		for _, p := range partList {
			fmt.Println((p + " worker stopped"))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
