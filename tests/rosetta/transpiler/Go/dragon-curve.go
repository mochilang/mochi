//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var depth int

var seq string

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		depth = 10
		seq = "F"
		i = 0
		for i < depth {
			var rev string = ""
			_ = rev
			var j int = (len(seq) - 1)
			_ = j
			for j >= 0 {
				var c string = _substr(seq, j, (j + 1))
				_ = c
				if c == "L" {
					rev = (rev + "R")
				} else {
					if c == "R" {
						rev = (rev + "L")
					} else {
						rev = (rev + c)
					}
				}
				j = (j - 1)
			}
			seq = ((seq + "L") + rev)
			i = (i + 1)
		}
		fmt.Println(seq)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
