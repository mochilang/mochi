//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:43:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mochiMain() {
	var a int = 12345678
	_ = a
	var b int = 98765
	_ = b
	fmt.Println(((((fmt.Sprint(a) + " + ") + fmt.Sprint(b)) + " = ") + fmt.Sprint((a + b))))
	fmt.Println(((((fmt.Sprint(a) + " - ") + fmt.Sprint(b)) + " = ") + fmt.Sprint((a - b))))
	fmt.Println(((((fmt.Sprint(a) + " * ") + fmt.Sprint(b)) + " = ") + fmt.Sprint((a * b))))
	fmt.Println(((((fmt.Sprint(a) + " quo ") + fmt.Sprint(b)) + " = ") + fmt.Sprint(int((a / b)))))
	fmt.Println(((((fmt.Sprint(a) + " rem ") + fmt.Sprint(b)) + " = ") + fmt.Sprint((a % b))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
