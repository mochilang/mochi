//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 05:00:51 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func shuffle(xs []string) []string {
	var arr []string = xs
	_ = arr
	var i int = (len(arr) - 1)
	_ = i
	for i > 0 {
		var j int = (_now() % (i + 1))
		_ = j
		var tmp string = arr[i]
		_ = tmp
		arr[i] = arr[j]
		arr[j] = tmp
		i = (i - 1)
	}
	return arr
}

func mochiMain() {
	fmt.Println("Cows and Bulls")
	fmt.Println("Guess four digit number of unique digits in the range 1 to 9.")
	fmt.Println("A correct digit but not in the correct place is a cow.")
	fmt.Println("A correct digit in the correct place is a bull.")
	var digits []string = []string{"1", "2", "3", "4", "5", "6", "7", "8", "9"}
	_ = digits
	digits = shuffle(digits)
	var pat string = (((digits[0] + digits[1]) + digits[2]) + digits[3])
	_ = pat
	var valid string = "123456789"
	_ = valid
	for {
		fmt.Println("Guess: ")
		var guess string = _input()
		_ = guess
		if len(guess) != 4 {
			fmt.Println("Please guess a four digit number.")
			continue
		}
		var cows int = 0
		_ = cows
		var bulls int = 0
		_ = bulls
		var seen string = ""
		_ = seen
		var i int = 0
		_ = i
		var malformed bool = false
		_ = malformed
		for i < 4 {
			var cg string = _substr(guess, i, (i + 1))
			_ = cg
			if strings.Index(seen, cg) != (0 - 1) {
				fmt.Println(("Repeated digit: " + cg))
				malformed = true
				break
			}
			seen = (seen + cg)
			var pos int = strings.Index(pat, cg)
			_ = pos
			if pos == (0 - 1) {
				if strings.Index(valid, cg) == (0 - 1) {
					fmt.Println(("Invalid digit: " + cg))
					malformed = true
					break
				}
			} else {
				if pos == i {
					bulls = (bulls + 1)
				} else {
					cows = (cows + 1)
				}
			}
			i = (i + 1)
		}
		if malformed {
			continue
		}
		fmt.Println(((("Cows: " + fmt.Sprint(cows)) + ", bulls: ") + fmt.Sprint(bulls)))
		if bulls == 4 {
			fmt.Println("You got it.")
			break
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
