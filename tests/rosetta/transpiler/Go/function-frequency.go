//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:11:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func join(xs []string, sep string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			res = (res + sep)
		}
		res = (res + xs[i])
		i = (i + 1)
	}
	return res
}

func sortPairs(xs []map[string]any) []map[string]any {
	var arr []map[string]any = xs
	_ = arr
	var i int = 1
	_ = i
	for i < len(arr) {
		var j int = i
		_ = j
		for (j > 0) && (arr[(j - 1)]["count"].(int) < arr[j]["count"].(int)) {
			var tmp map[string]any = arr[(j - 1)]
			_ = tmp
			arr[(j - 1)] = arr[j]
			arr[j] = tmp
			j = (j - 1)
		}
		i = (i + 1)
	}
	return arr
}

func isAlphaNumDot(ch string) bool {
	return ((((((ch >= "A") && (ch <= "Z")) || ((ch >= "a") && (ch <= "z"))) || ((ch >= "0") && (ch <= "9"))) || (ch == "_")) || (ch == "."))
}

func mochiMain() {
	var srcLines []string = []string{"package main", "", "import (", "    \"fmt\"", "    \"go/ast\"", "    \"go/parser\"", "    \"go/token\"", "    \"io/ioutil\"", "    \"os\"", "    \"sort\"", ")", "", "func main() {", "    if len(os.Args) != 2 {", "        fmt.Println(\"usage ff <go source filename>\")", "        return", "    }", "    src, err := ioutil.ReadFile(os.Args[1])", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    fs := token.NewFileSet()", "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    f := fs.File(a.Pos())", "    m := make(map[string]int)", "    ast.Inspect(a, func(n ast.Node) bool {", "        if ce, ok := n.(*ast.CallExpr); ok {", "            start := f.Offset(ce.Pos())", "            end := f.Offset(ce.Lparen)", "            m[string(src[start:end])]++", "        }", "        return true", "    })", "    cs := make(calls, 0, len(m))", "    for k, v := range m {", "        cs = append(cs, &call{k, v})", "    }", "    sort.Sort(cs)", "    for i, c := range cs {", "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)", "        if i == 9 {", "            break", "        }", "    }", "}", "", "type call struct {", "    expr  string", "    count int", "}", "type calls []*call", "", "func (c calls) Len() int           { return len(c) }", "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }", "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }"}
	_ = srcLines
	var src string = join(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(srcLines), "\n")
	_ = src
	var freq map[string]int = map[string]int{}
	_ = freq
	var i int = 0
	_ = i
	var order []string = []string{}
	_ = order
	for i < len(src) {
		var ch string = _substr(src, i, (i + 1))
		_ = ch
		if (((ch >= "A") && (ch <= "Z")) || ((ch >= "a") && (ch <= "z"))) || (ch == "_") {
			var j int = (i + 1)
			_ = j
			for (j < len(src)) && isAlphaNumDot(_substr(src, j, (j+1))) {
				j = (j + 1)
			}
			var token string = _substr(src, i, j)
			_ = token
			var k int = j
			_ = k
			for k < len(src) {
				var cc string = _substr(src, k, (k + 1))
				_ = cc
				if (((cc == " ") || (cc == "\t")) || (cc == "\n")) || (cc == "\r") {
					k = (k + 1)
				} else {
					break
				}
			}
			if (k < len(src)) && (_substr(src, k, (k+1)) == "(") {
				var p int = (i - 1)
				_ = p
				for (p >= 0) && ((_substr(src, p, (p+1)) == " ") || (_substr(src, p, (p+1)) == "\t")) {
					p = (p - 1)
				}
				var skip bool = false
				_ = skip
				if p >= 3 {
					var before string = _substr(src, (p - 3), (p + 1))
					_ = before
					if before == "func" {
						skip = true
					}
				}
				if !skip {
					if func() bool { _, ok := freq[token]; return ok }() {
						freq[token] = (freq[token] + 1)
					} else {
						freq[token] = 1
						order = append(order, token)
					}
				}
			}
			i = j
		} else {
			i = (i + 1)
		}
	}
	var pairs []map[string]any = []map[string]any{}
	_ = pairs
	for _, t := range order {
		pairs = append(pairs, map[string]any{"expr": t, "count": freq[t]})
	}
	pairs = sortPairs(func(v any) []map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]map[string]any); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []map[string]any{}
			}
			out := make([]map[string]any, len(arr))
			for i, x := range arr {
				out[i] = x.(map[string]any)
			}
			return out
		}
		return v.([]map[string]any)
	}(pairs))
	var idx int = 0
	_ = idx
	for (idx < len(pairs)) && (idx < 10) {
		var p map[string]any = pairs[idx]
		_ = p
		fmt.Println(((fmt.Sprint(p["expr"].(string)) + " ") + fmt.Sprint(p["count"].(int))))
		idx = (idx + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
