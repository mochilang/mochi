//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:12:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pfacSum(i int) int {
	var sum int = 0
	_ = sum
	var p int = 1
	_ = p
	for p <= (i / 2) {
		if (i % p) == 0 {
			sum = (sum + p)
		}
		p = (p + 1)
	}
	return sum
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	var sums []int = []int{}
	_ = sums
	var i int = 0
	_ = i
	for i < 20000 {
		sums = append(sums, 0)
		i = (i + 1)
	}
	i = 1
	for i < 20000 {
		sums[i] = pfacSum(i)
		i = (i + 1)
	}
	fmt.Println("The amicable pairs below 20,000 are:")
	var n int = 2
	_ = n
	for n < 19999 {
		var m int = sums[n]
		_ = m
		if ((m > n) && (m < 20000)) && (n == sums[m]) {
			fmt.Println(((("  " + pad(n, 5)) + " and ") + pad(m, 5)))
		}
		n = (n + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
