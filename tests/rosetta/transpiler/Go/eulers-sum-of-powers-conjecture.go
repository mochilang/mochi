//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func eulerSum() []int {
	var pow5 []int = []int{}
	_ = pow5
	var i int = 0
	_ = i
	for i < 250 {
		pow5 = append(pow5, ((((i * i) * i) * i) * i))
		i = (i + 1)
	}
	var sums map[int][]int = map[int][]int{}
	_ = sums
	var x2 int = 2
	_ = x2
	for x2 < 250 {
		var x3 int = 1
		_ = x3
		for x3 < x2 {
			var s int = (pow5[x2] + pow5[x3])
			_ = s
			if !func() bool { _, ok := sums[s]; return ok }() {
				sums[s] = []int{x2, x3}
			}
			x3 = (x3 + 1)
		}
		x2 = (x2 + 1)
	}
	var x0 int = 4
	_ = x0
	for x0 < 250 {
		var x1 int = 3
		_ = x1
		for x1 < x0 {
			var y int = (x0 + 1)
			_ = y
			for y < 250 {
				var rem int = ((pow5[y] - pow5[x0]) - pow5[x1])
				_ = rem
				if func() bool { _, ok := sums[rem]; return ok }() {
					var pair []int = sums[rem]
					_ = pair
					var a int = pair[0]
					_ = a
					var b int = pair[1]
					_ = b
					if (x1 > a) && (a > b) {
						return []int{x0, x1, a, b, y}
					}
				}
				y = (y + 1)
			}
			x1 = (x1 + 1)
		}
		x0 = (x0 + 1)
	}
	return []int{0, 0, 0, 0, 0}
}

func mochiMain() {
	var r []int = eulerSum()
	_ = r
	fmt.Println(((((((((fmt.Sprint(r[0]) + " ") + fmt.Sprint(r[1])) + " ") + fmt.Sprint(r[2])) + " ") + fmt.Sprint(r[3])) + " ") + fmt.Sprint(r[4])))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
