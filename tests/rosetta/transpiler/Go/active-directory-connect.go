//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:29:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type LDAPClient struct {
	Base         string   `json:"Base"`
	Host         string   `json:"Host"`
	Port         int      `json:"Port"`
	UseSSL       bool     `json:"UseSSL"`
	BindDN       string   `json:"BindDN"`
	BindPassword string   `json:"BindPassword"`
	UserFilter   string   `json:"UserFilter"`
	GroupFilter  string   `json:"GroupFilter"`
	Attributes   []string `json:"Attributes"`
}

func connect(client LDAPClient) bool {
	return ((client.Host != "") && (client.Port > 0))
}

func mochiMain() {
	var client LDAPClient = LDAPClient{
		Base:         "dc=example,dc=com",
		Host:         "ldap.example.com",
		Port:         389,
		UseSSL:       false,
		BindDN:       "uid=readonlyuser,ou=People,dc=example,dc=com",
		BindPassword: "readonlypassword",
		UserFilter:   "(uid=%s)",
		GroupFilter:  "(memberUid=%s)",
		Attributes:   []string{"givenName", "sn", "mail", "uid"},
	}
	_ = client
	if connect(client) {
		fmt.Println(("Connected to " + client.Host))
	} else {
		fmt.Println("Failed to connect")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
