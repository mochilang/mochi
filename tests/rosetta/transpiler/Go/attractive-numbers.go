//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:01:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func countPrimeFactors(n int) int {
	if n == 1 {
		return 0
	}
	if isPrime(n) {
		return 1
	}
	var count int = 0
	_ = count
	var f int = 2
	_ = f
	for {
		if (n % f) == 0 {
			count = (count + 1)
			n = (n / f)
			if n == 1 {
				return count
			}
			if isPrime(n) {
				f = n
			}
		} else {
			if f >= 3 {
				f = (f + 2)
			} else {
				f = 3
			}
		}
	}
	return count
}

func pad4(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < 4 {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	var max int = 120
	_ = max
	fmt.Println((("The attractive numbers up to and including " + fmt.Sprint(max)) + " are:"))
	var count int = 0
	_ = count
	var line string = ""
	_ = line
	var lineCount int = 0
	_ = lineCount
	var i int = 1
	_ = i
	for i <= max {
		var c int = countPrimeFactors(i)
		_ = c
		if isPrime(c) {
			line = (line + pad4(i))
			count = (count + 1)
			lineCount = (lineCount + 1)
			if lineCount == 20 {
				fmt.Println(line)
				line = ""
				lineCount = 0
			}
		}
		i = (i + 1)
	}
	if lineCount > 0 {
		fmt.Println(line)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
