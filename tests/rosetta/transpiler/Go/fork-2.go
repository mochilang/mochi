//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 17:34:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var nextPID int

func fork(hasChild bool) {
	var pid int = nextPID
	_ = pid
	nextPID = (nextPID + 1)
	fmt.Println(("PID: " + fmt.Sprint(pid)))
	if !hasChild {
		fmt.Println("Done.")
		return
	}
	var childPID int = nextPID
	_ = childPID
	fmt.Println(("Child's PID: " + fmt.Sprint(childPID)))
	fork(false)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nextPID = 1
		fork(true)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
