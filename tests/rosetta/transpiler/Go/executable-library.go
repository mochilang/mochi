//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func hailstone(n int) []int {
	var seq []int = []int{}
	_ = seq
	var x int = n
	_ = x
	seq = append(seq, x)
	for x > 1 {
		if (x % 2) == 0 {
			x = (x / 2)
		} else {
			x = ((3 * x) + 1)
		}
		seq = append(seq, x)
	}
	return seq
}

func listString(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func libMain() {
	var seq []int = hailstone(27)
	_ = seq
	fmt.Println("")
	fmt.Println("Hailstone sequence for the number 27:")
	fmt.Println((("  has " + fmt.Sprint(len(seq))) + " elements"))
	fmt.Println(("  starts with " + listString(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(seq[0:4]))))
	fmt.Println(("  ends with " + listString(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(seq[(len(seq)-4):len(seq)]))))
	var longest int = 0
	_ = longest
	var length int = 0
	_ = length
	var i int = 1
	_ = i
	for i < 100000 {
		var l int = len(hailstone(i))
		_ = l
		if l > length {
			longest = i
			length = l
		}
		i = (i + 1)
	}
	fmt.Println("")
	fmt.Println((((fmt.Sprint(longest) + " has the longest Hailstone sequence, its length being ") + fmt.Sprint(length)) + "."))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		libMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
