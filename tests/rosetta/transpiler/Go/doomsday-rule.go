//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func parseIntStr(str string) int {
	var i int = 0
	var neg bool = false
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

var days []string

func anchorDay(y int) int {
	return ((((2 + (5 * (y % 4))) + (4 * (y % 100))) + (6 * (y % 400))) % 7)
}

func isLeapYear(y int) bool {
	return (((y % 4) == 0) && (((y % 100) != 0) || ((y % 400) == 0)))
}

var firstDaysCommon []int

var firstDaysLeap []int

func mochiMain() {
	var dates []string = []string{"1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02"}
	fmt.Println("Days of week given by Doomsday rule:")
	for _, _ch := range dates {
		date := string(_ch)
		var y int = _parseIntStr(string([]rune(date)[0:4]), 10)
		var m int = (_parseIntStr(string([]rune(date)[5:7]), 10) - 1)
		var d int = _parseIntStr(string([]rune(date)[8:10]), 10)
		var a int = anchorDay(y)
		var f int = firstDaysCommon[m]
		if isLeapYear(y) {
			f = firstDaysLeap[m]
		}
		var w int = (d - f)
		if w < 0 {
			w = (7 + w)
		}
		var dow int = ((a + w) % 7)
		fmt.Println(((date + " -> ") + days[dow]))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		days = []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
		firstDaysCommon = []int{3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
		firstDaysLeap = []int{4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
