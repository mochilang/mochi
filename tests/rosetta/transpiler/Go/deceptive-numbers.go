//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func listToString(xs []int) string {
	var s string = "["
	var i int = 0
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func mochiMain() {
	var count int = 0
	var limit int = 25
	var n int = 17
	var repunit *big.Int = big.NewInt(int64(1111111111111111))
	var eleven *big.Int = big.NewInt(int64(11))
	var hundred *big.Int = big.NewInt(int64(100))
	var deceptive []int = []int{}
	for count < limit {
		if (!isPrime(n) && ((n % 3) != 0)) && ((n % 5) != 0) {
			var bn *big.Int = big.NewInt(int64(n))
			if func() bool { return new(big.Int).Mod(repunit, bn).Cmp(big.NewInt(int64(0))) == 0 }() {
				deceptive = append(deceptive, n)
				count = (count + 1)
			}
		}
		n = (n + 2)
		repunit = new(big.Int).Add(new(big.Int).Mul(repunit, hundred), eleven)
	}
	fmt.Println((("The first " + fmt.Sprint(limit)) + " deceptive numbers are:"))
	fmt.Println(listToString(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(deceptive)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
