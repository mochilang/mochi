//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isInt(s string) bool {
	if len(s) == 0 {
		return false
	}
	for _, _ch := range s {
		ch := string(_ch)
		if (ch < "0") || (ch > "9") {
			return false
		}
	}
	return true
}

func mochiMain() {
	fmt.Println("Are these strings integers?")
	var v string = "1"
	var b bool = false
	if isInt(v) {
		b = true
	}
	fmt.Println(((("  " + v) + " -> ") + fmt.Sprint(b)))
	var i string = "one"
	fmt.Println(((("  " + i) + " -> ") + fmt.Sprint(isInt(i))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
