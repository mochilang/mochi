//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 17:45:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _padStart(s string, l int, ch string) string {
	if len(ch) == 0 {
		ch = " "
	}
	if len(s) >= l {
		return s
	}
	fill := ch[:1]
	return strings.Repeat(fill, l-len(s)) + s
}

func digitSumMod(n int, base int) int {
	var sum int = 0
	_ = sum
	var j int = n
	_ = j
	for j > 0 {
		sum = (sum + (j % base))
		j = (j / base)
	}
	return (sum % base)
}

func fairshareList(n int, base int) []int {
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, digitSumMod(i, base))
		i = (i + 1)
	}
	return res
}

func sortInts(xs []int) []int {
	var arr []int = xs
	_ = arr
	var i int = 0
	_ = i
	for i < len(arr) {
		var j int = 0
		_ = j
		for j < (len(arr) - 1) {
			if arr[j] > arr[(j+1)] {
				var t int = arr[j]
				_ = t
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = t
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func turns(n int, base int) string {
	var counts []int = []int{}
	_ = counts
	var i int = 0
	_ = i
	for i < base {
		counts = append(counts, 0)
		i = (i + 1)
	}
	i = 0
	for i < n {
		var v int = digitSumMod(i, base)
		_ = v
		counts[v] = (counts[v] + 1)
		i = (i + 1)
	}
	var freq map[int]int = map[int]int{}
	_ = freq
	var fkeys []int = []int{}
	_ = fkeys
	i = 0
	for i < base {
		var c int = counts[i]
		_ = c
		if c > 0 {
			if func() bool { _, ok := freq[c]; return ok }() {
				freq[c] = (freq[c] + 1)
			} else {
				freq[c] = 1
				fkeys = append(fkeys, c)
			}
		}
		i = (i + 1)
	}
	var total int = 0
	_ = total
	i = 0
	for i < len(fkeys) {
		total = (total + freq[fkeys[i]])
		i = (i + 1)
	}
	if total != base {
		return (("only " + fmt.Sprint(total)) + " have a turn")
	}
	fkeys = sortInts(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(fkeys))
	var res string = ""
	_ = res
	i = 0
	for i < len(fkeys) {
		if i > 0 {
			res = (res + " or ")
		}
		res = (res + fmt.Sprint(fkeys[i]))
		i = (i + 1)
	}
	return res
}

func mochiMain() {
	var bases1 []int = []int{2, 3, 5, 11}
	_ = bases1
	var i int = 0
	_ = i
	for i < len(bases1) {
		var b int = bases1[i]
		_ = b
		fmt.Println(((fmt.Sprint(_padStart(fmt.Sprint(b), 2, " ")) + " : ") + fmt.Sprint(fairshareList(25, b))))
		i = (i + 1)
	}
	fmt.Println("")
	fmt.Println("How many times does each get a turn in 50000 iterations?")
	var bases2 []int = []int{191, 1377, 49999, 50000, 50001}
	_ = bases2
	i = 0
	for i < len(bases2) {
		var b int = bases2[i]
		_ = b
		var t string = turns(50000, b)
		_ = t
		fmt.Println(((("  With " + fmt.Sprint(b)) + " people: ") + t))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
