//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 11:11:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func cart2(a []int, b []int) [][]int {
	var p [][]int = [][]int{}
	_ = p
	for _, x := range a {
		for _, y := range b {
			p = append(p, []int{x, y})
		}
	}
	return p
}

func llStr(lst [][]int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(lst) {
		var row []int = lst[i]
		_ = row
		s = (s + "[")
		var j int = 0
		_ = j
		for j < len(row) {
			s = (s + fmt.Sprint(row[j]))
			if j < (len(row) - 1) {
				s = (s + " ")
			}
			j = (j + 1)
		}
		s = (s + "]")
		if i < (len(lst) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func mochiMain() {
	fmt.Println(llStr(cart2([]int{1, 2}, []int{3, 4})))
	fmt.Println(llStr(cart2([]int{3, 4}, []int{1, 2})))
	fmt.Println(llStr(cart2([]int{1, 2}, []int{})))
	fmt.Println(llStr(cart2([]int{}, []int{1, 2})))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
