//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:24:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mochiMain() {
	var philosophers []string = []string{"Aristotle", "Kant", "Spinoza", "Marx", "Russell"}
	var hunger int = 3
	fmt.Println("table empty")
	for _, _ch := range philosophers {
		p := string(_ch)
		fmt.Println((p + " seated"))
	}
	var idx int = 0
	for idx < len(philosophers) {
		var name string = philosophers[idx]
		var h int = 0
		for h < hunger {
			fmt.Println((name + " hungry"))
			fmt.Println((name + " eating"))
			fmt.Println((name + " thinking"))
			h = (h + 1)
		}
		fmt.Println((name + " satisfied"))
		fmt.Println((name + " left the table"))
		idx = (idx + 1)
	}
	fmt.Println("table empty")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
