//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

var PI float64

func sinApprox(x float64) float64 {
	var term float64 = x
	var sum float64 = x
	var n int = 1
	for n <= 8 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func cosApprox(x float64) float64 {
	var term float64 = 1.0
	var sum float64 = 1.0
	var n int = 1
	for n <= 8 {
		var denom float64 = float64((((2 * n) - 1) * (2 * n)))
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func atanApprox(x float64) float64 {
	if x > 1.0 {
		return ((PI / 2.0) - (x / ((x * x) + 0.28)))
	}
	if x < (0 - 1.0) {
		return (((0 - PI) / 2.0) - (x / ((x * x) + 0.28)))
	}
	return (x / (1.0 + ((0.28 * x) * x)))
}

func atan2Approx(y float64, x float64) float64 {
	if x > 0.0 {
		var r float64 = atanApprox((y / x))
		_ = r
		return r
	}
	if x < 0.0 {
		if y >= 0.0 {
			return (atanApprox((y / x)) + PI)
		}
		return (atanApprox((y / x)) - PI)
	}
	if y > 0.0 {
		return (PI / 2.0)
	}
	if y < 0.0 {
		return ((0 - PI) / 2.0)
	}
	return 0.0
}

func sqrtApprox(x float64) float64 {
	var guess float64 = x
	var i int = 0
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func rad(x float64) float64 {
	return ((x * PI) / 180.0)
}

func deg(x float64) float64 {
	return ((x * 180.0) / PI)
}

func distance(lat1 float64, lon1 float64, lat2 float64, lon2 float64) float64 {
	var phi1 float64 = rad(lat1)
	var phi2 float64 = rad(lat2)
	var dphi float64 = rad((lat2 - lat1))
	var dlambda float64 = rad((lon2 - lon1))
	var sdphi float64 = sinApprox((dphi / float64(2)))
	var sdlambda float64 = sinApprox((dlambda / float64(2)))
	var a float64 = ((sdphi * sdphi) + (((cosApprox(phi1) * cosApprox(phi2)) * sdlambda) * sdlambda))
	var c float64 = (float64(2) * atan2Approx(sqrtApprox(a), sqrtApprox((float64(1)-a))))
	_ = c
	return ((6371.0 / 1.852) * c)
}

func bearing(lat1 float64, lon1 float64, lat2 float64, lon2 float64) float64 {
	var phi1 float64 = rad(lat1)
	var phi2 float64 = rad(lat2)
	var dl float64 = rad((lon2 - lon1))
	var y float64 = (sinApprox(dl) * cosApprox(phi2))
	var x float64 = ((cosApprox(phi1) * sinApprox(phi2)) - ((sinApprox(phi1) * cosApprox(phi2)) * cosApprox(dl)))
	var br float64 = deg(atan2Approx(y, x))
	if br < 0 {
		br = (br + float64(360))
	}
	return br
}

type Airport struct {
	Name    string  `json:"name"`
	Country string  `json:"country"`
	Icao    string  `json:"icao"`
	Lat     float64 `json:"lat"`
	Lon     float64 `json:"lon"`
}

var airports []Airport

func floor(x float64) float64 {
	var i int = int(x)
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func pow10(n int) float64 {
	var p float64 = 1.0
	var i int = 0
	for i < n {
		p = (p * 10.0)
		i = (i + 1)
	}
	return p
}

func round(x float64, n int) float64 {
	var m float64 = pow10(n)
	_ = m
	return (floor(((x * m) + 0.5)) / m)
}

func sortByDistance(xs [][]any) [][]any {
	var arr [][]any = xs
	var i int = 1
	for i < len(arr) {
		var j int = i
		for (j > 0) && (_toFloat(arr[(j - 1)][0]) > _toFloat(arr[j][0])) {
			var tmp []any = arr[(j - 1)]
			arr[(j - 1)] = arr[j]
			arr[j] = tmp
			j = (j - 1)
		}
		i = (i + 1)
	}
	return arr
}

func mochiMain() {
	var planeLat float64 = 51.514669
	var planeLon float64 = 2.198581
	var results [][]any = [][]any{}
	for _, ap := range airports {
		var d float64 = distance(planeLat, planeLon, ap.Lat, ap.Lon)
		var b float64 = bearing(planeLat, planeLon, ap.Lat, ap.Lon)
		results = append(results, []any{d, b, ap})
	}
	results = sortByDistance(func(v any) [][]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]any); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]any{}
			}
			out := make([][]any, len(arr))
			for i, x := range arr {
				out[i] = x.([]any)
			}
			return out
		}
		return v.([][]any)
	}(results))
	fmt.Println("Distance Bearing ICAO Country               Airport")
	fmt.Println("--------------------------------------------------------------")
	var i int = 0
	for i < len(results) {
		var r []any = results[i]
		ap := r[2]
		dist := r[0]
		bear := r[1]
		var line string = ((fmt.Sprint(((fmt.Sprint(((((fmt.Sprint(round(dist.(float64), 1)) + "\t") + fmt.Sprint(round(bear.(float64), 0))) + "\t") + fmt.Sprint(ap.(Airport).Icao))) + "\t") + fmt.Sprint(ap.(Airport).Country))) + " ") + fmt.Sprint(ap.(Airport).Name))
		fmt.Println(line)
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		airports = []Airport{Airport{
			Name:    "Koksijde Air Base",
			Country: "Belgium",
			Icao:    "EBFN",
			Lat:     51.090301513671875,
			Lon:     2.652780055999756,
		}, Airport{
			Name:    "Ostend-Bruges International Airport",
			Country: "Belgium",
			Icao:    "EBOS",
			Lat:     51.198898315399994,
			Lon:     2.8622200489,
		}, Airport{
			Name:    "Kent International Airport",
			Country: "United Kingdom",
			Icao:    "EGMH",
			Lat:     51.342201,
			Lon:     1.34611,
		}, Airport{
			Name:    "Calais-Dunkerque Airport",
			Country: "France",
			Icao:    "LFAC",
			Lat:     50.962100982666016,
			Lon:     1.954759955406189,
		}, Airport{
			Name:    "Westkapelle heliport",
			Country: "Belgium",
			Icao:    "EBKW",
			Lat:     51.32222366333,
			Lon:     3.2930560112,
		}, Airport{
			Name:    "Lympne Airport",
			Country: "United Kingdom",
			Icao:    "EGMK",
			Lat:     51.08,
			Lon:     1.013,
		}, Airport{
			Name:    "Ursel Air Base",
			Country: "Belgium",
			Icao:    "EBUL",
			Lat:     51.14419937133789,
			Lon:     3.475559949874878,
		}, Airport{
			Name:    "Southend Airport",
			Country: "United Kingdom",
			Icao:    "EGMC",
			Lat:     51.5713996887207,
			Lon:     0.6955559849739075,
		}, Airport{
			Name:    "Merville-Calonne Airport",
			Country: "France",
			Icao:    "LFQT",
			Lat:     50.61840057373047,
			Lon:     2.642240047454834,
		}, Airport{
			Name:    "Wevelgem Airport",
			Country: "Belgium",
			Icao:    "EBKT",
			Lat:     50.817199707,
			Lon:     3.20472002029,
		}, Airport{
			Name:    "Midden-Zeeland Airport",
			Country: "Netherlands",
			Icao:    "EHMZ",
			Lat:     51.5121994019,
			Lon:     3.73111009598,
		}, Airport{
			Name:    "Lydd Airport",
			Country: "United Kingdom",
			Icao:    "EGMD",
			Lat:     50.95610046386719,
			Lon:     0.9391670227050781,
		}, Airport{
			Name:    "RAF Wattisham",
			Country: "United Kingdom",
			Icao:    "EGUW",
			Lat:     52.1273002625,
			Lon:     0.956264019012,
		}, Airport{
			Name:    "Beccles Airport",
			Country: "United Kingdom",
			Icao:    "EGSM",
			Lat:     52.435298919699996,
			Lon:     1.6183300018300002,
		}, Airport{
			Name:    "Lille/Marcq-en-Baroeul Airport",
			Country: "France",
			Icao:    "LFQO",
			Lat:     50.687198638916016,
			Lon:     3.0755600929260254,
		}, Airport{
			Name:    "Lashenden (Headcorn) Airfield",
			Country: "United Kingdom",
			Icao:    "EGKH",
			Lat:     51.156898,
			Lon:     0.641667,
		}, Airport{
			Name:    "Le Touquet-CÃ´te d'Opale Airport",
			Country: "France",
			Icao:    "LFAT",
			Lat:     50.517398834228516,
			Lon:     1.6205899715423584,
		}, Airport{
			Name:    "Rochester Airport",
			Country: "United Kingdom",
			Icao:    "EGTO",
			Lat:     51.351898193359375,
			Lon:     0.5033329725265503,
		}, Airport{
			Name:    "Lille-Lesquin Airport",
			Country: "France",
			Icao:    "LFQQ",
			Lat:     50.563332,
			Lon:     3.086886,
		}, Airport{
			Name:    "Thurrock Airfield",
			Country: "United Kingdom",
			Icao:    "EGMT",
			Lat:     51.537505,
			Lon:     0.367634,
		}}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
