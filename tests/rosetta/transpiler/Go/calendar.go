//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 05:02:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var daysInMonth []int

var start []int

var months []string

var days []string

var qtr int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		daysInMonth = []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
		start = []int{3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1}
		months = []string{" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"}
		days = []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}
		fmt.Println("                                [SNOOPY]\n")
		fmt.Println("                                  1969\n")
		qtr = 0
		for qtr < 4 {
			var mi int = 0
			_ = mi
			for mi < 3 {
				fmt.Println((("      " + months[((qtr*3)+mi)]) + "           "), false)
				mi = (mi + 1)
			}
			fmt.Println("")
			mi = 0
			for mi < 3 {
				var d int = 0
				_ = d
				for d < 7 {
					fmt.Println((" " + days[d]), false)
					d = (d + 1)
				}
				fmt.Println("     ", false)
				mi = (mi + 1)
			}
			fmt.Println("")
			var week int = 0
			_ = week
			for week < 6 {
				mi = 0
				for mi < 3 {
					var day int = 0
					_ = day
					for day < 7 {
						var m int = ((qtr * 3) + mi)
						_ = m
						var val int = ((((week * 7) + day) - start[m]) + 1)
						_ = val
						if (val >= 1) && (val <= daysInMonth[m]) {
							var s string = fmt.Sprint(val)
							_ = s
							if len(s) == 1 {
								s = (" " + s)
							}
							fmt.Println((" " + s), false)
						} else {
							fmt.Println("   ", false)
						}
						day = (day + 1)
					}
					fmt.Println("     ", false)
					mi = (mi + 1)
				}
				fmt.Println("")
				week = (week + 1)
			}
			fmt.Println("")
			qtr = (qtr + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
