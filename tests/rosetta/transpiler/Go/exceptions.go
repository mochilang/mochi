//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func foo() string {
	fmt.Println("let's foo...")
	var a []int = []int{}
	_ = a
	if 12 >= len(a) {
		return ("runtime error: index out of range [12] with length " + fmt.Sprint(len(a)))
	}
	a[12] = 0
	return ""
}

func mochiMain() {
	var err string = foo()
	_ = err
	if len(err) > 0 {
		fmt.Println(("Recovered from " + err))
	}
	fmt.Println("glad that's over.")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
