//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func timeStr(sec int) string {
	var wks int = (sec / 604800)
	_ = wks
	sec = (sec % 604800)
	var ds int = (sec / 86400)
	_ = ds
	sec = (sec % 86400)
	var hrs int = (sec / 3600)
	_ = hrs
	sec = (sec % 3600)
	var mins int = (sec / 60)
	_ = mins
	sec = (sec % 60)
	var res string = ""
	_ = res
	var comma bool = false
	_ = comma
	if wks != 0 {
		res = ((res + fmt.Sprint(wks)) + " wk")
		comma = true
	}
	if ds != 0 {
		if comma {
			res = (res + ", ")
		}
		res = ((res + fmt.Sprint(ds)) + " d")
		comma = true
	}
	if hrs != 0 {
		if comma {
			res = (res + ", ")
		}
		res = ((res + fmt.Sprint(hrs)) + " hr")
		comma = true
	}
	if mins != 0 {
		if comma {
			res = (res + ", ")
		}
		res = ((res + fmt.Sprint(mins)) + " min")
		comma = true
	}
	if sec != 0 {
		if comma {
			res = (res + ", ")
		}
		res = ((res + fmt.Sprint(sec)) + " sec")
	}
	return res
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(timeStr(7259))
		fmt.Println(timeStr(86400))
		fmt.Println(timeStr(6000000))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
