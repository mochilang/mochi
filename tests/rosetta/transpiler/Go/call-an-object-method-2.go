//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 10:56:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func newFactory() []func() {
	var sn int = 0
	_ = sn
	var New func() Box
	New = func() Box {
		sn = (sn + 1)
		var b Box = Box{
			Contents: "",
			Secret:   sn,
		}
		_ = b
		if sn == 1 {
			b.Contents = "rabbit"
		} else {
			if sn == 2 {
				b.Contents = "rock"
			}
		}
		return b
	}
	var Count func() int
	Count = func() int {
		return sn
	}
	return []func(){func() {
		New()
	}, func() {
		Count()
	}}
}

var funcs []func()

var New func()

var Count func()

type Box struct {
	Contents string `json:"Contents"`
	Secret   int    `json:"secret"`
}

func (s *Box) TellSecret() int {
	return s.Secret
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		funcs = newFactory()
		New = funcs[0]
		Count = funcs[1]
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
