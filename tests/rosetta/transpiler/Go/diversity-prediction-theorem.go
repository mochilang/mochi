//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func pow10(n int) float64 {
	var r float64 = 1.0
	var i int = 0
	for i < n {
		r = (r * 10.0)
		i = (i + 1)
	}
	return r
}

func formatFloat(f float64, prec int) string {
	var scale float64 = pow10(prec)
	var scaled float64 = ((f * scale) + 0.5)
	_ = scaled
	var n int = int(scaled)
	var digits string = fmt.Sprint(n)
	for len(digits) <= prec {
		digits = ("0" + digits)
	}
	var intPart string = _substr(digits, 0, (len(digits) - prec))
	_ = intPart
	var fracPart string = _substr(digits, (len(digits) - prec), len(digits))
	_ = fracPart
	return ((intPart + ".") + fracPart)
}

func padLeft(s string, w int) string {
	var res string = ""
	var n int = (w - len(s))
	for n > 0 {
		res = (res + " ")
		n = (n - 1)
	}
	return (res + s)
}

func averageSquareDiff(f float64, preds []float64) float64 {
	var av float64 = 0.0
	var i int = 0
	for i < len(preds) {
		av = (av + ((preds[i] - f) * (preds[i] - f)))
		i = (i + 1)
	}
	av = (av / float64(len(preds)))
	return av
}

func diversityTheorem(truth float64, preds []float64) []float64 {
	var av float64 = 0.0
	var i int = 0
	for i < len(preds) {
		av = (av + preds[i])
		i = (i + 1)
	}
	av = (av / float64(len(preds)))
	var avErr float64 = averageSquareDiff(truth, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(preds))
	_ = avErr
	var crowdErr float64 = ((truth - av) * (truth - av))
	_ = crowdErr
	var div float64 = averageSquareDiff(av, func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(preds))
	_ = div
	return []float64{avErr, crowdErr, div}
}

func mochiMain() {
	var predsArray [][]float64 = [][]float64{[]float64{48.0, 47.0, 51.0}, []float64{48.0, 47.0, 51.0, 42.0}}
	var truth float64 = 49.0
	var i int = 0
	for i < len(predsArray) {
		var preds []float64 = predsArray[i]
		var res []float64 = diversityTheorem(truth, func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(preds))
		fmt.Println(("Average-error : " + padLeft(formatFloat(res[0], 3), 6)))
		fmt.Println(("Crowd-error   : " + padLeft(formatFloat(res[1], 3), 6)))
		fmt.Println(("Diversity     : " + padLeft(formatFloat(res[2], 3), 6)))
		fmt.Println("")
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
