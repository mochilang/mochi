//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var count int

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("Police  Sanitation  Fire")
		fmt.Println("------  ----------  ----")
		count = 0
		i = 2
		for i < 7 {
			var j int = 1
			for j < 8 {
				if j != i {
					var k int = 1
					for k < 8 {
						if (k != i) && (k != j) {
							if ((i + j) + k) == 12 {
								fmt.Println(((((("  " + fmt.Sprint(i)) + "         ") + fmt.Sprint(j)) + "         ") + fmt.Sprint(k)))
								count = (count + 1)
							}
						}
						k = (k + 1)
					}
				}
				j = (j + 1)
			}
			i = (i + 2)
		}
		fmt.Println("")
		fmt.Println((fmt.Sprint(count) + " valid combinations"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
