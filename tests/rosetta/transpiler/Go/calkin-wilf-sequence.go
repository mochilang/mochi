//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 05:31:46 GMT+7
package main

import (
	"fmt"
	"math/big"
	"strconv"
	"strings"
)

func _padStart(s string, l int, ch string) string {
	if len(ch) == 0 {
		ch = " "
	}
	if len(s) >= l {
		return s
	}
	fill := ch[:1]
	return strings.Repeat(fill, l-len(s)) + s
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func _bigrat(v any) *big.Rat {
	switch t := v.(type) {
	case *big.Rat:
		return new(big.Rat).Set(t)
	case *big.Int:
		return new(big.Rat).SetInt(t)
	case int:
		return big.NewRat(int64(t), 1)
	case int64:
		return big.NewRat(t, 1)
	case float64:
		r := new(big.Rat)
		r.SetFloat64(t)
		return r
	default:
		return big.NewRat(0, 1)
	}
}

func _num(r *big.Rat) *big.Int { return new(big.Int).Set(r.Num()) }

func _denom(r *big.Rat) *big.Int { return new(big.Int).Set(r.Denom()) }

func bigrat(a int, b int) *big.Rat {
	return new(big.Rat).Quo(_bigrat(a), _bigrat(b))
}

func calkinWilf(n int) []*big.Rat {
	var seq []*big.Rat = []*big.Rat{}
	_ = seq
	seq = append(seq, bigrat(1, 1))
	var i int = 1
	_ = i
	for i < n {
		var prev *big.Rat = seq[(i - 1)]
		_ = prev
		var a *big.Int = _num(prev)
		_ = a
		var b *big.Int = _denom(prev)
		_ = b
		var f *big.Int = new(big.Int).Div(a, b)
		_ = f
		var t *big.Rat = bigrat(f, 1)
		_ = t
		t = new(big.Rat).Mul(t, _bigrat(2))
		t = new(big.Rat).Sub(t, prev)
		t = new(big.Rat).Add(t, _bigrat(1))
		t = new(big.Rat).Quo(_bigrat(1), t)
		seq = append(seq, t)
		i = (i + 1)
	}
	return seq
}

func toContinued(r *big.Rat) []int {
	var a *big.Int = _num(r)
	_ = a
	var b *big.Int = _denom(r)
	_ = b
	var res []int = []int{}
	_ = res
	for {
		res = append(res, int(new(big.Int).Div(a, b)))
		var t *big.Int = new(big.Int).Mod(a, b)
		_ = t
		a = b
		b = t
		if func() bool { return a.Cmp(big.NewInt(int64(1))) == 0 }() {
			break
		}
	}
	if (len(res) % 2) == 0 {
		res[(len(res) - 1)] = (res[(len(res)-1)] - 1)
		res = append(res, 1)
	}
	return res
}

func termNumber(cf []int) int {
	var b string = ""
	_ = b
	var d string = "1"
	_ = d
	for _, n := range cf {
		b = (_repeat(d, n) + b)
		if d == "1" {
			d = "0"
		} else {
			d = "1"
		}
	}
	return _parseIntStr(b, 2)
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	var cnt int = 0
	_ = cnt
	var neg bool = false
	_ = neg
	if string([]rune(s)[0:1]) == "-" {
		neg = true
		s = string([]rune(s)[1:])
	}
	i = (len(s) - 1)
	for i >= 0 {
		out = (string([]rune(s)[i:(i+1)]) + out)
		cnt = (cnt + 1)
		if (cnt == 3) && (i != 0) {
			out = ("," + out)
			cnt = 0
		}
		i = (i - 1)
	}
	if neg {
		out = ("-" + out)
	}
	return out
}

func mochiMain() {
	var cw []*big.Rat = calkinWilf(20)
	_ = cw
	fmt.Println("The first 20 terms of the Calkin-Wilf sequnence are:")
	var i int = 0
	_ = i
	for i < 20 {
		var r *big.Rat = cw[i]
		_ = r
		var s string = fmt.Sprint(_num(r))
		_ = s
		if func() bool { return _denom(r).Cmp(big.NewInt(int64(1))) != 0 }() {
			s = ((s + "/") + fmt.Sprint(_denom(r)))
		}
		fmt.Println(((fmt.Sprint(_padStart(fmt.Sprint((i+int(1))), 2, " ")) + ": ") + s))
		i = (i + 1)
	}
	var r *big.Rat = bigrat(83116, 51639)
	_ = r
	var cf []int = toContinued(r)
	_ = cf
	var tn int = termNumber(cf)
	_ = tn
	fmt.Println((((((("" + fmt.Sprint(_num(r))) + "/") + fmt.Sprint(_denom(r))) + " is the ") + commatize(tn)) + "th term of the sequence."))
}

func main() {
	mochiMain()
}
