//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 20:13:15 GMT+7
package main

import (
	"fmt"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func splitWs(s string) []string {
	var parts []string = []string{}
	_ = parts
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if (((ch == " ") || (ch == "\n")) || (ch == "\t")) || (ch == "\r") {
			if len(cur) > 0 {
				parts = append(parts, cur)
				cur = ""
			}
		} else {
			cur = (cur + ch)
		}
		i = (i + 1)
	}
	if len(cur) > 0 {
		parts = append(parts, cur)
	}
	return parts
}

func parsePpm(data string) map[string]any {
	var toks []string = splitWs(data)
	_ = toks
	if len(toks) < 4 {
		return map[string]any{"err": true}
	}
	var magic string = toks[0]
	_ = magic
	var w int = parseIntStr(toks[1])
	_ = w
	var h int = parseIntStr(toks[2])
	_ = h
	var maxv int = parseIntStr(toks[3])
	_ = maxv
	var px []int = []int{}
	_ = px
	var i int = 4
	_ = i
	for i < len(toks) {
		px = append(px, parseIntStr(toks[i]))
		i = (i + 1)
	}
	return map[string]any{"magic": magic, "w": w, "h": h, "max": maxv, "px": px}
}

var ppmData string

var img map[string]any

func main() {
	ppmData = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"
	img = parsePpm(ppmData)
	fmt.Println(((("width=" + fmt.Sprint(img["w"])) + " height=") + fmt.Sprint(img["h"])))
}
