//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:27:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func floorf(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func frac(x float64) float64 {
	return (x - floorf(x))
}

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func sqrtApprox(x float64) float64 {
	if x <= float64(0) {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

var nframes int

var w int

var h int

var total int

var f int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		nframes = 10
		w = 32
		h = 32
		total = 0
		f = 1
		for f <= nframes {
			var y int = 0
			_ = y
			for y < h {
				var x int = 0
				_ = x
				for x < w {
					var fx float64 = float64(x)
					_ = fx
					var fy float64 = float64(y)
					_ = fy
					var value float64 = sinApprox((fx / 16.0))
					_ = value
					value = (value + sinApprox((fy / 8.0)))
					value = (value + sinApprox(((fx + fy) / 16.0)))
					value = (value + sinApprox((sqrtApprox(((fx * fx) + (fy * fy))) / 8.0)))
					value = (value + 4.0)
					value = (value / 8.0)
					var rem float64 = frac((value + (float64(f) / float64(nframes))))
					_ = rem
					_ = rem
					var ci int = (int((float64(nframes) * rem)) + 1)
					_ = ci
					total = (total + ci)
					x = (x + 1)
				}
				y = (y + 1)
			}
			f = (f + 1)
		}
		fmt.Println(total)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
