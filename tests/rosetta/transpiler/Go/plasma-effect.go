//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:01:15 GMT+7
package main

import (
	"fmt"
)

var PI float64

func floorf(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func frac(x float64) float64 {
	return (x - floorf(x))
}

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func sqrtApprox(x float64) float64 {
	if x <= float64(0) {
		return 0.0
	}
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

var nframes int

var w int

var h int

var total int

var f int

func main() {
	PI = 3.141592653589793
	nframes = 10
	w = 32
	h = 32
	total = 0
	f = 1
	for f <= nframes {
		var y int = 0
		_ = y
		for y < h {
			var x int = 0
			_ = x
			for x < w {
				var fx float64 = float64(x)
				_ = fx
				var fy float64 = float64(y)
				_ = fy
				var value float64 = sinApprox((fx / 16.0))
				_ = value
				value = (value + sinApprox((fy / 8.0)))
				value = (value + sinApprox(((fx + fy) / 16.0)))
				value = (value + sinApprox((sqrtApprox(((fx * fx) + (fy * fy))) / 8.0)))
				value = (value + 4.0)
				value = (value / 8.0)
				var rem float64 = frac((value + (float64(f) / float64(nframes))))
				_ = rem
				_ = rem
				var ci int = (int((float64(nframes) * rem)) + 1)
				_ = ci
				total = (total + ci)
				x = (x + 1)
			}
			y = (y + 1)
		}
		f = (f + 1)
	}
	fmt.Println(total)
}
