//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:28:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	var i int = 2
	_ = i
	for (i * i) <= n {
		if (n % i) == 0 {
			return false
		}
		i = (i + 1)
	}
	return true
}

func search(base int, prefix int, depth int, limit int, best int) int {
	var b int = best
	_ = b
	var d int = 1
	_ = d
	for d < base {
		var val int = ((prefix * base) + d)
		_ = val
		if isPrime(val) {
			if val > b {
				b = val
			}
			if (depth + 1) < limit {
				b = search(base, val, (depth + 1), limit, b)
			}
		}
		d = (d + 1)
	}
	return b
}

func largest(base int) int {
	return search(base, 0, 0, 6, 0)
}

func mochiMain() {
	var b int = 3
	_ = b
	for b <= 17 {
		fmt.Println(((fmt.Sprint(b) + ": ") + fmt.Sprint(largest(b))))
		b = (b + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
