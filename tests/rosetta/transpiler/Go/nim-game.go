//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:27:42 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func showTokens(tokens int) {
	fmt.Println(("Tokens remaining " + fmt.Sprint(tokens)))
}

func mochiMain() {
	var tokens int = 12
	_ = tokens
	var done bool = false
	_ = done
	for !done {
		showTokens(tokens)
		fmt.Println("")
		fmt.Println("How many tokens 1, 2 or 3?")
		var line string = _input()
		_ = line
		var t int = 0
		_ = t
		if len(line) > 0 {
			t = _parseIntStr(line, 10)
		}
		if (t < 1) || (t > 3) {
			fmt.Println("\nMust be a number between 1 and 3, try again.\n")
		} else {
			var ct int = (4 - t)
			_ = ct
			var s string = "s"
			_ = s
			if ct == 1 {
				s = ""
			}
			fmt.Println((((("  Computer takes " + fmt.Sprint(ct)) + " token") + s) + "\n\n"))
			tokens = (tokens - 4)
		}
		if tokens == 0 {
			showTokens(0)
			fmt.Println("  Computer wins!")
			done = true
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
