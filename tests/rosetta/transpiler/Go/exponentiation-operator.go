//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func printExpI(b int, p int) {
	if p < 0 {
		fmt.Println((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": negative power not allowed"))
		return
	}
	var r int = 1
	_ = r
	var i int = 1
	_ = i
	for i <= p {
		r = (r * b)
		i = (i + 1)
	}
	fmt.Println(((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": ") + fmt.Sprint(r)))
}

func expF(b float64, p int) float64 {
	var neg bool = false
	_ = neg
	if p < 0 {
		neg = true
		p = (0 - p)
	}
	var r float64 = 1.0
	_ = r
	var pow float64 = b
	_ = pow
	for p > 0 {
		if (p % 2) == 1 {
			r = (r * pow)
		}
		pow = (pow * pow)
		p = (p / 2)
	}
	if neg {
		r = (1.0 / r)
	}
	return r
}

func printExpF(b float64, p int) {
	if (b == 0.0) && (p < 0) {
		fmt.Println((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": +Inf"))
		return
	}
	fmt.Println(((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": ") + fmt.Sprint(expF(b, p))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("expI tests")
		printExpI(2, 10)
		printExpI(2, (0 - 10))
		printExpI((0 - 2), 10)
		printExpI((0 - 2), 11)
		printExpI(11, 0)
		fmt.Println("overflow undetected")
		printExpI(10, 10)
		fmt.Println("\nexpF tests:")
		printExpF(2.0, 10)
		printExpF(2.0, (0 - 10))
		printExpF((0 - 2.0), 10)
		printExpF((0 - 2.0), 11)
		printExpF(11.0, 0)
		fmt.Println("disallowed in expI, allowed here")
		printExpF(0.0, (0 - 1))
		fmt.Println("other interesting cases for 32 bit float type")
		printExpF(10.0, 39)
		printExpF(10.0, (0 - 39))
		printExpF((0 - 10.0), 39)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
