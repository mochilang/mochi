//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:11:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func kPrime(n int, k int) bool {
	var nf int = 0
	_ = nf
	var i int = 2
	_ = i
	for i <= n {
		for (n % i) == 0 {
			if nf == k {
				return false
			}
			nf = (nf + 1)
			n = (n / i)
		}
		i = (i + 1)
	}
	return (nf == k)
}

func gen(k int, count int) []int {
	var r []int = []int{}
	_ = r
	var n int = 2
	_ = n
	for len(r) < count {
		if kPrime(n, k) {
			r = append(r, n)
		}
		n = (n + 1)
	}
	return r
}

func mochiMain() {
	var k int = 1
	_ = k
	for k <= 5 {
		fmt.Println(((fmt.Sprint(k) + " ") + fmt.Sprint(gen(k, 10))))
		k = (k + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
