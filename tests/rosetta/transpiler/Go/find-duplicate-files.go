//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:03:22 GMT+7
package main

import (
	"fmt"
)

func findDuplicates(fs map[string]string, paths []string) [][]string {
	var seen map[string]string = map[string]string{}
	_ = seen
	var dups [][]string = [][]string{}
	_ = dups
	for _, path := range paths {
		var content string = fs[path]
		_ = content
		if func() bool { _, ok := seen[content]; return ok }() {
			dups = append(dups, []string{seen[content], path})
		} else {
			seen[content] = path
		}
	}
	return dups
}

func mochiMain() {
	var fs map[string]string = map[string]string{"a.txt": "hello", "b.txt": "world", "c.txt": "hello", "d.txt": "foo", "e.txt": "world"}
	_ = fs
	var paths []string = []string{"a.txt", "b.txt", "c.txt", "d.txt", "e.txt"}
	_ = paths
	var dups [][]string = findDuplicates(fs, func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(paths))
	_ = dups
	for _, pair := range dups {
		fmt.Println(((pair[0] + " <==> ") + pair[1]))
	}
}

func main() {
	mochiMain()
}
