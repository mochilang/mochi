//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 05:01:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var stx string

var etx string

func contains(s string, ch string) bool {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

func sortStrings(xs []string) []string {
	var arr []string = xs
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				var tmp string = arr[j]
				_ = tmp
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func bwt(s string) map[string]any {
	if strings.Contains(s, stx) || strings.Contains(s, etx) {
		return map[string]any{"err": true, "res": ""}
	}
	s = ((stx + s) + etx)
	var le int = len(s)
	_ = le
	var table []string = []string{}
	_ = table
	var i int = 0
	_ = i
	for i < le {
		var rot string = (_substr(s, i, le) + _substr(s, 0, i))
		_ = rot
		table = append(table, rot)
		i = (i + 1)
	}
	table = sortStrings(table)
	var last string = ""
	_ = last
	i = 0
	for i < le {
		last = (last + _substr(table[i], (le-1), le))
		i = (i + 1)
	}
	return map[string]any{"err": false, "res": last}
}

func ibwt(r string) string {
	var le int = len(r)
	_ = le
	var table []string = []string{}
	_ = table
	var i int = 0
	_ = i
	for i < le {
		table = append(table, "")
		i = (i + 1)
	}
	var n int = 0
	_ = n
	for n < le {
		i = 0
		for i < le {
			table[i] = (_substr(r, i, (i+1)) + table[i])
			i = (i + 1)
		}
		table = sortStrings(table)
		n = (n + 1)
	}
	i = 0
	for i < le {
		if _substr(table[i], (le-1), le) == etx {
			return _substr(table[i], 1, (le - 1))
		}
		i = (i + 1)
	}
	return ""
}

func makePrintable(s string) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == stx {
			out = (out + "^")
		} else {
			if ch == etx {
				out = (out + "|")
			} else {
				out = (out + ch)
			}
		}
		i = (i + 1)
	}
	return out
}

func mochiMain() {
	var examples []string = []string{"banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"}
	_ = examples
	for _, _ch := range examples {
		t := string(_ch)
		fmt.Println(makePrintable(t))
		var res map[string]any = bwt(t)
		_ = res
		if res["err"].(bool) {
			fmt.Println(" --> ERROR: String can't contain STX or ETX")
			fmt.Println(" -->")
		} else {
			var enc string = res["res"].(string)
			_ = enc
			fmt.Println((" --> " + makePrintable(enc)))
			var r string = ibwt(enc)
			_ = r
			fmt.Println((" --> " + r))
		}
		fmt.Println("")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := time.Now().UnixNano()
		stx = "\x02"
		etx = "\x03"
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
