//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 20:09:07 GMT+7
package main

import ()

var b2Seg int

type Pixel struct {
	R int `json:"r"`
	G int `json:"g"`
	B int `json:"b"`
}

func pixelFromRgb(rgb int) Pixel {
	var r int = int(((rgb / 65536) % 256))
	_ = r
	var g int = int(((rgb / 256) % 256))
	_ = g
	var b int = int((rgb % 256))
	_ = b
	return Pixel{
		R: r,
		G: g,
		B: b,
	}
}

func newBitmap(cols int, rows int) map[string]any {
	var d [][]Pixel = [][]Pixel{}
	_ = d
	var y int = 0
	_ = y
	for y < rows {
		var row []Pixel = []Pixel{}
		_ = row
		var x int = 0
		_ = x
		for x < cols {
			row = append(row, Pixel{
				R: 0,
				G: 0,
				B: 0,
			})
			x = (x + 1)
		}
		d = append(d, row)
		y = (y + 1)
	}
	return map[string]any{"cols": cols, "rows": rows, "data": d}
}

func setPx(b map[string]any, x int, y int, p Pixel) {
	var cols int = b["cols"].(int)
	_ = cols
	var rows int = b["rows"].(int)
	_ = rows
	if (((x >= 0) && (x < cols)) && (y >= 0)) && (y < rows) {
		b["data"].([][]Pixel)[y][x] = p
	}
}

func fill(b map[string]any, p Pixel) {
	var cols int = b["cols"].(int)
	_ = cols
	var rows int = b["rows"].(int)
	_ = rows
	var y int = 0
	_ = y
	for y < rows {
		var x int = 0
		_ = x
		for x < cols {
			b["data"].([][]Pixel)[y][x] = p
			x = (x + 1)
		}
		y = (y + 1)
	}
}

func fillRgb(b map[string]any, rgb int) {
	fill(b, pixelFromRgb(rgb))
}

func line(b map[string]any, x0 int, y0 int, x1 int, y1 int, p Pixel) {
	var dx int = (x1 - x0)
	_ = dx
	if dx < 0 {
		dx = (0 - dx)
	}
	var dy int = (y1 - y0)
	_ = dy
	if dy < 0 {
		dy = (0 - dy)
	}
	var sx int = (0 - 1)
	_ = sx
	if x0 < x1 {
		sx = 1
	}
	var sy int = (0 - 1)
	_ = sy
	if y0 < y1 {
		sy = 1
	}
	var err int = (dx - dy)
	_ = err
	for {
		setPx(b, x0, y0, p)
		if (x0 == x1) && (y0 == y1) {
			break
		}
		var e2 int = (2 * err)
		_ = e2
		if e2 > (0 - dy) {
			err = (err - dy)
			x0 = (x0 + sx)
		}
		if e2 < dx {
			err = (err + dx)
			y0 = (y0 + sy)
		}
	}
}

func bezier2(b map[string]any, x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, p Pixel) {
	var px []int = []int{}
	_ = px
	var py []int = []int{}
	_ = py
	var i int = 0
	_ = i
	for i <= b2Seg {
		px = append(px, 0)
		py = append(py, 0)
		i = (i + 1)
	}
	var fx1 float64 = float64(x1)
	_ = fx1
	var fy1 float64 = float64(y1)
	_ = fy1
	var fx2 float64 = float64(x2)
	_ = fx2
	var fy2 float64 = float64(y2)
	_ = fy2
	var fx3 float64 = float64(x3)
	_ = fx3
	var fy3 float64 = float64(y3)
	_ = fy3
	i = 0
	for i <= b2Seg {
		var c float64 = (float64(i) / float64(b2Seg))
		_ = c
		var a float64 = (1.0 - c)
		_ = a
		var a2 float64 = (a * a)
		_ = a2
		var b2 float64 = ((2.0 * c) * a)
		_ = b2
		var c2 float64 = (c * c)
		_ = c2
		px[i] = int((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)))
		py[i] = int((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)))
		i = (i + 1)
	}
	var x0 int = px[0]
	_ = x0
	var y0 int = py[0]
	_ = y0
	i = 1
	for i <= b2Seg {
		var x int = px[i]
		_ = x
		var y int = py[i]
		_ = y
		line(b, x0, y0, x, y, p)
		x0 = x
		y0 = y
		i = (i + 1)
	}
}

var b map[string]any

func main() {
	b2Seg = 20
	b = newBitmap(400, 300)
	fillRgb(b, 14614575)
	bezier2(b, 20, 150, 500, (0 - 100), 300, 280, pixelFromRgb(4165615))
}
