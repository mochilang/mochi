//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:26:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _split(s, sep string) []string {
	if sep == "" {
		sep = " "
	}
	return strings.Split(s, sep)
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func digits(n int) []int {
	if n == 0 {
		return []int{0}
	}
	var rev []int = []int{}
	var x int = n
	for x > 0 {
		rev = append(rev, (x % 10))
		x = int((x / 10))
	}
	var out []int = []int{}
	var i int = (len(rev) - 1)
	for i >= 0 {
		out = append(out, rev[i])
		i = (i - 1)
	}
	return out
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	var out string = ""
	var i int = len(s)
	for i > 3 {
		out = (("," + string([]rune(s)[(i-3):i])) + out)
		i = (i - 3)
	}
	out = (string([]rune(s)[0:i]) + out)
	return out
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func split(s string, sep string) []string {
	var parts []string = []string{}
	var cur string = ""
	var i int = 0
	for i < len(s) {
		if ((i + len(sep)) <= len(s)) && (_substr(s, i, (i+len(sep))) == sep) {
			parts = append(parts, cur)
			cur = ""
			i = (i + len(sep))
		} else {
			cur = (cur + string([]rune(s)[i:(i+1)]))
			i = (i + 1)
		}
	}
	parts = append(parts, cur)
	return parts
}

func parseIntStr(str string) int {
	var i int = 0
	var neg bool = false
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func reverseStr(s string) string {
	var out string = ""
	var i int = (len(s) - 1)
	for i >= 0 {
		out = (out + string([]rune(s)[i:(i+1)]))
		i = (i - 1)
	}
	return out
}

func pad(s string, w int) string {
	var out string = s
	for len(out) < w {
		out = (" " + out)
	}
	return out
}

func findFirst(list []int) []int {
	var i int = 0
	for i < len(list) {
		if list[i] > 10000000 {
			return []int{list[i], i}
		}
		i = (i + 1)
	}
	return []int{(0 - 1), (0 - 1)}
}

func mochiMain() {
	var ranges [][]int = [][]int{[]int{0, 0}, []int{101, 909}, []int{11011, 99099}, []int{1110111, 9990999}, []int{111101111, 119101111}}
	var cyclops []int = []int{}
	for _, r := range ranges {
		var start int = r[0]
		var end int = r[1]
		var numDigits int = len(fmt.Sprint(start))
		var center int = (numDigits / 2)
		var i int = start
		for i <= end {
			var ds []int = digits(i)
			if ds[center] == 0 {
				var count int = 0
				for _, d := range ds {
					if d == 0 {
						count = (count + 1)
					}
				}
				if count == 1 {
					cyclops = append(cyclops, i)
				}
			}
			i = (i + 1)
		}
	}
	fmt.Println("The first 50 cyclops numbers are:")
	var idx int = 0
	for idx < 50 {
		fmt.Println((pad(commatize(cyclops[idx]), 6) + " "))
		idx = (idx + 1)
		if (idx % 10) == 0 {
			fmt.Println("\n")
		}
	}
	var fi []int = findFirst(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(cyclops))
	fmt.Println(((("\nFirst such number > 10 million is " + commatize(fi[0])) + " at zero-based index ") + commatize(fi[1])))
	var primes []int = []int{}
	for _, n := range cyclops {
		if isPrime(n) {
			primes = append(primes, n)
		}
	}
	fmt.Println("\n\nThe first 50 prime cyclops numbers are:")
	idx = 0
	for idx < 50 {
		fmt.Println((pad(commatize(primes[idx]), 6) + " "))
		idx = (idx + 1)
		if (idx % 10) == 0 {
			fmt.Println("\n")
		}
	}
	var fp []int = findFirst(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(primes))
	fmt.Println(((("\nFirst such number > 10 million is " + commatize(fp[0])) + " at zero-based index ") + commatize(fp[1])))
	var bpcyclops []int = []int{}
	var ppcyclops []int = []int{}
	for _, p := range primes {
		var ps string = fmt.Sprint(p)
		var splitp []string = _split(ps, "0")
		var noMiddle int = _parseIntStr((splitp[0] + splitp[1]), 10)
		if isPrime(noMiddle) {
			bpcyclops = append(bpcyclops, p)
		}
		if ps == reverseStr(ps) {
			ppcyclops = append(ppcyclops, p)
		}
	}
	fmt.Println("\n\nThe first 50 blind prime cyclops numbers are:")
	idx = 0
	for idx < 50 {
		fmt.Println((pad(commatize(bpcyclops[idx]), 6) + " "))
		idx = (idx + 1)
		if (idx % 10) == 0 {
			fmt.Println("\n")
		}
	}
	var fb []int = findFirst(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(bpcyclops))
	fmt.Println(((("\nFirst such number > 10 million is " + commatize(fb[0])) + " at zero-based index ") + commatize(fb[1])))
	fmt.Println("\n\nThe first 50 palindromic prime cyclops numbers are:")
	idx = 0
	for idx < 50 {
		fmt.Println((pad(commatize(ppcyclops[idx]), 9) + " "))
		idx = (idx + 1)
		if (idx % 8) == 0 {
			fmt.Println("\n")
		}
	}
	var fpp []int = findFirst(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(ppcyclops))
	fmt.Println(((("\n\nFirst such number > 10 million is " + commatize(fpp[0])) + " at zero-based index ") + commatize(fpp[1])))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
