//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:25:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var g float64 = x
	var i int = 0
	for i < 20 {
		g = ((g + (x / g)) / 2.0)
		i = (i + 1)
	}
	return g
}

type Rsdv struct {
	N float64 `json:"n"`
	A float64 `json:"a"`
	Q float64 `json:"q"`
}

func newRsdv() Rsdv {
	return Rsdv{
		N: 0.0,
		A: 0.0,
		Q: 0.0,
	}
}

func add(r Rsdv, x float64) Rsdv {
	var n1 float64 = (r.N + 1.0)
	var a1 float64 = (r.A + ((x - r.A) / n1))
	var q1 float64 = (r.Q + ((x - r.A) * (x - a1)))
	return Rsdv{
		N: n1,
		A: a1,
		Q: q1,
	}
}

func sd(r Rsdv) float64 {
	return sqrtApprox((r.Q / r.N))
}

func mochiMain() {
	var r Rsdv = newRsdv()
	for _, x := range []float64{2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0} {
		r = add(r, x)
		fmt.Println(fmt.Sprint(sd(r)))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
