//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 18:06:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type Fps struct {
	Coeffs  []float64         `json:"coeffs"`
	Compute func(int) float64 `json:"compute"`
}

func newFps(fn func(int) float64) Fps {
	return Fps{
		Coeffs:  []float64{},
		Compute: fn,
	}
}

func extract(f Fps, n int) float64 {
	for len(f.Coeffs) <= n {
		var idx int = len(f.Coeffs)
		_ = idx
		var v float64 = f.Compute(idx)
		_ = v
		f.Coeffs = append(f.Coeffs, v)
	}
	return f.Coeffs[n]
}

func one() Fps {
	return newFps(func(i int) float64 {
		if i == 0 {
			return 1.0
		}
		return 0.0
	})
}

func add(a Fps, b Fps) Fps {
	return newFps(func(n int) float64 {
		return (extract(a, n) + extract(b, n))
	})
}

func sub(a Fps, b Fps) Fps {
	return newFps(func(n int) float64 {
		return (extract(a, n) - extract(b, n))
	})
}

func mul(a Fps, b Fps) Fps {
	return newFps(func(n int) float64 {
		var s float64 = 0.0
		_ = s
		var k int = 0
		_ = k
		for k <= n {
			s = (s + (extract(a, k) * extract(b, (n-k))))
			k = (k + 1)
		}
		return s
	})
}

func div(a Fps, b Fps) Fps {
	var q Fps = newFps(func(n int) float64 {
		return 0.0
	})
	_ = q
	q.Compute = func(n int) float64 {
		var b0 float64 = extract(b, 0)
		_ = b0
		if b0 == 0.0 {
			return math.NaN()
		}
		var s float64 = extract(a, n)
		_ = s
		var k int = 1
		_ = k
		for k <= n {
			s = (s - (extract(b, k) * extract(q, (n-k))))
			k = (k + 1)
		}
		return (s / b0)
	}
	return q
}

func differentiate(a Fps) Fps {
	return newFps(func(n int) float64 {
		return (float64((n + 1)) * extract(a, (n+1)))
	})
}

func integrate(a Fps) Fps {
	return newFps(func(n int) float64 {
		if n == 0 {
			return 0.0
		}
		return (extract(a, (n-1)) / float64(n))
	})
}

type Pair struct {
	Sin Fps `json:"sin"`
	Cos Fps `json:"cos"`
}

func sinCos() Pair {
	var sin Fps = newFps(func(n int) float64 {
		return 0.0
	})
	_ = sin
	var cos Fps = sub(one(), integrate(sin))
	_ = cos
	_ = cos
	sin.Compute = func(n int) float64 {
		if n == 0 {
			return 0.0
		}
		return (extract(cos, (n-1)) / float64(n))
	}
	return Pair{
		Sin: sin,
		Cos: cos,
	}
}

func floorf(x float64) float64 {
	var y int = int(x)
	_ = y
	_ = y
	return float64(y)
}

func fmtF5(x float64) string {
	var y float64 = (floorf(((x * 100000.0) + 0.5)) / 100000.0)
	_ = y
	var s string = fmt.Sprint(y)
	_ = s
	var dot int = strings.Index(s, ".")
	_ = dot
	if dot == (0 - 1) {
		s = (s + ".00000")
	} else {
		var decs int = ((len(s) - dot) - 1)
		_ = decs
		if decs > 5 {
			s = _substr(s, 0, (dot + 6))
		} else {
			for decs < 5 {
				s = (s + "0")
				decs = (decs + 1)
			}
		}
	}
	return s
}

func padFloat5(x float64, width int) string {
	var s string = fmtF5(x)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func partialSeries(f Fps) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < 6 {
		out = (((out + " ") + padFloat5(extract(f, i), 8)) + " ")
		i = (i + 1)
	}
	return out
}

func mochiMain() {
	var p Pair = sinCos()
	_ = p
	fmt.Println(("sin:" + partialSeries(p.Sin)))
	fmt.Println(("cos:" + partialSeries(p.Cos)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
