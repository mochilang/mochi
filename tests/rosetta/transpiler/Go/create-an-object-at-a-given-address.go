//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:34:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func listStr(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func pointerDemo() {
	fmt.Println("Pointer:")
	var i int = 0
	_ = i
	fmt.Println("Before:")
	fmt.Println(((("\t<address>: " + fmt.Sprint(i)) + ", ") + fmt.Sprint(i)))
	i = 3
	fmt.Println("After:")
	fmt.Println(((("\t<address>: " + fmt.Sprint(i)) + ", ") + fmt.Sprint(i)))
}

func sliceDemo() {
	fmt.Println("Slice:")
	var a []any = []any{}
	_ = a
	for _i := 0; _i < 10; _i++ {
		a = append(a, 0)
	}
	var s []any = a
	_ = s
	fmt.Println("Before:")
	fmt.Println(("\ts: " + listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(s))))
	fmt.Println(("\ta: " + listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a))))
	var data []int = []int{65, 32, 115, 116, 114, 105, 110, 103, 46}
	_ = data
	var idx int = 0
	_ = idx
	for idx < len(data) {
		s[idx] = data[idx]
		idx = (idx + 1)
	}
	fmt.Println("After:")
	fmt.Println(("\ts: " + listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(s))))
	fmt.Println(("\ta: " + listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		pointerDemo()
		fmt.Println("")
		sliceDemo()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
