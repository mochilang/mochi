//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var nodes map[int]map[string]any

var head int

var tail int

func listString() string {
	if head == (0 - 1) {
		return "<nil>"
	}
	var r string = ("[" + fmt.Sprint(nodes[head]["value"]))
	_ = r
	var id int = nodes[head]["next"].(int)
	_ = id
	for id != (0 - 1) {
		r = ((r + " ") + fmt.Sprint(nodes[id]["value"]))
		id = nodes[id]["next"].(int)
	}
	r = (r + "]")
	return r
}

var out string

var id int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nodes = map[int]map[string]any{}
		head = (0 - 1)
		tail = (0 - 1)
		fmt.Println(listString())
		nodes[0] = map[string]any{"value": "A", "next": (0 - 1), "prev": (0 - 1)}
		head = 0
		tail = 0
		nodes[1] = map[string]any{"value": "B", "next": (0 - 1), "prev": 0}
		nodes[0]["next"] = 1
		tail = 1
		fmt.Println(listString())
		nodes[2] = map[string]any{"value": "C", "next": 1, "prev": 0}
		nodes[1]["prev"] = 2
		nodes[0]["next"] = 2
		fmt.Println(listString())
		out = "From tail:"
		id = tail
		for id != (0 - 1) {
			out = ((out + " ") + fmt.Sprint(nodes[id]["value"].(string)))
			id = nodes[id]["prev"].(int)
		}
		fmt.Println(out)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
