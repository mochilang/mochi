//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:49:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func halve(i int) int {
	return (i / 2)
}

func double(i int) int {
	return (i * 2)
}

func isEven(i int) bool {
	return ((i % 2) == 0)
}

func ethMulti(i int, j int) int {
	var r int = 0
	_ = r
	var x int = i
	_ = x
	var y int = j
	_ = y
	for x > 0 {
		if !isEven(x) {
			r = (r + y)
		}
		x = halve(x)
		y = double(y)
	}
	return r
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(("17 ethiopian 34 = " + fmt.Sprint(ethMulti(17, 34))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
