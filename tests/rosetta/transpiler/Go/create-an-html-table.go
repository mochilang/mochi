//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:27:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mochiMain() {
	var rows [][]int = [][]int{}
	_ = rows
	for i := 0; i < 4; i++ {
		rows = append(rows, []int{(i * 3), ((i * 3) + 1), ((i * 3) + 2)})
	}
	fmt.Println("<table>")
	fmt.Println("    <tr><th></th><th>X</th><th>Y</th><th>Z</th></tr>")
	var idx int = 0
	_ = idx
	for _, row := range rows {
		fmt.Println((((((((("    <tr><td>" + fmt.Sprint(idx)) + "</td><td>") + fmt.Sprint(row[0])) + "</td><td>") + fmt.Sprint(row[1])) + "</td><td>") + fmt.Sprint(row[2])) + "</td></tr>"))
		idx = (idx + 1)
	}
	fmt.Println("</table>")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
