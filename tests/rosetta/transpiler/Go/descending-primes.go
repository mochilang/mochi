//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	var d int = 3
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
	}
	return true
}

var digits []int

func gen(idx int, cur int, used bool) []int {
	if idx == len(digits) {
		if used && isPrime(cur) {
			return []int{cur}
		}
		return []int{}
	}
	var with []int = gen((idx + 1), ((cur * 10) + digits[idx]), true)
	var without []int = gen((idx + 1), cur, used)
	return func() []int {
		res := make([]int, len(with))
		copy(res, with)
		res = append(res, without...)
		return res
	}()
}

var primes []int

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

var i int

var line string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		digits = []int{9, 8, 7, 6, 5, 4, 3, 2, 1}
		primes = gen(0, 0, false)
		fmt.Println((("There are " + fmt.Sprint(len(primes))) + " descending primes, namely:"))
		i = 0
		line = ""
		for i < len(primes) {
			line = ((line + pad(primes[i], 8)) + " ")
			if ((i + 1) % 10) == 0 {
				fmt.Println(_substr(line, 0, (len(line) - 1)))
				line = ""
			}
			i = (i + 1)
		}
		if len(line) > 0 {
			fmt.Println(_substr(line, 0, (len(line) - 1)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
