//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:47:34 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _padStart(s string, l int, ch string) string {
	if len(ch) == 0 {
		ch = " "
	}
	if len(s) >= l {
		return s
	}
	fill := ch[:1]
	return strings.Repeat(fill, l-len(s)) + s
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var i int = (len(s) - 3)
	_ = i
	for i >= 1 {
		s = ((string([]rune(s)[0:i]) + ",") + string([]rune(s)[i:len(s)]))
		i = (i - 3)
	}
	return s
}

func primeSieve(n int) []bool {
	var sieve []bool = []bool{}
	_ = sieve
	var i int = 0
	_ = i
	for i <= n {
		sieve = append(sieve, false)
		i = (i + 1)
	}
	sieve[0] = true
	sieve[1] = true
	var p int = 2
	_ = p
	for (p * p) <= n {
		if !sieve[p] {
			var m int = (p * p)
			_ = m
			for m <= n {
				sieve[m] = true
				m = (m + p)
			}
		}
		p = (p + 1)
	}
	return sieve
}

func search(xs []int, target int) int {
	var low int = 0
	_ = low
	var high int = len(xs)
	_ = high
	for low < high {
		var mid int = ((low + high) / 2)
		_ = mid
		if xs[mid] < target {
			low = (mid + 1)
		} else {
			high = mid
		}
	}
	return low
}

func mochiMain() {
	var limit int = 45000
	_ = limit
	var compMap []bool = primeSieve(limit)
	_ = compMap
	var compSums []int = []int{}
	_ = compSums
	var primeSums []int = []int{}
	_ = primeSums
	var csum int = 0
	_ = csum
	var psum int = 0
	_ = psum
	var i int = 2
	_ = i
	for i <= limit {
		if compMap[i] {
			csum = (csum + i)
			compSums = append(compSums, csum)
		} else {
			psum = (psum + i)
			primeSums = append(primeSums, psum)
		}
		i = (i + 1)
	}
	fmt.Println("Sum        | Prime Index | Composite Index")
	fmt.Println("------------------------------------------")
	var idx int = 0
	_ = idx
	for idx < len(primeSums) {
		var s int = primeSums[idx]
		_ = s
		var j int = search(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(compSums), s)
		_ = j
		if (j < len(compSums)) && (compSums[j] == s) {
			sumStr := _padStart(fmt.Sprint(commatize(s)), 10, " ")
			_ = sumStr
			piStr := _padStart(fmt.Sprint(commatize((idx + 1))), 11, " ")
			_ = piStr
			ciStr := _padStart(fmt.Sprint(commatize((j + 1))), 15, " ")
			_ = ciStr
			fmt.Println(((fmt.Sprint(((fmt.Sprint(sumStr) + " | ") + fmt.Sprint(piStr))) + " | ") + fmt.Sprint(ciStr)))
		}
		idx = (idx + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
