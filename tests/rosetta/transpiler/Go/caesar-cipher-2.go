//go:build ignore

// Generated by Mochi v0.10.56 on 2025-08-03 21:23:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = strings.Index(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = strings.Index(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	return 0
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	return "?"
}

func shiftRune(r string, k int) string {
	if (r >= "a") && (r <= "z") {
		return chr(((((ord(r) - 97) + k) % 26) + 97))
	}
	if (r >= "A") && (r <= "Z") {
		return chr(((((ord(r) - 65) + k) % 26) + 65))
	}
	return r
}

func encipher(s string, k int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(s) {
		out = (out + shiftRune(string([]rune(s)[i:(i+1)]), k))
		i = (i + 1)
	}
	return out
}

func decipher(s string, k int) string {
	return encipher(s, ((26 - (k % 26)) % 26))
}

func mochiMain() {
	var pt string = "The five boxing wizards jump quickly"
	_ = pt
	fmt.Println(("Plaintext: " + pt))
	for _, key := range []int{0, 1, 7, 25, 26} {
		if (key < 1) || (key > 25) {
			fmt.Println((("Key " + fmt.Sprint(key)) + " invalid"))
			continue
		}
		var ct string = encipher(pt, key)
		_ = ct
		fmt.Println(("Key " + fmt.Sprint(key)))
		fmt.Println(("  Enciphered: " + ct))
		fmt.Println(("  Deciphered: " + decipher(ct, key)))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
