//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:11:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func amb(wordsets [][]string, res []string, idx int) bool {
	if idx == len(wordsets) {
		return true
	}
	var prev string = ""
	_ = prev
	if idx > 0 {
		prev = res[(idx - 1)]
	}
	var i int = 0
	_ = i
	for i < len(wordsets[idx]) {
		var w string = wordsets[idx][i]
		_ = w
		if (idx == 0) || (_substr(prev, (len(prev)-1), len(prev)) == _substr(w, 0, 1)) {
			res[idx] = w
			if amb(wordsets, res, (idx + 1)) {
				return true
			}
		}
		i = (i + 1)
	}
	return false
}

func mochiMain() {
	var wordset [][]string = [][]string{[]string{"the", "that", "a"}, []string{"frog", "elephant", "thing"}, []string{"walked", "treaded", "grows"}, []string{"slowly", "quickly"}}
	_ = wordset
	var res []string = []string{}
	_ = res
	var i int = 0
	_ = i
	for i < len(wordset) {
		res = append(res, "")
		i = (i + 1)
	}
	if amb(wordset, res, 0) {
		var out string = ("[" + res[0])
		_ = out
		var j int = 1
		_ = j
		for j < len(res) {
			out = ((out + " ") + res[j])
			j = (j + 1)
		}
		out = (out + "]")
		fmt.Println(out)
	} else {
		fmt.Println("No amb found")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
