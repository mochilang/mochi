//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 19:18:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var animal []string

var yinYang []string

var element []string

var stemChArr []string

var branchChArr []string

type Info struct {
	Animal     string `json:"animal"`
	YinYang    string `json:"yinYang"`
	Element    string `json:"element"`
	StemBranch string `json:"stemBranch"`
	Cycle      int    `json:"cycle"`
}

func cz(yr int, animal []string, yinYang []string, element []string, sc []string, bc []string) Info {
	var y int = (yr - 4)
	_ = y
	var stem int = (y % 10)
	_ = stem
	var branch int = (y % 12)
	_ = branch
	var sb string = (sc[stem] + bc[branch])
	_ = sb
	return Info{
		Animal:     animal[branch],
		YinYang:    yinYang[(stem % 2)],
		Element:    element[int((stem / 2))],
		StemBranch: sb,
		Cycle:      ((y % 60) + 1),
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		animal = []string{"Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig"}
		yinYang = []string{"Yang", "Yin"}
		element = []string{"Wood", "Fire", "Earth", "Metal", "Water"}
		stemChArr = []string{"甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"}
		branchChArr = []string{"子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"}
		for _, yr := range []int{1935, 1938, 1968, 1972, 1976} {
			var r Info = cz(yr, animal, yinYang, element, stemChArr, branchChArr)
			_ = r
			fmt.Println(((((((((((fmt.Sprint(yr) + ": ") + r.Element) + " ") + r.Animal) + ", ") + r.YinYang) + ", Cycle year ") + fmt.Sprint(r.Cycle)) + " ") + r.StemBranch))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
