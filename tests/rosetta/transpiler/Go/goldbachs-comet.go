//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func sieve(limit int) []bool {
	var primes []bool = []bool{}
	_ = primes
	var i int = 0
	_ = i
	for i < limit {
		primes = append(primes, true)
		i = (i + 1)
	}
	primes[0] = false
	primes[1] = false
	var p int = 2
	_ = p
	for (p * p) < limit {
		if primes[p] {
			var k int = (p * p)
			_ = k
			for k < limit {
				primes[k] = false
				k = (k + p)
			}
		}
		p = (p + 1)
	}
	return primes
}

func goldbachCount(primes []bool, n int) int {
	var c int = 0
	_ = c
	var i int = 1
	_ = i
	for i <= (n / 2) {
		if primes[i] && primes[(n-i)] {
			c = (c + 1)
		}
		i = (i + 1)
	}
	return c
}

func pad(n int) string {
	if n < 10 {
		return ("  " + fmt.Sprint(n))
	}
	if n < 100 {
		return (" " + fmt.Sprint(n))
	}
	return fmt.Sprint(n)
}

func mochiMain() {
	var primes []bool = sieve(1000)
	_ = primes
	fmt.Println("The first 100 Goldbach numbers:")
	var line string = ""
	_ = line
	var n int = 2
	_ = n
	var count int = 0
	_ = count
	for count < 100 {
		var v int = goldbachCount(func(v any) []bool {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]bool); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []bool{}
				}
				out := make([]bool, len(arr))
				for i, x := range arr {
					out[i] = x.(bool)
				}
				return out
			}
			return v.([]bool)
		}(primes), (2 * n))
		_ = v
		line = ((line + pad(v)) + " ")
		count = (count + 1)
		n = (n + 1)
		if (count % 10) == 0 {
			fmt.Println(_substr(line, 0, (len(line) - 1)))
			line = ""
		}
	}
	var val int = goldbachCount(func(v any) []bool {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]bool); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []bool{}
			}
			out := make([]bool, len(arr))
			for i, x := range arr {
				out[i] = x.(bool)
			}
			return out
		}
		return v.([]bool)
	}(primes), 1000)
	_ = val
	fmt.Println(("\nThe 1,000th Goldbach number = " + fmt.Sprint(val)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
