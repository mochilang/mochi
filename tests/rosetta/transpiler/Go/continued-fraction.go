//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func newTerm(a int, b int) map[string]int {
	return func(v any) map[string]int {
		if v == nil {
			return map[string]int{}
		}
		if vv, ok := v.(map[string]int); ok {
			return vv
		}
		out := make(map[string]int)
		if m, ok := v.(map[string]any); ok {
			for k, vv := range m {
				if vi, ok2 := vv.(int); ok2 {
					out[k] = vi
				}
			}
		}
		return out
	}(map[string]int{"a": a, "b": b})
}

func cfSqrt2(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	_ = f
	var n int = 0
	_ = n
	for n < nTerms {
		f = append(f, newTerm(2, 1))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 1
	}
	return f
}

func cfNap(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	_ = f
	var n int = 0
	_ = n
	for n < nTerms {
		f = append(f, newTerm(n, (n-1)))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 2
	}
	if nTerms > 1 {
		f[1]["b"] = 1
	}
	return f
}

func cfPi(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	_ = f
	var n int = 0
	_ = n
	for n < nTerms {
		var g int = ((2 * n) - 1)
		_ = g
		f = append(f, newTerm(6, (g*g)))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 3
	}
	return f
}

func real(f []map[string]int) float64 {
	var r float64 = 0.0
	_ = r
	var i int = (len(f) - 1)
	_ = i
	for i > 0 {
		r = (float64(f[i]["b"]) / (float64(f[i]["a"]) + r))
		i = (i - 1)
	}
	if len(f) > 0 {
		r = (r + float64(f[0]["a"]))
	}
	return r
}

func mochiMain() {
	fmt.Println(("sqrt2: " + fmt.Sprint(real(func(v any) []map[string]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]map[string]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []map[string]int{}
			}
			out := make([]map[string]int, len(arr))
			for i, x := range arr {
				out[i] = x.(map[string]int)
			}
			return out
		}
		return v.([]map[string]int)
	}(cfSqrt2(20))))))
	fmt.Println(("nap:   " + fmt.Sprint(real(func(v any) []map[string]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]map[string]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []map[string]int{}
			}
			out := make([]map[string]int, len(arr))
			for i, x := range arr {
				out[i] = x.(map[string]int)
			}
			return out
		}
		return v.([]map[string]int)
	}(cfNap(20))))))
	fmt.Println(("pi:    " + fmt.Sprint(real(func(v any) []map[string]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]map[string]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []map[string]int{}
			}
			out := make([]map[string]int, len(arr))
			for i, x := range arr {
				out[i] = x.(map[string]int)
			}
			return out
		}
		return v.([]map[string]int)
	}(cfPi(20))))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
