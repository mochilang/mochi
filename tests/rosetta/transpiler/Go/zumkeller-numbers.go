//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:28:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func getDivisors(n int) []int {
	var divs []int = []int{1, n}
	_ = divs
	var i int = 2
	_ = i
	for (i * i) <= n {
		if (n % i) == 0 {
			var j int = int((n / i))
			_ = j
			divs = append(divs, i)
			if i != j {
				divs = append(divs, j)
			}
		}
		i = (i + 1)
	}
	return divs
}

func sum(xs []int) int {
	var s int = 0
	_ = s
	for _, x := range xs {
		s = (s + x)
	}
	return s
}

func isPartSum(divs []int, target int) bool {
	var possible []bool = []bool{}
	_ = possible
	var i int = 0
	_ = i
	for i <= target {
		possible = append(possible, false)
		i = (i + 1)
	}
	possible[0] = true
	for _, v := range divs {
		var s int = target
		_ = s
		for s >= v {
			if possible[(s - v)] {
				possible[s] = true
			}
			s = (s - 1)
		}
	}
	return possible[target]
}

func isZumkeller(n int) bool {
	var divs []int = getDivisors(n)
	_ = divs
	_ = divs
	var s int = func() int {
		s := 0
		for _, n := range divs {
			s += n
		}
		return s
	}()
	_ = s
	if (s % 2) == 1 {
		return false
	}
	if (n % 2) == 1 {
		var abundance int = (s - (2 * n))
		_ = abundance
		_ = abundance
		return ((abundance > 0) && ((abundance % 2) == 0))
	}
	return isPartSum(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(divs), (s / 2))
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	fmt.Println("The first 220 Zumkeller numbers are:")
	var count int = 0
	_ = count
	var line string = ""
	_ = line
	var i int = 2
	_ = i
	for count < 220 {
		if isZumkeller(i) {
			line = ((line + pad(i, 3)) + " ")
			count = (count + 1)
			if (count % 20) == 0 {
				fmt.Println(_substr(line, 0, (len(line) - 1)))
				line = ""
			}
		}
		i = (i + 1)
	}
	fmt.Println("\nThe first 40 odd Zumkeller numbers are:")
	count = 0
	line = ""
	i = 3
	for count < 40 {
		if isZumkeller(i) {
			line = ((line + pad(i, 5)) + " ")
			count = (count + 1)
			if (count % 10) == 0 {
				fmt.Println(_substr(line, 0, (len(line) - 1)))
				line = ""
			}
		}
		i = (i + 2)
	}
	fmt.Println("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
	count = 0
	line = ""
	i = 3
	for count < 40 {
		if ((i % 10) != 5) && isZumkeller(i) {
			line = ((line + pad(i, 7)) + " ")
			count = (count + 1)
			if (count % 8) == 0 {
				fmt.Println(_substr(line, 0, (len(line) - 1)))
				line = ""
			}
		}
		i = (i + 2)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
