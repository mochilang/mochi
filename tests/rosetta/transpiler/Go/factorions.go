//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 17:45:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var facts []int

var n int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		facts = []int{1}
		n = 1
		for n < 12 {
			facts = append(facts, (facts[(n-1)] * n))
			n = (n + 1)
		}
		for b := 9; b < 13; b++ {
			fmt.Println((("The factorions for base " + fmt.Sprint(b)) + " are:"))
			var line string = ""
			_ = line
			var i int = 1
			_ = i
			for i < 1500000 {
				var m int = i
				_ = m
				var sum int = 0
				_ = sum
				for m > 0 {
					var d int = (m % b)
					_ = d
					sum = (sum + facts[d])
					m = (m / b)
				}
				if sum == i {
					line = ((line + fmt.Sprint(i)) + " ")
				}
				i = (i + 1)
			}
			fmt.Println(line)
			fmt.Println("")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
