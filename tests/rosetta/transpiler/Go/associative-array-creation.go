//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:00:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func removeKey(m map[string]int, k string) map[string]int {
	var out map[string]int = map[string]int{}
	_ = out
	for _, key := range func() []string {
		keys := make([]string, 0, len(m))
		for k := range m {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if key != k {
			out[key] = m[key]
		}
	}
	return out
}

func mochiMain() {
	var x map[string]int = nil
	_ = x
	x = map[string]int{}
	x["foo"] = 3
	var y1 int = x["bar"]
	_ = y1
	var ok bool = func() bool { _, ok := x["bar"]; return ok }()
	_ = ok
	fmt.Println(y1)
	fmt.Println(ok)
	x = removeKey(x, "foo")
	x = map[string]int{"foo": 2, "bar": 42, "baz": (0 - 1)}
	fmt.Println(x["foo"], x["bar"], x["baz"])
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
