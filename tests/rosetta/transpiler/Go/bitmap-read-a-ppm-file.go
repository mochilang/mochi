//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:14:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type Pixel struct {
	R int `json:"R"`
	G int `json:"G"`
	B int `json:"B"`
}

type Bitmap struct {
	W    int       `json:"w"`
	H    int       `json:"h"`
	Max  int       `json:"max"`
	Data [][]Pixel `json:"data"`
}

func newBitmap(w int, h int, max int) Bitmap {
	var rows [][]Pixel = [][]Pixel{}
	_ = rows
	var y int = 0
	_ = y
	for y < h {
		var row []Pixel = []Pixel{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			row = append(row, Pixel{
				R: 0,
				G: 0,
				B: 0,
			})
			x = (x + 1)
		}
		rows = append(rows, row)
		y = (y + 1)
	}
	return Bitmap{
		W:    w,
		H:    h,
		Max:  max,
		Data: rows,
	}
}

func setPx(b Bitmap, x int, y int, p Pixel) {
	var rows [][]Pixel = b.Data
	_ = rows
	var row []Pixel = rows[y]
	_ = row
	row[x] = p
	rows[y] = row
	b.Data = rows
}

func getPx(b Bitmap, x int, y int) Pixel {
	return b.Data[y][x]
}

func splitLines(s string) []string {
	var out []string = []string{}
	_ = out
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ch == "\n" {
			out = append(out, cur)
			cur = ""
		} else {
			cur = (cur + ch)
		}
		i = (i + 1)
	}
	out = append(out, cur)
	return out
}

func splitWS(s string) []string {
	var out []string = []string{}
	_ = out
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if (((ch == " ") || (ch == "\t")) || (ch == "\r")) || (ch == "\n") {
			if len(cur) > 0 {
				out = append(out, cur)
				cur = ""
			}
		} else {
			cur = (cur + ch)
		}
		i = (i + 1)
	}
	if len(cur) > 0 {
		out = append(out, cur)
	}
	return out
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func tokenize(s string) []string {
	var lines []string = splitLines(s)
	_ = lines
	var toks []string = []string{}
	_ = toks
	var i int = 0
	_ = i
	for i < len(lines) {
		var line string = lines[i]
		_ = line
		if (len(line) > 0) && (_substr(line, 0, 1) == "#") {
			i = (i + 1)
			continue
		}
		var parts []string = splitWS(line)
		_ = parts
		var j int = 0
		_ = j
		for j < len(parts) {
			toks = append(toks, parts[j])
			j = (j + 1)
		}
		i = (i + 1)
	}
	return toks
}

func readP3(text string) Bitmap {
	var toks []string = tokenize(text)
	_ = toks
	if len(toks) < 4 {
		return newBitmap(0, 0, 0)
	}
	if toks[0] != "P3" {
		return newBitmap(0, 0, 0)
	}
	var w int = parseIntStr(toks[1])
	_ = w
	var h int = parseIntStr(toks[2])
	_ = h
	var maxv int = parseIntStr(toks[3])
	_ = maxv
	var idx int = 4
	_ = idx
	var bm Bitmap = newBitmap(w, h, maxv)
	_ = bm
	var y int = (h - 1)
	_ = y
	for y >= 0 {
		var x int = 0
		_ = x
		for x < w {
			var r int = parseIntStr(toks[idx])
			_ = r
			var g int = parseIntStr(toks[(idx + 1)])
			_ = g
			var b int = parseIntStr(toks[(idx + 2)])
			_ = b
			setPx(bm, x, y, Pixel{
				R: r,
				G: g,
				B: b,
			})
			idx = (idx + 3)
			x = (x + 1)
		}
		y = (y - 1)
	}
	return bm
}

func toGrey(b Bitmap) {
	var h int = b.H
	_ = h
	var w int = b.W
	_ = w
	var m int = 0
	_ = m
	var y int = 0
	_ = y
	for y < h {
		var x int = 0
		_ = x
		for x < w {
			var p Pixel = getPx(b, x, y)
			_ = p
			var l int = ((((p.R * 2126) + (p.G * 7152)) + (p.B * 722)) / 10000)
			_ = l
			if l > b.Max {
				l = b.Max
			}
			setPx(b, x, y, Pixel{
				R: l,
				G: l,
				B: l,
			})
			if l > m {
				m = l
			}
			x = (x + 1)
		}
		y = (y + 1)
	}
	b.Max = m
}

func pad(n int, w int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < w {
		s = (" " + s)
	}
	return s
}

func writeP3(b Bitmap) string {
	var h int = b.H
	_ = h
	var w int = b.W
	_ = w
	var max int = b.Max
	_ = max
	var digits int = len(fmt.Sprint(max))
	_ = digits
	var out string = (((((("P3\n# generated from Bitmap.writeppmp3\n" + fmt.Sprint(w)) + " ") + fmt.Sprint(h)) + "\n") + fmt.Sprint(max)) + "\n")
	_ = out
	var y int = (h - 1)
	_ = y
	for y >= 0 {
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < w {
			var p Pixel = getPx(b, x, y)
			_ = p
			line = ((((((line + "   ") + pad(p.R, digits)) + " ") + pad(p.G, digits)) + " ") + pad(p.B, digits))
			x = (x + 1)
		}
		out = ((out + line) + "\n")
		y = (y - 1)
	}
	return out
}

var ppmtxt string

var bm Bitmap

var out string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		ppmtxt = ((((((("P3\n" + "# feep.ppm\n") + "4 4\n") + "15\n") + " 0  0  0    0  0  0    0  0  0   15  0 15\n") + " 0  0  0    0 15  7    0  0  0    0  0  0\n") + " 0  0  0    0  0  0    0 15  7    0  0  0\n") + "15  0 15    0  0  0    0  0  0    0  0  0\n")
		fmt.Println("Original Colour PPM file")
		fmt.Println(ppmtxt)
		bm = readP3(ppmtxt)
		fmt.Println("Grey PPM:")
		toGrey(bm)
		out = writeP3(bm)
		fmt.Println(out)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
