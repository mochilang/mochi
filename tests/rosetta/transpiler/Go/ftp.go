//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 18:06:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type FileInfo struct {
	Name string `json:"name"`
	Size int    `json:"size"`
	Kind string `json:"kind"`
}

type FTPConn struct {
	Dir string `json:"dir"`
}

var serverData map[string]map[string]string

var serverNames map[string][]string

func connect(hostport string) FTPConn {
	fmt.Println(("Connected to " + hostport))
	return FTPConn{
		Dir: "/",
	}
}

func login(conn FTPConn, user string, pass string) {
	fmt.Println(("Logged in as " + user))
}

func changeDir(conn FTPConn, dir string) {
	conn.Dir = dir
}

func list(conn FTPConn) []FileInfo {
	var names []string = serverNames[conn.Dir]
	_ = names
	var dataDir map[string]string = serverData[conn.Dir]
	_ = dataDir
	var out []FileInfo = []FileInfo{}
	_ = out
	for _, name := range names {
		var content string = dataDir[name]
		_ = content
		out = append(out, FileInfo{
			Name: name,
			Size: len(content),
			Kind: "file",
		})
	}
	return out
}

func retrieve(conn FTPConn, name string) string {
	return serverData[conn.Dir][name]
}

func mochiMain() {
	var conn FTPConn = connect("localhost:21")
	_ = conn
	login(conn, "anonymous", "anonymous")
	changeDir(conn, "pub")
	fmt.Println(conn.Dir)
	var files []FileInfo = list(conn)
	_ = files
	for _, f := range files {
		fmt.Println(((f.Name + " ") + fmt.Sprint(f.Size)))
	}
	var data string = retrieve(conn, "somefile.bin")
	_ = data
	fmt.Println((("Wrote " + fmt.Sprint(len(data))) + " bytes to somefile.bin"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		serverData = map[string]map[string]string{"pub": map[string]string{"somefile.bin": "This is a file from the FTP server.", "readme.txt": "Hello from ftp."}}
		serverNames = map[string][]string{"pub": []string{"somefile.bin", "readme.txt"}}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
