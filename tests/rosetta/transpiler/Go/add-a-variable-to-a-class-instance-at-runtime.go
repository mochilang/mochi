//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:30:33 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

type SomeStruct struct {
	RuntimeFields map[string]string `json:"runtimeFields"`
}

func mochiMain() {
	var ss SomeStruct = SomeStruct{
		RuntimeFields: map[string]string{},
	}
	_ = ss
	fmt.Println("Create two fields at runtime: \n")
	var i int = 1
	_ = i
	for i <= 2 {
		fmt.Println((("  Field #" + fmt.Sprint(i)) + ":\n"))
		fmt.Println("       Enter name  : ")
		var name string = _input()
		_ = name
		fmt.Println("       Enter value : ")
		var value string = _input()
		_ = value
		var fields map[string]string = ss.RuntimeFields
		_ = fields
		fields[name] = value
		ss.RuntimeFields = fields
		fmt.Println("\n")
		i = (i + 1)
	}
	for {
		fmt.Println("Which field do you want to inspect ? ")
		var name string = _input()
		_ = name
		if func() bool { _, ok := ss.RuntimeFields[name]; return ok }() {
			var value string = ss.RuntimeFields[name]
			_ = value
			fmt.Println((("Its value is '" + value) + "'"))
			return
		} else {
			fmt.Println("There is no field of that name, try again\n")
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
