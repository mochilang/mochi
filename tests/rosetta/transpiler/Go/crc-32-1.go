//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:26:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func xor(a int, b int) int {
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		var abit int = (x % 2)
		_ = abit
		var bbit int = (y % 2)
		_ = bbit
		if abit != bbit {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return res
}

func rshift(x int, n int) int {
	var v int = x
	_ = v
	var i int = 0
	_ = i
	for i < n {
		v = (v / 2)
		i = (i + 1)
	}
	return v
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = strings.Index(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = strings.Index(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	if ch == " " {
		return 32
	}
	return 0
}

func toHex(n int) string {
	var digits string = "0123456789ABCDEF"
	_ = digits
	if n == 0 {
		return "0"
	}
	var v int = n
	_ = v
	var out string = ""
	_ = out
	for v > 0 {
		var d int = (v % 16)
		_ = d
		out = (string([]rune(digits)[d:(d+1)]) + out)
		v = (v / 16)
	}
	return out
}

func crc32Table() []int {
	var table []int = []int{}
	_ = table
	var i int = 0
	_ = i
	for i < 256 {
		var word int = i
		_ = word
		var j int = 0
		_ = j
		for j < 8 {
			if (word % 2) == 1 {
				word = xor(rshift(word, 1), 3988292384)
			} else {
				word = rshift(word, 1)
			}
			j = (j + 1)
		}
		table = append(table, word)
		i = (i + 1)
	}
	return table
}

var table []int

func crc32(s string) int {
	var crc int = 4294967295
	_ = crc
	var i int = 0
	_ = i
	for i < len(s) {
		var c int = ord(string([]rune(s)[i:(i + 1)]))
		_ = c
		var idx int = xor((crc % 256), c)
		_ = idx
		crc = xor(table[idx], rshift(crc, 8))
		i = (i + 1)
	}
	return (4294967295 - crc)
}

func mochiMain() {
	var s string = "The quick brown fox jumps over the lazy dog"
	_ = s
	var result int = crc32(s)
	_ = result
	var hex string = toHex(result)
	_ = hex
	fmt.Println(hex)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		table = crc32Table()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
