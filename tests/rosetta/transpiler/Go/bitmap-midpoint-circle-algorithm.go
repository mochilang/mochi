//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:04:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func initGrid(size int) [][]string {
	var g [][]string = [][]string{}
	_ = g
	var y int = 0
	_ = y
	for y < size {
		var row []string = []string{}
		_ = row
		var x int = 0
		_ = x
		for x < size {
			row = append(row, " ")
			x = (x + 1)
		}
		g = append(g, row)
		y = (y + 1)
	}
	return g
}

func set(g [][]string, x int, y int) {
	if (((x >= 0) && (x < len(g[0]))) && (y >= 0)) && (y < len(g)) {
		g[y][x] = "#"
	}
}

func circle(r int) [][]string {
	var size int = ((r * 2) + 1)
	_ = size
	var g [][]string = initGrid(size)
	_ = g
	var x int = r
	_ = x
	var y int = 0
	_ = y
	var err int = (1 - r)
	_ = err
	for y <= x {
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r + x), (r + y))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r + y), (r + x))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r - x), (r + y))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r - y), (r + x))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r - x), (r - y))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r - y), (r - x))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r + x), (r - y))
		set(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), (r + y), (r - x))
		y = (y + 1)
		if err < 0 {
			err = ((err + (2 * y)) + 1)
		} else {
			x = (x - 1)
			err = ((err + (2 * (y - x))) + 1)
		}
	}
	return g
}

func trimRight(row []string) string {
	var end int = len(row)
	_ = end
	for (end > 0) && (row[(end-1)] == " ") {
		end = (end - 1)
	}
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < end {
		s = (s + row[i])
		i = (i + 1)
	}
	return s
}

var g [][]string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		g = circle(10)
		for _, row := range g {
			fmt.Println(trimRight(func(v any) []string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []string{}
					}
					out := make([]string, len(arr))
					for i, x := range arr {
						out[i] = x.(string)
					}
					return out
				}
				return v.([]string)
			}(row)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
