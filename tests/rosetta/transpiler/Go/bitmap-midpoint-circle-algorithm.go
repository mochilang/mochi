//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 20:12:21 GMT+7
package main

import (
	"fmt"
)

func initGrid(size int) [][]string {
	var g [][]string = [][]string{}
	_ = g
	var y int = 0
	_ = y
	for y < size {
		var row []string = []string{}
		_ = row
		var x int = 0
		_ = x
		for x < size {
			row = append(row, " ")
			x = (x + 1)
		}
		g = append(g, row)
		y = (y + 1)
	}
	return g
}

func set(g [][]string, x int, y int) {
	if (((x >= 0) && (x < len(g[0]))) && (y >= 0)) && (y < len(g)) {
		g[y][x] = "#"
	}
}

func circle(r int) [][]string {
	var size int = ((r * 2) + 1)
	_ = size
	var g [][]string = initGrid(size)
	_ = g
	var x int = r
	_ = x
	var y int = 0
	_ = y
	var err int = (1 - r)
	_ = err
	for y <= x {
		set(g, (r + x), (r + y))
		set(g, (r + y), (r + x))
		set(g, (r - x), (r + y))
		set(g, (r - y), (r + x))
		set(g, (r - x), (r - y))
		set(g, (r - y), (r - x))
		set(g, (r + x), (r - y))
		set(g, (r + y), (r - x))
		y = (y + 1)
		if err < 0 {
			err = ((err + (2 * y)) + 1)
		} else {
			x = (x - 1)
			err = ((err + (2 * (y - x))) + 1)
		}
	}
	return g
}

func trimRight(row []string) string {
	var end int = len(row)
	_ = end
	for (end > 0) && (row[(end-1)] == " ") {
		end = (end - 1)
	}
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < end {
		s = (s + row[i])
		i = (i + 1)
	}
	return s
}

var g [][]string

func main() {
	g = circle(10)
	for _, row := range g {
		fmt.Println(trimRight(row))
	}
}
