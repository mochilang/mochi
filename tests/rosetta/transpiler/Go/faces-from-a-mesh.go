//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 17:45:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

type Edge struct {
	A int `json:"a"`
	B int `json:"b"`
}

func contains(xs []int, v int) bool {
	for _, x := range xs {
		if x == v {
			return true
		}
	}
	return false
}

func sliceEqual(a []int, b []int) bool {
	var i int = 0
	_ = i
	for i < len(a) {
		if a[i] != b[i] {
			return false
		}
		i = (i + 1)
	}
	return true
}

func reverse(xs []int) {
	var i int = 0
	_ = i
	var j int = (len(xs) - 1)
	_ = j
	for i < j {
		var t int = xs[i]
		_ = t
		xs[i] = xs[j]
		xs[j] = t
		i = (i + 1)
		j = (j - 1)
	}
}

func copyInts(xs []int) []int {
	var out []int = []int{}
	_ = out
	for _, v := range xs {
		out = append(out, v)
	}
	return out
}

func perimEqual(p1 []int, p2 []int) bool {
	if len(p1) != len(p2) {
		return false
	}
	for _, v := range p1 {
		if !func() bool {
			for _, el := range p2 {
				if el == v {
					return true
				}
			}
			return false
		}() {
			return false
		}
	}
	var c []int = copyInts(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(p1))
	_ = c
	var r int = 0
	_ = r
	for r < 2 {
		var i int = 0
		_ = i
		for i < len(p1) {
			if sliceEqual(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(c), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(p2)) {
				return true
			}
			var t int = c[(len(c) - 1)]
			_ = t
			var j int = (len(c) - 1)
			_ = j
			for j > 0 {
				c[j] = c[(j - 1)]
				j = (j - 1)
			}
			c[0] = t
			i = (i + 1)
		}
		reverse(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(c))
		r = (r + 1)
	}
	return false
}

func sortEdges(es []Edge) []Edge {
	var arr []Edge = es
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			var a Edge = arr[j]
			_ = a
			var b Edge = arr[(j + 1)]
			_ = b
			if (a.A > b.A) || ((a.A == b.A) && (a.B > b.B)) {
				arr[j] = b
				arr[(j + 1)] = a
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func concat(a []Edge, b []Edge) []Edge {
	var out []Edge = []Edge{}
	_ = out
	for _, x := range a {
		out = append(out, x)
	}
	for _, x := range b {
		out = append(out, x)
	}
	return out
}

func faceToPerim(face []Edge) any {
	var le int = len(face)
	_ = le
	if le == 0 {
		return nil
	}
	var edges []Edge = []Edge{}
	_ = edges
	var i int = 0
	_ = i
	for i < le {
		var e Edge = face[i]
		_ = e
		if e.B <= e.A {
			return nil
		}
		edges = append(edges, e)
		i = (i + 1)
	}
	edges = sortEdges(func(v any) []Edge {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Edge); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Edge{}
			}
			out := make([]Edge, len(arr))
			for i, x := range arr {
				out[i] = x.(Edge)
			}
			return out
		}
		return v.([]Edge)
	}(edges))
	var firstEdge Edge = edges[0]
	_ = firstEdge
	var perim []int = []int{firstEdge.A, firstEdge.B}
	_ = perim
	var first int = firstEdge.A
	_ = first
	var last int = firstEdge.B
	_ = last
	edges = edges[1:len(edges)]
	le = len(edges)
	var done bool = false
	_ = done
	for (le > 0) && !done {
		var idx int = 0
		_ = idx
		var found bool = false
		_ = found
		for idx < le {
			var e Edge = edges[idx]
			_ = e
			if e.A == last {
				perim = append(perim, e.B)
				last = e.B
				found = true
			} else {
				if e.B == last {
					perim = append(perim, e.A)
					last = e.A
					found = true
				}
			}
			if found {
				edges = concat(func(v any) []Edge {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Edge); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Edge{}
						}
						out := make([]Edge, len(arr))
						for i, x := range arr {
							out[i] = x.(Edge)
						}
						return out
					}
					return v.([]Edge)
				}(edges[:idx]), func(v any) []Edge {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Edge); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Edge{}
						}
						out := make([]Edge, len(arr))
						for i, x := range arr {
							out[i] = x.(Edge)
						}
						return out
					}
					return v.([]Edge)
				}(edges[(idx+1):len(edges)]))
				le = (le - 1)
				if last == first {
					if le == 0 {
						done = true
					} else {
						return nil
					}
				}
				break
			}
			idx = (idx + 1)
		}
		if !found {
			return nil
		}
	}
	return perim[:(len(perim) - 1)]
}

func listStr(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

var e []Edge

var f []Edge

var g []Edge

var h []Edge

var faces [][]Edge

var names []string

var idx2 int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("Perimeter format equality checks:")
		fmt.Println(("  Q == R is " + fmt.Sprint(perimEqual(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{8, 1, 3}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{1, 3, 8})))))
		fmt.Println(("  U == V is " + fmt.Sprint(perimEqual(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{18, 8, 14, 10, 12, 17, 19}), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{8, 14, 10, 12, 17, 19, 18})))))
		e = []Edge{Edge{
			A: 7,
			B: 11,
		}, Edge{
			A: 1,
			B: 11,
		}, Edge{
			A: 1,
			B: 7,
		}}
		f = []Edge{Edge{
			A: 11,
			B: 23,
		}, Edge{
			A: 1,
			B: 17,
		}, Edge{
			A: 17,
			B: 23,
		}, Edge{
			A: 1,
			B: 11,
		}}
		g = []Edge{Edge{
			A: 8,
			B: 14,
		}, Edge{
			A: 17,
			B: 19,
		}, Edge{
			A: 10,
			B: 12,
		}, Edge{
			A: 10,
			B: 14,
		}, Edge{
			A: 12,
			B: 17,
		}, Edge{
			A: 8,
			B: 18,
		}, Edge{
			A: 18,
			B: 19,
		}}
		h = []Edge{Edge{
			A: 1,
			B: 3,
		}, Edge{
			A: 9,
			B: 11,
		}, Edge{
			A: 3,
			B: 11,
		}, Edge{
			A: 1,
			B: 11,
		}}
		fmt.Println("\nEdge to perimeter format translations:")
		faces = [][]Edge{e, f, g, h}
		names = []string{"E", "F", "G", "H"}
		idx2 = 0
		for idx2 < len(faces) {
			per := faceToPerim(func(v any) []Edge {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Edge); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Edge{}
					}
					out := make([]Edge, len(arr))
					for i, x := range arr {
						out[i] = x.(Edge)
					}
					return out
				}
				return v.([]Edge)
			}(faces[idx2]))
			_ = per
			if _toFloat(per) == _toFloat(nil) {
				fmt.Println((("  " + names[idx2]) + " => Invalid edge format"))
			} else {
				fmt.Println(((("  " + names[idx2]) + " => ") + listStr(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}(per)))))
			}
			idx2 = (idx2 + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
