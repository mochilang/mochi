//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 15:43:38 GMT+7
package main

import (
	"fmt"
)

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	var idx int = indexOf(upper, ch)
	_ = idx
	if idx >= 0 {
		return (65 + idx)
	}
	idx = indexOf(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	if (ch >= "0") && (ch <= "9") {
		return (48 + parseIntStr(ch))
	}
	if ch == "+" {
		return 43
	}
	if ch == "/" {
		return 47
	}
	if ch == " " {
		return 32
	}
	if ch == "=" {
		return 61
	}
	return 0
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	if (n >= 48) && (n < 58) {
		var digits string = "0123456789"
		_ = digits
		return string([]rune(digits)[(n - 48):(n - 47)])
	}
	if n == 43 {
		return "+"
	}
	if n == 47 {
		return "/"
	}
	if n == 32 {
		return " "
	}
	if n == 61 {
		return "="
	}
	return "?"
}

func toBinary(n int, bits int) string {
	var b string = ""
	_ = b
	var val int = n
	_ = val
	var i int = 0
	_ = i
	for i < bits {
		b = (fmt.Sprint((val % 2)) + b)
		val = int((val / 2))
		i = (i + 1)
	}
	return b
}

func binToInt(bits string) int {
	var n int = 0
	_ = n
	var i int = 0
	_ = i
	for i < len(bits) {
		n = ((n * 2) + parseIntStr(string([]rune(bits)[i:(i+1)])))
		i = (i + 1)
	}
	return n
}

func base64Encode(text string) string {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	_ = alphabet
	var bin string = ""
	_ = bin
	for _, _ch := range text {
		ch := string(_ch)
		bin = (bin + toBinary(ord(ch), 8))
	}
	for (len(bin) % 6) != 0 {
		bin = (bin + "0")
	}
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(bin) {
		var chunk string = string([]rune(bin)[i:(i + 6)])
		_ = chunk
		var val int = binToInt(chunk)
		_ = val
		out = (out + string([]rune(alphabet)[val:(val+1)]))
		i = (i + 6)
	}
	var pad int = ((3 - (len(text) % 3)) % 3)
	_ = pad
	if pad == 1 {
		out = (string([]rune(out)[0:(len(out)-1)]) + "=")
	}
	if pad == 2 {
		out = (string([]rune(out)[0:(len(out)-2)]) + "==")
	}
	return out
}

func base64Decode(enc string) string {
	var alphabet string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	_ = alphabet
	var bin string = ""
	_ = bin
	var i int = 0
	_ = i
	for i < len(enc) {
		var ch string = string([]rune(enc)[i])
		_ = ch
		if ch == "=" {
			break
		}
		var idx int = indexOf(alphabet, ch)
		_ = idx
		bin = (bin + toBinary(idx, 6))
		i = (i + 1)
	}
	var out string = ""
	_ = out
	i = 0
	for (i + 8) <= len(bin) {
		var chunk string = string([]rune(bin)[i:(i + 8)])
		_ = chunk
		var val int = binToInt(chunk)
		_ = val
		out = (out + chr(val))
		i = (i + 8)
	}
	return out
}

var msg string

var enc string

var dec string

func main() {
	msg = "Rosetta Code Base64 decode data task"
	fmt.Println(("Original : " + msg))
	enc = base64Encode(msg)
	fmt.Println(("\nEncoded  : " + enc))
	dec = base64Decode(enc)
	fmt.Println(("\nDecoded  : " + dec))
}
