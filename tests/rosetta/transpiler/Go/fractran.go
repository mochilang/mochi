//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:11:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

type StepResult struct {
	N  *big.Int `json:"n"`
	Ok bool     `json:"ok"`
}

func step(n *big.Int, program [][]*big.Int) StepResult {
	var i int = 0
	_ = i
	for i < len(program) {
		var num *big.Int = program[i][0]
		_ = num
		var den *big.Int = program[i][1]
		_ = den
		if func() bool { return new(big.Int).Mod(n, den).Cmp(big.NewInt(int64(0))) == 0 }() {
			n = new(big.Int).Mul(new(big.Int).Div(n, den), num)
			return StepResult{
				N:  n,
				Ok: true,
			}
		}
		i = (i + 1)
	}
	return StepResult{
		N:  n,
		Ok: false,
	}
}

func mochiMain() {
	var program [][]*big.Int = [][]*big.Int{[]*big.Int{big.NewInt(int64(17)), big.NewInt(int64(91))}, []*big.Int{big.NewInt(int64(78)), big.NewInt(int64(85))}, []*big.Int{big.NewInt(int64(19)), big.NewInt(int64(51))}, []*big.Int{big.NewInt(int64(23)), big.NewInt(int64(38))}, []*big.Int{big.NewInt(int64(29)), big.NewInt(int64(33))}, []*big.Int{big.NewInt(int64(77)), big.NewInt(int64(29))}, []*big.Int{big.NewInt(int64(95)), big.NewInt(int64(23))}, []*big.Int{big.NewInt(int64(77)), big.NewInt(int64(19))}, []*big.Int{big.NewInt(int64(1)), big.NewInt(int64(17))}, []*big.Int{big.NewInt(int64(11)), big.NewInt(int64(13))}, []*big.Int{big.NewInt(int64(13)), big.NewInt(int64(11))}, []*big.Int{big.NewInt(int64(15)), big.NewInt(int64(14))}, []*big.Int{big.NewInt(int64(15)), big.NewInt(int64(2))}, []*big.Int{big.NewInt(int64(55)), big.NewInt(int64(1))}}
	_ = program
	var n *big.Int = big.NewInt(int64(2))
	_ = n
	var primes int = 0
	_ = primes
	var count int = 0
	_ = count
	var limit int = 1000000
	_ = limit
	var two *big.Int = big.NewInt(int64(2))
	_ = two
	var line string = ""
	_ = line
	for (primes < 20) && (count < limit) {
		var res StepResult = step(n, func(v any) [][]*big.Int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]*big.Int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]*big.Int{}
				}
				out := make([][]*big.Int, len(arr))
				for i, x := range arr {
					out[i] = x.([]*big.Int)
				}
				return out
			}
			return v.([][]*big.Int)
		}(program))
		_ = res
		n = res.N
		if !res.Ok {
			break
		}
		var m *big.Int = n
		_ = m
		var pow int = 0
		_ = pow
		for func() bool { return new(big.Int).Mod(m, two).Cmp(big.NewInt(int64(0))) == 0 }() {
			m = new(big.Int).Div(m, two)
			pow = (pow + 1)
		}
		if func() bool { return m.Cmp(big.NewInt(int64(1))) == 0 }() && (pow > 1) {
			line = ((line + fmt.Sprint(pow)) + " ")
			primes = (primes + 1)
		}
		count = (count + 1)
	}
	if len(line) > 0 {
		fmt.Println(_substr(line, 0, (len(line) - 1)))
	} else {
		fmt.Println("")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
