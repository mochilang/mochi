//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-23 23:44:31 GMT+7
package main

import (
	"fmt"
)

func sortRunes(s string) string {
	var arr []string = []string{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(s) {
		arr = append(arr, string([]rune(s)[i:(i+1)]))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var m int = 0
	_ = m
	for m < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				var tmp string = arr[j]
				_ = tmp
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		m = (m + 1)
	}
	var out string = ""
	_ = out
	i = 0
	for i < n {
		out = (out + arr[i])
		i = (i + 1)
	}
	return out
}

func deranged(a string, b string) bool {
	if len(a) != len(b) {
		return false
	}
	var i int = 0
	_ = i
	for i < len(a) {
		if string([]rune(a)[i:(i+1)]) == string([]rune(b)[i:(i+1)]) {
			return false
		}
		i = (i + 1)
	}
	return true
}

func mochiMain() {
	var words []string = []string{"constitutionalism", "misconstitutional"}
	_ = words
	var m map[string][]string = map[string][]string{}
	_ = m
	var bestLen int = 0
	_ = bestLen
	var w1 string = ""
	_ = w1
	var w2 string = ""
	_ = w2
	for _, w := range words {
		if len(w) <= bestLen {
			continue
		}
		var k string = sortRunes(w)
		_ = k
		if !func() bool { _, ok := m[k]; return ok }() {
			m[k] = []string{w}
			continue
		}
		for _, c := range m[k] {
			if deranged(w, c) {
				bestLen = len(w)
				w1 = c
				w2 = w
				break
			}
		}
		m[k] = append(m[k], w)
	}
	fmt.Println(((((w1 + " ") + w2) + " : Length ") + fmt.Sprint(bestLen)))
}

func main() {
	mochiMain()
}
