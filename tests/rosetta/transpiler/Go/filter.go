//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:04:47 GMT+7
package main

import (
	"fmt"
	"os"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func randPerm(n int) []int {
	var arr []int = []int{}
	_ = arr
	var i int = 0
	_ = i
	for i < n {
		arr = append(arr, i)
		i = (i + 1)
	}
	var idx int = (n - 1)
	_ = idx
	for idx > 0 {
		var j int = (_now() % (idx + 1))
		_ = j
		var tmp int = arr[idx]
		_ = tmp
		arr[idx] = arr[j]
		arr[j] = tmp
		idx = (idx - 1)
	}
	return arr
}

func even(xs []int) []int {
	var r []int = []int{}
	_ = r
	for _, x := range xs {
		if (x % 2) == 0 {
			r = append(r, x)
		}
	}
	return r
}

func reduceToEven(xs []int) []int {
	var arr []int = xs
	_ = arr
	var last int = 0
	_ = last
	var i int = 0
	_ = i
	for i < len(arr) {
		var e int = arr[i]
		_ = e
		if (e % 2) == 0 {
			arr[last] = e
			last = (last + 1)
		}
		i = (i + 1)
	}
	return arr[:last]
}

func listStr(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if (i + 1) < len(xs) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func mochiMain() {
	var a []int = randPerm(20)
	_ = a
	var cap_a int = 20
	_ = cap_a
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)))
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(even(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)))))
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)))
	a = reduceToEven(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a))
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(a)))
	fmt.Println(((("a len: " + fmt.Sprint(len(a))) + " cap: ") + fmt.Sprint(cap_a)))
}

func main() {
	mochiMain()
}
