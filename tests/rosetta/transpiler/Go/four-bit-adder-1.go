//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 17:46:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type SumCarry struct {
	S bool `json:"s"`
	C bool `json:"c"`
}

type Add4Result struct {
	V  bool `json:"v"`
	S3 bool `json:"s3"`
	S2 bool `json:"s2"`
	S1 bool `json:"s1"`
	S0 bool `json:"s0"`
}

func xor(a bool, b bool) bool {
	return ((a && !b) || (!a && b))
}

func ha(a bool, b bool) SumCarry {
	return SumCarry{
		S: xor(a, b),
		C: (a && b),
	}
}

func fa(a bool, b bool, c0 bool) SumCarry {
	var r1 SumCarry = ha(a, c0)
	_ = r1
	var r2 SumCarry = ha(r1.S, b)
	_ = r2
	_ = r2
	return SumCarry{
		S: r2.S,
		C: (r1.C || r2.C),
	}
}

func add4(a3 bool, a2 bool, a1 bool, a0 bool, b3 bool, b2 bool, b1 bool, b0 bool) Add4Result {
	var r0 SumCarry = fa(a0, b0, false)
	_ = r0
	var r1 SumCarry = fa(a1, b1, r0.C)
	_ = r1
	var r2 SumCarry = fa(a2, b2, r1.C)
	_ = r2
	var r3 SumCarry = fa(a3, b3, r2.C)
	_ = r3
	_ = r3
	return Add4Result{
		V:  r3.C,
		S3: r3.S,
		S2: r2.S,
		S1: r1.S,
		S0: r0.S,
	}
}

func b2i(b bool) int {
	if b {
		return 1
	}
	return 0
}

func mochiMain() {
	var r Add4Result = add4(true, false, true, false, true, false, false, true)
	_ = r
	fmt.Println(((((((((fmt.Sprint(b2i(r.V)) + " ") + fmt.Sprint(b2i(r.S3))) + " ") + fmt.Sprint(b2i(r.S2))) + " ") + fmt.Sprint(b2i(r.S1))) + " ") + fmt.Sprint(b2i(r.S0))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
