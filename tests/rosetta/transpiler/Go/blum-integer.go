//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:04:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func firstPrimeFactor(n int) int {
	if n == 1 {
		return 1
	}
	if (n % 3) == 0 {
		return 3
	}
	if (n % 5) == 0 {
		return 5
	}
	var inc []int = []int{4, 2, 4, 2, 4, 6, 2, 6}
	_ = inc
	var k int = 7
	_ = k
	var i int = 0
	_ = i
	for (k * k) <= n {
		if (n % k) == 0 {
			return k
		}
		k = (k + inc[i])
		i = ((i + 1) % len(inc))
	}
	return n
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func padLeft(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func formatFloat(f float64, prec int) string {
	var s string = fmt.Sprint(f)
	_ = s
	var idx int = strings.Index(s, ".")
	_ = idx
	if idx < 0 {
		return s
	}
	var need int = ((idx + 1) + prec)
	_ = need
	if len(s) > need {
		return _substr(s, 0, need)
	}
	return s
}

func mochiMain() {
	var blum []int = []int{}
	_ = blum
	var counts []int = []int{0, 0, 0, 0}
	_ = counts
	var digits []int = []int{1, 3, 7, 9}
	_ = digits
	_ = digits
	var i int = 1
	_ = i
	var bc int = 0
	_ = bc
	for {
		var p int = firstPrimeFactor(i)
		_ = p
		if (p % 4) == 3 {
			var q int = int((i / p))
			_ = q
			if ((q != p) && ((q % 4) == 3)) && isPrime(q) {
				if bc < 50 {
					blum = append(blum, i)
				}
				var d int = (i % 10)
				_ = d
				if d == 1 {
					counts[0] = (counts[0] + 1)
				} else {
					if d == 3 {
						counts[1] = (counts[1] + 1)
					} else {
						if d == 7 {
							counts[2] = (counts[2] + 1)
						} else {
							if d == 9 {
								counts[3] = (counts[3] + 1)
							}
						}
					}
				}
				bc = (bc + 1)
				if bc == 50 {
					fmt.Println("First 50 Blum integers:")
					var idx int = 0
					_ = idx
					for idx < 50 {
						var line string = ""
						_ = line
						var j int = 0
						_ = j
						for j < 10 {
							line = ((line + padLeft(blum[idx], 3)) + " ")
							idx = (idx + 1)
							j = (j + 1)
						}
						fmt.Println(_substr(line, 0, (len(line) - 1)))
					}
					break
				}
			}
		}
		if (i % 5) == 3 {
			i = (i + 4)
		} else {
			i = (i + 2)
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
