//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 11:38:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func conv2d(img [][]float64, k [][]float64) [][]float64 {
	var h int = len(img)
	_ = h
	var w int = len(img[0])
	_ = w
	var n int = len(k)
	_ = n
	var half int = (n / 2)
	_ = half
	var out [][]float64 = [][]float64{}
	_ = out
	var y int = 0
	_ = y
	for y < h {
		var row []float64 = []float64{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			var sum float64 = 0.0
			_ = sum
			var j int = 0
			_ = j
			for j < n {
				var i int = 0
				_ = i
				for i < n {
					var yy int = ((y + j) - half)
					_ = yy
					if yy < 0 {
						yy = 0
					}
					if yy >= h {
						yy = (h - 1)
					}
					var xx int = ((x + i) - half)
					_ = xx
					if xx < 0 {
						xx = 0
					}
					if xx >= w {
						xx = (w - 1)
					}
					sum = (sum + (img[yy][xx] * k[j][i]))
					i = (i + 1)
				}
				j = (j + 1)
			}
			row = append(row, sum)
			x = (x + 1)
		}
		out = append(out, row)
		y = (y + 1)
	}
	return out
}

func gradient(img [][]float64) [][]float64 {
	var hx [][]float64 = [][]float64{[]float64{(0 - 1.0), 0.0, 1.0}, []float64{(0 - 2.0), 0.0, 2.0}, []float64{(0 - 1.0), 0.0, 1.0}}
	_ = hx
	var hy [][]float64 = [][]float64{[]float64{1.0, 2.0, 1.0}, []float64{0.0, 0.0, 0.0}, []float64{(0 - 1.0), (0 - 2.0), (0 - 1.0)}}
	_ = hy
	var gx [][]float64 = conv2d(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(img), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(hx))
	_ = gx
	var gy [][]float64 = conv2d(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(img), func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(hy))
	_ = gy
	var h int = len(img)
	_ = h
	var w int = len(img[0])
	_ = w
	var out [][]float64 = [][]float64{}
	_ = out
	var y int = 0
	_ = y
	for y < h {
		var row []float64 = []float64{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			var g float64 = ((gx[y][x] * gx[y][x]) + (gy[y][x] * gy[y][x]))
			_ = g
			row = append(row, g)
			x = (x + 1)
		}
		out = append(out, row)
		y = (y + 1)
	}
	return out
}

func threshold(g [][]float64, t float64) [][]int {
	var h int = len(g)
	_ = h
	var w int = len(g[0])
	_ = w
	var out [][]int = [][]int{}
	_ = out
	var y int = 0
	_ = y
	for y < h {
		var row []int = []int{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			if g[y][x] >= t {
				row = append(row, 1)
			} else {
				row = append(row, 0)
			}
			x = (x + 1)
		}
		out = append(out, row)
		y = (y + 1)
	}
	return out
}

func printMatrix(m [][]int) {
	var y int = 0
	_ = y
	for y < len(m) {
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < len(m[0]) {
			line = (line + fmt.Sprint(m[y][x]))
			if x < (len(m[0]) - 1) {
				line = (line + " ")
			}
			x = (x + 1)
		}
		fmt.Println(line)
		y = (y + 1)
	}
}

func mochiMain() {
	var img [][]float64 = [][]float64{[]float64{0.0, 0.0, 0.0, 0.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 255.0, 255.0, 255.0, 0.0}, []float64{0.0, 0.0, 0.0, 0.0, 0.0}}
	_ = img
	var g [][]float64 = gradient(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(img))
	_ = g
	var edges [][]int = threshold(func(v any) [][]float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]float64{}
			}
			out := make([][]float64, len(arr))
			for i, x := range arr {
				out[i] = x.([]float64)
			}
			return out
		}
		return v.([][]float64)
	}(g), (1020.0 * 1020.0))
	_ = edges
	printMatrix(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(edges))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
