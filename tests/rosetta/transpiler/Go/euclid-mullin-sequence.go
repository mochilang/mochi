//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:49:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var zero *big.Int

var one *big.Int

var two *big.Int

var three *big.Int

var four *big.Int

var five *big.Int

var six *big.Int

var ten *big.Int

var k100 *big.Int

func gcd(a *big.Int, b *big.Int) *big.Int {
	var x *big.Int = a
	_ = x
	var y *big.Int = b
	_ = y
	for func() bool { return y.Cmp(zero) != 0 }() {
		var t *big.Int = new(big.Int).Mod(x, y)
		_ = t
		x = y
		y = t
	}
	return x
}

func absBig(x *big.Int) *big.Int {
	if func() bool { return x.Cmp(zero) < 0 }() {
		return new(big.Int).Sub(zero, x)
	}
	return x
}

func pollardRho(n *big.Int, c *big.Int) *big.Int {
	var g func(*big.Int, *big.Int) *big.Int
	_ = g
	g = func(x *big.Int, y *big.Int) *big.Int {
		var x2 *big.Int = new(big.Int).Mul(x, x)
		_ = x2
		x2 = new(big.Int).Add(x2, c)
		return new(big.Int).Mod(x2, y)
	}
	var x *big.Int = big.NewInt(int64(2))
	_ = x
	var y *big.Int = big.NewInt(int64(2))
	_ = y
	var z *big.Int = big.NewInt(int64(1))
	_ = z
	var d *big.Int = big.NewInt(int64(0))
	_ = d
	var count int = 0
	_ = count
	for {
		x = g(x, n)
		y = g(g(y, n), n)
		d = absBig(new(big.Int).Sub(x, y))
		d = new(big.Int).Mod(d, n)
		z = new(big.Int).Mul(z, d)
		count = (count + 1)
		if count == 100 {
			d = gcd(z, n)
			if func() bool { return d.Cmp(one) != 0 }() {
				break
			}
			z = one
			count = 0
		}
	}
	if func() bool { return d.Cmp(n) == 0 }() {
		return zero
	}
	return d
}

func smallestPrimeFactorWheel(n *big.Int, max *big.Int) *big.Int {
	if func() bool { return new(big.Int).Mod(n, two).Cmp(zero) == 0 }() {
		return two
	}
	if func() bool { return new(big.Int).Mod(n, three).Cmp(zero) == 0 }() {
		return three
	}
	if func() bool { return new(big.Int).Mod(n, five).Cmp(zero) == 0 }() {
		return five
	}
	var k *big.Int = big.NewInt(int64(7))
	_ = k
	var inc []*big.Int = []*big.Int{four, two, four, two, four, six, two, six}
	_ = inc
	var i int = 0
	_ = i
	for func() bool { return new(big.Int).Mul(k, k).Cmp(n) <= 0 }() {
		if func() bool { return new(big.Int).Mod(n, k).Cmp(zero) == 0 }() {
			return k
		}
		k = new(big.Int).Add(k, inc[i])
		if func() bool { return k.Cmp(max) > 0 }() {
			break
		}
		i = ((i + 1) % 8)
	}
	return zero
}

func smallestPrimeFactor(n *big.Int) *big.Int {
	var s *big.Int = smallestPrimeFactorWheel(n, k100)
	_ = s
	_ = s
	if func() bool { return s.Cmp(zero) != 0 }() {
		return s
	}
	var c *big.Int = big.NewInt(int64(1))
	_ = c
	for {
		var d *big.Int = pollardRho(n, c)
		_ = d
		if func() bool { return d.Cmp(zero) == 0 }() {
			if func() bool { return c.Cmp(ten) == 0 }() {
				return n
			}
			c = new(big.Int).Add(c, one)
		} else {
			var factor *big.Int = smallestPrimeFactorWheel(d, d)
			_ = factor
			var s2 *big.Int = smallestPrimeFactorWheel(new(big.Int).Div(n, d), factor)
			_ = s2
			_ = s2
			if func() bool { return s2.Cmp(zero) != 0 }() {
				if func() bool { return s2.Cmp(factor) < 0 }() {
					return s2
				} else {
					return factor
				}
			}
			return factor
		}
	}
}

func mochiMain() {
	var k int = 19
	_ = k
	fmt.Println((("First " + fmt.Sprint(k)) + " terms of the Euclidâ€“Mullin sequence:"))
	fmt.Println(2)
	var prod *big.Int = big.NewInt(int64(2))
	_ = prod
	var count int = 1
	_ = count
	for count < k {
		var z *big.Int = new(big.Int).Add(prod, one)
		_ = z
		var t *big.Int = smallestPrimeFactor(z)
		_ = t
		fmt.Println(t)
		prod = new(big.Int).Mul(prod, t)
		count = (count + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		zero = big.NewInt(int64(0))
		one = big.NewInt(int64(1))
		two = big.NewInt(int64(2))
		three = big.NewInt(int64(3))
		four = big.NewInt(int64(4))
		five = big.NewInt(int64(5))
		six = big.NewInt(int64(6))
		ten = big.NewInt(int64(10))
		k100 = big.NewInt(int64(100000))
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
