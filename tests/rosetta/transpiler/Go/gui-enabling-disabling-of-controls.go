//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:07 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type State struct {
	Entry bool `json:"entry"`
	Inc   bool `json:"inc"`
	Dec   bool `json:"dec"`
}

func state(v int) State {
	return State{
		Entry: (v == 0),
		Inc:   (v < 10),
		Dec:   (v > 0),
	}
}

func printState(v int) {
	var s State = state(v)
	_ = s
	fmt.Println(((((((("value=" + fmt.Sprint(v)) + " entry=") + fmt.Sprint(s.Entry)) + " inc=") + fmt.Sprint(s.Inc)) + " dec=") + fmt.Sprint(s.Dec)))
}

func mochiMain() {
	var v int = 0
	_ = v
	printState(v)
	for {
		var s State = state(v)
		_ = s
		if !s.Inc {
			break
		}
		v = (v + 1)
		printState(v)
	}
	for {
		var s State = state(v)
		_ = s
		if !s.Dec {
			break
		}
		v = (v - 1)
		printState(v)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
