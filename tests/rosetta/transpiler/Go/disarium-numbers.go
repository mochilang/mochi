//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pow(base int, exp int) int {
	var result int = 1
	var i int = 0
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func isDisarium(n int) bool {
	var digits []int = []int{}
	var x int = n
	if x == 0 {
		digits = append(digits, 0)
	}
	for x > 0 {
		digits = append(digits, (x % 10))
		x = int((x / 10))
	}
	var sum int = 0
	var pos int = 1
	var i int = (len(digits) - 1)
	for i >= 0 {
		sum = (sum + pow(digits[i], pos))
		pos = (pos + 1)
		i = (i - 1)
	}
	return (sum == n)
}

func mochiMain() {
	var count int = 0
	var n int = 0
	for (count < 19) && (n < 3000000) {
		if isDisarium(n) {
			fmt.Println(fmt.Sprint(n))
			count = (count + 1)
		}
		n = (n + 1)
	}
	fmt.Println((("\nFound the first " + fmt.Sprint(count)) + " Disarium numbers."))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
