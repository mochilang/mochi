//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 19:18:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func makeSym(order int, elements []float64) map[string]any {
	return map[string]any{"order": order, "ele": elements}
}

func unpackSym(m map[string]any) [][]float64 {
	var n int = m["order"].(int)
	_ = n
	var ele []float64 = func(v any) []float64 {
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok && len(arr) == 0 {
			return []float64{}
		}
		return v.([]float64)
	}(m["ele"])
	_ = ele
	var mat [][]float64 = [][]float64{}
	_ = mat
	var idx int = 0
	_ = idx
	var r int = 0
	_ = r
	for r < n {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c <= r {
			row = append(row, ele[idx])
			idx = (idx + 1)
			c = (c + 1)
		}
		for c < n {
			row = append(row, 0.0)
			c = (c + 1)
		}
		mat = append(mat, row)
		r = (r + 1)
	}
	r = 0
	for r < n {
		var c int = (r + 1)
		_ = c
		for c < n {
			mat[r][c] = mat[c][r]
			c = (c + 1)
		}
		r = (r + 1)
	}
	return mat
}

func printMat(m [][]float64) {
	var i int = 0
	_ = i
	for i < len(m) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(m[i]) {
			line = (line + fmt.Sprint(m[i][j]))
			if j < (len(m[i]) - 1) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

func printSym(m map[string]any) {
	printMat(unpackSym(m))
}

func printLower(m map[string]any) {
	var n int = m["order"].(int)
	_ = n
	var ele []float64 = func(v any) []float64 {
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok && len(arr) == 0 {
			return []float64{}
		}
		return v.([]float64)
	}(m["ele"])
	_ = ele
	var mat [][]float64 = [][]float64{}
	_ = mat
	var idx int = 0
	_ = idx
	var r int = 0
	_ = r
	for r < n {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c <= r {
			row = append(row, ele[idx])
			idx = (idx + 1)
			c = (c + 1)
		}
		for c < n {
			row = append(row, 0.0)
			c = (c + 1)
		}
		mat = append(mat, row)
		r = (r + 1)
	}
	printMat(mat)
}

func choleskyLower(a map[string]any) map[string]any {
	var n int = a["order"].(int)
	_ = n
	var ae []float64 = func(v any) []float64 {
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok && len(arr) == 0 {
			return []float64{}
		}
		return v.([]float64)
	}(a["ele"])
	_ = ae
	var le []float64 = []float64{}
	_ = le
	var idx int = 0
	_ = idx
	for idx < len(ae) {
		le = append(le, 0.0)
		idx = (idx + 1)
	}
	var row int = 1
	_ = row
	var col int = 1
	_ = col
	var dr int = 0
	_ = dr
	var dc int = 0
	_ = dc
	var i int = 0
	_ = i
	for i < len(ae) {
		var e float64 = ae[i]
		_ = e
		if i < dr {
			var d float64 = ((e - le[i]) / le[dc])
			_ = d
			le[i] = d
			var ci int = col
			_ = ci
			var cx int = dc
			_ = cx
			var j int = (i + 1)
			_ = j
			for j <= dr {
				cx = (cx + ci)
				ci = (ci + 1)
				le[j] = (le[j] + (d * le[cx]))
				j = (j + 1)
			}
			col = (col + 1)
			dc = (dc + col)
		} else {
			le[i] = sqrtApprox((e - le[i]))
			row = (row + 1)
			dr = (dr + row)
			col = 1
			dc = 0
		}
		i = (i + 1)
	}
	return map[string]any{"order": n, "ele": le}
}

func demo(a map[string]any) {
	fmt.Println("A:")
	printSym(a)
	fmt.Println("L:")
	var l map[string]any = choleskyLower(a)
	_ = l
	printLower(l)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		demo(makeSym(3, []float64{25.0, 15.0, 18.0, (0 - 5.0), 0.0, 11.0}))
		demo(makeSym(4, []float64{18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0}))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
