//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:12:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func fib(n int) int {
	if n < 2 {
		return n
	}
	var a int = 0
	_ = a
	var b int = 1
	_ = b
	var i int = 1
	_ = i
	for i < n {
		var t int = (a + b)
		_ = t
		a = b
		b = t
		i = (i + 1)
	}
	return b
}

func mochiMain() {
	for _, i := range []int{(0 - 1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10} {
		if i < 0 {
			fmt.Println((("fib(" + fmt.Sprint(i)) + ") returned error: negative n is forbidden"))
		} else {
			fmt.Println(((("fib(" + fmt.Sprint(i)) + ") = ") + fmt.Sprint(fib(i))))
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
