//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type If2 struct {
	Cond1 bool `json:"cond1"`
	Cond2 bool `json:"cond2"`
}

func else1(i If2, f func()) If2 {
	if i.Cond1 && (i.Cond2 == false) {
		f()
	}
	return i
}

func else2(i If2, f func()) If2 {
	if i.Cond2 && (i.Cond1 == false) {
		f()
	}
	return i
}

func else0(i If2, f func()) If2 {
	if (i.Cond1 == false) && (i.Cond2 == false) {
		f()
	}
	return i
}

func if2(cond1 bool, cond2 bool, f func()) If2 {
	if cond1 && cond2 {
		f()
	}
	return If2{
		Cond1: cond1,
		Cond2: cond2,
	}
}

var a int

var b int

var t If2

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		a = 0
		b = 1
		t = if2((a == 1), (b == 3), func() {
			fmt.Println("a = 1 and b = 3")
		})
		t = else1(t, func() {
			fmt.Println("a = 1 and b <> 3")
		})
		t = else2(t, func() {
			fmt.Println("a <> 1 and b = 3")
		})
		else0(t, func() {
			fmt.Println("a <> 1 and b <> 3")
		})
		a = 1
		b = 0
		t = if2((a == 1), (b == 3), func() {
			fmt.Println("a = 1 and b = 3")
		})
		t = else0(t, func() {
			fmt.Println("a <> 1 and b <> 3")
		})
		else1(t, func() {
			fmt.Println("a = 1 and b <> 3")
		})
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
