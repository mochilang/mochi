//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 12:08:25 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func binom(n int, k int) int {
	if (k < 0) || (k > n) {
		return 0
	}
	var kk int = k
	_ = kk
	if kk > (n - kk) {
		kk = (n - kk)
	}
	var res int = 1
	_ = res
	var i int = 0
	_ = i
	for i < kk {
		res = (res * (n - i))
		i = (i + 1)
		res = int((res / i))
	}
	return res
}

func catalan(n int) int {
	return int((binom((2*n), n) / (n + 1)))
}

func mochiMain() {
	for i := 0; i < 15; i++ {
		fmt.Println(fmt.Sprint(catalan(i)))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
