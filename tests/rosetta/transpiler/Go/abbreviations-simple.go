//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 10:45:21 GMT+7
package main

import (
	"fmt"
	"strings"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func fields(s string) []string {
	var words []string = []string{}
	_ = words
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
			if len(cur) > 0 {
				words = append(words, cur)
				cur = ""
			}
		} else {
			cur = (cur + ch)
		}
		i = (i + 1)
	}
	if len(cur) > 0 {
		words = append(words, cur)
	}
	return words
}

func padRight(s string, width int) string {
	var out string = s
	_ = out
	var i int = len(s)
	_ = i
	for i < width {
		out = (out + " ")
		i = (i + 1)
	}
	return out
}

func join(xs []string, sep string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			res = (res + sep)
		}
		res = (res + xs[i])
		i = (i + 1)
	}
	return res
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func isDigits(s string) bool {
	if len(s) == 0 {
		return false
	}
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if (ch < "0") || (ch > "9") {
			return false
		}
		i = (i + 1)
	}
	return true
}

func readTable(table string) map[string]any {
	var toks []string = fields(table)
	_ = toks
	var cmds []string = []string{}
	_ = cmds
	var mins []int = []int{}
	_ = mins
	var i int = 0
	_ = i
	for i < len(toks) {
		var cmd string = toks[i]
		_ = cmd
		var minlen int = len(cmd)
		_ = minlen
		i = (i + 1)
		if (i < len(toks)) && isDigits(toks[i]) {
			var num int = parseIntStr(toks[i])
			_ = num
			if (num >= 1) && (num < len(cmd)) {
				minlen = num
				i = (i + 1)
			}
		}
		cmds = append(cmds, cmd)
		mins = append(mins, minlen)
	}
	return map[string]any{"commands": cmds, "mins": mins}
}

func validate(commands []string, mins []int, words []string) []string {
	var results []string = []string{}
	_ = results
	var wi int = 0
	_ = wi
	for wi < len(words) {
		var w string = words[wi]
		_ = w
		var found bool = false
		_ = found
		var wlen int = len(w)
		_ = wlen
		var ci int = 0
		_ = ci
		for ci < len(commands) {
			var cmd string = commands[ci]
			_ = cmd
			if ((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= len(cmd)) {
				var c string = strings.ToUpper(cmd)
				_ = c
				var ww string = strings.ToUpper(w)
				_ = ww
				if _substr(c, 0, wlen) == ww {
					results = append(results, c)
					found = true
					break
				}
			}
			ci = (ci + 1)
		}
		if !found {
			results = append(results, "*error*")
		}
		wi = (wi + 1)
	}
	return results
}

func mochiMain() {
	var table string = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
	_ = table
	var sentence string = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
	_ = sentence
	var tbl map[string]any = readTable(table)
	_ = tbl
	var commands []string = tbl["commands"].([]string)
	_ = commands
	var mins []int = tbl["mins"].([]int)
	_ = mins
	var words []string = fields(sentence)
	_ = words
	var results []string = validate(commands, mins, words)
	_ = results
	var out1 string = "user words:"
	_ = out1
	var k int = 0
	_ = k
	for k < len(words) {
		out1 = (out1 + " ")
		if k < (len(words) - 1) {
			out1 = (out1 + padRight(words[k], len(results[k])))
		} else {
			out1 = (out1 + words[k])
		}
		k = (k + 1)
	}
	fmt.Println(out1)
	fmt.Println(("full words: " + join(results, " ")))
}

func main() {
	mochiMain()
}
