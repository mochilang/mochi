//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var seed int

func rnd() int {
	seed = (((seed * 214013) + 2531011) % 2147483648)
	return (seed / 65536)
}

func deal(game int) []int {
	seed = game
	var deck []int = []int{}
	var i int = 0
	for i < 52 {
		deck = append(deck, (51 - i))
		i = (i + 1)
	}
	i = 0
	for i < 51 {
		var j int = (51 - (rnd() % (52 - i)))
		var tmp int = deck[i]
		deck[i] = deck[j]
		deck[j] = tmp
		i = (i + 1)
	}
	return deck
}

var suits string

var nums string

func show(cards []int) {
	var i int = 0
	for i < len(cards) {
		var c int = cards[i]
		fmt.Print(((" " + _substr(nums, (c/4), ((c/4)+1))) + _substr(suits, (c%4), ((c%4)+1))))
		if (((i + 1) % 8) == 0) || ((i + 1) == len(cards)) {
			fmt.Println("")
		}
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		suits = "CDHS"
		nums = "A23456789TJQK"
		fmt.Println("")
		fmt.Println("Game #1")
		show(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(deal(1)))
		fmt.Println("")
		fmt.Println("Game #617")
		show(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(deal(617)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
