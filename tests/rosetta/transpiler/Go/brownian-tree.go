//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 04:44:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var w int

var h int

var n int

var frost int

var grid [][]int

var y int

func inBounds(x int, y int) bool {
	return ((((x >= 0) && (x < w)) && (y >= 0)) && (y < h))
}

func hasNeighbor(x int, y int) bool {
	var dy int = (0 - 1)
	_ = dy
	for dy <= 1 {
		var dx int = (0 - 1)
		_ = dx
		for dx <= 1 {
			if !((dx == 0) && (dy == 0)) {
				var nx int = (x + dx)
				_ = nx
				var ny int = (y + dy)
				_ = ny
				if inBounds(nx, ny) && (grid[ny][nx] == frost) {
					return true
				}
			}
			dx = (dx + 1)
		}
		dy = (dy + 1)
	}
	return false
}

var a int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		w = 400
		h = 300
		n = 15000
		frost = 255
		grid = [][]int{}
		y = 0
		for y < h {
			var row []int = []int{}
			_ = row
			var x int = 0
			_ = x
			for x < w {
				row = append(row, 0)
				x = (x + 1)
			}
			grid = append(grid, row)
			y = (y + 1)
		}
		grid[(h / 3)][(w / 3)] = frost
		a = 0
		for a < n {
			var px int = (_now() % w)
			_ = px
			var py int = (_now() % h)
			_ = py
			if grid[py][px] == frost {
				var lost bool = false
				_ = lost
				for {
					px = ((px + (_now() % 3)) - 1)
					py = ((py + (_now() % 3)) - 1)
					if !inBounds(px, py) {
						lost = true
						break
					}
					if grid[py][px] != frost {
						break
					}
				}
				if lost {
					continue
				}
			} else {
				var lost bool = false
				_ = lost
				for !hasNeighbor(px, py) {
					px = ((px + (_now() % 3)) - 1)
					py = ((py + (_now() % 3)) - 1)
					if !inBounds(px, py) {
						lost = true
						break
					}
				}
				if lost {
					continue
				}
			}
			grid[py][px] = frost
			a = (a + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
