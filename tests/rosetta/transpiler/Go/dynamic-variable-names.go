//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:06 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func mochiMain() {
	var n int = 0
	_ = n
	for (n < 1) || (n > 5) {
		fmt.Println("How many integer variables do you want to create (max 5) : ")
		var line string = _input()
		_ = line
		if len(line) > 0 {
			n = _parseIntStr(line, 10)
		}
	}
	var vars map[string]int = map[string]int{}
	_ = vars
	fmt.Println("OK, enter the variable names and their values, below\n")
	var i int = 1
	_ = i
	for i <= n {
		fmt.Println((("\n  Variable " + fmt.Sprint(i)) + "\n"))
		fmt.Println("    Name  : ")
		var name string = _input()
		_ = name
		if func() bool { _, ok := vars[name]; return ok }() {
			fmt.Println("  Sorry, you've already created a variable of that name, try again")
			continue
		}
		var value int = 0
		_ = value
		for {
			fmt.Println("    Value : ")
			var valstr string = _input()
			_ = valstr
			if len(valstr) == 0 {
				fmt.Println("  Not a valid integer, try again")
				continue
			}
			var ok bool = true
			_ = ok
			var j int = 0
			_ = j
			var neg bool = false
			_ = neg
			if string([]rune(valstr)[0:1]) == "-" {
				neg = true
				j = 1
			}
			for j < len(valstr) {
				var ch string = string([]rune(valstr)[j:(j + 1)])
				_ = ch
				if (ch < "0") || (ch > "9") {
					ok = false
					break
				}
				j = (j + 1)
			}
			if !ok {
				fmt.Println("  Not a valid integer, try again")
				continue
			}
			value = _parseIntStr(valstr, 10)
			break
		}
		vars[name] = value
		i = (i + 1)
	}
	fmt.Println("\nEnter q to quit")
	for {
		fmt.Println("\nWhich variable do you want to inspect : ")
		var name string = _input()
		_ = name
		if strings.ToLower(name) == "q" {
			return
		}
		if func() bool { _, ok := vars[name]; return ok }() {
			fmt.Println(("It's value is " + fmt.Sprint(vars[name])))
		} else {
			fmt.Println("Sorry there's no variable of that name, try again")
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
