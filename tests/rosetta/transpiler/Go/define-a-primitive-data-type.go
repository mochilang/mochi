//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type TinyInt struct {
	Value int `json:"value"`
}

func (s *TinyInt) Div(t2 TinyInt) TinyInt {
	return NewTinyInt((s.Value / t2.Value))
}

func (s *TinyInt) Rem(t2 TinyInt) TinyInt {
	return NewTinyInt((s.Value % t2.Value))
}

func (s *TinyInt) Inc() TinyInt {
	return Add(NewTinyInt(1))
}

func (s *TinyInt) Dec() TinyInt {
	return Sub(NewTinyInt(1))
}

func (s *TinyInt) Add(t2 TinyInt) TinyInt {
	return NewTinyInt((s.Value + t2.Value))
}

func (s *TinyInt) Sub(t2 TinyInt) TinyInt {
	return NewTinyInt((s.Value - t2.Value))
}

func (s *TinyInt) Mul(t2 TinyInt) TinyInt {
	return NewTinyInt((s.Value * t2.Value))
}

func NewTinyInt(i int) TinyInt {
	if i < 1 {
		i = 1
	} else {
		if i > 10 {
			i = 10
		}
	}
	return TinyInt{
		Value: i,
	}
}

func mochiMain() {
	var t1 TinyInt = NewTinyInt(6)
	var t2 TinyInt = NewTinyInt(3)
	fmt.Println(("t1      = " + fmt.Sprint(t1.Value)))
	fmt.Println(("t2      = " + fmt.Sprint(t2.Value)))
	fmt.Println(("t1 + t2 = " + fmt.Sprint(t1.Add(t2))))
	fmt.Println(("t1 - t2 = " + fmt.Sprint(t1.Sub(t2))))
	fmt.Println(("t1 * t2 = " + fmt.Sprint(t1.Mul(t2))))
	fmt.Println(("t1 / t2 = " + fmt.Sprint(t1.Div(t2))))
	fmt.Println(("t1 % t2 = " + fmt.Sprint(t1.Rem(t2))))
	fmt.Println(("t1 + 1  = " + fmt.Sprint(t1.Inc())))
	fmt.Println(("t1 - 1  = " + fmt.Sprint(t1.Dec())))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
