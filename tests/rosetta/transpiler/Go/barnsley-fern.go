//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:05:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var xMin float64

var xMax float64

var yMin float64

var yMax float64

var width int

var nIter int

var dx float64

var dy float64

var height int

var grid [][]string

var row int

var seed int

func randInt(s int, n int) []int {
	var next int = (((s * 1664525) + 1013904223) % 2147483647)
	_ = next
	return []int{next, (next % n)}
}

var x float64

var y float64

var ix int

var iy int

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		xMin = (0 - 2.182)
		xMax = 2.6558
		yMin = 0.0
		yMax = 9.9983
		width = 60
		nIter = 10000
		dx = (xMax - xMin)
		dy = (yMax - yMin)
		height = int(((float64(width) * dy) / dx))
		grid = [][]string{}
		row = 0
		for row < height {
			var line []string = []string{}
			_ = line
			var col int = 0
			_ = col
			for col < width {
				line = append(line, " ")
				col = (col + 1)
			}
			grid = append(grid, line)
			row = (row + 1)
		}
		seed = 1
		x = 0.0
		y = 0.0
		ix = int(((float64(width) * (x - xMin)) / dx))
		iy = int(((float64(height) * (yMax - y)) / dy))
		if (((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height) {
			grid[iy][ix] = "*"
		}
		i = 0
		for i < nIter {
			var res []int = randInt(seed, 100)
			_ = res
			seed = res[0]
			var r int = res[1]
			_ = r
			if r < 85 {
				var nx float64 = ((0.85 * x) + (0.04 * y))
				_ = nx
				var ny float64 = ((((0 - 0.04) * x) + (0.85 * y)) + 1.6)
				_ = ny
				x = nx
				y = ny
			} else {
				if r < 92 {
					var nx float64 = ((0.2 * x) - (0.26 * y))
					_ = nx
					var ny float64 = (((0.23 * x) + (0.22 * y)) + 1.6)
					_ = ny
					x = nx
					y = ny
				} else {
					if r < 99 {
						var nx float64 = (((0 - 0.15) * x) + (0.28 * y))
						_ = nx
						var ny float64 = (((0.26 * x) + (0.24 * y)) + 0.44)
						_ = ny
						x = nx
						y = ny
					} else {
						x = 0.0
						y = (0.16 * y)
					}
				}
			}
			ix = int(((float64(width) * (x - xMin)) / dx))
			iy = int(((float64(height) * (yMax - y)) / dy))
			if (((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height) {
				grid[iy][ix] = "*"
			}
			i = (i + 1)
		}
		row = 0
		for row < height {
			var line string = ""
			_ = line
			var col int = 0
			_ = col
			for col < width {
				line = (line + grid[row][col])
				col = (col + 1)
			}
			fmt.Println(line)
			row = (row + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
