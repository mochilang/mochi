//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:06 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func parseInt(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func rand10000() int {
	return (_now() % 10000)
}

var value int

var done bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		value = 0
		fmt.Println("Value:", value)
		done = false
		for !done {
			fmt.Println("i=increment, r=random, s num=set, q=quit:")
			var line string = _input()
			_ = line
			if line == "i" {
				value = (value + 1)
				fmt.Println("Value:", value)
			} else {
				if line == "r" {
					fmt.Println("Set random value? (y/n)")
					var ans string = _input()
					_ = ans
					if ans == "y" {
						value = rand10000()
						fmt.Println("Value:", value)
					}
				} else {
					if (len(line) > 2) && (string([]rune(line)[0:2]) == "s ") {
						value = parseInt(string([]rune(line)[2:len(line)]))
						fmt.Println("Value:", value)
					} else {
						if line == "q" {
							done = true
						} else {
							fmt.Println("Unknown command")
						}
					}
				}
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
