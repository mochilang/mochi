//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Screen struct {
	W int `json:"w"`
	H int `json:"h"`
}

type Window struct {
	X         int  `json:"x"`
	Y         int  `json:"y"`
	W         int  `json:"w"`
	H         int  `json:"h"`
	Maximized bool `json:"maximized"`
}

func maximize(s Screen, win Window) Window {
	win.W = s.W
	win.H = s.H
	win.Maximized = true
	return win
}

func mochiMain() {
	var screen Screen = Screen{
		W: 1920,
		H: 1080,
	}
	_ = screen
	fmt.Println(((("Screen size: " + fmt.Sprint(screen.W)) + " x ") + fmt.Sprint(screen.H)))
	var win Window = Window{
		X:         50,
		Y:         50,
		W:         800,
		H:         600,
		Maximized: false,
	}
	_ = win
	win = maximize(screen, win)
	fmt.Println(((("Max usable : " + fmt.Sprint(win.W)) + " x ") + fmt.Sprint(win.H)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
