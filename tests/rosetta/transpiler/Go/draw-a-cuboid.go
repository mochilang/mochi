//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func repeat(ch string, n int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < n {
		s = (s + ch)
		i = (i + 1)
	}
	return s
}

func cubLine(n int, dx int, dy int, cde string) {
	var line string = (_repeat(" ", (n+1)) + string([]rune(cde)[0:1]))
	_ = line
	var d int = ((9 * dx) - 1)
	_ = d
	for d > 0 {
		line = (line + string([]rune(cde)[1:2]))
		d = (d - 1)
	}
	line = (line + string([]rune(cde)[0:1]))
	line = ((line + _repeat(" ", dy)) + string([]rune(cde)[2:]))
	fmt.Println(line)
}

func cuboid(dx int, dy int, dz int) {
	fmt.Println((((((("cuboid " + fmt.Sprint(dx)) + " ") + fmt.Sprint(dy)) + " ") + fmt.Sprint(dz)) + ":"))
	cubLine((dy + 1), dx, 0, "+-")
	var i int = 1
	_ = i
	for i <= dy {
		cubLine(((dy - i) + 1), dx, (i - 1), "/ |")
		i = (i + 1)
	}
	cubLine(0, dx, dy, "+-|")
	var j int = (((4 * dz) - dy) - 2)
	_ = j
	for j > 0 {
		cubLine(0, dx, dy, "| |")
		j = (j - 1)
	}
	cubLine(0, dx, dy, "| +")
	i = 1
	for i <= dy {
		cubLine(0, dx, (dy - i), "| /")
		i = (i + 1)
	}
	cubLine(0, dx, 0, "+-\n")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		cuboid(2, 3, 4)
		fmt.Println("")
		cuboid(1, 1, 1)
		fmt.Println("")
		cuboid(6, 2, 1)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
