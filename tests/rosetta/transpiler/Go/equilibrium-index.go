//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:47:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var seed *big.Int

func randN(n int) int {
	seed = new(big.Int).Mod((new(big.Int).Mul(seed, big.NewInt(int64(1664525))) + 1013904223), big.NewInt(int64(2147483647)))
	return new(big.Int).Mod(seed, big.NewInt(int64(n))).(int)
}

func eqIndices(xs []int) []int {
	var r int = 0
	_ = r
	var i int = 0
	_ = i
	for i < len(xs) {
		r = (r + xs[i])
		i = (i + 1)
	}
	var l int = 0
	_ = l
	var eq []int = []int{}
	_ = eq
	i = 0
	for i < len(xs) {
		r = (r - xs[i])
		if l == r {
			eq = append(eq, i)
		}
		l = (l + xs[i])
		i = (i + 1)
	}
	return eq
}

func mochiMain() {
	fmt.Println(func() string {
		b, _ := json.Marshal(eqIndices(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]int{(0 - 7), 1, 5, 2, (0 - 4), 3, 0})))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
	var verylong []int = []int{}
	_ = verylong
	var i int = 0
	_ = i
	for i < 10000 {
		seed = new(big.Int).Mod((new(big.Int).Mul(seed, big.NewInt(int64(1664525))) + 1013904223), big.NewInt(int64(2147483647)))
		verylong = append(verylong, (new(big.Int).Mod(seed, big.NewInt(int64(1001))) - 500))
		i = (i + 1)
	}
	fmt.Println(func() string {
		b, _ := json.Marshal(eqIndices(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(verylong)))
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = big.NewInt(int64((_now() % 2147483647)))
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
