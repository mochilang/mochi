//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:26:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func det(m [][]float64) float64 {
	var n int = len(m)
	_ = n
	if n == 1 {
		return m[0][0]
	}
	var total float64 = 0.0
	_ = total
	var sign float64 = 1.0
	_ = sign
	var c int = 0
	_ = c
	for c < n {
		var sub [][]float64 = [][]float64{}
		_ = sub
		var r int = 1
		_ = r
		for r < n {
			var row []float64 = []float64{}
			_ = row
			var cc int = 0
			_ = cc
			for cc < n {
				if cc != c {
					row = append(row, m[r][cc])
				}
				cc = (cc + 1)
			}
			sub = append(sub, row)
			r = (r + 1)
		}
		total = (total + ((sign * m[0][c]) * det(sub)))
		sign = (sign * (0 - 1.0))
		c = (c + 1)
	}
	return total
}

func replaceCol(m [][]float64, col int, v []float64) [][]float64 {
	var res [][]float64 = [][]float64{}
	_ = res
	var r int = 0
	_ = r
	for r < len(m) {
		var row []float64 = []float64{}
		_ = row
		var c int = 0
		_ = c
		for c < len(m[r]) {
			if c == col {
				row = append(row, v[r])
			} else {
				row = append(row, m[r][c])
			}
			c = (c + 1)
		}
		res = append(res, row)
		r = (r + 1)
	}
	return res
}

var m [][]float64

var v []float64

var d float64

var x []float64

var i int

var s string

var j int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		m = [][]float64{[]float64{2.0, (0 - 1.0), 5.0, 1.0}, []float64{3.0, 2.0, 2.0, (0 - 6.0)}, []float64{1.0, 3.0, 3.0, (0 - 1.0)}, []float64{5.0, (0 - 2.0), (0 - 3.0), 3.0}}
		v = []float64{(0 - 3.0), (0 - 32.0), (0 - 47.0), 49.0}
		d = det(m)
		x = []float64{}
		i = 0
		for i < len(v) {
			var mc [][]float64 = replaceCol(m, i, v)
			_ = mc
			x = append(x, (det(mc) / d))
			i = (i + 1)
		}
		s = "["
		j = 0
		for j < len(x) {
			s = (s + fmt.Sprint(x[j]))
			if j < (len(x) - 1) {
				s = (s + " ")
			}
			j = (j + 1)
		}
		s = (s + "]")
		fmt.Println(s)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
