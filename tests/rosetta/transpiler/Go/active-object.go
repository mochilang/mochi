//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-23 23:07:01 GMT+7
package main

import (
	"fmt"
)

var PI float64 = 3.141592653589793

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 12 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

var dt float64 = 0.01

var s float64 = 0.0

var t1 float64 = 0.0

var k1 float64 = sinApprox(0.0)

var i int = 1

var i2 int = 1

func main() {
	for i <= 200 {
		var t2 float64 = (float64(i) * dt)
		_ = t2
		var k2 float64 = sinApprox((t2 * PI))
		_ = k2
		s = (s + (((k1 + k2) * 0.5) * (t2 - t1)))
		t1 = t2
		k1 = k2
		i = (i + 1)
	}
	for i2 <= 50 {
		var t2 float64 = (2.0 + (float64(i2) * dt))
		_ = t2
		var k2 float64 = 0.0
		_ = k2
		s = (s + (((k1 + k2) * 0.5) * (t2 - t1)))
		t1 = t2
		k1 = k2
		i2 = (i2 + 1)
	}
	fmt.Println(func() string {
		f := float64(s)
		if f == float64(int(f)) {
			return fmt.Sprintf("%.1f", f)
		}
		return fmt.Sprint(f)
	}())
}
