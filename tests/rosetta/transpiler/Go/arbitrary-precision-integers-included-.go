//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:42:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func pow_int(base int, exp int) int {
	var result int = 1
	_ = result
	var b int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if (e % 2) == 1 {
			result = (result * b)
		}
		b = (b * b)
		e = int((e / 2))
	}
	return result
}

func pow_big(base *big.Int, exp int) *big.Int {
	var result *big.Int = big.NewInt(int64(1))
	_ = result
	var b *big.Int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if (e % 2) == 1 {
			result = new(big.Int).Mul(result, b)
		}
		b = new(big.Int).Mul(b, b)
		e = int((e / 2))
	}
	return result
}

var e1 int

var e2 int

var base *big.Int

var x *big.Int

var s string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		e1 = pow_int(3, 2)
		e2 = pow_int(4, e1)
		base = big.NewInt(int64(5))
		x = pow_big(base, e2)
		s = fmt.Sprint(x)
		fmt.Println("5^(4^(3^2)) has", len(s), "digits:", _substr(s, 0, 20), "...", _substr(s, (len(s)-20), len(s)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
