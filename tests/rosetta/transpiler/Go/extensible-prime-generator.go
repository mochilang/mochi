//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:47 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func nextPrime(primes []int, start int) int {
	var n int = start
	_ = n
	for {
		var isP bool = true
		_ = isP
		var i int = 0
		_ = i
		for i < len(primes) {
			var p int = primes[i]
			_ = p
			if (p * p) > n {
				break
			}
			if (n % p) == 0 {
				isP = false
				break
			}
			i = (i + 1)
		}
		if isP {
			return n
		}
		n = (n + 2)
	}
}

func mochiMain() {
	var primes []int = []int{2}
	_ = primes
	var cand int = 3
	_ = cand
	for len(primes) < 10000 {
		cand = nextPrime(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(primes), cand)
		primes = append(primes, cand)
		cand = (cand + 2)
	}
	var line string = "First twenty:"
	_ = line
	var i int = 0
	_ = i
	for i < 20 {
		line = ((line + " ") + fmt.Sprint(primes[i]))
		i = (i + 1)
	}
	fmt.Println(line)
	var idx int = 0
	_ = idx
	for primes[idx] <= 100 {
		idx = (idx + 1)
	}
	line = ("Between 100 and 150: " + fmt.Sprint(primes[idx]))
	idx = (idx + 1)
	for primes[idx] < 150 {
		line = ((line + " ") + fmt.Sprint(primes[idx]))
		idx = (idx + 1)
	}
	fmt.Println(line)
	for primes[idx] <= 7700 {
		idx = (idx + 1)
	}
	var count int = 0
	_ = count
	for primes[idx] < 8000 {
		count = (count + 1)
		idx = (idx + 1)
	}
	fmt.Println(("Number beween 7,700 and 8,000: " + fmt.Sprint(count)))
	fmt.Println(("10,000th prime: " + fmt.Sprint(primes[9999])))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
