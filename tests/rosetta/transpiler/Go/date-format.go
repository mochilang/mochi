//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:26:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pad2(n int) string {
	if n < 10 {
		return ("0" + fmt.Sprint(n))
	}
	return fmt.Sprint(n)
}

func weekdayName(z int) string {
	var names []string = []string{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	return names[((z + 4) % 7)]
}

func mochiMain() {
	var ts int = int((_now() / 1000000000))
	var days int = int((ts / 86400))
	var z int = (days + 719468)
	var era int = int((z / 146097))
	var doe int = (z - (era * 146097))
	var yoe int = ((((doe - (doe / 1460)) + (doe / 36524)) - (doe / 146096)) / int(365))
	var y int = (yoe + (era * 400))
	var doy int = (doe - (((365 * yoe) + (yoe / 4)) - (yoe / 100)))
	var mp int = (((5 * doy) + 2) / int(153))
	var d int = int(((doy - (((153 * mp) + 2) / int(5))) + 1))
	var m int = int((mp + 3))
	if m > 12 {
		y = (y + 1)
		m = (m - 12)
	}
	var iso string = ((((fmt.Sprint(y) + "-") + pad2(m)) + "-") + pad2(d))
	fmt.Println(iso)
	var months []string = []string{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
	var line string = ((((((weekdayName(days) + ", ") + months[(m-1)]) + " ") + fmt.Sprint(d)) + ", ") + fmt.Sprint(y))
	fmt.Println(line)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
