//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:17:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func ln(x float64) float64 {
	var k float64 = 0.0
	_ = k
	var v float64 = x
	_ = v
	for v >= 2.0 {
		v = (v / 2.0)
		k = (k + 1.0)
	}
	for v < 1.0 {
		v = (v * 2.0)
		k = (k - 1.0)
	}
	var z float64 = ((v - 1.0) / (v + 1.0))
	_ = z
	var zpow float64 = z
	_ = zpow
	var sum float64 = z
	_ = sum
	var i int = 3
	_ = i
	for i <= 9 {
		zpow = ((zpow * z) * z)
		sum = (sum + (zpow / float64(i)))
		i = (i + 2)
	}
	var ln2 float64 = 0.6931471805599453
	_ = ln2
	_ = ln2
	return ((k * ln2) + (2.0 * sum))
}

func expf(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var i int = 1
	_ = i
	for i < 20 {
		term = float64(((term * x) / _toFloat(float64(i))))
		sum = (sum + term)
		i = (i + 1)
	}
	return sum
}

func powf(base float64, exp float64) float64 {
	return expf((exp * ln(base)))
}

func lanczos7(z float64) float64 {
	var t float64 = (z + 6.5)
	_ = t
	_ = t
	var x float64 = ((((((((0.9999999999998099 + (676.5203681218851 / z)) - (1259.1392167224028 / (z + 1.0))) + (771.3234287776531 / (z + 2.0))) - (176.6150291621406 / (z + 3.0))) + (12.507343278686905 / (z + 4.0))) - (0.13857109526572012 / (z + 5.0))) + (9.984369578019572e-06 / (z + 6.0))) + (1.5056327351493116e-07 / (z + 7.0)))
	_ = x
	_ = x
	return (((2.5066282746310002 * powf(t, (z-0.5))) * powf(2.718281828459045, (0-t))) * x)
}

var xs []float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		xs = []float64{(0 - 0.5), 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0}
		for _, x := range xs {
			fmt.Println(((fmt.Sprint(x) + " ") + fmt.Sprint(lanczos7(x))))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
