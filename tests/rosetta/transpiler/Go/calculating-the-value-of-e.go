//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 05:01:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var epsilon float64

func absf(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func pow10(n int) float64 {
	var r float64 = 1.0
	_ = r
	var i int = 0
	_ = i
	for i < n {
		r = (r * 10.0)
		i = (i + 1)
	}
	return r
}

func formatFloat(f float64, prec int) string {
	var scale float64 = pow10(prec)
	_ = scale
	var scaled float64 = ((f * scale) + 0.5)
	_ = scaled
	var n int = int(scaled)
	_ = n
	var digits string = fmt.Sprint(n)
	_ = digits
	for len(digits) <= prec {
		digits = ("0" + digits)
	}
	var intPart string = _substr(digits, 0, (len(digits) - prec))
	_ = intPart
	var fracPart string = _substr(digits, (len(digits) - prec), len(digits))
	_ = fracPart
	return ((intPart + ".") + fracPart)
}

var factval int

var e float64

var n int

var term float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := time.Now().UnixNano()
		epsilon = 1e-15
		factval = 1
		e = 2.0
		n = 2
		term = 1.0
		for {
			factval = (factval * n)
			n = (n + 1)
			term = (1.0 / float64(factval))
			e = (e + term)
			if absf(term) < epsilon {
				break
			}
		}
		fmt.Println(("e = " + formatFloat(e, 15)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
