//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:14:11 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _toFloat(v any) float64 {
	switch t := v.(type) {
	case int:
		return float64(t)
	case int64:
		return float64(t)
	case float64:
		return t
	default:
		return 0
	}
}

func randDigit() int {
	return ((_now() % 9) + 1)
}

func mochiMain() {
	var digits []any = []any{}
	_ = digits
	for i := 0; i < 4; i++ {
		digits = append(digits, randDigit())
	}
	var numstr string = ""
	_ = numstr
	for i := 0; i < 4; i++ {
		numstr = (numstr + fmt.Sprint(digits[i]))
	}
	fmt.Println((("Your numbers: " + numstr) + "\n"))
	fmt.Println("Enter RPN: ")
	var expr string = _input()
	_ = expr
	if len(expr) != 7 {
		fmt.Println("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
		return
	}
	var stack []any = []any{}
	_ = stack
	var i int = 0
	_ = i
	var valid bool = true
	_ = valid
	for i < len(expr) {
		var ch string = _substr(expr, i, (i + 1))
		_ = ch
		if (ch >= "0") && (ch <= "9") {
			if len(digits) == 0 {
				fmt.Println("too many numbers.")
				return
			}
			var j int = 0
			_ = j
			for digits[j] != (func() int { n, _ := strconv.Atoi(ch); return n }() - func() int { n, _ := strconv.Atoi("0"); return n }()) {
				j = (j + 1)
				if j == len(digits) {
					fmt.Println("wrong numbers.")
					return
				}
			}
			digits = func() []any {
				res := make([]any, len(digits[:j]))
				copy(res, digits[:j])
				res = append(res, digits[(j+1):]...)
				return res
			}()
			stack = append(stack, float64((func() int { n, _ := strconv.Atoi(ch); return n }() - func() int { n, _ := strconv.Atoi("0"); return n }())))
		} else {
			if len(stack) < 2 {
				fmt.Println("invalid expression syntax.")
				valid = false
				break
			}
			b := stack[(len(stack) - 1)]
			_ = b
			a := stack[(len(stack) - 2)]
			_ = a
			if ch == "+" {
				stack[(len(stack) - 2)] = (_toFloat(a) + _toFloat(b))
			} else {
				if ch == "-" {
					stack[(len(stack) - 2)] = (_toFloat(a) - _toFloat(b))
				} else {
					if ch == "*" {
						stack[(len(stack) - 2)] = (_toFloat(a) * _toFloat(b))
					} else {
						if ch == "/" {
							stack[(len(stack) - 2)] = (_toFloat(a) / _toFloat(b))
						} else {
							fmt.Println((ch + " invalid."))
							valid = false
							break
						}
					}
				}
			}
			stack = stack[:(len(stack) - 1)]
		}
		i = (i + 1)
	}
	if valid {
		if _toFloat(math.Abs((_toFloat(stack[0]) - 24.0))) > 1e-06 {
			fmt.Println((("incorrect. " + fmt.Sprint(stack[0])) + " != 24"))
		} else {
			fmt.Println("correct.")
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
