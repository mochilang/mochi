//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:12:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var msg string

var shift int

var inc int

var clicks int

var frames int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		msg = "Hello World! "
		shift = 0
		inc = 1
		clicks = 0
		frames = 0
		for clicks < 5 {
			var line string = ""
			_ = line
			var i int = 0
			_ = i
			for i < len(msg) {
				var idx int = ((shift + i) % len(msg))
				_ = idx
				line = (line + string([]rune(msg)[idx:(idx+1)]))
				i = (i + 1)
			}
			fmt.Println(line)
			shift = ((shift + inc) % len(msg))
			frames = (frames + 1)
			if (frames % len(msg)) == 0 {
				inc = (len(msg) - inc)
				clicks = (clicks + 1)
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
