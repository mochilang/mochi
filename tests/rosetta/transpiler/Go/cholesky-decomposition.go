//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 19:18:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 20 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

func cholesky(a [][]float64) [][]float64 {
	var n int = len(a)
	_ = n
	var l [][]float64 = [][]float64{}
	_ = l
	var i int = 0
	_ = i
	for i < n {
		var row []float64 = []float64{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			row = append(row, 0.0)
			j = (j + 1)
		}
		l = append(l, row)
		i = (i + 1)
	}
	i = 0
	for i < n {
		var j int = 0
		_ = j
		for j <= i {
			var sum float64 = a[i][j]
			_ = sum
			var k int = 0
			_ = k
			for k < j {
				sum = (sum - (l[i][k] * l[j][k]))
				k = (k + 1)
			}
			if i == j {
				l[i][j] = sqrtApprox(sum)
			} else {
				l[i][j] = (sum / l[j][j])
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return l
}

func printMat(m [][]float64) {
	var i int = 0
	_ = i
	for i < len(m) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(m[i]) {
			line = (line + fmt.Sprint(m[i][j]))
			if j < (len(m[i]) - 1) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

func demo(a [][]float64) {
	fmt.Println("A:")
	printMat(a)
	var l [][]float64 = cholesky(a)
	_ = l
	fmt.Println("L:")
	printMat(l)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		demo([][]float64{[]float64{25.0, 15.0, (0 - 5.0)}, []float64{15.0, 18.0, 0.0}, []float64{(0 - 5.0), 0.0, 11.0}})
		demo([][]float64{[]float64{18.0, 22.0, 54.0, 42.0}, []float64{22.0, 70.0, 86.0, 62.0}, []float64{54.0, 86.0, 174.0, 134.0}, []float64{42.0, 62.0, 134.0, 106.0}})
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
