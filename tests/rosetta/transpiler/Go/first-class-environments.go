//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:02:22 GMT+7
package main

import (
	"fmt"
)

var jobs int

func pad(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < 4 {
		s = (" " + s)
	}
	return s
}

type HailResult struct {
	Seq int    `json:"seq"`
	Cnt int    `json:"cnt"`
	Out string `json:"out"`
}

func hail(seq int, cnt int) HailResult {
	var out string = pad(seq)
	_ = out
	_ = out
	if seq != 1 {
		cnt = (cnt + 1)
		if (seq % 2) != 0 {
			seq = ((3 * seq) + 1)
		} else {
			seq = (seq / 2)
		}
	}
	return HailResult{
		Seq: seq,
		Cnt: cnt,
		Out: out,
	}
}

func mochiMain() {
	var seqs []int = []int{}
	_ = seqs
	var cnts []int = []int{}
	_ = cnts
	for i := 0; i < jobs; i++ {
		seqs = append(seqs, (i + 1))
		cnts = append(cnts, 0)
	}
	for {
		var line string = ""
		_ = line
		var i int = 0
		_ = i
		for i < jobs {
			var res HailResult = hail(seqs[i], cnts[i])
			_ = res
			seqs[i] = res.Seq
			cnts[i] = res.Cnt
			line = (line + res.Out)
			i = (i + 1)
		}
		fmt.Println(line)
		var done bool = true
		_ = done
		var j int = 0
		_ = j
		for j < jobs {
			if seqs[j] != 1 {
				done = false
			}
			j = (j + 1)
		}
		if done {
			break
		}
	}
	fmt.Println("")
	fmt.Println("COUNTS:")
	var counts string = ""
	_ = counts
	var k int = 0
	_ = k
	for k < jobs {
		counts = (counts + pad(cnts[k]))
		k = (k + 1)
	}
	fmt.Println(counts)
	fmt.Println("")
}

func main() {
	jobs = 12
	mochiMain()
}
