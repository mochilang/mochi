//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 15:49:44 GMT+7
package main

import (
	"fmt"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func floorf(x float64) float64 {
	var y int = int(x)
	_ = y
	return float64(y)
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func fmtF3(x float64) string {
	var y float64 = (floorf(((x * 1000.0) + 0.5)) / 1000.0)
	_ = y
	var s string = fmt.Sprint(y)
	_ = s
	var dot int = indexOf(s, ".")
	_ = dot
	if dot == (0 - 1) {
		s = (s + ".000")
	} else {
		var decs int = ((len(s) - dot) - 1)
		_ = decs
		if decs > 3 {
			s = _substr(s, 0, (dot + 4))
		} else {
			for decs < 3 {
				s = (s + "0")
				decs = (decs + 1)
			}
		}
	}
	return s
}

func padFloat3(x float64, width int) string {
	var s string = fmtF3(x)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func fib1000() []float64 {
	var a float64 = 0.0
	_ = a
	var b float64 = 1.0
	_ = b
	var res []float64 = []float64{}
	_ = res
	var i int = 0
	_ = i
	for i < 1000 {
		res = append(res, b)
		var t float64 = b
		_ = t
		b = (b + a)
		a = t
		i = (i + 1)
	}
	return res
}

func leadingDigit(x float64) int {
	if x < 0.0 {
		x = (0 - x)
	}
	for x >= 10.0 {
		x = (x / 10.0)
	}
	for (x > 0.0) && (x < 1.0) {
		x = (x * 10.0)
	}
	return int(x)
}

func show(nums []float64, title string) {
	var counts []int = []int{0, 0, 0, 0, 0, 0, 0, 0, 0}
	_ = counts
	for _, n := range nums {
		var d int = leadingDigit(n)
		_ = d
		if (d >= 1) && (d <= 9) {
			counts[(d - 1)] = (counts[(d-1)] + 1)
		}
	}
	var preds []float64 = []float64{0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046}
	_ = preds
	var total int = len(nums)
	_ = total
	fmt.Println(title)
	fmt.Println("Digit  Observed  Predicted")
	var i int = 0
	_ = i
	for i < 9 {
		var obs float64 = (float64(counts[i]) / float64(total))
		_ = obs
		var line string = ((((("  " + fmt.Sprint((i + 1))) + "  ") + padFloat3(obs, 9)) + "  ") + padFloat3(preds[i], 8))
		_ = line
		fmt.Println(line)
		i = (i + 1)
	}
}

func mochiMain() {
	show(fib1000(), "First 1000 Fibonacci numbers")
}

func main() {
	mochiMain()
}
