//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:26:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func entropy(s string) float64 {
	var counts map[string]int = map[string]int{}
	_ = counts
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if func() bool { _, ok := counts[ch]; return ok }() {
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
		}
		i = (i + 1)
	}
	var hm float64 = 0.0
	_ = hm
	for _, k := range func() []string {
		keys := make([]string, 0, len(counts))
		for kx := range counts {
			keys = append(keys, kx)
		}
		sort.Strings(keys)
		return keys
	}() {
		var c float64 = float64(counts[k])
		_ = c
		hm = (hm + (c * (math.Log(c) / math.Log(2.0))))
	}
	var l float64 = float64(len(s))
	_ = l
	_ = l
	return ((math.Log(l) / math.Log(2.0)) - (hm / l))
}

func fibonacciWord(n int) string {
	var a string = "1"
	_ = a
	var b string = "0"
	_ = b
	var i int = 1
	_ = i
	for i < n {
		var tmp string = b
		_ = tmp
		b = (b + a)
		a = tmp
		i = (i + 1)
	}
	return a
}

func mochiMain() {
	fmt.Println(((pad("N", 3) + pad("Length", 9)) + "  Entropy      Word"))
	var n int = 1
	_ = n
	for n < 10 {
		var s string = fibonacciWord(n)
		_ = s
		fmt.Println((((((pad(fmt.Sprint(n), 3) + pad(fmt.Sprint(len(s)), 9)) + "  ") + fmt_(entropy(s))) + "  ") + s))
		n = (n + 1)
	}
	for n <= 37 {
		var s string = fibonacciWord(n)
		_ = s
		fmt.Println((((pad(fmt.Sprint(n), 3) + pad(fmt.Sprint(len(s)), 9)) + "  ") + fmt_(entropy(s))))
		n = (n + 1)
	}
}

func pad(s string, w int) string {
	var t string = s
	_ = t
	for len(t) < w {
		t = (" " + t)
	}
	return t
}

func fmt_(x float64) string {
	var y float64 = (floorf(((x * 100000000.0) + 0.5)) / 100000000.0)
	_ = y
	var s string = fmt.Sprint(y)
	_ = s
	var dot int = strings.Index(s, ".")
	_ = dot
	if dot == (0 - 1) {
		s = (s + ".00000000")
	} else {
		var d int = ((len(s) - dot) - 1)
		_ = d
		for d < 8 {
			s = (s + "0")
			d = (d + 1)
		}
	}
	return s
}

func floorf(x float64) float64 {
	var y int = int(x)
	_ = y
	_ = y
	return float64(y)
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
