//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-30 21:41:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func powf(base float64, exp int) float64 {
	var result float64 = 1.0
	_ = result
	var i int = 0
	_ = i
	for i < exp {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

func nthRoot(x float64, n int) float64 {
	var low float64 = 0.0
	_ = low
	var high float64 = x
	_ = high
	var i int = 0
	_ = i
	for i < 60 {
		var mid float64 = ((low + high) / 2.0)
		_ = mid
		if powf(mid, n) > x {
			high = mid
		} else {
			low = mid
		}
		i = (i + 1)
	}
	return low
}

func mochiMain() {
	var sum float64 = 0.0
	_ = sum
	var sumRecip float64 = 0.0
	_ = sumRecip
	var prod float64 = 1.0
	_ = prod
	var n int = 1
	_ = n
	for n <= 10 {
		var f float64 = float64(n)
		_ = f
		sum = (sum + f)
		sumRecip = (sumRecip + (1.0 / f))
		prod = (prod * f)
		n = (n + 1)
	}
	var count float64 = 10.0
	_ = count
	var a float64 = (sum / count)
	_ = a
	var g float64 = nthRoot(prod, 10)
	_ = g
	var h float64 = (count / sumRecip)
	_ = h
	fmt.Println(((((("A: " + fmt.Sprint(a)) + " G: ") + fmt.Sprint(g)) + " H: ") + fmt.Sprint(h)))
	fmt.Println(("A >= G >= H: " + fmt.Sprint(((a >= g) && (g >= h)))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
