//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 10:44:52 GMT+7
package main

import (
	"fmt"
	"os"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func shuffle(xs []int) []int {
	var arr []int = xs
	_ = arr
	var i int = 99
	_ = i
	for i > 0 {
		var j int = (_now() % (i + 1))
		_ = j
		var tmp int = arr[i]
		_ = tmp
		arr[i] = arr[j]
		arr[j] = tmp
		i = (i - 1)
	}
	return arr
}

func doTrials(trials int, np int, strategy string) {
	var pardoned int = 0
	_ = pardoned
	var t int = 0
	_ = t
	for t < trials {
		var drawers []int = []int{}
		_ = drawers
		var i int = 0
		_ = i
		for i < 100 {
			drawers = append(drawers, i)
			i = (i + 1)
		}
		drawers = shuffle(drawers)
		var p int = 0
		_ = p
		var success bool = true
		_ = success
		for p < np {
			var found bool = false
			_ = found
			if strategy == "optimal" {
				var prev int = p
				_ = prev
				var d int = 0
				_ = d
				for d < 50 {
					var this int = drawers[prev]
					_ = this
					if this == p {
						found = true
						break
					}
					prev = this
					d = (d + 1)
				}
			} else {
				var opened []bool = []bool{}
				_ = opened
				var k int = 0
				_ = k
				for k < 100 {
					opened = append(opened, false)
					k = (k + 1)
				}
				var d int = 0
				_ = d
				for d < 50 {
					var n int = (_now() % 100)
					_ = n
					for opened[n] {
						n = (_now() % 100)
					}
					opened[n] = true
					if drawers[n] == p {
						found = true
						break
					}
					d = (d + 1)
				}
			}
			if !found {
				success = false
				break
			}
			p = (p + 1)
		}
		if success {
			pardoned = (pardoned + 1)
		}
		t = (t + 1)
	}
	var rf float64 = ((float64(pardoned) / float64(trials)) * 100.0)
	_ = rf
	fmt.Println((((((("  strategy = " + strategy) + "  pardoned = ") + fmt.Sprint(pardoned)) + " relative frequency = ") + fmt.Sprint(rf)) + "%"))
}

func mochiMain() {
	var trials int = 1000
	_ = trials
	for _, np := range []int{10, 100} {
		fmt.Println((((("Results from " + fmt.Sprint(trials)) + " trials with ") + fmt.Sprint(np)) + " prisoners:\n"))
		for _, _ch := range []string{"random", "optimal"} {
			strat := string(_ch)
			doTrials(trials, np, strat)
		}
	}
}

func main() {
	mochiMain()
}
