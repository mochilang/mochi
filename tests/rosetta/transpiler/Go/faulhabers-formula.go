//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:25:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _bigrat(v any) *big.Rat {
	switch t := v.(type) {
	case *big.Rat:
		return new(big.Rat).Set(t)
	case *big.Int:
		return new(big.Rat).SetInt(t)
	case int:
		return big.NewRat(int64(t), 1)
	case int64:
		return big.NewRat(t, 1)
	case float64:
		r := new(big.Rat)
		r.SetFloat64(t)
		return r
	default:
		return big.NewRat(0, 1)
	}
}

func _num(r *big.Rat) *big.Int { return new(big.Int).Set(r.Num()) }

func _denom(r *big.Rat) *big.Int { return new(big.Int).Set(r.Denom()) }

func bernoulli(n int) *big.Rat {
	var a []*big.Rat = []*big.Rat{}
	_ = a
	var m int = 0
	_ = m
	for m <= n {
		a = append(a, new(big.Rat).Quo(_bigrat(1), _bigrat((m+1))))
		var j int = m
		_ = j
		for j >= 1 {
			a[(j - 1)] = new(big.Rat).Mul(_bigrat(j), _bigrat(new(big.Rat).Sub(a[(j-1)], a[j])))
			j = (j - 1)
		}
		m = (m + 1)
	}
	return a[0]
}

func binom(n int, k int) *big.Int {
	if (k < 0) || (k > n) {
		return big.NewInt(int64(0))
	}
	var kk int = k
	_ = kk
	if kk > (n - kk) {
		kk = (n - kk)
	}
	var res *big.Int = big.NewInt(int64(1))
	_ = res
	var i int = 0
	_ = i
	for i < kk {
		res = new(big.Int).Mul(res, big.NewInt(int64((n - i))))
		i = (i + 1)
		res = new(big.Int).Div(res, big.NewInt(int64(i)))
	}
	return res
}

func coeff(p int, j int) *big.Rat {
	var base *big.Rat = new(big.Rat).Quo(_bigrat(1), _bigrat((p + 1)))
	_ = base
	var c *big.Rat = base
	_ = c
	if (j % 2) == 1 {
		c = new(big.Rat).Sub(_bigrat(0), c)
	}
	c = new(big.Rat).Mul(c, _bigrat(binom((p+1), j)))
	c = new(big.Rat).Mul(c, bernoulli(j))
	return c
}

func mochiMain() {
	var p int = 0
	_ = p
	for p < 10 {
		var line string = (fmt.Sprint(p) + " :")
		_ = line
		var j int = 0
		_ = j
		for j <= p {
			var c *big.Rat = coeff(p, j)
			_ = c
			if fmt.Sprint(c) != "0/1" {
				line = (((line + " ") + fmt.Sprint(c)) + "Ã—n")
				var exp int = ((p + 1) - j)
				_ = exp
				if exp > 1 {
					line = ((line + "^") + fmt.Sprint(exp))
				}
			}
			j = (j + 1)
		}
		fmt.Println(line)
		p = (p + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
