//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 20:12:22 GMT+7
package main

import (
	"os"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Pixel struct {
	R int `json:"R"`
	G int `json:"G"`
	B int `json:"B"`
}

func pixelFromRgb(c int) Pixel {
	var r int = (int((c / 65536)) % 256)
	_ = r
	var g int = (int((c / 256)) % 256)
	_ = g
	var b int = (c % 256)
	_ = b
	return Pixel{
		R: r,
		G: g,
		B: b,
	}
}

func rgbFromPixel(p Pixel) int {
	return (((p.R * 65536) + (p.G * 256)) + p.B)
}

type Bitmap struct {
	Cols int       `json:"cols"`
	Rows int       `json:"rows"`
	Px   [][]Pixel `json:"px"`
}

func NewBitmap(x int, y int) Bitmap {
	var data [][]Pixel = [][]Pixel{}
	_ = data
	var row int = 0
	_ = row
	for row < y {
		var r []Pixel = []Pixel{}
		_ = r
		var col int = 0
		_ = col
		for col < x {
			r = append(r, Pixel{
				R: 0,
				G: 0,
				B: 0,
			})
			col = (col + 1)
		}
		data = append(data, r)
		row = (row + 1)
	}
	return Bitmap{
		Cols: x,
		Rows: y,
		Px:   data,
	}
}

func FillRgb(b Bitmap, c int) {
	var y int = 0
	_ = y
	var p Pixel = pixelFromRgb(c)
	_ = p
	for y < b.Rows {
		var x int = 0
		_ = x
		for x < b.Cols {
			var px [][]Pixel = b.Px
			_ = px
			var row []Pixel = px[y]
			_ = row
			row[x] = p
			px[y] = row
			b.Px = px
			x = (x + 1)
		}
		y = (y + 1)
	}
}

func SetPxRgb(b Bitmap, x int, y int, c int) bool {
	if (((x < 0) || (x >= b.Cols)) || (y < 0)) || (y >= b.Rows) {
		return false
	}
	var px [][]Pixel = b.Px
	_ = px
	var row []Pixel = px[y]
	_ = row
	row[x] = pixelFromRgb(c)
	px[y] = row
	b.Px = px
	return true
}

func nextRand(seed int) int {
	return (((seed * 1664525) + 1013904223) % 2147483648)
}

func mochiMain() {
	var bm Bitmap = NewBitmap(400, 300)
	_ = bm
	FillRgb(bm, 12615744)
	var seed int = _now()
	_ = seed
	var i int = 0
	_ = i
	for i < 2000 {
		seed = nextRand(seed)
		var x int = (seed % 400)
		_ = x
		seed = nextRand(seed)
		var y int = (seed % 300)
		_ = y
		SetPxRgb(bm, x, y, 8405024)
		i = (i + 1)
	}
	var x int = 0
	_ = x
	for x < 400 {
		var y int = 240
		_ = y
		for y < 245 {
			SetPxRgb(bm, x, y, 8405024)
			y = (y + 1)
		}
		y = 260
		for y < 265 {
			SetPxRgb(bm, x, y, 8405024)
			y = (y + 1)
		}
		x = (x + 1)
	}
	var y int = 0
	_ = y
	for y < 300 {
		var x int = 80
		_ = x
		for x < 85 {
			SetPxRgb(bm, x, y, 8405024)
			x = (x + 1)
		}
		x = 95
		for x < 100 {
			SetPxRgb(bm, x, y, 8405024)
			x = (x + 1)
		}
		y = (y + 1)
	}
}

func main() {
	mochiMain()
}
