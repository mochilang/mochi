//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:01:30 GMT+7
package main

import (
	"fmt"
)

type Window struct {
	X         int  `json:"x"`
	Y         int  `json:"y"`
	W         int  `json:"w"`
	H         int  `json:"h"`
	Maximized bool `json:"maximized"`
	Iconified bool `json:"iconified"`
	Visible   bool `json:"visible"`
	Shifted   bool `json:"shifted"`
}

func showState(w Window, label string) {
	fmt.Println(((((((((((((((label + ": pos=(") + fmt.Sprint(w.X)) + ",") + fmt.Sprint(w.Y)) + ") size=(") + fmt.Sprint(w.W)) + "x") + fmt.Sprint(w.H)) + ") max=") + fmt.Sprint(w.Maximized)) + " icon=") + fmt.Sprint(w.Iconified)) + " visible=") + fmt.Sprint(w.Visible)))
}

func maximize(w Window) Window {
	w.Maximized = true
	w.W = 800
	w.H = 600
	return w
}

func unmaximize(w Window) Window {
	w.Maximized = false
	w.W = 640
	w.H = 480
	return w
}

func iconify(w Window) Window {
	w.Iconified = true
	w.Visible = false
	return w
}

func deiconify(w Window) Window {
	w.Iconified = false
	w.Visible = true
	return w
}

func hide(w Window) Window {
	w.Visible = false
	return w
}

func showWindow(w Window) Window {
	w.Visible = true
	return w
}

func move(w Window) Window {
	if w.Shifted {
		w.X = (w.X - 10)
		w.Y = (w.Y - 10)
	} else {
		w.X = (w.X + 10)
		w.Y = (w.Y + 10)
	}
	w.Shifted = !w.Shifted
	return w
}

func mochiMain() {
	var win Window = Window{
		X:         100,
		Y:         100,
		W:         640,
		H:         480,
		Maximized: false,
		Iconified: false,
		Visible:   true,
		Shifted:   false,
	}
	_ = win
	showState(win, "Start")
	win = maximize(win)
	showState(win, "Maximize")
	win = unmaximize(win)
	showState(win, "Unmaximize")
	win = iconify(win)
	showState(win, "Iconify")
	win = deiconify(win)
	showState(win, "Deiconify")
	win = hide(win)
	showState(win, "Hide")
	win = showWindow(win)
	showState(win, "Show")
	win = move(win)
	showState(win, "Move")
}

func main() {
	mochiMain()
}
