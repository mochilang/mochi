//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 04:44:35 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func fields(s string) []string {
	var words []string = []string{}
	_ = words
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if ((ch == " ") || (ch == "\t")) || (ch == "\n") {
			if len(cur) > 0 {
				words = append(words, cur)
				cur = ""
			}
		} else {
			cur = (cur + ch)
		}
		i = (i + 1)
	}
	if len(cur) > 0 {
		words = append(words, cur)
	}
	return words
}

func makePatterns() []string {
	var digits []string = []string{"1", "2", "3", "4", "5", "6", "7", "8", "9"}
	_ = digits
	var pats []string = []string{}
	_ = pats
	var i int = 0
	_ = i
	for i < len(digits) {
		var j int = 0
		_ = j
		for j < len(digits) {
			if j != i {
				var k int = 0
				_ = k
				for k < len(digits) {
					if (k != i) && (k != j) {
						var l int = 0
						_ = l
						for l < len(digits) {
							if ((l != i) && (l != j)) && (l != k) {
								pats = append(pats, (((digits[i] + digits[j]) + digits[k]) + digits[l]))
							}
							l = (l + 1)
						}
					}
					k = (k + 1)
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return pats
}

func mochiMain() {
	fmt.Println(((((("Cows and bulls/player\n" + "You think of four digit number of unique digits in the range 1 to 9.\n") + "I guess.  You score my guess:\n") + "    A correct digit but not in the correct place is a cow.\n") + "    A correct digit in the correct place is a bull.\n") + "You give my score as two numbers separated with a space."))
	var patterns []string = makePatterns()
	_ = patterns
	for {
		if len(patterns) == 0 {
			fmt.Println("Oops, check scoring.")
			return
		}
		var guess string = patterns[0]
		_ = guess
		patterns = patterns[1:]
		var cows int = 0
		_ = cows
		var bulls int = 0
		_ = bulls
		for {
			fmt.Println((("My guess: " + guess) + ".  Score? (c b) "))
			var line string = _input()
			_ = line
			var toks []string = fields(line)
			_ = toks
			if len(toks) == 2 {
				var c int = func() int { n, _ := strconv.Atoi(toks[0]); return n }()
				_ = c
				var b int = func() int { n, _ := strconv.Atoi(toks[1]); return n }()
				_ = b
				if ((((c >= 0) && (c <= 4)) && (b >= 0)) && (b <= 4)) && ((c + b) <= 4) {
					cows = c
					bulls = b
					break
				}
			}
			fmt.Println("Score guess as two numbers: cows bulls")
		}
		if bulls == 4 {
			fmt.Println("I did it. :)")
			return
		}
		var next []string = []string{}
		_ = next
		var idx int = 0
		_ = idx
		for idx < len(patterns) {
			var pat string = patterns[idx]
			_ = pat
			var c int = 0
			_ = c
			var b int = 0
			_ = b
			var i int = 0
			_ = i
			for i < 4 {
				var cg string = _substr(guess, i, (i + 1))
				_ = cg
				var cp string = _substr(pat, i, (i + 1))
				_ = cp
				if cg == cp {
					b = (b + 1)
				} else {
					if strings.Index(pat, cg) >= 0 {
						c = (c + 1)
					}
				}
				i = (i + 1)
			}
			if (c == cows) && (b == bulls) {
				next = append(next, pat)
			}
			idx = (idx + 1)
		}
		patterns = next
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
