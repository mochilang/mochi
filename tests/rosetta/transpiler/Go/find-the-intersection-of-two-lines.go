//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:02:45 GMT+7
package main

import (
	"fmt"
)

type Point struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

type Line struct {
	Slope float64 `json:"slope"`
	Yint  float64 `json:"yint"`
}

func createLine(a Point, b Point) Line {
	var slope float64 = ((b.Y - a.Y) / (b.X - a.X))
	_ = slope
	var yint float64 = (a.Y - (slope * a.X))
	_ = yint
	_ = yint
	return Line{
		Slope: slope,
		Yint:  yint,
	}
}

func evalX(l Line, x float64) float64 {
	return ((l.Slope * x) + l.Yint)
}

func intersection(l1 Line, l2 Line) Point {
	if l1.Slope == l2.Slope {
		return Point{
			X: 0.0,
			Y: 0.0,
		}
	}
	var x float64 = ((l2.Yint - l1.Yint) / (l1.Slope - l2.Slope))
	_ = x
	var y float64 = evalX(l1, x)
	_ = y
	_ = y
	return Point{
		X: x,
		Y: y,
	}
}

func mochiMain() {
	var l1 Line = createLine(Point{
		X: 4.0,
		Y: 0.0,
	}, Point{
		X: 6.0,
		Y: 10.0,
	})
	_ = l1
	var l2 Line = createLine(Point{
		X: 0.0,
		Y: 3.0,
	}, Point{
		X: 10.0,
		Y: 7.0,
	})
	_ = l2
	var p Point = intersection(l1, l2)
	_ = p
	fmt.Println((((("{" + fmt.Sprint(p.X)) + " ") + fmt.Sprint(p.Y)) + "}"))
}

func main() {
	mochiMain()
}
