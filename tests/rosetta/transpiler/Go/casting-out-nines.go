//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 12:08:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func parseIntBase(s string, base int) int {
	var digits string = "0123456789abcdefghijklmnopqrstuvwxyz"
	_ = digits
	var n int = 0
	_ = n
	var i int = 0
	_ = i
	for i < len(s) {
		var j int = 0
		_ = j
		var v int = 0
		_ = v
		for j < len(digits) {
			if _substr(digits, j, (j+1)) == string([]rune(s)[i:(i+1)]) {
				v = j
				break
			}
			j = (j + 1)
		}
		n = ((n * base) + v)
		i = (i + 1)
	}
	return n
}

func intToBase(n int, base int) string {
	var digits string = "0123456789abcdefghijklmnopqrstuvwxyz"
	_ = digits
	if n == 0 {
		return "0"
	}
	var out string = ""
	_ = out
	var v int = n
	_ = v
	for v > 0 {
		var d int = (v % base)
		_ = d
		out = (string([]rune(digits)[d:(d+1)]) + out)
		v = (v / base)
	}
	return out
}

func subset(base int, begin string, end string) []string {
	var b int = parseIntBase(begin, base)
	_ = b
	var e int = parseIntBase(end, base)
	_ = e
	var out []string = []string{}
	_ = out
	var k int = b
	_ = k
	for k <= e {
		var ks string = intToBase(k, base)
		_ = ks
		var mod int = (base - 1)
		_ = mod
		var r1 int = (parseIntBase(ks, base) % mod)
		_ = r1
		var r2 int = ((parseIntBase(ks, base) * parseIntBase(ks, base)) % mod)
		_ = r2
		if r1 == r2 {
			out = append(out, ks)
		}
		k = (k + 1)
	}
	return out
}

var testCases []map[string]any

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		testCases = []map[string]any{map[string]any{"base": 10, "begin": "1", "end": "100", "kaprekar": []string{"1", "9", "45", "55", "99"}}, map[string]any{"base": 17, "begin": "10", "end": "gg", "kaprekar": []string{"3d", "d4", "gg"}}}
		idx = 0
		for idx < len(testCases) {
			var tc map[string]any = testCases[idx]
			_ = tc
			fmt.Println((fmt.Sprint(((fmt.Sprint(((("\nTest case base = " + fmt.Sprint(tc["base"].(int))) + ", begin = ") + fmt.Sprint(tc["begin"].(string)))) + ", end = ") + fmt.Sprint(tc["end"].(string)))) + ":"))
			var s []string = subset(tc["base"].(int), tc["begin"].(string), tc["end"].(string))
			_ = s
			fmt.Println(("Subset:  " + fmt.Sprint(s)))
			fmt.Println(("Kaprekar:" + fmt.Sprint(func(v any) []string {
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok && len(arr) == 0 {
					return []string{}
				}
				return v.([]string)
			}(tc["kaprekar"]))))
			var sx int = 0
			_ = sx
			var valid bool = true
			_ = valid
			var i int = 0
			_ = i
			for i < _len(func(v any) []string {
				if vv, ok := v.([]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok && len(arr) == 0 {
					return []string{}
				}
				return v.([]string)
			}(tc["kaprekar"])) {
				k := func(v any) []string {
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok && len(arr) == 0 {
						return []string{}
					}
					return v.([]string)
				}(tc["kaprekar"])[i]
				_ = k
				var found bool = false
				_ = found
				for sx < len(s) {
					if s[sx] == k {
						found = true
						sx = (sx + 1)
						break
					}
					sx = (sx + 1)
				}
				if !found {
					fmt.Println((fmt.Sprint(("Fail:" + fmt.Sprint(k))) + " not in subset"))
					valid = false
					break
				}
				i = (i + 1)
			}
			if valid {
				fmt.Println("Valid subset.")
			}
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
