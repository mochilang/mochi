//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:26:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func gzipWriter(w any) any {
	return w
}

func tarWriter(w any) any {
	return w
}

func tarWriteHeader(w any, hdr map[string]any) {
}

func tarWrite(w any, data string) {
}

func mochiMain() {
	var filename string = "TAPE.FILE"
	_ = filename
	var data string = ""
	_ = data
	var outfile string = ""
	_ = outfile
	var gzipFlag bool = false
	_ = gzipFlag
	var w any = nil
	_ = w
	if outfile != "" {
		w = nil
	}
	if gzipFlag {
		w = gzipWriter(w)
	}
	w = tarWriter(w)
	var hdr map[string]any = map[string]any{"Name": filename, "Mode": 432, "Size": len(data), "ModTime": _now(), "Typeflag": 0, "Uname": "guest", "Gname": "guest"}
	_ = hdr
	tarWriteHeader(w, hdr)
	tarWrite(w, data)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
