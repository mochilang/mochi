//go:build ignore

// Generated by Mochi v0.10.37 on 2025-07-23 13:17:31 GMT+7
package main

import (
	"fmt"
)

type Beast interface{ isBeast() }
type Dog struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Dog) isBeast() {}

type Cat struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Cat) isBeast() {}

func beastKind(b any) string {
	return func() string {
		switch v := b.(type) {
		case Dog:
			k := v.Kind
			_ = v.Name
			return k
		case Cat:
			k := v.Kind
			_ = v.Name
			return k
		default:
			var z string
			return z
		}
	}()
}

func beastName(b any) string {
	return func() string {
		switch v := b.(type) {
		case Dog:
			_ = v.Kind
			n := v.Name
			return n
		case Cat:
			_ = v.Kind
			n := v.Name
			return n
		default:
			var z string
			return z
		}
	}()
}

func beastCry(b any) string {
	return func() string {
		switch v := b.(type) {
		case Dog:
			_ = v.Kind
			_ = v.Name
			return "Woof"
		case Cat:
			_ = v.Kind
			_ = v.Name
			return "Meow"
		default:
			var z string
			return z
		}
	}()
}

func bprint(b any) {
	fmt.Println((((((beastName(b) + ", who's a ") + beastKind(b)) + ", cries: \"") + beastCry(b)) + "\"."))
}

func mochiMain() {
	var d any = Dog{
		Kind: "labrador",
		Name: "Max",
	}
	var c any = Cat{
		Kind: "siamese",
		Name: "Sammy",
	}
	bprint(d)
	bprint(c)
}

func main() {
	mochiMain()
}
