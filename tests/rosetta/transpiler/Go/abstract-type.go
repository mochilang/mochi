//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 14:51:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Beast interface{ isBeast() }
type Dog struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Dog) isBeast() {}

type Cat struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Cat) isBeast() {}

func beastKind(b any) string {
	return func() string {
		switch uv := b.(type) {
		case Dog:
			k := uv.Kind
			_ = uv.Name
			return k
		case Cat:
			k := uv.Kind
			_ = uv.Name
			return k
		default:
			var z string
			return z
		}
	}()
}

func beastName(b any) string {
	return func() string {
		switch uv := b.(type) {
		case Dog:
			_ = uv.Kind
			n := uv.Name
			return n
		case Cat:
			_ = uv.Kind
			n := uv.Name
			return n
		default:
			var z string
			return z
		}
	}()
}

func beastCry(b any) string {
	return func() string {
		switch uv := b.(type) {
		case Dog:
			_ = uv.Kind
			_ = uv.Name
			return "Woof"
		case Cat:
			_ = uv.Kind
			_ = uv.Name
			return "Meow"
		default:
			var z string
			return z
		}
	}()
}

func bprint(b any) {
	fmt.Println((((((beastName(b) + ", who's a ") + beastKind(b)) + ", cries: \"") + beastCry(b)) + "\"."))
}

func mochiMain() {
	var d any = Dog{
		Kind: "labrador",
		Name: "Max",
	}
	_ = d
	var c any = Cat{
		Kind: "siamese",
		Name: "Sammy",
	}
	_ = c
	bprint(d)
	bprint(c)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
