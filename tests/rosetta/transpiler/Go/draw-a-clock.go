//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func pow2(exp int) int {
	var r int = 1
	_ = r
	var i int = 0
	_ = i
	for i < exp {
		r = (r * 2)
		i = (i + 1)
	}
	return r
}

func bin(n int, digits int) string {
	var s string = ""
	_ = s
	var i int = (digits - 1)
	_ = i
	for i >= 0 {
		var p int = pow2(i)
		_ = p
		if n >= p {
			s = (s + "x")
			n = (n - p)
		} else {
			s = (s + " ")
		}
		if i > 0 {
			s = (s + "|")
		}
		i = (i - 1)
	}
	return s
}

var t *big.Int

var sec *big.Int

var mins *big.Int

var min *big.Int

var hour *big.Int

var xs string

var i int

var out string

var j int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		t = big.NewInt(int64((_now() / 1000000000)))
		sec = new(big.Int).Mod(t, big.NewInt(int64(60)))
		mins = new(big.Int).Div(t, big.NewInt(int64(60)))
		min = new(big.Int).Mod(mins, big.NewInt(int64(60)))
		hour = new(big.Int).Mod(new(big.Int).Div(mins, big.NewInt(int64(60))), big.NewInt(int64(24)))
		fmt.Println(bin(int(hour.Int64()), 8))
		fmt.Println("")
		fmt.Println(bin(int(min.Int64()), 8))
		fmt.Println("")
		xs = ""
		i = 0
		for i < int(sec.Int64()) {
			xs = (xs + "x")
			i = (i + 1)
		}
		out = ""
		j = 0
		for j < len(xs) {
			out = (out + _substr(xs, j, (j+1)))
			if (((j + 1) % 5) == 0) && ((j + 1) < len(xs)) {
				out = (out + "|")
			}
			j = (j + 1)
		}
		fmt.Println(out)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
