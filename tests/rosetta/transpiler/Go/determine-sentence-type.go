//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func join(xs []string, sep string) string {
	var res string = ""
	var i int = 0
	for i < len(xs) {
		if i > 0 {
			res = (res + sep)
		}
		res = (res + xs[i])
		i = (i + 1)
	}
	return res
}

func sentenceType(s string) string {
	if len(s) == 0 {
		return ""
	}
	var types []string = []string{}
	var i int = 0
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		if ch == "?" {
			types = append(types, "Q")
		} else {
			if ch == "!" {
				types = append(types, "E")
			} else {
				if ch == "." {
					types = append(types, "S")
				}
			}
		}
		i = (i + 1)
	}
	var last string = _substr(s, (len(s) - 1), len(s))
	if strings.Index("?!.", last) == (0 - 1) {
		types = append(types, "N")
	}
	return join(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(types), "|")
}

func mochiMain() {
	var s string = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
	var result string = sentenceType(s)
	fmt.Println(result)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
