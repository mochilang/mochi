//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 17:45:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func fibonacciWord(n int) string {
	var a string = "1"
	_ = a
	var b string = "0"
	_ = b
	var i int = 1
	_ = i
	for i < n {
		var tmp string = b
		_ = tmp
		b = (b + a)
		a = tmp
		i = (i + 1)
	}
	return a
}

func mochiMain() {
	var wf string = fibonacciWord(23)
	_ = wf
	fmt.Println(fmt.Sprint(len(wf)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
