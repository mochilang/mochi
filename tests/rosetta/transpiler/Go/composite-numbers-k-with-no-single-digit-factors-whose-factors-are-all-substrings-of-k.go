//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 23:55:44 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func primeFactors(n int) []int {
	var factors []int = []int{}
	_ = factors
	var x int = n
	_ = x
	for (x % 2) == 0 {
		factors = append(factors, 2)
		x = int((x / 2))
	}
	var p int = 3
	_ = p
	for (p * p) <= x {
		for (x % p) == 0 {
			factors = append(factors, p)
			x = int((x / p))
		}
		p = (p + 2)
	}
	if x > 1 {
		factors = append(factors, x)
	}
	return factors
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var out string = ""
	_ = out
	var i int = (len(s) - 1)
	_ = i
	var c int = 0
	_ = c
	for i >= 0 {
		out = (_substr(s, i, (i+1)) + out)
		c = (c + 1)
		if ((c % 3) == 0) && (i > 0) {
			out = ("," + out)
		}
		i = (i - 1)
	}
	return out
}

func indexOf(s string, sub string) int {
	var i int = 0
	_ = i
	for (i + len(sub)) <= len(s) {
		if _substr(s, i, (i+len(sub))) == sub {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func pad10(s string) string {
	var str string = s
	_ = str
	for len(str) < 10 {
		str = (" " + str)
	}
	return str
}

func trimRightStr(s string) string {
	var end int = len(s)
	_ = end
	for (end > 0) && (_substr(s, (end-1), end) == " ") {
		end = (end - 1)
	}
	return _substr(s, 0, end)
}

func mochiMain() {
	var res []int = []int{}
	_ = res
	var count int = 0
	_ = count
	var k int = (11 * 11)
	_ = k
	for count < 20 {
		if (((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0) {
			k = (k + 2)
			continue
		}
		var factors []int = primeFactors(k)
		_ = factors
		if len(factors) > 1 {
			var s string = fmt.Sprint(k)
			_ = s
			var includesAll bool = true
			_ = includesAll
			var prev int = (0 - 1)
			_ = prev
			for _, f := range factors {
				if f == prev {
					continue
				}
				var fs string = fmt.Sprint(f)
				_ = fs
				if strings.Index(s, fs) == (0 - 1) {
					includesAll = false
					break
				}
				prev = f
			}
			if includesAll {
				res = append(res, k)
				count = (count + 1)
			}
		}
		k = (k + 2)
	}
	var line string = ""
	_ = line
	for _, e := range res[0:10] {
		line = ((line + pad10(commatize(e))) + " ")
	}
	fmt.Println(trimRightStr(line))
	line = ""
	for _, e := range res[10:20] {
		line = ((line + pad10(commatize(e))) + " ")
	}
	fmt.Println(trimRightStr(line))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
