//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:25:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func fib(n int) []int {
	var a int = 0
	_ = a
	var b int = 1
	_ = b
	var res []int = []int{}
	_ = res
	var i int = 0
	_ = i
	for i < n {
		res = append(res, a)
		var tmp int = (a + b)
		_ = tmp
		a = b
		i = (i + 1)
		b = tmp
	}
	return res
}

func mochiMain() {
	var seq []int = fib(10)
	_ = seq
	for _, v := range seq {
		fmt.Println(fmt.Sprint(v))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
