//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:14:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var grid [][]string

func flood(x int, y int, repl string) {
	var target string = grid[y][x]
	_ = target
	if target == repl {
		return
	}
	var ff func(int, int)
	ff = func(px int, py int) {
		if (((px < 0) || (py < 0)) || (py >= len(grid))) || (px >= len(grid[0])) {
			return
		}
		if grid[py][px] != target {
			return
		}
		grid[py][px] = repl
		ff((px - 1), py)
		ff((px + 1), py)
		ff(px, (py - 1))
		ff(px, (py + 1))
	}
	ff(x, y)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		grid = [][]string{[]string{".", ".", ".", ".", "."}, []string{".", "#", "#", "#", "."}, []string{".", "#", ".", "#", "."}, []string{".", "#", "#", "#", "."}, []string{".", ".", ".", ".", "."}}
		flood(2, 2, "o")
		for _, row := range grid {
			var line string = ""
			_ = line
			for _, _ch := range row {
				ch := string(_ch)
				line = (line + ch)
			}
			fmt.Println(line)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
