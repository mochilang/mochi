//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:59:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func listStr(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if (i + 1) < len(xs) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

var a []int

var s []int

var cap_s int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		a = []int{0, 0, 0, 0, 0}
		fmt.Println(("len(a) = " + fmt.Sprint(len(a))))
		fmt.Println(("a = " + listStr(a)))
		a[0] = 3
		fmt.Println(("a = " + listStr(a)))
		fmt.Println(("a[0] = " + fmt.Sprint(a[0])))
		s = a[0:4]
		cap_s = 5
		fmt.Println(("s = " + listStr(s)))
		fmt.Println(((("len(s) = " + fmt.Sprint(len(s))) + "  cap(s) = ") + fmt.Sprint(cap_s)))
		s = a[0:5]
		fmt.Println(("s = " + listStr(s)))
		a[0] = 22
		s[0] = 22
		fmt.Println(("a = " + listStr(a)))
		fmt.Println(("s = " + listStr(s)))
		s = append(s, 4)
		s = append(s, 5)
		s = append(s, 6)
		cap_s = 10
		fmt.Println(("s = " + listStr(s)))
		fmt.Println(((("len(s) = " + fmt.Sprint(len(s))) + "  cap(s) = ") + fmt.Sprint(cap_s)))
		a[4] = (0 - 1)
		fmt.Println(("a = " + listStr(a)))
		fmt.Println(("s = " + listStr(s)))
		s = []int{}
		for i := 0; i < 8; i++ {
			s = append(s, 0)
		}
		cap_s = 8
		fmt.Println(("s = " + listStr(s)))
		fmt.Println(((("len(s) = " + fmt.Sprint(len(s))) + "  cap(s) = ") + fmt.Sprint(cap_s)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
