//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:26:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func createFile(fs map[string]bool, fn string) {
	if func() bool { _, ok := fs[fn]; return ok }() {
		fmt.Println((("open " + fn) + ": file exists"))
	} else {
		fs[fn] = false
		fmt.Println((("file " + fn) + " created!"))
	}
}

func createDir(fs map[string]bool, dn string) {
	if func() bool { _, ok := fs[dn]; return ok }() {
		fmt.Println((("mkdir " + dn) + ": file exists"))
	} else {
		fs[dn] = true
		fmt.Println((("directory " + dn) + " created!"))
	}
}

func mochiMain() {
	var fs map[string]bool = map[string]bool{}
	_ = fs
	fs["docs"] = true
	createFile(fs, "input.txt")
	createFile(fs, "/input.txt")
	createDir(fs, "docs")
	createDir(fs, "/docs")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
