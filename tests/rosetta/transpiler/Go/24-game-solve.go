//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:13:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Rational struct {
	Num   int `json:"num"`
	Denom int `json:"denom"`
}

var OP_ADD int

var OP_SUB int

var OP_MUL int

var OP_DIV int

type Node struct {
	Val Rational `json:"val"`
	Txt string   `json:"txt"`
}

func makeNode(n int) Node {
	return Node{
		Val: Rational{
			Num:   n,
			Denom: 1,
		},
		Txt: fmt.Sprint(n),
	}
}

func combine(op int, l Node, r Node) Node {
	var res Rational
	_ = res
	if op == OP_ADD {
		res = Rational{
			Num:   ((l.Val.Num * r.Val.Denom) + (l.Val.Denom * r.Val.Num)),
			Denom: (l.Val.Denom * r.Val.Denom),
		}
	} else {
		if op == OP_SUB {
			res = Rational{
				Num:   ((l.Val.Num * r.Val.Denom) - (l.Val.Denom * r.Val.Num)),
				Denom: (l.Val.Denom * r.Val.Denom),
			}
		} else {
			if op == OP_MUL {
				res = Rational{
					Num:   (l.Val.Num * r.Val.Num),
					Denom: (l.Val.Denom * r.Val.Denom),
				}
			} else {
				res = Rational{
					Num:   (l.Val.Num * r.Val.Denom),
					Denom: (l.Val.Denom * r.Val.Num),
				}
			}
		}
	}
	var opstr string = ""
	_ = opstr
	if op == OP_ADD {
		opstr = " + "
	} else {
		if op == OP_SUB {
			opstr = " - "
		} else {
			if op == OP_MUL {
				opstr = " * "
			} else {
				opstr = " / "
			}
		}
	}
	return Node{
		Val: res,
		Txt: (((("(" + l.Txt) + opstr) + r.Txt) + ")"),
	}
}

func exprEval(x Node) Rational {
	return x.Val
}

func exprString(x Node) string {
	return x.Txt
}

var n_cards int

var goal int

var digit_range int

func solve(xs []Node) bool {
	if len(xs) == 1 {
		var f Rational = exprEval(xs[0])
		_ = f
		if (f.Denom != 0) && (f.Num == (f.Denom * goal)) {
			fmt.Println(exprString(xs[0]))
			return true
		}
		return false
	}
	var i int = 0
	_ = i
	for i < len(xs) {
		var j int = (i + 1)
		_ = j
		for j < len(xs) {
			var rest []Node = []Node{}
			_ = rest
			var k int = 0
			_ = k
			for k < len(xs) {
				if (k != i) && (k != j) {
					rest = append(rest, xs[k])
				}
				k = (k + 1)
			}
			var a Node = xs[i]
			_ = a
			var b Node = xs[j]
			_ = b
			var node Node
			_ = node
			for _, op := range []int{OP_ADD, OP_SUB, OP_MUL, OP_DIV} {
				node = combine(op, a, b)
				if solve(func(v any) []Node {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]Node); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []Node{}
						}
						out := make([]Node, len(arr))
						for i, x := range arr {
							out[i] = x.(Node)
						}
						return out
					}
					return v.([]Node)
				}(append(rest, node))) {
					return true
				}
			}
			node = combine(OP_SUB, b, a)
			if solve(func(v any) []Node {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Node); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Node{}
					}
					out := make([]Node, len(arr))
					for i, x := range arr {
						out[i] = x.(Node)
					}
					return out
				}
				return v.([]Node)
			}(append(rest, node))) {
				return true
			}
			node = combine(OP_DIV, b, a)
			if solve(func(v any) []Node {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Node); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Node{}
					}
					out := make([]Node, len(arr))
					for i, x := range arr {
						out[i] = x.(Node)
					}
					return out
				}
				return v.([]Node)
			}(append(rest, node))) {
				return true
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return false
}

func mochiMain() {
	var iter int = 0
	_ = iter
	for iter < 10 {
		var cards []Node = []Node{}
		_ = cards
		var i int = 0
		_ = i
		for i < n_cards {
			var n int = ((_now() % (digit_range - 1)) + 1)
			_ = n
			cards = append(cards, makeNode(n))
			fmt.Println((" " + fmt.Sprint(n)))
			i = (i + 1)
		}
		fmt.Println(":  ")
		if !solve(func(v any) []Node {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Node); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Node{}
				}
				out := make([]Node, len(arr))
				for i, x := range arr {
					out[i] = x.(Node)
				}
				return out
			}
			return v.([]Node)
		}(cards)) {
			fmt.Println("No solution")
		}
		iter = (iter + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		OP_ADD = 1
		OP_SUB = 2
		OP_MUL = 3
		OP_DIV = 4
		n_cards = 4
		goal = 24
		digit_range = 9
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
