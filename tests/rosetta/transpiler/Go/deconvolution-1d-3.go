//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf(s string, ch string) int {
	var i int = 0
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func fmt1(x float64) string {
	var y float64 = (float64(int(((x * 10.0) + 0.5))) / 10.0)
	var s string = fmt.Sprint(y)
	var dot int = strings.Index(s, ".")
	if dot < 0 {
		s = (s + ".0")
	}
	return s
}

func printColumnMatrix(xs []float64) {
	if len(xs) == 0 {
		return
	}
	fmt.Println((("⎡" + fmt1(xs[0])) + "⎤"))
	var i int = 1
	for i < (len(xs) - 1) {
		fmt.Println((("⎢" + fmt1(xs[i])) + "⎥"))
		i = (i + 1)
	}
	fmt.Println((("⎣ " + fmt1(xs[(len(xs)-1)])) + "⎦"))
}

func deconv(g []float64, f []float64) []float64 {
	var h []float64 = []float64{}
	var n int = 0
	var hn int = ((len(g) - len(f)) + 1)
	for n < hn {
		var v float64 = g[n]
		var lower int = 0
		if n >= len(f) {
			lower = ((n - len(f)) + 1)
		}
		var i int = lower
		for i < n {
			v = (v - (h[i] * f[(n-i)]))
			i = (i + 1)
		}
		v = (v / f[0])
		h = append(h, v)
		n = (n + 1)
	}
	return h
}

func mochiMain() {
	var h []float64 = []float64{(0 - 8.0), (0 - 9.0), (0 - 3.0), (0 - 1.0), (0 - 6.0), 7.0}
	var f []float64 = []float64{(0 - 3.0), (0 - 6.0), (0 - 1.0), 8.0, (0 - 6.0), 3.0, (0 - 1.0), (0 - 9.0), (0 - 9.0), 3.0, (0 - 2.0), 5.0, 2.0, (0 - 2.0), (0 - 7.0), (0 - 1.0)}
	var g []float64 = []float64{24.0, 75.0, 71.0, (0 - 34.0), 3.0, 22.0, (0 - 45.0), 23.0, 245.0, 25.0, 52.0, 25.0, (0 - 67.0), (0 - 96.0), 96.0, 31.0, 55.0, 36.0, 29.0, (0 - 43.0), (0 - 7.0)}
	fmt.Println("deconv(g, f) =")
	printColumnMatrix(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(deconv(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(g), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(f))))
	fmt.Println("")
	fmt.Println("deconv(g, h) =")
	printColumnMatrix(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(deconv(func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(g), func(v any) []float64 {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]float64); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []float64{}
			}
			out := make([]float64, len(arr))
			for i, x := range arr {
				out[i] = x.(float64)
			}
			return out
		}
		return v.([]float64)
	}(h))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
