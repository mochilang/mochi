//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:24:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func absInt(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func mochiMain() {
	var b int = 1
	for b <= 5 {
		if b != 5 {
			var c int = 1
			for c <= 5 {
				if (c != 1) && (c != b) {
					var f int = 1
					for f <= 5 {
						if ((((f != 1) && (f != 5)) && (f != b)) && (f != c)) && (absInt((f - c)) > 1) {
							var m int = 1
							for m <= 5 {
								if (((m != b) && (m != c)) && (m != f)) && (m > c) {
									var s int = 1
									for s <= 5 {
										if ((((s != b) && (s != c)) && (s != f)) && (s != m)) && (absInt((s - f)) > 1) {
											fmt.Println((((((((((("Baker in " + fmt.Sprint(b)) + ", Cooper in ") + fmt.Sprint(c)) + ", Fletcher in ") + fmt.Sprint(f)) + ", Miller in ") + fmt.Sprint(m)) + ", Smith in ") + fmt.Sprint(s)) + "."))
											return
										}
										s = (s + 1)
									}
								}
								m = (m + 1)
							}
						}
						f = (f + 1)
					}
				}
				c = (c + 1)
			}
		}
		b = (b + 1)
	}
	fmt.Println("No solution found.")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
