//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:03:34 GMT+7
package main

import (
	"fmt"
	"strings"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var glyphs string

var g2lMap map[string]string

var names map[string]string

var ntable map[string]int

func indexOf(s string, sub string) int {
	var i int = 0
	_ = i
	for i <= (len(s) - len(sub)) {
		if _substr(s, i, (i+len(sub))) == sub {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func strReplace(s string, old string, new string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		if ((len(old) > 0) && ((i + len(old)) <= len(s))) && (_substr(s, i, (i+len(old))) == old) {
			res = (res + new)
			i = (i + len(old))
		} else {
			res = (res + _substr(s, i, (i+1)))
			i = (i + 1)
		}
	}
	return res
}

func g2l(pieces string) string {
	var lets string = ""
	_ = lets
	var i int = 0
	_ = i
	for i < len(pieces) {
		var ch string = _substr(pieces, i, (i + 1))
		_ = ch
		lets = (lets + g2lMap[ch])
		i = (i + 1)
	}
	return lets
}

func spid(pieces string) int {
	pieces = g2l(pieces)
	if len(pieces) != 8 {
		return (0 - 1)
	}
	for _, one := range []string{"K", "Q"} {
		var count int = 0
		_ = count
		var i int = 0
		_ = i
		for i < len(pieces) {
			if _substr(pieces, i, (i+1)) == one {
				count = (count + 1)
			}
			i = (i + 1)
		}
		if count != 1 {
			return (0 - 1)
		}
	}
	for _, two := range []string{"R", "N", "B"} {
		var count int = 0
		_ = count
		var i int = 0
		_ = i
		for i < len(pieces) {
			if _substr(pieces, i, (i+1)) == two {
				count = (count + 1)
			}
			i = (i + 1)
		}
		if count != 2 {
			return (0 - 1)
		}
	}
	var r1 int = strings.Index(pieces, "R")
	_ = r1
	var r2 int = ((strings.Index(_substr(pieces, (r1+1), len(pieces)), "R") + r1) + 1)
	_ = r2
	var k int = strings.Index(pieces, "K")
	_ = k
	if (k < r1) || (k > r2) {
		return (0 - 1)
	}
	var b1 int = strings.Index(pieces, "B")
	_ = b1
	var b2 int = ((strings.Index(_substr(pieces, (b1+1), len(pieces)), "B") + b1) + 1)
	_ = b2
	if ((b2 - b1) % 2) == 0 {
		return (0 - 1)
	}
	var piecesN string = strReplace(pieces, "Q", "")
	_ = piecesN
	piecesN = strReplace(piecesN, "B", "")
	var n1 int = strings.Index(piecesN, "N")
	_ = n1
	var n2 int = ((strings.Index(_substr(piecesN, (n1+1), len(piecesN)), "N") + n1) + 1)
	_ = n2
	var np string = (fmt.Sprint(n1) + fmt.Sprint(n2))
	_ = np
	var N int = ntable[np]
	_ = N
	_ = N
	var piecesQ string = strReplace(pieces, "B", "")
	_ = piecesQ
	var Q int = strings.Index(piecesQ, "Q")
	_ = Q
	_ = Q
	var D int = strings.Index("0246", fmt.Sprint(b1))
	_ = D
	var L int = strings.Index("1357", fmt.Sprint(b2))
	_ = L
	if D == (0 - 1) {
		D = strings.Index("0246", fmt.Sprint(b2))
		L = strings.Index("1357", fmt.Sprint(b1))
	}
	return ((((96 * N) + (16 * Q)) + (4 * D)) + L)
}

func mochiMain() {
	for _, pieces := range []string{"♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"} {
		fmt.Println(((((pieces + " or ") + g2l(pieces)) + " has SP-ID of ") + fmt.Sprint(spid(pieces))))
	}
}

func main() {
	glyphs = "♜♞♝♛♚♖♘♗♕♔"
	g2lMap = map[string]string{"♜": "R", "♞": "N", "♝": "B", "♛": "Q", "♚": "K", "♖": "R", "♘": "N", "♗": "B", "♕": "Q", "♔": "K"}
	names = map[string]string{"R": "rook", "N": "knight", "B": "bishop", "Q": "queen", "K": "king"}
	ntable = map[string]int{"01": 0, "02": 1, "03": 2, "04": 3, "12": 4, "13": 5, "14": 6, "23": 7, "24": 8, "34": 9}
	mochiMain()
}
