//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 09:28:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func f() []any {
	return []any{0, 0.0}
}

func g(a int, b float64) int {
	return 0
}

func h(s string, nums []int) {
}

func mochiMain() {
	var ab []any = f()
	_ = ab
	a := ab[0]
	_ = a
	b := ab[1]
	_ = b
	cb := f()[1]
	_ = cb
	var d int = g(a.(int), cb.(float64))
	_ = d
	var e int = g(d, b.(float64))
	_ = e
	var i int = g(d, 2.0)
	_ = i
	var list []int = []int{}
	_ = list
	list = append(list, a.(int))
	list = append(list, d)
	list = append(list, e)
	list = append(list, i)
	i = len(list)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
