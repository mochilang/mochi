//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var nPts int

var rMin int

var rMax int

var span *big.Int

var poss [][]int

var min2 *big.Int

var max2 *big.Int

var y int

var rows [][]string

var r int

var u int

var seen map[string]bool

var n int

var i2 int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nPts = 100
		rMin = 10
		rMax = 15
		span = big.NewInt(int64(((rMax + 1) + rMax)))
		poss = [][]int{}
		min2 = big.NewInt(int64((rMin * rMin)))
		max2 = big.NewInt(int64((rMax * rMax)))
		y = (0 - rMax)
		for y <= rMax {
			var x int = (0 - rMax)
			_ = x
			for x <= rMax {
				var r2 int = ((x * x) + (y * y))
				_ = r2
				if (r2 >= int(min2.Int64())) && (r2 <= int(max2.Int64())) {
					poss = append(poss, []int{x, y})
				}
				x = (x + 1)
			}
			y = (y + 1)
		}
		fmt.Println((fmt.Sprint(len(poss)) + " possible points"))
		rows = [][]string{}
		r = 0
		for r < int(span.Int64()) {
			var row []string = []string{}
			_ = row
			var c int = 0
			_ = c
			for c < int(new(big.Int).Mul(span, big.NewInt(int64(2))).Int64()) {
				row = append(row, " ")
				c = (c + 1)
			}
			rows = append(rows, row)
			r = (r + 1)
		}
		u = 0
		seen = map[string]bool{}
		n = 0
		for n < nPts {
			var i int = (_now() % len(poss))
			_ = i
			var x int = poss[i][0]
			_ = x
			var yy int = poss[i][1]
			_ = yy
			var row int = (yy + rMax)
			_ = row
			var col int = ((x + rMax) * 2)
			_ = col
			rows[row][col] = "*"
			var key string = ((fmt.Sprint(row) + ",") + fmt.Sprint(col))
			_ = key
			if !seen[key] {
				seen[key] = true
				u = (u + 1)
			}
			n = (n + 1)
		}
		i2 = 0
		for i2 < int(span.Int64()) {
			var line string = ""
			_ = line
			var j int = 0
			_ = j
			for j < int(new(big.Int).Mul(span, big.NewInt(int64(2))).Int64()) {
				line = (line + rows[i2][j])
				j = (j + 1)
			}
			fmt.Println(line)
			i2 = (i2 + 1)
		}
		fmt.Println((fmt.Sprint(u) + " unique points"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
