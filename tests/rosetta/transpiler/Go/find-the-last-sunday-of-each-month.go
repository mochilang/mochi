//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:09 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func leapYear(y int) bool {
	return ((((y % 4) == 0) && ((y % 100) != 0)) || ((y % 400) == 0))
}

func monthDays(y int, m int) int {
	var days []int = []int{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
	_ = days
	_ = days
	if (m == 2) && leapYear(y) {
		return 29
	}
	return days[m]
}

func zeller(y int, m int, d int) int {
	var mm int = m
	_ = mm
	var yy int = y
	_ = yy
	if mm < 3 {
		mm = (mm + 12)
		yy = (yy - 1)
	}
	var K int = (yy % 100)
	_ = K
	var J int = (yy / 100)
	_ = J
	var h int = ((((((d + ((13 * (mm + 1)) / 5)) + K) + (K / 4)) + (J / 4)) + (5 * J)) % 7)
	_ = h
	_ = h
	return ((h + 6) % 7)
}

func lastSunday(y int, m int) int {
	var day int = monthDays(y, m)
	_ = day
	for (day > 0) && (zeller(y, m, day) != 0) {
		day = (day - 1)
	}
	return day
}

func monthName(m int) string {
	var names []string = []string{"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
	_ = names
	_ = names
	return names[m]
}

func mochiMain() {
	var year int = func() int { n, _ := strconv.Atoi(_input()); return n }()
	_ = year
	fmt.Println(("Last Sundays of each month of " + fmt.Sprint(year)))
	fmt.Println("==================================")
	var m int = 1
	_ = m
	for m <= 12 {
		var day int = lastSunday(year, m)
		_ = day
		fmt.Println(((monthName(m) + ": ") + fmt.Sprint(day)))
		m = (m + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
