//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:54 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func roll(nDice int, nSides int) int {
	var sum int = 0
	var i int = 0
	for i < nDice {
		sum = ((sum + (_now() % nSides)) + 1)
		i = (i + 1)
	}
	return sum
}

func beats(n1 int, s1 int, n2 int, s2 int, trials int) float64 {
	var wins int = 0
	var i int = 0
	for i < trials {
		if roll(n1, s1) > roll(n2, s2) {
			wins = (wins + 1)
		}
		i = (i + 1)
	}
	return (float64(wins) / float64(trials))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println(fmt.Sprint(beats(9, 4, 6, 6, 1000)))
		fmt.Println(fmt.Sprint(beats(5, 10, 7, 6, 1000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
