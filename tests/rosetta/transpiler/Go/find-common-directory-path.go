//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:28:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func splitPath(p string) []string {
	var parts []string = []string{}
	_ = parts
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(p) {
		if _substr(p, i, (i+1)) == "/" {
			if cur != "" {
				parts = append(parts, cur)
				cur = ""
			}
		} else {
			cur = (cur + _substr(p, i, (i+1)))
		}
		i = (i + 1)
	}
	if cur != "" {
		parts = append(parts, cur)
	}
	return parts
}

func joinPath(parts []string) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(parts) {
		s = ((s + "/") + parts[i])
		i = (i + 1)
	}
	return s
}

func commonPrefix(paths []string) string {
	if len(paths) == 0 {
		return ""
	}
	var base []string = splitPath(paths[0])
	_ = base
	var i int = 0
	_ = i
	var prefix []string = []string{}
	_ = prefix
	for i < len(base) {
		var comp string = base[i]
		_ = comp
		var ok bool = true
		_ = ok
		for _, p := range paths {
			var parts []string = splitPath(p)
			_ = parts
			if (i >= len(parts)) || (parts[i] != comp) {
				ok = false
				break
			}
		}
		if ok {
			prefix = append(prefix, comp)
		} else {
			break
		}
		i = (i + 1)
	}
	return joinPath(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(prefix))
}

func mochiMain() {
	var paths []string = []string{"/home/user1/tmp/coverage/test", "/home/user1/tmp/covert/operator", "/home/user1/tmp/coven/members", "/home//user1/tmp/coventry", "/home/user1/././tmp/covertly/foo", "/home/bob/../user1/tmp/coved/bar"}
	_ = paths
	var c string = commonPrefix(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(paths))
	_ = c
	if c == "" {
		fmt.Println("No common path")
	} else {
		fmt.Println(("Common path: " + c))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
