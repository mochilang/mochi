//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:43:24 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func intSqrt(x int) int {
	if x < 2 {
		return x
	}
	var left int = 1
	_ = left
	var right int = (x / 2)
	_ = right
	var ans int = 0
	_ = ans
	for left <= right {
		var mid int = (left + ((right - left) / 2))
		_ = mid
		var sq int = (mid * mid)
		_ = sq
		if sq == x {
			return mid
		}
		if sq < x {
			left = (mid + 1)
			ans = mid
		} else {
			right = (mid - 1)
		}
	}
	return ans
}

func sumRecip(n int) int {
	var s int = 1
	_ = s
	var limit int = intSqrt(n)
	_ = limit
	var f int = 2
	_ = f
	for f <= limit {
		if (n % f) == 0 {
			s = (s + (n / f))
			var f2 int = (n / f)
			_ = f2
			if f2 != f {
				s = (s + f)
			}
		}
		f = (f + 1)
	}
	return s
}

func mochiMain() {
	var nums []int = []int{6, 28, 120, 496, 672, 8128, 30240, 32760, 523776}
	_ = nums
	for _, n := range nums {
		var s int = sumRecip(n)
		_ = s
		if (s % n) == 0 {
			var val int = (s / n)
			_ = val
			var perfect string = ""
			_ = perfect
			if val == 1 {
				perfect = "perfect!"
			}
			fmt.Println(((((("Sum of recipr. factors of " + fmt.Sprint(n)) + " = ") + fmt.Sprint(val)) + " exactly ") + perfect))
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
