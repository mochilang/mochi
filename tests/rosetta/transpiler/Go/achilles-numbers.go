//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 10:51:18 GMT+7
package main

import (
	"fmt"
	"sort"
)

func pow10(exp int) int {
	var n int = 1
	_ = n
	var i int = 0
	_ = i
	for i < exp {
		n = (n * 10)
		i = (i + 1)
	}
	return n
}

func totient(n int) int {
	var tot int = n
	_ = tot
	var nn int = n
	_ = nn
	var i int = 2
	_ = i
	for (i * i) <= nn {
		if (nn % i) == 0 {
			for (nn % i) == 0 {
				nn = (nn / i)
			}
			tot = (tot - (tot / i))
		}
		if i == 2 {
			i = 1
		}
		i = (i + 2)
	}
	if nn > 1 {
		tot = (tot - (tot / nn))
	}
	return tot
}

var pps map[int]bool

func getPerfectPowers(maxExp int) {
	var upper int = pow10(maxExp)
	_ = upper
	var i int = 2
	_ = i
	for (i * i) < upper {
		var p int = i
		_ = p
		for {
			p = (p * i)
			if p >= upper {
				break
			}
			pps[p] = true
		}
		i = (i + 1)
	}
}

func getAchilles(minExp int, maxExp int) map[int]bool {
	var lower int = pow10(minExp)
	_ = lower
	var upper int = pow10(maxExp)
	_ = upper
	var achilles map[int]bool = map[int]bool{}
	_ = achilles
	var b int = 1
	_ = b
	for ((b * b) * b) < upper {
		var b3 int = ((b * b) * b)
		_ = b3
		var a int = 1
		_ = a
		for {
			var p int = ((b3 * a) * a)
			_ = p
			if p >= upper {
				break
			}
			if p >= lower {
				if !func() bool { _, ok := pps[p]; return ok }() {
					achilles[p] = true
				}
			}
			a = (a + 1)
		}
		b = (b + 1)
	}
	return achilles
}

func sortInts(xs []int) []int {
	var res []int = []int{}
	_ = res
	var tmp []int = xs
	_ = tmp
	for len(tmp) > 0 {
		var min int = tmp[0]
		_ = min
		var idx int = 0
		_ = idx
		var i int = 1
		_ = i
		for i < len(tmp) {
			if tmp[i] < min {
				min = tmp[i]
				idx = i
			}
			i = (i + 1)
		}
		res = func() []int {
			res := make([]int, len(res))
			copy(res, res)
			res = append(res, []int{min}...)
			return res
		}()
		var out []int = []int{}
		_ = out
		var j int = 0
		_ = j
		for j < len(tmp) {
			if j != idx {
				out = func() []int {
					res := make([]int, len(out))
					copy(res, out)
					res = append(res, []int{tmp[j]}...)
					return res
				}()
			}
			j = (j + 1)
		}
		tmp = out
	}
	return res
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	var maxDigits int = 15
	_ = maxDigits
	getPerfectPowers(5)
	var achSet map[int]bool = getAchilles(1, 5)
	_ = achSet
	var ach []int = []int{}
	_ = ach
	for _, k := range func() []any {
		keys := make([]any, 0, len(achSet))
		for kx := range achSet {
			keys = append(keys, kx)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		ach = func() []int { res := make([]int, len(ach)); copy(res, ach); res = append(res, []any{k}...); return res }()
	}
	ach = sortInts(ach)
	fmt.Println("First 50 Achilles numbers:")
	var i int = 0
	_ = i
	for i < 50 {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < 10 {
			line = (line + pad(ach[i], 4))
			if j < 9 {
				line = (line + " ")
			}
			i = (i + 1)
			j = (j + 1)
		}
		fmt.Println(line)
	}
	fmt.Println("\nFirst 30 strong Achilles numbers:")
	var strong []int = []int{}
	_ = strong
	var count int = 0
	_ = count
	var idx int = 0
	_ = idx
	for count < 30 {
		var tot int = totient(ach[idx])
		_ = tot
		if func() bool { _, ok := achSet[tot]; return ok }() {
			strong = func() []int {
				res := make([]int, len(strong))
				copy(res, strong)
				res = append(res, []int{ach[idx]}...)
				return res
			}()
			count = (count + 1)
		}
		idx = (idx + 1)
	}
	i = 0
	for i < 30 {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < 10 {
			line = (line + pad(strong[i], 5))
			if j < 9 {
				line = (line + " ")
			}
			i = (i + 1)
			j = (j + 1)
		}
		fmt.Println(line)
	}
	fmt.Println("\nNumber of Achilles numbers with:")
	var counts []int = []int{1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383}
	_ = counts
	var d int = 2
	_ = d
	for d <= maxDigits {
		var c int = counts[(d - 2)]
		_ = c
		fmt.Println(((pad(d, 2) + " digits: ") + fmt.Sprint(c)))
		d = (d + 1)
	}
}

func main() {
	pps = map[int]bool{}
	mochiMain()
}
