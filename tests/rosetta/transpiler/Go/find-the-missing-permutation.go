//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var given []string

func idx(ch string) int {
	if ch == "A" {
		return 0
	}
	if ch == "B" {
		return 1
	}
	if ch == "C" {
		return 2
	}
	return 3
}

func mochiMain() {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(given[0]) {
		var counts []int = []int{0, 0, 0, 0}
		_ = counts
		for _, p := range given {
			var ch string = _substr(p, i, (i + 1))
			_ = ch
			var j int = idx(ch)
			_ = j
			counts[j] = (counts[j] + 1)
		}
		var j int = 0
		_ = j
		for j < 4 {
			if (counts[j] % 2) == 1 {
				if j == 0 {
					res = (res + "A")
				} else {
					if j == 1 {
						res = (res + "B")
					} else {
						if j == 2 {
							res = (res + "C")
						} else {
							res = (res + "D")
						}
					}
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	fmt.Println(res)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		given = []string{"ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
