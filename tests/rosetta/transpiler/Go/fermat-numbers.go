//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:25:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func pow_int(base int, exp int) int {
	var result int = 1
	_ = result
	var b int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if (e % 2) == 1 {
			result = (result * b)
		}
		b = (b * b)
		e = int((e / 2))
	}
	return result
}

func pow_big(base *big.Int, exp int) *big.Int {
	var result *big.Int = big.NewInt(int64(1))
	_ = result
	var b *big.Int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if (e % 2) == 1 {
			result = new(big.Int).Mul(result, b)
		}
		b = new(big.Int).Mul(b, b)
		e = int((e / 2))
	}
	return result
}

func parseBigInt(str string) *big.Int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (_substr(str, 0, 1) == "-") {
		neg = true
		i = 1
	}
	var n *big.Int = big.NewInt(int64(0))
	_ = n
	for i < len(str) {
		var ch string = _substr(str, i, (i + 1))
		_ = ch
		_ = ch
		var d int = func() int { n, _ := strconv.Atoi(ch); return n }()
		_ = d
		n = new(big.Int).Add(new(big.Int).Mul(n, big.NewInt(int64(10))), big.NewInt(int64(d)))
		i = (i + 1)
	}
	if neg {
		n = new(big.Int).Sub(big.NewInt(0), n)
	}
	return n
}

func fermat(n int) *big.Int {
	var p int = pow_int(2, n)
	_ = p
	_ = p
	return new(big.Int).Add(pow_big(big.NewInt(int64(2)), p), big.NewInt(int64(1)))
}

func primeFactorsBig(n *big.Int) []*big.Int {
	var factors []*big.Int = []*big.Int{}
	_ = factors
	var m *big.Int = n
	_ = m
	var d *big.Int = big.NewInt(int64(2))
	_ = d
	for int(new(big.Int).Mod(m, d).Int64()) == 0 {
		factors = append(factors, d)
		m = new(big.Int).Div(m, d)
	}
	d = big.NewInt(int64(3))
	for func() bool { return new(big.Int).Mul(d, d).Cmp(m) <= 0 }() {
		for int(new(big.Int).Mod(m, d).Int64()) == 0 {
			factors = append(factors, d)
			m = new(big.Int).Div(m, d)
		}
		d = new(big.Int).Add(d, big.NewInt(int64(2)))
	}
	if int(m.Int64()) > 1 {
		factors = append(factors, m)
	}
	return factors
}

func show_list(xs []*big.Int) string {
	var line string = ""
	_ = line
	var i int = 0
	_ = i
	for i < len(xs) {
		line = (line + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			line = (line + " ")
		}
		i = (i + 1)
	}
	return line
}

func mochiMain() {
	var nums []*big.Int = []*big.Int{}
	_ = nums
	for i := 0; i < 8; i++ {
		nums = append(nums, fermat(i))
	}
	fmt.Println("First 8 Fermat numbers:")
	for _, n := range nums {
		fmt.Println(fmt.Sprint(n))
	}
	var extra map[int][]*big.Int = map[int][]*big.Int{6: []*big.Int{big.NewInt(int64(274177)), big.NewInt(int64(67280421310721))}, 7: []*big.Int{parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721")}}
	_ = extra
	fmt.Println("\nFactors:")
	var i int = 0
	_ = i
	for i < len(nums) {
		var facs []*big.Int = []*big.Int{}
		_ = facs
		if i <= 5 {
			facs = primeFactorsBig(nums[i])
		} else {
			facs = extra[i]
		}
		fmt.Println(((("F" + fmt.Sprint(i)) + " = ") + show_list(func(v any) []*big.Int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]*big.Int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []*big.Int{}
				}
				out := make([]*big.Int, len(arr))
				for i, x := range arr {
					out[i] = x.(*big.Int)
				}
				return out
			}
			return v.([]*big.Int)
		}(facs))))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
