//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:29:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func search_user(directory map[string][]string, username string) []string {
	return directory[username]
}

func mochiMain() {
	client := map[string]any{"Base": "dc=example,dc=com", "Host": "ldap.example.com", "Port": 389, "GroupFilter": "(memberUid=%s)"}
	_ = client
	_ = client
	directory := map[string][]string{"username": []string{"admins", "users"}, "john": []string{"users"}}
	_ = directory
	var groups []string = search_user(directory, "username")
	_ = groups
	if len(groups) > 0 {
		var out string = "Groups: ["
		_ = out
		var i int = 0
		_ = i
		for i < len(groups) {
			out = (((out + "\"") + groups[i]) + "\"")
			if i < (len(groups) - 1) {
				out = (out + ", ")
			}
			i = (i + 1)
		}
		out = (out + "]")
		fmt.Println(out)
	} else {
		fmt.Println("User not found")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
