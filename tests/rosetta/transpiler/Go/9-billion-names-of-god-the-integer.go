//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 10:45:07 GMT+7
package main

import (
	"fmt"
)

func bigTrim(a []int) []int {
	var n int = len(a)
	_ = n
	for (n > 1) && (a[(n-1)] == 0) {
		a = a[0:(n - 1)]
		n = (n - 1)
	}
	return a
}

func bigFromInt(x int) []int {
	if x == 0 {
		return []int{0}
	}
	var digits []int = []int{}
	_ = digits
	var n int = x
	_ = n
	for n > 0 {
		digits = append(digits, (n % 10))
		n = (n / 10)
	}
	return digits
}

func bigAdd(a []int, b []int) []int {
	var res []int = []int{}
	_ = res
	var carry int = 0
	_ = carry
	var i int = 0
	_ = i
	for ((i < len(a)) || (i < len(b))) || (carry > 0) {
		var av int = 0
		_ = av
		if i < len(a) {
			av = a[i]
		}
		var bv int = 0
		_ = bv
		if i < len(b) {
			bv = b[i]
		}
		var s int = ((av + bv) + carry)
		_ = s
		res = append(res, (s % 10))
		carry = (s / 10)
		i = (i + 1)
	}
	return bigTrim(res)
}

func bigSub(a []int, b []int) []int {
	var res []int = []int{}
	_ = res
	var borrow int = 0
	_ = borrow
	var i int = 0
	_ = i
	for i < len(a) {
		var av int = a[i]
		_ = av
		var bv int = 0
		_ = bv
		if i < len(b) {
			bv = b[i]
		}
		var diff int = ((av - bv) - borrow)
		_ = diff
		if diff < 0 {
			diff = (diff + 10)
			borrow = 1
		} else {
			borrow = 0
		}
		res = append(res, diff)
		i = (i + 1)
	}
	return bigTrim(res)
}

func bigToString(a []int) string {
	var s string = ""
	_ = s
	var i int = (len(a) - 1)
	_ = i
	for i >= 0 {
		s = (s + fmt.Sprint(a[i]))
		i = (i - 1)
	}
	return s
}

func minInt(a int, b int) int {
	if a < b {
		return a
	} else {
		return b
	}
}

func cumu(n int) [][]int {
	var cache [][][]int = [][][]int{[][]int{bigFromInt(1)}}
	_ = cache
	var y int = 1
	_ = y
	for y <= n {
		var row [][]int = [][]int{bigFromInt(0)}
		_ = row
		var x int = 1
		_ = x
		for x <= y {
			var val []int = cache[(y - x)][minInt(x, (y-x))]
			_ = val
			row = append(row, bigAdd(row[(len(row)-1)], val))
			x = (x + 1)
		}
		cache = append(cache, row)
		y = (y + 1)
	}
	return cache[n]
}

func row(n int) []string {
	var e [][]int = cumu(n)
	_ = e
	var out []string = []string{}
	_ = out
	var i int = 0
	_ = i
	for i < n {
		var diff []int = bigSub(e[(i+1)], e[i])
		_ = diff
		out = append(out, bigToString(diff))
		i = (i + 1)
	}
	return out
}

var x int

func main() {
	fmt.Println("rows:")
	x = 1
	for x < 11 {
		var r []string = row(x)
		_ = r
		var line string = ""
		_ = line
		var i int = 0
		_ = i
		for i < len(r) {
			line = (((line + " ") + r[i]) + " ")
			i = (i + 1)
		}
		fmt.Println(line)
		x = (x + 1)
	}
	fmt.Println("")
	fmt.Println("sums:")
	for _, num := range []int{23, 123, 1234} {
		var r [][]int = cumu(num)
		_ = r
		fmt.Println(((fmt.Sprint(num) + " ") + bigToString(r[(len(r)-1)])))
	}
}
