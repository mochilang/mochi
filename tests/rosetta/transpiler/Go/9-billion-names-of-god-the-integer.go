//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:14:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bigTrim(a []int) []int {
	var n int = len(a)
	_ = n
	for (n > 1) && (a[(n-1)] == 0) {
		a = a[0:(n - 1)]
		n = (n - 1)
	}
	return a
}

func bigFromInt(x int) []int {
	if x == 0 {
		return []int{0}
	}
	var digits []int = []int{}
	_ = digits
	var n int = x
	_ = n
	for n > 0 {
		digits = append(digits, (n % 10))
		n = (n / 10)
	}
	return digits
}

func bigAdd(a []int, b []int) []int {
	var res []int = []int{}
	_ = res
	var carry int = 0
	_ = carry
	var i int = 0
	_ = i
	for ((i < len(a)) || (i < len(b))) || (carry > 0) {
		var av int = 0
		_ = av
		if i < len(a) {
			av = a[i]
		}
		var bv int = 0
		_ = bv
		if i < len(b) {
			bv = b[i]
		}
		var s int = ((av + bv) + carry)
		_ = s
		res = append(res, (s % 10))
		carry = (s / 10)
		i = (i + 1)
	}
	return bigTrim(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res))
}

func bigSub(a []int, b []int) []int {
	var res []int = []int{}
	_ = res
	var borrow int = 0
	_ = borrow
	var i int = 0
	_ = i
	for i < len(a) {
		var av int = a[i]
		_ = av
		var bv int = 0
		_ = bv
		if i < len(b) {
			bv = b[i]
		}
		var diff int = ((av - bv) - borrow)
		_ = diff
		if diff < 0 {
			diff = (diff + 10)
			borrow = 1
		} else {
			borrow = 0
		}
		res = append(res, diff)
		i = (i + 1)
	}
	return bigTrim(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(res))
}

func bigToString(a []int) string {
	var s string = ""
	_ = s
	var i int = (len(a) - 1)
	_ = i
	for i >= 0 {
		s = (s + fmt.Sprint(a[i]))
		i = (i - 1)
	}
	return s
}

func minInt(a int, b int) int {
	if a < b {
		return a
	} else {
		return b
	}
}

func cumu(n int) [][]int {
	var cache [][][]int = [][][]int{[][]int{bigFromInt(1)}}
	_ = cache
	var y int = 1
	_ = y
	for y <= n {
		var row [][]int = [][]int{bigFromInt(0)}
		_ = row
		var x int = 1
		_ = x
		for x <= y {
			var val []int = cache[(y - x)][minInt(x, (y-x))]
			_ = val
			row = append(row, bigAdd(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(row[(len(row)-1)]), func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(val)))
			x = (x + 1)
		}
		cache = append(cache, row)
		y = (y + 1)
	}
	return cache[n]
}

func row(n int) []string {
	var e [][]int = cumu(n)
	_ = e
	var out []string = []string{}
	_ = out
	var i int = 0
	_ = i
	for i < n {
		var diff []int = bigSub(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(e[(i+1)]), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(e[i]))
		_ = diff
		out = append(out, bigToString(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(diff)))
		i = (i + 1)
	}
	return out
}

var x int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("rows:")
		x = 1
		for x < 11 {
			var r []string = row(x)
			_ = r
			var line string = ""
			_ = line
			var i int = 0
			_ = i
			for i < len(r) {
				line = (((line + " ") + r[i]) + " ")
				i = (i + 1)
			}
			fmt.Println(line)
			x = (x + 1)
		}
		fmt.Println("")
		fmt.Println("sums:")
		for _, num := range []int{23, 123, 1234} {
			var r [][]int = cumu(num)
			_ = r
			fmt.Println(((fmt.Sprint(num) + " ") + bigToString(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(r[(len(r)-1)]))))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
