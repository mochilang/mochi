//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func parseBigInt(str string) *big.Int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (_substr(str, 0, 1) == "-") {
		neg = true
		i = 1
	}
	var n *big.Int = big.NewInt(int64(0))
	_ = n
	for i < len(str) {
		var ch string = _substr(str, i, (i + 1))
		_ = ch
		_ = ch
		var d int = func() int { n, _ := strconv.Atoi(ch); return n }()
		_ = d
		n = new(big.Int).Add(new(big.Int).Mul(n, big.NewInt(int64(10))), big.NewInt(int64(d)))
		i = (i + 1)
	}
	if neg {
		n = new(big.Int).Sub(big.NewInt(0), n)
	}
	return n
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func showInt(n int) {
	var line string = (("Testing integer " + pad(n, 3)) + ":  ")
	_ = line
	if (n % 2) == 0 {
		line = (line + "even ")
	} else {
		line = (line + " odd ")
	}
	if (n % 2) == 0 {
		line = (line + "even")
	} else {
		line = (line + " odd")
	}
	fmt.Println(line)
}

func showBig(s string) {
	var b *big.Int = parseBigInt(s)
	_ = b
	var line string = (("Testing big integer " + fmt.Sprint(b)) + ":  ")
	_ = line
	if func() bool { return new(big.Int).Mod(b, big.NewInt(int64(2))).Cmp(big.NewInt(int64(0))) == 0 }() {
		line = (line + "even")
	} else {
		line = (line + "odd")
	}
	fmt.Println(line)
}

func mochiMain() {
	showInt((0 - 2))
	showInt((0 - 1))
	showInt(0)
	showInt(1)
	showInt(2)
	showBig("-222222222222222222222222222222222222")
	showBig("-1")
	showBig("0")
	showBig("1")
	showBig("222222222222222222222222222222222222")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
