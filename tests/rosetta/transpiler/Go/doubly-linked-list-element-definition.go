//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func Node(value string, next any, prev any) map[string]any {
	return map[string]any{"value": value, "next": next, "prev": prev}
}

func mochiMain() {
	var a map[string]any = Node("A", nil, nil)
	_ = a
	var b map[string]any = Node("B", nil, a)
	_ = b
	a["next"] = b
	var c map[string]any = Node("C", nil, b)
	_ = c
	b["next"] = c
	var p map[string]any = a
	_ = p
	var line string = ""
	_ = line
	for p != nil {
		line = (line + p["value"].(string))
		p = func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(p["next"])
		if p != nil {
			line = (line + " ")
		}
	}
	fmt.Println(line)
	p = c
	line = ""
	for p != nil {
		line = (line + p["value"].(string))
		p = func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(p["prev"])
		if p != nil {
			line = (line + " ")
		}
	}
	fmt.Println(line)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
