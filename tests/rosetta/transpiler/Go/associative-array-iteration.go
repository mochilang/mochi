//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:01:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mochiMain() {
	var m map[string]int = map[string]int{"hello": 13, "world": 31, "!": 71}
	_ = m
	for _, _ch := range func() []string {
		keys := make([]string, 0, len(m))
		for kx := range m {
			keys = append(keys, kx)
		}
		sort.Strings(keys)
		return keys
	}() {
		k := string(_ch)
		fmt.Println(((("key = " + k) + ", value = ") + fmt.Sprint(m[k])))
	}
	for _, _ch := range func() []string {
		keys := make([]string, 0, len(m))
		for kx := range m {
			keys = append(keys, kx)
		}
		sort.Strings(keys)
		return keys
	}() {
		k := string(_ch)
		fmt.Println(("key = " + k))
	}
	for _, _ch := range func() []string {
		keys := make([]string, 0, len(m))
		for kx := range m {
			keys = append(keys, kx)
		}
		sort.Strings(keys)
		return keys
	}() {
		k := string(_ch)
		fmt.Println(("value = " + fmt.Sprint(m[k])))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
