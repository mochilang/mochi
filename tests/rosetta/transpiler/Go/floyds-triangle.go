//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 17:34:46 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func floyd(n int) {
	fmt.Println((("Floyd " + fmt.Sprint(n)) + ":"))
	var lowerLeftCorner int = (((n * (n - 1)) / 2) + 1)
	_ = lowerLeftCorner
	var lastInColumn int = lowerLeftCorner
	_ = lastInColumn
	var lastInRow int = 1
	_ = lastInRow
	var i int = 1
	_ = i
	var row int = 1
	_ = row
	var line string = ""
	_ = line
	for row <= n {
		var w int = len(fmt.Sprint(lastInColumn))
		_ = w
		if i < lastInRow {
			line = ((line + pad(fmt.Sprint(i), w)) + " ")
			lastInColumn = (lastInColumn + 1)
		} else {
			line = (line + pad(fmt.Sprint(i), w))
			fmt.Println(line)
			line = ""
			row = (row + 1)
			lastInRow = (lastInRow + row)
			lastInColumn = lowerLeftCorner
		}
		i = (i + 1)
	}
}

func pad(s string, w int) string {
	var t string = s
	_ = t
	for len(t) < w {
		t = (" " + t)
	}
	return t
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		floyd(5)
		floyd(14)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
