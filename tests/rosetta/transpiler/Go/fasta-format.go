//go:build ignore

// Generated by Mochi v0.10.55 on 2025-08-02 17:45:45 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var FASTA string

func splitLines(s string) []string {
	var lines []string = []string{}
	_ = lines
	var start int = 0
	_ = start
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == "\n" {
			lines = append(lines, _substr(s, start, i))
			i = (i + 1)
			start = i
		} else {
			i = (i + 1)
		}
	}
	lines = append(lines, _substr(s, start, len(s)))
	return lines
}

func parseFasta(text string) []string {
	var key string = ""
	_ = key
	var val string = ""
	_ = val
	var out []string = []string{}
	_ = out
	for _, line := range splitLines(text) {
		if line == "" {
			continue
		}
		if _substr(line, 0, 1) == ">" {
			if key != "" {
				out = append(out, ((key + ": ") + val))
			}
			var hdr string = _substr(line, 1, len(line))
			_ = hdr
			var idx int = 0
			_ = idx
			for (idx < len(hdr)) && (_substr(hdr, idx, (idx+1)) != " ") {
				idx = (idx + 1)
			}
			key = _substr(hdr, 0, idx)
			val = ""
		} else {
			if key == "" {
				fmt.Println("missing header")
				return func(v any) []string {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]string); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []string{}
						}
						out := make([]string, len(arr))
						for i, x := range arr {
							out[i] = x.(string)
						}
						return out
					}
					return v.([]string)
				}([]any{})
			}
			val = (val + line)
		}
	}
	if key != "" {
		out = append(out, ((key + ": ") + val))
	}
	return out
}

func mochiMain() {
	var res []string = parseFasta(FASTA)
	_ = res
	for _, line := range res {
		fmt.Println(line)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		FASTA = (((((">Rosetta_Example_1\n" + "THERECANBENOSPACE\n") + ">Rosetta_Example_2\n") + "THERECANBESEVERAL\n") + "LINESBUTTHEYALLMUST\n") + "BECONCATENATED")
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
