//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 13:17:26 GMT+7
package main

import (
	"fmt"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var PI float64

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 8 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func cosApprox(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 8 {
		var denom float64 = float64((((2 * n) - 1) * (2 * n)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func atanApprox(x float64) float64 {
	if x > 1.0 {
		return ((PI / 2.0) - (x / ((x * x) + 0.28)))
	}
	if x < (0 - 1.0) {
		return (((0 - PI) / 2.0) - (x / ((x * x) + 0.28)))
	}
	return (x / (1.0 + ((0.28 * x) * x)))
}

func atan2Approx(y float64, x float64) float64 {
	if x > 0.0 {
		return atanApprox((y / x))
	}
	if x < 0.0 {
		if y >= 0.0 {
			return (atanApprox((y / x)) + PI)
		}
		return (atanApprox((y / x)) - PI)
	}
	if y > 0.0 {
		return (PI / 2.0)
	}
	if y < 0.0 {
		return ((0 - PI) / 2.0)
	}
	return 0.0
}

func digit(ch string) int {
	var digits string = "0123456789"
	_ = digits
	var i int = 0
	_ = i
	for i < len(digits) {
		if _substr(digits, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return 0
}

func parseTwo(s string, idx int) int {
	return ((digit(_substr(s, idx, (idx+1))) * 10) + digit(_substr(s, (idx+1), (idx+2))))
}

func parseSec(s string) float64 {
	var h int = parseTwo(s, 0)
	_ = h
	var m int = parseTwo(s, 3)
	_ = m
	var sec int = parseTwo(s, 6)
	_ = sec
	return float64(((((h * 60) + m) * 60) + sec))
}

func pad(n int) string {
	if n < 10 {
		return ("0" + fmt.Sprint(n))
	}
	return fmt.Sprint(n)
}

func meanTime(times []string) string {
	var ssum float64 = 0.0
	_ = ssum
	var csum float64 = 0.0
	_ = csum
	var i int = 0
	_ = i
	for i < len(times) {
		var sec float64 = parseSec(times[i])
		_ = sec
		var ang float64 = (((sec * 2.0) * PI) / 86400.0)
		_ = ang
		ssum = (ssum + sinApprox(ang))
		csum = (csum + cosApprox(ang))
		i = (i + 1)
	}
	var theta float64 = atan2Approx(ssum, csum)
	_ = theta
	var frac float64 = (theta / (2.0 * PI))
	_ = frac
	for frac < 0.0 {
		frac = (frac + 1.0)
	}
	var total float64 = (frac * 86400.0)
	_ = total
	var si int = int(total)
	_ = si
	var h int = int((si / 3600))
	_ = h
	var m int = int(((si % 3600) / 60))
	_ = m
	var s int = int((si % 60))
	_ = s
	return ((((pad(h) + ":") + pad(m)) + ":") + pad(s))
}

func mochiMain() {
	var inputs []string = []string{"23:00:17", "23:40:20", "00:12:45", "00:17:19"}
	_ = inputs
	fmt.Println(meanTime(inputs))
}

func main() {
	PI = 3.141592653589793
	mochiMain()
}
