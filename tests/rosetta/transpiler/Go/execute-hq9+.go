//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:35 GMT+7
package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var _scanner = bufio.NewScanner(os.Stdin)

func _input() string {
	if !_scanner.Scan() {
		return ""
	}
	return _scanner.Text()
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func bottles(n int) string {
	if n == 0 {
		return "No more bottles"
	}
	if n == 1 {
		return "1 bottle"
	}
	return (fmt.Sprint(n) + " bottles")
}

func sing99() {
	var i int = 99
	_ = i
	for i > 0 {
		fmt.Println((bottles(i) + " of beer on the wall"))
		fmt.Println((bottles(i) + " of beer"))
		fmt.Println("Take one down, pass it around")
		fmt.Println((bottles((i - 1)) + " of beer on the wall"))
		i = (i - 1)
	}
}

func run(code string) {
	var acc int = 0
	_ = acc
	var i int = 0
	_ = i
	for i < len(code) {
		var ch string = _substr(code, i, (i + 1))
		_ = ch
		if ch == "H" {
			fmt.Println("Hello, World!")
		} else {
			if ch == "Q" {
				fmt.Println(code)
			} else {
				if ch == "9" {
					sing99()
				} else {
					if ch == "+" {
						acc = (acc + 1)
					}
				}
			}
		}
		i = (i + 1)
	}
}

func mochiMain() {
	var code string = _input()
	_ = code
	run(code)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
