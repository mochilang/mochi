//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:26:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type MDRResult struct {
	Mp  int `json:"mp"`
	Mdr int `json:"mdr"`
}

func pad(s string, width int) string {
	var out string = s
	for len(out) < width {
		out = (" " + out)
	}
	return out
}

func mult(n *big.Int, base int) *big.Int {
	var m *big.Int = big.NewInt(int64(1))
	var x *big.Int = n
	var b *big.Int = big.NewInt(int64(base))
	for func() bool { return x.Cmp(big.NewInt(int64(0))) > 0 }() {
		m = new(big.Int).Mul(m, new(big.Int).Mod(x, b))
		x = new(big.Int).Div(x, b)
	}
	return m
}

func multDigitalRoot(n *big.Int, base int) MDRResult {
	var m *big.Int = n
	var mp int = 0
	var b *big.Int = big.NewInt(int64(base))
	_ = b
	for func() bool { return m.Cmp(b) >= 0 }() {
		m = mult(m, base)
		mp = (mp + 1)
	}
	return MDRResult{
		Mp:  mp,
		Mdr: int(m.Int64()),
	}
}

func mochiMain() {
	var base int = 10
	var size int = 5
	fmt.Println(((((pad("Number", 20) + " ") + pad("MDR", 3)) + " ") + pad("MP", 3)))
	var nums []*big.Int = []*big.Int{big.NewInt(int64(123321)), big.NewInt(int64(7739)), big.NewInt(int64(893)), big.NewInt(int64(899998)), big.NewInt(int64(3778888999)), big.NewInt(int64(277777788888899))}
	var i int = 0
	for i < len(nums) {
		var n *big.Int = nums[i]
		var r MDRResult = multDigitalRoot(n, base)
		fmt.Println(((((pad(fmt.Sprint(n), 20) + " ") + pad(fmt.Sprint(r.Mdr), 3)) + " ") + pad(fmt.Sprint(r.Mp), 3)))
		i = (i + 1)
	}
	fmt.Println("")
	var list [][]int = [][]int{}
	var idx int = 0
	for idx < base {
		list = append(list, []int{})
		idx = (idx + 1)
	}
	var cnt int = (size * base)
	var n *big.Int = big.NewInt(int64(0))
	var b *big.Int = big.NewInt(int64(base))
	_ = b
	for cnt > 0 {
		var r MDRResult = multDigitalRoot(n, base)
		var mdr int = r.Mdr
		if len(list[mdr]) < size {
			list[mdr] = append(list[mdr], int(n.Int64()))
			cnt = (cnt - 1)
		}
		n = new(big.Int).Add(n, big.NewInt(int64(1)))
	}
	fmt.Println("MDR: First")
	var j int = 0
	for j < base {
		fmt.Println(((pad(fmt.Sprint(j), 3) + ": ") + fmt.Sprint(list[j])))
		j = (j + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
