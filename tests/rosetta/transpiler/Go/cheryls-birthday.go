//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:33:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Birthday struct {
	Month int `json:"month"`
	Day   int `json:"day"`
}

func monthUnique(b Birthday, list []Birthday) bool {
	var c int = 0
	_ = c
	for _, x := range list {
		if x.Month == b.Month {
			c = (c + 1)
		}
	}
	return (c == 1)
}

func dayUnique(b Birthday, list []Birthday) bool {
	var c int = 0
	_ = c
	for _, x := range list {
		if x.Day == b.Day {
			c = (c + 1)
		}
	}
	return (c == 1)
}

func monthWithUniqueDay(b Birthday, list []Birthday) bool {
	for _, x := range list {
		if (x.Month == b.Month) && dayUnique(x, func(v any) []Birthday {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Birthday); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Birthday{}
				}
				out := make([]Birthday, len(arr))
				for i, x := range arr {
					out[i] = x.(Birthday)
				}
				return out
			}
			return v.([]Birthday)
		}(list)) {
			return true
		}
	}
	return false
}

func bstr(b Birthday) string {
	var months []string = []string{"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
	_ = months
	_ = months
	return ((months[b.Month] + " ") + fmt.Sprint(b.Day))
}

var choices []Birthday

var filtered []Birthday

var filtered2 []Birthday

var filtered3 []Birthday

var filtered4 []Birthday

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		choices = []Birthday{Birthday{
			Month: 5,
			Day:   15,
		}, Birthday{
			Month: 5,
			Day:   16,
		}, Birthday{
			Month: 5,
			Day:   19,
		}, Birthday{
			Month: 6,
			Day:   17,
		}, Birthday{
			Month: 6,
			Day:   18,
		}, Birthday{
			Month: 7,
			Day:   14,
		}, Birthday{
			Month: 7,
			Day:   16,
		}, Birthday{
			Month: 8,
			Day:   14,
		}, Birthday{
			Month: 8,
			Day:   15,
		}, Birthday{
			Month: 8,
			Day:   17,
		}}
		filtered = []Birthday{}
		for _, bd := range choices {
			if !monthUnique(bd, func(v any) []Birthday {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Birthday); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Birthday{}
					}
					out := make([]Birthday, len(arr))
					for i, x := range arr {
						out[i] = x.(Birthday)
					}
					return out
				}
				return v.([]Birthday)
			}(choices)) {
				filtered = append(filtered, bd)
			}
		}
		filtered2 = []Birthday{}
		for _, bd := range filtered {
			if !monthWithUniqueDay(bd, func(v any) []Birthday {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Birthday); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Birthday{}
					}
					out := make([]Birthday, len(arr))
					for i, x := range arr {
						out[i] = x.(Birthday)
					}
					return out
				}
				return v.([]Birthday)
			}(filtered)) {
				filtered2 = append(filtered2, bd)
			}
		}
		filtered3 = []Birthday{}
		for _, bd := range filtered2 {
			if dayUnique(bd, func(v any) []Birthday {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Birthday); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Birthday{}
					}
					out := make([]Birthday, len(arr))
					for i, x := range arr {
						out[i] = x.(Birthday)
					}
					return out
				}
				return v.([]Birthday)
			}(filtered2)) {
				filtered3 = append(filtered3, bd)
			}
		}
		filtered4 = []Birthday{}
		for _, bd := range filtered3 {
			if monthUnique(bd, func(v any) []Birthday {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]Birthday); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []Birthday{}
					}
					out := make([]Birthday, len(arr))
					for i, x := range arr {
						out[i] = x.(Birthday)
					}
					return out
				}
				return v.([]Birthday)
			}(filtered3)) {
				filtered4 = append(filtered4, bd)
			}
		}
		if len(filtered4) == 1 {
			fmt.Println(("Cheryl's birthday is " + bstr(filtered4[0])))
		} else {
			fmt.Println("Something went wrong!")
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
