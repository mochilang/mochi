//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:15:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func parseBool(s string) bool {
	var l string = strings.ToLower(s)
	_ = l
	if ((((l == "1") || (l == "t")) || (l == true)) || (l == "yes")) || (l == "y") {
		return true
	}
	return false
}

func mochiMain() {
	var n bool = true
	_ = n
	fmt.Println(n)
	fmt.Println("bool")
	n = !n
	fmt.Println(n)
	var x int = 5
	_ = x
	var y int = 8
	_ = y
	fmt.Println("x == y:", func() int {
		if x == y {
			return 1
		}
		return 0
	}())
	fmt.Println("x < y:", func() int {
		if x < y {
			return 1
		}
		return 0
	}())
	fmt.Println("\nConvert String into Boolean Data type\n")
	var str1 string = "japan"
	_ = str1
	fmt.Println("Before :", "string")
	var bolStr bool = parseBool(str1)
	_ = bolStr
	fmt.Println("After :", "bool")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
