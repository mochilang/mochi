//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 23:49:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func quibble(items []string) string {
	var n int = len(items)
	_ = n
	if n == 0 {
		return "{}"
	} else {
		if n == 1 {
			return (("{" + items[0]) + "}")
		} else {
			if n == 2 {
				return (((("{" + items[0]) + " and ") + items[1]) + "}")
			} else {
				var prefix string = ""
				_ = prefix
				for i := 0; i < (n - 1); i++ {
					if i == (n - 1) {
						break
					}
					if i > 0 {
						prefix = (prefix + ", ")
					}
					prefix = (prefix + items[i])
				}
				return (((("{" + prefix) + " and ") + items[(n-1)]) + "}")
			}
		}
	}
}

func mochiMain() {
	fmt.Println(quibble([]string{}))
	fmt.Println(quibble([]string{"ABC"}))
	fmt.Println(quibble([]string{"ABC", "DEF"}))
	fmt.Println(quibble([]string{"ABC", "DEF", "G", "H"}))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
