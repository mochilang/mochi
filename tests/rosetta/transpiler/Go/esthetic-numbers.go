//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:49:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var digits string

func toBase(n int, b int) string {
	if n == 0 {
		return "0"
	}
	var v int = n
	_ = v
	var out string = ""
	_ = out
	for v > 0 {
		var d int = (v % b)
		_ = d
		out = (string([]rune(digits)[d:(d+1)]) + out)
		v = (v / b)
	}
	return out
}

func uabs(a int, b int) int {
	if a > b {
		return (a - b)
	}
	return (b - a)
}

func isEsthetic(n int, b int) bool {
	if n == 0 {
		return false
	}
	var i int = (n % b)
	_ = i
	n = (n / b)
	for n > 0 {
		var j int = (n % b)
		_ = j
		if uabs(i, j) != 1 {
			return false
		}
		n = (n / b)
		i = j
	}
	return true
}

var esths []int

func dfs(n int, m int, i int) {
	if (i >= n) && (i <= m) {
		esths = append(esths, i)
	}
	if (i == 0) || (i > m) {
		return
	}
	var d int = (i % 10)
	_ = d
	var i1 int = (((i * 10) + d) - 1)
	_ = i1
	var i2 int = (i1 + 2)
	_ = i2
	if d == 0 {
		dfs(n, m, i2)
	} else {
		if d == 9 {
			dfs(n, m, i1)
		} else {
			dfs(n, m, i1)
			dfs(n, m, i2)
		}
	}
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var i int = (len(s) - 3)
	_ = i
	for i >= 1 {
		s = ((string([]rune(s)[0:i]) + ",") + string([]rune(s)[i:len(s)]))
		i = (i - 3)
	}
	return s
}

func listEsths(n int, n2 int, m int, m2 int, perLine int, showAll bool) {
	esths = []int{}
	var i int = 0
	_ = i
	for i < 10 {
		dfs(n2, m2, i)
		i = (i + 1)
	}
	var le int = len(esths)
	_ = le
	fmt.Println((((((("Base 10: " + commatize(le)) + " esthetic numbers between ") + commatize(n)) + " and ") + commatize(m)) + ":"))
	if showAll {
		var c int = 0
		_ = c
		var line string = ""
		_ = line
		for _, v := range esths {
			if len(line) > 0 {
				line = (line + " ")
			}
			line = (line + fmt.Sprint(v))
			c = (c + 1)
			if (c % perLine) == 0 {
				fmt.Println(line)
				line = ""
			}
		}
		if len(line) > 0 {
			fmt.Println(line)
		}
	} else {
		var line string = ""
		_ = line
		var idx int = 0
		_ = idx
		for idx < perLine {
			if len(line) > 0 {
				line = (line + " ")
			}
			line = (line + fmt.Sprint(esths[idx]))
			idx = (idx + 1)
		}
		fmt.Println(line)
		fmt.Println("............")
		line = ""
		idx = (le - perLine)
		for idx < le {
			if len(line) > 0 {
				line = (line + " ")
			}
			line = (line + fmt.Sprint(esths[idx]))
			idx = (idx + 1)
		}
		fmt.Println(line)
	}
	fmt.Println("")
}

func mochiMain() {
	var b int = 2
	_ = b
	for b <= 16 {
		var start int = (4 * b)
		_ = start
		var stop int = (6 * b)
		_ = stop
		fmt.Println((((((("Base " + fmt.Sprint(b)) + ": ") + fmt.Sprint(start)) + "th to ") + fmt.Sprint(stop)) + "th esthetic numbers:"))
		var n int = 1
		_ = n
		var c int = 0
		_ = c
		var line string = ""
		_ = line
		for c < stop {
			if isEsthetic(n, b) {
				c = (c + 1)
				if c >= start {
					if len(line) > 0 {
						line = (line + " ")
					}
					line = (line + toBase(n, b))
				}
			}
			n = (n + 1)
		}
		fmt.Println(line)
		fmt.Println("")
		b = (b + 1)
	}
	listEsths(1000, 1010, 9999, 9898, 16, true)
	listEsths(100000000, 101010101, 130000000, 123456789, 9, true)
	listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false)
	listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false)
	listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		digits = "0123456789abcdef"
		esths = []int{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
