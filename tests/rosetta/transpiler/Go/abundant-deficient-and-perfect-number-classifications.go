//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 14:51:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func pfacSum(i int) int {
	var sum int = 0
	_ = sum
	var p int = 1
	_ = p
	for p <= (i / 2) {
		if (i % p) == 0 {
			sum = (sum + p)
		}
		p = (p + 1)
	}
	return sum
}

func mochiMain() {
	var d int = 0
	_ = d
	var a int = 0
	_ = a
	var pnum int = 0
	_ = pnum
	var i int = 1
	_ = i
	for i <= 20000 {
		var j int = pfacSum(i)
		_ = j
		if j < i {
			d = (d + 1)
		}
		if j == i {
			pnum = (pnum + 1)
		}
		if j > i {
			a = (a + 1)
		}
		i = (i + 1)
	}
	fmt.Println((("There are " + fmt.Sprint(d)) + " deficient numbers between 1 and 20000"))
	fmt.Println((("There are " + fmt.Sprint(a)) + " abundant numbers  between 1 and 20000"))
	fmt.Println((("There are " + fmt.Sprint(pnum)) + " perfect numbers between 1 and 20000"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
