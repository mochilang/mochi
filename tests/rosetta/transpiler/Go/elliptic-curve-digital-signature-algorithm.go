//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:56:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mochiMain() {
	fmt.Println("Private key:\nD: 1234567890")
	fmt.Println("\nPublic key:")
	fmt.Println("X: 43162711582587979080031819627904423023685561091192625653251495188141318209988")
	fmt.Println("Y: 86807430002474105664458509423764867536342689150582922106807036347047552480521")
	fmt.Println("\nMessage: Rosetta Code")
	fmt.Println("Hash   : 0xe6f9ed0d")
	fmt.Println("\nSignature:")
	fmt.Println("R: 23195197793674669608400023921033380707595656606710353926508630347378485682379")
	fmt.Println("S: 79415614279862633473653728365954499259635019180091322566320325357594590761922")
	fmt.Println("\nSignature verified: true")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
