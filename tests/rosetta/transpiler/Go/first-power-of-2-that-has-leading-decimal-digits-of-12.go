//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var i int = (len(s) % 3)
	_ = i
	if i == 0 {
		i = 3
	}
	var out string = _substr(s, 0, i)
	_ = out
	for i < len(s) {
		out = ((out + ",") + _substr(s, i, (i+3)))
		i = (i + 3)
	}
	return out
}

func p(L int, n int) int {
	var Ls string = fmt.Sprint(L)
	_ = Ls
	var digits int = 1
	_ = digits
	var d int = 1
	_ = d
	for d <= (18 - len(Ls)) {
		digits = (digits * 10)
		d = (d + 1)
	}
	var ten18 int = 1000000000000000000
	_ = ten18
	var count int = 0
	_ = count
	var i int = 0
	_ = i
	var probe int = 1
	_ = probe
	for {
		probe = (probe * 2)
		i = (i + 1)
		if probe >= ten18 {
			for {
				if probe >= ten18 {
					probe = (probe / 10)
				}
				if (probe / digits) == L {
					count = (count + 1)
					if count >= n {
						count = (count - 1)
						break
					}
				}
				probe = (probe * 2)
				i = (i + 1)
			}
		}
		var ps string = fmt.Sprint(probe)
		_ = ps
		var le int = len(Ls)
		_ = le
		if le > len(ps) {
			le = len(ps)
		}
		if _substr(ps, 0, le) == Ls {
			count = (count + 1)
			if count >= n {
				break
			}
		}
	}
	return i
}

var params [][]int

var idx int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		params = [][]int{[]int{12, 1}, []int{12, 2}, []int{123, 45}}
		idx = 0
		for idx < len(params) {
			var L int = params[idx][0]
			_ = L
			var m int = params[idx][1]
			_ = m
			fmt.Println(((((("p(" + fmt.Sprint(L)) + ", ") + fmt.Sprint(m)) + ") = ") + commatize(p(L, m))))
			idx = (idx + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
