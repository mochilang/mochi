//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:25:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _padStart(s string, l int, ch string) string {
	if len(ch) == 0 {
		ch = " "
	}
	if len(s) >= l {
		return s
	}
	fill := ch[:1]
	return strings.Repeat(fill, l-len(s)) + s
}

func _bigrat(v any) *big.Rat {
	switch t := v.(type) {
	case *big.Rat:
		return new(big.Rat).Set(t)
	case *big.Int:
		return new(big.Rat).SetInt(t)
	case int:
		return big.NewRat(int64(t), 1)
	case int64:
		return big.NewRat(t, 1)
	case float64:
		r := new(big.Rat)
		r.SetFloat64(t)
		return r
	default:
		return big.NewRat(0, 1)
	}
}

func _num(r *big.Rat) *big.Int { return new(big.Int).Set(r.Num()) }

func _denom(r *big.Rat) *big.Int { return new(big.Int).Set(r.Denom()) }

func bernoulli(n int) *big.Rat {
	var a []*big.Rat = []*big.Rat{}
	_ = a
	var m int = 0
	_ = m
	for m <= n {
		a = append(a, new(big.Rat).Quo(_bigrat(1), _bigrat((m+1))))
		var j int = m
		_ = j
		for j >= 1 {
			a[(j - 1)] = new(big.Rat).Mul(_bigrat(j), _bigrat(new(big.Rat).Sub(a[(j-1)], a[j])))
			j = (j - 1)
		}
		m = (m + 1)
	}
	if n != 1 {
		return a[0]
	}
	return new(big.Rat).Sub(_bigrat(0), a[0])
}

func binom(n int, k int) *big.Int {
	if (k < 0) || (k > n) {
		return big.NewInt(int64(0))
	}
	var kk int = k
	_ = kk
	if kk > (n - kk) {
		kk = (n - kk)
	}
	var res *big.Int = big.NewInt(int64(1))
	_ = res
	var i int = 0
	_ = i
	for i < kk {
		res = new(big.Int).Mul(res, big.NewInt(int64((n - i))))
		i = (i + 1)
		res = new(big.Int).Div(res, big.NewInt(int64(i)))
	}
	return res
}

func faulhaberRow(p int) []*big.Rat {
	var coeffs []*big.Rat = []*big.Rat{}
	_ = coeffs
	var i int = 0
	_ = i
	for i <= p {
		coeffs = append(coeffs, _bigrat(0))
		i = (i + 1)
	}
	var j int = 0
	_ = j
	var sign int = (0 - 1)
	_ = sign
	for j <= p {
		sign = (0 - sign)
		var c *big.Rat = new(big.Rat).Quo(_bigrat(1), _bigrat((p + 1)))
		_ = c
		if sign < 0 {
			c = new(big.Rat).Sub(_bigrat(0), c)
		}
		c = new(big.Rat).Mul(c, _bigrat(binom((p+1), j)))
		c = new(big.Rat).Mul(c, bernoulli(j))
		coeffs[(p - j)] = c
		j = (j + 1)
	}
	return coeffs
}

func ratStr(r *big.Rat) string {
	var s string = fmt.Sprint(r)
	_ = s
	if endsWith(s, "/1") {
		return _substr(s, 0, (len(s) - 2))
	}
	return s
}

func endsWith(s string, suf string) bool {
	if len(s) < len(suf) {
		return false
	}
	return (_substr(s, (len(s)-len(suf)), len(s)) == suf)
}

func mochiMain() {
	var p int = 0
	_ = p
	for p < 10 {
		var row []*big.Rat = faulhaberRow(p)
		_ = row
		var line string = ""
		_ = line
		var idx int = 0
		_ = idx
		for idx < len(row) {
			line = (line + _padStart(ratStr(row[idx]), 5, " "))
			if idx < (len(row) - 1) {
				line = (line + "  ")
			}
			idx = (idx + 1)
		}
		fmt.Println(line)
		p = (p + 1)
	}
	fmt.Println("")
	var k int = 17
	_ = k
	var coeffs []*big.Rat = faulhaberRow(k)
	_ = coeffs
	var nn *big.Rat = _bigrat(1000)
	_ = nn
	_ = nn
	var np *big.Rat = _bigrat(1)
	_ = np
	var sum *big.Rat = _bigrat(0)
	_ = sum
	var i int = 0
	_ = i
	for i < len(coeffs) {
		np = new(big.Rat).Mul(np, nn)
		sum = new(big.Rat).Add(sum, new(big.Rat).Mul(coeffs[i], np))
		i = (i + 1)
	}
	fmt.Println(ratStr(sum))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
