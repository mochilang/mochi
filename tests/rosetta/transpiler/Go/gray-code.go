//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func xor(a int, b int) int {
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	var x int = a
	_ = x
	var y int = b
	_ = y
	for (x > 0) || (y > 0) {
		if (((x % 2) + (y % 2)) % 2) == 1 {
			res = (res + bit)
		}
		x = (x / 2)
		y = (y / 2)
		bit = (bit * 2)
	}
	return res
}

func enc(b int) int {
	return xor(b, (b / 2))
}

func dec(g int) int {
	var b int = 0
	_ = b
	var x int = g
	_ = x
	for x > 0 {
		b = xor(b, x)
		x = (x / 2)
	}
	return b
}

func binary(n int) string {
	if n == 0 {
		return "0"
	}
	var s string = ""
	_ = s
	var x int = n
	_ = x
	for x > 0 {
		if (x % 2) == 1 {
			s = ("1" + s)
		} else {
			s = ("0" + s)
		}
		x = (x / 2)
	}
	return s
}

func pad5(s string) string {
	var p string = s
	_ = p
	for len(p) < 5 {
		p = ("0" + p)
	}
	return p
}

func mochiMain() {
	fmt.Println("decimal  binary   gray    decoded")
	var b int = 0
	_ = b
	for b < 32 {
		var g int = enc(b)
		_ = g
		var d int = dec(g)
		_ = d
		fmt.Println(((((((("  " + pad5(binary(b))) + "   ") + pad5(binary(g))) + "   ") + pad5(binary(d))) + "  ") + fmt.Sprint(d)))
		b = (b + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
