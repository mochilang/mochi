//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:26:01 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func ord(ch string) int {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	if (ch >= "0") && (ch <= "9") {
		return (_parseIntStr(ch, 10) + 48)
	}
	var idx int = strings.Index(upper, ch)
	if idx >= 0 {
		return (65 + idx)
	}
	return 0
}

func isCusip(s string) bool {
	if len(s) != 9 {
		return false
	}
	var sum int = 0
	var i int = 0
	for i < 8 {
		var c string = string([]rune(s)[i:(i + 1)])
		var v int = 0
		if (c >= "0") && (c <= "9") {
			v = _parseIntStr(c, 10)
		} else {
			if (c >= "A") && (c <= "Z") {
				v = (ord(c) - 55)
			} else {
				if c == "*" {
					v = 36
				} else {
					if c == "@" {
						v = 37
					} else {
						if c == "#" {
							v = 38
						} else {
							return false
						}
					}
				}
			}
		}
		if (i % 2) == 1 {
			v = (v * 2)
		}
		sum = ((sum + (v / 10)) + (v % 10))
		i = (i + 1)
	}
	return (_parseIntStr(string([]rune(s)[8:9]), 10) == ((10 - (sum % 10)) % 10))
}

var candidates []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		candidates = []string{"037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"}
		for _, _ch := range candidates {
			cand := string(_ch)
			var b string = "incorrect"
			if isCusip(cand) {
				b = "correct"
			}
			fmt.Println(((cand + " -> ") + b))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
