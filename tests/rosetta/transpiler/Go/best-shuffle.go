//go:build ignore

// Generated by Mochi v0.10.56 on 2025-08-03 16:20:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _len(v any) int {
	switch t := v.(type) {
	case string:
		return len([]rune(t))
	case []any:
		return len(t)
	case []string:
		return len(t)
	case []int:
		return len(t)
	case []float64:
		return len(t)
	case map[string]any:
		return len(t)
	case map[int]any:
		return len(t)
	case map[any]any:
		return len(t)
	default:
		return 0
	}
}

func nextRand(seed int) int {
	return (((seed * 1664525) + 1013904223) % 2147483647)
}

func shuffleChars(s string, seed int) []any {
	var chars []string = []string{}
	_ = chars
	var i int = 0
	_ = i
	for i < len(s) {
		chars = append(chars, _substr(s, i, (i+1)))
		i = (i + 1)
	}
	var sd int = seed
	_ = sd
	var idx int = (len(chars) - 1)
	_ = idx
	for idx > 0 {
		sd = nextRand(sd)
		var j int = (sd % (idx + 1))
		_ = j
		var tmp string = chars[idx]
		_ = tmp
		chars[idx] = chars[j]
		chars[j] = tmp
		idx = (idx - 1)
	}
	var res string = ""
	_ = res
	i = 0
	for i < len(chars) {
		res = (res + chars[i])
		i = (i + 1)
	}
	return []any{res, sd}
}

func bestShuffle(s string, seed int) []any {
	var r []any = shuffleChars(s, seed)
	_ = r
	t := r[0]
	_ = t
	sd := r[1]
	_ = sd
	_ = sd
	var arr []string = []string{}
	_ = arr
	var i int = 0
	_ = i
	for i < _len(t) {
		arr = append(arr, _substr(fmt.Sprint(t), i, (i+1)))
		i = (i + 1)
	}
	i = 0
	for i < len(arr) {
		var j int = 0
		_ = j
		for j < len(arr) {
			if ((i != j) && (arr[i] != _substr(s, j, (j+1)))) && (arr[j] != _substr(s, i, (i+1))) {
				var tmp string = arr[i]
				_ = tmp
				arr[i] = arr[j]
				arr[j] = tmp
				break
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	var count int = 0
	_ = count
	i = 0
	for i < len(arr) {
		if arr[i] == _substr(s, i, (i+1)) {
			count = (count + 1)
		}
		i = (i + 1)
	}
	var out string = ""
	_ = out
	i = 0
	for i < len(arr) {
		out = (out + arr[i])
		i = (i + 1)
	}
	return []any{out, sd, count}
}

func mochiMain() {
	var ts []string = []string{"abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"}
	_ = ts
	var seed int = 1
	_ = seed
	var i int = 0
	_ = i
	for i < len(ts) {
		var r []any = bestShuffle(ts[i], seed)
		_ = r
		shuf := r[0]
		_ = shuf
		seed = r[1].(int)
		cnt := r[2]
		_ = cnt
		fmt.Println((((((ts[i] + " -> ") + fmt.Sprint(shuf)) + " (") + fmt.Sprint(cnt)) + ")"))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
