//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:17 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func multiplier(n1 float64, n2 float64) func(float64) float64 {
	var n1n2 float64 = (n1 * n2)
	_ = n1n2
	_ = n1n2
	return func(m float64) float64 {
		return (n1n2 * m)
	}
}

func mochiMain() {
	var x float64 = 2.0
	_ = x
	var xi float64 = 0.5
	_ = xi
	var y float64 = 4.0
	_ = y
	var yi float64 = 0.25
	_ = yi
	var z float64 = (x + y)
	_ = z
	var zi float64 = (1.0 / (x + y))
	_ = zi
	var numbers []float64 = []float64{x, y, z}
	_ = numbers
	var inverses []float64 = []float64{xi, yi, zi}
	_ = inverses
	var mfs []func(float64) float64 = []func(float64) float64{}
	_ = mfs
	var i int = 0
	_ = i
	for i < len(numbers) {
		mfs = append(mfs, multiplier(numbers[i], inverses[i]))
		i = (i + 1)
	}
	for _, mf := range mfs {
		fmt.Println(fmt.Sprint(mf(1.0)))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
