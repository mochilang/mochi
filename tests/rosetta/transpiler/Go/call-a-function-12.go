//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 09:22:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mkAdd(a int) func(int) int {
	return func(b int) int {
		return (a + b)
	}
}

func mysum(x int, y int) int {
	return (x + y)
}

func partialSum(x int) func(int) int {
	return func(y int) int {
		return mysum(x, y)
	}
}

func mochiMain() {
	add2 := mkAdd(2)
	_ = add2
	add3 := mkAdd(3)
	_ = add3
	fmt.Println(((fmt.Sprint(add2(5)) + " ") + fmt.Sprint(add3(6))))
	partial := partialSum(13)
	_ = partial
	fmt.Println(fmt.Sprint(partial(5)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
