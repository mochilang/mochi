//go:build ignore

// Generated by Mochi v0.10.37 on 2025-07-23 13:18:35 GMT+7
package main

import (
	"fmt"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func divisors(n int) []int {
	var divs []int = []int{1}
	var divs2 []int = []int{}
	var i int = 2
	for (i * i) <= n {
		if (n % i) == 0 {
			var j int = int((n / i))
			divs = append(divs, i)
			if i != j {
				divs2 = append(divs2, j)
			}
		}
		i = (i + 1)
	}
	var j int = (len(divs2) - 1)
	for j >= 0 {
		divs = append(divs, divs2[j])
		j = (j - 1)
	}
	return divs
}

func sum(xs []int) int {
	var tot int = 0
	for _, v := range xs {
		tot = (tot + v)
	}
	return tot
}

func sumStr(xs []int) string {
	var s string = ""
	var i int = 0
	for i < len(xs) {
		s = ((s + fmt.Sprint(xs[i])) + " + ")
		i = (i + 1)
	}
	return _substr(s, 0, (len(s) - 3))
}

func pad2(n int) string {
	var s string = fmt.Sprint(n)
	if len(s) < 2 {
		return (" " + s)
	}
	return s
}

func pad5(n int) string {
	var s string = fmt.Sprint(n)
	for len(s) < 5 {
		s = (" " + s)
	}
	return s
}

func abundantOdd(searchFrom int, countFrom int, countTo int, printOne bool) int {
	var count int = countFrom
	var n int = searchFrom
	for count < countTo {
		var divs []int = divisors(n)
		var tot int = func() int {
			s := 0
			for _, n := range divs {
				s += n
			}
			return s
		}()
		if tot > n {
			count = (count + 1)
			if printOne && (count < countTo) {
				n = (n + 2)
				continue
			}
			var s string = sumStr(divs)
			if !printOne {
				fmt.Println(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + fmt.Sprint(tot)))
			} else {
				fmt.Println(((((fmt.Sprint(n) + " < ") + s) + " = ") + fmt.Sprint(tot)))
			}
		}
		n = (n + 2)
	}
	return n
}

func mochiMain() {
	var max int = 25
	fmt.Println((("The first " + fmt.Sprint(max)) + " abundant odd numbers are:"))
	var n int = abundantOdd(1, 0, max, false)
	fmt.Println("\nThe one thousandth abundant odd number is:")
	abundantOdd(n, max, 1000, true)
	fmt.Println("\nThe first abundant odd number above one billion is:")
	abundantOdd(1000000001, 0, 1, true)
}

func main() {
	mochiMain()
}
