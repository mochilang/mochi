//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:27:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var i int = (len(s) - 3)
	_ = i
	for i >= 1 {
		s = ((string([]rune(s)[0:i]) + ",") + string([]rune(s)[i:len(s)]))
		i = (i - 3)
	}
	return s
}

func padLeft(s string, w int) string {
	var out string = s
	_ = out
	for len(out) < w {
		out = (" " + out)
	}
	return out
}

func padRight(s string, w int) string {
	var out string = s
	_ = out
	for len(out) < w {
		out = (out + " ")
	}
	return out
}

var limit int

func mochiMain() {
	var i int = limit
	_ = i
	var n int = 0
	_ = n
	for n < limit {
		if isPrime(i) {
			n = (n + 1)
			var nStr string = padRight(fmt.Sprint(n), 2)
			_ = nStr
			var pStr string = padLeft(commatize(i), 19)
			_ = pStr
			fmt.Println(((("n = " + nStr) + "  ") + pStr))
			i = ((i + i) - 1)
		}
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		limit = 42
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
