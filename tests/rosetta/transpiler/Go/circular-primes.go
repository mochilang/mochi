//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:39:22 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

var circs []int

func isCircular(n int) bool {
	var nn int = n
	_ = nn
	var pow int = 1
	_ = pow
	for nn > 0 {
		pow = (pow * 10)
		nn = (nn / 10)
	}
	nn = n
	for {
		nn = (nn * 10)
		var f int = (nn / pow)
		_ = f
		nn = (nn + (f * (1 - pow)))
		if nn == n {
			break
		}
		if !isPrime(nn) {
			return false
		}
	}
	return true
}

var digits []int

var q []int

var fq []int

var count int

func showList(xs []int) string {
	var out string = "["
	_ = out
	var i int = 0
	_ = i
	for i < len(xs) {
		out = (out + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			out = (out + ", ")
		}
		i = (i + 1)
	}
	return (out + "]")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		circs = []int{}
		fmt.Println("The first 19 circular primes are:")
		digits = []int{1, 3, 7, 9}
		q = []int{1, 2, 3, 5, 7, 9}
		fq = []int{1, 2, 3, 5, 7, 9}
		count = 0
		for {
			var f int = q[0]
			_ = f
			var fd int = fq[0]
			_ = fd
			if isPrime(f) && isCircular(f) {
				circs = append(circs, f)
				count = (count + 1)
				if count == 19 {
					break
				}
			}
			q = q[1:]
			fq = fq[1:]
			if (f != 2) && (f != 5) {
				for _, d := range digits {
					q = append(q, ((f * 10) + d))
					fq = append(fq, fd)
				}
			}
		}
		fmt.Println(showList(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(circs)))
		fmt.Println("\nThe next 4 circular primes, in repunit format, are:")
		fmt.Println("[R(19) R(23) R(317) R(1031)]")
		fmt.Println("\nThe following repunits are probably circular primes:")
		for _, i := range []int{5003, 9887, 15073, 25031, 35317, 49081} {
			fmt.Println((("R(" + fmt.Sprint(i)) + ") : true"))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
