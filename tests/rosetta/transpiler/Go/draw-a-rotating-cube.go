//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

var TWO_PI float64

func _mod(x float64, m float64) float64 {
	return (x - (float64(int((x / m))) * m))
}

func _sin(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y3 float64 = (y2 * y)
	_ = y3
	var y5 float64 = (y3 * y2)
	_ = y5
	var y7 float64 = (y5 * y2)
	_ = y7
	_ = y7
	return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
}

func _cos(x float64) float64 {
	var y float64 = (_mod((x+PI), TWO_PI) - PI)
	_ = y
	var y2 float64 = (y * y)
	_ = y2
	var y4 float64 = (y2 * y2)
	_ = y4
	var y6 float64 = (y4 * y2)
	_ = y6
	_ = y6
	return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
}

type Point3 struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

type Point2 struct {
	X int `json:"x"`
	Y int `json:"y"`
}

var nodes []Point3

var edges [][]int

func rotate(p Point3, ax float64, ay float64) Point3 {
	var sinx float64 = _sin(ax)
	_ = sinx
	var cosx float64 = _cos(ax)
	_ = cosx
	var siny float64 = _sin(ay)
	_ = siny
	var cosy float64 = _cos(ay)
	_ = cosy
	var x1 float64 = p.X
	_ = x1
	var y1 float64 = ((p.Y * cosx) - (p.Z * sinx))
	_ = y1
	_ = y1
	var z1 float64 = ((p.Y * sinx) + (p.Z * cosx))
	_ = z1
	var x2 float64 = ((x1 * cosy) + (z1 * siny))
	_ = x2
	_ = x2
	var z2 float64 = (((0 - x1) * siny) + (z1 * cosy))
	_ = z2
	_ = z2
	return Point3{
		X: x2,
		Y: y1,
		Z: z2,
	}
}

var width int

var height int

var distance float64

var scale float64

func project(p Point3) Point2 {
	var factor float64 = (scale / (p.Z + distance))
	_ = factor
	_ = factor
	var x int = (int((p.X * factor)) + (width / 2))
	_ = x
	_ = x
	var y int = (int(((0 - p.Y) * factor)) + (height / 2))
	_ = y
	_ = y
	return Point2{
		X: x,
		Y: y,
	}
}

func clearGrid() [][]string {
	var g [][]string = [][]string{}
	_ = g
	var y int = 0
	_ = y
	for y < height {
		var row []string = []string{}
		_ = row
		var x int = 0
		_ = x
		for x < width {
			row = append(row, " ")
			x = (x + 1)
		}
		g = append(g, row)
		y = (y + 1)
	}
	return g
}

func drawPoint(g [][]string, x int, y int, ch string) {
	if (((x >= 0) && (x < width)) && (y >= 0)) && (y < height) {
		var row []string = g[y]
		_ = row
		row[x] = ch
		g[y] = row
	}
}

func bresenham(x0 int, y0 int, x1 int, y1 int, g [][]string, ch string) {
	var dx int = (x1 - x0)
	_ = dx
	if dx < 0 {
		dx = (0 - dx)
	}
	var dy int = (y1 - y0)
	_ = dy
	if dy < 0 {
		dy = (0 - dy)
	}
	var sx int = (0 - 1)
	_ = sx
	if x0 < x1 {
		sx = 1
	}
	var sy int = (0 - 1)
	_ = sy
	if y0 < y1 {
		sy = 1
	}
	var err int = (dx - dy)
	_ = err
	for {
		drawPoint(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(g), x0, y0, ch)
		if (x0 == x1) && (y0 == y1) {
			break
		}
		var e2 int = (2 * err)
		_ = e2
		if e2 > (0 - dy) {
			err = (err - dy)
			x0 = (x0 + sx)
		}
		if e2 < dx {
			err = (err + dx)
			y0 = (y0 + sy)
		}
	}
}

func render(g [][]string) string {
	var out string = ""
	_ = out
	var y int = 0
	_ = y
	for y < height {
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < width {
			line = (line + g[y][x])
			x = (x + 1)
		}
		out = ((out + line) + "\n")
		y = (y + 1)
	}
	return out
}

func mochiMain() {
	var f int = 0
	_ = f
	for f < 10 {
		var grid [][]string = clearGrid()
		_ = grid
		var rot []Point2 = []Point2{}
		_ = rot
		var i int = 0
		_ = i
		var ay float64 = ((PI / 4.0) + ((float64(f) * PI) / 10.0))
		_ = ay
		for i < len(nodes) {
			var p Point3 = rotate(nodes[i], (PI / 4.0), ay)
			_ = p
			var pp Point2 = project(p)
			_ = pp
			rot = append(rot, pp)
			i = (i + 1)
		}
		var e int = 0
		_ = e
		for e < len(edges) {
			var a int = edges[e][0]
			_ = a
			var b int = edges[e][1]
			_ = b
			var p1 Point2 = rot[a]
			_ = p1
			var p2 Point2 = rot[b]
			_ = p2
			bresenham(p1.X, p1.Y, p2.X, p2.Y, func(v any) [][]string {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]string); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]string{}
					}
					out := make([][]string, len(arr))
					for i, x := range arr {
						out[i] = x.([]string)
					}
					return out
				}
				return v.([][]string)
			}(grid), "#")
			e = (e + 1)
		}
		fmt.Println(render(func(v any) [][]string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]string{}
				}
				out := make([][]string, len(arr))
				for i, x := range arr {
					out[i] = x.([]string)
				}
				return out
			}
			return v.([][]string)
		}(grid)))
		f = (f + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		PI = 3.141592653589793
		TWO_PI = 6.283185307179586
		nodes = []Point3{Point3{
			X: (0 - 1.0),
			Y: (0 - 1.0),
			Z: (0 - 1.0),
		}, Point3{
			X: (0 - 1.0),
			Y: (0 - 1.0),
			Z: 1.0,
		}, Point3{
			X: (0 - 1.0),
			Y: 1.0,
			Z: (0 - 1.0),
		}, Point3{
			X: (0 - 1.0),
			Y: 1.0,
			Z: 1.0,
		}, Point3{
			X: 1.0,
			Y: (0 - 1.0),
			Z: (0 - 1.0),
		}, Point3{
			X: 1.0,
			Y: (0 - 1.0),
			Z: 1.0,
		}, Point3{
			X: 1.0,
			Y: 1.0,
			Z: (0 - 1.0),
		}, Point3{
			X: 1.0,
			Y: 1.0,
			Z: 1.0,
		}}
		edges = [][]int{[]int{0, 1}, []int{1, 3}, []int{3, 2}, []int{2, 0}, []int{4, 5}, []int{5, 7}, []int{7, 6}, []int{6, 4}, []int{0, 4}, []int{1, 5}, []int{2, 6}, []int{3, 7}}
		width = 40
		height = 20
		distance = 3.0
		scale = 8.0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
