//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:12:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func angleDiff(b1 float64, b2 float64) float64 {
	var d float64 = (b2 - b1)
	_ = d
	if d < (float64(0) - 180.0) {
		return (d + 360.0)
	}
	if d > 180.0 {
		return (d - 360.0)
	}
	return d
}

var testCases [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		testCases = [][]float64{[]float64{20.0, 45.0}, []float64{(float64(0) - 45.0), 45.0}, []float64{(float64(0) - 85.0), 90.0}, []float64{(float64(0) - 95.0), 90.0}, []float64{(float64(0) - 45.0), 125.0}, []float64{(float64(0) - 45.0), 145.0}, []float64{29.4803, (float64(0) - 88.6381)}, []float64{(float64(0) - 78.3251), (float64(0) - 159.036)}}
		for _, tc := range testCases {
			fmt.Println(func() string {
				f := float64(angleDiff(tc[0], tc[1]))
				if f == float64(int(f)) {
					return fmt.Sprintf("%.1f", f)
				}
				return fmt.Sprint(f)
			}())
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
