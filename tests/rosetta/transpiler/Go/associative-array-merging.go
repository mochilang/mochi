//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:01:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func merge(base map[string]any, update map[string]any) map[string]any {
	var result map[string]any = map[string]any{}
	_ = result
	for _, k := range func() []string {
		keys := make([]string, 0, len(base))
		for k := range base {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		result[k] = base[k]
	}
	for _, k := range func() []string {
		keys := make([]string, 0, len(update))
		for k := range update {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		result[k] = update[k]
	}
	return result
}

func mochiMain() {
	var base map[string]any = map[string]any{"name": "Rocket Skates", "price": 12.75, "color": "yellow"}
	_ = base
	var update map[string]any = map[string]any{"price": 15.25, "color": "red", "year": 1974}
	_ = update
	var result map[string]any = merge(base, update)
	_ = result
	fmt.Println(result)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
