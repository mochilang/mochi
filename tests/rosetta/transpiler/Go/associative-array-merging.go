//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-24 00:43:15 GMT+7
package main

import (
	"fmt"
	"sort"
)

func merge(base map[string]any, update map[string]any) map[string]any {
	var result map[string]any = map[string]any{}
	_ = result
	for _, k := range func() []string {
		keys := make([]string, 0, len(base))
		for k := range base {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		result[k] = base[k]
	}
	for _, k := range func() []string {
		keys := make([]string, 0, len(update))
		for k := range update {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		result[k] = update[k]
	}
	return result
}

func mochiMain() {
	var base map[string]any = map[string]any{"name": "Rocket Skates", "price": 12.75, "color": "yellow"}
	_ = base
	var update map[string]any = map[string]any{"price": 15.25, "color": "red", "year": 1974}
	_ = update
	var result map[string]any = merge(base, update)
	_ = result
	fmt.Println(result)
}

func main() {
	mochiMain()
}
