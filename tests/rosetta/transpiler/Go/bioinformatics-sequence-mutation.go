//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:14:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func randInt(s int, n int) []int {
	var next int = (((s * 1664525) + 1013904223) % 2147483647)
	_ = next
	return []int{next, (next % n)}
}

func padLeft(s string, w int) string {
	var res string = ""
	_ = res
	var n int = (w - len(s))
	_ = n
	for n > 0 {
		res = (res + " ")
		n = (n - 1)
	}
	return (res + s)
}

func makeSeq(s int, le int) []any {
	var bases string = "ACGT"
	_ = bases
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < le {
		var r []int = randInt(s, 4)
		_ = r
		s = r[0]
		var idx int = int(r[1])
		_ = idx
		out = (out + _substr(bases, idx, (idx+1)))
		i = (i + 1)
	}
	return []any{s, out}
}

func mutate(s int, dna string, w []int) []any {
	var bases string = "ACGT"
	_ = bases
	var le int = len(dna)
	_ = le
	var r []int = randInt(s, le)
	_ = r
	s = r[0]
	var p int = int(r[1])
	_ = p
	r = randInt(s, 300)
	s = r[0]
	var x int = int(r[1])
	_ = x
	var arr []string = []string{}
	_ = arr
	var i int = 0
	_ = i
	for i < le {
		arr = append(arr, _substr(dna, i, (i+1)))
		i = (i + 1)
	}
	if x < w[0] {
		r = randInt(s, 4)
		s = r[0]
		var idx int = int(r[1])
		_ = idx
		var b string = _substr(bases, idx, (idx + 1))
		_ = b
		fmt.Println((((((("  Change @" + padLeft(fmt.Sprint(p), 3)) + " '") + arr[p]) + "' to '") + b) + "'"))
		arr[p] = b
	} else {
		if x < (w[0] + w[1]) {
			fmt.Println((((("  Delete @" + padLeft(fmt.Sprint(p), 3)) + " '") + arr[p]) + "'"))
			var j int = p
			_ = j
			for j < (len(arr) - 1) {
				arr[j] = arr[(j + 1)]
				j = (j + 1)
			}
			arr = arr[0:(len(arr) - 1)]
		} else {
			r = randInt(s, 4)
			s = r[0]
			var idx2 int = int(r[1])
			_ = idx2
			var b string = _substr(bases, idx2, (idx2 + 1))
			_ = b
			arr = append(arr, "")
			var j int = (len(arr) - 1)
			_ = j
			for j > p {
				arr[j] = arr[(j - 1)]
				j = (j - 1)
			}
			fmt.Println((((("  Insert @" + padLeft(fmt.Sprint(p), 3)) + " '") + b) + "'"))
			arr[p] = b
		}
	}
	var out string = ""
	_ = out
	i = 0
	for i < len(arr) {
		out = (out + arr[i])
		i = (i + 1)
	}
	return []any{s, out}
}

func prettyPrint(dna string, rowLen int) {
	fmt.Println("SEQUENCE:")
	var le int = len(dna)
	_ = le
	var i int = 0
	_ = i
	for i < le {
		var k int = (i + rowLen)
		_ = k
		if k > le {
			k = le
		}
		fmt.Println(((padLeft(fmt.Sprint(i), 5) + ": ") + string([]rune(dna)[i:k])))
		i = (i + rowLen)
	}
	var a int = 0
	_ = a
	var c int = 0
	_ = c
	var g int = 0
	_ = g
	var t int = 0
	_ = t
	var idx int = 0
	_ = idx
	for idx < le {
		var ch string = _substr(dna, idx, (idx + 1))
		_ = ch
		if ch == "A" {
			a = (a + 1)
		} else {
			if ch == "C" {
				c = (c + 1)
			} else {
				if ch == "G" {
					g = (g + 1)
				} else {
					if ch == "T" {
						t = (t + 1)
					}
				}
			}
		}
		idx = (idx + 1)
	}
	fmt.Println("")
	fmt.Println("BASE COUNT:")
	fmt.Println(("    A: " + padLeft(fmt.Sprint(a), 3)))
	fmt.Println(("    C: " + padLeft(fmt.Sprint(c), 3)))
	fmt.Println(("    G: " + padLeft(fmt.Sprint(g), 3)))
	fmt.Println(("    T: " + padLeft(fmt.Sprint(t), 3)))
	fmt.Println("    ------")
	fmt.Println(("    Î£: " + fmt.Sprint(le)))
	fmt.Println("    ======")
}

func wstring(w []int) string {
	return (((((("  Change: " + fmt.Sprint(w[0])) + "\n  Delete: ") + fmt.Sprint(w[1])) + "\n  Insert: ") + fmt.Sprint(w[2])) + "\n")
}

func mochiMain() {
	var seed int = 1
	_ = seed
	var res []any = makeSeq(seed, 250)
	_ = res
	seed = res[0].(int)
	var dna string = res[1].(string)
	_ = dna
	prettyPrint(dna, 50)
	var muts int = 10
	_ = muts
	var w []int = []int{100, 100, 100}
	_ = w
	fmt.Println("\nWEIGHTS (ex 300):")
	fmt.Println(wstring(w))
	fmt.Println((("MUTATIONS (" + fmt.Sprint(muts)) + "):"))
	var i int = 0
	_ = i
	for i < muts {
		res = mutate(seed, dna, w)
		seed = res[0].(int)
		dna = res[1].(string)
		i = (i + 1)
	}
	fmt.Println("")
	prettyPrint(dna, 50)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
