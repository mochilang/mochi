//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 16:54:00 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func rotate(s string, n int) string {
	return (string([]rune(s)[n:]) + string([]rune(s)[:n]))
}

func scrambleLeft(s string) string {
	return (((string([]rune(s)[0:1]) + string([]rune(s)[2:14])) + string([]rune(s)[1:2])) + string([]rune(s)[14:]))
}

func scrambleRight(s string) string {
	return ((((string([]rune(s)[1:3]) + string([]rune(s)[4:15])) + string([]rune(s)[3:4])) + string([]rune(s)[15:])) + string([]rune(s)[0:1]))
}

func chao(text string, encode bool) string {
	var left string = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
	_ = left
	var right string = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
	_ = right
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < len(text) {
		var ch string = string([]rune(text)[i:(i + 1)])
		_ = ch
		var idx int = 0
		_ = idx
		if encode {
			idx = strings.Index(right, ch)
			out = (out + string([]rune(left)[idx:(idx+1)]))
		} else {
			idx = strings.Index(left, ch)
			out = (out + string([]rune(right)[idx:(idx+1)]))
		}
		left = rotate(left, idx)
		right = rotate(right, idx)
		left = scrambleLeft(left)
		right = scrambleRight(right)
		i = (i + 1)
	}
	return out
}

func mochiMain() {
	var plain string = "WELLDONEISBETTERTHANWELLSAID"
	_ = plain
	var cipher string = chao(plain, true)
	_ = cipher
	fmt.Println(plain)
	fmt.Println(cipher)
	fmt.Println(chao(cipher, false))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
