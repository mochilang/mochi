//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:12:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func angleDiff(b1 float64, b2 float64) float64 {
	var diff float64 = (b2 - b1)
	_ = diff
	return (math.Mod(((math.Mod(diff, 360.0)+360.0)+180.0), 360.0) - 180.0)
}

var testCases [][]float64

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		testCases = [][]float64{[]float64{20.0, 45.0}, []float64{(float64(0) - 45.0), 45.0}, []float64{(float64(0) - 85.0), 90.0}, []float64{(float64(0) - 95.0), 90.0}, []float64{(float64(0) - 45.0), 125.0}, []float64{(float64(0) - 45.0), 145.0}, []float64{29.4803, (float64(0) - 88.6381)}, []float64{(float64(0) - 78.3251), (float64(0) - 159.036)}, []float64{(float64(0) - 70099.74233810938), 29840.67437876723}, []float64{(float64(0) - 165313.6666297357), 33693.9894517456}, []float64{1174.8380510598456, (float64(0) - 154146.66490124757)}, []float64{60175.77306795546, 42213.07192354373}}
		for _, tc := range testCases {
			fmt.Println(func() string {
				f := float64(angleDiff(tc[0], tc[1]))
				if f == float64(int(f)) {
					return fmt.Sprintf("%.1f", f)
				}
				return fmt.Sprint(f)
			}())
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
