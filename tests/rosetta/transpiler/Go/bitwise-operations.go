//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:15:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func toUnsigned16(n int) int {
	var u int = n
	_ = u
	if u < 0 {
		u = (u + 65536)
	}
	return (u % 65536)
}

func bin16(n int) string {
	var u int = toUnsigned16(n)
	_ = u
	var bits string = ""
	_ = bits
	var mask int = 32768
	_ = mask
	for i := 0; i < 16; i++ {
		if u >= mask {
			bits = (bits + "1")
			u = (u - mask)
		} else {
			bits = (bits + "0")
		}
		mask = int((mask / 2))
	}
	return bits
}

func bit_and(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var ub int = toUnsigned16(b)
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for i := 0; i < 16; i++ {
		if ((ua % 2) == 1) && ((ub % 2) == 1) {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func bit_or(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var ub int = toUnsigned16(b)
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for i := 0; i < 16; i++ {
		if ((ua % 2) == 1) || ((ub % 2) == 1) {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func bit_xor(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var ub int = toUnsigned16(b)
	_ = ub
	var res int = 0
	_ = res
	var bit int = 1
	_ = bit
	for i := 0; i < 16; i++ {
		var abit int = (ua % 2)
		_ = abit
		var bbit int = (ub % 2)
		_ = bbit
		if ((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1)) {
			res = (res + bit)
		}
		ua = int((ua / 2))
		ub = int((ub / 2))
		bit = (bit * 2)
	}
	return res
}

func bit_not(a int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	return (65535 - ua)
}

func shl(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var i int = 0
	_ = i
	for i < b {
		ua = ((ua * 2) % 65536)
		i = (i + 1)
	}
	return ua
}

func shr(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var i int = 0
	_ = i
	for i < b {
		ua = int((ua / 2))
		i = (i + 1)
	}
	return ua
}

func las(a int, b int) int {
	return shl(a, b)
}

func ras(a int, b int) int {
	var val int = a
	_ = val
	var i int = 0
	_ = i
	for i < b {
		if val >= 0 {
			val = int((val / 2))
		} else {
			val = int(((val - 1) / 2))
		}
		i = (i + 1)
	}
	return toUnsigned16(val)
}

func rol(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var left int = shl(ua, b)
	_ = left
	var right int = shr(ua, (16 - b))
	_ = right
	return toUnsigned16((left + right))
}

func ror(a int, b int) int {
	var ua int = toUnsigned16(a)
	_ = ua
	var right int = shr(ua, b)
	_ = right
	var left int = shl(ua, (16 - b))
	_ = left
	return toUnsigned16((left + right))
}

func bitwise(a int, b int) {
	fmt.Println(("a:   " + bin16(a)))
	fmt.Println(("b:   " + bin16(b)))
	fmt.Println(("and: " + bin16(bit_and(a, b))))
	fmt.Println(("or:  " + bin16(bit_or(a, b))))
	fmt.Println(("xor: " + bin16(bit_xor(a, b))))
	fmt.Println(("not: " + bin16(bit_not(a))))
	if b < 0 {
		fmt.Println("Right operand is negative, but all shifts require an unsigned right operand (shift distance).")
		return nil
	}
	fmt.Println(("shl: " + bin16(shl(a, b))))
	fmt.Println(("shr: " + bin16(shr(a, b))))
	fmt.Println(("las: " + bin16(las(a, b))))
	fmt.Println(("ras: " + bin16(ras(a, b))))
	fmt.Println(("rol: " + bin16(rol(a, b))))
	fmt.Println(("ror: " + bin16(ror(a, b))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		bitwise((0 - 460), 6)
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
