//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func countChange(amount int) int {
	var ways []int = []int{}
	_ = ways
	var i int = 0
	_ = i
	for i <= amount {
		ways = append(ways, 0)
		i = (i + 1)
	}
	ways[0] = 1
	var coins []int = []int{1, 5, 10, 25}
	_ = coins
	var idx int = 0
	_ = idx
	for idx < len(coins) {
		var coin int = coins[idx]
		_ = coin
		var j int = coin
		_ = j
		for j <= amount {
			ways[j] = (ways[j] + ways[(j-coin)])
			j = (j + 1)
		}
		idx = (idx + 1)
	}
	return ways[amount]
}

var amount int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		amount = 10
		fmt.Println(((("amount, ways to make change: " + fmt.Sprint(amount)) + " ") + fmt.Sprint(countChange(amount))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
