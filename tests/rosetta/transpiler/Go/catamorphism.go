//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 12:08:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func add(a int, b int) int {
	return (a + b)
}

func sub(a int, b int) int {
	return (a - b)
}

func mul(a int, b int) int {
	return (a * b)
}

func fold(f func(int, int) int, xs []int) int {
	var r int = xs[0]
	_ = r
	var i int = 1
	_ = i
	for i < len(xs) {
		r = f(r, xs[i])
		i = (i + 1)
	}
	return r
}

var n []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n = []int{1, 2, 3, 4, 5}
		fmt.Println(fold(func(a int, b int) int {
			return add(a, b)
		}, n))
		fmt.Println(fold(func(a int, b int) int {
			return sub(a, b)
		}, n))
		fmt.Println(fold(func(a int, b int) int {
			return mul(a, b)
		}, n))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
