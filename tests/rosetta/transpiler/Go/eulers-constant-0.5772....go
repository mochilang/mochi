//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func ln(x float64) float64 {
	var k float64 = 0.0
	_ = k
	var v float64 = x
	_ = v
	for v >= 2.0 {
		v = (v / 2.0)
		k = (k + 1.0)
	}
	for v < 1.0 {
		v = (v * 2.0)
		k = (k - 1.0)
	}
	var z float64 = ((v - 1.0) / (v + 1.0))
	_ = z
	var zpow float64 = z
	_ = zpow
	var sum float64 = z
	_ = sum
	var i int = 3
	_ = i
	for i <= 9 {
		zpow = ((zpow * z) * z)
		sum = (sum + (zpow / float64(i)))
		i = (i + 2)
	}
	var ln2 float64 = 0.6931471805599453
	_ = ln2
	_ = ln2
	return ((k * ln2) + (2.0 * sum))
}

func harmonic(n int) float64 {
	var sum float64 = 0.0
	_ = sum
	var i int = 1
	_ = i
	for i <= n {
		sum = (sum + (1.0 / float64(i)))
		i = (i + 1)
	}
	return sum
}

func mochiMain() {
	var n int = 100000
	_ = n
	var gamma float64 = (harmonic(n) - ln(float64(n)))
	_ = gamma
	fmt.Println(fmt.Sprint(gamma))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
