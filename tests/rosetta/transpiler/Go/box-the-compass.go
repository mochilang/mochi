//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:04:23 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func padLeft(s string, w int) string {
	var res string = ""
	_ = res
	var n int = (w - len(s))
	_ = n
	for n > 0 {
		res = (res + " ")
		n = (n - 1)
	}
	return (res + s)
}

func padRight(s string, w int) string {
	var out string = s
	_ = out
	var i int = len(s)
	_ = i
	for i < w {
		out = (out + " ")
		i = (i + 1)
	}
	return out
}

func indexOf(s string, ch string) int {
	var i int = 0
	_ = i
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func format2(f float64) string {
	var s string = fmt.Sprint(f)
	_ = s
	var idx int = strings.Index(s, ".")
	_ = idx
	if idx < 0 {
		s = (s + ".00")
	} else {
		var need int = (idx + 3)
		_ = need
		if len(s) > need {
			s = _substr(s, 0, need)
		} else {
			for len(s) < need {
				s = (s + "0")
			}
		}
	}
	return s
}

func cpx(h float64) int {
	var x int = int(((h / 11.25) + 0.5))
	_ = x
	x = (x % 32)
	if x < 0 {
		x = (x + 32)
	}
	return x
}

var compassPoint []string

func degrees2compasspoint(h float64) string {
	return compassPoint[cpx(h)]
}

var headings []float64

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		compassPoint = []string{"North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"}
		headings = []float64{0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38}
		fmt.Println("Index  Compass point         Degree")
		i = 0
		for i < len(headings) {
			var h float64 = headings[i]
			_ = h
			var idx int = ((i % 32) + 1)
			_ = idx
			var cp string = degrees2compasspoint(h)
			_ = cp
			fmt.Println((((((padLeft(fmt.Sprint(idx), 4) + "   ") + padRight(cp, 19)) + " ") + format2(h)) + "Â°"))
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
