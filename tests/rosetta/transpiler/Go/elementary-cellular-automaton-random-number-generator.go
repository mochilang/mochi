//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:56:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var n int

func pow2(k int) int {
	var v int = 1
	_ = v
	var i int = 0
	_ = i
	for i < k {
		v = (v * 2)
		i = (i + 1)
	}
	return v
}

func ruleBit(ruleNum int, idx int) int {
	var r int = ruleNum
	_ = r
	var i int = 0
	_ = i
	for i < idx {
		r = (r / 2)
		i = (i + 1)
	}
	return (r % 2)
}

func evolve(state []int, ruleNum int) []int {
	var out []int = []int{}
	_ = out
	var p int = 0
	_ = p
	for p < 10 {
		var b int = 0
		_ = b
		var q int = 7
		_ = q
		for q >= 0 {
			var st []int = state
			_ = st
			b = (b + (st[0] * pow2(q)))
			var next []int = []int{}
			_ = next
			var i int = 0
			_ = i
			for i < n {
				var lidx int = (i - 1)
				_ = lidx
				if lidx < 0 {
					lidx = (n - 1)
				}
				var left int = st[lidx]
				_ = left
				var center int = st[i]
				_ = center
				var ridx int = (i + 1)
				_ = ridx
				if ridx >= n {
					ridx = 0
				}
				var right int = st[ridx]
				_ = right
				var index int = (((left * 4) + (center * 2)) + right)
				_ = index
				next = append(next, ruleBit(ruleNum, index))
				i = (i + 1)
			}
			state = next
			q = (q - 1)
		}
		out = append(out, b)
		p = (p + 1)
	}
	return out
}

var _init []int

var i int

var bytes []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n = 64
		_init = []int{}
		i = 0
		for i < n {
			_init = append(_init, 0)
			i = (i + 1)
		}
		_init[0] = 1
		bytes = evolve(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(_init), 30)
		fmt.Println(fmt.Sprint(bytes))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
