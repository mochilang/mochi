//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 23:56:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func shuffle(xs []string) []string {
	var arr []string = xs
	_ = arr
	var i int = (len(arr) - 1)
	_ = i
	for i > 0 {
		var j int = (_now() % (i + 1))
		_ = j
		var tmp string = arr[i]
		_ = tmp
		arr[i] = arr[j]
		arr[j] = tmp
		i = (i - 1)
	}
	return arr
}

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		i = 0
		for i < 3 {
			fmt.Println("")
			for _, _ch := range shuffle([]string{"Enjoy", "Rosetta", "Code"}) {
				w := string(_ch)
				fmt.Println(w)
			}
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
