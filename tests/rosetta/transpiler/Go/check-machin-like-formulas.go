//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 17:38:31 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _bigrat(v any) *big.Rat {
	switch t := v.(type) {
	case *big.Rat:
		return new(big.Rat).Set(t)
	case *big.Int:
		return new(big.Rat).SetInt(t)
	case int:
		return big.NewRat(int64(t), 1)
	case int64:
		return big.NewRat(t, 1)
	case float64:
		r := new(big.Rat)
		r.SetFloat64(t)
		return r
	default:
		return big.NewRat(0, 1)
	}
}

func _num(r *big.Rat) *big.Int { return new(big.Int).Set(r.Num()) }

func _denom(r *big.Rat) *big.Int { return new(big.Int).Set(r.Denom()) }

func br(n int, d int) *big.Rat {
	return new(big.Rat).Quo(_bigrat(n), _bigrat(_bigrat(d)))
}

var testCases [][]map[string]int

func format(ts []map[string]int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(ts) {
		var t map[string]int = ts[i]
		_ = t
		s = (((((((s + "{") + fmt.Sprint(t["a"])) + " ") + fmt.Sprint(t["n"])) + " ") + fmt.Sprint(t["d"])) + "}")
		if i < (len(ts) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	return (s + "]")
}

func tanEval(coef int, f *big.Rat) *big.Rat {
	if coef == 1 {
		return f
	}
	if coef < 0 {
		return new(big.Rat).Sub(_bigrat(0), _bigrat(tanEval((0-coef), f)))
	}
	var ca int = (coef / 2)
	_ = ca
	var cb int = (coef - ca)
	_ = cb
	var a *big.Rat = tanEval(ca, f)
	_ = a
	var b *big.Rat = tanEval(cb, f)
	_ = b
	return new(big.Rat).Quo(_bigrat(new(big.Rat).Add(a, b)), _bigrat(new(big.Rat).Sub(_bigrat(1), new(big.Rat).Mul(a, b))))
}

func tans(m []map[string]int) *big.Rat {
	if len(m) == 1 {
		var t map[string]int = m[0]
		_ = t
		return tanEval(t["a"], br(t["n"], t["d"]))
	}
	var half int = (len(m) / 2)
	_ = half
	var a *big.Rat = tans(m[0:half])
	_ = a
	var b *big.Rat = tans(m[half:])
	_ = b
	return new(big.Rat).Quo(_bigrat(new(big.Rat).Add(a, b)), _bigrat(new(big.Rat).Sub(_bigrat(1), new(big.Rat).Mul(a, b))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		testCases = [][]map[string]int{[]map[string]int{map[string]int{"a": 1, "n": 1, "d": 2}, map[string]int{"a": 1, "n": 1, "d": 3}}, []map[string]int{map[string]int{"a": 2, "n": 1, "d": 3}, map[string]int{"a": 1, "n": 1, "d": 7}}, []map[string]int{map[string]int{"a": 4, "n": 1, "d": 5}, map[string]int{"a": (0 - 1), "n": 1, "d": 239}}, []map[string]int{map[string]int{"a": 5, "n": 1, "d": 7}, map[string]int{"a": 2, "n": 3, "d": 79}}, []map[string]int{map[string]int{"a": 1, "n": 1, "d": 2}, map[string]int{"a": 1, "n": 1, "d": 5}, map[string]int{"a": 1, "n": 1, "d": 8}}, []map[string]int{map[string]int{"a": 4, "n": 1, "d": 5}, map[string]int{"a": (0 - 1), "n": 1, "d": 70}, map[string]int{"a": 1, "n": 1, "d": 99}}, []map[string]int{map[string]int{"a": 5, "n": 1, "d": 7}, map[string]int{"a": 4, "n": 1, "d": 53}, map[string]int{"a": 2, "n": 1, "d": 4443}}, []map[string]int{map[string]int{"a": 6, "n": 1, "d": 8}, map[string]int{"a": 2, "n": 1, "d": 57}, map[string]int{"a": 1, "n": 1, "d": 239}}, []map[string]int{map[string]int{"a": 8, "n": 1, "d": 10}, map[string]int{"a": (0 - 1), "n": 1, "d": 239}, map[string]int{"a": (0 - 4), "n": 1, "d": 515}}, []map[string]int{map[string]int{"a": 12, "n": 1, "d": 18}, map[string]int{"a": 8, "n": 1, "d": 57}, map[string]int{"a": (0 - 5), "n": 1, "d": 239}}, []map[string]int{map[string]int{"a": 16, "n": 1, "d": 21}, map[string]int{"a": 3, "n": 1, "d": 239}, map[string]int{"a": 4, "n": 3, "d": 1042}}, []map[string]int{map[string]int{"a": 22, "n": 1, "d": 28}, map[string]int{"a": 2, "n": 1, "d": 443}, map[string]int{"a": (0 - 5), "n": 1, "d": 1393}, map[string]int{"a": (0 - 10), "n": 1, "d": 11018}}, []map[string]int{map[string]int{"a": 22, "n": 1, "d": 38}, map[string]int{"a": 17, "n": 7, "d": 601}, map[string]int{"a": 10, "n": 7, "d": 8149}}, []map[string]int{map[string]int{"a": 44, "n": 1, "d": 57}, map[string]int{"a": 7, "n": 1, "d": 239}, map[string]int{"a": (0 - 12), "n": 1, "d": 682}, map[string]int{"a": 24, "n": 1, "d": 12943}}, []map[string]int{map[string]int{"a": 88, "n": 1, "d": 172}, map[string]int{"a": 51, "n": 1, "d": 239}, map[string]int{"a": 32, "n": 1, "d": 682}, map[string]int{"a": 44, "n": 1, "d": 5357}, map[string]int{"a": 68, "n": 1, "d": 12943}}, []map[string]int{map[string]int{"a": 88, "n": 1, "d": 172}, map[string]int{"a": 51, "n": 1, "d": 239}, map[string]int{"a": 32, "n": 1, "d": 682}, map[string]int{"a": 44, "n": 1, "d": 5357}, map[string]int{"a": 68, "n": 1, "d": 12944}}}
		for _, ts := range testCases {
			fmt.Println(((("tan " + format(ts)) + " = ") + fmt.Sprint(tans(ts))))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
