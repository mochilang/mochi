//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 19:57:02 GMT+7
package main

import (
	"fmt"
	"strings"
)

var PI float64

var TWO_PI float64

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 8 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func floor(x float64) float64 {
	var i int = int(x)
	_ = i
	if float64(i) > x {
		i = (i - 1)
	}
	return float64(i)
}

func absFloat(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func absInt(n int) int {
	if n < 0 {
		return (0 - n)
	}
	return n
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func parseDate(s string) []int {
	var y int = parseIntStr(string([]rune(s)[0:4]))
	_ = y
	var m int = parseIntStr(string([]rune(s)[5:7]))
	_ = m
	var d int = parseIntStr(string([]rune(s)[8:10]))
	_ = d
	return []int{y, m, d}
}

func leap(y int) bool {
	if (y % 400) == 0 {
		return true
	}
	if (y % 100) == 0 {
		return false
	}
	return ((y % 4) == 0)
}

func daysInMonth(y int, m int) int {
	var feb int = func() int {
		if leap(y) {
			return 29
		} else {
			return 28
		}
	}()
	_ = feb
	var lengths []int = []int{31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
	_ = lengths
	return lengths[(m - 1)]
}

func addDays(y int, m int, d int, n int) []int {
	var yy int = y
	_ = yy
	var mm int = m
	_ = mm
	var dd int = d
	_ = dd
	if n >= 0 {
		var i int = 0
		_ = i
		for i < n {
			dd = (dd + 1)
			if dd > daysInMonth(yy, mm) {
				dd = 1
				mm = (mm + 1)
				if mm > 12 {
					mm = 1
					yy = (yy + 1)
				}
			}
			i = (i + 1)
		}
	} else {
		var i int = 0
		_ = i
		for i > n {
			dd = (dd - 1)
			if dd < 1 {
				mm = (mm - 1)
				if mm < 1 {
					mm = 12
					yy = (yy - 1)
				}
				dd = daysInMonth(yy, mm)
			}
			i = (i - 1)
		}
	}
	return []int{yy, mm, dd}
}

func pad2(n int) string {
	if n < 10 {
		return ("0" + fmt.Sprint(n))
	}
	return fmt.Sprint(n)
}

func dateString(y int, m int, d int) string {
	return ((((fmt.Sprint(y) + "-") + pad2(m)) + "-") + pad2(d))
}

func day(y int, m int, d int) int {
	var part1 int = (367 * y)
	_ = part1
	var part2 int = int(((7 * int((y + ((m + 9) / 12)))) / 4))
	_ = part2
	var part3 int = int(((275 * m) / 9))
	_ = part3
	return ((((part1 - part2) + part3) + d) - 730530)
}

func biorhythms(birth string, target string) {
	var bparts []int = parseDate(birth)
	_ = bparts
	var by int = bparts[0]
	_ = by
	var bm int = bparts[1]
	_ = bm
	var bd int = bparts[2]
	_ = bd
	var tparts []int = parseDate(target)
	_ = tparts
	var ty int = tparts[0]
	_ = ty
	var tm int = tparts[1]
	_ = tm
	var td int = tparts[2]
	_ = td
	var diff int = absInt((day(ty, tm, td) - day(by, bm, bd)))
	_ = diff
	fmt.Println(((("Born " + birth) + ", Target ") + target))
	fmt.Println(("Day " + fmt.Sprint(diff)))
	var cycles []string = []string{"Physical day ", "Emotional day", "Mental day   "}
	_ = cycles
	var lengths []int = []int{23, 28, 33}
	_ = lengths
	var quadrants [][]string = [][]string{[]string{"up and rising", "peak"}, []string{"up but falling", "transition"}, []string{"down and falling", "valley"}, []string{"down but rising", "transition"}}
	_ = quadrants
	var i int = 0
	_ = i
	for i < 3 {
		var length int = lengths[i]
		_ = length
		var cycle string = cycles[i]
		_ = cycle
		var position int = (diff % length)
		_ = position
		var quadrant int = ((position * 4) / length)
		_ = quadrant
		var percent float64 = sinApprox((((2.0 * PI) * float64(position)) / float64(length)))
		_ = percent
		percent = (floor((percent * 1000.0)) / 10.0)
		var description string = ""
		_ = description
		if percent > 95.0 {
			description = " peak"
		} else {
			if percent < (0 - 95.0) {
				description = " valley"
			} else {
				if absFloat(percent) < 5.0 {
					description = " critical transition"
				} else {
					var daysToAdd int = ((((quadrant + 1) * length) / 4) - position)
					_ = daysToAdd
					var res []int = addDays(ty, tm, td, daysToAdd)
					_ = res
					var ny int = res[0]
					_ = ny
					var nm int = res[1]
					_ = nm
					var nd int = res[2]
					_ = nd
					var transition string = dateString(ny, nm, nd)
					_ = transition
					var trend string = quadrants[quadrant][0]
					_ = trend
					var next string = quadrants[quadrant][1]
					_ = next
					var pct string = fmt.Sprint(percent)
					_ = pct
					if !strings.Contains(pct, ".") {
						pct = (pct + ".0")
					}
					description = ((((((((" " + pct) + "% (") + trend) + ", next ") + next) + " ") + transition) + ")")
				}
			}
		}
		var posStr string = fmt.Sprint(position)
		_ = posStr
		if position < 10 {
			posStr = (" " + posStr)
		}
		fmt.Println((((cycle + posStr) + " : ") + description))
		i = (i + 1)
	}
	fmt.Println("")
}

func mochiMain() {
	var pairs [][]string = [][]string{[]string{"1943-03-09", "1972-07-11"}, []string{"1809-01-12", "1863-11-19"}, []string{"1809-02-12", "1863-11-19"}}
	_ = pairs
	var idx int = 0
	_ = idx
	for idx < len(pairs) {
		var p []string = pairs[idx]
		_ = p
		biorhythms(p[0], p[1])
		idx = (idx + 1)
	}
}

func main() {
	PI = 3.141592653589793
	TWO_PI = 6.283185307179586
	mochiMain()
}
