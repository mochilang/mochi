//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:14:26 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func validComb(a int, b int, c int, d int, e int, f int, g int) bool {
	var square1 int = (a + b)
	_ = square1
	_ = square1
	var square2 int = ((b + c) + d)
	_ = square2
	_ = square2
	var square3 int = ((d + e) + f)
	_ = square3
	_ = square3
	var square4 int = (f + g)
	_ = square4
	_ = square4
	return (((square1 == square2) && (square2 == square3)) && (square3 == square4))
}

func isUnique(a int, b int, c int, d int, e int, f int, g int) bool {
	var nums []int = []int{a, b, c, d, e, f, g}
	_ = nums
	var i int = 0
	_ = i
	for i < len(nums) {
		var j int = (i + 1)
		_ = j
		for j < len(nums) {
			if nums[i] == nums[j] {
				return false
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return true
}

func getCombs(low int, high int, unique bool) map[string]any {
	var valid []any = []any{}
	_ = valid
	var count int = 0
	_ = count
	for b := low; b < (high + 1); b++ {
		for c := low; c < (high + 1); c++ {
			for d := low; d < (high + 1); d++ {
				var s int = ((b + c) + d)
				_ = s
				for e := low; e < (high + 1); e++ {
					for f := low; f < (high + 1); f++ {
						var a int = (s - b)
						_ = a
						var g int = (s - f)
						_ = g
						if (a < low) || (a > high) {
							continue
						}
						if (g < low) || (g > high) {
							continue
						}
						if ((d + e) + f) != s {
							continue
						}
						if (f + g) != s {
							continue
						}
						if !unique || isUnique(a, b, c, d, e, f, g) {
							valid = append(valid, []int{a, b, c, d, e, f, g})
							count = (count + 1)
						}
					}
				}
			}
		}
	}
	return func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(map[string]any{"count": count, "list": valid})
}

var r1 map[string]any

var r2 map[string]any

var r3 map[string]any

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		r1 = getCombs(1, 7, true)
		fmt.Println((fmt.Sprint(r1["count"].(int)) + " unique solutions in 1 to 7"))
		fmt.Println(r1["list"])
		r2 = getCombs(3, 9, true)
		fmt.Println((fmt.Sprint(r2["count"].(int)) + " unique solutions in 3 to 9"))
		fmt.Println(r2["list"])
		r3 = getCombs(0, 9, false)
		fmt.Println((fmt.Sprint(r3["count"].(int)) + " non-unique solutions in 0 to 9"))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
