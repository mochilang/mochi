//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:51:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func pow2(n int) int {
	var p int = 1
	_ = p
	var i int = 0
	_ = i
	for i < n {
		p = (p * 2)
		i = (i + 1)
	}
	return p
}

func btoi(b bool) int {
	if b {
		return 1
	}
	return 0
}

func addNoCells(cells string) string {
	var l string = "O"
	_ = l
	var r string = "O"
	_ = r
	if _substr(cells, 0, 1) == "O" {
		l = "."
	}
	if _substr(cells, (len(cells)-1), len(cells)) == "O" {
		r = "."
	}
	cells = ((l + cells) + r)
	cells = ((l + cells) + r)
	return cells
}

func step(cells string, ruleVal int) string {
	var newCells string = ""
	_ = newCells
	var i int = 0
	_ = i
	for i < (len(cells) - 2) {
		var bin int = 0
		_ = bin
		var b int = 2
		_ = b
		var n int = i
		_ = n
		for n < (i + 3) {
			bin = (bin + (btoi((_substr(cells, n, (n+1)) == "O")) * pow2(b)))
			b = (b - 1)
			n = (n + 1)
		}
		var a string = "."
		_ = a
		if ((ruleVal / pow2(bin)) % 2) == 1 {
			a = "O"
		}
		newCells = (newCells + a)
		i = (i + 1)
	}
	return newCells
}

func repeat(ch string, n int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < n {
		s = (s + ch)
		i = (i + 1)
	}
	return s
}

func evolve(l int, ruleVal int) {
	fmt.Println(((" Rule #" + fmt.Sprint(ruleVal)) + ":"))
	var cells string = "O"
	_ = cells
	var x int = 0
	_ = x
	for x < l {
		cells = addNoCells(cells)
		var width int = (40 + (len(cells) / 2))
		_ = width
		var spaces string = _repeat(" ", (width - len(cells)))
		_ = spaces
		fmt.Println((spaces + cells))
		cells = step(cells, ruleVal)
		x = (x + 1)
	}
}

func mochiMain() {
	for _, r := range []int{90, 30} {
		evolve(25, r)
		fmt.Println("")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
