//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:28:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var doors []bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		doors = []bool{}
		for i := 0; i < 100; i++ {
			doors = append(doors, false)
		}
		for pass := 1; pass < 101; pass++ {
			var idx int = (pass - 1)
			_ = idx
			for idx < 100 {
				doors[idx] = !doors[idx]
				idx = (idx + pass)
			}
		}
		for row := 0; row < 10; row++ {
			var line string = ""
			_ = line
			for col := 0; col < 10; col++ {
				var idx int = ((row * 10) + col)
				_ = idx
				if doors[idx] {
					line = (line + "1")
				} else {
					line = (line + "0")
				}
				if col < 9 {
					line = (line + " ")
				}
			}
			fmt.Println(line)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
