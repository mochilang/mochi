//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 12:08:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var n int

var t []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		n = 15
		t = []int{}
		for _i := 0; _i < (n + 2); _i++ {
			t = append(t, 0)
		}
		t[1] = 1
		for i := 1; i < (n + 1); i++ {
			var j int = i
			_ = j
			for j > 1 {
				t[j] = (t[j] + t[(j-1)])
				j = (j - 1)
			}
			t[int((i + 1))] = t[i]
			j = (i + 1)
			for j > 1 {
				t[j] = (t[j] + t[(j-1)])
				j = (j - 1)
			}
			var cat int = (t[(i+1)] - t[i])
			_ = cat
			if i < 10 {
				fmt.Println((((" " + fmt.Sprint(i)) + " : ") + fmt.Sprint(cat)))
			} else {
				fmt.Println(((fmt.Sprint(i) + " : ") + fmt.Sprint(cat)))
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
