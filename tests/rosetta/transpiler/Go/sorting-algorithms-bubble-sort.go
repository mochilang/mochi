//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:27:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bubbleSort(a []int) []int {
	var arr []int = a
	_ = arr
	var itemCount int = (len(arr) - 1)
	_ = itemCount
	for {
		var hasChanged bool = false
		_ = hasChanged
		var index int = 0
		_ = index
		for index < itemCount {
			if arr[index] > arr[(index+1)] {
				var tmp int = arr[index]
				_ = tmp
				arr[index] = arr[(index + 1)]
				arr[(index + 1)] = tmp
				hasChanged = true
			}
			index = (index + 1)
		}
		if !hasChanged {
			break
		}
		itemCount = (itemCount - 1)
	}
	return arr
}

var list []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		list = []int{31, 41, 59, 26, 53, 58, 97, 93, 23, 84}
		fmt.Println(("unsorted: " + fmt.Sprint(list)))
		list = bubbleSort(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(list))
		fmt.Println(("sorted!  " + fmt.Sprint(list)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
