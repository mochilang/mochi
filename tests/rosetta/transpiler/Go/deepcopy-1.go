//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:27 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type cds struct {
	I int          `json:"i"`
	S string       `json:"s"`
	B []int        `json:"b"`
	M map[int]bool `json:"m"`
}

func copyList(src []int) []int {
	var out []int = []int{}
	for _, v := range src {
		out = append(out, v)
	}
	return out
}

func copyMap(src map[int]bool) map[int]bool {
	var out map[int]bool = map[int]bool{}
	for _, k := range func() []int {
		keys := make([]int, 0, len(src))
		for k := range src {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		out[k] = src[k]
	}
	return out
}

func deepcopy(c cds) cds {
	return cds{
		I: c.I,
		S: c.S,
		B: copyList(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(c.B)),
		M: copyMap(c.M),
	}
}

func cdsStr(c cds) string {
	var bs string = "["
	var i int = 0
	for i < len(c.B) {
		bs = (bs + fmt.Sprint(c.B[i]))
		if i < (len(c.B) - 1) {
			bs = (bs + " ")
		}
		i = (i + 1)
	}
	bs = (bs + "]")
	var ms string = "map["
	var first bool = true
	for _, k := range func() []int {
		keys := make([]int, 0, len(c.M))
		for k := range c.M {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		if !first {
			ms = (ms + " ")
		}
		ms = (((ms + fmt.Sprint(k)) + ":") + fmt.Sprint(c.M[k]))
		first = false
	}
	ms = (ms + "]")
	return (((((((("{" + fmt.Sprint(c.I)) + " ") + c.S) + " ") + bs) + " ") + ms) + "}")
}

var c1 cds

var c2 cds

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		c1 = cds{
			I: 1,
			S: "one",
			B: []int{117, 110, 105, 116},
			M: map[int]bool{1: true},
		}
		c2 = deepcopy(c1)
		fmt.Println(cdsStr(c1))
		fmt.Println(cdsStr(c2))
		c1 = cds{
			I: 0,
			S: "nil",
			B: []int{122, 101, 114, 111},
			M: map[int]bool{1: false},
		}
		fmt.Println(cdsStr(c1))
		fmt.Println(cdsStr(c2))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
