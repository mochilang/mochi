//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:43 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func p(x float64, e float64) float64 {
	var r float64 = 1.0
	_ = r
	var i int = 0
	_ = i
	for i < int(e) {
		r = (r * x)
		i = (i + 1)
	}
	return r
}

var ops []string

func padInt(f float64) string {
	var s string = fmt.Sprint(int(f))
	_ = s
	_ = s
	if f >= 0 {
		return (" " + s)
	}
	return s
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		ops = []string{"-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"}
		for _, x := range []float64{(0 - 5.0), 5.0} {
			for _, e := range []float64{2.0, 3.0} {
				var a float64 = (0 - p(x, e))
				_ = a
				var b float64 = (0 - p(x, e))
				_ = b
				var c float64 = p((0 - x), e)
				_ = c
				var d float64 = (0 - p(x, e))
				_ = d
				fmt.Println((((((((((((((((((((("x = " + func() string {
					if x < 0 {
						return ""
					} else {
						return " "
					}
				}()) + fmt.Sprint(int(x))) + " e = ") + fmt.Sprint(int(e))) + " | ") + ops[0]) + " = ") + padInt(a)) + " | ") + ops[1]) + " = ") + padInt(b)) + " | ") + ops[2]) + " = ") + padInt(c)) + " | ") + ops[3]) + " = ") + padInt(d)))
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
