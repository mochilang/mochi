//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:56:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _split(s, sep string) []string {
	if sep == "" {
		sep = " "
	}
	return strings.Split(s, sep)
}

func split(s string, sep string) []string {
	var out []string = []string{}
	var start int = 0
	var i int = 0
	var n int = len(sep)
	for i <= (len(s) - n) {
		if _substr(s, i, (i+n)) == sep {
			out = append(out, _substr(s, start, i))
			i = (i + n)
			start = i
		} else {
			i = (i + 1)
		}
	}
	out = append(out, _substr(s, start, len(s)))
	return out
}

func htmlEscape(s string) string {
	var out string = ""
	var i int = 0
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		if ch == "&" {
			out = (out + "&amp;")
		} else {
			if ch == "<" {
				out = (out + "&lt;")
			} else {
				if ch == ">" {
					out = (out + "&gt;")
				} else {
					out = (out + ch)
				}
			}
		}
		i = (i + 1)
	}
	return out
}

var c string

var rows [][]string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		c = ((((("Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n") + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") + "The multitude,Who are you?\n") + "Brians mother,I'm his mother; that's who!\n") + "The multitude,Behold his mother! Behold his mother!")
		rows = [][]string{}
		for _, _ch := range _split(c, "\n") {
			line := string(_ch)
			rows = append(rows, _split(line, ","))
		}
		fmt.Println("<table>")
		for _, row := range rows {
			var cells string = ""
			for _, _ch := range row {
				cell := string(_ch)
				cells = (((cells + "<td>") + htmlEscape(cell)) + "</td>")
			}
			fmt.Println((("    <tr>" + cells) + "</tr>"))
		}
		fmt.Println("</table>")
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
