//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOf3(s string, ch string, start int) int {
	var i int = start
	for i < len(s) {
		if _substr(s, i, (i+1)) == ch {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func ord(ch string) int {
	var digits string = "0123456789"
	var idx int = indexOf3(digits, ch, 0)
	if idx >= 0 {
		return (48 + idx)
	}
	if ch == "X" {
		return 88
	}
	if ch == "é" {
		return 233
	}
	if ch == "😍" {
		return 128525
	}
	if ch == "🐡" {
		return 128033
	}
	return 0
}

func toHex(n int) string {
	var digits string = "0123456789ABCDEF"
	if n == 0 {
		return "0"
	}
	var v int = n
	var out string = ""
	for v > 0 {
		var d int = (v % 16)
		out = (string([]rune(digits)[d:(d+1)]) + out)
		v = (v / 16)
	}
	return out
}

func analyze(s string) {
	var le int = len(s)
	fmt.Println((((("Analyzing \"" + s) + "\" which has a length of ") + fmt.Sprint(le)) + ":"))
	if le > 1 {
		var i int = 0
		for i < (le - 1) {
			var j int = (i + 1)
			for j < le {
				if _substr(s, j, (j+1)) == _substr(s, i, (i+1)) {
					var ch string = _substr(s, i, (i + 1))
					fmt.Println("  Not all characters in the string are unique.")
					fmt.Println((((((((("  '" + ch) + "' (0x") + strings.ToLower(toHex(ord(ch)))) + ") is duplicated at positions ") + fmt.Sprint((i + 1))) + " and ") + fmt.Sprint((j + 1))) + ".\n"))
					return
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
	}
	fmt.Println("  All characters in the string are unique.\n")
}

func mochiMain() {
	var strings []string = []string{"", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"}
	var i int = 0
	for i < len(strings) {
		analyze(strings[i])
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
