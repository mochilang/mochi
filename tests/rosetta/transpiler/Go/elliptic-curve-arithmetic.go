//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:56:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Pt struct {
	X   float64 `json:"x"`
	Y   float64 `json:"y"`
	Inf bool    `json:"inf"`
}

var bCoeff float64

func zero() Pt {
	return Pt{
		X:   0.0,
		Y:   0.0,
		Inf: true,
	}
}

func isZero(p Pt) bool {
	return p.Inf
}

func neg(p Pt) Pt {
	return Pt{
		X:   p.X,
		Y:   (0 - p.Y),
		Inf: p.Inf,
	}
}

func dbl(p Pt) Pt {
	if isZero(p) {
		return p
	}
	var L float64 = (((3.0 * p.X) * p.X) / (2.0 * p.Y))
	_ = L
	var x float64 = ((L * L) - (2.0 * p.X))
	_ = x
	_ = x
	return Pt{
		X:   x,
		Y:   ((L * (p.X - x)) - p.Y),
		Inf: false,
	}
}

func add(p Pt, q Pt) Pt {
	if isZero(p) {
		return q
	}
	if isZero(q) {
		return p
	}
	if p.X == q.X {
		if p.Y == q.Y {
			return dbl(p)
		}
		return zero()
	}
	var L float64 = ((q.Y - p.Y) / (q.X - p.X))
	_ = L
	var x float64 = (((L * L) - p.X) - q.X)
	_ = x
	_ = x
	return Pt{
		X:   x,
		Y:   ((L * (p.X - x)) - p.Y),
		Inf: false,
	}
}

func mul(p Pt, n int) Pt {
	var r Pt = zero()
	_ = r
	var q Pt = p
	_ = q
	var k int = n
	_ = k
	for k > 0 {
		if (k % 2) == 1 {
			r = add(r, q)
		}
		q = dbl(q)
		k = (k / 2)
	}
	return r
}

func cbrtApprox(x float64) float64 {
	var guess float64 = x
	_ = guess
	var i int = 0
	_ = i
	for i < 40 {
		guess = (((2.0 * guess) + (x / (guess * guess))) / 3.0)
		i = (i + 1)
	}
	return guess
}

func fromY(y float64) Pt {
	return Pt{
		X:   cbrtApprox(((y * y) - bCoeff)),
		Y:   y,
		Inf: false,
	}
}

func show(s string, p Pt) {
	if isZero(p) {
		fmt.Println((s + "Zero"))
	} else {
		fmt.Println((((((s + "(") + fmt.Sprint(p.X)) + ", ") + fmt.Sprint(p.Y)) + ")"))
	}
}

func mochiMain() {
	var a Pt = fromY(1.0)
	_ = a
	var b Pt = fromY(2.0)
	_ = b
	show("a = ", a)
	show("b = ", b)
	var c Pt = add(a, b)
	_ = c
	show("c = a + b = ", c)
	var d Pt = neg(c)
	_ = d
	show("d = -c = ", d)
	show("c + d = ", add(c, d))
	show("a + b + d = ", add(a, add(b, d)))
	show("a * 12345 = ", mul(a, 12345))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		bCoeff = 7.0
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
