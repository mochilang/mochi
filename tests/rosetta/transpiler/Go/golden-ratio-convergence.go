//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:32:02 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	math "math"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func sqrtApprox(x float64) float64 {
	if x <= 0.0 {
		return 0.0
	}
	var g float64 = x
	_ = g
	var i int = 0
	_ = i
	for i < 20 {
		g = ((g + (x / g)) / 2.0)
		i = (i + 1)
	}
	return g
}

func abs(x float64) float64 {
	if x < 0.0 {
		return (0 - x)
	}
	return x
}

func mochiMain() {
	var oldPhi float64 = 1.0
	_ = oldPhi
	var phi float64 = 0.0
	_ = phi
	var iters int = 0
	_ = iters
	var limit float64 = 1e-05
	_ = limit
	for {
		phi = (1.0 + (1.0 / oldPhi))
		iters = (iters + 1)
		if math.Abs((phi - oldPhi)) <= limit {
			break
		}
		oldPhi = phi
	}
	var actual float64 = ((1.0 + sqrtApprox(5.0)) / 2.0)
	_ = actual
	fmt.Println(("Final value of phi : " + fmt.Sprint(phi)))
	fmt.Println(("Number of iterations : " + fmt.Sprint(iters)))
	fmt.Println(("Error (approx) : " + fmt.Sprint((phi - actual))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
