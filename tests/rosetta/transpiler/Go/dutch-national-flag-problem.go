//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:05 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func listStr(xs []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(xs) {
		s = (s + fmt.Sprint(xs[i]))
		if i < (len(xs) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func ordered(xs []int) bool {
	if len(xs) == 0 {
		return true
	}
	var prev int = xs[0]
	_ = prev
	var i int = 1
	_ = i
	for i < len(xs) {
		if xs[i] < prev {
			return false
		}
		prev = xs[i]
		i = (i + 1)
	}
	return true
}

func outOfOrder(n int) []int {
	if n < 2 {
		return []int{}
	}
	var r []int = []int{}
	_ = r
	for {
		r = []int{}
		var i int = 0
		_ = i
		for i < n {
			r = append(r, (_now() % 3))
			i = (i + 1)
		}
		if !ordered(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(r)) {
			break
		}
	}
	return r
}

func sort3(a []int) []int {
	var lo int = 0
	_ = lo
	var mid int = 0
	_ = mid
	var hi int = (len(a) - 1)
	_ = hi
	for mid <= hi {
		var v int = a[mid]
		_ = v
		if v == 0 {
			var tmp int = a[lo]
			_ = tmp
			a[lo] = a[mid]
			a[mid] = tmp
			lo = (lo + 1)
			mid = (mid + 1)
		} else {
			if v == 1 {
				mid = (mid + 1)
			} else {
				var tmp int = a[mid]
				_ = tmp
				a[mid] = a[hi]
				a[hi] = tmp
				hi = (hi - 1)
			}
		}
	}
	return a
}

func mochiMain() {
	var f []int = outOfOrder(12)
	_ = f
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(f)))
	f = sort3(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(f))
	fmt.Println(listStr(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(f)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
