//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:05:16 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var seed int

func prng(max int) int {
	seed = (((seed * 1103515245) + 12345) % 2147483648)
	return (seed % max)
}

func gen(n int) string {
	var arr []string = []string{}
	_ = arr
	var i int = 0
	_ = i
	for i < n {
		arr = append(arr, "[")
		arr = append(arr, "]")
		i = (i + 1)
	}
	var j int = (len(arr) - 1)
	_ = j
	for j > 0 {
		var k int = prng((j + 1))
		_ = k
		var tmp string = arr[j]
		_ = tmp
		arr[j] = arr[k]
		arr[k] = tmp
		j = (j - 1)
	}
	var out string = ""
	_ = out
	for _, _ch := range arr {
		ch := string(_ch)
		out = (out + ch)
	}
	return out
}

func testBalanced(s string) {
	var open int = 0
	_ = open
	var i int = 0
	_ = i
	for i < len(s) {
		var c string = string([]rune(s)[i:(i + 1)])
		_ = c
		if c == "[" {
			open = (open + 1)
		} else {
			if c == "]" {
				if open == 0 {
					fmt.Println((s + ": not ok"))
					return
				}
				open = (open - 1)
			} else {
				fmt.Println((s + ": not ok"))
				return
			}
		}
		i = (i + 1)
	}
	if open == 0 {
		fmt.Println((s + ": ok"))
	} else {
		fmt.Println((s + ": not ok"))
	}
}

func mochiMain() {
	var i int = 0
	_ = i
	for i < 10 {
		testBalanced(gen(i))
		i = (i + 1)
	}
	testBalanced("()")
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
