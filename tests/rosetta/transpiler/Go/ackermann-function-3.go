//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:28:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func pow_big(base *big.Int, exp int) *big.Int {
	var result *big.Int = big.NewInt(int64(1))
	_ = result
	var b *big.Int = base
	_ = b
	var e int = exp
	_ = e
	for e > 0 {
		if (e % 2) == 1 {
			result = new(big.Int).Mul(result, b)
		}
		b = new(big.Int).Mul(b, b)
		e = int((e / 2))
	}
	return result
}

func bit_len(x *big.Int) int {
	var n *big.Int = x
	_ = n
	var c int = 0
	_ = c
	for int(n.Int64()) > 0 {
		n = new(big.Int).Div(n, big.NewInt(int64(2)))
		c = (c + 1)
	}
	return c
}

var err string

func ackermann2(m *big.Int, n *big.Int) *big.Int {
	if err != "" {
		return big.NewInt(int64(0))
	}
	if int(m.Int64()) <= 3 {
		var mi int = int(m.Int64())
		_ = mi
		if mi == 0 {
			return new(big.Int).Add(n, big.NewInt(int64(1)))
		}
		if mi == 1 {
			return new(big.Int).Add(n, big.NewInt(int64(2)))
		}
		if mi == 2 {
			return new(big.Int).Add(new(big.Int).Mul(big.NewInt(int64(2)), n), big.NewInt(int64(3)))
		}
		if mi == 3 {
			var nb int = bit_len(n)
			_ = nb
			if nb > 64 {
				err = (("A(m,n) had n of " + fmt.Sprint(nb)) + " bits; too large")
				return big.NewInt(int64(0))
			}
			var r *big.Int = pow_big(big.NewInt(int64(2)), int(n.Int64()))
			_ = r
			_ = r
			return new(big.Int).Sub(new(big.Int).Mul(big.NewInt(int64(8)), r), big.NewInt(int64(3)))
		}
	}
	if bit_len(n) == 0 {
		return ackermann2(new(big.Int).Sub(m, big.NewInt(int64(1))), big.NewInt(int64(1)))
	}
	return ackermann2(new(big.Int).Sub(m, big.NewInt(int64(1))), ackermann2(m, new(big.Int).Sub(n, big.NewInt(int64(1)))))
}

func show(m int, n int) {
	err = ""
	var res *big.Int = ackermann2(big.NewInt(int64(m)), big.NewInt(int64(n)))
	_ = res
	if err != "" {
		fmt.Println(((((("A(" + fmt.Sprint(m)) + ", ") + fmt.Sprint(n)) + ") = Error: ") + err))
		return
	}
	if bit_len(res) <= 256 {
		fmt.Println(((((("A(" + fmt.Sprint(m)) + ", ") + fmt.Sprint(n)) + ") = ") + fmt.Sprint(res)))
	} else {
		var s string = fmt.Sprint(res)
		_ = s
		var pre string = _substr(s, 0, 20)
		_ = pre
		var suf string = _substr(s, (len(s) - 20), len(s))
		_ = suf
		fmt.Println(((((((((("A(" + fmt.Sprint(m)) + ", ") + fmt.Sprint(n)) + ") = ") + fmt.Sprint(len(s))) + " digits starting/ending with: ") + pre) + "...") + suf))
	}
}

func mochiMain() {
	show(0, 0)
	show(1, 2)
	show(2, 4)
	show(3, 100)
	show(3, 1000000)
	show(4, 1)
	show(4, 2)
	show(4, 3)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		err = ""
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
