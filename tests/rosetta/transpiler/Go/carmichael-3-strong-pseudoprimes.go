//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 11:11:51 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mod(n int, m int) int {
	return (((n % m) + m) % m)
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func carmichael(p1 int) {
	for h3 := 2; h3 < p1; h3++ {
		for d := 1; d < (h3 + p1); d++ {
			if ((((h3 + p1) * (p1 - 1)) % d) == 0) && (mod(((0-p1)*p1), h3) == (d % h3)) {
				var p2 int = (1 + (((p1 - 1) * (h3 + p1)) / d))
				_ = p2
				if !isPrime(p2) {
					continue
				}
				var p3 int = (1 + ((p1 * p2) / h3))
				_ = p3
				if !isPrime(p3) {
					continue
				}
				if ((p2 * p3) % (p1 - 1)) != 1 {
					continue
				}
				var c int = ((p1 * p2) * p3)
				_ = c
				fmt.Println(((((((pad(p1, 2) + "   ") + pad(p2, 4)) + "   ") + pad(p3, 5)) + "     ") + fmt.Sprint(c)))
			}
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		fmt.Println("The following are Carmichael munbers for p1 <= 61:\n")
		fmt.Println("p1     p2      p3     product")
		fmt.Println("==     ==      ==     =======")
		for p1 := 2; p1 < 62; p1++ {
			if isPrime(p1) {
				carmichael(p1)
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
