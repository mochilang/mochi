//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:06:48 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _padStart(s string, l int, ch string) string {
	if len(ch) == 0 {
		ch = " "
	}
	if len(s) >= l {
		return s
	}
	fill := ch[:1]
	return strings.Repeat(fill, l-len(s)) + s
}

func _bigrat(v any) *big.Rat {
	switch t := v.(type) {
	case *big.Rat:
		return new(big.Rat).Set(t)
	case *big.Int:
		return new(big.Rat).SetInt(t)
	case int:
		return big.NewRat(int64(t), 1)
	case int64:
		return big.NewRat(t, 1)
	case float64:
		r := new(big.Rat)
		r.SetFloat64(t)
		return r
	default:
		return big.NewRat(0, 1)
	}
}

func _num(r *big.Rat) *big.Int { return new(big.Int).Set(r.Num()) }

func _denom(r *big.Rat) *big.Int { return new(big.Int).Set(r.Denom()) }

func bernoulli(n int) *big.Rat {
	var a []*big.Rat = []*big.Rat{}
	_ = a
	var m int = 0
	_ = m
	for m <= n {
		a = append(a, new(big.Rat).Quo(_bigrat(1), _bigrat((m+1))))
		var j int = m
		_ = j
		for j >= 1 {
			a[(j - 1)] = new(big.Rat).Mul(_bigrat(j), _bigrat(new(big.Rat).Sub(a[(j-1)], a[j])))
			j = (j - 1)
		}
		m = (m + 1)
	}
	return a[0]
}

func padStart(s string, width int, pad string) string {
	var out string = s
	_ = out
	for len(out) < width {
		out = (pad + out)
	}
	return out
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		for i := 0; i < 61; i++ {
			var b *big.Rat = bernoulli(i)
			_ = b
			if func() bool { return _num(b).Cmp(big.NewInt(int64(0))) != 0 }() {
				var numStr string = fmt.Sprint(_num(b))
				_ = numStr
				var denStr string = fmt.Sprint(_denom(b))
				_ = denStr
				fmt.Println(((((("B(" + _padStart(fmt.Sprint(i), 2, " ")) + ") =") + _padStart(numStr, 45, " ")) + "/") + denStr))
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
