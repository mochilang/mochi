//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:03:56 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func char(n int) string {
	var letters string = "abcdefghijklmnopqrstuvwxyz"
	_ = letters
	var idx int = (n - 97)
	_ = idx
	if (idx < 0) || (idx >= len(letters)) {
		return "?"
	}
	return _substr(letters, idx, (idx + 1))
}

func fromBytes(bs []int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(bs) {
		s = (s + char(bs[i]))
		i = (i + 1)
	}
	return s
}

var b []int

var c []int

var d []int

var i int

var z []int

var sub []int

var f []int

var rem []int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		b = []int{98, 105, 110, 97, 114, 121}
		fmt.Println(fmt.Sprint(b))
		c = b
		fmt.Println(fmt.Sprint(c))
		fmt.Println(fmt.Sprint(reflect.DeepEqual(b, c)))
		d = []int{}
		i = 0
		for i < len(b) {
			d = append(d, b[i])
			i = (i + 1)
		}
		d[1] = 97
		d[4] = 110
		fmt.Println(fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(b)))
		fmt.Println(fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(d)))
		fmt.Println(fmt.Sprint((len(b) == 0)))
		z = append(b, 122)
		fmt.Println(fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(z)))
		sub = b[1:3]
		fmt.Println(fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(sub)))
		f = []int{}
		i = 0
		for i < len(d) {
			var val int = d[i]
			_ = val
			if val == 110 {
				f = append(f, 109)
			} else {
				f = append(f, val)
			}
			i = (i + 1)
		}
		fmt.Println(((fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(d)) + " -> ") + fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(f))))
		rem = []int{}
		rem = append(rem, b[0])
		i = 3
		for i < len(b) {
			rem = append(rem, b[i])
			i = (i + 1)
		}
		fmt.Println(fromBytes(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(rem)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
