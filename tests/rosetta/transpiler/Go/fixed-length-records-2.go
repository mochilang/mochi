//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:36 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func repeat(s string, n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < n {
		out = (out + s)
		i = (i + 1)
	}
	return out
}

func trimRightSpace(s string) string {
	var i int = (len(s) - 1)
	_ = i
	for (i >= 0) && (string([]rune(s)[i:(i+1)]) == " ") {
		i = (i - 1)
	}
	return string([]rune(s)[:(i + 1)])
}

func block2text(block []string) []string {
	var out []string = []string{}
	_ = out
	for _, b := range block {
		out = append(out, trimRightSpace(b))
	}
	return out
}

func text2block(lines []string) []string {
	var out []string = []string{}
	_ = out
	var count int = 0
	_ = count
	for _, line := range lines {
		var s string = line
		_ = s
		var le int = len(s)
		_ = le
		if le > 64 {
			s = string([]rune(s)[:64])
		} else {
			if le < 64 {
				s = (s + _repeat(" ", (64-le)))
			}
		}
		out = append(out, s)
		count = (count + 1)
	}
	if (count % 16) != 0 {
		var pad int = (16 - (count % 16))
		_ = pad
		var i int = 0
		_ = i
		for i < pad {
			out = append(out, _repeat(" ", 64))
			i = (i + 1)
		}
	}
	return out
}

var lines []string

var blocks []string

var outLines []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		lines = []string{"alpha", "beta", "gamma"}
		blocks = text2block(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(lines))
		outLines = block2text(func(v any) []string {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]string); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []string{}
				}
				out := make([]string, len(arr))
				for i, x := range arr {
					out[i] = x.(string)
				}
				return out
			}
			return v.([]string)
		}(blocks))
		for _, l := range outLines {
			if l != "" {
				fmt.Println(l)
			}
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
