//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:39 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func expI(b int, p int) int {
	var r int = 1
	_ = r
	var i int = 0
	_ = i
	for i < p {
		r = (r * b)
		i = (i + 1)
	}
	return r
}

func expF(b float64, p int) float64 {
	var r float64 = 1.0
	_ = r
	var pow float64 = b
	_ = pow
	var n int = p
	_ = n
	var neg bool = false
	_ = neg
	if p < 0 {
		n = (0 - p)
		neg = true
	}
	for n > 0 {
		if (n % 2) == 1 {
			r = (r * pow)
		}
		pow = (pow * pow)
		n = (n / 2)
	}
	if neg {
		r = (1.0 / r)
	}
	return r
}

func printExpF(b float64, p int) {
	if (b == 0.0) && (p < 0) {
		fmt.Println((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": +Inf"))
	} else {
		fmt.Println(((((fmt.Sprint(b) + "^") + fmt.Sprint(p)) + ": ") + fmt.Sprint(expF(b, p))))
	}
}

func mochiMain() {
	fmt.Println("expI tests")
	for _, pair := range [][]int{[]int{2, 10}, []int{2, (0 - 10)}, []int{(0 - 2), 10}, []int{(0 - 2), 11}, []int{11, 0}} {
		if pair[1] < 0 {
			fmt.Println((((fmt.Sprint(pair[0]) + "^") + fmt.Sprint(pair[1])) + ": negative power not allowed"))
		} else {
			fmt.Println(((((fmt.Sprint(pair[0]) + "^") + fmt.Sprint(pair[1])) + ": ") + fmt.Sprint(expI(pair[0], pair[1]))))
		}
	}
	fmt.Println("overflow undetected")
	fmt.Println(("10^10: " + fmt.Sprint(expI(10, 10))))
	fmt.Println("\nexpF tests:")
	for _, pair := range []any{[]any{2.0, 10}, []any{2.0, (0 - 10)}, []any{(0 - 2.0), 10}, []any{(0 - 2.0), 11}, []any{11.0, 0}} {
		printExpF(pair[0].(float64), pair[1].(int))
	}
	fmt.Println("disallowed in expI, allowed here")
	printExpF(0.0, (0 - 1))
	fmt.Println("other interesting cases for 32 bit float type")
	printExpF(10.0, 39)
	printExpF(10.0, (0 - 39))
	printExpF((0 - 10.0), 39)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
