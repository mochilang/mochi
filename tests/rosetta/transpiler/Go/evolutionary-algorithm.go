//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:21 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

var target string

var chars string

var seed int

func randInt(s int, n int) []int {
	var next int = (((s * 1664525) + 1013904223) % 2147483647)
	_ = next
	_ = next
	return []int{next, (next % n)}
}

func randChar() string {
	var r []int = randInt(seed, len(chars))
	_ = r
	seed = r[0]
	var idx int = int(r[1])
	_ = idx
	_ = idx
	return _substr(chars, idx, (idx + 1))
}

func randomString(n int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < n {
		s = (s + randChar())
		i = (i + 1)
	}
	return s
}

func fitness(s string) int {
	var h int = 0
	_ = h
	var i int = 0
	_ = i
	for i < len(target) {
		if _substr(s, i, (i+1)) != _substr(target, i, (i+1)) {
			h = (h + 1)
		}
		i = (i + 1)
	}
	return h
}

func mutate(p string) string {
	var m string = ""
	_ = m
	var i int = 0
	_ = i
	for i < len(p) {
		var r []int = randInt(seed, 20)
		_ = r
		seed = r[0]
		if r[1] == 0 {
			m = (m + randChar())
		} else {
			m = (m + _substr(p, i, (i+1)))
		}
		i = (i + 1)
	}
	return m
}

func mochiMain() {
	var parent string = randomString(len(target))
	_ = parent
	fmt.Println(parent)
	var best int = fitness(parent)
	_ = best
	var done bool = false
	_ = done
	for !done {
		var i int = 0
		_ = i
		for i < 20 {
			var child string = mutate(parent)
			_ = child
			var f int = fitness(child)
			_ = f
			if f < best {
				best = f
				parent = child
				fmt.Println(parent)
				if best == 0 {
					done = true
					break
				}
			}
			i = (i + 1)
		}
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		target = "METHINKS IT IS LIKE A WEASEL"
		chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
