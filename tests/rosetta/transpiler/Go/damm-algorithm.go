//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:26:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func damm(s string) bool {
	var tbl [][]int = [][]int{[]int{0, 3, 1, 7, 5, 9, 8, 6, 4, 2}, []int{7, 0, 9, 2, 1, 5, 4, 8, 6, 3}, []int{4, 2, 0, 6, 8, 7, 1, 3, 5, 9}, []int{1, 7, 5, 0, 9, 8, 3, 4, 2, 6}, []int{6, 1, 2, 3, 0, 4, 5, 9, 7, 8}, []int{3, 6, 7, 4, 2, 0, 9, 5, 8, 1}, []int{5, 8, 6, 9, 7, 2, 0, 1, 3, 4}, []int{8, 9, 4, 5, 3, 6, 2, 0, 1, 7}, []int{9, 4, 3, 8, 6, 1, 7, 2, 0, 5}, []int{2, 5, 8, 1, 4, 3, 6, 7, 9, 0}}
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	var interim int = 0
	var i int = 0
	for i < len(s) {
		var digit int = int(digits[string([]rune(s)[i:(i+1)])])
		var row []int = tbl[interim]
		interim = row[digit]
		i = (i + 1)
	}
	return (interim == 0)
}

func padLeft(s string, width int) string {
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	for _, _ch := range []string{"5724", "5727", "112946", "112949"} {
		s := string(_ch)
		fmt.Println(((padLeft(s, 6) + "  ") + fmt.Sprint(damm(s))))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
