//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-23 23:44:43 GMT+7
package main

import (
	"fmt"
)

var PI float64 = 3.141592653589793

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func cosApprox(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64((((2 * n) - 1) * (2 * n)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

var degreesIncr float64 = ((0.1 * PI) / 180.0)

var turns float64 = 2.0

var stop float64 = (((360.0 * turns) * 10.0) * degreesIncr)

var width float64 = 600.0

var centre float64 = (width / 2.0)

var a float64 = 1.0

var b float64 = 20.0

var theta float64 = 0.0

var count int = 0

func main() {
	for theta < stop {
		var r float64 = (a + (b * theta))
		_ = r
		var x float64 = (r * cosApprox(theta))
		_ = x
		var y float64 = (r * sinApprox(theta))
		_ = y
		if (count % 100) == 0 {
			fmt.Println(((fmt.Sprint((centre + x)) + ",") + fmt.Sprint((centre - y))))
		}
		theta = (theta + degreesIncr)
		count = (count + 1)
	}
}
