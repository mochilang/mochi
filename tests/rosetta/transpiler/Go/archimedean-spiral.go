//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:42:20 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var PI float64

func sinApprox(x float64) float64 {
	var term float64 = x
	_ = term
	var sum float64 = x
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64(((2 * n) * ((2 * n) + 1)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func cosApprox(x float64) float64 {
	var term float64 = 1.0
	_ = term
	var sum float64 = 1.0
	_ = sum
	var n int = 1
	_ = n
	for n <= 10 {
		var denom float64 = float64((((2 * n) - 1) * (2 * n)))
		_ = denom
		term = ((((0 - term) * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

var degreesIncr float64

var turns float64

var stop float64

var width float64

var centre float64

var a float64

var b float64

var theta float64

var count int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		PI = 3.141592653589793
		degreesIncr = ((0.1 * PI) / 180.0)
		turns = 2.0
		stop = (((360.0 * turns) * 10.0) * degreesIncr)
		width = 600.0
		centre = (width / 2.0)
		a = 1.0
		b = 20.0
		theta = 0.0
		count = 0
		for theta < stop {
			var r float64 = (a + (b * theta))
			_ = r
			var x float64 = (r * cosApprox(theta))
			_ = x
			var y float64 = (r * sinApprox(theta))
			_ = y
			if (count % 100) == 0 {
				fmt.Println(((fmt.Sprint((centre + x)) + ",") + fmt.Sprint((centre - y))))
			}
			theta = (theta + degreesIncr)
			count = (count + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
