//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:54:30 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func chr(n int) string {
	var upper string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	_ = upper
	_ = upper
	var lower string = "abcdefghijklmnopqrstuvwxyz"
	_ = lower
	_ = lower
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	if n == 32 {
		return " "
	}
	if n == 33 {
		return "!"
	}
	if n == 44 {
		return ","
	}
	if n == 13 {
		return ""
	}
	if n == 10 {
		return "\n"
	}
	return "?"
}

func bf(dLen int, code string) string {
	var ds []int = []int{}
	_ = ds
	for i := 0; i < dLen; i++ {
		ds = append(ds, 0)
	}
	var dp int = 0
	_ = dp
	var ip int = 0
	_ = ip
	var out string = ""
	_ = out
	for ip < len(code) {
		var ch string = string([]rune(code)[ip:(ip + 1)])
		_ = ch
		if ch == ">" {
			dp = (dp + 1)
		} else {
			if ch == "<" {
				dp = (dp - 1)
			} else {
				if ch == "+" {
					ds[dp] = (ds[dp] + 1)
				} else {
					if ch == "-" {
						ds[dp] = (ds[dp] - 1)
					} else {
						if ch == "." {
							out = (out + chr(ds[dp]))
						} else {
							if ch == "," {
							} else {
								if ch == "[" {
									if ds[dp] == 0 {
										var nc int = 1
										_ = nc
										for nc > 0 {
											ip = (ip + 1)
											var cc string = string([]rune(code)[ip:(ip + 1)])
											_ = cc
											if cc == "[" {
												nc = (nc + 1)
											} else {
												if cc == "]" {
													nc = (nc - 1)
												}
											}
										}
									}
								} else {
									if ch == "]" {
										if ds[dp] != 0 {
											var nc int = 1
											_ = nc
											for nc > 0 {
												ip = (ip - 1)
												var cc string = string([]rune(code)[ip:(ip + 1)])
												_ = cc
												if cc == "]" {
													nc = (nc + 1)
												} else {
													if cc == "[" {
														nc = (nc - 1)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		ip = (ip + 1)
	}
	return out
}

func mochiMain() {
	var prog string = ((("++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" + "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n") + ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n") + "<+++++++.--------.<<<<<+.<+++.---.")
	_ = prog
	var out string = bf(10, prog)
	_ = out
	fmt.Println(out)
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
