//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var dayNames []string

var seasons []string

var holydays [][]string

func isLeap(y int) bool {
	if (y % 400) == 0 {
		return true
	}
	if (y % 100) == 0 {
		return false
	}
	return ((y % 4) == 0)
}

var daysBefore []int

func dayOfYear(y int, m int, d int) int {
	var doy int = (daysBefore[(m-1)] + d)
	if (m > 2) && isLeap(y) {
		doy = (doy + 1)
	}
	return doy
}

func ordinal(n int) string {
	var suff string = "th"
	var mod100 int = (n % 100)
	if (mod100 < 11) || (mod100 > 13) {
		var r int = (n % 10)
		if r == 1 {
			suff = "st"
		} else {
			if r == 2 {
				suff = "nd"
			} else {
				if r == 3 {
					suff = "rd"
				}
			}
		}
	}
	return (fmt.Sprint(n) + suff)
}

func discordian(y int, m int, d int) string {
	if (isLeap(y) && (m == 2)) && (d == 29) {
		return ("St. Tib's Day, YOLD " + fmt.Sprint((y + 1166)))
	}
	var doy int = dayOfYear(y, m, d)
	if isLeap(y) && (doy > 60) {
		doy = (doy - 1)
	}
	var idx int = (doy - 1)
	var season int = (idx / 73)
	var day int = (idx % 73)
	var res string = ((((((dayNames[(idx%5)] + ", the ") + ordinal((day + 1))) + " day of ") + seasons[season]) + " in the YOLD ") + fmt.Sprint((y + 1166)))
	if day == 4 {
		res = (((res + ". Celebrate ") + holydays[season][0]) + "!")
	}
	if day == 49 {
		res = (((res + ". Celebrate ") + holydays[season][1]) + "!")
	}
	return res
}

func mochiMain() {
	var dates [][]int = [][]int{[]int{2010, 7, 22}, []int{2012, 2, 28}, []int{2012, 2, 29}, []int{2012, 3, 1}, []int{2012, 12, 31}, []int{2013, 1, 1}, []int{2100, 12, 31}, []int{2015, 10, 19}, []int{2010, 1, 5}, []int{2011, 5, 3}, []int{2000, 3, 13}}
	var i int = 0
	for i < len(dates) {
		var dt []int = dates[i]
		fmt.Println(discordian(dt[0], dt[1], dt[2]))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		dayNames = []string{"Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"}
		seasons = []string{"Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"}
		holydays = [][]string{[]string{"Mungday", "Chaoflux"}, []string{"Mojoday", "Discoflux"}, []string{"Syaday", "Confuflux"}, []string{"Zaraday", "Bureflux"}, []string{"Maladay", "Afflux"}}
		daysBefore = []int{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
