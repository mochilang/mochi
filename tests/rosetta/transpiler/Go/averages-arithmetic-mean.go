//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 00:37:12 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func mean(v []float64) map[string]any {
	if len(v) == 0 {
		return func(v any) map[string]any {
			if v == nil {
				return nil
			}
			if vv, ok := v.(map[string]any); ok {
				return vv
			}
			return nil
		}(map[string]any{"ok": false})
	}
	var sum float64 = 0.0
	_ = sum
	var i int = 0
	_ = i
	for i < len(v) {
		sum = (sum + v[i])
		i = (i + 1)
	}
	return func(v any) map[string]any {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string]any); ok {
			return vv
		}
		return nil
	}(map[string]any{"ok": true, "mean": (sum / float64(len(v)))})
}

func mochiMain() {
	var sets [][]float64 = [][]float64{[]float64{}, []float64{3.0, 1.0, 4.0, 1.0, 5.0, 9.0}, []float64{1e+20, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, (0 - 1e+20)}, []float64{10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11}, []float64{10.0, 20.0, 30.0, 40.0, 50.0, (0 - 100.0), 4.7, (0 - 1100.0)}}
	_ = sets
	for _, v := range sets {
		fmt.Println(("Vector: " + fmt.Sprint(v)))
		var r map[string]any = mean(func(v any) []float64 {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]float64); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []float64{}
				}
				out := make([]float64, len(arr))
				for i, x := range arr {
					out[i] = x.(float64)
				}
				return out
			}
			return v.([]float64)
		}(v))
		_ = r
		if r["ok"].(bool) {
			fmt.Println(((("Mean of " + fmt.Sprint(len(v))) + " numbers is ") + fmt.Sprint(r["mean"].(float64))))
		} else {
			fmt.Println("Mean undefined")
		}
		fmt.Println("")
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
