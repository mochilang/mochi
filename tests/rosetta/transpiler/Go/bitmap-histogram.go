//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:04:09 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func image() [][]int {
	return [][]int{[]int{0, 0, 10000}, []int{65535, 65535, 65535}, []int{65535, 65535, 65535}}
}

func histogram(g [][]int, bins int) []int {
	if bins <= 0 {
		bins = len(g[0])
	}
	var h []int = []int{}
	_ = h
	var i int = 0
	_ = i
	for i < bins {
		h = append(h, 0)
		i = (i + 1)
	}
	var y int = 0
	_ = y
	for y < len(g) {
		var row []int = g[y]
		_ = row
		var x int = 0
		_ = x
		for x < len(row) {
			var p int = row[x]
			_ = p
			_ = p
			var idx int = int(((p * (bins - 1)) / 65535))
			_ = idx
			h[idx] = (h[idx] + 1)
			x = (x + 1)
		}
		y = (y + 1)
	}
	return h
}

func medianThreshold(h []int) int {
	var lb int = 0
	_ = lb
	var ub int = (len(h) - 1)
	_ = ub
	var lSum int = 0
	_ = lSum
	var uSum int = 0
	_ = uSum
	for lb <= ub {
		if (lSum + h[lb]) < (uSum + h[ub]) {
			lSum = (lSum + h[lb])
			lb = (lb + 1)
		} else {
			uSum = (uSum + h[ub])
			ub = (ub - 1)
		}
	}
	return int(((ub * 65535) / len(h)))
}

func threshold(g [][]int, t int) [][]int {
	var out [][]int = [][]int{}
	_ = out
	var y int = 0
	_ = y
	for y < len(g) {
		var row []int = g[y]
		_ = row
		var newRow []int = []int{}
		_ = newRow
		var x int = 0
		_ = x
		for x < len(row) {
			if row[x] < t {
				newRow = append(newRow, 0)
			} else {
				newRow = append(newRow, 65535)
			}
			x = (x + 1)
		}
		out = append(out, newRow)
		y = (y + 1)
	}
	return out
}

func printImage(g [][]int) {
	var y int = 0
	_ = y
	for y < len(g) {
		var row []int = g[y]
		_ = row
		var line string = ""
		_ = line
		var x int = 0
		_ = x
		for x < len(row) {
			if row[x] == 0 {
				line = (line + "0")
			} else {
				line = (line + "1")
			}
			x = (x + 1)
		}
		fmt.Println(line)
		y = (y + 1)
	}
}

func mochiMain() {
	var img [][]int = image()
	_ = img
	var h []int = histogram(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(img), 0)
	_ = h
	fmt.Println(("Histogram: " + fmt.Sprint(h)))
	var t int = medianThreshold(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(h))
	_ = t
	fmt.Println(("Threshold: " + fmt.Sprint(t)))
	var bw [][]int = threshold(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(img), t)
	_ = bw
	printImage(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(bw))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
