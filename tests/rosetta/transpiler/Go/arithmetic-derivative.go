//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 19:42:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func primeFactors(n int) []int {
	var factors []int = []int{}
	_ = factors
	var x int = n
	_ = x
	for (x % 2) == 0 {
		factors = append(factors, 2)
		x = int((x / 2))
	}
	var p int = 3
	_ = p
	for (p * p) <= x {
		for (x % p) == 0 {
			factors = append(factors, p)
			x = int((x / p))
		}
		p = (p + 2)
	}
	if x > 1 {
		factors = append(factors, x)
	}
	return factors
}

func repeat(ch string, n int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < n {
		s = (s + ch)
		i = (i + 1)
	}
	return s
}

func D(n float64) float64 {
	if n < 0.0 {
		return (0 - D((0 - n)))
	}
	if n < 2.0 {
		return 0.0
	}
	var factors []int = []int{}
	_ = factors
	if n < 1e+19 {
		factors = primeFactors(int(n))
	} else {
		var g int = int((n / 100.0))
		_ = g
		factors = primeFactors(g)
		factors = append(factors, 2)
		factors = append(factors, 2)
		factors = append(factors, 5)
		factors = append(factors, 5)
	}
	var c int = len(factors)
	_ = c
	if c == 1 {
		return 1.0
	}
	if c == 2 {
		return float64((factors[0] + factors[1]))
	}
	var d float64 = (n / float64(factors[0]))
	_ = d
	return ((D(d) * float64(factors[0])) + d)
}

func pad(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < 4 {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	var vals []int = []int{}
	_ = vals
	var n int = (0 - 99)
	_ = n
	for n < 101 {
		vals = append(vals, int(D(float64(n))))
		n = (n + 1)
	}
	var i int = 0
	_ = i
	for i < len(vals) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < 10 {
			line = (line + pad(vals[(i+j)]))
			if j < 9 {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 10)
	}
	var pow float64 = 1.0
	_ = pow
	var m int = 1
	_ = m
	for m < 21 {
		pow = (pow * 10.0)
		var exp string = fmt.Sprint(m)
		_ = exp
		if len(exp) < 2 {
			exp = (exp + " ")
		}
		var res string = (fmt.Sprint(m) + repeat("0", (m-1)))
		_ = res
		fmt.Println(((("D(10^" + exp) + ") / 7 = ") + res))
		m = (m + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
