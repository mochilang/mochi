//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 17:10:30 GMT+7
package main

import (
    "fmt"
    "time"
    "os"
    "strconv"
    "encoding/json"
    "runtime"
)

var seededNow bool
var nowSeed int64
func init() {
    if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
        if v, err := strconv.ParseInt(s, 10, 64); err == nil {
            nowSeed = v
            seededNow = true
        }
    }
}
func _now() int {
    if seededNow {
        nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
        return int(nowSeed)
    }
    return int(time.Now().UnixNano())
}

type Delegator struct {
    Delegate map[string]func() string `json:"delegate"`
}

func operation(d Delegator) string {
    if func() bool { _, ok := d.Delegate["thing"]; return ok }() {
    return d.Delegate["thing"]()
}
    return "default implementation"
}

func newDelegate() map[string] {
    var m map[string] = map[string]func() string{}
    m["thing"] = func() string {
    return "delegate implementation"
}
    return m.(map[string])
}

var a Delegator

func main() {
func() {
    var ms runtime.MemStats
    runtime.ReadMemStats(&ms)
    startMem := ms.Alloc
    benchStart := time.Now().UnixNano()
    a = Delegator{
    Delegate: map[string]func() string{},
}
    fmt.Println(operation(a))
    a.Delegate = map[string]any{}
    fmt.Println(operation(a))
    a.Delegate = newDelegate()
    fmt.Println(operation(a))
    runtime.ReadMemStats(&ms)
    endMem := ms.Alloc
    benchEnd := time.Now().UnixNano()
    data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart)/1000, "memory_bytes": endMem - startMem}
    out, _ := json.MarshalIndent(data, "", "  ")
    fmt.Println(string(out))
}()
}
