//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:04 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var width int

var height int

var img [][]string

var y int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		width = 320
		height = 240
		img = [][]string{}
		y = 0
		for y < height {
			var row []string = []string{}
			_ = row
			var x int = 0
			_ = x
			for x < width {
				row = append(row, "green")
				x = (x + 1)
			}
			img = append(img, row)
			y = (y + 1)
		}
		img[100][100] = "red"
		fmt.Println((("The color of the pixel at (  0,   0) is " + img[0][0]) + "."))
		fmt.Println((("The color of the pixel at (100, 100) is " + img[100][100]) + "."))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
