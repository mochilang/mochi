//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-27 01:55:42 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _split(s, sep string) []string {
	if sep == "" {
		sep = " "
	}
	return strings.Split(s, sep)
}

var c string

var rows [][]string

var headings bool

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		c = ((((("Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n") + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") + "The multitude,Who are you?\n") + "Brians mother,I'm his mother; that's who!\n") + "The multitude,Behold his mother! Behold his mother!")
		rows = [][]string{}
		for _, _ch := range _split(c, "\n") {
			line := string(_ch)
			rows = append(rows, _split(line, ","))
		}
		headings = true
		fmt.Println("<table>")
		if headings {
			if len(rows) > 0 {
				var th string
				for _, _ch := range rows[0] {
					h := string(_ch)
					th = (((th + "<th>") + h) + "</th>")
				}
				fmt.Println("   <thead>")
				fmt.Println((("      <tr>" + th) + "</tr>"))
				fmt.Println("   </thead>")
				fmt.Println("   <tbody>")
				var i int
				for i < len(rows) {
					var cells string = ""
					for _, _ch := range rows[i] {
						cell := string(_ch)
						cells = (((cells + "<td>") + cell) + "</td>")
					}
					fmt.Println((("      <tr>" + cells) + "</tr>"))
					i = (i + 1)
				}
				fmt.Println("   </tbody>")
			}
		} else {
			for _, row := range rows {
				var cells string = ""
				for _, _ch := range row {
					cell := string(_ch)
					cells = (((cells + "<td>") + cell) + "</td>")
				}
				fmt.Println((("    <tr>" + cells) + "</tr>"))
			}
		}
		fmt.Println("</table>")
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
