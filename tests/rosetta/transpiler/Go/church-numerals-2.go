//go:build ignore

// Generated by Mochi v0.10.57 on 2025-08-04 15:32:53 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func id(x any) any {
	return x
}

func compose(f func(any) any, g func(any) any) func(any) any {
	return func(x any) any {
		return f(g(x))
	}
}

func zero() any {
	return func(f func(any) any) func(any) any {
		return id
	}
}

func one() func(any) any {
	return id
}

func succ(n func(any) any) any {
	return func(f func(any) any) func(any) any {
		return compose(f, any(n(f)).(func(any) any))
	}
}

func plus(m func(any) any, n func(any) any) any {
	return func(f func(any) any) func(any) any {
		return compose(any(m(f)).(func(any) any), any(n(f)).(func(any) any))
	}
}

func mult(m func(any) any, n func(any) any) func(any) any {
	return compose(m, n)
}

func exp(m func(any) any, n func(any) any) func(any) any {
	return n(m)
}

func toInt(x func(any) any) int {
	var counter int = 0
	_ = counter
	_ = counter
	var fCounter func(func(any) any) func(any) any
	_ = fCounter
	fCounter = func(f func(any) any) func(any) any {
		counter = (counter + 1)
		return f
	}
	any(x(fCounter)).(func(any) any)(id)
	return counter
}

func toStr(x func(any) any) string {
	var s string = ""
	_ = s
	_ = s
	var fCounter func(func(any) any) func(any) any
	_ = fCounter
	fCounter = func(f func(any) any) func(any) any {
		s = (s + "|")
		return f
	}
	any(x(fCounter)).(func(any) any)(id)
	return s
}

func mochiMain() {
	fmt.Println(("zero = " + fmt.Sprint(toInt(any(zero()).(func(any) any)))))
	onev := one()
	_ = onev
	fmt.Println(("one = " + fmt.Sprint(toInt(onev))))
	two := succ(any(succ(any(zero()).(func(any) any))).(func(any) any))
	_ = two
	fmt.Println(("two = " + fmt.Sprint(toInt(any(two).(func(any) any)))))
	three := plus(onev, any(two).(func(any) any))
	_ = three
	fmt.Println(("three = " + fmt.Sprint(toInt(any(three).(func(any) any)))))
	four := mult(any(two).(func(any) any), any(two).(func(any) any))
	_ = four
	fmt.Println(("four = " + fmt.Sprint(toInt(four))))
	eight := exp(any(two).(func(any) any), any(three).(func(any) any))
	_ = eight
	fmt.Println(("eight = " + fmt.Sprint(toInt(eight))))
	fmt.Println(("toStr(four) = " + toStr(four)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
