//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-25 09:23:27 GMT+7
package main

import (
	"fmt"
)

func sortRunes(s string) string {
	var arr []string = []string{}
	_ = arr
	var i int = 0
	_ = i
	for i < len(s) {
		arr = append(arr, string([]rune(s)[i:(i+1)]))
		i = (i + 1)
	}
	var n int = len(arr)
	_ = n
	var m int = 0
	_ = m
	for m < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				var tmp string = arr[j]
				_ = tmp
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		m = (m + 1)
	}
	var out string = ""
	_ = out
	i = 0
	for i < n {
		out = (out + arr[i])
		i = (i + 1)
	}
	return out
}

func sortStrings(xs []string) []string {
	var res []string = []string{}
	_ = res
	var tmp []string = xs
	_ = tmp
	for len(tmp) > 0 {
		var min string = tmp[0]
		_ = min
		var idx int = 0
		_ = idx
		var i int = 1
		_ = i
		for i < len(tmp) {
			if tmp[i] < min {
				min = tmp[i]
				idx = i
			}
			i = (i + 1)
		}
		res = append(res, min)
		var out []string = []string{}
		_ = out
		var j int = 0
		_ = j
		for j < len(tmp) {
			if j != idx {
				out = append(out, tmp[j])
			}
			j = (j + 1)
		}
		tmp = out
	}
	return res
}

func mochiMain() {
	var words []string = []string{"abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"}
	_ = words
	var groups map[string][]string = map[string][]string{}
	_ = groups
	var maxLen int = 0
	_ = maxLen
	for _, _ch := range words {
		w := string(_ch)
		var k string = sortRunes(w)
		_ = k
		if !func() bool { _, ok := groups[k]; return ok }() {
			groups[k] = []string{w}
		} else {
			groups[k] = append(groups[k], w)
		}
		if len(groups[k]) > maxLen {
			maxLen = len(groups[k])
		}
	}
	var printed map[string]bool = map[string]bool{}
	_ = printed
	for _, _ch := range words {
		w := string(_ch)
		var k string = sortRunes(w)
		_ = k
		if len(groups[k]) == maxLen {
			if !func() bool { _, ok := printed[k]; return ok }() {
				var g []string = sortStrings(groups[k])
				_ = g
				var line string = ("[" + g[0])
				_ = line
				var i int = 1
				_ = i
				for i < len(g) {
					line = ((line + " ") + g[i])
					i = (i + 1)
				}
				line = (line + "]")
				fmt.Println(line)
				printed[k] = true
			}
		}
	}
}

func main() {
	mochiMain()
}
