//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 11:38:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func _split(s, sep string) []string {
	if sep == "" {
		sep = " "
	}
	return strings.Split(s, sep)
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func _parseIntStr(s string, base int) int { v, _ := strconv.ParseInt(s, base, 64); return int(v) }

func split(s string, sep string) []string {
	var parts []string = []string{}
	_ = parts
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		if ((len(sep) > 0) && ((i + len(sep)) <= len(s))) && (_substr(s, i, (i+len(sep))) == sep) {
			parts = append(parts, cur)
			cur = ""
			i = (i + len(sep))
		} else {
			cur = (cur + string([]rune(s)[i:(i+1)]))
			i = (i + 1)
		}
	}
	parts = append(parts, cur)
	return parts
}

func join(xs []string, sep string) string {
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(xs) {
		if i > 0 {
			res = (res + sep)
		}
		res = (res + xs[i])
		i = (i + 1)
	}
	return res
}

func repeat(ch string, n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < n {
		out = (out + ch)
		i = (i + 1)
	}
	return out
}

func parseIntStr(str string) int {
	var i int = 0
	_ = i
	var neg bool = false
	_ = neg
	if (len(str) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	var n int = 0
	_ = n
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	_ = digits
	for i < len(str) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = (0 - n)
	}
	return n
}

func toBinary(n int, bits int) string {
	var b string = ""
	_ = b
	var val int = n
	_ = val
	var i int = 0
	_ = i
	for i < bits {
		b = (fmt.Sprint((val % 2)) + b)
		val = int((val / 2))
		i = (i + 1)
	}
	return b
}

func binToInt(bits string) int {
	var n int = 0
	_ = n
	var i int = 0
	_ = i
	for i < len(bits) {
		n = ((n * 2) + _parseIntStr(string([]rune(bits)[i:(i+1)]), 10))
		i = (i + 1)
	}
	return n
}

func padRight(s string, width int) string {
	var out string = s
	_ = out
	for len(out) < width {
		out = (out + " ")
	}
	return out
}

func canonicalize(cidr string) string {
	var parts []string = _split(cidr, "/")
	_ = parts
	var dotted string = parts[0]
	_ = dotted
	var size int = _parseIntStr(parts[1], 10)
	_ = size
	var binParts []string = []string{}
	_ = binParts
	for _, p := range _split(dotted, ".") {
		binParts = append(binParts, toBinary(_parseIntStr(p, 10), 8))
	}
	var binary string = join(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(binParts), "")
	_ = binary
	binary = (string([]rune(binary)[0:size]) + _repeat("0", (32-size)))
	var canonParts []string = []string{}
	_ = canonParts
	var i int = 0
	_ = i
	for i < len(binary) {
		canonParts = append(canonParts, fmt.Sprint(binToInt(string([]rune(binary)[i:(i+8)]))))
		i = (i + 8)
	}
	return ((join(func(v any) []string {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]string); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []string{}
			}
			out := make([]string, len(arr))
			for i, x := range arr {
				out[i] = x.(string)
			}
			return out
		}
		return v.([]string)
	}(canonParts), ".") + "/") + parts[1])
}

var tests []string

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		tests = []string{"87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"}
		for _, t := range tests {
			fmt.Println(((padRight(t, 18) + " -> ") + canonicalize(t)))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
