//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 17:34:38 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var INF int

type FWResult struct {
	Dist [][]int `json:"dist"`
	Next [][]int `json:"next"`
}

func floydWarshall(graph [][]int) FWResult {
	var n int = len(graph)
	_ = n
	var dist [][]int = [][]int{}
	_ = dist
	var next [][]int = [][]int{}
	_ = next
	var i int = 0
	_ = i
	for i < n {
		var drow []int = []int{}
		_ = drow
		var nrow []int = []int{}
		_ = nrow
		var j int = 0
		_ = j
		for j < n {
			drow = append(drow, graph[i][j])
			if (graph[i][j] < INF) && (i != j) {
				nrow = append(nrow, j)
			} else {
				nrow = append(nrow, (0 - 1))
			}
			j = (j + 1)
		}
		dist = append(dist, drow)
		next = append(next, nrow)
		i = (i + 1)
	}
	var k int = 0
	_ = k
	for k < n {
		var i int = 0
		_ = i
		for i < n {
			var j int = 0
			_ = j
			for j < n {
				if (dist[i][k] < INF) && (dist[k][j] < INF) {
					var alt int = (dist[i][k] + dist[k][j])
					_ = alt
					if alt < dist[i][j] {
						dist[i][j] = alt
						next[i][j] = next[i][k]
					}
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
		k = (k + 1)
	}
	return FWResult{
		Dist: dist,
		Next: next,
	}
}

func path(u int, v int, next [][]int) []int {
	if next[u][v] < 0 {
		return func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}([]any{})
	}
	var p []int = []int{u}
	_ = p
	var x int = u
	_ = x
	for x != v {
		x = next[x][v]
		p = append(p, x)
	}
	return p
}

func pathStr(p []int) string {
	var s string = ""
	_ = s
	var i int = 0
	_ = i
	for i < len(p) {
		s = (s + fmt.Sprint((p[i] + 1)))
		if i < (len(p) - 1) {
			s = (s + " -> ")
		}
		i = (i + 1)
	}
	return s
}

var n int

var g [][]int

var res FWResult

var i int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		INF = 1000000
		n = 4
		g = [][]int{}
		for i := 0; i < n; i++ {
			var row []int = []int{}
			_ = row
			for j := 0; j < n; j++ {
				if i == j {
					row = append(row, 0)
				} else {
					row = append(row, INF)
				}
			}
			g = append(g, row)
		}
		g[0][2] = (0 - 2)
		g[2][3] = 2
		g[3][1] = (0 - 1)
		g[1][0] = 4
		g[1][2] = 3
		res = floydWarshall(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(g))
		fmt.Println("pair\tdist\tpath")
		i = 0
		for i < n {
			var j int = 0
			_ = j
			for j < n {
				if i != j {
					var p []int = path(i, j, func(v any) [][]int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([][]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return [][]int{}
							}
							out := make([][]int, len(arr))
							for i, x := range arr {
								out[i] = x.([]int)
							}
							return out
						}
						return v.([][]int)
					}(res.Next))
					_ = p
					fmt.Println(((((((fmt.Sprint((i + 1)) + " -> ") + fmt.Sprint((j + 1))) + "\t") + fmt.Sprint(res.Dist[i][j])) + "\t") + pathStr(func(v any) []int {
						if v == nil {
							return nil
						}
						if vv, ok := v.([]int); ok {
							return vv
						}
						if arr, ok := v.([]any); ok {
							if len(arr) == 0 {
								return []int{}
							}
							out := make([]int, len(arr))
							for i, x := range arr {
								out[i] = x.(int)
							}
							return out
						}
						return v.([]int)
					}(p))))
				}
				j = (j + 1)
			}
			i = (i + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
