//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-25 00:43:58 GMT+7
package main

import (
	"fmt"
)

func pow2(n int) int {
	var v int = 1
	_ = v
	var i int = 0
	_ = i
	for i < n {
		v = (v * 2)
		i = (i + 1)
	}
	return v
}

func lshift(x int, n int) int {
	return (x * pow2(n))
}

func rshift(x int, n int) int {
	return (x / pow2(n))
}

type Writer struct {
	Order string `json:"order"`
	Bits  int    `json:"bits"`
	Nbits int    `json:"nbits"`
	Data  []int  `json:"data"`
}

func NewWriter(order string) Writer {
	return Writer{
		Order: order,
		Bits:  0,
		Nbits: 0,
		Data:  []int{},
	}
}

func writeBitsLSB(w Writer, c int, width int) Writer {
	w.Bits = (w.Bits + lshift(c, w.Nbits))
	w.Nbits = (w.Nbits + width)
	for w.Nbits >= 8 {
		var b int = (w.Bits % 256)
		_ = b
		w.Data = append(w.Data, b)
		w.Bits = rshift(w.Bits, 8)
		w.Nbits = (w.Nbits - 8)
	}
	return w
}

func writeBitsMSB(w Writer, c int, width int) Writer {
	w.Bits = (w.Bits + lshift(c, ((32-width)-w.Nbits)))
	w.Nbits = (w.Nbits + width)
	for w.Nbits >= 8 {
		var b int = (rshift(w.Bits, 24) % 256)
		_ = b
		w.Data = append(w.Data, b)
		w.Bits = ((w.Bits % pow2(24)) * 256)
		w.Nbits = (w.Nbits - 8)
	}
	return w
}

func WriteBits(w Writer, c int, width int) Writer {
	if w.Order == "LSB" {
		return writeBitsLSB(w, c, width)
	}
	return writeBitsMSB(w, c, width)
}

func CloseWriter(w Writer) Writer {
	if w.Nbits > 0 {
		if w.Order == "MSB" {
			w.Bits = rshift(w.Bits, 24)
		}
		w.Data = append(w.Data, (w.Bits % 256))
	}
	w.Bits = 0
	w.Nbits = 0
	return w
}

func toBinary(n int, bits int) string {
	var b string = ""
	_ = b
	var val int = n
	_ = val
	var i int = 0
	_ = i
	for i < bits {
		b = (fmt.Sprint((val % 2)) + b)
		val = (val / 2)
		i = (i + 1)
	}
	return b
}

func bytesToBits(bs []int) string {
	var out string = "["
	_ = out
	var i int = 0
	_ = i
	for i < len(bs) {
		out = (out + toBinary(bs[i], 8))
		if (i + 1) < len(bs) {
			out = (out + " ")
		}
		i = (i + 1)
	}
	out = (out + "]")
	return out
}

func ExampleWriter_WriteBits() {
	var bw Writer = NewWriter("MSB")
	_ = bw
	bw = WriteBits(bw, 15, 4)
	bw = WriteBits(bw, 0, 1)
	bw = WriteBits(bw, 19, 5)
	bw = CloseWriter(bw)
	fmt.Println(bytesToBits(bw.Data))
}

func main() {
	ExampleWriter_WriteBits()
}
