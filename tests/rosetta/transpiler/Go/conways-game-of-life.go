//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:41 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Field struct {
	S [][]bool `json:"s"`
	W int      `json:"w"`
	H int      `json:"h"`
}

type Life struct {
	A Field `json:"a"`
	B Field `json:"b"`
	W int   `json:"w"`
	H int   `json:"h"`
}

var seed int

func randN(n int) int {
	seed = (((seed * 1664525) + 1013904223) % 2147483647)
	return (seed % n)
}

func newField(w int, h int) Field {
	var rows [][]bool = [][]bool{}
	_ = rows
	var y int = 0
	_ = y
	for y < h {
		var row []bool = []bool{}
		_ = row
		var x int = 0
		_ = x
		for x < w {
			row = append(row, false)
			x = (x + 1)
		}
		rows = append(rows, row)
		y = (y + 1)
	}
	return Field{
		S: rows,
		W: w,
		H: h,
	}
}

func setCell(f Field, x int, y int, b bool) {
	var rows [][]bool = f.S
	_ = rows
	var row []bool = rows[y]
	_ = row
	row[x] = b
	rows[y] = row
	f.S = rows
}

func state(f Field, x int, y int) bool {
	for y < 0 {
		y = (y + f.H)
	}
	for x < 0 {
		x = (x + f.W)
	}
	return f.S[(y % f.H)][(x % f.W)]
}

func nextState(f Field, x int, y int) bool {
	var count int = 0
	_ = count
	var dy int = (0 - 1)
	_ = dy
	for dy <= 1 {
		var dx int = (0 - 1)
		_ = dx
		for dx <= 1 {
			if !((dx == 0) && (dy == 0)) && state(f, (x+dx), (y+dy)) {
				count = (count + 1)
			}
			dx = (dx + 1)
		}
		dy = (dy + 1)
	}
	return ((count == 3) || ((count == 2) && state(f, x, y)))
}

func newLife(w int, h int) Life {
	var a Field = newField(w, h)
	_ = a
	var i int = 0
	_ = i
	for i < ((w * h) / 2) {
		setCell(a, randN(w), randN(h), true)
		i = (i + 1)
	}
	return Life{
		A: a,
		B: newField(w, h),
		W: w,
		H: h,
	}
}

func step(l Life) {
	var y int = 0
	_ = y
	for y < l.H {
		var x int = 0
		_ = x
		for x < l.W {
			setCell(l.B, x, y, nextState(l.A, x, y))
			x = (x + 1)
		}
		y = (y + 1)
	}
	var tmp Field = l.A
	_ = tmp
	l.A = l.B
	l.B = tmp
}

func lifeString(l Life) string {
	var out string = ""
	_ = out
	var y int = 0
	_ = y
	for y < l.H {
		var x int = 0
		_ = x
		for x < l.W {
			if state(l.A, x, y) {
				out = (out + "*")
			} else {
				out = (out + " ")
			}
			x = (x + 1)
		}
		out = (out + "\n")
		y = (y + 1)
	}
	return out
}

func mochiMain() {
	var l Life = newLife(80, 15)
	_ = l
	var i int = 0
	_ = i
	for i < 300 {
		step(l)
		fmt.Println("\f")
		fmt.Println(lifeString(l))
		i = (i + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		seed = 1
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
