//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 16:25:59 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func padLeft(n int, width int) string {
	var s string = fmt.Sprint(n)
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func modPow(base int, exp int, mod int) int {
	var result int = (1 % mod)
	var b int = (base % mod)
	var e int = exp
	for e > 0 {
		if (e % 2) == 1 {
			result = ((result * b) % mod)
		}
		b = ((b * b) % mod)
		e = (e / 2)
	}
	return result
}

func mochiMain() {
	var k int = 2
	for k <= 10 {
		fmt.Println((("The first 50 Curzon numbers using a base of " + fmt.Sprint(k)) + " :"))
		var count int = 0
		var n int = 1
		var curzon50 []int = []int{}
		for {
			var d int = ((k * n) + 1)
			if ((modPow(k, n, d) + 1) % d) == 0 {
				if count < 50 {
					curzon50 = append(curzon50, n)
				}
				count = (count + 1)
				if count == 50 {
					var idx int = 0
					for idx < len(curzon50) {
						var line string = ""
						var j int = 0
						for j < 10 {
							line = ((line + padLeft(curzon50[idx], 4)) + " ")
							idx = (idx + 1)
							j = (j + 1)
						}
						fmt.Println(_substr(line, 0, (len(line) - 1)))
					}
				}
				if count == 1000 {
					fmt.Println(("\nOne thousandth: " + fmt.Sprint(n)))
					break
				}
			}
			n = (n + 1)
		}
		fmt.Println("")
		k = (k + 2)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
