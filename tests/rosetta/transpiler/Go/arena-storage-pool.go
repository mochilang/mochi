//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-24 00:02:45 GMT+7
package main

import (
	"fmt"
)

func poolPut(p []int, x int) []int {
	return append(p, x)
}

func poolGet(p []int) map[string]any {
	if len(p) == 0 {
		fmt.Println("pool empty")
		return map[string]any{"pool": p, "val": 0}
	}
	var idx int = (len(p) - 1)
	_ = idx
	var v int = p[idx]
	_ = v
	p = p[0:idx]
	return map[string]any{"pool": p, "val": v}
}

func clearPool(p []int) []int {
	return []int{}
}

func mochiMain() {
	var pool []int = []int{}
	_ = pool
	var i int = 1
	_ = i
	var j int = 2
	_ = j
	fmt.Println(fmt.Sprint((i + j)))
	pool = poolPut(pool, i)
	pool = poolPut(pool, j)
	i = 0
	j = 0
	var res1 map[string]any = poolGet(pool)
	_ = res1
	pool = res1["pool"].([]int)
	i = res1["val"].(int)
	var res2 map[string]any = poolGet(pool)
	_ = res2
	pool = res2["pool"].([]int)
	j = res2["val"].(int)
	i = 4
	j = 5
	fmt.Println(fmt.Sprint((i + j)))
	pool = poolPut(pool, i)
	pool = poolPut(pool, j)
	i = 0
	j = 0
	pool = clearPool(pool)
	var res3 map[string]any = poolGet(pool)
	_ = res3
	pool = res3["pool"].([]int)
	i = res3["val"].(int)
	var res4 map[string]any = poolGet(pool)
	_ = res4
	pool = res4["pool"].([]int)
	j = res4["val"].(int)
	i = 7
	j = 8
	fmt.Println(fmt.Sprint((i + j)))
}

func main() {
	mochiMain()
}
