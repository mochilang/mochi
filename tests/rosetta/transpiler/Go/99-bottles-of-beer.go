//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 21:15:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bottles(n int) string {
	if n == 0 {
		return "No more bottles"
	}
	if n == 1 {
		return "1 bottle"
	}
	return (fmt.Sprint(n) + " bottles")
}

func mochiMain() {
	var i int = 99
	_ = i
	for i > 0 {
		fmt.Println((bottles(i) + " of beer on the wall"))
		fmt.Println((bottles(i) + " of beer"))
		fmt.Println("Take one down, pass it around")
		fmt.Println((bottles((i - 1)) + " of beer on the wall"))
		i = (i - 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
