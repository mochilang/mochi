//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 21:52:35 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func padRight(s string, w int) string {
	var r string = s
	for len(r) < w {
		r = (r + " ")
	}
	return r
}

func linearCombo(c []int) string {
	var out string = ""
	var i int = 0
	for i < len(c) {
		var n int = c[i]
		if n != 0 {
			var op string = ""
			if (n < 0) && (len(out) == 0) {
				op = "-"
			} else {
				if n < 0 {
					op = " - "
				} else {
					if (n > 0) && (len(out) == 0) {
						op = ""
					} else {
						op = " + "
					}
				}
			}
			var av int = n
			if av < 0 {
				av = (0 - av)
			}
			var coeff string = (fmt.Sprint(av) + "*")
			if av == 1 {
				coeff = ""
			}
			out = (((((out + op) + coeff) + "e(") + fmt.Sprint((i + 1))) + ")")
		}
		i = (i + 1)
	}
	if len(out) == 0 {
		return "0"
	}
	return out
}

func mochiMain() {
	var combos [][]int = [][]int{[]int{1, 2, 3}, []int{0, 1, 2, 3}, []int{1, 0, 3, 4}, []int{1, 2, 0}, []int{0, 0, 0}, []int{0}, []int{1, 1, 1}, []int{(0 - 1), (0 - 1), (0 - 1)}, []int{(0 - 1), (0 - 2), 0, (0 - 3)}, []int{(0 - 1)}}
	var idx int = 0
	for idx < len(combos) {
		var c []int = combos[idx]
		var t string = "["
		var j int = 0
		for j < len(c) {
			t = (t + fmt.Sprint(c[j]))
			if j < (len(c) - 1) {
				t = (t + ", ")
			}
			j = (j + 1)
		}
		t = (t + "]")
		var lc string = linearCombo(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(c))
		fmt.Println(((padRight(t, 15) + "  ->  ") + lc))
		idx = (idx + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
