//go:build ignore

// Generated by Mochi v0.10.41 on 2025-07-26 19:16:03 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var nMech int

var detailsPerMech int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		nMech = 5
		detailsPerMech = 4
		for mech := 1; mech < (nMech + 1); mech++ {
			var id int = mech
			_ = id
			fmt.Println((((("worker " + fmt.Sprint(id)) + " contracted to assemble ") + fmt.Sprint(detailsPerMech)) + " details"))
			fmt.Println((("worker " + fmt.Sprint(id)) + " enters shop"))
			var d int = 0
			_ = d
			for d < detailsPerMech {
				fmt.Println((("worker " + fmt.Sprint(id)) + " assembling"))
				fmt.Println((("worker " + fmt.Sprint(id)) + " completed detail"))
				d = (d + 1)
			}
			fmt.Println((("worker " + fmt.Sprint(id)) + " leaves shop"))
			fmt.Println((("mechanism " + fmt.Sprint(mech)) + " completed"))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
