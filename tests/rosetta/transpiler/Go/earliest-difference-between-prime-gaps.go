//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:41:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var i int = (len(s) - 3)
	_ = i
	for i > 0 {
		s = ((string([]rune(s)[0:i]) + ",") + string([]rune(s)[i:len(s)]))
		i = (i - 3)
	}
	return s
}

func mochiMain() {
	var data []Data = []Data{Data{
		Pm: 10,
		G1: 4,
		S1: 7,
		G2: 6,
		S2: 23,
		D:  16,
	}, Data{
		Pm: 100,
		G1: 14,
		S1: 113,
		G2: 16,
		S2: 1831,
		D:  1718,
	}, Data{
		Pm: 1000,
		G1: 14,
		S1: 113,
		G2: 16,
		S2: 1831,
		D:  1718,
	}, Data{
		Pm: 10000,
		G1: 36,
		S1: 9551,
		G2: 38,
		S2: 30593,
		D:  21042,
	}, Data{
		Pm: 100000,
		G1: 70,
		S1: 173359,
		G2: 72,
		S2: 31397,
		D:  141962,
	}, Data{
		Pm: 1000000,
		G1: 100,
		S1: 396733,
		G2: 102,
		S2: 1444309,
		D:  1047576,
	}, Data{
		Pm: 10000000,
		G1: 148,
		S1: 2010733,
		G2: 150,
		S2: 13626257,
		D:  11615524,
	}, Data{
		Pm: 100000000,
		G1: 198,
		S1: 46006769,
		G2: 200,
		S2: 378043979,
		D:  332037210,
	}, Data{
		Pm: 1000000000,
		G1: 276,
		S1: 649580171,
		G2: 278,
		S2: 4260928601,
		D:  3611348430,
	}, Data{
		Pm: 10000000000,
		G1: 332,
		S1: 5893180121,
		G2: 334,
		S2: 30827138509,
		D:  24933958388,
	}, Data{
		Pm: 100000000000,
		G1: 386,
		S1: 35238645587,
		G2: 388,
		S2: 156798792223,
		D:  121560146636,
	}}
	_ = data
	for _, entry := range data {
		var pm string = commatize(entry.Pm)
		_ = pm
		var line1 string = (("Earliest difference > " + pm) + " between adjacent prime gap starting primes:")
		_ = line1
		fmt.Println(line1)
		var line2 string = (((((((((("Gap " + fmt.Sprint(entry.G1)) + " starts at ") + commatize(entry.S1)) + ", gap ") + fmt.Sprint(entry.G2)) + " starts at ") + commatize(entry.S2)) + ", difference is ") + commatize(entry.D)) + ".")
		_ = line2
		fmt.Println(line2)
		fmt.Println("")
	}
}

type Data struct {
	Pm int `json:"pm"`
	G1 int `json:"g1"`
	S1 int `json:"s1"`
	G2 int `json:"g2"`
	S2 int `json:"s2"`
	D  int `json:"d"`
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
