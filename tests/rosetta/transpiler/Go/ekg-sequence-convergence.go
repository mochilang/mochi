//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:51:15 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func contains(xs []int, n int) bool {
	var i int = 0
	_ = i
	for i < len(xs) {
		if xs[i] == n {
			return true
		}
		i = (i + 1)
	}
	return false
}

func gcd(a int, b int) int {
	var x int = a
	_ = x
	var y int = b
	_ = y
	for y != 0 {
		var t int = (x % y)
		_ = t
		x = y
		y = t
	}
	if x < 0 {
		x = (0 - x)
	}
	return x
}

func sortInts(xs []int) []int {
	var arr []int = xs
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				var tmp int = arr[j]
				_ = tmp
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func areSame(s []int, t []int) bool {
	if len(s) != len(t) {
		return false
	}
	var a []int = sortInts(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(s))
	_ = a
	var b []int = sortInts(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(t))
	_ = b
	var i int = 0
	_ = i
	for i < len(a) {
		if a[i] != b[i] {
			return false
		}
		i = (i + 1)
	}
	return true
}

func printSlice(start int, seq []int) {
	var first []int = []int{}
	_ = first
	var i int = 0
	_ = i
	for i < 30 {
		first = append(first, seq[i])
		i = (i + 1)
	}
	var pad string = ""
	_ = pad
	if start < 10 {
		pad = " "
	}
	fmt.Println((((("EKG(" + pad) + fmt.Sprint(start)) + "): ") + fmt.Sprint(first)))
}

func mochiMain() {
	var limit int = 100
	_ = limit
	var starts []int = []int{2, 5, 7, 9, 10}
	_ = starts
	var ekg [][]int = [][]int{}
	_ = ekg
	var s int = 0
	_ = s
	for s < len(starts) {
		var seq []int = []int{1, starts[s]}
		_ = seq
		var n int = 2
		_ = n
		for n < limit {
			var i int = 2
			_ = i
			var done bool = false
			_ = done
			for !done {
				if !func() bool {
					for _, v := range seq {
						if v == i {
							return true
						}
					}
					return false
				}() && (gcd(seq[(n-1)], i) > 1) {
					seq = append(seq, i)
					done = true
				}
				i = (i + 1)
			}
			n = (n + 1)
		}
		ekg = append(ekg, seq)
		printSlice(starts[s], func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(seq))
		s = (s + 1)
	}
	var i int = 2
	_ = i
	var found bool = false
	_ = found
	for i < limit {
		if (ekg[1][i] == ekg[2][i]) && areSame(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ekg[1][:i]), func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(ekg[2][:i])) {
			fmt.Println(("\nEKG(5) and EKG(7) converge at term " + fmt.Sprint((i + 1))))
			found = true
			break
		}
		i = (i + 1)
	}
	if !found {
		fmt.Println((("\nEKG5(5) and EKG(7) do not converge within " + fmt.Sprint(limit)) + " terms"))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
