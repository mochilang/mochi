//go:build ignore

// Generated by Mochi v0.10.38 on 2025-07-23 23:44:26 GMT+7
package main

import (
	"fmt"
)

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func split(s string, sep string) []string {
	var parts []string = []string{}
	_ = parts
	var cur string = ""
	_ = cur
	var i int = 0
	_ = i
	for i < len(s) {
		if ((len(sep) > 0) && ((i + len(sep)) <= len(s))) && (_substr(s, i, (i+len(sep))) == sep) {
			parts = append(parts, cur)
			cur = ""
			i = (i + len(sep))
		} else {
			cur = (cur + _substr(s, i, (i+1)))
			i = (i + 1)
		}
	}
	parts = append(parts, cur)
	return parts
}

func rstripEmpty(words []string) []string {
	var n int = len(words)
	_ = n
	for (n > 0) && (words[(n-1)] == "") {
		n = (n - 1)
	}
	return words[:n]
}

func spaces(n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < n {
		out = (out + " ")
		i = (i + 1)
	}
	return out
}

func pad(word string, width int, align int) string {
	var diff int = (width - len(word))
	_ = diff
	if align == 0 {
		return (word + spaces(diff))
	}
	if align == 2 {
		return (spaces(diff) + word)
	}
	var left int = int((diff / 2))
	_ = left
	var right int = (diff - left)
	_ = right
	return ((spaces(left) + word) + spaces(right))
}

func newFormatter(text string) map[string]any {
	var lines []string = split(text, "\n")
	_ = lines
	var fmtLines [][]string = [][]string{}
	_ = fmtLines
	var width []int = []int{}
	_ = width
	var i int = 0
	_ = i
	for i < len(lines) {
		if len(lines[i]) == 0 {
			i = (i + 1)
			continue
		}
		var words []string = rstripEmpty(split(lines[i], "$"))
		_ = words
		fmtLines = append(fmtLines, words)
		var j int = 0
		_ = j
		for j < len(words) {
			var wlen int = len(words[j])
			_ = wlen
			if j == len(width) {
				width = append(width, wlen)
			} else {
				if wlen > width[j] {
					width[j] = wlen
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return map[string]any{"text": fmtLines, "width": width}
}

func printFmt(f map[string]any, align int) {
	var lines [][]string = f["text"].([][]string)
	_ = lines
	var width []int = f["width"].([]int)
	_ = width
	var i int = 0
	_ = i
	for i < len(lines) {
		var words []string = lines[i]
		_ = words
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(words) {
			line = ((line + pad(words[j], width[j], align)) + " ")
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
	fmt.Println("")
}

var text string = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.")

var f map[string]any = newFormatter(text)

func main() {
	printFmt(f, 0)
	printFmt(f, 1)
	printFmt(f, 2)
}
