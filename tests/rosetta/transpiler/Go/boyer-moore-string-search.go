//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 21:15:08 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func indexOfStr(h string, n string) int {
	var hlen int = len(h)
	_ = hlen
	var nlen int = len(n)
	_ = nlen
	if nlen == 0 {
		return 0
	}
	var i int = 0
	_ = i
	for i <= (hlen - nlen) {
		if _substr(h, i, (i+nlen)) == n {
			return i
		}
		i = (i + 1)
	}
	return (0 - 1)
}

func stringSearchSingle(h string, n string) int {
	return indexOfStr(h, n)
}

func stringSearch(h string, n string) []int {
	var result []int = []int{}
	_ = result
	var start int = 0
	_ = start
	var hlen int = len(h)
	_ = hlen
	var nlen int = len(n)
	_ = nlen
	for start < hlen {
		var idx int = indexOfStr(_substr(h, start, hlen), n)
		_ = idx
		if idx >= 0 {
			result = append(result, (start + idx))
			start = ((start + idx) + nlen)
		} else {
			break
		}
	}
	return result
}

func display(nums []int) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(nums) {
		if i > 0 {
			s = (s + ", ")
		}
		s = (s + fmt.Sprint(nums[i]))
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

func mochiMain() {
	var texts []string = []string{"GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."}
	_ = texts
	var patterns []string = []string{"TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"}
	_ = patterns
	var i int = 0
	_ = i
	for i < len(texts) {
		fmt.Println(((("text" + fmt.Sprint((i + 1))) + " = ") + texts[i]))
		i = (i + 1)
	}
	fmt.Println("")
	var j int = 0
	_ = j
	for j < len(texts) {
		var idxs []int = stringSearch(texts[j], patterns[j])
		_ = idxs
		fmt.Println(((((("Found \"" + patterns[j]) + "\" in 'text") + fmt.Sprint((j + 1))) + "' at indexes ") + display(idxs)))
		j = (j + 1)
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
