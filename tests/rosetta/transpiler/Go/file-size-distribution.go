//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:28:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func log10floor(n int) int {
	var p int = 0
	_ = p
	var v int = n
	_ = v
	for v >= 10 {
		v = int((v / 10))
		p = (p + 1)
	}
	return p
}

func commatize(n int) string {
	var s string = fmt.Sprint(n)
	_ = s
	var res string = ""
	_ = res
	var i int = 0
	_ = i
	for i < len(s) {
		if (i > 0) && (((len(s) - i) % 3) == 0) {
			res = (res + ",")
		}
		res = (res + _substr(s, i, (i+1)))
		i = (i + 1)
	}
	return res
}

func showDistribution(sizes []int) {
	var bins []int = []int{}
	_ = bins
	var i int = 0
	_ = i
	for i < 12 {
		bins = append(bins, 0)
		i = (i + 1)
	}
	var total int = 0
	_ = total
	for _, sz := range sizes {
		total = (total + sz)
		var idx int = 0
		_ = idx
		if sz > 0 {
			idx = (log10floor(sz) + 1)
		}
		bins[idx] = (bins[idx] + 1)
	}
	fmt.Println("File size distribution:\n")
	i = 0
	for i < len(bins) {
		var prefix string = "  "
		_ = prefix
		if i > 0 {
			prefix = "+ "
		}
		fmt.Println(((((prefix + "Files less than 10 ^ ") + fmt.Sprint(i)) + " bytes : ") + fmt.Sprint(bins[i])))
		i = (i + 1)
	}
	fmt.Println("                                  -----")
	fmt.Println(("= Total number of files         : " + fmt.Sprint(len(sizes))))
	fmt.Println((("  Total size of files           : " + commatize(total)) + " bytes"))
}

func mochiMain() {
	var sizes []int = []int{0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000}
	_ = sizes
	showDistribution(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(sizes))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
