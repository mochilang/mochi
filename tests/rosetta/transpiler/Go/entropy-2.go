//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 23:30:57 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sort"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func log2(x float64) float64 {
	var k float64 = 0.0
	_ = k
	var v float64 = x
	_ = v
	for v >= 2.0 {
		v = (v / 2.0)
		k = (k + 1.0)
	}
	for v < 1.0 {
		v = (v * 2.0)
		k = (k - 1.0)
	}
	var z float64 = ((v - 1.0) / (v + 1.0))
	_ = z
	var zpow float64 = z
	_ = zpow
	var sum float64 = z
	_ = sum
	var i int = 3
	_ = i
	for i <= 9 {
		zpow = ((zpow * z) * z)
		sum = (sum + (zpow / float64(i)))
		i = (i + 2)
	}
	var ln2 float64 = 0.6931471805599453
	_ = ln2
	_ = ln2
	return (k + ((2.0 * sum) / ln2))
}

func mochiMain() {
	var s string = "1223334444"
	_ = s
	var counts map[string]int = map[string]int{}
	_ = counts
	var l float64 = 0.0
	_ = l
	var i int = 0
	_ = i
	for i < len(s) {
		var ch string = _substr(s, i, (i + 1))
		_ = ch
		if func() bool { _, ok := counts[ch]; return ok }() {
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
		}
		l = (l + 1.0)
		i = (i + 1)
	}
	var hm float64 = 0.0
	_ = hm
	for _, ch := range func() []string {
		keys := make([]string, 0, len(counts))
		for k := range counts {
			keys = append(keys, k)
		}
		sort.Slice(keys, func(i, j int) bool { return fmt.Sprint(keys[i]) < fmt.Sprint(keys[j]) })
		return keys
	}() {
		var c float64 = float64(counts[ch])
		_ = c
		hm = (hm + (c * log2(c)))
	}
	fmt.Println(fmt.Sprint((log2(l) - (hm / l))))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
