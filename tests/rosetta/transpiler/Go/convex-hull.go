//go:build ignore

// Generated by Mochi v0.10.54 on 2025-08-02 14:40:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

type Point struct {
	X int `json:"x"`
	Y int `json:"y"`
}

func ccw(a Point, b Point, c Point) bool {
	var lhs int = ((b.X - a.X) * (c.Y - a.Y))
	_ = lhs
	_ = lhs
	var rhs int = ((b.Y - a.Y) * (c.X - a.X))
	_ = rhs
	_ = rhs
	return (lhs > rhs)
}

func sortPoints(ps []Point) []Point {
	var arr []Point = ps
	_ = arr
	var n int = len(arr)
	_ = n
	var i int = 0
	_ = i
	for i < n {
		var j int = 0
		_ = j
		for j < (n - 1) {
			var p Point = arr[j]
			_ = p
			var q Point = arr[(j + 1)]
			_ = q
			if (p.X > q.X) || ((p.X == q.X) && (p.Y > q.Y)) {
				arr[j] = q
				arr[(j + 1)] = p
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

func convexHull(ps []Point) []Point {
	ps = sortPoints(func(v any) []Point {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]Point); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []Point{}
			}
			out := make([]Point, len(arr))
			for i, x := range arr {
				out[i] = x.(Point)
			}
			return out
		}
		return v.([]Point)
	}(ps))
	var h []Point = []Point{}
	_ = h
	for _, pt := range ps {
		for (len(h) >= 2) && (ccw(h[(len(h)-2)], h[(len(h)-1)], pt) == false) {
			h = h[:(len(h) - 1)]
		}
		h = append(h, pt)
	}
	var i int = (len(ps) - 2)
	_ = i
	var t int = (len(h) + 1)
	_ = t
	for i >= 0 {
		var pt Point = ps[i]
		_ = pt
		for (len(h) >= t) && (ccw(h[(len(h)-2)], h[(len(h)-1)], pt) == false) {
			h = h[:(len(h) - 1)]
		}
		h = append(h, pt)
		i = (i - 1)
	}
	return h[:(len(h) - 1)]
}

func pointStr(p Point) string {
	return (((("(" + fmt.Sprint(p.X)) + ",") + fmt.Sprint(p.Y)) + ")")
}

func hullStr(h []Point) string {
	var s string = "["
	_ = s
	var i int = 0
	_ = i
	for i < len(h) {
		s = (s + pointStr(h[i]))
		if i < (len(h) - 1) {
			s = (s + " ")
		}
		i = (i + 1)
	}
	s = (s + "]")
	return s
}

var pts []Point

var hull []Point

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		pts = []Point{Point{
			X: 16,
			Y: 3,
		}, Point{
			X: 12,
			Y: 17,
		}, Point{
			X: 0,
			Y: 6,
		}, Point{
			X: (0 - 4),
			Y: (0 - 6),
		}, Point{
			X: 16,
			Y: 6,
		}, Point{
			X: 16,
			Y: (0 - 7),
		}, Point{
			X: 16,
			Y: (0 - 3),
		}, Point{
			X: 17,
			Y: (0 - 4),
		}, Point{
			X: 5,
			Y: 19,
		}, Point{
			X: 19,
			Y: (0 - 8),
		}, Point{
			X: 3,
			Y: 16,
		}, Point{
			X: 12,
			Y: 13,
		}, Point{
			X: 3,
			Y: (0 - 4),
		}, Point{
			X: 17,
			Y: 5,
		}, Point{
			X: (0 - 3),
			Y: 15,
		}, Point{
			X: (0 - 3),
			Y: (0 - 9),
		}, Point{
			X: 0,
			Y: 11,
		}, Point{
			X: (0 - 9),
			Y: (0 - 3),
		}, Point{
			X: (0 - 4),
			Y: (0 - 2),
		}, Point{
			X: 12,
			Y: 10,
		}}
		hull = convexHull(func(v any) []Point {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Point); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Point{}
				}
				out := make([]Point, len(arr))
				for i, x := range arr {
					out[i] = x.(Point)
				}
				return out
			}
			return v.([]Point)
		}(pts))
		fmt.Println(("Convex Hull: " + hullStr(func(v any) []Point {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]Point); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []Point{}
				}
				out := make([]Point, len(arr))
				for i, x := range arr {
					out[i] = x.(Point)
				}
				return out
			}
			return v.([]Point)
		}(hull))))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
