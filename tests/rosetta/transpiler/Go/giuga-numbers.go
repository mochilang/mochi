//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 18:31:58 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func primeFactors(n int) []int {
	var factors []int = []int{}
	_ = factors
	var last int = 0
	_ = last
	var x int = n
	_ = x
	for (x % 2) == 0 {
		if last == 2 {
			return func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]any{})
		}
		factors = append(factors, 2)
		last = 2
		x = (x / 2)
	}
	var p int = 3
	_ = p
	for (p * p) <= x {
		for (x % p) == 0 {
			if last == p {
				return func(v any) []int {
					if v == nil {
						return nil
					}
					if vv, ok := v.([]int); ok {
						return vv
					}
					if arr, ok := v.([]any); ok {
						if len(arr) == 0 {
							return []int{}
						}
						out := make([]int, len(arr))
						for i, x := range arr {
							out[i] = x.(int)
						}
						return out
					}
					return v.([]int)
				}([]any{})
			}
			factors = append(factors, p)
			last = p
			x = (x / p)
		}
		p = (p + 2)
	}
	if x > 1 {
		if last == x {
			return func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}([]any{})
		}
		factors = append(factors, x)
	}
	return factors
}

func isGiuga(n int) bool {
	var facs []int = primeFactors(n)
	_ = facs
	if len(facs) <= 2 {
		return false
	}
	for _, f := range facs {
		if (((n / f) - 1) % f) != 0 {
			return false
		}
	}
	return true
}

func mochiMain() {
	var known []int = []int{30, 858, 1722, 66198}
	_ = known
	var nums []int = []int{}
	_ = nums
	for _, n := range known {
		if isGiuga(n) {
			nums = append(nums, n)
		}
	}
	fmt.Println("The first 4 Giuga numbers are:")
	fmt.Println(func() string {
		b, _ := json.Marshal(nums)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
