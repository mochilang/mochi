//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 19:13:10 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

var width int

var height int

var seed *big.Int

func nextRand() int {
	seed = new(big.Int).Mod(new(big.Int).Add(new(big.Int).Mul(seed, big.NewInt(int64(1664525))), big.NewInt(int64(1013904223))), big.NewInt(int64(2147483647)))
	return int(seed.Int64())
}

func randBit() int {
	var r int = nextRand()
	_ = r
	if (r % 2) == 0 {
		return 0
	}
	return 255
}

var y int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		width = 320
		height = 240
		seed = big.NewInt(int64((_now() % 2147483647)))
		fmt.Println("P2")
		fmt.Println(((fmt.Sprint(width) + " ") + fmt.Sprint(height)))
		fmt.Println("255")
		y = 0
		for y < height {
			var line string = ""
			_ = line
			var x int = 0
			_ = x
			for x < width {
				var val int = randBit()
				_ = val
				line = (line + fmt.Sprint(val))
				if x < (width - 1) {
					line = (line + " ")
				}
				x = (x + 1)
			}
			fmt.Println(line)
			y = (y + 1)
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
