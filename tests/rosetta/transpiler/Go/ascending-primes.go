//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-25 20:00:11 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	var d int = 5
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

var asc []int

func gen(first int, cand int, digits int) {
	if digits == 0 {
		if isPrime(cand) {
			asc = func() []int {
				res := make([]int, len(asc))
				copy(res, asc)
				res = append(res, []int{cand}...)
				return res
			}()
		}
		return
	}
	var i int = first
	_ = i
	for i < 10 {
		gen((i + 1), ((cand * 10) + i), (digits - 1))
		i = (i + 1)
	}
}

func pad(n int, width int) string {
	var s string = fmt.Sprint(n)
	_ = s
	for len(s) < width {
		s = (" " + s)
	}
	return s
}

func mochiMain() {
	var digits int = 1
	_ = digits
	for digits < 10 {
		gen(1, 0, digits)
		digits = (digits + 1)
	}
	fmt.Println((("There are " + fmt.Sprint(len(asc))) + " ascending primes, namely:"))
	var i int = 0
	_ = i
	var line string = ""
	_ = line
	for i < len(asc) {
		line = ((line + pad(asc[i], 8)) + " ")
		if ((i + 1) % 10) == 0 {
			fmt.Println(_substr(line, 0, (len(line) - 1)))
			line = ""
		}
		i = (i + 1)
	}
	if len(line) > 0 {
		fmt.Println(_substr(line, 0, (len(line) - 1)))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		start := _now()
		asc = []int{}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		end := _now()
		data := map[string]any{"name": "main", "duration_us": (end - start) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
