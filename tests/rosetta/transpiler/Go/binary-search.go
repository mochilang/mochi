//go:build ignore

// Generated by Mochi v0.10.39 on 2025-07-24 18:59:16 GMT+7
package main

import (
	"fmt"
)

func bsearch(arr []int, x int) int {
	var low int = 0
	_ = low
	var high int = (len(arr) - 1)
	_ = high
	for low <= high {
		var mid int = ((low + high) / 2)
		_ = mid
		if arr[mid] > x {
			high = (mid - 1)
		} else {
			if arr[mid] < x {
				low = (mid + 1)
			} else {
				return mid
			}
		}
	}
	return (0 - 1)
}

func bsearchRec(arr []int, x int, low int, high int) int {
	if high < low {
		return (0 - 1)
	}
	var mid int = ((low + high) / 2)
	_ = mid
	if arr[mid] > x {
		return bsearchRec(arr, x, low, (mid - 1))
	} else {
		if arr[mid] < x {
			return bsearchRec(arr, x, (mid + 1), high)
		}
	}
	return mid
}

func mochiMain() {
	var nums []int = []int{(0 - 31), 0, 1, 2, 2, 4, 65, 83, 99, 782}
	_ = nums
	var x int = 2
	_ = x
	var idx int = bsearch(nums, x)
	_ = idx
	if idx >= 0 {
		fmt.Println((((fmt.Sprint(x) + " is at index ") + fmt.Sprint(idx)) + "."))
	} else {
		fmt.Println((fmt.Sprint(x) + " is not found."))
	}
	x = 5
	idx = bsearchRec(nums, x, 0, (len(nums) - 1))
	if idx >= 0 {
		fmt.Println((((fmt.Sprint(x) + " is at index ") + fmt.Sprint(idx)) + "."))
	} else {
		fmt.Println((fmt.Sprint(x) + " is not found."))
	}
}

func main() {
	mochiMain()
}
