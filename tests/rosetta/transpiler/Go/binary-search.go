//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-02 01:03:55 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func bsearch(arr []int, x int) int {
	var low int = 0
	_ = low
	var high int = (len(arr) - 1)
	_ = high
	for low <= high {
		var mid int = ((low + high) / 2)
		_ = mid
		if arr[mid] > x {
			high = (mid - 1)
		} else {
			if arr[mid] < x {
				low = (mid + 1)
			} else {
				return mid
			}
		}
	}
	return (0 - 1)
}

func bsearchRec(arr []int, x int, low int, high int) int {
	if high < low {
		return (0 - 1)
	}
	var mid int = ((low + high) / 2)
	_ = mid
	if arr[mid] > x {
		return bsearchRec(func(v any) []int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return []int{}
				}
				out := make([]int, len(arr))
				for i, x := range arr {
					out[i] = x.(int)
				}
				return out
			}
			return v.([]int)
		}(arr), x, low, (mid - 1))
	} else {
		if arr[mid] < x {
			return bsearchRec(func(v any) []int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return []int{}
					}
					out := make([]int, len(arr))
					for i, x := range arr {
						out[i] = x.(int)
					}
					return out
				}
				return v.([]int)
			}(arr), x, (mid + 1), high)
		}
	}
	return mid
}

func mochiMain() {
	var nums []int = []int{(0 - 31), 0, 1, 2, 2, 4, 65, 83, 99, 782}
	_ = nums
	var x int = 2
	_ = x
	var idx int = bsearch(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums), x)
	_ = idx
	if idx >= 0 {
		fmt.Println((((fmt.Sprint(x) + " is at index ") + fmt.Sprint(idx)) + "."))
	} else {
		fmt.Println((fmt.Sprint(x) + " is not found."))
	}
	x = 5
	idx = bsearchRec(func(v any) []int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return []int{}
			}
			out := make([]int, len(arr))
			for i, x := range arr {
				out[i] = x.(int)
			}
			return out
		}
		return v.([]int)
	}(nums), x, 0, (len(nums) - 1))
	if idx >= 0 {
		fmt.Println((((fmt.Sprint(x) + " is at index ") + fmt.Sprint(idx)) + "."))
	} else {
		fmt.Println((fmt.Sprint(x) + " is not found."))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
