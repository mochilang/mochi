//go:build ignore

// Generated by Mochi v0.10.42 on 2025-07-27 22:56:19 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	var d int = 3
	_ = d
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
	}
	return true
}

func revInt(n int) int {
	var r int = 0
	_ = r
	var t int = n
	_ = t
	for t > 0 {
		r = ((r * 10) + (t % 10))
		t = int((t / 10))
	}
	return r
}

func mochiMain() {
	var emirps []int = []int{}
	_ = emirps
	var n int = 2
	_ = n
	for len(emirps) < 10000 {
		if isPrime(n) {
			var r int = revInt(n)
			_ = r
			if (r != n) && isPrime(r) {
				emirps = append(emirps, n)
			}
		}
		n = (n + 1)
	}
	var line string = "   ["
	_ = line
	var i int = 0
	_ = i
	for i < 20 {
		line = (line + fmt.Sprint(emirps[i]))
		if i < 19 {
			line = (line + ", ")
		}
		i = (i + 1)
	}
	line = (line + "]")
	fmt.Println("First 20:")
	fmt.Println(line)
	line = "  ["
	for _, e := range emirps {
		if e >= 8000 {
			break
		}
		if e >= 7700 {
			line = ((line + fmt.Sprint(e)) + ", ")
		}
	}
	line = (line + "]")
	fmt.Println("Between 7700 and 8000:")
	fmt.Println(line)
	fmt.Println("10000th:")
	fmt.Println((("   [" + fmt.Sprint(emirps[9999])) + "]"))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
