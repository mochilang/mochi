//go:build ignore

// Generated by Mochi v0.10.52 on 2025-08-01 17:46:40 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _substr(s string, start, end int) string {
	r := []rune(s)
	if start < 0 {
		start = 0
	}
	if end > len(r) {
		end = len(r)
	}
	if start > len(r) {
		start = len(r)
	}
	if end < start {
		end = start
	}
	return string(r[start:end])
}

func capitalize(s string) string {
	if len(s) == 0 {
		return s
	}
	return (strings.ToUpper(_substr(s, 0, 1)) + _substr(s, 1, len(s)))
}

var small []string

var tens []string

var illions []string

func say(n int) string {
	var t string = ""
	_ = t
	if n < 0 {
		t = "negative "
		n = (0 - n)
	}
	if n < 20 {
		return (t + small[n])
	} else {
		if n < 100 {
			t = tens[(n / 10)]
			var s int = (n % 10)
			_ = s
			if s > 0 {
				t = ((t + "-") + small[s])
			}
			return t
		} else {
			if n < 1000 {
				t = (small[(n/100)] + " hundred")
				var s int = (n % 100)
				_ = s
				if s > 0 {
					t = ((t + " ") + say(s))
				}
				return t
			}
		}
	}
	var sx string = ""
	_ = sx
	var i int = 0
	_ = i
	var nn int = n
	_ = nn
	for nn > 0 {
		var p int = (nn % 1000)
		_ = p
		nn = (nn / 1000)
		if p > 0 {
			var ix string = (say(p) + illions[i])
			_ = ix
			if sx != "" {
				ix = ((ix + " ") + sx)
			}
			sx = ix
		}
		i = (i + 1)
	}
	return (t + sx)
}

func fourIsMagic(n int) string {
	var s string = say(n)
	_ = s
	s = capitalize(s)
	var t string = s
	_ = t
	for n != 4 {
		n = len(s)
		s = say(n)
		t = ((((t + " is ") + s) + ", ") + s)
	}
	t = (t + " is magic.")
	return t
}

func mochiMain() {
	var nums []int = []int{0, 4, 6, 11, 13, 75, 100, 337, (0 - 164), 9223372036854775807}
	_ = nums
	for _, n := range nums {
		fmt.Println(fourIsMagic(n))
	}
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		small = []string{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"}
		tens = []string{"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"}
		illions = []string{"", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion"}
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
