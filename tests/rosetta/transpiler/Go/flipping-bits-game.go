//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:52 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func randInt(seed int, n int) []int {
	var next int = (((seed * 1664525) + 1013904223) % 2147483647)
	_ = next
	_ = next
	return []int{next, (next % n)}
}

func newBoard(n int, seed int) []any {
	var board [][]int = [][]int{}
	_ = board
	var s int = seed
	_ = s
	var i int = 0
	_ = i
	for i < n {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < n {
			var r []int = randInt(s, 2)
			_ = r
			s = r[0]
			row = append(row, r[1])
			j = (j + 1)
		}
		board = append(board, row)
		i = (i + 1)
	}
	return []any{board, s}
}

func copyBoard(b [][]int) [][]int {
	var nb [][]int = [][]int{}
	_ = nb
	var i int = 0
	_ = i
	for i < len(b) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for j < len(b[i]) {
			row = append(row, b[i][j])
			j = (j + 1)
		}
		nb = append(nb, row)
		i = (i + 1)
	}
	return nb
}

func flipRow(b [][]int, r int) [][]int {
	var j int = 0
	_ = j
	for j < len(b[r]) {
		b[r][j] = (1 - b[r][j])
		j = (j + 1)
	}
	return b
}

func flipCol(b [][]int, c int) [][]int {
	var i int = 0
	_ = i
	for i < len(b) {
		b[i][c] = (1 - b[i][c])
		i = (i + 1)
	}
	return b
}

func boardsEqual(a [][]int, b [][]int) bool {
	var i int = 0
	_ = i
	for i < len(a) {
		var j int = 0
		_ = j
		for j < len(a[i]) {
			if a[i][j] != b[i][j] {
				return false
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return true
}

func shuffleBoard(b [][]int, seed int) []any {
	var s int = seed
	_ = s
	var n int = len(b)
	_ = n
	var k int = 0
	_ = k
	for k < (2 * n) {
		var r []int = randInt(s, n)
		_ = r
		s = r[0]
		var idx int = int(r[1])
		_ = idx
		if (k % 2) == 0 {
			b = flipRow(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = x.([]int)
					}
					return out
				}
				return v.([][]int)
			}(b), idx)
		} else {
			b = flipCol(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = x.([]int)
					}
					return out
				}
				return v.([][]int)
			}(b), idx)
		}
		k = (k + 1)
	}
	return []any{b, s}
}

func solve(board [][]int, target [][]int) map[string][]int {
	var n int = len(board)
	_ = n
	var row []int = []int{}
	_ = row
	var col []int = []int{}
	_ = col
	var i int = 0
	_ = i
	for i < n {
		var diff int = func() int {
			if board[i][0] != target[i][0] {
				return 1
			} else {
				return 0
			}
		}()
		_ = diff
		row = append(row, diff)
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < n {
		var diff int = func() int {
			if board[0][j] != target[0][j] {
				return 1
			} else {
				return 0
			}
		}()
		_ = diff
		var val int = ((diff + row[0]) % 2)
		_ = val
		col = append(col, val)
		j = (j + 1)
	}
	return func(v any) map[string][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.(map[string][]int); ok {
			return vv
		}
		return nil
	}(map[string][]int{"row": row, "col": col})
}

func applySolution(b [][]int, sol map[string][]int) []any {
	var board [][]int = b
	_ = board
	var moves int = 0
	_ = moves
	var i int = 0
	_ = i
	for i < len(sol["row"]) {
		if sol["row"][i] == 1 {
			board = flipRow(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = x.([]int)
					}
					return out
				}
				return v.([][]int)
			}(board), i)
			moves = (moves + 1)
		}
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for j < len(sol["col"]) {
		if sol["col"][j] == 1 {
			board = flipCol(func(v any) [][]int {
				if v == nil {
					return nil
				}
				if vv, ok := v.([][]int); ok {
					return vv
				}
				if arr, ok := v.([]any); ok {
					if len(arr) == 0 {
						return [][]int{}
					}
					out := make([][]int, len(arr))
					for i, x := range arr {
						out[i] = x.([]int)
					}
					return out
				}
				return v.([][]int)
			}(board), j)
			moves = (moves + 1)
		}
		j = (j + 1)
	}
	return []any{board, moves}
}

func printBoard(b [][]int) {
	var i int = 0
	_ = i
	for i < len(b) {
		var line string = ""
		_ = line
		var j int = 0
		_ = j
		for j < len(b[i]) {
			line = (line + fmt.Sprint(b[i][j]))
			if j < (len(b[i]) - 1) {
				line = (line + " ")
			}
			j = (j + 1)
		}
		fmt.Println(line)
		i = (i + 1)
	}
}

func mochiMain() {
	var n int = 3
	_ = n
	var seed int = 1
	_ = seed
	var res []any = newBoard(n, seed)
	_ = res
	var target [][]int = func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(res[0])
	_ = target
	seed = res[1].(int)
	var board [][]int = copyBoard(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(target))
	_ = board
	for {
		var sres []any = shuffleBoard(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(copyBoard(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(board))), seed)
		_ = sres
		board = func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(sres[0])
		seed = sres[1].(int)
		if !boardsEqual(func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(board), func(v any) [][]int {
			if v == nil {
				return nil
			}
			if vv, ok := v.([][]int); ok {
				return vv
			}
			if arr, ok := v.([]any); ok {
				if len(arr) == 0 {
					return [][]int{}
				}
				out := make([][]int, len(arr))
				for i, x := range arr {
					out[i] = x.([]int)
				}
				return out
			}
			return v.([][]int)
		}(target)) {
			break
		}
	}
	fmt.Println("Target:")
	printBoard(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(target))
	fmt.Println("Board:")
	printBoard(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(board))
	var sol map[string][]int = solve(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(board), func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(target))
	_ = sol
	var ares []any = applySolution(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(board), sol)
	_ = ares
	board = func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(ares[0])
	var moves int = ares[1].(int)
	_ = moves
	fmt.Println("Solved:")
	printBoard(func(v any) [][]int {
		if v == nil {
			return nil
		}
		if vv, ok := v.([][]int); ok {
			return vv
		}
		if arr, ok := v.([]any); ok {
			if len(arr) == 0 {
				return [][]int{}
			}
			out := make([][]int, len(arr))
			for i, x := range arr {
				out[i] = x.([]int)
			}
			return out
		}
		return v.([][]int)
	}(board))
	fmt.Println(("Moves: " + fmt.Sprint(moves)))
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		mochiMain()
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
