//go:build ignore

// Generated by Mochi v0.10.50 on 2025-07-31 00:29:33 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func _repeat(s string, n int) string {
	if n <= 0 {
		return ""
	}
	return strings.Repeat(s, n)
}

func repeat(s string, n int) string {
	var out string = ""
	_ = out
	var i int = 0
	_ = i
	for i < n {
		out = (out + s)
		i = (i + 1)
	}
	return out
}

var records []string

func reverseStr(s string) string {
	var out string = ""
	_ = out
	var i int = (len(s) - 1)
	_ = i
	for i >= 0 {
		out = (out + string([]rune(s)[i:(i+1)]))
		i = (i - 1)
	}
	return out
}

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		records = []string{_repeat("abcdefgh", 10), _repeat("ijklmnop", 10), _repeat("qrstuvwx", 10)}
		for _, r := range records {
			fmt.Println(reverseStr(r))
		}
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
