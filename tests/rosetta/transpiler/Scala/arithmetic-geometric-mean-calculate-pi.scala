// Generated by Mochi v0.10.39 on 2025-07-25 00:49:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def abs(x: Double): Double = {
    if (x < 0.0) {
      return (0 - x).asInstanceOf[Double]
    }
    return x
  }
  
  def sqrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: Int = 0
    while (i < 20) {
      guess = (guess + x / guess) / 2.0
      i = (i + 1).asInstanceOf[Int]
    }
    return guess
  }
  
  def agmPi(): Double = {
    var a: Double = 1.0
    var g: Double = 1.0 / sqrtApprox(2.0)
    var sum: Double = 0.0
    var pow: Double = 2.0
    while (abs((a - g).asInstanceOf[Double]) > 0.000000000000001) {
      var t: Double = (a + g) / 2.0
      var u: Double = sqrtApprox((a * g).asInstanceOf[Double])
      a = t
      g = u
      pow = pow * 2.0
      var diff: Double = (a * a).asInstanceOf[Double] - (g * g).asInstanceOf[Double]
      sum = (sum + diff * pow).asInstanceOf[Double]
    }
    var pi: Double = 4.0 * a * a / (1.0 - sum)
    return pi
  }
  
  def main() = {
    println(String.valueOf(agmPi()))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
