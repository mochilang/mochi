// Generated by Mochi v0.10.40 on 2025-07-25 21:07:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def abs(x: Double): Double = {
      if (x < 0.0) {
        return (0 - x).toString.toDouble
      }
      return x
    }
    def sqrtApprox(x: Double): Double = {
      var guess: Double = x
      var i: Int = 0
      while (i < 20) {
        guess = (guess + x / guess) / 2.0
        i = (i + 1).asInstanceOf[Int]
      }
      return guess
    }
    def agmPi(): Double = {
      var a: Double = 1.0
      var g: Double = 1.0 / sqrtApprox(2.0)
      var sum: Double = 0.0
      var pow: Double = 2.0
      while (Math.abs(a - g) > 0.000000000000001) {
        var t: Double = (a + g) / 2.0
        var u: Double = sqrtApprox((a * g).toString.toDouble)
        a = t
        g = u
        pow = pow * 2.0
        var diff: Double = (a * a).toString.toDouble - (g * g).toString.toDouble
        sum = (sum + diff * pow).toString.toDouble
      }
      var pi: Double = 4.0 * a * a / (1.0 - sum)
      return pi
    }
    def main(): Any = {
      println(String.valueOf(agmPi()))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
