// Generated by Mochi v0.10.56 on 2025-08-04 00:21:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def repeat(ch: String, n: BigInt): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < n) {
    s = s + ch
    i = i + BigInt(1)
  }
  return s
}

def chance(prob: Double): Boolean = {
  val threshold: BigInt = (prob * 1000.0).toInt
  return _now() % BigInt(1000) < threshold
}

def newBoard(): ArrayBuffer[ArrayBuffer[String]] = {
  var b: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var row: ArrayBuffer[String] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      if (_now() % BigInt(2) == BigInt(0)) {
        row = row :+ "T"
      } else {
        row = row :+ " "
      }
      c = c + BigInt(1)
    }
    b = b :+ row
    r = r + BigInt(1)
  }
  return b
}

def step(src: ArrayBuffer[ArrayBuffer[String]]): ArrayBuffer[ArrayBuffer[String]] = {
  var dst: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var row: ArrayBuffer[String] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c < cols) {
      var cell: String = src((r.toInt).toInt)((c.toInt).toInt)
      var next: String = cell
      if (cell == "#") {
        next = " "
      } else {
        if (cell == "T") {
          var burning: Boolean = false
          var dr: BigInt = BigInt(0) - BigInt(1)
          while (dr <= BigInt(1)) {
            var dc: BigInt = BigInt(0) - BigInt(1)
            while (dc <= BigInt(1)) {
              if ((dr != BigInt(0) || dc != BigInt(0)).asInstanceOf[Boolean]) {
                val rr: BigInt = r + dr
                val cc: BigInt = c + dc
                if ((((rr >= BigInt(0) && rr < rows).asInstanceOf[Boolean] && cc >= BigInt(0)).asInstanceOf[Boolean] && cc < cols).asInstanceOf[Boolean]) {
                  if (src((rr.toInt).toInt)((cc.toInt).toInt) == "#") {
                    burning = true
                  }
                }
              }
              dc = dc + BigInt(1)
            }
            dr = dr + BigInt(1)
          }
          if ((burning || chance(f)).asInstanceOf[Boolean]) {
            next = "#"
          }
        } else {
          if (chance(p)) {
            next = "T"
          }
        }
      }
      row = row :+ next
      c = c + BigInt(1)
    }
    dst = dst :+ row
    r = r + BigInt(1)
  }
  return dst
}

def printBoard(b: ArrayBuffer[ArrayBuffer[String]]): Any = {
  println(_repeat("__", cols) + "\n\n")
  var r: BigInt = BigInt(0)
  while (r < rows) {
    var line: String = ""
    var c: BigInt = BigInt(0)
    while (c < cols) {
      val cell: String = b((r.toInt).toInt)((c.toInt).toInt)
      if (cell == " ") {
        line = line + "  "
      } else {
        line = line + " " + cell
      }
      c = c + BigInt(1)
    }
    println(line + "\n")
    r = r + BigInt(1)
  }
}

val rows: BigInt = BigInt(20)

val cols: BigInt = BigInt(30)

val p: Double = 0.01

val f: Double = 0.001

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var board: ArrayBuffer[ArrayBuffer[String]] = newBoard()
    printBoard(board)
    board = step(board)
    printBoard(board)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
