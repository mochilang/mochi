// Generated by Mochi v0.10.40 on 2025-07-25 20:28:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.annotation.tailrec
object Main {
  private def _padStart(s: String, width: Int, pad: String): String = {
    var out = s
    while (out.length < width) { out = pad + out }
    out
  }
  
  def bellTriangle(n: Int): ArrayBuffer[ArrayBuffer[BigInt]] = {
    var tri: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
    var i: Int = 0
    while (i < n) {
      var row: ArrayBuffer[BigInt] = ArrayBuffer()
      var j: Int = 0
      while (j < i) {
        row = row :+ BigInt(0)
        j = (j + 1).asInstanceOf[Int]
      }
      tri = tri :+ row
      i = (i + 1).asInstanceOf[Int]
    }
    tri(1)(0) = 1
    i = 2
    while (i < n) {
      tri(i)(0) = tri(i - 1)(i - 2)
      var j: Int = 1
      while (j < i) {
        tri(i)(j) = tri(i)(j - 1) + tri(i - 1)(j - 1)
        j = (j + 1).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return tri
  }
  
  def main(): Any = {
    val bt: ArrayBuffer[ArrayBuffer[BigInt]] = bellTriangle(51)
    println("First fifteen and fiftieth Bell numbers:")
    for (i <- 1 until 16) {
      println("" + _padStart(String.valueOf(i), 2, " ") + ": " + String.valueOf(bt(i)(0)))
    }
    println("50: " + String.valueOf(bt(50)(0)))
    println("")
    println("The first ten rows of Bell's triangle:")
    for (i <- 1 until 11) {
      println(bt(i))
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
