// Generated by Mochi v0.10.50 on 2025-07-31 08:01:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def floorf(x: Double): Double = {
    var i: Int = x.toInt
    if (i.toString.toDouble > x) {
      i = i - BigInt(1).toInt
    }
    return i.toString.toDouble
  }
  
  def frac(x: Double): Double = {
    return (x - floorf(x)).toString.toDouble
  }
  
  def sinApprox(x: Double): Double = {
    var term: Double = x
    var sum: Double = x
    var n: BigInt = BigInt(1)
    while (n <= BigInt(10)) {
      val denom: Double = (BigInt(2) * n * (BigInt(2) * n + BigInt(1))).toString.toDouble
      term = (-term * x * x / denom).toString.toDouble
      sum = (sum + term).toString.toDouble
      n = n + BigInt(1)
    }
    return sum
  }
  
  def sqrtApprox(x: Double): Double = {
    if (x <= BigInt(0).toString.toDouble) {
      return 0.0
    }
    var guess: Double = x
    var i: BigInt = BigInt(0)
    while (i < BigInt(10)) {
      guess = (guess + x / guess) / 2.0
      i = i + BigInt(1)
    }
    return guess
  }
  
  val PI: Double = 3.141592653589793
  
  val nframes: BigInt = BigInt(10)
  
  val w: BigInt = BigInt(32)
  
  val h: BigInt = BigInt(32)
  
  var total: BigInt = BigInt(0)
  
  var f: BigInt = BigInt(1)
  
  def main(args: Array[String]): Unit = {
    while (f <= nframes) {
      var y: BigInt = BigInt(0)
      while (y < h) {
        var x: BigInt = BigInt(0)
        while (x < w) {
          val fx: Double = x.toString.toDouble
          val fy: Double = y.toString.toDouble
          var value: Double = sinApprox(fx / 16.0)
          value = (value + sinApprox(fy / 8.0)).toString.toDouble
          value = (value + sinApprox((fx + fy) / 16.0)).toString.toDouble
          value = (value + sinApprox(sqrtApprox((fx * fx).toString.toDouble + (fy * fy).toString.toDouble) / 8.0)).toString.toDouble
          value = value + 4.0
          value = value / 8.0
          val rem: Double = frac(value + f.toString.toDouble / nframes.toString.toDouble)
          val ci: BigInt = nframes.toString.toDouble * rem.toInt + BigInt(1).toInt
          total = total + ci
          x = x + BigInt(1)
        }
        y = y + BigInt(1)
      }
      f = f + BigInt(1)
    }
    println(total)
  }
}
