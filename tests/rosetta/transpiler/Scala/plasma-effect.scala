// Generated by Mochi v0.10.56 on 2025-08-04 09:30:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floorf(x: Double): Double = {
  var i: Int = x.toInt
  if (i.toString.toDouble > x) {
    i = i - 1.toInt
  }
  return i.toString.toDouble
}

def frac(x: Double): Double = {
  return x - floorf(x)
}

def sinApprox(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var n: BigInt = 1
  while (n <= 10) {
    val denom: Double = (2 * n * (2 * n + 1)).toString.toDouble
    term = -term * x * x / denom
    sum = sum + term
    n = n + 1
  }
  return sum
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.toString.toDouble) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = 0
  while (i < 10) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

val PI: Double = 3.141592653589793

val nframes: BigInt = 10

val w: BigInt = 32

val h: BigInt = 32

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var total: BigInt = 0
    var f: BigInt = 1
    while (f <= nframes) {
      var y: BigInt = 0
      while (y < h) {
        var x: BigInt = 0
        while (x < w) {
          val fx: Double = x.toString.toDouble
          val fy: Double = y.toString.toDouble
          var value: Double = sinApprox(fx / 16.0)
          value = value + sinApprox(fy / 8.0)
          value = value + sinApprox((fx + fy) / 16.0)
          value = value + sinApprox(sqrtApprox(fx * fx + fy * fy) / 8.0)
          value = value + 4.0
          value = value / 8.0
          val rem: Double = frac(value + f.toString.toDouble / nframes.toString.toDouble)
          val ci: BigInt = nframes.toString.toDouble * rem.toInt + 1.toInt
          total = total + ci
          x = x + 1
        }
        y = y + 1
      }
      f = f + 1
    }
    println(total)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
