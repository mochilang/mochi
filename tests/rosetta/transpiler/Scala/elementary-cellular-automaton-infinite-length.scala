// Generated by Mochi v0.10.55 on 2025-08-02 21:10:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def pow2(n: BigInt): BigInt = {
  var p: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    p = p * BigInt(2)
    i = i + BigInt(1)
  }
  return p
}

def btoi(b: Boolean): BigInt = {
  if (b) {
    return BigInt(1)
  }
  return BigInt(0)
}

def addNoCells(_cells: String): String = {
  var cells: String = _cells
  var l: String = "O"
  var r: String = "O"
  if (cells.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "O") {
    l = "."
  }
  if (cells.slice(((cells).size - BigInt(1).toInt).toInt, ((cells).size).toInt) == "O") {
    r = "."
  }
  cells = (l + cells + r).toString
  cells = (l + cells + r).toString
  return cells
}

def step(cells: String, ruleVal: BigInt): String = {
  var newCells: String = ""
  var i: BigInt = BigInt(0)
  while (i < (cells).size - BigInt(2).toInt) {
    var bin: BigInt = BigInt(0)
    var b: BigInt = BigInt(2)
    var n: BigInt = i
    while (n < i + BigInt(3)) {
      bin = bin + btoi(cells.slice((n).toInt, (n + BigInt(1)).toInt) == "O") * pow2(b)
      b = b - BigInt(1)
      n = n + BigInt(1)
    }
    var a: String = "."
    if (ruleVal / pow2(bin) % BigInt(2) == BigInt(1)) {
      a = "O"
    }
    newCells = (newCells + a).toString
    i = i + BigInt(1)
  }
  return newCells
}

def repeat(ch: String, n: BigInt): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < n) {
    s = (s + ch).toString
    i = i + BigInt(1)
  }
  return s
}

def evolve(l: BigInt, ruleVal: BigInt): Any = {
  println(" Rule #" + String.valueOf(ruleVal) + ":")
  var cells: String = "O"
  var x: BigInt = BigInt(0)
  while (x < l) {
    cells = addNoCells(cells)
    var width: BigInt = BigInt(40) + (cells).size / BigInt(2).toInt
    var spaces: String = _repeat(" ", width - (cells).size)
    println(spaces + cells)
    cells = step(cells, ruleVal)
    x = x + BigInt(1)
  }
}

def main(): Any = {
  for (r <- ArrayBuffer(BigInt(90), BigInt(30))) {
    evolve(BigInt(25), r)
    println("")
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
