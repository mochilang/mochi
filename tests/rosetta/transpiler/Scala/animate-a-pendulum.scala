// Generated by Mochi v0.10.39 on 2025-07-25 00:26:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def sinApprox(x: Double): Double = {
    var term: Double = x
    var sum: Double = x
    var n: Int = 1
    while (n <= 10) {
      val denom: Double = ((2 * n).asInstanceOf[Double] * (2 * n + 1).asInstanceOf[Double]).toString.toDouble
      term = ((0 - term) * x * x / denom).asInstanceOf[Double]
      sum = (sum + term).asInstanceOf[Double]
      n = (n + 1).asInstanceOf[Int]
    }
    return sum
  }
  
  def cosApprox(x: Double): Double = {
    var term: Double = 1.0
    var sum: Double = 1.0
    var n: Int = 1
    while (n <= 10) {
      val denom: Double = ((2 * n - 1).asInstanceOf[Double] * (2 * n).asInstanceOf[Double]).toString.toDouble
      term = ((0 - term) * x * x / denom).asInstanceOf[Double]
      sum = (sum + term).asInstanceOf[Double]
      n = (n + 1).asInstanceOf[Int]
    }
    return sum
  }
  
  def sqrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: Int = 0
    while (i < 10) {
      guess = (guess + x / guess) / 2.0
      i = (i + 1).asInstanceOf[Int]
    }
    return guess
  }
  
  val PI: Double = 3.141592653589793
  
  val L: Double = 10.0
  
  val G: Double = 9.81
  
  val dt: Double = 0.2
  
  val phi0: Double = PI / 4.0
  
  val omega: Double = sqrtApprox((G / L).asInstanceOf[Double])
  
  var t: Double = 0.0
  
  def main(args: Array[String]): Unit = {
    for (step <- 0 until 10) {
      val phi = phi0 * cosApprox((omega * t).asInstanceOf[Double])
      val pos: Int = (10.0 * sinApprox(phi) + 0.5).asInstanceOf[Int]
      println(String.valueOf(pos))
      t = (t + dt).asInstanceOf[Double]
    }
  }
}
