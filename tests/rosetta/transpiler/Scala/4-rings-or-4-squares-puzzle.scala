// Generated by Mochi v0.10.38 on 2025-07-24 11:00:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  def validComb(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean = {
    val square1 = a + b
    val square2 = b + c + d
    val square3 = d + e + f
    val square4 = f + g
    return ((square1 == square2 && square2 == square3).asInstanceOf[Boolean] && square3 == square4).asInstanceOf[Boolean]
  }
  
  def isUnique(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean = {
    var nums: ArrayBuffer[Any] = ArrayBuffer(a, b, c, d, e, f, g)
    var i: Int = 0
    while (i < (nums).size) {
      var j = i + 1
      while (j < (nums).size) {
        if (nums(i) == nums(j)) {
          return false
        }
        j = (j + 1).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return true
  }
  
  def getCombs(low: Int, high: Int, unique: Boolean): Map[String,Any] = {
    var valid: ArrayBuffer[Any] = ArrayBuffer()
    var count: Int = 0
    val _ct2 = new Breaks
    for (b <- low until high + 1) {
      _ct2.breakable {
        val _ct3 = new Breaks
        for (c <- low until high + 1) {
          _ct3.breakable {
            val _ct4 = new Breaks
            for (d <- low until high + 1) {
              _ct4.breakable {
                val s = b + c + d
                val _ct5 = new Breaks
                for (e <- low until high + 1) {
                  _ct5.breakable {
                    val _ct6 = new Breaks
                    for (f <- low until high + 1) {
                      _ct6.breakable {
                        val a = s - b
                        val g = s - f
                        if ((a < low || a > high).asInstanceOf[Boolean]) {
                          _ct6.break()
                        }
                        if ((g < low || g > high).asInstanceOf[Boolean]) {
                          _ct6.break()
                        }
                        if (d + e + f != s) {
                          _ct6.break()
                        }
                        if (f + g != s) {
                          _ct6.break()
                        }
                        if (((!unique).asInstanceOf[Boolean] || isUnique(a, b, c, d, e, f, g)).asInstanceOf[Boolean]) {
                          valid = valid :+ ArrayBuffer(a, b, c, d, e, f, g)
                          count = (count + 1).asInstanceOf[Int]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Map("count" -> (count), "list" -> (valid))
  }
  
  val r1: Map[String,Any] = getCombs(1, 7, true)
  
  val r2: Map[String,Any] = getCombs(3, 9, true)
  
  val r3: Map[String,Any] = getCombs(0, 9, false)
  
  def main(args: Array[String]): Unit = {
    println(String.valueOf(r1("count")) + " unique solutions in 1 to 7")
    println(r1("list"))
    println(String.valueOf(r2("count")) + " unique solutions in 3 to 9")
    println(r2("list"))
    println(String.valueOf(r3("count")) + " non-unique solutions in 0 to 9")
  }
}
