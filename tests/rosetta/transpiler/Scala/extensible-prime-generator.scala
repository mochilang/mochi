// Generated by Mochi v0.10.52 on 2025-08-02 02:06:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def nextPrime(primes: ArrayBuffer[BigInt], start: BigInt): BigInt = {
  var n: BigInt = start
  val _br0 = new Breaks
  _br0.breakable {
    while (true) {
      var isP: Boolean = true
      var i: BigInt = BigInt(0)
      val _br1 = new Breaks
      _br1.breakable {
        while (i < (primes).size) {
          val p: BigInt = primes((i).toInt)
          if (p * p > n) {
            _br1.break()
          }
          if (n % p == BigInt(0)) {
            isP = false
            _br1.break()
          }
          i = i + BigInt(1)
        }
      }
      if (isP) {
        return n
      }
      n = n + BigInt(2)
    }
  }
  return null
}

def main(): Any = {
  var primes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
  var cand: BigInt = BigInt(3)
  while ((primes).size < BigInt(10000)) {
    cand = nextPrime(primes, cand)
    primes = primes :+ cand
    cand = cand + BigInt(2)
  }
  var line: String = "First twenty:"
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    line = line + " " + String.valueOf(primes((i).toInt))
    i = i + BigInt(1)
  }
  println(line)
  var idx: BigInt = BigInt(0)
  while (primes((idx).toInt) <= BigInt(100)) {
    idx = idx + BigInt(1)
  }
  line = "Between 100 and 150: " + String.valueOf(primes((idx).toInt))
  idx = idx + BigInt(1)
  while (primes((idx).toInt) < BigInt(150)) {
    line = line + " " + String.valueOf(primes((idx).toInt))
    idx = idx + BigInt(1)
  }
  println(line)
  while (primes((idx).toInt) <= BigInt(7700)) {
    idx = idx + BigInt(1)
  }
  var count: BigInt = BigInt(0)
  while (primes((idx).toInt) < BigInt(8000)) {
    count = count + BigInt(1)
    idx = idx + BigInt(1)
  }
  println("Number beween 7,700 and 8,000: " + String.valueOf(count))
  println("10,000th prime: " + String.valueOf(primes((BigInt(9999)).toInt)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
