// Generated by Mochi v0.10.50 on 2025-07-31 07:45:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def nextRand(): BigInt = {
  seed = (seed * BigInt(1664525) + BigInt(1013904223)) % BigInt(2147483647)
  return seed
}

def randBit(): BigInt = {
  val r: BigInt = nextRand()
  if (r % BigInt(2) == BigInt(0)) {
    return BigInt(0)
  }
  return BigInt(255)
}

val width: BigInt = BigInt(320)

val height: BigInt = BigInt(240)

var seed: BigInt = _now() % BigInt(2147483647)

var y: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  println("P2")
  println(String.valueOf(width) + " " + String.valueOf(height))
  println("255")
  while (y < height) {
    var line: String = ""
    var x: BigInt = BigInt(0)
    while (x < width) {
      val `val`: BigInt = randBit()
      line = line + String.valueOf(`val`)
      if (x < width - BigInt(1)) {
        line = line + " "
      }
      x = x + BigInt(1)
    }
    println(line)
    y = y + BigInt(1)
  }
}
}
