// Generated by Mochi v0.10.50 on 2025-07-31 01:07:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def main(): Any = {
      val INF: BigInt = BigInt(1000000000)
      val n: BigInt = BigInt(4)
      var dist: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      var next: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < n) {
        var row: ArrayBuffer[BigInt] = ArrayBuffer()
        var nrow: ArrayBuffer[BigInt] = ArrayBuffer()
        var j: BigInt = BigInt(0)
        while (j < n) {
          if (i == j) {
            row = row :+ BigInt(0)
          } else {
            row = row :+ INF
          }
          nrow = nrow :+ BigInt(0) - BigInt(1)
          j = j + BigInt(1)
        }
        dist = dist :+ row
        next = next :+ nrow
        i = i + BigInt(1)
      }
      dist((BigInt(0)).toInt)((BigInt(2)).toInt) = BigInt(0) - BigInt(2)
      next((BigInt(0)).toInt)((BigInt(2)).toInt) = BigInt(2)
      dist((BigInt(2)).toInt)((BigInt(3)).toInt) = BigInt(2)
      next((BigInt(2)).toInt)((BigInt(3)).toInt) = BigInt(3)
      dist((BigInt(3)).toInt)((BigInt(1)).toInt) = BigInt(0) - BigInt(1)
      next((BigInt(3)).toInt)((BigInt(1)).toInt) = BigInt(1)
      dist((BigInt(1)).toInt)((BigInt(0)).toInt) = BigInt(4)
      next((BigInt(1)).toInt)((BigInt(0)).toInt) = BigInt(0)
      dist((BigInt(1)).toInt)((BigInt(2)).toInt) = BigInt(3)
      next((BigInt(1)).toInt)((BigInt(2)).toInt) = BigInt(2)
      var k: BigInt = BigInt(0)
      while (k < n) {
        var i: BigInt = BigInt(0)
        while (i < n) {
          var j: BigInt = BigInt(0)
          while (j < n) {
            if ((dist((i).toInt)((k).toInt) < INF && dist((k).toInt)((j).toInt) < INF).asInstanceOf[Boolean]) {
              val alt: Int = dist((i).toInt)((k).toInt) + dist((k).toInt)((j).toInt)
              if (alt < dist((i).toInt)((j).toInt)) {
                dist((i).toInt)((j).toInt) = alt
                next((i).toInt)((j).toInt) = next((i).toInt)((k).toInt)
              }
            }
            j = j + BigInt(1)
          }
          i = i + BigInt(1)
        }
        k = k + BigInt(1)
      }
      def path(u: BigInt, v: BigInt): ArrayBuffer[BigInt] = {
        var ui: BigInt = u - BigInt(1)
        var vi: BigInt = v - BigInt(1)
        if (next((ui).toInt)((vi).toInt) == BigInt(0) - BigInt(1)) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
        }
        var p: ArrayBuffer[BigInt] = ArrayBuffer(u)
        var cur: BigInt = ui
        while (cur != vi) {
          cur = next((cur).toInt)((vi).toInt)
          p = p :+ cur + BigInt(1)
        }
        return p
      }
      def pathStr(p: ArrayBuffer[BigInt]): String = {
        var s: String = ""
        var first: Boolean = true
        var idx: BigInt = BigInt(0)
        while (idx < (p).size) {
          val x: BigInt = p((idx).toInt)
          if ((!first).asInstanceOf[Boolean]) {
            s = s + " -> "
          }
          s = s + String.valueOf(x)
          first = false
          idx = idx + BigInt(1)
        }
        return s
      }
      println("pair\tdist\tpath")
      var a: BigInt = BigInt(0)
      while (a < n) {
        var b: BigInt = BigInt(0)
        while (b < n) {
          if (a != b) {
            println(String.valueOf(a + BigInt(1)) + " -> " + String.valueOf(b + BigInt(1)) + "\t" + String.valueOf(dist((a).toInt)((b).toInt)) + "\t" + pathStr(path(a + BigInt(1), b + BigInt(1))))
          }
          b = b + BigInt(1)
        }
        a = a + BigInt(1)
      }
      return
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
