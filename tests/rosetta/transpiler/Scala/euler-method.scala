// Generated by Mochi v0.10.52 on 2025-08-02 01:29:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < (s).size) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(0) - BigInt(1)
}

def floorf(x: Double): Double = {
  val y: Int = x.toInt
  return y.toString.toDouble
}

def powf(base: Double, exp: BigInt): Double = {
  var r: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    r = (r * base).toString.toDouble
    i = i + BigInt(1)
  }
  return r
}

def fmtF(x: Double, width: BigInt, prec: BigInt): String = {
  val factor: Double = powf(10.0, prec)
  var y: Double = floorf(x * factor + 0.5) / factor
  var s: String = String.valueOf(y)
  val dot = BigInt(s.indexOf("."))
  if (dot == BigInt(0) - BigInt(1)) {
    s = s + "."
    var j: BigInt = BigInt(0)
    while (j < prec) {
      s = s + "0"
      j = j + BigInt(1)
    }
  } else {
    var decs: BigInt = (s).size - dot - BigInt(1)
    while (decs < prec) {
      s = s + "0"
      decs = decs + BigInt(1)
    }
  }
  while ((s).size < width) {
    s = " " + s
  }
  return s
}

def expf(x: Double): Double = {
  if (x < 0.0) {
    return 1.0 / expf((-x).toString.toDouble)
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(20)) {
    term = term * x / i.toString.toDouble
    sum = (sum + term).toString.toDouble
    i = i + BigInt(1)
  }
  return sum
}

def eulerStep(f: (Double, Double) => Double, x: Double, y: Double, h: Double): Double = {
  return (y + h * f(x, y)).toString.toDouble
}

def newCoolingRate(k: Double): (Double) => Double = {
  return (((dt: Double) => -k * dt)).asInstanceOf[(Double) => Double]
}

def newTempFunc(k: Double, ambient: Double, initial: Double): (Double) => Double = {
  return (((t: Double) => ambient + (initial - ambient) * expf((-k * t).toString.toDouble))).asInstanceOf[(Double) => Double]
}

def newCoolingRateDy(k: Double, ambient: Double): (Double, Double) => Double = {
  val cr: (Double) => Double = newCoolingRate(k)
  return (((_x: Double, obj: Double) => cr(obj - ambient))).asInstanceOf[(Double, Double) => Double]
}

def main(): Any = {
  val k: Double = 0.07
  val tempRoom: Double = 20.0
  val tempObject: Double = 100.0
  val fcr: (Double, Double) => Double = newCoolingRateDy(k, tempRoom)
  val analytic: (Double) => Double = newTempFunc(k, tempRoom, tempObject)
  for (step <- ArrayBuffer(2.0, 5.0, 10.0)) {
    println("Step size = " + fmtF(step, BigInt(0), BigInt(1)))
    println(" Time Euler's Analytic")
    var temp: Double = tempObject
    var time: Double = 0.0
    while (time <= 100.0) {
      val line: String = fmtF(time, BigInt(5), BigInt(1)) + " " + fmtF(temp, BigInt(7), BigInt(3)) + " " + fmtF(analytic(time), BigInt(7), BigInt(3))
      println(line)
      temp = eulerStep(fcr, time, temp, step)
      time = (time + step).toString.toDouble
    }
    println("")
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
