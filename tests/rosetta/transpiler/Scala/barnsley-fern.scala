// Generated by Mochi v0.10.40 on 2025-07-25 20:17:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def randInt(s: Int, n: Int): ArrayBuffer[Int] = {
    val next = Math.floorMod(s * 1664525 + 1013904223, 2147483647)
    return (ArrayBuffer(next, Math.floorMod(next, n))).asInstanceOf[ArrayBuffer[Int]]
  }
  
  val xMin: Double = 0 - 2.182
  
  val xMax: Double = 2.6558
  
  val yMin: Double = 0.0
  
  val yMax: Double = 9.9983
  
  val width: Int = 60
  
  val nIter: Int = 10000
  
  val dx = xMax - xMin
  
  val dy = yMax - yMin
  
  val height: Int = (width * dy / dx).asInstanceOf[Int]
  
  var grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
  
  var row: Int = 0
  
  var seed: Int = 1
  
  var x: Double = 0.0
  
  var y: Double = 0.0
  
  var ix: Int = (width.toString.toDouble * (x - xMin) / dx).asInstanceOf[Int]
  
  var iy: Int = (height.toString.toDouble * (yMax - y) / dy).asInstanceOf[Int]
  
  var i: Int = 0
  
  def main(args: Array[String]): Unit = {
    while (row < height) {
      var line: ArrayBuffer[String] = ArrayBuffer()
      var col: Int = 0
      while (col < width) {
        line = line :+ " "
        col = (col + 1).asInstanceOf[Int]
      }
      grid = grid :+ line
      row = (row + 1).asInstanceOf[Int]
    }
    if ((((ix >= 0 && ix < width).asInstanceOf[Boolean] && iy >= 0).asInstanceOf[Boolean] && iy < height).asInstanceOf[Boolean]) {
      grid(iy)(ix) = "*"
    }
    while (i < nIter) {
      var res: ArrayBuffer[Int] = randInt(seed, 100)
      seed = res(0)
      val r: Int = res(1)
      if (r < 85) {
        val nx: Double = 0.85 * x + 0.04 * y
        val ny: Double = (0 - 0.04) * x + 0.85 * y + 1.6
        x = nx
        y = ny
      } else {
        if (r < 92) {
          val nx: Double = 0.2 * x - 0.26 * y
          val ny: Double = 0.23 * x + 0.22 * y + 1.6
          x = nx
          y = ny
        } else {
          if (r < 99) {
            val nx: Double = (0 - 0.15) * x + 0.28 * y
            val ny: Double = 0.26 * x + 0.24 * y + 0.44
            x = nx
            y = ny
          } else {
            x = 0.0
            y = 0.16 * y
          }
        }
      }
      ix = (width.toString.toDouble * (x - xMin) / dx).asInstanceOf[Int]
      iy = (height.toString.toDouble * (yMax - y) / dy).asInstanceOf[Int]
      if ((((ix >= 0 && ix < width).asInstanceOf[Boolean] && iy >= 0).asInstanceOf[Boolean] && iy < height).asInstanceOf[Boolean]) {
        grid(iy)(ix) = "*"
      }
      i = (i + 1).asInstanceOf[Int]
    }
    row = 0
    while (row < height) {
      var line: String = ""
      var col: Int = 0
      while (col < width) {
        line = (line + grid(row)(col)).asInstanceOf[String]
        col = (col + 1).asInstanceOf[Int]
      }
      println(line)
      row = (row + 1).asInstanceOf[Int]
    }
  }
}
