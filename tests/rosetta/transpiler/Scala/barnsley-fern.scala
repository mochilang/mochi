// Generated by Mochi v0.10.40 on 2025-07-26 00:03:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val xMin: Double = 0 - 2.182
    val xMax: Double = 2.6558
    val yMin: Double = 0.0
    val yMax: Double = 9.9983
    val width: Int = 60
    val nIter: Int = 10000
    val dx = xMax - xMin
    val dy = yMax - yMin
    val height: Int = (width * dy / dx).asInstanceOf[Int]
    var grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
    var row: Int = 0
    while (row < height) {
      var line: ArrayBuffer[String] = ArrayBuffer()
      var col: Int = 0
      while (col < width) {
        line = line :+ " "
        col = (col + 1).asInstanceOf[Int]
      }
      grid = grid :+ line
      row = (row + 1).asInstanceOf[Int]
    }
    var seed: Int = 1
    def randInt(s: Int, n: Int): ArrayBuffer[Int] = {
      val next = Math.floorMod(s * 1664525 + 1013904223, 2147483647)
      return (ArrayBuffer(next, Math.floorMod(next, n))).asInstanceOf[ArrayBuffer[Int]]
    }
    var x: Double = 0.0
    var y: Double = 0.0
    var ix: Int = (width.toString.toDouble * (x - xMin) / dx).asInstanceOf[Int]
    var iy: Int = (height.toString.toDouble * (yMax - y) / dy).asInstanceOf[Int]
    if ((((ix >= 0 && ix < width).asInstanceOf[Boolean] && iy >= 0).asInstanceOf[Boolean] && iy < height).asInstanceOf[Boolean]) {
      grid(iy)(ix) = "*"
    }
    var i: Int = 0
    while (i < nIter) {
      var res: ArrayBuffer[Int] = randInt(seed, 100)
      seed = res(0)
      val r: Int = res(1)
      if (r < 85) {
        val nx: Double = 0.85 * x + 0.04 * y
        val ny: Double = (0 - 0.04) * x + 0.85 * y + 1.6
        x = nx
        y = ny
      } else {
        if (r < 92) {
          val nx: Double = 0.2 * x - 0.26 * y
          val ny: Double = 0.23 * x + 0.22 * y + 1.6
          x = nx
          y = ny
        } else {
          if (r < 99) {
            val nx: Double = (0 - 0.15) * x + 0.28 * y
            val ny: Double = 0.26 * x + 0.24 * y + 0.44
            x = nx
            y = ny
          } else {
            x = 0.0
            y = 0.16 * y
          }
        }
      }
      ix = (width.toString.toDouble * (x - xMin) / dx).asInstanceOf[Int]
      iy = (height.toString.toDouble * (yMax - y) / dy).asInstanceOf[Int]
      if ((((ix >= 0 && ix < width).asInstanceOf[Boolean] && iy >= 0).asInstanceOf[Boolean] && iy < height).asInstanceOf[Boolean]) {
        grid(iy)(ix) = "*"
      }
      i = (i + 1).asInstanceOf[Int]
    }
    row = 0
    while (row < height) {
      var line: String = ""
      var col: Int = 0
      while (col < width) {
        line = (line + grid(row)(col)).toString
        col = (col + 1).asInstanceOf[Int]
      }
      println(line)
      row = (row + 1).asInstanceOf[Int]
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
