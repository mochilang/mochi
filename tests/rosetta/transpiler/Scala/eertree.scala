// Generated by Mochi v0.10.55 on 2025-08-02 21:09:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def newNode(len: BigInt): scala.collection.mutable.Map[String,Any] = {
  return (scala.collection.mutable.Map("length" -> (len), "edges" -> (scala.collection.mutable.Map()), "suffix" -> (BigInt(0)))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def eertree(s: String): ArrayBuffer[scala.collection.mutable.Map[String,Any]] = {
  var tree: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = ArrayBuffer()
  tree = tree :+ (scala.collection.mutable.Map("length" -> (BigInt(0)), "suffix" -> (ODD_ROOT), "edges" -> (scala.collection.mutable.Map()))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  tree = tree :+ (scala.collection.mutable.Map("length" -> (BigInt(0) - BigInt(1)), "suffix" -> (ODD_ROOT), "edges" -> (scala.collection.mutable.Map()))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  var suffix: BigInt = ODD_ROOT
  var i: BigInt = BigInt(0)
  val _br0 = new Breaks
  val _ct0 = new Breaks
  _br0.breakable {
    while (i < BigInt(((s).size).toInt)) {
      _ct0.breakable {
        val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
        var n: BigInt = suffix
        var k: BigInt = BigInt(0)
        val _br1 = new Breaks
        _br1.breakable {
          while (true) {
            k = BigInt((tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("length", null)).toString.toDouble.toInt)
            val b: BigInt = i - k - BigInt(1)
            if ((b >= BigInt(0) && s.slice((b).toInt, (b + BigInt(1)).toInt) == c).asInstanceOf[Boolean]) {
              _br1.break()
            }
            n = BigInt((tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("suffix", null)).toString.toDouble.toInt)
          }
        }
        var edges: scala.collection.mutable.Map[String,BigInt] = (tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("edges", null)).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
        if ((edges.contains(c)).asInstanceOf[Boolean]) {
          suffix = edges.getOrElse(c, null).asInstanceOf[BigInt]
          i = i + BigInt(1)
          _ct0.break()
        }
        suffix = (tree).size
        tree = tree :+ newNode(k + BigInt(2))
        edges.update(c, suffix)
        tree((n).toInt).update("edges", edges)
        if (BigInt((tree((suffix.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("length", null)).toString.toDouble.toInt) == BigInt(1)) {
          tree((suffix).toInt).update("suffix", BigInt(0))
          i = i + BigInt(1)
          _ct0.break()
        }
        val _br2 = new Breaks
        _br2.breakable {
          while (true) {
            n = BigInt((tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("suffix", null)).toString.toDouble.toInt)
            val b: BigInt = i - BigInt((tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("length", null)).toString.toDouble.toInt) - BigInt(1)
            if ((b >= BigInt(0) && s.slice((b).toInt, (b + BigInt(1)).toInt) == c).asInstanceOf[Boolean]) {
              _br2.break()
            }
          }
        }
        var en: scala.collection.mutable.Map[String,BigInt] = (tree((n.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("edges", null)).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
        tree((suffix).toInt).update("suffix", en.getOrElse(c, null).asInstanceOf[BigInt])
        i = i + BigInt(1)
      }
    }
  }
  return tree
}

def child(tree: ArrayBuffer[scala.collection.mutable.Map[String,Any]], idx: BigInt, p: String, _acc: ArrayBuffer[String]): ArrayBuffer[String] = {
  var acc: ArrayBuffer[String] = _acc
  var edges: scala.collection.mutable.Map[String,BigInt] = (tree((idx.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("edges", null)).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (ch <- edges.keys) {
    val nxt: BigInt = edges.getOrElse(ch, null).asInstanceOf[BigInt]
    val pal: String = ch + p + ch
    acc = acc :+ pal
    acc = child(tree, nxt, pal, acc)
  }
  return acc
}

def subPalindromes(tree: ArrayBuffer[scala.collection.mutable.Map[String,Any]]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  res = child(tree, EVEN_ROOT, "", res)
  var oEdges: scala.collection.mutable.Map[String,BigInt] = (tree((ODD_ROOT.toInt).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]].getOrElse("edges", null)).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (ch <- oEdges.keys) {
    res = res :+ ch
    res = child(tree, oEdges.getOrElse(ch, null).asInstanceOf[BigInt], ch, res)
  }
  return res
}

def main(): Any = {
  val tree: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = eertree("eertree")
  val subs: ArrayBuffer[String] = subPalindromes(tree)
  println(String.valueOf(subs))
}

val EVEN_ROOT: BigInt = BigInt(0)

val ODD_ROOT: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
