// Generated by Mochi v0.10.40 on 2025-07-26 04:42:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  case class Pixel(var R: Int, var G: Int, var B: Int)
  
  case class Bitmap(var cols: Int, var rows: Int, var px: ArrayBuffer[ArrayBuffer[Pixel]])
  
  def pixelFromRgb(c: Int): Pixel = {
    val r = Math.floorMod((c / 65536).asInstanceOf[Int], 256)
    val g = Math.floorMod((c / 256).asInstanceOf[Int], 256)
    val b = Math.floorMod(c, 256)
    return Pixel(r, g, b)
  }
  
  def rgbFromPixel(p: Pixel): Int = {
    return ((p.R * 65536).toString.toDouble + (p.G * 256).toString.toDouble + p.B).asInstanceOf[Int]
  }
  
  def NewBitmap(x: Int, y: Int): Bitmap = {
    var data: ArrayBuffer[ArrayBuffer[Pixel]] = ArrayBuffer()
    var row: Int = 0
    while (row < y) {
      var r: ArrayBuffer[Pixel] = ArrayBuffer()
      var col: Int = 0
      while (col < x) {
        r = r :+ Pixel(0, 0, 0)
        col = (col + 1).asInstanceOf[Int]
      }
      data = data :+ r
      row = (row + 1).asInstanceOf[Int]
    }
    return Bitmap(x, y, data)
  }
  
  def Extent(b: Bitmap): Map[String,Int] = {
    return (Map("cols" -> (b.cols), "rows" -> (b.rows))).asInstanceOf[Map[String,Int]]
  }
  
  def Fill(b: Bitmap, p: Pixel): Any = {
    var y: Int = 0
    while (y < b.rows) {
      var x: Int = 0
      while (x < b.cols) {
        var px: ArrayBuffer[ArrayBuffer[Pixel]] = b.px
        var row: ArrayBuffer[Pixel] = px(y)
        row(x) = p
        px(y) = row
        b.px = px
        x = (x + 1).asInstanceOf[Int]
      }
      y = (y + 1).asInstanceOf[Int]
    }
  }
  
  def FillRgb(b: Bitmap, c: Int): Any = {
    Fill(b, pixelFromRgb(c))
  }
  
  def SetPx(b: Bitmap, x: Int, y: Int, p: Pixel): Boolean = {
    if ((((x < 0 || x >= b.cols).asInstanceOf[Boolean] || y < 0).asInstanceOf[Boolean] || y >= b.rows).asInstanceOf[Boolean]) {
      return false
    }
    var px: ArrayBuffer[ArrayBuffer[Pixel]] = b.px
    var row: ArrayBuffer[Pixel] = px(y)
    row(x) = p
    px(y) = row
    b.px = px
    return true
  }
  
  def SetPxRgb(b: Bitmap, x: Int, y: Int, c: Int): Boolean = {
    return SetPx(b, x, y, pixelFromRgb(c))
  }
  
  def GetPx(b: Bitmap, x: Int, y: Int): Map[String,Any] = {
    if ((((x < 0 || x >= b.cols).asInstanceOf[Boolean] || y < 0).asInstanceOf[Boolean] || y >= b.rows).asInstanceOf[Boolean]) {
      return (Map("ok" -> (false))).asInstanceOf[Map[String,Any]]
    }
    val row: ArrayBuffer[Pixel] = b.px(y)
    return Map("ok" -> (true), "pixel" -> (row(x)))
  }
  
  def GetPxRgb(b: Bitmap, x: Int, y: Int): Map[String,Any] = {
    val r: Map[String,Any] = GetPx(b, x, y)
    if ((!(r.ok).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      return (Map("ok" -> (false))).asInstanceOf[Map[String,Any]]
    }
    return Map("ok" -> (true), "rgb" -> (rgbFromPixel((r.pixel).asInstanceOf[Pixel])))
  }
  
  def ppmSize(b: Bitmap): Int = {
    val header: String = "P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + String.valueOf(b.cols) + " " + String.valueOf(b.rows) + "\n255\n"
    return ((header).size + 3 * b.cols * b.rows).asInstanceOf[Int]
  }
  
  def pixelStr(p: Pixel): String = {
    return "{" + String.valueOf(p.R) + " " + String.valueOf(p.G) + " " + String.valueOf(p.B) + "}"
  }
  
  def main(): Any = {
    var bm: Bitmap = NewBitmap(300, 240)
    FillRgb(bm, 16711680)
    SetPxRgb(bm, 10, 20, 255)
    SetPxRgb(bm, 20, 30, 0)
    SetPxRgb(bm, 30, 40, 1056816)
    val c1: Map[String,Any] = GetPx(bm, 0, 0)
    val c2: Map[String,Any] = GetPx(bm, 10, 20)
    val c3: Map[String,Any] = GetPx(bm, 30, 40)
    println("Image size: " + String.valueOf(bm.cols) + " \u00d7 " + String.valueOf(bm.rows))
    println(String.valueOf(ppmSize(bm)) + " bytes when encoded as PPM.")
    if ((c1.ok).asInstanceOf[Boolean]) {
      println("Pixel at (0,0) is " + pixelStr((c1.pixel).asInstanceOf[Pixel]))
    }
    if ((c2.ok).asInstanceOf[Boolean]) {
      println("Pixel at (10,20) is " + pixelStr((c2.pixel).asInstanceOf[Pixel]))
    }
    if ((c3.ok).asInstanceOf[Boolean]) {
      val p = c3.pixel
      var r16 = p.R * 257
      var g16 = p.G * 257
      var b16 = p.B * 257
      println("Pixel at (30,40) has R=" + String.valueOf(r16) + ", G=" + String.valueOf(g16) + ", B=" + String.valueOf(b16))
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
