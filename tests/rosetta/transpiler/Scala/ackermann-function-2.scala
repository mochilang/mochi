// Generated by Mochi v0.10.40 on 2025-07-25 12:53:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def pow(base: Int, exp: Int): Int = {
    var result: Int = 1
    var i: Int = 0
    while (i < exp) {
      result = (result * base).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    return result
  }
  
  def ackermann2(m: Int, n: Int): Int = {
    if (m == 0) {
      return (n + 1).asInstanceOf[Int]
    }
    if (m == 1) {
      return (n + 2).asInstanceOf[Int]
    }
    if (m == 2) {
      return (2 * n + 3).asInstanceOf[Int]
    }
    if (m == 3) {
      return (8 * pow(2, n) - 3).asInstanceOf[Int]
    }
    if (n == 0) {
      return ackermann2((m - 1).asInstanceOf[Int], 1)
    }
    return ackermann2((m - 1).asInstanceOf[Int], ackermann2(m, (n - 1).asInstanceOf[Int]))
  }
  
  def main(): Unit = {
    println("A(0, 0) = " + String.valueOf(ackermann2(0, 0)))
    println("A(1, 2) = " + String.valueOf(ackermann2(1, 2)))
    println("A(2, 4) = " + String.valueOf(ackermann2(2, 4)))
    println("A(3, 4) = " + String.valueOf(ackermann2(3, 4)))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
