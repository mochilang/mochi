// Generated by Mochi v0.10.52 on 2025-08-02 02:05:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def randInt(s: BigInt, n: BigInt): ArrayBuffer[BigInt] = {
  val next: BigInt = (s * BigInt(1664525) + BigInt(1013904223)) % BigInt(2147483647)
  return (ArrayBuffer(next, next % n)).asInstanceOf[ArrayBuffer[BigInt]]
}

def randChar(): String = {
  var r: ArrayBuffer[BigInt] = randInt(seed, BigInt(((chars).size).toInt))
  seed = r((BigInt(0)).toInt)
  val idx: BigInt = r((BigInt(1)).toInt)
  return chars.slice((idx).toInt, (idx + BigInt(1)).toInt)
}

def randomString(n: BigInt): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < n) {
    s = (s + randChar()).toString
    i = i + BigInt(1)
  }
  return s
}

def fitness(s: String): BigInt = {
  var h: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < (target).size) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) != target.slice((i).toInt, (i + BigInt(1)).toInt)) {
      h = h + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return h
}

def mutate(p: String): String = {
  var m: String = ""
  var i: BigInt = BigInt(0)
  while (i < (p).size) {
    var r: ArrayBuffer[BigInt] = randInt(seed, BigInt(20))
    seed = r((BigInt(0)).toInt)
    if (r((BigInt(1)).toInt) == BigInt(0)) {
      m = (m + randChar()).toString
    } else {
      m = m + p.slice((i).toInt, (i + BigInt(1)).toInt)
    }
    i = i + BigInt(1)
  }
  return m
}

def main(): Any = {
  var parent: String = randomString(BigInt(((target).size).toInt))
  println(parent)
  var best: BigInt = fitness(parent)
  var done: Boolean = false
  val _br3 = new Breaks
  _br3.breakable {
    while (!done) {
      var i: BigInt = BigInt(0)
      val _br4 = new Breaks
      _br4.breakable {
        while (i < BigInt(20)) {
          val child: String = mutate(parent)
          val f: BigInt = fitness(child)
          if (f < best) {
            best = f
            parent = child
            println(parent)
            if (best == BigInt(0)) {
              done = true
              _br4.break()
            }
          }
          i = i + BigInt(1)
        }
      }
    }
  }
}

val target: String = "METHINKS IT IS LIKE A WEASEL"

val chars: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
