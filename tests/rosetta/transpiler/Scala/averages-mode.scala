// Generated by Mochi v0.10.40 on 2025-07-26 00:02:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var arr1: ArrayBuffer[Int] = ArrayBuffer(2, 7, 1, 8, 2)
    var counts1: Map[Int,Int] = Map()
    var keys1: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < (arr1).size) {
      val v: Int = arr1(i)
      if ((counts1.contains(v)).asInstanceOf[Boolean]) {
        counts1(v) = counts1.getOrElse(v, null.asInstanceOf[Int]) + 1
      } else {
        counts1(v) = 1
        keys1 = keys1 :+ v
      }
      i = (i + 1).asInstanceOf[Int]
    }
    var max1: Int = 0
    i = 0
    while (i < (keys1).size) {
      val k: Int = keys1(i)
      val c: Int = counts1.getOrElse(k, null.asInstanceOf[Int])
      if (c > max1) {
        max1 = c
      }
      i = (i + 1).asInstanceOf[Int]
    }
    var modes1: ArrayBuffer[Int] = ArrayBuffer()
    i = 0
    while (i < (keys1).size) {
      val k: Int = keys1(i)
      if (counts1.getOrElse(k, null.asInstanceOf[Int]) == max1) {
        modes1 = modes1 :+ k
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(String.valueOf(modes1))
    var arr2: ArrayBuffer[Int] = ArrayBuffer(2, 7, 1, 8, 2, 8)
    var counts2: Map[Int,Int] = Map()
    var keys2: ArrayBuffer[Int] = ArrayBuffer()
    i = 0
    while (i < (arr2).size) {
      val v: Int = arr2(i)
      if ((counts2.contains(v)).asInstanceOf[Boolean]) {
        counts2(v) = counts2.getOrElse(v, null.asInstanceOf[Int]) + 1
      } else {
        counts2(v) = 1
        keys2 = keys2 :+ v
      }
      i = (i + 1).asInstanceOf[Int]
    }
    var max2: Int = 0
    i = 0
    while (i < (keys2).size) {
      val k: Int = keys2(i)
      val c: Int = counts2.getOrElse(k, null.asInstanceOf[Int])
      if (c > max2) {
        max2 = c
      }
      i = (i + 1).asInstanceOf[Int]
    }
    var modes2: ArrayBuffer[Int] = ArrayBuffer()
    i = 0
    while (i < (keys2).size) {
      val k: Int = keys2(i)
      if (counts2.getOrElse(k, null.asInstanceOf[Int]) == max2) {
        modes2 = modes2 :+ k
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(String.valueOf(modes2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
