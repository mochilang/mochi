// Generated by Mochi v0.10.39 on 2025-07-25 01:20:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  var arr1: ArrayBuffer[Int] = ArrayBuffer(2, 7, 1, 8, 2)
  
  var counts1: Map[Int,Int] = Map()
  
  var keys1: ArrayBuffer[Int] = ArrayBuffer()
  
  var i: Int = 0
  
  var max1: Int = 0
  
  var modes1: ArrayBuffer[Int] = ArrayBuffer()
  
  var arr2: ArrayBuffer[Int] = ArrayBuffer(2, 7, 1, 8, 2, 8)
  
  var counts2: Map[Int,Int] = Map()
  
  var keys2: ArrayBuffer[Int] = ArrayBuffer()
  
  var max2: Int = 0
  
  var modes2: ArrayBuffer[Int] = ArrayBuffer()
  
  def main(args: Array[String]): Unit = {
    while (i < (arr1).size) {
      val v: Int = arr1(i)
      if ((counts1.contains(v)).asInstanceOf[Boolean]) {
        counts1(v) = counts1.getOrElse(v, null.asInstanceOf[Int]) + 1
      } else {
        counts1(v) = 1
        keys1 = keys1 :+ v
      }
      i = (i + 1).asInstanceOf[Int]
    }
    i = 0
    while (i < (keys1).size) {
      val k: Int = keys1(i)
      val c: Int = counts1.getOrElse(k, null.asInstanceOf[Int])
      if (c > max1) {
        max1 = c
      }
      i = (i + 1).asInstanceOf[Int]
    }
    i = 0
    while (i < (keys1).size) {
      val k: Int = keys1(i)
      if (counts1.getOrElse(k, null.asInstanceOf[Int]) == max1) {
        modes1 = modes1 :+ k
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(String.valueOf(modes1))
    i = 0
    while (i < (arr2).size) {
      val v: Int = arr2(i)
      if ((counts2.contains(v)).asInstanceOf[Boolean]) {
        counts2(v) = counts2.getOrElse(v, null.asInstanceOf[Int]) + 1
      } else {
        counts2(v) = 1
        keys2 = keys2 :+ v
      }
      i = (i + 1).asInstanceOf[Int]
    }
    i = 0
    while (i < (keys2).size) {
      val k: Int = keys2(i)
      val c: Int = counts2.getOrElse(k, null.asInstanceOf[Int])
      if (c > max2) {
        max2 = c
      }
      i = (i + 1).asInstanceOf[Int]
    }
    i = 0
    while (i < (keys2).size) {
      val k: Int = keys2(i)
      if (counts2.getOrElse(k, null.asInstanceOf[Int]) == max2) {
        modes2 = modes2 :+ k
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(String.valueOf(modes2))
  }
}
