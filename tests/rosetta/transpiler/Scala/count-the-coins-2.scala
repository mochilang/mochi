// Generated by Mochi v0.10.47 on 2025-07-28 11:53:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def countChange(amount: BigInt): BigInt = {
    var ways: ArrayBuffer[BigInt] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i <= amount) {
      ways = ways :+ BigInt(0)
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    ways((BigInt(0)).toInt) = BigInt(1)
    for (coin <- ArrayBuffer(BigInt(100), BigInt(50), BigInt(25), BigInt(10), BigInt(5), BigInt(1))) {
      var j: BigInt = coin
      while (j <= amount) {
        ways((j).toInt) = ways((j).toInt) + ways((j - coin).toInt)
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    return ways((amount).toInt)
  }
  
  val amount: BigInt = BigInt(1000)
  
  def main(args: Array[String]): Unit = {
    println("amount, ways to make change: " + String.valueOf(amount) + " " + String.valueOf(countChange(amount)))
  }
}
