// Generated by Mochi v0.10.50 on 2025-07-31 00:50:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def ln(x: Double): Double = {
      var k: Double = 0.0
      var v: Double = x
      while (v >= 2.0) {
        v = v / 2.0
        k = k + 1.0
      }
      while (v < 1.0) {
        v = v * 2.0
        k = k - 1.0
      }
      val z: Double = (v - 1.0) / (v + 1.0)
      var zpow: Double = z
      var sum: Double = z
      var i: BigInt = BigInt(3)
      while (i <= BigInt(9)) {
        zpow = (zpow * z * z).toString.toDouble
        sum = sum + zpow / i.toString.toDouble
        i = (i + BigInt(2)).asInstanceOf[BigInt]
      }
      val ln2: Double = 0.6931471805599453
      return k * ln2 + 2.0 * sum
    }
    def expf(x: Double): Double = {
      var term: Double = 1.0
      var sum: Double = 1.0
      var i: BigInt = BigInt(1)
      while (i < BigInt(20)) {
        term = (term * x).toString.toDouble / (i.toString().toDouble).toString.toDouble
        sum = (sum + term).toString.toDouble
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return sum
    }
    def powf(base: Double, exp: Double): Double = {
      return expf((exp * ln(base)).toString.toDouble)
    }
    def lanczos7(z: Double): Double = {
      val t: Double = z + 6.5
      val x: Double = 0.9999999999998099 + 676.5203681218851 / z - 1259.1392167224028 / (z + 1.0) + 771.3234287776531 / (z + 2.0) - 176.6150291621406 / (z + 3.0) + 12.507343278686905 / (z + 4.0) - 0.13857109526572012 / (z + 5.0) + 0.000009984369578019572 / (z + 6.0) + 0.00000015056327351493116 / (z + 7.0)
      return 2.5066282746310002 * powf(t, z - 0.5) * powf(2.718281828459045, (-t).toString.toDouble) * x
    }
    val xs = ArrayBuffer(-0.5, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0)
    for (x <- xs) {
      println(String.valueOf(x) + " " + String.valueOf(lanczos7(x.toString.toDouble)))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
