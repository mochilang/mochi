// Generated by Mochi v0.10.40 on 2025-07-25 21:09:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def listStr(xs: ArrayBuffer[Int]): String = {
      var s: String = "["
      var i: Int = 0
      while (i < (xs).size) {
        s = (s + String.valueOf(xs(i))).toString
        if ((i + 1).asInstanceOf[Int] < (xs).size) {
          s = s + " "
        }
        i = (i + 1).asInstanceOf[Int]
      }
      s = s + "]"
      return s
    }
    var a: ArrayBuffer[Int] = ArrayBuffer(0, 0, 0, 0, 0)
    println("len(a) = " + String.valueOf((a).size))
    println("a = " + listStr(a))
    a(0) = 3
    println("a = " + listStr(a))
    println("a[0] = " + String.valueOf(a(0)))
    var s: ArrayBuffer[Int] = a.slice(0, 4)
    var cap_s: Int = 5
    println("s = " + listStr(s))
    println("len(s) = " + String.valueOf((s).size) + "  cap(s) = " + String.valueOf(cap_s))
    s = a.slice(0, 5)
    println("s = " + listStr(s))
    a(0) = 22
    s(0) = 22
    println("a = " + listStr(a))
    println("s = " + listStr(s))
    s = s :+ 4
    s = s :+ 5
    s = s :+ 6
    cap_s = 10
    println("s = " + listStr(s))
    println("len(s) = " + String.valueOf((s).size) + "  cap(s) = " + String.valueOf(cap_s))
    a(4) = 0 - 1
    println("a = " + listStr(a))
    println("s = " + listStr(s))
    s = ArrayBuffer()
    for (i <- 0 until 8) {
      s = s :+ 0
    }
    cap_s = 8
    println("s = " + listStr(s))
    println("len(s) = " + String.valueOf((s).size) + "  cap(s) = " + String.valueOf(cap_s))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
