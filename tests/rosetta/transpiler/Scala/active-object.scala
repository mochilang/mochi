// Generated by Mochi v0.10.39 on 2025-07-24 20:09:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def sinApprox(x: Double): Double = {
    var term: Double = x
    var sum: Double = x
    var n: Int = 1
    while (n <= 12) {
      val denom: Double = ((2 * n).toString.toDouble * (2 * n + 1).toString.toDouble).toString.toDouble
      term = ((0 - term) * x * x / denom).asInstanceOf[Double]
      sum = (sum + term).asInstanceOf[Double]
      n = (n + 1).asInstanceOf[Int]
    }
    return sum
  }
  
  val PI: Double = 3.141592653589793
  
  val dt: Double = 0.01
  
  var s: Double = 0.0
  
  var t1: Double = 0.0
  
  var k1: Double = sinApprox(0.0)
  
  var i: Int = 1
  
  var i2: Int = 1
  
  def main(args: Array[String]): Unit = {
    while (i <= 200) {
      val t2: Double = i.toString.toDouble * dt
      val k2: Double = sinApprox(t2 * PI)
      s = s + (k1 + k2) * 0.5 * (t2 - t1)
      t1 = t2
      k1 = k2
      i = (i + 1).asInstanceOf[Int]
    }
    while (i2 <= 50) {
      val t2: Double = 2.0 + i2.toString.toDouble * dt
      val k2: Double = 0.0
      s = s + (k1 + k2) * 0.5 * (t2 - t1)
      t1 = t2
      k1 = k2
      i2 = (i2 + 1).asInstanceOf[Int]
    }
    println(s)
  }
}
