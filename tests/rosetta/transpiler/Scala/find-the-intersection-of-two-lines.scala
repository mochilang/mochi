// Generated by Mochi v0.10.56 on 2025-08-04 00:19:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: Double, var y: Double)

case class Line(var slope: Double, var yint: Double)

def createLine(a: Point, b: Point): Line = {
  val slope: Double = (b.y - a.y) / (b.x - a.x)
  val yint: Double = a.y - slope * a.x
  return Line(slope, yint)
}

def evalX(l: Line, x: Double): Double = {
  return l.slope * x + l.yint
}

def intersection(l1: Line, l2: Line): Point = {
  if (l1.slope == l2.slope) {
    return Point(0.0, 0.0)
  }
  val x: Double = (l2.yint - l1.yint) / (l1.slope - l2.slope)
  val y: Double = evalX(l1, x)
  return Point(x, y)
}

def main(): Any = {
  val l1: Line = createLine(Point(4.0, 0.0), Point(6.0, 10.0))
  val l2: Line = createLine(Point(0.0, 3.0), Point(10.0, 7.0))
  val p: Point = intersection(l1, l2)
  println("{" + String.valueOf(p.x) + " " + String.valueOf(p.y) + "}")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
