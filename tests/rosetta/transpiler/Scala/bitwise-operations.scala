// Generated by Mochi v0.10.40 on 2025-07-26 04:50:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def toUnsigned16(n: Int): Int = {
      var u: Int = n
      if (u < 0) {
        u = (u + 65536).asInstanceOf[Int]
      }
      return (Math.floorMod(u, 65536)).asInstanceOf[Int]
    }
    def bin16(n: Int): String = {
      var u: Int = toUnsigned16(n)
      var bits: String = ""
      var mask: Int = 32768
      for (i <- 0 until 16) {
        if (u >= mask) {
          bits = bits + "1"
          u = (u - mask).asInstanceOf[Int]
        } else {
          bits = bits + "0"
        }
        mask = (mask / 2).asInstanceOf[Int]
      }
      return bits
    }
    def bit_and(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      var ub: Int = toUnsigned16(b)
      var res: Int = 0
      var bit: Int = 1
      for (i <- 0 until 16) {
        if ((Math.floorMod(ua, 2) == 1 && Math.floorMod(ub, 2) == 1).asInstanceOf[Boolean]) {
          res = (res + bit).asInstanceOf[Int]
        }
        ua = (ua / 2).asInstanceOf[Int]
        ub = (ub / 2).asInstanceOf[Int]
        bit = (bit * 2).asInstanceOf[Int]
      }
      return res
    }
    def bit_or(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      var ub: Int = toUnsigned16(b)
      var res: Int = 0
      var bit: Int = 1
      for (i <- 0 until 16) {
        if ((Math.floorMod(ua, 2) == 1 || Math.floorMod(ub, 2) == 1).asInstanceOf[Boolean]) {
          res = (res + bit).asInstanceOf[Int]
        }
        ua = (ua / 2).asInstanceOf[Int]
        ub = (ub / 2).asInstanceOf[Int]
        bit = (bit * 2).asInstanceOf[Int]
      }
      return res
    }
    def bit_xor(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      var ub: Int = toUnsigned16(b)
      var res: Int = 0
      var bit: Int = 1
      for (i <- 0 until 16) {
        val abit = Math.floorMod(ua, 2)
        val bbit = Math.floorMod(ub, 2)
        if (((abit == 1 && bbit == 0).asInstanceOf[Boolean] || (abit == 0 && bbit == 1).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          res = (res + bit).asInstanceOf[Int]
        }
        ua = (ua / 2).asInstanceOf[Int]
        ub = (ub / 2).asInstanceOf[Int]
        bit = (bit * 2).asInstanceOf[Int]
      }
      return res
    }
    def bit_not(a: Int): Int = {
      var ua: Int = toUnsigned16(a)
      return (65535 - ua).asInstanceOf[Int]
    }
    def shl(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      var i: Int = 0
      while (i < b) {
        ua = (Math.floorMod(ua * 2, 65536)).asInstanceOf[Int]
        i = (i + 1).asInstanceOf[Int]
      }
      return ua
    }
    def shr(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      var i: Int = 0
      while (i < b) {
        ua = (ua / 2).asInstanceOf[Int]
        i = (i + 1).asInstanceOf[Int]
      }
      return ua
    }
    def las(a: Int, b: Int): Int = {
      return shl(a, b)
    }
    def ras(a: Int, b: Int): Int = {
      var `val`: Int = a
      var i: Int = 0
      while (i < b) {
        if (`val` >= 0) {
          `val` = (`val` / 2).asInstanceOf[Int]
        } else {
          `val` = ((`val` - 1) / 2).asInstanceOf[Int]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return toUnsigned16(`val`)
    }
    def rol(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      val left: Int = shl(ua, b)
      val right: Int = shr(ua, (16 - b).asInstanceOf[Int])
      return toUnsigned16((left + right).asInstanceOf[Int])
    }
    def ror(a: Int, b: Int): Int = {
      var ua: Int = toUnsigned16(a)
      val right: Int = shr(ua, b)
      val left: Int = shl(ua, (16 - b).asInstanceOf[Int])
      return toUnsigned16((left + right).asInstanceOf[Int])
    }
    def bitwise(a: Int, b: Int): Any = {
      println("a:   " + bin16(a))
      println("b:   " + bin16(b))
      println("and: " + bin16(bit_and(a, b)))
      println("or:  " + bin16(bit_or(a, b)))
      println("xor: " + bin16(bit_xor(a, b)))
      println("not: " + bin16(bit_not(a)))
      if (b < 0) {
        println("Right operand is negative, but all shifts require an unsigned right operand (shift distance).")
        return null
      }
      println("shl: " + bin16(shl(a, b)))
      println("shr: " + bin16(shr(a, b)))
      println("las: " + bin16(las(a, b)))
      println("ras: " + bin16(ras(a, b)))
      println("rol: " + bin16(rol(a, b)))
      println("ror: " + bin16(ror(a, b)))
      return
    }
    bitwise(0 - 460, 6)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
