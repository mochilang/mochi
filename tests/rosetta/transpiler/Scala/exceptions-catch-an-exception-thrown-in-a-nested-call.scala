// Generated by Mochi v0.10.52 on 2025-08-02 02:05:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def baz(): String = {
  bazCall = bazCall + BigInt(1)
  println("baz: start")
  if (bazCall == BigInt(1)) {
    println("baz: raising U0")
    return "U0"
  }
  if (bazCall == BigInt(2)) {
    println("baz: raising U1")
    return "U1"
  }
  println("baz: end")
  return ""
}

def bar(): String = {
  println("bar: start")
  var err: String = baz()
  if ((err).size > BigInt(0)) {
    return err
  }
  println("bar: end")
  return ""
}

def foo(): String = {
  println("foo: start")
  var err: String = bar()
  if (err == "U0") {
    println("foo: caught U0")
  } else {
    if ((err).size > BigInt(0)) {
      return err
    }
  }
  err = bar()
  if (err == "U0") {
    println("foo: caught U0")
  } else {
    if ((err).size > BigInt(0)) {
      return err
    }
  }
  println("foo: end")
  return ""
}

def main(): Any = {
  println("main: start")
  var err: String = foo()
  if ((err).size > BigInt(0)) {
    println("main: unhandled " + err)
  } else {
    println("main: success")
  }
}

var bazCall: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
