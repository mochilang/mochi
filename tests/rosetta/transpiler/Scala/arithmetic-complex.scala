// Generated by Mochi v0.10.39 on 2025-07-25 00:49:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  case class Complex(var re: Double, var im: Double)
  
  def add(a: Complex, b: Complex): Complex = {
    return Complex(a.re + b.re, a.im + b.im)
  }
  
  def mul(a: Complex, b: Complex): Complex = {
    return Complex((a.re * b.re).asInstanceOf[Double] - (a.im * b.im).asInstanceOf[Double], (a.re * b.im).asInstanceOf[Int] + (a.im * b.re).asInstanceOf[Int])
  }
  
  def neg(a: Complex): Complex = {
    return Complex(0 - a.re, 0 - a.im)
  }
  
  def inv(a: Complex): Complex = {
    val denom: Int = (a.re * a.re).asInstanceOf[Int] + (a.im * a.im).asInstanceOf[Int]
    return Complex(a.re / denom, (0 - a.im) / denom)
  }
  
  def conj(a: Complex): Complex = {
    return Complex(a.re, 0 - a.im)
  }
  
  def cstr(a: Complex): String = {
    var s: String = "(" + String.valueOf(a.re)
    if (a.im >= 0) {
      s = s + "+" + String.valueOf(a.im) + "i)"
    } else {
      s = s + String.valueOf(a.im) + "i)"
    }
    return s
  }
  
  val a: Complex = Complex(1.0, 1.0)
  
  val b: Complex = Complex(3.14159, 1.25)
  
  def main(args: Array[String]): Unit = {
    println("a:       " + cstr(a))
    println("b:       " + cstr(b))
    println("a + b:   " + cstr(add(a, b)))
    println("a * b:   " + cstr(mul(a, b)))
    println("-a:      " + cstr(neg(a)))
    println("1 / a:   " + cstr(inv(a)))
    println("aÌ…:       " + cstr(conj(a)))
  }
}
