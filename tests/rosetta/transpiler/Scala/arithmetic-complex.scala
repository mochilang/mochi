// Generated by Mochi v0.10.40 on 2025-07-25 21:07:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Complex(var re: Double, var im: Double)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def add(a: Complex, b: Complex): Complex = {
      return Complex(a.re + b.re, a.im + b.im)
    }
    def mul(a: Complex, b: Complex): Complex = {
      return Complex((a.re * b.re).toString.toDouble - (a.im * b.im).toString.toDouble, (a.re * b.im).toString.toDouble + (a.im * b.re).toString.toDouble)
    }
    def neg(a: Complex): Complex = {
      return Complex(0 - a.re, 0 - a.im)
    }
    def inv(a: Complex): Complex = {
      val denom: Double = (a.re * a.re).toString.toDouble + (a.im * a.im).toString.toDouble
      return Complex(a.re / denom, (0 - a.im) / denom)
    }
    def conj(a: Complex): Complex = {
      return Complex(a.re, 0 - a.im)
    }
    def cstr(a: Complex): String = {
      var s: String = "(" + String.valueOf(a.re)
      if (a.im >= 0) {
        s = s + "+" + String.valueOf(a.im) + "i)"
      } else {
        s = s + String.valueOf(a.im) + "i)"
      }
      return s
    }
    val a: Complex = Complex(1.0, 1.0)
    val b: Complex = Complex(3.14159, 1.25)
    println("a:       " + cstr(a))
    println("b:       " + cstr(b))
    println("a + b:   " + cstr(add(a, b)))
    println("a * b:   " + cstr(mul(a, b)))
    println("-a:      " + cstr(neg(a)))
    println("1 / a:   " + cstr(inv(a)))
    println("aÌ…:       " + cstr(conj(a)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
