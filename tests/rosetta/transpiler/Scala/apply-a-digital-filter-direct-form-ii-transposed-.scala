// Generated by Mochi v0.10.40 on 2025-07-25 21:07:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def applyFilter(input: ArrayBuffer[Double], a: ArrayBuffer[Double], b: ArrayBuffer[Double]): ArrayBuffer[Double] = {
      var out: ArrayBuffer[Double] = ArrayBuffer()
      val scale: Double = 1.0 / a(0)
      var i: Int = 0
      while (i < (input).size) {
        var tmp: Double = 0.0
        var j: Int = 0
        while (j <= i && j < (b).size) {
          tmp = (tmp + b(j) * input(i - j)).toString.toDouble
          j = (j + 1).asInstanceOf[Int]
        }
        j = 0
        while (j < i && (j + 1).asInstanceOf[Int] < (a).size) {
          tmp = (tmp - a(j + 1) * out(i - j - 1)).toString.toDouble
          j = (j + 1).asInstanceOf[Int]
        }
        out = out :+ tmp * scale
        i = (i + 1).asInstanceOf[Int]
      }
      return out
    }
    val a: ArrayBuffer[Double] = ArrayBuffer(1.0, 0 - 0.00000000000000027756, 0.33333333, 0 - 0.0000000000000000185)
    val b: ArrayBuffer[Double] = ArrayBuffer(0.16666667, 0.5, 0.5, 0.16666667)
    val sig: ArrayBuffer[Double] = ArrayBuffer(0 - 0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, 0 - 0.662370894973, 0 - 1.00700480494, 0 - 0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, 0 - 0.2085993586, 0 - 0.172842103641, 0 - 0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589)
    val res: ArrayBuffer[Double] = applyFilter(sig, a, b)
    var k: Int = 0
    while (k < (res).size) {
      println(res(k))
      k = (k + 1).asInstanceOf[Int]
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
