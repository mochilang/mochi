// Generated by Mochi v0.10.52 on 2025-08-02 02:07:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def printFactors(n: BigInt): Any = {
  if (n < BigInt(1)) {
    println("\nFactors of " + String.valueOf(n) + " not computed")
    return
  }
  println("\nFactors of " + String.valueOf(n) + ": ")
  var fs: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  def apf(p: BigInt, e: BigInt): Any = {
    var orig: Int = (fs).size
    var pp: BigInt = p
    var i: BigInt = BigInt(0)
    while (i < e) {
      var j: BigInt = BigInt(0)
      while (j < orig) {
        fs = fs :+ fs((j).toInt) * pp
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
      pp = pp * p
    }
  }
  var e: BigInt = BigInt(0)
  var m: BigInt = n
  while (m % BigInt(2) == BigInt(0)) {
    m = m / BigInt(2)
    e = e + BigInt(1)
  }
  apf(BigInt(2), e)
  var d: BigInt = BigInt(3)
  while (m > BigInt(1)) {
    if (d * d > m) {
      d = m
    }
    e = BigInt(0)
    while (m % d == BigInt(0)) {
      m = BigInt((m / d).toInt)
      e = e + BigInt(1)
    }
    if (e > BigInt(0)) {
      apf(d, e)
    }
    d = d + BigInt(2)
  }
  println(String.valueOf(fs))
  println("Number of factors = " + String.valueOf((fs).size))
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    printFactors(BigInt(0) - BigInt(1))
    printFactors(BigInt(0))
    printFactors(BigInt(1))
    printFactors(BigInt(2))
    printFactors(BigInt(3))
    printFactors(BigInt(53))
    printFactors(BigInt(45))
    printFactors(BigInt(64))
    printFactors(BigInt("600851475143"))
    printFactors(BigInt("999999999999999989"))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
