// Generated by Mochi v0.10.52 on 2025-08-02 02:05:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def chr(n: BigInt): String = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  if ((n >= BigInt(65) && n < BigInt(91)).asInstanceOf[Boolean]) {
    return upper.slice((n - BigInt(65)).toInt, (n - BigInt(64)).toInt)
  }
  if ((n >= BigInt(97) && n < BigInt(123)).asInstanceOf[Boolean]) {
    return lower.slice((n - BigInt(97)).toInt, (n - BigInt(96)).toInt)
  }
  if (n == BigInt(32)) {
    return " "
  }
  if (n == BigInt(33)) {
    return "!"
  }
  if (n == BigInt(44)) {
    return ","
  }
  if (n == BigInt(13)) {
    return ""
  }
  if (n == BigInt(10)) {
    return "\n"
  }
  return "?"
}

def bf(dLen: BigInt, code: String): String = {
  var ds: ArrayBuffer[BigInt] = ArrayBuffer()
  for (i <- BigInt(0) until dLen) {
    ds = ds :+ BigInt(0)
  }
  var dp: BigInt = BigInt(0)
  var ip: BigInt = BigInt(0)
  var out: String = ""
  while (ip < (code).size) {
    val ch: String = code.slice((ip).toInt, (ip + BigInt(1)).toInt)
    if (ch == ">") {
      dp = dp + BigInt(1)
    } else {
      if (ch == "<") {
        dp = dp - BigInt(1)
      } else {
        if (ch == "+") {
          ds((dp).toInt) = ds((dp).toInt) + BigInt(1)
        } else {
          if (ch == "-") {
            ds((dp).toInt) = ds((dp).toInt) - BigInt(1)
          } else {
            if (ch == ".") {
              out = (out + chr(ds((dp).toInt))).toString
            } else {
              if (ch == ",") {
              } else {
                if (ch == "[") {
                  if (ds((dp).toInt) == BigInt(0)) {
                    var nc: BigInt = BigInt(1)
                    while (nc > BigInt(0)) {
                      ip = ip + BigInt(1)
                      val cc: String = code.slice((ip).toInt, (ip + BigInt(1)).toInt)
                      if (cc == "[") {
                        nc = nc + BigInt(1)
                      } else {
                        if (cc == "]") {
                          nc = nc - BigInt(1)
                        }
                      }
                    }
                  }
                } else {
                  if (ch == "]") {
                    if (ds((dp).toInt) != BigInt(0)) {
                      var nc: BigInt = BigInt(1)
                      while (nc > BigInt(0)) {
                        ip = ip - BigInt(1)
                        val cc: String = code.slice((ip).toInt, (ip + BigInt(1)).toInt)
                        if (cc == "]") {
                          nc = nc + BigInt(1)
                        } else {
                          if (cc == "[") {
                            nc = nc - BigInt(1)
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ip = ip + BigInt(1)
  }
  return out
}

def main(): Any = {
  val prog: String = "++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" + "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n" + ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n" + "<+++++++.--------.<<<<<+.<+++.---."
  var out: String = bf(BigInt(10), prog)
  println(out)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
