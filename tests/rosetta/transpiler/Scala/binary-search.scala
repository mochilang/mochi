// Generated by Mochi v0.10.40 on 2025-07-26 00:05:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def bsearch(arr: ArrayBuffer[Int], x: Int): Int = {
      var low: Int = 0
      var high: Int = (arr).size - 1
      while (low <= high) {
        val mid = (low + high) / 2
        if (arr(mid) > x) {
          high = (mid - 1).asInstanceOf[Int]
        } else {
          if (arr(mid) < x) {
            low = (mid + 1).asInstanceOf[Int]
          } else {
            return mid
          }
        }
      }
      return 0 - 1
    }
    def bsearchRec(arr: ArrayBuffer[Int], x: Int, low: Int, high: Int): Int = {
      if (high < low) {
        return 0 - 1
      }
      val mid = (low + high) / 2
      if (arr(mid) > x) {
        return bsearchRec(arr, x, low, (mid - 1).asInstanceOf[Int])
      } else {
        if (arr(mid) < x) {
          return bsearchRec(arr, x, (mid + 1).asInstanceOf[Int], high)
        }
      }
      return mid
    }
    def main(): Any = {
      val nums: ArrayBuffer[Int] = ArrayBuffer(0 - 31, 0, 1, 2, 2, 4, 65, 83, 99, 782)
      var x: Int = 2
      var idx: Int = bsearch(nums, x)
      if (idx >= 0) {
        println(String.valueOf(x) + " is at index " + String.valueOf(idx) + ".")
      } else {
        println(String.valueOf(x) + " is not found.")
      }
      x = 5
      idx = bsearchRec(nums, x, 0, (nums).size - 1)
      if (idx >= 0) {
        println(String.valueOf(x) + " is at index " + String.valueOf(idx) + ".")
      } else {
        println(String.valueOf(x) + " is not found.")
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
