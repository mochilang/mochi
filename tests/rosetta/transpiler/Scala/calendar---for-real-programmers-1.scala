// Generated by Mochi v0.10.40 on 2025-07-26 09:13:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val daysInMonth: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(31), BigInt(28), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31))
    val start: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(6), BigInt(6), BigInt(2), BigInt(4), BigInt(0), BigInt(2), BigInt(5), BigInt(1), BigInt(3), BigInt(6), BigInt(1))
    val months: ArrayBuffer[String] = ArrayBuffer(" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December")
    val days: ArrayBuffer[String] = ArrayBuffer("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa")
    println("                                [SNOOPY]\n")
    println("                                  1969\n")
    var qtr: BigInt = BigInt(0)
    while (qtr < BigInt(4)) {
      var mi: BigInt = BigInt(0)
      while (mi < BigInt(3)) {
        println(List("      " + months((qtr * BigInt(3) + mi).toInt) + "           ", false).mkString(" "))
        mi = (mi + BigInt(1)).asInstanceOf[BigInt]
      }
      println("")
      mi = BigInt(0)
      while (mi < BigInt(3)) {
        var d: BigInt = BigInt(0)
        while (d < BigInt(7)) {
          println(List(" " + days((d).toInt), false).mkString(" "))
          d = (d + BigInt(1)).asInstanceOf[BigInt]
        }
        println(List("     ", false).mkString(" "))
        mi = (mi + BigInt(1)).asInstanceOf[BigInt]
      }
      println("")
      var week: BigInt = BigInt(0)
      while (week < BigInt(6)) {
        mi = BigInt(0)
        while (mi < BigInt(3)) {
          var day: BigInt = BigInt(0)
          while (day < BigInt(7)) {
            val m = qtr * BigInt(3) + mi
            val `val` = week * BigInt(7) + day - start((m).toInt) + BigInt(1)
            if ((`val` >= BigInt(1) && `val` <= daysInMonth((m).toInt)).asInstanceOf[Boolean]) {
              var s = String.valueOf(`val`)
              if ((s).size == BigInt(1)) {
                s = " " + s
              }
              println(List(" " + s, false).mkString(" "))
            } else {
              println(List("   ", false).mkString(" "))
            }
            day = (day + BigInt(1)).asInstanceOf[BigInt]
          }
          println(List("     ", false).mkString(" "))
          mi = (mi + BigInt(1)).asInstanceOf[BigInt]
        }
        println("")
        week = (week + BigInt(1)).asInstanceOf[BigInt]
      }
      println("")
      qtr = (qtr + BigInt(1)).asInstanceOf[BigInt]
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
