// Generated by Mochi v0.10.52 on 2025-08-02 02:05:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def eulerSum(): ArrayBuffer[BigInt] = {
  var pow5: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < BigInt(250)) {
    pow5 = pow5 :+ i * i * i * i * i
    i = i + BigInt(1)
  }
  var sums: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map()
  var x2: BigInt = BigInt(2)
  while (x2 < BigInt(250)) {
    var x3: BigInt = BigInt(1)
    while (x3 < x2) {
      val s: BigInt = pow5((x2).toInt) + pow5((x3).toInt)
      if ((!(sums.contains(s)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        sums.update(s, ArrayBuffer(x2, x3))
      }
      x3 = x3 + BigInt(1)
    }
    x2 = x2 + BigInt(1)
  }
  var x0: BigInt = BigInt(4)
  while (x0 < BigInt(250)) {
    var x1: BigInt = BigInt(3)
    while (x1 < x0) {
      var y: BigInt = x0 + BigInt(1)
      while (y < BigInt(250)) {
        val rem: BigInt = pow5((y).toInt) - pow5((x0).toInt) - pow5((x1).toInt)
        if ((sums.contains(rem)).asInstanceOf[Boolean]) {
          val pair: ArrayBuffer[BigInt] = sums(rem)
          val a: BigInt = pair((BigInt(0)).toInt)
          val b: BigInt = pair((BigInt(1)).toInt)
          if ((x1 > a && a > b).asInstanceOf[Boolean]) {
            return (ArrayBuffer(x0, x1, a, b, y)).asInstanceOf[ArrayBuffer[BigInt]]
          }
        }
        y = y + BigInt(1)
      }
      x1 = x1 + BigInt(1)
    }
    x0 = x0 + BigInt(1)
  }
  return ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0))
}

def main(): Any = {
  val r: ArrayBuffer[BigInt] = eulerSum()
  println(String.valueOf(r((BigInt(0)).toInt)) + " " + String.valueOf(r((BigInt(1)).toInt)) + " " + String.valueOf(r((BigInt(2)).toInt)) + " " + String.valueOf(r((BigInt(3)).toInt)) + " " + String.valueOf(r((BigInt(4)).toInt)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
