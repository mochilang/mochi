// Generated by Mochi v0.10.54 on 2025-08-02 16:35:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def quibble(items: ArrayBuffer[String]): String = {
  val n: Int = (items).size
  if (n == BigInt(0)) {
    return "{}"
  } else {
    if (n == BigInt(1)) {
      return "{" + items((BigInt(0).toInt).toInt) + "}"
    } else {
      if (n == BigInt(2)) {
        return "{" + items((BigInt(0).toInt).toInt) + " and " + items((BigInt(1).toInt).toInt) + "}"
      } else {
        var prefix: String = ""
        val _br0 = new Breaks
        _br0.breakable {
          for (i <- BigInt(0) until n - BigInt(1).toInt) {
            if (i == n - BigInt(1).toInt) {
              _br0.break()
            }
            if (BigInt(i.toString) > BigInt(0)) {
              prefix = prefix + ", "
            }
            prefix = (prefix + items((i.toInt).toInt)).toString
          }
        }
        return "{" + prefix + " and " + items((n - BigInt(1).toInt.toInt).toInt) + "}"
      }
    }
  }
  return ""
}

def main(): Any = {
  println(quibble((ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]))
  println(quibble(ArrayBuffer("ABC")))
  println(quibble(ArrayBuffer("ABC", "DEF")))
  println(quibble(ArrayBuffer("ABC", "DEF", "G", "H")))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
