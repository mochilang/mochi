// Generated by Mochi v0.10.40 on 2025-07-26 04:50:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: Int): Boolean = {
      if (n < 2) {
        return false
      }
      if (Math.floorMod(n, 2) == 0) {
        return n == 2
      }
      if (Math.floorMod(n, 3) == 0) {
        return n == 3
      }
      var d: Int = 5
      while ((d * d).asInstanceOf[Int] <= n) {
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 2).asInstanceOf[Int]
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 4).asInstanceOf[Int]
      }
      return true
    }
    def firstPrimeFactor(n: Int): Int = {
      if (n == 1) {
        return 1
      }
      if (Math.floorMod(n, 3) == 0) {
        return 3
      }
      if (Math.floorMod(n, 5) == 0) {
        return 5
      }
      var inc: ArrayBuffer[Int] = ArrayBuffer(4, 2, 4, 2, 4, 6, 2, 6)
      var k: Int = 7
      var i: Int = 0
      while ((k * k).asInstanceOf[Int] <= n) {
        if (Math.floorMod(n, k) == 0) {
          return k
        }
        k = (k + inc(i)).asInstanceOf[Int]
        i = (Math.floorMod(i + 1, (inc).size)).asInstanceOf[Int]
      }
      return n
    }
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def padLeft(n: Int, width: Int): String = {
      var s = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def formatFloat(f: Double, prec: Int): String = {
      val s = String.valueOf(f)
      val idx: Int = indexOf(s, ".")
      if (idx < 0) {
        return s
      }
      val need = idx + 1 + prec
      if ((s).size > need) {
        return s.slice(0, need)
      }
      return s
    }
    def main(): Any = {
      var blum: ArrayBuffer[Int] = ArrayBuffer()
      var counts: ArrayBuffer[Int] = ArrayBuffer(0, 0, 0, 0)
      var digits: ArrayBuffer[Int] = ArrayBuffer(1, 3, 7, 9)
      var i: Int = 1
      var bc: Int = 0
      val _br4 = new Breaks
      _br4.breakable {
        while (true) {
          val p: Int = firstPrimeFactor(i)
          if (Math.floorMod(p, 4) == 3) {
            val q: Int = (i / p).asInstanceOf[Int]
            if (((q != p && Math.floorMod(q, 4) == 3).asInstanceOf[Boolean] && isPrime(q)).asInstanceOf[Boolean]) {
              if (bc < 50) {
                blum = blum :+ i
              }
              val d = Math.floorMod(i, 10)
              if (d == 1) {
                counts(0) = counts(0) + 1
              } else {
                if (d == 3) {
                  counts(1) = counts(1) + 1
                } else {
                  if (d == 7) {
                    counts(2) = counts(2) + 1
                  } else {
                    if (d == 9) {
                      counts(3) = counts(3) + 1
                    }
                  }
                }
              }
              bc = (bc + 1).asInstanceOf[Int]
              if (bc == 50) {
                println("First 50 Blum integers:")
                var idx: Int = 0
                while (idx < 50) {
                  var line: String = ""
                  var j: Int = 0
                  while (j < 10) {
                    line = line + padLeft(blum(idx), 3) + " "
                    idx = (idx + 1).asInstanceOf[Int]
                    j = (j + 1).asInstanceOf[Int]
                  }
                  println(line.slice(0, (line).size - 1))
                }
                _br4.break()
              }
            }
          }
          if (Math.floorMod(i, 5) == 3) {
            i = (i + 4).asInstanceOf[Int]
          } else {
            i = (i + 2).asInstanceOf[Int]
          }
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
