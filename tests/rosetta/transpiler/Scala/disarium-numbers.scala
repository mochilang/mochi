// Generated by Mochi v0.10.52 on 2025-08-01 19:06:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow(base: BigInt, exp: BigInt): BigInt = {
      var result: BigInt = BigInt(1)
      var i: BigInt = BigInt(0)
      while (i < exp) {
        result = result * base
        i = i + BigInt(1)
      }
      return result
    }
    def isDisarium(n: BigInt): Boolean = {
      var digits: ArrayBuffer[BigInt] = ArrayBuffer()
      var x: BigInt = n
      if (x == BigInt(0)) {
        digits = digits :+ BigInt(0)
      }
      while (x > BigInt(0)) {
        digits = digits :+ x % BigInt(10)
        x = x / BigInt(10)
      }
      var sum: BigInt = BigInt(0)
      var pos: BigInt = BigInt(1)
      var i: BigInt = (digits).size - BigInt(1).toInt
      while (i >= BigInt(0)) {
        sum = sum + pow(digits((i).toInt), pos)
        pos = pos + BigInt(1)
        i = i - BigInt(1)
      }
      return sum == n
    }
    def main(): Any = {
      var count: BigInt = BigInt(0)
      var n: BigInt = BigInt(0)
      while (count < BigInt(19) && n < BigInt(3000000)) {
        if (isDisarium(n)) {
          println(String.valueOf(n))
          count = count + BigInt(1)
        }
        n = n + BigInt(1)
      }
      println("\nFound the first " + String.valueOf(count) + " Disarium numbers.")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
