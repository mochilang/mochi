// Generated by Mochi v0.10.56 on 2025-08-04 00:10:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def entropy(s: String): Double = {
  var counts: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map()
  var i: BigInt = BigInt(0)
  while (i < BigInt(((s).size).toInt)) {
    val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((counts.contains(ch)).asInstanceOf[Boolean]) {
      counts.update(ch, counts.getOrElse(ch, null).asInstanceOf[BigInt] + BigInt(1))
    } else {
      counts.update(ch, BigInt(1))
    }
    i = i + BigInt(1)
  }
  var hm: Double = 0.0
  for (k <- counts.keys.toSeq.sorted) {
    val c: Double = (counts.getOrElse(k, null).asInstanceOf[BigInt]).toString.toDouble
    hm = hm + c * (math.log(c) / math.log(2.0))
  }
  val l: Double = ((s).size).toString.toDouble
  return math.log(l) / math.log(2.0) - hm / l
}

def fibonacciWord(n: BigInt): String = {
  var a: String = "1"
  var b: String = "0"
  var i: BigInt = BigInt(1)
  while (i < n) {
    val tmp: String = b
    b = b + a
    a = tmp
    i = i + BigInt(1)
  }
  return a
}

def main(): Any = {
  println(pad("N", BigInt(3)) + pad("Length", BigInt(9)) + "  Entropy      Word")
  var n: BigInt = BigInt(1)
  while (n < BigInt(10)) {
    val s: String = fibonacciWord(n)
    println(pad(String.valueOf(n), BigInt(3)) + pad(String.valueOf((s).size), BigInt(9)) + "  " + fmt(entropy(s)) + "  " + s)
    n = n + BigInt(1)
  }
  while (n <= BigInt(37)) {
    val s: String = fibonacciWord(n)
    println(pad(String.valueOf(n), BigInt(3)) + pad(String.valueOf((s).size), BigInt(9)) + "  " + fmt(entropy(s)))
    n = n + BigInt(1)
  }
}

def pad(s: String, w: BigInt): String = {
  var t: String = s
  while (BigInt(((t).size).toInt) < w) {
    t = " " + t
  }
  return t
}

def fmt(x: Double): String = {
  var y: Double = floorf(x * 100000000.0 + 0.5) / 100000000.0
  var s: String = String.valueOf(y)
  var dot: BigInt = BigInt(s.indexOf("."))
  if (dot == BigInt(0) - BigInt(1)) {
    s = s + ".00000000"
  } else {
    var d: BigInt = (s).size - dot - BigInt(1)
    while (d < BigInt(8)) {
      s = s + "0"
      d = d + BigInt(1)
    }
  }
  return s
}

def floorf(x: Double): Double = {
  val y: Int = x.toInt
  return y.toString.toDouble
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = BigInt(0)
  while (i < BigInt(((s).size).toInt)) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(0) - BigInt(1)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
