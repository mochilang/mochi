// Generated by Mochi v0.10.56 on 2025-08-04 00:19:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def commatize(n: BigInt): String = {
  var s: String = String.valueOf(n)
  var i: BigInt = (s).size % BigInt(3).toInt
  if (i == BigInt(0)) {
    i = BigInt(3)
  }
  var out: String = s.slice((BigInt(0)).toInt, (i).toInt)
  while (i < BigInt(((s).size).toInt)) {
    out = out + "," + s.slice((i).toInt, (i + BigInt(3)).toInt)
    i = i + BigInt(3)
  }
  return out
}

def p(L: BigInt, n: BigInt): BigInt = {
  val Ls: String = String.valueOf(L)
  var digits: BigInt = BigInt(1)
  var d: BigInt = BigInt(1)
  while (d <= BigInt(18).toInt - (Ls).size) {
    digits = digits * BigInt(10)
    d = d + BigInt(1)
  }
  val ten18: BigInt = BigInt("1000000000000000000")
  var count: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  var probe: BigInt = BigInt(1)
  val _br2 = new Breaks
  _br2.breakable {
    while (true) {
      probe = probe * BigInt(2)
      i = i + BigInt(1)
      if (probe >= ten18) {
        val _br3 = new Breaks
        _br3.breakable {
          while (true) {
            if (probe >= ten18) {
              probe = probe / BigInt(10)
            }
            if (probe / digits == L) {
              count = count + BigInt(1)
              if (count >= n) {
                count = count - BigInt(1)
                _br3.break()
              }
            }
            probe = probe * BigInt(2)
            i = i + BigInt(1)
          }
        }
      }
      var ps: String = String.valueOf(probe)
      var le: Int = (Ls).size
      if (le > (ps).size) {
        le = (ps).size
      }
      if (ps.slice((BigInt(0)).toInt, (le).toInt) == Ls) {
        count = count + BigInt(1)
        if (count >= n) {
          _br2.break()
        }
      }
    }
  }
  return i
}

var params: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(12), BigInt(1)), ArrayBuffer(BigInt(12), BigInt(2)), ArrayBuffer(BigInt(123), BigInt(45)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var idx: BigInt = BigInt(0)
    while (idx < BigInt(((params).size).toInt)) {
      val L: BigInt = params((idx.toInt).toInt)((BigInt(0).toInt).toInt)
      val m: BigInt = params((idx.toInt).toInt)((BigInt(1).toInt).toInt)
      println("p(" + String.valueOf(L) + ", " + String.valueOf(m) + ") = " + commatize(p(L, m)))
      idx = idx + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
