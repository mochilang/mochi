// Generated by Mochi v0.10.50 on 2025-07-31 01:07:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def randInt(seed: BigInt, n: BigInt): ArrayBuffer[BigInt] = {
      val next: BigInt = (seed * BigInt(1664525) + BigInt(1013904223)) % BigInt(2147483647)
      return (ArrayBuffer(next, next % n)).asInstanceOf[ArrayBuffer[BigInt]]
    }
    def newBoard(n: BigInt, seed: BigInt): ArrayBuffer[Any] = {
      var board: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      var s: BigInt = seed
      var i: BigInt = BigInt(0)
      while (i < n) {
        var row: ArrayBuffer[BigInt] = ArrayBuffer()
        var j: BigInt = BigInt(0)
        while (j < n) {
          var r: ArrayBuffer[BigInt] = randInt(s, BigInt(2))
          s = r((BigInt(0)).toInt)
          row = row :+ r((BigInt(1)).toInt)
          j = j + BigInt(1)
        }
        board = board :+ row
        i = i + BigInt(1)
      }
      return ArrayBuffer(board, s)
    }
    def copyBoard(b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
      var nb: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < (b).size) {
        var row: ArrayBuffer[BigInt] = ArrayBuffer()
        var j: BigInt = BigInt(0)
        while (j < (b((i).toInt)).size) {
          row = row :+ b((i).toInt)((j).toInt)
          j = j + BigInt(1)
        }
        nb = nb :+ row
        i = i + BigInt(1)
      }
      return nb
    }
    def flipRow(b: ArrayBuffer[ArrayBuffer[BigInt]], r: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
      var j: BigInt = BigInt(0)
      while (j < (b((r).toInt)).size) {
        b((r).toInt)((j).toInt) = BigInt(1) - b((r).toInt)((j).toInt)
        j = j + BigInt(1)
      }
      return b
    }
    def flipCol(b: ArrayBuffer[ArrayBuffer[BigInt]], c: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
      var i: BigInt = BigInt(0)
      while (i < (b).size) {
        b((i).toInt)((c).toInt) = BigInt(1) - b((i).toInt)((c).toInt)
        i = i + BigInt(1)
      }
      return b
    }
    def boardsEqual(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
      var i: BigInt = BigInt(0)
      while (i < (a).size) {
        var j: BigInt = BigInt(0)
        while (j < (a((i).toInt)).size) {
          if (a((i).toInt)((j).toInt) != b((i).toInt)((j).toInt)) {
            return false
          }
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
      return true
    }
    def shuffleBoard(_b: ArrayBuffer[ArrayBuffer[BigInt]], seed: BigInt): ArrayBuffer[Any] = {
      var b: ArrayBuffer[ArrayBuffer[BigInt]] = _b
      var s: BigInt = seed
      var n: Int = (b).size
      var k: BigInt = BigInt(0)
      while (k < BigInt(2) * n) {
        var r: ArrayBuffer[BigInt] = randInt(s, n.asInstanceOf[BigInt])
        s = r((BigInt(0)).toInt)
        val idx: BigInt = BigInt((r((BigInt(1)).toInt)).toInt)
        if (k % BigInt(2) == BigInt(0)) {
          b = flipRow(b, idx)
        } else {
          b = flipCol(b, idx)
        }
        k = k + BigInt(1)
      }
      return ArrayBuffer(b, s)
    }
    def solve(board: ArrayBuffer[ArrayBuffer[BigInt]], target: ArrayBuffer[ArrayBuffer[BigInt]]): scala.collection.mutable.Map[String,ArrayBuffer[BigInt]] = {
      val n: Int = (board).size
      var row: ArrayBuffer[BigInt] = ArrayBuffer()
      var col: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < n) {
        val diff: BigInt = if (board(i)(BigInt(0)) != target(i)(BigInt(0))) BigInt(1) else BigInt(0)
        row = row :+ diff
        i = i + BigInt(1)
      }
      var j: BigInt = BigInt(0)
      while (j < n) {
        val diff: BigInt = if (board(BigInt(0))(j) != target(BigInt(0))(j)) BigInt(1) else BigInt(0)
        val `val`: BigInt = (diff + row((BigInt(0)).toInt)) % BigInt(2)
        col = col :+ `val`
        j = j + BigInt(1)
      }
      return (scala.collection.mutable.Map("row" -> (row), "col" -> (col))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[BigInt]]]
    }
    def applySolution(b: ArrayBuffer[ArrayBuffer[BigInt]], sol: scala.collection.mutable.Map[String,ArrayBuffer[BigInt]]): ArrayBuffer[Any] = {
      var board: ArrayBuffer[ArrayBuffer[BigInt]] = b
      var moves: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < (sol("row")).size) {
        if (sol("row")((i).toInt) == BigInt(1)) {
          board = flipRow(board, i)
          moves = moves + BigInt(1)
        }
        i = i + BigInt(1)
      }
      var j: BigInt = BigInt(0)
      while (j < (sol("col")).size) {
        if (sol("col")((j).toInt) == BigInt(1)) {
          board = flipCol(board, j)
          moves = moves + BigInt(1)
        }
        j = j + BigInt(1)
      }
      return ArrayBuffer(board, moves)
    }
    def printBoard(b: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
      var i: BigInt = BigInt(0)
      while (i < (b).size) {
        var line: String = ""
        var j: BigInt = BigInt(0)
        while (j < (b((i).toInt)).size) {
          line = line + String.valueOf(b((i).toInt)((j).toInt))
          if (j < (b((i).toInt)).size - BigInt(1)) {
            line = line + " "
          }
          j = j + BigInt(1)
        }
        println(line)
        i = i + BigInt(1)
      }
    }
    def main(): Any = {
      val n: BigInt = BigInt(3)
      var seed: BigInt = BigInt(1)
      var res: ArrayBuffer[Any] = newBoard(n, seed)
      var target: ArrayBuffer[ArrayBuffer[BigInt]] = (res((BigInt(0)).toInt)).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
      seed = BigInt((res((BigInt(1)).toInt)).toInt)
      var board: ArrayBuffer[ArrayBuffer[BigInt]] = copyBoard(target)
      val _br15 = new Breaks
      _br15.breakable {
        while (true) {
          var sres: ArrayBuffer[Any] = shuffleBoard(copyBoard(board), seed)
          board = (sres((BigInt(0)).toInt)).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
          seed = BigInt((sres((BigInt(1)).toInt)).toInt)
          if ((!boardsEqual(board, target)).asInstanceOf[Boolean]) {
            _br15.break()
          }
        }
      }
      println("Target:")
      printBoard(target)
      println("Board:")
      printBoard(board)
      val sol: scala.collection.mutable.Map[String,ArrayBuffer[BigInt]] = solve(board, target)
      var ares: ArrayBuffer[Any] = applySolution(board, sol)
      board = (ares((BigInt(0)).toInt)).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
      val moves: BigInt = BigInt((ares((BigInt(1)).toInt)).toInt)
      println("Solved:")
      printBoard(board)
      println("Moves: " + String.valueOf(moves))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
