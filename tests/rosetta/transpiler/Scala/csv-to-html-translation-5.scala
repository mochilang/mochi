// Generated by Mochi v0.10.57 on 2025-08-04 19:29:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var out: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  var start: BigInt = 0
  var i: BigInt = 0
  val n: Int = (sep).size
  while (i <= BigInt(((s).size - n).toString.toDouble.toInt)) {
    if (s.slice((i).toInt, (i + n).toInt) == sep) {
      out = out :+ s.slice((start).toInt, (i).toInt)
      i = i + n
      start = i
    } else {
      i = i + 1
    }
  }
  out = out :+ s.slice((start).toInt, ((s).size).toInt)
  return out
}

def htmlEscape(s: String): String = {
  var out: String = ""
  var i: BigInt = 0
  while (i < BigInt(((s).size).toInt)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch == "&") {
      out = out + "&amp;"
    } else {
      if (ch == "<") {
        out = out + "&lt;"
      } else {
        if (ch == ">") {
          out = out + "&gt;"
        } else {
          out = out + ch
        }
      }
    }
    i = i + 1
  }
  return out
}

val c: String = "Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n" + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n" + "The multitude,Who are you?\n" + "Brians mother,I'm his mother; that's who!\n" + "The multitude,Behold his mother! Behold his mother!"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var rows: ArrayBuffer[ArrayBuffer[String]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
    for (line <- ArrayBuffer(c.split("\n"): _*)) {
      rows = rows :+ (ArrayBuffer(line.split(","): _*)).asInstanceOf[ArrayBuffer[String]]
    }
    println("<table>")
    for (row <- rows) {
      var cells: String = ""
      for (cell <- row) {
        cells = cells + "<td>" + htmlEscape(cell) + "</td>"
      }
      println("    <tr>" + cells + "</tr>")
    }
    println("</table>")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
