// Generated by Mochi v0.10.50 on 2025-07-31 07:53:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def getDivisors(n: BigInt): ArrayBuffer[BigInt] = {
    var divs: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), n)
    var i: BigInt = BigInt(2)
    while (i * i <= n) {
      if (n % i == BigInt(0)) {
        val j: BigInt = BigInt((n / i).toInt)
        divs = divs :+ i
        if (i != j) {
          divs = divs :+ j
        }
      }
      i = i + BigInt(1)
    }
    return divs
  }
  
  def sum(xs: ArrayBuffer[BigInt]): BigInt = {
    var s: BigInt = BigInt(0)
    for (x <- xs) {
      s = s + x
    }
    return s
  }
  
  def isPartSum(divs: ArrayBuffer[BigInt], target: BigInt): Boolean = {
    var possible: ArrayBuffer[Boolean] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i <= target) {
      possible = possible :+ false
      i = i + BigInt(1)
    }
    possible((BigInt(0)).toInt) = true
    for (v <- divs) {
      var s: BigInt = target
      while (s >= v) {
        if (possible((s - v).toInt)) {
          possible((s).toInt) = true
        }
        s = s - BigInt(1)
      }
    }
    return possible((target).toInt)
  }
  
  def isZumkeller(n: BigInt): Boolean = {
    val divs: ArrayBuffer[BigInt] = getDivisors(n)
    val s = divs.sum
    if (s % BigInt(2) == BigInt(1)) {
      return false
    }
    if (n % BigInt(2) == BigInt(1)) {
      val abundance: BigInt = s - BigInt(2) * n
      return (abundance > BigInt(0) && abundance % BigInt(2) == BigInt(0)).asInstanceOf[Boolean]
    }
    return isPartSum(divs, s / BigInt(2))
  }
  
  def pad(n: BigInt, width: BigInt): String = {
    var s: String = String.valueOf(n)
    while ((s).size < width) {
      s = " " + s
    }
    return s
  }
  
  def main(): Any = {
    println("The first 220 Zumkeller numbers are:")
    var count: BigInt = BigInt(0)
    var line: String = ""
    var i: BigInt = BigInt(2)
    while (count < BigInt(220)) {
      if (isZumkeller(i)) {
        line = line + pad(i, BigInt(3)) + " "
        count = count + BigInt(1)
        if (count % BigInt(20) == BigInt(0)) {
          println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1)).toInt))
          line = ""
        }
      }
      i = i + BigInt(1)
    }
    println("\nThe first 40 odd Zumkeller numbers are:")
    count = BigInt(0)
    line = ""
    i = BigInt(3)
    while (count < BigInt(40)) {
      if (isZumkeller(i)) {
        line = line + pad(i, BigInt(5)) + " "
        count = count + BigInt(1)
        if (count % BigInt(10) == BigInt(0)) {
          println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1)).toInt))
          line = ""
        }
      }
      i = i + BigInt(2)
    }
    println("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
    count = BigInt(0)
    line = ""
    i = BigInt(3)
    while (count < BigInt(40)) {
      if ((i % BigInt(10) != BigInt(5) && isZumkeller(i)).asInstanceOf[Boolean]) {
        line = line + pad(i, BigInt(7)) + " "
        count = count + BigInt(1)
        if (count % BigInt(8) == BigInt(0)) {
          println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1)).toInt))
          line = ""
        }
      }
      i = i + BigInt(2)
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
