// Generated by Mochi v0.10.40 on 2025-07-26 04:49:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def padLeft(s: String, w: Int): String = {
      var res: String = ""
      var n = w - (s).size
      while (n > 0) {
        res = res + " "
        n = (n - 1).asInstanceOf[Int]
      }
      return (res + s).toString
    }
    val dna: String = "" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG" + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG" + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT" + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT" + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG" + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT" + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG" + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC" + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"
    println("SEQUENCE:")
    val le: Int = (dna).size
    var i: Int = 0
    while (i < le) {
      var k = i + 50
      if (k > le) {
        k = le
      }
      println(padLeft((String.valueOf(i)).toString, 5) + ": " + dna.slice(i, k))
      i = (i + 50).asInstanceOf[Int]
    }
    var a: Int = 0
    var c: Int = 0
    var g: Int = 0
    var t: Int = 0
    var idx: Int = 0
    while (idx < le) {
      val ch: String = dna.slice(idx, idx + 1)
      if (ch == "A") {
        a = (a + 1).asInstanceOf[Int]
      } else {
        if (ch == "C") {
          c = (c + 1).asInstanceOf[Int]
        } else {
          if (ch == "G") {
            g = (g + 1).asInstanceOf[Int]
          } else {
            if (ch == "T") {
              t = (t + 1).asInstanceOf[Int]
            }
          }
        }
      }
      idx = (idx + 1).asInstanceOf[Int]
    }
    println("")
    println("BASE COUNT:")
    println("    A: " + padLeft((String.valueOf(a)).toString, 3))
    println("    C: " + padLeft((String.valueOf(c)).toString, 3))
    println("    G: " + padLeft((String.valueOf(g)).toString, 3))
    println("    T: " + padLeft((String.valueOf(t)).toString, 3))
    println("    ------")
    println("    \u03a3: " + String.valueOf(le))
    println("    ======")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
