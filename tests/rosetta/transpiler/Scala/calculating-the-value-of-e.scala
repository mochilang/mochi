// Generated by Mochi v0.10.40 on 2025-07-26 05:17:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val epsilon: Double = 0.000000000000001
    def absf(x: Double): Double = {
      if (x < 0.0) {
        return (BigInt(0) - x).toString.toDouble
      }
      return x
    }
    def pow10(n: BigInt): Double = {
      var r: Double = 1.0
      var i: BigInt = BigInt(0)
      while (i < n) {
        r = r * 10.0
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return r
    }
    def formatFloat(f: Double, prec: BigInt): String = {
      val scale: Double = pow10(prec)
      val scaled: Double = f * scale + 0.5
      var n: BigInt = BigInt(scaled)
      var digits = String.valueOf(n)
      while ((digits).size <= prec) {
        digits = "0" + digits
      }
      val intPart: String = digits.slice(BigInt(0), (digits).size - prec)
      val fracPart: String = digits.slice((digits).size - prec, (digits).size)
      return intPart + "." + fracPart
    }
    var factval: BigInt = BigInt(1)
    var e: Double = 2.0
    var n: BigInt = BigInt(2)
    var term: Double = 1.0
    val _br2 = new Breaks
    _br2.breakable {
      while (true) {
        factval = (factval * n).asInstanceOf[BigInt]
        n = (n + BigInt(1)).asInstanceOf[BigInt]
        term = 1.0 / factval.toString.toDouble
        e = (e + term).toString.toDouble
        if (absf(term) < epsilon) {
          _br2.break()
        }
      }
    }
    println("e = " + formatFloat(e, BigInt(15)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
