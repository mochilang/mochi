// Generated by Mochi v0.10.52 on 2025-08-02 02:08:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

class BigRat(var num: BigInt, var den: BigInt) {
  def +(o: BigRat) = BigRat(num * o.den + o.num * den, den * o.den)
  def -(o: BigRat) = BigRat(num * o.den - o.num * den, den * o.den)
  def *(o: BigRat) = BigRat(num * o.num, den * o.den)
  def /(o: BigRat) = BigRat(num * o.den, den * o.num)
  override def toString(): String = s"${num}/${den}"
}
object BigRat {
  def apply(n: BigInt, d: BigInt = BigInt(1)): BigRat = {
    val g = n.gcd(d); var nn = n / g; var dd = d / g; if (dd < 0) { nn = -nn; dd = -dd }
    new BigRat(nn, dd)
  }
}
def _bigrat(n: BigInt, d: BigInt = BigInt(1)) = BigRat(n, d)
def _bigrat(r: BigRat): BigRat = r
def num(r: BigRat): BigInt = r.num
def denom(r: BigRat): BigInt = r.den

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bernoulli(n: BigInt): BigRat = {
  var a: ArrayBuffer[BigRat] = ArrayBuffer()
  var m: BigInt = BigInt(0)
  while (m <= n) {
    a = a :+ (_bigrat(BigInt(1)) / _bigrat(m + BigInt(1))).asInstanceOf[BigRat]
    var j: BigInt = m
    while (j >= BigInt(1)) {
      a((j - BigInt(1)).toInt) = (_bigrat(j) * (a((j - BigInt(1)).toInt) - a((j).toInt))).asInstanceOf[BigRat]
      j = j - BigInt(1)
    }
    m = m + BigInt(1)
  }
  return a((BigInt(0)).toInt)
}

def binom(n: BigInt, k: BigInt): BigInt = {
  if ((k < BigInt(0) || k > n).asInstanceOf[Boolean]) {
    return BigInt(0)
  }
  var kk: BigInt = k
  if (kk > n - kk) {
    kk = n - kk
  }
  var res: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < kk) {
    res = res * BigInt((n - i).toInt)
    i = i + BigInt(1)
    res = res / BigInt(i.toInt)
  }
  return res
}

def coeff(p: BigInt, j: BigInt): BigRat = {
  val base: BigRat = _bigrat(BigInt(1)) / _bigrat(p + BigInt(1))
  var c: BigRat = base
  if (j % BigInt(2) == BigInt(1)) {
    c = (_bigrat(BigInt(0)) - c).asInstanceOf[BigRat]
  }
  c = (c * _bigrat(binom(p + BigInt(1), j))).asInstanceOf[BigRat]
  c = (c * bernoulli(j)).asInstanceOf[BigRat]
  return c
}

def main(): Any = {
  var p: BigInt = BigInt(0)
  while (p < BigInt(10)) {
    var line: String = String.valueOf(p) + " :"
    var j: BigInt = BigInt(0)
    while (j <= p) {
      var c: BigRat = coeff(p, j)
      if (String.valueOf(c) != "0/1") {
        line = line + " " + String.valueOf(c) + "\u00d7n"
        val exp: BigInt = p + BigInt(1) - j
        if (exp > BigInt(1)) {
          line = line + "^" + String.valueOf(exp)
        }
      }
      j = j + BigInt(1)
    }
    println(line)
    p = p + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
