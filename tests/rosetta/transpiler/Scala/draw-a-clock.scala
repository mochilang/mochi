// Generated by Mochi v0.10.52 on 2025-08-01 19:08:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow2(exp: BigInt): BigInt = {
      var r: BigInt = BigInt(1)
      var i: BigInt = BigInt(0)
      while (i < exp) {
        r = r * BigInt(2)
        i = i + BigInt(1)
      }
      return r
    }
    def bin(_n: BigInt, digits: BigInt): String = {
      var n: BigInt = _n
      var s: String = ""
      var i: BigInt = digits - BigInt(1)
      while (i >= BigInt(0)) {
        val p: BigInt = pow2(i)
        if (n >= p) {
          s = s + "x"
          n = n - p
        } else {
          s = s + " "
        }
        if (i > BigInt(0)) {
          s = s + "|"
        }
        i = i - BigInt(1)
      }
      return s
    }
    val t: BigInt = _now() / BigInt(1000000000)
    val sec: BigInt = t % BigInt(60)
    val mins: BigInt = t / BigInt(60)
    val min: BigInt = mins % BigInt(60)
    val hour: BigInt = mins / BigInt(60) % BigInt(24)
    println(bin(hour, BigInt(8)))
    println("")
    println(bin(min, BigInt(8)))
    println("")
    var xs: String = ""
    var i: BigInt = BigInt(0)
    while (i < sec) {
      xs = xs + "x"
      i = i + BigInt(1)
    }
    var out: String = ""
    var j: BigInt = BigInt(0)
    while (j < (xs).size) {
      out = out + xs.slice((j).toInt, (j + BigInt(1)).toInt)
      if (((j + BigInt(1)) % BigInt(5) == BigInt(0) && j + BigInt(1) < (xs).size).asInstanceOf[Boolean]) {
        out = out + "|"
      }
      j = j + BigInt(1)
    }
    println(out)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
