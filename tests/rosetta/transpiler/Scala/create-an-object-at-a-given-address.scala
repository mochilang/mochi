// Generated by Mochi v0.10.57 on 2025-08-04 17:18:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def listStr(xs: ArrayBuffer[BigInt]): String = {
    var s: String = "["
    var i: BigInt = 0
    while (i < BigInt(((xs).size).toInt)) {
      s = s + String.valueOf(xs((i.toInt).toInt))
      if (i < BigInt(((xs).size - 1.toInt).toInt)) {
        s = s + " "
      }
      i = i + 1
    }
    s = s + "]"
    return s
  }
  
  def pointerDemo(): Any = {
    println("Pointer:")
    var i: BigInt = 0
    println("Before:")
    println("\t<address>: " + String.valueOf(i) + ", " + String.valueOf(i))
    i = 3
    println("After:")
    println("\t<address>: " + String.valueOf(i) + ", " + String.valueOf(i))
  }
  
  def sliceDemo(): Any = {
    println("Slice:")
    var a: ArrayBuffer[Any] = ArrayBuffer()
    for (_ <- 0 until 10) {
      a = a :+ 0.asInstanceOf[Any]
    }
    var s: ArrayBuffer[Any] = a
    println("Before:")
    println("\ts: " + listStr(s.asInstanceOf[ArrayBuffer[BigInt]]))
    println("\ta: " + listStr(a.asInstanceOf[ArrayBuffer[BigInt]]))
    var data: ArrayBuffer[BigInt] = ArrayBuffer(65, 32, 115, 116, 114, 105, 110, 103, 46)
    var idx: BigInt = 0
    while (idx < BigInt(((data).size).toInt)) {
      s((idx).toInt) = data((idx.toInt).toInt)
      idx = idx + 1
    }
    println("After:")
    println("\ts: " + listStr(s.asInstanceOf[ArrayBuffer[BigInt]]))
    println("\ta: " + listStr(a.asInstanceOf[ArrayBuffer[BigInt]]))
  }
  
  def main(args: Array[String]): Unit = {
    pointerDemo()
    println("")
    sliceDemo()
  }
}
