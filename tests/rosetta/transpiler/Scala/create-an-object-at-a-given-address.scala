// Generated by Mochi v0.10.42 on 2025-07-27 22:00:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def listStr(xs: ArrayBuffer[BigInt]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        s = (s + String.valueOf(xs((i).toInt))).toString
        if (i < (xs).size - BigInt(1)) {
          s = s + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      s = s + "]"
      return s
    }
    def pointerDemo(): Any = {
      println("Pointer:")
      var i: BigInt = BigInt(0)
      println("Before:")
      println("\t<address>: " + String.valueOf(i) + ", " + String.valueOf(i))
      i = BigInt(3)
      println("After:")
      println("\t<address>: " + String.valueOf(i) + ", " + String.valueOf(i))
    }
    def sliceDemo(): Any = {
      println("Slice:")
      var a: ArrayBuffer[Any] = ArrayBuffer()
      for (_ <- BigInt(0) until BigInt(10)) {
        a = a :+ BigInt(0).asInstanceOf[Any]
      }
      var s: ArrayBuffer[Any] = a
      println("Before:")
      println("\ts: " + listStr(s.asInstanceOf[ArrayBuffer[BigInt]]))
      println("\ta: " + listStr(a.asInstanceOf[ArrayBuffer[BigInt]]))
      var data: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(65), BigInt(32), BigInt(115), BigInt(116), BigInt(114), BigInt(105), BigInt(110), BigInt(103), BigInt(46))
      var idx: BigInt = BigInt(0)
      while (idx < (data).size) {
        s((idx).toInt) = data((idx).toInt)
        idx = (idx + BigInt(1)).asInstanceOf[BigInt]
      }
      println("After:")
      println("\ts: " + listStr(s.asInstanceOf[ArrayBuffer[BigInt]]))
      println("\ta: " + listStr(a.asInstanceOf[ArrayBuffer[BigInt]]))
    }
    pointerDemo()
    println("")
    sliceDemo()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
