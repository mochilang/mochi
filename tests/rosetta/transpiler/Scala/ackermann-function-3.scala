// Generated by Mochi v0.10.40 on 2025-07-25 13:20:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow_big(base: BigInt, exp: Int): BigInt = {
      var result: BigInt = 1
      var b: BigInt = base
      var e: Int = exp
      while (e > 0) {
        if (Math.floorMod(e, 2) == 1) {
          result = (result * b).asInstanceOf[BigInt]
        }
        b = (b * b).asInstanceOf[BigInt]
        e = (e / 2).asInstanceOf[Int]
      }
      return result
    }
    def bit_len(x: BigInt): Int = {
      var n: BigInt = x
      var c: Int = 0
      while (n > 0) {
        n = (n / 2).asInstanceOf[BigInt]
        c = (c + 1).asInstanceOf[Int]
      }
      return c
    }
    var err: String = ""
    def ackermann2(m: BigInt, n: BigInt): BigInt = {
      if (err != "") {
        return BigInt(0)
      }
      if (m <= 3) {
        val mi = m.toString().toInt
        if (mi == 0) {
          return (n + 1).asInstanceOf[BigInt]
        }
        if (mi == 1) {
          return (n + 2).asInstanceOf[BigInt]
        }
        if (mi == 2) {
          return (2 * n + 3).asInstanceOf[BigInt]
        }
        if (mi == 3) {
          val nb: Int = bit_len(n)
          if (nb > 64) {
            err = "A(m,n) had n of " + String.valueOf(nb) + " bits; too large"
            return BigInt(0)
          }
          val r: BigInt = pow_big(BigInt(2), (n.toString().toInt).asInstanceOf[Int])
          return (8 * r - 3).asInstanceOf[BigInt]
        }
      }
      if (bit_len(n) == 0) {
        return ackermann2((m - BigInt(1)).asInstanceOf[BigInt], BigInt(1))
      }
      return ackermann2((m - BigInt(1)).asInstanceOf[BigInt], ackermann2(m, (n - BigInt(1)).asInstanceOf[BigInt]))
    }
    def show(m: Int, n: Int): Unit = {
      err = ""
      val res: BigInt = ackermann2(BigInt(m), BigInt(n))
      if (err != "") {
        println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = Error: " + err)
        return
      }
      if (bit_len(res) <= 256) {
        println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf(res))
      } else {
        val s = String.valueOf(res)
        val pre: String = s.substring(0, 20)
        val suf: String = s.substring((s).size - 20, (s).size)
        println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf((s).size) + " digits starting/ending with: " + pre + "..." + suf)
      }
    }
    def main(): Unit = {
      show(0, 0)
      show(1, 2)
      show(2, 4)
      show(3, 100)
      show(3, 1000000)
      show(4, 1)
      show(4, 2)
      show(4, 3)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
