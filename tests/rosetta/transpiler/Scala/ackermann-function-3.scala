// Generated by Mochi v0.10.39 on 2025-07-24 20:06:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def pow_big(base: BigInt, exp: Int): BigInt = {
    var result: BigInt = 1
    var b: BigInt = base
    var e: Int = exp
    while (e > 0) {
      if (e % 2 == 1) {
        result = (result * b).asInstanceOf[BigInt]
      }
      b = (b * b).asInstanceOf[BigInt]
      e = (e / 2).asInstanceOf[Int]
    }
    return result
  }
  
  def bit_len(x: BigInt): Int = {
    var n: BigInt = x
    var c: Int = 0
    while (n > 0) {
      n = (n / 2).asInstanceOf[BigInt]
      c = (c + 1).asInstanceOf[Int]
    }
    return c
  }
  
  def ackermann2(m: BigInt, n: BigInt): BigInt = {
    if (err != "") {
      return BigInt(0)
    }
    if (m <= 3) {
      val mi = m.toString().toInt
      if (mi == 0) {
        return (n + 1).asInstanceOf[BigInt]
      }
      if (mi == 1) {
        return (n + 2).asInstanceOf[BigInt]
      }
      if (mi == 2) {
        return (2 * n + 3).asInstanceOf[BigInt]
      }
      if (mi == 3) {
        val nb: Int = bit_len(n)
        if (nb > 64) {
          err = "A(m,n) had n of " + String.valueOf(nb) + " bits; too large"
          return BigInt(0)
        }
        val r: BigInt = pow_big(BigInt(2), n.toString().toInt)
        return (8 * r - 3).asInstanceOf[BigInt]
      }
    }
    if (bit_len(n) == 0) {
      return ackermann2(m - BigInt(1), BigInt(1))
    }
    return ackermann2(m - BigInt(1), ackermann2(m, n - BigInt(1)))
  }
  
  def show(m: Int, n: Int): Unit = {
    err = ""
    val res: BigInt = ackermann2(BigInt(m), BigInt(n))
    if (err != "") {
      println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = Error: " + err)
      return
    }
    if (bit_len(res) <= 256) {
      println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf(res))
    } else {
      val s = String.valueOf(res)
      val pre: String = s.substring(0, 20)
      val suf: String = s.substring((s).size - 20, (s).size)
      println("A(" + String.valueOf(m) + ", " + String.valueOf(n) + ") = " + String.valueOf((s).size) + " digits starting/ending with: " + pre + "..." + suf)
    }
  }
  
  def main() = {
    show(0, 0)
    show(1, 2)
    show(2, 4)
    show(3, 100)
    show(3, 1000000)
    show(4, 1)
    show(4, 2)
    show(4, 3)
  }
  
  var err: String = ""
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
