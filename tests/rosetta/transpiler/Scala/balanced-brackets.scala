// Generated by Mochi v0.10.40 on 2025-07-25 20:16:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def prng(max: Int): Int = {
    seed = (Math.floorMod(seed * 1103515245 + 12345, 2147483648L)).asInstanceOf[Int]
    return (Math.floorMod(seed, max)).asInstanceOf[Int]
  }
  
  def gen(n: Int): String = {
    var arr: ArrayBuffer[String] = ArrayBuffer()
    var i: Int = 0
    while (i < n) {
      arr = arr :+ "["
      arr = arr :+ "]"
      i = (i + 1).asInstanceOf[Int]
    }
    var j: Int = (arr).size - 1
    while (j > 0) {
      val k: Int = prng((j + 1).asInstanceOf[Int])
      val tmp: String = arr(j)
      arr(j) = arr(k)
      arr(k) = tmp
      j = (j - 1).asInstanceOf[Int]
    }
    var out: String = ""
    for (ch <- arr) {
      out = (out + ch).asInstanceOf[String]
    }
    return out
  }
  
  def testBalanced(s: String): Any = {
    var open: Int = 0
    var i: Int = 0
    while (i < (s).size) {
      val c: String = s.slice(i, i + 1)
      if (c == "[") {
        open = (open + 1).asInstanceOf[Int]
      } else {
        if (c == "]") {
          if (open == 0) {
            println(s + ": not ok")
            return
          }
          open = (open - 1).asInstanceOf[Int]
        } else {
          println(s + ": not ok")
          return
        }
      }
      i = (i + 1).asInstanceOf[Int]
    }
    if (open == 0) {
      println(s + ": ok")
    } else {
      println(s + ": not ok")
    }
  }
  
  def main(): Any = {
    var i: Int = 0
    while (i < 10) {
      testBalanced(gen(i))
      i = (i + 1).asInstanceOf[Int]
    }
    testBalanced("()")
  }
  
  var seed: Int = 1
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
