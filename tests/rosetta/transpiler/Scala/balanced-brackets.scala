// Generated by Mochi v0.10.40 on 2025-07-26 00:03:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var seed: Int = 1
    def prng(max: Int): Int = {
      seed = (Math.floorMod(seed * 1103515245 + 12345, 2147483648L)).asInstanceOf[Int]
      return (Math.floorMod(seed, max)).asInstanceOf[Int]
    }
    def gen(n: Int): String = {
      var arr: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < n) {
        arr = arr :+ "["
        arr = arr :+ "]"
        i = (i + 1).asInstanceOf[Int]
      }
      var j: Int = (arr).size - 1
      while (j > 0) {
        val k: Int = prng((j + 1).asInstanceOf[Int])
        val tmp: String = arr(j)
        arr(j) = arr(k)
        arr(k) = tmp
        j = (j - 1).asInstanceOf[Int]
      }
      var out: String = ""
      for (ch <- arr) {
        out = (out + ch).toString
      }
      return out
    }
    def testBalanced(s: String): Any = {
      var open: Int = 0
      var i: Int = 0
      while (i < (s).size) {
        val c: String = s.slice(i, i + 1)
        if (c == "[") {
          open = (open + 1).asInstanceOf[Int]
        } else {
          if (c == "]") {
            if (open == 0) {
              println(s + ": not ok")
              return
            }
            open = (open - 1).asInstanceOf[Int]
          } else {
            println(s + ": not ok")
            return
          }
        }
        i = (i + 1).asInstanceOf[Int]
      }
      if (open == 0) {
        println(s + ": ok")
      } else {
        println(s + ": not ok")
      }
    }
    def main(): Any = {
      var i: Int = 0
      while (i < 10) {
        testBalanced(gen(i))
        i = (i + 1).asInstanceOf[Int]
      }
      testBalanced("()")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
