// Generated by Mochi v0.10.40 on 2025-07-25 12:53:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  sealed trait Beast
  case class Dog(var kind: String, var name: String) extends Beast
  case class Cat(var kind: String, var name: String) extends Beast
  
  
  def beastKind(b: Beast): String = {
    return (b match { case Dog(k, _) => k case Cat(k, _) => k }).asInstanceOf[String]
  }
  
  def beastName(b: Beast): String = {
    return (b match { case Dog(_, n) => n case Cat(_, n) => n }).asInstanceOf[String]
  }
  
  def beastCry(b: Beast): String = {
    return (b match { case Dog(_, _) => "Woof" case Cat(_, _) => "Meow" }).asInstanceOf[String]
  }
  
  def bprint(b: Beast): Unit = {
    println(beastName(b) + ", who's a " + beastKind(b) + ", cries: \"" + beastCry(b) + "\".")
  }
  
  def main(): Unit = {
    val d: Beast = Dog("labrador", "Max")
    val c: Beast = Cat("siamese", "Sammy")
    bprint(d)
    bprint(c)
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
