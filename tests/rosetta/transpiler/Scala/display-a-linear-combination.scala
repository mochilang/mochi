// Generated by Mochi v0.10.52 on 2025-08-01 19:07:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def padRight(s: String, w: BigInt): String = {
      var r: String = s
      while ((r).size < w) {
        r = r + " "
      }
      return r
    }
    def linearCombo(c: ArrayBuffer[BigInt]): String = {
      var out: String = ""
      var i: BigInt = BigInt(0)
      while (i < (c).size) {
        val n: BigInt = c((i).toInt)
        if (n != BigInt(0)) {
          var op: String = ""
          if ((n < BigInt(0) && (out).size == BigInt(0)).asInstanceOf[Boolean]) {
            op = "-"
          } else {
            if (n < BigInt(0)) {
              op = " - "
            } else {
              if ((n > BigInt(0) && (out).size == BigInt(0)).asInstanceOf[Boolean]) {
                op = ""
              } else {
                op = " + "
              }
            }
          }
          var av: BigInt = n
          if (av < BigInt(0)) {
            av = BigInt(0) - av
          }
          var coeff: String = String.valueOf(av) + "*"
          if (av == BigInt(1)) {
            coeff = ""
          }
          out = out + op + coeff + "e(" + String.valueOf(i + BigInt(1)) + ")"
        }
        i = i + BigInt(1)
      }
      if ((out).size == BigInt(0)) {
        return "0"
      }
      return out
    }
    def main(): Any = {
      val combos: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0)), ArrayBuffer(BigInt(1), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0) - BigInt(1), BigInt(0) - BigInt(1), BigInt(0) - BigInt(1)), ArrayBuffer(BigInt(0) - BigInt(1), BigInt(0) - BigInt(2), BigInt(0), BigInt(0) - BigInt(3)), ArrayBuffer(BigInt(0) - BigInt(1)))
      var idx: BigInt = BigInt(0)
      while (idx < (combos).size) {
        val c: ArrayBuffer[BigInt] = combos((idx).toInt)
        var t: String = "["
        var j: BigInt = BigInt(0)
        while (j < (c).size) {
          t = t + String.valueOf(c((j).toInt))
          if (j < (c).size - BigInt(1).toInt) {
            t = t + ", "
          }
          j = j + BigInt(1)
        }
        t = t + "]"
        val lc: String = linearCombo(c)
        println(padRight(t, BigInt(15)) + "  ->  " + lc)
        idx = idx + BigInt(1)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
