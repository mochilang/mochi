// Generated by Mochi v0.10.57 on 2025-08-05 00:39:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def padRight(s: String, w: BigInt): String = {
  var r: String = s
  while (BigInt((r).size) < w) {
    r = r + " "
  }
  return r
}

def linearCombo(c: ArrayBuffer[BigInt]): String = {
  var out: String = ""
  var i: BigInt = 0
  while (i < BigInt((c).size)) {
    val n: BigInt = c((i.toInt).toInt)
    if (n != 0) {
      var op: String = ""
      if ((n < 0 && BigInt((out).size) == 0).asInstanceOf[Boolean]) {
        op = "-"
      } else {
        if (n < 0) {
          op = " - "
        } else {
          if ((n > 0 && BigInt((out).size) == 0).asInstanceOf[Boolean]) {
            op = ""
          } else {
            op = " + "
          }
        }
      }
      var av: BigInt = n
      if (av < 0) {
        av = 0 - av
      }
      var coeff: String = String.valueOf(av) + "*"
      if (av == 1) {
        coeff = ""
      }
      out = out + op + coeff + "e(" + String.valueOf(i + 1) + ")"
    }
    i = i + 1
  }
  if (BigInt((out).size) == 0) {
    return "0"
  }
  return out
}

def main(): Any = {
  val combos: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2, 3), ArrayBuffer(0, 1, 2, 3), ArrayBuffer(1, 0, 3, 4), ArrayBuffer(1, 2, 0), ArrayBuffer(0, 0, 0), ArrayBuffer(0), ArrayBuffer(1, 1, 1), ArrayBuffer(0 - 1, 0 - 1, 0 - 1), ArrayBuffer(0 - 1, 0 - 2, 0, 0 - 3), ArrayBuffer(0 - 1))
  var idx: BigInt = 0
  while (idx < BigInt((combos).size)) {
    val c: ArrayBuffer[BigInt] = combos((idx.toInt).toInt)
    var t: String = "["
    var j: BigInt = 0
    while (j < BigInt((c).size)) {
      t = t + String.valueOf(c((j.toInt).toInt))
      if (j < BigInt((c).size) - 1) {
        t = t + ", "
      }
      j = j + 1
    }
    t = t + "]"
    val lc: String = linearCombo(c)
    println(padRight(t, 15) + "  ->  " + lc)
    idx = idx + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
