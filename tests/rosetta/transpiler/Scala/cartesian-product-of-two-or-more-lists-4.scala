// Generated by Mochi v0.10.40 on 2025-07-26 09:47:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def listStr(xs: ArrayBuffer[BigInt]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        s = (s + String.valueOf(xs((i).toInt))).toString
        if (i < (xs).size - BigInt(1)) {
          s = s + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      s = s + "]"
      return s
    }
    def llStr(lst: ArrayBuffer[ArrayBuffer[BigInt]]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (lst).size) {
        s = (s + listStr(lst((i).toInt))).toString
        if (i < (lst).size - BigInt(1)) {
          s = s + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      s = s + "]"
      return s
    }
    def copy(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
      var out: ArrayBuffer[BigInt] = ArrayBuffer()
      for (v <- xs) {
        out = out :+ v.asInstanceOf[BigInt]
      }
      return out
    }
    def cartN(lists: Any): ArrayBuffer[ArrayBuffer[BigInt]] = {
      if (lists == null) {
        return (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
      }
      val a: ArrayBuffer[ArrayBuffer[BigInt]] = lists.asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
      if ((a).size == BigInt(0)) {
        return (ArrayBuffer(ArrayBuffer())).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
      }
      var out: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
      val last: Int = (a).size - BigInt(1)
      val left: ArrayBuffer[ArrayBuffer[BigInt]] = cartN(a.slice((BigInt(0)).toInt, (last).toInt))
      for (p <- left) {
        for (x <- a((last).toInt)) {
          var row: ArrayBuffer[BigInt] = copy(p.asInstanceOf[ArrayBuffer[BigInt]])
          row = row :+ x.asInstanceOf[BigInt]
          out = out :+ row
        }
      }
      return out
    }
    def main(): Any = {
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(4))))))
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(BigInt(3), BigInt(4)), ArrayBuffer(BigInt(1), BigInt(2))))))
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer()))))
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(), ArrayBuffer(BigInt(1), BigInt(2))))))
      println("")
      println("[")
      for (p <- cartN(ArrayBuffer(ArrayBuffer(BigInt(1776), BigInt(1789)), ArrayBuffer(BigInt(7), BigInt(12)), ArrayBuffer(BigInt(4), BigInt(14), BigInt(23)), ArrayBuffer(BigInt(0), BigInt(1))))) {
        println(" " + listStr(p.asInstanceOf[ArrayBuffer[BigInt]]))
      }
      println("]")
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(30)), ArrayBuffer(BigInt(500), BigInt(100))))))
      println(llStr(cartN(ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(), ArrayBuffer(BigInt(500), BigInt(100))))))
      println("")
      println(llStr(cartN(null)))
      println(llStr(cartN(ArrayBuffer())))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
