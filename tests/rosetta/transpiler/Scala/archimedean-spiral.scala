// Generated by Mochi v0.10.40 on 2025-07-25 21:07:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val PI: Double = 3.141592653589793
    def sinApprox(x: Double): Double = {
      var term: Double = x
      var sum: Double = x
      var n: Int = 1
      while (n <= 10) {
        val denom: Double = ((2 * n).toString.toDouble * (2 * n + 1).toString.toDouble).toString.toDouble
        term = ((0 - term) * x * x / denom).toString.toDouble
        sum = (sum + term).toString.toDouble
        n = (n + 1).asInstanceOf[Int]
      }
      return sum
    }
    def cosApprox(x: Double): Double = {
      var term: Double = 1.0
      var sum: Double = 1.0
      var n: Int = 1
      while (n <= 10) {
        val denom: Double = ((2 * n - 1).toString.toDouble * (2 * n).toString.toDouble).toString.toDouble
        term = ((0 - term) * x * x / denom).toString.toDouble
        sum = (sum + term).toString.toDouble
        n = (n + 1).asInstanceOf[Int]
      }
      return sum
    }
    val degreesIncr: Double = 0.1 * PI / 180.0
    val turns: Double = 2.0
    val stop: Double = 360.0 * turns * 10.0 * degreesIncr
    val width: Double = 600.0
    val centre: Double = width / 2.0
    val a: Double = 1.0
    val b: Double = 20.0
    var theta: Double = 0.0
    var count: Int = 0
    while (theta < stop) {
      val r = a + b * theta
      val x = r * cosApprox(theta)
      val y = r * sinApprox(theta)
      if (Math.floorMod(count, 100) == 0) {
        println(String.valueOf(centre + x) + "," + String.valueOf(centre - y))
      }
      theta = (theta + degreesIncr).toString.toDouble
      count = (count + 1).asInstanceOf[Int]
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
