// Generated by Mochi v0.10.40 on 2025-07-26 04:50:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def sameDigits(_n: Int, b: Int): Boolean = {
      var n: Int = _n
      var f = Math.floorMod(n, b)
      n = (n / b).asInstanceOf[Int]
      while (n > 0) {
        if (Math.floorMod(n, b) != f) {
          return false
        }
        n = (n / b).asInstanceOf[Int]
      }
      return true
    }
    def isBrazilian(n: Int): Boolean = {
      if (n < 7) {
        return false
      }
      if ((Math.floorMod(n, 2) == 0 && n >= 8).asInstanceOf[Boolean]) {
        return true
      }
      var b: Int = 2
      while (b < (n - 1).asInstanceOf[Int]) {
        if (sameDigits(n, b)) {
          return true
        }
        b = (b + 1).asInstanceOf[Int]
      }
      return false
    }
    def isPrime(n: Int): Boolean = {
      if (n < 2) {
        return false
      }
      if (Math.floorMod(n, 2) == 0) {
        return n == 2
      }
      if (Math.floorMod(n, 3) == 0) {
        return n == 3
      }
      var d: Int = 5
      while ((d * d).asInstanceOf[Int] <= n) {
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 2).asInstanceOf[Int]
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 4).asInstanceOf[Int]
      }
      return true
    }
    def main(): Any = {
      var kinds: ArrayBuffer[String] = ArrayBuffer(" ", " odd ", " prime ")
      val _br3 = new Breaks
      _br3.breakable {
        for (kind <- kinds) {
          println("First 20" + kind + "Brazilian numbers:")
          var c: Int = 0
          var n: Int = 7
          val _br4 = new Breaks
          _br4.breakable {
            while (true) {
              if (isBrazilian(n)) {
                println(String.valueOf(n) + " ")
                c = (c + 1).asInstanceOf[Int]
                if (c == 20) {
                  println("\n")
                  _br4.break()
                }
              }
              if (kind == " ") {
                n = (n + 1).asInstanceOf[Int]
              } else {
                if (kind == " odd ") {
                  n = (n + 2).asInstanceOf[Int]
                } else {
                  val _br5 = new Breaks
                  _br5.breakable {
                    while (true) {
                      n = (n + 2).asInstanceOf[Int]
                      if (isPrime(n)) {
                        _br5.break()
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      var n: Int = 7
      var c: Int = 0
      while (c < 100000) {
        if (isBrazilian(n)) {
          c = (c + 1).asInstanceOf[Int]
        }
        n = (n + 1).asInstanceOf[Int]
      }
      println("The 100,000th Brazilian number: " + String.valueOf(n - 1))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
