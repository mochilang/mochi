// Generated by Mochi v0.10.42 on 2025-07-28 00:31:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

class BigRat(var num: BigInt, var den: BigInt) {
  def +(o: BigRat) = BigRat(num * o.den + o.num * den, den * o.den)
  def -(o: BigRat) = BigRat(num * o.den - o.num * den, den * o.den)
  def *(o: BigRat) = BigRat(num * o.num, den * o.den)
  def /(o: BigRat) = BigRat(num * o.den, den * o.num)
  override def toString(): String = s"${num}/${den}"
}
object BigRat {
  def apply(n: BigInt, d: BigInt = BigInt(1)): BigRat = {
    val g = n.gcd(d); var nn = n / g; var dd = d / g; if (dd < 0) { nn = -nn; dd = -dd }
    new BigRat(nn, dd)
  }
}
def _bigrat(n: BigInt, d: BigInt = BigInt(1)) = BigRat(n, d)
def _bigrat(r: BigRat): BigRat = r
def num(r: BigRat): BigInt = r.num
def denom(r: BigRat): BigInt = r.den

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def br(n: BigInt, d: BigInt): BigRat = {
      return (_bigrat(n) / _bigrat(d)).asInstanceOf[BigRat]
    }
    var testCases = ArrayBuffer(ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(2))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(3)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(2)), "n" -> (BigInt(1)), "d" -> (BigInt(3))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(7)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(4)), "n" -> (BigInt(1)), "d" -> (BigInt(5))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(239)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(5)), "n" -> (BigInt(1)), "d" -> (BigInt(7))), scala.collection.mutable.Map("a" -> (BigInt(2)), "n" -> (BigInt(3)), "d" -> (BigInt(79)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(2))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(5))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(8)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(4)), "n" -> (BigInt(1)), "d" -> (BigInt(5))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(70))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(99)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(5)), "n" -> (BigInt(1)), "d" -> (BigInt(7))), scala.collection.mutable.Map("a" -> (BigInt(4)), "n" -> (BigInt(1)), "d" -> (BigInt(53))), scala.collection.mutable.Map("a" -> (BigInt(2)), "n" -> (BigInt(1)), "d" -> (BigInt(4443)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(6)), "n" -> (BigInt(1)), "d" -> (BigInt(8))), scala.collection.mutable.Map("a" -> (BigInt(2)), "n" -> (BigInt(1)), "d" -> (BigInt(57))), scala.collection.mutable.Map("a" -> (BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(239)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(8)), "n" -> (BigInt(1)), "d" -> (BigInt(10))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(1)), "n" -> (BigInt(1)), "d" -> (BigInt(239))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(4)), "n" -> (BigInt(1)), "d" -> (BigInt(515)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(12)), "n" -> (BigInt(1)), "d" -> (BigInt(18))), scala.collection.mutable.Map("a" -> (BigInt(8)), "n" -> (BigInt(1)), "d" -> (BigInt(57))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(5)), "n" -> (BigInt(1)), "d" -> (BigInt(239)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(16)), "n" -> (BigInt(1)), "d" -> (BigInt(21))), scala.collection.mutable.Map("a" -> (BigInt(3)), "n" -> (BigInt(1)), "d" -> (BigInt(239))), scala.collection.mutable.Map("a" -> (BigInt(4)), "n" -> (BigInt(3)), "d" -> (BigInt(1042)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(22)), "n" -> (BigInt(1)), "d" -> (BigInt(28))), scala.collection.mutable.Map("a" -> (BigInt(2)), "n" -> (BigInt(1)), "d" -> (BigInt(443))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(5)), "n" -> (BigInt(1)), "d" -> (BigInt(1393))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(10)), "n" -> (BigInt(1)), "d" -> (BigInt(11018)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(22)), "n" -> (BigInt(1)), "d" -> (BigInt(38))), scala.collection.mutable.Map("a" -> (BigInt(17)), "n" -> (BigInt(7)), "d" -> (BigInt(601))), scala.collection.mutable.Map("a" -> (BigInt(10)), "n" -> (BigInt(7)), "d" -> (BigInt(8149)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(44)), "n" -> (BigInt(1)), "d" -> (BigInt(57))), scala.collection.mutable.Map("a" -> (BigInt(7)), "n" -> (BigInt(1)), "d" -> (BigInt(239))), scala.collection.mutable.Map("a" -> (BigInt(0) - BigInt(12)), "n" -> (BigInt(1)), "d" -> (BigInt(682))), scala.collection.mutable.Map("a" -> (BigInt(24)), "n" -> (BigInt(1)), "d" -> (BigInt(12943)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(88)), "n" -> (BigInt(1)), "d" -> (BigInt(172))), scala.collection.mutable.Map("a" -> (BigInt(51)), "n" -> (BigInt(1)), "d" -> (BigInt(239))), scala.collection.mutable.Map("a" -> (BigInt(32)), "n" -> (BigInt(1)), "d" -> (BigInt(682))), scala.collection.mutable.Map("a" -> (BigInt(44)), "n" -> (BigInt(1)), "d" -> (BigInt(5357))), scala.collection.mutable.Map("a" -> (BigInt(68)), "n" -> (BigInt(1)), "d" -> (BigInt(12943)))), ArrayBuffer(scala.collection.mutable.Map("a" -> (BigInt(88)), "n" -> (BigInt(1)), "d" -> (BigInt(172))), scala.collection.mutable.Map("a" -> (BigInt(51)), "n" -> (BigInt(1)), "d" -> (BigInt(239))), scala.collection.mutable.Map("a" -> (BigInt(32)), "n" -> (BigInt(1)), "d" -> (BigInt(682))), scala.collection.mutable.Map("a" -> (BigInt(44)), "n" -> (BigInt(1)), "d" -> (BigInt(5357))), scala.collection.mutable.Map("a" -> (BigInt(68)), "n" -> (BigInt(1)), "d" -> (BigInt(12944)))))
    def format(ts: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (ts).size) {
        val t: scala.collection.mutable.Map[String,BigInt] = ts((i).toInt)
        s = s + "{" + String.valueOf(t.getOrElse("a", null.asInstanceOf[BigInt])) + " " + String.valueOf(t.getOrElse("n", null.asInstanceOf[BigInt])) + " " + String.valueOf(t.getOrElse("d", null.asInstanceOf[BigInt])) + "}"
        if (i < (ts).size - BigInt(1)) {
          s = s + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return s + "]"
    }
    def tanEval(coef: BigInt, f: BigRat): BigRat = {
      if (coef == BigInt(1)) {
        return f
      }
      if (coef < BigInt(0)) {
        return (_bigrat(BigInt(0)) - _bigrat(tanEval((BigInt(0) - coef).asInstanceOf[BigInt], f))).asInstanceOf[BigRat]
      }
      val ca = coef / BigInt(2)
      val cb = coef - ca
      val a: BigRat = tanEval(ca, f)
      val b: BigRat = tanEval(cb, f)
      return (_bigrat(a + b) / _bigrat(_bigrat(BigInt(1)) - a * b)).asInstanceOf[BigRat]
    }
    def tans(m: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]): BigRat = {
      if ((m).size == BigInt(1)) {
        val t: scala.collection.mutable.Map[String,BigInt] = m((BigInt(0)).toInt)
        return tanEval(t.getOrElse("a", null.asInstanceOf[BigInt]), br(t.getOrElse("n", null.asInstanceOf[BigInt]), t.getOrElse("d", null.asInstanceOf[BigInt])))
      }
      val half: BigInt = (m).size / BigInt(2)
      val a: BigRat = tans(m.slice((BigInt(0)).toInt, (half).toInt))
      val b: BigRat = tans(m.slice((half).toInt, ((m).size).toInt))
      return (_bigrat(a + b) / _bigrat(_bigrat(BigInt(1)) - a * b)).asInstanceOf[BigRat]
    }
    for (ts <- testCases) {
      println("tan " + format(ts.asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]]) + " = " + String.valueOf(tans(ts.asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]])))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
