// Generated by Mochi v0.10.42 on 2025-07-27 17:27:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def newTerm(a: BigInt, b: BigInt): scala.collection.mutable.Map[String,BigInt] = {
      return (scala.collection.mutable.Map("a" -> (a), "b" -> (b))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
    }
    def cfSqrt2(nTerms: BigInt): ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = {
      var f: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = ArrayBuffer()
      var n: BigInt = BigInt(0)
      while (n < nTerms) {
        f = f :+ newTerm(BigInt(2), BigInt(1))
        n = (n + BigInt(1)).asInstanceOf[BigInt]
      }
      if (nTerms > BigInt(0)) {
        f((BigInt(0)).toInt).update("a", BigInt(1))
      }
      return f
    }
    def cfNap(nTerms: BigInt): ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = {
      var f: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = ArrayBuffer()
      var n: BigInt = BigInt(0)
      while (n < nTerms) {
        f = f :+ newTerm(n, (n - BigInt(1)).asInstanceOf[BigInt])
        n = (n + BigInt(1)).asInstanceOf[BigInt]
      }
      if (nTerms > BigInt(0)) {
        f((BigInt(0)).toInt).update("a", BigInt(2))
      }
      if (nTerms > BigInt(1)) {
        f((BigInt(1)).toInt).update("b", BigInt(1))
      }
      return f
    }
    def cfPi(nTerms: BigInt): ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = {
      var f: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = ArrayBuffer()
      var n: BigInt = BigInt(0)
      while (n < nTerms) {
        val g = BigInt(2) * n - BigInt(1)
        f = f :+ newTerm(BigInt(6), (g * g).asInstanceOf[BigInt])
        n = (n + BigInt(1)).asInstanceOf[BigInt]
      }
      if (nTerms > BigInt(0)) {
        f((BigInt(0)).toInt).update("a", BigInt(3))
      }
      return f
    }
    def real(f: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]]): Double = {
      var r: Double = 0.0
      var i: BigInt = (f).size - BigInt(1)
      while (i > BigInt(0)) {
        r = (f((i).toInt).getOrElse("b", null.asInstanceOf[BigInt])).toString.toDouble / ((f((i).toInt).getOrElse("a", null.asInstanceOf[BigInt])).toString.toDouble + r)
        i = (i - BigInt(1)).asInstanceOf[BigInt]
      }
      if ((f).size > BigInt(0)) {
        r = r + (f((BigInt(0)).toInt).getOrElse("a", null.asInstanceOf[BigInt])).toString.toDouble
      }
      return r
    }
    def main(): Any = {
      println("sqrt2: " + String.valueOf(real(cfSqrt2(BigInt(20)))))
      println("nap:   " + String.valueOf(real(cfNap(BigInt(20)))))
      println("pi:    " + String.valueOf(real(cfPi(BigInt(20)))))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
