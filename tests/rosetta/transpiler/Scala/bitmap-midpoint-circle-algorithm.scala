// Generated by Mochi v0.10.40 on 2025-07-26 04:50:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def initGrid(size: Int): ArrayBuffer[ArrayBuffer[String]] = {
      var g: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
      var y: Int = 0
      while (y < size) {
        var row: ArrayBuffer[String] = ArrayBuffer()
        var x: Int = 0
        while (x < size) {
          row = row :+ " "
          x = (x + 1).asInstanceOf[Int]
        }
        g = g :+ row
        y = (y + 1).asInstanceOf[Int]
      }
      return g
    }
    def set(g: ArrayBuffer[ArrayBuffer[String]], x: Int, y: Int): Any = {
      if ((((x >= 0 && x < (g(0)).size).asInstanceOf[Boolean] && y >= 0).asInstanceOf[Boolean] && y < (g).size).asInstanceOf[Boolean]) {
        g(y)(x) = "#"
      }
    }
    def circle(r: Int): ArrayBuffer[ArrayBuffer[String]] = {
      val size = r * 2 + 1
      var g: ArrayBuffer[ArrayBuffer[String]] = initGrid(size)
      var x: Int = r
      var y: Int = 0
      var err = 1 - r
      while (y <= x) {
        set(g, (r + x).asInstanceOf[Int], (r + y).asInstanceOf[Int])
        set(g, (r + y).asInstanceOf[Int], (r + x).asInstanceOf[Int])
        set(g, (r - x).asInstanceOf[Int], (r + y).asInstanceOf[Int])
        set(g, (r - y).asInstanceOf[Int], (r + x).asInstanceOf[Int])
        set(g, (r - x).asInstanceOf[Int], (r - y).asInstanceOf[Int])
        set(g, (r - y).asInstanceOf[Int], (r - x).asInstanceOf[Int])
        set(g, (r + x).asInstanceOf[Int], (r - y).asInstanceOf[Int])
        set(g, (r + y).asInstanceOf[Int], (r - x).asInstanceOf[Int])
        y = (y + 1).asInstanceOf[Int]
        if (err < 0) {
          err = (err + 2 * y + 1).asInstanceOf[Int]
        } else {
          x = (x - 1).asInstanceOf[Int]
          err = (err + 2 * (y - x) + 1).asInstanceOf[Int]
        }
      }
      return g
    }
    def trimRight(row: ArrayBuffer[String]): String = {
      var end: Int = (row).size
      while (end > 0 && row(end - 1) == " ") {
        end = (end - 1).asInstanceOf[Int]
      }
      var s: String = ""
      var i: Int = 0
      while (i < end) {
        s = (s + row(i)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return s
    }
    var g: ArrayBuffer[ArrayBuffer[String]] = circle(10)
    for (row <- g) {
      println(trimRight(row.asInstanceOf[ArrayBuffer[String]]))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
