// Generated by Mochi v0.10.52 on 2025-08-01 19:07:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def parseIntStr(str: String): BigInt = {
      var i: BigInt = BigInt(0)
      var neg: Boolean = false
      if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        i = BigInt(1)
      }
      var n: BigInt = BigInt(0)
      val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
      while (i < (str).size) {
        n = n * BigInt(10) + digits(str.slice((i).toInt, (i + BigInt(1)).toInt))
        i = i + BigInt(1)
      }
      if (neg) {
        n = BigInt(0) - n
      }
      return n
    }
    val days: ArrayBuffer[String] = ArrayBuffer("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
    def anchorDay(y: BigInt): BigInt = {
      return (BigInt(2) + BigInt(5) * (y % BigInt(4)) + BigInt(4) * (y % BigInt(100)) + BigInt(6) * (y % BigInt(400))) % BigInt(7)
    }
    def isLeapYear(y: BigInt): Boolean = {
      return (y % BigInt(4) == BigInt(0) && (y % BigInt(100) != BigInt(0) || y % BigInt(400) == BigInt(0)).asInstanceOf[Boolean]).asInstanceOf[Boolean]
    }
    val firstDaysCommon: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(7), BigInt(7), BigInt(4), BigInt(2), BigInt(6), BigInt(4), BigInt(1), BigInt(5), BigInt(3), BigInt(7), BigInt(5))
    val firstDaysLeap: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(1), BigInt(7), BigInt(4), BigInt(2), BigInt(6), BigInt(4), BigInt(1), BigInt(5), BigInt(3), BigInt(7), BigInt(5))
    def main(): Any = {
      val dates: ArrayBuffer[String] = ArrayBuffer("1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02")
      println("Days of week given by Doomsday rule:")
      for (date <- dates) {
        val y = _parseIntStr(date.slice((BigInt(0)).toInt, (BigInt(4)).toInt), BigInt(10))
        val m: BigInt = _parseIntStr(date.slice((BigInt(5)).toInt, (BigInt(7)).toInt), BigInt(10)) - BigInt(1)
        val d = _parseIntStr(date.slice((BigInt(8)).toInt, (BigInt(10)).toInt), BigInt(10))
        val a: BigInt = anchorDay(y)
        var f: BigInt = firstDaysCommon((m).toInt)
        if (isLeapYear(y)) {
          f = firstDaysLeap((m).toInt)
        }
        var w: BigInt = d - f
        if (w < BigInt(0)) {
          w = BigInt(7) + w
        }
        val dow: BigInt = (a + w) % BigInt(7)
        println(date + " -> " + days((dow).toInt))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
