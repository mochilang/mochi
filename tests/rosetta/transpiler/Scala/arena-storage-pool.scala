// Generated by Mochi v0.10.40 on 2025-07-25 21:07:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def poolPut(p: ArrayBuffer[Int], x: Int): ArrayBuffer[Int] = {
      return (p :+ x).asInstanceOf[ArrayBuffer[Int]]
    }
    def poolGet(_p: ArrayBuffer[Int]): Map[String,Any] = {
      var p: ArrayBuffer[Int] = _p
      if ((p).size == 0) {
        println("pool empty")
        return Map("pool" -> (p), "val" -> (0))
      }
      val idx: Int = (p).size - 1
      val v: Int = p(idx)
      p = p.slice(0, idx)
      return Map("pool" -> (p), "val" -> (v))
    }
    def clearPool(p: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      return (ArrayBuffer()).asInstanceOf[ArrayBuffer[Int]]
    }
    def main(): Any = {
      var pool: ArrayBuffer[Int] = ArrayBuffer()
      var i: Int = 1
      var j: Int = 2
      println(String.valueOf(i + j))
      pool = poolPut(pool, i)
      pool = poolPut(pool, j)
      i = 0
      j = 0
      val res1: Map[String,Any] = poolGet(pool)
      pool = (res1.getOrElse("pool", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]
      i = (res1.getOrElse("val", null.asInstanceOf[Any])).asInstanceOf[Int]
      val res2: Map[String,Any] = poolGet(pool)
      pool = (res2.getOrElse("pool", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]
      j = (res2.getOrElse("val", null.asInstanceOf[Any])).asInstanceOf[Int]
      i = 4
      j = 5
      println(String.valueOf(i + j))
      pool = poolPut(pool, i)
      pool = poolPut(pool, j)
      i = 0
      j = 0
      pool = clearPool(pool)
      val res3: Map[String,Any] = poolGet(pool)
      pool = (res3.getOrElse("pool", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]
      i = (res3.getOrElse("val", null.asInstanceOf[Any])).asInstanceOf[Int]
      val res4: Map[String,Any] = poolGet(pool)
      pool = (res4.getOrElse("pool", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]
      j = (res4.getOrElse("val", null.asInstanceOf[Any])).asInstanceOf[Int]
      i = 7
      j = 8
      println(String.valueOf(i + j))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
