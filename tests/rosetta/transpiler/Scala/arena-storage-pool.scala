// Generated by Mochi v0.10.39 on 2025-07-25 00:49:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def poolPut(p: ArrayBuffer[Int], x: Int): ArrayBuffer[Int] = {
    return (p :+ x).asInstanceOf[ArrayBuffer[Int]]
  }
  
  def poolGet(_p: ArrayBuffer[Int]): Map[String,Any] = {
    var p: ArrayBuffer[Int] = _p
    if ((p).size == 0) {
      println("pool empty")
      return Map("pool" -> (p), "val" -> (0))
    }
    val idx: Int = (p).size - 1
    val v: Int = p(idx)
    p = (p.slice(0, idx)).asInstanceOf[ArrayBuffer[Int]]
    return Map("pool" -> (p), "val" -> (v))
  }
  
  def clearPool(p: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    return (ArrayBuffer()).asInstanceOf[ArrayBuffer[Int]]
  }
  
  def main() = {
    var pool: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 1
    var j: Int = 2
    println(String.valueOf(i + j))
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    val res1: Map[String,Any] = poolGet(pool)
    pool = (res1("pool")).asInstanceOf[ArrayBuffer[Int]]
    i = (res1("val")).asInstanceOf[Int]
    val res2: Map[String,Any] = poolGet(pool)
    pool = (res2("pool")).asInstanceOf[ArrayBuffer[Int]]
    j = (res2("val")).asInstanceOf[Int]
    i = 4
    j = 5
    println(String.valueOf(i + j))
    pool = poolPut(pool, i)
    pool = poolPut(pool, j)
    i = 0
    j = 0
    pool = clearPool(pool)
    val res3: Map[String,Any] = poolGet(pool)
    pool = (res3("pool")).asInstanceOf[ArrayBuffer[Int]]
    i = (res3("val")).asInstanceOf[Int]
    val res4: Map[String,Any] = poolGet(pool)
    pool = (res4("pool")).asInstanceOf[ArrayBuffer[Int]]
    j = (res4("val")).asInstanceOf[Int]
    i = 7
    j = 8
    println(String.valueOf(i + j))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
