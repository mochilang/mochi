// Generated by Mochi v0.10.40 on 2025-07-25 20:38:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def nextRand(seed: Int): Int = {
      return (Math.floorMod(seed * 1664525 + 1013904223, 2147483647)).asInstanceOf[Int]
    }
    def shuffleChars(s: String, seed: Int): ArrayBuffer[Any] = {
      var chars: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < (s).size) {
        chars = chars :+ s.substring(i, i + 1)
        i = (i + 1).asInstanceOf[Int]
      }
      var sd: Int = seed
      var idx: Int = (chars).size - 1
      while (idx > 0) {
        sd = nextRand(sd)
        var j = Math.floorMod(sd, idx + 1)
        val tmp: String = chars(idx)
        chars(idx) = chars(j)
        chars(j) = tmp
        idx = (idx - 1).asInstanceOf[Int]
      }
      var res: String = ""
      i = 0
      while (i < (chars).size) {
        res = (res + chars(i)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return ArrayBuffer(res, sd)
    }
    def bestShuffle(s: String, seed: Int): ArrayBuffer[Any] = {
      val r: ArrayBuffer[Any] = shuffleChars(s, seed)
      var t = r(0)
      var sd = r(1)
      var arr: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < (t).size) {
        arr = arr :+ t.substring(i, i + 1)
        i = (i + 1).asInstanceOf[Int]
      }
      i = 0
      val _br4 = new Breaks
      _br4.breakable {
        while (i < (arr).size) {
          var j: Int = 0
          val _br5 = new Breaks
          _br5.breakable {
            while (j < (arr).size) {
              if (((i != j && arr(i) != s.substring(j, j + 1)).asInstanceOf[Boolean] && arr(j) != s.substring(i, i + 1)).asInstanceOf[Boolean]) {
                val tmp: String = arr(i)
                arr(i) = arr(j)
                arr(j) = tmp
                _br5.break()
              }
              j = (j + 1).asInstanceOf[Int]
            }
          }
          i = (i + 1).asInstanceOf[Int]
        }
      }
      var count: Int = 0
      i = 0
      while (i < (arr).size) {
        if (arr(i) == s.substring(i, i + 1)) {
          count = (count + 1).asInstanceOf[Int]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      var out: String = ""
      i = 0
      while (i < (arr).size) {
        out = (out + arr(i)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return ArrayBuffer(out, sd, count)
    }
    def main(): Any = {
      val ts: ArrayBuffer[String] = ArrayBuffer("abracadabra", "seesaw", "elk", "grrrrrr", "up", "a")
      var seed: Int = 1
      var i: Int = 0
      while (i < (ts).size) {
        val r: ArrayBuffer[Any] = bestShuffle(ts(i), seed)
        val shuf = r(0)
        seed = (r(1)).asInstanceOf[Int]
        val cnt = r(2)
        println(ts(i) + " -> " + shuf.toString + " (" + String.valueOf(cnt) + ")")
        i = (i + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
