// Generated by Mochi v0.10.40 on 2025-07-26 04:52:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val w: Int = 400
    val h: Int = 300
    val n: Int = 15000
    val frost: Int = 255
    var grid: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer()
    var y: Int = 0
    while (y < h) {
      var row: ArrayBuffer[Int] = ArrayBuffer()
      var x: Int = 0
      while (x < w) {
        row = row :+ 0
        x = (x + 1).asInstanceOf[Int]
      }
      grid = grid :+ row
      y = (y + 1).asInstanceOf[Int]
    }
    grid(h / 3)(w / 3) = frost
    def inBounds(x: Int, y: Int): Boolean = {
      return (((x >= 0 && x < w).asInstanceOf[Boolean] && y >= 0).asInstanceOf[Boolean] && y < h).asInstanceOf[Boolean]
    }
    def hasNeighbor(x: Int, y: Int): Boolean = {
      var dy: Int = 0 - 1
      while (dy <= 1) {
        var dx: Int = 0 - 1
        while (dx <= 1) {
          if ((!(dx == 0 && dy == 0).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            val nx = x + dx
            val ny = y + dy
            if ((inBounds(nx, ny) && grid(ny)(nx) == frost).asInstanceOf[Boolean]) {
              return true
            }
          }
          dx = (dx + 1).asInstanceOf[Int]
        }
        dy = (dy + 1).asInstanceOf[Int]
      }
      return false
    }
    var a: Int = 0
    val _br4 = new Breaks
    val _ct4 = new Breaks
    _br4.breakable {
      while (a < n) {
        _ct4.breakable {
          var px = Math.floorMod(_now(), w)
          var py = Math.floorMod(_now(), h)
          if (grid(py)(px) == frost) {
            var lost: Boolean = false
            val _br5 = new Breaks
            _br5.breakable {
              while (true) {
                px = (px + Math.floorMod(_now(), 3) - 1).asInstanceOf[Int]
                py = (py + Math.floorMod(_now(), 3) - 1).asInstanceOf[Int]
                if ((!inBounds(px, py)).asInstanceOf[Boolean]) {
                  lost = true
                  _br5.break()
                }
                if (grid(py)(px) != frost) {
                  _br5.break()
                }
              }
            }
            if (lost) {
              _ct4.break()
            }
          } else {
            var lost: Boolean = false
            val _br6 = new Breaks
            _br6.breakable {
              while (!hasNeighbor(px, py)) {
                px = (px + Math.floorMod(_now(), 3) - 1).asInstanceOf[Int]
                py = (py + Math.floorMod(_now(), 3) - 1).asInstanceOf[Int]
                if ((!inBounds(px, py)).asInstanceOf[Boolean]) {
                  lost = true
                  _br6.break()
                }
              }
            }
            if (lost) {
              _ct4.break()
            }
          }
          grid(py)(px) = frost
          a = (a + 1).asInstanceOf[Int]
        }
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
