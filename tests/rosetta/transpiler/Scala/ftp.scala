// Generated by Mochi v0.10.50 on 2025-07-31 00:50:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class FileInfo(var name: String, var size: BigInt, var kind: String)

case class FTPConn(var dir: String)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val serverData: Map[String,Map[String,String]] = scala.collection.mutable.Map("pub" -> (scala.collection.mutable.Map("somefile.bin" -> ("This is a file from the FTP server."), "readme.txt" -> ("Hello from ftp."))))
    val serverNames: Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("pub" -> (ArrayBuffer("somefile.bin", "readme.txt")))
    def connect(hostport: String): FTPConn = {
      println("Connected to " + hostport)
      return FTPConn("/")
    }
    def login(conn: FTPConn, user: String, pass: String): Any = {
      println("Logged in as " + user)
    }
    def changeDir(conn: FTPConn, dir: String): Any = {
      conn.dir = dir
    }
    def list(conn: FTPConn): ArrayBuffer[FileInfo] = {
      val names: ArrayBuffer[String] = serverNames.getOrElse(conn.dir, null.asInstanceOf[ArrayBuffer[String]])
      val dataDir: Map[String,String] = serverData.getOrElse(conn.dir, Map[String,String]())
      var out: ArrayBuffer[FileInfo] = ArrayBuffer()
      for (name <- names) {
        val content: String = dataDir.getOrElse(name, null.asInstanceOf[String])
        out = out :+ FileInfo(name, (content).size, "file")
      }
      return out
    }
    def retrieve(conn: FTPConn, name: String): String = {
      return serverData.getOrElse(conn.dir, Map[String,String]()).getOrElse(name, null.asInstanceOf[String])
    }
    def main(): Any = {
      val conn: FTPConn = connect("localhost:21")
      login(conn, "anonymous", "anonymous")
      changeDir(conn, "pub")
      println(conn.dir)
      val files: ArrayBuffer[FileInfo] = list(conn)
      for (f <- files) {
        println(f.name + " " + String.valueOf(f.size))
      }
      val data: String = retrieve(conn, "somefile.bin")
      println("Wrote " + String.valueOf((data).size) + " bytes to somefile.bin")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
