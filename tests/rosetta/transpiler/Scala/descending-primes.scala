// Generated by Mochi v0.10.52 on 2025-08-01 19:05:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      if (n % BigInt(2) == BigInt(0)) {
        return n == BigInt(2)
      }
      var d: BigInt = BigInt(3)
      while (d * d <= n) {
        if (n % d == BigInt(0)) {
          return false
        }
        d = d + BigInt(2)
      }
      return true
    }
    val digits: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(9), BigInt(8), BigInt(7), BigInt(6), BigInt(5), BigInt(4), BigInt(3), BigInt(2), BigInt(1))
    def gen(idx: BigInt, cur: BigInt, used: Boolean): ArrayBuffer[BigInt] = {
      if (idx == (digits).size) {
        if ((used && isPrime(cur)).asInstanceOf[Boolean]) {
          return (ArrayBuffer(cur)).asInstanceOf[ArrayBuffer[BigInt]]
        }
        return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
      }
      val `with`: ArrayBuffer[BigInt] = gen(idx + BigInt(1), cur * BigInt(10) + digits((idx).toInt), true)
      val without: ArrayBuffer[BigInt] = gen(idx + BigInt(1), cur, used)
      return (`with` ++ without).asInstanceOf[ArrayBuffer[BigInt]]
    }
    var primes: ArrayBuffer[BigInt] = gen(BigInt(0), BigInt(0), false)
    def pad(n: BigInt, width: BigInt): String = {
      var s: String = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    println("There are " + String.valueOf((primes).size) + " descending primes, namely:")
    var i: BigInt = BigInt(0)
    var line: String = ""
    while (i < (primes).size) {
      line = line + pad(primes((i).toInt), BigInt(8)) + " "
      if ((i + BigInt(1)) % BigInt(10) == BigInt(0)) {
        println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1).toInt).toInt))
        line = ""
      }
      i = i + BigInt(1)
    }
    if ((line).size > BigInt(0)) {
      println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1).toInt).toInt))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
