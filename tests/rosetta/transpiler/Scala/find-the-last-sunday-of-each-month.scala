// Generated by Mochi v0.10.56 on 2025-08-04 00:19:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def leapYear(y: BigInt): Boolean = {
  return ((y % BigInt(4) == BigInt(0) && y % BigInt(100) != BigInt(0)).asInstanceOf[Boolean] || y % BigInt(400) == BigInt(0)).asInstanceOf[Boolean]
}

def monthDays(y: BigInt, m: BigInt): BigInt = {
  var days: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(31), BigInt(28), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31))
  if ((m == BigInt(2) && leapYear(y)).asInstanceOf[Boolean]) {
    return BigInt(29)
  }
  return days((m.toInt).toInt)
}

def zeller(y: BigInt, m: BigInt, d: BigInt): BigInt = {
  var mm: BigInt = m
  var yy: BigInt = y
  if (mm < BigInt(3)) {
    mm = mm + BigInt(12)
    yy = yy - BigInt(1)
  }
  val K: BigInt = yy % BigInt(100)
  val J: BigInt = yy / BigInt(100)
  val h: BigInt = (d + BigInt(13) * (mm + BigInt(1)) / BigInt(5) + K + K / BigInt(4) + J / BigInt(4) + BigInt(5) * J) % BigInt(7)
  return (h + BigInt(6)) % BigInt(7)
}

def lastSunday(y: BigInt, m: BigInt): BigInt = {
  var day: BigInt = monthDays(y, m)
  while (day > BigInt(0) && zeller(y, m, day) != BigInt(0)) {
    day = day - BigInt(1)
  }
  return day
}

def monthName(m: BigInt): String = {
  var names: ArrayBuffer[String] = ArrayBuffer("", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
  return names((m.toInt).toInt)
}

def main(): Any = {
  val year: BigInt = BigInt((Option(scala.io.StdIn.readLine()).getOrElse("q")).toString.toDouble.toInt)
  println("Last Sundays of each month of " + String.valueOf(year))
  println("==================================")
  var m: BigInt = BigInt(1)
  while (m <= BigInt(12)) {
    val day: BigInt = lastSunday(year, m)
    println(monthName(m) + ": " + String.valueOf(day))
    m = m + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
