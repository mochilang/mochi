// Generated by Mochi v0.10.37 on 2025-07-22 20:23:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def fields(s: String): ArrayBuffer[String] = {
    var words: ArrayBuffer[String] = ArrayBuffer()
    var cur: String = ""
    var i: Int = 0
    while (i < (s).size) {
      val ch: String = s.substring(i, i + 1)
      if (ch == " " || ch == "\n" || ch == "\t") {
        if ((cur).size > 0) {
          words = words :+ cur
          cur = ""
        }
      } else {
        cur = cur + ch
      }
      i = i + 1
    }
    if ((cur).size > 0) {
      words = words :+ cur
    }
    return words
  }
  
  def join(xs: ArrayBuffer[String], sep: String): String = {
    var res: String = ""
    var i: Int = 0
    while (i < (xs).size) {
      if (i > 0) {
        res = res + sep
      }
      res = res + xs(i)
      i = i + 1
    }
    return res
  }
  
  def numberName(n: Int): String = {
    val small: ArrayBuffer[String] = ArrayBuffer("no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
    val tens: ArrayBuffer[String] = ArrayBuffer("ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
    if (n < 0) {
      return ""
    }
    if (n < 20) {
      return small(n)
    }
    if (n < 100) {
      var t: Any = tens(n / 10.toInt)
      var s = n % 10
      if (s > 0) {
        t = t + " " + small(s)
      }
      return t
    }
    return ""
  }
  
  def pluralizeFirst(s: String, n: Int): String = {
    if (n == 1) {
      return s
    }
    val w = fields(s)
    if ((w).size > 0) {
      w(0) = w(0) + "s"
    }
    return join(w, " ")
  }
  
  def randInt(seed: Int, n: Int): Int = {
    val next = seed * 1664525 + 1013904223 % 2147483647
    return next % n
  }
  
  def slur(p: String, d: Int): String = {
    if ((p).size <= 2) {
      return p
    }
    var a: ArrayBuffer[String] = ArrayBuffer()
    var i: Int = 1
    while (i < (p).size - 1) {
      a = a :+ p.substring(i, i + 1)
      i = i + 1
    }
    var idx: Int = (a).size - 1
    var seed = d
    while (idx >= 1) {
      seed = seed * 1664525 + 1013904223 % 2147483647
      if (seed % 100 >= d) {
        val j = seed % idx + 1
        val tmp: Any = a(idx)
        a(idx) = a(j)
        a(j) = tmp
      }
      idx = idx - 1
    }
    var s: String = p.substring(0, 1)
    var k: Int = 0
    while (k < (a).size) {
      s = s + a(k)
      k = k + 1
    }
    s = s + p.substring((p).size - 1, (p).size)
    val w = fields(s)
    return join(w, " ")
  }
  
  def main() = {
    var i: Int = 99
    while (i > 0) {
      println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i))
      println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i))
      println(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i))
      println(slur(numberName(i - 1), i) + " " + pluralizeFirst(slur("bottle of", i), i - 1) + " " + slur("beer on the wall", i))
      i = i - 1
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
