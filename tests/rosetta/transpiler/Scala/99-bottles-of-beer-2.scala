// Generated by Mochi v0.10.40 on 2025-07-25 19:18:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def fields(s: String): ArrayBuffer[String] = {
      var words: ArrayBuffer[String] = ArrayBuffer()
      var cur: String = ""
      var i: Int = 0
      while (i < (s).size) {
        val ch: String = s.substring(i, i + 1)
        if (((ch == " " || ch == "\n").asInstanceOf[Boolean] || ch == "\t").asInstanceOf[Boolean]) {
          if ((cur).size > 0) {
            words = words :+ cur
            cur = ""
          }
        } else {
          cur = (cur + ch).asInstanceOf[String]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      if ((cur).size > 0) {
        words = words :+ cur
      }
      return words
    }
    def join(xs: ArrayBuffer[String], sep: String): String = {
      var res: String = ""
      var i: Int = 0
      while (i < (xs).size) {
        if (i > 0) {
          res = (res + sep).asInstanceOf[String]
        }
        res = (res + xs(i)).asInstanceOf[String]
        i = (i + 1).asInstanceOf[Int]
      }
      return res
    }
    def numberName(n: Int): String = {
      val small: ArrayBuffer[String] = ArrayBuffer("no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
      val tens: ArrayBuffer[String] = ArrayBuffer("ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
      if (n < 0) {
        return ""
      }
      if (n < 20) {
        return small(n)
      }
      if (n < 100) {
        var t: String = tens((n / 10).asInstanceOf[Int])
        var s = Math.floorMod(n, 10)
        if (s > 0) {
          t = t + " " + small(s)
        }
        return t
      }
      return ""
    }
    def pluralizeFirst(s: String, n: Int): String = {
      if (n == 1) {
        return s
      }
      val w: ArrayBuffer[String] = fields(s)
      if ((w).size > 0) {
        w(0) = w(0) + "s"
      }
      return join(w, " ")
    }
    def randInt(seed: Int, n: Int): Int = {
      val next = Math.floorMod(seed * 1664525 + 1013904223, 2147483647)
      return (Math.floorMod(next, n)).asInstanceOf[Int]
    }
    def slur(p: String, d: Int): String = {
      if ((p).size <= 2) {
        return p
      }
      var a: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 1
      while (i < (p).size - 1) {
        a = a :+ p.substring(i, i + 1)
        i = (i + 1).asInstanceOf[Int]
      }
      var idx: Int = (a).size - 1
      var seed: Int = d
      while (idx >= 1) {
        seed = (Math.floorMod(seed * 1664525 + 1013904223, 2147483647)).asInstanceOf[Int]
        if ((Math.floorMod(seed, 100)).asInstanceOf[Int] >= d) {
          val j = Math.floorMod(seed, idx + 1)
          val tmp: String = a(idx)
          a(idx) = a(j)
          a(j) = tmp
        }
        idx = (idx - 1).asInstanceOf[Int]
      }
      var s: String = p.substring(0, 1)
      var k: Int = 0
      while (k < (a).size) {
        s = (s + a(k)).asInstanceOf[String]
        k = (k + 1).asInstanceOf[Int]
      }
      s = s + p.substring((p).size - 1, (p).size)
      val w: ArrayBuffer[String] = fields(s)
      return join(w, " ")
    }
    def main(): Unit = {
      var i: Int = 99
      while (i > 0) {
        println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i))
        println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i))
        println(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i))
        println(slur(numberName((i - 1).asInstanceOf[Int]), i) + " " + pluralizeFirst(slur("bottle of", i), (i - 1).asInstanceOf[Int]) + " " + slur("beer on the wall", i))
        i = (i - 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
