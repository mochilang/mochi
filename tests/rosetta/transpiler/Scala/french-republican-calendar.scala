// Generated by Mochi v0.10.50 on 2025-07-31 01:08:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val gregorianStr: ArrayBuffer[String] = ArrayBuffer("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
    val gregorian: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(31), BigInt(28), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31), BigInt(31), BigInt(30), BigInt(31), BigInt(30), BigInt(31))
    val republicanStr: ArrayBuffer[String] = ArrayBuffer("Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor")
    val sansculotidesStr: ArrayBuffer[String] = ArrayBuffer("Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution")
    def greLeap(year: BigInt): Boolean = {
      val a: BigInt = year % BigInt(4)
      val b: BigInt = year % BigInt(100)
      val c: BigInt = year % BigInt(400)
      return (a == BigInt(0) && (b != BigInt(0) || c == BigInt(0)).asInstanceOf[Boolean]).asInstanceOf[Boolean]
    }
    def repLeap(year: BigInt): Boolean = {
      val a: BigInt = (year + BigInt(1)) % BigInt(4)
      val b: BigInt = (year + BigInt(1)) % BigInt(100)
      val c: BigInt = (year + BigInt(1)) % BigInt(400)
      return (a == BigInt(0) && (b != BigInt(0) || c == BigInt(0)).asInstanceOf[Boolean]).asInstanceOf[Boolean]
    }
    def greToDay(d: BigInt, m: BigInt, y: BigInt): BigInt = {
      var yy: BigInt = y
      var mm: BigInt = m
      if (mm < BigInt(3)) {
        yy = yy - BigInt(1)
        mm = mm + BigInt(12)
      }
      return yy * BigInt(36525) / BigInt(100) - yy / BigInt(100) + yy / BigInt(400) + BigInt(306) * (mm + BigInt(1)) / BigInt(10) + d - BigInt(654842)
    }
    def repToDay(d: BigInt, m: BigInt, y: BigInt): BigInt = {
      var dd: BigInt = d
      var mm: BigInt = m
      if (mm == BigInt(13)) {
        mm = mm - BigInt(1)
        dd = dd + BigInt(30)
      }
      if (repLeap(y)) {
        dd = dd - BigInt(1)
      }
      return BigInt(365) * y + (y + BigInt(1)) / BigInt(4) - (y + BigInt(1)) / BigInt(100) + (y + BigInt(1)) / BigInt(400) + BigInt(30) * mm + dd - BigInt(395)
    }
    def dayToGre(day: BigInt): ArrayBuffer[BigInt] = {
      var y: BigInt = day * BigInt(100) / BigInt(36525)
      var d: BigInt = day - y * BigInt(36525) / BigInt(100) + BigInt(21)
      y = y + BigInt(1792)
      d = d + y / BigInt(100) - y / BigInt(400) - BigInt(13)
      var m: BigInt = BigInt(8)
      while (d > gregorian((m).toInt)) {
        d = d - gregorian((m).toInt)
        m = m + BigInt(1)
        if (m == BigInt(12)) {
          m = BigInt(0)
          y = y + BigInt(1)
          if (greLeap(y)) {
            gregorian((BigInt(1)).toInt) = BigInt(29)
          } else {
            gregorian((BigInt(1)).toInt) = BigInt(28)
          }
        }
      }
      m = m + BigInt(1)
      return (ArrayBuffer(d, m, y)).asInstanceOf[ArrayBuffer[BigInt]]
    }
    def dayToRep(day: BigInt): ArrayBuffer[BigInt] = {
      var y: BigInt = (day - BigInt(1)) * BigInt(100) / BigInt(36525)
      if (repLeap(y)) {
        y = y - BigInt(1)
      }
      var d: BigInt = day - (y + BigInt(1)) * BigInt(36525) / BigInt(100) + BigInt(365) + (y + BigInt(1)) / BigInt(100) - (y + BigInt(1)) / BigInt(400)
      y = y + BigInt(1)
      var m: BigInt = BigInt(1)
      var sc: BigInt = BigInt(5)
      if (repLeap(y)) {
        sc = BigInt(6)
      }
      while (d > BigInt(30)) {
        d = d - BigInt(30)
        m = m + BigInt(1)
        if (m == BigInt(13)) {
          if (d > sc) {
            d = d - sc
            m = BigInt(1)
            y = y + BigInt(1)
            sc = BigInt(5)
            if (repLeap(y)) {
              sc = BigInt(6)
            }
          }
        }
      }
      return (ArrayBuffer(d, m, y)).asInstanceOf[ArrayBuffer[BigInt]]
    }
    def formatRep(d: BigInt, m: BigInt, y: BigInt): String = {
      if (m == BigInt(13)) {
        return sansculotidesStr((d - BigInt(1)).toInt) + " " + String.valueOf(y)
      }
      return String.valueOf(d) + " " + republicanStr((m - BigInt(1)).toInt) + " " + String.valueOf(y)
    }
    def formatGre(d: BigInt, m: BigInt, y: BigInt): String = {
      return String.valueOf(d) + " " + gregorianStr((m - BigInt(1)).toInt) + " " + String.valueOf(y)
    }
    val rep: ArrayBuffer[BigInt] = dayToRep(greToDay(BigInt(20), BigInt(5), BigInt(1795)))
    println(formatRep(rep((BigInt(0)).toInt), rep((BigInt(1)).toInt), rep((BigInt(2)).toInt)))
    val gre: ArrayBuffer[BigInt] = dayToGre(repToDay(BigInt(1), BigInt(9), BigInt(3)))
    println(formatGre(gre((BigInt(0)).toInt), gre((BigInt(1)).toInt), gre((BigInt(2)).toInt)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
