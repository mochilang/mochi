// Generated by Mochi v0.10.40 on 2025-07-26 04:42:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def parseIntStr(str: String): Int = {
    var i: Int = 0
    var neg: Boolean = false
    if (((str).size > 0 && str.slice(0, 1) == "-").asInstanceOf[Boolean]) {
      neg = true
      i = 1
    }
    var n: Int = 0
    val digits: Map[String,Int] = Map("0" -> (0), "1" -> (1), "2" -> (2), "3" -> (3), "4" -> (4), "5" -> (5), "6" -> (6), "7" -> (7), "8" -> (8), "9" -> (9))
    while (i < (str).size) {
      n = (n * 10 + digits.getOrElse(str.slice(i, i + 1), null.asInstanceOf[Int])).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    if (neg) {
      n = (0 - n).asInstanceOf[Int]
    }
    return n
  }
  
  def splitWs(s: String): ArrayBuffer[String] = {
    var parts: ArrayBuffer[String] = ArrayBuffer()
    var cur: String = ""
    var i: Int = 0
    while (i < (s).size) {
      val ch: String = s.slice(i, i + 1)
      if ((((ch == " " || ch == "\n").asInstanceOf[Boolean] || ch == "\t").asInstanceOf[Boolean] || ch == "\r").asInstanceOf[Boolean]) {
        if ((cur).size > 0) {
          parts = parts :+ cur
          cur = ""
        }
      } else {
        cur = (cur + ch).toString
      }
      i = (i + 1).asInstanceOf[Int]
    }
    if ((cur).size > 0) {
      parts = parts :+ cur
    }
    return parts
  }
  
  def parsePpm(data: String): Map[String,Any] = {
    val toks: ArrayBuffer[String] = splitWs(data)
    if ((toks).size < 4) {
      return (Map("err" -> (true))).asInstanceOf[Map[String,Any]]
    }
    val magic: String = toks(0)
    val w: Int = parseIntStr(toks(1))
    val h: Int = parseIntStr(toks(2))
    val maxv: Int = parseIntStr(toks(3))
    var px: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 4
    while (i < (toks).size) {
      px = px :+ parseIntStr(toks(i))
      i = (i + 1).asInstanceOf[Int]
    }
    return Map("magic" -> (magic), "w" -> (w), "h" -> (h), "max" -> (maxv), "px" -> (px))
  }
  
  val ppmData: String = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"
  
  val img: Map[String,Any] = parsePpm(ppmData)
  
  def main(args: Array[String]): Unit = {
    println("width=" + String.valueOf(img.w) + " height=" + String.valueOf(img.h))
  }
}
