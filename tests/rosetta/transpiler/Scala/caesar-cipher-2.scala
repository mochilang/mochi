// Generated by Mochi v0.10.40 on 2025-07-26 05:04:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def ord(ch: String): Int = {
      val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      val lower: String = "abcdefghijklmnopqrstuvwxyz"
      var idx: Int = indexOf(upper, ch)
      if (idx >= 0) {
        return (65 + idx).asInstanceOf[Int]
      }
      idx = indexOf(lower, ch)
      if (idx >= 0) {
        return (97 + idx).asInstanceOf[Int]
      }
      return 0
    }
    def chr(n: Int): String = {
      val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      val lower: String = "abcdefghijklmnopqrstuvwxyz"
      if ((n >= 65 && n < 91).asInstanceOf[Boolean]) {
        return upper.slice(n - 65, n - 64)
      }
      if ((n >= 97 && n < 123).asInstanceOf[Boolean]) {
        return lower.slice(n - 97, n - 96)
      }
      return "?"
    }
    def shiftRune(r: String, k: Int): String = {
      if ((r >= "a" && r <= "z").asInstanceOf[Boolean]) {
        return chr((Math.floorMod(ord(r) - 97 + k, 26) + 97).asInstanceOf[Int])
      }
      if ((r >= "A" && r <= "Z").asInstanceOf[Boolean]) {
        return chr((Math.floorMod(ord(r) - 65 + k, 26) + 65).asInstanceOf[Int])
      }
      return r
    }
    def encipher(s: String, k: Int): String = {
      var out: String = ""
      var i: Int = 0
      while (i < (s).size) {
        out = (out + shiftRune(s.slice(i, i + 1), k)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return out
    }
    def decipher(s: String, k: Int): String = {
      return encipher(s, (Math.floorMod(26 - Math.floorMod(k, 26), 26)).asInstanceOf[Int])
    }
    def main(): Any = {
      val pt: String = "The five boxing wizards jump quickly"
      println("Plaintext: " + pt)
      val _ct2 = new Breaks
      for (key <- ArrayBuffer(0, 1, 7, 25, 26)) {
        _ct2.breakable {
          if ((key.asInstanceOf[Int] < 1 || key.asInstanceOf[Int] > 25).asInstanceOf[Boolean]) {
            println("Key " + String.valueOf(key) + " invalid")
            _ct2.break()
          }
          val ct: String = encipher(pt, key.asInstanceOf[Int])
          println("Key " + String.valueOf(key))
          println("  Enciphered: " + ct)
          println("  Deciphered: " + decipher(ct, key.asInstanceOf[Int]))
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
