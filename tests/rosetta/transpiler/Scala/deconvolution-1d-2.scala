// Generated by Mochi v0.10.52 on 2025-08-01 19:04:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOf(s: String, ch: String): BigInt = {
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
          return i
        }
        i = i + BigInt(1)
      }
      return BigInt(0) - BigInt(1)
    }
    def fmt1(x: Double): String = {
      var y: Double = (x * 10.0 + 0.5.toInt).toString.toDouble / 10.0
      var s: String = String.valueOf(y)
      val dot = BigInt(s.indexOf("."))
      if (dot < BigInt(0)) {
        s = s + ".0"
      }
      return s
    }
    def listToString1(xs: ArrayBuffer[Double]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        s = (s + fmt1(xs((i).toInt))).toString
        if (i < (xs).size - BigInt(1).toInt) {
          s = s + " "
        }
        i = i + BigInt(1)
      }
      return s + "]"
    }
    def deconv(g: ArrayBuffer[Double], f: ArrayBuffer[Double]): ArrayBuffer[Double] = {
      var out: ArrayBuffer[Double] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i <= (g).size - (f).size) {
        var sum: Double = g((i).toInt)
        var j: BigInt = BigInt(1)
        while (j < (f).size) {
          if (j <= i) {
            sum = sum - (out((i - j).toInt) * f((j).toInt)).toString.toDouble
          }
          j = j + BigInt(1)
        }
        out = out :+ (sum / f((BigInt(0)).toInt)).toString.toDouble
        i = i + BigInt(1)
      }
      return out
    }
    def main(): Any = {
      val h = ArrayBuffer(-8.0, -9.0, -3.0, -1.0, -6.0, 7.0)
      val f = ArrayBuffer(-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0)
      val g = ArrayBuffer(24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0)
      println(listToString1(h.asInstanceOf[ArrayBuffer[Double]]))
      println(listToString1(deconv(g.asInstanceOf[ArrayBuffer[Double]], f.asInstanceOf[ArrayBuffer[Double]])))
      println(listToString1(f.asInstanceOf[ArrayBuffer[Double]]))
      println(listToString1(deconv(g.asInstanceOf[ArrayBuffer[Double]], h.asInstanceOf[ArrayBuffer[Double]])))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
