// Generated by Mochi v0.10.40 on 2025-07-25 13:21:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def search_user(directory: Map[String,ArrayBuffer[String]], username: String): ArrayBuffer[String] = {
      return directory.getOrElse(username, null.asInstanceOf[ArrayBuffer[String]])
    }
    def main(): Unit = {
      val client: Map[String,Any] = Map("Base" -> ("dc=example,dc=com"), "Host" -> ("ldap.example.com"), "Port" -> (389), "GroupFilter" -> ("(memberUid=%s)"))
      val directory: Map[String,ArrayBuffer[String]] = Map("username" -> (ArrayBuffer("admins", "users")), "john" -> (ArrayBuffer("users")))
      val groups: ArrayBuffer[String] = search_user(directory, "username")
      if ((groups).size > 0) {
        var out: String = "Groups: ["
        var i: Int = 0
        while (i < (groups).size) {
          out = out + "\"" + groups(i) + "\""
          if (i < (groups).size - 1) {
            out = out + ", "
          }
          i = (i + 1).asInstanceOf[Int]
        }
        out = out + "]"
        println(out)
      } else {
        println("User not found")
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
