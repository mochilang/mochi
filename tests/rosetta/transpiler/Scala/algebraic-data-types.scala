// Generated by Mochi v0.10.40 on 2025-07-25 12:56:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def node(cl: String, le: Any, aa: Int, ri: Any): Map[String,Any] = {
    return Map("cl" -> (cl), "le" -> (le), "aa" -> (aa), "ri" -> (ri))
  }
  
  def treeString(t: Any): String = {
    if (t == null) {
      return "E"
    }
    val m: Map[String,Any] = t.asInstanceOf[Map[String,Any]]
    return "T(" + (m.getOrElse("cl", null.asInstanceOf[Any])).asInstanceOf[String] + ", " + treeString(m.getOrElse("le", null.asInstanceOf[Any])) + ", " + String.valueOf(m.getOrElse("aa", null.asInstanceOf[Any])) + ", " + treeString(m.getOrElse("ri", null.asInstanceOf[Any])) + ")"
  }
  
  def balance(t: Any): Any = {
    if (t == null) {
      return t
    }
    val m: Map[String,Any] = t.asInstanceOf[Map[String,Any]]
    if (m.getOrElse("cl", null.asInstanceOf[Any]) != "B") {
      return t
    }
    val le = m.getOrElse("le", null.asInstanceOf[Any])
    val ri = m.getOrElse("ri", null.asInstanceOf[Any])
    if (le != null) {
      val leMap: Map[String,Any] = le.asInstanceOf[Map[String,Any]]
      if (leMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
        val lele = leMap.getOrElse("le", null.asInstanceOf[Any])
        if (lele != null) {
          val leleMap: Map[String,Any] = lele.asInstanceOf[Map[String,Any]]
          if (leleMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
            return (node("R", node("B", leleMap.getOrElse("le", null.asInstanceOf[Any]), (leleMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], leleMap.getOrElse("ri", null.asInstanceOf[Any])), (leMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], node("B", leMap.getOrElse("ri", null.asInstanceOf[Any]), (m.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], ri))).asInstanceOf[Any]
          }
        }
        val leri = leMap.getOrElse("ri", null.asInstanceOf[Any])
        if (leri != null) {
          val leriMap: Map[String,Any] = leri.asInstanceOf[Map[String,Any]]
          if (leriMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
            return (node("R", node("B", leMap.getOrElse("le", null.asInstanceOf[Any]), (leMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], leriMap.getOrElse("le", null.asInstanceOf[Any])), (leriMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], node("B", leriMap.getOrElse("ri", null.asInstanceOf[Any]), (m.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], ri))).asInstanceOf[Any]
          }
        }
      }
    }
    if (ri != null) {
      val riMap: Map[String,Any] = ri.asInstanceOf[Map[String,Any]]
      if (riMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
        val rile = riMap.getOrElse("le", null.asInstanceOf[Any])
        if (rile != null) {
          val rileMap: Map[String,Any] = rile.asInstanceOf[Map[String,Any]]
          if (rileMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
            return (node("R", node("B", m.getOrElse("le", null.asInstanceOf[Any]), (m.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], rileMap.getOrElse("le", null.asInstanceOf[Any])), (rileMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], node("B", rileMap.getOrElse("ri", null.asInstanceOf[Any]), (riMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], riMap.getOrElse("ri", null.asInstanceOf[Any])))).asInstanceOf[Any]
          }
        }
        val riri = riMap.getOrElse("ri", null.asInstanceOf[Any])
        if (riri != null) {
          val ririMap: Map[String,Any] = riri.asInstanceOf[Map[String,Any]]
          if (ririMap.getOrElse("cl", null.asInstanceOf[Any]) == "R") {
            return (node("R", node("B", m.getOrElse("le", null.asInstanceOf[Any]), (m.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], riMap.getOrElse("le", null.asInstanceOf[Any])), (riMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], node("B", ririMap.getOrElse("le", null.asInstanceOf[Any]), (ririMap.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], ririMap.getOrElse("ri", null.asInstanceOf[Any])))).asInstanceOf[Any]
          }
        }
      }
    }
    return t
  }
  
  def ins(tr: Any, x: Int): Any = {
    if (tr == null) {
      return (node("R", null, x, null)).asInstanceOf[Any]
    }
    if (x < (tr.asInstanceOf[Map[String,Any]]("aa")).asInstanceOf[Int]) {
      return balance(node((tr.asInstanceOf[Map[String,Any]]("cl")).asInstanceOf[String], ins(tr.asInstanceOf[Map[String,Any]]("le"), x), (tr.asInstanceOf[Map[String,Any]]("aa")).asInstanceOf[Int], tr.asInstanceOf[Map[String,Any]]("ri")))
    }
    if (x > (tr.asInstanceOf[Map[String,Any]]("aa")).asInstanceOf[Int]) {
      return balance(node((tr.asInstanceOf[Map[String,Any]]("cl")).asInstanceOf[String], tr.asInstanceOf[Map[String,Any]]("le"), (tr.asInstanceOf[Map[String,Any]]("aa")).asInstanceOf[Int], ins(tr.asInstanceOf[Map[String,Any]]("ri"), x)))
    }
    return tr
  }
  
  def insert(tr: Any, x: Int): Any = {
    val t = ins(tr, x)
    if (t == null) {
      return null.asInstanceOf[Any]
    }
    val m: Map[String,Any] = t.asInstanceOf[Map[String,Any]]
    return (node("B", m.getOrElse("le", null.asInstanceOf[Any]), (m.getOrElse("aa", null.asInstanceOf[Any])).asInstanceOf[Int], m.getOrElse("ri", null.asInstanceOf[Any]))).asInstanceOf[Any]
  }
  
  var tr: Any = null
  
  var i: Int = 1
  
  def main(args: Array[String]): Unit = {
    while (i <= 16) {
      tr = insert(tr, i)
      i = (i + 1).asInstanceOf[Int]
    }
    println(treeString(tr))
  }
}
