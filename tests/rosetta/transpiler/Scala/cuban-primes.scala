// Generated by Mochi v0.10.57 on 2025-08-04 19:29:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def modPow(base: BigInt, exp: BigInt, m: BigInt): BigInt = {
  var result: BigInt = 1 % m
  var b: BigInt = base % m
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % m
    }
    b = b * b % m
    e = e / 2
  }
  return result
}

def isPrime(n: BigInt): Boolean = {
  if (n < 2) {
    return false
  }
  for (p <- ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)) {
    if (n % p == 0) {
      return n == p
    }
  }
  var d: BigInt = n - 1
  var s: BigInt = 0
  while (d % 2 == 0) {
    d = d / 2
    s = s + 1
  }
  val _br3 = new Breaks
  val _ct3 = new Breaks
  _br3.breakable {
    for (a <- ArrayBuffer(2, 325, 9375, 28178, 450775, 9780504, 1795265022)) {
      _ct3.breakable {
        if (a % n == 0) {
          return true
        }
        var x: BigInt = modPow(a, d, n)
        if ((x == 1 || x == n - 1).asInstanceOf[Boolean]) {
          _ct3.break()
        }
        var r: BigInt = 1
        var passed: Boolean = false
        val _br4 = new Breaks
        _br4.breakable {
          while (r < s) {
            x = x * x % n
            if (x == n - 1) {
              passed = true
              _br4.break()
            }
            r = r + 1
          }
        }
        if ((!passed).asInstanceOf[Boolean]) {
          return false
        }
      }
    }
  }
  return true
}

def commatize(n: BigInt): String = {
  var s: String = String.valueOf(n)
  var i: Int = (s).size - 3.toInt
  while (BigInt(i.toString.toDouble.toInt) > 0) {
    s = s.slice((0).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
    i = i - 3.toInt
  }
  return s
}

def pad(s: String, width: BigInt): String = {
  var out: String = s
  while (BigInt(((out).size).toInt) < width) {
    out = " " + out
  }
  return out
}

def join(xs: ArrayBuffer[String], sep: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt(((xs).size).toInt)) {
    if (i > 0) {
      res = res + sep
    }
    res = res + xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def formatRow(row: ArrayBuffer[String]): String = {
  var padded: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  var i: BigInt = 0
  while (i < BigInt(((row).size).toInt)) {
    padded = padded :+ pad(row((i.toInt).toInt), 9)
    i = i + 1
  }
  return "[" + join(padded, " ") + "]"
}

def main(): Any = {
  var cubans: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  var cube1: BigInt = 1
  var count: BigInt = 0
  var cube100k: BigInt = 0
  var i: BigInt = 1
  val _br9 = new Breaks
  _br9.breakable {
    while (true) {
      var j: BigInt = i + 1
      var cube2: BigInt = j * j * j
      var diff: BigInt = cube2 - cube1
      if (isPrime(diff)) {
        if (count < 200) {
          cubans = cubans :+ commatize(diff)
        }
        count = count + 1
        if (count == 100000) {
          cube100k = diff
          _br9.break()
        }
      }
      cube1 = cube2
      i = i + 1
    }
  }
  println("The first 200 cuban primes are:-")
  var row: BigInt = 0
  while (row < 20) {
    var slice: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
    var k: BigInt = 0
    while (k < 10) {
      slice = slice :+ cubans(((row * 10 + k).toInt).toInt)
      k = k + 1
    }
    println(formatRow(slice))
    row = row + 1
  }
  println("\nThe 100,000th cuban prime is " + commatize(cube100k))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
