// Generated by Mochi v0.10.42 on 2025-07-27 22:04:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def modPow(base: BigInt, exp: BigInt, m: BigInt): BigInt = {
      var result = BigInt(1) % m
      var b = base % m
      var e: BigInt = exp
      while (e > BigInt(0)) {
        if (e % BigInt(2) == BigInt(1)) {
          result = (result * b % m).asInstanceOf[BigInt]
        }
        b = (b * b % m).asInstanceOf[BigInt]
        e = e / BigInt(2)
      }
      return result
    }
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      for (p <- ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(7), BigInt(11), BigInt(13), BigInt(17), BigInt(19), BigInt(23), BigInt(29))) {
        if (n % p == BigInt(0)) {
          return n == p
        }
      }
      var d = n - BigInt(1)
      var s: BigInt = BigInt(0)
      while (d % BigInt(2) == BigInt(0)) {
        d = (d / BigInt(2)).asInstanceOf[BigInt]
        s = (s + BigInt(1)).asInstanceOf[BigInt]
      }
      val _br3 = new Breaks
      val _ct3 = new Breaks
      _br3.breakable {
        for (a <- ArrayBuffer(BigInt(2), BigInt(325), BigInt(9375), BigInt(28178), BigInt(450775), BigInt(9780504), BigInt(1795265022))) {
          _ct3.breakable {
            if (a % n == BigInt(0)) {
              return true
            }
            var x: BigInt = modPow(a, d, n)
            if ((x == BigInt(1) || x == n - BigInt(1)).asInstanceOf[Boolean]) {
              _ct3.break()
            }
            var r: BigInt = BigInt(1)
            var passed: Boolean = false
            val _br4 = new Breaks
            _br4.breakable {
              while (r < s) {
                x = (x * x % n).asInstanceOf[BigInt]
                if (x == n - BigInt(1)) {
                  passed = true
                  _br4.break()
                }
                r = (r + BigInt(1)).asInstanceOf[BigInt]
              }
            }
            if ((!passed).asInstanceOf[Boolean]) {
              return false
            }
          }
        }
      }
      return true
    }
    def commatize(n: BigInt): String = {
      var s = String.valueOf(n)
      var i: BigInt = (s).size - BigInt(3)
      while (i > BigInt(0)) {
        s = s.slice((BigInt(0)).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
        i = (i - BigInt(3)).asInstanceOf[BigInt]
      }
      return s
    }
    def pad(s: String, width: BigInt): String = {
      var out: String = s
      while ((out).size < width) {
        out = " " + out
      }
      return out
    }
    def join(xs: ArrayBuffer[String], sep: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        if (i > BigInt(0)) {
          res = (res + sep).toString
        }
        res = (res + xs((i).toInt)).toString
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def formatRow(row: ArrayBuffer[String]): String = {
      var padded: ArrayBuffer[String] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < (row).size) {
        padded = padded :+ pad(row((i).toInt), BigInt(9))
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return "[" + join(padded, " ") + "]"
    }
    def main(): Any = {
      var cubans: ArrayBuffer[String] = ArrayBuffer()
      var cube1: BigInt = BigInt(1)
      var count: BigInt = BigInt(0)
      var cube100k: BigInt = BigInt(0)
      var i: BigInt = BigInt(1)
      val _br9 = new Breaks
      _br9.breakable {
        while (true) {
          var j = i + BigInt(1)
          var cube2 = j * j * j
          var diff = cube2 - cube1
          if (isPrime(diff)) {
            if (count < BigInt(200)) {
              cubans = cubans :+ commatize(diff)
            }
            count = (count + BigInt(1)).asInstanceOf[BigInt]
            if (count == BigInt(100000)) {
              cube100k = diff
              _br9.break()
            }
          }
          cube1 = cube2
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      println("The first 200 cuban primes are:-")
      var row: BigInt = BigInt(0)
      while (row < BigInt(20)) {
        var slice: ArrayBuffer[String] = ArrayBuffer()
        var k: BigInt = BigInt(0)
        while (k < BigInt(10)) {
          slice = slice :+ cubans((row * BigInt(10) + k).toInt)
          k = (k + BigInt(1)).asInstanceOf[BigInt]
        }
        println(formatRow(slice))
        row = (row + BigInt(1)).asInstanceOf[BigInt]
      }
      println("\nThe 100,000th cuban prime is " + commatize(cube100k))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
