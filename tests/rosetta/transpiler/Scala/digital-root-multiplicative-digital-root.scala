// Generated by Mochi v0.10.57 on 2025-08-04 21:57:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class MDRResult(var mp: BigInt, var mdr: BigInt)

def pad(s: String, width: BigInt): String = {
  var out: String = s
  while (BigInt((out).size) < width) {
    out = " " + out
  }
  return out
}

def mult(n: BigInt, base: BigInt): BigInt = {
  var m: BigInt = 1
  var x: BigInt = n
  val b: BigInt = BigInt(base.toString.toDouble.toInt)
  while (x > BigInt(0)) {
    m = m * (x % b)
    x = x / b
  }
  return m
}

def multDigitalRoot(n: BigInt, base: BigInt): MDRResult = {
  var m: BigInt = n
  var mp: BigInt = 0
  val b: BigInt = BigInt(base.toString.toDouble.toInt)
  while (m >= b) {
    m = mult(m, base)
    mp = mp + 1
  }
  return MDRResult(mp, m.toInt)
}

def main(): Any = {
  val base: BigInt = 10
  val size: BigInt = 5
  println(pad("Number", 20) + " " + pad("MDR", 3) + " " + pad("MP", 3))
  val nums: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(123321), BigInt(7739), BigInt(893), BigInt(899998), BigInt("3778888999"), BigInt("277777788888899"))
  var i: BigInt = 0
  while (i < BigInt((nums).size)) {
    var n: BigInt = nums((i.toInt).toInt)
    val r: MDRResult = multDigitalRoot(n, base)
    println(pad(String.valueOf(n), 20) + " " + pad(String.valueOf(r.mdr), 3) + " " + pad(String.valueOf(r.mp), 3))
    i = i + 1
  }
  println("")
  var list: ArrayBuffer[ArrayBuffer[BigInt]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
  var idx: BigInt = 0
  while (idx < base) {
    list = list :+ (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
    idx = idx + 1
  }
  var cnt: BigInt = size * base
  var n: BigInt = 0
  val b: BigInt = BigInt(base.toString.toDouble.toInt)
  while (cnt > 0) {
    val r: MDRResult = multDigitalRoot(n, base)
    val mdr: BigInt = r.mdr
    if (BigInt((list((mdr.toInt).toInt)).size) < size) {
      list((mdr).toInt) = list((mdr.toInt).toInt) :+ n.toInt
      cnt = cnt - 1
    }
    n = n + BigInt(1)
  }
  println("MDR: First")
  var j: BigInt = 0
  while (j < base) {
    println(pad(String.valueOf(j), 3) + ": " + String.valueOf(list((j.toInt).toInt)))
    j = j + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
