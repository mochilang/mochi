// Generated by Mochi v0.10.52 on 2025-08-02 02:06:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class If2(var cond1: Boolean, var cond2: Boolean)

def else1(i: If2, f: () => Any): If2 = {
  if ((i.cond1 && i.cond2 == false).asInstanceOf[Boolean]) {
    f()
  }
  return i
}

def else2(i: If2, f: () => Any): If2 = {
  if ((i.cond2 && i.cond1 == false).asInstanceOf[Boolean]) {
    f()
  }
  return i
}

def else0(i: If2, f: () => Any): If2 = {
  if ((i.cond1 == false && i.cond2 == false).asInstanceOf[Boolean]) {
    f()
  }
  return i
}

def if2(cond1: Boolean, cond2: Boolean, f: () => Any): If2 = {
  if ((cond1 && cond2).asInstanceOf[Boolean]) {
    f()
  }
  return If2(cond1, cond2)
}

var a: BigInt = BigInt(0)

var b: BigInt = BigInt(1)

var t: If2 = if2(a == BigInt(1), b == BigInt(3), (() => {println("a = 1 and b = 3"); }))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    t = else1(t, (() => {println("a = 1 and b <> 3"); }))
    t = else2(t, (() => {println("a <> 1 and b = 3"); }))
    else0(t, (() => {println("a <> 1 and b <> 3"); }))
    a = BigInt(1)
    b = BigInt(0)
    t = if2(a == BigInt(1), b == BigInt(3), (() => {println("a = 1 and b = 3"); }))
    t = else0(t, (() => {println("a <> 1 and b <> 3"); }))
    else1(t, (() => {println("a = 1 and b <> 3"); }))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
