// Generated by Mochi v0.10.50 on 2025-07-30 21:20:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def splitPath(p: String): ArrayBuffer[String] = {
      var parts: ArrayBuffer[String] = ArrayBuffer()
      var cur: String = ""
      var i: BigInt = BigInt(0)
      while (i < (p).size) {
        if (p.slice((i).toInt, (i + BigInt(1)).toInt) == "/") {
          if (cur != "") {
            parts = parts :+ cur
            cur = ""
          }
        } else {
          cur = cur + p.slice((i).toInt, (i + BigInt(1)).toInt)
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      if (cur != "") {
        parts = parts :+ cur
      }
      return parts
    }
    def joinPath(parts: ArrayBuffer[String]): String = {
      var s: String = ""
      var i: BigInt = BigInt(0)
      while (i < (parts).size) {
        s = s + "/" + parts((i).toInt)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return s
    }
    def commonPrefix(paths: ArrayBuffer[String]): String = {
      if ((paths).size == BigInt(0)) {
        return ""
      }
      var base: ArrayBuffer[String] = splitPath(paths((BigInt(0)).toInt))
      var i: BigInt = BigInt(0)
      var prefix: ArrayBuffer[String] = ArrayBuffer()
      val _br2 = new Breaks
      _br2.breakable {
        while (i < (base).size) {
          val comp: String = base((i).toInt)
          var ok: Boolean = true
          val _br3 = new Breaks
          _br3.breakable {
            for (p <- paths) {
              val parts: ArrayBuffer[String] = splitPath(p)
              if ((i >= (parts).size || parts((i).toInt) != comp).asInstanceOf[Boolean]) {
                ok = false
                _br3.break()
              }
            }
          }
          if (ok) {
            prefix = prefix :+ comp
          } else {
            _br2.break()
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      return joinPath(prefix)
    }
    def main(): Any = {
      val paths: ArrayBuffer[String] = ArrayBuffer("/home/user1/tmp/coverage/test", "/home/user1/tmp/covert/operator", "/home/user1/tmp/coven/members", "/home//user1/tmp/coventry", "/home/user1/././tmp/covertly/foo", "/home/bob/../user1/tmp/coved/bar")
      val c: String = commonPrefix(paths)
      if (c == "") {
        println("No common path")
      } else {
        println("Common path: " + c)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
