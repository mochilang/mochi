// Generated by Mochi v0.10.39 on 2025-07-24 20:09:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def isPrime(n: Int): Boolean = {
    if (n < 2) {
      return false
    }
    if (n % 2 == 0) {
      return n == 2
    }
    if (n % 3 == 0) {
      return n == 3
    }
    var d: Int = 5
    while (d * d <= n) {
      if (n % d == 0) {
        return false
      }
      d = (d + 2).asInstanceOf[Int]
      if (n % d == 0) {
        return false
      }
      d = (d + 4).asInstanceOf[Int]
    }
    return true
  }
  
  def sumDigits(n: Int): Int = {
    var s: Int = 0
    var x: Int = n
    while (x > 0) {
      s = (s + x % 10).asInstanceOf[Int]
      x = (x / 10).asInstanceOf[Int]
    }
    return s
  }
  
  def pad(n: Int): String = {
    if (n < 10) {
      return "  " + String.valueOf(n)
    }
    if (n < 100) {
      return " " + String.valueOf(n)
    }
    return (String.valueOf(n)).asInstanceOf[String]
  }
  
  def main() = {
    println("Additive primes less than 500:")
    var count: Int = 0
    var line: String = ""
    var lineCount: Int = 0
    var i: Int = 2
    while (i < 500) {
      if ((isPrime(i) && isPrime(sumDigits(i))).asInstanceOf[Boolean]) {
        count = (count + 1).asInstanceOf[Int]
        line = line + pad(i) + "  "
        lineCount = (lineCount + 1).asInstanceOf[Int]
        if (lineCount == 10) {
          println(line.substring(0, (line).size - 2))
          line = ""
          lineCount = 0
        }
      }
      if (i > 2) {
        i = (i + 2).asInstanceOf[Int]
      } else {
        i = (i + 1).asInstanceOf[Int]
      }
    }
    if (lineCount > 0) {
      println(line.substring(0, (line).size - 2))
    }
    println(String.valueOf(count) + " additive primes found.")
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
