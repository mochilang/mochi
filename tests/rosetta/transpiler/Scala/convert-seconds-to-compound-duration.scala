// Generated by Mochi v0.10.42 on 2025-07-27 17:27:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def timeStr(_sec: BigInt): String = {
      var sec: BigInt = _sec
      var wks = sec / BigInt(604800)
      sec = (sec % BigInt(604800)).asInstanceOf[BigInt]
      var ds = sec / BigInt(86400)
      sec = (sec % BigInt(86400)).asInstanceOf[BigInt]
      var hrs = sec / BigInt(3600)
      sec = (sec % BigInt(3600)).asInstanceOf[BigInt]
      var mins = sec / BigInt(60)
      sec = (sec % BigInt(60)).asInstanceOf[BigInt]
      var res: String = ""
      var comma: Boolean = false
      if (wks != BigInt(0)) {
        res = res + String.valueOf(wks) + " wk"
        comma = true
      }
      if (ds != BigInt(0)) {
        if (comma) {
          res = res + ", "
        }
        res = res + String.valueOf(ds) + " d"
        comma = true
      }
      if (hrs != BigInt(0)) {
        if (comma) {
          res = res + ", "
        }
        res = res + String.valueOf(hrs) + " hr"
        comma = true
      }
      if (mins != BigInt(0)) {
        if (comma) {
          res = res + ", "
        }
        res = res + String.valueOf(mins) + " min"
        comma = true
      }
      if (sec != BigInt(0)) {
        if (comma) {
          res = res + ", "
        }
        res = res + String.valueOf(sec) + " sec"
      }
      return res
    }
    println(timeStr(BigInt(7259)))
    println(timeStr(BigInt(86400)))
    println(timeStr(BigInt(6000000)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
