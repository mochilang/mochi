// Generated by Mochi v0.10.52 on 2025-08-01 19:22:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def listStr(xs: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    s = s + String.valueOf(xs((i).toInt))
    if (i < (xs).size - BigInt(1).toInt) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def ordered(xs: ArrayBuffer[BigInt]): Boolean = {
  if ((xs).size == BigInt(0)) {
    return true
  }
  var prev: BigInt = xs((BigInt(0)).toInt)
  var i: BigInt = BigInt(1)
  while (i < (xs).size) {
    if (xs((i).toInt) < prev) {
      return false
    }
    prev = xs((i).toInt)
    i = i + BigInt(1)
  }
  return true
}

def outOfOrder(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(2)) {
    return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  }
  var r: ArrayBuffer[BigInt] = ArrayBuffer()
  val _br2 = new Breaks
  _br2.breakable {
    while (true) {
      r = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < n) {
        r = r :+ _now() % BigInt(3)
        i = i + BigInt(1)
      }
      if ((!ordered(r)).asInstanceOf[Boolean]) {
        _br2.break()
      }
    }
  }
  return r
}

def sort3(a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var lo: BigInt = BigInt(0)
  var mid: BigInt = BigInt(0)
  var hi: BigInt = (a).size - BigInt(1).toInt
  while (mid <= hi) {
    val v: BigInt = a((mid).toInt)
    if (v == BigInt(0)) {
      val tmp: BigInt = a((lo).toInt)
      a((lo).toInt) = a((mid).toInt)
      a((mid).toInt) = tmp
      lo = lo + BigInt(1)
      mid = mid + BigInt(1)
    } else {
      if (v == BigInt(1)) {
        mid = mid + BigInt(1)
      } else {
        val tmp: BigInt = a((mid).toInt)
        a((mid).toInt) = a((hi).toInt)
        a((hi).toInt) = tmp
        hi = hi - BigInt(1)
      }
    }
  }
  return a
}

def main(): Any = {
  var f: ArrayBuffer[BigInt] = outOfOrder(BigInt(12))
  println(listStr(f))
  f = sort3(f)
  println(listStr(f))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
