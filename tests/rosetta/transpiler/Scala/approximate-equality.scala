// Generated by Mochi v0.10.39 on 2025-07-25 00:48:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def abs(x: Double): Double = {
    if (x < 0.0) {
      return (0 - x).asInstanceOf[Double]
    }
    return x
  }
  
  def maxf(a: Double, b: Double): Double = {
    if (a > b) {
      return a
    }
    return b
  }
  
  def isClose(a: Double, b: Double): Boolean = {
    val relTol: Double = 0.000000001
    val t: Double = abs((a - b).asInstanceOf[Double])
    val u = relTol * maxf(abs(a), abs(b))
    return t <= u
  }
  
  def sqrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: Int = 0
    while (i < 10) {
      guess = (guess + x / guess) / 2.0
      i = (i + 1).asInstanceOf[Int]
    }
    return guess
  }
  
  def main() = {
    val root2: Double = sqrtApprox(2.0)
    val pairs = ArrayBuffer(ArrayBuffer(100000000000000.02, 100000000000000.02), ArrayBuffer(100.01, 100.011), ArrayBuffer(10000000000000.002 / 10000.0, 1000000000.0000001), ArrayBuffer(0.001, 0.0010000001), ArrayBuffer(0.000000000000000000000101, 0.0), ArrayBuffer(root2 * root2, 2.0), ArrayBuffer((0 - root2) * root2, 0 - 2.0), ArrayBuffer(100000000000000000.0, 100000000000000000.0), ArrayBuffer(3.141592653589793, 3.141592653589793))
    for (pair <- pairs) {
      val a = pair(0)
      val b = pair(1)
      val s: String = if (isClose(a, b)) "≈" else "≉"
      println(String.valueOf(a) + " " + s + " " + String.valueOf(b))
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
