// Generated by Mochi v0.10.37 on 2025-07-22 20:22:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def shuffle(xs: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    var arr = xs
    var i: Int = 99
    while (i > 0) {
      val j = now() % i + 1
      val tmp: Any = arr(i)
      arr(i) = arr(j)
      arr(j) = tmp
      i = i - 1
    }
    return arr
  }
  
  def doTrials(trials: Int, np: Int, strategy: String) = {
    var pardoned: Int = 0
    var t: Int = 0
    while (t < trials) {
      var drawers: ArrayBuffer[Int] = ArrayBuffer()
      var i: Int = 0
      while (i < 100) {
        drawers = drawers :+ i
        i = i + 1
      }
      drawers = shuffle(drawers)
      var p: Int = 0
      var success: Boolean = true
      while (p < np) {
        var found: Boolean = false
        if (strategy == "optimal") {
          var prev: Int = p
          var d: Int = 0
          while (d < 50) {
            val this: Any = drawers(prev)
            if (this == p) {
              found = true
              break
            }
            prev = this
            d = d + 1
          }
        } else {
          var opened: ArrayBuffer[Boolean] = ArrayBuffer()
          var k: Int = 0
          while (k < 100) {
            opened = opened :+ false
            k = k + 1
          }
          var d: Int = 0
          while (d < 50) {
            var n = now() % 100
            while (opened(n)) {
              n = now() % 100
            }
            opened(n) = true
            if (drawers(n) == p) {
              found = true
              break
            }
            d = d + 1
          }
        }
        if (!found) {
          success = false
          break
        }
        p = p + 1
      }
      if (success) {
        pardoned = pardoned + 1
      }
      t = t + 1
    }
    val rf: Double = pardoned.toDouble / trials.toDouble * 100.0
    println("  strategy = " + strategy + "  pardoned = " + String.valueOf(pardoned) + " relative frequency = " + String.valueOf(rf) + "%")
  }
  
  def main() = {
    val trials: Int = 1000
    for (np <- ArrayBuffer(10, 100)) {
      println("Results from " + String.valueOf(trials) + " trials with " + String.valueOf(np) + " prisoners:\n")
      for (strat <- ArrayBuffer("random", "optimal")) {
        doTrials(trials, np, strat)
      }
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
