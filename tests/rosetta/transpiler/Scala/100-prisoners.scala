// Generated by Mochi v0.10.40 on 2025-07-25 10:49:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def shuffle(xs: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var arr: ArrayBuffer[Int] = xs
      var i: Int = 99
      while (i > 0) {
        val j = _now() % (i + 1)
        val tmp: Int = arr(i)
        arr(i) = arr(j)
        arr(j) = tmp
        i = (i - 1).asInstanceOf[Int]
      }
      return arr
    }
    def doTrials(trials: Int, np: Int, strategy: String): Unit = {
      var pardoned: Int = 0
      var t: Int = 0
      val _br1 = new Breaks
      _br1.breakable {
        while (t < trials) {
          var drawers: ArrayBuffer[Int] = ArrayBuffer()
          var i: Int = 0
          while (i < 100) {
            drawers = drawers :+ i
            i = (i + 1).asInstanceOf[Int]
          }
          drawers = shuffle(drawers)
          var p: Int = 0
          var success: Boolean = true
          val _br3 = new Breaks
          _br3.breakable {
            while (p < np) {
              var found: Boolean = false
              if (strategy == "optimal") {
                var prev: Int = p
                var d: Int = 0
                val _br4 = new Breaks
                _br4.breakable {
                  while (d < 50) {
                    val `this`: Int = drawers(prev)
                    if (`this` == p) {
                      found = true
                      _br4.break()
                    }
                    prev = `this`
                    d = (d + 1).asInstanceOf[Int]
                  }
                }
              } else {
                var opened: ArrayBuffer[Boolean] = ArrayBuffer()
                var k: Int = 0
                while (k < 100) {
                  opened = opened :+ false
                  k = (k + 1).asInstanceOf[Int]
                }
                var d: Int = 0
                val _br6 = new Breaks
                _br6.breakable {
                  while (d < 50) {
                    var n = Math.floorMod(_now(), 100)
                    while (opened(n)) {
                      n = (Math.floorMod(_now(), 100)).asInstanceOf[Int]
                    }
                    opened(n) = true
                    if (drawers(n) == p) {
                      found = true
                      _br6.break()
                    }
                    d = (d + 1).asInstanceOf[Int]
                  }
                }
              }
              if ((!found).asInstanceOf[Boolean]) {
                success = false
                _br3.break()
              }
              p = (p + 1).asInstanceOf[Int]
            }
          }
          if (success) {
            pardoned = (pardoned + 1).asInstanceOf[Int]
          }
          t = (t + 1).asInstanceOf[Int]
        }
      }
      val rf: Double = pardoned.toString.toDouble / trials.toString.toDouble * 100.0
      println("  strategy = " + strategy + "  pardoned = " + String.valueOf(pardoned) + " relative frequency = " + String.valueOf(rf) + "%")
    }
    def main(): Unit = {
      val trials: Int = 1000
      for (np <- ArrayBuffer(10, 100)) {
        println("Results from " + String.valueOf(trials) + " trials with " + String.valueOf(np) + " prisoners:\n")
        for (strat <- ArrayBuffer("random", "optimal")) {
          doTrials(trials, np.asInstanceOf[Int], strat.asInstanceOf[String])
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
