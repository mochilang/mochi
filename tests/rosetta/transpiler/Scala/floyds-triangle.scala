// Generated by Mochi v0.10.54 on 2025-08-02 11:30:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def floyd(n: BigInt): Any = {
    println("Floyd " + String.valueOf(n) + ":")
    val lowerLeftCorner: BigInt = n * (n - BigInt(1)) / BigInt(2) + BigInt(1)
    var lastInColumn: BigInt = lowerLeftCorner
    var lastInRow: BigInt = BigInt(1)
    var i: BigInt = BigInt(1)
    var row: BigInt = BigInt(1)
    var line: String = ""
    while (row <= n) {
      val w: Int = (String.valueOf(lastInColumn)).size
      if (i < lastInRow) {
        line = line + pad(String.valueOf(i), BigInt(w.toString)) + " "
        lastInColumn = lastInColumn + BigInt(1)
      } else {
        line = (line + pad(String.valueOf(i), BigInt(w.toString))).toString
        println(line)
        line = ""
        row = row + BigInt(1)
        lastInRow = lastInRow + row
        lastInColumn = lowerLeftCorner
      }
      i = i + BigInt(1)
    }
  }
  
  def pad(s: String, w: BigInt): String = {
    var t: String = s
    while ((t).size < w) {
      t = " " + t
    }
    return t
  }
  
  def main(args: Array[String]): Unit = {
    floyd(BigInt(5))
    floyd(BigInt(14))
  }
}
