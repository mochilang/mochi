// Generated by Mochi v0.10.56 on 2025-08-04 00:21:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floyd(n: BigInt): Any = {
  println("Floyd " + String.valueOf(n) + ":")
  val lowerLeftCorner: BigInt = n * (n - BigInt(1)) / BigInt(2) + BigInt(1)
  var lastInColumn: BigInt = lowerLeftCorner
  var lastInRow: BigInt = BigInt(1)
  var i: BigInt = BigInt(1)
  var row: BigInt = BigInt(1)
  var line: String = ""
  while (row <= n) {
    val w: Int = (String.valueOf(lastInColumn)).length
    if (i < lastInRow) {
      line = line + pad(String.valueOf(i), BigInt(w.toString.toDouble.toInt)) + " "
      lastInColumn = lastInColumn + BigInt(1)
    } else {
      line = line + pad(String.valueOf(i), BigInt(w.toString.toDouble.toInt))
      println(line)
      line = ""
      row = row + BigInt(1)
      lastInRow = lastInRow + row
      lastInColumn = lowerLeftCorner
    }
    i = i + BigInt(1)
  }
}

def pad(s: String, w: BigInt): String = {
  var t: String = s
  while (BigInt(((t).size).toInt) < w) {
    t = " " + t
  }
  return t
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    floyd(BigInt(5))
    floyd(BigInt(14))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
