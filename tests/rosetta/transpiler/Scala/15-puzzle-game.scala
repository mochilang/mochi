// Generated by Mochi v0.10.37 on 2025-07-22 20:22:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def randMove(): Int = {
    return now() % 4
  }
  
  def isSolved(): Boolean = {
    var i: Int = 0
    while (i < 16) {
      if (board(i) != solved(i)) {
        return false
      }
      i = i + 1
    }
    return true
  }
  
  def isValidMove(m: Int): Map[String,any] = {
    if (m == 0) {
      return Map("idx" -> empty - 4, "ok" -> empty / 4 > 0)
    }
    if (m == 1) {
      return Map("idx" -> empty + 4, "ok" -> empty / 4 < 3)
    }
    if (m == 2) {
      return Map("idx" -> empty + 1, "ok" -> empty % 4 < 3)
    }
    if (m == 3) {
      return Map("idx" -> empty - 1, "ok" -> empty % 4 > 0)
    }
    return Map("idx" -> 0, "ok" -> false)
  }
  
  def doMove(m: Int): Boolean = {
    val r = isValidMove(m)
    if (!r("ok")) {
      return false
    }
    val i: Int = empty
    val j = int(r("idx"))
    val tmp: Any = board(i)
    board(i) = board(j)
    board(j) = tmp
    empty = j
    moves = moves + 1
    return true
  }
  
  def shuffle(n: Int) = {
    var i: Int = 0
    while (i < n || isSolved()) {
      if (doMove(randMove())) {
        i = i + 1
      }
    }
  }
  
  def printBoard() = {
    var line: String = ""
    var i: Int = 0
    while (i < 16) {
      val `val`: Any = board(i)
      if (`val` == 0) {
        line = line + "  ."
      } else {
        val s = String.valueOf(`val`)
        if (`val` < 10) {
          line = line + "  " + s
        } else {
          line = line + " " + s
        }
      }
      if (i % 4 == 3) {
        println(line)
        line = ""
      }
      i = i + 1
    }
  }
  
  def playOneMove() = {
    while (true) {
      println("Enter move #" + String.valueOf(moves + 1) + " (U, D, L, R, or Q): ")
      val s = input()
      if (s == "") {
        continue
      }
      val c = s.slice(0, 1)
      var m: Int = 0
      if (c == "U" || c == "u") {
        m = 0
      } else {
        if (c == "D" || c == "d") {
          m = 1
        } else {
          if (c == "R" || c == "r") {
            m = 2
          } else {
            if (c == "L" || c == "l") {
              m = 3
            } else {
              if (c == "Q" || c == "q") {
                println("Quiting after " + String.valueOf(moves) + " moves.")
                quit = true
                return
              } else {
                println("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n" + "Upper or lowercase is accepted and only the first non-blank\n" + "character is important (i.e. you may enter \"up\" if you like).")
                continue
              }
            }
          }
        }
      }
      if (!doMove(m)) {
        println("That is not a valid move at the moment.")
        continue
      }
      return
    }
  }
  
  def play() = {
    println("Starting board:")
    while (!quit && isSolved() == false) {
      println("")
      printBoard()
      playOneMove()
    }
    if (isSolved()) {
      println("You solved the puzzle in " + String.valueOf(moves) + " moves.")
    }
  }
  
  def main() = {
    shuffle(50)
    play()
  }
  
  var board: ArrayBuffer[Int] = ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)
  
  val solved: ArrayBuffer[Int] = ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)
  
  var empty: Int = 15
  
  var moves: Int = 0
  
  var quit: Boolean = false
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
