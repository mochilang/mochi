// Generated by Mochi v0.10.50 on 2025-07-31 00:51:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def primeFactors(n: BigInt): ArrayBuffer[BigInt] = {
      var factors: ArrayBuffer[BigInt] = ArrayBuffer()
      var last: BigInt = BigInt(0)
      var x: BigInt = n
      while (x % BigInt(2) == BigInt(0)) {
        if (last == BigInt(2)) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
        }
        factors = factors :+ BigInt(2)
        last = BigInt(2)
        x = (x / BigInt(2)).asInstanceOf[BigInt]
      }
      var p: BigInt = BigInt(3)
      while (p * p <= x) {
        while (x % p == BigInt(0)) {
          if (last == p) {
            return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
          }
          factors = factors :+ p
          last = p
          x = (x / p).asInstanceOf[BigInt]
        }
        p = (p + BigInt(2)).asInstanceOf[BigInt]
      }
      if (x > BigInt(1)) {
        if (last == x) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
        }
        factors = factors :+ x
      }
      return factors
    }
    def isGiuga(n: BigInt): Boolean = {
      val facs: ArrayBuffer[BigInt] = primeFactors(n)
      if ((facs).size <= BigInt(2)) {
        return false
      }
      for (f <- facs) {
        if ((n / f - BigInt(1)) % f != BigInt(0)) {
          return false
        }
      }
      return true
    }
    def main(): Any = {
      var known: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(30), BigInt(858), BigInt(1722), BigInt(66198))
      var nums: ArrayBuffer[BigInt] = ArrayBuffer()
      for (n <- known) {
        if (isGiuga(n)) {
          nums = nums :+ n
        }
      }
      println("The first 4 Giuga numbers are:")
      println(nums)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
