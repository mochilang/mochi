// Generated by Mochi v0.10.57 on 2025-08-04 19:30:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Foo(var value: BigInt) {
  def Method(b: BigInt): BigInt = {
    return value + b
  }
}

def pow(base: Double, exp: Double): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  while (i < BigInt(exp.toString.toDouble.toInt)) {
    result = result * base
    i = i + 1
  }
  return result
}

def PowN(b: Double): (Double) => Double = {
  return (((e: Double) => pow(b, e))).asInstanceOf[(Double) => Double]
}

def PowE(e: Double): (Double) => Double = {
  return (((b: Double) => pow(b, e))).asInstanceOf[(Double) => Double]
}

def main(): Any = {
  val pow2: (Double) => Double = PowN(2.0)
  val cube: (Double) => Double = PowE(3.0)
  println("2^8 = " + String.valueOf(pow2(8.0)))
  println("4\u00b3 = " + String.valueOf(cube(4.0)))
  var a: Foo = Foo(2)
  val fn1: (BigInt) => Any = ((b: BigInt) => a.Method(b))
  val fn2: (Foo, BigInt) => Any = ((f: Foo, b: BigInt) => f.Method(b))
  println("2 + 2 = " + String.valueOf(a.Method(2)))
  println("2 + 3 = " + String.valueOf(fn1(3)))
  println("2 + 4 = " + String.valueOf(fn2(a, 4)))
  println("3 + 5 = " + String.valueOf(fn2(Foo(3), 5)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
