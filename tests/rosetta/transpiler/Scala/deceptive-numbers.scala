// Generated by Mochi v0.10.52 on 2025-08-01 19:04:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      if (n % BigInt(2) == BigInt(0)) {
        return n == BigInt(2)
      }
      if (n % BigInt(3) == BigInt(0)) {
        return n == BigInt(3)
      }
      var d: BigInt = BigInt(5)
      while (d * d <= n) {
        if (n % d == BigInt(0)) {
          return false
        }
        d = d + BigInt(2)
        if (n % d == BigInt(0)) {
          return false
        }
        d = d + BigInt(4)
      }
      return true
    }
    def listToString(xs: ArrayBuffer[BigInt]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        s = s + String.valueOf(xs((i).toInt))
        if (i < (xs).size - BigInt(1).toInt) {
          s = s + " "
        }
        i = i + BigInt(1)
      }
      return s + "]"
    }
    def main(): Any = {
      var count: BigInt = BigInt(0)
      val limit: BigInt = BigInt(25)
      var n: BigInt = BigInt(17)
      var repunit: BigInt = BigInt("1111111111111111")
      val eleven: BigInt = BigInt(11)
      val hundred: BigInt = BigInt(100)
      var deceptive: ArrayBuffer[BigInt] = ArrayBuffer()
      while (count < limit) {
        if ((((!isPrime(n)).asInstanceOf[Boolean] && n % BigInt(3) != BigInt(0)).asInstanceOf[Boolean] && n % BigInt(5) != BigInt(0)).asInstanceOf[Boolean]) {
          val bn: BigInt = BigInt(n.toInt)
          if (repunit % bn == BigInt(0)) {
            deceptive = deceptive :+ n
            count = count + BigInt(1)
          }
        }
        n = n + BigInt(2)
        repunit = repunit * hundred + eleven
      }
      println("The first " + String.valueOf(limit) + " deceptive numbers are:")
      println(listToString(deceptive))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
