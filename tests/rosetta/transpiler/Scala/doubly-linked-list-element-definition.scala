// Generated by Mochi v0.10.52 on 2025-08-01 19:08:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def Node(value: String, next: Any, prev: Any): scala.collection.mutable.Map[String,Any] = {
      return (scala.collection.mutable.Map("value" -> (value), "next" -> (next), "prev" -> (prev))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    }
    def main(): Any = {
      var a: scala.collection.mutable.Map[String,Any] = Node("A", null, null)
      var b: scala.collection.mutable.Map[String,Any] = Node("B", null, a)
      a.update("next", b)
      var c: scala.collection.mutable.Map[String,Any] = Node("C", null, b)
      b.update("next", c)
      var p: scala.collection.mutable.Map[String,Any] = a
      var line: String = ""
      while (p != null) {
        line = line + (p("value")).toString
        p = (p("next")).asInstanceOf[scala.collection.mutable.Map[String,Any]]
        if (p != null) {
          line = line + " "
        }
      }
      println(line)
      p = c
      line = ""
      while (p != null) {
        line = line + (p("value")).toString
        p = (p("prev")).asInstanceOf[scala.collection.mutable.Map[String,Any]]
        if (p != null) {
          line = line + " "
        }
      }
      println(line)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
