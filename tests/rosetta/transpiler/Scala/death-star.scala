// Generated by Mochi v0.10.57 on 2025-08-04 21:10:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class V3(var x: Double, var y: Double, var z: Double)

case class Sphere(var cx: Double, var cy: Double, var cz: Double, var r: Double)

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def powf(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  while (i < exp) {
    result = result * base
    i = i + 1
  }
  return result
}

def normalize(v: V3): V3 = {
  val len: Double = sqrtApprox(v.x * v.x + v.y * v.y + v.z * v.z)
  return V3(v.x / len, v.y / len, v.z / len)
}

def dot(a: V3, b: V3): Double = {
  val d: Double = a.x * b.x + a.y * b.y + a.z * b.z
  if (d < 0.0) {
    return (-d).toString.toDouble
  }
  return 0.0
}

def hitSphere(s: Sphere, x: Double, y: Double): scala.collection.mutable.Map[String,Any] = {
  val dx: Double = x - s.cx
  val dy: Double = y - s.cy
  val zsq: Double = s.r * s.r - (dx * dx + dy * dy)
  if (zsq < 0.0) {
    return (scala.collection.mutable.Map("hit" -> (false))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  }
  val z: Double = sqrtApprox(zsq)
  return (scala.collection.mutable.Map("hit" -> (true), "z1" -> (s.cz - z), "z2" -> (s.cz + z))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def main(): Any = {
  val shades: String = ".:!*oe&#%@"
  var light: V3 = normalize(V3(-50.0, 30.0, 50.0))
  val pos: Sphere = Sphere(20.0, 20.0, 0.0, 20.0)
  val neg: Sphere = Sphere(1.0, 1.0, -6.0, 20.0)
  var yi: BigInt = 0
  val _ct2 = new Breaks
  while (yi <= 40) {
    _ct2.breakable {
      val y: Double = yi.toString.toDouble + 0.5
      var line: String = ""
      var xi: BigInt = 0 - 20
      val _ct3 = new Breaks
      while (xi <= 60) {
        _ct3.breakable {
          val x: Double = (xi.toString.toDouble - pos.cx) / 2.0 + 0.5 + pos.cx
          val hb: scala.collection.mutable.Map[String,Any] = hitSphere(pos, x, y)
          if ((!(hb.getOrElse("hit", null)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            line = line + " "
            xi = xi + 1
            _ct3.break()
          }
          val zb1: Any = hb.getOrElse("z1", null)
          val zb2: Any = hb.getOrElse("z2", null)
          val hs: scala.collection.mutable.Map[String,Any] = hitSphere(neg, x, y)
          var hitRes: BigInt = 1
          if ((!(hs.getOrElse("hit", null)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            hitRes = 1
          } else {
            if ((hs.getOrElse("z1", null)).toString > zb1.toString) {
              hitRes = 1
            } else {
              if ((hs.getOrElse("z2", null)).toString > zb2.toString) {
                hitRes = 0
              } else {
                if ((hs.getOrElse("z2", null)).toString > zb1.toString) {
                  hitRes = 2
                } else {
                  hitRes = 1
                }
              }
            }
          }
          if (hitRes == 0) {
            line = line + " "
            xi = xi + 1
            _ct3.break()
          }
          var vec: V3 = null
          if (hitRes == 1) {
            vec = V3(x - pos.cx, y - pos.cy, zb1.toString.toDouble - pos.cz)
          } else {
            vec = V3(neg.cx - x, neg.cy - y, neg.cz - (hs.getOrElse("z2", null)).toString.toDouble)
          }
          vec = normalize(vec)
          var b: Double = powf(dot(light, vec), 2) + 0.5
          var intensity: Int = ((1.0 - b) * ((shades).size).toString.toDouble).toInt
          if (BigInt(intensity.toString.toDouble.toInt) < 0) {
            intensity = 0.toInt
          }
          if (intensity >= BigInt(((shades).size).toInt)) {
            intensity = (shades).size - BigInt(1)
          }
          line = line + shades.slice((intensity).toInt, (intensity + BigInt(1)).toInt)
          xi = xi + 1
        }
      }
      println(line)
      yi = yi + 1
    }
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
