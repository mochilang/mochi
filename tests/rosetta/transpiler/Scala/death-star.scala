// Generated by Mochi v0.10.52 on 2025-08-01 18:52:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class V3(var x: Double, var y: Double, var z: Double)

case class Sphere(var cx: Double, var cy: Double, var cz: Double, var r: Double)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def sqrtApprox(x: Double): Double = {
      if (x <= 0.0) {
        return 0.0
      }
      var guess: Double = x
      var i: BigInt = BigInt(0)
      while (i < BigInt(20)) {
        guess = (guess + x / guess) / 2.0
        i = i + BigInt(1)
      }
      return guess
    }
    def powf(base: Double, exp: BigInt): Double = {
      var result: Double = 1.0
      var i: BigInt = BigInt(0)
      while (i < exp) {
        result = (result * base).toString.toDouble
        i = i + BigInt(1)
      }
      return result
    }
    def normalize(v: V3): V3 = {
      val len: Double = sqrtApprox((v.x * v.x).toString.toDouble + (v.y * v.y).toString.toDouble + v.z * v.z)
      return V3(v.x / len, v.y / len, v.z / len)
    }
    def dot(a: V3, b: V3): Double = {
      val d: Double = (a.x * b.x).toString.toDouble + (a.y * b.y).toString.toDouble + a.z * b.z
      if (d < 0.0) {
        return (-d).toString.toDouble
      }
      return 0.0
    }
    def hitSphere(s: Sphere, x: Double, y: Double): scala.collection.mutable.Map[String,Any] = {
      val dx = x - s.cx
      val dy = y - s.cy
      val zsq: Double = s.r * s.r - ((dx * dx).toString.toDouble + (dy * dy).toString.toDouble)
      if (zsq < 0.0) {
        return (scala.collection.mutable.Map("hit" -> (false))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
      }
      val z: Double = sqrtApprox(zsq)
      return (scala.collection.mutable.Map("hit" -> (true), "z1" -> (s.cz - z), "z2" -> (s.cz + z))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    }
    def main(): Any = {
      val shades: String = ".:!*oe&#%@"
      var light: V3 = normalize(V3(-50.0, 30.0, 50.0))
      val pos: Sphere = Sphere(20.0, 20.0, 0.0, 20.0)
      val neg: Sphere = Sphere(1.0, 1.0, -6.0, 20.0)
      var yi: BigInt = BigInt(0)
      val _ct2 = new Breaks
      while (yi <= BigInt(40)) {
        _ct2.breakable {
          val y: Double = yi.toString.toDouble + 0.5
          var line: String = ""
          var xi: BigInt = BigInt(0) - BigInt(20)
          val _ct3 = new Breaks
          while (xi <= BigInt(60)) {
            _ct3.breakable {
              val x: Double = (xi.toString.toDouble - pos.cx) / 2.0 + 0.5 + pos.cx
              val hb: scala.collection.mutable.Map[String,Any] = hitSphere(pos, x, y)
              if ((!(hb("hit")).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
                line = line + " "
                xi = xi + BigInt(1)
                _ct3.break()
              }
              val zb1 = hb("z1")
              val zb2 = hb("z2")
              val hs: scala.collection.mutable.Map[String,Any] = hitSphere(neg, x, y)
              var hitRes: BigInt = BigInt(1)
              if ((!(hs("hit")).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
                hitRes = BigInt(1)
              } else {
                if ((hs("z1")).toString > zb1.toString) {
                  hitRes = BigInt(1)
                } else {
                  if ((hs("z2")).toString > zb2.toString) {
                    hitRes = BigInt(0)
                  } else {
                    if ((hs("z2")).toString > zb1.toString) {
                      hitRes = BigInt(2)
                    } else {
                      hitRes = BigInt(1)
                    }
                  }
                }
              }
              if (hitRes == BigInt(0)) {
                line = line + " "
                xi = xi + BigInt(1)
                _ct3.break()
              }
              var vec: V3 = null
              if (hitRes == BigInt(1)) {
                vec = V3(x - pos.cx, y - pos.cy, zb1.toString.toDouble - pos.cz)
              } else {
                vec = V3(neg.cx - x, neg.cy - y, neg.cz - (hs("z2")).toString.toDouble)
              }
              vec = normalize(vec)
              var b: Double = powf(dot(light, vec), BigInt(2)) + 0.5
              var intensity: Int = (1.0 - b) * ((shades).size).toString.toDouble.toInt
              if (intensity < BigInt(0)) {
                intensity = BigInt(0)
              }
              if (intensity >= (shades).size) {
                intensity = (shades).size - BigInt(1).toInt
              }
              line = line + shades.slice((intensity).toInt, (intensity + BigInt(1).toInt).toInt)
              xi = xi + BigInt(1)
            }
          }
          println(line)
          yi = yi + BigInt(1)
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
