// Generated by Mochi v0.10.52 on 2025-08-01 19:20:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ord(ch: String): BigInt = {
  if (ch == "5") {
    return BigInt(53)
  }
  if (ch == "T") {
    return BigInt(84)
  }
  if (ch == " ") {
    return BigInt(32)
  }
  if (ch == "\u00e9") {
    return BigInt(233)
  }
  if (ch == "\uD83D\uDC3A") {
    return BigInt(128058)
  }
  return BigInt(0)
}

def hex(n: BigInt): String = {
  val digits: String = "0123456789abcdef"
  if (n == BigInt(0)) {
    return "0x0"
  }
  var m: BigInt = n
  var out: String = ""
  while (m > BigInt(0)) {
    val d: BigInt = m % BigInt(16)
    out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
    m = m / BigInt(16)
  }
  return "0x" + out
}

def quote(s: String): String = {
  return "'" + s + "'"
}

def analyze(s: String): Any = {
  val le: Int = (s).size
  println("Analyzing " + quote(s) + " which has a length of " + String.valueOf(le) + ":")
  if (le > BigInt(1)) {
    var i: BigInt = BigInt(1)
    while (i < le) {
      val cur: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
      val prev: String = s.slice((i - BigInt(1)).toInt, (i).toInt)
      if (cur != prev) {
        println("  Not all characters in the string are the same.")
        println("  " + quote(cur) + " (" + hex(ord(cur)) + ") is different at position " + String.valueOf(i + BigInt(1)) + ".")
        println("")
        return
      }
      i = i + BigInt(1)
    }
  }
  println("  All characters in the string are the same.")
  println("")
  return null
}

def main(): Any = {
  val strings: ArrayBuffer[String] = ArrayBuffer("", "   ", "2", "333", ".55", "tttTTT", "4444 444k", "p\u00e9p\u00e9", "\uD83D\uDC36\uD83D\uDC36\uD83D\uDC3A\uD83D\uDC36", "\uD83C\uDF84\uD83C\uDF84\uD83C\uDF84\uD83C\uDF84")
  var i: BigInt = BigInt(0)
  while (i < (strings).size) {
    analyze(strings((i).toInt))
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
