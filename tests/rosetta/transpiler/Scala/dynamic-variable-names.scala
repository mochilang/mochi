// Generated by Mochi v0.10.52 on 2025-08-01 20:09:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def parseIntStr(str: String): BigInt = {
  var i: BigInt = BigInt(0)
  var neg: Boolean = false
  if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
    neg = true
    i = BigInt(1)
  }
  var n: BigInt = BigInt(0)
  val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
  while (i < (str).size) {
    n = n * BigInt(10) + digits(str.slice((i).toInt, (i + BigInt(1)).toInt))
    i = i + BigInt(1)
  }
  if (neg) {
    n = BigInt(0) - n
  }
  return n
}

def main(): Any = {
  var n: BigInt = BigInt(0)
  while (n < BigInt(1) || n > BigInt(5)) {
    println("How many integer variables do you want to create (max 5) : ")
    val line = Option(scala.io.StdIn.readLine()).getOrElse("q")
    if ((line).size > BigInt(0)) {
      n = (_parseIntStr(line, BigInt(10))).asInstanceOf[BigInt]
    }
  }
  var vars: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map()
  println("OK, enter the variable names and their values, below\n")
  var i: BigInt = BigInt(1)
  val _br2 = new Breaks
  val _ct2 = new Breaks
  _br2.breakable {
    while (i <= n) {
      _ct2.breakable {
        println("\n  Variable " + String.valueOf(i) + "\n")
        println("    Name  : ")
        val name = Option(scala.io.StdIn.readLine()).getOrElse("q")
        if ((vars.contains(name)).asInstanceOf[Boolean]) {
          println("  Sorry, you've already created a variable of that name, try again")
          _ct2.break()
        }
        var value: BigInt = BigInt(0)
        val _br3 = new Breaks
        val _ct3 = new Breaks
        _br3.breakable {
          while (true) {
            _ct3.breakable {
              println("    Value : ")
              val valstr = Option(scala.io.StdIn.readLine()).getOrElse("q")
              if ((valstr).size == BigInt(0)) {
                println("  Not a valid integer, try again")
                _ct3.break()
              }
              var ok: Boolean = true
              var j: BigInt = BigInt(0)
              var neg: Boolean = false
              if (valstr.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-") {
                neg = true
                j = BigInt(1)
              }
              val _br4 = new Breaks
              _br4.breakable {
                while (j < (valstr).size) {
                  val ch: String = valstr.slice((j).toInt, (j + BigInt(1)).toInt)
                  if ((ch < "0" || ch > "9").asInstanceOf[Boolean]) {
                    ok = false
                    _br4.break()
                  }
                  j = j + BigInt(1)
                }
              }
              if ((!ok).asInstanceOf[Boolean]) {
                println("  Not a valid integer, try again")
                _ct3.break()
              }
              value = (_parseIntStr(valstr, BigInt(10))).asInstanceOf[BigInt]
              _br3.break()
            }
          }
        }
        vars.update(name, value)
        i = i + BigInt(1)
      }
    }
  }
  println("\nEnter q to quit")
  while (true) {
    println("\nWhich variable do you want to inspect : ")
    val name = Option(scala.io.StdIn.readLine()).getOrElse("q")
    if (name.toLowerCase() == "q") {
      return
    }
    if ((vars.contains(name)).asInstanceOf[Boolean]) {
      println("It's value is " + String.valueOf(vars(name)))
    } else {
      println("Sorry there's no variable of that name, try again")
    }
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
