// Generated by Mochi v0.10.39 on 2025-07-25 00:49:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def pow_int(base: Int, exp: Int): Int = {
    var result: Int = 1
    var b: Int = base
    var e: Int = exp
    while (e > 0) {
      if (e % 2 == 1) {
        result = (result * b).asInstanceOf[Int]
      }
      b = (b * b).asInstanceOf[Int]
      e = (e / 2).asInstanceOf[Int]
    }
    return result
  }
  
  def pow_big(base: BigInt, exp: Int): BigInt = {
    var result: BigInt = 1
    var b: BigInt = base
    var e: Int = exp
    while (e > 0) {
      if (e % 2 == 1) {
        result = (result * b).asInstanceOf[BigInt]
      }
      b = (b * b).asInstanceOf[BigInt]
      e = (e / 2).asInstanceOf[Int]
    }
    return result
  }
  
  var e1: Int = pow_int(3, 2)
  
  var e2: Int = pow_int(4, e1)
  
  var base: BigInt = 5
  
  var x: BigInt = pow_big(base, e2)
  
  var s = String.valueOf(x)
  
  def main(args: Array[String]): Unit = {
    println(List("5^(4^(3^2)) has", (s).size, "digits:", s.substring(0, 20), "...", s.substring((s).size - 20, (s).size)).mkString(" "))
  }
}
