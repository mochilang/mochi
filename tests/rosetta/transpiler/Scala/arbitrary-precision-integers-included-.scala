// Generated by Mochi v0.10.40 on 2025-07-25 21:07:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow_int(base: Int, exp: Int): Int = {
      var result: Int = 1
      var b: Int = base
      var e: Int = exp
      while (e > 0) {
        if (Math.floorMod(e, 2) == 1) {
          result = (result * b).asInstanceOf[Int]
        }
        b = (b * b).asInstanceOf[Int]
        e = (e / 2).asInstanceOf[Int]
      }
      return result
    }
    def pow_big(base: BigInt, exp: Int): BigInt = {
      var result: BigInt = 1
      var b: BigInt = base
      var e: Int = exp
      while (e > 0) {
        if (Math.floorMod(e, 2) == 1) {
          result = (result * b).asInstanceOf[BigInt]
        }
        b = (b * b).asInstanceOf[BigInt]
        e = (e / 2).asInstanceOf[Int]
      }
      return result
    }
    var e1: Int = pow_int(3, 2)
    var e2: Int = pow_int(4, e1)
    var base: BigInt = 5
    var x: BigInt = pow_big(base, e2)
    var s = String.valueOf(x)
    println(List("5^(4^(3^2)) has", (s).size, "digits:", s.substring(0, 20), "...", s.substring((s).size - 20, (s).size)).mkString(" "))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
