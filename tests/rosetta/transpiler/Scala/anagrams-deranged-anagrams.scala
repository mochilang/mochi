// Generated by Mochi v0.10.39 on 2025-07-25 00:24:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  def sortRunes(s: String): String = {
    var arr: ArrayBuffer[String] = ArrayBuffer()
    var i: Int = 0
    while (i < (s).size) {
      arr = arr :+ s.slice(i, i + 1)
      i = (i + 1).asInstanceOf[Int]
    }
    var n: Int = (arr).size
    var m: Int = 0
    while (m < n) {
      var j: Int = 0
      while (j < (n - 1).asInstanceOf[Int]) {
        if (arr(j) > arr(j + 1)) {
          val tmp: String = arr(j)
          arr(j) = arr(j + 1)
          arr(j + 1) = tmp
        }
        j = (j + 1).asInstanceOf[Int]
      }
      m = (m + 1).asInstanceOf[Int]
    }
    var out: String = ""
    i = 0
    while (i < n) {
      out = (out + arr(i)).asInstanceOf[String]
      i = (i + 1).asInstanceOf[Int]
    }
    return out
  }
  
  def deranged(a: String, b: String): Boolean = {
    if ((a).size != (b).size) {
      return false
    }
    var i: Int = 0
    while (i < (a).size) {
      if (a.slice(i, i + 1) == b.slice(i, i + 1)) {
        return false
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return true
  }
  
  def main() = {
    val words: ArrayBuffer[String] = ArrayBuffer("constitutionalism", "misconstitutional")
    var m: Map[String,ArrayBuffer[String]] = Map()
    var bestLen: Int = 0
    var w1: String = ""
    var w2: String = ""
    val _br5 = new Breaks
    val _ct5 = new Breaks
    _br5.breakable {
      for (w <- words) {
        _ct5.breakable {
          if ((w).size <= bestLen) {
            _ct5.break()
          }
          val k: String = sortRunes(w.toString)
          if ((!(m.contains(k)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            m(k) = ArrayBuffer(w)
            _ct5.break()
          }
          val _br6 = new Breaks
          _br6.breakable {
            for (c <- m(k)) {
              if (deranged(w.toString, c.toString)) {
                bestLen = (w).size
                w1 = c.asInstanceOf[String]
                w2 = w.asInstanceOf[String]
                _br6.break()
              }
            }
          }
          m(k) = m(k) :+ w
        }
      }
    }
    println(w1 + " " + w2 + " : Length " + String.valueOf(bestLen))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
