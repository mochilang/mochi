// Generated by Mochi v0.10.57 on 2025-08-04 21:52:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def collapse(s: String): ArrayBuffer[Any] = {
  var i: BigInt = 0
  var prev: String = ""
  var res: String = ""
  var orig: BigInt = BigInt((s).size)
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch != prev) {
      res = res + ch
      prev = ch
    }
    i = i + 1
  }
  return ArrayBuffer(res, orig, BigInt((res).size))
}

def main(): Any = {
  val strings: ArrayBuffer[String] = ArrayBuffer("", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..111111111111111111111111111111111111111111111111111111111111111777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "\uD83D\uDE0D\uD83D\uDE00\uD83D\uDE4C\uD83D\uDC83\uD83D\uDE0D\uD83D\uDE0D\uD83D\uDE0D\uD83D\uDE4C")
  var idx: BigInt = 0
  while (idx < BigInt((strings).size)) {
    val s: String = strings((idx.toInt).toInt)
    val r: ArrayBuffer[Any] = collapse(s)
    val cs: Any = r((0.toInt).toInt)
    val olen: Any = r((1.toInt).toInt)
    val clen: Any = r((2.toInt).toInt)
    println("original : length = " + String.valueOf(olen) + ", string = \u00ab\u00ab\u00ab" + s + "\u00bb\u00bb\u00bb")
    println("collapsed: length = " + String.valueOf(clen) + ", string = \u00ab\u00ab\u00ab" + cs + "\u00bb\u00bb\u00bb\n")
    idx = idx + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
