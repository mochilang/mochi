// Generated by Mochi v0.10.40 on 2025-07-25 20:17:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def trimLeftZeros(s: String): String = {
    var i: Int = 0
    while (i < (s).size && s.substring(i, i + 1) == "0") {
      i = (i + 1).asInstanceOf[Int]
    }
    return s.substring(i, (s).size)
  }
  
  def btString(_s: String): Map[String,Any] = {
    var s: String = _s
    s = trimLeftZeros(s)
    var b: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = (s).size - 1
    while (i >= 0) {
      val ch: String = s.substring(i, i + 1)
      if (ch == "+") {
        b = b :+ 1
      } else {
        if (ch == "0") {
          b = b :+ 0
        } else {
          if (ch == "-") {
            b = b :+ 0 - 1
          } else {
            return Map("bt" -> (ArrayBuffer()), "ok" -> (false))
          }
        }
      }
      i = (i - 1).asInstanceOf[Int]
    }
    return Map("bt" -> (b), "ok" -> (true))
  }
  
  def btToString(b: ArrayBuffer[Int]): String = {
    if ((b).size == 0) {
      return "0"
    }
    var r: String = ""
    var i: Int = (b).size - 1
    while (i >= 0) {
      val d: Int = b(i)
      if (d == 0 - 1) {
        r = r + "-"
      } else {
        if (d == 0) {
          r = r + "0"
        } else {
          r = r + "+"
        }
      }
      i = (i - 1).asInstanceOf[Int]
    }
    return r
  }
  
  def btInt(i: Int): ArrayBuffer[Int] = {
    if (i == 0) {
      return (ArrayBuffer()).asInstanceOf[ArrayBuffer[Int]]
    }
    var n: Int = i
    var b: ArrayBuffer[Int] = ArrayBuffer()
    while (n != 0) {
      var m = Math.floorMod(n, 3)
      n = (n / 3).asInstanceOf[Int]
      if (m == 2) {
        m = 0 - 1
        n = (n + 1).asInstanceOf[Int]
      } else {
        if (m == 0 - 2) {
          m = 1
          n = (n - 1).asInstanceOf[Int]
        }
      }
      b = b :+ m
    }
    return b
  }
  
  def btToInt(b: ArrayBuffer[Int]): Int = {
    var r: Int = 0
    var pt: Int = 1
    var i: Int = 0
    while (i < (b).size) {
      r = (r + b(i) * pt).asInstanceOf[Int]
      pt = (pt * 3).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    return r
  }
  
  def btNeg(b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    var r: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < (b).size) {
      r = r :+ 0 - b(i)
      i = (i + 1).asInstanceOf[Int]
    }
    return r
  }
  
  def btAdd(a: ArrayBuffer[Int], b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    return btInt((btToInt(a) + btToInt(b)).asInstanceOf[Int])
  }
  
  def btMul(a: ArrayBuffer[Int], b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    return btInt((btToInt(a) * btToInt(b)).asInstanceOf[Int])
  }
  
  def padLeft(s: String, w: Int): String = {
    var r: String = s
    while ((r).size < w) {
      r = " " + r
    }
    return r
  }
  
  def show(label: String, b: ArrayBuffer[Int]): Any = {
    val l: String = padLeft(label, 7)
    val bs: String = padLeft(btToString(b), 12)
    val is: String = padLeft((String.valueOf(btToInt(b))).asInstanceOf[String], 7)
    println(l + " " + bs + " " + is)
  }
  
  def main(): Any = {
    val ares: Map[String,Any] = btString("+-0++0+")
    val a = ares.getOrElse("bt", null.asInstanceOf[Any])
    val b: ArrayBuffer[Int] = btInt(0 - 436)
    val cres: Map[String,Any] = btString("+-++-")
    val c = cres.getOrElse("bt", null.asInstanceOf[Any])
    show("a:", a.asInstanceOf[ArrayBuffer[Int]])
    show("b:", b)
    show("c:", c.asInstanceOf[ArrayBuffer[Int]])
    show("a(b-c):", btMul(a.asInstanceOf[ArrayBuffer[Int]], btAdd(b, btNeg(c.asInstanceOf[ArrayBuffer[Int]]))))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
