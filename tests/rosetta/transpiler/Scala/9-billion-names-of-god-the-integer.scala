// Generated by Mochi v0.10.40 on 2025-07-25 19:18:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def bigTrim(_a: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var a: ArrayBuffer[Int] = _a
      var n: Int = (a).size
      while (n > 1 && a(n - 1) == 0) {
        a = a.slice(0, n - 1)
        n = (n - 1).asInstanceOf[Int]
      }
      return a
    }
    def bigFromInt(x: Int): ArrayBuffer[Int] = {
      if (x == 0) {
        return ArrayBuffer(0)
      }
      var digits: ArrayBuffer[Int] = ArrayBuffer()
      var n: Int = x
      while (n > 0) {
        digits = digits :+ Math.floorMod(n, 10)
        n = (n / 10).asInstanceOf[Int]
      }
      return digits
    }
    def bigAdd(a: ArrayBuffer[Int], b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var res: ArrayBuffer[Int] = ArrayBuffer()
      var carry: Int = 0
      var i: Int = 0
      while ((i < (a).size || i < (b).size).asInstanceOf[Boolean] || carry > 0) {
        var av: Int = 0
        if (i < (a).size) {
          av = a(i)
        }
        var bv: Int = 0
        if (i < (b).size) {
          bv = b(i)
        }
        var s = av + bv + carry
        res = res :+ Math.floorMod(s, 10)
        carry = (s / 10).asInstanceOf[Int]
        i = (i + 1).asInstanceOf[Int]
      }
      return bigTrim(res)
    }
    def bigSub(a: ArrayBuffer[Int], b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var res: ArrayBuffer[Int] = ArrayBuffer()
      var borrow: Int = 0
      var i: Int = 0
      while (i < (a).size) {
        var av: Int = a(i)
        var bv: Int = 0
        if (i < (b).size) {
          bv = b(i)
        }
        var diff = av - bv - borrow
        if (diff < 0) {
          diff = (diff + 10).asInstanceOf[Int]
          borrow = 1
        } else {
          borrow = 0
        }
        res = res :+ diff
        i = (i + 1).asInstanceOf[Int]
      }
      return bigTrim(res)
    }
    def bigToString(a: ArrayBuffer[Int]): String = {
      var s: String = ""
      var i: Int = (a).size - 1
      while (i >= 0) {
        s = (s + String.valueOf(a(i))).asInstanceOf[String]
        i = (i - 1).asInstanceOf[Int]
      }
      return s
    }
    def minInt(a: Int, b: Int): Int = {
      if (a < b) {
        return a
      } else {
        return b
      }
    }
    def cumu(n: Int): ArrayBuffer[ArrayBuffer[Int]] = {
      var cache: ArrayBuffer[ArrayBuffer[ArrayBuffer[Int]]] = ArrayBuffer(ArrayBuffer(bigFromInt(1)))
      var y: Int = 1
      while (y <= n) {
        var row: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer(bigFromInt(0))
        var x: Int = 1
        while (x <= y) {
          val `val`: ArrayBuffer[Int] = cache(y - x)(minInt(x, (y - x).asInstanceOf[Int]))
          row = row :+ bigAdd(row((row).size - 1), `val`)
          x = (x + 1).asInstanceOf[Int]
        }
        cache = cache :+ row
        y = (y + 1).asInstanceOf[Int]
      }
      return cache(n)
    }
    def row(n: Int): ArrayBuffer[String] = {
      val e: ArrayBuffer[ArrayBuffer[Int]] = cumu(n)
      var out: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < n) {
        val diff: ArrayBuffer[Int] = bigSub(e(i + 1), e(i))
        out = out :+ bigToString(diff)
        i = (i + 1).asInstanceOf[Int]
      }
      return out
    }
    println("rows:")
    var x: Int = 1
    while (x < 11) {
      val r: ArrayBuffer[String] = row(x)
      var line: String = ""
      var i: Int = 0
      while (i < (r).size) {
        line = line + " " + r(i) + " "
        i = (i + 1).asInstanceOf[Int]
      }
      println(line)
      x = (x + 1).asInstanceOf[Int]
    }
    println("")
    println("sums:")
    for (num <- ArrayBuffer(23, 123, 1234)) {
      val r: ArrayBuffer[ArrayBuffer[Int]] = cumu(num.asInstanceOf[Int])
      println(String.valueOf(num) + " " + bigToString(r((r).size - 1)))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
