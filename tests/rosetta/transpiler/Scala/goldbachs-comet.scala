// Generated by Mochi v0.10.50 on 2025-07-31 00:51:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def sieve(limit: BigInt): ArrayBuffer[Boolean] = {
      var primes: ArrayBuffer[Boolean] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < limit) {
        primes = primes :+ true
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      primes((BigInt(0)).toInt) = false
      primes((BigInt(1)).toInt) = false
      var p: BigInt = BigInt(2)
      while (p * p < limit) {
        if (primes((p).toInt)) {
          var k = p * p
          while (k < limit) {
            primes((k).toInt) = false
            k = (k + p).asInstanceOf[BigInt]
          }
        }
        p = (p + BigInt(1)).asInstanceOf[BigInt]
      }
      return primes
    }
    def goldbachCount(primes: ArrayBuffer[Boolean], n: BigInt): BigInt = {
      var c: BigInt = BigInt(0)
      var i: BigInt = BigInt(1)
      while (i <= n / BigInt(2)) {
        if ((primes((i).toInt) && primes((n - i).toInt)).asInstanceOf[Boolean]) {
          c = (c + BigInt(1)).asInstanceOf[BigInt]
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return c
    }
    def pad(n: BigInt): String = {
      if (n < BigInt(10)) {
        return "  " + String.valueOf(n)
      }
      if (n < BigInt(100)) {
        return " " + String.valueOf(n)
      }
      return String.valueOf(n)
    }
    def main(): Any = {
      var primes: ArrayBuffer[Boolean] = sieve(BigInt(1000))
      println("The first 100 Goldbach numbers:")
      var line: String = ""
      var n: BigInt = BigInt(2)
      var count: BigInt = BigInt(0)
      while (count < BigInt(100)) {
        val v: BigInt = goldbachCount(primes, (BigInt(2) * n).asInstanceOf[BigInt])
        line = line + pad(v) + " "
        count = (count + BigInt(1)).asInstanceOf[BigInt]
        n = (n + BigInt(1)).asInstanceOf[BigInt]
        if (count % BigInt(10) == BigInt(0)) {
          println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1)).toInt))
          line = ""
        }
      }
      val `val`: BigInt = goldbachCount(primes, BigInt(1000))
      println("\nThe 1,000th Goldbach number = " + String.valueOf(`val`))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
