// Generated by Mochi v0.10.52 on 2025-08-02 02:06:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def expI(b: BigInt, p: BigInt): BigInt = {
  var r: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < p) {
    r = r * b
    i = i + BigInt(1)
  }
  return r
}

def expF(b: Double, p: BigInt): Double = {
  var r: Double = 1.0
  var pow: Double = b
  var n: BigInt = p
  var neg: Boolean = false
  if (p < BigInt(0)) {
    n = BigInt(0) - p
    neg = true
  }
  while (n > BigInt(0)) {
    if (n % BigInt(2) == BigInt(1)) {
      r = (r * pow).toString.toDouble
    }
    pow = (pow * pow).toString.toDouble
    n = n / BigInt(2)
  }
  if (neg) {
    r = 1.0 / r
  }
  return r
}

def printExpF(b: Double, p: BigInt): Any = {
  if ((b == 0.0 && p < BigInt(0)).asInstanceOf[Boolean]) {
    println(String.valueOf(b) + "^" + String.valueOf(p) + ": +Inf")
  } else {
    println(String.valueOf(b) + "^" + String.valueOf(p) + ": " + String.valueOf(expF(b, p)))
  }
}

def main(): Any = {
  println("expI tests")
  for (pair <- ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(10)), ArrayBuffer(BigInt(2), BigInt(0) - BigInt(10)), ArrayBuffer(BigInt(0) - BigInt(2), BigInt(10)), ArrayBuffer(BigInt(0) - BigInt(2), BigInt(11)), ArrayBuffer(BigInt(11), BigInt(0)))) {
    if (pair((BigInt(1)).toInt) < BigInt(0)) {
      println(String.valueOf(pair((BigInt(0)).toInt)) + "^" + String.valueOf(pair((BigInt(1)).toInt)) + ": negative power not allowed")
    } else {
      println(String.valueOf(pair((BigInt(0)).toInt)) + "^" + String.valueOf(pair((BigInt(1)).toInt)) + ": " + String.valueOf(expI(pair((BigInt(0)).toInt), pair((BigInt(1)).toInt))))
    }
  }
  println("overflow undetected")
  println("10^10: " + String.valueOf(expI(BigInt(10), BigInt(10))))
  println("\nexpF tests:")
  for (pair <- ArrayBuffer(ArrayBuffer(2.0, BigInt(10)), ArrayBuffer(2.0, BigInt(0) - BigInt(10)), ArrayBuffer(-2.0, BigInt(10)), ArrayBuffer(-2.0, BigInt(11)), ArrayBuffer(11.0, BigInt(0)))) {
    printExpF((pair((BigInt(0)).toInt)).toString.toDouble, BigInt((pair((BigInt(1)).toInt)).toString))
  }
  println("disallowed in expI, allowed here")
  printExpF(0.0, BigInt(0) - BigInt(1))
  println("other interesting cases for 32 bit float type")
  printExpF(10.0, BigInt(39))
  printExpF(10.0, BigInt(0) - BigInt(39))
  printExpF((-10.0).toString.toDouble, BigInt(39))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
