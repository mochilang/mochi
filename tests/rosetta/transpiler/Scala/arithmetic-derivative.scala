// Generated by Mochi v0.10.39 on 2025-07-25 00:49:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def primeFactors(n: Int): ArrayBuffer[Int] = {
    var factors: ArrayBuffer[Int] = ArrayBuffer()
    var x: Int = n
    while (x % 2 == 0) {
      factors = factors :+ 2
      x = (x / 2).asInstanceOf[Int]
    }
    var p: Int = 3
    while ((p * p).asInstanceOf[Int] <= x) {
      while (x % p == 0) {
        factors = factors :+ p
        x = (x / p).asInstanceOf[Int]
      }
      p = (p + 2).asInstanceOf[Int]
    }
    if (x > 1) {
      factors = factors :+ x
    }
    return factors
  }
  
  def repeat(ch: String, n: Int): String = {
    var s: String = ""
    var i: Int = 0
    while (i < n) {
      s = (s + ch).asInstanceOf[String]
      i = (i + 1).asInstanceOf[Int]
    }
    return s
  }
  
  def D(n: Double): Double = {
    if (n < 0.0) {
      return (0 - D((0 - n).asInstanceOf[Double])).asInstanceOf[Double]
    }
    if (n < 2.0) {
      return 0.0
    }
    var factors: ArrayBuffer[Int] = ArrayBuffer()
    if (n < 10000000000000000000.0) {
      factors = primeFactors(n.asInstanceOf[Int])
    } else {
      val g: Int = (n / 100.0).asInstanceOf[Int]
      factors = primeFactors(g)
      factors = factors :+ 2
      factors = factors :+ 2
      factors = factors :+ 5
      factors = factors :+ 5
    }
    val c: Int = (factors).size
    if (c == 1) {
      return 1.0
    }
    if (c == 2) {
      return (factors(0) + factors(1)).toString.toDouble
    }
    val d: Double = n / (factors(0)).toString.toDouble
    return D(d) * (factors(0)).toString.toDouble + d
  }
  
  def pad(n: Int): String = {
    var s = String.valueOf(n)
    while ((s).size < 4) {
      s = " " + s
    }
    return s
  }
  
  def main() = {
    var vals: ArrayBuffer[Int] = ArrayBuffer()
    var n: Int = 0 - 99
    while (n < 101) {
      vals = vals :+ (D(n.toString.toDouble)).asInstanceOf[Int]
      n = (n + 1).asInstanceOf[Int]
    }
    var i: Int = 0
    while (i < (vals).size) {
      var line: String = ""
      var j: Int = 0
      while (j < 10) {
        line = (line + pad(vals(i + j))).asInstanceOf[String]
        if (j < 9) {
          line = line + " "
        }
        j = (j + 1).asInstanceOf[Int]
      }
      println(line)
      i = (i + 10).asInstanceOf[Int]
    }
    var pow: Double = 1.0
    var m: Int = 1
    while (m < 21) {
      pow = pow * 10.0
      var exp = String.valueOf(m)
      if ((exp).size < 2) {
        exp = exp + " "
      }
      var res = String.valueOf(m) + repeat("0", (m - 1).asInstanceOf[Int])
      println("D(10^" + exp + ") / 7 = " + res)
      m = (m + 1).asInstanceOf[Int]
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
