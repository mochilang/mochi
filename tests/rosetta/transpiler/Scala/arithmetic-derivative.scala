// Generated by Mochi v0.10.40 on 2025-07-25 21:07:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def primeFactors(n: Int): ArrayBuffer[Int] = {
      var factors: ArrayBuffer[Int] = ArrayBuffer()
      var x: Int = n
      while (Math.floorMod(x, 2) == 0) {
        factors = factors :+ 2
        x = (x / 2).asInstanceOf[Int]
      }
      var p: Int = 3
      while ((p * p).asInstanceOf[Int] <= x) {
        while (Math.floorMod(x, p) == 0) {
          factors = factors :+ p
          x = (x / p).asInstanceOf[Int]
        }
        p = (p + 2).asInstanceOf[Int]
      }
      if (x > 1) {
        factors = factors :+ x
      }
      return factors
    }
    def repeat(ch: String, n: Int): String = {
      var s: String = ""
      var i: Int = 0
      while (i < n) {
        s = (s + ch).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return s
    }
    def D(n: Double): Double = {
      if (n < 0.0) {
        return (0 - D((0 - n).toString.toDouble)).toString.toDouble
      }
      if (n < 2.0) {
        return 0.0
      }
      var factors: ArrayBuffer[Int] = ArrayBuffer()
      if (n < 10000000000000000000.0) {
        factors = primeFactors(n.asInstanceOf[Int])
      } else {
        val g: Int = (n / 100.0).asInstanceOf[Int]
        factors = primeFactors(g)
        factors = factors :+ 2
        factors = factors :+ 2
        factors = factors :+ 5
        factors = factors :+ 5
      }
      val c: Int = (factors).size
      if (c == 1) {
        return 1.0
      }
      if (c == 2) {
        return (factors(0) + factors(1)).toString.toDouble
      }
      val d: Double = n / (factors(0)).toString.toDouble
      return D(d) * (factors(0)).toString.toDouble + d
    }
    def pad(n: Int): String = {
      var s = String.valueOf(n)
      while ((s).size < 4) {
        s = " " + s
      }
      return s
    }
    def main(): Any = {
      var vals: ArrayBuffer[Int] = ArrayBuffer()
      var n: Int = 0 - 99
      while (n < 101) {
        vals = vals :+ (D(n.toString.toDouble)).asInstanceOf[Int]
        n = (n + 1).asInstanceOf[Int]
      }
      var i: Int = 0
      while (i < (vals).size) {
        var line: String = ""
        var j: Int = 0
        while (j < 10) {
          line = (line + pad(vals(i + j))).toString
          if (j < 9) {
            line = line + " "
          }
          j = (j + 1).asInstanceOf[Int]
        }
        println(line)
        i = (i + 10).asInstanceOf[Int]
      }
      var pow: Double = 1.0
      var m: Int = 1
      while (m < 21) {
        pow = pow * 10.0
        var exp = String.valueOf(m)
        if ((exp).size < 2) {
          exp = exp + " "
        }
        var res = String.valueOf(m) + repeat("0", (m - 1).asInstanceOf[Int])
        println("D(10^" + exp + ") / 7 = " + res)
        m = (m + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
