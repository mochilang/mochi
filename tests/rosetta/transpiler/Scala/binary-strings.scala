// Generated by Mochi v0.10.40 on 2025-07-26 05:22:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def char(n: Int): String = {
      val letters: String = "abcdefghijklmnopqrstuvwxyz"
      val idx = n - 97
      if ((idx < 0 || idx >= (letters).size).asInstanceOf[Boolean]) {
        return "?"
      }
      return letters.slice(idx, idx + 1)
    }
    def fromBytes(bs: ArrayBuffer[Int]): String = {
      var s: String = ""
      var i: Int = 0
      while (i < (bs).size) {
        s = (s + char(bs(i))).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return s
    }
    var b: ArrayBuffer[Int] = ArrayBuffer(98, 105, 110, 97, 114, 121)
    println(String.valueOf(b))
    var c: ArrayBuffer[Int] = b
    println(String.valueOf(c))
    println(String.valueOf(b == c))
    var d: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < (b).size) {
      d = d :+ b(i)
      i = (i + 1).asInstanceOf[Int]
    }
    d(1) = 97
    d(4) = 110
    println(fromBytes(b))
    println(fromBytes(d))
    println(String.valueOf((b).size == 0))
    var z: ArrayBuffer[Any] = b :+ 122
    println(fromBytes(z.asInstanceOf[ArrayBuffer[Int]]))
    var sub: ArrayBuffer[Int] = b.slice(1, 3)
    println(fromBytes(sub))
    var f: ArrayBuffer[Int] = ArrayBuffer()
    i = 0
    while (i < (d).size) {
      val `val`: Int = d(i)
      if (`val` == 110) {
        f = f :+ 109
      } else {
        f = f :+ `val`
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(fromBytes(d) + " -> " + fromBytes(f))
    var rem: ArrayBuffer[Int] = ArrayBuffer()
    rem = rem :+ b(0)
    i = 3
    while (i < (b).size) {
      rem = rem :+ b(i)
      i = (i + 1).asInstanceOf[Int]
    }
    println(fromBytes(rem))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
