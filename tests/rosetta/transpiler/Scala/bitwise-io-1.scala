// Generated by Mochi v0.10.40 on 2025-07-26 04:50:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Writer(var order: String, var bits: Int, var nbits: Int, var data: ArrayBuffer[Int])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow2(n: Int): Int = {
      var v: Int = 1
      var i: Int = 0
      while (i < n) {
        v = (v * 2).asInstanceOf[Int]
        i = (i + 1).asInstanceOf[Int]
      }
      return v
    }
    def lshift(x: Int, n: Int): Int = {
      return (x * pow2(n)).asInstanceOf[Int]
    }
    def rshift(x: Int, n: Int): Int = {
      return (x / pow2(n)).asInstanceOf[Int]
    }
    def NewWriter(order: String): Writer = {
      return Writer(order, 0, 0, ArrayBuffer())
    }
    def writeBitsLSB(w: Writer, c: Int, width: Int): Writer = {
      w.bits = (w.bits + lshift(c, w.nbits)).asInstanceOf[Int]
      w.nbits = (w.nbits + width).asInstanceOf[Int]
      while (w.nbits >= 8) {
        val b = Math.floorMod(w.bits, 256)
        w.data = w.data :+ b
        w.bits = rshift(w.bits, 8)
        w.nbits = (w.nbits - 8).asInstanceOf[Int]
      }
      return w
    }
    def writeBitsMSB(w: Writer, c: Int, width: Int): Writer = {
      w.bits = (w.bits + lshift(c, (32 - width - w.nbits).asInstanceOf[Int])).asInstanceOf[Int]
      w.nbits = (w.nbits + width).asInstanceOf[Int]
      while (w.nbits >= 8) {
        val b = Math.floorMod(rshift(w.bits, 24), 256)
        w.data = w.data :+ b
        w.bits = (Math.floorMod(w.bits, pow2(24)) * 256).asInstanceOf[Int]
        w.nbits = (w.nbits - 8).asInstanceOf[Int]
      }
      return w
    }
    def WriteBits(w: Writer, c: Int, width: Int): Writer = {
      if (w.order == "LSB") {
        return writeBitsLSB(w, c, width)
      }
      return writeBitsMSB(w, c, width)
    }
    def CloseWriter(w: Writer): Writer = {
      if (w.nbits > 0) {
        if (w.order == "MSB") {
          w.bits = rshift(w.bits, 24)
        }
        w.data = w.data :+ Math.floorMod(w.bits, 256)
      }
      w.bits = 0
      w.nbits = 0
      return w
    }
    def toBinary(n: Int, bits: Int): String = {
      var b: String = ""
      var `val`: Int = n
      var i: Int = 0
      while (i < bits) {
        b = (String.valueOf(Math.floorMod(`val`, 2)) + b).toString
        `val` = (`val` / 2).asInstanceOf[Int]
        i = (i + 1).asInstanceOf[Int]
      }
      return b
    }
    def bytesToBits(bs: ArrayBuffer[Int]): String = {
      var out: String = "["
      var i: Int = 0
      while (i < (bs).size) {
        out = (out + toBinary(bs(i), 8)).toString
        if ((i + 1).asInstanceOf[Int] < (bs).size) {
          out = out + " "
        }
        i = (i + 1).asInstanceOf[Int]
      }
      out = out + "]"
      return out
    }
    def ExampleWriter_WriteBits(): Any = {
      var bw: Writer = NewWriter("MSB")
      bw = WriteBits(bw, 15, 4)
      bw = WriteBits(bw, 0, 1)
      bw = WriteBits(bw, 19, 5)
      bw = CloseWriter(bw)
      println(bytesToBits(bw.data))
    }
    ExampleWriter_WriteBits()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
