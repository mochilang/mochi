// Generated by Mochi v0.10.50 on 2025-07-30 21:28:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def floorf(x: Double): Double = {
      val y: BigInt = BigInt(x.toInt)
      return y.toString.toDouble
    }
    def indexOf(s: String, ch: String): BigInt = {
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
          return i
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
    }
    def fmt8(x: Double): String = {
      var y: Double = floorf(x * 100000000.0 + 0.5) / 100000000.0
      var s = String.valueOf(y)
      var dot = BigInt(s.indexOf("."))
      if (dot == BigInt(0) - BigInt(1)) {
        s = s + ".00000000"
      } else {
        var decs = (s).size - dot - BigInt(1)
        while (decs < BigInt(8)) {
          s = s + "0"
          decs = (decs + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      return s
    }
    def pad2(x: BigInt): String = {
      var s = String.valueOf(x)
      if ((s).size < BigInt(2)) {
        s = " " + s
      }
      return s
    }
    def main(): Any = {
      val maxIt: BigInt = BigInt(13)
      val maxItJ: BigInt = BigInt(10)
      var a1: Double = 1.0
      var a2: Double = 0.0
      var d1: Double = 3.2
      println(" i       d")
      var i: BigInt = BigInt(2)
      while (i <= maxIt) {
        var a = a1 + (a1 - a2) / d1
        var j: BigInt = BigInt(1)
        while (j <= maxItJ) {
          var x: Double = 0.0
          var y: Double = 0.0
          var k: BigInt = BigInt(1)
          val limit: BigInt = pow_int(BigInt(2), i)
          while (k <= limit) {
            y = 1.0 - 2.0 * y * x
            x = (a - x * x).toString.toDouble
            k = (k + BigInt(1)).asInstanceOf[BigInt]
          }
          a = (a - x / y).toString.toDouble
          j = (j + BigInt(1)).asInstanceOf[BigInt]
        }
        var d: Double = (a1 - a2).toString.toDouble / (a - a1).toString.toDouble
        println(pad2(i) + "    " + fmt8(d))
        d1 = d
        a2 = a1
        a1 = a
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    def pow_int(base: BigInt, exp: BigInt): BigInt = {
      var r: BigInt = BigInt(1)
      var b: BigInt = base
      var e: BigInt = exp
      while (e > BigInt(0)) {
        if (e % BigInt(2) == BigInt(1)) {
          r = (r * b).asInstanceOf[BigInt]
        }
        b = (b * b).asInstanceOf[BigInt]
        e = e / BigInt(2)
      }
      return r
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
