// Generated by Mochi v0.10.39 on 2025-07-25 01:14:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def isPrime(n: Int): Boolean = {
    if (n < 2) {
      return false
    }
    if (n % 2 == 0) {
      return n == 2
    }
    if (n % 3 == 0) {
      return n == 3
    }
    var d: Int = 5
    while ((d * d).asInstanceOf[Int] <= n) {
      if (n % d == 0) {
        return false
      }
      d = (d + 2).asInstanceOf[Int]
      if (n % d == 0) {
        return false
      }
      d = (d + 4).asInstanceOf[Int]
    }
    return true
  }
  
  def gen(first: Int, cand: Int, digits: Int): Unit = {
    if (digits == 0) {
      if (isPrime(cand)) {
        asc = (asc ++ ArrayBuffer(cand)).asInstanceOf[ArrayBuffer[Int]]
      }
      return
    }
    var i: Int = first
    while (i < 10) {
      gen((i + 1).asInstanceOf[Int], (cand * 10 + i).asInstanceOf[Int], (digits - 1).asInstanceOf[Int])
      i = (i + 1).asInstanceOf[Int]
    }
  }
  
  def pad(n: Int, width: Int): String = {
    var s = String.valueOf(n)
    while ((s).size < width) {
      s = " " + s
    }
    return s
  }
  
  def main() = {
    var digits: Int = 1
    while (digits < 10) {
      gen(1, 0, digits)
      digits = (digits + 1).asInstanceOf[Int]
    }
    println("There are " + String.valueOf((asc).size) + " ascending primes, namely:")
    var i: Int = 0
    var line: String = ""
    while (i < (asc).size) {
      line = line + pad(asc(i), 8) + " "
      if ((i + 1) % 10 == 0) {
        println(line.substring(0, (line).size - 1))
        line = ""
      }
      i = (i + 1).asInstanceOf[Int]
    }
    if ((line).size > 0) {
      println(line.substring(0, (line).size - 1))
    }
  }
  
  var asc: ArrayBuffer[Int] = ArrayBuffer()
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
