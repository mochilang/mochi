// Generated by Mochi v0.10.40 on 2025-07-25 21:09:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: Int): Boolean = {
      if (n < 2) {
        return false
      }
      if (Math.floorMod(n, 2) == 0) {
        return n == 2
      }
      if (Math.floorMod(n, 3) == 0) {
        return n == 3
      }
      var d: Int = 5
      while ((d * d).asInstanceOf[Int] <= n) {
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 2).asInstanceOf[Int]
        if (Math.floorMod(n, d) == 0) {
          return false
        }
        d = (d + 4).asInstanceOf[Int]
      }
      return true
    }
    var asc: ArrayBuffer[Int] = ArrayBuffer()
    def gen(first: Int, cand: Int, digits: Int): Any = {
      if (digits == 0) {
        if (isPrime(cand)) {
          asc = (asc ++ ArrayBuffer(cand)).asInstanceOf[ArrayBuffer[Int]]
        }
        return
      }
      var i: Int = first
      while (i < 10) {
        gen((i + 1).asInstanceOf[Int], (cand * 10 + i).asInstanceOf[Int], (digits - 1).asInstanceOf[Int])
        i = (i + 1).asInstanceOf[Int]
      }
    }
    def pad(n: Int, width: Int): String = {
      var s = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def main(): Any = {
      var digits: Int = 1
      while (digits < 10) {
        gen(1, 0, digits)
        digits = (digits + 1).asInstanceOf[Int]
      }
      println("There are " + String.valueOf((asc).size) + " ascending primes, namely:")
      var i: Int = 0
      var line: String = ""
      while (i < (asc).size) {
        line = line + pad(asc(i), 8) + " "
        if (Math.floorMod(i + 1, 10) == 0) {
          println(line.substring(0, (line).size - 1))
          line = ""
        }
        i = (i + 1).asInstanceOf[Int]
      }
      if ((line).size > 0) {
        println(line.substring(0, (line).size - 1))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
