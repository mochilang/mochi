// Generated by Mochi v0.10.40 on 2025-07-25 12:56:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def kPrime(_n: Int, k: Int): Boolean = {
    var n: Int = _n
    var nf: Int = 0
    var i: Int = 2
    while (i <= n) {
      while (Math.floorMod(n, i) == 0) {
        if (nf == k) {
          return false
        }
        nf = (nf + 1).asInstanceOf[Int]
        n = (n / i).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return nf == k
  }
  
  def gen(k: Int, count: Int): ArrayBuffer[Int] = {
    var r: ArrayBuffer[Int] = ArrayBuffer()
    var n: Int = 2
    while ((r).size < count) {
      if (kPrime(n, k)) {
        r = r :+ n
      }
      n = (n + 1).asInstanceOf[Int]
    }
    return r
  }
  
  def main(): Unit = {
    var k: Int = 1
    while (k <= 5) {
      println(String.valueOf(k) + " " + String.valueOf(gen(k, 10)))
      k = (k + 1).asInstanceOf[Int]
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
