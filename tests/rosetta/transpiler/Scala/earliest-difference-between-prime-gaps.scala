// Generated by Mochi v0.10.52 on 2025-08-01 22:02:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def commatize(n: BigInt): String = {
  var s: String = String.valueOf(n)
  var i: BigInt = (s).size - BigInt(3).toInt
  while (i > BigInt(0)) {
    s = s.slice((BigInt(0)).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
    i = i - BigInt(3)
  }
  return s
}

def main(): Any = {
  val data: ArrayBuffer[Map[String,BigInt]] = ArrayBuffer(scala.collection.mutable.Map("pm" -> (BigInt(10)), "g1" -> (BigInt(4)), "s1" -> (BigInt(7)), "g2" -> (BigInt(6)), "s2" -> (BigInt(23)), "d" -> (BigInt(16))), scala.collection.mutable.Map("pm" -> (BigInt(100)), "g1" -> (BigInt(14)), "s1" -> (BigInt(113)), "g2" -> (BigInt(16)), "s2" -> (BigInt(1831)), "d" -> (BigInt(1718))), scala.collection.mutable.Map("pm" -> (BigInt(1000)), "g1" -> (BigInt(14)), "s1" -> (BigInt(113)), "g2" -> (BigInt(16)), "s2" -> (BigInt(1831)), "d" -> (BigInt(1718))), scala.collection.mutable.Map("pm" -> (BigInt(10000)), "g1" -> (BigInt(36)), "s1" -> (BigInt(9551)), "g2" -> (BigInt(38)), "s2" -> (BigInt(30593)), "d" -> (BigInt(21042))), scala.collection.mutable.Map("pm" -> (BigInt(100000)), "g1" -> (BigInt(70)), "s1" -> (BigInt(173359)), "g2" -> (BigInt(72)), "s2" -> (BigInt(31397)), "d" -> (BigInt(141962))), scala.collection.mutable.Map("pm" -> (BigInt(1000000)), "g1" -> (BigInt(100)), "s1" -> (BigInt(396733)), "g2" -> (BigInt(102)), "s2" -> (BigInt(1444309)), "d" -> (BigInt(1047576))), scala.collection.mutable.Map("pm" -> (BigInt(10000000)), "g1" -> (BigInt(148)), "s1" -> (BigInt(2010733)), "g2" -> (BigInt(150)), "s2" -> (BigInt(13626257)), "d" -> (BigInt(11615524))), scala.collection.mutable.Map("pm" -> (BigInt(100000000)), "g1" -> (BigInt(198)), "s1" -> (BigInt(46006769)), "g2" -> (BigInt(200)), "s2" -> (BigInt(378043979)), "d" -> (BigInt(332037210))), scala.collection.mutable.Map("pm" -> (BigInt(1000000000)), "g1" -> (BigInt(276)), "s1" -> (BigInt(649580171)), "g2" -> (BigInt(278)), "s2" -> (BigInt("4260928601")), "d" -> (BigInt("3611348430"))), scala.collection.mutable.Map("pm" -> (BigInt("10000000000")), "g1" -> (BigInt(332)), "s1" -> (BigInt("5893180121")), "g2" -> (BigInt(334)), "s2" -> (BigInt("30827138509")), "d" -> (BigInt("24933958388"))), scala.collection.mutable.Map("pm" -> (BigInt("100000000000")), "g1" -> (BigInt(386)), "s1" -> (BigInt("35238645587")), "g2" -> (BigInt(388)), "s2" -> (BigInt("156798792223")), "d" -> (BigInt("121560146636"))))
  for (entry <- data) {
    val pm: String = commatize(entry("pm"))
    val line1: String = "Earliest difference > " + pm + " between adjacent prime gap starting primes:"
    println(line1)
    val line2: String = "Gap " + String.valueOf(entry("g1")) + " starts at " + commatize(entry("s1")) + ", gap " + String.valueOf(entry("g2")) + " starts at " + commatize(entry("s2")) + ", difference is " + commatize(entry("d")) + "."
    println(line2)
    println("")
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
