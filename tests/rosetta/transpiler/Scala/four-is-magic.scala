// Generated by Mochi v0.10.50 on 2025-07-31 00:50:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def capitalize(s: String): String = {
      if ((s).size == BigInt(0)) {
        return s
      }
      return s.slice((BigInt(0)).toInt, (BigInt(1)).toInt).toUpperCase() + s.slice((BigInt(1)).toInt, ((s).size).toInt)
    }
    var small: ArrayBuffer[String] = ArrayBuffer("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
    var tens: ArrayBuffer[String] = ArrayBuffer("", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
    var illions: ArrayBuffer[String] = ArrayBuffer("", " thousand", " million", " billion", " trillion", " quadrillion", " quintillion")
    def say(_n: BigInt): String = {
      var n: BigInt = _n
      var t: String = ""
      if (n < BigInt(0)) {
        t = "negative "
        n = (BigInt(0) - n).asInstanceOf[BigInt]
      }
      if (n < BigInt(20)) {
        return (t + small((n).toInt)).toString
      } else {
        if (n < BigInt(100)) {
          t = tens((n / BigInt(10)).toInt)
          val s = n % BigInt(10)
          if (s > BigInt(0)) {
            t = t + "-" + small((s).toInt)
          }
          return t
        } else {
          if (n < BigInt(1000)) {
            t = small((n / BigInt(100)).toInt) + " hundred"
            val s = n % BigInt(100)
            if (s > BigInt(0)) {
              t = t + " " + say(s)
            }
            return t
          }
        }
      }
      var sx: String = ""
      var i: BigInt = BigInt(0)
      var nn: BigInt = n
      while (nn > BigInt(0)) {
        val p = nn % BigInt(1000)
        nn = (nn / BigInt(1000)).asInstanceOf[BigInt]
        if (p > BigInt(0)) {
          var ix: String = say(p) + illions((i).toInt)
          if (sx != "") {
            ix = ix + " " + sx
          }
          sx = ix
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (t + sx).toString
    }
    def fourIsMagic(_n: BigInt): String = {
      var n: BigInt = _n
      var s: String = say(n)
      s = capitalize(s)
      var t: String = s
      while (n != BigInt(4)) {
        n = (s).size
        s = say(n)
        t = t + " is " + s + ", " + s
      }
      t = t + " is magic."
      return t
    }
    def main(): Any = {
      val nums = ArrayBuffer(BigInt(0), BigInt(4), BigInt(6), BigInt(11), BigInt(13), BigInt(75), BigInt(100), BigInt(337), BigInt(0) - BigInt(164), BigInt("9223372036854775807"))
      for (n <- nums) {
        println(fourIsMagic(n.asInstanceOf[BigInt]))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
