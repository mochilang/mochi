// Generated by Mochi v0.10.52 on 2025-08-02 02:08:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def show(xs: ArrayBuffer[BigInt]): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    s = s + String.valueOf(xs((i).toInt))
    if (i < (xs).size - BigInt(1).toInt) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  return s
}

def gen(init: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[BigInt] = {
  var b: ArrayBuffer[BigInt] = init
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var sum: BigInt = BigInt(0)
  for (x <- b) {
    res = res :+ x
    sum = sum + x
  }
  while ((res).size < n) {
    var next: BigInt = sum
    res = res :+ next
    sum = sum + next - b((BigInt(0)).toInt)
    b = b.slice((BigInt(1)).toInt, ((b).size).toInt) :+ next
  }
  return res
}

def main(): Any = {
  val n: BigInt = BigInt(10)
  println(" Fibonacci: " + show(gen(ArrayBuffer(BigInt(1), BigInt(1)), n)))
  println("Tribonacci: " + show(gen(ArrayBuffer(BigInt(1), BigInt(1), BigInt(2)), n)))
  println("Tetranacci: " + show(gen(ArrayBuffer(BigInt(1), BigInt(1), BigInt(2), BigInt(4)), n)))
  println("     Lucas: " + show(gen(ArrayBuffer(BigInt(2), BigInt(1)), n)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
