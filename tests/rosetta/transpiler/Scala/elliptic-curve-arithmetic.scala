// Generated by Mochi v0.10.55 on 2025-08-02 23:15:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  case class Pt(var x: Double, var y: Double, var inf: Boolean)
  
  def zero(): Pt = {
    return Pt(0.0, 0.0, true)
  }
  
  def isZero(p: Pt): Boolean = {
    return p.inf
  }
  
  def neg(p: Pt): Pt = {
    return Pt(p.x, -p.y, p.inf)
  }
  
  def dbl(p: Pt): Pt = {
    if (isZero(p)) {
      return p
    }
    val L: Double = 3.0 * p.x * p.x / (2.0 * p.y)
    val x: Double = L * L - 2.0 * p.x
    return Pt(x, L * (p.x - x) - p.y, false)
  }
  
  def add(p: Pt, q: Pt): Pt = {
    if (isZero(p)) {
      return q
    }
    if (isZero(q)) {
      return p
    }
    if (p.x == q.x) {
      if (p.y == q.y) {
        return dbl(p)
      }
      return zero()
    }
    val L: Double = (q.y - p.y) / (q.x - p.x)
    val x: Double = L * L - p.x - q.x
    return Pt(x, L * (p.x - x) - p.y, false)
  }
  
  def mul(p: Pt, n: BigInt): Pt = {
    var r: Pt = zero()
    var q: Pt = p
    var k: BigInt = n
    while (k > BigInt(0)) {
      if (k % BigInt(2) == BigInt(1)) {
        r = add(r, q)
      }
      q = dbl(q)
      k = k / BigInt(2)
    }
    return r
  }
  
  def cbrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: BigInt = BigInt(0)
    while (i < BigInt(40)) {
      guess = (2.0 * guess + x / (guess * guess)) / 3.0
      i = i + BigInt(1)
    }
    return guess
  }
  
  def fromY(y: Double): Pt = {
    return Pt(cbrtApprox(y * y - bCoeff), y, false)
  }
  
  def show(s: String, p: Pt): Any = {
    if (isZero(p)) {
      println(s + "Zero")
    } else {
      println(s + "(" + String.valueOf(p.x) + ", " + String.valueOf(p.y) + ")")
    }
  }
  
  def main(): Any = {
    val a: Pt = fromY(1.0)
    val b: Pt = fromY(2.0)
    show("a = ", a)
    show("b = ", b)
    val c: Pt = add(a, b)
    show("c = a + b = ", c)
    val d: Pt = neg(c)
    show("d = -c = ", d)
    show("c + d = ", add(c, d))
    show("a + b + d = ", add(a, add(b, d)))
    show("a * 12345 = ", mul(a, BigInt(12345)))
  }
  
  val bCoeff: Double = 7.0
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
