// Generated by Mochi v0.10.55 on 2025-08-02 21:08:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Pt(var x: Double, var y: Double, var inf: Boolean)

def zero(): Pt = {
  return Pt(0.0, 0.0, true)
}

def isZero(p: Pt): Boolean = {
  return p.inf
}

def neg(p: Pt): Pt = {
  return Pt(p.x, -p.y, p.inf)
}

def dbl(p: Pt): Pt = {
  if (isZero(p)) {
    return p
  }
  val L: Double = 3.0 * p.x * p.x / (2.0 * p.y)
  val x: Double = L * L - 2.0 * p.x
  return Pt(x, L * (p.x - x) - p.y, false)
}

def add(p: Pt, q: Pt): Pt = {
  if (isZero(p)) {
    return q
  }
  if (isZero(q)) {
    return p
  }
  if (p.x == q.x) {
    if (p.y == q.y) {
      return dbl(p)
    }
    return zero()
  }
  val L: BigInt = BigInt((q.y - p.y).toString.toDouble.toInt) / BigInt((q.x - p.x).toString.toDouble.toInt)
  val x: Double = (L * L).toString.toDouble - p.x - q.x
  return Pt(x, (L * (p.x - x)).toString.toDouble - p.y, false)
}

def mul(p: Pt, n: BigInt): Pt = {
  var r: Pt = zero()
  var q: Pt = p
  var k: BigInt = n
  while (k > BigInt(0)) {
    if (k % BigInt(2) == BigInt(1)) {
      r = add(r, q)
    }
    q = dbl(q)
    k = k / BigInt(2)
  }
  return r
}

def cbrtApprox(x: Double): Double = {
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(40)) {
    guess = (2.0 * guess + x / (guess * guess)) / 3.0
    i = i + BigInt(1)
  }
  return guess
}

def fromY(y: Double): Pt = {
  return Pt(cbrtApprox((y * y - bCoeff).toString.toDouble), y, false)
}

def show(s: String, p: Pt): Any = {
  if (isZero(p)) {
    println(s + "Zero")
  } else {
    println(s + "(" + String.valueOf(p.x) + ", " + String.valueOf(p.y) + ")")
  }
}

def main(): Any = {
  val a: Pt = fromY(1.0)
  val b: Pt = fromY(2.0)
  show("a = ", a)
  show("b = ", b)
  val c: Pt = add(a, b)
  show("c = a + b = ", c)
  val d: Pt = neg(c)
  show("d = -c = ", d)
  show("c + d = ", add(c, d))
  show("a + b + d = ", add(a, add(b, d)))
  show("a * 12345 = ", mul(a, BigInt(12345)))
}

val bCoeff: Double = 7.0

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
