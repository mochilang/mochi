// Generated by Mochi v0.10.52 on 2025-08-02 02:07:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var a: BigInt, var b: BigInt)

def contains(xs: ArrayBuffer[BigInt], v: BigInt): Boolean = {
  for (x <- xs) {
    if (x == v) {
      return true
    }
  }
  return false
}

def sliceEqual(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < (a).size) {
    if (a((i).toInt) != b((i).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def reverse(xs: ArrayBuffer[BigInt]): Any = {
  var i: BigInt = BigInt(0)
  var j: BigInt = (xs).size - BigInt(1).toInt
  while (i < j) {
    val t: BigInt = xs((i).toInt)
    xs((i).toInt) = xs((j).toInt)
    xs((j).toInt) = t
    i = i + BigInt(1)
    j = j - BigInt(1)
  }
}

def copyInts(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var out: ArrayBuffer[BigInt] = ArrayBuffer()
  for (v <- xs) {
    out = out :+ v
  }
  return out
}

def perimEqual(p1: ArrayBuffer[BigInt], p2: ArrayBuffer[BigInt]): Boolean = {
  if ((p1).size != (p2).size) {
    return false
  }
  for (v <- p1) {
    if ((!(p2.contains(v)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      return false
    }
  }
  var c: ArrayBuffer[BigInt] = copyInts(p1)
  var r: BigInt = BigInt(0)
  while (r < BigInt(2)) {
    var i: BigInt = BigInt(0)
    while (i < (p1).size) {
      if (sliceEqual(c, p2)) {
        return true
      }
      val t: BigInt = c(((c).size - BigInt(1).toInt).toInt)
      var j: BigInt = (c).size - BigInt(1).toInt
      while (j > BigInt(0)) {
        c((j).toInt) = c((j - BigInt(1)).toInt)
        j = j - BigInt(1)
      }
      c((BigInt(0)).toInt) = t
      i = i + BigInt(1)
    }
    reverse(c)
    r = r + BigInt(1)
  }
  return false
}

def sortEdges(es: ArrayBuffer[Edge]): ArrayBuffer[Edge] = {
  var arr: ArrayBuffer[Edge] = es
  var n: Int = (arr).size
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1).toInt) {
      val a: Edge = arr((j).toInt)
      val b: Edge = arr((j + BigInt(1)).toInt)
      if ((a.a > b.a || (a.a == b.a && a.b > b.b).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        arr((j).toInt) = b
        arr((j + BigInt(1)).toInt) = a
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def concat(a: ArrayBuffer[Edge], b: ArrayBuffer[Edge]): ArrayBuffer[Edge] = {
  var out: ArrayBuffer[Edge] = ArrayBuffer()
  for (x <- a) {
    out = out :+ x
  }
  for (x <- b) {
    out = out :+ x
  }
  return out
}

def faceToPerim(face: ArrayBuffer[Edge]): Any = {
  var le: Int = (face).size
  if (le == BigInt(0)) {
    return null.asInstanceOf[Any]
  }
  var edges: ArrayBuffer[Edge] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < le) {
    val e: Edge = face((i).toInt)
    if (e.b <= e.a) {
      return null.asInstanceOf[Any]
    }
    edges = edges :+ e
    i = i + BigInt(1)
  }
  edges = sortEdges(edges)
  var firstEdge: Edge = edges((BigInt(0)).toInt)
  var perim: ArrayBuffer[BigInt] = ArrayBuffer(firstEdge.a, firstEdge.b)
  var first: Any = firstEdge.a
  var last: Any = firstEdge.b
  edges = edges.slice((BigInt(1)).toInt, ((edges).size).toInt)
  le = (edges).size
  var done: Boolean = false
  val _br13 = new Breaks
  _br13.breakable {
    while (le > BigInt(0) && (!done).asInstanceOf[Boolean]) {
      var idx: BigInt = BigInt(0)
      var found: Boolean = false
      val _br14 = new Breaks
      _br14.breakable {
        while (idx < le) {
          val e: Edge = edges((idx).toInt)
          if (e.a == last) {
            perim = perim :+ BigInt((e.b).toInt)
            last = e.b
            found = true
          } else {
            if (e.b == last) {
              perim = perim :+ BigInt((e.a).toInt)
              last = e.a
              found = true
            }
          }
          if (found) {
            edges = concat(edges.slice((BigInt(0)).toInt, (idx).toInt), edges.slice((idx + BigInt(1)).toInt, ((edges).size).toInt))
            le = le - BigInt(1).toInt.toInt
            if (last == first) {
              if (le == BigInt(0)) {
                done = true
              } else {
                return null.asInstanceOf[Any]
              }
            }
            _br14.break()
          }
          idx = idx + BigInt(1)
        }
      }
      if ((!found).asInstanceOf[Boolean]) {
        return null.asInstanceOf[Any]
      }
    }
  }
  return (perim.slice((BigInt(0)).toInt, ((perim).size - BigInt(1).toInt).toInt)).asInstanceOf[Any]
}

def listStr(xs: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    s = s + String.valueOf(xs((i).toInt))
    if (i < (xs).size - BigInt(1).toInt) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

val e: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(7), BigInt(11)), Edge(BigInt(1), BigInt(11)), Edge(BigInt(1), BigInt(7)))

val f: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(11), BigInt(23)), Edge(BigInt(1), BigInt(17)), Edge(BigInt(17), BigInt(23)), Edge(BigInt(1), BigInt(11)))

val g: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(8), BigInt(14)), Edge(BigInt(17), BigInt(19)), Edge(BigInt(10), BigInt(12)), Edge(BigInt(10), BigInt(14)), Edge(BigInt(12), BigInt(17)), Edge(BigInt(8), BigInt(18)), Edge(BigInt(18), BigInt(19)))

val h: ArrayBuffer[Edge] = ArrayBuffer(Edge(BigInt(1), BigInt(3)), Edge(BigInt(9), BigInt(11)), Edge(BigInt(3), BigInt(11)), Edge(BigInt(1), BigInt(11)))

var faces: ArrayBuffer[ArrayBuffer[Edge]] = ArrayBuffer(e, f, g, h)

var names: ArrayBuffer[String] = ArrayBuffer("E", "F", "G", "H")

var idx2: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Perimeter format equality checks:")
    println("  Q == R is " + String.valueOf(perimEqual(ArrayBuffer(BigInt(8), BigInt(1), BigInt(3)), ArrayBuffer(BigInt(1), BigInt(3), BigInt(8)))))
    println("  U == V is " + String.valueOf(perimEqual(ArrayBuffer(BigInt(18), BigInt(8), BigInt(14), BigInt(10), BigInt(12), BigInt(17), BigInt(19)), ArrayBuffer(BigInt(8), BigInt(14), BigInt(10), BigInt(12), BigInt(17), BigInt(19), BigInt(18)))))
    println("\nEdge to perimeter format translations:")
    while (idx2 < (faces).size) {
      val per = faceToPerim(faces((idx2).toInt))
      if (per == null) {
        println("  " + names((idx2).toInt) + " => Invalid edge format")
      } else {
        println("  " + names((idx2).toInt) + " => " + listStr(per.asInstanceOf[ArrayBuffer[BigInt]]))
      }
      idx2 = idx2 + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
