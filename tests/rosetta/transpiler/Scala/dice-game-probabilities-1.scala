// Generated by Mochi v0.10.52 on 2025-08-01 19:06:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def powInt(base: BigInt, exp: BigInt): BigInt = {
      var r: BigInt = BigInt(1)
      var b: BigInt = base
      var e: BigInt = exp
      while (e > BigInt(0)) {
        if (e % BigInt(2) == BigInt(1)) {
          r = r * b
        }
        b = b * b
        e = e / BigInt(2)
      }
      return r
    }
    def minInt(x: BigInt, y: BigInt): BigInt = {
      if (x < y) {
        return x
      }
      return y
    }
    def throwDie(nSides: BigInt, nDice: BigInt, s: BigInt, counts: ArrayBuffer[BigInt]): Any = {
      if (nDice == BigInt(0)) {
        counts((s).toInt) = counts((s).toInt) + BigInt(1)
        return
      }
      var i: BigInt = BigInt(1)
      while (i <= nSides) {
        throwDie(nSides, nDice - BigInt(1), s + i, counts)
        i = i + BigInt(1)
      }
      return null
    }
    def beatingProbability(nSides1: BigInt, nDice1: BigInt, nSides2: BigInt, nDice2: BigInt): Double = {
      val len1: BigInt = (nSides1 + BigInt(1)) * nDice1
      var c1: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < len1) {
        c1 = c1 :+ BigInt(0)
        i = i + BigInt(1)
      }
      throwDie(nSides1, nDice1, BigInt(0), c1)
      val len2: BigInt = (nSides2 + BigInt(1)) * nDice2
      var c2: ArrayBuffer[BigInt] = ArrayBuffer()
      var j: BigInt = BigInt(0)
      while (j < len2) {
        c2 = c2 :+ BigInt(0)
        j = j + BigInt(1)
      }
      throwDie(nSides2, nDice2, BigInt(0), c2)
      val p12: Double = (powInt(nSides1, nDice1)).toString.toDouble * (powInt(nSides2, nDice2)).toString.toDouble
      var tot: Double = 0.0
      i = BigInt(0)
      while (i < len1) {
        j = BigInt(0)
        val m: BigInt = minInt(i, len2)
        while (j < m) {
          tot = tot + (c1((i).toInt)).toString.toDouble * (c2((j).toInt)).toString.toDouble / p12
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
      return tot
    }
    println(String.valueOf(beatingProbability(BigInt(4), BigInt(9), BigInt(6), BigInt(6))))
    println(String.valueOf(beatingProbability(BigInt(10), BigInt(5), BigInt(7), BigInt(6))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
