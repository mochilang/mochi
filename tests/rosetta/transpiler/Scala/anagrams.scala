// Generated by Mochi v0.10.40 on 2025-07-25 12:56:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def sortRunes(s: String): String = {
    var arr: ArrayBuffer[String] = ArrayBuffer()
    var i: Int = 0
    while (i < (s).size) {
      arr = arr :+ s.slice(i, i + 1)
      i = (i + 1).asInstanceOf[Int]
    }
    var n: Int = (arr).size
    var m: Int = 0
    while (m < n) {
      var j: Int = 0
      while (j < (n - 1).asInstanceOf[Int]) {
        if (arr(j) > arr(j + 1)) {
          val tmp: String = arr(j)
          arr(j) = arr(j + 1)
          arr(j + 1) = tmp
        }
        j = (j + 1).asInstanceOf[Int]
      }
      m = (m + 1).asInstanceOf[Int]
    }
    var out: String = ""
    i = 0
    while (i < n) {
      out = (out + arr(i)).asInstanceOf[String]
      i = (i + 1).asInstanceOf[Int]
    }
    return out
  }
  
  def sortStrings(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
    var res: ArrayBuffer[String] = ArrayBuffer()
    var tmp: ArrayBuffer[String] = xs
    while ((tmp).size > 0) {
      var min: String = tmp(0)
      var idx: Int = 0
      var i: Int = 1
      while (i < (tmp).size) {
        if (tmp(i) < min) {
          min = tmp(i)
          idx = i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      res = res :+ min
      var out: ArrayBuffer[String] = ArrayBuffer()
      var j: Int = 0
      while (j < (tmp).size) {
        if (j != idx) {
          out = out :+ tmp(j)
        }
        j = (j + 1).asInstanceOf[Int]
      }
      tmp = out
    }
    return res
  }
  
  def main(): Unit = {
    val words: ArrayBuffer[String] = ArrayBuffer("abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile")
    var groups: Map[String,ArrayBuffer[String]] = Map()
    var maxLen: Int = 0
    for (w <- words) {
      val k: String = sortRunes(w.asInstanceOf[String])
      if ((!(groups.contains(k)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        groups(k) = ArrayBuffer(w)
      } else {
        groups(k) = groups.getOrElse(k, null.asInstanceOf[ArrayBuffer[String]]) :+ w
      }
      if ((groups.getOrElse(k, null.asInstanceOf[ArrayBuffer[String]])).size > maxLen) {
        maxLen = (groups.getOrElse(k, null.asInstanceOf[ArrayBuffer[String]])).size
      }
    }
    var printed: Map[String,Boolean] = Map()
    for (w <- words) {
      val k: String = sortRunes(w.asInstanceOf[String])
      if ((groups.getOrElse(k, null.asInstanceOf[ArrayBuffer[String]])).size == maxLen) {
        if ((!(printed.contains(k)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          var g: ArrayBuffer[String] = sortStrings(groups.getOrElse(k, null.asInstanceOf[ArrayBuffer[String]]))
          var line: String = "[" + g(0)
          var i: Int = 1
          while (i < (g).size) {
            line = line + " " + g(i)
            i = (i + 1).asInstanceOf[Int]
          }
          line = line + "]"
          println(line)
          printed(k) = true
        }
      }
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
