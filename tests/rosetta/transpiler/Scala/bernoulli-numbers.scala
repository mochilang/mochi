// Generated by Mochi v0.10.40 on 2025-07-26 00:03:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.annotation.tailrec
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

class BigRat(var num: BigInt, var den: BigInt) {
  def +(o: BigRat) = BigRat(num * o.den + o.num * den, den * o.den)
  def -(o: BigRat) = BigRat(num * o.den - o.num * den, den * o.den)
  def *(o: BigRat) = BigRat(num * o.num, den * o.den)
  def /(o: BigRat) = BigRat(num * o.den, den * o.num)
}
object BigRat {
  def apply(n: BigInt, d: BigInt = BigInt(1)): BigRat = {
    val g = n.gcd(d); var nn = n / g; var dd = d / g; if (dd < 0) { nn = -nn; dd = -dd }
    new BigRat(nn, dd)
  }
}
def _bigrat(n: BigInt, d: BigInt = BigInt(1)) = BigRat(n, d)
def num(r: BigRat): BigInt = r.num
def denom(r: BigRat): BigInt = r.den

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _padStart(s: String, width: Int, pad: String): String = {
  var out = s
  while (out.length < width) { out = pad + out }
  out
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def bernoulli(n: Int): BigRat = {
      var a: ArrayBuffer[BigRat] = ArrayBuffer()
      var m: Int = 0
      while (m <= n) {
        a = a :+ _bigrat(1) / _bigrat(m + 1)
        var j: Int = m
        while (j >= 1) {
          a(j - 1) = (_bigrat(j) * (a(j - 1) - a(j))).asInstanceOf[BigRat]
          j = (j - 1).asInstanceOf[Int]
        }
        m = (m + 1).asInstanceOf[Int]
      }
      return a(0)
    }
    def padStart(s: String, width: Int, pad: String): String = {
      var out: String = s
      while ((out).size < width) {
        out = (pad + out).toString
      }
      return out
    }
    for (i <- 0 until 61) {
      val b: BigRat = bernoulli(i.asInstanceOf[Int])
      if (num(b) != 0) {
        val numStr = String.valueOf(num(b))
        val denStr = String.valueOf(denom(b))
        println("B(" + _padStart(String.valueOf(i), 2, " ") + ") =" + _padStart(numStr, 45, " ") + "/" + denStr)
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
