// Generated by Mochi v0.10.52 on 2025-08-01 19:20:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf3(s: String, ch: String, start: BigInt): BigInt = {
  var i: BigInt = start
  while (i < (s).size) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
      return i
    }
    i = i + BigInt(1)
  }
  return BigInt(0) - BigInt(1)
}

def ord(ch: String): BigInt = {
  val digits: String = "0123456789"
  var idx: BigInt = indexOf3(digits, ch, BigInt(0))
  if (idx >= BigInt(0)) {
    return BigInt(48) + idx
  }
  if (ch == "X") {
    return BigInt(88)
  }
  if (ch == "\u00e9") {
    return BigInt(233)
  }
  if (ch == "\uD83D\uDE0D") {
    return BigInt(128525)
  }
  if (ch == "\uD83D\uDC21") {
    return BigInt(128033)
  }
  return BigInt(0)
}

def toHex(n: BigInt): String = {
  val digits: String = "0123456789ABCDEF"
  if (n == BigInt(0)) {
    return "0"
  }
  var v: BigInt = n
  var out: String = ""
  while (v > BigInt(0)) {
    val d: BigInt = v % BigInt(16)
    out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
    v = v / BigInt(16)
  }
  return out
}

def analyze(s: String): Any = {
  val le: Int = (s).size
  println("Analyzing \"" + s + "\" which has a length of " + String.valueOf(le) + ":")
  if (le > BigInt(1)) {
    var i: BigInt = BigInt(0)
    while (i < le - BigInt(1).toInt) {
      var j: BigInt = i + BigInt(1)
      while (j < le) {
        if (s.slice((j).toInt, (j + BigInt(1)).toInt) == s.slice((i).toInt, (i + BigInt(1)).toInt)) {
          val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
          println("  Not all characters in the string are unique.")
          println("  '" + ch + "' (0x" + toHex(ord(ch)).toLowerCase() + ") is duplicated at positions " + String.valueOf(i + BigInt(1)) + " and " + String.valueOf(j + BigInt(1)) + ".\n")
          return
        }
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
    }
  }
  println("  All characters in the string are unique.\n")
  return null
}

def main(): Any = {
  val strings: ArrayBuffer[String] = ArrayBuffer("", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "h\u00e9t\u00e9rog\u00e9n\u00e9it\u00e9", "\uD83C\uDF86\uD83C\uDF83\uD83C\uDF87\uD83C\uDF88", "\uD83D\uDE0D\uD83D\uDE00\uD83D\uDE4C\uD83D\uDC83\uD83D\uDE0D\uD83D\uDE4C", "\uD83D\uDC20\uD83D\uDC1F\uD83D\uDC21\uD83E\uDD88\uD83D\uDC2C\uD83D\uDC33\uD83D\uDC0B\uD83D\uDC21")
  var i: BigInt = BigInt(0)
  while (i < (strings).size) {
    analyze(strings((i).toInt))
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
