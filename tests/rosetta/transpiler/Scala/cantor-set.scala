// Generated by Mochi v0.10.40 on 2025-07-26 09:47:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val width: BigInt = BigInt(81)
    val height: BigInt = BigInt(5)
    var lines: ArrayBuffer[String] = ArrayBuffer()
    for (i <- BigInt(0) until height) {
      var row: String = ""
      var j: BigInt = BigInt(0)
      while (j < width) {
        row = row + "*"
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      lines = lines :+ row
    }
    def setChar(s: String, idx: BigInt, ch: String): String = {
      return s.slice((BigInt(0)).toInt, idx) + ch + s.slice((idx + BigInt(1)).toInt, (s).size)
    }
    var stack: ArrayBuffer[scala.collection.mutable.Map[String,BigInt]] = ArrayBuffer(scala.collection.mutable.Map("start" -> (BigInt(0)), "len" -> (width), "index" -> (BigInt(1))))
    val _ct2 = new Breaks
    while ((stack).size > BigInt(0)) {
      _ct2.breakable {
        var frame: scala.collection.mutable.Map[String,BigInt] = stack(((stack).size - BigInt(1)).toInt)
        stack = stack.slice((BigInt(0)).toInt, ((stack).size - BigInt(1)).toInt)
        val start: BigInt = frame.getOrElse("start", null.asInstanceOf[BigInt])
        val lenSeg: BigInt = frame.getOrElse("len", null.asInstanceOf[BigInt])
        val index: BigInt = frame.getOrElse("index", null.asInstanceOf[BigInt])
        val seg: BigInt = lenSeg / BigInt(3)
        if (seg == BigInt(0)) {
          _ct2.break()
        }
        var i: BigInt = index
        while (i < height) {
          var j = start + seg
          while (j < start + BigInt(2) * seg) {
            lines((i).toInt) = setChar(lines((i).toInt), j, " ")
            j = (j + BigInt(1)).asInstanceOf[BigInt]
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
        stack = stack :+ (scala.collection.mutable.Map("start" -> (start), "len" -> (seg), "index" -> (index + BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
        stack = stack :+ (scala.collection.mutable.Map("start" -> (start + seg * BigInt(2)), "len" -> (seg), "index" -> (index + BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
      }
    }
    for (line <- lines) {
      println(line)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
