// Generated by Mochi v0.10.56 on 2025-08-03 18:03:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def p(x: Double, e: Double): Double = {
    var r: Double = 1.0
    var i: BigInt = BigInt(0)
    while (i < BigInt((e.toInt).toInt)) {
      r = r * x
      i = i + BigInt(1)
    }
    return r
  }
  
  def padInt(f: Double): String = {
    val s: String = String.valueOf(f.toInt)
    if (f >= BigInt(0).toString.toDouble) {
      return " " + s
    }
    return s
  }
  
  var ops: ArrayBuffer[String] = ArrayBuffer("-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))")
  
  def main(args: Array[String]): Unit = {
    for (x <- ArrayBuffer(-5.0, 5.0)) {
      for (e <- ArrayBuffer(2.0, 3.0)) {
        val a = -p(x.toString.toDouble, e)
        val b = -p(x.toString.toDouble, e)
        val c: Double = p((-x).toString.toDouble, e)
        val d = -p(x.toString.toDouble, e)
        println("x = " + (if (BigInt(x.toString.toDouble.toInt) < BigInt(0)) "" else " ") + String.valueOf(BigInt(x.toString.toDouble.toInt)) + " e = " + String.valueOf(e.toInt) + " | " + ops((BigInt(0).toInt).toInt) + " = " + padInt(a) + " | " + ops((BigInt(1).toInt).toInt) + " = " + padInt(b) + " | " + ops((BigInt(2).toInt).toInt) + " = " + padInt(c) + " | " + ops((BigInt(3).toInt).toInt) + " = " + padInt(d))
      }
    }
  }
}
