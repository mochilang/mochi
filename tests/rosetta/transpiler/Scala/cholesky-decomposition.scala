// Generated by Mochi v0.10.41 on 2025-07-27 16:11:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def sqrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: BigInt = BigInt(0)
    while (i < BigInt(20)) {
      guess = (guess + x / guess) / 2.0
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    return guess
  }
  
  def cholesky(a: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
    val n: Int = (a).size
    var l: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i < n) {
      var row: ArrayBuffer[Double] = ArrayBuffer()
      var j: BigInt = BigInt(0)
      while (j < n) {
        row = row :+ 0.0
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      l = l :+ row
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    i = BigInt(0)
    while (i < n) {
      var j: BigInt = BigInt(0)
      while (j <= i) {
        var sum: Double = a((i).toInt)((j).toInt)
        var k: BigInt = BigInt(0)
        while (k < j) {
          sum = (sum - l((i).toInt)((k).toInt) * l((j).toInt)((k).toInt)).toString.toDouble
          k = (k + BigInt(1)).asInstanceOf[BigInt]
        }
        if (i == j) {
          l((i).toInt)((j).toInt) = sqrtApprox(sum)
        } else {
          l((i).toInt)((j).toInt) = (sum / l((j).toInt)((j).toInt)).toString.toDouble
        }
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    return l
  }
  
  def printMat(m: ArrayBuffer[ArrayBuffer[Double]]): Any = {
    var i: BigInt = BigInt(0)
    while (i < (m).size) {
      var line: String = ""
      var j: BigInt = BigInt(0)
      while (j < (m((i).toInt)).size) {
        line = (line + String.valueOf(m((i).toInt)((j).toInt))).toString
        if (j < (m((i).toInt)).size - BigInt(1)) {
          line = line + " "
        }
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      println(line)
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
  }
  
  def demo(a: ArrayBuffer[ArrayBuffer[Double]]): Any = {
    println("A:")
    printMat(a)
    val l: ArrayBuffer[ArrayBuffer[Double]] = cholesky(a)
    println("L:")
    printMat(l)
  }
  
  def main(args: Array[String]): Unit = {
    demo((ArrayBuffer(ArrayBuffer(25.0, 15.0, -5.0), ArrayBuffer(15.0, 18.0, 0.0), ArrayBuffer(-5.0, 0.0, 11.0))).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]])
    demo(ArrayBuffer(ArrayBuffer(18.0, 22.0, 54.0, 42.0), ArrayBuffer(22.0, 70.0, 86.0, 62.0), ArrayBuffer(54.0, 86.0, 174.0, 134.0), ArrayBuffer(42.0, 62.0, 134.0, 106.0)))
  }
}
