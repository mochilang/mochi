// Generated by Mochi v0.10.54 on 2025-08-02 12:12:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def cholesky(a: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: Int = (a).size
  var l: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ 0.0
      j = j + BigInt(1)
    }
    l = l :+ row
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j <= i) {
      var sum: Double = a((i.toInt).toInt)((j.toInt).toInt)
      var k: BigInt = BigInt(0)
      while (k < j) {
        sum = (sum - l((i.toInt).toInt)((k.toInt).toInt) * l((j.toInt).toInt)((k.toInt).toInt)).toString.toDouble
        k = k + BigInt(1)
      }
      if (i == j) {
        l((i).toInt)((j).toInt) = sqrtApprox(sum)
      } else {
        l((i).toInt)((j).toInt) = (sum / l((j.toInt).toInt)((j.toInt).toInt)).toString.toDouble
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return l
}

def printMat(m: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < (m).size) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < (m((i.toInt).toInt)).size) {
      line = line + String.valueOf(m((i.toInt).toInt)((j.toInt).toInt))
      if (j < (m((i.toInt).toInt)).size - BigInt(1).toInt) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

def demo(a: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  println("A:")
  printMat(a)
  var l: ArrayBuffer[ArrayBuffer[Double]] = cholesky(a)
  println("L:")
  printMat(l)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    demo((ArrayBuffer(ArrayBuffer(25.0, 15.0, -5.0), ArrayBuffer(15.0, 18.0, 0.0), ArrayBuffer(-5.0, 0.0, 11.0))).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]])
    demo(ArrayBuffer(ArrayBuffer(18.0, 22.0, 54.0, 42.0), ArrayBuffer(22.0, 70.0, 86.0, 62.0), ArrayBuffer(54.0, 86.0, 174.0, 134.0), ArrayBuffer(42.0, 62.0, 134.0, 106.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
