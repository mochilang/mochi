// Generated by Mochi v0.10.40 on 2025-07-25 21:08:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def concatInts(a: ArrayBuffer[Int], b: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var out: ArrayBuffer[Int] = ArrayBuffer()
      for (v <- a) {
        out = out :+ v
      }
      for (v <- b) {
        out = out :+ v
      }
      return out
    }
    def concatAny(a: ArrayBuffer[Any], b: ArrayBuffer[Any]): ArrayBuffer[Any] = {
      var out: ArrayBuffer[Any] = ArrayBuffer()
      for (v <- a) {
        out = out :+ v
      }
      for (v <- b) {
        out = out :+ v
      }
      return out
    }
    var a: ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)
    var b: ArrayBuffer[Int] = ArrayBuffer(7, 12, 60)
    println(String.valueOf(concatInts(a, b)))
    var i: ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)
    var j: ArrayBuffer[String] = ArrayBuffer("Crosby", "Stills", "Nash", "Young")
    println(String.valueOf(concatAny(i.asInstanceOf[ArrayBuffer[Any]], j.asInstanceOf[ArrayBuffer[Any]])))
    var l: ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)
    var m: ArrayBuffer[Int] = ArrayBuffer(7, 12, 60)
    println(String.valueOf(concatInts(l, m)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
