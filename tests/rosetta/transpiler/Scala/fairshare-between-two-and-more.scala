// Generated by Mochi v0.10.52 on 2025-08-02 02:08:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.annotation.tailrec
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _padStart(s: String, width: Int, pad: String): String = {
  var out = s
  while (out.length < width) { out = pad + out }
  out
}

def digitSumMod(n: BigInt, base: BigInt): BigInt = {
  var sum: BigInt = BigInt(0)
  var j: BigInt = n
  while (j > BigInt(0)) {
    sum = sum + j % base
    j = j / base
  }
  return sum % base
}

def fairshareList(n: BigInt, base: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res :+ digitSumMod(i, base)
    i = i + BigInt(1)
  }
  return res
}

def sortInts(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var i: BigInt = BigInt(0)
  while (i < (arr).size) {
    var j: BigInt = BigInt(0)
    while (j < (arr).size - BigInt(1).toInt) {
      if (arr((j).toInt) > arr((j + BigInt(1)).toInt)) {
        val t: BigInt = arr((j).toInt)
        arr((j).toInt) = arr((j + BigInt(1)).toInt)
        arr((j + BigInt(1)).toInt) = t
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def turns(n: BigInt, base: BigInt): String = {
  var counts: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < base) {
    counts = counts :+ BigInt(0)
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    val v: BigInt = digitSumMod(i, base)
    counts((v).toInt) = counts((v).toInt) + BigInt(1)
    i = i + BigInt(1)
  }
  var freq: scala.collection.mutable.Map[BigInt,BigInt] = scala.collection.mutable.Map()
  var fkeys: ArrayBuffer[BigInt] = ArrayBuffer()
  i = BigInt(0)
  while (i < base) {
    val c: BigInt = counts((i).toInt)
    if (c > BigInt(0)) {
      if ((freq.contains(c)).asInstanceOf[Boolean]) {
        freq.update(c, freq(c) + BigInt(1))
      } else {
        freq.update(c, BigInt(1))
        fkeys = fkeys :+ c
      }
    }
    i = i + BigInt(1)
  }
  var total: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < (fkeys).size) {
    total = total + freq(fkeys((i).toInt))
    i = i + BigInt(1)
  }
  if (total != base) {
    return "only " + String.valueOf(total) + " have a turn"
  }
  fkeys = sortInts(fkeys)
  var res: String = ""
  i = BigInt(0)
  while (i < (fkeys).size) {
    if (i > BigInt(0)) {
      res = res + " or "
    }
    res = res + String.valueOf(fkeys((i).toInt))
    i = i + BigInt(1)
  }
  return res
}

def main(): Any = {
  var bases1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(11))
  var i: BigInt = BigInt(0)
  while (i < (bases1).size) {
    val b: BigInt = bases1((i).toInt)
    println(_padStart(String.valueOf(b), BigInt(2).toInt, " ") + " : " + String.valueOf(fairshareList(BigInt(25), b)))
    i = i + BigInt(1)
  }
  println("")
  println("How many times does each get a turn in 50000 iterations?")
  var bases2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(191), BigInt(1377), BigInt(49999), BigInt(50000), BigInt(50001))
  i = BigInt(0)
  while (i < (bases2).size) {
    val b: BigInt = bases2((i).toInt)
    val t: String = turns(BigInt(50000), b)
    println("  With " + String.valueOf(b) + " people: " + t)
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
