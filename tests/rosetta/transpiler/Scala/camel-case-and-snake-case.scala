// Generated by Mochi v0.10.40 on 2025-07-26 09:47:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def trimSpace(s: String): String = {
      var start: BigInt = BigInt(0)
      while (start < (s).size && s.slice((start).toInt, (start + BigInt(1)).toInt) == " ") {
        start = (start + BigInt(1)).asInstanceOf[BigInt]
      }
      var end: Int = (s).size
      while (end > start && s.slice((end - BigInt(1)).toInt, (end).toInt) == " ") {
        end = (end - BigInt(1)).asInstanceOf[Int]
      }
      return s.slice((start).toInt, (end).toInt)
    }
    def isUpper(ch: String): Boolean = {
      return (ch >= "A" && ch <= "Z").asInstanceOf[Boolean]
    }
    def padLeft(s: String, w: BigInt): String = {
      var res: String = ""
      var n = w - (s).size
      while (n > BigInt(0)) {
        res = res + " "
        n = (n - BigInt(1)).asInstanceOf[BigInt]
      }
      return (res + s).toString
    }
    def snakeToCamel(_s: String): String = {
      var s: String = _s
      s = trimSpace(s)
      var out: String = ""
      var up: Boolean = false
      var i: BigInt = BigInt(0)
      val _ct3 = new Breaks
      while (i < (s).size) {
        _ct3.breakable {
          val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
          if ((((ch == "_" || ch == "-").asInstanceOf[Boolean] || ch == " ").asInstanceOf[Boolean] || ch == ".").asInstanceOf[Boolean]) {
            up = true
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct3.break()
          }
          if (i == BigInt(0)) {
            out = (out + ch.toLowerCase()).toString
            up = false
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct3.break()
          }
          if (up) {
            out = (out + ch.toUpperCase()).toString
            up = false
          } else {
            out = (out + ch).toString
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      return out
    }
    def camelToSnake(_s: String): String = {
      var s: String = _s
      s = trimSpace(s)
      var out: String = ""
      var prevUnd: Boolean = false
      var i: BigInt = BigInt(0)
      val _ct4 = new Breaks
      while (i < (s).size) {
        _ct4.breakable {
          val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
          if (((ch == " " || ch == "-").asInstanceOf[Boolean] || ch == ".").asInstanceOf[Boolean]) {
            if (((!prevUnd).asInstanceOf[Boolean] && (out).size > BigInt(0)).asInstanceOf[Boolean]) {
              out = out + "_"
              prevUnd = true
            }
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct4.break()
          }
          if (ch == "_") {
            if (((!prevUnd).asInstanceOf[Boolean] && (out).size > BigInt(0)).asInstanceOf[Boolean]) {
              out = out + "_"
              prevUnd = true
            }
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct4.break()
          }
          if (isUpper(ch)) {
            if ((i > BigInt(0) && (!prevUnd).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
              out = out + "_"
            }
            out = (out + ch.toLowerCase()).toString
            prevUnd = false
          } else {
            out = (out + ch.toLowerCase()).toString
            prevUnd = false
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      var start: BigInt = BigInt(0)
      while (start < (out).size && out.slice((start).toInt, (start + BigInt(1)).toInt) == "_") {
        start = (start + BigInt(1)).asInstanceOf[BigInt]
      }
      var end: Int = (out).size
      while (end > start && out.slice((end - BigInt(1)).toInt, (end).toInt) == "_") {
        end = (end - BigInt(1)).asInstanceOf[Int]
      }
      out = out.slice((start).toInt, (end).toInt)
      var res: String = ""
      var j: BigInt = BigInt(0)
      var lastUnd: Boolean = false
      while (j < (out).size) {
        val c: String = out.slice((j).toInt, (j + BigInt(1)).toInt)
        if (c == "_") {
          if ((!lastUnd).asInstanceOf[Boolean]) {
            res = (res + c).toString
          }
          lastUnd = true
        } else {
          res = (res + c).toString
          lastUnd = false
        }
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def main(): Any = {
      val samples: ArrayBuffer[String] = ArrayBuffer("snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "\u025brgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces ")
      println("=== To snake_case ===")
      for (s <- samples) {
        println(padLeft(s.toString, BigInt(34)) + " => " + camelToSnake(s.toString))
      }
      println("")
      println("=== To camelCase ===")
      for (s <- samples) {
        println(padLeft(s.toString, BigInt(34)) + " => " + snakeToCamel(s.toString))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
