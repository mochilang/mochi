// Generated by Mochi v0.10.50 on 2025-07-30 21:21:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var given: ArrayBuffer[String] = ArrayBuffer("ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB")
    def idx(ch: String): BigInt = {
      if (ch == "A") {
        return BigInt(0)
      }
      if (ch == "B") {
        return BigInt(1)
      }
      if (ch == "C") {
        return BigInt(2)
      }
      return BigInt(3)
    }
    def main(): Any = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (given((BigInt(0)).toInt)).size) {
        var counts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0))
        for (p <- given) {
          val ch: String = p.slice((i).toInt, (i + BigInt(1)).toInt)
          val j: BigInt = idx(ch)
          counts((j).toInt) = counts((j).toInt) + BigInt(1)
        }
        var j: BigInt = BigInt(0)
        while (j < BigInt(4)) {
          if (counts((j).toInt) % BigInt(2) == BigInt(1)) {
            if (j == BigInt(0)) {
              res = res + "A"
            } else {
              if (j == BigInt(1)) {
                res = res + "B"
              } else {
                if (j == BigInt(2)) {
                  res = res + "C"
                } else {
                  res = res + "D"
                }
              }
            }
          }
          j = (j + BigInt(1)).asInstanceOf[BigInt]
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      println(res)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
