// Generated by Mochi v0.10.40 on 2025-07-25 12:56:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def indexOf(xs: ArrayBuffer[Int], value: Int): Int = {
    var i: Int = 0
    while (i < (xs).size) {
      if (xs(i) == value) {
        return i
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return 0 - 1
  }
  
  def contains(xs: ArrayBuffer[Int], value: Int): Boolean = {
    return indexOf(xs, value) != 0 - 1
  }
  
  def maxOf(a: Int, b: Int): Int = {
    if (a > b) {
      return a
    } else {
      return b
    }
  }
  
  def intSqrt(n: Int): Int = {
    if (n == 0) {
      return 0
    }
    var x: Int = n
    var y = (x + 1) / 2
    while (y < x) {
      x = y
      y = ((x + n / x) / 2).asInstanceOf[Int]
    }
    return x
  }
  
  def sumProperDivisors(n: Int): Int = {
    if (n < 2) {
      return 0
    }
    val sqrt: Int = intSqrt(n)
    var sum: Int = 1
    var i: Int = 2
    while (i <= sqrt) {
      if (Math.floorMod(n, i) == 0) {
        sum = (sum + i).asInstanceOf[Int] + (n / i).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    if (sqrt * sqrt == n) {
      sum = (sum - sqrt).asInstanceOf[Int]
    }
    return sum
  }
  
  def classifySequence(k: Int): Map[String,Any] = {
    var last: Int = k
    var seq: ArrayBuffer[Int] = ArrayBuffer(k)
    while (true) {
      last = sumProperDivisors(last)
      seq = seq :+ last
      val n: Int = (seq).size
      var aliquot: String = ""
      if (last == 0) {
        aliquot = "Terminating"
      } else {
        if ((n == 2 && last == k).asInstanceOf[Boolean]) {
          aliquot = "Perfect"
        } else {
          if ((n == 3 && last == k).asInstanceOf[Boolean]) {
            aliquot = "Amicable"
          } else {
            if ((n >= 4 && last == k).asInstanceOf[Boolean]) {
              aliquot = "Sociable[" + String.valueOf(n - 1) + "]"
            } else {
              if (last == seq(n - 2)) {
                aliquot = "Aspiring"
              } else {
                if (contains(seq.slice(1, maxOf(1, (n - 2).asInstanceOf[Int])), last)) {
                  val idx: Int = indexOf(seq, last)
                  aliquot = "Cyclic[" + String.valueOf(n - 1 - idx) + "]"
                } else {
                  if ((n == 16 || last > THRESHOLD).asInstanceOf[Boolean]) {
                    aliquot = "Non-Terminating"
                  }
                }
              }
            }
          }
        }
      }
      if (aliquot != "") {
        return Map("seq" -> (seq), "aliquot" -> (aliquot))
      }
    }
    return Map("seq" -> (seq), "aliquot" -> (""))
  }
  
  def padLeft(n: Int, w: Int): String = {
    var s = String.valueOf(n)
    while ((s).size < w) {
      s = " " + s
    }
    return s
  }
  
  def padRight(s: String, w: Int): String = {
    var r: String = s
    while ((r).size < w) {
      r = r + " "
    }
    return r
  }
  
  def joinWithCommas(seq: ArrayBuffer[Int]): String = {
    var s: String = "["
    var i: Int = 0
    while (i < (seq).size) {
      s = (s + String.valueOf(seq(i))).asInstanceOf[String]
      if (i < (seq).size - 1) {
        s = s + ", "
      }
      i = (i + 1).asInstanceOf[Int]
    }
    s = s + "]"
    return s
  }
  
  def main(): Unit = {
    println("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
    var k: Int = 1
    while (k <= 10) {
      val res: Map[String,Any] = classifySequence(k)
      println(padLeft(k, 2) + ": " + padRight((res.getOrElse("aliquot", null.asInstanceOf[Any])).toString, 15) + " " + joinWithCommas((res.getOrElse("seq", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]))
      k = (k + 1).asInstanceOf[Int]
    }
    println("")
    val s: ArrayBuffer[Int] = ArrayBuffer(11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488)
    var i: Int = 0
    while (i < (s).size) {
      val `val`: Int = s(i)
      val res: Map[String,Any] = classifySequence(`val`)
      println(padLeft(`val`, 7) + ": " + padRight((res.getOrElse("aliquot", null.asInstanceOf[Any])).toString, 15) + " " + joinWithCommas((res.getOrElse("seq", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]))
      i = (i + 1).asInstanceOf[Int]
    }
    println("")
    val big: Long = 15355717786080L
    val r: Map[String,Any] = classifySequence(big.asInstanceOf[Int])
    println(String.valueOf(big) + ": " + padRight((r.getOrElse("aliquot", null.asInstanceOf[Any])).toString, 15) + " " + joinWithCommas((r.getOrElse("seq", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]]))
  }
  
  val THRESHOLD: Long = 140737488355328L
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
