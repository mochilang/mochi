// Generated by Mochi v0.10.50 on 2025-07-30 21:30:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow_int(base: BigInt, exp: BigInt): BigInt = {
      var result: BigInt = BigInt(1)
      var b: BigInt = base
      var e: BigInt = exp
      while (e > BigInt(0)) {
        if (e % BigInt(2) == BigInt(1)) {
          result = (result * b).asInstanceOf[BigInt]
        }
        b = (b * b).asInstanceOf[BigInt]
        e = e / BigInt(2)
      }
      return result
    }
    def pow_big(base: BigInt, exp: BigInt): BigInt = {
      var result: BigInt = BigInt(1)
      var b: BigInt = base
      var e: BigInt = exp
      while (e > BigInt(0)) {
        if (e % BigInt(2) == BigInt(1)) {
          result = (result * b).asInstanceOf[BigInt]
        }
        b = (b * b).asInstanceOf[BigInt]
        e = e / BigInt(2)
      }
      return result
    }
    def parseBigInt(str: String): BigInt = {
      var i: BigInt = BigInt(0)
      var neg: Boolean = false
      if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        i = BigInt(1)
      }
      var n: BigInt = BigInt(0)
      while (i < (str).size) {
        val ch: String = str.slice((i).toInt, (i + BigInt(1)).toInt)
        val d: BigInt = BigInt(ch.toInt)
        n = (n * BigInt(10) + BigInt(d.toInt)).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      if (neg) {
        n = (BigInt(0) - n).asInstanceOf[BigInt]
      }
      return n
    }
    def fermat(n: BigInt): BigInt = {
      val p: BigInt = pow_int(BigInt(2), n)
      return (pow_big(BigInt(2), p) + BigInt(1)).asInstanceOf[BigInt]
    }
    def primeFactorsBig(n: BigInt): ArrayBuffer[BigInt] = {
      var factors: ArrayBuffer[BigInt] = ArrayBuffer()
      var m: BigInt = n
      var d: BigInt = BigInt(2)
      while (m % d == BigInt(0)) {
        factors = factors :+ d
        m = (m / d).asInstanceOf[BigInt]
      }
      d = BigInt(3)
      while (d * d <= m) {
        while (m % d == BigInt(0)) {
          factors = factors :+ d
          m = (m / d).asInstanceOf[BigInt]
        }
        d = (d + BigInt(2)).asInstanceOf[BigInt]
      }
      if (m > BigInt(1)) {
        factors = factors :+ m
      }
      return factors
    }
    def show_list(xs: ArrayBuffer[BigInt]): String = {
      var line: String = ""
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        line = (line + String.valueOf(xs((i).toInt))).toString
        if (i < (xs).size - BigInt(1)) {
          line = line + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return line
    }
    def main(): Any = {
      var nums: ArrayBuffer[BigInt] = ArrayBuffer()
      for (i <- BigInt(0) until BigInt(8)) {
        nums = nums :+ fermat(i.asInstanceOf[BigInt])
      }
      println("First 8 Fermat numbers:")
      for (n <- nums) {
        println(String.valueOf(n))
      }
      val extra: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(6) -> (ArrayBuffer(BigInt(274177), BigInt("67280421310721"))), BigInt(7) -> (ArrayBuffer(parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721"))))
      println("\nFactors:")
      var i: BigInt = BigInt(0)
      while (i < (nums).size) {
        var facs: ArrayBuffer[BigInt] = ArrayBuffer()
        if (i <= BigInt(5)) {
          facs = primeFactorsBig(nums((i).toInt))
        } else {
          facs = extra.getOrElse(i, null.asInstanceOf[ArrayBuffer[BigInt]])
        }
        println("F" + String.valueOf(i) + " = " + show_list(facs))
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
