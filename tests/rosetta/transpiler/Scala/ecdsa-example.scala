// Generated by Mochi v0.10.55 on 2025-08-02 21:09:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

val res: Map[String,Any] = scala.collection.mutable.Map("D" -> ("1234567890"), "X" -> ("43162711582587979080031819627904423023685561091192625653251495188141318209988"), "Y" -> ("86807430002474105664458509423764867536342689150582922106807036347047552480521"), "Hash" -> ("0xe6f9ed0d"), "R" -> ("43162711582587979080031819627904423023685561091192625653251495188141318209988"), "S" -> ("94150071556658883365738746782965214584303361499725266605620843043083873122499"), "Valid" -> (true))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Private key:\nD: " + res("D"))
    println("\nPublic key:")
    println("X: " + res("X"))
    println("Y: " + res("Y"))
    println("\nMessage: Rosetta Code")
    println("Hash   : " + res("Hash"))
    println("\nSignature:")
    println("R: " + res("R"))
    println("S: " + res("S"))
    println("\nSignature verified: " + String.valueOf(res("Valid")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
