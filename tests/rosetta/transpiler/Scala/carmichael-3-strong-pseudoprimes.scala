// Generated by Mochi v0.10.40 on 2025-07-26 09:47:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def mod(n: BigInt, m: BigInt): BigInt = {
      return ((n % m + m) % m).asInstanceOf[BigInt]
    }
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      if (n % BigInt(2) == BigInt(0)) {
        return n == BigInt(2)
      }
      if (n % BigInt(3) == BigInt(0)) {
        return n == BigInt(3)
      }
      var d: BigInt = BigInt(5)
      while (d * d <= n) {
        if (n % d == BigInt(0)) {
          return false
        }
        d = (d + BigInt(2)).asInstanceOf[BigInt]
        if (n % d == BigInt(0)) {
          return false
        }
        d = (d + BigInt(4)).asInstanceOf[BigInt]
      }
      return true
    }
    def pad(n: BigInt, width: BigInt): String = {
      var s = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def carmichael(p1: BigInt): Any = {
      val _ct2 = new Breaks
      for (h3 <- BigInt(2) until p1) {
        _ct2.breakable {
          val _ct3 = new Breaks
          for (d <- BigInt(1) until h3 + p1) {
            _ct3.breakable {
              if (((h3 + p1).toString.toDouble * (p1 - BigInt(1)).toString.toDouble % d == BigInt(0) && mod(((BigInt(0) - p1) * p1).asInstanceOf[BigInt], h3.asInstanceOf[BigInt]) == d.toString.toDouble % h3.toString.toDouble).asInstanceOf[Boolean]) {
                val p2: Double = BigInt(1) + (p1 - BigInt(1)).toString.toDouble * (h3 + p1).toString.toDouble / d
                if ((!isPrime(p2.asInstanceOf[BigInt])).asInstanceOf[Boolean]) {
                  _ct3.break()
                }
                val p3: Double = BigInt(1) + (p1 * p2).toString.toDouble / h3.toString.toDouble
                if ((!isPrime(p3.asInstanceOf[BigInt])).asInstanceOf[Boolean]) {
                  _ct3.break()
                }
                if ((p2 * p3).toString.toDouble % (p1 - BigInt(1)).toString.toDouble != BigInt(1)) {
                  _ct3.break()
                }
                val c = p1 * p2 * p3
                println(pad(p1, BigInt(2)) + "   " + pad(p2.asInstanceOf[BigInt], BigInt(4)) + "   " + pad(p3.asInstanceOf[BigInt], BigInt(5)) + "     " + String.valueOf(c))
              }
            }
          }
        }
      }
    }
    println("The following are Carmichael munbers for p1 <= 61:\n")
    println("p1     p2      p3     product")
    println("==     ==      ==     =======")
    for (p1 <- BigInt(2) until BigInt(62)) {
      if (isPrime(p1.asInstanceOf[BigInt])) {
        carmichael(p1.asInstanceOf[BigInt])
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
