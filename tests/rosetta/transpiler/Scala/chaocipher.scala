// Generated by Mochi v0.10.40 on 2025-07-26 09:48:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOf(s: String, ch: String): BigInt = {
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
          return i
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
    }
    def rotate(s: String, n: BigInt): String = {
      return s.slice((n).toInt, ((s).size).toInt) + s.slice((BigInt(0)).toInt, (n).toInt)
    }
    def scrambleLeft(s: String): String = {
      return s.slice((BigInt(0)).toInt, (BigInt(1)).toInt) + s.slice((BigInt(2)).toInt, (BigInt(14)).toInt) + s.slice((BigInt(1)).toInt, (BigInt(2)).toInt) + s.slice((BigInt(14)).toInt, ((s).size).toInt)
    }
    def scrambleRight(s: String): String = {
      return s.slice((BigInt(1)).toInt, (BigInt(3)).toInt) + s.slice((BigInt(4)).toInt, (BigInt(15)).toInt) + s.slice((BigInt(3)).toInt, (BigInt(4)).toInt) + s.slice((BigInt(15)).toInt, ((s).size).toInt) + s.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
    }
    def chao(text: String, encode: Boolean): String = {
      var left: String = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
      var right: String = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
      var out: String = ""
      var i: BigInt = BigInt(0)
      while (i < (text).size) {
        val ch: String = text.slice((i).toInt, (i + BigInt(1)).toInt)
        var idx: BigInt = BigInt(0)
        if (encode) {
          idx = indexOf(right, ch)
          out = out + left.slice((idx).toInt, (idx + BigInt(1)).toInt)
        } else {
          idx = indexOf(left, ch)
          out = out + right.slice((idx).toInt, (idx + BigInt(1)).toInt)
        }
        left = rotate(left, idx)
        right = rotate(right, idx)
        left = scrambleLeft(left)
        right = scrambleRight(right)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return out
    }
    def main(): Any = {
      val plain: String = "WELLDONEISBETTERTHANWELLSAID"
      val cipher: String = chao(plain, true)
      println(plain)
      println(cipher)
      println(chao(cipher, false))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
