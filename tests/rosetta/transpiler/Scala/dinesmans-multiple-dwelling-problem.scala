// Generated by Mochi v0.10.52 on 2025-08-01 19:06:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def absInt(n: BigInt): BigInt = {
      if (n < BigInt(0)) {
        return BigInt(0) - n
      }
      return n
    }
    def main(): Any = {
      var b: BigInt = BigInt(1)
      while (b <= BigInt(5)) {
        if (b != BigInt(5)) {
          var c: BigInt = BigInt(1)
          while (c <= BigInt(5)) {
            if ((c != BigInt(1) && c != b).asInstanceOf[Boolean]) {
              var f: BigInt = BigInt(1)
              while (f <= BigInt(5)) {
                if (((((f != BigInt(1) && f != BigInt(5)).asInstanceOf[Boolean] && f != b).asInstanceOf[Boolean] && f != c).asInstanceOf[Boolean] && absInt(f - c) > BigInt(1)).asInstanceOf[Boolean]) {
                  var m: BigInt = BigInt(1)
                  while (m <= BigInt(5)) {
                    if ((((m != b && m != c).asInstanceOf[Boolean] && m != f).asInstanceOf[Boolean] && m > c).asInstanceOf[Boolean]) {
                      var s: BigInt = BigInt(1)
                      while (s <= BigInt(5)) {
                        if (((((s != b && s != c).asInstanceOf[Boolean] && s != f).asInstanceOf[Boolean] && s != m).asInstanceOf[Boolean] && absInt(s - f) > BigInt(1)).asInstanceOf[Boolean]) {
                          println("Baker in " + String.valueOf(b) + ", Cooper in " + String.valueOf(c) + ", Fletcher in " + String.valueOf(f) + ", Miller in " + String.valueOf(m) + ", Smith in " + String.valueOf(s) + ".")
                          return
                        }
                        s = s + BigInt(1)
                      }
                    }
                    m = m + BigInt(1)
                  }
                }
                f = f + BigInt(1)
              }
            }
            c = c + BigInt(1)
          }
        }
        b = b + BigInt(1)
      }
      println("No solution found.")
      return null
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
