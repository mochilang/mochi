// Generated by Mochi v0.10.56 on 2025-08-04 00:21:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class SumCarry(var s: Boolean, var c: Boolean)

case class Add4Result(var v: Boolean, var s3: Boolean, var s2: Boolean, var s1: Boolean, var s0: Boolean)

def xor(a: Boolean, b: Boolean): Boolean = {
  return ((a && (!b).asInstanceOf[Boolean]).asInstanceOf[Boolean] || ((!a).asInstanceOf[Boolean] && b).asInstanceOf[Boolean]).asInstanceOf[Boolean]
}

def ha(a: Boolean, b: Boolean): SumCarry = {
  return SumCarry(xor(a, b), a && b)
}

def fa(a: Boolean, b: Boolean, c0: Boolean): SumCarry = {
  val r1: SumCarry = ha(a, c0)
  val r2: SumCarry = ha(r1.s, b)
  return SumCarry(r2.s, r1.c || r2.c)
}

def add4(a3: Boolean, a2: Boolean, a1: Boolean, a0: Boolean, b3: Boolean, b2: Boolean, b1: Boolean, b0: Boolean): Add4Result = {
  val r0: SumCarry = fa(a0, b0, false)
  val r1: SumCarry = fa(a1, b1, r0.c)
  val r2: SumCarry = fa(a2, b2, r1.c)
  val r3: SumCarry = fa(a3, b3, r2.c)
  return Add4Result(r3.c, r3.s, r2.s, r1.s, r0.s)
}

def b2i(b: Boolean): BigInt = {
  if (b) {
    return BigInt(1)
  }
  return BigInt(0)
}

def main(): Any = {
  val r: Add4Result = add4(true, false, true, false, true, false, false, true)
  println(String.valueOf(b2i(r.v)) + " " + String.valueOf(b2i(r.s3)) + " " + String.valueOf(b2i(r.s2)) + " " + String.valueOf(b2i(r.s1)) + " " + String.valueOf(b2i(r.s0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
