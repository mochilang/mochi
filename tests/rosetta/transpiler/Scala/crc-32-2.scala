// Generated by Mochi v0.10.54 on 2025-08-02 14:23:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def xor(a: BigInt, b: BigInt): BigInt = {
    var res: BigInt = BigInt(0)
    var bit: BigInt = BigInt(1)
    var x: BigInt = a
    var y: BigInt = b
    while (x > BigInt(0) || y > BigInt(0)) {
      val abit: BigInt = x % BigInt(2)
      val bbit: BigInt = y % BigInt(2)
      if (abit != bbit) {
        res = res + bit
      }
      x = x / BigInt(2)
      y = y / BigInt(2)
      bit = bit * BigInt(2)
    }
    return res
  }
  
  def rshift(x: BigInt, n: BigInt): BigInt = {
    var v: BigInt = x
    var i: BigInt = BigInt(0)
    while (i < n) {
      v = v / BigInt(2)
      i = i + BigInt(1)
    }
    return v
  }
  
  def ord(ch: String): BigInt = {
    val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    val lower: String = "abcdefghijklmnopqrstuvwxyz"
    var idx: BigInt = BigInt(upper.indexOf(ch))
    if (idx >= BigInt(0)) {
      return BigInt(65) + idx
    }
    idx = BigInt(lower.indexOf(ch))
    if (idx >= BigInt(0)) {
      return BigInt(97) + idx
    }
    if (ch == " ") {
      return BigInt(32)
    }
    return BigInt(0)
  }
  
  def toHex(n: BigInt): String = {
    val digits: String = "0123456789ABCDEF"
    if (n == BigInt(0)) {
      return "0"
    }
    var v: BigInt = n
    var out: String = ""
    while (v > BigInt(0)) {
      val d: BigInt = v % BigInt(16)
      out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
      v = v / BigInt(16)
    }
    return out
  }
  
  def crc32Table(): ArrayBuffer[BigInt] = {
    var table: ArrayBuffer[BigInt] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i < BigInt(256)) {
      var word: BigInt = i
      var j: BigInt = BigInt(0)
      while (j < BigInt(8)) {
        if (word % BigInt(2) == BigInt(1)) {
          word = xor(rshift(word, BigInt(1)), BigInt("3988292384"))
        } else {
          word = rshift(word, BigInt(1))
        }
        j = j + BigInt(1)
      }
      table = table :+ word
      i = i + BigInt(1)
    }
    return table
  }
  
  def crc32(s: String): BigInt = {
    var crc: BigInt = BigInt("4294967295")
    var i: BigInt = BigInt(0)
    while (i < (s).size) {
      val c: BigInt = ord(s.slice((i).toInt, (i + BigInt(1)).toInt))
      val idx: BigInt = xor(crc % BigInt(256), c)
      crc = xor(table((idx.toInt).toInt), rshift(crc, BigInt(8)))
      i = i + BigInt(1)
    }
    return BigInt("4294967295") - crc
  }
  
  def main(): Any = {
    val s: String = "The quick brown fox jumps over the lazy dog"
    val result: BigInt = crc32(s)
    val hex = toHex(result).toLowerCase()
    println(hex)
  }
  
  val table: ArrayBuffer[BigInt] = crc32Table()
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
