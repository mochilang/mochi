// Generated by Mochi v0.10.52 on 2025-08-02 00:20:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def log2(x: Double): Double = {
  var k: Double = 0.0
  var v: Double = x
  while (v >= 2.0) {
    v = v / 2.0
    k = k + 1.0
  }
  while (v < 1.0) {
    v = v * 2.0
    k = k - 1.0
  }
  val z: Double = (v - 1.0) / (v + 1.0)
  var zpow: Double = z
  var sum: Double = z
  var i: BigInt = BigInt(3)
  while (i <= BigInt(9)) {
    zpow = (zpow * z * z).toString.toDouble
    sum = sum + zpow / i.toString.toDouble
    i = i + BigInt(2)
  }
  val ln2: Double = 0.6931471805599453
  return k + 2.0 * sum / ln2
}

def entropy(data: String): Double = {
  if (data == "") {
    return 0.0
  }
  var counts: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map()
  var i: BigInt = BigInt(0)
  while (i < (data).size) {
    val ch: String = data.slice((i).toInt, (i + BigInt(1)).toInt)
    if ((counts.contains(ch)).asInstanceOf[Boolean]) {
      counts.update(ch, counts(ch) + BigInt(1))
    } else {
      counts.update(ch, BigInt(1))
    }
    i = i + BigInt(1)
  }
  var e: Double = 0.0
  val l: Double = ((data).size).toString.toDouble
  for (ch <- counts.keys) {
    val px: Double = (counts(ch)).toString.toDouble / l
    if (px > 0.0) {
      e = (e - px * log2(px)).toString.toDouble
    }
  }
  return e
}

def main(): Any = {
  println("Source file entropy: " + String.valueOf(entropy(source)))
}

val source: String = "// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" + "// Simplified to compute the entropy of this source string\n\n" + "fun log2(x: float): float {\n" + "  var k = 0.0\n" + "  var v = x\n" + "  while v >= 2.0 {\n" + "    v = v / 2.0\n" + "    k = k + 1.0\n" + "  }\n" + "  while v < 1.0 {\n" + "    v = v * 2.0\n" + "    k = k - 1.0\n" + "  }\n" + "  let z = (v - 1.0) / (v + 1.0)\n" + "  var zpow = z\n" + "  var sum = z\n" + "  var i = 3\n" + "  while i <= 9 {\n" + "    zpow = zpow * z * z\n" + "    sum = sum + zpow / (i as float)\n" + "    i = i + 2\n" + "  }\n" + "  let ln2 = 0.6931471805599453\n" + "  return k + 2.0 * sum / ln2\n" + "}\n\n" + "fun entropy(data: string): float {\n" + "  if data == \"\" { return 0.0 }\n" + "  var counts: map<string,int> = {}\n" + "  var i = 0\n" + "  while i < len(data) {\n" + "    let ch = substring(data, i, i+1)\n" + "    if ch in counts {\n" + "      counts[ch] = counts[ch] + 1\n" + "    } else {\n" + "      counts[ch] = 1\n" + "    }\n" + "    i = i + 1\n" + "  }\n" + "  var e = 0.0\n" + "  let l = len(data) as float\n" + "  for ch in counts {\n" + "    let px = (counts[ch] as float) / l\n" + "    if px > 0.0 {\n" + "      e = e - px * log2(px)\n" + "    }\n" + "  }\n" + "  return e\n" + "}\n\n" + "// Store the program source as a string constant\n" + "let source = ... // truncated in actual source\n" + "\nfun main() {\n" + "  print(\"Source file entropy: \" + str(entropy(source)))\n" + "}\n\n" + "main()\n"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
