// Generated by Mochi v0.10.55 on 2025-08-03 09:05:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def generatePrimes(n: BigInt): ArrayBuffer[BigInt] = {
  var primes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
  var cand: BigInt = BigInt(3)
  val _br0 = new Breaks
  _br0.breakable {
    while (BigInt(((primes).size).toInt) < n) {
      var isP: Boolean = true
      var i: BigInt = BigInt(0)
      val _br1 = new Breaks
      _br1.breakable {
        while (i < BigInt(((primes).size).toInt)) {
          val p: BigInt = primes((i.toInt).toInt)
          if (p * p > cand) {
            _br1.break()
          }
          if (cand % p == BigInt(0)) {
            isP = false
            _br1.break()
          }
          i = i + BigInt(1)
        }
      }
      if (isP) {
        primes = primes :+ cand
      }
      cand = cand + BigInt(2)
    }
  }
  return primes
}

def primeFactors(n: BigInt, primes: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var factors: ArrayBuffer[BigInt] = ArrayBuffer()
  var num: BigInt = n
  var i: BigInt = BigInt(0)
  while (i < BigInt(((primes).size).toInt) && primes((i.toInt).toInt) * primes((i.toInt).toInt) <= num) {
    val p: BigInt = primes((i.toInt).toInt)
    while (num % p == BigInt(0)) {
      factors = factors :+ p
      num = num / p
    }
    i = i + BigInt(1)
  }
  if (num > BigInt(1)) {
    factors = factors :+ num
  }
  return factors
}

def cat(p: BigInt, primes: ArrayBuffer[BigInt]): BigInt = {
  if ((prevCats.contains(p)).asInstanceOf[Boolean]) {
    return prevCats.getOrElse(p.toInt, null).asInstanceOf[BigInt]
  }
  var pf: ArrayBuffer[BigInt] = primeFactors(p + BigInt(1), primes)
  var all23: Boolean = true
  val _br4 = new Breaks
  _br4.breakable {
    for (f <- pf) {
      if ((f != BigInt(2) && f != BigInt(3)).asInstanceOf[Boolean]) {
        all23 = false
        _br4.break()
      }
    }
  }
  if (all23) {
    prevCats.update(p, BigInt(1))
    return BigInt(1)
  }
  if (p > BigInt(2)) {
    var unique: ArrayBuffer[BigInt] = ArrayBuffer()
    var last: BigInt = BigInt(0) - BigInt(1)
    for (f <- pf) {
      if (f != last) {
        unique = unique :+ f
        last = f
      }
    }
    pf = unique
  }
  var c: BigInt = BigInt(2)
  val _br6 = new Breaks
  _br6.breakable {
    while (c <= BigInt(11)) {
      var ok: Boolean = true
      val _br7 = new Breaks
      _br7.breakable {
        for (f <- pf) {
          if (cat(f, primes) >= c) {
            ok = false
            _br7.break()
          }
        }
      }
      if (ok) {
        prevCats.update(p, c)
        return c
      }
      c = c + BigInt(1)
    }
  }
  prevCats.update(p, BigInt(12))
  return BigInt(12)
}

def padLeft(n: BigInt, width: BigInt): String = {
  var s: String = String.valueOf(n)
  while (BigInt(((s).size).toInt) < width) {
    s = " " + s
  }
  return s
}

def main(): Any = {
  val primes: ArrayBuffer[BigInt] = generatePrimes(BigInt(1000))
  var es: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  for (_ <- BigInt(0) until BigInt(12)) {
    es = es :+ (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  }
  println("First 200 primes:\n")
  var idx: BigInt = BigInt(0)
  while (idx < BigInt(200)) {
    val p: BigInt = primes((idx.toInt).toInt)
    var c: BigInt = cat(p, primes)
    es((BigInt(c.toString.toDouble.toInt) - BigInt(1)).toInt) = es((c - BigInt(1).toInt).toInt) :+ p
    idx = idx + BigInt(1)
  }
  var c: BigInt = BigInt(1)
  while (c <= BigInt(6)) {
    if (BigInt(((es((c - BigInt(1).toInt).toInt)).size).toInt) > BigInt(0)) {
      println("Category " + String.valueOf(c) + ":")
      println(String.valueOf(es((c - BigInt(1).toInt).toInt)))
      println("")
    }
    c = c + BigInt(1)
  }
  println("First thousand primes:\n")
  while (idx < BigInt(1000)) {
    val p: BigInt = primes((idx.toInt).toInt)
    val cv: BigInt = cat(p, primes)
    es((BigInt(cv.toString.toDouble.toInt) - BigInt(1)).toInt) = es((cv - BigInt(1).toInt).toInt) :+ p
    idx = idx + BigInt(1)
  }
  c = BigInt(1)
  while (c <= BigInt(12)) {
    val e: ArrayBuffer[BigInt] = es((c - BigInt(1).toInt).toInt)
    if (BigInt(((e).size).toInt) > BigInt(0)) {
      val line: String = "Category " + padLeft(c, BigInt(2)) + ": First = " + padLeft(e((BigInt(0).toInt).toInt), BigInt(7)) + "  Last = " + padLeft(e(((e).size - BigInt(1).toInt.toInt).toInt), BigInt(8)) + "  Count = " + padLeft(BigInt(((e).size).toInt), BigInt(6))
      println(line)
    }
    c = c + BigInt(1)
  }
}

var prevCats: scala.collection.mutable.Map[BigInt,BigInt] = scala.collection.mutable.Map()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
