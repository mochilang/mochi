// Generated by Mochi v0.10.52 on 2025-08-02 00:19:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def isPrime(n: BigInt): Boolean = {
  if (n < BigInt(2)) {
    return false
  }
  if (n % BigInt(2) == BigInt(0)) {
    return n == BigInt(2)
  }
  var d: BigInt = BigInt(3)
  while (d * d <= n) {
    if (n % d == BigInt(0)) {
      return false
    }
    d = d + BigInt(2)
  }
  return true
}

def revInt(n: BigInt): BigInt = {
  var r: BigInt = BigInt(0)
  var t: BigInt = n
  while (t > BigInt(0)) {
    r = r * BigInt(10) + t % BigInt(10)
    t = t / BigInt(10)
  }
  return r
}

def main(): Any = {
  var emirps: ArrayBuffer[BigInt] = ArrayBuffer()
  var n: BigInt = BigInt(2)
  while ((emirps).size < BigInt(10000)) {
    if (isPrime(n)) {
      var r: BigInt = revInt(n)
      if ((r != n && isPrime(r)).asInstanceOf[Boolean]) {
        emirps = emirps :+ n
      }
    }
    n = n + BigInt(1)
  }
  var line: String = "   ["
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    line = line + String.valueOf(emirps((i).toInt))
    if (i < BigInt(19)) {
      line = line + ", "
    }
    i = i + BigInt(1)
  }
  line = line + "]"
  println("First 20:")
  println(line)
  line = "  ["
  val _br4 = new Breaks
  _br4.breakable {
    for (e <- emirps) {
      if (e >= BigInt(8000)) {
        _br4.break()
      }
      if (e >= BigInt(7700)) {
        line = line + String.valueOf(e) + ", "
      }
    }
  }
  line = line + "]"
  println("Between 7700 and 8000:")
  println(line)
  println("10000th:")
  println("   [" + String.valueOf(emirps((BigInt(9999)).toInt)) + "]")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
