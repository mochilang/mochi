// Generated by Mochi v0.10.52 on 2025-08-01 19:08:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def repeat(ch: String, n: BigInt): String = {
      var s: String = ""
      var i: BigInt = BigInt(0)
      while (i < n) {
        s = (s + ch).toString
        i = i + BigInt(1)
      }
      return s
    }
    def cubLine(n: BigInt, dx: BigInt, dy: BigInt, cde: String): Any = {
      var line: String = _repeat(" ", n + BigInt(1)) + cde.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
      var d: BigInt = BigInt(9) * dx - BigInt(1)
      while (d > BigInt(0)) {
        line = line + cde.slice((BigInt(1)).toInt, (BigInt(2)).toInt)
        d = d - BigInt(1)
      }
      line = line + cde.slice((BigInt(0)).toInt, (BigInt(1)).toInt)
      line = line + _repeat(" ", dy) + cde.slice((BigInt(2)).toInt, ((cde).size).toInt)
      println(line)
    }
    def cuboid(dx: BigInt, dy: BigInt, dz: BigInt): Any = {
      println("cuboid " + String.valueOf(dx) + " " + String.valueOf(dy) + " " + String.valueOf(dz) + ":")
      cubLine(dy + BigInt(1), dx, BigInt(0), "+-")
      var i: BigInt = BigInt(1)
      while (i <= dy) {
        cubLine(dy - i + BigInt(1), dx, i - BigInt(1), "/ |")
        i = i + BigInt(1)
      }
      cubLine(BigInt(0), dx, dy, "+-|")
      var j: BigInt = BigInt(4) * dz - dy - BigInt(2)
      while (j > BigInt(0)) {
        cubLine(BigInt(0), dx, dy, "| |")
        j = j - BigInt(1)
      }
      cubLine(BigInt(0), dx, dy, "| +")
      i = BigInt(1)
      while (i <= dy) {
        cubLine(BigInt(0), dx, dy - i, "| /")
        i = i + BigInt(1)
      }
      cubLine(BigInt(0), dx, BigInt(0), "+-\n")
    }
    cuboid(BigInt(2), BigInt(3), BigInt(4))
    println("")
    cuboid(BigInt(1), BigInt(1), BigInt(1))
    println("")
    cuboid(BigInt(6), BigInt(2), BigInt(1))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
