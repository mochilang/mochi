// Generated by Mochi v0.10.54 on 2025-08-02 14:17:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def makeSym(order: BigInt, elements: ArrayBuffer[Double]): scala.collection.mutable.Map[String,Any] = {
  return (scala.collection.mutable.Map("order" -> (order), "ele" -> (elements))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def unpackSym(m: scala.collection.mutable.Map[String,Any]): ArrayBuffer[ArrayBuffer[Double]] = {
  val n = m("order")
  val ele = m("ele")
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var idx: BigInt = BigInt(0)
  var r: BigInt = BigInt(0)
  while (r < BigInt(n.toString)) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c <= r) {
      row = row :+ (ele.asInstanceOf[ArrayBuffer[Any]]((idx.toInt).toInt)).toString.toDouble
      idx = idx + BigInt(1)
      c = c + BigInt(1)
    }
    while (c < BigInt(n.toString)) {
      row = row :+ 0.0
      c = c + BigInt(1)
    }
    mat = mat :+ row
    r = r + BigInt(1)
  }
  r = BigInt(0)
  while (r < BigInt(n.toString)) {
    var c: BigInt = r + BigInt(1)
    while (c < BigInt(n.toString)) {
      mat((r).toInt)((c).toInt) = mat((c.toInt).toInt)((r.toInt).toInt)
      c = c + BigInt(1)
    }
    r = r + BigInt(1)
  }
  return mat
}

def printMat(m: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < (m).size) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < (m((i.toInt).toInt)).size) {
      line = line + String.valueOf(m((i.toInt).toInt)((j.toInt).toInt))
      if (j < (m((i.toInt).toInt)).size - BigInt(1).toInt) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

def printSym(m: scala.collection.mutable.Map[String,Any]): Any = {
  printMat(unpackSym(m))
}

def printLower(m: scala.collection.mutable.Map[String,Any]): Any = {
  val n = m("order")
  val ele = m("ele")
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var idx: BigInt = BigInt(0)
  var r: BigInt = BigInt(0)
  while (r < BigInt(n.toString)) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c <= r) {
      row = row :+ (ele.asInstanceOf[ArrayBuffer[Any]]((idx.toInt).toInt)).toString.toDouble
      idx = idx + BigInt(1)
      c = c + BigInt(1)
    }
    while (c < BigInt(n.toString)) {
      row = row :+ 0.0
      c = c + BigInt(1)
    }
    mat = mat :+ row
    r = r + BigInt(1)
  }
  printMat(mat)
}

def choleskyLower(a: scala.collection.mutable.Map[String,Any]): scala.collection.mutable.Map[String,Any] = {
  val n = a("order")
  val ae = a("ele")
  var le: ArrayBuffer[Double] = ArrayBuffer()
  var idx: BigInt = BigInt(0)
  while (idx < (ae.asInstanceOf[ArrayBuffer[Any]]).size) {
    le = le :+ 0.0
    idx = idx + BigInt(1)
  }
  var row: BigInt = BigInt(1)
  var col: BigInt = BigInt(1)
  var dr: BigInt = BigInt(0)
  var dc: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < (ae.asInstanceOf[ArrayBuffer[Any]]).size) {
    val e = ae.asInstanceOf[ArrayBuffer[Any]]((i.toInt).toInt)
    if (i < dr) {
      var d: Double = (e.toString.toDouble - le((i.toInt).toInt)) / le((dc.toInt).toInt)
      le((i).toInt) = d
      var ci: BigInt = col
      var cx: BigInt = dc
      var j: BigInt = i + BigInt(1)
      while (j <= dr) {
        cx = cx + ci
        ci = ci + BigInt(1)
        le((j).toInt) = (le((j.toInt).toInt) + d * le((cx.toInt).toInt)).toString.toDouble
        j = j + BigInt(1)
      }
      col = col + BigInt(1)
      dc = dc + col
    } else {
      le((i).toInt) = sqrtApprox(e.toString.toDouble - le((i.toInt).toInt))
      row = row + BigInt(1)
      dr = dr + row
      col = BigInt(1)
      dc = BigInt(0)
    }
    i = i + BigInt(1)
  }
  return (scala.collection.mutable.Map("order" -> (n), "ele" -> (le))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def demo(a: scala.collection.mutable.Map[String,Any]): Any = {
  println("A:")
  printSym(a)
  println("L:")
  val l: scala.collection.mutable.Map[String,Any] = choleskyLower(a)
  printLower(l)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    demo(makeSym(BigInt(3), (ArrayBuffer(25.0, 15.0, 18.0, -5.0, 0.0, 11.0)).asInstanceOf[ArrayBuffer[Double]]))
    demo(makeSym(BigInt(4), ArrayBuffer(18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
