// Generated by Mochi v0.10.56 on 2025-08-04 00:20:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def repeat(s: String, n: BigInt): String = {
  var out: String = ""
  var i: BigInt = BigInt(0)
  while (i < n) {
    out = out + s
    i = i + BigInt(1)
  }
  return out
}

def trimRightSpace(s: String): String = {
  var i: BigInt = (s).size - BigInt(1).toInt
  while (i >= BigInt(0) && s.slice((i).toInt, (i + BigInt(1)).toInt) == " ") {
    i = i - BigInt(1)
  }
  return s.slice((BigInt(0)).toInt, (i + BigInt(1)).toInt)
}

def block2text(block: ArrayBuffer[String]): ArrayBuffer[String] = {
  var out: ArrayBuffer[String] = ArrayBuffer()
  for (b <- block) {
    out = out :+ trimRightSpace(b)
  }
  return out
}

def text2block(lines: ArrayBuffer[String]): ArrayBuffer[String] = {
  var out: ArrayBuffer[String] = ArrayBuffer()
  var count: BigInt = BigInt(0)
  for (line <- lines) {
    var s: String = line
    val le: Int = (s).size
    if (BigInt(le.toString.toDouble.toInt) > BigInt(64)) {
      s = s.slice((BigInt(0)).toInt, (BigInt(64)).toInt)
    } else {
      if (BigInt(le.toString.toDouble.toInt) < BigInt(64)) {
        s = s + _repeat(" ", BigInt(64).toInt - le)
      }
    }
    out = out :+ s
    count = count + BigInt(1)
  }
  if (count % BigInt(16) != BigInt(0)) {
    val pad: BigInt = BigInt(16) - count % BigInt(16)
    var i: BigInt = BigInt(0)
    while (i < pad) {
      out = out :+ (_repeat(" ", BigInt(64))).toString
      i = i + BigInt(1)
    }
  }
  return out
}

var lines: ArrayBuffer[String] = ArrayBuffer("alpha", "beta", "gamma")

var blocks: ArrayBuffer[String] = text2block(lines)

var outLines: ArrayBuffer[String] = block2text(blocks)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    for (l <- outLines) {
      if (l != "") {
        println(l)
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
