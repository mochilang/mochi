// Generated by Mochi v0.10.50 on 2025-07-31 00:51:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class State(var entry: Boolean, var inc: Boolean, var dec: Boolean)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def state(v: BigInt): State = {
      return State(v == BigInt(0), v < BigInt(10), v > BigInt(0))
    }
    def printState(v: BigInt): Any = {
      val s: State = state(v)
      println("value=" + String.valueOf(v) + " entry=" + String.valueOf(s.entry) + " inc=" + String.valueOf(s.inc) + " dec=" + String.valueOf(s.dec))
    }
    def main(): Any = {
      var v: BigInt = BigInt(0)
      printState(v)
      val _br0 = new Breaks
      _br0.breakable {
        while (true) {
          val s: State = state(v)
          if ((!s.inc).asInstanceOf[Boolean]) {
            _br0.break()
          }
          v = (v + BigInt(1)).asInstanceOf[BigInt]
          printState(v)
        }
      }
      val _br1 = new Breaks
      _br1.breakable {
        while (true) {
          val s: State = state(v)
          if ((!s.dec).asInstanceOf[Boolean]) {
            _br1.break()
          }
          v = (v - BigInt(1)).asInstanceOf[BigInt]
          printState(v)
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
