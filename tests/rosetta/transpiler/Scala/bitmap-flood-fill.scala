// Generated by Mochi v0.10.40 on 2025-07-26 04:50:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer(".", ".", ".", ".", "."), ArrayBuffer(".", "#", "#", "#", "."), ArrayBuffer(".", "#", ".", "#", "."), ArrayBuffer(".", "#", "#", "#", "."), ArrayBuffer(".", ".", ".", ".", "."))
    def flood(x: Int, y: Int, repl: String): Any = {
      val target: String = grid(y)(x)
      if (target == repl) {
        return
      }
      def ff(px: Int, py: Int): Any = {
        if ((((px < 0 || py < 0).asInstanceOf[Boolean] || py >= (grid).size).asInstanceOf[Boolean] || px >= (grid(0)).size).asInstanceOf[Boolean]) {
          return
        }
        if (grid(py)(px) != target) {
          return
        }
        grid(py)(px) = repl
        ff(px - 1, py)
        ff(px + 1, py)
        ff(px, py - 1)
        ff(px, py + 1)
        return
      }
      ff(x, y)
      return
    }
    flood(2, 2, "o")
    for (row <- grid) {
      var line: String = ""
      for (ch <- row) {
        line = (line + ch).toString
      }
      println(line)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
