// Generated by Mochi v0.10.40 on 2025-07-26 04:42:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
import scala.annotation.tailrec
object Main {
  private def _padStart(s: String, width: Int, pad: String): String = {
    var out = s
    while (out.length < width) { out = pad + out }
    out
  }
  
  def primesUpTo(n: Int): ArrayBuffer[Int] = {
    var sieve: ArrayBuffer[Boolean] = ArrayBuffer()
    var i: Int = 0
    while (i <= n) {
      sieve = sieve :+ true
      i = (i + 1).asInstanceOf[Int]
    }
    var p: Int = 2
    while ((p * p).asInstanceOf[Int] <= n) {
      if (sieve(p)) {
        var m = p * p
        while (m <= n) {
          sieve(m) = false
          m = (m + p).asInstanceOf[Int]
        }
      }
      p = (p + 1).asInstanceOf[Int]
    }
    var res: ArrayBuffer[Int] = ArrayBuffer()
    var x: Int = 2
    while (x <= n) {
      if (sieve(x)) {
        res = res :+ x
      }
      x = (x + 1).asInstanceOf[Int]
    }
    return res
  }
  
  def sortInts(xs: ArrayBuffer[Int]): ArrayBuffer[Int] = {
    var res: ArrayBuffer[Int] = ArrayBuffer()
    var tmp: ArrayBuffer[Int] = xs
    while ((tmp).size > 0) {
      var min: Int = tmp(0)
      var idx: Int = 0
      var i: Int = 1
      while (i < (tmp).size) {
        if (tmp(i) < min) {
          min = tmp(i)
          idx = i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      res = res :+ min
      var out: ArrayBuffer[Int] = ArrayBuffer()
      var j: Int = 0
      while (j < (tmp).size) {
        if (j != idx) {
          out = out :+ tmp(j)
        }
        j = (j + 1).asInstanceOf[Int]
      }
      tmp = out
    }
    return res
  }
  
  def commatize(n: Int): String = {
    var s = String.valueOf(n)
    var i: Int = (s).size - 3
    while (i >= 1) {
      s = s.slice(0, i) + "," + s.slice(i, (s).size)
      i = (i - 3).asInstanceOf[Int]
    }
    return s
  }
  
  def getBrilliant(digits: Int, limit: Int, countOnly: Boolean): Map[String,Any] = {
    var brilliant: ArrayBuffer[Int] = ArrayBuffer()
    var count: Int = 0
    var pow: Int = 1
    var next: Long = 999999999999999L
    var k: Int = 1
    val _br8 = new Breaks
    _br8.breakable {
      while (k <= digits) {
        var s: ArrayBuffer[Int] = ArrayBuffer()
        val _br9 = new Breaks
        _br9.breakable {
          for (p <- primes) {
            if (p.toString >= (pow * 10).toString) {
              _br9.break()
            }
            if (p.asInstanceOf[Int] > pow) {
              s = s :+ p
            }
          }
        }
        var i: Int = 0
        val _br10 = new Breaks
        _br10.breakable {
          while (i < (s).size) {
            var j: Int = i
            val _br11 = new Breaks
            _br11.breakable {
              while (j < (s).size) {
                var prod: Int = s(i) * s(j)
                if (prod < limit) {
                  if (countOnly) {
                    count = (count + 1).asInstanceOf[Int]
                  } else {
                    brilliant = brilliant :+ prod
                  }
                } else {
                  if (prod < next) {
                    next = prod
                  }
                  _br11.break()
                }
                j = (j + 1).asInstanceOf[Int]
              }
            }
            i = (i + 1).asInstanceOf[Int]
          }
        }
        pow = (pow * 10).asInstanceOf[Int]
        k = (k + 1).asInstanceOf[Int]
      }
    }
    if (countOnly) {
      return Map("bc" -> (count), "next" -> (next))
    }
    return Map("bc" -> (brilliant), "next" -> (next))
  }
  
  def main(): Any = {
    println("First 100 brilliant numbers:")
    val r: Map[String,Any] = getBrilliant(2, 10000, false)
    var br: ArrayBuffer[Int] = sortInts((r.getOrElse("bc", null.asInstanceOf[Any])).asInstanceOf[ArrayBuffer[Int]])
    br = br.slice(0, 100)
    var i: Int = 0
    while (i < (br).size) {
      println(List(_padStart(String.valueOf(br(i)), 4, " ") + " ", false).mkString(" "))
      if (Math.floorMod(i + 1, 10) == 0) {
        println(List("", true).mkString(" "))
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println(List("", true).mkString(" "))
    var k: Int = 1
    while (k <= 13) {
      val limit = pow(10, k)
      val r2: Map[String,Any] = getBrilliant(k, limit.asInstanceOf[Int], true)
      val total = r2.getOrElse("bc", null.asInstanceOf[Any])
      val next = r2.getOrElse("next", null.asInstanceOf[Any])
      val climit: String = commatize(limit.asInstanceOf[Int])
      val ctotal: String = commatize(total.asInstanceOf[Int] + 1)
      val cnext: String = commatize(next.asInstanceOf[Int])
      println("First >= " + climit.padStart(18, " ") + " is " + ctotal.padStart(14, " ") + " in the series: " + cnext.padStart(18, " "))
      k = (k + 1).asInstanceOf[Int]
    }
  }
  
  var primes: ArrayBuffer[Int] = primesUpTo(3200000)
  
  def main(args: Array[String]): Unit = {
  }
}
