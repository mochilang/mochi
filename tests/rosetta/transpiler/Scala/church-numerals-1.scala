// Generated by Mochi v0.10.54 on 2025-08-02 14:33:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

type Fn = (Any) => Any

type Church = (Fn) => Fn

def zero(f: Fn): Fn = {
  return (((x: Any) => x)).asInstanceOf[Fn]
}

def succ(c: Church): Church = {
  return (((f: Fn) => ((x: Any) => f(c(f)(x))))).asInstanceOf[Church]
}

def add(c: Church, d: Church): Church = {
  return (((f: Fn) => ((x: Any) => c(f)(d(f)(x))))).asInstanceOf[Church]
}

def mul(c: Church, d: Church): Church = {
  return (((f: Fn) => ((x: Any) => c(d(f))(x)))).asInstanceOf[Church]
}

def pow(c: Church, d: Church): Church = {
  var di: BigInt = toInt(d)
  var prod: Church = c
  var i: BigInt = BigInt(1)
  while (i < di) {
    prod = mul(prod, c)
    i = i + BigInt(1)
  }
  return prod
}

def incr(i: Any): Any = {
  return (BigInt(i.toString) + BigInt(1)).asInstanceOf[Any]
}

def toInt(c: Church): BigInt = {
  return BigInt((c(incr _)(BigInt(0))).toString)
}

def intToChurch(i: BigInt): Church = {
  if (i == BigInt(0)) {
    return (zero _).asInstanceOf[Church]
  }
  return (succ((intToChurch(i - BigInt(1))).asInstanceOf[Church])).asInstanceOf[Church]
}

val z: Church = zero _

val three: ((Any) => Any) => (Any) => Any = succ((succ((succ(z)).asInstanceOf[Church])).asInstanceOf[Church])

val four: ((Any) => Any) => (Any) => Any = succ(three.asInstanceOf[Church])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("three        -> " + String.valueOf(toInt(three.asInstanceOf[Church])))
    println("four         -> " + String.valueOf(toInt(four.asInstanceOf[Church])))
    println("three + four -> " + String.valueOf(toInt((add(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("three * four -> " + String.valueOf(toInt((mul(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("three ^ four -> " + String.valueOf(toInt((pow(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("four ^ three -> " + String.valueOf(toInt((pow(four.asInstanceOf[Church], three.asInstanceOf[Church])).asInstanceOf[Church])))
    println("5 -> five    -> " + String.valueOf(toInt((intToChurch(BigInt(5))).asInstanceOf[Church])))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
