// Generated by Mochi v0.10.41 on 2025-07-27 16:18:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  type Fn = (Any) => Any
  
  type Church = (Fn) => Fn
  
  def zero(f: Fn): Fn = {
    return (((x: Any) => x)).asInstanceOf[Fn]
  }
  
  def succ(c: Church): Church = {
    return (((f: Fn) => ((x: Any) => f(c(f)(x))))).asInstanceOf[Church]
  }
  
  def add(c: Church, d: Church): Church = {
    return (((f: Fn) => ((x: Any) => c(f)(d(f)(x))))).asInstanceOf[Church]
  }
  
  def mul(c: Church, d: Church): Church = {
    return (((f: Fn) => ((x: Any) => c(d(f))(x)))).asInstanceOf[Church]
  }
  
  def pow(c: Church, d: Church): Church = {
    var di: BigInt = toInt(d)
    var prod: Church = c
    var i: BigInt = BigInt(1)
    while (i < di) {
      prod = mul(prod, c)
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    return prod
  }
  
  def incr(i: Any): Any = {
    return ((i).asInstanceOf[BigInt] + BigInt(1)).asInstanceOf[Any]
  }
  
  def toInt(c: Church): BigInt = {
    return (c(incr _)(BigInt(0))).asInstanceOf[BigInt]
  }
  
  def intToChurch(i: BigInt): Church = {
    if (i == BigInt(0)) {
      return (zero _).asInstanceOf[Church]
    }
    return (succ((intToChurch((i - BigInt(1)).asInstanceOf[BigInt])).asInstanceOf[Church])).asInstanceOf[Church]
  }
  
  val z: Church = zero _
  
  val three: ((Any) => Any) => (Any) => Any = succ((succ((succ(z)).asInstanceOf[Church])).asInstanceOf[Church])
  
  val four: ((Any) => Any) => (Any) => Any = succ(three.asInstanceOf[Church])
  
  def main(args: Array[String]): Unit = {
    println("three        -> " + String.valueOf(toInt(three.asInstanceOf[Church])))
    println("four         -> " + String.valueOf(toInt(four.asInstanceOf[Church])))
    println("three + four -> " + String.valueOf(toInt((add(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("three * four -> " + String.valueOf(toInt((mul(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("three ^ four -> " + String.valueOf(toInt((pow(three.asInstanceOf[Church], four.asInstanceOf[Church])).asInstanceOf[Church])))
    println("four ^ three -> " + String.valueOf(toInt((pow(four.asInstanceOf[Church], three.asInstanceOf[Church])).asInstanceOf[Church])))
    println("5 -> five    -> " + String.valueOf(toInt((intToChurch(BigInt(5))).asInstanceOf[Church])))
  }
}
