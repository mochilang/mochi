// Generated by Mochi v0.10.50 on 2025-07-30 21:43:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var g2lMap: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("\u265c" -> ("R"), "\u265e" -> ("N"), "\u265d" -> ("B"), "\u265b" -> ("Q"), "\u265a" -> ("K"), "\u2656" -> ("R"), "\u2658" -> ("N"), "\u2657" -> ("B"), "\u2655" -> ("Q"), "\u2654" -> ("K"))
    var names: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map("R" -> ("rook"), "N" -> ("knight"), "B" -> ("bishop"), "Q" -> ("queen"), "K" -> ("king"))
    var ntable: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map("01" -> (BigInt(0)), "02" -> (BigInt(1)), "03" -> (BigInt(2)), "04" -> (BigInt(3)), "12" -> (BigInt(4)), "13" -> (BigInt(5)), "14" -> (BigInt(6)), "23" -> (BigInt(7)), "24" -> (BigInt(8)), "34" -> (BigInt(9)))
    def indexOf(s: String, sub: String): BigInt = {
      var i: BigInt = BigInt(0)
      while (i <= (s).size - (sub).size) {
        if (s.slice((i).toInt, (i + (sub).size).toInt) == sub) {
          return i
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
    }
    def removeChar(s: String, ch: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
        if (c != ch) {
          res = (res + c).toString
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def g2l(pieces: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (pieces).size) {
        val ch: String = pieces.slice((i).toInt, (i + BigInt(1)).toInt)
        res = (res + g2lMap.getOrElse(ch, null.asInstanceOf[String])).toString
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def countChar(s: String, ch: String): BigInt = {
      var c: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if (s.slice((i).toInt, (i + BigInt(1)).toInt) == ch) {
          c = (c + BigInt(1)).asInstanceOf[BigInt]
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return c
    }
    def spid(_pieces: String): BigInt = {
      var pieces: String = _pieces
      pieces = g2l(pieces)
      if ((pieces).size != BigInt(8)) {
        return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
      }
      for (one <- ArrayBuffer("K", "Q")) {
        if (countChar(pieces, one) != BigInt(1)) {
          return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
        }
      }
      for (two <- ArrayBuffer("R", "N", "B")) {
        if (countChar(pieces, two) != BigInt(2)) {
          return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
        }
      }
      val r1 = BigInt(pieces.indexOf("R"))
      val r2 = BigInt(pieces.slice((r1 + BigInt(1)).toInt, ((pieces).size).toInt).indexOf("R")) + r1 + BigInt(1)
      val k = BigInt(pieces.indexOf("K"))
      if ((k < r1 || k > r2).asInstanceOf[Boolean]) {
        return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
      }
      val b1 = BigInt(pieces.indexOf("B"))
      val b2 = BigInt(pieces.slice((b1 + BigInt(1)).toInt, ((pieces).size).toInt).indexOf("B")) + b1 + BigInt(1)
      if ((b2 - b1) % BigInt(2) == BigInt(0)) {
        return (BigInt(0) - BigInt(1)).asInstanceOf[BigInt]
      }
      var piecesN: String = removeChar(removeChar(pieces, "Q"), "B")
      val n1 = BigInt(piecesN.indexOf("N"))
      val n2 = BigInt(piecesN.slice((n1 + BigInt(1)).toInt, ((piecesN).size).toInt).indexOf("N")) + n1 + BigInt(1)
      val N: BigInt = ntable.getOrElse(String.valueOf(n1) + String.valueOf(n2), BigInt(0))
      var piecesQ: String = removeChar(pieces, "B")
      val Q = BigInt(piecesQ.indexOf("Q"))
      var D = BigInt("0246".indexOf(String.valueOf(b1)))
      var L = BigInt("1357".indexOf(String.valueOf(b2)))
      if (D == BigInt(0) - BigInt(1)) {
        D = (BigInt("0246".indexOf(String.valueOf(b2)))).asInstanceOf[BigInt]
        L = (BigInt("1357".indexOf(String.valueOf(b1)))).asInstanceOf[BigInt]
      }
      return ((BigInt(96) * N).toString.toDouble + (BigInt(16) * Q).toString.toDouble + BigInt(4) * D + L.toString.toDouble).asInstanceOf[BigInt]
    }
    def main(): Any = {
      for (pieces <- ArrayBuffer("\u2655\u2658\u2656\u2657\u2657\u2658\u2654\u2656", "\u2656\u2658\u2657\u2655\u2654\u2657\u2658\u2656", "\u2656\u2655\u2658\u2657\u2657\u2654\u2656\u2658", "\u2656\u2658\u2655\u2657\u2657\u2654\u2656\u2658")) {
        println(pieces + " or " + g2l(pieces) + " has SP-ID of " + String.valueOf(spid(pieces)))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
