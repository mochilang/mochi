// Generated by Mochi v0.10.40 on 2025-07-25 10:52:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def randDigit(): Int = {
      return (Math.floorMod(_now(), 9) + 1).asInstanceOf[Int]
    }
    def main(): Unit = {
      var digits: ArrayBuffer[Any] = ArrayBuffer()
      for (i <- 0 until 4) {
        digits = digits :+ randDigit()
      }
      var numstr: String = ""
      for (i <- 0 until 4) {
        numstr = (numstr + String.valueOf(digits(i))).asInstanceOf[String]
      }
      println("Your numbers: " + numstr + "\n")
      println("Enter RPN: ")
      var expr = Option(scala.io.StdIn.readLine()).getOrElse("q")
      if ((expr).size != 7) {
        println("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
        return
      }
      var stack: ArrayBuffer[Any] = ArrayBuffer()
      var i: Int = 0
      var valid: Boolean = true
      val _br2 = new Breaks
      _br2.breakable {
        while (i < (expr).size) {
          val ch: String = expr.substring(i, i + 1)
          if ((ch >= "0" && ch <= "9").asInstanceOf[Boolean]) {
            if ((digits).size == 0) {
              println("too many numbers.")
              return
            }
            var j: Int = 0
            while (digits(j) != (ch.toString().toInt).asInstanceOf[Int] - ("0".toString().toInt).asInstanceOf[Int]) {
              j = (j + 1).asInstanceOf[Int]
              if (j == (digits).size) {
                println("wrong numbers.")
                return
              }
            }
            digits = (digits.slice(0, j) ++ digits.slice(j + 1, (digits).size)).asInstanceOf[ArrayBuffer[Any]]
            stack = stack :+ (ch.toString().toInt).asInstanceOf[Int] - ("0".toString().toInt).asInstanceOf[Int].toString().toDouble
          } else {
            if ((stack).size < 2) {
              println("invalid expression syntax.")
              valid = false
              _br2.break()
            }
            var b = stack((stack).size - 1)
            var a = stack((stack).size - 2)
            if (ch == "+") {
              stack((stack).size - 2) = a.asInstanceOf[Int] + b.asInstanceOf[Int]
            } else {
              if (ch == "-") {
                stack((stack).size - 2) = a.asInstanceOf[Int] - b.asInstanceOf[Int]
              } else {
                if (ch == "*") {
                  stack((stack).size - 2) = a.asInstanceOf[Int] * b.asInstanceOf[Int]
                } else {
                  if (ch == "/") {
                    stack((stack).size - 2) = a.asInstanceOf[Int] / b.asInstanceOf[Int]
                  } else {
                    println(ch + " invalid.")
                    valid = false
                    _br2.break()
                  }
                }
              }
            }
            stack = stack.slice(0, (stack).size - 1)
          }
          i = (i + 1).asInstanceOf[Int]
        }
      }
      if (valid) {
        if (Math.abs((stack(0)).asInstanceOf[Double] - 24.0) > 0.000001) {
          println("incorrect. " + String.valueOf(stack(0)) + " != 24")
        } else {
          println("correct.")
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
