// Generated by Mochi v0.10.40 on 2025-07-25 21:06:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def d2d(d: Double): Double = {
      return d % 360.0
    }
    def g2g(g: Double): Double = {
      return g % 400.0
    }
    def m2m(m: Double): Double = {
      return m % 6400.0
    }
    def r2r(r: Double): Double = {
      return r % 2.0 * 3.141592653589793
    }
    def d2g(d: Double): Double = {
      return d2d(d) * 400.0 / 360.0
    }
    def d2m(d: Double): Double = {
      return d2d(d) * 6400.0 / 360.0
    }
    def d2r(d: Double): Double = {
      return d2d(d) * 3.141592653589793 / 180.0
    }
    def g2d(g: Double): Double = {
      return g2g(g) * 360.0 / 400.0
    }
    def g2m(g: Double): Double = {
      return g2g(g) * 6400.0 / 400.0
    }
    def g2r(g: Double): Double = {
      return g2g(g) * 3.141592653589793 / 200.0
    }
    def m2d(m: Double): Double = {
      return m2m(m) * 360.0 / 6400.0
    }
    def m2g(m: Double): Double = {
      return m2m(m) * 400.0 / 6400.0
    }
    def m2r(m: Double): Double = {
      return m2m(m) * 3.141592653589793 / 3200.0
    }
    def r2d(r: Double): Double = {
      return r2r(r) * 180.0 / 3.141592653589793
    }
    def r2g(r: Double): Double = {
      return r2r(r) * 200.0 / 3.141592653589793
    }
    def r2m(r: Double): Double = {
      return r2r(r) * 3200.0 / 3.141592653589793
    }
    def main(): Any = {
      val angles: ArrayBuffer[Double] = ArrayBuffer(0 - 2.0, 0 - 1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0)
      println("degrees normalized_degs gradians mils radians")
      for (a <- angles) {
        println(String.valueOf(a) + " " + String.valueOf(d2d(a.toString.toDouble)) + " " + String.valueOf(d2g(a.toString.toDouble)) + " " + String.valueOf(d2m(a.toString.toDouble)) + " " + String.valueOf(d2r(a.toString.toDouble)))
      }
      println("\ngradians normalized_grds degrees mils radians")
      for (a <- angles) {
        println(String.valueOf(a) + " " + String.valueOf(g2g(a.toString.toDouble)) + " " + String.valueOf(g2d(a.toString.toDouble)) + " " + String.valueOf(g2m(a.toString.toDouble)) + " " + String.valueOf(g2r(a.toString.toDouble)))
      }
      println("\nmils normalized_mils degrees gradians radians")
      for (a <- angles) {
        println(String.valueOf(a) + " " + String.valueOf(m2m(a.toString.toDouble)) + " " + String.valueOf(m2d(a.toString.toDouble)) + " " + String.valueOf(m2g(a.toString.toDouble)) + " " + String.valueOf(m2r(a.toString.toDouble)))
      }
      println("\nradians normalized_rads degrees gradians mils")
      for (a <- angles) {
        println(String.valueOf(a) + " " + String.valueOf(r2r(a.toString.toDouble)) + " " + String.valueOf(r2d(a.toString.toDouble)) + " " + String.valueOf(r2g(a.toString.toDouble)) + " " + String.valueOf(r2m(a.toString.toDouble)))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
