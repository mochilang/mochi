// Generated by Mochi v0.10.56 on 2025-08-04 00:18:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def toBase(n: BigInt, b: BigInt): String = {
  if (n == BigInt(0)) {
    return "0"
  }
  var s: String = ""
  var x: BigInt = n
  while (x > BigInt(0)) {
    s = String.valueOf(x % b) + s
    x = BigInt((x / b).toString.toDouble.toInt)
  }
  return s
}

def parseIntStr(str: String): BigInt = {
  var i: BigInt = BigInt(0)
  var neg: Boolean = false
  if ((BigInt(((str).size).toInt) > BigInt(0) && str.slice((BigInt(0).toInt).toInt, (BigInt(0).toInt).toInt + 1) == "-").asInstanceOf[Boolean]) {
    neg = true
    i = BigInt(1)
  }
  var n: BigInt = BigInt(0)
  while (i < BigInt(((str).size).toInt)) {
    n = n * BigInt(10) + BigInt((str.slice((i).toInt, (i + BigInt(1)).toInt)).charAt(0).toInt) - BigInt("0".charAt(0).toInt)
    i = i + BigInt(1)
  }
  if (neg) {
    n = BigInt(0) - n
  }
  return n
}

def parseIntBase(s: String, b: BigInt): BigInt = {
  var n: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(((s).size).toInt)) {
    n = n * b + _parseIntStr(s.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(10))
    i = i + BigInt(1)
  }
  return n
}

def reverseStr(s: String): String = {
  var out: String = ""
  var i: BigInt = (s).size - BigInt(1).toInt
  while (i >= BigInt(0)) {
    out = out + s.slice((i).toInt, (i + BigInt(1)).toInt)
    i = i - BigInt(1)
  }
  return out
}

def isPalindrome(s: String): Boolean = {
  return s == reverseStr(s)
}

def isPalindromeBin(n: BigInt): Boolean = {
  val b: String = toBase(n, BigInt(2))
  return isPalindrome(b)
}

def myMin(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  }
  return b
}

def myMax(a: BigInt, b: BigInt): BigInt = {
  if (a > b) {
    return a
  }
  return b
}

def reverse3(n: BigInt): BigInt = {
  var x: BigInt = BigInt(0)
  var y: BigInt = n
  while (y != BigInt(0)) {
    x = x * BigInt(3) + y % BigInt(3)
    y = y / BigInt(3)
  }
  return x
}

def show(n: BigInt): Any = {
  println("Decimal : " + String.valueOf(n))
  println("Binary  : " + toBase(n, BigInt(2)))
  println("Ternary : " + toBase(n, BigInt(3)))
  println("")
}

def main(): Any = {
  println("The first 6 numbers which are palindromic in both binary and ternary are :\n")
  show(BigInt(0))
  var count: BigInt = BigInt(1)
  var lo: BigInt = BigInt(0)
  var hi: BigInt = BigInt(1)
  var pow2: BigInt = BigInt(1)
  var pow3: BigInt = BigInt(1)
  val _br5 = new Breaks
  _br5.breakable {
    while (true) {
      var i: BigInt = lo
      while (i < hi) {
        var n: BigInt = (i * BigInt(3) + BigInt(1)) * pow3 + reverse3(i)
        if (isPalindromeBin(n)) {
          show(n)
          count = count + BigInt(1)
          if (count >= BigInt(6)) {
            return
          }
        }
        i = i + BigInt(1)
      }
      if (i == pow3) {
        pow3 = pow3 * BigInt(3)
      } else {
        pow2 = pow2 * BigInt(4)
      }
      val _br7 = new Breaks
      _br7.breakable {
        while (true) {
          while (pow2 <= pow3) {
            pow2 = pow2 * BigInt(4)
          }
          var lo2: BigInt = (pow2 / pow3 - BigInt(1)) / BigInt(3)
          var hi2: BigInt = (pow2 * BigInt(2) / pow3 - BigInt(1)) / BigInt(3) + BigInt(1)
          var lo3: BigInt = pow3 / BigInt(3)
          var hi3: BigInt = pow3
          if (lo2 >= hi3) {
            pow3 = pow3 * BigInt(3)
          } else {
            if (lo3 >= hi2) {
              pow2 = pow2 * BigInt(4)
            } else {
              lo = myMax(lo2, lo3)
              hi = myMin(hi2, hi3)
              _br7.break()
            }
          }
        }
      }
    }
  }
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
