// Generated by Mochi v0.10.42 on 2025-07-27 17:27:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val nPts: BigInt = BigInt(100)
    val rMin: BigInt = BigInt(10)
    val rMax: BigInt = BigInt(15)
    val span = rMax + BigInt(1) + rMax
    var rows: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
    var r: BigInt = BigInt(0)
    while (r < span) {
      var row: ArrayBuffer[String] = ArrayBuffer()
      var c: BigInt = BigInt(0)
      while (c < span * BigInt(2)) {
        row = row :+ " "
        c = (c + BigInt(1)).asInstanceOf[BigInt]
      }
      rows = rows :+ row
      r = (r + BigInt(1)).asInstanceOf[BigInt]
    }
    var u: BigInt = BigInt(0)
    var seen: scala.collection.mutable.Map[String,Boolean] = scala.collection.mutable.Map()
    val min2 = rMin * rMin
    val max2 = rMax * rMax
    var n: BigInt = BigInt(0)
    val _ct2 = new Breaks
    while (n < nPts) {
      _ct2.breakable {
        var x = _now() % span - rMax
        var y = _now() % span - rMax
        val rs: Double = (x * x).toString.toDouble + (y * y).toString.toDouble
        if ((rs < min2 || rs > max2).asInstanceOf[Boolean]) {
          _ct2.break()
        }
        n = (n + BigInt(1)).asInstanceOf[BigInt]
        val row = y + rMax
        val col = (x + rMax) * BigInt(2)
        rows((row).toInt)((col).toInt) = "*"
        val key: String = String.valueOf(row) + "," + String.valueOf(col)
        if ((!seen.getOrElse(key, null.asInstanceOf[Boolean])).asInstanceOf[Boolean]) {
          seen.update(key, true)
          u = (u + BigInt(1)).asInstanceOf[BigInt]
        }
      }
    }
    var i: BigInt = BigInt(0)
    while (i < span) {
      var line: String = ""
      var j: BigInt = BigInt(0)
      while (j < span * BigInt(2)) {
        line = (line + rows((i).toInt)((j).toInt)).toString
        j = (j + BigInt(1)).asInstanceOf[BigInt]
      }
      println(line)
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    println(String.valueOf(u) + " unique points")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
