// Generated by Mochi v0.10.57 on 2025-08-04 16:35:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

val nPts: BigInt = 100

val rMin: BigInt = 10

val rMax: BigInt = 15

val span: BigInt = rMax + 1 + rMax

val min2: BigInt = rMin * rMin

val max2: BigInt = rMax * rMax

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var rows: ArrayBuffer[ArrayBuffer[String]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
    var r: BigInt = 0
    while (r < span) {
      var row: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
      var c: BigInt = 0
      while (c < span * 2) {
        row = row :+ " "
        c = c + 1
      }
      rows = rows :+ row
      r = r + 1
    }
    var u: BigInt = 0
    var seen: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
    var n: BigInt = 0
    val _ct2 = new Breaks
    while (n < nPts) {
      _ct2.breakable {
        var x: BigInt = _now() % span - rMax
        var y: BigInt = _now() % span - rMax
        val rs: BigInt = x * x + y * y
        if ((rs < min2 || rs > max2).asInstanceOf[Boolean]) {
          _ct2.break()
        }
        n = n + 1
        var row: BigInt = y + rMax
        val col: BigInt = (x + rMax) * 2
        rows((row).toInt)((col).toInt) = "*"
        val key: String = String.valueOf(row) + "," + String.valueOf(col)
        if ((!seen.getOrElse(key, false).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          seen.update(key, true)
          u = u + 1
        }
      }
    }
    var i: BigInt = 0
    while (i < span) {
      var line: String = ""
      var j: BigInt = 0
      while (j < span * 2) {
        line = line + rows((i.toInt).toInt)((j.toInt).toInt)
        j = j + 1
      }
      println(line)
      i = i + 1
    }
    println(String.valueOf(u) + " unique points")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
