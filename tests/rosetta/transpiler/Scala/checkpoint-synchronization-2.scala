// Generated by Mochi v0.10.40 on 2025-07-26 11:01:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def lower(ch: String): String = {
    val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    val lower: String = "abcdefghijklmnopqrstuvwxyz"
    var i: BigInt = BigInt(0)
    while (i < (upper).size) {
      if (ch == upper.slice(i, (i + BigInt(1)).toInt)) {
        return lower.slice(i, (i + BigInt(1)).toInt)
      }
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    return ch
  }
  
  var partList: ArrayBuffer[String] = ArrayBuffer("A", "B", "C", "D")
  
  var nAssemblies: BigInt = BigInt(3)
  
  def main(args: Array[String]): Unit = {
    for (cycle <- BigInt(1) until nAssemblies + BigInt(1)) {
      println("begin assembly cycle " + String.valueOf(cycle))
      var a: String = ""
      for (p <- partList) {
        println(p + " worker begins part")
        println(p + " worker completed " + p.toLowerCase())
        a = (a + p.toLowerCase()).toString
      }
      println(a + " assembled.  cycle " + String.valueOf(cycle) + " complete")
    }
  }
}
