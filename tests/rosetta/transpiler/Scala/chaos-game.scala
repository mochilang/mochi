// Generated by Mochi v0.10.40 on 2025-07-26 09:48:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val width: BigInt = BigInt(60)
    val height: BigInt = width.toString.toDouble * 0.86602540378
    val iterations: BigInt = BigInt(5000)
    var grid: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
    var y: BigInt = BigInt(0)
    while (y < height) {
      var line: ArrayBuffer[String] = ArrayBuffer()
      var x: BigInt = BigInt(0)
      while (x < width) {
        line = line :+ " "
        x = (x + BigInt(1)).asInstanceOf[BigInt]
      }
      grid = grid :+ line
      y = (y + BigInt(1)).asInstanceOf[BigInt]
    }
    def randInt(s: BigInt, n: BigInt): ArrayBuffer[BigInt] = {
      val next = (s * BigInt(1664525) + BigInt(1013904223)) % BigInt(2147483647)
      return (ArrayBuffer(next, next % n)).asInstanceOf[ArrayBuffer[BigInt]]
    }
    var seed: BigInt = BigInt(1)
    val vertices: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), height - BigInt(1)), ArrayBuffer(width - BigInt(1), height - BigInt(1)), ArrayBuffer(width / BigInt(2), BigInt(0)))
    var px: BigInt = width / BigInt(2)
    var py: BigInt = height / BigInt(2)
    var i: BigInt = BigInt(0)
    while (i < iterations) {
      var r: ArrayBuffer[BigInt] = randInt(seed, BigInt(3))
      seed = r((BigInt(0)).toInt)
      val idx: BigInt = BigInt(r((BigInt(1)).toInt))
      val v: ArrayBuffer[BigInt] = vertices((idx).toInt)
      px = (px + v((BigInt(0)).toInt)) / BigInt(2)
      py = (py + v((BigInt(1)).toInt)) / BigInt(2)
      if ((((px >= BigInt(0) && px < width).asInstanceOf[Boolean] && py >= BigInt(0)).asInstanceOf[Boolean] && py < height).asInstanceOf[Boolean]) {
        grid((py).toInt)((px).toInt) = "*"
      }
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    y = BigInt(0)
    while (y < height) {
      var line: String = ""
      var x: BigInt = BigInt(0)
      while (x < width) {
        line = (line + grid((y).toInt)((x).toInt)).toString
        x = (x + BigInt(1)).asInstanceOf[BigInt]
      }
      println(line)
      y = (y + BigInt(1)).asInstanceOf[BigInt]
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
