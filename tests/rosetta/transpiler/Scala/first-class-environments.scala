// Generated by Mochi v0.10.50 on 2025-07-30 21:21:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class HailResult(var seq: BigInt, var cnt: BigInt, var out: String)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val jobs: BigInt = BigInt(12)
    def pad(n: BigInt): String = {
      var s = String.valueOf(n)
      while ((s).size < BigInt(4)) {
        s = " " + s
      }
      return s
    }
    def hail(_seq: BigInt, _cnt: BigInt): HailResult = {
      var seq: BigInt = _seq
      var cnt: BigInt = _cnt
      var out: String = pad(seq)
      if (seq != BigInt(1)) {
        cnt = (cnt + BigInt(1)).asInstanceOf[BigInt]
        if (seq % BigInt(2) != BigInt(0)) {
          seq = (BigInt(3) * seq + BigInt(1)).asInstanceOf[BigInt]
        } else {
          seq = (seq / BigInt(2)).asInstanceOf[BigInt]
        }
      }
      return HailResult(seq, cnt, out)
    }
    def main(): Any = {
      var seqs: ArrayBuffer[BigInt] = ArrayBuffer()
      var cnts: ArrayBuffer[BigInt] = ArrayBuffer()
      for (i <- BigInt(0) until jobs) {
        seqs = seqs :+ (i + BigInt(1)).asInstanceOf[BigInt]
        cnts = cnts :+ BigInt(0)
      }
      val _br2 = new Breaks
      _br2.breakable {
        while (true) {
          var line: String = ""
          var i: BigInt = BigInt(0)
          while (i < jobs) {
            val res: HailResult = hail(seqs((i).toInt), cnts((i).toInt))
            seqs((i).toInt) = res.seq
            cnts((i).toInt) = res.cnt
            line = (line + res.out).toString
            i = (i + BigInt(1)).asInstanceOf[BigInt]
          }
          println(line)
          var done: Boolean = true
          var j: BigInt = BigInt(0)
          while (j < jobs) {
            if (seqs((j).toInt) != BigInt(1)) {
              done = false
            }
            j = (j + BigInt(1)).asInstanceOf[BigInt]
          }
          if (done) {
            _br2.break()
          }
        }
      }
      println("")
      println("COUNTS:")
      var counts: String = ""
      var k: BigInt = BigInt(0)
      while (k < jobs) {
        counts = (counts + pad(cnts((k).toInt))).toString
        k = (k + BigInt(1)).asInstanceOf[BigInt]
      }
      println(counts)
      println("")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
