// Generated by Mochi v0.10.39 on 2025-07-25 01:20:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def powf(base: Double, exp: Int): Double = {
    var result: Double = 1.0
    var i: Int = 0
    while (i < exp) {
      result = (result * base).asInstanceOf[Double]
      i = (i + 1).asInstanceOf[Int]
    }
    return result
  }
  
  def nthRoot(x: Double, n: Int): Double = {
    var low: Double = 0.0
    var high: Double = x
    var i: Int = 0
    while (i < 60) {
      val mid: Double = (low + high) / 2.0
      if (powf(mid, n) > x) {
        high = mid
      } else {
        low = mid
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return low
  }
  
  def main() = {
    var sum: Double = 0.0
    var sumRecip: Double = 0.0
    var prod: Double = 1.0
    var n: Int = 1
    while (n <= 10) {
      val f: Double = n.toString.toDouble
      sum = (sum + f).asInstanceOf[Double]
      sumRecip = sumRecip + 1.0 / f
      prod = (prod * f).asInstanceOf[Double]
      n = (n + 1).asInstanceOf[Int]
    }
    val count: Double = 10.0
    val a = sum / count
    val g: Double = nthRoot(prod, 10)
    val h = count / sumRecip
    println("A: " + String.valueOf(a) + " G: " + String.valueOf(g) + " H: " + String.valueOf(h))
    println("A >= G >= H: " + String.valueOf(a >= g && g >= h))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
