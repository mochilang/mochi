// Generated by Mochi v0.10.40 on 2025-07-26 00:02:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def powf(base: Double, exp: Int): Double = {
      var result: Double = 1.0
      var i: Int = 0
      while (i < exp) {
        result = (result * base).toString.toDouble
        i = (i + 1).asInstanceOf[Int]
      }
      return result
    }
    def nthRoot(x: Double, n: Int): Double = {
      var low: Double = 0.0
      var high: Double = x
      var i: Int = 0
      while (i < 60) {
        val mid: Double = (low + high) / 2.0
        if (powf(mid, n) > x) {
          high = mid
        } else {
          low = mid
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return low
    }
    def main(): Any = {
      var sum: Double = 0.0
      var sumRecip: Double = 0.0
      var prod: Double = 1.0
      var n: Int = 1
      while (n <= 10) {
        val f: Double = n.toString.toDouble
        sum = (sum + f).toString.toDouble
        sumRecip = sumRecip + 1.0 / f
        prod = (prod * f).toString.toDouble
        n = (n + 1).asInstanceOf[Int]
      }
      val count: Double = 10.0
      val a = sum / count
      val g: Double = nthRoot(prod, 10)
      val h = count / sumRecip
      println("A: " + String.valueOf(a) + " G: " + String.valueOf(g) + " H: " + String.valueOf(h))
      println("A >= G >= H: " + String.valueOf(a >= g && g >= h))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
