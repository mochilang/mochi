// Generated by Mochi v0.10.50 on 2025-07-31 00:51:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def xor(a: BigInt, b: BigInt): BigInt = {
      var res: BigInt = BigInt(0)
      var bit: BigInt = BigInt(1)
      var x: BigInt = a
      var y: BigInt = b
      while (x > BigInt(0) || y > BigInt(0)) {
        if (((x % BigInt(2)).toString.toDouble + (y % BigInt(2)).toString.toDouble) % BigInt(2).toString.toDouble == BigInt(1)) {
          res = (res + bit).asInstanceOf[BigInt]
        }
        x = (x / BigInt(2)).asInstanceOf[BigInt]
        y = (y / BigInt(2)).asInstanceOf[BigInt]
        bit = (bit * BigInt(2)).asInstanceOf[BigInt]
      }
      return res
    }
    def enc(b: BigInt): BigInt = {
      return xor(b, (b / BigInt(2)).asInstanceOf[BigInt])
    }
    def dec(g: BigInt): BigInt = {
      var b: BigInt = BigInt(0)
      var x: BigInt = g
      while (x > BigInt(0)) {
        b = xor(b, x)
        x = (x / BigInt(2)).asInstanceOf[BigInt]
      }
      return b
    }
    def binary(n: BigInt): String = {
      if (n == BigInt(0)) {
        return "0"
      }
      var s: String = ""
      var x: BigInt = n
      while (x > BigInt(0)) {
        if (x % BigInt(2) == BigInt(1)) {
          s = "1" + s
        } else {
          s = "0" + s
        }
        x = (x / BigInt(2)).asInstanceOf[BigInt]
      }
      return s
    }
    def pad5(s: String): String = {
      var p: String = s
      while ((p).size < BigInt(5)) {
        p = "0" + p
      }
      return p
    }
    def main(): Any = {
      println("decimal  binary   gray    decoded")
      var b: BigInt = BigInt(0)
      while (b < BigInt(32)) {
        val g: BigInt = enc(b)
        val d: BigInt = dec(g)
        println("  " + pad5(binary(b)) + "   " + pad5(binary(g)) + "   " + pad5(binary(d)) + "  " + String.valueOf(d))
        b = (b + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
