// Generated by Mochi v0.10.40 on 2025-07-25 13:06:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val dim: Int = 16
    def newPile(d: Int): ArrayBuffer[ArrayBuffer[Int]] = {
      var b: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer()
      var y: Int = 0
      while (y < d) {
        var row: ArrayBuffer[Int] = ArrayBuffer()
        var x: Int = 0
        while (x < d) {
          row = row :+ 0
          x = (x + 1).asInstanceOf[Int]
        }
        b = b :+ row
        y = (y + 1).asInstanceOf[Int]
      }
      return b
    }
    def handlePile(_pile: ArrayBuffer[ArrayBuffer[Int]], x: Int, y: Int): ArrayBuffer[ArrayBuffer[Int]] = {
      var pile: ArrayBuffer[ArrayBuffer[Int]] = _pile
      if (pile(y)(x) >= 4) {
        pile(y)(x) = pile(y)(x) - 4
        if (y > 0) {
          pile(y - 1)(x) = pile(y - 1)(x) + 1
          if (pile(y - 1)(x) >= 4) {
            pile = handlePile(pile, x, (y - 1).asInstanceOf[Int])
          }
        }
        if (x > 0) {
          pile(y)(x - 1) = pile(y)(x - 1) + 1
          if (pile(y)(x - 1) >= 4) {
            pile = handlePile(pile, (x - 1).asInstanceOf[Int], y)
          }
        }
        if (y < (dim - 1).asInstanceOf[Int]) {
          pile(y + 1)(x) = pile(y + 1)(x) + 1
          if (pile(y + 1)(x) >= 4) {
            pile = handlePile(pile, x, (y + 1).asInstanceOf[Int])
          }
        }
        if (x < (dim - 1).asInstanceOf[Int]) {
          pile(y)(x + 1) = pile(y)(x + 1) + 1
          if (pile(y)(x + 1) >= 4) {
            pile = handlePile(pile, (x + 1).asInstanceOf[Int], y)
          }
        }
        pile = handlePile(pile, x, y)
      }
      return pile
    }
    def drawPile(pile: ArrayBuffer[ArrayBuffer[Int]], d: Int): Unit = {
      val chars: ArrayBuffer[String] = ArrayBuffer(" ", "░", "▓", "█")
      var row: Int = 0
      while (row < d) {
        var line: String = ""
        var col: Int = 0
        while (col < d) {
          var v: Int = pile(row)(col)
          if (v > 3) {
            v = 3
          }
          line = (line + chars(v)).asInstanceOf[String]
          col = (col + 1).asInstanceOf[Int]
        }
        println(line)
        row = (row + 1).asInstanceOf[Int]
      }
    }
    def main(): Unit = {
      var pile: ArrayBuffer[ArrayBuffer[Int]] = newPile(16)
      val hdim: Int = 7
      pile(hdim)(hdim) = 16
      pile = handlePile(pile, hdim, hdim)
      drawPile(pile, 16)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
