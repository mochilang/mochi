// Generated by Mochi v0.10.37 on 2025-07-22 20:23:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def newPile(d: Int): ArrayBuffer[ArrayBuffer[Int]] = {
    var b: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer()
    var y: Int = 0
    while (y < d) {
      var row: ArrayBuffer[Int] = ArrayBuffer()
      var x: Int = 0
      while (x < d) {
        row = row :+ 0
        x = x + 1
      }
      b = b :+ row
      y = y + 1
    }
    return b
  }
  
  def handlePile(pile: ArrayBuffer[ArrayBuffer[Int]], x: Int, y: Int): ArrayBuffer[ArrayBuffer[Int]] = {
    if (pile(y)(x) >= 4) {
      pile(y)(x) = pile(y)(x) - 4
      if (y > 0) {
        pile(y - 1)(x) = pile(y - 1)(x) + 1
        if (pile(y - 1)(x) >= 4) {
          pile = handlePile(pile, x, y - 1)
        }
      }
      if (x > 0) {
        pile(y)(x - 1) = pile(y)(x - 1) + 1
        if (pile(y)(x - 1) >= 4) {
          pile = handlePile(pile, x - 1, y)
        }
      }
      if (y < dim - 1) {
        pile(y + 1)(x) = pile(y + 1)(x) + 1
        if (pile(y + 1)(x) >= 4) {
          pile = handlePile(pile, x, y + 1)
        }
      }
      if (x < dim - 1) {
        pile(y)(x + 1) = pile(y)(x + 1) + 1
        if (pile(y)(x + 1) >= 4) {
          pile = handlePile(pile, x + 1, y)
        }
      }
      pile = handlePile(pile, x, y)
    }
    return pile
  }
  
  def drawPile(pile: ArrayBuffer[ArrayBuffer[Int]], d: Int) = {
    val chars: ArrayBuffer[String] = ArrayBuffer(" ", "░", "▓", "█")
    var row: Int = 0
    while (row < d) {
      var line: String = ""
      var col: Int = 0
      while (col < d) {
        var v: Any = pile(row)(col)
        if (v > 3) {
          v = 3
        }
        line = line + chars(v)
        col = col + 1
      }
      println(line)
      row = row + 1
    }
  }
  
  def main() = {
    var pile = newPile(16)
    val hdim: Int = 7
    pile(hdim)(hdim) = 16
    pile = handlePile(pile, hdim, hdim)
    drawPile(pile, 16)
  }
  
  val dim: Int = 16
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
