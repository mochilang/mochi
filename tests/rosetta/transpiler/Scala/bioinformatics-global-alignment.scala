// Generated by Mochi v0.10.40 on 2025-07-26 04:49:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def padLeft(s: String, w: Int): String = {
      var res: String = ""
      var n = w - (s).size
      while (n > 0) {
        res = res + " "
        n = (n - 1).asInstanceOf[Int]
      }
      return (res + s).toString
    }
    def indexOfFrom(s: String, ch: String, start: Int): Int = {
      var i: Int = start
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def containsStr(s: String, sub: String): Boolean = {
      var i: Int = 0
      val sl: Int = (s).size
      val subl: Int = (sub).size
      while (i <= (sl - subl).asInstanceOf[Int]) {
        if (s.slice(i, i + subl) == sub) {
          return true
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return false
    }
    def distinct(slist: ArrayBuffer[String]): ArrayBuffer[String] = {
      var res: ArrayBuffer[String] = ArrayBuffer()
      val _br3 = new Breaks
      _br3.breakable {
        for (s <- slist) {
          var found: Boolean = false
          val _br4 = new Breaks
          _br4.breakable {
            for (r <- res) {
              if (r == s) {
                found = true
                _br4.break()
              }
            }
          }
          if ((!found).asInstanceOf[Boolean]) {
            res = res :+ s
          }
        }
      }
      return res
    }
    def permutations(xs: ArrayBuffer[String]): ArrayBuffer[ArrayBuffer[String]] = {
      if ((xs).size <= 1) {
        return (ArrayBuffer(xs)).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
      }
      var res: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer()
      var i: Int = 0
      while (i < (xs).size) {
        var rest: ArrayBuffer[String] = ArrayBuffer()
        var j: Int = 0
        while (j < (xs).size) {
          if (j != i) {
            rest = rest :+ xs(j)
          }
          j = (j + 1).asInstanceOf[Int]
        }
        val subs: ArrayBuffer[ArrayBuffer[String]] = permutations(rest)
        for (p <- subs) {
          var perm: ArrayBuffer[String] = ArrayBuffer(xs(i))
          var k: Int = 0
          while (k < (p).size) {
            perm = perm :+ p(k)
            k = (k + 1).asInstanceOf[Int]
          }
          res = res :+ perm
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return res
    }
    def headTailOverlap(s1: String, s2: String): Int = {
      var start: Int = 0
      while (true) {
        val ix: Int = indexOfFrom(s1, s2.slice(0, 1), start)
        if (ix == 0 - 1) {
          return 0
        }
        start = ix
        if (s2.slice(0, (s1).size - start) == s1.slice(start, (s1).size)) {
          return ((s1).size - start).asInstanceOf[Int]
        }
        start = (start + 1).asInstanceOf[Int]
      }
      return 0
    }
    def deduplicate(slist: ArrayBuffer[String]): ArrayBuffer[String] = {
      val arr: ArrayBuffer[String] = distinct(slist)
      var filtered: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      val _br10 = new Breaks
      _br10.breakable {
        while (i < (arr).size) {
          val s1: String = arr(i)
          var within: Boolean = false
          var j: Int = 0
          val _br11 = new Breaks
          _br11.breakable {
            while (j < (arr).size) {
              if ((j != i && containsStr(arr(j), s1)).asInstanceOf[Boolean]) {
                within = true
                _br11.break()
              }
              j = (j + 1).asInstanceOf[Int]
            }
          }
          if ((!within).asInstanceOf[Boolean]) {
            filtered = filtered :+ s1
          }
          i = (i + 1).asInstanceOf[Int]
        }
      }
      return filtered
    }
    def joinAll(ss: ArrayBuffer[String]): String = {
      var out: String = ""
      for (s <- ss) {
        out = (out + s).toString
      }
      return out
    }
    def shortestCommonSuperstring(slist: ArrayBuffer[String]): String = {
      val ss: ArrayBuffer[String] = deduplicate(slist)
      var shortest: String = joinAll(ss)
      val perms: ArrayBuffer[ArrayBuffer[String]] = permutations(ss)
      var idx: Int = 0
      while (idx < (perms).size) {
        val perm: ArrayBuffer[String] = perms(idx)
        var sup: String = perm(0)
        var i: Int = 0
        while (i < (ss).size - 1) {
          val ov: Int = headTailOverlap(perm(i), perm(i + 1))
          sup = sup + perm(i + 1).slice(ov, (perm(i + 1)).size)
          i = (i + 1).asInstanceOf[Int]
        }
        if ((sup).size < (shortest).size) {
          shortest = sup
        }
        idx = (idx + 1).asInstanceOf[Int]
      }
      return shortest
    }
    def printCounts(seq: String): Any = {
      var a: Int = 0
      var c: Int = 0
      var g: Int = 0
      var t: Int = 0
      var i: Int = 0
      while (i < (seq).size) {
        val ch: String = seq.slice(i, i + 1)
        if (ch == "A") {
          a = (a + 1).asInstanceOf[Int]
        } else {
          if (ch == "C") {
            c = (c + 1).asInstanceOf[Int]
          } else {
            if (ch == "G") {
              g = (g + 1).asInstanceOf[Int]
            } else {
              if (ch == "T") {
                t = (t + 1).asInstanceOf[Int]
              }
            }
          }
        }
        i = (i + 1).asInstanceOf[Int]
      }
      val total: Int = (seq).size
      println("\nNucleotide counts for " + seq + ":\n")
      println(padLeft("A", 10) + padLeft((String.valueOf(a)).toString, 12))
      println(padLeft("C", 10) + padLeft((String.valueOf(c)).toString, 12))
      println(padLeft("G", 10) + padLeft((String.valueOf(g)).toString, 12))
      println(padLeft("T", 10) + padLeft((String.valueOf(t)).toString, 12))
      println(padLeft("Other", 10) + padLeft((String.valueOf(total - (a + c + g + t))).toString, 12))
      println("  ____________________")
      println(padLeft("Total length", 14) + padLeft((String.valueOf(total)).toString, 8))
    }
    def main(): Any = {
      val tests: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("TA", "AAG", "TA", "GAA", "TA"), ArrayBuffer("CATTAGGG", "ATTAG", "GGG", "TA"), ArrayBuffer("AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"), ArrayBuffer("ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"))
      for (seqs <- tests) {
        val scs: String = shortestCommonSuperstring(seqs.asInstanceOf[ArrayBuffer[String]])
        printCounts(scs)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
