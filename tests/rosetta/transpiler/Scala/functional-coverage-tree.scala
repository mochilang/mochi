// Generated by Mochi v0.10.50 on 2025-07-31 01:08:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow10(n: BigInt): Double = {
      var r: Double = 1.0
      var i: BigInt = BigInt(0)
      while (i < n) {
        r = r * 10.0
        i = i + BigInt(1)
      }
      return r
    }
    def formatFloat(f: Double, prec: BigInt): String = {
      val scale: Double = pow10(prec)
      val scaled: Double = f * scale + 0.5
      var n: BigInt = BigInt(scaled.toInt)
      var digits: String = String.valueOf(n)
      while ((digits).size <= prec) {
        digits = "0" + digits
      }
      val intPart: String = digits.slice((BigInt(0)).toInt, ((digits).size - prec).toInt)
      val fracPart: String = digits.slice(((digits).size - prec).toInt, ((digits).size).toInt)
      return intPart + "." + fracPart
    }
    def padLeft(s: String, w: BigInt): String = {
      var res: String = ""
      var n: BigInt = w - (s).size
      while (n > BigInt(0)) {
        res = res + " "
        n = n - BigInt(1)
      }
      return (res + s).toString
    }
    def repeat(ch: String, n: BigInt): String = {
      var s: String = ""
      var i: BigInt = BigInt(0)
      while (i < n) {
        s = (s + ch).toString
        i = i + BigInt(1)
      }
      return s
    }
    def toFloat(i: BigInt): Double = {
      return i.toString.toDouble
    }
    def newNode(name: String, weight: BigInt, coverage: Double): scala.collection.mutable.Map[String,Any] = {
      return (scala.collection.mutable.Map("name" -> (name), "weight" -> (weight), "coverage" -> (coverage), "children" -> (ArrayBuffer()))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    }
    def addChildren(n: scala.collection.mutable.Map[String,Any], nodes: ArrayBuffer[scala.collection.mutable.Map[String,Any]]): Any = {
      var cs: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
      for (node <- nodes) {
        cs = cs :+ node.asInstanceOf[Any]
      }
      n.update("children", cs)
    }
    def setCoverage(n: scala.collection.mutable.Map[String,Any], value: Double): Any = {
      n.update("coverage", value)
    }
    def computeCoverage(n: scala.collection.mutable.Map[String,Any]): Double = {
      var cs: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
      if ((cs).size == BigInt(0)) {
        return (n("coverage")).toString.toDouble
      }
      var v1: Double = 0.0
      var v2: BigInt = BigInt(0)
      for (node <- cs) {
        val m: scala.collection.mutable.Map[String,Any] = node.asInstanceOf[scala.collection.mutable.Map[String,Any]]
        val c: Double = computeCoverage(m)
        v1 = (v1 + toFloat(BigInt((m("weight")).toInt)) * c).toString.toDouble
        v2 = v2 + BigInt((m("weight")).toInt)
      }
      return (v1 / toFloat(v2)).toString.toDouble
    }
    def spaces(n: BigInt): String = {
      return (_repeat(" ", n)).toString
    }
    def show(n: scala.collection.mutable.Map[String,Any], level: BigInt): Any = {
      var indent: BigInt = level * BigInt(4)
      val name: String = (n("name")).toString
      var nl: BigInt = (name).size + indent
      var line: String = spaces(indent) + name
      line = line + spaces(BigInt(32) - nl) + "|  "
      line = line + padLeft(String.valueOf(BigInt((n("weight")).toInt)), BigInt(3)) + "   | "
      line = line + formatFloat(computeCoverage(n), BigInt(6)) + " |"
      println(line)
      val cs: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
      for (child <- cs) {
        show(child.asInstanceOf[scala.collection.mutable.Map[String,Any]], level + BigInt(1))
      }
    }
    var house1: scala.collection.mutable.Map[String,Any] = newNode("house1", BigInt(40), 0.0)
    var house2: scala.collection.mutable.Map[String,Any] = newNode("house2", BigInt(60), 0.0)
    var h1_bedrooms: scala.collection.mutable.Map[String,Any] = newNode("bedrooms", BigInt(1), 0.25)
    var h1_bathrooms: scala.collection.mutable.Map[String,Any] = newNode("bathrooms", BigInt(1), 0.0)
    var h1_attic: scala.collection.mutable.Map[String,Any] = newNode("attic", BigInt(1), 0.75)
    var h1_kitchen: scala.collection.mutable.Map[String,Any] = newNode("kitchen", BigInt(1), 0.1)
    var h1_living_rooms: scala.collection.mutable.Map[String,Any] = newNode("living_rooms", BigInt(1), 0.0)
    var h1_basement: scala.collection.mutable.Map[String,Any] = newNode("basement", BigInt(1), 0.0)
    var h1_garage: scala.collection.mutable.Map[String,Any] = newNode("garage", BigInt(1), 0.0)
    var h1_garden: scala.collection.mutable.Map[String,Any] = newNode("garden", BigInt(1), 0.8)
    var h2_upstairs: scala.collection.mutable.Map[String,Any] = newNode("upstairs", BigInt(1), 0.0)
    var h2_groundfloor: scala.collection.mutable.Map[String,Any] = newNode("groundfloor", BigInt(1), 0.0)
    var h2_basement: scala.collection.mutable.Map[String,Any] = newNode("basement", BigInt(1), 0.0)
    var h1_bathroom1: scala.collection.mutable.Map[String,Any] = newNode("bathroom1", BigInt(1), 0.5)
    var h1_bathroom2: scala.collection.mutable.Map[String,Any] = newNode("bathroom2", BigInt(1), 0.0)
    var h1_outside: scala.collection.mutable.Map[String,Any] = newNode("outside_lavatory", BigInt(1), 1.0)
    var h1_lounge: scala.collection.mutable.Map[String,Any] = newNode("lounge", BigInt(1), 0.0)
    var h1_dining: scala.collection.mutable.Map[String,Any] = newNode("dining_room", BigInt(1), 0.0)
    var h1_conservatory: scala.collection.mutable.Map[String,Any] = newNode("conservatory", BigInt(1), 0.0)
    var h1_playroom: scala.collection.mutable.Map[String,Any] = newNode("playroom", BigInt(1), 1.0)
    var h2_bedrooms: scala.collection.mutable.Map[String,Any] = newNode("bedrooms", BigInt(1), 0.0)
    var h2_bathroom: scala.collection.mutable.Map[String,Any] = newNode("bathroom", BigInt(1), 0.0)
    var h2_toilet: scala.collection.mutable.Map[String,Any] = newNode("toilet", BigInt(1), 0.0)
    var h2_attics: scala.collection.mutable.Map[String,Any] = newNode("attics", BigInt(1), 0.6)
    var h2_kitchen: scala.collection.mutable.Map[String,Any] = newNode("kitchen", BigInt(1), 0.0)
    var h2_living_rooms: scala.collection.mutable.Map[String,Any] = newNode("living_rooms", BigInt(1), 0.0)
    var h2_wet_room: scala.collection.mutable.Map[String,Any] = newNode("wet_room_&_toilet", BigInt(1), 0.0)
    var h2_garage: scala.collection.mutable.Map[String,Any] = newNode("garage", BigInt(1), 0.0)
    var h2_garden: scala.collection.mutable.Map[String,Any] = newNode("garden", BigInt(1), 0.9)
    var h2_hot_tub: scala.collection.mutable.Map[String,Any] = newNode("hot_tub_suite", BigInt(1), 1.0)
    var h2_cellars: scala.collection.mutable.Map[String,Any] = newNode("cellars", BigInt(1), 1.0)
    var h2_wine_cellar: scala.collection.mutable.Map[String,Any] = newNode("wine_cellar", BigInt(1), 1.0)
    var h2_cinema: scala.collection.mutable.Map[String,Any] = newNode("cinema", BigInt(1), 0.75)
    var h2_suite1: scala.collection.mutable.Map[String,Any] = newNode("suite_1", BigInt(1), 0.0)
    var h2_suite2: scala.collection.mutable.Map[String,Any] = newNode("suite_2", BigInt(1), 0.0)
    var h2_bedroom3: scala.collection.mutable.Map[String,Any] = newNode("bedroom_3", BigInt(1), 0.0)
    var h2_bedroom4: scala.collection.mutable.Map[String,Any] = newNode("bedroom_4", BigInt(1), 0.0)
    var h2_lounge: scala.collection.mutable.Map[String,Any] = newNode("lounge", BigInt(1), 0.0)
    var h2_dining: scala.collection.mutable.Map[String,Any] = newNode("dining_room", BigInt(1), 0.0)
    var h2_conservatory: scala.collection.mutable.Map[String,Any] = newNode("conservatory", BigInt(1), 0.0)
    var h2_playroom: scala.collection.mutable.Map[String,Any] = newNode("playroom", BigInt(1), 0.0)
    def main(): Any = {
      var cleaning: scala.collection.mutable.Map[String,Any] = newNode("cleaning", BigInt(1), 0.0)
      addChildren(h1_bathrooms, (ArrayBuffer(h1_bathroom1, h1_bathroom2, h1_outside)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h1_living_rooms, (ArrayBuffer(h1_lounge, h1_dining, h1_conservatory, h1_playroom)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(house1, (ArrayBuffer(h1_bedrooms, h1_bathrooms, h1_attic, h1_kitchen, h1_living_rooms, h1_basement, h1_garage, h1_garden)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h2_bedrooms, (ArrayBuffer(h2_suite1, h2_suite2, h2_bedroom3, h2_bedroom4)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h2_upstairs, (ArrayBuffer(h2_bedrooms, h2_bathroom, h2_toilet, h2_attics)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h2_living_rooms, (ArrayBuffer(h2_lounge, h2_dining, h2_conservatory, h2_playroom)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h2_groundfloor, (ArrayBuffer(h2_kitchen, h2_living_rooms, h2_wet_room, h2_garage, h2_garden, h2_hot_tub)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(h2_basement, (ArrayBuffer(h2_cellars, h2_wine_cellar, h2_cinema)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(house2, (ArrayBuffer(h2_upstairs, h2_groundfloor, h2_basement)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      addChildren(cleaning, (ArrayBuffer(house1, house2)).asInstanceOf[ArrayBuffer[scala.collection.mutable.Map[String,Any]]])
      val topCoverage: Double = computeCoverage(cleaning)
      println("TOP COVERAGE = " + formatFloat(topCoverage, BigInt(6)))
      println("")
      println("NAME HIERARCHY                 | WEIGHT | COVERAGE |")
      show(cleaning, BigInt(0))
      setCoverage(h2_cinema, 1.0)
      val diff = computeCoverage(cleaning) - topCoverage
      println("")
      println("If the coverage of the Cinema node were increased from 0.75 to 1")
      println("the top level coverage would increase by " + formatFloat(diff, BigInt(6)) + " to " + formatFloat((topCoverage + diff).toString.toDouble, BigInt(6)))
      setCoverage(h2_cinema, 0.75)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
