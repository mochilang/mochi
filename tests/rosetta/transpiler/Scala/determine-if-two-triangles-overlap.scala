// Generated by Mochi v0.10.52 on 2025-08-01 19:05:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: Double, var y: Double)

case class Triangle(var p1: Point, var p2: Point, var p3: Point)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def fmt1(f: Double): String = {
      var s: String = String.valueOf(f)
      val idx = BigInt(s.indexOf("."))
      if (idx < BigInt(0)) {
        s = s + ".0"
      } else {
        var need: BigInt = idx + BigInt(2)
        if ((s).size > need) {
          s = s.slice((BigInt(0)).toInt, (need).toInt)
        } else {
          while ((s).size < need) {
            s = s + "0"
          }
        }
      }
      return s
    }
    def pointStr(p: Point): String = {
      return "(" + fmt1(p.x) + ", " + fmt1(p.y) + ")"
    }
    def triangleStr(t: Triangle): String = {
      return "Triangle " + pointStr(t.p1) + ", " + pointStr(t.p2) + ", " + pointStr(t.p3)
    }
    def orient(a: Point, b: Point, c: Point): Double = {
      return (b.x - a.x).toString.toDouble * (c.y - a.y).toString.toDouble - (b.y - a.y).toString.toDouble * (c.x - a.x).toString.toDouble
    }
    def pointInTri(p: Point, t: Triangle, onBoundary: Boolean): Boolean = {
      val d1: Double = orient(p, t.p1, t.p2)
      val d2: Double = orient(p, t.p2, t.p3)
      val d3: Double = orient(p, t.p3, t.p1)
      var hasNeg: Boolean = (d1 < 0.0 || d2 < 0.0).asInstanceOf[Boolean] || d3 < 0.0
      var hasPos: Boolean = (d1 > 0.0 || d2 > 0.0).asInstanceOf[Boolean] || d3 > 0.0
      if (onBoundary) {
        return (!(hasNeg && hasPos).asInstanceOf[Boolean]).asInstanceOf[Boolean]
      }
      return ((((!(hasNeg && hasPos).asInstanceOf[Boolean]).asInstanceOf[Boolean] && d1 != 0.0).asInstanceOf[Boolean] && d2 != 0.0).asInstanceOf[Boolean] && d3 != 0.0).asInstanceOf[Boolean]
    }
    def edgeCheck(a0: Point, a1: Point, bs: ArrayBuffer[Point], onBoundary: Boolean): Boolean = {
      val d0: Double = orient(a0, a1, bs((BigInt(0)).toInt))
      val d1: Double = orient(a0, a1, bs((BigInt(1)).toInt))
      val d2: Double = orient(a0, a1, bs((BigInt(2)).toInt))
      if (onBoundary) {
        return ((d0 <= 0.0 && d1 <= 0.0).asInstanceOf[Boolean] && d2 <= 0.0).asInstanceOf[Boolean]
      }
      return ((d0 < 0.0 && d1 < 0.0).asInstanceOf[Boolean] && d2 < 0.0).asInstanceOf[Boolean]
    }
    def triTri2D(t1: Triangle, t2: Triangle, onBoundary: Boolean): Boolean = {
      val a: ArrayBuffer[Point] = ArrayBuffer(t1.p1, t1.p2, t1.p3)
      val b: ArrayBuffer[Point] = ArrayBuffer(t2.p1, t2.p2, t2.p3)
      var i: BigInt = BigInt(0)
      while (i < BigInt(3)) {
        val j: BigInt = (i + BigInt(1)) % BigInt(3)
        if (edgeCheck(a((i).toInt), a((j).toInt), b, onBoundary)) {
          return false
        }
        i = i + BigInt(1)
      }
      i = BigInt(0)
      while (i < BigInt(3)) {
        val j: BigInt = (i + BigInt(1)) % BigInt(3)
        if (edgeCheck(b((i).toInt), b((j).toInt), a, onBoundary)) {
          return false
        }
        i = i + BigInt(1)
      }
      return true
    }
    def iff(cond: Boolean, a: String, b: String): String = {
      if (cond) {
        return a
      } else {
        return b
      }
      return ""
    }
    def main(): Any = {
      var t1: Triangle = Triangle(Point(0.0, 0.0), Point(5.0, 0.0), Point(0.0, 5.0))
      var t2: Triangle = Triangle(Point(0.0, 0.0), Point(5.0, 0.0), Point(0.0, 6.0))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      var overlapping: Boolean = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      t1 = Triangle(Point(0.0, 0.0), Point(0.0, 5.0), Point(5.0, 0.0))
      t2 = t1
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap (reversed)", "do not overlap"))
      println("")
      t1 = Triangle(Point(0.0, 0.0), Point(5.0, 0.0), Point(0.0, 5.0))
      t2 = Triangle(Point(-10.0, 0.0), Point(-5.0, 0.0), Point(-1.0, 6.0))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      t1.p3 = Point(2.5, 5.0)
      t2 = Triangle(Point(0.0, 4.0), Point(2.5, -1.0), Point(5.0, 4.0))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      t1 = Triangle(Point(0.0, 0.0), Point(1.0, 1.0), Point(0.0, 2.0))
      t2 = Triangle(Point(2.0, 1.0), Point(3.0, 0.0), Point(3.0, 2.0))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      t2 = Triangle(Point(2.0, 1.0), Point(3.0, -2.0), Point(3.0, 4.0))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      t1 = Triangle(Point(0.0, 0.0), Point(1.0, 0.0), Point(0.0, 1.0))
      t2 = Triangle(Point(1.0, 0.0), Point(2.0, 0.0), Point(1.0, 1.1))
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      println("which have only a single corner in contact, if boundary points collide")
      overlapping = triTri2D(t1, t2, true)
      println(iff(overlapping, "overlap", "do not overlap"))
      println("")
      println(triangleStr(t1) + " and")
      println(triangleStr(t2))
      println("which have only a single corner in contact, if boundary points do not collide")
      overlapping = triTri2D(t1, t2, false)
      println(iff(overlapping, "overlap", "do not overlap"))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
