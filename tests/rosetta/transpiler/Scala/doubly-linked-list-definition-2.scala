// Generated by Mochi v0.10.52 on 2025-08-01 19:21:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def newList(): scala.collection.mutable.Map[String,Any] = {
  return (scala.collection.mutable.Map("nodes" -> (scala.collection.mutable.Map()), "head" -> (BigInt(0)), "tail" -> (BigInt(0)), "nextID" -> (BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def newNode(l: scala.collection.mutable.Map[String,Any], v: Any): scala.collection.mutable.Map[String,Any] = {
  val id: BigInt = BigInt((l("nextID")).toInt)
  l.update("nextID", id + BigInt(1))
  var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  val n: Map[String,Any] = scala.collection.mutable.Map("id" -> (id), "value" -> (v), "next" -> (BigInt(0)), "prev" -> (BigInt(0)))
  nodes.update(id, n)
  l.update("nodes", nodes)
  return n.asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def pushFront(l: scala.collection.mutable.Map[String,Any], v: Any): scala.collection.mutable.Map[String,Any] = {
  var n: scala.collection.mutable.Map[String,Any] = newNode(l, v)
  n.update("next", l("head"))
  if (BigInt((l("head")).toInt) != BigInt(0)) {
    var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
    var h: scala.collection.mutable.Map[String,Any] = nodes(BigInt((l("head")).toInt)).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    h.update("prev", n("id"))
    nodes.update(BigInt((h("id")).toInt), h)
    l.update("nodes", nodes)
  } else {
    l.update("tail", n("id"))
  }
  l.update("head", n("id"))
  var nodes2: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  nodes2.update(BigInt((n("id")).toInt), n)
  l.update("nodes", nodes2)
  return n
}

def pushBack(l: scala.collection.mutable.Map[String,Any], v: Any): scala.collection.mutable.Map[String,Any] = {
  var n: scala.collection.mutable.Map[String,Any] = newNode(l, v)
  n.update("prev", l("tail"))
  if (BigInt((l("tail")).toInt) != BigInt(0)) {
    var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
    var t: scala.collection.mutable.Map[String,Any] = nodes(BigInt((l("tail")).toInt)).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    t.update("next", n("id"))
    nodes.update(BigInt((t("id")).toInt), t)
    l.update("nodes", nodes)
  } else {
    l.update("head", n("id"))
  }
  l.update("tail", n("id"))
  var nodes2: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  nodes2.update(BigInt((n("id")).toInt), n)
  l.update("nodes", nodes2)
  return n
}

def insertBefore(l: scala.collection.mutable.Map[String,Any], refID: BigInt, v: Any): scala.collection.mutable.Map[String,Any] = {
  if (refID == BigInt(0)) {
    return pushFront(l, v)
  }
  var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  var ref: scala.collection.mutable.Map[String,Any] = nodes(refID).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  var n: scala.collection.mutable.Map[String,Any] = newNode(l, v)
  n.update("prev", ref("prev"))
  n.update("next", ref("id"))
  if (BigInt((ref("prev")).toInt) != BigInt(0)) {
    var p: scala.collection.mutable.Map[String,Any] = nodes(BigInt((ref("prev")).toInt)).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    p.update("next", n("id"))
    nodes.update(BigInt((p("id")).toInt), p)
  } else {
    l.update("head", n("id"))
  }
  ref.update("prev", n("id"))
  nodes.update(refID, ref)
  nodes.update(BigInt((n("id")).toInt), n)
  l.update("nodes", nodes)
  return n
}

def insertAfter(l: scala.collection.mutable.Map[String,Any], refID: BigInt, v: Any): scala.collection.mutable.Map[String,Any] = {
  if (refID == BigInt(0)) {
    return pushBack(l, v)
  }
  var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  var ref: scala.collection.mutable.Map[String,Any] = nodes(refID).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  var n: scala.collection.mutable.Map[String,Any] = newNode(l, v)
  n.update("next", ref("next"))
  n.update("prev", ref("id"))
  if (BigInt((ref("next")).toInt) != BigInt(0)) {
    var nx: scala.collection.mutable.Map[String,Any] = nodes(BigInt((ref("next")).toInt)).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    nx.update("prev", n("id"))
    nodes.update(BigInt((nx("id")).toInt), nx)
  } else {
    l.update("tail", n("id"))
  }
  ref.update("next", n("id"))
  nodes.update(refID, ref)
  nodes.update(BigInt((n("id")).toInt), n)
  l.update("nodes", nodes)
  return n
}

def main(): Any = {
  var l: scala.collection.mutable.Map[String,Any] = newList()
  var e4: scala.collection.mutable.Map[String,Any] = pushBack(l, BigInt(4))
  var e1: scala.collection.mutable.Map[String,Any] = pushFront(l, BigInt(1))
  insertBefore(l, BigInt((e4("id")).toInt), BigInt(3))
  insertAfter(l, BigInt((e1("id")).toInt), "two")
  var id: BigInt = BigInt((l("head")).toInt)
  var nodes: scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]] = (l("nodes")).asInstanceOf[scala.collection.mutable.Map[BigInt,scala.collection.mutable.Map[String,Any]]]
  while (id != BigInt(0)) {
    val node: scala.collection.mutable.Map[String,Any] = nodes(id).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    println(String.valueOf(node("value")))
    id = BigInt((node("next")).toInt)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
