// Generated by Mochi v0.10.41 on 2025-07-26 17:21:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      if (n % BigInt(2) == BigInt(0)) {
        return n == BigInt(2)
      }
      if (n % BigInt(3) == BigInt(0)) {
        return n == BigInt(3)
      }
      var d: BigInt = BigInt(5)
      while (d * d <= n) {
        if (n % d == BigInt(0)) {
          return false
        }
        d = (d + BigInt(2)).asInstanceOf[BigInt]
        if (n % d == BigInt(0)) {
          return false
        }
        d = (d + BigInt(4)).asInstanceOf[BigInt]
      }
      return true
    }
    def bigTrim(_a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
      var a: ArrayBuffer[BigInt] = _a
      var n: Int = (a).size
      while (n > BigInt(1) && a((n - BigInt(1)).toInt) == BigInt(0)) {
        a = a.slice((BigInt(0)).toInt, (n - BigInt(1)).toInt)
        n = (n - BigInt(1)).asInstanceOf[Int]
      }
      return a
    }
    def bigFromInt(x: BigInt): ArrayBuffer[BigInt] = {
      if (x == BigInt(0)) {
        return ArrayBuffer(BigInt(0))
      }
      var digits: ArrayBuffer[BigInt] = ArrayBuffer()
      var n: BigInt = x
      while (n > BigInt(0)) {
        digits = digits :+ (n % BigInt(10)).asInstanceOf[BigInt]
        n = (n / BigInt(10)).asInstanceOf[BigInt]
      }
      return digits
    }
    def bigMulSmall(a: ArrayBuffer[BigInt], m: BigInt): ArrayBuffer[BigInt] = {
      if (m == BigInt(0)) {
        return ArrayBuffer(BigInt(0))
      }
      var res: ArrayBuffer[BigInt] = ArrayBuffer()
      var carry: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < (a).size) {
        var prod = a((i).toInt) * m + carry
        res = res :+ (prod % BigInt(10)).asInstanceOf[BigInt]
        carry = (prod / BigInt(10)).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      while (carry > BigInt(0)) {
        res = res :+ (carry % BigInt(10)).asInstanceOf[BigInt]
        carry = (carry / BigInt(10)).asInstanceOf[BigInt]
      }
      return bigTrim(res)
    }
    def bigToString(a: ArrayBuffer[BigInt]): String = {
      var s: String = ""
      var i: BigInt = (a).size - BigInt(1)
      while (i >= BigInt(0)) {
        s = (s + String.valueOf(a((i).toInt))).toString
        i = (i - BigInt(1)).asInstanceOf[BigInt]
      }
      return s
    }
    def pow2(k: BigInt): BigInt = {
      var r: BigInt = BigInt(1)
      var i: BigInt = BigInt(0)
      while (i < k) {
        r = (r * BigInt(2)).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return r
    }
    def ccFactors(n: BigInt, m: BigInt): ArrayBuffer[BigInt] = {
      var p = BigInt(6) * m + BigInt(1)
      if ((!isPrime(p)).asInstanceOf[Boolean]) {
        return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
      }
      var prod: ArrayBuffer[BigInt] = bigFromInt(p)
      p = (BigInt(12) * m + BigInt(1)).asInstanceOf[BigInt]
      if ((!isPrime(p)).asInstanceOf[Boolean]) {
        return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
      }
      prod = bigMulSmall(prod, p)
      var i: BigInt = BigInt(1)
      while (i <= n - BigInt(2)) {
        p = (pow2(i) * BigInt(9) * m + BigInt(1)).asInstanceOf[BigInt]
        if ((!isPrime(p)).asInstanceOf[Boolean]) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
        }
        prod = bigMulSmall(prod, p)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return prod
    }
    def ccNumbers(start: BigInt, end: BigInt): Any = {
      var n: BigInt = start
      val _br8 = new Breaks
      _br8.breakable {
        while (n <= end) {
          var m: BigInt = BigInt(1)
          if (n > BigInt(4)) {
            m = pow2((n - BigInt(4)).asInstanceOf[BigInt])
          }
          val _br9 = new Breaks
          _br9.breakable {
            while (true) {
              val num: ArrayBuffer[BigInt] = ccFactors(n, m)
              if ((num).size > BigInt(0)) {
                println("a(" + String.valueOf(n) + ") = " + bigToString(num))
                _br9.break()
              }
              if (n <= BigInt(4)) {
                m = (m + BigInt(1)).asInstanceOf[BigInt]
              } else {
                m = (m + pow2((n - BigInt(4)).asInstanceOf[BigInt])).asInstanceOf[BigInt]
              }
            }
          }
          n = (n + BigInt(1)).asInstanceOf[BigInt]
        }
      }
    }
    ccNumbers(BigInt(3), BigInt(9))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
