// Generated by Mochi v0.10.56 on 2025-08-04 00:19:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Vector(var x: Double, var y: Double, var z: Double)

def add(a: Vector, b: Vector): Vector = {
  return Vector(a.x + b.x, a.y + b.y, a.z + b.z)
}

def sub(a: Vector, b: Vector): Vector = {
  return Vector(a.x - b.x, a.y - b.y, a.z - b.z)
}

def mul(v: Vector, s: Double): Vector = {
  return Vector(v.x * s, v.y * s, v.z * s)
}

def dot(a: Vector, b: Vector): Double = {
  return a.x * b.x + a.y * b.y + a.z * b.z
}

def intersectPoint(rv: Vector, rp: Vector, pn: Vector, pp: Vector): Vector = {
  val diff: Vector = sub(rp, pp)
  val prod1: Double = dot(diff, pn)
  val prod2: Double = dot(rv, pn)
  val prod3: Double = prod1 / prod2
  return sub(rp, mul(rv, prod3))
}

def main(): Any = {
  val rv: Vector = Vector(0.0, -1.0, -1.0)
  val rp: Vector = Vector(0.0, 0.0, 10.0)
  val pn: Vector = Vector(0.0, 0.0, 1.0)
  val pp: Vector = Vector(0.0, 0.0, 5.0)
  val ip: Vector = intersectPoint(rv, rp, pn, pp)
  println("The ray intersects the plane at (" + String.valueOf(ip.x) + ", " + String.valueOf(ip.y) + ", " + String.valueOf(ip.z) + ")")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
