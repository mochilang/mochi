// Generated by Mochi v0.10.57 on 2025-08-04 17:19:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)
  
  def join(xs: ArrayBuffer[String], sep: String): String = {
    var res: String = ""
    var i: BigInt = 0
    while (i < BigInt(((xs).size).toInt)) {
      if (i > 0) {
        res = res + sep
      }
      res = res + xs((i.toInt).toInt)
      i = i + 1
    }
    return res
  }
  
  def parseIntStr(str: String): BigInt = {
    var i: BigInt = 0
    var neg: Boolean = false
    if ((BigInt(((str).size).toInt) > 0 && str.slice((0).toInt, (1).toInt) == "-").asInstanceOf[Boolean]) {
      neg = true
      i = 1
    }
    var n: BigInt = 0
    val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (0), "1" -> (1), "2" -> (2), "3" -> (3), "4" -> (4), "5" -> (5), "6" -> (6), "7" -> (7), "8" -> (8), "9" -> (9))
    while (i < BigInt(((str).size).toInt)) {
      n = n * 10 + digits.getOrElse(str.slice((i).toInt, (i + 1).toInt), null).asInstanceOf[BigInt]
      i = i + 1
    }
    if (neg) {
      n = 0 - n
    }
    return n
  }
  
  def main(args: Array[String]): Unit = {
    var rows: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("A", "B", "C"), ArrayBuffer("1", "2", "3"), ArrayBuffer("4", "5", "6"), ArrayBuffer("7", "8", "9"))
    rows((0).toInt) = rows((0.toInt).toInt) :+ "SUM"
    var i: BigInt = 1
    while (i < BigInt(((rows).size).toInt)) {
      var sum: BigInt = 0
      for (s <- rows((i.toInt).toInt)) {
        sum = sum + _parseIntStr(s, 10)
      }
      rows((i).toInt) = rows((i.toInt).toInt) :+ String.valueOf(sum)
      i = i + 1
    }
    for (r <- rows) {
      println(join(r, ","))
    }
  }
}
