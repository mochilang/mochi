// Generated by Mochi v0.10.42 on 2025-07-27 22:00:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def join(xs: ArrayBuffer[String], sep: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        if (i > BigInt(0)) {
          res = (res + sep).toString
        }
        res = (res + xs((i).toInt)).toString
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def parseIntStr(str: String): BigInt = {
      var i: BigInt = BigInt(0)
      var neg: Boolean = false
      if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        i = BigInt(1)
      }
      var n: BigInt = BigInt(0)
      val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
      while (i < (str).size) {
        n = (n * BigInt(10) + digits.getOrElse(str.slice((i).toInt, (i + BigInt(1)).toInt), null.asInstanceOf[BigInt])).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      if (neg) {
        n = (BigInt(0) - n).asInstanceOf[BigInt]
      }
      return n
    }
    var rows: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("A", "B", "C"), ArrayBuffer("1", "2", "3"), ArrayBuffer("4", "5", "6"), ArrayBuffer("7", "8", "9"))
    rows((BigInt(0)).toInt) = rows((BigInt(0)).toInt) :+ "SUM"
    var i: BigInt = BigInt(1)
    while (i < (rows).size) {
      var sum: BigInt = BigInt(0)
      for (s <- rows((i).toInt)) {
        sum = (sum + _parseIntStr(s, BigInt(10))).asInstanceOf[BigInt]
      }
      rows((i).toInt) = rows((i).toInt) :+ (String.valueOf(sum)).toString
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    for (r <- rows) {
      println(join(r, ","))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
