// Generated by Mochi v0.10.41 on 2025-07-26 21:26:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Info(var animal: String, var yinYang: String, var element: String, var stemBranch: String, var cycle: BigInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val animal: ArrayBuffer[String] = ArrayBuffer("Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig")
    val yinYang: ArrayBuffer[String] = ArrayBuffer("Yang", "Yin")
    val element: ArrayBuffer[String] = ArrayBuffer("Wood", "Fire", "Earth", "Metal", "Water")
    val stemChArr: ArrayBuffer[String] = ArrayBuffer("\u7532", "\u4e59", "\u4e19", "\u4e01", "\u620a", "\u5df1", "\u5e9a", "\u8f9b", "\u58ec", "\u7678")
    val branchChArr: ArrayBuffer[String] = ArrayBuffer("\u5b50", "\u4e11", "\u5bc5", "\u536f", "\u8fb0", "\u5df3", "\u5348", "\u672a", "\u7533", "\u9149", "\u620c", "\u4ea5")
    def cz(yr: BigInt, animal: ArrayBuffer[String], yinYang: ArrayBuffer[String], element: ArrayBuffer[String], sc: ArrayBuffer[String], bc: ArrayBuffer[String]): Info = {
      var y = yr - BigInt(4)
      val stem = y % BigInt(10)
      val branch = y % BigInt(12)
      val sb: String = sc((stem).toInt) + bc((branch).toInt)
      return Info((animal((branch).toInt)).toString, (yinYang((stem % BigInt(2)).toInt)).toString, (element((stem / BigInt(2)).toInt)).toString, sb, y % BigInt(60) + BigInt(1))
    }
    for (yr <- ArrayBuffer(BigInt(1935), BigInt(1938), BigInt(1968), BigInt(1972), BigInt(1976))) {
      val r: Info = cz(yr.asInstanceOf[BigInt], animal, yinYang, element, stemChArr, branchChArr)
      println(String.valueOf(yr) + ": " + r.element + " " + r.animal + ", " + r.yinYang + ", Cycle year " + String.valueOf(r.cycle) + " " + r.stemBranch)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
