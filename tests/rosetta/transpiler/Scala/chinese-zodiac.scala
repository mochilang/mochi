// Generated by Mochi v0.10.41 on 2025-07-26 17:29:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  case class Info(var animal: String, var yinYang: String, var element: String, var stemBranch: String, var cycle: BigInt)
  
  def cz(yr: BigInt, animal: ArrayBuffer[String], yinYang: ArrayBuffer[String], element: ArrayBuffer[String], sc: ArrayBuffer[String], bc: ArrayBuffer[String]): Info = {
    var y = yr - BigInt(4)
    val stem = y % BigInt(10)
    val branch = y % BigInt(12)
    val sb: BigInt = sc((stem).toInt) + bc((branch).toInt)
    return Info((animal((branch).toInt)).toString, (yinYang((stem % BigInt(2)).toInt)).toString, (element((stem / BigInt(2)).toInt)).toString, sb, y % BigInt(60) + BigInt(1))
  }
  
  val animal: ArrayBuffer[String] = ArrayBuffer("Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig")
  
  val yinYang: ArrayBuffer[String] = ArrayBuffer("Yang", "Yin")
  
  val element: ArrayBuffer[String] = ArrayBuffer("Wood", "Fire", "Earth", "Metal", "Water")
  
  val stemChArr: ArrayBuffer[String] = ArrayBuffer("\u7532", "\u4e59", "\u4e19", "\u4e01", "\u620a", "\u5df1", "\u5e9a", "\u8f9b", "\u58ec", "\u7678")
  
  val branchChArr: ArrayBuffer[String] = ArrayBuffer("\u5b50", "\u4e11", "\u5bc5", "\u536f", "\u8fb0", "\u5df3", "\u5348", "\u672a", "\u7533", "\u9149", "\u620c", "\u4ea5")
  
  def main(args: Array[String]): Unit = {
    for (yr <- ArrayBuffer(BigInt(1935), BigInt(1938), BigInt(1968), BigInt(1972), BigInt(1976))) {
      val r: Info = cz(yr.asInstanceOf[BigInt], animal, yinYang, element, stemChArr, branchChArr)
      println(String.valueOf(yr) + ": " + r.element + " " + r.animal + ", " + r.yinYang + ", Cycle year " + String.valueOf(r.cycle) + " " + r.stemBranch)
    }
  }
}
