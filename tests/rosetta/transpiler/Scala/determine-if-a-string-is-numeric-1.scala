// Generated by Mochi v0.10.52 on 2025-08-01 19:05:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isNumeric(s: String): Boolean = {
      if (s == "NaN") {
        return true
      }
      var i: BigInt = BigInt(0)
      if ((s).size == BigInt(0)) {
        return false
      }
      if ((s.slice((BigInt(0)).toInt, (BigInt(0)).toInt + 1) == "+" || s.slice((BigInt(0)).toInt, (BigInt(0)).toInt + 1) == "-").asInstanceOf[Boolean]) {
        if ((s).size == BigInt(1)) {
          return false
        }
        i = BigInt(1)
      }
      var digits: Boolean = false
      var dot: Boolean = false
      while (i < (s).size) {
        val ch = s.slice((i).toInt, (i).toInt + 1)
        if ((ch >= "0" && ch <= "9").asInstanceOf[Boolean]) {
          digits = true
          i = i + BigInt(1)
        } else {
          if ((ch == "." && dot == false).asInstanceOf[Boolean]) {
            dot = true
            i = i + BigInt(1)
          } else {
            if (((ch == "e" || ch == "E").asInstanceOf[Boolean] && digits).asInstanceOf[Boolean]) {
              i = i + BigInt(1)
              if ((i < (s).size && (s.slice((i).toInt, (i).toInt + 1) == "+" || s.slice((i).toInt, (i).toInt + 1) == "-").asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
                i = i + BigInt(1)
              }
              var ed: Boolean = false
              while ((i < (s).size && (s.slice((i).toInt, (i).toInt + 1)).toString >= "0").asInstanceOf[Boolean] && (s.slice((i).toInt, (i).toInt + 1)).toString <= "9") {
                ed = true
                i = i + BigInt(1)
              }
              return (ed && i == (s).size).asInstanceOf[Boolean]
            } else {
              return false
            }
          }
        }
      }
      return digits
    }
    def main(): Any = {
      println("Are these strings numeric?")
      val strs: ArrayBuffer[String] = ArrayBuffer("1", "3.14", "-100", "1e2", "NaN", "rose")
      for (s <- strs) {
        println("  " + s + " -> " + String.valueOf(isNumeric(s)))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
