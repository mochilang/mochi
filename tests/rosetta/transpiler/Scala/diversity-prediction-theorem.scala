// Generated by Mochi v0.10.52 on 2025-08-01 19:07:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pow10(n: BigInt): Double = {
      var r: Double = 1.0
      var i: BigInt = BigInt(0)
      while (i < n) {
        r = r * 10.0
        i = i + BigInt(1)
      }
      return r
    }
    def formatFloat(f: Double, prec: BigInt): String = {
      val scale: Double = pow10(prec)
      val scaled: Double = f * scale + 0.5
      var n: Int = scaled.toInt
      var digits: String = String.valueOf(n)
      while ((digits).size <= prec) {
        digits = "0" + digits
      }
      val intPart: String = digits.slice((BigInt(0)).toInt, ((digits).size - prec).toInt)
      val fracPart: String = digits.slice(((digits).size - prec).toInt, ((digits).size).toInt)
      return intPart + "." + fracPart
    }
    def padLeft(s: String, w: BigInt): String = {
      var res: String = ""
      var n: BigInt = w - (s).size
      while (n > BigInt(0)) {
        res = res + " "
        n = n - BigInt(1)
      }
      return (res + s).toString
    }
    def averageSquareDiff(f: Double, preds: ArrayBuffer[Double]): Double = {
      var av: Double = 0.0
      var i: BigInt = BigInt(0)
      while (i < (preds).size) {
        av = av + ((preds((i).toInt) - f) * (preds((i).toInt) - f)).toString.toDouble
        i = i + BigInt(1)
      }
      av = av / ((preds).size).toString.toDouble
      return av
    }
    def diversityTheorem(truth: Double, preds: ArrayBuffer[Double]): ArrayBuffer[Double] = {
      var av: Double = 0.0
      var i: BigInt = BigInt(0)
      while (i < (preds).size) {
        av = av + preds((i).toInt)
        i = i + BigInt(1)
      }
      av = av / ((preds).size).toString.toDouble
      val avErr: Double = averageSquareDiff(truth, preds)
      val crowdErr: Double = (truth - av).toString.toDouble * (truth - av).toString.toDouble
      val div: Double = averageSquareDiff(av, preds)
      return (ArrayBuffer(avErr, crowdErr, div)).asInstanceOf[ArrayBuffer[Double]]
    }
    def main(): Any = {
      val predsArray: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(48.0, 47.0, 51.0), ArrayBuffer(48.0, 47.0, 51.0, 42.0))
      val truth: Double = 49.0
      var i: BigInt = BigInt(0)
      while (i < (predsArray).size) {
        val preds: ArrayBuffer[Double] = predsArray((i).toInt)
        val res: ArrayBuffer[Double] = diversityTheorem(truth, preds)
        println("Average-error : " + padLeft(formatFloat(res((BigInt(0)).toInt), BigInt(3)), BigInt(6)))
        println("Crowd-error   : " + padLeft(formatFloat(res((BigInt(1)).toInt), BigInt(3)), BigInt(6)))
        println("Diversity     : " + padLeft(formatFloat(res((BigInt(2)).toInt), BigInt(3)), BigInt(6)))
        println("")
        i = i + BigInt(1)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
