// Generated by Mochi v0.10.52 on 2025-08-01 19:21:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split(s: String, sep: String): ArrayBuffer[String] = {
  var out: ArrayBuffer[String] = ArrayBuffer()
  var cur: String = ""
  var i: BigInt = BigInt(0)
  while (i < (s).size) {
    if ((i + (sep).size <= (s).size && s.slice((i).toInt, (i + (sep).size).toInt) == sep).asInstanceOf[Boolean]) {
      out = out :+ cur
      cur = ""
      i = i + (sep).size
    } else {
      cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
      i = i + BigInt(1)
    }
  }
  out = out :+ cur
  return out
}

def join(xs: ArrayBuffer[String], sep: String): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    if (i > BigInt(0)) {
      res = (res + sep).toString
    }
    res = (res + xs((i).toInt)).toString
    i = i + BigInt(1)
  }
  return res
}

def trimLeftSpaces(s: String): String = {
  var i: BigInt = BigInt(0)
  while (i < (s).size && s.slice((i).toInt, (i + BigInt(1)).toInt) == " ") {
    i = i + BigInt(1)
  }
  return s.slice((i).toInt, ((s).size).toInt)
}

def makeIndent(outline: String, tab: BigInt): ArrayBuffer[scala.collection.mutable.Map[String,Any]] = {
  val lines = ArrayBuffer(outline.split("\n"): _*)
  var nodes: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = ArrayBuffer()
  for (line <- lines) {
    val line2: String = trimLeftSpaces(line)
    val level: BigInt = ((line).size - (line2).size) / tab
    nodes = nodes :+ (scala.collection.mutable.Map("level" -> (level), "name" -> (line2))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  }
  return nodes
}

def toNest(nodes: ArrayBuffer[scala.collection.mutable.Map[String,Any]], start: BigInt, level: BigInt, n: scala.collection.mutable.Map[String,Any]): Any = {
  if (level == BigInt(0)) {
    n.update("name", nodes((BigInt(0)).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]("name"))
  }
  var i: BigInt = start + BigInt(1)
  while (i < (nodes).size) {
    val node: scala.collection.mutable.Map[String,Any] = nodes((i).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]
    val lev: BigInt = BigInt((node("level")).toInt)
    if (lev == level + BigInt(1)) {
      var child: Map[String,Any] = scala.collection.mutable.Map("name" -> (node("name")), "children" -> (ArrayBuffer()))
      toNest(nodes, i, level + BigInt(1), child.asInstanceOf[scala.collection.mutable.Map[String,Any]])
      var cs: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
      cs = cs :+ child.asInstanceOf[Any]
      n.update("children", cs)
    } else {
      if (lev <= level) {
        return
      }
    }
    i = i + BigInt(1)
  }
  return null
}

def countLeaves(n: scala.collection.mutable.Map[String,Any]): BigInt = {
  val kids: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
  if ((kids).size == BigInt(0)) {
    return BigInt(1)
  }
  var total: BigInt = BigInt(0)
  for (k <- kids) {
    total = total + countLeaves(k.asInstanceOf[scala.collection.mutable.Map[String,Any]])
  }
  return total
}

def nodesByDepth(root: scala.collection.mutable.Map[String,Any], depth: BigInt): ArrayBuffer[ArrayBuffer[scala.collection.mutable.Map[String,Any]]] = {
  var levels: ArrayBuffer[ArrayBuffer[scala.collection.mutable.Map[String,Any]]] = ArrayBuffer()
  var current: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = ArrayBuffer(root)
  var d: BigInt = BigInt(0)
  while (d < depth) {
    levels = levels :+ current
    var next: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = ArrayBuffer()
    for (n <- current) {
      val kids: ArrayBuffer[Any] = (n("children")).asInstanceOf[ArrayBuffer[Any]]
      for (k <- kids) {
        next = next :+ k.asInstanceOf[scala.collection.mutable.Map[String,Any]]
      }
    }
    current = next
    d = d + BigInt(1)
  }
  return levels
}

def toMarkup(n: scala.collection.mutable.Map[String,Any], cols: ArrayBuffer[String], depth: BigInt): String = {
  var lines: ArrayBuffer[String] = ArrayBuffer()
  lines = lines :+ "{| class=\"wikitable\" style=\"text-align: center;\""
  val l1: String = "|-"
  lines = lines :+ l1
  val span: BigInt = countLeaves(n)
  lines = lines :+ "| style=\"background: " + cols((BigInt(0)).toInt) + " \" colSpan=" + String.valueOf(span) + " | " + (n("name")).toString
  lines = lines :+ l1
  val lvls: ArrayBuffer[ArrayBuffer[scala.collection.mutable.Map[String,Any]]] = nodesByDepth(n, depth)
  var lvl: BigInt = BigInt(1)
  while (lvl < depth) {
    val nodes: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = lvls((lvl).toInt)
    if ((nodes).size == BigInt(0)) {
      lines = lines :+ "|  |"
    } else {
      var idx: BigInt = BigInt(0)
      while (idx < (nodes).size) {
        val node: scala.collection.mutable.Map[String,Any] = nodes((idx).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]
        span = countLeaves(node)
        var col: BigInt = lvl
        if (lvl == BigInt(1)) {
          col = idx + BigInt(1)
        }
        if (col >= (cols).size) {
          col = (cols).size - BigInt(1).toInt
        }
        val cell: String = "| style=\"background: " + cols((col).toInt) + " \" colspan=" + String.valueOf(span) + " | " + (node("name")).toString
        lines = lines :+ cell
        idx = idx + BigInt(1)
      }
    }
    if (lvl < depth - BigInt(1)) {
      lines = lines :+ l1
    }
    lvl = lvl + BigInt(1)
  }
  lines = lines :+ "|}"
  return join(lines, "\n")
}

def main(): Any = {
  val outline: String = "Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n" + "        measuring the indent of each line,\n" + "        translating the indentation to a nested structure,\n" + "        and padding the tree to even depth.\n" + "    count the leaves descending from each node,\n" + "        defining the width of a leaf as 1,\n" + "        and the width of a parent node as a sum.\n" + "            (The sum of the widths of its children)\n" + "    and write out a table with 'colspan' values\n" + "        either as a wiki table,\n" + "        or as HTML."
  val yellow: String = "#ffffe6;"
  val orange: String = "#ffebd2;"
  val green: String = "#f0fff0;"
  val blue: String = "#e6ffff;"
  val pink: String = "#ffeeff;"
  val cols: ArrayBuffer[String] = ArrayBuffer(yellow, orange, green, blue, pink)
  val nodes: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = makeIndent(outline, BigInt(4))
  var n: Map[String,Any] = scala.collection.mutable.Map("name" -> (""), "children" -> (ArrayBuffer()))
  toNest(nodes, BigInt(0), BigInt(0), n.asInstanceOf[scala.collection.mutable.Map[String,Any]])
  println(toMarkup(n.asInstanceOf[scala.collection.mutable.Map[String,Any]], cols, BigInt(4)))
  println("\n")
  val outline2: String = "Display an outline as a nested table.\n" + "    Parse the outline to a tree,\n" + "        measuring the indent of each line,\n" + "        translating the indentation to a nested structure,\n" + "        and padding the tree to even depth.\n" + "    count the leaves descending from each node,\n" + "        defining the width of a leaf as 1,\n" + "        and the width of a parent node as a sum.\n" + "            (The sum of the widths of its children)\n" + "            Propagating the sums upward as necessary.\n" + "    and write out a table with 'colspan' values\n" + "        either as a wiki table,\n" + "        or as HTML.\n" + "    Optionally add color to the nodes."
  val cols2: ArrayBuffer[String] = ArrayBuffer(blue, yellow, orange, green, pink)
  val nodes2: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = makeIndent(outline2, BigInt(4))
  var n2: Map[String,Any] = scala.collection.mutable.Map("name" -> (""), "children" -> (ArrayBuffer()))
  toNest(nodes2, BigInt(0), BigInt(0), n2.asInstanceOf[scala.collection.mutable.Map[String,Any]])
  println(toMarkup(n2.asInstanceOf[scala.collection.mutable.Map[String,Any]], cols2, BigInt(4)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
