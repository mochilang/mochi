// Generated by Mochi v0.10.40 on 2025-07-26 04:50:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Pixel(var R: Int, var G: Int, var B: Int)

case class Bitmap(var cols: Int, var rows: Int, var px: ArrayBuffer[ArrayBuffer[Pixel]])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pixelFromRgb(c: Int): Pixel = {
      val r = Math.floorMod((c / 65536).asInstanceOf[Int], 256)
      val g = Math.floorMod((c / 256).asInstanceOf[Int], 256)
      val b = Math.floorMod(c, 256)
      return Pixel(r, g, b)
    }
    def rgbFromPixel(p: Pixel): Int = {
      return ((p.R * 65536).toString.toDouble + (p.G * 256).toString.toDouble + p.B).asInstanceOf[Int]
    }
    def NewBitmap(x: Int, y: Int): Bitmap = {
      var data: ArrayBuffer[ArrayBuffer[Pixel]] = ArrayBuffer()
      var row: Int = 0
      while (row < y) {
        var r: ArrayBuffer[Pixel] = ArrayBuffer()
        var col: Int = 0
        while (col < x) {
          r = r :+ Pixel(0, 0, 0)
          col = (col + 1).asInstanceOf[Int]
        }
        data = data :+ r
        row = (row + 1).asInstanceOf[Int]
      }
      return Bitmap(x, y, data)
    }
    def FillRgb(b: Bitmap, c: Int): Any = {
      var y: Int = 0
      val p: Pixel = pixelFromRgb(c)
      while (y < b.rows) {
        var x: Int = 0
        while (x < b.cols) {
          var px: ArrayBuffer[ArrayBuffer[Pixel]] = b.px
          var row: ArrayBuffer[Pixel] = px(y)
          row(x) = p
          px(y) = row
          b.px = px
          x = (x + 1).asInstanceOf[Int]
        }
        y = (y + 1).asInstanceOf[Int]
      }
    }
    def SetPxRgb(b: Bitmap, x: Int, y: Int, c: Int): Boolean = {
      if ((((x < 0 || x >= b.cols).asInstanceOf[Boolean] || y < 0).asInstanceOf[Boolean] || y >= b.rows).asInstanceOf[Boolean]) {
        return false
      }
      var px: ArrayBuffer[ArrayBuffer[Pixel]] = b.px
      var row: ArrayBuffer[Pixel] = px(y)
      row(x) = pixelFromRgb(c)
      px(y) = row
      b.px = px
      return true
    }
    def nextRand(seed: Int): Int = {
      return (Math.floorMod(seed * 1664525 + 1013904223, 2147483648L)).asInstanceOf[Int]
    }
    def main(): Any = {
      var bm: Bitmap = NewBitmap(400, 300)
      FillRgb(bm, 12615744)
      var seed: Int = _now()
      var i: Int = 0
      while (i < 2000) {
        seed = nextRand(seed)
        val x = Math.floorMod(seed, 400)
        seed = nextRand(seed)
        val y = Math.floorMod(seed, 300)
        SetPxRgb(bm, x, y, 8405024)
        i = (i + 1).asInstanceOf[Int]
      }
      var x: Int = 0
      while (x < 400) {
        var y: Int = 240
        while (y < 245) {
          SetPxRgb(bm, x, y, 8405024)
          y = (y + 1).asInstanceOf[Int]
        }
        y = 260
        while (y < 265) {
          SetPxRgb(bm, x, y, 8405024)
          y = (y + 1).asInstanceOf[Int]
        }
        x = (x + 1).asInstanceOf[Int]
      }
      var y: Int = 0
      while (y < 300) {
        var x: Int = 80
        while (x < 85) {
          SetPxRgb(bm, x, y, 8405024)
          x = (x + 1).asInstanceOf[Int]
        }
        x = 95
        while (x < 100) {
          SetPxRgb(bm, x, y, 8405024)
          x = (x + 1).asInstanceOf[Int]
        }
        y = (y + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
