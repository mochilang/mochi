// Generated by Mochi v0.10.40 on 2025-07-26 04:42:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def indexOf(s: String, ch: String): Int = {
  var i: Int = 0
  while (i < (s).size) {
    if (s.slice(i, i + 1) == ch) {
      return i
    }
    i = (i + 1).asInstanceOf[Int]
  }
  return 0 - 1
}

def shuffle(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var arr: ArrayBuffer[String] = xs
  var i: Int = (arr).size - 1
  while (i > 0) {
    val j = Math.floorMod(_now(), i + 1)
    val tmp: String = arr(i)
    arr(i) = arr(j)
    arr(j) = tmp
    i = (i - 1).asInstanceOf[Int]
  }
  return arr
}

def main(): Any = {
  println("Cows and Bulls")
  println("Guess four digit number of unique digits in the range 1 to 9.")
  println("A correct digit but not in the correct place is a cow.")
  println("A correct digit in the correct place is a bull.")
  var digits: ArrayBuffer[String] = ArrayBuffer("1", "2", "3", "4", "5", "6", "7", "8", "9")
  digits = shuffle(digits)
  var pat: Int = digits(0) + digits(1) + digits(2) + digits(3)
  val valid: String = "123456789"
  val _br2 = new Breaks
  val _ct2 = new Breaks
  _br2.breakable {
    while (true) {
      _ct2.breakable {
        println("Guess: ")
        val guess = Option(scala.io.StdIn.readLine()).getOrElse("q")
        if ((guess).size != 4) {
          println("Please guess a four digit number.")
          _ct2.break()
        }
        var cows: Int = 0
        var bulls: Int = 0
        var seen: String = ""
        var i: Int = 0
        var malformed: Boolean = false
        val _br3 = new Breaks
        _br3.breakable {
          while (i < 4) {
            val cg: String = guess.slice(i, i + 1)
            if (indexOf(seen, cg) != 0 - 1) {
              println("Repeated digit: " + cg)
              malformed = true
              _br3.break()
            }
            seen = (seen + cg).toString
            val pos: Int = indexOf(pat.toString, cg)
            if (pos == 0 - 1) {
              if (indexOf(valid, cg) == 0 - 1) {
                println("Invalid digit: " + cg)
                malformed = true
                _br3.break()
              }
            } else {
              if (pos == i) {
                bulls = (bulls + 1).asInstanceOf[Int]
              } else {
                cows = (cows + 1).asInstanceOf[Int]
              }
            }
            i = (i + 1).asInstanceOf[Int]
          }
        }
        if (malformed) {
          _ct2.break()
        }
        println("Cows: " + String.valueOf(cows) + ", bulls: " + String.valueOf(bulls))
        if (bulls == 4) {
          println("You got it.")
          _br2.break()
        }
      }
    }
  }
}

def main(args: Array[String]): Unit = {
  main()
}
}
