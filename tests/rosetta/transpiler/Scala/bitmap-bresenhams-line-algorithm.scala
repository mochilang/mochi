// Generated by Mochi v0.10.40 on 2025-07-26 04:50:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: Int, var y: Int)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def absi(x: Int): Int = {
      if (x < 0) {
        return (0 - x).asInstanceOf[Int]
      }
      return x
    }
    def bresenham(_x0: Int, _y0: Int, x1: Int, y1: Int): ArrayBuffer[Point] = {
      var x0: Int = _x0
      var y0: Int = _y0
      var dx: Int = absi((x1 - x0).asInstanceOf[Int])
      var dy: Int = absi((y1 - y0).asInstanceOf[Int])
      var sx: Int = 0 - 1
      if (x0 < x1) {
        sx = 1
      }
      var sy: Int = 0 - 1
      if (y0 < y1) {
        sy = 1
      }
      var err = dx - dy
      var pts: ArrayBuffer[Point] = ArrayBuffer()
      val _br0 = new Breaks
      _br0.breakable {
        while (true) {
          pts = pts :+ Point(x0, y0)
          if ((x0 == x1 && y0 == y1).asInstanceOf[Boolean]) {
            _br0.break()
          }
          var e2 = 2 * err
          if (e2 > (0 - dy).asInstanceOf[Int]) {
            err = (err - dy).asInstanceOf[Int]
            x0 = (x0 + sx).asInstanceOf[Int]
          }
          if (e2 < dx) {
            err = (err + dx).asInstanceOf[Int]
            y0 = (y0 + sy).asInstanceOf[Int]
          }
        }
      }
      return pts
    }
    def main(): Any = {
      val pts: ArrayBuffer[Point] = bresenham(0, 0, 6, 4)
      var i: Int = 0
      while (i < (pts).size) {
        val p: Point = pts(i)
        println("(" + String.valueOf(p.x) + "," + String.valueOf(p.y) + ")")
        i = (i + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
