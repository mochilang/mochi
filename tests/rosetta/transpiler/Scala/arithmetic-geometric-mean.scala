// Generated by Mochi v0.10.39 on 2025-07-25 00:49:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def abs(x: Double): Double = {
    if (x < 0.0) {
      return (0 - x).asInstanceOf[Double]
    }
    return x
  }
  
  def sqrtApprox(x: Double): Double = {
    var guess: Double = x
    var i: Int = 0
    while (i < 20) {
      guess = (guess + x / guess) / 2.0
      i = (i + 1).asInstanceOf[Int]
    }
    return guess
  }
  
  def agm(_a: Double, _g: Double): Double = {
    var a: Double = _a
    var g: Double = _g
    val eps: Double = 0.00000000000001
    while (abs((a - g).asInstanceOf[Double]) > abs(a) * eps) {
      val newA: Double = (a + g) / 2.0
      val newG: Double = sqrtApprox((a * g).asInstanceOf[Double])
      a = newA
      g = newG
    }
    return a
  }
  
  def main() = {
    println(String.valueOf(agm(1.0, 1.0 / sqrtApprox(2.0))))
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
