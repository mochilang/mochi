// Generated by Mochi v0.10.39 on 2025-07-25 01:20:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def mean(v: ArrayBuffer[Double]): Map[String,Any] = {
    if ((v).size == 0) {
      return (Map("ok" -> (false))).asInstanceOf[Map[String,Any]]
    }
    var sum: Double = 0.0
    var i: Int = 0
    while (i < (v).size) {
      sum = (sum + v(i)).asInstanceOf[Double]
      i = (i + 1).asInstanceOf[Int]
    }
    return Map("ok" -> (true), "mean" -> (sum / ((v).size).toString.toDouble))
  }
  
  def main() = {
    val sets = ArrayBuffer(ArrayBuffer(), ArrayBuffer(3.0, 1.0, 4.0, 1.0, 5.0, 9.0), ArrayBuffer(100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, 0 - 100000000000000000000.0), ArrayBuffer(10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11), ArrayBuffer(10.0, 20.0, 30.0, 40.0, 50.0, 0 - 100.0, 4.7, 0 - 1100.0))
    for (v <- sets) {
      println("Vector: " + String.valueOf(v))
      val r: Map[String,Any] = mean(v.asInstanceOf[ArrayBuffer[Double]])
      if ((r.getOrElse("ok", null.asInstanceOf[Any])).asInstanceOf[Boolean]) {
        println("Mean of " + String.valueOf((v).size) + " numbers is " + String.valueOf(r.getOrElse("mean", null.asInstanceOf[Any])))
      } else {
        println("Mean undefined")
      }
      println("")
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
