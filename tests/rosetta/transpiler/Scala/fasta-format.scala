// Generated by Mochi v0.10.52 on 2025-08-02 02:08:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def splitLines(s: String): ArrayBuffer[String] = {
  var lines: ArrayBuffer[String] = ArrayBuffer()
  var start: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < (s).size) {
    if (s.slice((i).toInt, (i + BigInt(1)).toInt) == "\n") {
      lines = lines :+ s.slice((start).toInt, (i).toInt)
      i = i + BigInt(1)
      start = i
    } else {
      i = i + BigInt(1)
    }
  }
  lines = lines :+ s.slice((start).toInt, ((s).size).toInt)
  return lines
}

def parseFasta(text: String): ArrayBuffer[String] = {
  var key: String = ""
  var `val`: String = ""
  var out: ArrayBuffer[String] = ArrayBuffer()
  val _ct1 = new Breaks
  for (line <- splitLines(text)) {
    _ct1.breakable {
      if (line == "") {
        _ct1.break()
      }
      if (line.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == ">") {
        if (key != "") {
          out = out :+ key + ": " + `val`
        }
        var hdr: String = line.slice((BigInt(1)).toInt, ((line).size).toInt)
        var idx: BigInt = BigInt(0)
        while (idx < (hdr).size && hdr.slice((idx).toInt, (idx + BigInt(1)).toInt) != " ") {
          idx = idx + BigInt(1)
        }
        key = hdr.slice((BigInt(0)).toInt, (idx).toInt)
        `val` = ""
      } else {
        if (key == "") {
          println("missing header")
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
        }
        `val` = (`val` + line).toString
      }
    }
  }
  if (key != "") {
    out = out :+ key + ": " + `val`
  }
  return out
}

def main(): Any = {
  val res: ArrayBuffer[String] = parseFasta(FASTA)
  for (line <- res) {
    println(line)
  }
}

val FASTA: String = ">Rosetta_Example_1\n" + "THERECANBENOSPACE\n" + ">Rosetta_Example_2\n" + "THERECANBESEVERAL\n" + "LINESBUTTHEYALLMUST\n" + "BECONCATENATED"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
