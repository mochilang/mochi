// Generated by Mochi v0.10.40 on 2025-07-25 20:24:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  def indexOf(s: String, ch: String): Int = {
    var i: Int = 0
    while (i < (s).size) {
      if (s.slice(i, i + 1) == ch) {
        return i
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return 0 - 1
  }
  
  def parseIntStr(str: String): Int = {
    var i: Int = 0
    var neg: Boolean = false
    if (((str).size > 0 && str.slice(0, 0 + 1) == "-").asInstanceOf[Boolean]) {
      neg = true
      i = 1
    }
    var n: Int = 0
    val digits: Map[String,Int] = Map("0" -> (0), "1" -> (1), "2" -> (2), "3" -> (3), "4" -> (4), "5" -> (5), "6" -> (6), "7" -> (7), "8" -> (8), "9" -> (9))
    while (i < (str).size) {
      n = (n * 10 + digits.getOrElse(str.slice(i, i + 1), null.asInstanceOf[Int])).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    if (neg) {
      n = (0 - n).asInstanceOf[Int]
    }
    return n
  }
  
  def ord(ch: String): Int = {
    val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    val lower: String = "abcdefghijklmnopqrstuvwxyz"
    var idx: Int = indexOf(upper, ch)
    if (idx >= 0) {
      return (65 + idx).asInstanceOf[Int]
    }
    idx = indexOf(lower, ch)
    if (idx >= 0) {
      return (97 + idx).asInstanceOf[Int]
    }
    if ((ch >= "0" && ch <= "9").asInstanceOf[Boolean]) {
      return (48 + parseIntStr(ch)).asInstanceOf[Int]
    }
    if (ch == "+") {
      return 43
    }
    if (ch == "/") {
      return 47
    }
    if (ch == " ") {
      return 32
    }
    if (ch == "=") {
      return 61
    }
    return 0
  }
  
  def chr(n: Int): String = {
    val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    val lower: String = "abcdefghijklmnopqrstuvwxyz"
    if ((n >= 65 && n < 91).asInstanceOf[Boolean]) {
      return upper.slice(n - 65, n - 64)
    }
    if ((n >= 97 && n < 123).asInstanceOf[Boolean]) {
      return lower.slice(n - 97, n - 96)
    }
    if ((n >= 48 && n < 58).asInstanceOf[Boolean]) {
      val digits: String = "0123456789"
      return digits.slice(n - 48, n - 47)
    }
    if (n == 43) {
      return "+"
    }
    if (n == 47) {
      return "/"
    }
    if (n == 32) {
      return " "
    }
    if (n == 61) {
      return "="
    }
    return "?"
  }
  
  def toBinary(n: Int, bits: Int): String = {
    var b: String = ""
    var `val`: Int = n
    var i: Int = 0
    while (i < bits) {
      b = (String.valueOf(Math.floorMod(`val`, 2)) + b).toString
      `val` = (`val` / 2).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    return b
  }
  
  def binToInt(bits: String): Int = {
    var n: Int = 0
    var i: Int = 0
    while (i < (bits).size) {
      n = (n * 2 + parseIntStr(bits.slice(i, i + 1))).asInstanceOf[Int]
      i = (i + 1).asInstanceOf[Int]
    }
    return n
  }
  
  def base64Encode(text: String): String = {
    val alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    var bin: String = ""
    for (ch <- text) {
      bin = (bin + toBinary(ord(ch.toString), 8)).toString
    }
    while (Math.floorMod((bin).size, 6) != 0) {
      bin = bin + "0"
    }
    var out: String = ""
    var i: Int = 0
    while (i < (bin).size) {
      val chunk: String = bin.slice(i, i + 6)
      val `val`: Int = binToInt(chunk)
      out = out + alphabet.slice(`val`, `val` + 1)
      i = (i + 6).asInstanceOf[Int]
    }
    val pad = Math.floorMod(3 - Math.floorMod((text).size, 3), 3)
    if (pad == 1) {
      out = out.slice(0, (out).size - 1) + "="
    }
    if (pad == 2) {
      out = out.slice(0, (out).size - 2) + "=="
    }
    return out
  }
  
  def base64Decode(enc: String): String = {
    val alphabet: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    var bin: String = ""
    var i: Int = 0
    val _br7 = new Breaks
    _br7.breakable {
      while (i < (enc).size) {
        val ch = enc.slice(i, i + 1)
        if (ch == "=") {
          _br7.break()
        }
        val idx: Int = indexOf(alphabet, ch)
        bin = (bin + toBinary(idx, 6)).toString
        i = (i + 1).asInstanceOf[Int]
      }
    }
    var out: String = ""
    i = 0
    while ((i + 8).asInstanceOf[Int] <= (bin).size) {
      val chunk: String = bin.slice(i, i + 8)
      val `val`: Int = binToInt(chunk)
      out = (out + chr(`val`)).toString
      i = (i + 8).asInstanceOf[Int]
    }
    return out
  }
  
  val msg: String = "Rosetta Code Base64 decode data task"
  
  val enc: String = base64Encode(msg)
  
  val dec: String = base64Decode(enc)
  
  def main(args: Array[String]): Unit = {
    println("Original : " + msg)
    println("\nEncoded  : " + enc)
    println("\nDecoded  : " + dec)
  }
}
