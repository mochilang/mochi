// Generated by Mochi v0.10.52 on 2025-08-02 02:07:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def powf(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = (result * base).toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var g: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    g = (g + x / g) / 2.0
    i = i + BigInt(1)
  }
  return g
}

def modPow(base: BigInt, exp: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = BigInt(1) % mod
  var b: BigInt = base % mod
  var e: BigInt = exp
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = result * b % mod
    }
    b = b * b % mod
    e = e / BigInt(2)
  }
  return result
}

def mtest(m: BigInt): Any = {
  if (m < BigInt(4)) {
    println(String.valueOf(m) + " < 4.  M" + String.valueOf(m) + " not tested.")
    return
  }
  val flimit: Double = sqrtApprox(powf(2.0, m) - 1.0)
  var qlast: BigInt = BigInt(0)
  if (flimit < qlimit.toString.toDouble) {
    qlast = flimit.toInt
  } else {
    qlast = qlimit
  }
  var composite: ArrayBuffer[Boolean] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i <= qlast) {
    composite = composite :+ false
    i = i + BigInt(1)
  }
  val sq: Int = sqrtApprox(qlast.toString.toDouble).toInt
  var q: BigInt = BigInt(3)
  val _br4 = new Breaks
  _br4.breakable {
    while (true) {
      if (q <= sq) {
        var j: BigInt = q * q
        while (j <= qlast) {
          composite((j).toInt) = true
          j = j + q
        }
      }
      val q8: BigInt = q % BigInt(8)
      if (((q8 == BigInt(1) || q8 == BigInt(7)).asInstanceOf[Boolean] && modPow(BigInt(2), m, q) == BigInt(1)).asInstanceOf[Boolean]) {
        println("M" + String.valueOf(m) + " has factor " + String.valueOf(q))
        return
      }
      val _br6 = new Breaks
      _br6.breakable {
        while (true) {
          q = q + BigInt(2)
          if (q > qlast) {
            println("No factors of M" + String.valueOf(m) + " found.")
            return
          }
          if ((!composite((q).toInt)).asInstanceOf[Boolean]) {
            _br6.break()
          }
        }
      }
    }
  }
  return null
}

def main(): Any = {
  mtest(BigInt(31))
  mtest(BigInt(67))
}

val qlimit: BigInt = BigInt(50000)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
