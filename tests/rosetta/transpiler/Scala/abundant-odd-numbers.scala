// Generated by Mochi v0.10.40 on 2025-07-25 19:20:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def divisors(n: Int): ArrayBuffer[Int] = {
      var divs: ArrayBuffer[Int] = ArrayBuffer(1)
      var divs2: ArrayBuffer[Int] = ArrayBuffer()
      var i: Int = 2
      while ((i * i).asInstanceOf[Int] <= n) {
        if (Math.floorMod(n, i) == 0) {
          val j: Int = (n / i).asInstanceOf[Int]
          divs = divs :+ i
          if (i != j) {
            divs2 = divs2 :+ j
          }
        }
        i = (i + 1).asInstanceOf[Int]
      }
      var j: Int = (divs2).size - 1
      while (j >= 0) {
        divs = divs :+ divs2(j)
        j = (j - 1).asInstanceOf[Int]
      }
      return divs
    }
    def sum(xs: ArrayBuffer[Int]): Int = {
      var tot: Int = 0
      for (v <- xs) {
        tot = (tot + v).asInstanceOf[Int]
      }
      return tot
    }
    def sumStr(xs: ArrayBuffer[Int]): String = {
      var s: String = ""
      var i: Int = 0
      while (i < (xs).size) {
        s = s + String.valueOf(xs(i)) + " + "
        i = (i + 1).asInstanceOf[Int]
      }
      return s.substring(0, (s).size - 3)
    }
    def pad2(n: Int): String = {
      val s = String.valueOf(n)
      if ((s).size < 2) {
        return " " + s
      }
      return s
    }
    def pad5(n: Int): String = {
      var s = String.valueOf(n)
      while ((s).size < 5) {
        s = " " + s
      }
      return s
    }
    def abundantOdd(searchFrom: Int, countFrom: Int, countTo: Int, printOne: Boolean): Int = {
      var count: Int = countFrom
      var n: Int = searchFrom
      val _ct5 = new Breaks
      while (count < countTo) {
        _ct5.breakable {
          val divs: ArrayBuffer[Int] = divisors(n)
          val tot = divs.sum
          if (tot > n) {
            count = (count + 1).asInstanceOf[Int]
            if ((printOne && count < countTo).asInstanceOf[Boolean]) {
              n = (n + 2).asInstanceOf[Int]
              _ct5.break()
            }
            val s: String = sumStr(divs)
            if ((!printOne).asInstanceOf[Boolean]) {
              println(pad2(count) + ". " + pad5(n) + " < " + s + " = " + String.valueOf(tot))
            } else {
              println(String.valueOf(n) + " < " + s + " = " + String.valueOf(tot))
            }
          }
          n = (n + 2).asInstanceOf[Int]
        }
      }
      return n
    }
    def main(): Unit = {
      val max: Int = 25
      println("The first " + String.valueOf(max) + " abundant odd numbers are:")
      val n: Int = abundantOdd(1, 0, max, false)
      println("\nThe one thousandth abundant odd number is:")
      abundantOdd(n, max, 1000, true)
      println("\nThe first abundant odd number above one billion is:")
      abundantOdd(1000000001, 0, 1, true)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
