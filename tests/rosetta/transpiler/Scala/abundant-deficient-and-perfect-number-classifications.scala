// Generated by Mochi v0.10.40 on 2025-07-25 13:07:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def pfacSum(i: Int): Int = {
      var sum: Int = 0
      var p: Int = 1
      while (p <= (i / 2).asInstanceOf[Int]) {
        if (Math.floorMod(i, p) == 0) {
          sum = (sum + p).asInstanceOf[Int]
        }
        p = (p + 1).asInstanceOf[Int]
      }
      return sum
    }
    def main(): Unit = {
      var d: Int = 0
      var a: Int = 0
      var pnum: Int = 0
      var i: Int = 1
      while (i <= 20000) {
        val j: Int = pfacSum(i)
        if (j < i) {
          d = (d + 1).asInstanceOf[Int]
        }
        if (j == i) {
          pnum = (pnum + 1).asInstanceOf[Int]
        }
        if (j > i) {
          a = (a + 1).asInstanceOf[Int]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      println("There are " + String.valueOf(d) + " deficient numbers between 1 and 20000")
      println("There are " + String.valueOf(a) + " abundant numbers  between 1 and 20000")
      println("There are " + String.valueOf(pnum) + " perfect numbers between 1 and 20000")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
