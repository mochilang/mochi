// Generated by Mochi v0.10.40 on 2025-07-25 12:53:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def pfacSum(i: Int): Int = {
    var sum: Int = 0
    var p: Int = 1
    while (p <= (i / 2).asInstanceOf[Int]) {
      if (Math.floorMod(i, p) == 0) {
        sum = (sum + p).asInstanceOf[Int]
      }
      p = (p + 1).asInstanceOf[Int]
    }
    return sum
  }
  
  def main(): Unit = {
    var d: Int = 0
    var a: Int = 0
    var pnum: Int = 0
    var i: Int = 1
    while (i <= 20000) {
      val j: Int = pfacSum(i)
      if (j < i) {
        d = (d + 1).asInstanceOf[Int]
      }
      if (j == i) {
        pnum = (pnum + 1).asInstanceOf[Int]
      }
      if (j > i) {
        a = (a + 1).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    println("There are " + String.valueOf(d) + " deficient numbers between 1 and 20000")
    println("There are " + String.valueOf(a) + " abundant numbers  between 1 and 20000")
    println("There are " + String.valueOf(pnum) + " perfect numbers between 1 and 20000")
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
