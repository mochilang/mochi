// Generated by Mochi v0.10.39 on 2025-07-24 20:09:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  case class SomeStruct(var runtimeFields: Map[String,String])
  
  def main(): Unit = {
    var ss: SomeStruct = SomeStruct(Map())
    println("Create two fields at runtime: \n")
    var i: Int = 1
    while (i <= 2) {
      println("  Field #" + String.valueOf(i) + ":\n")
      println("       Enter name  : ")
      val name = Option(scala.io.StdIn.readLine()).getOrElse("q")
      println("       Enter value : ")
      val value = Option(scala.io.StdIn.readLine()).getOrElse("q")
      var fields: Map[String,String] = ss.runtimeFields
      fields(name) = value
      ss.runtimeFields = fields
      println("\n")
      i = (i + 1).asInstanceOf[Int]
    }
    while (true) {
      println("Which field do you want to inspect ? ")
      val name = Option(scala.io.StdIn.readLine()).getOrElse("q")
      if ((ss.runtimeFields.contains(name)).asInstanceOf[Boolean]) {
        val value: String = ss.runtimeFields(name)
        println("Its value is '" + value + "'")
        return
      } else {
        println("There is no field of that name, try again\n")
      }
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
