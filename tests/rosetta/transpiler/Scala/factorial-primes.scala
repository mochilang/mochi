// Generated by Mochi v0.10.52 on 2025-08-02 02:07:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def factorial(n: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(2)
  while (i <= n) {
    result = result * i
    i = i + BigInt(1)
  }
  return result
}

def isPrime(n: BigInt): Boolean = {
  if (n < BigInt(2)) {
    return false
  }
  if (n % BigInt(2) == BigInt(0)) {
    return n == BigInt(2)
  }
  var d: BigInt = BigInt(3)
  while (d * d <= n) {
    if (n % d == BigInt(0)) {
      return false
    }
    d = d + BigInt(2)
  }
  return true
}

def padLeft(s: String, w: BigInt): String = {
  var out: String = s
  while ((out).size < w) {
    out = " " + out
  }
  return out
}

def main(): Any = {
  var n: BigInt = BigInt(0)
  var count: BigInt = BigInt(0)
  while (count < BigInt(10)) {
    n = n + BigInt(1)
    val f: BigInt = factorial(n)
    if (isPrime(f - BigInt(1))) {
      count = count + BigInt(1)
      println(padLeft(String.valueOf(count), BigInt(2)) + ": " + padLeft(String.valueOf(n), BigInt(2)) + "! - 1 = " + String.valueOf(f - BigInt(1)))
    }
    if ((count < BigInt(10) && isPrime(f + BigInt(1))).asInstanceOf[Boolean]) {
      count = count + BigInt(1)
      println(padLeft(String.valueOf(count), BigInt(2)) + ": " + padLeft(String.valueOf(n), BigInt(2)) + "! + 1 = " + String.valueOf(f + BigInt(1)))
    }
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
