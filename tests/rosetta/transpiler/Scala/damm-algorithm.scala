// Generated by Mochi v0.10.42 on 2025-07-27 23:43:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def damm(s: String): Boolean = {
    val tbl: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(3), BigInt(1), BigInt(7), BigInt(5), BigInt(9), BigInt(8), BigInt(6), BigInt(4), BigInt(2)), ArrayBuffer(BigInt(7), BigInt(0), BigInt(9), BigInt(2), BigInt(1), BigInt(5), BigInt(4), BigInt(8), BigInt(6), BigInt(3)), ArrayBuffer(BigInt(4), BigInt(2), BigInt(0), BigInt(6), BigInt(8), BigInt(7), BigInt(1), BigInt(3), BigInt(5), BigInt(9)), ArrayBuffer(BigInt(1), BigInt(7), BigInt(5), BigInt(0), BigInt(9), BigInt(8), BigInt(3), BigInt(4), BigInt(2), BigInt(6)), ArrayBuffer(BigInt(6), BigInt(1), BigInt(2), BigInt(3), BigInt(0), BigInt(4), BigInt(5), BigInt(9), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(3), BigInt(6), BigInt(7), BigInt(4), BigInt(2), BigInt(0), BigInt(9), BigInt(5), BigInt(8), BigInt(1)), ArrayBuffer(BigInt(5), BigInt(8), BigInt(6), BigInt(9), BigInt(7), BigInt(2), BigInt(0), BigInt(1), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(8), BigInt(9), BigInt(4), BigInt(5), BigInt(3), BigInt(6), BigInt(2), BigInt(0), BigInt(1), BigInt(7)), ArrayBuffer(BigInt(9), BigInt(4), BigInt(3), BigInt(8), BigInt(6), BigInt(1), BigInt(7), BigInt(2), BigInt(0), BigInt(5)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(8), BigInt(1), BigInt(4), BigInt(3), BigInt(6), BigInt(7), BigInt(9), BigInt(0)))
    val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
    var interim: BigInt = BigInt(0)
    var i: BigInt = BigInt(0)
    while (i < (s).size) {
      val digit: BigInt = (digits.getOrElse(s.slice((i).toInt, (i + BigInt(1)).toInt), null.asInstanceOf[BigInt])).asInstanceOf[BigInt]
      val row: ArrayBuffer[BigInt] = tbl((interim).toInt)
      interim = row((digit).toInt)
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    return interim == BigInt(0)
  }
  
  def padLeft(_s: String, width: BigInt): String = {
    var s: String = _s
    while ((s).size < width) {
      s = " " + s
    }
    return s
  }
  
  def main(): Any = {
    for (s <- ArrayBuffer("5724", "5727", "112946", "112949")) {
      println(padLeft(s, BigInt(6)) + "  " + String.valueOf(damm(s)))
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
