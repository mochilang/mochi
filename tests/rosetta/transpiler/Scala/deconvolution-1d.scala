// Generated by Mochi v0.10.57 on 2025-08-04 21:27:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def listToStringInts(xs: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = 0
  while (i < BigInt(((xs).size))) {
    s = s + String.valueOf(xs((i.toInt).toInt).toInt)
    if (i < BigInt(((xs).size - 1.toInt))) {
      s = s + " "
    }
    i = i + 1
  }
  return s + "]"
}

def deconv(g: ArrayBuffer[Double], f: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var h: ArrayBuffer[Double] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[Double]]
  var n: BigInt = 0
  val hn: Int = (g).size - (f).size + 1.toInt
  while (n < BigInt(hn.toString.toDouble.toInt)) {
    var v: Double = g((n.toInt).toInt)
    var lower: BigInt = 0
    if (n >= BigInt(((f).size))) {
      lower = n - (f).size + 1
    }
    var i: BigInt = lower
    while (i < n) {
      v = v - h((i.toInt).toInt) * f(((n - i).toInt).toInt)
      i = i + 1
    }
    v = v / f((0.toInt).toInt)
    h = h :+ v
    n = n + 1
  }
  return h
}

def main(): Any = {
  val h: ArrayBuffer[Any] = ArrayBuffer(-8.0, -9.0, -3.0, -1.0, -6.0, 7.0)
  val f: ArrayBuffer[Any] = ArrayBuffer(-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0)
  val g: ArrayBuffer[Any] = ArrayBuffer(24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0)
  println(listToStringInts(h.asInstanceOf[ArrayBuffer[Double]]))
  println(listToStringInts(deconv(g.asInstanceOf[ArrayBuffer[Double]], f.asInstanceOf[ArrayBuffer[Double]])))
  println(listToStringInts(f.asInstanceOf[ArrayBuffer[Double]]))
  println(listToStringInts(deconv(g.asInstanceOf[ArrayBuffer[Double]], h.asInstanceOf[ArrayBuffer[Double]])))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
