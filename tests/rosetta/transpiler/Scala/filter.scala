// Generated by Mochi v0.10.56 on 2025-08-04 00:18:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def randPerm(n: BigInt): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < n) {
    arr = arr :+ i
    i = i + BigInt(1)
  }
  var idx: BigInt = n - BigInt(1)
  while (idx > BigInt(0)) {
    val j: BigInt = _now() % (idx + BigInt(1))
    val tmp: BigInt = arr((idx.toInt).toInt)
    arr((idx).toInt) = arr((j.toInt).toInt)
    arr((j).toInt) = tmp
    idx = idx - BigInt(1)
  }
  return arr
}

def even(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var r: ArrayBuffer[BigInt] = ArrayBuffer()
  for (x <- xs) {
    if (x % BigInt(2) == BigInt(0)) {
      r = r :+ x
    }
  }
  return r
}

def reduceToEven(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var last: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(((arr).size).toInt)) {
    val e: BigInt = arr((i.toInt).toInt)
    if (e % BigInt(2) == BigInt(0)) {
      arr((last).toInt) = e
      last = last + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr.slice((BigInt(0)).toInt, (last).toInt)
}

def listStr(xs: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt(((xs).size).toInt)) {
    s = s + String.valueOf(xs((i.toInt).toInt))
    if (i + BigInt(1) < BigInt(((xs).size).toInt)) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def main(): Any = {
  var a: ArrayBuffer[BigInt] = randPerm(BigInt(20))
  var cap_a: BigInt = BigInt(20)
  println(listStr(a))
  println(listStr(even(a)))
  println(listStr(a))
  a = reduceToEven(a)
  println(listStr(a))
  println("a len: " + String.valueOf((a).size) + " cap: " + String.valueOf(cap_a))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
