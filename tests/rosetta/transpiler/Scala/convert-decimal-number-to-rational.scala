// Generated by Mochi v0.10.42 on 2025-07-27 17:27:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def gcd(a: BigInt, b: BigInt): BigInt = {
      var x: BigInt = a
      if (x < BigInt(0)) {
        x = (BigInt(0) - x).asInstanceOf[BigInt]
      }
      var y: BigInt = b
      if (y < BigInt(0)) {
        y = (BigInt(0) - y).asInstanceOf[BigInt]
      }
      while (y != BigInt(0)) {
        val t = x % y
        x = y
        y = t
      }
      return x
    }
    def parseRational(s: String): scala.collection.mutable.Map[String,BigInt] = {
      var intPart: BigInt = BigInt(0)
      var fracPart: BigInt = BigInt(0)
      var denom: BigInt = BigInt(1)
      var afterDot: Boolean = false
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
        if (ch == ".") {
          afterDot = true
        } else {
          val d: Double = (BigInt(ch.toString())).toString.toDouble - (BigInt("0".toString())).toString.toDouble
          if ((!afterDot).asInstanceOf[Boolean]) {
            intPart = (intPart * BigInt(10) + d).asInstanceOf[BigInt]
          } else {
            fracPart = (fracPart * BigInt(10) + d).asInstanceOf[BigInt]
            denom = (denom * BigInt(10)).asInstanceOf[BigInt]
          }
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      var num = intPart * denom + fracPart
      val g: BigInt = gcd(num, denom)
      return (scala.collection.mutable.Map("num" -> ((num / g).asInstanceOf[BigInt]), "den" -> ((denom / g).asInstanceOf[BigInt]))).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
    }
    def main(): Any = {
      val inputs: ArrayBuffer[String] = ArrayBuffer("0.9054054", "0.518518", "0.75")
      for (s <- inputs) {
        val r: scala.collection.mutable.Map[String,BigInt] = parseRational(s.toString)
        println(s + " = " + String.valueOf(r.getOrElse("num", null.asInstanceOf[BigInt])) + "/" + String.valueOf(r.getOrElse("den", null.asInstanceOf[BigInt])))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
