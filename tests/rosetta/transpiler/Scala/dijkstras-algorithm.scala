// Generated by Mochi v0.10.52 on 2025-08-01 19:21:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def addEdge(u: String, v: String, w: BigInt): Any = {
  if ((!(graph("contains")(u)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    graph.update(u, scala.collection.mutable.Map())
  }
  graph(u).update(v, w)
  if ((!(graph("contains")(v)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    graph.update(v, scala.collection.mutable.Map())
  }
}

def removeAt(xs: ArrayBuffer[String], idx: BigInt): ArrayBuffer[String] = {
  var out: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  for (x <- xs) {
    if (i != idx) {
      out = out :+ x
    }
    i = i + BigInt(1)
  }
  return out
}

def dijkstra(source: String): scala.collection.mutable.Map[String,Any] = {
  var dist: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map()
  var prev: scala.collection.mutable.Map[String,String] = scala.collection.mutable.Map()
  for (v <- graph("keys")) {
    dist.update(v, INF)
    prev.update(v, "")
  }
  dist.update(source, BigInt(0))
  var q: ArrayBuffer[String] = ArrayBuffer()
  for (v <- graph("keys")) {
    q = q :+ v.toString
  }
  while ((q).size > BigInt(0)) {
    var bestIdx: BigInt = BigInt(0)
    var u: String = q((BigInt(0)).toInt)
    var i: BigInt = BigInt(1)
    while (i < (q).size) {
      val v: String = q((i).toInt)
      if (dist(v) < dist(u)) {
        u = v
        bestIdx = i
      }
      i = i + BigInt(1)
    }
    q = removeAt(q, bestIdx)
    for (v <- graph(u)("keys")) {
      val alt: BigInt = dist(u) + graph(u)(v)
      if (alt < dist(v)) {
        dist.update(v, alt)
        prev.update(v, u)
      }
    }
  }
  return (scala.collection.mutable.Map("dist" -> (dist), "prev" -> (prev))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
}

def path(prev: scala.collection.mutable.Map[String,String], v: String): String = {
  var s: String = v
  var cur: String = v
  while (prev(cur) != "") {
    cur = prev(cur)
    s = (cur + s).toString
  }
  return s
}

def main(): Any = {
  addEdge("a", "b", BigInt(7))
  addEdge("a", "c", BigInt(9))
  addEdge("a", "f", BigInt(14))
  addEdge("b", "c", BigInt(10))
  addEdge("b", "d", BigInt(15))
  addEdge("c", "d", BigInt(11))
  addEdge("c", "f", BigInt(2))
  addEdge("d", "e", BigInt(6))
  addEdge("e", "f", BigInt(9))
  val res: scala.collection.mutable.Map[String,Any] = dijkstra("a")
  val dist: scala.collection.mutable.Map[String,BigInt] = (res("dist")).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  val prev: scala.collection.mutable.Map[String,String] = (res("prev")).asInstanceOf[scala.collection.mutable.Map[String,String]]
  println("Distance to e: " + String.valueOf(dist("e")) + ", Path: " + path(prev, "e"))
  println("Distance to f: " + String.valueOf(dist("f")) + ", Path: " + path(prev, "f"))
}

val INF: BigInt = BigInt(1000000000)

var graph: scala.collection.mutable.Map[String,scala.collection.mutable.Map[String,BigInt]] = scala.collection.mutable.Map()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
