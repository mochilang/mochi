// Generated by Mochi v0.10.52 on 2025-08-02 02:08:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Frac(var num: BigInt, var den: BigInt)

def fracStr(f: Frac): String = {
  return String.valueOf(f.num) + "/" + String.valueOf(f.den)
}

def gen(l: Frac, r: Frac, n: BigInt, _acc: ArrayBuffer[Frac]): ArrayBuffer[Frac] = {
  var acc: ArrayBuffer[Frac] = _acc
  val m: Frac = Frac(l.num + r.num, l.den + r.den)
  if (m.den <= n) {
    acc = gen(l, m, n, acc)
    acc = acc :+ m
    acc = gen(m, r, n, acc)
  }
  return acc
}

def totient(n: BigInt): BigInt = {
  var tot: BigInt = n
  var nn: BigInt = n
  var p: BigInt = BigInt(2)
  while (p * p <= nn) {
    if (nn % p == BigInt(0)) {
      while (nn % p == BigInt(0)) {
        nn = nn / p
      }
      tot = tot - tot / p
    }
    if (p == BigInt(2)) {
      p = BigInt(1)
    }
    p = p + BigInt(2)
  }
  if (nn > BigInt(1)) {
    tot = tot - tot / nn
  }
  return tot
}

def main(): Any = {
  var n: BigInt = BigInt(1)
  while (n <= BigInt(11)) {
    val l: Frac = Frac(BigInt(0), BigInt(1))
    val r: Frac = Frac(BigInt(1), BigInt(1))
    var seq: ArrayBuffer[Frac] = gen(l, r, n, (ArrayBuffer()).asInstanceOf[ArrayBuffer[Frac]])
    var line: String = "F(" + String.valueOf(n) + "): " + fracStr(l)
    for (f <- seq) {
      line = line + " " + fracStr(f)
    }
    line = line + " " + fracStr(r)
    println(line)
    n = n + BigInt(1)
  }
  var sum: BigInt = BigInt(1)
  var i: BigInt = BigInt(1)
  var next: BigInt = BigInt(100)
  while (i <= BigInt(1000)) {
    sum = sum + totient(i)
    if (i == next) {
      println("|F(" + String.valueOf(i) + ")|: " + String.valueOf(sum))
      next = next + BigInt(100)
    }
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
