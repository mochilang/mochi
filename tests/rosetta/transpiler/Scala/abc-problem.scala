// Generated by Mochi v0.10.37 on 2025-07-22 20:23:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def fields(s: String): ArrayBuffer[String] = {
    var res: ArrayBuffer[String] = ArrayBuffer()
    var cur: String = ""
    var i: Int = 0
    while (i < (s).size) {
      val c = s.slice(i, i + 1)
      if (c == " ") {
        if ((cur).size > 0) {
          res = res :+ cur
          cur = ""
        }
      } else {
        cur = cur + c
      }
      i = i + 1
    }
    if ((cur).size > 0) {
      res = res :+ cur
    }
    return res
  }
  
  def canSpell(word: String, blks: ArrayBuffer[String]): Boolean = {
    if ((word).size == 0) {
      return true
    }
    val c = lower(word.slice(0, 1))
    var i: Int = 0
    while (i < (blks).size) {
      val b: Any = blks(i)
      if (c == lower(b.slice(0, 1)) || c == lower(b.slice(1, 2))) {
        var rest: ArrayBuffer[String] = ArrayBuffer()
        var j: Int = 0
        while (j < (blks).size) {
          if (j != i) {
            rest = rest :+ blks(j)
          }
          j = j + 1
        }
        if (canSpell(word.slice(1, (word).size), rest)) {
          return true
        }
      }
      i = i + 1
    }
    return false
  }
  
  def newSpeller(blocks: String): (String) => Boolean = {
    val bl = fields(blocks)
    return ((w: String) => canSpell(w, bl))
  }
  
  def main() = {
    val sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
    for (word <- ArrayBuffer("A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE")) {
      println(word + " " + String.valueOf(sp(word)))
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
