// Generated by Mochi v0.10.40 on 2025-07-25 19:19:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def fields(s: String): ArrayBuffer[String] = {
      var res: ArrayBuffer[String] = ArrayBuffer()
      var cur: String = ""
      var i: Int = 0
      while (i < (s).size) {
        val c: String = s.slice(i, i + 1)
        if (c == " ") {
          if ((cur).size > 0) {
            res = res :+ cur
            cur = ""
          }
        } else {
          cur = (cur + c).asInstanceOf[String]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      if ((cur).size > 0) {
        res = res :+ cur
      }
      return res
    }
    def canSpell(word: String, blks: ArrayBuffer[String]): Boolean = {
      if ((word).size == 0) {
        return true
      }
      val c = word.slice(0, 1).toLowerCase()
      var i: Int = 0
      while (i < (blks).size) {
        val b: String = blks(i)
        if ((c == b.slice(0, 1).toLowerCase() || c == b.slice(1, 2).toLowerCase()).asInstanceOf[Boolean]) {
          var rest: ArrayBuffer[String] = ArrayBuffer()
          var j: Int = 0
          while (j < (blks).size) {
            if (j != i) {
              rest = rest :+ blks(j)
            }
            j = (j + 1).asInstanceOf[Int]
          }
          if (canSpell(word.slice(1, (word).size), rest)) {
            return true
          }
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return false
    }
    def newSpeller(blocks: String): (String) => Boolean = {
      val bl: ArrayBuffer[String] = fields(blocks)
      return (((w: String) => canSpell(w, bl))).asInstanceOf[(String) => Boolean]
    }
    def main(): Unit = {
      val sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
      for (word <- ArrayBuffer("A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE")) {
        println(word + " " + String.valueOf(sp(word)))
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
