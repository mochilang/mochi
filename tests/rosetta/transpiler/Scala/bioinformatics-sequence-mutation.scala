// Generated by Mochi v0.10.40 on 2025-07-26 04:49:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def randInt(s: Int, n: Int): ArrayBuffer[Int] = {
      val next = Math.floorMod(s * 1664525 + 1013904223, 2147483647)
      return (ArrayBuffer(next, Math.floorMod(next, n))).asInstanceOf[ArrayBuffer[Int]]
    }
    def padLeft(s: String, w: Int): String = {
      var res: String = ""
      var n = w - (s).size
      while (n > 0) {
        res = res + " "
        n = (n - 1).asInstanceOf[Int]
      }
      return (res + s).toString
    }
    def makeSeq(_s: Int, le: Int): ArrayBuffer[Any] = {
      var s: Int = _s
      val bases: String = "ACGT"
      var out: String = ""
      var i: Int = 0
      while (i < le) {
        var r: ArrayBuffer[Int] = randInt(s, 4)
        s = r(0)
        val idx: Int = (r(1)).asInstanceOf[Int]
        out = out + bases.slice(idx, idx + 1)
        i = (i + 1).asInstanceOf[Int]
      }
      return ArrayBuffer(s, out)
    }
    def mutate(_s: Int, dna: String, w: ArrayBuffer[Int]): ArrayBuffer[Any] = {
      var s: Int = _s
      val bases: String = "ACGT"
      val le: Int = (dna).size
      var r: ArrayBuffer[Int] = randInt(s, le)
      s = r(0)
      val p: Int = (r(1)).asInstanceOf[Int]
      r = randInt(s, 300)
      s = r(0)
      val x: Int = (r(1)).asInstanceOf[Int]
      var arr: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < le) {
        arr = arr :+ dna.slice(i, i + 1)
        i = (i + 1).asInstanceOf[Int]
      }
      if (x < w(0)) {
        r = randInt(s, 4)
        s = r(0)
        val idx: Int = (r(1)).asInstanceOf[Int]
        val b: String = bases.slice(idx, idx + 1)
        println("  Change @" + padLeft((String.valueOf(p)).toString, 3) + " '" + arr(p) + "' to '" + b + "'")
        arr(p) = b
      } else {
        if (x < w(0) + w(1)) {
          println("  Delete @" + padLeft((String.valueOf(p)).toString, 3) + " '" + arr(p) + "'")
          var j: Int = p
          while (j < (arr).size - 1) {
            arr(j) = arr(j + 1)
            j = (j + 1).asInstanceOf[Int]
          }
          arr = arr.slice(0, (arr).size - 1)
        } else {
          r = randInt(s, 4)
          s = r(0)
          val idx2: Int = (r(1)).asInstanceOf[Int]
          val b: String = bases.slice(idx2, idx2 + 1)
          arr = arr :+ ""
          var j: Int = (arr).size - 1
          while (j > p) {
            arr(j) = arr(j - 1)
            j = (j - 1).asInstanceOf[Int]
          }
          println("  Insert @" + padLeft((String.valueOf(p)).toString, 3) + " '" + b + "'")
          arr(p) = b
        }
      }
      var out: String = ""
      i = 0
      while (i < (arr).size) {
        out = (out + arr(i)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      return ArrayBuffer(s, out)
    }
    def prettyPrint(dna: String, rowLen: Int): Any = {
      println("SEQUENCE:")
      val le: Int = (dna).size
      var i: Int = 0
      while (i < le) {
        var k = i + rowLen
        if (k > le) {
          k = le
        }
        println(padLeft((String.valueOf(i)).toString, 5) + ": " + dna.slice(i, k))
        i = (i + rowLen).asInstanceOf[Int]
      }
      var a: Int = 0
      var c: Int = 0
      var g: Int = 0
      var t: Int = 0
      var idx: Int = 0
      while (idx < le) {
        val ch: String = dna.slice(idx, idx + 1)
        if (ch == "A") {
          a = (a + 1).asInstanceOf[Int]
        } else {
          if (ch == "C") {
            c = (c + 1).asInstanceOf[Int]
          } else {
            if (ch == "G") {
              g = (g + 1).asInstanceOf[Int]
            } else {
              if (ch == "T") {
                t = (t + 1).asInstanceOf[Int]
              }
            }
          }
        }
        idx = (idx + 1).asInstanceOf[Int]
      }
      println("")
      println("BASE COUNT:")
      println("    A: " + padLeft((String.valueOf(a)).toString, 3))
      println("    C: " + padLeft((String.valueOf(c)).toString, 3))
      println("    G: " + padLeft((String.valueOf(g)).toString, 3))
      println("    T: " + padLeft((String.valueOf(t)).toString, 3))
      println("    ------")
      println("    \u03a3: " + String.valueOf(le))
      println("    ======")
    }
    def wstring(w: ArrayBuffer[Int]): String = {
      return "  Change: " + String.valueOf(w(0)) + "\n  Delete: " + String.valueOf(w(1)) + "\n  Insert: " + String.valueOf(w(2)) + "\n"
    }
    def main(): Any = {
      var seed: Int = 1
      var res: ArrayBuffer[Any] = makeSeq(seed, 250)
      seed = (res(0)).asInstanceOf[Int]
      var dna: String = (res(1)).toString
      prettyPrint(dna, 50)
      val muts: Int = 10
      val w: ArrayBuffer[Int] = ArrayBuffer(100, 100, 100)
      println("\nWEIGHTS (ex 300):")
      println(wstring(w))
      println("MUTATIONS (" + String.valueOf(muts) + "):")
      var i: Int = 0
      while (i < muts) {
        res = mutate(seed, dna, w)
        seed = (res(0)).asInstanceOf[Int]
        dna = (res(1)).toString
        i = (i + 1).asInstanceOf[Int]
      }
      println("")
      prettyPrint(dna, 50)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
