// Generated by Mochi v0.10.40 on 2025-07-26 04:50:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOfStr(h: String, n: String): Int = {
      val hlen: Int = (h).size
      val nlen: Int = (n).size
      if (nlen == 0) {
        return 0
      }
      var i: Int = 0
      while (i <= (hlen - nlen).asInstanceOf[Int]) {
        if (h.slice(i, i + nlen) == n) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def stringSearchSingle(h: String, n: String): Int = {
      return indexOfStr(h, n)
    }
    def stringSearch(h: String, n: String): ArrayBuffer[Int] = {
      var result: ArrayBuffer[Int] = ArrayBuffer()
      var start: Int = 0
      val hlen: Int = (h).size
      val nlen: Int = (n).size
      val _br1 = new Breaks
      _br1.breakable {
        while (start < hlen) {
          val idx: Int = indexOfStr(h.slice(start, hlen), n)
          if (idx >= 0) {
            result = result :+ start + idx
            start = (start + idx + nlen).asInstanceOf[Int]
          } else {
            _br1.break()
          }
        }
      }
      return result
    }
    def display(nums: ArrayBuffer[Int]): String = {
      var s: String = "["
      var i: Int = 0
      while (i < (nums).size) {
        if (i > 0) {
          s = s + ", "
        }
        s = (s + String.valueOf(nums(i))).toString
        i = (i + 1).asInstanceOf[Int]
      }
      s = s + "]"
      return s
    }
    def main(): Any = {
      val texts: ArrayBuffer[String] = ArrayBuffer("GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.")
      val patterns: ArrayBuffer[String] = ArrayBuffer("TCTA", "TAATAAA", "word", "needle", "and", "alfalfa")
      var i: Int = 0
      while (i < (texts).size) {
        println("text" + String.valueOf(i + 1) + " = " + texts(i))
        i = (i + 1).asInstanceOf[Int]
      }
      println("")
      var j: Int = 0
      while (j < (texts).size) {
        val idxs: ArrayBuffer[Int] = stringSearch(texts(j), patterns(j))
        println("Found \"" + patterns(j) + "\" in 'text" + String.valueOf(j + 1) + "' at indexes " + display(idxs))
        j = (j + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
