// Generated by Mochi v0.10.39 on 2025-07-25 00:24:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def pfacSum(i: Int): Int = {
    var sum: Int = 0
    var p: Int = 1
    while (p <= (i / 2).asInstanceOf[Int]) {
      if (i % p == 0) {
        sum = (sum + p).asInstanceOf[Int]
      }
      p = (p + 1).asInstanceOf[Int]
    }
    return sum
  }
  
  def pad(n: Int, width: Int): String = {
    var s = String.valueOf(n)
    while ((s).size < width) {
      s = " " + s
    }
    return s
  }
  
  def main() = {
    var sums: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < 20000) {
      sums = sums :+ 0
      i = (i + 1).asInstanceOf[Int]
    }
    i = 1
    while (i < 20000) {
      sums(i) = pfacSum(i)
      i = (i + 1).asInstanceOf[Int]
    }
    println("The amicable pairs below 20,000 are:")
    var n: Int = 2
    while (n < 19999) {
      val m: Int = sums(n)
      if (((m > n && m < 20000).asInstanceOf[Boolean] && n == sums(m)).asInstanceOf[Boolean]) {
        println("  " + pad(n, 5) + " and " + pad(m, 5))
      }
      n = (n + 1).asInstanceOf[Int]
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
