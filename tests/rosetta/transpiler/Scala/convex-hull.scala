// Generated by Mochi v0.10.42 on 2025-07-27 17:28:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: BigInt, var y: BigInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def ccw(a: Point, b: Point, c: Point): Boolean = {
      val lhs: Double = (b.x - a.x).toString.toDouble * (c.y - a.y).toString.toDouble
      val rhs: Double = (b.y - a.y).toString.toDouble * (c.x - a.x).toString.toDouble
      return lhs > rhs
    }
    def sortPoints(ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
      var arr: ArrayBuffer[Point] = ps
      var n: Int = (arr).size
      var i: BigInt = BigInt(0)
      while (i < n) {
        var j: BigInt = BigInt(0)
        while (j < n - BigInt(1)) {
          val p: Point = arr((j).toInt)
          val q: Point = arr((j + BigInt(1)).toInt)
          if ((p.x > q.x || (p.x == q.x && p.y > q.y).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            arr((j).toInt) = q
            arr((j + BigInt(1)).toInt) = p
          }
          j = (j + BigInt(1)).asInstanceOf[BigInt]
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return arr
    }
    def convexHull(_ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
      var ps: ArrayBuffer[Point] = _ps
      ps = sortPoints(ps)
      var h: ArrayBuffer[Point] = ArrayBuffer()
      for (pt <- ps) {
        while ((h).size >= BigInt(2) && ccw(h(((h).size - BigInt(2)).toInt), h(((h).size - BigInt(1)).toInt), pt.asInstanceOf[Point]) == false) {
          h = h.slice((BigInt(0)).toInt, ((h).size - BigInt(1)).toInt)
        }
        h = h :+ pt.asInstanceOf[Point]
      }
      var i: BigInt = (ps).size - BigInt(2)
      val t: BigInt = (h).size + BigInt(1)
      while (i >= BigInt(0)) {
        val pt: Point = ps((i).toInt)
        while ((h).size >= t && ccw(h(((h).size - BigInt(2)).toInt), h(((h).size - BigInt(1)).toInt), pt) == false) {
          h = h.slice((BigInt(0)).toInt, ((h).size - BigInt(1)).toInt)
        }
        h = h :+ pt
        i = (i - BigInt(1)).asInstanceOf[BigInt]
      }
      return h.slice((BigInt(0)).toInt, ((h).size - BigInt(1)).toInt)
    }
    def pointStr(p: Point): String = {
      return "(" + String.valueOf(p.x) + "," + String.valueOf(p.y) + ")"
    }
    def hullStr(h: ArrayBuffer[Point]): String = {
      var s: String = "["
      var i: BigInt = BigInt(0)
      while (i < (h).size) {
        s = (s + pointStr(h((i).toInt))).toString
        if (i < (h).size - BigInt(1)) {
          s = s + " "
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      s = s + "]"
      return s
    }
    val pts: ArrayBuffer[Point] = ArrayBuffer(Point(BigInt(16), BigInt(3)), Point(BigInt(12), BigInt(17)), Point(BigInt(0), BigInt(6)), Point(BigInt(0) - BigInt(4), BigInt(0) - BigInt(6)), Point(BigInt(16), BigInt(6)), Point(BigInt(16), BigInt(0) - BigInt(7)), Point(BigInt(16), BigInt(0) - BigInt(3)), Point(BigInt(17), BigInt(0) - BigInt(4)), Point(BigInt(5), BigInt(19)), Point(BigInt(19), BigInt(0) - BigInt(8)), Point(BigInt(3), BigInt(16)), Point(BigInt(12), BigInt(13)), Point(BigInt(3), BigInt(0) - BigInt(4)), Point(BigInt(17), BigInt(5)), Point(BigInt(0) - BigInt(3), BigInt(15)), Point(BigInt(0) - BigInt(3), BigInt(0) - BigInt(9)), Point(BigInt(0), BigInt(11)), Point(BigInt(0) - BigInt(9), BigInt(0) - BigInt(3)), Point(BigInt(0) - BigInt(4), BigInt(0) - BigInt(2)), Point(BigInt(12), BigInt(10)))
    val hull: ArrayBuffer[Point] = convexHull(pts)
    println("Convex Hull: " + hullStr(hull))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
