// Generated by Mochi v0.10.57 on 2025-08-04 16:36:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: BigInt, var y: BigInt)

def ccw(a: Point, b: Point, c: Point): Boolean = {
  val lhs: BigInt = (b.x - a.x) * (c.y - a.y)
  val rhs: BigInt = (b.y - a.y) * (c.x - a.x)
  return lhs > rhs
}

def sortPoints(ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
  var arr: ArrayBuffer[Point] = ps
  var n: Int = (arr).size
  var i: BigInt = 0
  while (i < BigInt(n.toString.toDouble.toInt)) {
    var j: BigInt = 0
    while (j < BigInt((n - 1.toInt).toString.toDouble.toInt)) {
      val p: Point = arr((j.toInt).toInt)
      val q: Point = arr(((j + 1).toInt).toInt)
      if ((p.x > q.x || (p.x == q.x && p.y > q.y).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        arr((j).toInt) = q
        arr((j + 1).toInt) = p
      }
      j = j + 1
    }
    i = i + 1
  }
  return arr
}

def convexHull(_ps: ArrayBuffer[Point]): ArrayBuffer[Point] = {
  var ps: ArrayBuffer[Point] = _ps
  ps = sortPoints(ps)
  var h: ArrayBuffer[Point] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[Point]]
  for (pt <- ps) {
    while (BigInt(((h).size).toInt) >= 2 && ccw(h(((h).size - 2.toInt).toInt), h(((h).size - 1.toInt).toInt), pt) == false) {
      h = h.slice((0).toInt, ((h).size - 1.toInt).toInt)
    }
    h = h :+ pt
  }
  var i: Int = (ps).size - 2.toInt
  val t: Int = (h).size + 1.toInt
  while (BigInt(i.toString.toDouble.toInt) >= 0) {
    val pt: Point = ps((i).toInt)
    while ((h).size >= t && ccw(h(((h).size - 2.toInt).toInt), h(((h).size - 1.toInt).toInt), pt) == false) {
      h = h.slice((0).toInt, ((h).size - 1.toInt).toInt)
    }
    h = h :+ pt
    i = i - 1.toInt
  }
  return h.slice((0).toInt, ((h).size - 1.toInt).toInt)
}

def pointStr(p: Point): String = {
  return "(" + String.valueOf(p.x) + "," + String.valueOf(p.y) + ")"
}

def hullStr(h: ArrayBuffer[Point]): String = {
  var s: String = "["
  var i: BigInt = 0
  while (i < BigInt(((h).size).toInt)) {
    s = s + pointStr(h((i.toInt).toInt))
    if (i < BigInt(((h).size - 1.toInt).toInt)) {
      s = s + " "
    }
    i = i + 1
  }
  s = s + "]"
  return s
}

val pts: ArrayBuffer[Point] = ArrayBuffer(Point(16, 3), Point(12, 17), Point(0, 6), Point(0 - 4, 0 - 6), Point(16, 6), Point(16, 0 - 7), Point(16, 0 - 3), Point(17, 0 - 4), Point(5, 19), Point(19, 0 - 8), Point(3, 16), Point(12, 13), Point(3, 0 - 4), Point(17, 5), Point(0 - 3, 15), Point(0 - 3, 0 - 9), Point(0, 11), Point(0 - 9, 0 - 3), Point(0 - 4, 0 - 2), Point(12, 10))

val hull: ArrayBuffer[Point] = convexHull(pts)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Convex Hull: " + hullStr(hull))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
