// Generated by Mochi v0.10.52 on 2025-08-02 00:19:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow2(k: BigInt): BigInt = {
  var v: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < k) {
    v = v * BigInt(2)
    i = i + BigInt(1)
  }
  return v
}

def ruleBit(ruleNum: BigInt, idx: BigInt): BigInt = {
  var r: BigInt = ruleNum
  var i: BigInt = BigInt(0)
  while (i < idx) {
    r = r / BigInt(2)
    i = i + BigInt(1)
  }
  return r % BigInt(2)
}

def evolve(_state: ArrayBuffer[BigInt], ruleNum: BigInt): ArrayBuffer[BigInt] = {
  var state: ArrayBuffer[BigInt] = _state
  var out: ArrayBuffer[BigInt] = ArrayBuffer()
  var p: BigInt = BigInt(0)
  while (p < BigInt(10)) {
    var b: BigInt = BigInt(0)
    var q: BigInt = BigInt(7)
    while (q >= BigInt(0)) {
      val st: ArrayBuffer[BigInt] = state
      b = b + st((BigInt(0)).toInt) * pow2(q)
      var next: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < n) {
        var lidx: BigInt = i - BigInt(1)
        if (lidx < BigInt(0)) {
          lidx = n - BigInt(1)
        }
        val left: BigInt = st((lidx).toInt)
        val center: BigInt = st((i).toInt)
        var ridx: BigInt = i + BigInt(1)
        if (ridx >= n) {
          ridx = BigInt(0)
        }
        val right: BigInt = st((ridx).toInt)
        val index: BigInt = left * BigInt(4) + center * BigInt(2) + right
        next = next :+ ruleBit(ruleNum, index)
        i = i + BigInt(1)
      }
      state = next
      q = q - BigInt(1)
    }
    out = out :+ b
    p = p + BigInt(1)
  }
  return out
}

val n: BigInt = BigInt(64)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var init: ArrayBuffer[BigInt] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i < n) {
      init = init :+ BigInt(0)
      i = i + BigInt(1)
    }
    init((BigInt(0)).toInt) = BigInt(1)
    val bytes: ArrayBuffer[BigInt] = evolve(init, BigInt(30))
    println(String.valueOf(bytes))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
