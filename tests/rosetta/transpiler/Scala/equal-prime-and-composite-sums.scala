// Generated by Mochi v0.10.52 on 2025-08-02 00:33:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.annotation.tailrec
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _padStart(s: String, width: Int, pad: String): String = {
  var out = s
  while (out.length < width) { out = pad + out }
  out
}

def commatize(n: BigInt): String = {
  var s: String = String.valueOf(n)
  var i: BigInt = (s).size - BigInt(3).toInt
  while (i >= BigInt(1)) {
    s = s.slice((BigInt(0)).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
    i = i - BigInt(3)
  }
  return s
}

def primeSieve(n: BigInt): ArrayBuffer[Boolean] = {
  var sieve: ArrayBuffer[Boolean] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    sieve = sieve :+ false
    i = i + BigInt(1)
  }
  sieve((BigInt(0)).toInt) = true
  sieve((BigInt(1)).toInt) = true
  var p: BigInt = BigInt(2)
  while (p * p <= n) {
    if ((!sieve((p).toInt)).asInstanceOf[Boolean]) {
      var m: BigInt = p * p
      while (m <= n) {
        sieve((m).toInt) = true
        m = m + p
      }
    }
    p = p + BigInt(1)
  }
  return sieve
}

def search(xs: ArrayBuffer[BigInt], target: BigInt): BigInt = {
  var low: BigInt = BigInt(0)
  var high: Int = (xs).size
  while (low < high) {
    var mid: BigInt = (low + high) / BigInt(2)
    if (xs((mid).toInt) < target) {
      low = mid + BigInt(1)
    } else {
      high = mid.toInt
    }
  }
  return low
}

def main(): Any = {
  val limit: BigInt = BigInt(45000)
  val compMap: ArrayBuffer[Boolean] = primeSieve(limit)
  var compSums: ArrayBuffer[BigInt] = ArrayBuffer()
  var primeSums: ArrayBuffer[BigInt] = ArrayBuffer()
  var csum: BigInt = BigInt(0)
  var psum: BigInt = BigInt(0)
  var i: BigInt = BigInt(2)
  while (i <= limit) {
    if (compMap((i).toInt)) {
      csum = csum + i
      compSums = compSums :+ csum
    } else {
      psum = psum + i
      primeSums = primeSums :+ psum
    }
    i = i + BigInt(1)
  }
  println("Sum        | Prime Index | Composite Index")
  println("------------------------------------------")
  var idx: BigInt = BigInt(0)
  while (idx < (primeSums).size) {
    var s: BigInt = primeSums((idx).toInt)
    val j: BigInt = search(compSums, s)
    if ((j < (compSums).size && compSums((j).toInt) == s).asInstanceOf[Boolean]) {
      val sumStr = _padStart(commatize(s), BigInt(10).toInt, " ")
      val piStr = _padStart(commatize(idx + BigInt(1)), BigInt(11).toInt, " ")
      val ciStr = _padStart(commatize(j + BigInt(1)), BigInt(15).toInt, " ")
      println(sumStr + " | " + piStr + " | " + ciStr)
    }
    idx = idx + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
