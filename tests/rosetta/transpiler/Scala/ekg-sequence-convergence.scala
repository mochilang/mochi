// Generated by Mochi v0.10.52 on 2025-08-02 00:12:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[BigInt], n: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    if (xs((i).toInt) == n) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  while (y != BigInt(0)) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  if (x < BigInt(0)) {
    x = BigInt(0) - x
  }
  return x
}

def sortInts(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var n: Int = (arr).size
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1).toInt) {
      if (arr((j).toInt) > arr((j + BigInt(1)).toInt)) {
        val tmp: BigInt = arr((j).toInt)
        arr((j).toInt) = arr((j + BigInt(1)).toInt)
        arr((j + BigInt(1)).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def areSame(s: ArrayBuffer[BigInt], t: ArrayBuffer[BigInt]): Boolean = {
  if ((s).size != (t).size) {
    return false
  }
  var a: ArrayBuffer[BigInt] = sortInts(s)
  var b: ArrayBuffer[BigInt] = sortInts(t)
  var i: BigInt = BigInt(0)
  while (i < (a).size) {
    if (a((i).toInt) != b((i).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def printSlice(start: BigInt, seq: ArrayBuffer[BigInt]): Any = {
  var first: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < BigInt(30)) {
    first = first :+ seq((i).toInt)
    i = i + BigInt(1)
  }
  var pad: String = ""
  if (start < BigInt(10)) {
    pad = " "
  }
  println("EKG(" + pad + String.valueOf(start) + "): " + String.valueOf(first))
}

def main(): Any = {
  val limit: BigInt = BigInt(100)
  val starts: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(5), BigInt(7), BigInt(9), BigInt(10))
  var ekg: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var s: BigInt = BigInt(0)
  while (s < (starts).size) {
    var seq: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), starts((s).toInt))
    var n: BigInt = BigInt(2)
    while (n < limit) {
      var i: BigInt = BigInt(2)
      var done: Boolean = false
      while (!done) {
        if (((!(seq.contains(i)).asInstanceOf[Boolean]).asInstanceOf[Boolean] && gcd(seq((n - BigInt(1)).toInt), i) > BigInt(1)).asInstanceOf[Boolean]) {
          seq = seq :+ i
          done = true
        }
        i = i + BigInt(1)
      }
      n = n + BigInt(1)
    }
    ekg = ekg :+ seq
    printSlice(starts((s).toInt), seq)
    s = s + BigInt(1)
  }
  var i: BigInt = BigInt(2)
  var found: Boolean = false
  val _br9 = new Breaks
  _br9.breakable {
    while (i < limit) {
      if ((ekg((BigInt(1)).toInt)((i).toInt) == ekg((BigInt(2)).toInt)((i).toInt) && areSame(ekg((BigInt(1)).toInt).slice((BigInt(0)).toInt, (i).toInt), ekg((BigInt(2)).toInt).slice((BigInt(0)).toInt, (i).toInt))).asInstanceOf[Boolean]) {
        println("\nEKG(5) and EKG(7) converge at term " + String.valueOf(i + BigInt(1)))
        found = true
        _br9.break()
      }
      i = i + BigInt(1)
    }
  }
  if ((!found).asInstanceOf[Boolean]) {
    println("\nEKG5(5) and EKG(7) do not converge within " + String.valueOf(limit) + " terms")
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
