// Generated by Mochi v0.10.42 on 2025-07-27 22:22:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def ord(ch: String): BigInt = {
      val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      if ((ch >= "0" && ch <= "9").asInstanceOf[Boolean]) {
        return (_parseIntStr(ch, BigInt(10)) + BigInt(48)).asInstanceOf[BigInt]
      }
      var idx = BigInt(upper.indexOf(ch))
      if (idx >= BigInt(0)) {
        return (BigInt(65) + idx).asInstanceOf[BigInt]
      }
      return BigInt(0)
    }
    def isCusip(s: String): Boolean = {
      if ((s).size != BigInt(9)) {
        return false
      }
      var sum: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < BigInt(8)) {
        val c: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
        var v: BigInt = BigInt(0)
        if ((c >= "0" && c <= "9").asInstanceOf[Boolean]) {
          v = (_parseIntStr(c, BigInt(10))).asInstanceOf[BigInt]
        } else {
          if ((c >= "A" && c <= "Z").asInstanceOf[Boolean]) {
            v = (ord(c) - BigInt(55)).asInstanceOf[BigInt]
          } else {
            if (c == "*") {
              v = BigInt(36)
            } else {
              if (c == "@") {
                v = BigInt(37)
              } else {
                if (c == "#") {
                  v = BigInt(38)
                } else {
                  return false
                }
              }
            }
          }
        }
        if (i % BigInt(2) == BigInt(1)) {
          v = (v * BigInt(2)).asInstanceOf[BigInt]
        }
        sum = (sum + v / BigInt(10)).toString.toDouble + (v % BigInt(10)).toString.toDouble
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return _parseIntStr(s.slice((BigInt(8)).toInt, (BigInt(9)).toInt), BigInt(10)) == (BigInt(10) - sum % BigInt(10)) % BigInt(10)
    }
    val candidates: ArrayBuffer[String] = ArrayBuffer("037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105")
    for (cand <- candidates) {
      var b: String = "incorrect"
      if (isCusip(cand)) {
        b = "correct"
      }
      println(cand + " -> " + b)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
