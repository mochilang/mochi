// Generated by Mochi v0.10.57 on 2025-08-04 21:30:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class TinyInt(var value: BigInt) {
  def Add(t2: TinyInt): TinyInt = {
    return NewTinyInt(value + t2.value)
  }
  def Sub(t2: TinyInt): TinyInt = {
    return NewTinyInt(value - t2.value)
  }
  def Mul(t2: TinyInt): TinyInt = {
    return NewTinyInt(value * t2.value)
  }
  def Div(t2: TinyInt): TinyInt = {
    return NewTinyInt(value / t2.value)
  }
  def Rem(t2: TinyInt): TinyInt = {
    return NewTinyInt(value % t2.value)
  }
  def Inc(): TinyInt = {
    return (Add(NewTinyInt(1))).asInstanceOf[TinyInt]
  }
  def Dec(): TinyInt = {
    return (Sub(NewTinyInt(1))).asInstanceOf[TinyInt]
  }
}

def NewTinyInt(_i: BigInt): TinyInt = {
  var i: BigInt = _i
  if (i < 1) {
    i = 1
  } else {
    if (i > 10) {
      i = 10
    }
  }
  return TinyInt(i)
}

def main(): Any = {
  val t1: TinyInt = NewTinyInt(6)
  val t2: TinyInt = NewTinyInt(3)
  println("t1      = " + String.valueOf(t1.value))
  println("t2      = " + String.valueOf(t2.value))
  println("t1 + t2 = " + String.valueOf((t1.Add(t2)).value))
  println("t1 - t2 = " + String.valueOf((t1.Sub(t2)).value))
  println("t1 * t2 = " + String.valueOf((t1.Mul(t2)).value))
  println("t1 / t2 = " + String.valueOf((t1.Div(t2)).value))
  println("t1 % t2 = " + String.valueOf((t1.Rem(t2)).value))
  println("t1 + 1  = " + String.valueOf((t1.Inc()).value))
  println("t1 - 1  = " + String.valueOf((t1.Dec()).value))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
