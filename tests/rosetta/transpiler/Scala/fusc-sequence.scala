// Generated by Mochi v0.10.50 on 2025-07-31 00:50:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def fuscVal(n: BigInt): BigInt = {
      var a: BigInt = BigInt(1)
      var b: BigInt = BigInt(0)
      var x: BigInt = n
      while (x > BigInt(0)) {
        if (x % BigInt(2) == BigInt(0)) {
          x = (x / BigInt(2)).asInstanceOf[BigInt]
          a = (a + b).asInstanceOf[BigInt]
        } else {
          x = ((x - BigInt(1)) / BigInt(2)).asInstanceOf[BigInt]
          b = (a + b).asInstanceOf[BigInt]
        }
      }
      if (n == BigInt(0)) {
        return BigInt(0)
      }
      return b
    }
    def firstFusc(n: BigInt): ArrayBuffer[BigInt] = {
      var arr: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < n) {
        arr = arr :+ fuscVal(i)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return arr
    }
    def commatize(n: BigInt): String = {
      var s: String = String.valueOf(n)
      var neg: Boolean = false
      if (n < BigInt(0)) {
        neg = true
        s = s.slice((BigInt(1)).toInt, ((s).size).toInt)
      }
      var i: BigInt = (s).size - BigInt(3)
      while (i >= BigInt(1)) {
        s = s.slice((BigInt(0)).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
        i = (i - BigInt(3)).asInstanceOf[BigInt]
      }
      if (neg) {
        return "-" + s
      }
      return s
    }
    def padLeft(s: String, w: BigInt): String = {
      var out: String = s
      while ((out).size < w) {
        out = " " + out
      }
      return out
    }
    def main(): Any = {
      println("The first 61 fusc numbers are:")
      println(String.valueOf(firstFusc(BigInt(61))))
      println("\nThe fusc numbers whose length > any previous fusc number length are:")
      val idxs: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(37), BigInt(1173), BigInt(35499), BigInt(699051), BigInt(19573419))
      var i: BigInt = BigInt(0)
      while (i < (idxs).size) {
        val idx: BigInt = idxs((i).toInt)
        val `val`: BigInt = fuscVal(idx)
        val numStr: String = padLeft(commatize(`val`), BigInt(7))
        val idxStr: String = padLeft(commatize(idx), BigInt(10))
        println(numStr + " (index " + idxStr + ")")
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
