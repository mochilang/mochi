// Generated by Mochi v0.10.40 on 2025-07-26 04:49:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _sha256(bytes: Array[Byte]): ArrayBuffer[Int] = {
  val md = java.security.MessageDigest.getInstance("SHA-256")
  md.update(bytes)
  val sum = md.digest()
  ArrayBuffer(sum.map(b => (b & 0xff).toInt): _*)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def set58(addr: String): ArrayBuffer[Int] = {
      val tmpl: String = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      var a: ArrayBuffer[Int] = ArrayBuffer()
      var i: Int = 0
      while (i < 25) {
        a = a :+ 0
        i = (i + 1).asInstanceOf[Int]
      }
      var idx: Int = 0
      while (idx < (addr).size) {
        val ch: String = addr.slice(idx, idx + 1)
        var c: Int = indexOf(tmpl, ch)
        if (c < 0) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[Int]]
        }
        var j: Int = 24
        while (j >= 0) {
          c = (c + 58 * a(j)).asInstanceOf[Int]
          a(j) = (Math.floorMod(c, 256)).asInstanceOf[Int]
          c = (c / 256).asInstanceOf[Int]
          j = (j - 1).asInstanceOf[Int]
        }
        if (c > 0) {
          return (ArrayBuffer()).asInstanceOf[ArrayBuffer[Int]]
        }
        idx = (idx + 1).asInstanceOf[Int]
      }
      return a
    }
    def doubleSHA256(bs: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      val first = _sha256(bs.map(((x: Int) => x.toByte)).toArray)
      return (_sha256(first.map(((x: Int) => x.toByte)).toArray)).asInstanceOf[ArrayBuffer[Int]]
    }
    def computeChecksum(a: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      val hash: ArrayBuffer[Int] = doubleSHA256(a.slice(0, 21))
      return hash.slice(0, 4)
    }
    def validA58(addr: String): Boolean = {
      val a: ArrayBuffer[Int] = set58(addr)
      if ((a).size != 25) {
        return false
      }
      if (a(0) != 0) {
        return false
      }
      val sum: ArrayBuffer[Int] = computeChecksum(a)
      var i: Int = 0
      while (i < 4) {
        if (a(21 + i) != sum(i)) {
          return false
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return true
    }
    println(String.valueOf(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")))
    println(String.valueOf(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
