// Generated by Mochi v0.10.40 on 2025-07-25 21:09:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def main(): Any = {
      println("Diagram after trimming whitespace and removal of blank lines:\n")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|                      ID                       |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|                    QDCOUNT                    |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|                    ANCOUNT                    |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|                    NSCOUNT                    |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("|                    ARCOUNT                    |")
      println("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
      println("\nDecoded:\n")
      println("Name     Bits  Start  End")
      println("=======  ====  =====  ===")
      println("ID        16      0    15")
      println("QR         1     16    16")
      println("Opcode     4     17    20")
      println("AA         1     21    21")
      println("TC         1     22    22")
      println("RD         1     23    23")
      println("RA         1     24    24")
      println("Z          3     25    27")
      println("RCODE      4     28    31")
      println("QDCOUNT   16     32    47")
      println("ANCOUNT   16     48    63")
      println("NSCOUNT   16     64    79")
      println("ARCOUNT   16     80    95")
      println("\nTest string in hex:")
      println("78477bbf5496e12e1bf169a4")
      println("\nTest string in binary:")
      println("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100")
      println("\nUnpacked:\n")
      println("Name     Size  Bit pattern")
      println("=======  ====  ================")
      println("ID        16   0111100001000111")
      println("QR         1   0")
      println("Opcode     4   1111")
      println("AA         1   0")
      println("TC         1   1")
      println("RD         1   1")
      println("RA         1   1")
      println("Z          3   011")
      println("RCODE      4   1111")
      println("QDCOUNT   16   0101010010010110")
      println("ANCOUNT   16   1110000100101110")
      println("NSCOUNT   16   0001101111110001")
      println("ARCOUNT   16   0110100110100100")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
