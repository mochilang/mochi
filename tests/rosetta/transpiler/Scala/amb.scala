// Generated by Mochi v0.10.39 on 2025-07-25 00:24:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def amb(wordsets: ArrayBuffer[ArrayBuffer[String]], res: ArrayBuffer[String], idx: Int): Boolean = {
    if (idx == (wordsets).size) {
      return true
    }
    var prev: String = ""
    if (idx > 0) {
      prev = res(idx - 1)
    }
    var i: Int = 0
    while (i < (wordsets(idx)).size) {
      val w: String = wordsets(idx)(i)
      if ((idx == 0 || prev.substring((prev).size - 1, (prev).size) == w.substring(0, 1)).asInstanceOf[Boolean]) {
        res(idx) = w
        if (amb(wordsets, res, (idx + 1).asInstanceOf[Int])) {
          return true
        }
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return false
  }
  
  def main() = {
    val wordset: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("the", "that", "a"), ArrayBuffer("frog", "elephant", "thing"), ArrayBuffer("walked", "treaded", "grows"), ArrayBuffer("slowly", "quickly"))
    var res: ArrayBuffer[String] = ArrayBuffer()
    var i: Int = 0
    while (i < (wordset).size) {
      res = res :+ ""
      i = (i + 1).asInstanceOf[Int]
    }
    if (amb(wordset, res, 0)) {
      var out: String = "[" + res(0)
      var j: Int = 1
      while (j < (res).size) {
        out = out + " " + res(j)
        j = (j + 1).asInstanceOf[Int]
      }
      out = out + "]"
      println(out)
    } else {
      println("No amb found")
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
