// Generated by Mochi v0.10.56 on 2025-08-04 00:36:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def say(n: BigInt): String = {
    if (n < BigInt(20)) {
      return small((n.toInt).toInt)
    }
    if (n < BigInt(100)) {
      var res: String = tens(((n / BigInt(10)).toInt).toInt)
      val m: BigInt = n % BigInt(10)
      if (m != BigInt(0)) {
        res = res + "-" + small((m.toInt).toInt)
      }
      return res
    }
    if (n < BigInt(1000)) {
      var res: String = say(n / BigInt(100)) + " hundred"
      val m: BigInt = n % BigInt(100)
      if (m != BigInt(0)) {
        res = res + " " + say(m)
      }
      return res
    }
    if (n < BigInt(1000000)) {
      var res: String = say(n / BigInt(1000)) + " thousand"
      val m: BigInt = n % BigInt(1000)
      if (m != BigInt(0)) {
        res = res + " " + say(m)
      }
      return res
    }
    var res: String = say(n / BigInt(1000000)) + " million"
    val m: BigInt = n % BigInt(1000000)
    if (m != BigInt(0)) {
      res = res + " " + say(m)
    }
    return res
  }
  
  def sayOrdinal(n: BigInt): String = {
    if (n < BigInt(20)) {
      return smallOrd((n.toInt).toInt)
    }
    if (n < BigInt(100)) {
      if (n % BigInt(10) == BigInt(0)) {
        return tensOrd(((n / BigInt(10)).toInt).toInt)
      }
      return say(n - n % BigInt(10)) + "-" + smallOrd(((n % BigInt(10)).toInt).toInt)
    }
    if (n < BigInt(1000)) {
      if (n % BigInt(100) == BigInt(0)) {
        return say(n / BigInt(100)) + " hundredth"
      }
      return say(n / BigInt(100)) + " hundred " + sayOrdinal(n % BigInt(100))
    }
    if (n < BigInt(1000000)) {
      if (n % BigInt(1000) == BigInt(0)) {
        return say(n / BigInt(1000)) + " thousandth"
      }
      return say(n / BigInt(1000)) + " thousand " + sayOrdinal(n % BigInt(1000))
    }
    if (n % BigInt(1000000) == BigInt(0)) {
      return say(n / BigInt(1000000)) + " millionth"
    }
    return say(n / BigInt(1000000)) + " million " + sayOrdinal(n % BigInt(1000000))
  }
  
  def split(s: String, sep: String): ArrayBuffer[String] = {
    var parts: ArrayBuffer[String] = ArrayBuffer()
    var cur: String = ""
    var i: BigInt = BigInt(0)
    while (i < BigInt(((s).size).toInt)) {
      if (((BigInt(((sep).size).toInt) > BigInt(0) && i + (sep).size <= BigInt(((s).size).toInt)).asInstanceOf[Boolean] && s.slice((i).toInt, (i + (sep).size).toInt) == sep).asInstanceOf[Boolean]) {
        parts = parts :+ cur
        cur = ""
        i = i + (sep).size
      } else {
        cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
        i = i + BigInt(1)
      }
    }
    parts = parts :+ cur
    return parts
  }
  
  def countLetters(s: String): BigInt = {
    var cnt: BigInt = BigInt(0)
    var i: BigInt = BigInt(0)
    while (i < BigInt(((s).size).toInt)) {
      val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
      if (((ch >= "A" && ch <= "Z").asInstanceOf[Boolean] || (ch >= "a" && ch <= "z").asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        cnt = cnt + BigInt(1)
      }
      i = i + BigInt(1)
    }
    return cnt
  }
  
  def wordLen(w: BigInt): ArrayBuffer[Any] = {
    while (BigInt(((words).size).toInt) < w) {
      idx = idx + BigInt(1)
      val n: BigInt = countLetters(words((idx.toInt).toInt))
      var parts: ArrayBuffer[String] = ArrayBuffer((say(n)).split(" "): _*)
      var j: BigInt = BigInt(0)
      while (j < BigInt(((parts).size).toInt)) {
        words = words :+ parts((j.toInt).toInt)
        j = j + BigInt(1)
      }
      words = words :+ "in"
      words = words :+ "the"
      parts = (ArrayBuffer((sayOrdinal(idx + BigInt(1)) + ",").split(" "): _*)).asInstanceOf[ArrayBuffer[String]]
      j = BigInt(0)
      while (j < BigInt(((parts).size).toInt)) {
        words = words :+ parts((j.toInt).toInt)
        j = j + BigInt(1)
      }
    }
    val word: String = words(((w - BigInt(1)).toInt).toInt)
    return ArrayBuffer(word, countLetters(word))
  }
  
  def totalLength(): BigInt = {
    var tot: BigInt = BigInt(0)
    var i: BigInt = BigInt(0)
    while (i < BigInt(((words).size).toInt)) {
      tot = tot + (words((i.toInt).toInt)).length
      if (i < (words).size - BigInt(1).toInt) {
        tot = tot + BigInt(1)
      }
      i = i + BigInt(1)
    }
    return tot
  }
  
  def pad(n: BigInt, width: BigInt): String = {
    var s: String = String.valueOf(n)
    while (BigInt(((s).size).toInt) < width) {
      s = " " + s
    }
    return s
  }
  
  def main(): Any = {
    println("The lengths of the first 201 words are:")
    var line: String = ""
    var i: BigInt = BigInt(1)
    while (i <= BigInt(201)) {
      if (i % BigInt(25) == BigInt(1)) {
        if (i != BigInt(1)) {
          println(line)
        }
        line = pad(i, BigInt(3)) + ":"
      }
      val r: ArrayBuffer[Any] = wordLen(i)
      val n: Any = r((BigInt(1).toInt).toInt)
      line = line + " " + pad(BigInt(n.toString.toDouble.toInt), BigInt(2))
      i = i + BigInt(1)
    }
    println(line)
    println("Length of sentence so far: " + String.valueOf(totalLength()))
    for (n <- ArrayBuffer(BigInt(1000), BigInt(10000), BigInt(100000), BigInt(1000000), BigInt(10000000))) {
      val r: ArrayBuffer[Any] = wordLen(n)
      val w: Any = r((BigInt(0).toInt).toInt)
      val l: Any = r((BigInt(1).toInt).toInt)
      println("Word " + pad(n, BigInt(8)) + " is \"" + w + "\", with " + String.valueOf(l) + " letters.  Length of sentence so far: " + String.valueOf(totalLength()))
    }
  }
  
  val small: ArrayBuffer[String] = ArrayBuffer("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
  
  val tens: ArrayBuffer[String] = ArrayBuffer("", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
  
  val smallOrd: ArrayBuffer[String] = ArrayBuffer("zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth")
  
  val tensOrd: ArrayBuffer[String] = ArrayBuffer("", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth")
  
  var words: ArrayBuffer[String] = ArrayBuffer("Four", "is", "the", "number", "of", "letters", "in", "the", "first", "word", "of", "this", "sentence,")
  
  var idx: BigInt = BigInt(0)
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
