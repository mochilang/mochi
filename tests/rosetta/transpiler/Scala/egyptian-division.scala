// Generated by Mochi v0.10.55 on 2025-08-02 21:09:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class DivResult(var q: BigInt, var r: BigInt)

def egyptianDivide(dividend: BigInt, divisor: BigInt): DivResult = {
  if ((dividend < BigInt(0) || divisor <= BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid argument(s)"))
  }
  if (dividend < divisor) {
    return DivResult(BigInt(0), dividend)
  }
  var powers: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  var doublings: ArrayBuffer[BigInt] = ArrayBuffer(divisor)
  var doubling: BigInt = divisor * BigInt(2)
  while (doubling <= dividend) {
    powers = powers :+ powers(((powers).size - BigInt(1).toInt.toInt).toInt) * BigInt(2)
    doublings = doublings :+ doubling
    doubling = doubling * BigInt(2)
  }
  var ans: BigInt = BigInt(0)
  var accum: BigInt = BigInt(0)
  var i: BigInt = (doublings).size - BigInt(1).toInt
  val _br1 = new Breaks
  _br1.breakable {
    while (i >= BigInt(0)) {
      if (accum + doublings((i.toInt).toInt) <= dividend) {
        accum = accum + doublings((i.toInt).toInt)
        ans = ans + powers((i.toInt).toInt)
        if (accum == dividend) {
          _br1.break()
        }
      }
      i = i - BigInt(1)
    }
  }
  return DivResult(ans, dividend - accum)
}

def main(): Any = {
  val dividend: BigInt = BigInt(580)
  val divisor: BigInt = BigInt(34)
  val res: DivResult = egyptianDivide(dividend, divisor)
  println(String.valueOf(dividend) + " divided by " + String.valueOf(divisor) + " is " + String.valueOf(res.q) + " with remainder " + String.valueOf(res.r))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
