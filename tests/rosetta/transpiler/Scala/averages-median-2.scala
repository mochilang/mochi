// Generated by Mochi v0.10.39 on 2025-07-25 01:20:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def sel(list: ArrayBuffer[Double], k: Int): Double = {
    var i: Int = 0
    while (i <= k) {
      var minIndex: Int = i
      var j = i + 1
      while (j < (list).size) {
        if (list(j) < list(minIndex)) {
          minIndex = j
        }
        j = (j + 1).asInstanceOf[Int]
      }
      val tmp: Double = list(i)
      list(i) = list(minIndex)
      list(minIndex) = tmp
      i = (i + 1).asInstanceOf[Int]
    }
    return list(k)
  }
  
  def median(a: ArrayBuffer[Double]): Double = {
    var arr: ArrayBuffer[Double] = a
    val half: Int = ((arr).size / 2).asInstanceOf[Int]
    val med: Double = sel(arr, half)
    if (Math.floorMod((arr).size, 2) == 0) {
      return (med + arr(half - 1)) / 2.0
    }
    return med
  }
  
  def main(args: Array[String]): Unit = {
    println(String.valueOf(median(ArrayBuffer(3.0, 1.0, 4.0, 1.0))))
    println(String.valueOf(median(ArrayBuffer(3.0, 1.0, 4.0, 1.0, 5.0))))
  }
}
