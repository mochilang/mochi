// Generated by Mochi v0.10.40 on 2025-07-26 04:52:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val stx: String = "\u0002"
    val etx: String = "\u0003"
    def contains(s: String, ch: String): Boolean = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return true
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return false
    }
    def sortStrings(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
      var arr: ArrayBuffer[String] = xs
      var n: Int = (arr).size
      var i: Int = 0
      while (i < n) {
        var j: Int = 0
        while (j < (n - 1).asInstanceOf[Int]) {
          if (arr(j) > arr(j + 1)) {
            val tmp: String = arr(j)
            arr(j) = arr(j + 1)
            arr(j + 1) = tmp
          }
          j = (j + 1).asInstanceOf[Int]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return arr
    }
    def bwt(_s: String): Map[String,Any] = {
      var s: String = _s
      if (((s.contains(stx)).asInstanceOf[Boolean] || (s.contains(etx)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        return Map("err" -> (true), "res" -> (""))
      }
      s = (stx + s + etx).toString
      val le: Int = (s).size
      var table: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < le) {
        val rot: String = s.slice(i, le) + s.slice(0, i)
        table = table :+ rot
        i = (i + 1).asInstanceOf[Int]
      }
      table = sortStrings(table)
      var last: String = ""
      i = 0
      while (i < le) {
        last = last + table(i).slice(le - 1, le)
        i = (i + 1).asInstanceOf[Int]
      }
      return Map("err" -> (false), "res" -> (last))
    }
    def ibwt(r: String): String = {
      val le: Int = (r).size
      var table: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < le) {
        table = table :+ ""
        i = (i + 1).asInstanceOf[Int]
      }
      var n: Int = 0
      while (n < le) {
        i = 0
        while (i < le) {
          table(i) = r.slice(i, i + 1) + table(i)
          i = (i + 1).asInstanceOf[Int]
        }
        table = sortStrings(table)
        n = (n + 1).asInstanceOf[Int]
      }
      i = 0
      while (i < le) {
        if (table(i).slice(le - 1, le) == etx) {
          return table(i).slice(1, le - 1)
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return ""
    }
    def makePrintable(s: String): String = {
      var out: String = ""
      var i: Int = 0
      while (i < (s).size) {
        val ch: String = s.slice(i, i + 1)
        if (ch == stx) {
          out = out + "^"
        } else {
          if (ch == etx) {
            out = out + "|"
          } else {
            out = (out + ch).toString
          }
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return out
    }
    def main(): Any = {
      val examples: ArrayBuffer[String] = ArrayBuffer("banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\u0002ABC\u0003")
      for (t <- examples) {
        println(makePrintable(t.toString))
        val res: Map[String,Any] = bwt(t.toString)
        if ((res.getOrElse("err", null.asInstanceOf[Any])).asInstanceOf[Boolean]) {
          println(" --> ERROR: String can't contain STX or ETX")
          println(" -->")
        } else {
          val enc: String = (res.getOrElse("res", null.asInstanceOf[Any])).toString
          println(" --> " + makePrintable(enc))
          val r: String = ibwt(enc)
          println(" --> " + r)
        }
        println("")
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
