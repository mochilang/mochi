// Generated by Mochi v0.10.56 on 2025-08-04 00:19:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def weekday(y: BigInt, m: BigInt, d: BigInt): BigInt = {
  var yy: BigInt = y
  var mm: BigInt = m
  if (mm < BigInt(3)) {
    mm = mm + BigInt(12)
    yy = yy - BigInt(1)
  }
  val k: BigInt = yy % BigInt(100)
  val j: BigInt = yy / BigInt(100)
  val a: BigInt = BigInt(13) * (mm + BigInt(1)) / BigInt(5)
  val b: BigInt = k / BigInt(4)
  val c: BigInt = j / BigInt(4)
  return (d + a + k + b + c + BigInt(5) * j) % BigInt(7)
}

def main(): Any = {
  val months31: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(3), BigInt(5), BigInt(7), BigInt(8), BigInt(10), BigInt(12))
  val names: ArrayBuffer[String] = ArrayBuffer("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
  var count: BigInt = BigInt(0)
  var firstY: BigInt = BigInt(0)
  var firstM: BigInt = BigInt(0)
  var lastY: BigInt = BigInt(0)
  var lastM: BigInt = BigInt(0)
  var haveNone: ArrayBuffer[BigInt] = ArrayBuffer()
  println("Months with five weekends:")
  for (year <- BigInt(1900) until BigInt(2101)) {
    var hasOne: Boolean = false
    for (m <- months31) {
      if (weekday(BigInt(year.toString.toDouble.toInt), m, BigInt(1)) == BigInt(6)) {
        println("  " + String.valueOf(year) + " " + names((m - BigInt(1).toInt).toInt))
        count = count + BigInt(1)
        hasOne = true
        lastY = BigInt(year.toString.toDouble.toInt)
        lastM = m
        if (firstY == BigInt(0)) {
          firstY = BigInt(year.toString.toDouble.toInt)
          firstM = m
        }
      }
    }
    if ((!hasOne).asInstanceOf[Boolean]) {
      haveNone = haveNone :+ BigInt(year.toString.toDouble.toInt)
    }
  }
  println(String.valueOf(count) + " total")
  println("")
  println("First five dates of weekends:")
  for (i <- BigInt(0) until BigInt(5)) {
    val day: BigInt = BigInt(1) + BigInt(7) * i
    println("  Friday, " + names((firstM - BigInt(1).toInt).toInt) + " " + String.valueOf(day) + ", " + String.valueOf(firstY))
  }
  println("Last five dates of weekends:")
  for (i <- BigInt(0) until BigInt(5)) {
    val day: BigInt = BigInt(1) + BigInt(7) * i
    println("  Friday, " + names((lastM - BigInt(1).toInt).toInt) + " " + String.valueOf(day) + ", " + String.valueOf(lastY))
  }
  println("")
  println("Years with no months with five weekends:")
  for (y <- haveNone) {
    println("  " + String.valueOf(y))
  }
  println(String.valueOf((haveNone).size) + " total")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
