// Generated by Mochi v0.10.57 on 2025-08-04 20:52:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def pad2(n: BigInt): String = {
  if (n < 10) {
    return "0" + String.valueOf(n)
  }
  return String.valueOf(n)
}

def weekdayName(z: BigInt): String = {
  val names: ArrayBuffer[String] = ArrayBuffer("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
  return names((((z + 4) % 7).toInt).toInt)
}

def main(): Any = {
  val ts: BigInt = _now() / 1000000000
  var days: BigInt = ts / 86400
  var z: BigInt = days + 719468
  var era: BigInt = z / 146097
  var doe: BigInt = z - era * 146097
  var yoe: BigInt = (doe - doe / 1460 + doe / 36524 - doe / 146096) / BigInt(365)
  var y: BigInt = yoe + era * 400
  var doy: BigInt = doe - (365 * yoe + yoe / 4 - yoe / 100)
  var mp: BigInt = (5 * doy + 2) / BigInt(153)
  var d: BigInt = doy - (153 * mp + 2) / BigInt(5) + 1
  var m: BigInt = mp + 3
  if (m > 12) {
    y = y + 1
    m = m - 12
  }
  val iso: String = String.valueOf(y) + "-" + pad2(m) + "-" + pad2(d)
  println(iso)
  val months: ArrayBuffer[String] = ArrayBuffer("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
  val line: String = weekdayName(days) + ", " + months(((m - 1).toInt).toInt) + " " + String.valueOf(d) + ", " + String.valueOf(y)
  println(line)
}

def main(args: Array[String]): Unit = {
  main()
}
}
