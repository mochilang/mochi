// Generated by Mochi v0.10.42 on 2025-07-27 17:26:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def primesUpTo(n: BigInt): ArrayBuffer[BigInt] = {
      var sieve: ArrayBuffer[Boolean] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i <= n) {
        sieve = sieve :+ true
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      var p: BigInt = BigInt(2)
      while (p * p <= n) {
        if (sieve((p).toInt)) {
          var m = p * p
          while (m <= n) {
            sieve((m).toInt) = false
            m = (m + p).asInstanceOf[BigInt]
          }
        }
        p = (p + BigInt(1)).asInstanceOf[BigInt]
      }
      var res: ArrayBuffer[BigInt] = ArrayBuffer()
      var x: BigInt = BigInt(2)
      while (x <= n) {
        if (sieve((x).toInt)) {
          res = res :+ x
        }
        x = (x + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    val LIMIT: BigInt = BigInt(999999)
    val primes: ArrayBuffer[BigInt] = primesUpTo(LIMIT)
    def longestSeq(dir: String): Any = {
      var pd: BigInt = BigInt(0)
      var longSeqs: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2)))
      var currSeq: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
      var i: BigInt = BigInt(1)
      while (i < (primes).size) {
        val d: Int = primes((i).toInt) - primes((i - BigInt(1)).toInt)
        if (((dir == "ascending" && d <= pd).asInstanceOf[Boolean] || (dir == "descending" && d >= pd).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          if ((currSeq).size > (longSeqs((BigInt(0)).toInt)).size) {
            longSeqs = ArrayBuffer(currSeq)
          } else {
            if ((currSeq).size == (longSeqs((BigInt(0)).toInt)).size) {
              longSeqs = longSeqs :+ currSeq
            }
          }
          currSeq = ArrayBuffer(primes((i - BigInt(1)).toInt), primes((i).toInt))
        } else {
          currSeq = currSeq :+ primes((i).toInt)
        }
        pd = d
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      if ((currSeq).size > (longSeqs((BigInt(0)).toInt)).size) {
        longSeqs = ArrayBuffer(currSeq)
      } else {
        if ((currSeq).size == (longSeqs((BigInt(0)).toInt)).size) {
          longSeqs = longSeqs :+ currSeq
        }
      }
      println("Longest run(s) of primes with " + dir + " differences is " + String.valueOf((longSeqs((BigInt(0)).toInt)).size) + " :")
      for (ls <- longSeqs) {
        var diffs: ArrayBuffer[BigInt] = ArrayBuffer()
        var j: BigInt = BigInt(1)
        while (j < (ls).size) {
          diffs = diffs :+ ((ls(j)).toString.toDouble - (ls(j - BigInt(1))).toString.toDouble).asInstanceOf[BigInt]
          j = (j + BigInt(1)).asInstanceOf[BigInt]
        }
        var k: BigInt = BigInt(0)
        while (k < (ls).size - BigInt(1)) {
          println(List(String.valueOf(ls(k)) + " (" + String.valueOf(diffs((k).toInt)) + ") ", false).mkString(" "))
          k = (k + BigInt(1)).asInstanceOf[BigInt]
        }
        println(String.valueOf(ls((ls).size - BigInt(1))))
      }
      println("")
    }
    def main(): Any = {
      println("For primes < 1 million:\n")
      for (dir <- ArrayBuffer("ascending", "descending")) {
        longestSeq(dir.toString)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
