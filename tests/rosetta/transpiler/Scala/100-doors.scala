// Generated by Mochi v0.10.40 on 2025-07-25 10:47:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var doors: ArrayBuffer[Any] = ArrayBuffer()
    for (i <- 0 until 100) {
      doors = doors :+ false
    }
    for (pass <- 1 until 101) {
      var idx = pass - 1
      while (idx.asInstanceOf[Int] < 100) {
        doors(idx) = !(doors(idx)).asInstanceOf[Boolean]
        idx = idx.asInstanceOf[Int] + pass.asInstanceOf[Int]
      }
    }
    for (row <- 0 until 10) {
      var line: String = ""
      for (col <- 0 until 10) {
        val idx: Int = (row * 10).asInstanceOf[Int] + col.asInstanceOf[Int]
        if ((doors(idx)).asInstanceOf[Boolean]) {
          line = line + "1"
        } else {
          line = line + "0"
        }
        if (col.asInstanceOf[Int] < 9) {
          line = line + " "
        }
      }
      println(line)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
