// Generated by Mochi v0.10.52 on 2025-08-01 19:07:09 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val dayNames: ArrayBuffer[String] = ArrayBuffer("Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange")
    val seasons: ArrayBuffer[String] = ArrayBuffer("Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath")
    val holydays: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("Mungday", "Chaoflux"), ArrayBuffer("Mojoday", "Discoflux"), ArrayBuffer("Syaday", "Confuflux"), ArrayBuffer("Zaraday", "Bureflux"), ArrayBuffer("Maladay", "Afflux"))
    def isLeap(y: BigInt): Boolean = {
      if (y % BigInt(400) == BigInt(0)) {
        return true
      }
      if (y % BigInt(100) == BigInt(0)) {
        return false
      }
      return y % BigInt(4) == BigInt(0)
    }
    val daysBefore: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(31), BigInt(59), BigInt(90), BigInt(120), BigInt(151), BigInt(181), BigInt(212), BigInt(243), BigInt(273), BigInt(304), BigInt(334))
    def dayOfYear(y: BigInt, m: BigInt, d: BigInt): BigInt = {
      var doy: Any = daysBefore((m - BigInt(1)).toInt) + d
      if ((m > BigInt(2) && isLeap(y)).asInstanceOf[Boolean]) {
        doy = doy.asInstanceOf[BigInt] + BigInt(1)
      }
      return doy.asInstanceOf[BigInt]
    }
    def ordinal(n: BigInt): String = {
      var suff: String = "th"
      val mod100: BigInt = n % BigInt(100)
      if ((mod100 < BigInt(11) || mod100 > BigInt(13)).asInstanceOf[Boolean]) {
        val r: BigInt = n % BigInt(10)
        if (r == BigInt(1)) {
          suff = "st"
        } else {
          if (r == BigInt(2)) {
            suff = "nd"
          } else {
            if (r == BigInt(3)) {
              suff = "rd"
            }
          }
        }
      }
      return String.valueOf(n) + suff
    }
    def discordian(y: BigInt, m: BigInt, d: BigInt): String = {
      if (((isLeap(y) && m == BigInt(2)).asInstanceOf[Boolean] && d == BigInt(29)).asInstanceOf[Boolean]) {
        return "St. Tib's Day, YOLD " + String.valueOf(y + BigInt(1166))
      }
      var doy: BigInt = dayOfYear(y, m, d)
      if ((isLeap(y) && doy > BigInt(60)).asInstanceOf[Boolean]) {
        doy = doy - BigInt(1)
      }
      var idx: BigInt = doy - BigInt(1)
      val season: BigInt = idx / BigInt(73)
      val day: BigInt = idx % BigInt(73)
      var res: String = dayNames((idx % BigInt(5)).toInt) + ", the " + ordinal(day + BigInt(1)) + " day of " + seasons((season).toInt) + " in the YOLD " + String.valueOf(y + BigInt(1166))
      if (day == BigInt(4)) {
        res = res + ". Celebrate " + holydays((season).toInt)((BigInt(0)).toInt) + "!"
      }
      if (day == BigInt(49)) {
        res = res + ". Celebrate " + holydays((season).toInt)((BigInt(1)).toInt) + "!"
      }
      return res
    }
    def main(): Any = {
      val dates: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2010), BigInt(7), BigInt(22)), ArrayBuffer(BigInt(2012), BigInt(2), BigInt(28)), ArrayBuffer(BigInt(2012), BigInt(2), BigInt(29)), ArrayBuffer(BigInt(2012), BigInt(3), BigInt(1)), ArrayBuffer(BigInt(2012), BigInt(12), BigInt(31)), ArrayBuffer(BigInt(2013), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(2100), BigInt(12), BigInt(31)), ArrayBuffer(BigInt(2015), BigInt(10), BigInt(19)), ArrayBuffer(BigInt(2010), BigInt(1), BigInt(5)), ArrayBuffer(BigInt(2011), BigInt(5), BigInt(3)), ArrayBuffer(BigInt(2000), BigInt(3), BigInt(13)))
      var i: BigInt = BigInt(0)
      while (i < (dates).size) {
        val dt: ArrayBuffer[BigInt] = dates((i).toInt)
        println(discordian(dt((BigInt(0)).toInt), dt((BigInt(1)).toInt), dt((BigInt(2)).toInt)))
        i = i + BigInt(1)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
