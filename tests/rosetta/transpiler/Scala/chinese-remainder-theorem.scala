// Generated by Mochi v0.10.41 on 2025-07-26 17:21:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def egcd(a: BigInt, b: BigInt): ArrayBuffer[BigInt] = {
      if (a == BigInt(0)) {
        return (ArrayBuffer(b, BigInt(0), BigInt(1))).asInstanceOf[ArrayBuffer[BigInt]]
      }
      val res: ArrayBuffer[BigInt] = egcd((b % a).asInstanceOf[BigInt], a)
      val g: BigInt = res((BigInt(0)).toInt)
      val x1: BigInt = res((BigInt(1)).toInt)
      val y1: BigInt = res((BigInt(2)).toInt)
      return (ArrayBuffer(g, y1 - b / a * x1, x1)).asInstanceOf[ArrayBuffer[BigInt]]
    }
    def modInv(a: BigInt, m: BigInt): BigInt = {
      val r: ArrayBuffer[BigInt] = egcd(a, m)
      if (r((BigInt(0)).toInt) != BigInt(1)) {
        return BigInt(0)
      }
      val x: BigInt = r((BigInt(1)).toInt)
      if (x < BigInt(0)) {
        return (x + m).asInstanceOf[BigInt]
      }
      return x
    }
    def crt(a: ArrayBuffer[BigInt], n: ArrayBuffer[BigInt]): BigInt = {
      var prod: BigInt = BigInt(1)
      var i: BigInt = BigInt(0)
      while (i < (n).size) {
        prod = (prod * n((i).toInt)).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      var x: BigInt = BigInt(0)
      i = BigInt(0)
      while (i < (n).size) {
        val ni: BigInt = n((i).toInt)
        val ai: BigInt = a((i).toInt)
        val p = prod / ni
        val inv: BigInt = modInv((p % ni).asInstanceOf[BigInt], ni)
        x = (x + ai * inv * p).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (x % prod).asInstanceOf[BigInt]
    }
    val n: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(5), BigInt(7))
    val a: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(3), BigInt(2))
    val res: BigInt = crt(a, n)
    println(String.valueOf(res) + " <nil>")
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
