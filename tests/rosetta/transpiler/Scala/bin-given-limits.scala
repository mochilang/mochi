// Generated by Mochi v0.10.40 on 2025-07-26 00:05:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def getBins(limits: ArrayBuffer[Int], data: ArrayBuffer[Int]): ArrayBuffer[Int] = {
      var n: Int = (limits).size
      var bins: ArrayBuffer[Int] = ArrayBuffer()
      var i: Int = 0
      while (i < (n + 1).asInstanceOf[Int]) {
        bins = bins :+ 0
        i = (i + 1).asInstanceOf[Int]
      }
      var j: Int = 0
      val _br1 = new Breaks
      _br1.breakable {
        while (j < (data).size) {
          val d: Int = data(j)
          var index: Int = 0
          val _br2 = new Breaks
          _br2.breakable {
            while (index < (limits).size) {
              if (d < limits(index)) {
                _br2.break()
              }
              if (d == limits(index)) {
                index = (index + 1).asInstanceOf[Int]
                _br2.break()
              }
              index = (index + 1).asInstanceOf[Int]
            }
          }
          bins(index) = bins(index) + 1
          j = (j + 1).asInstanceOf[Int]
        }
      }
      return bins
    }
    def padLeft(n: Int, width: Int): String = {
      var s = String.valueOf(n)
      var pad = width - (s).size
      var out: String = ""
      var i: Int = 0
      while (i < pad) {
        out = out + " "
        i = (i + 1).asInstanceOf[Int]
      }
      return (out + s).toString
    }
    def printBins(limits: ArrayBuffer[Int], bins: ArrayBuffer[Int]): Any = {
      var n: Int = (limits).size
      println("           < " + padLeft(limits(0), 3) + " = " + padLeft(bins(0), 2))
      var i: Int = 1
      while (i < n) {
        println(">= " + padLeft(limits(i - 1), 3) + " and < " + padLeft(limits(i), 3) + " = " + padLeft(bins(i), 2))
        i = (i + 1).asInstanceOf[Int]
      }
      println(">= " + padLeft(limits(n - 1), 3) + "           = " + padLeft(bins(n), 2))
      println("")
    }
    def main(): Any = {
      val limitsList: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer(ArrayBuffer(23, 37, 43, 53, 67, 83), ArrayBuffer(14, 18, 249, 312, 389, 392, 513, 591, 634, 720))
      val dataList: ArrayBuffer[ArrayBuffer[Int]] = ArrayBuffer(ArrayBuffer(95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55), ArrayBuffer(445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749))
      var i: Int = 0
      while (i < (limitsList).size) {
        println("Example " + String.valueOf(i + 1) + "\n")
        val bins: ArrayBuffer[Int] = getBins(limitsList(i), dataList(i))
        printBins(limitsList(i), bins)
        i = (i + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
