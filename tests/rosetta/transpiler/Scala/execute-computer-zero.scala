// Generated by Mochi v0.10.52 on 2025-08-02 02:06:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floorMod(a: BigInt, b: BigInt): BigInt = {
  var r: BigInt = a % b
  if (r < BigInt(0)) {
    r = r + b
  }
  return r
}

def run(bc: ArrayBuffer[BigInt]): BigInt = {
  var acc: BigInt = BigInt(0)
  var pc: BigInt = BigInt(0)
  val _br0 = new Breaks
  _br0.breakable {
    while (pc < BigInt(32)) {
      val op: BigInt = bc((pc).toInt) / BigInt(32)
      val arg: BigInt = bc((pc).toInt) % BigInt(32)
      pc = pc + BigInt(1)
      if (op == BigInt(0)) {
      } else {
        if (op == BigInt(1)) {
          acc = bc((arg).toInt)
        } else {
          if (op == BigInt(2)) {
            bc((arg).toInt) = acc
          } else {
            if (op == BigInt(3)) {
              acc = floorMod(acc + bc((arg).toInt), BigInt(256))
            } else {
              if (op == BigInt(4)) {
                acc = floorMod(acc - bc((arg).toInt), BigInt(256))
              } else {
                if (op == BigInt(5)) {
                  if (acc == BigInt(0)) {
                    pc = arg
                  }
                } else {
                  if (op == BigInt(6)) {
                    pc = arg
                  } else {
                    if (op == BigInt(7)) {
                      _br0.break()
                    } else {
                      _br0.break()
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return acc
}

def main(): Any = {
  val programs: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(35), BigInt(100), BigInt(224), BigInt(2), BigInt(2), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(44), BigInt(106), BigInt(76), BigInt(43), BigInt(141), BigInt(75), BigInt(168), BigInt(192), BigInt(44), BigInt(224), BigInt(8), BigInt(7), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(46), BigInt(79), BigInt(109), BigInt(78), BigInt(47), BigInt(77), BigInt(48), BigInt(145), BigInt(171), BigInt(80), BigInt(192), BigInt(46), BigInt(224), BigInt(1), BigInt(1), BigInt(0), BigInt(8), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(45), BigInt(111), BigInt(69), BigInt(112), BigInt(71), BigInt(0), BigInt(78), BigInt(0), BigInt(171), BigInt(79), BigInt(192), BigInt(46), BigInt(224), BigInt(32), BigInt(0), BigInt(28), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(6), BigInt(0), BigInt(2), BigInt(26), BigInt(5), BigInt(20), BigInt(3), BigInt(30), BigInt(1), BigInt(22), BigInt(4), BigInt(24)), ArrayBuffer(BigInt(35), BigInt(132), BigInt(224), BigInt(0), BigInt(255), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(35), BigInt(132), BigInt(224), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(35), BigInt(100), BigInt(224), BigInt(1), BigInt(255), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))
  var i: BigInt = BigInt(0)
  while (i < (programs).size) {
    val res: BigInt = run(programs((i).toInt))
    println(String.valueOf(res))
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
