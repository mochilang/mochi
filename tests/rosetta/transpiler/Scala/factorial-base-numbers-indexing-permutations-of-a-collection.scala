// Generated by Mochi v0.10.52 on 2025-08-02 02:07:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def split(s: String, sep: String): ArrayBuffer[String] = {
  var parts: ArrayBuffer[String] = ArrayBuffer()
  var cur: String = ""
  var i: BigInt = BigInt(0)
  while (i < (s).size) {
    if ((((sep).size > BigInt(0) && i + (sep).size <= (s).size).asInstanceOf[Boolean] && s.slice((i).toInt, (i + (sep).size).toInt) == sep).asInstanceOf[Boolean]) {
      parts = parts :+ cur
      cur = ""
      i = i + (sep).size
    } else {
      cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
      i = i + BigInt(1)
    }
  }
  parts = parts :+ cur
  return parts
}

def parseIntStr(str: String): BigInt = {
  var i: BigInt = BigInt(0)
  var neg: Boolean = false
  if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
    neg = true
    i = BigInt(1)
  }
  var n: BigInt = BigInt(0)
  val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
  while (i < (str).size) {
    n = n * BigInt(10) + digits(str.slice((i).toInt, (i + BigInt(1)).toInt))
    i = i + BigInt(1)
  }
  if (neg) {
    n = BigInt(0) - n
  }
  return n
}

def joinInts(nums: ArrayBuffer[BigInt], sep: String): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < (nums).size) {
    if (i > BigInt(0)) {
      s = (s + sep).toString
    }
    s = s + String.valueOf(nums((i).toInt))
    i = i + BigInt(1)
  }
  return s
}

def undot(s: String): ArrayBuffer[BigInt] = {
  var parts = ArrayBuffer(s.split("."): _*)
  var nums: ArrayBuffer[BigInt] = ArrayBuffer()
  for (p <- parts) {
    nums = nums :+ BigInt((_parseIntStr(p, BigInt(10))).toInt)
  }
  return nums
}

def factorial(n: BigInt): BigInt = {
  var f: BigInt = BigInt(1)
  var i: BigInt = BigInt(2)
  while (i <= n) {
    f = f * i
    i = i + BigInt(1)
  }
  return f
}

def genFactBaseNums(size: BigInt, countOnly: Boolean): ArrayBuffer[Any] = {
  var results: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var count: BigInt = BigInt(0)
  var n: BigInt = BigInt(0)
  val _br5 = new Breaks
  _br5.breakable {
    while (true) {
      var radix: BigInt = BigInt(2)
      var res: ArrayBuffer[BigInt] = ArrayBuffer()
      if ((!countOnly).asInstanceOf[Boolean]) {
        var z: BigInt = BigInt(0)
        while (z < size) {
          res = res :+ BigInt(0)
          z = z + BigInt(1)
        }
      }
      var k: BigInt = n
      while (k > BigInt(0)) {
        var div: BigInt = k / radix
        var rem: BigInt = k % radix
        if (((!countOnly).asInstanceOf[Boolean] && radix <= size + BigInt(1)).asInstanceOf[Boolean]) {
          res((size.toString.toDouble - radix.toString.toDouble + BigInt(1).toString.toDouble).toInt) = rem
        }
        k = div
        radix = radix + BigInt(1)
      }
      if (radix > size + BigInt(2)) {
        _br5.break()
      }
      count = count + BigInt(1)
      if ((!countOnly).asInstanceOf[Boolean]) {
        results = results :+ res
      }
      n = n + BigInt(1)
    }
  }
  return ArrayBuffer(results, count)
}

def mapToPerms(factNums: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var perms: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var psize: BigInt = (factNums((BigInt(0)).toInt)).size + BigInt(1).toInt
  var start: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < psize) {
    start = start :+ i
    i = i + BigInt(1)
  }
  for (fn <- factNums) {
    var perm: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = BigInt(0)
    while (j < (start).size) {
      perm = perm :+ start((j).toInt)
      j = j + BigInt(1)
    }
    var m: BigInt = BigInt(0)
    while (m < (fn).size) {
      var g: BigInt = fn((m).toInt)
      if (g != BigInt(0)) {
        var first: BigInt = m
        var last: BigInt = m + g
        var t: BigInt = BigInt(1)
        while (t <= g) {
          var temp: BigInt = perm((first).toInt)
          var x: BigInt = first + BigInt(1)
          while (x <= last) {
            perm((x - BigInt(1)).toInt) = perm((x).toInt)
            x = x + BigInt(1)
          }
          perm((last).toInt) = temp
          t = t + BigInt(1)
        }
      }
      m = m + BigInt(1)
    }
    perms = perms :+ perm
  }
  return perms
}

def randInt(n: BigInt): BigInt = {
  seed = (seed * BigInt(1664525) + BigInt(1013904223)) % BigInt(2147483647)
  return seed % n
}

def main(): Any = {
  val g: ArrayBuffer[Any] = genFactBaseNums(BigInt(3), false)
  var factNums: Any = g((BigInt(0)).toInt)
  var perms: ArrayBuffer[ArrayBuffer[BigInt]] = mapToPerms(factNums.asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]])
  var i: BigInt = BigInt(0)
  while (i < (factNums.toString).size) {
    println(joinInts((factNums.asInstanceOf[ArrayBuffer[Any]](i)).asInstanceOf[ArrayBuffer[BigInt]], ".") + " -> " + joinInts(perms((i).toInt), ""))
    i = i + BigInt(1)
  }
  val count2: BigInt = factorial(BigInt(11))
  println("\nPermutations generated = " + String.valueOf(count2))
  println("compared to 11! which  = " + String.valueOf(factorial(BigInt(11))))
  println("")
  val fbn51s: ArrayBuffer[String] = ArrayBuffer("39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1")
  factNums = ArrayBuffer(undot(fbn51s((BigInt(0)).toInt)), undot(fbn51s((BigInt(1)).toInt)))
  perms = mapToPerms(factNums.asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]])
  val shoe: String = "A\u2660K\u2660Q\u2660J\u2660T\u26609\u26608\u26607\u26606\u26605\u26604\u26603\u26602\u2660A\u2665K\u2665Q\u2665J\u2665T\u26659\u26658\u26657\u26656\u26655\u26654\u26653\u26652\u2665A\u2666K\u2666Q\u2666J\u2666T\u26669\u26668\u26667\u26666\u26665\u26664\u26663\u26662\u2666A\u2663K\u2663Q\u2663J\u2663T\u26639\u26638\u26637\u26636\u26635\u26634\u26633\u26632\u2663"
  var cards: ArrayBuffer[String] = ArrayBuffer()
  i = BigInt(0)
  while (i < BigInt(52)) {
    var card: String = shoe.slice((BigInt(2) * i).toInt, (BigInt(2) * i + BigInt(2)).toInt)
    if (card.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "T") {
      card = "10" + card.slice((BigInt(1)).toInt, (BigInt(2)).toInt)
    }
    cards = cards :+ card
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < (fbn51s).size) {
    println(fbn51s((i).toInt))
    var perm: ArrayBuffer[BigInt] = perms((i).toInt)
    var j: BigInt = BigInt(0)
    var line: String = ""
    while (j < (perm).size) {
      line = (line + cards((perm((j).toInt)).toInt)).toString
      j = j + BigInt(1)
    }
    println(line + "\n")
    i = i + BigInt(1)
  }
  var fbn51: ArrayBuffer[BigInt] = ArrayBuffer()
  i = BigInt(0)
  while (i < BigInt(51)) {
    fbn51 = fbn51 :+ randInt(BigInt(52) - i)
    i = i + BigInt(1)
  }
  println(joinInts(fbn51, "."))
  perms = mapToPerms((ArrayBuffer(fbn51)).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]])
  var line: String = ""
  i = BigInt(0)
  while (i < (perms((BigInt(0)).toInt)).size) {
    line = (line + cards((perms((BigInt(0)).toInt)((i).toInt)).toInt)).toString
    i = i + BigInt(1)
  }
  println(line)
}

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
