// Generated by Mochi v0.10.50 on 2025-07-31 00:50:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class StepResult(var n: BigInt, var ok: Boolean)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def step(_n: BigInt, program: ArrayBuffer[ArrayBuffer[BigInt]]): StepResult = {
      var n: BigInt = _n
      var i: BigInt = BigInt(0)
      while (i < (program).size) {
        val num: BigInt = program((i).toInt)((BigInt(0)).toInt)
        val den: BigInt = program((i).toInt)((BigInt(1)).toInt)
        if (n % den == BigInt(0)) {
          n = (n / den * num).asInstanceOf[BigInt]
          return StepResult(n, true)
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return StepResult(n, false)
    }
    def main(): Any = {
      val program: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(17), BigInt(91)), ArrayBuffer(BigInt(78), BigInt(85)), ArrayBuffer(BigInt(19), BigInt(51)), ArrayBuffer(BigInt(23), BigInt(38)), ArrayBuffer(BigInt(29), BigInt(33)), ArrayBuffer(BigInt(77), BigInt(29)), ArrayBuffer(BigInt(95), BigInt(23)), ArrayBuffer(BigInt(77), BigInt(19)), ArrayBuffer(BigInt(1), BigInt(17)), ArrayBuffer(BigInt(11), BigInt(13)), ArrayBuffer(BigInt(13), BigInt(11)), ArrayBuffer(BigInt(15), BigInt(14)), ArrayBuffer(BigInt(15), BigInt(2)), ArrayBuffer(BigInt(55), BigInt(1)))
      var n: BigInt = BigInt(2)
      var primes: BigInt = BigInt(0)
      var count: BigInt = BigInt(0)
      val limit: BigInt = BigInt(1000000)
      val two: BigInt = BigInt(2)
      var line: String = ""
      val _br1 = new Breaks
      _br1.breakable {
        while (primes < BigInt(20) && count < limit) {
          val res: StepResult = step(n, program)
          n = res.n
          if ((!res.ok).asInstanceOf[Boolean]) {
            _br1.break()
          }
          var m: BigInt = n
          var pow: BigInt = BigInt(0)
          while (m % two == BigInt(0)) {
            m = (m / two).asInstanceOf[BigInt]
            pow = (pow + BigInt(1)).asInstanceOf[BigInt]
          }
          if ((m == BigInt(1) && pow > BigInt(1)).asInstanceOf[Boolean]) {
            line = line + String.valueOf(pow) + " "
            primes = (primes + BigInt(1)).asInstanceOf[BigInt]
          }
          count = (count + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      if ((line).size > BigInt(0)) {
        println(line.slice((BigInt(0)).toInt, ((line).size - BigInt(1)).toInt))
      } else {
        println("")
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
