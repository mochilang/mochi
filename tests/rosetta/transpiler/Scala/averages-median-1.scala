// Generated by Mochi v0.10.39 on 2025-07-25 01:20:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def sortFloat(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
    var arr: ArrayBuffer[Double] = xs
    var n: Int = (arr).size
    var i: Int = 0
    while (i < n) {
      var j: Int = 0
      while (j < (n - 1).asInstanceOf[Int]) {
        if (arr(j) > arr(j + 1)) {
          val tmp: Double = arr(j)
          arr(j) = arr(j + 1)
          arr(j + 1) = tmp
        }
        j = (j + 1).asInstanceOf[Int]
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return arr
  }
  
  def median(a: ArrayBuffer[Double]): Double = {
    var arr: ArrayBuffer[Double] = sortFloat(a)
    val half: Int = ((arr).size / 2).asInstanceOf[Int]
    var m: Double = arr(half)
    if (Math.floorMod((arr).size, 2) == 0) {
      m = (m + arr(half - 1)) / 2.0
    }
    return m
  }
  
  def main(args: Array[String]): Unit = {
    println(String.valueOf(median(ArrayBuffer(3.0, 1.0, 4.0, 1.0))))
    println(String.valueOf(median(ArrayBuffer(3.0, 1.0, 4.0, 1.0, 5.0))))
  }
}
