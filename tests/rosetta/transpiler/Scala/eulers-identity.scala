// Generated by Mochi v0.10.52 on 2025-08-02 02:05:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Complex(var re: Double, var im: Double)

def sinApprox(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var n: BigInt = BigInt(1)
  while (n <= BigInt(10)) {
    val denom: Double = (BigInt(2) * n * (BigInt(2) * n + BigInt(1))).toString.toDouble
    term = (-term * x * x / denom).toString.toDouble
    sum = (sum + term).toString.toDouble
    n = n + BigInt(1)
  }
  return sum
}

def cosApprox(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(10)) {
    val denom: Double = ((BigInt(2) * n - BigInt(1)) * (BigInt(2) * n)).toString.toDouble
    term = (-term * x * x / denom).toString.toDouble
    sum = (sum + term).toString.toDouble
    n = n + BigInt(1)
  }
  return sum
}

def cis(x: Double): Complex = {
  return Complex(cosApprox(x), sinApprox(x))
}

def add(a: Complex, b: Complex): Complex = {
  return Complex(a.re + b.re, a.im + b.im)
}

def cstr(a: Complex): String = {
  var s: String = "(" + String.valueOf(a.re)
  if (a.im >= BigInt(0).toString.toDouble) {
    s = s + "+" + String.valueOf(a.im) + "i)"
  } else {
    s = s + String.valueOf(a.im) + "i)"
  }
  return s
}

def main(): Any = {
  val result: Complex = add(cis(PI), Complex(1.0, 0.0))
  println(cstr(result))
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
