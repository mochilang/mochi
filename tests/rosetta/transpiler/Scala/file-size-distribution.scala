// Generated by Mochi v0.10.50 on 2025-07-30 21:35:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def log10floor(n: BigInt): BigInt = {
      var p: BigInt = BigInt(0)
      var v: BigInt = n
      while (v >= BigInt(10)) {
        v = v / BigInt(10)
        p = (p + BigInt(1)).asInstanceOf[BigInt]
      }
      return p
    }
    def commatize(n: BigInt): String = {
      var s = String.valueOf(n)
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if ((i > BigInt(0) && ((s).size - i) % BigInt(3) == BigInt(0)).asInstanceOf[Boolean]) {
          res = res + ","
        }
        res = res + s.slice((i).toInt, (i + BigInt(1)).toInt)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def showDistribution(sizes: ArrayBuffer[BigInt]): Any = {
      var bins: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < BigInt(12)) {
        bins = bins :+ BigInt(0)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      var total: BigInt = BigInt(0)
      for (sz <- sizes) {
        total = (total + sz).asInstanceOf[BigInt]
        var idx: BigInt = BigInt(0)
        if (sz > BigInt(0)) {
          idx = (log10floor(sz) + BigInt(1)).asInstanceOf[BigInt]
        }
        bins((idx).toInt) = bins((idx).toInt) + BigInt(1)
      }
      println("File size distribution:\n")
      i = BigInt(0)
      while (i < (bins).size) {
        var prefix: String = "  "
        if (i > BigInt(0)) {
          prefix = "+ "
        }
        println(prefix + "Files less than 10 ^ " + String.valueOf(i) + " bytes : " + String.valueOf(bins((i).toInt)))
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      println("                                  -----")
      println("= Total number of files         : " + String.valueOf((sizes).size))
      println("  Total size of files           : " + commatize(total) + " bytes")
    }
    def main(): Any = {
      val sizes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(9), BigInt(10), BigInt(99), BigInt(100), BigInt(1234), BigInt(50000), BigInt(730000), BigInt(8200000))
      showDistribution(sizes)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
