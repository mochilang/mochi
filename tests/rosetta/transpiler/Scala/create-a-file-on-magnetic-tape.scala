// Generated by Mochi v0.10.42 on 2025-07-27 21:55:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def gzipWriter(w: Any): Any = {
      return w
    }
    def tarWriter(w: Any): Any = {
      return w
    }
    def tarWriteHeader(w: Any, hdr: scala.collection.mutable.Map[String,Any]): Any = {
    }
    def tarWrite(w: Any, data: String): Any = {
    }
    def main(): Any = {
      val filename: String = "TAPE.FILE"
      val data: String = ""
      val outfile: String = ""
      val gzipFlag: Boolean = false
      var w: Any = null
      if (outfile != "") {
        w = null
      }
      if (gzipFlag) {
        w = gzipWriter(w)
      }
      w = tarWriter(w)
      var hdr: scala.collection.mutable.Map[String,Any] = scala.collection.mutable.Map("Name" -> (filename), "Mode" -> (BigInt(432)), "Size" -> ((data).size), "ModTime" -> (_now()), "Typeflag" -> (BigInt(0)), "Uname" -> ("guest"), "Gname" -> ("guest"))
      tarWriteHeader(w, hdr)
      tarWrite(w, data)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
