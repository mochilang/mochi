// Generated by Mochi v0.10.57 on 2025-08-04 17:09:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def gzipWriter(w: Any): Any = {
  return w
}

def tarWriter(w: Any): Any = {
  return w
}

def tarWriteHeader(w: Any, hdr: scala.collection.mutable.Map[String,Any]): Any = {
}

def tarWrite(w: Any, data: String): Any = {
}

def main(): Any = {
  val filename: String = "TAPE.FILE"
  val data: String = ""
  val outfile: String = ""
  val gzipFlag: Boolean = false
  var w: Any = null
  if (outfile != "") {
    w = null
  }
  if (gzipFlag) {
    w = gzipWriter(w)
  }
  w = tarWriter(w)
  var hdr: scala.collection.mutable.Map[String,Any] = (scala.collection.mutable.Map("Name" -> (filename), "Mode" -> (432), "Size" -> ((data).size), "ModTime" -> (_now()), "Typeflag" -> (0), "Uname" -> ("guest"), "Gname" -> ("guest"))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
  tarWriteHeader(w, hdr)
  tarWrite(w, data)
}

def main(args: Array[String]): Unit = {
  main()
}
}
