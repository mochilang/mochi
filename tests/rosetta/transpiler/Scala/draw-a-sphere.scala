// Generated by Mochi v0.10.52 on 2025-08-01 19:21:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class V3(var x: Double, var y: Double, var z: Double)

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def powf(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = (result * base).toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def normalize(v: V3): V3 = {
  val len: Double = sqrtApprox((v.x * v.x).toString.toDouble + (v.y * v.y).toString.toDouble + v.z * v.z)
  return V3(v.x / len, v.y / len, v.z / len)
}

def dot(a: V3, b: V3): Double = {
  val d: Double = (a.x * b.x).toString.toDouble + (a.y * b.y).toString.toDouble + a.z * b.z
  if (d < 0.0) {
    return (-d).toString.toDouble
  }
  return 0.0
}

def drawSphere(r: BigInt, k: BigInt, ambient: Double, light: V3, shades: String): Any = {
  var i: BigInt = BigInt(0) - r
  while (i <= r) {
    val x: Double = i.toString.toDouble + 0.5
    var line: String = ""
    var j: BigInt = BigInt(0) - BigInt(2) * r
    while (j <= BigInt(2) * r) {
      val y: Double = j.toString.toDouble / 2.0 + 0.5
      if ((x * x).toString.toDouble + (y * y).toString.toDouble <= r.toString.toDouble * r.toString.toDouble) {
        var zsq: Double = r.toString.toDouble * r.toString.toDouble - x * x - y * y
        var vec: V3 = normalize(V3(x, y, sqrtApprox(zsq)))
        var b: Double = powf(dot(light, vec), k) + ambient
        var intensity: Int = (1.0 - b) * (((shades).size).toString.toDouble - 1.0).toInt
        if (intensity < BigInt(0)) {
          intensity = BigInt(0)
        }
        if (intensity >= (shades).size) {
          intensity = (shades).size - BigInt(1).toInt
        }
        line = line + shades.slice((intensity).toInt, (intensity + BigInt(1).toInt).toInt)
      } else {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(line)
    i = i + BigInt(1)
  }
}

def main(): Any = {
  val shades: String = ".:!*oe&#%@"
  var light: V3 = normalize(V3(30.0, 30.0, -50.0))
  drawSphere(BigInt(20), BigInt(4), 0.1, light, shades)
  drawSphere(BigInt(10), BigInt(2), 0.4, light, shades)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
