// Generated by Mochi v0.10.40 on 2025-07-25 20:39:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def square_to_maps(square: ArrayBuffer[ArrayBuffer[String]]): Map[String,Any] = {
    var emap: Map[String,ArrayBuffer[Int]] = Map()
    var dmap: Map[String,String] = Map()
    var x: Int = 0
    while (x < (square).size) {
      val row: ArrayBuffer[String] = square(x)
      var y: Int = 0
      while (y < (row).size) {
        val ch: String = row(y)
        emap(ch) = ArrayBuffer(x, y)
        dmap(String.valueOf(x) + "," + String.valueOf(y)) = ch
        y = (y + 1).asInstanceOf[Int]
      }
      x = (x + 1).asInstanceOf[Int]
    }
    return Map("e" -> (emap), "d" -> (dmap))
  }
  
  def remove_space(text: String, emap: Map[String,ArrayBuffer[Int]]): String = {
    val s = text.toUpperCase()
    var out: String = ""
    var i: Int = 0
    while (i < (s).size) {
      val ch: String = s.slice(i, i + 1)
      if ((ch != " " && (emap.contains(ch)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        out = (out + ch).toString
      }
      i = (i + 1).asInstanceOf[Int]
    }
    return out
  }
  
  def encrypt(_text: String, emap: Map[String,ArrayBuffer[Int]], dmap: Map[String,String]): String = {
    var text: String = _text
    text = remove_space(text, emap)
    var row0: ArrayBuffer[Int] = ArrayBuffer()
    var row1: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < (text).size) {
      val ch: String = text.slice(i, i + 1)
      val xy: ArrayBuffer[Int] = emap.getOrElse(ch, null.asInstanceOf[ArrayBuffer[Int]])
      row0 = row0 :+ xy(0)
      row1 = row1 :+ xy(1)
      i = (i + 1).asInstanceOf[Int]
    }
    for (v <- row1) {
      row0 = row0 :+ v
    }
    var res: String = ""
    var j: Int = 0
    while (j < (row0).size) {
      val key: String = String.valueOf(row0(j)) + "," + String.valueOf(row0(j + 1))
      res = (res + dmap.getOrElse(key, null.asInstanceOf[String])).toString
      j = (j + 2).asInstanceOf[Int]
    }
    return res
  }
  
  def decrypt(_text: String, emap: Map[String,ArrayBuffer[Int]], dmap: Map[String,String]): String = {
    var text: String = _text
    text = remove_space(text, emap)
    var coords: ArrayBuffer[Int] = ArrayBuffer()
    var i: Int = 0
    while (i < (text).size) {
      val ch: String = text.slice(i, i + 1)
      val xy: ArrayBuffer[Int] = emap.getOrElse(ch, null.asInstanceOf[ArrayBuffer[Int]])
      coords = coords :+ xy(0)
      coords = coords :+ xy(1)
      i = (i + 1).asInstanceOf[Int]
    }
    var half: Int = (coords).size / 2
    var k1: ArrayBuffer[Int] = ArrayBuffer()
    var k2: ArrayBuffer[Int] = ArrayBuffer()
    var idx: Int = 0
    while (idx < half) {
      k1 = k1 :+ coords(idx)
      idx = (idx + 1).asInstanceOf[Int]
    }
    while (idx < (coords).size) {
      k2 = k2 :+ coords(idx)
      idx = (idx + 1).asInstanceOf[Int]
    }
    var res: String = ""
    var j: Int = 0
    while (j < half) {
      val key: String = String.valueOf(k1(j)) + "," + String.valueOf(k2(j))
      res = (res + dmap.getOrElse(key, null.asInstanceOf[String])).toString
      j = (j + 1).asInstanceOf[Int]
    }
    return res
  }
  
  def main(): Any = {
    val squareRosetta: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("A", "B", "C", "D", "E"), ArrayBuffer("F", "G", "H", "I", "K"), ArrayBuffer("L", "M", "N", "O", "P"), ArrayBuffer("Q", "R", "S", "T", "U"), ArrayBuffer("V", "W", "X", "Y", "Z"), ArrayBuffer("J", "1", "2", "3", "4"))
    val squareWikipedia: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("B", "G", "W", "K", "Z"), ArrayBuffer("Q", "P", "N", "D", "S"), ArrayBuffer("I", "O", "A", "X", "E"), ArrayBuffer("F", "C", "L", "U", "M"), ArrayBuffer("T", "H", "Y", "V", "R"), ArrayBuffer("J", "1", "2", "3", "4"))
    val textRosetta: String = "0ATTACKATDAWN"
    val textWikipedia: String = "FLEEATONCE"
    val textTest: String = "The invasion will start on the first of January"
    var maps: Map[String,Any] = square_to_maps(squareRosetta)
    var emap = maps.getOrElse("e", null.asInstanceOf[Any])
    var dmap = maps.getOrElse("d", null.asInstanceOf[Any])
    println("from Rosettacode")
    println("original:\t " + textRosetta)
    var s: String = encrypt(textRosetta, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("codiert:\t " + s)
    s = decrypt(s, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("and back:\t " + s)
    maps = square_to_maps(squareWikipedia)
    emap = maps.getOrElse("e", null.asInstanceOf[Any])
    dmap = maps.getOrElse("d", null.asInstanceOf[Any])
    println("from Wikipedia")
    println("original:\t " + textWikipedia)
    s = encrypt(textWikipedia, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("codiert:\t " + s)
    s = decrypt(s, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("and back:\t " + s)
    maps = square_to_maps(squareWikipedia)
    emap = maps.getOrElse("e", null.asInstanceOf[Any])
    dmap = maps.getOrElse("d", null.asInstanceOf[Any])
    println("from Rosettacode long part")
    println("original:\t " + textTest)
    s = encrypt(textTest, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("codiert:\t " + s)
    s = decrypt(s, emap.asInstanceOf[Map[String,ArrayBuffer[Int]]], dmap.asInstanceOf[Map[String,String]])
    println("and back:\t " + s)
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
