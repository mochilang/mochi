// Generated by Mochi v0.10.41 on 2025-07-27 16:19:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def shuffle(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var arr: ArrayBuffer[String] = xs
  var i: BigInt = (arr).size - BigInt(1)
  while (i > BigInt(0)) {
    val j = Math.floorMod(_now(), i + BigInt(1))
    val tmp: String = arr((i).toInt)
    arr((i).toInt) = arr((j).toInt)
    arr((j).toInt) = tmp
    i = (i - BigInt(1)).asInstanceOf[BigInt]
  }
  return arr
}

var i: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  while (i < BigInt(3)) {
    println("")
    for (w <- shuffle(ArrayBuffer("Enjoy", "Rosetta", "Code"))) {
      println(w)
    }
    i = (i + BigInt(1)).asInstanceOf[BigInt]
  }
}
}
