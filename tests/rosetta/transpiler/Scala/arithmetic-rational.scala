// Generated by Mochi v0.10.39 on 2025-07-25 00:56:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def intSqrt(x: Int): Int = {
    if (x < 2) {
      return x
    }
    var left: Int = 1
    var right = x / 2
    var ans: Int = 0
    while (left <= right) {
      val mid = left + (right - left) / 2
      val sq = mid * mid
      if (sq == x) {
        return mid
      }
      if (sq < x) {
        left = (mid + 1).asInstanceOf[Int]
        ans = mid
      } else {
        right = (mid - 1).asInstanceOf[Int]
      }
    }
    return ans
  }
  
  def sumRecip(n: Int): Int = {
    var s: Int = 1
    val limit: Int = intSqrt(n)
    var f: Int = 2
    while (f <= limit) {
      if (n % f == 0) {
        s = (s + n / f).asInstanceOf[Int]
        val f2 = n / f
        if (f2 != f) {
          s = (s + f).asInstanceOf[Int]
        }
      }
      f = (f + 1).asInstanceOf[Int]
    }
    return s
  }
  
  def main() = {
    val nums: ArrayBuffer[Int] = ArrayBuffer(6, 28, 120, 496, 672, 8128, 30240, 32760, 523776)
    for (n <- nums) {
      val s: Int = sumRecip(n.asInstanceOf[Int])
      if (s % n == 0) {
        val `val` = s / n
        var perfect: String = ""
        if (`val` == 1) {
          perfect = "perfect!"
        }
        println("Sum of recipr. factors of " + String.valueOf(n) + " = " + String.valueOf(`val`) + " exactly " + perfect)
      }
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
