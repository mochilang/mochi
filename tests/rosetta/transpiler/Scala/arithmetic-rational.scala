// Generated by Mochi v0.10.40 on 2025-07-25 21:08:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def intSqrt(x: Int): Int = {
      if (x < 2) {
        return x
      }
      var left: Int = 1
      var right = x / 2
      var ans: Int = 0
      while (left <= right) {
        val mid = left + (right - left) / 2
        val sq = mid * mid
        if (sq == x) {
          return mid
        }
        if (sq < x) {
          left = (mid + 1).asInstanceOf[Int]
          ans = mid
        } else {
          right = (mid - 1).asInstanceOf[Int]
        }
      }
      return ans
    }
    def sumRecip(n: Int): Int = {
      var s: Int = 1
      val limit: Int = intSqrt(n)
      var f: Int = 2
      while (f <= limit) {
        if (Math.floorMod(n, f) == 0) {
          s = (s + n / f).asInstanceOf[Int]
          val f2 = n / f
          if (f2 != f) {
            s = (s + f).asInstanceOf[Int]
          }
        }
        f = (f + 1).asInstanceOf[Int]
      }
      return s
    }
    def main(): Any = {
      val nums: ArrayBuffer[Int] = ArrayBuffer(6, 28, 120, 496, 672, 8128, 30240, 32760, 523776)
      for (n <- nums) {
        val s: Int = sumRecip(n.asInstanceOf[Int])
        if (Math.floorMod(s, n) == 0) {
          val `val` = s / n
          var perfect: String = ""
          if (`val` == 1) {
            perfect = "perfect!"
          }
          println("Sum of recipr. factors of " + String.valueOf(n) + " = " + String.valueOf(`val`) + " exactly " + perfect)
        }
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
