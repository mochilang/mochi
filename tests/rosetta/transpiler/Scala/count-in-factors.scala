// Generated by Mochi v0.10.42 on 2025-07-27 17:28:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def show(n: BigInt): Any = {
      if (n == BigInt(1)) {
        println("1: 1")
        return
      }
      var out: String = String.valueOf(n) + ": "
      var x: String = ""
      var m: BigInt = n
      var f: BigInt = BigInt(2)
      while (m != BigInt(1)) {
        if (m % f == BigInt(0)) {
          out = (out + x).toString.toDouble + (String.valueOf(f)).toString.toDouble
          x = "\u00d7"
          m = (m / f).asInstanceOf[BigInt]
        } else {
          f = (f + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      println(out)
      return
    }
    show(BigInt(1))
    for (i <- BigInt(2) until BigInt(10)) {
      show(i.asInstanceOf[BigInt])
    }
    println("...")
    for (i <- BigInt(2144) until BigInt(2155)) {
      show(i.asInstanceOf[BigInt])
    }
    println("...")
    for (i <- BigInt(9987) until BigInt(10000)) {
      show(i.asInstanceOf[BigInt])
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
