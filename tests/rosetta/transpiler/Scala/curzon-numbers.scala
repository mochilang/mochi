// Generated by Mochi v0.10.57 on 2025-08-04 19:30:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def padLeft(n: BigInt, width: BigInt): String = {
  var s: String = String.valueOf(n)
  while (BigInt(((s).size).toInt) < width) {
    s = " " + s
  }
  return s
}

def modPow(base: BigInt, exp: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = 1 % mod
  var b: BigInt = base % mod
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b % mod
    }
    b = b * b % mod
    e = e / 2
  }
  return result
}

def main(): Any = {
  var k: BigInt = 2
  val _br2 = new Breaks
  _br2.breakable {
    while (k <= 10) {
      println("The first 50 Curzon numbers using a base of " + String.valueOf(k) + " :")
      var count: BigInt = 0
      var n: BigInt = 1
      var curzon50: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
      val _br3 = new Breaks
      _br3.breakable {
        while (true) {
          val d: BigInt = k * n + 1
          if ((modPow(k, n, d) + 1) % d == 0) {
            if (count < 50) {
              curzon50 = curzon50 :+ n
            }
            count = count + 1
            if (count == 50) {
              var idx: BigInt = 0
              while (idx < BigInt(((curzon50).size).toInt)) {
                var line: String = ""
                var j: BigInt = 0
                while (j < 10) {
                  line = line + padLeft(curzon50((idx.toInt).toInt), 4) + " "
                  idx = idx + 1
                  j = j + 1
                }
                println(line.slice((0).toInt, ((line).size - 1.toInt).toInt))
              }
            }
            if (count == 1000) {
              println("\nOne thousandth: " + String.valueOf(n))
              _br3.break()
            }
          }
          n = n + 1
        }
      }
      println("")
      k = k + 2
    }
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
