// Generated by Mochi v0.10.40 on 2025-07-26 00:01:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def absf(x: Double): Double = {
      if (x < 0.0) {
        return (0 - x).toString.toDouble
      }
      return x
    }
    def floorf(x: Double): Double = {
      val y: Int = x.asInstanceOf[Int]
      return y.toString.toDouble
    }
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.substring(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def fmtF(x: Double): String = {
      var y: Double = floorf(x * 10000.0 + 0.5) / 10000.0
      var s = String.valueOf(y)
      var dot: Int = indexOf(s, ".")
      if (dot == 0 - 1) {
        s = s + ".0000"
      } else {
        var decs = (s).size - dot - 1
        if (decs > 4) {
          s = s.substring(0, dot + 5)
        } else {
          while (decs < 4) {
            s = s + "0"
            decs = (decs + 1).asInstanceOf[Int]
          }
        }
      }
      return s
    }
    def padInt(n: Int, width: Int): String = {
      var s = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def padFloat(x: Double, width: Int): String = {
      var s: String = fmtF(x)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def avgLen(n: Int): Double = {
      val tests: Int = 10000
      var sum: Int = 0
      var seed: Int = 1
      var t: Int = 0
      while (t < tests) {
        var visited: ArrayBuffer[Boolean] = ArrayBuffer()
        var i: Int = 0
        while (i < n) {
          visited = visited :+ false
          i = (i + 1).asInstanceOf[Int]
        }
        var x: Int = 0
        while (!visited(x)) {
          visited(x) = true
          sum = (sum + 1).asInstanceOf[Int]
          seed = (Math.floorMod(seed * 1664525 + 1013904223, 2147483647)).asInstanceOf[Int]
          x = (Math.floorMod(seed, n)).asInstanceOf[Int]
        }
        t = (t + 1).asInstanceOf[Int]
      }
      return sum.toString.toDouble / tests
    }
    def ana(n: Int): Double = {
      var nn: Double = n.toString.toDouble
      var term: Double = 1.0
      var sum: Double = 1.0
      var i: Double = nn - 1.0
      while (i >= 1.0) {
        term = (term * i / nn).toString.toDouble
        sum = (sum + term).toString.toDouble
        i = i - 1.0
      }
      return sum
    }
    def main(): Any = {
      val nmax: Int = 20
      println(" N    average    analytical    (error)")
      println("===  =========  ============  =========")
      var n: Int = 1
      while (n <= nmax) {
        val a: Double = avgLen(n)
        val b: Double = ana(n)
        val err: Double = absf((a - b).toString.toDouble) / b * 100.0
        var line: String = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
        println(line)
        n = (n + 1).asInstanceOf[Int]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
