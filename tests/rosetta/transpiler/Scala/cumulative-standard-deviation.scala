// Generated by Mochi v0.10.57 on 2025-08-04 19:29:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Rsdv(var n: Double, var a: Double, var q: Double)

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var g: Double = x
  var i: BigInt = 0
  while (i < 20) {
    g = (g + x / g) / 2.0
    i = i + 1
  }
  return g
}

def newRsdv(): Rsdv = {
  return Rsdv(0.0, 0.0, 0.0)
}

def add(r: Rsdv, x: Double): Rsdv = {
  val n1: Double = r.n + 1.0
  val a1: Double = r.a + (x - r.a) / n1
  val q1: Double = r.q + (x - r.a) * (x - a1)
  return Rsdv(n1, a1, q1)
}

def sd(r: Rsdv): Double = {
  return sqrtApprox(r.q / r.n)
}

def main(): Any = {
  var r: Rsdv = newRsdv()
  for (x <- ArrayBuffer(2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0)) {
    r = add(r, x)
    println(String.valueOf(sd(r)))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
