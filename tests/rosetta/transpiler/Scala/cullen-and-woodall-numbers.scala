// Generated by Mochi v0.10.57 on 2025-08-04 19:29:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow_big(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = 1
  var b: BigInt = base
  var e: BigInt = exp
  while (e > 0) {
    if (e % 2 == 1) {
      result = result * b
    }
    b = b * b
    e = e / 2
  }
  return result
}

def cullen(n: BigInt): BigInt = {
  val two_n: BigInt = pow_big(BigInt(2), n)
  return two_n * BigInt(n.toString.toDouble.toInt) + BigInt(1)
}

def woodall(n: BigInt): BigInt = {
  return cullen(n) - BigInt(2)
}

def show_list(xs: ArrayBuffer[BigInt]): String = {
  var line: String = ""
  var i: BigInt = 0
  while (i < BigInt(((xs).size).toInt)) {
    line = line + String.valueOf(xs((i.toInt).toInt))
    if (i < BigInt(((xs).size - 1.toInt).toInt)) {
      line = line + " "
    }
    i = i + 1
  }
  return line
}

def main(): Any = {
  var cnums: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  var i: BigInt = 1
  while (i <= 20) {
    cnums = cnums :+ cullen(i)
    i = i + 1
  }
  println("First 20 Cullen numbers (n * 2^n + 1):")
  println(show_list(cnums))
  var wnums: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  i = 1
  while (i <= 20) {
    wnums = wnums :+ woodall(i)
    i = i + 1
  }
  println("\nFirst 20 Woodall numbers (n * 2^n - 1):")
  println(show_list(wnums))
  val cprimes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(141), BigInt(4713), BigInt(5795), BigInt(6611))
  println("\nFirst 5 Cullen primes (in terms of n):")
  println(show_list(cprimes))
  val wprimes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2), BigInt(3), BigInt(6), BigInt(30), BigInt(75), BigInt(81), BigInt(115), BigInt(123), BigInt(249), BigInt(362), BigInt(384), BigInt(462))
  println("\nFirst 12 Woodall primes (in terms of n):")
  println(show_list(wprimes))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
