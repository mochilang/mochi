// Generated by Mochi v0.10.56 on 2025-08-04 00:21:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class FWResult(var dist: ArrayBuffer[ArrayBuffer[BigInt]], var next: ArrayBuffer[ArrayBuffer[BigInt]])

def floydWarshall(graph: ArrayBuffer[ArrayBuffer[BigInt]]): FWResult = {
  val n: Int = (graph).size
  var dist: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var next: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var drow: ArrayBuffer[BigInt] = ArrayBuffer()
    var nrow: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = BigInt(0)
    while (j < n) {
      drow = drow :+ graph((i.toInt).toInt)((j.toInt).toInt)
      if ((graph((i.toInt).toInt)((j.toInt).toInt) < INF && i != j).asInstanceOf[Boolean]) {
        nrow = nrow :+ j
      } else {
        nrow = nrow :+ BigInt(0) - BigInt(1)
      }
      j = j + BigInt(1)
    }
    dist = dist :+ drow
    next = next :+ nrow
    i = i + BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < n) {
    var i: BigInt = BigInt(0)
    while (i < n) {
      var j: BigInt = BigInt(0)
      while (j < n) {
        if ((dist((i.toInt).toInt)((k.toInt).toInt) < INF && dist((k.toInt).toInt)((j.toInt).toInt) < INF).asInstanceOf[Boolean]) {
          val alt: BigInt = dist((i.toInt).toInt)((k.toInt).toInt) + dist((k.toInt).toInt)((j.toInt).toInt)
          if (alt < dist((i.toInt).toInt)((j.toInt).toInt)) {
            dist((i).toInt)((j).toInt) = alt
            next((i).toInt)((j).toInt) = next((i.toInt).toInt)((k.toInt).toInt)
          }
        }
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
    }
    k = k + BigInt(1)
  }
  return FWResult(dist, next)
}

def path(u: BigInt, v: BigInt, next: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  if (next((u.toInt).toInt)((v.toInt).toInt) < BigInt(0)) {
    return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  }
  var p: ArrayBuffer[BigInt] = ArrayBuffer(u)
  var x: BigInt = u
  while (x != v) {
    x = next((x.toInt).toInt)((v.toInt).toInt)
    p = p :+ x
  }
  return p
}

def pathStr(p: ArrayBuffer[BigInt]): String = {
  var s: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt(((p).size).toInt)) {
    s = s + String.valueOf(p((i.toInt).toInt) + BigInt(1))
    if (i < (p).size - BigInt(1).toInt) {
      s = s + " -> "
    }
    i = i + BigInt(1)
  }
  return s
}

val INF: BigInt = BigInt(1000000)

val n: BigInt = BigInt(4)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var g: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
    for (i <- BigInt(0) until n) {
      var row: ArrayBuffer[BigInt] = ArrayBuffer()
      for (j <- BigInt(0) until n) {
        if (i == j) {
          row = row :+ BigInt(0)
        } else {
          row = row :+ INF
        }
      }
      g = g :+ row
    }
    g((BigInt(0)).toInt)((BigInt(2)).toInt) = BigInt(0) - BigInt(2)
    g((BigInt(2)).toInt)((BigInt(3)).toInt) = BigInt(2)
    g((BigInt(3)).toInt)((BigInt(1)).toInt) = BigInt(0) - BigInt(1)
    g((BigInt(1)).toInt)((BigInt(0)).toInt) = BigInt(4)
    g((BigInt(1)).toInt)((BigInt(2)).toInt) = BigInt(3)
    val res: FWResult = floydWarshall(g)
    println("pair\tdist\tpath")
    var i: BigInt = BigInt(0)
    while (i < n) {
      var j: BigInt = BigInt(0)
      while (j < n) {
        if (i != j) {
          val p: ArrayBuffer[BigInt] = path(i, j, res.next)
          println(String.valueOf(i + BigInt(1)) + " -> " + String.valueOf(j + BigInt(1)) + "\t" + String.valueOf(res.dist((i.toInt).toInt)((j.toInt).toInt)) + "\t" + pathStr(p))
        }
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
