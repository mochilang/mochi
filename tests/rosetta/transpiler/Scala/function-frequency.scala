// Generated by Mochi v0.10.50 on 2025-07-31 01:08:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def join(xs: ArrayBuffer[String], sep: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        if (i > BigInt(0)) {
          res = (res + sep).toString
        }
        res = (res + xs((i).toInt)).toString
        i = i + BigInt(1)
      }
      return res
    }
    def sortPairs(xs: ArrayBuffer[scala.collection.mutable.Map[String,Any]]): ArrayBuffer[scala.collection.mutable.Map[String,Any]] = {
      var arr: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = xs
      var i: BigInt = BigInt(1)
      while (i < (arr).size) {
        var j: BigInt = i
        while (j > BigInt(0) && BigInt((arr((j - BigInt(1)).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]("count")).toInt) < BigInt((arr((j).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]("count")).toInt)) {
          val tmp: scala.collection.mutable.Map[String,Any] = arr((j - BigInt(1)).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]
          arr((j - BigInt(1)).toInt) = arr((j).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]
          arr((j).toInt) = tmp
          j = j - BigInt(1)
        }
        i = i + BigInt(1)
      }
      return arr
    }
    def isAlphaNumDot(ch: String): Boolean = {
      return (((((ch >= "A" && ch <= "Z").asInstanceOf[Boolean] || (ch >= "a" && ch <= "z").asInstanceOf[Boolean]).asInstanceOf[Boolean] || (ch >= "0" && ch <= "9").asInstanceOf[Boolean]).asInstanceOf[Boolean] || ch == "_").asInstanceOf[Boolean] || ch == ".").asInstanceOf[Boolean]
    }
    def main(): Any = {
      val srcLines: ArrayBuffer[String] = ArrayBuffer("package main", "", "import (", "    \"fmt\"", "    \"go/ast\"", "    \"go/parser\"", "    \"go/token\"", "    \"io/ioutil\"", "    \"os\"", "    \"sort\"", ")", "", "func main() {", "    if len(os.Args) != 2 {", "        fmt.Println(\"usage ff <go source filename>\")", "        return", "    }", "    src, err := ioutil.ReadFile(os.Args[1])", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    fs := token.NewFileSet()", "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    f := fs.File(a.Pos())", "    m := make(map[string]int)", "    ast.Inspect(a, func(n ast.Node) bool {", "        if ce, ok := n.(*ast.CallExpr); ok {", "            start := f.Offset(ce.Pos())", "            end := f.Offset(ce.Lparen)", "            m[string(src[start:end])]++", "        }", "        return true", "    })", "    cs := make(calls, 0, len(m))", "    for k, v := range m {", "        cs = append(cs, &call{k, v})", "    }", "    sort.Sort(cs)", "    for i, c := range cs {", "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)", "        if i == 9 {", "            break", "        }", "    }", "}", "", "type call struct {", "    expr  string", "    count int", "}", "type calls []*call", "", "func (c calls) Len() int           { return len(c) }", "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }", "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }")
      val src: String = join(srcLines, "\n")
      var freq: scala.collection.mutable.Map[String,BigInt] = scala.collection.mutable.Map()
      var i: BigInt = BigInt(0)
      var order: ArrayBuffer[String] = ArrayBuffer()
      val _br3 = new Breaks
      _br3.breakable {
        while (i < (src).size) {
          val ch: String = src.slice((i).toInt, (i + BigInt(1)).toInt)
          if ((((ch >= "A" && ch <= "Z").asInstanceOf[Boolean] || (ch >= "a" && ch <= "z").asInstanceOf[Boolean]).asInstanceOf[Boolean] || ch == "_").asInstanceOf[Boolean]) {
            var j: BigInt = i + BigInt(1)
            while (j < (src).size && isAlphaNumDot(src.slice((j).toInt, (j + BigInt(1)).toInt))) {
              j = j + BigInt(1)
            }
            val token: String = src.slice((i).toInt, (j).toInt)
            var k: BigInt = j
            val _br5 = new Breaks
            _br5.breakable {
              while (k < (src).size) {
                val cc: String = src.slice((k).toInt, (k + BigInt(1)).toInt)
                if ((((cc == " " || cc == "\t").asInstanceOf[Boolean] || cc == "\n").asInstanceOf[Boolean] || cc == "\r").asInstanceOf[Boolean]) {
                  k = k + BigInt(1)
                } else {
                  _br5.break()
                }
              }
            }
            if ((k < (src).size && src.slice((k).toInt, (k + BigInt(1)).toInt) == "(").asInstanceOf[Boolean]) {
              var p: BigInt = i - BigInt(1)
              while (p >= BigInt(0) && (src.slice((p).toInt, (p + BigInt(1)).toInt) == " " || src.slice((p).toInt, (p + BigInt(1)).toInt) == "\t").asInstanceOf[Boolean]) {
                p = p - BigInt(1)
              }
              var skip: Boolean = false
              if (p >= BigInt(3)) {
                val before: String = src.slice((p - BigInt(3)).toInt, (p + BigInt(1)).toInt)
                if (before == "func") {
                  skip = true
                }
              }
              if ((!skip).asInstanceOf[Boolean]) {
                if ((freq.contains(token)).asInstanceOf[Boolean]) {
                  freq.update(token, freq(token) + BigInt(1))
                } else {
                  freq.update(token, BigInt(1))
                  order = order :+ token
                }
              }
            }
            i = j
          } else {
            i = i + BigInt(1)
          }
        }
      }
      var pairs: ArrayBuffer[scala.collection.mutable.Map[String,Any]] = ArrayBuffer()
      for (t <- order) {
        pairs = pairs :+ (scala.collection.mutable.Map("expr" -> (t), "count" -> (freq(t)))).asInstanceOf[scala.collection.mutable.Map[String,Any]]
      }
      pairs = sortPairs(pairs)
      var idx: BigInt = BigInt(0)
      while (idx < (pairs).size && idx < BigInt(10)) {
        val p: scala.collection.mutable.Map[String,Any] = pairs((idx).toInt).asInstanceOf[scala.collection.mutable.Map[String,Any]]
        println(p("expr") + " " + String.valueOf(p("count")))
        idx = idx + BigInt(1)
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
