// Generated by Mochi v0.10.57 on 2025-08-04 21:57:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def padLeft(n: BigInt, width: BigInt): String = {
  var s: String = String.valueOf(n)
  while (BigInt((s).length) < width) {
    s = " " + s
  }
  return s
}

def squeeze(s: String, ch: String): String = {
  var out: String = ""
  var prev: Boolean = false
  var i: BigInt = 0
  while (i < BigInt((s).length)) {
    val c: String = s.slice((i).toInt, (i + 1).toInt)
    if (c == ch) {
      if ((!prev).asInstanceOf[Boolean]) {
        out = out + c
        prev = true
      }
    } else {
      out = out + c
      prev = false
    }
    i = i + 1
  }
  return out
}

val strings: ArrayBuffer[String] = ArrayBuffer("", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "\uD83D\uDE0D\uD83D\uDE00\uD83D\uDE4C\uD83D\uDC83\uD83D\uDE0D\uD83D\uDE0D\uD83D\uDE0D\uD83D\uDE4C")

val chars: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer(" "), ArrayBuffer("-"), ArrayBuffer("7"), ArrayBuffer("."), ArrayBuffer(" ", "-", "r"), ArrayBuffer("e"), ArrayBuffer("s"), ArrayBuffer("a"), ArrayBuffer("\uD83D\uDE0D"))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var i: BigInt = 0
    while (i < BigInt((strings).size)) {
      var j: BigInt = 0
      val s: String = strings((i.toInt).toInt)
      while (j < BigInt((chars((i.toInt).toInt)).size)) {
        val c: String = chars((i.toInt).toInt)((j.toInt).toInt)
        val ss: String = squeeze(s, c)
        println("specified character = '" + c + "'")
        println("original : length = " + padLeft(BigInt((s).length), 2) + ", string = \u00ab\u00ab\u00ab" + s + "\u00bb\u00bb\u00bb")
        println("squeezed : length = " + padLeft(BigInt((ss).length), 2) + ", string = \u00ab\u00ab\u00ab" + ss + "\u00bb\u00bb\u00bb")
        println("")
        j = j + 1
      }
      i = i + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
