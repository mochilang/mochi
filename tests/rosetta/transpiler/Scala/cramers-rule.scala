// Generated by Mochi v0.10.42 on 2025-07-27 17:30:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def det(m: ArrayBuffer[ArrayBuffer[Double]]): Double = {
      val n: Int = (m).size
      if (n == BigInt(1)) {
        return m((BigInt(0)).toInt)((BigInt(0)).toInt)
      }
      var total: Double = 0.0
      var sign: Double = 1.0
      var c: BigInt = BigInt(0)
      while (c < n) {
        var sub: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
        var r: BigInt = BigInt(1)
        while (r < n) {
          var row: ArrayBuffer[Double] = ArrayBuffer()
          var cc: BigInt = BigInt(0)
          while (cc < n) {
            if (cc != c) {
              row = row :+ m((r).toInt)((cc).toInt)
            }
            cc = (cc + BigInt(1)).asInstanceOf[BigInt]
          }
          sub = sub :+ row
          r = (r + BigInt(1)).asInstanceOf[BigInt]
        }
        total = (total + sign * m((BigInt(0)).toInt)((c).toInt) * det(sub)).toString.toDouble
        sign = sign * (BigInt(0) - 1.0)
        c = (c + BigInt(1)).asInstanceOf[BigInt]
      }
      return total
    }
    def replaceCol(m: ArrayBuffer[ArrayBuffer[Double]], col: BigInt, v: ArrayBuffer[Double]): ArrayBuffer[ArrayBuffer[Double]] = {
      var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
      var r: BigInt = BigInt(0)
      while (r < (m).size) {
        var row: ArrayBuffer[Double] = ArrayBuffer()
        var c: BigInt = BigInt(0)
        while (c < (m((r).toInt)).size) {
          if (c == col) {
            row = row :+ v((r).toInt)
          } else {
            row = row :+ m((r).toInt)((c).toInt)
          }
          c = (c + BigInt(1)).asInstanceOf[BigInt]
        }
        res = res :+ row
        r = (r + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    val m: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, BigInt(0) - 1.0, 5.0, 1.0), ArrayBuffer(3.0, 2.0, 2.0, BigInt(0) - 6.0), ArrayBuffer(1.0, 3.0, 3.0, BigInt(0) - 1.0), ArrayBuffer(5.0, BigInt(0) - 2.0, BigInt(0) - 3.0, 3.0))
    val v: ArrayBuffer[Double] = ArrayBuffer(BigInt(0) - 3.0, BigInt(0) - 32.0, BigInt(0) - 47.0, 49.0)
    val d: Double = det(m)
    var x: ArrayBuffer[Double] = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i < (v).size) {
      val mc: ArrayBuffer[ArrayBuffer[Double]] = replaceCol(m, i, v)
      x = x :+ (det(mc) / d).toString.toDouble
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    var s: String = "["
    var j: BigInt = BigInt(0)
    while (j < (x).size) {
      s = (s + String.valueOf(x((j).toInt))).toString
      if (j < (x).size - BigInt(1)) {
        s = s + " "
      }
      j = (j + BigInt(1)).asInstanceOf[BigInt]
    }
    s = s + "]"
    println(s)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
