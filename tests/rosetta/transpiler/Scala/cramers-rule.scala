// Generated by Mochi v0.10.47 on 2025-07-28 12:00:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def det(m: ArrayBuffer[ArrayBuffer[Double]]): Double = {
    val n: Int = (m).size
    if (n == BigInt(1)) {
      return m((BigInt(0)).toInt)((BigInt(0)).toInt)
    }
    var total: Double = 0.0
    var sign: Double = 1.0
    var c: BigInt = BigInt(0)
    while (c < n) {
      var sub: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
      var r: BigInt = BigInt(1)
      while (r < n) {
        var row: ArrayBuffer[Double] = ArrayBuffer()
        var cc: BigInt = BigInt(0)
        while (cc < n) {
          if (cc != c) {
            row = row :+ m((r).toInt)((cc).toInt)
          }
          cc = (cc + BigInt(1)).asInstanceOf[BigInt]
        }
        sub = sub :+ row
        r = (r + BigInt(1)).asInstanceOf[BigInt]
      }
      total = (total + sign * m((BigInt(0)).toInt)((c).toInt) * det(sub)).toString.toDouble
      sign = (sign * -1.0).toString.toDouble
      c = (c + BigInt(1)).asInstanceOf[BigInt]
    }
    return total
  }
  
  def replaceCol(m: ArrayBuffer[ArrayBuffer[Double]], col: BigInt, v: ArrayBuffer[Double]): ArrayBuffer[ArrayBuffer[Double]] = {
    var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
    var r: BigInt = BigInt(0)
    while (r < (m).size) {
      var row: ArrayBuffer[Double] = ArrayBuffer()
      var c: BigInt = BigInt(0)
      while (c < (m((r).toInt)).size) {
        if (c == col) {
          row = row :+ v((r).toInt)
        } else {
          row = row :+ m((r).toInt)((c).toInt)
        }
        c = (c + BigInt(1)).asInstanceOf[BigInt]
      }
      res = res :+ row
      r = (r + BigInt(1)).asInstanceOf[BigInt]
    }
    return res
  }
  
  val m: ArrayBuffer[ArrayBuffer[Any]] = ArrayBuffer(ArrayBuffer(2.0, -1.0, 5.0, 1.0), ArrayBuffer(3.0, 2.0, 2.0, -6.0), ArrayBuffer(1.0, 3.0, 3.0, -1.0), ArrayBuffer(5.0, -2.0, -3.0, 3.0))
  
  val v = ArrayBuffer(-3.0, -32.0, -47.0, 49.0)
  
  val d: Double = det(m.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]])
  
  var x: ArrayBuffer[Double] = ArrayBuffer()
  
  var i: BigInt = BigInt(0)
  
  var s: String = "["
  
  var j: BigInt = BigInt(0)
  
  def main(args: Array[String]): Unit = {
    while (i < (v.toString).size) {
      val mc: ArrayBuffer[ArrayBuffer[Double]] = replaceCol(m.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]], i, v.asInstanceOf[ArrayBuffer[Double]])
      x = x :+ (det(mc) / d).toString.toDouble
      i = (i + BigInt(1)).asInstanceOf[BigInt]
    }
    while (j < (x).size) {
      s = (s + String.valueOf(x((j).toInt))).toString
      if (j < (x).size - BigInt(1)) {
        s = s + " "
      }
      j = (j + BigInt(1)).asInstanceOf[BigInt]
    }
    s = s + "]"
    println(s)
  }
}
