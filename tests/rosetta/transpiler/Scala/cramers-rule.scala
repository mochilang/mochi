// Generated by Mochi v0.10.57 on 2025-08-04 17:08:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def det(m: ArrayBuffer[ArrayBuffer[Double]]): Double = {
    val n: Int = (m).size
    if (n == 1) {
      return m((0.toInt).toInt)((0.toInt).toInt)
    }
    var total: Double = 0.0
    var sign: Double = 1.0
    var c: BigInt = 0
    while (c < BigInt(n.toString.toDouble.toInt)) {
      var sub: ArrayBuffer[ArrayBuffer[Double]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
      var r: BigInt = 1
      while (r < BigInt(n.toString.toDouble.toInt)) {
        var row: ArrayBuffer[Double] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[Double]]
        var cc: BigInt = 0
        while (cc < BigInt(n.toString.toDouble.toInt)) {
          if (cc != c) {
            row = row :+ m((r.toInt).toInt)((cc.toInt).toInt)
          }
          cc = cc + 1
        }
        sub = sub :+ row
        r = r + 1
      }
      total = total + sign * m((0.toInt).toInt)((c.toInt).toInt) * det(sub)
      sign = sign * -1.0
      c = c + 1
    }
    return total
  }
  
  def replaceCol(m: ArrayBuffer[ArrayBuffer[Double]], col: BigInt, v: ArrayBuffer[Double]): ArrayBuffer[ArrayBuffer[Double]] = {
    var res: ArrayBuffer[ArrayBuffer[Double]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    var r: BigInt = 0
    while (r < BigInt(((m).size).toInt)) {
      var row: ArrayBuffer[Double] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[Double]]
      var c: BigInt = 0
      while (c < BigInt(((m((r.toInt).toInt)).size).toInt)) {
        if (c == col) {
          row = row :+ v((r.toInt).toInt)
        } else {
          row = row :+ m((r.toInt).toInt)((c.toInt).toInt)
        }
        c = c + 1
      }
      res = res :+ row
      r = r + 1
    }
    return res
  }
  
  val m: ArrayBuffer[ArrayBuffer[Any]] = ArrayBuffer(ArrayBuffer(2.0, -1.0, 5.0, 1.0), ArrayBuffer(3.0, 2.0, 2.0, -6.0), ArrayBuffer(1.0, 3.0, 3.0, -1.0), ArrayBuffer(5.0, -2.0, -3.0, 3.0))
  
  val v: ArrayBuffer[Any] = ArrayBuffer(-3.0, -32.0, -47.0, 49.0)
  
  val d: Double = det(m.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]])
  
  def main(args: Array[String]): Unit = {
    var x: ArrayBuffer[Double] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[Double]]
    var i: BigInt = 0
    while (i < BigInt(((v).size).toInt)) {
      val mc: ArrayBuffer[ArrayBuffer[Double]] = replaceCol(m.asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]], i, v.asInstanceOf[ArrayBuffer[Double]])
      x = x :+ det(mc) / d
      i = i + 1
    }
    var s: String = "["
    var j: BigInt = 0
    while (j < BigInt(((x).size).toInt)) {
      s = s + String.valueOf(x((j.toInt).toInt))
      if (j < BigInt(((x).size - 1.toInt).toInt)) {
        s = s + " "
      }
      j = j + 1
    }
    s = s + "]"
    println(s)
  }
}
