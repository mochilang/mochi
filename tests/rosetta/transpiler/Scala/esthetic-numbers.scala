// Generated by Mochi v0.10.52 on 2025-08-02 01:16:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  def toBase(n: BigInt, b: BigInt): String = {
    if (n == BigInt(0)) {
      return "0"
    }
    var v: BigInt = n
    var out: String = ""
    while (v > BigInt(0)) {
      val d: BigInt = v % b
      out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
      v = v / b
    }
    return out
  }
  
  def uabs(a: BigInt, b: BigInt): BigInt = {
    if (a > b) {
      return a - b
    }
    return b - a
  }
  
  def isEsthetic(_n: BigInt, b: BigInt): Boolean = {
    var n: BigInt = _n
    if (n == BigInt(0)) {
      return false
    }
    var i: BigInt = n % b
    n = n / b
    while (n > BigInt(0)) {
      val j: BigInt = n % b
      if (uabs(i, j) != BigInt(1)) {
        return false
      }
      n = n / b
      i = j
    }
    return true
  }
  
  def dfs(n: BigInt, m: BigInt, i: BigInt): Any = {
    if ((i >= n && i <= m).asInstanceOf[Boolean]) {
      esths = esths :+ i
    }
    if ((i == BigInt(0) || i > m).asInstanceOf[Boolean]) {
      return
    }
    val d: BigInt = i % BigInt(10)
    val i1: BigInt = i * BigInt(10) + d - BigInt(1)
    val i2: BigInt = i1 + BigInt(2)
    if (d == BigInt(0)) {
      dfs(n, m, i2)
    } else {
      if (d == BigInt(9)) {
        dfs(n, m, i1)
      } else {
        dfs(n, m, i1)
        dfs(n, m, i2)
      }
    }
    return null
  }
  
  def commatize(n: BigInt): String = {
    var s: String = String.valueOf(n)
    var i: BigInt = (s).size - BigInt(3).toInt
    while (i >= BigInt(1)) {
      s = s.slice((BigInt(0)).toInt, (i).toInt) + "," + s.slice((i).toInt, ((s).size).toInt)
      i = i - BigInt(3)
    }
    return s
  }
  
  def listEsths(n: BigInt, n2: BigInt, m: BigInt, m2: BigInt, perLine: BigInt, showAll: Boolean): Any = {
    esths = ArrayBuffer()
    var i: BigInt = BigInt(0)
    while (i < BigInt(10)) {
      dfs(n2, m2, i)
      i = i + BigInt(1)
    }
    val le: Int = (esths).size
    println("Base 10: " + commatize(BigInt(le.toInt)) + " esthetic numbers between " + commatize(n) + " and " + commatize(m) + ":")
    if (showAll) {
      var c: BigInt = BigInt(0)
      var line: String = ""
      for (v <- esths) {
        if ((line).size > BigInt(0)) {
          line = line + " "
        }
        line = line + String.valueOf(v)
        c = c + BigInt(1)
        if (c % perLine == BigInt(0)) {
          println(line)
          line = ""
        }
      }
      if ((line).size > BigInt(0)) {
        println(line)
      }
    } else {
      var line: String = ""
      var idx: BigInt = BigInt(0)
      while (idx < perLine) {
        if ((line).size > BigInt(0)) {
          line = line + " "
        }
        line = line + String.valueOf(esths((idx).toInt))
        idx = idx + BigInt(1)
      }
      println(line)
      println("............")
      line = ""
      idx = le - perLine
      while (idx < le) {
        if ((line).size > BigInt(0)) {
          line = line + " "
        }
        line = line + String.valueOf(esths((idx).toInt))
        idx = idx + BigInt(1)
      }
      println(line)
    }
    println("")
  }
  
  def main(): Any = {
    var b: BigInt = BigInt(2)
    while (b <= BigInt(16)) {
      val start: BigInt = BigInt(4) * b
      val stop: BigInt = BigInt(6) * b
      println("Base " + String.valueOf(b) + ": " + String.valueOf(start) + "th to " + String.valueOf(stop) + "th esthetic numbers:")
      var n: BigInt = BigInt(1)
      var c: BigInt = BigInt(0)
      var line: String = ""
      while (c < stop) {
        if (isEsthetic(n, b)) {
          c = c + BigInt(1)
          if (c >= start) {
            if ((line).size > BigInt(0)) {
              line = line + " "
            }
            line = line + toBase(n, b)
          }
        }
        n = n + BigInt(1)
      }
      println(line)
      println("")
      b = b + BigInt(1)
    }
    listEsths(BigInt(1000), BigInt(1010), BigInt(9999), BigInt(9898), BigInt(16), true)
    listEsths(BigInt(100000000), BigInt(101010101), BigInt(130000000), BigInt(123456789), BigInt(9), true)
    listEsths(BigInt("100000000000"), BigInt("101010101010"), BigInt("130000000000"), BigInt("123456789898"), BigInt(7), false)
    listEsths(BigInt("100000000000000"), BigInt("101010101010101"), BigInt("130000000000000"), BigInt("123456789898989"), BigInt(5), false)
    listEsths(BigInt("100000000000000000"), BigInt("101010101010101010"), BigInt("130000000000000000"), BigInt("123456789898989898"), BigInt(4), false)
  }
  
  val digits: String = "0123456789abcdef"
  
  var esths: ArrayBuffer[BigInt] = ArrayBuffer()
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
