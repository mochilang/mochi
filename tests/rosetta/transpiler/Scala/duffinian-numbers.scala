// Generated by Mochi v0.10.52 on 2025-08-01 19:09:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def gcd(a: BigInt, b: BigInt): BigInt = {
      var x: BigInt = a
      if (x < BigInt(0)) {
        x = BigInt(0) - x
      }
      var y: BigInt = b
      if (y < BigInt(0)) {
        y = BigInt(0) - y
      }
      while (y != BigInt(0)) {
        val t: BigInt = x % y
        x = y
        y = t
      }
      return x
    }
    def divisors(n: BigInt): ArrayBuffer[BigInt] = {
      var divs: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(1)
      while (i * i <= n) {
        if (n % i == BigInt(0)) {
          divs = divs :+ i
          val j: BigInt = BigInt((n / i).toInt)
          if (i != j) {
            divs = divs :+ j
          }
        }
        i = i + BigInt(1)
      }
      return divs
    }
    def sum(xs: ArrayBuffer[BigInt]): BigInt = {
      var s: BigInt = BigInt(0)
      for (v <- xs) {
        s = s + v
      }
      return s
    }
    def isDuffinian(n: BigInt): Boolean = {
      val divs: ArrayBuffer[BigInt] = divisors(n)
      if ((divs).size <= BigInt(2)) {
        return false
      }
      val sigma = divs.sum
      return gcd(sigma, n) == BigInt(1)
    }
    def pad(n: BigInt, width: BigInt): String = {
      var s: String = String.valueOf(n)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def printTable(nums: ArrayBuffer[BigInt], perRow: BigInt, width: BigInt): Any = {
      var i: BigInt = BigInt(0)
      var line: String = ""
      while (i < (nums).size) {
        line = line + " " + pad(nums((i).toInt), width)
        if ((i + BigInt(1)) % perRow == BigInt(0)) {
          println(line.slice((BigInt(1)).toInt, ((line).size).toInt))
          line = ""
        }
        i = i + BigInt(1)
      }
      if ((line).size > BigInt(0)) {
        println(line.slice((BigInt(1)).toInt, ((line).size).toInt))
      }
    }
    def main(): Any = {
      var duff: ArrayBuffer[BigInt] = ArrayBuffer()
      var n: BigInt = BigInt(1)
      while ((duff).size < BigInt(50)) {
        if (isDuffinian(n)) {
          duff = duff :+ n
        }
        n = n + BigInt(1)
      }
      println("First 50 Duffinian numbers:")
      printTable(duff, BigInt(10), BigInt(3))
      var triplets: ArrayBuffer[String] = ArrayBuffer()
      n = BigInt(1)
      while ((triplets).size < BigInt(20)) {
        if (((isDuffinian(n) && isDuffinian(n + BigInt(1))).asInstanceOf[Boolean] && isDuffinian(n + BigInt(2))).asInstanceOf[Boolean]) {
          triplets = triplets :+ "(" + String.valueOf(n) + "," + String.valueOf(n + BigInt(1)) + "," + String.valueOf(n + BigInt(2)) + ")"
          n = n + BigInt(3)
        }
        n = n + BigInt(1)
      }
      println("\nFirst 20 Duffinian triplets:")
      var i: BigInt = BigInt(0)
      while (i < (triplets).size) {
        var line: String = ""
        var j: BigInt = BigInt(0)
        while (j < BigInt(4) && i < (triplets).size) {
          line = (line + padStr(triplets((i).toInt), BigInt(16))).toString
          j = j + BigInt(1)
          i = i + BigInt(1)
        }
        println(line)
      }
    }
    def padStr(s: String, width: BigInt): String = {
      var res: String = s
      while ((res).size < width) {
        res = res + " "
      }
      return res
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
