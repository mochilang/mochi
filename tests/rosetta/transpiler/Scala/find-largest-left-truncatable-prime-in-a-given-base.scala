// Generated by Mochi v0.10.50 on 2025-07-30 21:20:40 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def isPrime(n: BigInt): Boolean = {
      if (n < BigInt(2)) {
        return false
      }
      var i: BigInt = BigInt(2)
      while (i * i <= n) {
        if (n % i == BigInt(0)) {
          return false
        }
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return true
    }
    def search(base: BigInt, prefix: BigInt, depth: BigInt, limit: BigInt, best: BigInt): BigInt = {
      var b: BigInt = best
      var d: BigInt = BigInt(1)
      while (d < base) {
        val `val` = prefix * base + d
        if (isPrime(`val`)) {
          if (`val` > b) {
            b = `val`
          }
          if (depth + BigInt(1) < limit) {
            b = search(base, `val`, (depth + BigInt(1)).asInstanceOf[BigInt], limit, b)
          }
        }
        d = (d + BigInt(1)).asInstanceOf[BigInt]
      }
      return b
    }
    def largest(base: BigInt): BigInt = {
      return search(base, BigInt(0), BigInt(0), BigInt(6), BigInt(0))
    }
    def main(): Any = {
      var b: BigInt = BigInt(3)
      while (b <= BigInt(17)) {
        println(String.valueOf(b) + ": " + String.valueOf(largest(b)))
        b = (b + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
