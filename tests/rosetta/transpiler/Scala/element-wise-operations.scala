// Generated by Mochi v0.10.52 on 2025-08-02 00:12:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow10(n: BigInt): Double = {
  var r: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    r = r * 10.0
    i = i + BigInt(1)
  }
  return r
}

def powf(base: Double, exp: Double): Double = {
  if (exp == 0.5) {
    var guess: Double = base
    var i: BigInt = BigInt(0)
    while (i < BigInt(20)) {
      guess = (guess + base / guess) / 2.0
      i = i + BigInt(1)
    }
    return guess
  }
  var result: Double = 1.0
  var n: BigInt = BigInt(exp.toInt)
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = (result * base).toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def formatFloat(f: Double, prec: BigInt): String = {
  val scale: Double = pow10(prec)
  val scaled: Double = f * scale + 0.5
  var n: Int = scaled.toInt
  var digits: String = String.valueOf(n)
  while ((digits).size <= prec) {
    digits = "0" + digits
  }
  val intPart: String = digits.slice((BigInt(0)).toInt, ((digits).size - prec).toInt)
  val fracPart: String = digits.slice(((digits).size - prec).toInt, ((digits).size).toInt)
  return intPart + "." + fracPart
}

def padLeft(s: String, w: BigInt): String = {
  var res: String = ""
  var n: BigInt = w - (s).size
  while (n > BigInt(0)) {
    res = res + " "
    n = n - BigInt(1)
  }
  return (res + s).toString
}

def rowString(row: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < (row).size) {
    s = (s + padLeft(formatFloat(row((i).toInt), BigInt(3)), BigInt(6))).toString
    if (i < (row).size - BigInt(1).toInt) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  return s + "] "
}

def printMatrix(heading: String, m: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  println(heading)
  var i: BigInt = BigInt(0)
  while (i < (m).size) {
    println(rowString(m((i).toInt)))
    i = i + BigInt(1)
  }
}

def elementWiseMM(m1: ArrayBuffer[ArrayBuffer[Double]], m2: ArrayBuffer[ArrayBuffer[Double]], f: (Double, Double) => Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var z: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var r: BigInt = BigInt(0)
  while (r < (m1).size) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c < (m1((r).toInt)).size) {
      row = row :+ f(m1((r).toInt)((c).toInt), m2((r).toInt)((c).toInt))
      c = c + BigInt(1)
    }
    z = z :+ row
    r = r + BigInt(1)
  }
  return z
}

def elementWiseMS(m: ArrayBuffer[ArrayBuffer[Double]], s: Double, f: (Double, Double) => Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var z: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var r: BigInt = BigInt(0)
  while (r < (m).size) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var c: BigInt = BigInt(0)
    while (c < (m((r).toInt)).size) {
      row = row :+ f(m((r).toInt)((c).toInt), s)
      c = c + BigInt(1)
    }
    z = z :+ row
    r = r + BigInt(1)
  }
  return z
}

def add(a: Double, b: Double): Double = {
  return (a + b).toString.toDouble
}

def sub(a: Double, b: Double): Double = {
  return (a - b).toString.toDouble
}

def mul(a: Double, b: Double): Double = {
  return (a * b).toString.toDouble
}

def div(a: Double, b: Double): Double = {
  return (a / b).toString.toDouble
}

def exp(a: Double, b: Double): Double = {
  return powf(a, b)
}

def main(): Any = {
  val m1: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(3.0, 1.0, 4.0), ArrayBuffer(1.0, 5.0, 9.0))
  val m2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 7.0, 1.0), ArrayBuffer(8.0, 2.0, 8.0))
  printMatrix("m1:", m1)
  printMatrix("m2:", m2)
  println("")
  printMatrix("m1 + m2:", elementWiseMM(m1, m2, (add _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 - m2:", elementWiseMM(m1, m2, (sub _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 * m2:", elementWiseMM(m1, m2, (mul _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 / m2:", elementWiseMM(m1, m2, (div _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 ^ m2:", elementWiseMM(m1, m2, (exp _).asInstanceOf[(Double, Double) => Double]))
  println("")
  val s: Double = 0.5
  println("s: " + String.valueOf(s))
  printMatrix("m1 + s:", elementWiseMS(m1, s, (add _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 - s:", elementWiseMS(m1, s, (sub _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 * s:", elementWiseMS(m1, s, (mul _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 / s:", elementWiseMS(m1, s, (div _).asInstanceOf[(Double, Double) => Double]))
  printMatrix("m1 ^ s:", elementWiseMS(m1, s, (exp _).asInstanceOf[(Double, Double) => Double]))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
