// Generated by Mochi v0.10.50 on 2025-07-31 00:51:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def sqrtApprox(x: Double): Double = {
      if (x <= 0.0) {
        return 0.0
      }
      var g: Double = x
      var i: BigInt = BigInt(0)
      while (i < BigInt(20)) {
        g = (g + x / g) / 2.0
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return g
    }
    def abs(x: Double): Double = {
      if (x < 0.0) {
        return (-x).toString.toDouble
      }
      return x
    }
    def main(): Any = {
      var oldPhi: Double = 1.0
      var phi: Double = 0.0
      var iters: BigInt = BigInt(0)
      val limit: Double = 0.00001
      val _br1 = new Breaks
      _br1.breakable {
        while (true) {
          phi = 1.0 + 1.0 / oldPhi
          iters = (iters + BigInt(1)).asInstanceOf[BigInt]
          if (Math.abs(phi - oldPhi) <= limit) {
            _br1.break()
          }
          oldPhi = phi
        }
      }
      val actual: Double = (1.0 + sqrtApprox(5.0)) / 2.0
      println("Final value of phi : " + String.valueOf(phi))
      println("Number of iterations : " + String.valueOf(iters))
      println("Error (approx) : " + String.valueOf(phi - actual))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
