// Generated by Mochi v0.10.40 on 2025-07-26 00:03:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def floorf(x: Double): Double = {
      val y: Int = x.asInstanceOf[Int]
      return y.toString.toDouble
    }
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.substring(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def fmtF3(x: Double): String = {
      var y: Double = floorf(x * 1000.0 + 0.5) / 1000.0
      var s = String.valueOf(y)
      var dot: Int = indexOf(s, ".")
      if (dot == 0 - 1) {
        s = s + ".000"
      } else {
        var decs = (s).size - dot - 1
        if (decs > 3) {
          s = s.substring(0, dot + 4)
        } else {
          while (decs < 3) {
            s = s + "0"
            decs = (decs + 1).asInstanceOf[Int]
          }
        }
      }
      return s
    }
    def padFloat3(x: Double, width: Int): String = {
      var s: String = fmtF3(x)
      while ((s).size < width) {
        s = " " + s
      }
      return s
    }
    def fib1000(): ArrayBuffer[Double] = {
      var a: Double = 0.0
      var b: Double = 1.0
      var res: ArrayBuffer[Double] = ArrayBuffer()
      var i: Int = 0
      while (i < 1000) {
        res = res :+ b
        var t: Double = b
        b = (b + a).toString.toDouble
        a = t
        i = (i + 1).asInstanceOf[Int]
      }
      return res
    }
    def leadingDigit(_x: Double): Int = {
      var x: Double = _x
      if (x < 0.0) {
        x = (0 - x).toString.toDouble
      }
      while (x >= 10.0) {
        x = x / 10.0
      }
      while (x > 0.0 && x < 1.0) {
        x = x * 10.0
      }
      return x.asInstanceOf[Int]
    }
    def show(nums: ArrayBuffer[Double], title: String): Any = {
      var counts: ArrayBuffer[Int] = ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 0, 0)
      for (n <- nums) {
        val d: Int = leadingDigit(n.toString.toDouble)
        if ((d >= 1 && d <= 9).asInstanceOf[Boolean]) {
          counts(d - 1) = counts(d - 1) + 1
        }
      }
      val preds: ArrayBuffer[Double] = ArrayBuffer(0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046)
      val total: Int = (nums).size
      println(title)
      println("Digit  Observed  Predicted")
      var i: Int = 0
      while (i < 9) {
        val obs: Double = (counts(i)).toString.toDouble / total.toString.toDouble
        var line: String = "  " + String.valueOf(i + 1) + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds(i), 8)
        println(line)
        i = (i + 1).asInstanceOf[Int]
      }
    }
    def main(): Any = {
      show(fib1000(), "First 1000 Fibonacci numbers")
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
