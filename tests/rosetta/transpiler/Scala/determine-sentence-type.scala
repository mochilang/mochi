// Generated by Mochi v0.10.57 on 2025-08-04 21:57:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def indexOf(s: String, ch: String): BigInt = {
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    if (s.slice((i).toInt, (i + 1).toInt) == ch) {
      return i
    }
    i = i + 1
  }
  return 0 - 1
}

def join(xs: ArrayBuffer[String], sep: String): String = {
  var res: String = ""
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (i > 0) {
      res = res + sep
    }
    res = res + xs((i.toInt).toInt)
    i = i + 1
  }
  return res
}

def sentenceType(s: String): String = {
  if (BigInt((s).size) == 0) {
    return ""
  }
  var types: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if (ch == "?") {
      types = types :+ "Q"
    } else {
      if (ch == "!") {
        types = types :+ "E"
      } else {
        if (ch == ".") {
          types = types :+ "S"
        }
      }
    }
    i = i + 1
  }
  val last: String = s.slice((BigInt((s).size) - 1).toInt, (BigInt((s).size)).toInt)
  if (BigInt("?!.".indexOf(last)) == 0 - 1) {
    types = types :+ "N"
  }
  return join(types, "|")
}

def main(): Any = {
  var s: String = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
  var result: String = sentenceType(s)
  println(result)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
