// Generated by Mochi v0.10.42 on 2025-07-27 22:21:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def parseIntDigits(s: String): BigInt = {
      var n: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
      while (i < (s).size) {
        val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
        if ((!(digits.contains(ch)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          return BigInt(0)
        }
        n = (n * BigInt(10) + digits.getOrElse(ch, null.asInstanceOf[BigInt])).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return n
    }
    def parseDC(_s: String): BigInt = {
      var s: String = _s
      var neg: Boolean = false
      if (((s).size > BigInt(0) && s.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        s = s.slice((BigInt(1)).toInt, ((s).size).toInt)
      }
      var dollars: BigInt = BigInt(0)
      var cents: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      var seenDot: Boolean = false
      var centDigits: BigInt = BigInt(0)
      val _ct1 = new Breaks
      while (i < (s).size) {
        _ct1.breakable {
          val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
          if (ch == ".") {
            seenDot = true
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct1.break()
          }
          val d: BigInt = parseIntDigits(ch)
          if (seenDot) {
            if (centDigits < BigInt(2)) {
              cents = (cents * BigInt(10) + d).asInstanceOf[BigInt]
              centDigits = (centDigits + BigInt(1)).asInstanceOf[BigInt]
            }
          } else {
            dollars = (dollars * BigInt(10) + d).asInstanceOf[BigInt]
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      if (centDigits == BigInt(1)) {
        cents = (cents * BigInt(10)).asInstanceOf[BigInt]
      }
      var `val` = dollars * BigInt(100) + cents
      if (neg) {
        `val` = (BigInt(0) - `val`).asInstanceOf[BigInt]
      }
      return `val`
    }
    def parseRate(_s: String): BigInt = {
      var s: String = _s
      var neg: Boolean = false
      if (((s).size > BigInt(0) && s.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        s = s.slice((BigInt(1)).toInt, ((s).size).toInt)
      }
      var whole: BigInt = BigInt(0)
      var frac: BigInt = BigInt(0)
      var digits: BigInt = BigInt(0)
      var seenDot: Boolean = false
      var i: BigInt = BigInt(0)
      val _ct2 = new Breaks
      while (i < (s).size) {
        _ct2.breakable {
          val ch: String = s.slice((i).toInt, (i + BigInt(1)).toInt)
          if (ch == ".") {
            seenDot = true
            i = (i + BigInt(1)).asInstanceOf[BigInt]
            _ct2.break()
          }
          val d: BigInt = parseIntDigits(ch)
          if (seenDot) {
            if (digits < BigInt(4)) {
              frac = (frac * BigInt(10) + d).asInstanceOf[BigInt]
              digits = (digits + BigInt(1)).asInstanceOf[BigInt]
            }
          } else {
            whole = (whole * BigInt(10) + d).asInstanceOf[BigInt]
          }
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      while (digits < BigInt(4)) {
        frac = (frac * BigInt(10)).asInstanceOf[BigInt]
        digits = (digits + BigInt(1)).asInstanceOf[BigInt]
      }
      var `val` = whole * BigInt(10000) + frac
      if (neg) {
        `val` = (BigInt(0) - `val`).asInstanceOf[BigInt]
      }
      return `val`
    }
    def dcString(dc: BigInt): String = {
      var d = dc / BigInt(100)
      var n: BigInt = dc
      if (n < BigInt(0)) {
        n = (BigInt(0) - n).asInstanceOf[BigInt]
      }
      var c = n % BigInt(100)
      var cstr = String.valueOf(c)
      if ((cstr).size == BigInt(1)) {
        cstr = "0" + cstr
      }
      return String.valueOf(d) + "." + cstr
    }
    def extend(dc: BigInt, n: BigInt): BigInt = {
      return (dc * n).asInstanceOf[BigInt]
    }
    def tax(total: BigInt, rate: BigInt): BigInt = {
      return (total * rate + BigInt(5000)) / BigInt(10000)
    }
    def padLeft(s: String, n: BigInt): String = {
      var out: String = s
      while ((out).size < n) {
        out = " " + out
      }
      return out
    }
    def main(): Any = {
      val hp: BigInt = parseDC("5.50")
      val mp: BigInt = parseDC("2.86")
      val rate: BigInt = parseRate("0.0765")
      val totalBeforeTax = extend(hp, BigInt("4000000000000000")) + extend(mp, BigInt(2))
      val t: BigInt = tax(totalBeforeTax, rate)
      val total = totalBeforeTax + t
      println("Total before tax: " + padLeft(dcString(totalBeforeTax), BigInt(22)))
      println("             Tax: " + padLeft(dcString(t), BigInt(22)))
      println("           Total: " + padLeft(dcString(total), BigInt(22)))
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
