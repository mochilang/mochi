// Generated by Mochi v0.10.57 on 2025-08-04 19:29:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def parseIntDigits(s: String): BigInt = {
  var n: BigInt = 0
  var i: BigInt = 0
  val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (0), "1" -> (1), "2" -> (2), "3" -> (3), "4" -> (4), "5" -> (5), "6" -> (6), "7" -> (7), "8" -> (8), "9" -> (9))
  while (i < BigInt(((s).size).toInt)) {
    val ch: String = s.slice((i).toInt, (i + 1).toInt)
    if ((!(digits.contains(ch)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
      return 0
    }
    n = n * 10 + digits.getOrElse(ch, null).asInstanceOf[BigInt]
    i = i + 1
  }
  return n
}

def parseDC(_s: String): BigInt = {
  var s: String = _s
  var neg: Boolean = false
  if ((BigInt(((s).size).toInt) > 0 && s.slice((0).toInt, (1).toInt) == "-").asInstanceOf[Boolean]) {
    neg = true
    s = s.slice((1).toInt, ((s).size).toInt)
  }
  var dollars: BigInt = 0
  var cents: BigInt = 0
  var i: BigInt = 0
  var seenDot: Boolean = false
  var centDigits: BigInt = 0
  val _ct1 = new Breaks
  while (i < BigInt(((s).size).toInt)) {
    _ct1.breakable {
      val ch: String = s.slice((i).toInt, (i + 1).toInt)
      if (ch == ".") {
        seenDot = true
        i = i + 1
        _ct1.break()
      }
      val d: BigInt = parseIntDigits(ch)
      if (seenDot) {
        if (centDigits < 2) {
          cents = cents * 10 + d
          centDigits = centDigits + 1
        }
      } else {
        dollars = dollars * 10 + d
      }
      i = i + 1
    }
  }
  if (centDigits == 1) {
    cents = cents * 10
  }
  var `val`: BigInt = dollars * 100 + cents
  if (neg) {
    `val` = 0 - `val`
  }
  return `val`
}

def parseRate(_s: String): BigInt = {
  var s: String = _s
  var neg: Boolean = false
  if ((BigInt(((s).size).toInt) > 0 && s.slice((0).toInt, (1).toInt) == "-").asInstanceOf[Boolean]) {
    neg = true
    s = s.slice((1).toInt, ((s).size).toInt)
  }
  var whole: BigInt = 0
  var frac: BigInt = 0
  var digits: BigInt = 0
  var seenDot: Boolean = false
  var i: BigInt = 0
  val _ct2 = new Breaks
  while (i < BigInt(((s).size).toInt)) {
    _ct2.breakable {
      val ch: String = s.slice((i).toInt, (i + 1).toInt)
      if (ch == ".") {
        seenDot = true
        i = i + 1
        _ct2.break()
      }
      val d: BigInt = parseIntDigits(ch)
      if (seenDot) {
        if (digits < 4) {
          frac = frac * 10 + d
          digits = digits + 1
        }
      } else {
        whole = whole * 10 + d
      }
      i = i + 1
    }
  }
  while (digits < 4) {
    frac = frac * 10
    digits = digits + 1
  }
  var `val`: BigInt = whole * 10000 + frac
  if (neg) {
    `val` = 0 - `val`
  }
  return `val`
}

def dcString(dc: BigInt): String = {
  var d: BigInt = dc / 100
  var n: BigInt = dc
  if (n < 0) {
    n = 0 - n
  }
  var c: BigInt = n % 100
  var cstr: String = String.valueOf(c)
  if ((cstr).size == 1) {
    cstr = "0" + cstr
  }
  return String.valueOf(d) + "." + cstr
}

def extend(dc: BigInt, n: BigInt): BigInt = {
  return dc * n
}

def tax(total: BigInt, rate: BigInt): BigInt = {
  return (total * rate + 5000) / 10000
}

def padLeft(s: String, n: BigInt): String = {
  var out: String = s
  while (BigInt(((out).size).toInt) < n) {
    out = " " + out
  }
  return out
}

def main(): Any = {
  val hp: BigInt = parseDC("5.50")
  val mp: BigInt = parseDC("2.86")
  val rate: BigInt = parseRate("0.0765")
  val totalBeforeTax: BigInt = extend(hp, BigInt("4000000000000000")) + extend(mp, 2)
  val t: BigInt = tax(totalBeforeTax, rate)
  val total: BigInt = totalBeforeTax + t
  println("Total before tax: " + padLeft(dcString(totalBeforeTax), 22))
  println("             Tax: " + padLeft(dcString(t), 22))
  println("           Total: " + padLeft(dcString(total), 22))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
