// Generated by Mochi v0.10.40 on 2025-07-26 09:47:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

private def _parseIntStr(s: String, base: BigInt): BigInt = BigInt(s, base.toInt)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def split(s: String, sep: String): ArrayBuffer[String] = {
      var parts: ArrayBuffer[String] = ArrayBuffer()
      var cur: String = ""
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        if ((((sep).size > BigInt(0) && (i + (sep).size).asInstanceOf[Int] <= (s).size).asInstanceOf[Boolean] && s.slice(i, (i + (sep).size).toInt) == sep).asInstanceOf[Boolean]) {
          parts = parts :+ cur
          cur = ""
          i = (i + (sep).size).asInstanceOf[BigInt]
        } else {
          cur = cur + s.slice((i).toInt, (i + BigInt(1)).toInt)
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      parts = parts :+ cur
      return parts
    }
    def join(xs: ArrayBuffer[String], sep: String): String = {
      var res: String = ""
      var i: BigInt = BigInt(0)
      while (i < (xs).size) {
        if (i > BigInt(0)) {
          res = (res + sep).toString
        }
        res = (res + xs((i).toInt)).toString
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return res
    }
    def repeat(ch: String, n: BigInt): String = {
      var out: String = ""
      var i: BigInt = BigInt(0)
      while (i < n) {
        out = (out + ch).toString
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return out
    }
    def parseIntStr(str: String): BigInt = {
      var i: BigInt = BigInt(0)
      var neg: Boolean = false
      if (((str).size > BigInt(0) && str.slice((BigInt(0)).toInt, (BigInt(1)).toInt) == "-").asInstanceOf[Boolean]) {
        neg = true
        i = BigInt(1)
      }
      var n: BigInt = BigInt(0)
      val digits: Map[String,BigInt] = scala.collection.mutable.Map("0" -> (BigInt(0)), "1" -> (BigInt(1)), "2" -> (BigInt(2)), "3" -> (BigInt(3)), "4" -> (BigInt(4)), "5" -> (BigInt(5)), "6" -> (BigInt(6)), "7" -> (BigInt(7)), "8" -> (BigInt(8)), "9" -> (BigInt(9)))
      while (i < (str).size) {
        n = (n * BigInt(10) + digits.getOrElse(str.slice((i).toInt, (i + BigInt(1)).toInt), null.asInstanceOf[BigInt])).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      if (neg) {
        n = (BigInt(0) - n).asInstanceOf[BigInt]
      }
      return n
    }
    def toBinary(n: BigInt, bits: BigInt): String = {
      var b: String = ""
      var `val`: BigInt = n
      var i: BigInt = BigInt(0)
      while (i < bits) {
        b = (String.valueOf(`val` % BigInt(2)) + b).toString
        `val` = `val` / BigInt(2)
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return b
    }
    def binToInt(bits: String): BigInt = {
      var n: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      while (i < (bits).size) {
        n = (n * BigInt(2)).toString.toDouble + (_parseIntStr(bits.slice((i).toInt, (i + BigInt(1)).toInt), BigInt(10))).toString.toDouble
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return n
    }
    def padRight(s: String, width: BigInt): String = {
      var out: String = s
      while ((out).size < width) {
        out = out + " "
      }
      return out
    }
    def canonicalize(cidr: String): String = {
      val parts: ArrayBuffer[String] = split(cidr, "/")
      val dotted: String = parts((BigInt(0)).toInt)
      val size = _parseIntStr(parts((BigInt(1)).toInt), BigInt(10))
      var binParts: ArrayBuffer[String] = ArrayBuffer()
      for (p <- split(dotted, ".")) {
        binParts = binParts :+ toBinary((_parseIntStr(p, BigInt(10))).asInstanceOf[BigInt], BigInt(8))
      }
      var binary: String = join(binParts, "")
      binary = binary.slice((BigInt(0)).toInt, (size).toInt) + _repeat("0", BigInt(32) - size)
      var canonParts: ArrayBuffer[String] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < (binary).size) {
        canonParts = canonParts :+ (String.valueOf(binToInt(binary.slice((i).toInt, (i + BigInt(8)).toInt)))).toString
        i = (i + BigInt(8)).asInstanceOf[BigInt]
      }
      return join(canonParts, ".") + "/" + parts((BigInt(1)).toInt)
    }
    val tests: ArrayBuffer[String] = ArrayBuffer("87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18")
    for (t <- tests) {
      println(padRight(t.toString, BigInt(18)) + " -> " + canonicalize(t.toString))
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
