// Generated by Mochi v0.10.37 on 2025-07-23 12:39:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs(System.nanoTime().toInt)
  }
}

def parseIntStr(str: String): Int = {
  var i: Int = 0
  var neg: Boolean = false
  if (((str).size > 0 && str.slice(0, 1) == "-").asInstanceOf[Boolean]) {
    neg = true
    i = 1
  }
  var n: Int = 0
  val digits: Map[String,Int] = Map("0" -> (0), "1" -> (1), "2" -> (2), "3" -> (3), "4" -> (4), "5" -> (5), "6" -> (6), "7" -> (7), "8" -> (8), "9" -> (9))
  while (i < (str).size) {
    n = (n * 10 + digits(str.slice(i, i + 1)).asInstanceOf[Int]).asInstanceOf[Int]
    i = (i + 1).asInstanceOf[Int]
  }
  if (neg) {
    n = (0 - n).asInstanceOf[Int]
  }
  return n
}

def main() = {
  var total: Int = 0
  var computer: Boolean = _now() % 2 == 0
  println("Enter q to quit at any time\n")
  if (computer) {
    println("The computer will choose first")
  } else {
    println("You will choose first")
  }
  println("\n\nRunning total is now 0\n\n")
  var round: Int = 1
  var done: Boolean = false
  val _br1 = new Breaks
  val _ct1 = new Breaks
  _br1.breakable {
    while (!done) {
      _ct1.breakable {
        println("ROUND " + String.valueOf(round) + ":\n\n")
        var i: Int = 0
        val _br2 = new Breaks
        val _ct2 = new Breaks
        _br2.breakable {
          while (i < 2 && (!done).asInstanceOf[Boolean]) {
            _ct2.breakable {
              if (computer) {
                var choice: Int = 0
                if (total < 18) {
                  choice = (_now() % 3 + 1).asInstanceOf[Int]
                } else {
                  choice = (21 - total).asInstanceOf[Int]
                }
                total = (total + choice).asInstanceOf[Int]
                println("The computer chooses " + String.valueOf(choice))
                println("Running total is now " + String.valueOf(total))
                if (total == 21) {
                  println("\nSo, commiserations, the computer has won!")
                  done = true
                }
              } else {
                val _br3 = new Breaks
                val _ct3 = new Breaks
                _br3.breakable {
                  while (true) {
                    _ct3.breakable {
                      println("Your choice 1 to 3 : ")
                      val line = Option(scala.io.StdIn.readLine()).getOrElse("q")
                      if ((line == "q" || line == "Q").asInstanceOf[Boolean]) {
                        println("OK, quitting the game")
                        done = true
                        _br3.break()
                      }
                      var num = parseIntStr(line)
                      if ((num < 1 || num > 3).asInstanceOf[Boolean]) {
                        if (total + num > 21) {
                          println("Too big, try again")
                        } else {
                          println("Out of range, try again")
                        }
                        _ct3.break()
                      }
                      if (total + num > 21) {
                        println("Too big, try again")
                        _ct3.break()
                      }
                      total = (total + num).asInstanceOf[Int]
                      println("Running total is now " + String.valueOf(total))
                      _br3.break()
                    }
                  }
                }
                if (total == 21) {
                  println("\nSo, congratulations, you've won!")
                  done = true
                }
              }
              println("\n")
              computer = (!computer).asInstanceOf[Boolean]
              i = (i + 1).asInstanceOf[Int]
            }
          }
        }
        round = (round + 1).asInstanceOf[Int]
      }
    }
  }
}

def main(args: Array[String]): Unit = {
  main()
}
}
