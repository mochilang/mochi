// Generated by Mochi v0.10.56 on 2025-08-04 00:19:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sortFloat(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var arr: ArrayBuffer[Double] = xs
  var n: Int = (arr).size
  var i: BigInt = BigInt(0)
  while (i < BigInt(n.toString.toDouble.toInt)) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1).toInt) {
      if (arr((j.toInt).toInt) > arr((j + BigInt(1).toInt).toInt)) {
        val t: Double = arr((j.toInt).toInt)
        arr((j).toInt) = arr((j + BigInt(1).toInt).toInt)
        arr((j + BigInt(1)).toInt) = t
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def median(s: ArrayBuffer[Double]): Double = {
  val n: Int = (s).size
  if (n % BigInt(2).toInt == BigInt(1)) {
    return s((n / BigInt(2).toInt.toInt).toInt)
  }
  return (s((n / BigInt(2).toInt - BigInt(1).toInt).toInt) + s((n / BigInt(2).toInt.toInt).toInt)) / 2.0
}

def fivenum(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var s: ArrayBuffer[Double] = sortFloat(xs)
  val n: Int = (s).size
  val q1: Double = s(((n - BigInt(1).toInt) / BigInt(4).toInt).toInt)
  val med: Double = median(s)
  val q3: Double = s((BigInt(3) * (n - BigInt(1).toInt) / BigInt(4).toInt).toInt)
  return (ArrayBuffer(s((BigInt(0).toInt).toInt), q1, med, q3, s((n - BigInt(1).toInt.toInt).toInt))).asInstanceOf[ArrayBuffer[Double]]
}

val x1: ArrayBuffer[Double] = ArrayBuffer(36.0, 40.0, 7.0, 39.0, 41.0, 15.0)

val x2: ArrayBuffer[Double] = ArrayBuffer(15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0)

val x3: ArrayBuffer[Any] = ArrayBuffer(0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(fivenum(x1)))
    println(String.valueOf(fivenum(x2)))
    println(String.valueOf(fivenum(x3.asInstanceOf[ArrayBuffer[Double]])))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
