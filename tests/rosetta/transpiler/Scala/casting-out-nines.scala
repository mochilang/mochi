// Generated by Mochi v0.10.40 on 2025-07-26 09:48:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def parseIntBase(s: String, base: BigInt): BigInt = {
      val digits: String = "0123456789abcdefghijklmnopqrstuvwxyz"
      var n: BigInt = BigInt(0)
      var i: BigInt = BigInt(0)
      val _br0 = new Breaks
      _br0.breakable {
        while (i < (s).size) {
          var j: BigInt = BigInt(0)
          var v: BigInt = BigInt(0)
          val _br1 = new Breaks
          _br1.breakable {
            while (j < (digits).size) {
              if (digits.slice(j, (j + BigInt(1)).toInt) == s.slice((i).toInt, (i + BigInt(1)).toInt)) {
                v = j
                _br1.break()
              }
              j = (j + BigInt(1)).asInstanceOf[BigInt]
            }
          }
          n = (n * base + v).asInstanceOf[BigInt]
          i = (i + BigInt(1)).asInstanceOf[BigInt]
        }
      }
      return n
    }
    def intToBase(n: BigInt, base: BigInt): String = {
      val digits: String = "0123456789abcdefghijklmnopqrstuvwxyz"
      if (n == BigInt(0)) {
        return "0"
      }
      var out: String = ""
      var v: BigInt = n
      while (v > BigInt(0)) {
        val d = v % base
        out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
        v = (v / base).asInstanceOf[BigInt]
      }
      return out
    }
    def subset(base: BigInt, begin: String, end: String): ArrayBuffer[String] = {
      var b: BigInt = parseIntBase(begin, base)
      var e: BigInt = parseIntBase(end, base)
      var out: ArrayBuffer[String] = ArrayBuffer()
      var k: BigInt = b
      while (k <= e) {
        val ks: String = intToBase(k, base)
        val mod = base - BigInt(1)
        val r1 = parseIntBase(ks, base) % mod
        val r2 = parseIntBase(ks, base) * parseIntBase(ks, base) % mod
        if (r1 == r2) {
          out = out :+ ks
        }
        k = (k + BigInt(1)).asInstanceOf[BigInt]
      }
      return out
    }
    val testCases: ArrayBuffer[Map[String,Any]] = ArrayBuffer(scala.collection.mutable.Map("base" -> (BigInt(10)), "begin" -> ("1"), "end" -> ("100"), "kaprekar" -> (ArrayBuffer("1", "9", "45", "55", "99"))), scala.collection.mutable.Map("base" -> (BigInt(17)), "begin" -> ("10"), "end" -> ("gg"), "kaprekar" -> (ArrayBuffer("3d", "d4", "gg"))))
    var idx: BigInt = BigInt(0)
    val _br4 = new Breaks
    _br4.breakable {
      while (idx < (testCases).size) {
        val tc: Map[String,Any] = testCases((idx).toInt)
        println("\nTest case base = " + String.valueOf(tc.getOrElse("base", null.asInstanceOf[Any])) + ", begin = " + (tc.getOrElse("begin", null.asInstanceOf[Any])).toString + ", end = " + (tc.getOrElse("end", null.asInstanceOf[Any])).toString + ":")
        val s: ArrayBuffer[String] = subset((tc.getOrElse("base", null.asInstanceOf[Any])).asInstanceOf[BigInt], (tc.getOrElse("begin", null.asInstanceOf[Any])).toString, (tc.getOrElse("end", null.asInstanceOf[Any])).toString)
        println("Subset:  " + String.valueOf(s))
        println("Kaprekar:" + String.valueOf(tc.getOrElse("kaprekar", null.asInstanceOf[Any])))
        var sx: BigInt = BigInt(0)
        var valid: Boolean = true
        var i: BigInt = BigInt(0)
        val _br5 = new Breaks
        _br5.breakable {
          while (i < ((tc.getOrElse("kaprekar", null.asInstanceOf[Any])).toString).size) {
            val k = tc.getOrElse("kaprekar", null.asInstanceOf[Any]).asInstanceOf[Map[String,Any]](i)
            var found: Boolean = false
            val _br6 = new Breaks
            _br6.breakable {
              while (sx < (s).size) {
                if (s((sx).toInt) == k) {
                  found = true
                  sx = (sx + BigInt(1)).asInstanceOf[BigInt]
                  _br6.break()
                }
                sx = (sx + BigInt(1)).asInstanceOf[BigInt]
              }
            }
            if ((!found).asInstanceOf[Boolean]) {
              println("Fail:" + k.toString + " not in subset")
              valid = false
              _br5.break()
            }
            i = (i + BigInt(1)).asInstanceOf[BigInt]
          }
        }
        if (valid) {
          println("Valid subset.")
        }
        idx = (idx + BigInt(1)).asInstanceOf[BigInt]
      }
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
