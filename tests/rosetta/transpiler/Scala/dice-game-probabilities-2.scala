// Generated by Mochi v0.10.42 on 2025-07-28 10:32:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def roll(nDice: BigInt, nSides: BigInt): BigInt = {
  var sum: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < nDice) {
    sum = (sum + _now() % nSides + BigInt(1)).asInstanceOf[BigInt]
    i = (i + BigInt(1)).asInstanceOf[BigInt]
  }
  return sum
}

def beats(n1: BigInt, s1: BigInt, n2: BigInt, s2: BigInt, trials: BigInt): Double = {
  var wins: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < trials) {
    if (roll(n1, s1) > roll(n2, s2)) {
      wins = (wins + BigInt(1)).asInstanceOf[BigInt]
    }
    i = (i + BigInt(1)).asInstanceOf[BigInt]
  }
  return wins.toString.toDouble / trials.toString.toDouble
}

def main(args: Array[String]): Unit = {
  println(String.valueOf(beats(BigInt(9), BigInt(4), BigInt(6), BigInt(6), BigInt(1000))))
  println(String.valueOf(beats(BigInt(5), BigInt(10), BigInt(7), BigInt(6), BigInt(1000))))
}
}
