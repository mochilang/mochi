// Generated by Mochi v0.10.42 on 2025-07-27 17:30:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def xor(a: BigInt, b: BigInt): BigInt = {
      var res: BigInt = BigInt(0)
      var bit: BigInt = BigInt(1)
      var x: BigInt = a
      var y: BigInt = b
      while (x > BigInt(0) || y > BigInt(0)) {
        val abit = x % BigInt(2)
        val bbit = y % BigInt(2)
        if (abit != bbit) {
          res = (res + bit).asInstanceOf[BigInt]
        }
        x = (x / BigInt(2)).asInstanceOf[BigInt]
        y = (y / BigInt(2)).asInstanceOf[BigInt]
        bit = (bit * BigInt(2)).asInstanceOf[BigInt]
      }
      return res
    }
    def rshift(x: BigInt, n: BigInt): BigInt = {
      var v: BigInt = x
      var i: BigInt = BigInt(0)
      while (i < n) {
        v = (v / BigInt(2)).asInstanceOf[BigInt]
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return v
    }
    def ord(ch: String): BigInt = {
      val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      val lower: String = "abcdefghijklmnopqrstuvwxyz"
      var idx: BigInt = indexOf(upper, ch)
      if (idx >= BigInt(0)) {
        return (BigInt(65) + idx).asInstanceOf[BigInt]
      }
      idx = indexOf(lower, ch)
      if (idx >= BigInt(0)) {
        return (BigInt(97) + idx).asInstanceOf[BigInt]
      }
      if (ch == " ") {
        return BigInt(32)
      }
      return BigInt(0)
    }
    def toHex(n: BigInt): String = {
      val digits: String = "0123456789ABCDEF"
      if (n == BigInt(0)) {
        return "0"
      }
      var v: BigInt = n
      var out: String = ""
      while (v > BigInt(0)) {
        val d = v % BigInt(16)
        out = digits.slice((d).toInt, (d + BigInt(1)).toInt) + out
        v = (v / BigInt(16)).asInstanceOf[BigInt]
      }
      return out
    }
    def crc32Table(): ArrayBuffer[BigInt] = {
      var table: ArrayBuffer[BigInt] = ArrayBuffer()
      var i: BigInt = BigInt(0)
      while (i < BigInt(256)) {
        var word: BigInt = i
        var j: BigInt = BigInt(0)
        while (j < BigInt(8)) {
          if (word % BigInt(2) == BigInt(1)) {
            word = xor(rshift(word, BigInt(1)), BigInt(3988292384))
          } else {
            word = rshift(word, BigInt(1))
          }
          j = (j + BigInt(1)).asInstanceOf[BigInt]
        }
        table = table :+ word
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return table
    }
    val table: ArrayBuffer[BigInt] = crc32Table()
    def crc32(s: String): BigInt = {
      var crc: BigInt = BigInt(4294967295)
      var i: BigInt = BigInt(0)
      while (i < (s).size) {
        val c: BigInt = ord(s.slice((i).toInt, (i + BigInt(1)).toInt))
        val idx: BigInt = xor((crc % BigInt(256)).asInstanceOf[BigInt], c)
        crc = xor(table((idx).toInt), rshift(crc, BigInt(8)))
        i = (i + BigInt(1)).asInstanceOf[BigInt]
      }
      return (BigInt(4294967295) - crc).asInstanceOf[BigInt]
    }
    def main(): Any = {
      val s: String = "The quick brown fox jumps over the lazy dog"
      val result: BigInt = crc32(s)
      val hex: String = toHex(result)
      println(hex)
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
