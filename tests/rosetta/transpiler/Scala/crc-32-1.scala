// Generated by Mochi v0.10.54 on 2025-08-02 14:38:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def xor(a: BigInt, b: BigInt): BigInt = {
  var res: BigInt = BigInt(0L)
  var bit: BigInt = BigInt(1L)
  var x: BigInt = a
  var y: BigInt = b
  while (x > BigInt(0L) || y > BigInt(0L)) {
    val abit: BigInt = x % BigInt(2L)
    val bbit: BigInt = y % BigInt(2L)
    if (abit != bbit) {
      res = res + bit
    }
    x = x / BigInt(2L)
    y = y / BigInt(2L)
    bit = bit * BigInt(2L)
  }
  return res
}

def rshift(x: BigInt, n: BigInt): BigInt = {
  var v: BigInt = x
  var i: BigInt = BigInt(0L)
  while (i < n) {
    v = v / BigInt(2L)
    i = i + BigInt(1L)
  }
  return v
}

def ord(ch: String): BigInt = {
  val upper: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  val lower: String = "abcdefghijklmnopqrstuvwxyz"
  var idx: BigInt = BigInt(upper.indexOf(ch))
  if (idx >= BigInt(0L)) {
    return BigInt(65L) + idx
  }
  idx = BigInt(lower.indexOf(ch))
  if (idx >= BigInt(0L)) {
    return BigInt(97L) + idx
  }
  if (ch == " ") {
    return BigInt(32L)
  }
  return BigInt(0L)
}

def toHex(n: BigInt): String = {
  val digits: String = "0123456789ABCDEF"
  if (n == BigInt(0L)) {
    return "0"
  }
  var v: BigInt = n
  var out: String = ""
  while (v > BigInt(0L)) {
    val d: BigInt = v % BigInt(16L)
    out = digits.slice((d).toInt, (d + BigInt(1L)).toInt) + out
    v = v / BigInt(16L)
  }
  return out
}

def crc32Table(): ArrayBuffer[BigInt] = {
  var table: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt(0L)
  while (i < BigInt(256L)) {
    var word: BigInt = i
    var j: BigInt = BigInt(0L)
    while (j < BigInt(8L)) {
      if (word % BigInt(2L) == BigInt(1L)) {
        word = xor(rshift(word, BigInt(1L)), BigInt(3988292384L))
      } else {
        word = rshift(word, BigInt(1L))
      }
      j = j + BigInt(1L)
    }
    table = table :+ word
    i = i + BigInt(1L)
  }
  return table
}

def crc32(s: String): BigInt = {
  var crc: BigInt = BigInt(4294967295L)
  var i: BigInt = BigInt(0L)
  while (i < (s).size) {
    val c: BigInt = ord(s.slice((i).toInt, (i + BigInt(1L)).toInt))
    val idx: BigInt = xor(crc % BigInt(256L), c)
    crc = xor(table((idx.toInt).toInt), rshift(crc, BigInt(8L)))
    i = i + BigInt(1L)
  }
  return BigInt(4294967295L) - crc
}

def main(): Any = {
  val s: String = "The quick brown fox jumps over the lazy dog"
  val result: BigInt = crc32(s)
  val hex: String = toHex(result)
  println(hex)
}

val table: ArrayBuffer[BigInt] = crc32Table()

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
