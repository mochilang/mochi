// Generated by Mochi v0.10.52 on 2025-08-02 02:05:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def hailstone(n: BigInt): ArrayBuffer[BigInt] = {
  var seq: ArrayBuffer[BigInt] = ArrayBuffer()
  var x: BigInt = n
  seq = seq :+ x
  while (x > BigInt(1)) {
    if (x % BigInt(2) == BigInt(0)) {
      x = x / BigInt(2)
    } else {
      x = BigInt(3) * x + BigInt(1)
    }
    seq = seq :+ x
  }
  return seq
}

def listString(xs: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < (xs).size) {
    s = s + String.valueOf(xs((i).toInt))
    if (i < (xs).size - BigInt(1).toInt) {
      s = s + " "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def libMain(): Any = {
  var seq: ArrayBuffer[BigInt] = hailstone(BigInt(27))
  println("")
  println("Hailstone sequence for the number 27:")
  println("  has " + String.valueOf((seq).size) + " elements")
  println("  starts with " + listString(seq.slice((BigInt(0)).toInt, (BigInt(4)).toInt)))
  println("  ends with " + listString(seq.slice(((seq).size - BigInt(4).toInt).toInt, ((seq).size).toInt)))
  var longest: BigInt = BigInt(0)
  var length: BigInt = BigInt(0)
  var i: BigInt = BigInt(1)
  while (i < BigInt(100000)) {
    val l: Int = (hailstone(i)).size
    if (l > length) {
      longest = i
      length = l
    }
    i = i + BigInt(1)
  }
  println("")
  println(String.valueOf(longest) + " has the longest Hailstone sequence, its length being " + String.valueOf(length) + ".")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    libMain()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
