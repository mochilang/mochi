// Generated by Mochi v0.10.40 on 2025-07-26 04:52:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    def indexOf(s: String, ch: String): Int = {
      var i: Int = 0
      while (i < (s).size) {
        if (s.slice(i, i + 1) == ch) {
          return i
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return 0 - 1
    }
    def fields(s: String): ArrayBuffer[String] = {
      var words: ArrayBuffer[String] = ArrayBuffer()
      var cur: String = ""
      var i: Int = 0
      while (i < (s).size) {
        val ch: String = s.slice(i, i + 1)
        if (((ch == " " || ch == "\t").asInstanceOf[Boolean] || ch == "\n").asInstanceOf[Boolean]) {
          if ((cur).size > 0) {
            words = words :+ cur
            cur = ""
          }
        } else {
          cur = (cur + ch).toString
        }
        i = (i + 1).asInstanceOf[Int]
      }
      if ((cur).size > 0) {
        words = words :+ cur
      }
      return words
    }
    def makePatterns(): ArrayBuffer[String] = {
      val digits: ArrayBuffer[String] = ArrayBuffer("1", "2", "3", "4", "5", "6", "7", "8", "9")
      var pats: ArrayBuffer[String] = ArrayBuffer()
      var i: Int = 0
      while (i < (digits).size) {
        var j: Int = 0
        while (j < (digits).size) {
          if (j != i) {
            var k: Int = 0
            while (k < (digits).size) {
              if ((k != i && k != j).asInstanceOf[Boolean]) {
                var l: Int = 0
                while (l < (digits).size) {
                  if (((l != i && l != j).asInstanceOf[Boolean] && l != k).asInstanceOf[Boolean]) {
                    pats = pats :+ digits(i) + digits(j) + digits(k) + digits(l)
                  }
                  l = (l + 1).asInstanceOf[Int]
                }
              }
              k = (k + 1).asInstanceOf[Int]
            }
          }
          j = (j + 1).asInstanceOf[Int]
        }
        i = (i + 1).asInstanceOf[Int]
      }
      return pats
    }
    def main(): Any = {
      println("Cows and bulls/player\n" + "You think of four digit number of unique digits in the range 1 to 9.\n" + "I guess.  You score my guess:\n" + "    A correct digit but not in the correct place is a cow.\n" + "    A correct digit in the correct place is a bull.\n" + "You give my score as two numbers separated with a space.")
      var patterns: ArrayBuffer[String] = makePatterns()
      val _br6 = new Breaks
      _br6.breakable {
        while (true) {
          if ((patterns).size == 0) {
            println("Oops, check scoring.")
            return
          }
          val guess: String = patterns(0)
          patterns = patterns.slice(1, (patterns).size)
          var cows: Int = 0
          var bulls: Int = 0
          val _br7 = new Breaks
          _br7.breakable {
            while (true) {
              println("My guess: " + guess + ".  Score? (c b) ")
              val line = Option(scala.io.StdIn.readLine()).getOrElse("q")
              val toks: ArrayBuffer[String] = fields(line)
              if ((toks).size == 2) {
                val c = toks(0).toString().toInt
                val b = toks(1).toString().toInt
                if (((((c >= 0 && c <= 4).asInstanceOf[Boolean] && b >= 0).asInstanceOf[Boolean] && b <= 4).asInstanceOf[Boolean] && (c + b).asInstanceOf[Int] <= 4).asInstanceOf[Boolean]) {
                  cows = c
                  bulls = b
                  _br7.break()
                }
              }
              println("Score guess as two numbers: cows bulls")
            }
          }
          if (bulls == 4) {
            println("I did it. :)")
            return
          }
          var next: ArrayBuffer[String] = ArrayBuffer()
          var idx: Int = 0
          while (idx < (patterns).size) {
            val pat: String = patterns(idx)
            var c: Int = 0
            var b: Int = 0
            var i: Int = 0
            while (i < 4) {
              val cg: String = guess.slice(i, i + 1)
              val cp: String = pat.slice(i, i + 1)
              if (cg == cp) {
                b = (b + 1).asInstanceOf[Int]
              } else {
                if (indexOf(pat, cg) >= 0) {
                  c = (c + 1).asInstanceOf[Int]
                }
              }
              i = (i + 1).asInstanceOf[Int]
            }
            if ((c == cows && b == bulls).asInstanceOf[Boolean]) {
              next = next :+ pat
            }
            idx = (idx + 1).asInstanceOf[Int]
          }
          patterns = next
        }
      }
      return
    }
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
