(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:02 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec newFps fn =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("coeffs", Obj.repr ([])); ("compute", Obj.repr (fn))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and extract f n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  (try while (List.length ((Obj.obj (List.assoc ("coeffs") (!f) : Obj.t) : float list)) <= n) do
    try
  let idx = List.length ((Obj.obj (List.assoc ("coeffs") (!f) : Obj.t) : float list)) in
  let v = ((Obj.obj (List.assoc ("compute") (!f) : Obj.t) : Obj.t -> float) (Obj.repr (idx))) in
  f := (("coeffs", Obj.repr ((List.append ((Obj.obj (List.assoc ("coeffs") (!f) : Obj.t) : float list)) [(Obj.magic (v) : float)]))) :: List.remove_assoc ("coeffs") (Obj.magic (!f) : (string * Obj.t) list));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth ((Obj.obj (List.assoc ("coeffs") (!f) : Obj.t) : float list)) (n)) : float); raise Return
  with Return -> !__ret)

and one () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun i ->
  let i = (Obj.magic i : int) in
  if (i = 0) then (
  __ret := (Obj.magic (1.0) : (string * Obj.t) list); raise Return
  );
  0.0) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  (extract (ref (a)) (Obj.repr (n)) +. extract (ref (b)) (Obj.repr (n)))) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  (extract (ref (a)) (Obj.repr (n)) -. extract (ref (b)) (Obj.repr (n)))) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  let s = ref (0.0) in
  let k = ref (0) in
  (try while (!k <= n) do
    try
  s := (!s +. (extract (ref (a)) (Obj.repr (!k)) *. extract (ref (b)) (Obj.repr ((n - !k)))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  !s) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and div a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let q = ref (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  0.0) : Obj.t -> float))) in
  q := (("compute", Obj.repr ((fun n ->
  let n = (Obj.magic n : int) in
  let b0 = extract (ref (b)) (Obj.repr (0)) in
  if (b0 = 0.0) then (
  __ret := (Obj.magic ((0.0 /. 0.0)) : (string * Obj.t) list); raise Return
  );
  let s = ref (extract (ref (a)) (Obj.repr (n))) in
  let k = ref (1) in
  (try while (!k <= n) do
    try
  s := (!s -. (extract (ref (b)) (Obj.repr (!k)) *. extract (q) (Obj.repr ((n - !k)))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  (!s /. b0)))) :: List.remove_assoc ("compute") (Obj.magic (!q) : (string * Obj.t) list));
  __ret := (Obj.magic (!q) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and differentiate a =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  (float_of_int ((n + 1)) *. extract (ref (a)) (Obj.repr ((n + 1))))) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and integrate a =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic (0.0) : (string * Obj.t) list); raise Return
  );
  (extract (ref (a)) (Obj.repr ((n - 1))) /. float_of_int (n))) : Obj.t -> float))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sinCos () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let sin = ref (newFps ((Obj.magic (fun n ->
  let n = (Obj.magic n : int) in
  0.0) : Obj.t -> float))) in
  let cos = ref (sub (one ()) (integrate (!sin))) in
  sin := (("compute", Obj.repr ((fun n ->
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic (0.0) : (string * Obj.t) list); raise Return
  );
  (extract (cos) (Obj.repr ((n - 1))) /. float_of_int (n))))) :: List.remove_assoc ("compute") (Obj.magic (!sin) : (string * Obj.t) list));
  __ret := (Obj.magic ([("sin", Obj.repr (!sin)); ("cos", Obj.repr (!cos))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and floorf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic x : int) in
  __ret := (Obj.magic (float_of_int (y)) : float); raise Return
  with Return -> !__ret)

and fmtF5 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let y = ref ((floorf (Obj.repr (((x *. 100000.0) +. 0.5))) /. 100000.0)) in
  let s = ref ((Printf.sprintf "%.16g" (!y))) in
  let dot = ref ((try String.index (!s) '.' with Not_found -> -1)) in
  if (!dot = (0 - 1)) then (
  s := (!s ^ ".00000");
  ) else (
  let decs = ref (((String.length (!s) - !dot) - 1)) in
  if (!decs > 5) then (
  s := String.sub !s (0) ((!dot + 6) - 0);
  ) else (
  (try while (!decs < 5) do
    try
  s := (!s ^ "0");
  decs := (!decs + 1);
    with Continue -> ()
  done with Break -> ());
  );
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and padFloat5 x width =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let width = (Obj.magic width : int) in
  let s = ref (fmtF5 (Obj.repr (x))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and partialSeries f =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < 6) do
    try
  out := (((!out ^ " ") ^ padFloat5 (Obj.repr (extract (ref (f)) (Obj.repr (!i)))) (Obj.repr (8))) ^ " ");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let p = sinCos () in
  print_endline (("sin:" ^ partialSeries ((Obj.magic (Obj.obj (List.assoc ("sin") (p) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list))));
  print_endline (("cos:" ^ partialSeries ((Obj.magic (Obj.obj (List.assoc ("cos") (p) : Obj.t) : ( string * Obj.t ) list) : (string * Obj.t) list))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()