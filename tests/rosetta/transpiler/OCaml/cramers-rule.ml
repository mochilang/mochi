(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let i = ref (0)
let s = ref ("[")
let j = ref (0)
let rec det m =
  let __ret = ref 0.0 in
  (try
  let n = List.length (m) in
  if (n = 1) then (
  __ret := (Obj.magic (List.nth (List.nth (m) (0)) (0)) : float); raise Return
  );
  let total = ref (0.0) in
  let sign = ref (1.0) in
  let c = ref (0) in
  (try while (!c < n) do
    try
  let sub = ref (([] : float list list)) in
  let r = ref (1) in
  (try while (!r < n) do
    try
  let row = ref (([] : float list)) in
  let cc = ref (0) in
  (try while (!cc < n) do
    try
  if (!cc <> !c) then (
  row := (List.append (!row) [(Obj.magic (List.nth (List.nth (m) (!r)) (!cc)) : float)]);
  );
  cc := (!cc + 1);
    with Continue -> ()
  done with Break -> ());
  sub := (List.append (!sub) [(Obj.magic (!row) : float list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  total := (!total +. ((!sign *. List.nth (List.nth (m) (0)) (!c)) *. det (!sub)));
  sign := (!sign *. (-.(1.0)));
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : float); raise Return
  with Return -> !__ret)

and replaceCol m col v =
  let __ret = ref ([] : float list list) in
  (try
  let col = (Obj.magic col : int) in
  let res = ref (([] : float list list)) in
  let r = ref (0) in
  (try while (!r < List.length (m)) do
    try
  let row = ref (([] : float list)) in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (m) (!r))) do
    try
  if (!c = col) then (
  row := (List.append (!row) [(Obj.magic (List.nth (v) (!r)) : float)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (List.nth (List.nth (m) (!r)) (!c)) : float)]);
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : float list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list list); raise Return
  with Return -> !__ret)


let () =
  let m = ref ([[2.0; (-.(1.0)); 5.0; 1.0]; [3.0; 2.0; 2.0; (-.(6.0))]; [1.0; 3.0; 3.0; (-.(1.0))]; [5.0; (-.(2.0)); (-.(3.0)); 3.0]]) in
  let v = ref ([(-.(3.0)); (-.(32.0)); (-.(47.0)); 49.0]) in
  let x = ref (([] : float list)) in
  let mem_start = _mem () in
  let start = _now () in
  let d = det (!m) in
  (try while (!i < List.length (!v)) do
    try
  let mc = ref (replaceCol (!m) (Obj.repr (!i)) (!v)) in
  x := (List.append (!x) [(Obj.magic ((det (!mc) /. d)) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < List.length (!x)) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" (List.nth (!x) (!j))));
  if (!j < (List.length (!x) - 1)) then (
  s := (!s ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  print_endline (__show !s);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()