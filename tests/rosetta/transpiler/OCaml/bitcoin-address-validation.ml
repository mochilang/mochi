(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())


open Sha256

let _sha256 lst =
  let buf = Buffer.create (List.length lst) in
  List.iter (fun i -> Buffer.add_char buf (Char.chr i)) lst;
  let digest = Sha256.to_bin (Sha256.string (Buffer.contents buf)) in
  let rec loop i acc =
    if i < 0 then acc else loop (i - 1) ((Char.code digest.[i]) :: acc)
  in
  loop (String.length digest - 1) []

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec set58 addr =
  let __ret = ref ([] : int list) in
  (try
  let tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" in
  let a = ref ([]) in
  let i = ref (0) in
  (try while (!i < 25) do
    try
  a := List.append !a [0];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref (0) in
  (try while (!idx < String.length (addr)) do
    try
  let ch = String.sub (addr) !idx ((!idx + 1) - !idx) in
  let c = ref (indexOf (tmpl) (ch)) in
  if (!c < 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let j = ref (24) in
  (try while (!j >= 0) do
    try
  c := (!c + (58 * List.nth (!a) (!j)));
  a := (List.mapi (fun __i __x -> if __i = !j then (!c mod 256) else __x) (!a));
  c := (!c / 256);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  if (!c > 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

let rec doubleSHA256 bs =
  let __ret = ref ([] : int list) in
  (try
  let first = ref (_sha256 (bs)) in
  __ret := (Obj.magic (_sha256 (!first)) : int list); raise Return
  with Return -> !__ret)

let rec computeChecksum a =
  let __ret = ref ([] : int list) in
  (try
  let hash = ref (doubleSHA256 (List.of_seq (Seq.take (21 - 0) (Seq.drop 0 (List.to_seq a))))) in
  __ret := (Obj.magic (List.of_seq (Seq.take (4 - 0) (Seq.drop 0 (List.to_seq !hash)))) : int list); raise Return
  with Return -> !__ret)

let rec validA58 addr =
  let __ret = ref false in
  (try
  let a = ref (set58 (addr)) in
  if (List.length (!a) <> 25) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (List.nth (!a) (0) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let sum = ref (computeChecksum (!a)) in
  let i = ref (0) in
  (try while (!i < 4) do
    try
  if (List.nth (!a) ((21 + !i)) <> List.nth (!sum) (!i)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (validA58 ("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")));
  print_endline (__show (validA58 ("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
