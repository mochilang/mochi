(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 11:40 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec show xs =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and gen init n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let b = ref (init) in
  let res = ref (([] : int list)) in
  let sum = ref (0) in
  (try List.iter (fun x ->
    try
  res := (List.append (!res) [(Obj.magic (x) : int)]);
  sum := (!sum + x);
    with Continue -> ()) (!b) with Break -> ());
  (try while (List.length (!res) < n) do
    try
  let next = ref (!sum) in
  res := (List.append (!res) [(Obj.magic (!next) : int)]);
  sum := ((!sum + !next) - List.nth (!b) (0));
  b := (List.append (List.of_seq (Seq.take (List.length (!b) - 1) (Seq.drop 1 (List.to_seq !b)))) [(Obj.magic (!next) : int)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = 10 in
  print_endline ((" Fibonacci: " ^ show (gen ([1; 1]) (n))));
  print_endline (("Tribonacci: " ^ show (gen ([1; 1; 2]) (n))));
  print_endline (("Tetranacci: " ^ show (gen ([1; 1; 2; 4]) (n))));
  print_endline (("     Lucas: " ^ show (gen ([2; 1]) (n))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()