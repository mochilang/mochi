(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic ((n = 3)) : bool); raise Return
  );
  let d = ref (5) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 4);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let rec firstPrimeFactor n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n = 1) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic (3) : int); raise Return
  );
  if ((n mod 5) = 0) then (
  __ret := (Obj.magic (5) : int); raise Return
  );
  let inc = ref ([4; 2; 4; 2; 4; 6; 2; 6]) in
  let k = ref (7) in
  let i = ref (0) in
  (try while ((!k * !k) <= n) do
    try
  if ((n mod !k) = 0) then (
  __ret := (Obj.magic (!k) : int); raise Return
  );
  k := (!k + List.nth (!inc) (!i));
  i := ((!i + 1) mod List.length (!inc));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec padLeft n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec formatFloat f prec =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : float) in
  let prec = (Obj.magic prec : int) in
  let s = (string_of_float (f)) in
  let idx = (try String.index (s) '.' with Not_found -> -1) in
  if (idx < 0) then (
  __ret := (Obj.magic (s) : string); raise Return
  );
  let need = ((idx + 1) + prec) in
  if (String.length (s) > need) then (
  __ret := (Obj.magic (String.sub (s) 0 (need - 0)) : string); raise Return
  );
  __ret := (Obj.magic (s) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let blum = ref ([]) in
  let counts = ref ([0; 0; 0; 0]) in
  let digits = ref ([1; 3; 7; 9]) in
  let i = ref (1) in
  let bc = ref (0) in
  (try while true do
    try
  let p = firstPrimeFactor (!i) in
  if ((p mod 4) = 3) then (
  let q = (!i / p) in
  if (((q <> p) && ((q mod 4) = 3)) && isPrime (q)) then (
  if (!bc < 50) then (
  blum := (List.append !blum [!i]);
  );
  let d = (!i mod 10) in
  if (d = 1) then (
  counts := (List.mapi (fun __i __x -> if __i = 0 then (List.nth (!counts) (0) + 1) else __x) (!counts));
  ) else (
  if (d = 3) then (
  counts := (List.mapi (fun __i __x -> if __i = 1 then (List.nth (!counts) (1) + 1) else __x) (!counts));
  ) else (
  if (d = 7) then (
  counts := (List.mapi (fun __i __x -> if __i = 2 then (List.nth (!counts) (2) + 1) else __x) (!counts));
  ) else (
  if (d = 9) then (
  counts := (List.mapi (fun __i __x -> if __i = 3 then (List.nth (!counts) (3) + 1) else __x) (!counts));
  );
  );
  );
  );
  bc := (!bc + 1);
  if (!bc = 50) then (
  print_endline ("First 50 Blum integers:");
  let idx = ref (0) in
  (try while (!idx < 50) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < 10) do
    try
  line := ((!line ^ padLeft (List.nth (!blum) (!idx)) (3)) ^ " ");
  idx := (!idx + 1);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (String.sub (!line) 0 ((String.length (!line) - 1) - 0));
    with Continue -> ()
  done with Break -> ());
  raise Break;
  );
  );
  );
  if ((!i mod 5) = 3) then (
  i := (!i + 4);
  ) else (
  i := (!i + 2);
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
