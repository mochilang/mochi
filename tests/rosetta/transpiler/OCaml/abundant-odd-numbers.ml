(* Generated by Mochi transpiler v0.10.39 on 2025-07-24 14:08 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec divisors n =
  let __ret = ref [] in
  (try
  let divs = ref ([1]) in
  let divs2 = ref ([]) in
  let i = ref (2) in
  (try while ((!i * !i) <= n) do
    try
  if ((n mod !i) = 0) then (
  let j = (n / !i) in
  divs := List.append !divs [!i];
  if (!i <> j) then (
  divs2 := List.append !divs2 [j];
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref ((List.length (!divs2) - 1)) in
  (try while (!j >= 0) do
    try
  divs := List.append !divs [List.nth (!divs2) (!j)];
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !divs; raise Return;
  __ret := !divs;
    !__ret
  with Return -> !__ret)

let rec sum xs =
  let __ret = ref 0 in
  (try
  let tot = ref (0) in
  (try List.iter (fun v ->
    try
  tot := (!tot + v);
    with Continue -> ()) xs with Break -> ());
  __ret := !tot; raise Return;
  __ret := !tot;
    !__ret
  with Return -> !__ret)

let rec sumStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := ((!s ^ (string_of_int (List.nth (xs) (!i)))) ^ " + ");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := String.sub !s 0 ((String.length (!s) - 3) - 0); raise Return;
  __ret := String.sub !s 0 ((String.length (!s) - 3) - 0);
    !__ret
  with Return -> !__ret)

let rec pad2 n =
  let __ret = ref "" in
  (try
  let s = (string_of_int (n)) in
  if (String.length (s) < 2) then (
  __ret := (" " ^ s); raise Return;
  );
  __ret := s; raise Return;
  __ret := s;
    !__ret
  with Return -> !__ret)

let rec pad5 n =
  let __ret = ref "" in
  (try
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < 5) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := !s; raise Return;
  __ret := !s;
    !__ret
  with Return -> !__ret)

let rec abundantOdd searchFrom countFrom countTo printOne =
  let __ret = ref 0 in
  (try
  let count = ref (countFrom) in
  let n = ref (searchFrom) in
  (try while (!count < countTo) do
    try
  let divs = ref (divisors (!n)) in
  let tot = (List.fold_left (fun acc x -> acc + x) 0 !divs) in
  if (tot > !n) then (
  count := (!count + 1);
  if (printOne && (!count < countTo)) then (
  n := (!n + 2);
  raise Continue;
  );
  let s = sumStr (!divs) in
  if not (printOne) then (
  print_endline (((((((pad2 (!count) ^ ". ") ^ pad5 (!n)) ^ " < ") ^ s) ^ " = ") ^ (string_of_int (tot))));
  ) else (
  print_endline ((((((string_of_int (!n)) ^ " < ") ^ s) ^ " = ") ^ (string_of_int (tot))));
  );
  );
  n := (!n + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := !n; raise Return;
  __ret := !n;
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let max = 25 in
  print_endline ((("The first " ^ (string_of_int (max))) ^ " abundant odd numbers are:"));
  let n = abundantOdd (1) (0) (max) (false) in
  print_endline ("\nThe one thousandth abundant odd number is:");
  ignore (abundantOdd (n) (max) (1000) (true));
  print_endline ("\nThe first abundant odd number above one billion is:");
  ignore (abundantOdd (1000000001) (0) (1) (true));
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
