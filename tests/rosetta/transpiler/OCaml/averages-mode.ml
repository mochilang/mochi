(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let arr1 = ref ([2; 7; 1; 8; 2])
let counts1 = ref ([])
let keys1 = ref ([])
let i = ref (0)
let max1 = ref (0)
let modes1 = ref ([])
let arr2 = ref ([2; 7; 1; 8; 2; 8])
let counts2 = ref ([])
let keys2 = ref ([])
let max2 = ref (0)
let modes2 = ref ([])
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < List.length (!arr1)) do
    try
  let v = List.nth (!arr1) (!i) in
  if (List.mem_assoc v !counts1) then (
  counts1 := ((v, ((try List.assoc (v) !counts1 with Not_found -> (Obj.magic 0)) + 1)) :: List.remove_assoc v !counts1);
  ) else (
  counts1 := ((v, 1) :: List.remove_assoc v !counts1);
  keys1 := List.append !keys1 [v];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!keys1)) do
    try
  let k = List.nth (!keys1) (!i) in
  let c = (try List.assoc (k) !counts1 with Not_found -> (Obj.magic 0)) in
  if (c > !max1) then (
  max1 := c;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!keys1)) do
    try
  let k = List.nth (!keys1) (!i) in
  if ((try List.assoc (k) !counts1 with Not_found -> (Obj.magic 0)) = !max1) then (
  modes1 := List.append !modes1 [k];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show (!modes1));
  i := 0;
  (try while (!i < List.length (!arr2)) do
    try
  let v = List.nth (!arr2) (!i) in
  if (List.mem_assoc v !counts2) then (
  counts2 := ((v, ((try List.assoc (v) !counts2 with Not_found -> (Obj.magic 0)) + 1)) :: List.remove_assoc v !counts2);
  ) else (
  counts2 := ((v, 1) :: List.remove_assoc v !counts2);
  keys2 := List.append !keys2 [v];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!keys2)) do
    try
  let k = List.nth (!keys2) (!i) in
  let c = (try List.assoc (k) !counts2 with Not_found -> (Obj.magic 0)) in
  if (c > !max2) then (
  max2 := c;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!keys2)) do
    try
  let k = List.nth (!keys2) (!i) in
  if ((try List.assoc (k) !counts2 with Not_found -> (Obj.magic 0)) = !max2) then (
  modes2 := List.append !modes2 [k];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show (!modes2));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
