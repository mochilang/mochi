(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec primeFactors n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let factors = ref (([] : int list)) in
  let x = ref (n) in
  (try while ((!x mod 2) = 0) do
    try
  factors := (List.append (!factors) [(Obj.magic (2) : int)]);
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  let p = ref (3) in
  (try while ((!p * !p) <= !x) do
    try
  (try while ((!x mod !p) = 0) do
    try
  factors := (List.append (!factors) [(Obj.magic (!p) : int)]);
  x := (!x / !p);
    with Continue -> ()
  done with Break -> ());
  p := (!p + 2);
    with Continue -> ()
  done with Break -> ());
  if (!x > 1) then (
  factors := (List.append (!factors) [(Obj.magic (!x) : int)]);
  );
  __ret := (Obj.magic (!factors) : int list); raise Return
  with Return -> !__ret)

and commatize n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  let out = ref ("") in
  let i = ref ((String.length (!s) - 1)) in
  let c = ref (0) in
  (try while (!i >= 0) do
    try
  out := (String.sub (!s) !i ((!i + 1) - !i) ^ !out);
  c := (!c + 1);
  if (((!c mod 3) = 0) && (!i > 0)) then (
  out := ("," ^ !out);
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and indexOf s sub =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while ((!i + String.length (sub)) <= String.length (s)) do
    try
  if (String.sub (s) !i ((!i + String.length (sub)) - !i) = sub) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and pad10 s =
  let __ret = ref "" in
  (try
  let str = ref (s) in
  (try while (String.length (!str) < 10) do
    try
  str := (" " ^ !str);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!str) : string); raise Return
  with Return -> !__ret)

and trimRightStr s =
  let __ret = ref "" in
  (try
  let end_ = ref (String.length (s)) in
  (try while ((!end_ > 0) && (String.sub (s) (!end_ - 1) (!end_ - (!end_ - 1)) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) 0 (!end_ - 0)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let res = ref (([] : int list)) in
  let count = ref (0) in
  let k = ref ((11 * 11)) in
  (try while (!count < 20) do
    try
  if ((((!k mod 3) = 0) || ((!k mod 5) = 0)) || ((!k mod 7) = 0)) then (
  k := (!k + 2);
  raise Continue;
  );
  let factors = ref (primeFactors (Obj.repr (!k))) in
  if (List.length (!factors) > 1) then (
  let s = (string_of_int (!k)) in
  let includesAll = ref (true) in
  let prev = ref (-(1)) in
  (try List.iter (fun f ->
    try
  if (f = !prev) then (
  raise Continue;
  );
  let fs = (string_of_int (f)) in
  if ((try String.index (s) (String.get (fs) 0) with Not_found -> -1) = -(1)) then (
  includesAll := false;
  raise Break;
  );
  prev := f;
    with Continue -> ()) (!factors) with Break -> ());
  if !includesAll then (
  res := (List.append (!res) [(Obj.magic (!k) : int)]);
  count := (!count + 1);
  );
  );
  k := (!k + 2);
    with Continue -> ()
  done with Break -> ());
  let line = ref ("") in
  (try List.iter (fun e ->
    try
  line := ((!line ^ pad10 (commatize (Obj.repr (e)))) ^ " ");
    with Continue -> ()) (List.of_seq (Seq.take (10 - 0) (Seq.drop 0 (List.to_seq !res)))) with Break -> ());
  print_endline (trimRightStr (!line));
  line := "";
  (try List.iter (fun e ->
    try
  line := ((!line ^ pad10 (commatize (Obj.repr (e)))) ^ " ");
    with Continue -> ()) (List.of_seq (Seq.take (20 - 10) (Seq.drop 10 (List.to_seq !res)))) with Break -> ());
  print_endline (trimRightStr (!line));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()