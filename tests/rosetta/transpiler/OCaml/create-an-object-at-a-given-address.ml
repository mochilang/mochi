(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec listStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and pointerDemo () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Pointer:");
  let i = ref (0) in
  print_endline ("Before:");
  print_endline (((("\t<address>: " ^ (string_of_int (!i))) ^ ", ") ^ (string_of_int (!i))));
  i := 3;
  print_endline ("After:");
  print_endline (((("\t<address>: " ^ (string_of_int (!i))) ^ ", ") ^ (string_of_int (!i))));
    !__ret
  with Return -> !__ret)

and sliceDemo () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Slice:");
  let a = ref ([]) in
  (try for _ = 0 to (10 - 1) do
    try
  a := (List.append (!a) [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  let s = ref (!a) in
  print_endline ("Before:");
  print_endline (("\ts: " ^ listStr (!s)));
  print_endline (("\ta: " ^ listStr (!a)));
  let data = ref ([65; 32; 115; 116; 114; 105; 110; 103; 46]) in
  let idx = ref (0) in
  (try while (!idx < List.length (!data)) do
    try
  s := (List.mapi (fun __i __x -> if __i = !idx then List.nth (!data) (!idx) else __x) (!s));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("After:");
  print_endline (("\ts: " ^ listStr (!s)));
  print_endline (("\ta: " ^ listStr (!a)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (pointerDemo ());
  print_endline ("");
  ignore (sliceDemo ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()