(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec printExpI b p =
  let __ret = ref (Obj.magic 0) in
  (try
  let b = (Obj.magic b : int) in
  let p = (Obj.magic p : int) in
  if (p < 0) then (
  print_endline (((((string_of_int (b)) ^ "^") ^ (string_of_int (p))) ^ ": negative power not allowed"));
  __ret := (); raise Return
  );
  let r = ref (1) in
  let i = ref (1) in
  (try while (!i <= p) do
    try
  r := (!r * b);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((((((string_of_int (b)) ^ "^") ^ (string_of_int (p))) ^ ": ") ^ (string_of_int (!r))));
    !__ret
  with Return -> !__ret)

and expF b p =
  let __ret = ref 0.0 in
  (try
  let b = (Obj.magic b : float) in
  p := (Obj.magic !p : int);
  let neg = ref (false) in
  if (!p < 0) then (
  neg := true;
  p := -(!p);
  );
  let r = ref (1.0) in
  let pow = ref (b) in
  (try while (!p > 0) do
    try
  if ((!p mod 2) = 1) then (
  r := (!r *. !pow);
  );
  pow := (!pow *. !pow);
  p := (!p / 2);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  r := (1.0 /. !r);
  );
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and printExpF b p =
  let __ret = ref (Obj.magic 0) in
  (try
  let b = (Obj.magic b : float) in
  let p = (Obj.magic p : int) in
  if ((b = 0.0) && (p < 0)) then (
  print_endline (((((Printf.sprintf "%.16g" (b)) ^ "^") ^ (string_of_int (p))) ^ ": +Inf"));
  __ret := (); raise Return
  );
  print_endline ((((((Printf.sprintf "%.16g" (b)) ^ "^") ^ (string_of_int (p))) ^ ": ") ^ (Printf.sprintf "%.16g" (expF (Obj.repr (b)) (ref (p))))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("expI tests");
  ignore (printExpI (Obj.repr (2)) (Obj.repr (10)));
  ignore (printExpI (Obj.repr (2)) (Obj.repr (-(10))));
  ignore (printExpI (Obj.repr (-(2))) (Obj.repr (10)));
  ignore (printExpI (Obj.repr (-(2))) (Obj.repr (11)));
  ignore (printExpI (Obj.repr (11)) (Obj.repr (0)));
  print_endline ("overflow undetected");
  ignore (printExpI (Obj.repr (10)) (Obj.repr (10)));
  print_endline ("\nexpF tests:");
  ignore (printExpF (Obj.repr (2.0)) (Obj.repr (10)));
  ignore (printExpF (Obj.repr (2.0)) (Obj.repr (-(10))));
  ignore (printExpF (Obj.repr ((-.(2.0)))) (Obj.repr (10)));
  ignore (printExpF (Obj.repr ((-.(2.0)))) (Obj.repr (11)));
  ignore (printExpF (Obj.repr (11.0)) (Obj.repr (0)));
  print_endline ("disallowed in expI, allowed here");
  ignore (printExpF (Obj.repr (0.0)) (Obj.repr (-(1))));
  print_endline ("other interesting cases for 32 bit float type");
  ignore (printExpF (Obj.repr (10.0)) (Obj.repr (39)));
  ignore (printExpF (Obj.repr (10.0)) (Obj.repr (-(39))));
  ignore (printExpF (Obj.repr ((-.(10.0)))) (Obj.repr (39)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()