(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec printFactors n =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  if (n < 1) then (
  print_endline ((("\nFactors of " ^ (string_of_int (n))) ^ " not computed"));
  __ret := (); raise Return
  );
  print_endline ((("\nFactors of " ^ (string_of_int (n))) ^ ": "));
  let fs = ref ([1]) in
let rec apf p e =
  let __ret = ref (Obj.magic 0) in
  (try
  let p = (Obj.magic p : int) in
  let e = (Obj.magic e : int) in
  let orig = ref (List.length (!fs)) in
  let pp = ref (p) in
  let i = ref (0) in
  (try while (!i < e) do
    try
  let j = ref (0) in
  (try while (!j < !orig) do
    try
  fs := (List.append (!fs) [(Obj.magic ((List.nth (!fs) (!j) * !pp)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
  pp := (!pp * p);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret) in
  let e = ref (0) in
  let m = ref (n) in
  (try while ((!m mod 2) = 0) do
    try
  m := (!m / 2);
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (apf (Obj.repr (2)) (Obj.repr (!e)));
  let d = ref (3) in
  (try while (!m > 1) do
    try
  if ((!d * !d) > !m) then (
  d := !m;
  );
  e := 0;
  (try while ((!m mod !d) = 0) do
    try
  m := (!m / !d);
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  if (!e > 0) then (
  ignore (apf (Obj.repr (!d)) (Obj.repr (!e)));
  );
  d := (!d + 2);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show (!fs));
  print_endline (("Number of factors = " ^ (string_of_int (List.length (!fs)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (printFactors (Obj.repr (-(1))));
  ignore (printFactors (Obj.repr (0)));
  ignore (printFactors (Obj.repr (1)));
  ignore (printFactors (Obj.repr (2)));
  ignore (printFactors (Obj.repr (3)));
  ignore (printFactors (Obj.repr (53)));
  ignore (printFactors (Obj.repr (45)));
  ignore (printFactors (Obj.repr (64)));
  ignore (printFactors (Obj.repr (600851475143)));
  ignore (printFactors (Obj.repr (999999999999999989)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()