(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec split s sep =
  let __ret = ref ([] : string list) in
  (try
  let parts = ref (([] : string list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (((String.length (sep) > 0) && ((!i + String.length (sep)) <= String.length (s))) && (String.sub (s) !i ((!i + String.length (sep)) - !i) = sep)) then (
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  cur := "";
  i := (!i + String.length (sep));
  ) else (
  cur := (!cur ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and parseIntStr str =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + (try List.assoc (String.sub (str) !i ((!i + 1) - !i)) !digits with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and joinInts nums sep =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  if (!i > 0) then (
  s := (!s ^ sep);
  );
  s := (!s ^ (string_of_int (List.nth (nums) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and undot s =
  let __ret = ref ([] : int list) in
  (try
  let parts = ref (split (s) (".")) in
  let nums = ref (([] : int list)) in
  (try List.iter (fun p ->
    try
  nums := (List.append (!nums) [(Obj.magic (parseIntStr (p)) : int)]);
    with Continue -> ()) (!parts) with Break -> ());
  __ret := (Obj.magic (!nums) : int list); raise Return
  with Return -> !__ret)

and factorial n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let f = ref (1) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  f := (!f * !i);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!f) : int); raise Return
  with Return -> !__ret)

and genFactBaseNums size countOnly =
  let __ret = ref [] in
  (try
  let size = (Obj.magic size : int) in
  let results = ref (([] : int list list)) in
  let count = ref (0) in
  let n = ref (0) in
  (try while true do
    try
  let radix = ref (2) in
  let res = ref (([] : int list)) in
  if not (countOnly) then (
  let z = ref (0) in
  (try while (!z < size) do
    try
  res := (List.append (!res) [(Obj.magic (0) : int)]);
  z := (!z + 1);
    with Continue -> ()
  done with Break -> ());
  );
  let k = ref (!n) in
  (try while (!k > 0) do
    try
  let div = ref ((!k / !radix)) in
  let rem = ref ((!k mod !radix)) in
  if (not (countOnly) && (!radix <= (size + 1))) then (
  res := (List.mapi (fun __i __x -> if __i = ((size - !radix) + 1) then !rem else __x) (!res));
  );
  k := !div;
  radix := (!radix + 1);
    with Continue -> ()
  done with Break -> ());
  if (!radix > (size + 2)) then (
  raise Break;
  );
  count := (!count + 1);
  if not (countOnly) then (
  results := (List.append (!results) [(Obj.magic (!res) : int list)]);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([Obj.repr (!results); Obj.repr (!count)]) : Obj.t list); raise Return
  with Return -> !__ret)

and mapToPerms factNums =
  let __ret = ref ([] : int list list) in
  (try
  let perms = ref (([] : int list list)) in
  let psize = ref ((List.length (List.nth (factNums) (0)) + 1)) in
  let start = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < !psize) do
    try
  start := (List.append (!start) [(Obj.magic (!i) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun fn ->
    try
  let perm = ref (([] : int list)) in
  let j = ref (0) in
  (try while (!j < List.length (!start)) do
    try
  perm := (List.append (!perm) [(Obj.magic (List.nth (!start) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let m = ref (0) in
  (try while (!m < List.length (fn)) do
    try
  let g = ref (List.nth (fn) (!m)) in
  if (!g <> 0) then (
  let first = ref (!m) in
  let last = ref ((!m + !g)) in
  let t = ref (1) in
  (try while (!t <= !g) do
    try
  let temp = ref (List.nth (!perm) (!first)) in
  let x = ref ((!first + 1)) in
  (try while (!x <= !last) do
    try
  perm := (List.mapi (fun __i __x -> if __i = (!x - 1) then List.nth (!perm) (!x) else __x) (!perm));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  perm := (List.mapi (fun __i __x -> if __i = !last then !temp else __x) (!perm));
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  perms := (List.append (!perms) [(Obj.magic (!perm) : int list)]);
    with Continue -> ()) (factNums) with Break -> ());
  __ret := (Obj.magic (!perms) : int list list); raise Return
  with Return -> !__ret)

and randInt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  seed := (((!seed * 1664525) + 1013904223) mod 2147483647);
  __ret := (Obj.magic ((!seed mod n)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let g = ref (genFactBaseNums (Obj.repr (3)) (false)) in
  let factNums = ref (List.nth (!g) (0)) in
  let perms = ref (mapToPerms (!factNums)) in
  let i = ref (0) in
  (try while (!i < List.length (!factNums)) do
    try
  print_endline (((joinInts (List.nth (!factNums) (!i)) (".") ^ " -> ") ^ joinInts (List.nth (!perms) (!i)) ("")));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let count2 = factorial (Obj.repr (11)) in
  print_endline (("\nPermutations generated = " ^ (string_of_int (count2))));
  print_endline (("compared to 11! which  = " ^ (string_of_int (factorial (Obj.repr (11))))));
  print_endline ("");
  let fbn51s = ref (["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0"; "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"]) in
  factNums := [undot (List.nth (!fbn51s) (0)); undot (List.nth (!fbn51s) (1))];
  perms := mapToPerms (!factNums);
  let shoe = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣" in
  let cards = ref (([] : string list)) in
  i := 0;
  (try while (!i < 52) do
    try
  let card = ref (String.sub (shoe) (2 * !i) (((2 * !i) + 2) - (2 * !i))) in
  if (String.sub (!card) 0 (1 - 0) = "T") then (
  card := ("10" ^ String.sub (!card) 1 (2 - 1));
  );
  cards := (List.append (!cards) [(Obj.magic (!card) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length (!fbn51s)) do
    try
  print_endline (string_of_int (List.nth (!fbn51s) (!i)));
  let perm = ref (List.nth (!perms) (!i)) in
  let j = ref (0) in
  let line = ref ("") in
  (try while (!j < List.length (!perm)) do
    try
  line := (!line ^ List.nth (!cards) (List.nth (!perm) (!j)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((!line ^ "\n"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let fbn51 = ref (([] : int list)) in
  i := 0;
  (try while (!i < 51) do
    try
  fbn51 := (List.append (!fbn51) [(Obj.magic (randInt (Obj.repr ((52 - !i)))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (joinInts (!fbn51) ("."));
  perms := mapToPerms ([!fbn51]);
  let line = ref ("") in
  i := 0;
  (try while (!i < List.length (List.nth (!perms) (0))) do
    try
  line := (!line ^ List.nth (!cards) (List.nth (List.nth (!perms) (0)) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()