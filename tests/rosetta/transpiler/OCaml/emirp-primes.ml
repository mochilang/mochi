(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 22:30 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  let d = ref (3) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and revInt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let r = ref (0) in
  let t = ref (n) in
  (try while (!t > 0) do
    try
  r := ((!r * 10) + (!t mod 10));
  t := (!t / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let emirps = ref (([] : int list)) in
  let n = ref (2) in
  (try while (List.length (!emirps) < 10000) do
    try
  if isPrime (Obj.repr (!n)) then (
  let r = revInt (Obj.repr (!n)) in
  if ((r <> !n) && isPrime (Obj.repr (r))) then (
  emirps := (List.append (!emirps) [(Obj.magic (!n) : int)]);
  );
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let line = ref ("   [") in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  line := (!line ^ (string_of_int (List.nth (!emirps) (!i))));
  if (!i < 19) then (
  line := (!line ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  line := (!line ^ "]");
  print_endline ("First 20:");
  print_endline (__show !line);
  line := "  [";
  (try List.iter (fun e ->
    try
  if (e >= 8000) then (
  raise Break;
  );
  if (e >= 7700) then (
  line := ((!line ^ (string_of_int (e))) ^ ", ");
  );
    with Continue -> ()) (!emirps) with Break -> ());
  line := (!line ^ "]");
  print_endline ("Between 7700 and 8000:");
  print_endline (__show !line);
  print_endline ("10000th:");
  print_endline ((("   [" ^ (string_of_int (List.nth (!emirps) (9999)))) ^ "]"));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()