(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 09:30 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Diagram after trimming whitespace and removal of blank lines:\n");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|                      ID                       |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|                    QDCOUNT                    |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|                    ANCOUNT                    |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|                    NSCOUNT                    |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("|                    ARCOUNT                    |");
  print_endline ("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  print_endline ("\nDecoded:\n");
  print_endline ("Name     Bits  Start  End");
  print_endline ("=======  ====  =====  ===");
  print_endline ("ID        16      0    15");
  print_endline ("QR         1     16    16");
  print_endline ("Opcode     4     17    20");
  print_endline ("AA         1     21    21");
  print_endline ("TC         1     22    22");
  print_endline ("RD         1     23    23");
  print_endline ("RA         1     24    24");
  print_endline ("Z          3     25    27");
  print_endline ("RCODE      4     28    31");
  print_endline ("QDCOUNT   16     32    47");
  print_endline ("ANCOUNT   16     48    63");
  print_endline ("NSCOUNT   16     64    79");
  print_endline ("ARCOUNT   16     80    95");
  print_endline ("\nTest string in hex:");
  print_endline ("78477bbf5496e12e1bf169a4");
  print_endline ("\nTest string in binary:");
  print_endline ("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100");
  print_endline ("\nUnpacked:\n");
  print_endline ("Name     Size  Bit pattern");
  print_endline ("=======  ====  ================");
  print_endline ("ID        16   0111100001000111");
  print_endline ("QR         1   0");
  print_endline ("Opcode     4   1111");
  print_endline ("AA         1   0");
  print_endline ("TC         1   1");
  print_endline ("RD         1   1");
  print_endline ("RA         1   1");
  print_endline ("Z          3   011");
  print_endline ("RCODE      4   1111");
  print_endline ("QDCOUNT   16   0101010010010110");
  print_endline ("ANCOUNT   16   1110000100101110");
  print_endline ("NSCOUNT   16   0001101111110001");
  print_endline ("ARCOUNT   16   0110100110100100");
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
