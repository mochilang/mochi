(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 23:55 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec ccw a b c =
  let __ret = ref false in
  (try
  let lhs = (((Obj.obj (List.assoc ("x") b) : int) - (Obj.obj (List.assoc ("x") a) : int)) * ((Obj.obj (List.assoc ("y") c) : int) - (Obj.obj (List.assoc ("y") a) : int))) in
  let rhs = (((Obj.obj (List.assoc ("y") b) : int) - (Obj.obj (List.assoc ("y") a) : int)) * ((Obj.obj (List.assoc ("x") c) : int) - (Obj.obj (List.assoc ("x") a) : int))) in
  __ret := (Obj.magic ((lhs > rhs)) : bool); raise Return
  with Return -> !__ret)

and sortPoints ps =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  let arr = ref (ps) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  let p = ref (List.nth (!arr) (!j)) in
  let q = ref (List.nth (!arr) ((!j + 1))) in
  if (((Obj.obj (List.assoc ("x") !p) : int) > (Obj.obj (List.assoc ("x") !q) : int)) || (((Obj.obj (List.assoc ("x") !p) : int) = (Obj.obj (List.assoc ("x") !q) : int)) && ((Obj.obj (List.assoc ("y") !p) : int) > (Obj.obj (List.assoc ("y") !q) : int)))) then (
  arr := (List.mapi (fun __i __x -> if __i = !j then !q else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !p else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and convexHull ps =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  ps := sortPoints (!ps);
  let h = ref (([] : (string * Obj.t) list list)) in
  (try List.iter (fun pt ->
    try
  (try while ((List.length (!h) >= 2) && (ccw (List.nth (!h) ((List.length (!h) - 2))) (List.nth (!h) ((List.length (!h) - 1))) (pt) = false)) do
    try
  h := List.of_seq (Seq.take ((List.length (!h) - 1) - 0) (Seq.drop 0 (List.to_seq !h)));
    with Continue -> ()
  done with Break -> ());
  h := (List.append (!h) [(Obj.magic (pt) : (string * Obj.t) list)]);
    with Continue -> ()) (!ps) with Break -> ());
  let i = ref ((List.length (!ps) - 2)) in
  let t = (List.length (!h) + 1) in
  (try while (!i >= 0) do
    try
  let pt = ref (List.nth (!ps) (!i)) in
  (try while ((List.length (!h) >= t) && (ccw (List.nth (!h) ((List.length (!h) - 2))) (List.nth (!h) ((List.length (!h) - 1))) (!pt) = false)) do
    try
  h := List.of_seq (Seq.take ((List.length (!h) - 1) - 0) (Seq.drop 0 (List.to_seq !h)));
    with Continue -> ()
  done with Break -> ());
  h := (List.append (!h) [(Obj.magic (!pt) : (string * Obj.t) list)]);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.of_seq (Seq.take ((List.length (!h) - 1) - 0) (Seq.drop 0 (List.to_seq !h)))) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and pointStr p =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((("(" ^ (string_of_int ((Obj.obj (List.assoc ("x") p) : int)))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc ("y") p) : int)))) ^ ")")) : string); raise Return
  with Return -> !__ret)

and hullStr h =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (h)) do
    try
  s := (!s ^ pointStr (List.nth (h) (!i)));
  if (!i < (List.length (h) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let () =
  let pts = ref ([[("x", Obj.repr (16)); ("y", Obj.repr (3))]; [("x", Obj.repr (12)); ("y", Obj.repr (17))]; [("x", Obj.repr (0)); ("y", Obj.repr (6))]; [("x", Obj.repr (-(4))); ("y", Obj.repr (-(6)))]; [("x", Obj.repr (16)); ("y", Obj.repr (6))]; [("x", Obj.repr (16)); ("y", Obj.repr (-(7)))]; [("x", Obj.repr (16)); ("y", Obj.repr (-(3)))]; [("x", Obj.repr (17)); ("y", Obj.repr (-(4)))]; [("x", Obj.repr (5)); ("y", Obj.repr (19))]; [("x", Obj.repr (19)); ("y", Obj.repr (-(8)))]; [("x", Obj.repr (3)); ("y", Obj.repr (16))]; [("x", Obj.repr (12)); ("y", Obj.repr (13))]; [("x", Obj.repr (3)); ("y", Obj.repr (-(4)))]; [("x", Obj.repr (17)); ("y", Obj.repr (5))]; [("x", Obj.repr (-(3))); ("y", Obj.repr (15))]; [("x", Obj.repr (-(3))); ("y", Obj.repr (-(9)))]; [("x", Obj.repr (0)); ("y", Obj.repr (11))]; [("x", Obj.repr (-(9))); ("y", Obj.repr (-(3)))]; [("x", Obj.repr (-(4))); ("y", Obj.repr (-(2)))]; [("x", Obj.repr (12)); ("y", Obj.repr (10))]]) in
  let hull = ref (convexHull (pts)) in
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("Convex Hull: " ^ hullStr (!hull)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()