(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:58 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int ((Obj.magic (x /. m) : int)) *. m))) : float); raise Return
  with Return -> !__ret)

and _sin x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr ((2.0 *. _pi))) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and _cos x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr ((2.0 *. _pi))) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)


let width = 80
let height = 40
let depth = 6
let angle = 12.0
let length = 12.0
let frac = 0.8
let rec clearGrid () =
  let __ret = ref ([] : (string list) list) in
  (try
  let g = ref (([] : (string list) list)) in
  let y = ref (0) in
  (try while (!y < height) do
    try
  let row = ref (([] : (string) list)) in
  let x = ref (0) in
  (try while (!x < width) do
    try
  row := (List.append (!row) [(Obj.magic (" ") : string)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  g := (List.append (!g) [(Obj.magic (!row) : string list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : string list list); raise Return
  with Return -> !__ret)

and drawPoint g x y =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  if ((((x >= 0) && (x < width)) && (y >= 0)) && (y < height)) then (
  let row = ref (List.nth (!g) (y)) in
  row := (List.mapi (fun __i __x -> if __i = x then "#" else __x) (!row));
  g := (List.mapi (fun __i __x -> if __i = y then !row else __x) (!g));
  );
    !__ret
  with Return -> !__ret)

and bresenham x0 y0 x1 y1 g =
  let __ret = ref (Obj.magic 0) in
  (try
  x0 := (Obj.magic !x0 : int);
  y0 := (Obj.magic !y0 : int);
  let x1 = (Obj.magic x1 : int) in
  let y1 = (Obj.magic y1 : int) in
  let dx = ref ((x1 - !x0)) in
  if (!dx < 0) then (
  dx := -(!dx);
  );
  let dy = ref ((y1 - !y0)) in
  if (!dy < 0) then (
  dy := -(!dy);
  );
  let sx = ref (-(1)) in
  if (!x0 < x1) then (
  sx := 1;
  );
  let sy = ref (-(1)) in
  if (!y0 < y1) then (
  sy := 1;
  );
  let err = ref ((!dx - !dy)) in
  (try while true do
    try
  ignore (drawPoint (ref (g)) (Obj.repr (!x0)) (Obj.repr (!y0)));
  if ((!x0 = x1) && (!y0 = y1)) then (
  raise Break;
  );
  let e2 = ref ((2 * !err)) in
  if (!e2 > -(!dy)) then (
  err := (!err - !dy);
  x0 := (!x0 + !sx);
  );
  if (!e2 < !dx) then (
  err := (!err + !dx);
  y0 := (!y0 + !sy);
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and ftree g x y dist dir d =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  let dist = (Obj.magic dist : float) in
  let dir = (Obj.magic dir : float) in
  let d = (Obj.magic d : int) in
  let rad = ((dir *. _pi) /. 180.0) in
  let x2 = (x +. (dist *. _sin (Obj.repr (rad)))) in
  let y2 = (y -. (dist *. _cos (Obj.repr (rad)))) in
  ignore (bresenham (ref ((Obj.magic x : int))) (ref ((Obj.magic y : int))) (Obj.repr ((Obj.magic x2 : int))) (Obj.repr ((Obj.magic y2 : int))) (g));
  if (d > 0) then (
  ignore (ftree (g) (Obj.repr (x2)) (Obj.repr (y2)) (Obj.repr ((dist *. frac))) (Obj.repr ((dir -. angle))) (Obj.repr ((d - 1))));
  ignore (ftree (g) (Obj.repr (x2)) (Obj.repr (y2)) (Obj.repr ((dist *. frac))) (Obj.repr ((dir +. angle))) (Obj.repr ((d - 1))));
  );
    !__ret
  with Return -> !__ret)

and render g =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let y = ref (0) in
  (try while (!y < height) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < width) do
    try
  line := (!line ^ List.nth (List.nth (g) (!y)) (!x));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := (!out ^ !line);
  if (!y < (height - 1)) then (
  out := (!out ^ "\n");
  );
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let grid = ref (clearGrid ()) in
  ignore (ftree (!grid) (Obj.repr (float_of_int ((width / 2)))) (Obj.repr (float_of_int ((height - 1)))) (Obj.repr (length)) (Obj.repr (0.0)) (Obj.repr (depth)));
  print_endline (__show (render (!grid)));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()