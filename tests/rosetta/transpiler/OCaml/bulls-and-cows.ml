(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:37 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec shuffle xs =
  let __ret = ref ([] : string list) in
  (try
  let arr = ref (xs) in
  let i = ref ((List.length (!arr) - 1)) in
  (try while (!i > 0) do
    try
  let j = (_now () mod (!i + 1)) in
  let tmp = List.nth (!arr) (!i) in
  arr := (List.mapi (fun __i __x -> if __i = !i then List.nth (!arr) (j) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = j then tmp else __x) (!arr));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Cows and Bulls");
  print_endline ("Guess four digit number of unique digits in the range 1 to 9.");
  print_endline ("A correct digit but not in the correct place is a cow.");
  print_endline ("A correct digit in the correct place is a bull.");
  let digits = ref (["1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"]) in
  digits := shuffle (!digits);
  let pat = ref ((((List.nth (!digits) (0) ^ List.nth (!digits) (1)) ^ List.nth (!digits) (2)) ^ List.nth (!digits) (3))) in
  let valid = "123456789" in
  (try while true do
    try
  print_endline ("Guess: ");
  let guess = (try read_line () with End_of_file -> "") in
  if (String.length (guess) <> 4) then (
  print_endline ("Please guess a four digit number.");
  raise Continue;
  );
  let cows = ref (0) in
  let bulls = ref (0) in
  let seen = ref ("") in
  let i = ref (0) in
  let malformed = ref (false) in
  (try while (!i < 4) do
    try
  let cg = String.sub (guess) !i ((!i + 1) - !i) in
  if ((try String.index (!seen) (String.get (cg) 0) with Not_found -> -1) <> -(1)) then (
  print_endline (("Repeated digit: " ^ cg));
  malformed := true;
  raise Break;
  );
  seen := (!seen ^ cg);
  let pos = (try String.index (!pat) (String.get (cg) 0) with Not_found -> -1) in
  if (pos = -(1)) then (
  if ((try String.index (valid) (String.get (cg) 0) with Not_found -> -1) = -(1)) then (
  print_endline (("Invalid digit: " ^ cg));
  malformed := true;
  raise Break;
  );
  ) else (
  if (pos = !i) then (
  bulls := (!bulls + 1);
  ) else (
  cows := (!cows + 1);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !malformed then (
  raise Continue;
  );
  print_endline (((("Cows: " ^ (string_of_int (!cows))) ^ ", bulls: ") ^ (string_of_int (!bulls))));
  if (!bulls = 4) then (
  print_endline ("You got it.");
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
