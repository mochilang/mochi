(* Generated by Mochi transpiler v0.10.40 on 2025-07-26 00:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec node cl le aa ri =
  let __ret = ref [] in
  (try
  let aa = (Obj.magic aa : int) in
  __ret := (Obj.magic ([("cl", Obj.repr cl); ("le", Obj.repr le); ("aa", Obj.repr aa); ("ri", Obj.repr ri)]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec treeString t =
  let __ret = ref "" in
  (try
  if (t = nil) then (
  __ret := (Obj.magic ("E") : string); raise Return
  );
  let m = ref (t) in
  __ret := (Obj.magic ((((((((("T(" ^ __show ((List.assoc ("cl") !m))) ^ ", ") ^ treeString ((List.assoc ("le") !m))) ^ ", ") ^ __show ((List.assoc ("aa") !m))) ^ ", ") ^ treeString ((List.assoc ("ri") !m))) ^ ")")) : string); raise Return
  with Return -> !__ret)

let rec balance t =
  let __ret = ref (Obj.magic 0) in
  (try
  if (t = nil) then (
  __ret := t; raise Return
  );
  let m = ref (t) in
  if ((List.assoc ("cl") !m) <> "B") then (
  __ret := t; raise Return
  );
  let le = (List.assoc ("le") !m) in
  let ri = (List.assoc ("ri") !m) in
  if (le <> nil) then (
  let leMap = ref (le) in
  if ((List.assoc ("cl") !leMap) = "R") then (
  let lele = (List.assoc ("le") !leMap) in
  if (lele <> nil) then (
  let leleMap = ref (lele) in
  if ((List.assoc ("cl") !leleMap) = "R") then (
  __ret := node ("R") (node ("B") ((List.assoc ("le") !leleMap)) ((List.assoc ("aa") !leleMap)) ((List.assoc ("ri") !leleMap))) ((List.assoc ("aa") !leMap)) (node ("B") ((List.assoc ("ri") !leMap)) ((List.assoc ("aa") !m)) (ri)); raise Return
  );
  );
  let leri = (List.assoc ("ri") !leMap) in
  if (leri <> nil) then (
  let leriMap = ref (leri) in
  if ((List.assoc ("cl") !leriMap) = "R") then (
  __ret := node ("R") (node ("B") ((List.assoc ("le") !leMap)) ((List.assoc ("aa") !leMap)) ((List.assoc ("le") !leriMap))) ((List.assoc ("aa") !leriMap)) (node ("B") ((List.assoc ("ri") !leriMap)) ((List.assoc ("aa") !m)) (ri)); raise Return
  );
  );
  );
  );
  if (ri <> nil) then (
  let riMap = ref (ri) in
  if ((List.assoc ("cl") !riMap) = "R") then (
  let rile = (List.assoc ("le") !riMap) in
  if (rile <> nil) then (
  let rileMap = ref (rile) in
  if ((List.assoc ("cl") !rileMap) = "R") then (
  __ret := node ("R") (node ("B") ((List.assoc ("le") !m)) ((List.assoc ("aa") !m)) ((List.assoc ("le") !rileMap))) ((List.assoc ("aa") !rileMap)) (node ("B") ((List.assoc ("ri") !rileMap)) ((List.assoc ("aa") !riMap)) ((List.assoc ("ri") !riMap))); raise Return
  );
  );
  let riri = (List.assoc ("ri") !riMap) in
  if (riri <> nil) then (
  let ririMap = ref (riri) in
  if ((List.assoc ("cl") !ririMap) = "R") then (
  __ret := node ("R") (node ("B") ((List.assoc ("le") !m)) ((List.assoc ("aa") !m)) ((List.assoc ("le") !riMap))) ((List.assoc ("aa") !riMap)) (node ("B") ((List.assoc ("le") !ririMap)) ((List.assoc ("aa") !ririMap)) ((List.assoc ("ri") !ririMap))); raise Return
  );
  );
  );
  );
  __ret := t; raise Return
  with Return -> !__ret)

let rec ins tr x =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  if (tr = nil) then (
  __ret := node ("R") (nil) (x) (nil); raise Return
  );
  if (x < (List.assoc ("aa") tr)) then (
  __ret := balance (node ((List.assoc ("cl") tr)) (ins (Obj.repr ((List.assoc ("le") tr))) (x)) ((List.assoc ("aa") tr)) (Obj.repr ((List.assoc ("ri") tr)))); raise Return
  );
  if (x > (List.assoc ("aa") tr)) then (
  __ret := balance (node ((List.assoc ("cl") tr)) (Obj.repr ((List.assoc ("le") tr))) ((List.assoc ("aa") tr)) (ins (Obj.repr ((List.assoc ("ri") tr))) (x))); raise Return
  );
  __ret := tr; raise Return
  with Return -> !__ret)

let rec insert tr x =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  let t = ins (tr) (x) in
  if (t = nil) then (
  __ret := nil; raise Return
  );
  let m = ref (t) in
  __ret := node ("B") ((List.assoc ("le") !m)) ((List.assoc ("aa") !m)) ((List.assoc ("ri") !m)); raise Return
  with Return -> !__ret)

let tr = ref (nil)
let i = ref (1)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i <= 16) do
    try
  tr := insert (!tr) (!i);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (treeString (!tr));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
