(* Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec egcd a b =
  let __ret = ref ([] : int list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a = 0) then (
  __ret := (Obj.magic ([b; 0; 1]) : int list); raise Return
  );
  let res = ref (egcd ((b mod a)) (a)) in
  let g = List.nth (!res) (0) in
  let x1 = List.nth (!res) (1) in
  let y1 = List.nth (!res) (2) in
  __ret := (Obj.magic ([g; (y1 - ((b / a) * x1)); x1]) : int list); raise Return
  with Return -> !__ret)

let rec modInv a m =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let m = (Obj.magic m : int) in
  let r = ref (egcd (a) (m)) in
  if (List.nth (!r) (0) <> 1) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let x = List.nth (!r) (1) in
  if (x < 0) then (
  __ret := (Obj.magic ((x + m)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

let rec crt a n =
  let __ret = ref 0 in
  (try
  let prod = ref (1) in
  let i = ref (0) in
  (try while (!i < List.length (n)) do
    try
  prod := (!prod * List.nth (n) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (0) in
  i := 0;
  (try while (!i < List.length (n)) do
    try
  let ni = List.nth (n) (!i) in
  let ai = List.nth (a) (!i) in
  let p = (!prod / ni) in
  let inv = modInv ((p mod ni)) (ni) in
  x := (!x + ((ai * inv) * p));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!x mod !prod)) : int); raise Return
  with Return -> !__ret)

let n = ref ([3; 5; 7])
let a = ref ([2; 3; 2])
let res = crt (!a) (!n)
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (((string_of_int (res)) ^ " <nil>"));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
