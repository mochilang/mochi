(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and floorf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic x : int) in
  __ret := (Obj.magic (float_of_int (y)) : float); raise Return
  with Return -> !__ret)

and powf base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let r = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  r := (!r *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and fmtF x width prec =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let width = (Obj.magic width : int) in
  let prec = (Obj.magic prec : int) in
  let factor = powf (Obj.repr (10.0)) (Obj.repr (prec)) in
  let y = ref ((floorf (Obj.repr (((x *. factor) +. 0.5))) /. factor)) in
  let s = ref ((Printf.sprintf "%.16g" (!y))) in
  let dot = (try String.index (!s) '.' with Not_found -> -1) in
  if (dot = (0 - 1)) then (
  s := (!s ^ ".");
  let j = ref (0) in
  (try while (!j < prec) do
    try
  s := (!s ^ "0");
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let decs = ref (((String.length (!s) - dot) - 1)) in
  (try while (!decs < prec) do
    try
  s := (!s ^ "0");
  decs := (!decs + 1);
    with Continue -> ()
  done with Break -> ());
  );
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and expf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((1.0 /. expf (Obj.repr ((-.(x)))))) : float); raise Return
  );
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 20) do
    try
  term := ((!term *. x) /. float_of_int (!i));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and eulerStep f x y h =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic y : float) in
  let h = (Obj.magic h : float) in
  __ret := (Obj.magic ((y +. (h *. f (Obj.repr (x)) (Obj.repr (y))))) : float); raise Return
  with Return -> !__ret)

and newCoolingRate k =
  let __ret = ref (Obj.magic 0) in
  (try
  let k = (Obj.magic k : float) in
  __ret := (Obj.magic ((fun dt ->
  let dt = (Obj.magic dt : float) in
  ((-.(k)) *. dt))) : Obj.t -> float); raise Return
  with Return -> !__ret)

and newTempFunc k ambient initial =
  let __ret = ref (Obj.magic 0) in
  (try
  let k = (Obj.magic k : float) in
  let ambient = (Obj.magic ambient : float) in
  let initial = (Obj.magic initial : float) in
  __ret := (Obj.magic ((fun t ->
  let t = (Obj.magic t : float) in
  (ambient +. ((initial -. ambient) *. expf (Obj.repr (((-.(k)) *. t))))))) : Obj.t -> float); raise Return
  with Return -> !__ret)

and newCoolingRateDy k ambient =
  let __ret = ref (Obj.magic 0) in
  (try
  let k = (Obj.magic k : float) in
  let ambient = (Obj.magic ambient : float) in
  let cr = newCoolingRate (Obj.repr (k)) in
  __ret := (Obj.magic ((fun _x obj ->
  let _x = (Obj.magic _x : float) in
  let obj = (Obj.magic obj : float) in
  cr (Obj.repr ((obj -. ambient))))) : Obj.t -> Obj.t -> float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let k = 0.07 in
  let tempRoom = 20.0 in
  let tempObject = 100.0 in
  let fcr = newCoolingRateDy (Obj.repr (k)) (Obj.repr (tempRoom)) in
  let analytic = newTempFunc (Obj.repr (k)) (Obj.repr (tempRoom)) (Obj.repr (tempObject)) in
  (try List.iter (fun step ->
    try
  print_endline (("Step size = " ^ fmtF (Obj.repr (step)) (Obj.repr (0)) (Obj.repr (1))));
  print_endline (" Time Euler's Analytic");
  let temp = ref (tempObject) in
  let time = ref (0.0) in
  (try while (!time <= 100.0) do
    try
  let line = ((((fmtF (Obj.repr (!time)) (Obj.repr (5)) (Obj.repr (1)) ^ " ") ^ fmtF (Obj.repr (!temp)) (Obj.repr (7)) (Obj.repr (3))) ^ " ") ^ fmtF (Obj.repr (analytic (Obj.repr (!time)))) (Obj.repr (7)) (Obj.repr (3))) in
  print_endline (__show line);
  temp := eulerStep (fcr) (Obj.repr (!time)) (Obj.repr (!temp)) (Obj.repr (step));
  time := (!time +. step);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
    with Continue -> ()) ([2.0; 5.0; 10.0]) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()