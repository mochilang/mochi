(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let glyphs = ref ("♜♞♝♛♚♖♘♗♕♔")
let g2lMap = ref ([("♜", "R"); ("♞", "N"); ("♝", "B"); ("♛", "Q"); ("♚", "K"); ("♖", "R"); ("♘", "N"); ("♗", "B"); ("♕", "Q"); ("♔", "K")])
let names = ref ([("R", "rook"); ("N", "knight"); ("B", "bishop"); ("Q", "queen"); ("K", "king")])
let ntable = ref ([("01", 0); ("02", 1); ("03", 2); ("04", 3); ("12", 4); ("13", 5); ("14", 6); ("23", 7); ("24", 8); ("34", 9)])
let rec indexOf s sub =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i <= (String.length (s) - String.length (sub))) do
    try
  if (String.sub (s) !i ((!i + String.length (sub)) - !i) = sub) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and strReplace s old new_ =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (((String.length (old) > 0) && ((!i + String.length (old)) <= String.length (s))) && (String.sub (s) !i ((!i + String.length (old)) - !i) = old)) then (
  res := (!res ^ new_);
  i := (!i + String.length (old));
  ) else (
  res := (!res ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and g2l pieces =
  let __ret = ref "" in
  (try
  let lets = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (pieces)) do
    try
  let ch = String.sub (pieces) !i ((!i + 1) - !i) in
  lets := (!lets ^ (try List.assoc (ch) !g2lMap with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lets) : string); raise Return
  with Return -> !__ret)

and spid pieces =
  let __ret = ref 0 in
  (try
  pieces := g2l (!pieces);
  if (String.length (!pieces) <> 8) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  (try List.iter (fun one ->
    try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (!pieces)) do
    try
  if (String.sub (!pieces) !i ((!i + 1) - !i) = one) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!count <> 1) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
    with Continue -> ()) (["K"; "Q"]) with Break -> ());
  (try List.iter (fun two ->
    try
  let count = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (!pieces)) do
    try
  if (String.sub (!pieces) !i ((!i + 1) - !i) = two) then (
  count := (!count + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!count <> 2) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
    with Continue -> ()) (["R"; "N"; "B"]) with Break -> ());
  let r1 = (try String.index (!pieces) 'R' with Not_found -> -1) in
  let r2 = (((try String.index (String.sub (!pieces) (r1 + 1) (String.length (!pieces) - (r1 + 1))) 'R' with Not_found -> -1) + r1) + 1) in
  let k = (try String.index (!pieces) 'K' with Not_found -> -1) in
  if ((k < r1) || (k > r2)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let b1 = (try String.index (!pieces) 'B' with Not_found -> -1) in
  let b2 = (((try String.index (String.sub (!pieces) (b1 + 1) (String.length (!pieces) - (b1 + 1))) 'B' with Not_found -> -1) + b1) + 1) in
  if (((b2 - b1) mod 2) = 0) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let piecesN = ref (strReplace (!pieces) ("Q") ("")) in
  piecesN := strReplace (!piecesN) ("B") ("");
  let n1 = (try String.index (!piecesN) 'N' with Not_found -> -1) in
  let n2 = (((try String.index (String.sub (!piecesN) (n1 + 1) (String.length (!piecesN) - (n1 + 1))) 'N' with Not_found -> -1) + n1) + 1) in
  let np = ((string_of_int (n1)) ^ (string_of_int (n2))) in
  let _n = (try List.assoc (np) !ntable with Not_found -> (Obj.magic 0)) in
  let piecesQ = ref (strReplace (!pieces) ("B") ("")) in
  let _q = (try String.index (!piecesQ) 'Q' with Not_found -> -1) in
  let _d = ref ((try String.index ("0246") (String.get ((string_of_int (b1))) 0) with Not_found -> -1)) in
  let _l = ref ((try String.index ("1357") (String.get ((string_of_int (b2))) 0) with Not_found -> -1)) in
  if (!_d = (0 - 1)) then (
  _d := (try String.index ("0246") (String.get ((string_of_int (b2))) 0) with Not_found -> -1);
  _l := (try String.index ("1357") (String.get ((string_of_int (b1))) 0) with Not_found -> -1);
  );
  __ret := (Obj.magic (((((96 * _n) + (16 * _q)) + (4 * !_d)) + !_l)) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  (try List.iter (fun pieces ->
    try
  print_endline (((((pieces ^ " or ") ^ g2l (pieces)) ^ " has SP-ID of ") ^ (string_of_int (spid (ref (pieces))))));
    with Continue -> ()) (["♕♘♖♗♗♘♔♖"; "♖♘♗♕♔♗♘♖"; "♖♕♘♗♗♔♖♘"; "♖♘♕♗♗♔♖♘"]) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()