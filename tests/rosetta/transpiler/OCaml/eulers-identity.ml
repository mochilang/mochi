(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cosApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int ((((2 * !n) - 1) * (2 * !n))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cis x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ([("re", Obj.repr (cosApprox (Obj.repr (x)))); ("im", Obj.repr (sinApprox (Obj.repr (x))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (((Obj.obj (List.assoc ("re") (a) : Obj.t)) +. (Obj.obj (List.assoc ("re") (b) : Obj.t))))); ("im", Obj.repr (((Obj.obj (List.assoc ("im") (a) : Obj.t)) +. (Obj.obj (List.assoc ("im") (b) : Obj.t)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and cstr a =
  let __ret = ref "" in
  (try
  let s = ref (("(" ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("re") (a) : Obj.t)))))) in
  if ((Obj.obj (List.assoc ("im") (a) : Obj.t)) >= float_of_int (0)) then (
  s := (((!s ^ "+") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("im") (a) : Obj.t))))) ^ "i)");
  ) else (
  s := ((!s ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("im") (a) : Obj.t))))) ^ "i)");
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let result = add (cis (Obj.repr (_pi))) ([("re", Obj.repr (1.0)); ("im", Obj.repr (0.0))]) in
  print_endline (__show (cstr (result)));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()