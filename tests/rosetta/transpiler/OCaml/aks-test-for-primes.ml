(* Generated by Mochi transpiler v0.10.39 on 2025-07-25 08:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec poly p =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let coef = ref (1) in
  let i = ref (p) in
  if (!coef <> 1) then (
  s := (!s ^ (string_of_int (!coef)));
  );
  (try while (!i > 0) do
    try
  s := (!s ^ "x");
  if (!i <> 1) then (
  s := ((!s ^ "^") ^ (string_of_int (!i)));
  );
  coef := ((!coef * !i) / ((p - !i) + 1));
  let d = ref (!coef) in
  if (((p - (!i - 1)) mod 2) = 1) then (
  d := -(!d);
  );
  if (!d < 0) then (
  s := ((!s ^ " - ") ^ (string_of_int (-(!d))));
  ) else (
  s := ((!s ^ " + ") ^ (string_of_int (!d)));
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  if (!s = "") then (
  s := "1";
  );
  __ret := !s; raise Return
  with Return -> !__ret)

let rec aks n =
  let __ret = ref false in
  (try
  if (n < 2) then (
  __ret := false; raise Return
  );
  let c = ref (n) in
  let i = ref (1) in
  (try while (!i < n) do
    try
  if ((!c mod n) <> 0) then (
  __ret := false; raise Return
  );
  c := ((!c * (n - !i)) / (!i + 1));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := true; raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let p = ref (0) in
  (try while (!p <= 7) do
    try
  print_endline ((((string_of_int (!p)) ^ ":  ") ^ poly (!p)));
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  let first = ref (true) in
  p := 2;
  let line = ref ("") in
  (try while (!p < 50) do
    try
  if aks (!p) then (
  if !first then (
  line := (!line ^ (string_of_int (!p)));
  first := false;
  ) else (
  line := ((!line ^ " ") ^ (string_of_int (!p)));
  );
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
