(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec primeFactors n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let factors = ref (([] : (int) list)) in
  let last = ref (0) in
  let x = ref (n) in
  (try while ((!x mod 2) = 0) do
    try
  if (!last = 2) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  factors := (List.append (!factors) [(Obj.magic (2) : int)]);
  last := 2;
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  let p = ref (3) in
  (try while ((!p * !p) <= !x) do
    try
  (try while ((!x mod !p) = 0) do
    try
  if (!last = !p) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  factors := (List.append (!factors) [(Obj.magic (!p) : int)]);
  last := !p;
  x := (!x / !p);
    with Continue -> ()
  done with Break -> ());
  p := (!p + 2);
    with Continue -> ()
  done with Break -> ());
  if (!x > 1) then (
  if (!last = !x) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  factors := (List.append (!factors) [(Obj.magic (!x) : int)]);
  );
  __ret := (Obj.magic (!factors) : int list); raise Return
  with Return -> !__ret)

and isGiuga n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let facs = ref (primeFactors (Obj.repr (n))) in
  if (List.length (!facs) <= 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  (try List.iter (fun f ->
    try
  if ((((n / f) - 1) mod f) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (!facs) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let known = ref ([30; 858; 1722; 66198]) in
  let nums = ref (([] : (int) list)) in
  (try List.iter (fun n ->
    try
  if isGiuga (Obj.repr (n)) then (
  nums := (List.append (!nums) [(Obj.magic (n) : int)]);
  );
    with Continue -> ()) (!known) with Break -> ());
  print_endline ("The first 4 Giuga numbers are:");
  print_endline (__show !nums);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()