(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec pad2 n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n < 10) then (
  __ret := (Obj.magic (("0" ^ (string_of_int (n)))) : string); raise Return
  );
  __ret := (Obj.magic ((string_of_int (n))) : string); raise Return
  with Return -> !__ret)

and weekdayName z =
  let __ret = ref "" in
  (try
  let z = (Obj.magic z : int) in
  let names = ref (["Sunday"; "Monday"; "Tuesday"; "Wednesday"; "Thursday"; "Friday"; "Saturday"]) in
  __ret := (Obj.magic (List.nth (!names) (((z + 4) mod 7))) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ts = (_now () / 1000000000) in
  let days = ref ((ts / 86400)) in
  let z = ref ((!days + 719468)) in
  let era = ref ((!z / 146097)) in
  let doe = ref ((!z - (!era * 146097))) in
  let yoe = ref (((((!doe - (!doe / 1460)) + (!doe / 36524)) - (!doe / 146096)) / 365)) in
  let y = ref ((!yoe + (!era * 400))) in
  let doy = ref ((!doe - (((365 * !yoe) + (!yoe / 4)) - (!yoe / 100)))) in
  let mp = ref ((((5 * !doy) + 2) / 153)) in
  let d = ref (((!doy - (((153 * !mp) + 2) / 5)) + 1)) in
  let m = ref ((!mp + 3)) in
  if (!m > 12) then (
  y := (!y + 1);
  m := (!m - 12);
  );
  let iso = (((((string_of_int (!y)) ^ "-") ^ pad2 (Obj.repr (!m))) ^ "-") ^ pad2 (Obj.repr (!d))) in
  print_endline (__show iso);
  let months = ref (["January"; "February"; "March"; "April"; "May"; "June"; "July"; "August"; "September"; "October"; "November"; "December"]) in
  let line = ((((((weekdayName (Obj.repr (!days)) ^ ", ") ^ List.nth (!months) ((!m - 1))) ^ " ") ^ (string_of_int (!d))) ^ ", ") ^ (string_of_int (!y))) in
  print_endline (__show line);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()