(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 21:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

let rec indexOfFrom s ch start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let i = ref (start) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec containsStr s sub =
  let __ret = ref false in
  (try
  let i = ref (0) in
  let sl = String.length (s) in
  let subl = String.length (sub) in
  (try while (!i <= (sl - subl)) do
    try
  if (String.sub (s) !i ((!i + subl) - !i) = sub) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

let rec distinct slist =
  let __ret = ref ([] : string list) in
  (try
  let res = ref ([]) in
  (try List.iter (fun s ->
    try
  let found = ref (false) in
  (try List.iter (fun r ->
    try
  if (r = s) then (
  found := true;
  raise Break;
  );
    with Continue -> ()) !res with Break -> ());
  if not (!found) then (
  res := List.append !res [s];
  );
    with Continue -> ()) slist with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

let rec permutations xs =
  let __ret = ref ([] : string list list) in
  (try
  if (List.length (xs) <= 1) then (
  __ret := (Obj.magic ([xs]) : string list list); raise Return
  );
  let res = ref ([]) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  let rest = ref ([]) in
  let j = ref (0) in
  (try while (!j < List.length (xs)) do
    try
  if (!j <> !i) then (
  rest := List.append !rest [List.nth (xs) (!j)];
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let subs = ref (permutations (!rest)) in
  (try List.iter (fun p ->
    try
  let perm = ref ([List.nth (xs) (!i)]) in
  let k = ref (0) in
  (try while (!k < List.length (p)) do
    try
  perm := List.append !perm [List.nth (p) (!k)];
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  res := List.append !res [!perm];
    with Continue -> ()) !subs with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string list list); raise Return
  with Return -> !__ret)

let rec headTailOverlap s1 s2 =
  let __ret = ref 0 in
  (try
  let start = ref (0) in
  (try while true do
    try
  let ix = indexOfFrom (s1) (String.sub (s2) 0 (1 - 0)) (!start) in
  if (ix = (0 - 1)) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  start := ix;
  let sublen = ref ((String.length (s1) - !start)) in
  if (!sublen > String.length (s2)) then (
  sublen := String.length (s2);
  );
  if (String.sub (s2) 0 (!sublen - 0) = String.sub (s1) !start ((!start + !sublen) - !start)) then (
  __ret := (Obj.magic (!sublen) : int); raise Return
  );
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let rec deduplicate slist =
  let __ret = ref ([] : string list) in
  (try
  let arr = ref (distinct (slist)) in
  let filtered = ref ([]) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let s1 = List.nth (!arr) (!i) in
  let within = ref (false) in
  let j = ref (0) in
  (try while (!j < List.length (!arr)) do
    try
  if ((!j <> !i) && containsStr (List.nth (!arr) (!j)) (s1)) then (
  within := true;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!within) then (
  filtered := List.append !filtered [s1];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!filtered) : string list); raise Return
  with Return -> !__ret)

let rec joinAll ss =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  (try List.iter (fun s ->
    try
  out := (!out ^ s);
    with Continue -> ()) ss with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec shortestCommonSuperstring slist =
  let __ret = ref "" in
  (try
  let ss = ref (deduplicate (slist)) in
  let shortest = ref (joinAll (!ss)) in
  let perms = ref (permutations (!ss)) in
  let idx = ref (0) in
  (try while (!idx < List.length (!perms)) do
    try
  let perm = ref (List.nth (!perms) (!idx)) in
  let sup = ref (List.nth (!perm) (0)) in
  let i = ref (0) in
  (try while (!i < (List.length (!ss) - 1)) do
    try
  let ov = headTailOverlap (List.nth (!perm) (!i)) (List.nth (!perm) ((!i + 1))) in
  sup := (!sup ^ String.sub (List.nth (!perm) ((!i + 1))) ov (String.length (List.nth (!perm) ((!i + 1))) - ov));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!sup) < String.length (!shortest)) then (
  shortest := !sup;
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!shortest) : string); raise Return
  with Return -> !__ret)

let rec printCounts seq =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = ref (0) in
  let c = ref (0) in
  let g = ref (0) in
  let t = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (seq)) do
    try
  let ch = String.sub (seq) !i ((!i + 1) - !i) in
  if (ch = "A") then (
  a := (!a + 1);
  ) else (
  if (ch = "C") then (
  c := (!c + 1);
  ) else (
  if (ch = "G") then (
  g := (!g + 1);
  ) else (
  if (ch = "T") then (
  t := (!t + 1);
  );
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total = String.length (seq) in
  print_endline ((("\nNucleotide counts for " ^ seq) ^ ":\n"));
  print_endline ((padLeft ("A") (10) ^ padLeft ((string_of_int (!a))) (12)));
  print_endline ((padLeft ("C") (10) ^ padLeft ((string_of_int (!c))) (12)));
  print_endline ((padLeft ("G") (10) ^ padLeft ((string_of_int (!g))) (12)));
  print_endline ((padLeft ("T") (10) ^ padLeft ((string_of_int (!t))) (12)));
  print_endline ((padLeft ("Other") (10) ^ padLeft ((string_of_int ((total - (((!a + !c) + !g) + !t))))) (12)));
  print_endline ("  ____________________");
  print_endline ((padLeft ("Total length") (14) ^ padLeft ((string_of_int (total))) (8)));
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tests = ref ([["TA"; "AAG"; "TA"; "GAA"; "TA"]; ["CATTAGGG"; "ATTAG"; "GGG"; "TA"]; ["AAGAUGGA"; "GGAGCGCAUC"; "AUCGCAAUAAGGA"]; ["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT"; "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT"; "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"; "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"; "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"; "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC"; "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT"; "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"; "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC"; "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT"; "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"; "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"; "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"]]) in
  (try List.iter (fun seqs ->
    try
  let scs = shortestCommonSuperstring (seqs) in
  ignore (printCounts (scs));
    with Continue -> ()) !tests with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
