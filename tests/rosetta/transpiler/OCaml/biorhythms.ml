(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

open Str


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 8) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

let rec floor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

let rec absFloat x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

let rec absInt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

let rec parseIntStr str =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + (try List.assoc (String.sub (str) !i ((!i + 1) - !i)) !digits with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

let rec parseDate s =
  let __ret = ref ([] : int list) in
  (try
  let y = parseIntStr (String.sub (s) 0 (4 - 0)) in
  let m = parseIntStr (String.sub (s) 5 (7 - 5)) in
  let d = parseIntStr (String.sub (s) 8 (10 - 8)) in
  __ret := (Obj.magic ([y; m; d]) : int list); raise Return
  with Return -> !__ret)

let rec leap y =
  let __ret = ref false in
  (try
  let y = (Obj.magic y : int) in
  if ((y mod 400) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((y mod 100) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic (((y mod 4) = 0)) : bool); raise Return
  with Return -> !__ret)

let rec daysInMonth y m =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let feb = if leap (y) then 29 else 28 in
  let lengths = ref ([31; feb; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31]) in
  __ret := (Obj.magic (List.nth (!lengths) ((m - 1))) : int); raise Return
  with Return -> !__ret)

let rec addDays y m d n =
  let __ret = ref ([] : int list) in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  let n = (Obj.magic n : int) in
  let yy = ref (y) in
  let mm = ref (m) in
  let dd = ref (d) in
  if (n >= 0) then (
  let i = ref (0) in
  (try while (!i < n) do
    try
  dd := (!dd + 1);
  if (!dd > daysInMonth (!yy) (!mm)) then (
  dd := 1;
  mm := (!mm + 1);
  if (!mm > 12) then (
  mm := 1;
  yy := (!yy + 1);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ) else (
  let i = ref (0) in
  (try while (!i > n) do
    try
  dd := (!dd - 1);
  if (!dd < 1) then (
  mm := (!mm - 1);
  if (!mm < 1) then (
  mm := 12;
  yy := (!yy - 1);
  );
  dd := daysInMonth (!yy) (!mm);
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic ([!yy; !mm; !dd]) : int list); raise Return
  with Return -> !__ret)

let rec pad2 n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n < 10) then (
  __ret := (Obj.magic (("0" ^ (string_of_int (n)))) : string); raise Return
  );
  __ret := (Obj.magic ((string_of_int (n))) : string); raise Return
  with Return -> !__ret)

let rec dateString y m d =
  let __ret = ref "" in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  __ret := (Obj.magic ((((((string_of_int (y)) ^ "-") ^ pad2 (m)) ^ "-") ^ pad2 (d))) : string); raise Return
  with Return -> !__ret)

let rec day y m d =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  let part1 = (367 * y) in
  let part2 = ((7 * (y + ((m + 9) / 12))) / 4) in
  let part3 = ((275 * m) / 9) in
  __ret := (Obj.magic (((((part1 - part2) + part3) + d) - 730530)) : int); raise Return
  with Return -> !__ret)

let rec biorhythms birth target =
  let __ret = ref (Obj.magic 0) in
  (try
  let bparts = ref (parseDate (birth)) in
  let by = List.nth (!bparts) (0) in
  let bm = List.nth (!bparts) (1) in
  let bd = List.nth (!bparts) (2) in
  let tparts = ref (parseDate (target)) in
  let ty = List.nth (!tparts) (0) in
  let tm = List.nth (!tparts) (1) in
  let td = List.nth (!tparts) (2) in
  let diff = absInt ((day (ty) (tm) (td) - day (by) (bm) (bd))) in
  print_endline (((("Born " ^ birth) ^ ", Target ") ^ target));
  print_endline (("Day " ^ (string_of_int (diff))));
  let cycles = ref (["Physical day "; "Emotional day"; "Mental day   "]) in
  let lengths = ref ([23; 28; 33]) in
  let quadrants = ref ([["up and rising"; "peak"]; ["up but falling"; "transition"]; ["down and falling"; "valley"]; ["down but rising"; "transition"]]) in
  let i = ref (0) in
  (try while (!i < 3) do
    try
  let length = List.nth (!lengths) (!i) in
  let cycle = List.nth (!cycles) (!i) in
  let position = (diff mod length) in
  let quadrant = ((position * 4) / length) in
  let percent = ref (sinApprox ((((2.0 *. _pi) *. float_of_int (position)) /. float_of_int (length)))) in
  percent := (floor ((!percent *. 1000.0)) /. 10.0);
  let description = ref ("") in
  if (!percent > 95.0) then (
  description := " peak";
  ) else (
  if (!percent < (-.(95.0))) then (
  description := " valley";
  ) else (
  if (absFloat (!percent) < 5.0) then (
  description := " critical transition";
  ) else (
  let daysToAdd = ((((quadrant + 1) * length) / 4) - position) in
  let res = ref (addDays (ty) (tm) (td) (daysToAdd)) in
  let ny = List.nth (!res) (0) in
  let nm = List.nth (!res) (1) in
  let nd = List.nth (!res) (2) in
  let transition = dateString (ny) (nm) (nd) in
  let trend = List.nth (List.nth (!quadrants) (quadrant)) (0) in
  let next = List.nth (List.nth (!quadrants) (quadrant)) (1) in
  let pct = ref ((string_of_float (!percent))) in
  if not ((let len_s = String.length !pct and len_sub = String.length "." in let rec aux i = if i + len_sub > len_s then false else if String.sub !pct i len_sub = "." then true else aux (i + 1) in aux 0)) then (
  pct := (!pct ^ ".0");
  );
  description := ((((((((" " ^ !pct) ^ "% (") ^ trend) ^ ", next ") ^ next) ^ " ") ^ transition) ^ ")");
  );
  );
  );
  let posStr = ref ((string_of_int (position))) in
  if (position < 10) then (
  posStr := (" " ^ !posStr);
  );
  print_endline ((((cycle ^ !posStr) ^ " : ") ^ !description));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let pairs = ref ([["1943-03-09"; "1972-07-11"]; ["1809-01-12"; "1863-11-19"]; ["1809-02-12"; "1863-11-19"]]) in
  let idx = ref (0) in
  (try while (!idx < List.length (!pairs)) do
    try
  let p = ref (List.nth (!pairs) (!idx)) in
  ignore (biorhythms (List.nth (!p) (0)) (List.nth (!p) (1)));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
