(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec repeat s n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  out := (!out ^ s);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and trimRightSpace s =
  let __ret = ref "" in
  (try
  let i = ref ((String.length (s) - 1)) in
  (try while ((!i >= 0) && (String.sub (s) !i ((!i + 1) - !i) = " ")) do
    try
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) 0 ((!i + 1) - 0)) : string); raise Return
  with Return -> !__ret)

and block2text block =
  let __ret = ref ([] : (string) list) in
  (try
  let out = ref (([] : (string) list)) in
  (try List.iter (fun b ->
    try
  out := (List.append (!out) [(Obj.magic (trimRightSpace (b)) : string)]);
    with Continue -> ()) (block) with Break -> ());
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)

and text2block lines =
  let __ret = ref ([] : (string) list) in
  (try
  let out = ref (([] : (string) list)) in
  let count = ref (0) in
  (try List.iter (fun line ->
    try
  let s = ref (line) in
  let le = String.length (!s) in
  if (le > 64) then (
  s := String.sub (!s) 0 (64 - 0);
  ) else (
  if (le < 64) then (
  s := (!s ^ repeat (" ") (Obj.repr ((64 - le))));
  );
  );
  out := (List.append (!out) [(Obj.magic (!s) : string)]);
  count := (!count + 1);
    with Continue -> ()) (lines) with Break -> ());
  if ((!count mod 16) <> 0) then (
  let pad = (16 - (!count mod 16)) in
  let i = ref (0) in
  (try while (!i < pad) do
    try
  out := (List.append (!out) [(Obj.magic (repeat (" ") (Obj.repr (64))) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)


let lines = ref (["alpha"; "beta"; "gamma"])
let blocks = ref (text2block (!lines))
let outLines = ref (block2text (!blocks))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun l ->
    try
  if (l <> "") then (
  print_endline (__show l);
  );
    with Continue -> ()) (!outLines) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()