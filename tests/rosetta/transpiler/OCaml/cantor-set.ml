(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let width = 81
let height = 5
let lines = ref (([] : string list))
let rec setChar s idx ch =
  let __ret = ref "" in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((String.sub (s) 0 (idx - 0) ^ ch) ^ String.sub (s) (idx + 1) (String.length (s) - (idx + 1)))) : string); raise Return
  with Return -> !__ret)

let stack = ref ([[("start", 0); ("len", width); ("index", 1)]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try for i = 0 to (height - 1) do
    try
  let row = ref ("") in
  let j = ref (0) in
  (try while (!j < width) do
    try
  row := (!row ^ "*");
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  lines := (List.append !lines [(Obj.magic (!row) : string)]);
    with Continue -> ()
  done with Break -> ());
  (try while (List.length (!stack) > 0) do
    try
  let frame = ref (List.nth (!stack) ((List.length (!stack) - 1))) in
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  let start = (try List.assoc ("start") !frame with Not_found -> (Obj.magic 0)) in
  let lenSeg = (try List.assoc ("len") !frame with Not_found -> (Obj.magic 0)) in
  let index = (try List.assoc ("index") !frame with Not_found -> (Obj.magic 0)) in
  let seg = (lenSeg / 3) in
  if (seg = 0) then (
  raise Continue;
  );
  let i = ref (index) in
  (try while (!i < height) do
    try
  let j = ref ((start + seg)) in
  (try while (!j < (start + (2 * seg))) do
    try
  lines := (List.mapi (fun __i __x -> if __i = !i then setChar (List.nth (!lines) (!i)) (!j) (" ") else __x) (!lines));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  stack := (List.append !stack [(Obj.magic ([("start", start); ("len", seg); ("index", (index + 1))]) : (string * int) list)]);
  stack := (List.append !stack [(Obj.magic ([("start", (start + (seg * 2))); ("len", seg); ("index", (index + 1))]) : (string * int) list)]);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun line ->
    try
  print_endline (__show line);
    with Continue -> ()) !lines with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
