(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec fuscVal n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let a = ref (1) in
  let b = ref (0) in
  let x = ref (n) in
  (try while (!x > 0) do
    try
  if ((!x mod 2) = 0) then (
  x := (!x / 2);
  a := (!a + !b);
  ) else (
  x := ((!x - 1) / 2);
  b := (!a + !b);
  );
    with Continue -> ()
  done with Break -> ());
  if (n = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic (!b) : int); raise Return
  with Return -> !__ret)

and firstFusc n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  arr := (List.append (!arr) [(Obj.magic (fuscVal (Obj.repr (!i))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and commatize n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  let neg = ref (false) in
  if (n < 0) then (
  neg := true;
  s := String.sub !s (1) (String.length (!s) - 1);
  );
  let i = ref ((String.length (!s) - 3)) in
  (try while (!i >= 1) do
    try
  s := ((String.sub !s (0) (!i - 0) ^ ",") ^ String.sub !s (!i) (String.length (!s) - !i));
  i := (!i - 3);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  __ret := (Obj.magic (("-" ^ !s)) : string); raise Return
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let out = ref (s) in
  (try while (String.length (!out) < w) do
    try
  out := (" " ^ !out);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("The first 61 fusc numbers are:");
  print_endline (__show (__show (firstFusc (Obj.repr (61)))));
  print_endline ("\nThe fusc numbers whose length > any previous fusc number length are:");
  let idxs = ref ([0; 37; 1173; 35499; 699051; 19573419]) in
  let i = ref (0) in
  (try while (!i < List.length (!idxs)) do
    try
  let idx = List.nth (!idxs) (!i) in
  let val_ = fuscVal (Obj.repr (idx)) in
  let numStr = padLeft (commatize (Obj.repr (val_))) (Obj.repr (7)) in
  let idxStr = padLeft (commatize (Obj.repr (idx))) (Obj.repr (10)) in
  print_endline ((((numStr ^ " (index ") ^ idxStr) ^ ")"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()