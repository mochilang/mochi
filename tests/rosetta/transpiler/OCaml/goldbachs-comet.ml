(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sieve limit =
  let __ret = ref ([] : (bool) list) in
  (try
  let limit = (Obj.magic limit : int) in
  let primes = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < limit) do
    try
  primes := (List.append (!primes) [(Obj.magic (true) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  primes := (List.mapi (fun __i __x -> if __i = 0 then false else __x) (!primes));
  primes := (List.mapi (fun __i __x -> if __i = 1 then false else __x) (!primes));
  let p = ref (2) in
  (try while ((!p * !p) < limit) do
    try
  if List.nth (!primes) (!p) then (
  let k = ref ((!p * !p)) in
  (try while (!k < limit) do
    try
  primes := (List.mapi (fun __i __x -> if __i = !k then false else __x) (!primes));
  k := (!k + !p);
    with Continue -> ()
  done with Break -> ());
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!primes) : bool list); raise Return
  with Return -> !__ret)

and goldbachCount primes n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let c = ref (0) in
  let i = ref (1) in
  (try while (!i <= (n / 2)) do
    try
  if (List.nth (primes) (!i) && List.nth (primes) ((n - !i))) then (
  c := (!c + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!c) : int); raise Return
  with Return -> !__ret)

and pad n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n < 10) then (
  __ret := (Obj.magic (("  " ^ (string_of_int (n)))) : string); raise Return
  );
  if (n < 100) then (
  __ret := (Obj.magic ((" " ^ (string_of_int (n)))) : string); raise Return
  );
  __ret := (Obj.magic ((string_of_int (n))) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let primes = ref (sieve (Obj.repr (1000))) in
  print_endline ("The first 100 Goldbach numbers:");
  let line = ref ("") in
  let n = ref (2) in
  let count = ref (0) in
  (try while (!count < 100) do
    try
  let v = goldbachCount (!primes) (Obj.repr ((2 * !n))) in
  line := ((!line ^ pad (Obj.repr (v))) ^ " ");
  count := (!count + 1);
  n := (!n + 1);
  if ((!count mod 10) = 0) then (
  print_endline (String.sub !line (0) ((String.length (!line) - 1) - 0));
  line := "";
  );
    with Continue -> ()
  done with Break -> ());
  let val_ = goldbachCount (!primes) (Obj.repr (1000)) in
  print_endline (("\nThe 1,000th Goldbach number = " ^ (string_of_int (val_))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()