(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:37 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Return

let rec f () =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([Obj.repr (0); Obj.repr (0.0)]) : Obj.t list); raise Return
  with Return -> !__ret)

let rec g a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

let rec h s nums =
  let __ret = ref (Obj.magic 0) in
  (try
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (f ());
  ignore (g (1) (2.0));
  let res = ref (f ()) in
  ignore (g (List.nth (!res) (0)) (List.nth (!res) (1)));
  ignore (g (g (1) (2.0)) (3.0));
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
