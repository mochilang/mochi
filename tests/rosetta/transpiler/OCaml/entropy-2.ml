(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 23:02 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec log2 x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let k = ref (0.0) in
  let v = ref (x) in
  (try while (!v >= 2.0) do
    try
  v := (!v /. 2.0);
  k := (!k +. 1.0);
    with Continue -> ()
  done with Break -> ());
  (try while (!v < 1.0) do
    try
  v := (!v *. 2.0);
  k := (!k -. 1.0);
    with Continue -> ()
  done with Break -> ());
  let z = ((!v -. 1.0) /. (!v +. 1.0)) in
  let zpow = ref (z) in
  let sum = ref (z) in
  let i = ref (3) in
  (try while (!i <= 9) do
    try
  zpow := ((!zpow *. z) *. z);
  sum := (!sum +. (!zpow /. float_of_int (!i)));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let ln2 = 0.6931471805599453 in
  __ret := (Obj.magic ((!k +. ((2.0 *. !sum) /. ln2))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = "1223334444" in
  let counts = ref ([]) in
  let l = ref (0.0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (List.mem_assoc ch !counts) then (
  counts := ((ch, ((try List.assoc (ch) (!counts) with Not_found -> 0) + 1)) :: List.remove_assoc (ch) !counts);
  ) else (
  counts := ((ch, 1) :: List.remove_assoc (ch) !counts);
  );
  l := (!l +. 1.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let hm = ref (0.0) in
  (try List.iter (fun (ch, _) ->
    try
  let c = float_of_int ((try List.assoc (ch) (!counts) with Not_found -> 0)) in
  hm := (!hm +. (c *. log2 (Obj.repr (c))));
    with Continue -> ()) (!counts) with Break -> ());
  print_endline ((Printf.sprintf "%.16g" ((log2 (Obj.repr (!l)) -. (!hm /. !l)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()