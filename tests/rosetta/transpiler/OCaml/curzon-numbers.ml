(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec padLeft n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and modPow base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref ((1 mod mod_)) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  b := ((!b * !b) mod mod_);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let k = ref (2) in
  (try while (!k <= 10) do
    try
  print_endline ((("The first 50 Curzon numbers using a base of " ^ (string_of_int (!k))) ^ " :"));
  let count = ref (0) in
  let n = ref (1) in
  let curzon50 = ref (([] : int list)) in
  (try while true do
    try
  let d = ((!k * !n) + 1) in
  if (((modPow (Obj.repr (!k)) (Obj.repr (!n)) (Obj.repr (d)) + 1) mod d) = 0) then (
  if (!count < 50) then (
  curzon50 := (List.append (!curzon50) [(Obj.magic (!n) : int)]);
  );
  count := (!count + 1);
  if (!count = 50) then (
  let idx = ref (0) in
  (try while (!idx < List.length (!curzon50)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < 10) do
    try
  line := ((!line ^ padLeft (Obj.repr (List.nth (!curzon50) (!idx))) (Obj.repr (4))) ^ " ");
  idx := (!idx + 1);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (String.sub (!line) 0 ((String.length (!line) - 1) - 0));
    with Continue -> ()
  done with Break -> ());
  );
  if (!count = 1000) then (
  print_endline (("\nOne thousandth: " ^ (string_of_int (!n))));
  raise Break;
  );
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  k := (!k + 2);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()