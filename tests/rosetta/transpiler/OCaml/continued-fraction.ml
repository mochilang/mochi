(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec newTerm a b =
  let __ret = ref ([] : (string * int) list) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic ([("a", a); ("b", b)]) : (string * int) list); raise Return
  with Return -> !__ret)

and cfSqrt2 nTerms =
  let __ret = ref ([] : (string * int) list list) in
  (try
  let nTerms = (Obj.magic nTerms : int) in
  let f = ref (([] : (string * int) list list)) in
  let n = ref (0) in
  (try while (!n < nTerms) do
    try
  f := (List.append (!f) [(Obj.magic (newTerm (Obj.repr (2)) (Obj.repr (1))) : (string * int) list)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if (nTerms > 0) then (
  f := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = "a" then 1 else __x) (List.nth (!f) (0))) else __x) (!f));
  );
  __ret := (Obj.magic (!f) : (string * int) list list); raise Return
  with Return -> !__ret)

and cfNap nTerms =
  let __ret = ref ([] : (string * int) list list) in
  (try
  let nTerms = (Obj.magic nTerms : int) in
  let f = ref (([] : (string * int) list list)) in
  let n = ref (0) in
  (try while (!n < nTerms) do
    try
  f := (List.append (!f) [(Obj.magic (newTerm (Obj.repr (!n)) (Obj.repr ((!n - 1)))) : (string * int) list)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if (nTerms > 0) then (
  f := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = "a" then 2 else __x) (List.nth (!f) (0))) else __x) (!f));
  );
  if (nTerms > 1) then (
  f := (List.mapi (fun __i __x -> if __i = 1 then (List.mapi (fun __i __x -> if __i = "b" then 1 else __x) (List.nth (!f) (1))) else __x) (!f));
  );
  __ret := (Obj.magic (!f) : (string * int) list list); raise Return
  with Return -> !__ret)

and cfPi nTerms =
  let __ret = ref ([] : (string * int) list list) in
  (try
  let nTerms = (Obj.magic nTerms : int) in
  let f = ref (([] : (string * int) list list)) in
  let n = ref (0) in
  (try while (!n < nTerms) do
    try
  let g = ((2 * !n) - 1) in
  f := (List.append (!f) [(Obj.magic (newTerm (Obj.repr (6)) (Obj.repr ((g * g)))) : (string * int) list)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  if (nTerms > 0) then (
  f := (List.mapi (fun __i __x -> if __i = 0 then (List.mapi (fun __i __x -> if __i = "a" then 3 else __x) (List.nth (!f) (0))) else __x) (!f));
  );
  __ret := (Obj.magic (!f) : (string * int) list list); raise Return
  with Return -> !__ret)

and real f =
  let __ret = ref 0.0 in
  (try
  let r = ref (0.0) in
  let i = ref ((List.length (f) - 1)) in
  (try while (!i > 0) do
    try
  r := (float_of_int ((try List.assoc ("b") List.nth (f) (!i) with Not_found -> (Obj.magic 0))) /. (float_of_int ((try List.assoc ("a") List.nth (f) (!i) with Not_found -> (Obj.magic 0))) +. !r));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (f) > 0) then (
  r := (!r +. float_of_int ((try List.assoc ("a") List.nth (f) (0) with Not_found -> (Obj.magic 0))));
  );
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (("sqrt2: " ^ (Printf.sprintf "%.16g" (real (cfSqrt2 (Obj.repr (20)))))));
  print_endline (("nap:   " ^ (Printf.sprintf "%.16g" (real (cfNap (Obj.repr (20)))))));
  print_endline (("pi:    " ^ (Printf.sprintf "%.16g" (real (cfPi (Obj.repr (20)))))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()