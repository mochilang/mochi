(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:32 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bernoulli n =
  let __ret = ref (Q.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let a = ref (([] : Q.t list)) in
  let m = ref (0) in
  (try while (!m <= n) do
    try
  a := (List.append (!a) [(Obj.magic ((Q.div ((Q.of_int (1))) ((Q.of_int ((!m + 1)))))) : Q.t)]);
  let j = ref (!m) in
  (try while (!j >= 1) do
    try
  a := (List.mapi (fun __i __x -> if __i = (!j - 1) then (Q.mul ((Q.of_int (!j))) ((Q.sub (List.nth (!a) ((!j - 1))) (List.nth (!a) (!j))))) else __x) (!a));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!a) (0)) : Q.t); raise Return
  with Return -> !__ret)

and binom n k =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  if ((k < 0) || (k > n)) then (
  __ret := (Obj.magic ((Z.of_int (0))) : Z.t); raise Return
  );
  let kk = ref (k) in
  if (!kk > (n - !kk)) then (
  kk := (n - !kk);
  );
  let res = ref ((Z.of_int (1))) in
  let i = ref (0) in
  (try while (!i < !kk) do
    try
  res := (Z.mul (!res) ((Z.of_int ((n - !i)))));
  i := (!i + 1);
  res := (Z.div (!res) ((Z.of_int (!i))));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : Z.t); raise Return
  with Return -> !__ret)

and coeff p j =
  let __ret = ref (Q.of_int 0) in
  (try
  let p = (Obj.magic p : int) in
  let j = (Obj.magic j : int) in
  let base = (Q.div ((Q.of_int (1))) ((Q.of_int ((p + 1))))) in
  let c = ref (base) in
  if ((j mod 2) = 1) then (
  c := (Q.neg (!c));
  );
  c := (Q.mul (!c) ((Q.of_bigint (binom ((p + 1)) (j)))));
  c := (Q.mul (!c) (bernoulli (j)));
  __ret := (Obj.magic (!c) : Q.t); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let p = ref (0) in
  (try while (!p < 10) do
    try
  let line = ref (((string_of_int (!p)) ^ " :")) in
  let j = ref (0) in
  (try while (!j <= !p) do
    try
  let c = coeff (!p) (!j) in
  if ((Q.to_string (c)) <> "0/1") then (
  line := (((!line ^ " ") ^ (Q.to_string (c))) ^ "Ã—n");
  let exp = ((!p + 1) - !j) in
  if (exp > 1) then (
  line := ((!line ^ "^") ^ (string_of_int (exp)));
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()