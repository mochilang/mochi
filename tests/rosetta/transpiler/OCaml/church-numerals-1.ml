(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec zero f =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun x ->
  __ret := (Obj.magic (x) : Obj.t -> Obj.t); raise Return
  x)) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and succ c =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic ((fun x ->
  __ret := (Obj.magic (f ((c (f) (Obj.repr (x))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  f ((c (f) (Obj.repr (x)))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (fun x ->
  __ret := (Obj.magic (f ((c (f) (Obj.repr (x))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  f ((c (f) (Obj.repr (x))))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and add c d =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic ((fun x ->
  __ret := (Obj.magic ((c (f) ((d (f) (Obj.repr (x)))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (c (f) ((d (f) (Obj.repr (x))))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (fun x ->
  __ret := (Obj.magic ((c (f) ((d (f) (Obj.repr (x)))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (c (f) ((d (f) (Obj.repr (x)))))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and mul c d =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic ((fun x ->
  __ret := (Obj.magic ((c (d (f)) (Obj.repr (x)))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (c (d (f)) (Obj.repr (x))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (fun x ->
  __ret := (Obj.magic ((c (d (f)) (Obj.repr (x)))) : Obj.t -> Obj.t -> Obj.t); raise Return
  (c (d (f)) (Obj.repr (x)))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and pow c d =
  let __ret = ref (Obj.magic 0) in
  (try
  let di = ref (toInt (d)) in
  let prod = ref (c) in
  let i = ref (1) in
  (try while (!i < !di) do
    try
  prod := mul (!prod) (c);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!prod) : Obj.t -> Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and incr i =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := ((Obj.magic i : int) + 1); raise Return
  with Return -> !__ret)

and toInt c =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic ((Obj.magic (c (incr) (Obj.repr (0))) : int)) : int); raise Return
  with Return -> !__ret)

and intToChurch i =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  if (i = 0) then (
  __ret := (Obj.magic (zero) : Obj.t -> Obj.t -> Obj.t); raise Return
  );
  __ret := (Obj.magic (succ (intToChurch (Obj.repr ((i - 1))))) : Obj.t -> Obj.t -> Obj.t); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let z = zero in
  let three = succ (succ (succ (z))) in
  let four = succ (three) in
  print_endline (("three        -> " ^ (string_of_int (toInt (three)))));
  print_endline (("four         -> " ^ (string_of_int (toInt (four)))));
  print_endline (("three + four -> " ^ (string_of_int (toInt (add (three) (four))))));
  print_endline (("three * four -> " ^ (string_of_int (toInt (mul (three) (four))))));
  print_endline (("three ^ four -> " ^ (string_of_int (toInt (Float.pow (three) (four))))));
  print_endline (("four ^ three -> " ^ (string_of_int (toInt (Float.pow (four) (three))))));
  print_endline (("5 -> five    -> " ^ (string_of_int (toInt (intToChurch (Obj.repr (5)))))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()