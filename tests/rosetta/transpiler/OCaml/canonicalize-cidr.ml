(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec split s sep =
  let __ret = ref ([] : string list) in
  (try
  let parts = ref (([] : string list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (((String.length (sep) > 0) && ((!i + String.length (sep)) <= String.length (s))) && (String.sub (s) !i ((!i + String.length (sep)) - !i) = sep)) then (
  parts := (List.append !parts [(Obj.magic (!cur) : string)]);
  cur := "";
  i := (!i + String.length (sep));
  ) else (
  cur := (!cur ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  parts := (List.append !parts [(Obj.magic (!cur) : string)]);
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

let rec join xs sep =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

let rec repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  out := (!out ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec parseIntStr str =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + (try List.assoc (String.sub (str) !i ((!i + 1) - !i)) !digits with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

let rec toBinary n bits =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let bits = (Obj.magic bits : int) in
  let b = ref ("") in
  let val_ = ref (n) in
  let i = ref (0) in
  (try while (!i < bits) do
    try
  b := ((string_of_int ((!val_ mod 2))) ^ !b);
  val_ := (!val_ / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!b) : string); raise Return
  with Return -> !__ret)

let rec binToInt bits =
  let __ret = ref 0 in
  (try
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  n := ((!n * 2) + parseIntStr (String.sub (bits) !i ((!i + 1) - !i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

let rec padRight s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let out = ref (s) in
  (try while (String.length (!out) < width) do
    try
  out := (!out ^ " ");
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec canonicalize cidr =
  let __ret = ref "" in
  (try
  let parts = ref (split (cidr) ("/")) in
  let dotted = List.nth (!parts) (0) in
  let size = parseIntStr (List.nth (!parts) (1)) in
  let binParts = ref (([] : string list)) in
  (try List.iter (fun p ->
    try
  binParts := (List.append !binParts [(Obj.magic (toBinary (parseIntStr (p)) (8)) : string)]);
    with Continue -> ()) split (dotted) (".") with Break -> ());
  let binary = ref (join (!binParts) ("")) in
  binary := (String.sub (!binary) 0 (size - 0) ^ repeat ("0") ((32 - size)));
  let canonParts = ref (([] : string list)) in
  let i = ref (0) in
  (try while (!i < String.length (!binary)) do
    try
  canonParts := (List.append !canonParts [(Obj.magic ((string_of_int (binToInt (String.sub (!binary) !i ((!i + 8) - !i))))) : string)]);
  i := (!i + 8);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((join (!canonParts) (".") ^ "/") ^ List.nth (!parts) (1))) : string); raise Return
  with Return -> !__ret)

let tests = ref (["87.70.141.1/22"; "36.18.154.103/12"; "62.62.197.11/29"; "67.137.119.181/4"; "161.214.74.21/24"; "184.232.176.184/18"])
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun t ->
    try
  print_endline (((padRight (t) (18) ^ " -> ") ^ canonicalize (t)));
    with Continue -> ()) !tests with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
