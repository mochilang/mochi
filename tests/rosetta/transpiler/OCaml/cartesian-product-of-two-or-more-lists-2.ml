(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec listStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec llStr lst =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  s := (!s ^ listStr (List.nth (lst) (!i)));
  if (!i < (List.length (lst) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec cartN lists =
  let __ret = ref ([] : int list list) in
  (try
  if (lists = nil) then (
  __ret := (Obj.magic ([]) : int list list); raise Return
  );
  let a = ref (lists) in
  if (List.length (!a) = 0) then (
  __ret := (Obj.magic ([[]]) : int list list); raise Return
  );
  let c = ref (1) in
  (try List.iter (fun xs ->
    try
  c := (!c * List.length (xs));
    with Continue -> ()) !a with Break -> ());
  if (!c = 0) then (
  __ret := (Obj.magic ([]) : int list list); raise Return
  );
  let res = ref (([] : int list list)) in
  let idx = ref (([] : int list)) in
  (try List.iter (fun _ ->
    try
  idx := (List.append !idx [(Obj.magic (0) : int)]);
    with Continue -> ()) !a with Break -> ());
  let n = ref (List.length (!a)) in
  let count = ref (0) in
  (try while (!count < !c) do
    try
  let row = ref (([] : int list)) in
  let j = ref (0) in
  (try while (!j < !n) do
    try
  row := (List.append !row [(Obj.magic (List.nth (List.nth (!a) (!j)) (List.nth (!idx) (!j))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append !res [(Obj.magic (!row) : int list)]);
  let k = ref ((!n - 1)) in
  (try while (!k >= 0) do
    try
  idx := (List.mapi (fun __i __x -> if __i = !k then (List.nth (!idx) (!k) + 1) else __x) (!idx));
  if (List.nth (!idx) (!k) < List.length (List.nth (!a) (!k))) then (
  raise Break;
  );
  idx := (List.mapi (fun __i __x -> if __i = !k then 0 else __x) (!idx));
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([[1; 2]; [3; 4]]))));
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([[3; 4]; [1; 2]]))));
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([Obj.repr ([1; 2]); Obj.repr ([])]))));
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([Obj.repr ([]); Obj.repr ([1; 2])]))));
  print_endline ("");
  print_endline ("[");
  (try List.iter (fun p ->
    try
  print_endline ((" " ^ listStr (p)));
    with Continue -> ()) cartN (List.map (fun v -> Obj.repr v) ([[1776; 1789]; [7; 12]; [4; 14; 23]; [0; 1]])) with Break -> ());
  print_endline ("]");
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([[1; 2; 3]; [30]; [500; 100]]))));
  print_endline (llStr (cartN (List.map (fun v -> Obj.repr v) ([Obj.repr ([1; 2; 3]); Obj.repr ([]); Obj.repr ([500; 100])]))));
  print_endline ("");
  print_endline (llStr (cartN (nil)));
  print_endline (llStr (cartN ([])));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
