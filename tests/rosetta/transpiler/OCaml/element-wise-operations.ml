(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:48 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let r = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  r := (!r *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and powf base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : float) in
  if (exp = 0.5) then (
  let guess = ref (base) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (base /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  );
  let result = ref (1.0) in
  let n = ref (int_of_float (exp)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and formatFloat f prec =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : float) in
  let prec = (Obj.magic prec : int) in
  let scale = pow10 (Obj.repr (prec)) in
  let scaled = ((f *. scale) +. 0.5) in
  let n = ref ((Obj.magic scaled : int)) in
  let digits = ref ((string_of_int (!n))) in
  (try while (String.length (!digits) <= prec) do
    try
  digits := ("0" ^ !digits);
    with Continue -> ()
  done with Break -> ());
  let intPart = String.sub (!digits) 0 ((String.length (!digits) - prec) - 0) in
  let fracPart = String.sub (!digits) (String.length (!digits) - prec) (String.length (!digits) - (String.length (!digits) - prec)) in
  __ret := (Obj.magic (((intPart ^ ".") ^ fracPart)) : string); raise Return
  with Return -> !__ret)

and padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

and rowString row =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (row)) do
    try
  s := (!s ^ padLeft (formatFloat (Obj.repr (List.nth (row) (!i))) (Obj.repr (3))) (Obj.repr (6)));
  if (!i < (List.length (row) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "] ")) : string); raise Return
  with Return -> !__ret)

and printMatrix heading m =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (__show heading);
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  print_endline (rowString (List.nth (m) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and elementWiseMM m1 m2 f =
  let __ret = ref ([] : float list list) in
  (try
  let z = ref (([] : float list list)) in
  let r = ref (0) in
  (try while (!r < List.length (m1)) do
    try
  let row = ref (([] : float list)) in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (m1) (!r))) do
    try
  row := (List.append (!row) [(Obj.magic (f (Obj.repr (List.nth (List.nth (m1) (!r)) (!c))) (Obj.repr (List.nth (List.nth (m2) (!r)) (!c)))) : float)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  z := (List.append (!z) [(Obj.magic (!row) : float list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!z) : float list list); raise Return
  with Return -> !__ret)

and elementWiseMS m s f =
  let __ret = ref ([] : float list list) in
  (try
  let s = (Obj.magic s : float) in
  let z = ref (([] : float list list)) in
  let r = ref (0) in
  (try while (!r < List.length (m)) do
    try
  let row = ref (([] : float list)) in
  let c = ref (0) in
  (try while (!c < List.length (List.nth (m) (!r))) do
    try
  row := (List.append (!row) [(Obj.magic (f (Obj.repr (List.nth (List.nth (m) (!r)) (!c))) (Obj.repr (s))) : float)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  z := (List.append (!z) [(Obj.magic (!row) : float list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!z) : float list list); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic ((a +. b)) : float); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic ((a -. b)) : float); raise Return
  with Return -> !__ret)

and mul a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic ((a *. b)) : float); raise Return
  with Return -> !__ret)

and div a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic ((a /. b)) : float); raise Return
  with Return -> !__ret)

and exp a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  __ret := (Obj.magic (powf (Obj.repr (a)) (Obj.repr (b))) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let m1 = ref ([[3.0; 1.0; 4.0]; [1.0; 5.0; 9.0]]) in
  let m2 = ref ([[2.0; 7.0; 1.0]; [8.0; 2.0; 8.0]]) in
  ignore (printMatrix ("m1:") (!m1));
  ignore (printMatrix ("m2:") (!m2));
  print_endline ("");
  ignore (printMatrix ("m1 + m2:") (elementWiseMM (!m1) (!m2) (add)));
  ignore (printMatrix ("m1 - m2:") (elementWiseMM (!m1) (!m2) (sub)));
  ignore (printMatrix ("m1 * m2:") (elementWiseMM (!m1) (!m2) (mul)));
  ignore (printMatrix ("m1 / m2:") (elementWiseMM (!m1) (!m2) (div)));
  ignore (printMatrix ("m1 ^ m2:") (elementWiseMM (!m1) (!m2) (exp)));
  print_endline ("");
  let s = 0.5 in
  print_endline (("s: " ^ (Printf.sprintf "%.16g" (s))));
  ignore (printMatrix ("m1 + s:") (elementWiseMS (!m1) (Obj.repr (s)) (add)));
  ignore (printMatrix ("m1 - s:") (elementWiseMS (!m1) (Obj.repr (s)) (sub)));
  ignore (printMatrix ("m1 * s:") (elementWiseMS (!m1) (Obj.repr (s)) (mul)));
  ignore (printMatrix ("m1 / s:") (elementWiseMS (!m1) (Obj.repr (s)) (div)));
  ignore (printMatrix ("m1 ^ s:") (elementWiseMS (!m1) (Obj.repr (s)) (exp)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()