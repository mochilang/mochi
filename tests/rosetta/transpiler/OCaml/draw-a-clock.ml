(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 exp =
  let __ret = ref 0 in
  (try
  let exp = (Obj.magic exp : int) in
  let r = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  r := (!r * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and bin n digits =
  let __ret = ref "" in
  (try
  n := (Obj.magic !n : int);
  let digits = (Obj.magic digits : int) in
  let s = ref ("") in
  let i = ref ((digits - 1)) in
  (try while (!i >= 0) do
    try
  let p = pow2 (Obj.repr (!i)) in
  if (!n >= p) then (
  s := (!s ^ "x");
  n := (!n - p);
  ) else (
  s := (!s ^ " ");
  );
  if (!i > 0) then (
  s := (!s ^ "|");
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let xs = ref ("")
let i = ref (0)
let out = ref ("")
let j = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  let t = (_now () / 1000000000) in
  let sec = (t mod 60) in
  let mins = (t / 60) in
  let min = (mins mod 60) in
  let hour = ((mins / 60) mod 24) in
  print_endline (bin (ref (hour)) (Obj.repr (8)));
  print_endline ("");
  print_endline (bin (ref (min)) (Obj.repr (8)));
  print_endline ("");
  (try while (!i < sec) do
    try
  xs := (!xs ^ "x");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!j < String.length (!xs)) do
    try
  out := (!out ^ String.sub (!xs) !j ((!j + 1) - !j));
  if ((((!j + 1) mod 5) = 0) && ((!j + 1) < String.length (!xs))) then (
  out := (!out ^ "|");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !out);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()