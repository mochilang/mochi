(* Generated by Mochi transpiler v0.10.40 on 2025-07-25 12:29 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow_big base exp =
  let __ret = ref (Obj.magic 0) in
  (try
  let result = ref (1) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := (!result * !b);
  );
  b := (!b * !b);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := !result; raise Return
  with Return -> !__ret)

let rec bit_len x =
  let __ret = ref 0 in
  (try
  let n = ref (x) in
  let c = ref (0) in
  (try while (!n > 0) do
    try
  n := (!n / 2);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !c; raise Return
  with Return -> !__ret)

let err = ref ("")
let rec ackermann2 m n =
  let __ret = ref (Obj.magic 0) in
  (try
  if (!err <> "") then (
  __ret := 0; raise Return
  );
  if (m <= 3) then (
  let mi = m in
  if (mi = 0) then (
  __ret := (n + 1); raise Return
  );
  if (mi = 1) then (
  __ret := (n + 2); raise Return
  );
  if (mi = 2) then (
  __ret := ((2 * n) + 3); raise Return
  );
  if (mi = 3) then (
  let nb = bit_len (n) in
  if (nb > 64) then (
  err := (("A(m,n) had n of " ^ (string_of_int (nb))) ^ " bits; too large");
  __ret := 0; raise Return
  );
  let r = pow_big (2) (n) in
  __ret := ((8 * r) - 3); raise Return
  );
  );
  if (bit_len (n) = 0) then (
  __ret := ackermann2 ((m - 1)) (1); raise Return
  );
  __ret := ackermann2 ((m - 1)) (ackermann2 (m) ((n - 1))); raise Return
  with Return -> !__ret)

let rec show m n =
  let __ret = ref (Obj.magic 0) in
  (try
  err := "";
  let res = ackermann2 (m) (n) in
  if (!err <> "") then (
  print_endline (((((("A(" ^ (string_of_int (m))) ^ ", ") ^ (string_of_int (n))) ^ ") = Error: ") ^ !err));
  __ret := (); raise Return
  );
  if (bit_len (res) <= 256) then (
  print_endline (((((("A(" ^ (string_of_int (m))) ^ ", ") ^ (string_of_int (n))) ^ ") = ") ^ __show (res)));
  ) else (
  let s = __show (res) in
  let pre = String.sub (s) 0 (20 - 0) in
  let suf = String.sub (s) (String.length (s) - 20) (String.length (s) - (String.length (s) - 20)) in
  print_endline (((((((((("A(" ^ (string_of_int (m))) ^ ", ") ^ (string_of_int (n))) ^ ") = ") ^ (string_of_int (String.length (s)))) ^ " digits starting/ending with: ") ^ pre) ^ "...") ^ suf));
  );
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (show (0) (0));
  ignore (show (1) (2));
  ignore (show (2) (4));
  ignore (show (3) (100));
  ignore (show (3) (1000000));
  ignore (show (4) (1));
  ignore (show (4) (2));
  ignore (show (4) (3));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
