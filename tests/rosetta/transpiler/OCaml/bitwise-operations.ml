(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec toUnsigned16 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let u = ref (n) in
  if (!u < 0) then (
  u := (!u + 65536);
  );
  __ret := (Obj.magic ((!u mod 65536)) : int); raise Return
  with Return -> !__ret)

let rec bin16 n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let u = ref (toUnsigned16 (n)) in
  let bits = ref ("") in
  let mask = ref (32768) in
  (try for i = 0 to (16 - 1) do
    try
  if (!u >= !mask) then (
  bits := (!bits ^ "1");
  u := (!u - !mask);
  ) else (
  bits := (!bits ^ "0");
  );
  mask := (!mask / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!bits) : string); raise Return
  with Return -> !__ret)

let rec bit_and a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let ub = ref (toUnsigned16 (b)) in
  let res = ref (0) in
  let bit = ref (1) in
  (try for i = 0 to (16 - 1) do
    try
  if (((!ua mod 2) = 1) && ((!ub mod 2) = 1)) then (
  res := (!res + !bit);
  );
  ua := (!ua / 2);
  ub := (!ub / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

let rec bit_or a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let ub = ref (toUnsigned16 (b)) in
  let res = ref (0) in
  let bit = ref (1) in
  (try for i = 0 to (16 - 1) do
    try
  if (((!ua mod 2) = 1) || ((!ub mod 2) = 1)) then (
  res := (!res + !bit);
  );
  ua := (!ua / 2);
  ub := (!ub / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

let rec bit_xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let ub = ref (toUnsigned16 (b)) in
  let res = ref (0) in
  let bit = ref (1) in
  (try for i = 0 to (16 - 1) do
    try
  let abit = (!ua mod 2) in
  let bbit = (!ub mod 2) in
  if (((abit = 1) && (bbit = 0)) || ((abit = 0) && (bbit = 1))) then (
  res := (!res + !bit);
  );
  ua := (!ua / 2);
  ub := (!ub / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

let rec bit_not a =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let ua = ref (toUnsigned16 (a)) in
  __ret := (Obj.magic ((65535 - !ua)) : int); raise Return
  with Return -> !__ret)

let rec shl a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let i = ref (0) in
  (try while (!i < b) do
    try
  ua := ((!ua * 2) mod 65536);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ua) : int); raise Return
  with Return -> !__ret)

let rec shr a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let i = ref (0) in
  (try while (!i < b) do
    try
  ua := (!ua / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ua) : int); raise Return
  with Return -> !__ret)

let rec las a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic (shl (a) (b)) : int); raise Return
  with Return -> !__ret)

let rec ras a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let val_ = ref (a) in
  let i = ref (0) in
  (try while (!i < b) do
    try
  if (!val_ >= 0) then (
  val_ := (!val_ / 2);
  ) else (
  val_ := ((!val_ - 1) / 2);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (toUnsigned16 (!val_)) : int); raise Return
  with Return -> !__ret)

let rec rol a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let left = shl (!ua) (b) in
  let right = shr (!ua) ((16 - b)) in
  __ret := (Obj.magic (toUnsigned16 ((left + right))) : int); raise Return
  with Return -> !__ret)

let rec ror a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let ua = ref (toUnsigned16 (a)) in
  let right = shr (!ua) (b) in
  let left = shl (!ua) ((16 - b)) in
  __ret := (Obj.magic (toUnsigned16 ((left + right))) : int); raise Return
  with Return -> !__ret)

let rec bitwise a b =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  print_endline (("a:   " ^ bin16 (a)));
  print_endline (("b:   " ^ bin16 (b)));
  print_endline (("and: " ^ bin16 (bit_and (a) (b))));
  print_endline (("or:  " ^ bin16 (bit_or (a) (b))));
  print_endline (("xor: " ^ bin16 (bit_xor (a) (b))));
  print_endline (("not: " ^ bin16 (bit_not (a))));
  if (b < 0) then (
  print_endline ("Right operand is negative, but all shifts require an unsigned right operand (shift distance).");
  __ret := nil; raise Return
  );
  print_endline (("shl: " ^ bin16 (shl (a) (b))));
  print_endline (("shr: " ^ bin16 (shr (a) (b))));
  print_endline (("las: " ^ bin16 (las (a) (b))));
  print_endline (("ras: " ^ bin16 (ras (a) (b))));
  print_endline (("rol: " ^ bin16 (rol (a) (b))));
  print_endline (("ror: " ^ bin16 (ror (a) (b))));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (bitwise (-(460)) (6));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
