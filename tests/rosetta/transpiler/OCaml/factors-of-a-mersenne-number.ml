(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let qlimit = 50000
let rec powf base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let g = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  g := ((!g +. (x /. !g)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : float); raise Return
  with Return -> !__ret)

and modPow base exp mod_ =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let mod_ = (Obj.magic mod_ : int) in
  let result = ref ((1 mod mod_)) in
  let b = ref ((base mod mod_)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod mod_);
  );
  b := ((!b * !b) mod mod_);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and mtest m =
  let __ret = ref (Obj.magic 0) in
  (try
  let m = (Obj.magic m : int) in
  if (m < 4) then (
  print_endline (((((string_of_int (m)) ^ " < 4.  M") ^ (string_of_int (m))) ^ " not tested."));
  __ret := (); raise Return
  );
  let flimit = sqrtApprox (Obj.repr ((powf (Obj.repr (2.0)) (Obj.repr (m)) -. 1.0))) in
  let qlast = ref (0) in
  if (flimit < float_of_int (qlimit)) then (
  qlast := (Obj.magic flimit : int);
  ) else (
  qlast := qlimit;
  );
  let composite = ref (([] : bool list)) in
  let i = ref (0) in
  (try while (!i <= !qlast) do
    try
  composite := (List.append (!composite) [(Obj.magic (false) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sq = (Obj.magic sqrtApprox (Obj.repr (float_of_int (!qlast))) : int) in
  let q = ref (3) in
  (try while true do
    try
  if (!q <= sq) then (
  let j = ref ((!q * !q)) in
  (try while (!j <= !qlast) do
    try
  composite := (List.mapi (fun __i __x -> if __i = !j then true else __x) (!composite));
  j := (!j + !q);
    with Continue -> ()
  done with Break -> ());
  );
  let q8 = (!q mod 8) in
  if (((q8 = 1) || (q8 = 7)) && (modPow (Obj.repr (2)) (Obj.repr (m)) (Obj.repr (!q)) = 1)) then (
  print_endline (((("M" ^ (string_of_int (m))) ^ " has factor ") ^ (string_of_int (!q))));
  __ret := (); raise Return
  );
  (try while true do
    try
  q := (!q + 2);
  if (!q > !qlast) then (
  print_endline ((("No factors of M" ^ (string_of_int (m))) ^ " found."));
  __ret := (); raise Return
  );
  if not (List.nth (!composite) (!q)) then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (mtest (Obj.repr (31)));
  ignore (mtest (Obj.repr (67)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()