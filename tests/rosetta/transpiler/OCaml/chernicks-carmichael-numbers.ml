(* Generated by Mochi transpiler v0.10.42 on 2025-07-28 08:10 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic ((n = 3)) : bool); raise Return
  );
  let d = ref (5) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 4);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let rec bigTrim a =
  let __ret = ref ([] : int list) in
  (try
  let n = ref (List.length !a) in
  (try while ((!n > 1) && (List.nth (!a) ((!n - 1)) = 0)) do
    try
  a := List.of_seq (Seq.take ((!n - 1) - 0) (Seq.drop 0 (List.to_seq !a)));
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

let rec bigFromInt x =
  let __ret = ref ([] : int list) in
  (try
  let x = (Obj.magic x : int) in
  if (x = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  let digits = ref (([] : int list)) in
  let n = ref (x) in
  (try while (!n > 0) do
    try
  digits := (List.append !digits [(Obj.magic ((!n mod 10)) : int)]);
  n := (!n / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!digits) : int list); raise Return
  with Return -> !__ret)

let rec bigMulSmall a m =
  let __ret = ref ([] : int list) in
  (try
  let m = (Obj.magic m : int) in
  if (m = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  let res = ref (([] : int list)) in
  let carry = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length a) do
    try
  let prod = ref (((List.nth (a) (!i) * m) + !carry)) in
  res := (List.append !res [(Obj.magic ((!prod mod 10)) : int)]);
  carry := (!prod / 10);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!carry > 0) do
    try
  res := (List.append !res [(Obj.magic ((!carry mod 10)) : int)]);
  carry := (!carry / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigToString a =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref ((List.length a - 1)) in
  (try while (!i >= 0) do
    try
  s := (!s ^ (string_of_int (List.nth (a) (!i))));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec pow2 k =
  let __ret = ref 0 in
  (try
  let k = (Obj.magic k : int) in
  let r = ref (1) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  r := (!r * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

let rec ccFactors n m =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let m = (Obj.magic m : int) in
  let p = ref (((6 * m) + 1)) in
  if not (isPrime (!p)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let prod = ref (bigFromInt (!p)) in
  p := ((12 * m) + 1);
  if not (isPrime (!p)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  prod := bigMulSmall (!prod) (!p);
  let i = ref (1) in
  (try while (!i <= (n - 2)) do
    try
  p := (((pow2 (!i) * 9) * m) + 1);
  if not (isPrime (!p)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  prod := bigMulSmall (!prod) (!p);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!prod) : int list); raise Return
  with Return -> !__ret)

let rec ccNumbers start end_ =
  let __ret = ref (Obj.magic 0) in
  (try
  let start = (Obj.magic start : int) in
  let end_ = (Obj.magic end_ : int) in
  let n = ref (start) in
  (try while (!n <= end_) do
    try
  let m = ref (1) in
  if (!n > 4) then (
  m := pow2 ((!n - 4));
  );
  (try while true do
    try
  let num = ref (ccFactors (!n) (!m)) in
  if (List.length !num > 0) then (
  print_endline (((("a(" ^ (string_of_int (!n))) ^ ") = ") ^ bigToString (!num)));
  raise Break;
  );
  if (!n <= 4) then (
  m := (!m + 1);
  ) else (
  m := (!m + pow2 ((!n - 4)));
  );
    with Continue -> ()
  done with Break -> ());
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (ccNumbers (3) (9));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
