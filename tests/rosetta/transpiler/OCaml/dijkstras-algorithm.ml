(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 17:44 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let graph = ref ([])
let rec addEdge u v w =
  let __ret = ref (Obj.magic 0) in
  (try
  let w = (Obj.magic w : int) in
  if not ((List.mem_assoc u !graph)) then (
  graph := ((u, Obj.repr ([])) :: List.remove_assoc (u) (Obj.magic (!graph) : (string * Obj.t) list));
  );
  graph := ((u, Obj.repr (((v, w) :: List.remove_assoc (v) (Obj.obj (List.assoc (u) !graph) : (string * int) list)))) :: List.remove_assoc (u) (Obj.magic (!graph) : (string * Obj.t) list));
  if not ((List.mem_assoc v !graph)) then (
  graph := ((v, Obj.repr ([])) :: List.remove_assoc (v) (Obj.magic (!graph) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)

and removeAt xs idx =
  let __ret = ref ([] : string list) in
  (try
  let idx = (Obj.magic idx : int) in
  let out = ref (([] : string list)) in
  let i = ref (0) in
  (try List.iter (fun x ->
    try
  if (!i <> idx) then (
  out := (List.append (!out) [(Obj.magic (x) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)

and dijkstra source =
  let __ret = ref [] in
  (try
  let dist = ref ([]) in
  let prev = ref ([]) in
  (try List.iter (fun (v, _) ->
    try
  dist := ((v, _inf) :: List.remove_assoc (v) !dist);
  prev := ((v, "") :: List.remove_assoc (v) !prev);
    with Continue -> ()) (!graph) with Break -> ());
  dist := ((source, 0) :: List.remove_assoc (source) !dist);
  let q = ref (([] : string list)) in
  (try List.iter (fun (v, _) ->
    try
  q := (List.append (!q) [(Obj.magic (v) : string)]);
    with Continue -> ()) (!graph) with Break -> ());
  (try while (List.length (!q) > 0) do
    try
  let bestIdx = ref (0) in
  let u = ref (List.nth (!q) (0)) in
  let i = ref (1) in
  (try while (!i < List.length (!q)) do
    try
  let v = List.nth (!q) (!i) in
  if ((try List.assoc (v) !dist with Not_found -> 0) < (try List.assoc (!u) !dist with Not_found -> 0)) then (
  u := v;
  bestIdx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  q := removeAt (!q) (Obj.repr (!bestIdx));
  (try List.iter (fun (v, _) ->
    try
  let alt = ((try List.assoc (!u) !dist with Not_found -> 0) + (try List.assoc (v) (Obj.obj (List.assoc (!u) !graph) : (string * int) list) with Not_found -> 0)) in
  if (alt < (try List.assoc (v) !dist with Not_found -> 0)) then (
  dist := ((v, alt) :: List.remove_assoc (v) !dist);
  prev := ((v, !u) :: List.remove_assoc (v) !prev);
  );
    with Continue -> ()) ((Obj.obj (List.assoc (!u) !graph) : (string * int) list)) with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("dist", Obj.repr (!dist)); ("prev", Obj.repr (!prev))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and path prev v =
  let __ret = ref "" in
  (try
  let s = ref (v) in
  let cur = ref (v) in
  (try while ((try List.assoc (!cur) prev with Not_found -> "") <> "") do
    try
  cur := (try List.assoc (!cur) prev with Not_found -> "");
  s := (!cur ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (addEdge ("a") ("b") (Obj.repr (7)));
  ignore (addEdge ("a") ("c") (Obj.repr (9)));
  ignore (addEdge ("a") ("f") (Obj.repr (14)));
  ignore (addEdge ("b") ("c") (Obj.repr (10)));
  ignore (addEdge ("b") ("d") (Obj.repr (15)));
  ignore (addEdge ("c") ("d") (Obj.repr (11)));
  ignore (addEdge ("c") ("f") (Obj.repr (2)));
  ignore (addEdge ("d") ("e") (Obj.repr (6)));
  ignore (addEdge ("e") ("f") (Obj.repr (9)));
  let res = ref (dijkstra ("a")) in
  let dist = ref ((Obj.magic (Obj.obj (List.assoc ("dist") !res) : Obj.t) : (string * int) list)) in
  let prev = ref ((Obj.magic (Obj.obj (List.assoc ("prev") !res) : Obj.t) : (string * string) list)) in
  print_endline (((("Distance to e: " ^ (string_of_int ((try List.assoc ("e") !dist with Not_found -> 0)))) ^ ", Path: ") ^ path (!prev) ("e")));
  print_endline (((("Distance to f: " ^ (string_of_int ((try List.assoc ("f") !dist with Not_found -> 0)))) ^ ", Path: ") ^ path (!prev) ("f")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()