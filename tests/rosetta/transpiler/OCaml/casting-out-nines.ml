(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 21:30 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let testCases = ref ([[("base", Obj.repr (10)); ("begin", Obj.repr ("1")); ("end", Obj.repr ("100")); ("kaprekar", Obj.repr (["1"; "9"; "45"; "55"; "99"]))]; [("base", Obj.repr (17)); ("begin", Obj.repr ("10")); ("end", Obj.repr ("gg")); ("kaprekar", Obj.repr (["3d"; "d4"; "gg"]))]])
let idx = ref (0)
let rec parseIntBase s base =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let digits = "0123456789abcdefghijklmnopqrstuvwxyz" in
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let j = ref (0) in
  let v = ref (0) in
  (try while (!j < String.length (digits)) do
    try
  if (String.sub (digits) !j ((!j + 1) - !j) = String.sub (s) !i ((!i + 1) - !i)) then (
  v := !j;
  raise Break;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  n := ((!n * base) + !v);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and intToBase n base =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let base = (Obj.magic base : int) in
  let digits = "0123456789abcdefghijklmnopqrstuvwxyz" in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let out = ref ("") in
  let v = ref (n) in
  (try while (!v > 0) do
    try
  let d = (!v mod base) in
  out := (String.sub (digits) d ((d + 1) - d) ^ !out);
  v := (!v / base);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and subset base begin_ end_ =
  let __ret = ref ([] : string list) in
  (try
  let base = (Obj.magic base : int) in
  let b = ref (parseIntBase (begin_) (Obj.repr (base))) in
  let e = ref (parseIntBase (end_) (Obj.repr (base))) in
  let out = ref (([] : string list)) in
  let k = ref (!b) in
  (try while (!k <= !e) do
    try
  let ks = intToBase (Obj.repr (!k)) (Obj.repr (base)) in
  let mod_ = (base - 1) in
  let r1 = (parseIntBase (ks) (Obj.repr (base)) mod mod_) in
  let r2 = ((parseIntBase (ks) (Obj.repr (base)) * parseIntBase (ks) (Obj.repr (base))) mod mod_) in
  if (r1 = r2) then (
  out := (List.append (!out) [(Obj.magic (ks) : string)]);
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!idx < List.length (!testCases)) do
    try
  let tc = ref (List.nth (!testCases) (!idx)) in
  print_endline ((((((("\nTest case base = " ^ (string_of_int ((Obj.obj (List.assoc ("base") !tc) : int)))) ^ ", begin = ") ^ (Obj.obj (List.assoc ("begin") !tc) : string)) ^ ", end = ") ^ (Obj.obj (List.assoc ("end") !tc) : string)) ^ ":"));
  let s = ref (subset (Obj.repr ((Obj.obj (List.assoc ("base") !tc) : int))) ((Obj.obj (List.assoc ("begin") !tc) : string)) ((Obj.obj (List.assoc ("end") !tc) : string))) in
  print_endline (("Subset:  " ^ __show (!s)));
  print_endline (("Kaprekar:" ^ __show ((Obj.obj (List.assoc ("kaprekar") !tc) : string list))));
  let sx = ref (0) in
  let valid = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc ("kaprekar") !tc) : string list))) do
    try
  let k = List.nth ((Obj.obj (List.assoc ("kaprekar") !tc) : string list)) (!i) in
  let found = ref (false) in
  (try while (!sx < List.length (!s)) do
    try
  if (List.nth (!s) (!sx) = k) then (
  found := true;
  sx := (!sx + 1);
  raise Break;
  );
  sx := (!sx + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  print_endline ((("Fail:" ^ k) ^ " not in subset"));
  valid := false;
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !valid then (
  print_endline ("Valid subset.");
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()