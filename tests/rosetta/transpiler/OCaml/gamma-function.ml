(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let k = ref (0.0) in
  let v = ref (x) in
  (try while (!v >= 2.0) do
    try
  v := (!v /. 2.0);
  k := (!k +. 1.0);
    with Continue -> ()
  done with Break -> ());
  (try while (!v < 1.0) do
    try
  v := (!v *. 2.0);
  k := (!k -. 1.0);
    with Continue -> ()
  done with Break -> ());
  let z = ((!v -. 1.0) /. (!v +. 1.0)) in
  let zpow = ref (z) in
  let sum = ref (z) in
  let i = ref (3) in
  (try while (!i <= 9) do
    try
  zpow := ((!zpow *. z) *. z);
  sum := (!sum +. (!zpow /. float_of_int (!i)));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let ln2 = 0.6931471805599453 in
  __ret := (Obj.magic (((!k *. ln2) +. (2.0 *. !sum))) : float); raise Return
  with Return -> !__ret)

and expf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let i = ref (1) in
  (try while (!i < 20) do
    try
  term := ((!term *. x) /. float_of_int (!i));
  sum := (!sum +. !term);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and powf base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : float) in
  __ret := (Obj.magic (expf (Obj.repr ((exp *. ln (Obj.repr (base)))))) : float); raise Return
  with Return -> !__ret)

and lanczos7 z =
  let __ret = ref 0.0 in
  (try
  let z = (Obj.magic z : float) in
  let t = (z +. 6.5) in
  let x = ((((((((0.9999999999998099 +. (676.5203681218851 /. z)) -. (1259.1392167224028 /. (z +. 1.0))) +. (771.3234287776531 /. (z +. 2.0))) -. (176.6150291621406 /. (z +. 3.0))) +. (12.507343278686905 /. (z +. 4.0))) -. (0.13857109526572012 /. (z +. 5.0))) +. (0.000009984369578019572 /. (z +. 6.0))) +. (0.00000015056327351493116 /. (z +. 7.0))) in
  __ret := (Obj.magic ((((2.5066282746310002 *. powf (Obj.repr (t)) (Obj.repr ((z -. 0.5)))) *. powf (Obj.repr (2.718281828459045)) (Obj.repr ((-.(t))))) *. x)) : float); raise Return
  with Return -> !__ret)


let xs = ref ([(-.(0.5)); 0.1; 0.5; 1.0; 1.5; 2.0; 3.0; 10.0; 140.0; 170.0])
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun x ->
    try
  print_endline ((((Printf.sprintf "%.16g" (x)) ^ " ") ^ (Printf.sprintf "%.16g" (lanczos7 (Obj.repr (x))))));
    with Continue -> ()) (!xs) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()