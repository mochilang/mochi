(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 16:58 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec step n program =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (program)) do
    try
  let num = List.nth (List.nth (program) (!i)) (0) in
  let den = List.nth (List.nth (program) (!i)) (1) in
  if ((Z.rem (!n) (den)) = (Z.of_int (0))) then (
  n := (Z.mul ((Z.div (!n) (den))) (num));
  __ret := (Obj.magic ([("n", Obj.repr (!n)); ("ok", Obj.repr (true))]) : (string * Obj.t) list); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("n", Obj.repr (!n)); ("ok", Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let program = ref ([[(Z.of_int (17)); (Z.of_int (91))]; [(Z.of_int (78)); (Z.of_int (85))]; [(Z.of_int (19)); (Z.of_int (51))]; [(Z.of_int (23)); (Z.of_int (38))]; [(Z.of_int (29)); (Z.of_int (33))]; [(Z.of_int (77)); (Z.of_int (29))]; [(Z.of_int (95)); (Z.of_int (23))]; [(Z.of_int (77)); (Z.of_int (19))]; [(Z.of_int (1)); (Z.of_int (17))]; [(Z.of_int (11)); (Z.of_int (13))]; [(Z.of_int (13)); (Z.of_int (11))]; [(Z.of_int (15)); (Z.of_int (14))]; [(Z.of_int (15)); (Z.of_int (2))]; [(Z.of_int (55)); (Z.of_int (1))]]) in
  let n = ref ((Z.of_int (2))) in
  let primes = ref (0) in
  let count = ref (0) in
  let limit = 1000000 in
  let two = (Z.of_int (2)) in
  let line = ref ("") in
  (try while ((!primes < 20) && (!count < limit)) do
    try
  let res = step (n) (!program) in
  n := (Obj.obj (List.assoc ("n") (res) : Obj.t) : Z.t);
  if not ((Obj.obj (List.assoc ("ok") (res) : Obj.t) : bool)) then (
  raise Break;
  );
  let m = ref (!n) in
  let pow = ref (0) in
  (try while ((Z.rem (!m) (two)) = (Z.of_int (0))) do
    try
  m := (Z.div (!m) (two));
  pow := (!pow + 1);
    with Continue -> ()
  done with Break -> ());
  if ((!m = (Z.of_int (1))) && (!pow > 1)) then (
  line := ((!line ^ (string_of_int (!pow))) ^ " ");
  primes := (!primes + 1);
  );
  count := (!count + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!line) > 0) then (
  print_endline (String.sub !line (0) ((String.length (!line) - 1) - 0));
  ) else (
  print_endline ("");
  );
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()