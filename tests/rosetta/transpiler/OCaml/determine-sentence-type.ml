(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:04 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and join xs sep =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and sentenceType s =
  let __ret = ref "" in
  (try
  if (String.length (s) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let types = ref (([] : string list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (ch = "?") then (
  types := (List.append (!types) [(Obj.magic ("Q") : string)]);
  ) else (
  if (ch = "!") then (
  types := (List.append (!types) [(Obj.magic ("E") : string)]);
  ) else (
  if (ch = ".") then (
  types := (List.append (!types) [(Obj.magic ("S") : string)]);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let last = String.sub (s) (String.length (s) - 1) (String.length (s) - (String.length (s) - 1)) in
  if ((try String.index ("?!.") (String.get (last) 0) with Not_found -> -1) = -(1)) then (
  types := (List.append (!types) [(Obj.magic ("N") : string)]);
  );
  __ret := (Obj.magic (join (!types) ("|")) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let s = ref ("hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it") in
  let result = ref (sentenceType (!s)) in
  print_endline (__show !result);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()