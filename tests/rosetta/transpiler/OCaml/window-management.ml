(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec showState w label =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (((((((((((((((label ^ ": pos=(") ^ (string_of_int ((Obj.obj (List.assoc ("x") (w) : Obj.t) : int)))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc ("y") (w) : Obj.t) : int)))) ^ ") size=(") ^ (string_of_int ((Obj.obj (List.assoc ("w") (w) : Obj.t) : int)))) ^ "x") ^ (string_of_int ((Obj.obj (List.assoc ("h") (w) : Obj.t) : int)))) ^ ") max=") ^ __show ((Obj.obj (List.assoc ("maximized") (w) : Obj.t) : bool))) ^ " icon=") ^ __show ((Obj.obj (List.assoc ("iconified") (w) : Obj.t) : bool))) ^ " visible=") ^ __show ((Obj.obj (List.assoc ("visible") (w) : Obj.t) : bool))));
    !__ret
  with Return -> !__ret)

and maximize w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("maximized", Obj.repr (true)) :: List.remove_assoc ("maximized") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("w", Obj.repr (800)) :: List.remove_assoc ("w") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("h", Obj.repr (600)) :: List.remove_assoc ("h") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and unmaximize w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("maximized", Obj.repr (false)) :: List.remove_assoc ("maximized") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("w", Obj.repr (640)) :: List.remove_assoc ("w") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("h", Obj.repr (480)) :: List.remove_assoc ("h") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and iconify w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("iconified", Obj.repr (true)) :: List.remove_assoc ("iconified") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("visible", Obj.repr (false)) :: List.remove_assoc ("visible") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and deiconify w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("iconified", Obj.repr (false)) :: List.remove_assoc ("iconified") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("visible", Obj.repr (true)) :: List.remove_assoc ("visible") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and hide w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("visible", Obj.repr (false)) :: List.remove_assoc ("visible") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and showWindow w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  w := (("visible", Obj.repr (true)) :: List.remove_assoc ("visible") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and move w =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (Obj.obj (List.assoc ("shifted") (!w) : Obj.t) : bool) then (
  w := (("x", Obj.repr (((Obj.obj (List.assoc ("x") (!w) : Obj.t) : int) - 10))) :: List.remove_assoc ("x") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("y", Obj.repr (((Obj.obj (List.assoc ("y") (!w) : Obj.t) : int) - 10))) :: List.remove_assoc ("y") (Obj.magic (!w) : (string * Obj.t) list));
  ) else (
  w := (("x", Obj.repr (((Obj.obj (List.assoc ("x") (!w) : Obj.t) : int) + 10))) :: List.remove_assoc ("x") (Obj.magic (!w) : (string * Obj.t) list));
  w := (("y", Obj.repr (((Obj.obj (List.assoc ("y") (!w) : Obj.t) : int) + 10))) :: List.remove_assoc ("y") (Obj.magic (!w) : (string * Obj.t) list));
  );
  w := (("shifted", Obj.repr (not ((Obj.obj (List.assoc ("shifted") (!w) : Obj.t) : bool)))) :: List.remove_assoc ("shifted") (Obj.magic (!w) : (string * Obj.t) list));
  __ret := (Obj.magic (!w) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let win = ref ([("x", Obj.repr (100)); ("y", Obj.repr (100)); ("w", Obj.repr (640)); ("h", Obj.repr (480)); ("maximized", Obj.repr (false)); ("iconified", Obj.repr (false)); ("visible", Obj.repr (true)); ("shifted", Obj.repr (false))]) in
  ignore (showState (!win) ("Start"));
  win := maximize (win);
  ignore (showState (!win) ("Maximize"));
  win := unmaximize (win);
  ignore (showState (!win) ("Unmaximize"));
  win := iconify (win);
  ignore (showState (!win) ("Iconify"));
  win := deiconify (win);
  ignore (showState (!win) ("Deiconify"));
  win := hide (win);
  ignore (showState (!win) ("Hide"));
  win := showWindow (win);
  ignore (showState (!win) ("Show"));
  win := move (win);
  ignore (showState (!win) ("Move"));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()