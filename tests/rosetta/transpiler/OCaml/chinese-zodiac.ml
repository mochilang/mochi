(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let animal = ref (["Rat"; "Ox"; "Tiger"; "Rabbit"; "Dragon"; "Snake"; "Horse"; "Goat"; "Monkey"; "Rooster"; "Dog"; "Pig"])
let yinYang = ref (["Yang"; "Yin"])
let element = ref (["Wood"; "Fire"; "Earth"; "Metal"; "Water"])
let stemChArr = ref (["甲"; "乙"; "丙"; "丁"; "戊"; "己"; "庚"; "辛"; "壬"; "癸"])
let branchChArr = ref (["子"; "丑"; "寅"; "卯"; "辰"; "巳"; "午"; "未"; "申"; "酉"; "戌"; "亥"])
let rec cz yr animal yinYang element sc bc =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let yr = (Obj.magic yr : int) in
  let y = ref ((yr - 4)) in
  let stem = (!y mod 10) in
  let branch = (!y mod 12) in
  let sb = (List.nth (sc) (stem) ^ List.nth (bc) (branch)) in
  __ret := (Obj.magic ([("animal", Obj.repr (List.nth (animal) (branch))); ("yinYang", Obj.repr (List.nth (yinYang) ((stem mod 2)))); ("element", Obj.repr (List.nth (element) ((stem / 2)))); ("stemBranch", Obj.repr (sb)); ("cycle", Obj.repr (((!y mod 60) + 1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun yr ->
    try
  let r = cz (Obj.repr (yr)) (!animal) (!yinYang) (!element) (!stemChArr) (!branchChArr) in
  print_endline ((((((((((((string_of_int (yr)) ^ ": ") ^ (Obj.obj (List.assoc ("element") r) : string)) ^ " ") ^ (Obj.obj (List.assoc ("animal") r) : string)) ^ ", ") ^ (Obj.obj (List.assoc ("yinYang") r) : string)) ^ ", Cycle year ") ^ (string_of_int ((Obj.obj (List.assoc ("cycle") r) : int)))) ^ " ") ^ (Obj.obj (List.assoc ("stemBranch") r) : string)));
    with Continue -> ()) ([1935; 1938; 1968; 1972; 1976]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()