(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec log10floor n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (0) in
  let v = ref (n) in
  (try while (!v >= 10) do
    try
  v := (!v / 10);
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : int); raise Return
  with Return -> !__ret)

and commatize n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  if ((!i > 0) && (((String.length (!s) - !i) mod 3) = 0)) then (
  res := (!res ^ ",");
  );
  res := (!res ^ String.sub (!s) !i ((!i + 1) - !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and showDistribution sizes =
  let __ret = ref (Obj.magic 0) in
  (try
  let bins = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < 12) do
    try
  bins := (List.append (!bins) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total = ref (0) in
  (try List.iter (fun sz ->
    try
  total := (!total + sz);
  let idx = ref (0) in
  if (sz > 0) then (
  idx := (log10floor (Obj.repr (sz)) + 1);
  );
  bins := (List.mapi (fun __i __x -> if __i = !idx then (List.nth (!bins) (!idx) + 1) else __x) (!bins));
    with Continue -> ()) (sizes) with Break -> ());
  print_endline ("File size distribution:\n");
  i := 0;
  (try while (!i < List.length (!bins)) do
    try
  let prefix = ref ("  ") in
  if (!i > 0) then (
  prefix := "+ ";
  );
  print_endline (((((!prefix ^ "Files less than 10 ^ ") ^ (string_of_int (!i))) ^ " bytes : ") ^ (string_of_int (List.nth (!bins) (!i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("                                  -----");
  print_endline (("= Total number of files         : " ^ (string_of_int (List.length (sizes)))));
  print_endline ((("  Total size of files           : " ^ commatize (Obj.repr (!total))) ^ " bytes"));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let sizes = ref ([0; 1; 9; 10; 99; 100; 1234; 50000; 730000; 8200000]) in
  ignore (showDistribution (!sizes));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()