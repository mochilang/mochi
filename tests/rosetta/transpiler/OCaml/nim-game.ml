(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec parseIntStr str =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + List.assoc (String.sub (str) !i ((!i + 1) - !i)) (!digits));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and showTokens tokens =
  let __ret = ref (Obj.magic 0) in
  (try
  let tokens = (Obj.magic tokens : int) in
  print_endline (("Tokens remaining " ^ (string_of_int (tokens))));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tokens = ref (12) in
  let done_ = ref (false) in
  (try while not (!done_) do
    try
  ignore (showTokens (Obj.repr (!tokens)));
  print_endline ("");
  print_endline ("How many tokens 1, 2 or 3?");
  let line = (try read_line () with End_of_file -> "") in
  let t = ref (0) in
  if (String.length (line) > 0) then (
  t := parseIntStr (line);
  );
  if ((!t < 1) || (!t > 3)) then (
  print_endline ("\nMust be a number between 1 and 3, try again.\n");
  ) else (
  let ct = ref ((4 - !t)) in
  let s = ref ("s") in
  if (!ct = 1) then (
  s := "";
  );
  print_endline ((((("  Computer takes " ^ (string_of_int (!ct))) ^ " token") ^ !s) ^ "\n\n"));
  tokens := (!tokens - 4);
  );
  if (!tokens = 0) then (
  ignore (showTokens (Obj.repr (0)));
  print_endline ("  Computer wins!");
  done_ := true;
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()