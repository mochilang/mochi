(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref (1)
let rec prng max =
  let __ret = ref 0 in
  (try
  let max = (Obj.magic max : int) in
  seed := (((!seed * 1103515245) + 12345) mod 2147483648);
  __ret := (Obj.magic ((!seed mod max)) : int); raise Return
  with Return -> !__ret)

let rec gen n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let arr = ref ([]) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  arr := List.append !arr ["["];
  arr := List.append !arr ["]"];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref ((List.length (!arr) - 1)) in
  (try while (!j > 0) do
    try
  let k = prng ((!j + 1)) in
  let tmp = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) (k) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = k then tmp else __x) (!arr));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  let out = ref ("") in
  (try List.iter (fun ch ->
    try
  out := (!out ^ ch);
    with Continue -> ()) !arr with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec testBalanced s =
  let __ret = ref (Obj.magic 0) in
  (try
  let open_ = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.sub (s) !i ((!i + 1) - !i) in
  if (c = "[") then (
  open_ := (!open_ + 1);
  ) else (
  if (c = "]") then (
  if (!open_ = 0) then (
  print_endline ((s ^ ": not ok"));
  __ret := (); raise Return
  );
  open_ := (!open_ - 1);
  ) else (
  print_endline ((s ^ ": not ok"));
  __ret := (); raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!open_ = 0) then (
  print_endline ((s ^ ": ok"));
  ) else (
  print_endline ((s ^ ": not ok"));
  );
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < 10) do
    try
  ignore (testBalanced (gen (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (testBalanced ("()"));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
