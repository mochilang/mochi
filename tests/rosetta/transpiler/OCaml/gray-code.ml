(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let res = ref (0) in
  let bit = ref (1) in
  let x = ref (a) in
  let y = ref (b) in
  (try while ((!x > 0) || (!y > 0)) do
    try
  if ((((!x mod 2) + (!y mod 2)) mod 2) = 1) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and enc b =
  let __ret = ref 0 in
  (try
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic (xor (Obj.repr (b)) (Obj.repr ((b / 2)))) : int); raise Return
  with Return -> !__ret)

and dec g =
  let __ret = ref 0 in
  (try
  let g = (Obj.magic g : int) in
  let b = ref (0) in
  let x = ref (g) in
  (try while (!x > 0) do
    try
  b := xor (Obj.repr (!b)) (Obj.repr (!x));
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!b) : int); raise Return
  with Return -> !__ret)

and binary n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let s = ref ("") in
  let x = ref (n) in
  (try while (!x > 0) do
    try
  if ((!x mod 2) = 1) then (
  s := ("1" ^ !s);
  ) else (
  s := ("0" ^ !s);
  );
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and pad5 s =
  let __ret = ref "" in
  (try
  let p = ref (s) in
  (try while (String.length (!p) < 5) do
    try
  p := ("0" ^ !p);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("decimal  binary   gray    decoded");
  let b = ref (0) in
  (try while (!b < 32) do
    try
  let g = enc (Obj.repr (!b)) in
  let d = dec (Obj.repr (g)) in
  print_endline (((((((("  " ^ pad5 (binary (Obj.repr (!b)))) ^ "   ") ^ pad5 (binary (Obj.repr (g)))) ^ "   ") ^ pad5 (binary (Obj.repr (d)))) ^ "  ") ^ (string_of_int (d))));
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()