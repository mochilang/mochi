(* Generated by Mochi transpiler v0.10.42 on 2025-07-28 08:10 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec lower ch =
  let __ret = ref "" in
  (try
  let up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let low = "abcdefghijklmnopqrstuvwxyz" in
  let i = ref (0) in
  (try while (!i < String.length (up)) do
    try
  if (ch = String.sub (up) !i ((!i + 1) - !i)) then (
  __ret := (Obj.magic (String.sub (low) !i ((!i + 1) - !i)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (ch) : string); raise Return
  with Return -> !__ret)

let partList = ref (["A"; "B"; "C"; "D"])
let nAssemblies = ref (3)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun p ->
    try
  print_endline ((p ^ " worker running"));
    with Continue -> ()) !partList with Break -> ());
  (try for cycle = 1 to ((!nAssemblies + 1) - 1) do
    try
  print_endline (("begin assembly cycle " ^ (string_of_int (cycle))));
  let a = ref ("") in
  (try List.iter (fun p ->
    try
  print_endline ((p ^ " worker begins part"));
  print_endline (((p ^ " worker completed ") ^ String.lowercase_ascii (p)));
  a := (!a ^ String.lowercase_ascii (p));
    with Continue -> ()) !partList with Break -> ());
  print_endline ((((!a ^ " assembled.  cycle ") ^ (string_of_int (cycle))) ^ " complete"));
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun p ->
    try
  print_endline ((p ^ " worker stopped"));
    with Continue -> ()) !partList with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
