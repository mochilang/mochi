(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec multiplier n1 n2 =
  let __ret = ref (Obj.magic 0) in
  (try
  let n1 = (Obj.magic n1 : float) in
  let n2 = (Obj.magic n2 : float) in
  let n1n2 = (n1 *. n2) in
  __ret := (Obj.magic ((fun m ->
  let m = (Obj.magic m : float) in
  (n1n2 *. m))) : Obj.t -> float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = 2.0 in
  let xi = 0.5 in
  let y = 4.0 in
  let yi = 0.25 in
  let z = (x +. y) in
  let zi = (1.0 /. (x +. y)) in
  let numbers = ref ([x; y; z]) in
  let inverses = ref ([xi; yi; zi]) in
  let mfs = ref (([] : (Obj.t -> float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!numbers)) do
    try
  mfs := (List.append (!mfs) [(Obj.magic (multiplier (Obj.repr (List.nth (!numbers) (!i))) (Obj.repr (List.nth (!inverses) (!i)))) : Obj.t -> float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun mf ->
    try
  print_endline ((Printf.sprintf "%.16g" (mf (Obj.repr (1.0)))));
    with Continue -> ()) (!mfs) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()