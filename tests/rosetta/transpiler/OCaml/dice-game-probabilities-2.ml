(* Generated by Mochi transpiler v0.10.42 on 2025-07-28 03:13 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec roll nDice nSides =
  let __ret = ref 0 in
  (try
  let nDice = (Obj.magic nDice : int) in
  let nSides = (Obj.magic nSides : int) in
  let sum = ref (0) in
  let i = ref (0) in
  (try while (!i < nDice) do
    try
  sum := ((!sum + (_now () mod nSides)) + 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : int); raise Return
  with Return -> !__ret)

let rec beats n1 s1 n2 s2 trials =
  let __ret = ref 0.0 in
  (try
  let n1 = (Obj.magic n1 : int) in
  let s1 = (Obj.magic s1 : int) in
  let n2 = (Obj.magic n2 : int) in
  let s2 = (Obj.magic s2 : int) in
  let trials = (Obj.magic trials : int) in
  let wins = ref (0) in
  let i = ref (0) in
  (try while (!i < trials) do
    try
  if (roll (n1) (s1) > roll (n2) (s2)) then (
  wins := (!wins + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((float_of_int (!wins) /. float_of_int (trials))) : float); raise Return
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" (beats (9) (4) (6) (6) (1000))));
  print_endline ((Printf.sprintf "%.16g" (beats (5) (10) (7) (6) (1000))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
