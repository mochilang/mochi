(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sameDigits n b =
  let __ret = ref false in
  (try
  n := (Obj.magic !n : int);
  let b = (Obj.magic b : int) in
  let f = ref ((!n mod b)) in
  n := (!n / b);
  (try while (!n > 0) do
    try
  if ((!n mod b) <> !f) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  n := (!n / b);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let rec isBrazilian n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 7) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if (((n mod 2) = 0) && (n >= 8)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let b = ref (2) in
  (try while (!b < (n - 1)) do
    try
  if sameDigits (ref (n)) (!b) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic ((n = 3)) : bool); raise Return
  );
  let d = ref (5) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 4);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let kinds = ref ([" "; " odd "; " prime "]) in
  (try List.iter (fun kind ->
    try
  print_endline ((("First 20" ^ kind) ^ "Brazilian numbers:"));
  let c = ref (0) in
  let n = ref (7) in
  (try while true do
    try
  if isBrazilian (!n) then (
  print_endline (((string_of_int (!n)) ^ " "));
  c := (!c + 1);
  if (!c = 20) then (
  print_endline ("\n");
  raise Break;
  );
  );
  if (kind = " ") then (
  n := (!n + 1);
  ) else (
  if (kind = " odd ") then (
  n := (!n + 2);
  ) else (
  (try while true do
    try
  n := (!n + 2);
  if isPrime (!n) then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  );
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) !kinds with Break -> ());
  let n = ref (7) in
  let c = ref (0) in
  (try while (!c < 100000) do
    try
  if isBrazilian (!n) then (
  c := (!c + 1);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("The 100,000th Brazilian number: " ^ (string_of_int ((!n - 1)))));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
