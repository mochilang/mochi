(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 09:30 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec listStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if ((!i + 1) < List.length (xs)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let a = ref ([0; 0; 0; 0; 0])
let s = ref (List.of_seq (Seq.take (4 - 0) (Seq.drop 0 (List.to_seq !a))))
let cap_s = ref (5)
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("len(a) = " ^ (string_of_int (List.length (!a)))));
  print_endline (("a = " ^ listStr (!a)));
  a := (List.mapi (fun __i __x -> if __i = 0 then 3 else __x) (!a));
  print_endline (("a = " ^ listStr (!a)));
  print_endline (("a[0] = " ^ (string_of_int (List.nth (!a) (0)))));
  print_endline (("s = " ^ listStr (!s)));
  print_endline (((("len(s) = " ^ (string_of_int (List.length (!s)))) ^ "  cap(s) = ") ^ (string_of_int (!cap_s))));
  s := List.of_seq (Seq.take (5 - 0) (Seq.drop 0 (List.to_seq !a)));
  print_endline (("s = " ^ listStr (!s)));
  a := (List.mapi (fun __i __x -> if __i = 0 then 22 else __x) (!a));
  s := (List.mapi (fun __i __x -> if __i = 0 then 22 else __x) (!s));
  print_endline (("a = " ^ listStr (!a)));
  print_endline (("s = " ^ listStr (!s)));
  s := List.append !s [4];
  s := List.append !s [5];
  s := List.append !s [6];
  cap_s := 10;
  print_endline (("s = " ^ listStr (!s)));
  print_endline (((("len(s) = " ^ (string_of_int (List.length (!s)))) ^ "  cap(s) = ") ^ (string_of_int (!cap_s))));
  a := (List.mapi (fun __i __x -> if __i = 4 then -(1) else __x) (!a));
  print_endline (("a = " ^ listStr (!a)));
  print_endline (("s = " ^ listStr (!s)));
  s := [];
  (try for i = 0 to (8 - 1) do
    try
  s := List.append !s [0];
    with Continue -> ()
  done with Break -> ());
  cap_s := 8;
  print_endline (("s = " ^ listStr (!s)));
  print_endline (((("len(s) = " ^ (string_of_int (List.length (!s)))) ^ "  cap(s) = ") ^ (string_of_int (!cap_s))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
