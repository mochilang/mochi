(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:00 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec isNumeric s =
  let __ret = ref false in
  (try
  if (s = "NaN") then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let i = ref (0) in
  if (String.length (s) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((String.make 1 (String.get (s) 0) = "+") || (String.make 1 (String.get (s) 0) = "-")) then (
  if (String.length (s) = 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := 1;
  );
  let digits = ref (false) in
  let dot = ref (false) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.make 1 (String.get (s) !i) in
  if ((ch >= "0") && (ch <= "9")) then (
  digits := true;
  i := (!i + 1);
  ) else (
  if ((ch = ".") && (!dot = false)) then (
  dot := true;
  i := (!i + 1);
  ) else (
  if (((ch = "e") || (ch = "E")) && !digits) then (
  i := (!i + 1);
  if ((!i < String.length (s)) && ((String.make 1 (String.get (s) !i) = "+") || (String.make 1 (String.get (s) !i) = "-"))) then (
  i := (!i + 1);
  );
  let ed = ref (false) in
  (try while (((!i < String.length (s)) && (String.make 1 (String.get (s) !i) >= "0")) && (String.make 1 (String.get (s) !i) <= "9")) do
    try
  ed := true;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!ed && (!i = String.length (s)))) : bool); raise Return
  ) else (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!digits) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Are these strings numeric?");
  let strs = ref (["1"; "3.14"; "-100"; "1e2"; "NaN"; "rose"]) in
  (try List.iter (fun s ->
    try
  print_endline (((("  " ^ s) ^ " -> ") ^ __show (isNumeric (s))));
    with Continue -> ()) (!strs) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()