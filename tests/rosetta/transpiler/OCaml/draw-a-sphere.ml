(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and powf base exp =
  let __ret = ref 0.0 in
  (try
  let base = (Obj.magic base : float) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1.0) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result *. base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and normalize v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let len = sqrtApprox (Obj.repr (((((Obj.obj (List.assoc ("x") v) : float) *. (Obj.obj (List.assoc ("x") v) : float)) +. ((Obj.obj (List.assoc ("y") v) : float) *. (Obj.obj (List.assoc ("y") v) : float))) +. ((Obj.obj (List.assoc ("z") v) : float) *. (Obj.obj (List.assoc ("z") v) : float))))) in
  __ret := (Obj.magic ([("x", Obj.repr (((Obj.obj (List.assoc ("x") v) : float) /. len))); ("y", Obj.repr (((Obj.obj (List.assoc ("y") v) : float) /. len))); ("z", Obj.repr (((Obj.obj (List.assoc ("z") v) : float) /. len)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref 0.0 in
  (try
  let d = ((((Obj.obj (List.assoc ("x") a) : float) *. (Obj.obj (List.assoc ("x") b) : float)) +. ((Obj.obj (List.assoc ("y") a) : float) *. (Obj.obj (List.assoc ("y") b) : float))) +. ((Obj.obj (List.assoc ("z") a) : float) *. (Obj.obj (List.assoc ("z") b) : float))) in
  if (d < 0.0) then (
  __ret := (Obj.magic ((-.(d))) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

and drawSphere r k ambient light shades =
  let __ret = ref (Obj.magic 0) in
  (try
  let r = (Obj.magic r : int) in
  let k = (Obj.magic k : int) in
  let ambient = (Obj.magic ambient : float) in
  let i = ref (-(r)) in
  (try while (!i <= r) do
    try
  let x = (float_of_int (!i) +. 0.5) in
  let line = ref ("") in
  let j = ref (-((2 * r))) in
  (try while (!j <= (2 * r)) do
    try
  let y = ((float_of_int (!j) /. 2.0) +. 0.5) in
  if (((x *. x) +. (y *. y)) <= (float_of_int (r) *. float_of_int (r))) then (
  let zsq = ref ((((float_of_int (r) *. float_of_int (r)) -. (x *. x)) -. (y *. y))) in
  let vec = ref (normalize ([("x", Obj.repr (x)); ("y", Obj.repr (y)); ("z", Obj.repr (sqrtApprox (Obj.repr (!zsq))))])) in
  let b = ref ((powf (Obj.repr (dot (light) (!vec))) (Obj.repr (k)) +. ambient)) in
  let intensity = ref ((Obj.magic ((1.0 -. !b) *. (float_of_int (String.length (shades)) -. 1.0)) : int)) in
  if (!intensity < 0) then (
  intensity := 0;
  );
  if (!intensity >= String.length (shades)) then (
  intensity := (String.length (shades) - 1);
  );
  line := (!line ^ String.sub (shades) !intensity ((!intensity + 1) - !intensity));
  ) else (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let shades = ".:!*oe&#%@" in
  let light = ref (normalize ([("x", Obj.repr (30.0)); ("y", Obj.repr (30.0)); ("z", Obj.repr ((-.(50.0))))])) in
  ignore (drawSphere (Obj.repr (20)) (Obj.repr (4)) (Obj.repr (0.1)) (!light) (shades));
  ignore (drawSphere (Obj.repr (10)) (Obj.repr (2)) (Obj.repr (0.4)) (!light) (shades));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()