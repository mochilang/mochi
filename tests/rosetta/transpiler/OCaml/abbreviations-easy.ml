(* Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:48 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec fields s =
  let __ret = ref [] in
  (try
  let words = ref ([]) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (((ch = " ") || (ch = "\n")) || (ch = "\t")) then (
  if (String.length (!cur) > 0) then (
  words := List.append !words [!cur];
  cur := "";
  );
  ) else (
  cur := (!cur ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!cur) > 0) then (
  words := List.append !words [!cur];
  );
  __ret := !words; raise Return
  with Return -> !__ret)

let rec padRight s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let out = ref (s) in
  let i = ref (String.length (s)) in
  (try while (!i < width) do
    try
  out := (!out ^ " ");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !out; raise Return
  with Return -> !__ret)

let rec join xs sep =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !res; raise Return
  with Return -> !__ret)

let rec validate commands words mins =
  let __ret = ref [] in
  (try
  let results = ref ([]) in
  if (List.length (words) = 0) then (
  __ret := !results; raise Return
  );
  let wi = ref (0) in
  (try while (!wi < List.length (words)) do
    try
  let w = List.nth (words) (!wi) in
  let found = ref (false) in
  let wlen = String.length (w) in
  let ci = ref (0) in
  (try while (!ci < List.length (commands)) do
    try
  let cmd = List.nth (commands) (!ci) in
  if (((List.nth (mins) (!ci) <> 0) && (wlen >= List.nth (mins) (!ci))) && (wlen <= String.length (cmd))) then (
  let c = String.uppercase_ascii (cmd) in
  let ww = String.uppercase_ascii (w) in
  if (String.sub (c) 0 (wlen - 0) = ww) then (
  results := List.append !results [c];
  found := true;
  raise Break;
  );
  );
  ci := (!ci + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  results := List.append !results ["*error*"];
  );
  wi := (!wi + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !results; raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " ^ "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") ^ "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") ^ " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") ^ "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") ^ "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") ^ "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ") in
  let commands = ref (fields (table)) in
  let mins = ref ([]) in
  let i = ref (0) in
  (try while (!i < List.length (!commands)) do
    try
  let count = ref (0) in
  let j = ref (0) in
  let cmd = List.nth (!commands) (!i) in
  (try while (!j < String.length (cmd)) do
    try
  let ch = String.sub (cmd) !j ((!j + 1) - !j) in
  if ((ch >= "A") && (ch <= "Z")) then (
  count := (!count + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mins := List.append !mins [!count];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin" in
  let words = ref (fields (sentence)) in
  let results = ref (validate (!commands) (!words) (!mins)) in
  let out1 = ref ("user words:  ") in
  let k = ref (0) in
  (try while (!k < List.length (!words)) do
    try
  out1 := ((!out1 ^ padRight (List.nth (!words) (!k)) (String.length (List.nth (!results) (!k)))) ^ " ");
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !out1);
  print_endline (("full words:  " ^ join (!results) (" ")));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
