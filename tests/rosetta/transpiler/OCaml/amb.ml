(* Generated by Mochi transpiler v0.10.39 on 2025-07-25 08:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec amb wordsets res idx =
  let __ret = ref false in
  (try
  if (idx = List.length (wordsets)) then (
  __ret := true; raise Return
  );
  let prev = ref ("") in
  if (idx > 0) then (
  prev := List.nth (!res) ((idx - 1));
  );
  let i = ref (0) in
  (try while (!i < List.length (List.nth (wordsets) (idx))) do
    try
  let w = List.nth (List.nth (wordsets) (idx)) (!i) in
  if ((idx = 0) || (String.sub (!prev) (String.length (!prev) - 1) (String.length (!prev) - (String.length (!prev) - 1)) = String.sub (w) 0 (1 - 0))) then (
  res := (List.mapi (fun __i __x -> if __i = idx then w else __x) (!res));
  if amb (wordsets) (res) ((idx + 1)) then (
  __ret := true; raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := false; raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let wordset = ref ([["the"; "that"; "a"]; ["frog"; "elephant"; "thing"]; ["walked"; "treaded"; "grows"]; ["slowly"; "quickly"]]) in
  let res = ref ([]) in
  let i = ref (0) in
  (try while (!i < List.length (!wordset)) do
    try
  res := List.append !res [""];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if amb (!wordset) (res) (0) then (
  let out = ref (("[" ^ List.nth (!res) (0))) in
  let j = ref (1) in
  (try while (!j < List.length (!res)) do
    try
  out := ((!out ^ " ") ^ List.nth (!res) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  out := (!out ^ "]");
  print_endline (__show !out);
  ) else (
  print_endline ("No amb found");
  );
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
