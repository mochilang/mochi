(* Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:14 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec countChange amount =
  let __ret = ref 0 in
  (try
  let amount = (Obj.magic amount : int) in
  let ways = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i <= amount) do
    try
  ways := (List.append (!ways) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ways := (List.mapi (fun __i __x -> if __i = 0 then 1 else __x) (!ways));
  (try List.iter (fun coin ->
    try
  let j = ref (coin) in
  (try while (!j <= amount) do
    try
  ways := (List.mapi (fun __i __x -> if __i = !j then (List.nth (!ways) (!j) + List.nth (!ways) ((!j - coin))) else __x) (!ways));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) [100; 50; 25; 10; 5; 1] with Break -> ());
  __ret := (Obj.magic (List.nth (!ways) (amount)) : int); raise Return
  with Return -> !__ret)

let amount = 1000
let () =
  print_endline (((("amount, ways to make change: " ^ (string_of_int (amount))) ^ " ") ^ (string_of_int (countChange (amount)))));
