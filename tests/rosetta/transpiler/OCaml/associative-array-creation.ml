(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec removeKey m k =
  let __ret = ref ([] : (string * int) list) in
  (try
  let out = ref ([]) in
  (try List.iter (fun (key, _) ->
    try
  if (key <> k) then (
  out := ((key, (try List.assoc (key) m with Not_found -> (Obj.magic 0))) :: List.remove_assoc key !out);
  );
    with Continue -> ()) m with Break -> ());
  __ret := (Obj.magic (!out) : (string * int) list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = ref (([] : (string * int) list)) in
  x := [];
  x := (("foo", 3) :: List.remove_assoc "foo" !x);
  let y1 = (try List.assoc ("bar") !x with Not_found -> (Obj.magic 0)) in
  let ok = (List.mem_assoc "bar" !x) in
  print_endline (string_of_int y1);
  print_endline (string_of_bool ok);
  x := removeKey (!x) ("foo");
  x := [("foo", 2); ("bar", 42); ("baz", -(1))];
  print_endline (string_of_int (List.assoc "foo" !x));
  print_endline (string_of_int (List.assoc "bar" !x));
  print_endline (string_of_int (List.assoc "baz" !x));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
