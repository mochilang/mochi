(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  if (!x < 0) then (
  x := -(!x);
  );
  let y = ref (b) in
  if (!y < 0) then (
  y := -(!y);
  );
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and divisors n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let divs = ref (([] : int list)) in
  let i = ref (1) in
  (try while ((!i * !i) <= n) do
    try
  if ((n mod !i) = 0) then (
  divs := (List.append (!divs) [(Obj.magic (!i) : int)]);
  let j = (n / !i) in
  if (!i <> j) then (
  divs := (List.append (!divs) [(Obj.magic (j) : int)]);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!divs) : int list); raise Return
  with Return -> !__ret)

and sum xs =
  let __ret = ref 0 in
  (try
  let s = ref (0) in
  (try List.iter (fun v ->
    try
  s := (!s + v);
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (!s) : int); raise Return
  with Return -> !__ret)

and isDuffinian n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let divs = ref (divisors (Obj.repr (n))) in
  if (List.length (!divs) <= 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let sigma = (List.fold_left (fun acc x -> acc + x) 0 !divs) in
  __ret := (Obj.magic ((gcd (Obj.repr (sigma)) (Obj.repr (n)) = 1)) : bool); raise Return
  with Return -> !__ret)

and pad n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and printTable nums perRow width =
  let __ret = ref (Obj.magic 0) in
  (try
  let perRow = (Obj.magic perRow : int) in
  let width = (Obj.magic width : int) in
  let i = ref (0) in
  let line = ref ("") in
  (try while (!i < List.length (nums)) do
    try
  line := ((!line ^ " ") ^ pad (Obj.repr (List.nth (nums) (!i))) (Obj.repr (width)));
  if (((!i + 1) mod perRow) = 0) then (
  print_endline (String.sub (!line) 1 (String.length (!line) - 1));
  line := "";
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!line) > 0) then (
  print_endline (String.sub (!line) 1 (String.length (!line) - 1));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let duff = ref (([] : int list)) in
  let n = ref (1) in
  (try while (List.length (!duff) < 50) do
    try
  if isDuffinian (Obj.repr (!n)) then (
  duff := (List.append (!duff) [(Obj.magic (!n) : int)]);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("First 50 Duffinian numbers:");
  ignore (printTable (!duff) (Obj.repr (10)) (Obj.repr (3)));
  let triplets = ref (([] : string list)) in
  n := 1;
  (try while (List.length (!triplets) < 20) do
    try
  if ((isDuffinian (Obj.repr (!n)) && isDuffinian (Obj.repr ((!n + 1)))) && isDuffinian (Obj.repr ((!n + 2)))) then (
  triplets := (List.append (!triplets) [(Obj.magic ((((((("(" ^ (string_of_int (!n))) ^ ",") ^ (string_of_int ((!n + 1)))) ^ ",") ^ (string_of_int ((!n + 2)))) ^ ")")) : string)]);
  n := (!n + 3);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("\nFirst 20 Duffinian triplets:");
  let i = ref (0) in
  (try while (!i < List.length (!triplets)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while ((!j < 4) && (!i < List.length (!triplets))) do
    try
  line := (!line ^ padStr (List.nth (!triplets) (!i)) (Obj.repr (16)));
  j := (!j + 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and padStr s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let res = ref (s) in
  (try while (String.length (!res) < width) do
    try
  res := (!res ^ " ");
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()