(* Generated by Mochi transpiler v0.10.41 on 2025-07-26 12:59 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _threshold = 140737488355328
let rec indexOf xs value =
  let __ret = ref 0 in
  (try
  let value = (Obj.magic value : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = value) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

let rec contains xs value =
  let __ret = ref false in
  (try
  let value = (Obj.magic value : int) in
  __ret := (Obj.magic ((indexOf (xs) (value) <> (0 - 1))) : bool); raise Return
  with Return -> !__ret)

let rec maxOf a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

let rec intSqrt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let x = ref (n) in
  let y = ref (((!x + 1) / 2)) in
  (try while (!y < !x) do
    try
  x := !y;
  y := ((!x + (n / !x)) / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

let rec sumProperDivisors n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let sqrt = intSqrt (n) in
  let sum = ref (1) in
  let i = ref (2) in
  (try while (!i <= sqrt) do
    try
  if ((n mod !i) = 0) then (
  sum := ((!sum + !i) + (n / !i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if ((sqrt * sqrt) = n) then (
  sum := (!sum - sqrt);
  );
  __ret := (Obj.magic (!sum) : int); raise Return
  with Return -> !__ret)

let rec classifySequence k =
  let __ret = ref [] in
  (try
  let k = (Obj.magic k : int) in
  let last = ref (k) in
  let seq = ref ([k]) in
  (try while true do
    try
  last := sumProperDivisors (!last);
  seq := List.append !seq [!last];
  let n = List.length (!seq) in
  let aliquot = ref ("") in
  if (!last = 0) then (
  aliquot := "Terminating";
  ) else (
  if ((n = 2) && (!last = k)) then (
  aliquot := "Perfect";
  ) else (
  if ((n = 3) && (!last = k)) then (
  aliquot := "Amicable";
  ) else (
  if ((n >= 4) && (!last = k)) then (
  aliquot := (("Sociable[" ^ (string_of_int ((n - 1)))) ^ "]");
  ) else (
  if (!last = List.nth (!seq) ((n - 2))) then (
  aliquot := "Aspiring";
  ) else (
  if contains (List.of_seq (Seq.take (maxOf (1) ((n - 2)) - 1) (Seq.drop 1 (List.to_seq !seq)))) (!last) then (
  let idx = indexOf (!seq) (!last) in
  aliquot := (("Cyclic[" ^ (string_of_int (((n - 1) - idx)))) ^ "]");
  ) else (
  if ((n = 16) || (!last > _threshold)) then (
  aliquot := "Non-Terminating";
  );
  );
  );
  );
  );
  );
  );
  if (!aliquot <> "") then (
  __ret := (Obj.magic ([("seq", Obj.repr !seq); ("aliquot", Obj.repr !aliquot)]) : (string * Obj.t) list); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("seq", Obj.repr !seq); ("aliquot", Obj.repr "")]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec padLeft n w =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let w = (Obj.magic w : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < w) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec padRight s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let r = ref (s) in
  (try while (String.length (!r) < w) do
    try
  r := (!r ^ " ");
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : string); raise Return
  with Return -> !__ret)

let rec joinWithCommas seq =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (seq)) do
    try
  s := (!s ^ (string_of_int (List.nth (seq) (!i))));
  if (!i < (List.length (seq) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n");
  let k = ref (1) in
  (try while (!k <= 10) do
    try
  let res = ref (classifySequence (!k)) in
  print_endline (((((padLeft (!k) (2) ^ ": ") ^ padRight ((Obj.obj (List.assoc ("aliquot") !res) : string)) (15)) ^ " ") ^ joinWithCommas ((Obj.obj (List.assoc ("seq") !res) : int list))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  let s = ref ([11; 12; 28; 496; 220; 1184; 12496; 1264460; 790; 909; 562; 1064; 1488]) in
  let i = ref (0) in
  (try while (!i < List.length (!s)) do
    try
  let val_ = List.nth (!s) (!i) in
  let res = ref (classifySequence (val_)) in
  print_endline (((((padLeft (val_) (7) ^ ": ") ^ padRight ((Obj.obj (List.assoc ("aliquot") !res) : string)) (15)) ^ " ") ^ joinWithCommas ((Obj.obj (List.assoc ("seq") !res) : int list))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  let big = 15355717786080 in
  let r = ref (classifySequence (big)) in
  print_endline ((((((string_of_int (big)) ^ ": ") ^ padRight ((Obj.obj (List.assoc ("aliquot") !r) : string)) (15)) ^ " ") ^ joinWithCommas ((Obj.obj (List.assoc ("seq") !r) : int list))));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
