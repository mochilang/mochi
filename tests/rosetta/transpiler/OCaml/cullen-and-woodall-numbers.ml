(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow_big base exp =
  let __ret = ref (Z.of_int 0) in
  (try
  let exp = (Obj.magic exp : int) in
  let result = ref ((Z.of_int (1))) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := (Z.mul (!result) (!b));
  );
  b := (Z.mul (!b) (!b));
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : Z.t); raise Return
  with Return -> !__ret)

and cullen n =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let two_n = pow_big ((Z.of_int (2))) (Obj.repr (n)) in
  __ret := (Obj.magic ((Z.add ((Z.mul (two_n) ((Z.of_int (n))))) ((Z.of_int (1))))) : Z.t); raise Return
  with Return -> !__ret)

and woodall n =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  __ret := (Obj.magic ((Z.sub (cullen (Obj.repr (n))) ((Z.of_int (2))))) : Z.t); raise Return
  with Return -> !__ret)

and show_list xs =
  let __ret = ref "" in
  (try
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  line := (!line ^ (Z.to_string (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  line := (!line ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cnums = ref (([] : Z.t list)) in
  let i = ref (1) in
  (try while (!i <= 20) do
    try
  cnums := (List.append (!cnums) [(Obj.magic (cullen (Obj.repr (!i))) : Z.t)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("First 20 Cullen numbers (n * 2^n + 1):");
  print_endline (show_list (!cnums));
  let wnums = ref (([] : Z.t list)) in
  i := 1;
  (try while (!i <= 20) do
    try
  wnums := (List.append (!wnums) [(Obj.magic (woodall (Obj.repr (!i))) : Z.t)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("\nFirst 20 Woodall numbers (n * 2^n - 1):");
  print_endline (show_list (!wnums));
  let cprimes = ref ([(Z.of_int (1)); (Z.of_int (141)); (Z.of_int (4713)); (Z.of_int (5795)); (Z.of_int (6611))]) in
  print_endline ("\nFirst 5 Cullen primes (in terms of n):");
  print_endline (show_list (!cprimes));
  let wprimes = ref ([(Z.of_int (2)); (Z.of_int (3)); (Z.of_int (6)); (Z.of_int (30)); (Z.of_int (75)); (Z.of_int (81)); (Z.of_int (115)); (Z.of_int (123)); (Z.of_int (249)); (Z.of_int (362)); (Z.of_int (384)); (Z.of_int (462))]) in
  print_endline ("\nFirst 12 Woodall primes (in terms of n):");
  print_endline (show_list (!wprimes));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()