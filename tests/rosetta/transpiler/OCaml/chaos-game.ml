(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let width = 60
let height = (Obj.magic (float_of_int (width) *. 0.86602540378) : int)
let iterations = 5000
let grid = ref (([] : string list list))
let y = ref (0)
let rec randInt s n =
  let __ret = ref ([] : int list) in
  (try
  let s = (Obj.magic s : int) in
  let n = (Obj.magic n : int) in
  let next = (((s * 1664525) + 1013904223) mod 2147483647) in
  __ret := (Obj.magic ([next; (next mod n)]) : int list); raise Return
  with Return -> !__ret)

let seed = ref (1)
let vertices = ref ([[0; (height - 1)]; [(width - 1); (height - 1)]; [(width / 2); 0]])
let px = ref ((width / 2))
let py = ref ((height / 2))
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!y < height) do
    try
  let line = ref (([] : string list)) in
  let x = ref (0) in
  (try while (!x < width) do
    try
  line := (List.append !line [(Obj.magic (" ") : string)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  grid := (List.append !grid [(Obj.magic (!line) : string list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!i < iterations) do
    try
  let r = ref (randInt (!seed) (3)) in
  seed := List.nth (!r) (0);
  let idx = List.nth (!r) (1) in
  let v = ref (List.nth (!vertices) (idx)) in
  px := ((!px + List.nth (!v) (0)) / 2);
  py := ((!py + List.nth (!v) (1)) / 2);
  if ((((!px >= 0) && (!px < width)) && (!py >= 0)) && (!py < height)) then (
  grid := (List.mapi (fun __i __x -> if __i = !py then (List.mapi (fun __i __x -> if __i = !px then "*" else __x) (List.nth (!grid) (!py))) else __x) (!grid));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  y := 0;
  (try while (!y < height) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < width) do
    try
  line := (!line ^ List.nth (List.nth (!grid) (!y)) (!x));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
