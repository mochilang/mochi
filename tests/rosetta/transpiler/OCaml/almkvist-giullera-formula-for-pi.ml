(* Generated by Mochi transpiler v0.10.40 on 2025-07-25 22:09 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bigTrim a =
  let __ret = ref ([] : int list) in
  (try
  let n = ref (List.length !a) in
  (try while ((!n > 1) && (List.nth (!a) ((!n - 1)) = 0)) do
    try
  a := List.of_seq (Seq.take ((!n - 1) - 0) (Seq.drop 0 (List.to_seq !a)));
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

let rec bigFromInt x =
  let __ret = ref ([] : int list) in
  (try
  let x = (Obj.magic x : int) in
  if (x = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  let digits = ref ([]) in
  let n = ref (x) in
  (try while (!n > 0) do
    try
  digits := List.append !digits [(!n mod 10)];
  n := (!n / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!digits) : int list); raise Return
  with Return -> !__ret)

let rec bigCmp a b =
  let __ret = ref 0 in
  (try
  if (List.length a > List.length b) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (List.length a < List.length b) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let i = ref ((List.length a - 1)) in
  (try while (!i >= 0) do
    try
  if (List.nth (a) (!i) > List.nth (b) (!i)) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (List.nth (a) (!i) < List.nth (b) (!i)) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

let rec bigAdd a b =
  let __ret = ref ([] : int list) in
  (try
  let res = ref ([]) in
  let carry = ref (0) in
  let i = ref (0) in
  (try while (((!i < List.length a) || (!i < List.length b)) || (!carry > 0)) do
    try
  let av = ref (0) in
  if (!i < List.length a) then (
  av := List.nth (a) (!i);
  );
  let bv = ref (0) in
  if (!i < List.length b) then (
  bv := List.nth (b) (!i);
  );
  let s = ref (((!av + !bv) + !carry)) in
  res := List.append !res [(!s mod 10)];
  carry := (!s / 10);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigSub a b =
  let __ret = ref ([] : int list) in
  (try
  let res = ref ([]) in
  let borrow = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length a) do
    try
  let av = ref (List.nth (a) (!i)) in
  let bv = ref (0) in
  if (!i < List.length b) then (
  bv := List.nth (b) (!i);
  );
  let diff = ref (((!av - !bv) - !borrow)) in
  if (!diff < 0) then (
  diff := (!diff + 10);
  borrow := 1;
  ) else (
  borrow := 0;
  );
  res := List.append !res [!diff];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigMulSmall a m =
  let __ret = ref ([] : int list) in
  (try
  let m = (Obj.magic m : int) in
  if (m = 0) then (
  __ret := (Obj.magic ([0]) : int list); raise Return
  );
  let res = ref ([]) in
  let carry = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length a) do
    try
  let prod = ref (((List.nth (a) (!i) * m) + !carry)) in
  res := List.append !res [(!prod mod 10)];
  carry := (!prod / 10);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!carry > 0) do
    try
  res := List.append !res [(!carry mod 10)];
  carry := (!carry / 10);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigMulBig a b =
  let __ret = ref ([] : int list) in
  (try
  let res = ref ([]) in
  let i = ref (0) in
  (try while (!i < (List.length a + List.length b)) do
    try
  res := List.append !res [0];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < List.length a) do
    try
  let carry = ref (0) in
  let j = ref (0) in
  (try while (!j < List.length b) do
    try
  let idx = ref ((!i + !j)) in
  let prod = ref (((List.nth (!res) (!idx) + (List.nth (a) (!i) * List.nth (b) (!j))) + !carry)) in
  res := (List.mapi (fun __i __x -> if __i = !idx then (!prod mod 10) else __x) (!res));
  carry := (!prod / 10);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref ((!i + List.length b)) in
  (try while (!carry > 0) do
    try
  let prod = ref ((List.nth (!res) (!idx) + !carry)) in
  res := (List.mapi (fun __i __x -> if __i = !idx then (!prod mod 10) else __x) (!res));
  carry := (!prod / 10);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigMulPow10 a k =
  let __ret = ref ([] : int list) in
  (try
  let k = (Obj.magic k : int) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  a := ([0] @ !a);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!a) : int list); raise Return
  with Return -> !__ret)

let rec bigDivSmall a m =
  let __ret = ref ([] : int list) in
  (try
  let m = (Obj.magic m : int) in
  let res = ref ([]) in
  let rem = ref (0) in
  let i = ref ((List.length a - 1)) in
  (try while (!i >= 0) do
    try
  let cur = ref (((!rem * 10) + List.nth (a) (!i))) in
  let q = ref ((!cur / m)) in
  rem := (!cur mod m);
  res := ([!q] @ !res);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (bigTrim (res)) : int list); raise Return
  with Return -> !__ret)

let rec bigToString a =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref ((List.length a - 1)) in
  (try while (!i >= 0) do
    try
  s := (!s ^ (string_of_int (List.nth (a) (!i))));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec sortInts xs =
  let __ret = ref ([] : int list) in
  (try
  let res = ref ([]) in
  let tmp = ref (xs) in
  (try while (List.length !tmp > 0) do
    try
  let min = ref (List.nth (!tmp) (0)) in
  let idx = ref (0) in
  let i = ref (1) in
  (try while (!i < List.length !tmp) do
    try
  if (List.nth (!tmp) (!i) < !min) then (
  min := List.nth (!tmp) (!i);
  idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res @ [!min]);
  let out = ref ([]) in
  let j = ref (0) in
  (try while (!j < List.length !tmp) do
    try
  if (!j <> !idx) then (
  out := (!out @ [List.nth (!tmp) (!j)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  tmp := !out;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

let rec primesUpTo n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let sieve = ref ([]) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  sieve := List.append !sieve [true];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let p = ref (2) in
  (try while ((!p * !p) <= n) do
    try
  if List.nth (!sieve) (!p) then (
  let m = ref ((!p * !p)) in
  (try while (!m <= n) do
    try
  sieve := (List.mapi (fun __i __x -> if __i = !m then false else __x) (!sieve));
  m := (!m + !p);
    with Continue -> ()
  done with Break -> ());
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref ([]) in
  let x = ref (2) in
  (try while (!x <= n) do
    try
  if List.nth (!sieve) (!x) then (
  res := List.append !res [!x];
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

let rec factorialExp n primes =
  let __ret = ref [] in
  (try
  let n = (Obj.magic n : int) in
  let m = ref ([]) in
  (try List.iter (fun p ->
    try
  if (p > n) then (
  raise Break;
  );
  let t = ref (n) in
  let e = ref (0) in
  (try while (!t > 0) do
    try
  t := (!t / p);
  e := (!e + !t);
    with Continue -> ()
  done with Break -> ());
  m := (((string_of_int (p)), !e) :: List.remove_assoc (string_of_int (p)) !m);
    with Continue -> ()) primes with Break -> ());
  __ret := (Obj.magic (!m) : (string * int) list); raise Return
  with Return -> !__ret)

let rec factorSmall x primes =
  let __ret = ref [] in
  (try
  let x = (Obj.magic x : int) in
  let f = ref ([]) in
  let n = ref (x) in
  (try List.iter (fun p ->
    try
  if ((p * p) > !n) then (
  raise Break;
  );
  let c = ref (0) in
  (try while ((!n mod p) = 0) do
    try
  c := (!c + 1);
  n := (!n / p);
    with Continue -> ()
  done with Break -> ());
  if (!c > 0) then (
  f := (((string_of_int (p)), !c) :: List.remove_assoc (string_of_int (p)) !f);
  );
    with Continue -> ()) primes with Break -> ());
  if (!n > 1) then (
  f := (((string_of_int (!n)), ((try List.assoc ((string_of_int (!n))) !f with Not_found -> 0) + 1)) :: List.remove_assoc (string_of_int (!n)) !f);
  );
  __ret := (Obj.magic (!f) : (string * int) list); raise Return
  with Return -> !__ret)

let rec computeIP n primes =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let exps = ref (factorialExp ((6 * n)) (primes)) in
  let fn = ref (factorialExp (n) (primes)) in
  (try List.iter (fun (k, _) ->
    try
  exps := ((k, ((try List.assoc (k) !exps with Not_found -> 0) - (6 * (List.assoc (k) !fn)))) :: List.remove_assoc k !exps);
    with Continue -> ()) !fn with Break -> ());
  exps := (("2", ((try List.assoc ("2") !exps with Not_found -> 0) + 5)) :: List.remove_assoc "2" !exps);
  let t2 = ((((532 * n) * n) + (126 * n)) + 9) in
  let ft2 = ref (factorSmall (t2) (primes)) in
  (try List.iter (fun (k, _) ->
    try
  exps := ((k, ((try List.assoc (k) !exps with Not_found -> 0) + (List.assoc (k) !ft2))) :: List.remove_assoc k !exps);
    with Continue -> ()) !ft2 with Break -> ());
  exps := (("3", ((try List.assoc ("3") !exps with Not_found -> 0) - 1)) :: List.remove_assoc "3" !exps);
  let keys = ref ([]) in
  (try List.iter (fun (k, _) ->
    try
  keys := List.append !keys [k];
    with Continue -> ()) !exps with Break -> ());
  keys := sortInts (!keys);
  let res = ref (bigFromInt (1)) in
  (try List.iter (fun p ->
    try
  let e = ref ((List.assoc ((string_of_int (p))) !exps)) in
  let i = ref (0) in
  (try while (!i < !e) do
    try
  res := bigMulSmall (!res) (p);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) !keys with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

let rec formatTerm ip pw =
  let __ret = ref "" in
  (try
  let pw = (Obj.magic pw : int) in
  let s = ref (bigToString (ip)) in
  if (pw >= String.length (!s)) then (
  let frac = ref ((repeat ("0") ((pw - String.length (!s))) ^ !s)) in
  if (String.length (!frac) < 33) then (
  frac := (!frac ^ repeat ("0") ((33 - String.length (!frac))));
  );
  __ret := (Obj.magic (("0." ^ String.sub (!frac) 0 (33 - 0))) : string); raise Return
  );
  let intpart = ref (String.sub (!s) 0 ((String.length (!s) - pw) - 0)) in
  let frac = ref (String.sub (!s) (String.length (!s) - pw) (String.length (!s) - (String.length (!s) - pw))) in
  if (String.length (!frac) < 33) then (
  frac := (!frac ^ repeat ("0") ((33 - String.length (!frac))));
  );
  __ret := (Obj.magic (((!intpart ^ ".") ^ String.sub (!frac) 0 (33 - 0))) : string); raise Return
  with Return -> !__ret)

let rec bigAbsDiff a b =
  let __ret = ref ([] : int list) in
  (try
  if (bigCmp (a) (b) >= 0) then (
  __ret := (Obj.magic (bigSub (a) (b)) : int list); raise Return
  );
  __ret := (Obj.magic (bigSub (b) (a)) : int list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let primes = ref (primesUpTo (2000)) in
  print_endline ("N                               Integer Portion  Pow  Nth Term (33 dp)");
  let line = repeat ("-") (89) in
  print_endline (__show line);
  let sum = ref (bigFromInt (0)) in
  let prev = ref (bigFromInt (0)) in
  let denomPow = ref (0) in
  let n = ref (0) in
  (try while true do
    try
  let ip = ref (computeIP (!n) (!primes)) in
  let pw = ((6 * !n) + 3) in
  if (pw > !denomPow) then (
  sum := bigMulPow10 (sum) ((pw - !denomPow));
  prev := bigMulPow10 (prev) ((pw - !denomPow));
  denomPow := pw;
  );
  if (!n < 10) then (
  let termStr = formatTerm (!ip) (pw) in
  let ipStr = ref (bigToString (!ip)) in
  (try while (String.length (!ipStr) < 44) do
    try
  ipStr := (" " ^ !ipStr);
    with Continue -> ()
  done with Break -> ());
  let pwStr = ref ((string_of_int (-(pw)))) in
  (try while (String.length (!pwStr) < 3) do
    try
  pwStr := (" " ^ !pwStr);
    with Continue -> ()
  done with Break -> ());
  let padTerm = ref (termStr) in
  (try while (String.length (!padTerm) < 35) do
    try
  padTerm := (!padTerm ^ " ");
    with Continue -> ()
  done with Break -> ());
  print_endline ((((((((string_of_int (!n)) ^ "  ") ^ !ipStr) ^ "  ") ^ !pwStr) ^ "  ") ^ !padTerm));
  );
  sum := bigAdd (!sum) (!ip);
  let diff = ref (bigAbsDiff (!sum) (!prev)) in
  if ((!denomPow >= 70) && (bigCmp (!diff) (bigMulPow10 (bigFromInt (1)) ((!denomPow - 70))) < 0)) then (
  raise Break;
  );
  prev := !sum;
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let precision = 70 in
  let target = ref (bigMulPow10 (bigFromInt (1)) ((!denomPow + (2 * precision)))) in
  let low = ref (bigFromInt (0)) in
  let high = ref (bigMulPow10 (bigFromInt (1)) ((precision + 1))) in
  (try while (bigCmp (!low) (bigSub (!high) (bigFromInt (1))) < 0) do
    try
  let mid = ref (bigDivSmall (bigAdd (!low) (!high)) (2)) in
  let prod = ref (bigMulBig (bigMulBig (!mid) (!mid)) (!sum)) in
  if (bigCmp (!prod) (!target) <= 0) then (
  low := !mid;
  ) else (
  high := bigSub (!mid) (bigFromInt (1));
  );
    with Continue -> ()
  done with Break -> ());
  let piInt = ref (!low) in
  let piStr = ref (bigToString (!piInt)) in
  if (String.length (!piStr) <= precision) then (
  piStr := (repeat ("0") (((precision - String.length (!piStr)) + 1)) ^ !piStr);
  );
  let out = ref (((String.sub (!piStr) 0 ((String.length (!piStr) - precision) - 0) ^ ".") ^ String.sub (!piStr) (String.length (!piStr) - precision) (String.length (!piStr) - (String.length (!piStr) - precision)))) in
  print_endline ("");
  print_endline ("Pi to 70 decimal places is:");
  print_endline (__show !out);
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
