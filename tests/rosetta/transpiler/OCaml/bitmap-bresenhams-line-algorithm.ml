(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec absi x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 0) then (
  __ret := (Obj.magic (-(x)) : int); raise Return
  );
  __ret := (Obj.magic (x) : int); raise Return
  with Return -> !__ret)

let rec bresenham x0 y0 x1 y1 =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  x0 := (Obj.magic !x0 : int);
  y0 := (Obj.magic !y0 : int);
  let x1 = (Obj.magic x1 : int) in
  let y1 = (Obj.magic y1 : int) in
  let dx = ref (absi ((x1 - !x0))) in
  let dy = ref (absi ((y1 - !y0))) in
  let sx = ref (-(1)) in
  if (!x0 < x1) then (
  sx := 1;
  );
  let sy = ref (-(1)) in
  if (!y0 < y1) then (
  sy := 1;
  );
  let err = ref ((!dx - !dy)) in
  let pts = ref ([]) in
  (try while true do
    try
  pts := List.append !pts [[("x", Obj.repr !x0); ("y", Obj.repr !y0)]];
  if ((!x0 = x1) && (!y0 = y1)) then (
  raise Break;
  );
  let e2 = ref ((2 * !err)) in
  if (!e2 > -(!dy)) then (
  err := (!err - !dy);
  x0 := (!x0 + !sx);
  );
  if (!e2 < !dx) then (
  err := (!err + !dx);
  y0 := (!y0 + !sy);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!pts) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let pts = ref (bresenham (ref (0)) (ref (0)) (6) (4)) in
  let i = ref (0) in
  (try while (!i < List.length (!pts)) do
    try
  let p = List.nth (!pts) (!i) in
  print_endline ((((("(" ^ (string_of_int ((Obj.obj (List.assoc ("x") p) : int)))) ^ ",") ^ (string_of_int ((Obj.obj (List.assoc ("y") p) : int)))) ^ ")"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
