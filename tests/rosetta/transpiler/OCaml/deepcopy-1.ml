(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copyList src =
  let __ret = ref ([] : int list) in
  (try
  let out = ref (([] : int list)) in
  (try List.iter (fun v ->
    try
  out := (List.append (!out) [(Obj.magic (v) : int)]);
    with Continue -> ()) (src) with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)

and copyMap src =
  let __ret = ref ([] : (string * bool) list) in
  (try
  let out = ref ([]) in
  (try List.iter (fun (k, _) ->
    try
  out := ((k, (try List.assoc (k) src with Not_found -> (Obj.magic 0))) :: List.remove_assoc (k) !out);
    with Continue -> ()) (src) with Break -> ());
  __ret := (Obj.magic (!out) : (string * bool) list); raise Return
  with Return -> !__ret)

and deepcopy c =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("i", Obj.repr ((Obj.obj (List.assoc ("i") c) : int))); ("s", Obj.repr ((Obj.obj (List.assoc ("s") c) : string))); ("b", Obj.repr (copyList ((Obj.obj (List.assoc ("b") c) : int list)))); ("m", Obj.repr (copyMap ((Obj.obj (List.assoc ("m") c) : (string * bool) list))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and cdsStr c =
  let __ret = ref "" in
  (try
  let bs = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc ("b") c) : int list))) do
    try
  bs := (!bs ^ (string_of_int (List.nth ((Obj.obj (List.assoc ("b") c) : int list)) (!i))));
  if (!i < (List.length ((Obj.obj (List.assoc ("b") c) : int list)) - 1)) then (
  bs := (!bs ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  bs := (!bs ^ "]");
  let ms = ref ("map[") in
  let first = ref (true) in
  (try List.iter (fun (k, _) ->
    try
  if not (!first) then (
  ms := (!ms ^ " ");
  );
  ms := (((!ms ^ __show (k)) ^ ":") ^ __show ((try List.assoc (k) (Obj.obj (List.assoc ("m") c) : (string * bool) list) with Not_found -> (Obj.magic 0))));
  first := false;
    with Continue -> ()) ((Obj.obj (List.assoc ("m") c) : (string * bool) list)) with Break -> ());
  ms := (!ms ^ "]");
  __ret := (Obj.magic ((((((((("{" ^ (string_of_int ((Obj.obj (List.assoc ("i") c) : int)))) ^ " ") ^ (Obj.obj (List.assoc ("s") c) : string)) ^ " ") ^ !bs) ^ " ") ^ !ms) ^ "}")) : string); raise Return
  with Return -> !__ret)


let c1 = ref ([("i", Obj.repr (1)); ("s", Obj.repr ("one")); ("b", Obj.repr ([117; 110; 105; 116])); ("m", Obj.repr ([(1, true)]))])
let c2 = ref (deepcopy (!c1))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (cdsStr (!c1));
  print_endline (cdsStr (!c2));
  c1 := [("i", Obj.repr (0)); ("s", Obj.repr ("nil")); ("b", Obj.repr ([122; 101; 114; 111])); ("m", Obj.repr ([(1, false)]))];
  print_endline (cdsStr (!c1));
  print_endline (cdsStr (!c2));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()