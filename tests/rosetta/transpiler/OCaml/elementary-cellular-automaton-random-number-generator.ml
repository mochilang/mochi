(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let n = 64
let rec pow2 k =
  let __ret = ref 0 in
  (try
  let k = (Obj.magic k : int) in
  let v = ref (1) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  v := (!v * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!v) : int); raise Return
  with Return -> !__ret)

and ruleBit ruleNum idx =
  let __ret = ref 0 in
  (try
  let ruleNum = (Obj.magic ruleNum : int) in
  let idx = (Obj.magic idx : int) in
  let r = ref (ruleNum) in
  let i = ref (0) in
  (try while (!i < idx) do
    try
  r := (!r / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!r mod 2)) : int); raise Return
  with Return -> !__ret)

and evolve state ruleNum =
  let __ret = ref ([] : int list) in
  (try
  let ruleNum = (Obj.magic ruleNum : int) in
  let out = ref (([] : int list)) in
  let p = ref (0) in
  (try while (!p < 10) do
    try
  let b = ref (0) in
  let q = ref (7) in
  (try while (!q >= 0) do
    try
  let st = ref (!state) in
  b := (!b + (List.nth (!st) (0) * pow2 (Obj.repr (!q))));
  let next = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let lidx = ref ((!i - 1)) in
  if (!lidx < 0) then (
  lidx := (n - 1);
  );
  let left = List.nth (!st) (!lidx) in
  let center = List.nth (!st) (!i) in
  let ridx = ref ((!i + 1)) in
  if (!ridx >= n) then (
  ridx := 0;
  );
  let right = List.nth (!st) (!ridx) in
  let index = (((left * 4) + (center * 2)) + right) in
  next := (List.append (!next) [(Obj.magic (ruleBit (Obj.repr (ruleNum)) (Obj.repr (index))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  state := !next;
  q := (!q - 1);
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (!b) : int)]);
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)


let init = ref (([] : int list))
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < n) do
    try
  init := (List.append (!init) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  init := (List.mapi (fun __i __x -> if __i = 0 then 1 else __x) (!init));
  let bytes = ref (evolve (init) (Obj.repr (30))) in
  print_endline (__show (!bytes));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()