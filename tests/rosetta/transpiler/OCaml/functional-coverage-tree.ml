(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow10 n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let r = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  r := (!r *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and formatFloat f prec =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : float) in
  let prec = (Obj.magic prec : int) in
  let scale = pow10 (Obj.repr (prec)) in
  let scaled = ((f *. scale) +. 0.5) in
  let n = ref ((Obj.magic scaled : int)) in
  let digits = ref ((string_of_int (!n))) in
  (try while (String.length (!digits) <= prec) do
    try
  digits := ("0" ^ !digits);
    with Continue -> ()
  done with Break -> ());
  let intPart = String.sub !digits (0) ((String.length (!digits) - prec) - 0) in
  let fracPart = String.sub !digits ((String.length (!digits) - prec)) (String.length (!digits) - (String.length (!digits) - prec)) in
  __ret := (Obj.magic (((intPart ^ ".") ^ fracPart)) : string); raise Return
  with Return -> !__ret)

and padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

and repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and toFloat i =
  let __ret = ref 0.0 in
  (try
  let i = (Obj.magic i : int) in
  __ret := (Obj.magic (float_of_int (i)) : float); raise Return
  with Return -> !__ret)

and newNode name weight coverage =
  let __ret = ref [] in
  (try
  let weight = (Obj.magic weight : int) in
  let coverage = (Obj.magic coverage : float) in
  __ret := (Obj.magic ([("name", Obj.repr (name)); ("weight", Obj.repr (weight)); ("coverage", Obj.repr (coverage)); ("children", Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and addChildren n nodes =
  let __ret = ref (Obj.magic 0) in
  (try
  let cs = ref ((Obj.magic (Obj.obj (List.assoc ("children") (!n) : Obj.t) : int) : Obj.t list)) in
  (try List.iter (fun node ->
    try
  cs := (List.append (!cs) [(Obj.magic (node) : Obj.t)]);
    with Continue -> ()) (nodes) with Break -> ());
  n := (("children", Obj.repr (!cs)) :: List.remove_assoc ("children") (Obj.magic (!n) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and setCoverage n value =
  let __ret = ref (Obj.magic 0) in
  (try
  let value = (Obj.magic value : float) in
  n := (("coverage", Obj.repr (value)) :: List.remove_assoc ("coverage") (Obj.magic (!n) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and computeCoverage n =
  let __ret = ref 0.0 in
  (try
  let cs = ref ((Obj.magic (Obj.obj (List.assoc ("children") (n) : Obj.t) : int) : Obj.t list)) in
  if (List.length (!cs) = 0) then (
  __ret := (Obj.magic (float_of_int ((Obj.obj (List.assoc ("coverage") (n) : Obj.t) : int))) : float); raise Return
  );
  let v1 = ref (0.0) in
  let v2 = ref (0) in
  (try List.iter (fun node ->
    try
  let m = ref ((Obj.magic node : (string * Obj.t) list)) in
  let c = computeCoverage ((Obj.magic !m : (string * Obj.t) list)) in
  v1 := (!v1 +. (toFloat (Obj.repr ((Obj.magic (Obj.obj (List.assoc ("weight") (!m) : Obj.t) : Obj.t) : int))) *. c));
  v2 := (!v2 + (Obj.magic (Obj.obj (List.assoc ("weight") (!m) : Obj.t) : Obj.t) : int));
    with Continue -> ()) (!cs) with Break -> ());
  __ret := (Obj.magic ((!v1 /. toFloat (Obj.repr (!v2)))) : float); raise Return
  with Return -> !__ret)

and spaces n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  __ret := (Obj.magic (repeat (" ") (Obj.repr (n))) : string); raise Return
  with Return -> !__ret)

and show n level =
  let __ret = ref (Obj.magic 0) in
  (try
  let level = (Obj.magic level : int) in
  let indent = ref ((level * 4)) in
  let name = (Obj.magic (Obj.obj (List.assoc ("name") (n) : Obj.t) : int) : string) in
  let nl = ref ((String.length (name) + !indent)) in
  let line = ref ((spaces (Obj.repr (!indent)) ^ name)) in
  line := ((!line ^ spaces (Obj.repr ((32 - !nl)))) ^ "|  ");
  line := ((!line ^ padLeft ((string_of_int ((Obj.obj (List.assoc ("weight") (n) : Obj.t) : int)))) (Obj.repr (3))) ^ "   | ");
  line := ((!line ^ formatFloat (Obj.repr (computeCoverage ((Obj.magic n : (string * Obj.t) list)))) (Obj.repr (6))) ^ " |");
  print_endline (__show !line);
  let cs = ref ((Obj.magic (Obj.obj (List.assoc ("children") (n) : Obj.t) : int) : Obj.t list)) in
  (try List.iter (fun child ->
    try
  ignore (show ((Obj.magic (Obj.magic child : (string * Obj.t) list) : (string * Obj.t) list)) (Obj.repr ((level + 1))));
    with Continue -> ()) (!cs) with Break -> ());
    !__ret
  with Return -> !__ret)


let house1 = ref (newNode ("house1") (Obj.repr (40)) (Obj.repr (0.0)))
let house2 = ref (newNode ("house2") (Obj.repr (60)) (Obj.repr (0.0)))
let h1_bedrooms = ref (newNode ("bedrooms") (Obj.repr (1)) (Obj.repr (0.25)))
let h1_bathrooms = ref (newNode ("bathrooms") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_attic = ref (newNode ("attic") (Obj.repr (1)) (Obj.repr (0.75)))
let h1_kitchen = ref (newNode ("kitchen") (Obj.repr (1)) (Obj.repr (0.1)))
let h1_living_rooms = ref (newNode ("living_rooms") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_basement = ref (newNode ("basement") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_garage = ref (newNode ("garage") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_garden = ref (newNode ("garden") (Obj.repr (1)) (Obj.repr (0.8)))
let h2_upstairs = ref (newNode ("upstairs") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_groundfloor = ref (newNode ("groundfloor") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_basement = ref (newNode ("basement") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_bathroom1 = ref (newNode ("bathroom1") (Obj.repr (1)) (Obj.repr (0.5)))
let h1_bathroom2 = ref (newNode ("bathroom2") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_outside = ref (newNode ("outside_lavatory") (Obj.repr (1)) (Obj.repr (1.0)))
let h1_lounge = ref (newNode ("lounge") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_dining = ref (newNode ("dining_room") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_conservatory = ref (newNode ("conservatory") (Obj.repr (1)) (Obj.repr (0.0)))
let h1_playroom = ref (newNode ("playroom") (Obj.repr (1)) (Obj.repr (1.0)))
let h2_bedrooms = ref (newNode ("bedrooms") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_bathroom = ref (newNode ("bathroom") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_toilet = ref (newNode ("toilet") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_attics = ref (newNode ("attics") (Obj.repr (1)) (Obj.repr (0.6)))
let h2_kitchen = ref (newNode ("kitchen") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_living_rooms = ref (newNode ("living_rooms") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_wet_room = ref (newNode ("wet_room_&_toilet") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_garage = ref (newNode ("garage") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_garden = ref (newNode ("garden") (Obj.repr (1)) (Obj.repr (0.9)))
let h2_hot_tub = ref (newNode ("hot_tub_suite") (Obj.repr (1)) (Obj.repr (1.0)))
let h2_cellars = ref (newNode ("cellars") (Obj.repr (1)) (Obj.repr (1.0)))
let h2_wine_cellar = ref (newNode ("wine_cellar") (Obj.repr (1)) (Obj.repr (1.0)))
let h2_cinema = ref (newNode ("cinema") (Obj.repr (1)) (Obj.repr (0.75)))
let h2_suite1 = ref (newNode ("suite_1") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_suite2 = ref (newNode ("suite_2") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_bedroom3 = ref (newNode ("bedroom_3") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_bedroom4 = ref (newNode ("bedroom_4") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_lounge = ref (newNode ("lounge") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_dining = ref (newNode ("dining_room") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_conservatory = ref (newNode ("conservatory") (Obj.repr (1)) (Obj.repr (0.0)))
let h2_playroom = ref (newNode ("playroom") (Obj.repr (1)) (Obj.repr (0.0)))
let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cleaning = ref (newNode ("cleaning") (Obj.repr (1)) (Obj.repr (0.0))) in
  ignore (addChildren (h1_bathrooms) ((Obj.magic [!h1_bathroom1; !h1_bathroom2; !h1_outside] : (string * Obj.t) list list)));
  ignore (addChildren (h1_living_rooms) ((Obj.magic [!h1_lounge; !h1_dining; !h1_conservatory; !h1_playroom] : (string * Obj.t) list list)));
  ignore (addChildren (house1) ((Obj.magic [!h1_bedrooms; !h1_bathrooms; !h1_attic; !h1_kitchen; !h1_living_rooms; !h1_basement; !h1_garage; !h1_garden] : (string * Obj.t) list list)));
  ignore (addChildren (h2_bedrooms) ((Obj.magic [!h2_suite1; !h2_suite2; !h2_bedroom3; !h2_bedroom4] : (string * Obj.t) list list)));
  ignore (addChildren (h2_upstairs) ((Obj.magic [!h2_bedrooms; !h2_bathroom; !h2_toilet; !h2_attics] : (string * Obj.t) list list)));
  ignore (addChildren (h2_living_rooms) ((Obj.magic [!h2_lounge; !h2_dining; !h2_conservatory; !h2_playroom] : (string * Obj.t) list list)));
  ignore (addChildren (h2_groundfloor) ((Obj.magic [!h2_kitchen; !h2_living_rooms; !h2_wet_room; !h2_garage; !h2_garden; !h2_hot_tub] : (string * Obj.t) list list)));
  ignore (addChildren (h2_basement) ((Obj.magic [!h2_cellars; !h2_wine_cellar; !h2_cinema] : (string * Obj.t) list list)));
  ignore (addChildren (house2) ((Obj.magic [!h2_upstairs; !h2_groundfloor; !h2_basement] : (string * Obj.t) list list)));
  ignore (addChildren (cleaning) ((Obj.magic [!house1; !house2] : (string * Obj.t) list list)));
  let topCoverage = computeCoverage ((Obj.magic !cleaning : (string * Obj.t) list)) in
  print_endline (("TOP COVERAGE = " ^ formatFloat (Obj.repr (topCoverage)) (Obj.repr (6))));
  print_endline ("");
  print_endline ("NAME HIERARCHY                 | WEIGHT | COVERAGE |");
  ignore (show ((Obj.magic !cleaning : (string * Obj.t) list)) (Obj.repr (0)));
  ignore (setCoverage (h2_cinema) (Obj.repr (1.0)));
  let diff = (computeCoverage ((Obj.magic !cleaning : (string * Obj.t) list)) -. topCoverage) in
  print_endline ("");
  print_endline ("If the coverage of the Cinema node were increased from 0.75 to 1");
  print_endline (((("the top level coverage would increase by " ^ formatFloat (Obj.repr (diff)) (Obj.repr (6))) ^ " to ") ^ formatFloat (Obj.repr ((topCoverage +. diff))) (Obj.repr (6))));
  ignore (setCoverage (h2_cinema) (Obj.repr (0.75)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()