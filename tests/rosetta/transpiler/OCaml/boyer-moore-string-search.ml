(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOfStr h n =
  let __ret = ref 0 in
  (try
  let hlen = String.length (h) in
  let nlen = String.length (n) in
  if (nlen = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let i = ref (0) in
  (try while (!i <= (hlen - nlen)) do
    try
  if (String.sub (h) !i ((!i + nlen) - !i) = n) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec stringSearchSingle h n =
  let __ret = ref 0 in
  (try
  __ret := (Obj.magic (indexOfStr (h) (n)) : int); raise Return
  with Return -> !__ret)

let rec stringSearch h n =
  let __ret = ref ([] : int list) in
  (try
  let result = ref ([]) in
  let start = ref (0) in
  let hlen = String.length (h) in
  let nlen = String.length (n) in
  (try while (!start < hlen) do
    try
  let idx = indexOfStr (String.sub (h) !start (hlen - !start)) (n) in
  if (idx >= 0) then (
  result := (List.append !result [(!start + idx)]);
  start := ((!start + idx) + nlen);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

let rec display nums =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (nums)) do
    try
  if (!i > 0) then (
  s := (!s ^ ", ");
  );
  s := (!s ^ (string_of_int (List.nth (nums) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let texts = ref (["GCTAGCTCTACGAGTCTA"; "GGCTATAATGCGTA"; "there would have been a time for such a word"; "needle need noodle needle"; "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages"; "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."]) in
  let patterns = ref (["TCTA"; "TAATAAA"; "word"; "needle"; "and"; "alfalfa"]) in
  let i = ref (0) in
  (try while (!i < List.length (!texts)) do
    try
  print_endline (((("text" ^ (string_of_int ((!i + 1)))) ^ " = ") ^ List.nth (!texts) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  let j = ref (0) in
  (try while (!j < List.length (!texts)) do
    try
  let idxs = ref (stringSearch (List.nth (!texts) (!j)) (List.nth (!patterns) (!j))) in
  print_endline (((((("Found \"" ^ List.nth (!patterns) (!j)) ^ "\" in 'text") ^ (string_of_int ((!j + 1)))) ^ "' at indexes ") ^ display (!idxs)));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
