(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Return

let rec add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("x", Obj.repr (((Obj.obj (List.assoc ("x") a) : float) +. (Obj.obj (List.assoc ("x") b) : float)))); ("y", Obj.repr (((Obj.obj (List.assoc ("y") a) : float) +. (Obj.obj (List.assoc ("y") b) : float)))); ("z", Obj.repr (((Obj.obj (List.assoc ("z") a) : float) +. (Obj.obj (List.assoc ("z") b) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("x", Obj.repr (((Obj.obj (List.assoc ("x") a) : float) -. (Obj.obj (List.assoc ("x") b) : float)))); ("y", Obj.repr (((Obj.obj (List.assoc ("y") a) : float) -. (Obj.obj (List.assoc ("y") b) : float)))); ("z", Obj.repr (((Obj.obj (List.assoc ("z") a) : float) -. (Obj.obj (List.assoc ("z") b) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul v s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let s = (Obj.magic s : float) in
  __ret := (Obj.magic ([("x", Obj.repr (((Obj.obj (List.assoc ("x") v) : float) *. s))); ("y", Obj.repr (((Obj.obj (List.assoc ("y") v) : float) *. s))); ("z", Obj.repr (((Obj.obj (List.assoc ("z") v) : float) *. s)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref 0.0 in
  (try
  __ret := (Obj.magic (((((Obj.obj (List.assoc ("x") a) : float) *. (Obj.obj (List.assoc ("x") b) : float)) +. ((Obj.obj (List.assoc ("y") a) : float) *. (Obj.obj (List.assoc ("y") b) : float))) +. ((Obj.obj (List.assoc ("z") a) : float) *. (Obj.obj (List.assoc ("z") b) : float)))) : float); raise Return
  with Return -> !__ret)

and intersectPoint rv rp pn pp =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let diff = sub (rp) (pp) in
  let prod1 = dot (diff) (pn) in
  let prod2 = dot (rv) (pn) in
  let prod3 = (prod1 /. prod2) in
  __ret := (Obj.magic (sub (rp) (mul (rv) (prod3))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let rv = [("x", Obj.repr (0.0)); ("y", Obj.repr ((-.(1.0)))); ("z", Obj.repr ((-.(1.0))))] in
  let rp = [("x", Obj.repr (0.0)); ("y", Obj.repr (0.0)); ("z", Obj.repr (10.0))] in
  let pn = [("x", Obj.repr (0.0)); ("y", Obj.repr (0.0)); ("z", Obj.repr (1.0))] in
  let pp = [("x", Obj.repr (0.0)); ("y", Obj.repr (0.0)); ("z", Obj.repr (5.0))] in
  let ip = intersectPoint (rv) (rp) (pn) (pp) in
  print_endline ((((((("The ray intersects the plane at (" ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("x") ip) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("y") ip) : float)))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("z") ip) : float)))) ^ ")"));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()