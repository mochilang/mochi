(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let target = "METHINKS IT IS LIKE A WEASEL"
let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
let seed = ref (1)
let rec randInt s n =
  let __ret = ref ([] : int list) in
  (try
  let s = (Obj.magic s : int) in
  let n = (Obj.magic n : int) in
  let next = (((s * 1664525) + 1013904223) mod 2147483647) in
  __ret := (Obj.magic ([next; (next mod n)]) : int list); raise Return
  with Return -> !__ret)

and randChar () =
  let __ret = ref "" in
  (try
  let r = ref (randInt (Obj.repr (!seed)) (Obj.repr (String.length (chars)))) in
  seed := List.nth (!r) (0);
  let idx = List.nth (!r) (1) in
  __ret := (Obj.magic (String.sub chars (idx) ((idx + 1) - idx)) : string); raise Return
  with Return -> !__ret)

and randomString n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ randChar ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and fitness s =
  let __ret = ref 0 in
  (try
  let h = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (target)) do
    try
  if (String.sub s (!i) ((!i + 1) - !i) <> String.sub target (!i) ((!i + 1) - !i)) then (
  h := (!h + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : int); raise Return
  with Return -> !__ret)

and mutate p =
  let __ret = ref "" in
  (try
  let m = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (p)) do
    try
  let r = ref (randInt (Obj.repr (!seed)) (Obj.repr (20))) in
  seed := List.nth (!r) (0);
  if (List.nth (!r) (1) = 0) then (
  m := (!m ^ randChar ());
  ) else (
  m := (!m ^ String.sub p (!i) ((!i + 1) - !i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let parent = ref (randomString (Obj.repr (String.length (target)))) in
  print_endline (__show !parent);
  let best = ref (fitness (!parent)) in
  let done_ = ref (false) in
  (try while not (!done_) do
    try
  let i = ref (0) in
  (try while (!i < 20) do
    try
  let child = mutate (!parent) in
  let f = fitness (child) in
  if (f < !best) then (
  best := f;
  parent := child;
  print_endline (__show !parent);
  if (!best = 0) then (
  done_ := true;
  raise Break;
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()