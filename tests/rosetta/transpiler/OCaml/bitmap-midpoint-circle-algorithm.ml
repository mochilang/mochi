(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec initGrid size =
  let __ret = ref ([] : string list list) in
  (try
  let size = (Obj.magic size : int) in
  let g = ref ([]) in
  let y = ref (0) in
  (try while (!y < size) do
    try
  let row = ref ([]) in
  let x = ref (0) in
  (try while (!x < size) do
    try
  row := List.append !row [" "];
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  g := List.append !g [!row];
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : string list list); raise Return
  with Return -> !__ret)

let rec set g x y =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  if ((((x >= 0) && (x < List.length (List.nth (!g) (0)))) && (y >= 0)) && (y < List.length (!g))) then (
  g := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = x then "#" else __x) (List.nth (!g) (y))) else __x) (!g));
  );
    !__ret
  with Return -> !__ret)

let rec circle r =
  let __ret = ref ([] : string list list) in
  (try
  let r = (Obj.magic r : int) in
  let size = ((r * 2) + 1) in
  let g = ref (initGrid (size)) in
  let x = ref (r) in
  let y = ref (0) in
  let err = ref ((1 - r)) in
  (try while (!y <= !x) do
    try
  ignore (set (g) ((r + !x)) ((r + !y)));
  ignore (set (g) ((r + !y)) ((r + !x)));
  ignore (set (g) ((r - !x)) ((r + !y)));
  ignore (set (g) ((r - !y)) ((r + !x)));
  ignore (set (g) ((r - !x)) ((r - !y)));
  ignore (set (g) ((r - !y)) ((r - !x)));
  ignore (set (g) ((r + !x)) ((r - !y)));
  ignore (set (g) ((r + !y)) ((r - !x)));
  y := (!y + 1);
  if (!err < 0) then (
  err := ((!err + (2 * !y)) + 1);
  ) else (
  x := (!x - 1);
  err := ((!err + (2 * (!y - !x))) + 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : string list list); raise Return
  with Return -> !__ret)

let rec trimRight row =
  let __ret = ref "" in
  (try
  let end_ = ref (List.length (row)) in
  (try while ((!end_ > 0) && (List.nth (row) ((!end_ - 1)) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < !end_) do
    try
  s := (!s ^ List.nth (row) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let g = ref (circle (10))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun row ->
    try
  print_endline (trimRight (row));
    with Continue -> ()) !g with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
