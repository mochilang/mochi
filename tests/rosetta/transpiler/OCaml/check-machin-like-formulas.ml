(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec br n d =
  let __ret = ref (Q.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let d = (Obj.magic d : int) in
  __ret := (Obj.magic ((Q.div ((Q.of_int (n))) ((Q.of_int (d))))) : Q.t); raise Return
  with Return -> !__ret)

and format ts =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (ts)) do
    try
  let t = ref (List.nth (ts) (!i)) in
  s := (((((((!s ^ "{") ^ (string_of_int ((try List.assoc ("a") !t with Not_found -> (Obj.magic 0))))) ^ " ") ^ (string_of_int ((try List.assoc ("n") !t with Not_found -> (Obj.magic 0))))) ^ " ") ^ (string_of_int ((try List.assoc ("d") !t with Not_found -> (Obj.magic 0))))) ^ "}");
  if (!i < (List.length (ts) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!s ^ "]")) : string); raise Return
  with Return -> !__ret)

and tanEval coef f =
  let __ret = ref (Q.of_int 0) in
  (try
  let coef = (Obj.magic coef : int) in
  if (coef = 1) then (
  __ret := (Obj.magic (f) : Q.t); raise Return
  );
  if (coef < 0) then (
  __ret := (Obj.magic ((Q.neg (tanEval (Obj.repr (-(coef))) (f)))) : Q.t); raise Return
  );
  let ca = (coef / 2) in
  let cb = (coef - ca) in
  let a = tanEval (Obj.repr (ca)) (f) in
  let b = tanEval (Obj.repr (cb)) (f) in
  __ret := (Obj.magic ((Q.div ((Q.add (a) (b))) ((Q.sub ((Q.of_int (1))) ((Q.mul (a) (b))))))) : Q.t); raise Return
  with Return -> !__ret)

and tans m =
  let __ret = ref (Q.of_int 0) in
  (try
  if (List.length (m) = 1) then (
  let t = ref (List.nth (m) (0)) in
  __ret := (Obj.magic (tanEval (Obj.repr ((try List.assoc ("a") !t with Not_found -> (Obj.magic 0)))) (br (Obj.repr ((try List.assoc ("n") !t with Not_found -> (Obj.magic 0)))) (Obj.repr ((try List.assoc ("d") !t with Not_found -> (Obj.magic 0)))))) : Q.t); raise Return
  );
  let half = (List.length (m) / 2) in
  let a = tans (List.of_seq (Seq.take (half - 0) (Seq.drop 0 (List.to_seq m)))) in
  let b = tans (List.of_seq (Seq.take (List.length (m) - half) (Seq.drop half (List.to_seq m)))) in
  __ret := (Obj.magic ((Q.div ((Q.add (a) (b))) ((Q.sub ((Q.of_int (1))) ((Q.mul (a) (b))))))) : Q.t); raise Return
  with Return -> !__ret)


let () =
  let testCases = ref ([[[("a", 1); ("n", 1); ("d", 2)]; [("a", 1); ("n", 1); ("d", 3)]]; [[("a", 2); ("n", 1); ("d", 3)]; [("a", 1); ("n", 1); ("d", 7)]]; [[("a", 4); ("n", 1); ("d", 5)]; [("a", -(1)); ("n", 1); ("d", 239)]]; [[("a", 5); ("n", 1); ("d", 7)]; [("a", 2); ("n", 3); ("d", 79)]]; [[("a", 1); ("n", 1); ("d", 2)]; [("a", 1); ("n", 1); ("d", 5)]; [("a", 1); ("n", 1); ("d", 8)]]; [[("a", 4); ("n", 1); ("d", 5)]; [("a", -(1)); ("n", 1); ("d", 70)]; [("a", 1); ("n", 1); ("d", 99)]]; [[("a", 5); ("n", 1); ("d", 7)]; [("a", 4); ("n", 1); ("d", 53)]; [("a", 2); ("n", 1); ("d", 4443)]]; [[("a", 6); ("n", 1); ("d", 8)]; [("a", 2); ("n", 1); ("d", 57)]; [("a", 1); ("n", 1); ("d", 239)]]; [[("a", 8); ("n", 1); ("d", 10)]; [("a", -(1)); ("n", 1); ("d", 239)]; [("a", -(4)); ("n", 1); ("d", 515)]]; [[("a", 12); ("n", 1); ("d", 18)]; [("a", 8); ("n", 1); ("d", 57)]; [("a", -(5)); ("n", 1); ("d", 239)]]; [[("a", 16); ("n", 1); ("d", 21)]; [("a", 3); ("n", 1); ("d", 239)]; [("a", 4); ("n", 3); ("d", 1042)]]; [[("a", 22); ("n", 1); ("d", 28)]; [("a", 2); ("n", 1); ("d", 443)]; [("a", -(5)); ("n", 1); ("d", 1393)]; [("a", -(10)); ("n", 1); ("d", 11018)]]; [[("a", 22); ("n", 1); ("d", 38)]; [("a", 17); ("n", 7); ("d", 601)]; [("a", 10); ("n", 7); ("d", 8149)]]; [[("a", 44); ("n", 1); ("d", 57)]; [("a", 7); ("n", 1); ("d", 239)]; [("a", -(12)); ("n", 1); ("d", 682)]; [("a", 24); ("n", 1); ("d", 12943)]]; [[("a", 88); ("n", 1); ("d", 172)]; [("a", 51); ("n", 1); ("d", 239)]; [("a", 32); ("n", 1); ("d", 682)]; [("a", 44); ("n", 1); ("d", 5357)]; [("a", 68); ("n", 1); ("d", 12943)]]; [[("a", 88); ("n", 1); ("d", 172)]; [("a", 51); ("n", 1); ("d", 239)]; [("a", 32); ("n", 1); ("d", 682)]; [("a", 44); ("n", 1); ("d", 5357)]; [("a", 68); ("n", 1); ("d", 12944)]]]) in
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun ts ->
    try
  print_endline (((("tan " ^ format (ts)) ^ " = ") ^ (Q.to_string (tans (ts)))));
    with Continue -> ()) (!testCases) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()