(* Generated by Mochi transpiler v0.10.39 on 2025-07-24 19:43 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let dim = 16
let rec newPile d =
  let __ret = ref [] in
  (try
  let b = ref ([]) in
  let y = ref (0) in
  (try while (!y < d) do
    try
  let row = ref ([]) in
  let x = ref (0) in
  (try while (!x < d) do
    try
  row := List.append !row [0];
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  b := List.append !b [!row];
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !b; raise Return;
  __ret := !b;
    !__ret
  with Return -> !__ret)

let rec handlePile pile x y =
  let __ret = ref [] in
  (try
  if (List.nth (List.nth (!pile) (y)) (x) >= 4) then (
  pile := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = x then (List.nth (List.nth (!pile) (y)) (x) - 4) else __x) (List.nth (!pile) (y))) else __x) (!pile));
  if (y > 0) then (
  pile := (List.mapi (fun __i __x -> if __i = (y - 1) then (List.mapi (fun __i __x -> if __i = x then (List.nth (List.nth (!pile) ((y - 1))) (x) + 1) else __x) (List.nth (!pile) ((y - 1)))) else __x) (!pile));
  if (List.nth (List.nth (!pile) ((y - 1))) (x) >= 4) then (
  pile := handlePile (pile) (x) ((y - 1));
  );
  );
  if (x > 0) then (
  pile := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = (x - 1) then (List.nth (List.nth (!pile) (y)) ((x - 1)) + 1) else __x) (List.nth (!pile) (y))) else __x) (!pile));
  if (List.nth (List.nth (!pile) (y)) ((x - 1)) >= 4) then (
  pile := handlePile (pile) ((x - 1)) (y);
  );
  );
  if (y < (dim - 1)) then (
  pile := (List.mapi (fun __i __x -> if __i = (y + 1) then (List.mapi (fun __i __x -> if __i = x then (List.nth (List.nth (!pile) ((y + 1))) (x) + 1) else __x) (List.nth (!pile) ((y + 1)))) else __x) (!pile));
  if (List.nth (List.nth (!pile) ((y + 1))) (x) >= 4) then (
  pile := handlePile (pile) (x) ((y + 1));
  );
  );
  if (x < (dim - 1)) then (
  pile := (List.mapi (fun __i __x -> if __i = y then (List.mapi (fun __i __x -> if __i = (x + 1) then (List.nth (List.nth (!pile) (y)) ((x + 1)) + 1) else __x) (List.nth (!pile) (y))) else __x) (!pile));
  if (List.nth (List.nth (!pile) (y)) ((x + 1)) >= 4) then (
  pile := handlePile (pile) ((x + 1)) (y);
  );
  );
  pile := handlePile (pile) (x) (y);
  );
  __ret := !pile; raise Return;
  __ret := !pile;
    !__ret
  with Return -> !__ret)

let rec drawPile pile d =
  let __ret = ref () in
  (try
  let chars = ref ([" "; "░"; "▓"; "█"]) in
  let row = ref (0) in
  (try while (!row < d) do
    try
  let line = ref ("") in
  let col = ref (0) in
  (try while (!col < d) do
    try
  let v = ref (List.nth (List.nth (pile) (!row)) (!col)) in
  if (!v > 3) then (
  v := 3;
  );
  line := (!line ^ List.nth (!chars) (!v));
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  row := (!row + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let pile = ref (newPile (16)) in
  let hdim = 7 in
  pile := (List.mapi (fun __i __x -> if __i = hdim then (List.mapi (fun __i __x -> if __i = hdim then 16 else __x) (List.nth (!pile) (hdim))) else __x) (!pile));
  pile := handlePile (pile) (hdim) (hdim);
  ignore (drawPile (!pile) (16));
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
