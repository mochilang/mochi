(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec getDivisors n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let divs = ref ([1; n]) in
  let i = ref (2) in
  (try while ((!i * !i) <= n) do
    try
  if ((n mod !i) = 0) then (
  let j = (n / !i) in
  divs := (List.append (!divs) [(Obj.magic (!i) : int)]);
  if (!i <> j) then (
  divs := (List.append (!divs) [(Obj.magic (j) : int)]);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!divs) : int list); raise Return
  with Return -> !__ret)

and sum xs =
  let __ret = ref 0 in
  (try
  let s = ref (0) in
  (try List.iter (fun x ->
    try
  s := (!s + x);
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (!s) : int); raise Return
  with Return -> !__ret)

and isPartSum divs target =
  let __ret = ref false in
  (try
  let target = (Obj.magic target : int) in
  let possible = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i <= target) do
    try
  possible := (List.append (!possible) [(Obj.magic (false) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  possible := (List.mapi (fun __i __x -> if __i = 0 then true else __x) (!possible));
  (try List.iter (fun v ->
    try
  let s = ref (target) in
  (try while (!s >= v) do
    try
  if List.nth (!possible) ((!s - v)) then (
  possible := (List.mapi (fun __i __x -> if __i = !s then true else __x) (!possible));
  );
  s := (!s - 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()) (divs) with Break -> ());
  __ret := (Obj.magic (List.nth (!possible) (target)) : bool); raise Return
  with Return -> !__ret)

and isZumkeller n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let divs = ref (getDivisors (Obj.repr (n))) in
  let s = (List.fold_left (fun acc x -> acc + x) 0 !divs) in
  if ((s mod 2) = 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 1) then (
  let abundance = (s - (2 * n)) in
  __ret := (Obj.magic (((abundance > 0) && ((abundance mod 2) = 0))) : bool); raise Return
  );
  __ret := (Obj.magic (isPartSum (!divs) (Obj.repr ((s / 2)))) : bool); raise Return
  with Return -> !__ret)

and pad n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("The first 220 Zumkeller numbers are:");
  let count = ref (0) in
  let line = ref ("") in
  let i = ref (2) in
  (try while (!count < 220) do
    try
  if isZumkeller (Obj.repr (!i)) then (
  line := ((!line ^ pad (Obj.repr (!i)) (Obj.repr (3))) ^ " ");
  count := (!count + 1);
  if ((!count mod 20) = 0) then (
  print_endline (String.sub !line (0) ((String.length (!line) - 1) - 0));
  line := "";
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("\nThe first 40 odd Zumkeller numbers are:");
  count := 0;
  line := "";
  i := 3;
  (try while (!count < 40) do
    try
  if isZumkeller (Obj.repr (!i)) then (
  line := ((!line ^ pad (Obj.repr (!i)) (Obj.repr (5))) ^ " ");
  count := (!count + 1);
  if ((!count mod 10) = 0) then (
  print_endline (String.sub !line (0) ((String.length (!line) - 1) - 0));
  line := "";
  );
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  print_endline ("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:");
  count := 0;
  line := "";
  i := 3;
  (try while (!count < 40) do
    try
  if (((!i mod 10) <> 5) && isZumkeller (Obj.repr (!i))) then (
  line := ((!line ^ pad (Obj.repr (!i)) (Obj.repr (7))) ^ " ");
  count := (!count + 1);
  if ((!count mod 8) = 0) then (
  print_endline (String.sub !line (0) ((String.length (!line) - 1) - 0));
  line := "";
  );
  );
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()