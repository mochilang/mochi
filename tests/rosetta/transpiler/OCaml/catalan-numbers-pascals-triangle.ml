(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let n = 15
let t = ref (([] : int list))
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try for _ = 0 to ((n + 2) - 1) do
    try
  t := (List.append !t [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  t := (List.mapi (fun __i __x -> if __i = 1 then 1 else __x) (!t));
  (try for i = 1 to ((n + 1) - 1) do
    try
  let j = ref (i) in
  (try while (!j > 1) do
    try
  t := (List.mapi (fun __i __x -> if __i = !j then (List.nth (!t) (!j) + List.nth (!t) ((!j - 1))) else __x) (!t));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  t := (List.mapi (fun __i __x -> if __i = (i + 1) then List.nth (!t) (i) else __x) (!t));
  j := (i + 1);
  (try while (!j > 1) do
    try
  t := (List.mapi (fun __i __x -> if __i = !j then (List.nth (!t) (!j) + List.nth (!t) ((!j - 1))) else __x) (!t));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  let cat = (List.nth (!t) ((i + 1)) - List.nth (!t) (i)) in
  if (i < 10) then (
  print_endline ((((" " ^ (string_of_int (i))) ^ " : ") ^ (string_of_int (cat))));
  ) else (
  print_endline ((((string_of_int (i)) ^ " : ") ^ (string_of_int (cat))));
  );
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
