(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec image () =
  let __ret = ref ([] : int list list) in
  (try
  __ret := (Obj.magic ([[0; 0; 10000]; [65535; 65535; 65535]; [65535; 65535; 65535]]) : int list list); raise Return
  with Return -> !__ret)

let rec histogram g bins =
  let __ret = ref ([] : int list) in
  (try
  bins := (Obj.magic !bins : int);
  if (!bins <= 0) then (
  bins := List.length (List.nth (g) (0));
  );
  let h = ref ([]) in
  let i = ref (0) in
  (try while (!i < !bins) do
    try
  h := List.append !h [0];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let y = ref (0) in
  (try while (!y < List.length (g)) do
    try
  let row = ref (List.nth (g) (!y)) in
  let x = ref (0) in
  (try while (!x < List.length (!row)) do
    try
  let p = ref (List.nth (!row) (!x)) in
  let idx = ref (((!p * (!bins - 1)) / 65535)) in
  h := (List.mapi (fun __i __x -> if __i = !idx then (List.nth (!h) (!idx) + 1) else __x) (!h));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : int list); raise Return
  with Return -> !__ret)

let rec medianThreshold h =
  let __ret = ref 0 in
  (try
  let lb = ref (0) in
  let ub = ref ((List.length (h) - 1)) in
  let lSum = ref (0) in
  let uSum = ref (0) in
  (try while (!lb <= !ub) do
    try
  if ((!lSum + List.nth (h) (!lb)) < (!uSum + List.nth (h) (!ub))) then (
  lSum := (!lSum + List.nth (h) (!lb));
  lb := (!lb + 1);
  ) else (
  uSum := (!uSum + List.nth (h) (!ub));
  ub := (!ub - 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((!ub * 65535) / List.length (h))) : int); raise Return
  with Return -> !__ret)

let rec threshold g t =
  let __ret = ref ([] : int list list) in
  (try
  let t = (Obj.magic t : int) in
  let out = ref ([]) in
  let y = ref (0) in
  (try while (!y < List.length (g)) do
    try
  let row = ref (List.nth (g) (!y)) in
  let newRow = ref ([]) in
  let x = ref (0) in
  (try while (!x < List.length (!row)) do
    try
  if (List.nth (!row) (!x) < t) then (
  newRow := List.append !newRow [0];
  ) else (
  newRow := List.append !newRow [65535];
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := List.append !out [!newRow];
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : int list list); raise Return
  with Return -> !__ret)

let rec printImage g =
  let __ret = ref (Obj.magic 0) in
  (try
  let y = ref (0) in
  (try while (!y < List.length (g)) do
    try
  let row = ref (List.nth (g) (!y)) in
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < List.length (!row)) do
    try
  if (List.nth (!row) (!x) = 0) then (
  line := (!line ^ "0");
  ) else (
  line := (!line ^ "1");
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let img = ref (image ()) in
  let h = ref (histogram (!img) (ref (0))) in
  print_endline (("Histogram: " ^ __show (!h)));
  let t = medianThreshold (!h) in
  print_endline (("Threshold: " ^ (string_of_int (t))));
  let bw = ref (threshold (!img) (t)) in
  ignore (printImage (!bw));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
