(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:20 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let facts = ref ([1])
let n = ref (1)
let () =
  (try while (!n < 12) do
    try
  facts := (List.append (!facts) [(Obj.magic ((List.nth (!facts) ((!n - 1)) * !n)) : int)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  (try for b = 9 to (13 - 1) do
    try
  print_endline ((("The factorions for base " ^ (string_of_int (b))) ^ " are:"));
  let line = ref ("") in
  let i = ref (1) in
  (try while (!i < 1500000) do
    try
  let m = ref (!i) in
  let sum = ref (0) in
  (try while (!m > 0) do
    try
  let d = (!m mod b) in
  sum := (!sum + List.nth (!facts) (d));
  m := (!m / b);
    with Continue -> ()
  done with Break -> ());
  if (!sum = !i) then (
  line := ((!line ^ (string_of_int (!i))) ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  print_endline ("");
    with Continue -> ()
  done with Break -> ());
  ()