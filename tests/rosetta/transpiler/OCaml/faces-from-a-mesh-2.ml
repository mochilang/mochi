(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:20 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec contains xs v =
  let __ret = ref false in
  (try
  let v = (Obj.magic v : int) in
  (try List.iter (fun x ->
    try
  if (x = v) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and copyInts xs =
  let __ret = ref ([] : int list) in
  (try
  let out = ref (([] : int list)) in
  (try List.iter (fun x ->
    try
  out := (List.append (!out) [(Obj.magic (x) : int)]);
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (!out) : int list); raise Return
  with Return -> !__ret)

and sliceEqual a b =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if (List.nth (a) (!i) <> List.nth (b) (!i)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and reverse xs =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  let j = ref ((List.length (!xs) - 1)) in
  (try while (!i < !j) do
    try
  let t = List.nth (!xs) (!i) in
  xs := (List.mapi (fun __i __x -> if __i = !i then List.nth (!xs) (!j) else __x) (!xs));
  xs := (List.mapi (fun __i __x -> if __i = !j then t else __x) (!xs));
  i := (!i + 1);
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and perimEqual p1 p2 =
  let __ret = ref false in
  (try
  if (List.length (p1) <> List.length (p2)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  (try List.iter (fun v ->
    try
  if not (contains (p2) (Obj.repr (v))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) (p1) with Break -> ());
  let c = ref (copyInts (p1)) in
  let r = ref (0) in
  (try while (!r < 2) do
    try
  let i = ref (0) in
  (try while (!i < List.length (!c)) do
    try
  if sliceEqual (!c) (p2) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let t = List.nth (!c) ((List.length (!c) - 1)) in
  let j = ref ((List.length (!c) - 1)) in
  (try while (!j > 0) do
    try
  c := (List.mapi (fun __i __x -> if __i = !j then List.nth (!c) ((!j - 1)) else __x) (!c));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  c := (List.mapi (fun __i __x -> if __i = 0 then t else __x) (!c));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (reverse (c));
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and sortEdges es =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  let arr = ref (es) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  let a = ref (List.nth (!arr) (!j)) in
  let b = ref (List.nth (!arr) ((!j + 1))) in
  if (((Obj.obj (List.assoc ("a") (!a) : Obj.t)) > (Obj.obj (List.assoc ("a") (!b) : Obj.t))) || (((Obj.obj (List.assoc ("a") (!a) : Obj.t)) = (Obj.obj (List.assoc ("a") (!b) : Obj.t))) && ((Obj.obj (List.assoc ("b") (!a) : Obj.t)) > (Obj.obj (List.assoc ("b") (!b) : Obj.t))))) then (
  arr := (List.mapi (fun __i __x -> if __i = !j then !b else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !a else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and concat a b =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  let out = ref (([] : (string * Obj.t) list list)) in
  (try List.iter (fun x ->
    try
  out := (List.append (!out) [(Obj.magic (x) : (string * Obj.t) list)]);
    with Continue -> ()) (a) with Break -> ());
  (try List.iter (fun x ->
    try
  out := (List.append (!out) [(Obj.magic (x) : (string * Obj.t) list)]);
    with Continue -> ()) (b) with Break -> ());
  __ret := (Obj.magic (!out) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and faceToPerim face =
  let __ret = ref (Obj.magic 0) in
  (try
  let le = ref (List.length (face)) in
  if (!le = 0) then (
  __ret := Obj.repr (nil); raise Return
  );
  let edges = ref (([] : (string * Obj.t) list list)) in
  let i = ref (0) in
  (try while (!i < !le) do
    try
  let e = ref (List.nth (face) (!i)) in
  if ((Obj.obj (List.assoc ("b") (!e) : Obj.t)) <= (Obj.obj (List.assoc ("a") (!e) : Obj.t))) then (
  __ret := Obj.repr (nil); raise Return
  );
  edges := (List.append (!edges) [(Obj.magic (!e) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  edges := sortEdges (!edges);
  let firstEdge = ref (List.nth (!edges) (0)) in
  let perim = ref ([(Obj.obj (List.assoc ("a") (!firstEdge) : Obj.t)); (Obj.obj (List.assoc ("b") (!firstEdge) : Obj.t))]) in
  let first = ref ((Obj.obj (List.assoc ("a") (!firstEdge) : Obj.t))) in
  let last = ref ((Obj.obj (List.assoc ("b") (!firstEdge) : Obj.t))) in
  edges := List.of_seq (Seq.take (List.length (!edges) - 1) (Seq.drop 1 (List.to_seq (!edges))));
  le := List.length (!edges);
  let done_ = ref (false) in
  (try while ((!le > 0) && not (!done_)) do
    try
  let idx = ref (0) in
  let found = ref (false) in
  (try while (!idx < !le) do
    try
  let e = List.nth (!edges) (!idx) in
  if ((Obj.obj (List.assoc ("a") (e) : Obj.t)) = !last) then (
  perim := (List.append (!perim) [(Obj.magic ((Obj.obj (List.assoc ("b") (e) : Obj.t))) : int)]);
  last := (Obj.obj (List.assoc ("b") (e) : Obj.t));
  found := true;
  ) else (
  if ((Obj.obj (List.assoc ("b") (e) : Obj.t)) = !last) then (
  perim := (List.append (!perim) [(Obj.magic ((Obj.obj (List.assoc ("a") (e) : Obj.t))) : int)]);
  last := (Obj.obj (List.assoc ("a") (e) : Obj.t));
  found := true;
  );
  );
  if !found then (
  edges := concat (List.of_seq (Seq.take (!idx - 0) (Seq.drop 0 (List.to_seq (!edges))))) (List.of_seq (Seq.take (List.length (!edges) - (!idx + 1)) (Seq.drop (!idx + 1) (List.to_seq (!edges)))));
  le := (!le - 1);
  if (!last = !first) then (
  if (!le = 0) then (
  done_ := true;
  ) else (
  __ret := Obj.repr (nil); raise Return
  );
  );
  raise Break;
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  __ret := Obj.repr (nil); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := Obj.repr (List.of_seq (Seq.take ((List.length (!perim) - 1) - 0) (Seq.drop 0 (List.to_seq (!perim))))); raise Return
  with Return -> !__ret)

and listStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("Perimeter format equality checks:");
  print_endline (("  Q == R is " ^ __show (perimEqual ([8; 1; 3]) ([1; 3; 8]))));
  print_endline (("  U == V is " ^ __show (perimEqual ([18; 8; 14; 10; 12; 17; 19]) ([8; 14; 10; 12; 17; 19; 18]))));
  let e = ref ([[("a", Obj.repr (7)); ("b", Obj.repr (11))]; [("a", Obj.repr (1)); ("b", Obj.repr (11))]; [("a", Obj.repr (1)); ("b", Obj.repr (7))]]) in
  let f = ref ([[("a", Obj.repr (11)); ("b", Obj.repr (23))]; [("a", Obj.repr (1)); ("b", Obj.repr (17))]; [("a", Obj.repr (17)); ("b", Obj.repr (23))]; [("a", Obj.repr (1)); ("b", Obj.repr (11))]]) in
  let g = ref ([[("a", Obj.repr (8)); ("b", Obj.repr (14))]; [("a", Obj.repr (17)); ("b", Obj.repr (19))]; [("a", Obj.repr (10)); ("b", Obj.repr (12))]; [("a", Obj.repr (10)); ("b", Obj.repr (14))]; [("a", Obj.repr (12)); ("b", Obj.repr (17))]; [("a", Obj.repr (8)); ("b", Obj.repr (18))]; [("a", Obj.repr (18)); ("b", Obj.repr (19))]]) in
  let h = ref ([[("a", Obj.repr (1)); ("b", Obj.repr (3))]; [("a", Obj.repr (9)); ("b", Obj.repr (11))]; [("a", Obj.repr (3)); ("b", Obj.repr (11))]; [("a", Obj.repr (1)); ("b", Obj.repr (11))]]) in
  print_endline ("\nEdge to perimeter format translations:");
  let faces = ref ([!e; !f; !g; !h]) in
  let names = ref (["E"; "F"; "G"; "H"]) in
  let idx = ref (0) in
  (try while (!idx < List.length (!faces)) do
    try
  let per = faceToPerim (List.nth (!faces) (!idx)) in
  if (per = nil) then (
  print_endline ((("  " ^ List.nth (!names) (!idx)) ^ " => Invalid edge format"));
  ) else (
  print_endline (((("  " ^ List.nth (!names) (!idx)) ^ " => ") ^ listStr ((Obj.magic per : int list))));
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()