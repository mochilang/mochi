(* Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:04 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec validComb a b c d e f g =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let d = (Obj.magic d : int) in
  let e = (Obj.magic e : int) in
  let f = (Obj.magic f : int) in
  let g = (Obj.magic g : int) in
  let square1 = (a + b) in
  let square2 = ((b + c) + d) in
  let square3 = ((d + e) + f) in
  let square4 = (f + g) in
  __ret := (((square1 = square2) && (square2 = square3)) && (square3 = square4)); raise Return
  with Return -> !__ret)

let rec isUnique a b c d e f g =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let d = (Obj.magic d : int) in
  let e = (Obj.magic e : int) in
  let f = (Obj.magic f : int) in
  let g = (Obj.magic g : int) in
  let nums = ref ([a; b; c; d; e; f; g]) in
  let i = ref (0) in
  (try while (!i < List.length (!nums)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < List.length (!nums)) do
    try
  if (List.nth (!nums) (!i) = List.nth (!nums) (!j)) then (
  __ret := false; raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := true; raise Return
  with Return -> !__ret)

let rec getCombs low high unique =
  let __ret = ref [] in
  (try
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  let valid = ref ([]) in
  let count = ref (0) in
  (try for b = low to ((high + 1) - 1) do
    try
  (try for c = low to ((high + 1) - 1) do
    try
  (try for d = low to ((high + 1) - 1) do
    try
  let s = ((b + c) + d) in
  (try for e = low to ((high + 1) - 1) do
    try
  (try for f = low to ((high + 1) - 1) do
    try
  let a = (s - b) in
  let g = (s - f) in
  if ((a < low) || (a > high)) then (
  raise Continue;
  );
  if ((g < low) || (g > high)) then (
  raise Continue;
  );
  if (((d + e) + f) <> s) then (
  raise Continue;
  );
  if ((f + g) <> s) then (
  raise Continue;
  );
  if (not (unique) || isUnique (a) (b) (c) (d) (e) (f) (g)) then (
  valid := List.append !valid [[a; b; c; d; e; f; g]];
  count := (!count + 1);
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := [("count", Obj.repr !count); ("list", Obj.repr !valid)]; raise Return
  with Return -> !__ret)

let r1 = ref (getCombs (1) (7) (true))
let r2 = ref (getCombs (3) (9) (true))
let r3 = ref (getCombs (0) (9) (false))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__show ((Obj.obj (List.assoc ("count") !r1) : Obj.t)) ^ " unique solutions in 1 to 7"));
  print_endline (__show (Obj.obj (List.assoc ("list") !r1) : Obj.t));
  print_endline ((__show ((Obj.obj (List.assoc ("count") !r2) : Obj.t)) ^ " unique solutions in 3 to 9"));
  print_endline (__show (Obj.obj (List.assoc ("list") !r2) : Obj.t));
  print_endline ((__show ((Obj.obj (List.assoc ("count") !r3) : Obj.t)) ^ " non-unique solutions in 0 to 9"));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
