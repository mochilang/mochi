(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec leapYear y =
  let __ret = ref false in
  (try
  let y = (Obj.magic y : int) in
  __ret := (Obj.magic (((((y mod 4) = 0) && ((y mod 100) <> 0)) || ((y mod 400) = 0))) : bool); raise Return
  with Return -> !__ret)

and monthDays y m =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let days = ref ([0; 31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31]) in
  if ((m = 2) && leapYear (y)) then (
  __ret := (Obj.magic (29) : int); raise Return
  );
  __ret := (Obj.magic (List.nth (!days) (m)) : int); raise Return
  with Return -> !__ret)

and zeller y m d =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  let mm = ref (m) in
  let yy = ref (y) in
  if (!mm < 3) then (
  mm := (!mm + 12);
  yy := (!yy - 1);
  );
  let _k = (!yy mod 100) in
  let _j = (!yy / 100) in
  let h = ((((((d + ((13 * (!mm + 1)) / 5)) + _k) + (_k / 4)) + (_j / 4)) + (5 * _j)) mod 7) in
  __ret := (Obj.magic (((h + 6) mod 7)) : int); raise Return
  with Return -> !__ret)

and lastSunday y m =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let day = ref (monthDays (y) (m)) in
  (try while ((!day > 0) && (zeller (y) (m) (!day) <> 0)) do
    try
  day := (!day - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!day) : int); raise Return
  with Return -> !__ret)

and monthName m =
  let __ret = ref "" in
  (try
  let m = (Obj.magic m : int) in
  let names = ref ([""; "January"; "February"; "March"; "April"; "May"; "June"; "July"; "August"; "September"; "October"; "November"; "December"]) in
  __ret := (Obj.magic (List.nth (!names) (m)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let year = int_of_string ((try read_line () with End_of_file -> "")) in
  print_endline (("Last Sundays of each month of " ^ (string_of_int (year))));
  print_endline ("==================================");
  let m = ref (1) in
  (try while (!m <= 12) do
    try
  let day = lastSunday (year) (!m) in
  print_endline (((monthName (!m) ^ ": ") ^ (string_of_int (day))));
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()