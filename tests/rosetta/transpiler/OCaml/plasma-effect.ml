(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 22:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec floorf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let i = ref ((Obj.magic x : int)) in
  if (float_of_int (!i) > x) then (
  i := (!i - 1);
  );
  __ret := (Obj.magic (float_of_int (!i)) : float); raise Return
  with Return -> !__ret)

and frac x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((x -. floorf (Obj.repr (x)))) : float); raise Return
  with Return -> !__ret)

and sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= float_of_int (0)) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)


let nframes = 10
let w = 32
let h = 32
let total = ref (0)
let f = ref (1)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!f <= nframes) do
    try
  let y = ref (0) in
  (try while (!y < h) do
    try
  let x = ref (0) in
  (try while (!x < w) do
    try
  let fx = float_of_int (!x) in
  let fy = float_of_int (!y) in
  let value = ref (sinApprox (Obj.repr ((fx /. 16.0)))) in
  value := (!value +. sinApprox (Obj.repr ((fy /. 8.0))));
  value := (!value +. sinApprox (Obj.repr (((fx +. fy) /. 16.0))));
  value := (!value +. sinApprox (Obj.repr ((sqrtApprox (Obj.repr (((fx *. fx) +. (fy *. fy)))) /. 8.0))));
  value := (!value +. 4.0);
  value := (!value /. 8.0);
  let rem = frac (Obj.repr ((!value +. (float_of_int (!f) /. float_of_int (nframes))))) in
  let ci = ((Obj.magic (float_of_int (nframes) *. rem) : int) + 1) in
  total := (!total + ci);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  f := (!f + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (string_of_int !total);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()