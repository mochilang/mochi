(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec examineAndModify f =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  print_endline (((((((((" v: {" ^ (string_of_int ((Obj.obj (List.assoc ("Exported") !f) : int)))) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc ("unexported") !f) : int)))) ^ "} = {") ^ (string_of_int ((Obj.obj (List.assoc ("Exported") !f) : int)))) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc ("unexported") !f) : int)))) ^ "}"));
  print_endline ("    Idx Name       Type CanSet");
  print_endline ("     0: Exported   int  true");
  print_endline ("     1: unexported int  false");
  f := (("Exported", Obj.repr (16)) :: List.remove_assoc "Exported" (Obj.magic (!f) : (string * Obj.t) list));
  f := (("unexported", Obj.repr (44)) :: List.remove_assoc "unexported" (Obj.magic (!f) : (string * Obj.t) list));
  print_endline ("  modified unexported field via unsafe");
  __ret := (Obj.magic (!f) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec anotherExample () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("bufio.ReadByte returned error: unsafely injected error value into bufio inner workings");
    !__ret
  with Return -> !__ret)

let obj = ref ([("Exported", Obj.repr 12); ("unexported", Obj.repr 42)])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((((("obj: {" ^ (string_of_int ((Obj.obj (List.assoc ("Exported") !obj) : int)))) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc ("unexported") !obj) : int)))) ^ "}"));
  obj := examineAndModify (obj);
  print_endline ((((("obj: {" ^ (string_of_int ((Obj.obj (List.assoc ("Exported") !obj) : int)))) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc ("unexported") !obj) : int)))) ^ "}"));
  ignore (anotherExample ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
