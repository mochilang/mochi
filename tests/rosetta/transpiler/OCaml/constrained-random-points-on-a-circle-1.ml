(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let nPts = 100
let rMin = 10
let rMax = 15
let r = ref (0)
let u = ref (0)
let seen = ref ([])
let n = ref (0)
let i = ref (0)
let () =
  let rows = ref (([] : string list list)) in
  let mem_start = _mem () in
  let start = _now () in
  let span = ((rMax + 1) + rMax) in
  (try while (!r < span) do
    try
  let row = ref (([] : string list)) in
  let c = ref (0) in
  (try while (!c < (span * 2)) do
    try
  row := (List.append (!row) [(Obj.magic (" ") : string)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  rows := (List.append (!rows) [(Obj.magic (!row) : string list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let min2 = (rMin * rMin) in
  let max2 = (rMax * rMax) in
  (try while (!n < nPts) do
    try
  let x = ref (((_now () mod span) - rMax)) in
  let y = ref (((_now () mod span) - rMax)) in
  let rs = ((!x * !x) + (!y * !y)) in
  if ((rs < min2) || (rs > max2)) then (
  raise Continue;
  );
  n := (!n + 1);
  let row = (!y + rMax) in
  let col = ((!x + rMax) * 2) in
  rows := (List.mapi (fun __i __x -> if __i = row then (List.mapi (fun __i __x -> if __i = col then "*" else __x) (List.nth (!rows) (row))) else __x) (!rows));
  let key = (((string_of_int (row)) ^ ",") ^ (string_of_int (col))) in
  if not ((try List.assoc (key) !seen with Not_found -> (Obj.magic 0))) then (
  seen := ((key, true) :: List.remove_assoc (key) !seen);
  u := (!u + 1);
  );
    with Continue -> ()
  done with Break -> ());
  (try while (!i < span) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < (span * 2)) do
    try
  line := (!line ^ List.nth (List.nth (!rows) (!i)) (!j));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (((string_of_int (!u)) ^ " unique points"));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()