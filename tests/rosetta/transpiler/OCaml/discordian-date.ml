(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let dayNames = ref (["Sweetmorn"; "Boomtime"; "Pungenday"; "Prickle-Prickle"; "Setting Orange"])
let seasons = ref (["Chaos"; "Discord"; "Confusion"; "Bureaucracy"; "The Aftermath"])
let holydays = ref ([["Mungday"; "Chaoflux"]; ["Mojoday"; "Discoflux"]; ["Syaday"; "Confuflux"]; ["Zaraday"; "Bureflux"]; ["Maladay"; "Afflux"]])
let rec isLeap y =
  let __ret = ref false in
  (try
  let y = (Obj.magic y : int) in
  if ((y mod 400) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  if ((y mod 100) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic (((y mod 4) = 0)) : bool); raise Return
  with Return -> !__ret)


let daysBefore = ref ([0; 31; 59; 90; 120; 151; 181; 212; 243; 273; 304; 334])
let rec dayOfYear y m d =
  let __ret = ref 0 in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  let doy = ref ((List.nth (!daysBefore) ((m - 1)) + d)) in
  if ((m > 2) && isLeap (Obj.repr (y))) then (
  doy := (!doy + 1);
  );
  __ret := (Obj.magic (!doy) : int); raise Return
  with Return -> !__ret)

and ordinal n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let suff = ref ("th") in
  let mod100 = (n mod 100) in
  if ((mod100 < 11) || (mod100 > 13)) then (
  let r = (n mod 10) in
  if (r = 1) then (
  suff := "st";
  ) else (
  if (r = 2) then (
  suff := "nd";
  ) else (
  if (r = 3) then (
  suff := "rd";
  );
  );
  );
  );
  __ret := (Obj.magic (((string_of_int (n)) ^ !suff)) : string); raise Return
  with Return -> !__ret)

and discordian y m d =
  let __ret = ref "" in
  (try
  let y = (Obj.magic y : int) in
  let m = (Obj.magic m : int) in
  let d = (Obj.magic d : int) in
  if ((isLeap (Obj.repr (y)) && (m = 2)) && (d = 29)) then (
  __ret := (Obj.magic (("St. Tib's Day, YOLD " ^ (string_of_int ((y + 1166))))) : string); raise Return
  );
  let doy = ref (dayOfYear (Obj.repr (y)) (Obj.repr (m)) (Obj.repr (d))) in
  if (isLeap (Obj.repr (y)) && (!doy > 60)) then (
  doy := (!doy - 1);
  );
  let idx = ref ((!doy - 1)) in
  let season = (!idx / 73) in
  let day = (!idx mod 73) in
  let res = ref (((((((List.nth (!dayNames) ((!idx mod 5)) ^ ", the ") ^ ordinal (Obj.repr ((day + 1)))) ^ " day of ") ^ List.nth (!seasons) (season)) ^ " in the YOLD ") ^ (string_of_int ((y + 1166))))) in
  if (day = 4) then (
  res := (((!res ^ ". Celebrate ") ^ List.nth (List.nth (!holydays) (season)) (0)) ^ "!");
  );
  if (day = 49) then (
  res := (((!res ^ ". Celebrate ") ^ List.nth (List.nth (!holydays) (season)) (1)) ^ "!");
  );
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let dates = ref ([[2010; 7; 22]; [2012; 2; 28]; [2012; 2; 29]; [2012; 3; 1]; [2012; 12; 31]; [2013; 1; 1]; [2100; 12; 31]; [2015; 10; 19]; [2010; 1; 5]; [2011; 5; 3]; [2000; 3; 13]]) in
  let i = ref (0) in
  (try while (!i < List.length (!dates)) do
    try
  let dt = ref (List.nth (!dates) (!i)) in
  print_endline (discordian (Obj.repr (List.nth (!dt) (0))) (Obj.repr (List.nth (!dt) (1))) (Obj.repr (List.nth (!dt) (2))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()