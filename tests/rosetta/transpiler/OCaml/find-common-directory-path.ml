(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec splitPath p =
  let __ret = ref ([] : string list) in
  (try
  let parts = ref (([] : string list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (p)) do
    try
  if (String.sub (p) !i ((!i + 1) - !i) = "/") then (
  if (!cur <> "") then (
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  cur := "";
  );
  ) else (
  cur := (!cur ^ String.sub (p) !i ((!i + 1) - !i));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!cur <> "") then (
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  );
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and joinPath parts =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (parts)) do
    try
  s := ((!s ^ "/") ^ List.nth (parts) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and commonPrefix paths =
  let __ret = ref "" in
  (try
  if (List.length (paths) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let base = ref (splitPath (List.nth (paths) (0))) in
  let i = ref (0) in
  let prefix = ref (([] : string list)) in
  (try while (!i < List.length (!base)) do
    try
  let comp = List.nth (!base) (!i) in
  let ok = ref (true) in
  (try List.iter (fun p ->
    try
  let parts = ref (splitPath (p)) in
  if ((!i >= List.length (!parts)) || (List.nth (!parts) (!i) <> comp)) then (
  ok := false;
  raise Break;
  );
    with Continue -> ()) (paths) with Break -> ());
  if !ok then (
  prefix := (List.append (!prefix) [(Obj.magic (comp) : string)]);
  ) else (
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (joinPath (!prefix)) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let paths = ref (["/home/user1/tmp/coverage/test"; "/home/user1/tmp/covert/operator"; "/home/user1/tmp/coven/members"; "/home//user1/tmp/coventry"; "/home/user1/././tmp/covertly/foo"; "/home/bob/../user1/tmp/coved/bar"]) in
  let c = commonPrefix (!paths) in
  if (c = "") then (
  print_endline ("No common path");
  ) else (
  print_endline (("Common path: " ^ c));
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()