(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sortFloat xs =
  let __ret = ref ([] : (float) list) in
  (try
  let arr = ref (xs) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let t = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then t else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : float list); raise Return
  with Return -> !__ret)

and median s =
  let __ret = ref 0.0 in
  (try
  let n = List.length (s) in
  if ((n mod 2) = 1) then (
  __ret := (Obj.magic (List.nth (s) ((n / 2))) : float); raise Return
  );
  __ret := (Obj.magic (((List.nth (s) (((n / 2) - 1)) +. List.nth (s) ((n / 2))) /. 2.0)) : float); raise Return
  with Return -> !__ret)

and fivenum xs =
  let __ret = ref ([] : (float) list) in
  (try
  let s = ref (sortFloat (xs)) in
  let n = List.length (!s) in
  let q1 = List.nth (!s) (((n - 1) / 4)) in
  let med = median (!s) in
  let q3 = List.nth (!s) (((3 * (n - 1)) / 4)) in
  __ret := (Obj.magic ([List.nth (!s) (0); q1; med; q3; List.nth (!s) ((n - 1))]) : float list); raise Return
  with Return -> !__ret)


let x1 = ref ([36.0; 40.0; 7.0; 39.0; 41.0; 15.0])
let x2 = ref ([15.0; 6.0; 42.0; 41.0; 7.0; 36.0; 49.0; 40.0; 39.0; 47.0; 43.0])
let x3 = ref ([0.14082834; 0.0974879; 1.73131507; 0.87636009; (-.(1.95059594)); 0.73438555; (-.(0.03035726)); 1.4667597; (-.(0.74621349)); (-.(0.72588772)); 0.6390516; 0.61501527; (-.(0.9898378)); (-.(1.00447874)); (-.(0.62759469)); 0.66206163; 1.04312009; (-.(0.10305385)); 0.75775634; 0.32566578])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (__show (fivenum (!x1))));
  print_endline (__show (__show (fivenum (!x2))));
  print_endline (__show (__show (fivenum (!x3))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()