(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let extensions = ref (["zip"; "rar"; "7z"; "gz"; "archive"; "A##"; "tar.bz2"])
let rec endsWith s suf =
  let __ret = ref false in
  (try
  if (String.length (s) < String.length (suf)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  __ret := (Obj.magic ((String.sub (s) (String.length (s) - String.length (suf)) (String.length (s) - (String.length (s) - String.length (suf))) = suf)) : bool); raise Return
  with Return -> !__ret)

and lastIndexOf s sub =
  let __ret = ref 0 in
  (try
  let idx = ref ((0 - 1)) in
  let i = ref (0) in
  (try while (!i <= (String.length (s) - String.length (sub))) do
    try
  if (String.sub (s) !i ((!i + String.length (sub)) - !i) = sub) then (
  idx := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!idx) : int); raise Return
  with Return -> !__ret)

and fileExtInList filename =
  let __ret = ref [] in
  (try
  let fl = String.lowercase_ascii (filename) in
  (try List.iter (fun ext ->
    try
  let ext2 = ("." ^ String.lowercase_ascii (ext)) in
  if endsWith (fl) (ext2) then (
  __ret := (Obj.magic ([Obj.repr (true); Obj.repr (ext)]) : Obj.t list); raise Return
  );
    with Continue -> ()) (!extensions) with Break -> ());
  let idx = lastIndexOf (filename) (".") in
  if (idx <> (0 - 1)) then (
  let t = String.sub (filename) (idx + 1) (String.length (filename) - (idx + 1)) in
  if (t <> "") then (
  __ret := (Obj.magic ([Obj.repr (false); Obj.repr (t)]) : Obj.t list); raise Return
  );
  __ret := (Obj.magic ([Obj.repr (false); Obj.repr ("<empty>")]) : Obj.t list); raise Return
  );
  __ret := (Obj.magic ([Obj.repr (false); Obj.repr ("<none>")]) : Obj.t list); raise Return
  with Return -> !__ret)

and pad s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let t = ref (s) in
  (try while (String.length (!t) < w) do
    try
  t := (!t ^ " ");
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("The listed extensions are:");
  print_endline (__show !extensions);
  let tests = ref (["MyData.a##"; "MyData.tar.Gz"; "MyData.gzip"; "MyData.7z.backup"; "MyData..."; "MyData"; "MyData_v1.0.tar.bz2"; "MyData_v1.0.bz2"]) in
  (try List.iter (fun t ->
    try
  let res = ref (fileExtInList (t)) in
  let ok = List.nth (!res) (0) in
  let ext = (Obj.magic List.nth (!res) (1) : string) in
  print_endline ((((((pad (t) (Obj.repr (20)) ^ " => ") ^ __show (ok)) ^ "  (extension = ") ^ ext) ^ ")"));
    with Continue -> ()) (!tests) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()