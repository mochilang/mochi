(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let ops = ref (["-x.p(e)"; "-(x).p(e)"; "(-x).p(e)"; "-(x.p(e))"])
let rec p x e =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let e = (Obj.magic e : float) in
  let r = ref (1.0) in
  let i = ref (0) in
  (try while (!i < (Obj.magic e : int)) do
    try
  r := (!r *. x);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : float); raise Return
  with Return -> !__ret)

and padInt f =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : float) in
  let s = (string_of_int ((Obj.magic f : int))) in
  if (f >= float_of_int (0)) then (
  __ret := (Obj.magic ((" " ^ s)) : string); raise Return
  );
  __ret := (Obj.magic (s) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun x ->
    try
  (try List.iter (fun e ->
    try
  let a = (-.(p (Obj.repr (x)) (Obj.repr (e)))) in
  let b = (-.(p (Obj.repr (x)) (Obj.repr (e)))) in
  let c = p (Obj.repr ((-.(x)))) (Obj.repr (e)) in
  let d = (-.(p (Obj.repr (x)) (Obj.repr (e)))) in
  print_endline ((((((((((((((((((((("x = " ^ if (x < float_of_int (0)) then "" else " ") ^ (string_of_int ((Obj.magic x : int)))) ^ " e = ") ^ (string_of_int ((Obj.magic e : int)))) ^ " | ") ^ List.nth (!ops) (0)) ^ " = ") ^ padInt (Obj.repr (a))) ^ " | ") ^ List.nth (!ops) (1)) ^ " = ") ^ padInt (Obj.repr (b))) ^ " | ") ^ List.nth (!ops) (2)) ^ " = ") ^ padInt (Obj.repr (c))) ^ " | ") ^ List.nth (!ops) (3)) ^ " = ") ^ padInt (Obj.repr (d))));
    with Continue -> ()) ([2.0; 3.0]) with Break -> ());
    with Continue -> ()) ([(-.(5.0)); 5.0]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()