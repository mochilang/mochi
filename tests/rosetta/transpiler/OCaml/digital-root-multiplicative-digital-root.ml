(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:06 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pad s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let out = ref (s) in
  (try while (String.length (!out) < width) do
    try
  out := (" " ^ !out);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and mult n base =
  let __ret = ref (Z.of_int 0) in
  (try
  let base = (Obj.magic base : int) in
  let m = ref ((Z.of_int (1))) in
  let x = ref (n) in
  let b = (Z.of_int (base)) in
  (try while (!x > (Z.of_int (0))) do
    try
  m := (Z.mul (!m) ((Z.rem (!x) (b))));
  x := (Z.div (!x) (b));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!m) : Z.t); raise Return
  with Return -> !__ret)

and multDigitalRoot n base =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let base = (Obj.magic base : int) in
  let m = ref (n) in
  let mp = ref (0) in
  let b = (Z.of_int (base)) in
  (try while (!m >= b) do
    try
  m := mult (!m) (Obj.repr (base));
  mp := (!mp + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("mp", Obj.repr (!mp)); ("mdr", Obj.repr (Z.to_int !m))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let base = 10 in
  let size = 5 in
  print_endline (((((pad ("Number") (Obj.repr (20)) ^ " ") ^ pad ("MDR") (Obj.repr (3))) ^ " ") ^ pad ("MP") (Obj.repr (3))));
  let nums = ref ([(Z.of_int (123321)); (Z.of_int (7739)); (Z.of_int (893)); (Z.of_int (899998)); (Z.of_int (3778888999)); (Z.of_int (277777788888899))]) in
  let i = ref (0) in
  (try while (!i < List.length (!nums)) do
    try
  let n = List.nth (!nums) (!i) in
  let r = multDigitalRoot (n) (Obj.repr (base)) in
  print_endline (((((pad ((Z.to_string (n))) (Obj.repr (20)) ^ " ") ^ pad ((string_of_int ((Obj.obj (List.assoc ("mdr") r) : int)))) (Obj.repr (3))) ^ " ") ^ pad ((string_of_int ((Obj.obj (List.assoc ("mp") r) : int)))) (Obj.repr (3))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  let list = ref (([] : int list list)) in
  let idx = ref (0) in
  (try while (!idx < base) do
    try
  list := (List.append (!list) [(Obj.magic ([]) : int list)]);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let cnt = ref ((size * base)) in
  let n = ref ((Z.of_int (0))) in
  let b = (Z.of_int (base)) in
  (try while (!cnt > 0) do
    try
  let r = multDigitalRoot (!n) (Obj.repr (base)) in
  let mdr = (Obj.obj (List.assoc ("mdr") r) : int) in
  if (List.length (List.nth (!list) (mdr)) < size) then (
  list := (List.mapi (fun __i __x -> if __i = mdr then (List.append (List.nth (!list) (mdr)) [(Obj.magic (Z.to_int !n) : int)]) else __x) (!list));
  cnt := (!cnt - 1);
  );
  n := (Z.add (!n) ((Z.of_int (1))));
    with Continue -> ()
  done with Break -> ());
  print_endline ("MDR: First");
  let j = ref (0) in
  (try while (!j < base) do
    try
  print_endline (((pad ((string_of_int (!j))) (Obj.repr (3)) ^ ": ") ^ __show (List.nth (!list) (!j))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()