(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _limit = 999999
let rec primesUpTo n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let sieve = ref (([] : bool list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  sieve := (List.append (!sieve) [(Obj.magic (true) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let p = ref (2) in
  (try while ((!p * !p) <= n) do
    try
  if List.nth (!sieve) (!p) then (
  let m = ref ((!p * !p)) in
  (try while (!m <= n) do
    try
  sieve := (List.mapi (fun __i __x -> if __i = !m then false else __x) (!sieve));
  m := (!m + !p);
    with Continue -> ()
  done with Break -> ());
  );
  p := (!p + 1);
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : int list)) in
  let x = ref (2) in
  (try while (!x <= n) do
    try
  if List.nth (!sieve) (!x) then (
  res := (List.append (!res) [(Obj.magic (!x) : int)]);
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and longestSeq dir =
  let __ret = ref (Obj.magic 0) in
  (try
  let pd = ref (0) in
  let longSeqs = ref ([[2]]) in
  let currSeq = ref ([2]) in
  let i = ref (1) in
  (try while (!i < List.length (!primes)) do
    try
  let d = (List.nth (!primes) (!i) - List.nth (!primes) ((!i - 1))) in
  if (((dir = "ascending") && (d <= !pd)) || ((dir = "descending") && (d >= !pd))) then (
  if (List.length (!currSeq) > List.length (List.nth (!longSeqs) (0))) then (
  longSeqs := [!currSeq];
  ) else (
  if (List.length (!currSeq) = List.length (List.nth (!longSeqs) (0))) then (
  longSeqs := (List.append (!longSeqs) [(Obj.magic (!currSeq) : int list)]);
  );
  );
  currSeq := [List.nth (!primes) ((!i - 1)); List.nth (!primes) (!i)];
  ) else (
  currSeq := (List.append (!currSeq) [(Obj.magic (List.nth (!primes) (!i)) : int)]);
  );
  pd := d;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!currSeq) > List.length (List.nth (!longSeqs) (0))) then (
  longSeqs := [!currSeq];
  ) else (
  if (List.length (!currSeq) = List.length (List.nth (!longSeqs) (0))) then (
  longSeqs := (List.append (!longSeqs) [(Obj.magic (!currSeq) : int list)]);
  );
  );
  print_endline ((((("Longest run(s) of primes with " ^ dir) ^ " differences is ") ^ (string_of_int (List.length (List.nth (!longSeqs) (0))))) ^ " :"));
  (try List.iter (fun ls ->
    try
  let diffs = ref (([] : int list)) in
  let j = ref (1) in
  (try while (!j < List.length (ls)) do
    try
  diffs := (List.append (!diffs) [(Obj.magic ((List.nth (ls) (!j) - List.nth (ls) ((!j - 1)))) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let k = ref (0) in
  (try while (!k < (List.length (ls) - 1)) do
    try
  print_endline (((((string_of_int (List.nth (ls) (!k))) ^ " (") ^ (string_of_int (List.nth (!diffs) (!k)))) ^ ") "));
  print_endline (string_of_bool false);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((string_of_int (List.nth (ls) ((List.length (ls) - 1)))));
    with Continue -> ()) (!longSeqs) with Break -> ());
  print_endline ("");
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("For primes < 1 million:\n");
  (try List.iter (fun dir ->
    try
  ignore (longestSeq (dir));
    with Continue -> ()) (["ascending"; "descending"]) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let primes = ref (primesUpTo (Obj.repr (_limit))) in
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()