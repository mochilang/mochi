(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let digits = ref ([1; 3; 7; 9])
let q = ref ([1; 2; 3; 5; 7; 9])
let fq = ref ([1; 2; 3; 5; 7; 9])
let count = ref (0)
let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic ((n = 3)) : bool); raise Return
  );
  let d = ref (5) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 4);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and isCircular n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let nn = ref (n) in
  let pow = ref (1) in
  (try while (!nn > 0) do
    try
  pow := (!pow * 10);
  nn := (!nn / 10);
    with Continue -> ()
  done with Break -> ());
  nn := n;
  (try while true do
    try
  nn := (!nn * 10);
  let f = (!nn / !pow) in
  nn := (!nn + (f * (1 - !pow)));
  if (!nn = n) then (
  raise Break;
  );
  if not (isPrime (Obj.repr (!nn))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and showList xs =
  let __ret = ref "" in
  (try
  let out = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  out := (!out ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  out := (!out ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!out ^ "]")) : string); raise Return
  with Return -> !__ret)


let () =
  let circs = ref (([] : int list)) in
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("The first 19 circular primes are:");
  (try while true do
    try
  let f = List.nth (!q) (0) in
  let fd = List.nth (!fq) (0) in
  if (isPrime (Obj.repr (f)) && isCircular (Obj.repr (f))) then (
  circs := (List.append (!circs) [(Obj.magic (f) : int)]);
  count := (!count + 1);
  if (!count = 19) then (
  raise Break;
  );
  );
  q := List.of_seq (Seq.take (List.length (!q) - 1) (Seq.drop 1 (List.to_seq !q)));
  fq := List.of_seq (Seq.take (List.length (!fq) - 1) (Seq.drop 1 (List.to_seq !fq)));
  if ((f <> 2) && (f <> 5)) then (
  (try List.iter (fun d ->
    try
  q := (List.append (!q) [(Obj.magic (((f * 10) + d)) : int)]);
  fq := (List.append (!fq) [(Obj.magic (fd) : int)]);
    with Continue -> ()) (!digits) with Break -> ());
  );
    with Continue -> ()
  done with Break -> ());
  print_endline (showList (!circs));
  print_endline ("\nThe next 4 circular primes, in repunit format, are:");
  print_endline ("[R(19) R(23) R(317) R(1031)]");
  print_endline ("\nThe following repunits are probably circular primes:");
  (try List.iter (fun i ->
    try
  print_endline ((("R(" ^ (string_of_int (i))) ^ ") : true"));
    with Continue -> ()) ([5003; 9887; 15073; 25031; 35317; 49081]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()