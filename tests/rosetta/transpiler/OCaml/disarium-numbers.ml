(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1) in
  let i = ref (0) in
  (try while (!i < exp) do
    try
  result := (!result * base);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and isDisarium n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let digits = ref (([] : int list)) in
  let x = ref (n) in
  if (!x = 0) then (
  digits := (List.append (!digits) [(Obj.magic (0) : int)]);
  );
  (try while (!x > 0) do
    try
  digits := (List.append (!digits) [(Obj.magic ((!x mod 10)) : int)]);
  x := (!x / 10);
    with Continue -> ()
  done with Break -> ());
  let sum = ref (0) in
  let pos = ref (1) in
  let i = ref ((List.length (!digits) - 1)) in
  (try while (!i >= 0) do
    try
  sum := (!sum + pow (Obj.repr (List.nth (!digits) (!i))) (Obj.repr (!pos)));
  pos := (!pos + 1);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum = n)) : bool); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let count = ref (0) in
  let n = ref (0) in
  (try while ((!count < 19) && (!n < 3000000)) do
    try
  if isDisarium (Obj.repr (!n)) then (
  print_endline ((string_of_int (!n)));
  count := (!count + 1);
  );
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((("\nFound the first " ^ (string_of_int (!count))) ^ " Disarium numbers."));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()