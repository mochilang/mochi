(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec newList () =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("nodes", Obj.repr ([])); ("head", Obj.repr (0)); ("tail", Obj.repr (0)); ("nextID", Obj.repr (1))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and newNode l v =
  let __ret = ref [] in
  (try
  let id = (Obj.obj (List.assoc ("nextID") !l) : int) in
  l := (("nextID", Obj.repr ((id + 1))) :: List.remove_assoc ("nextID") (Obj.magic (!l) : (string * Obj.t) list));
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  let n = ref ([("id", Obj.repr (id)); ("value", Obj.repr (v)); ("next", Obj.repr (0)); ("prev", Obj.repr (0))]) in
  nodes := ((id, Obj.repr (!n)) :: List.remove_assoc (id) (Obj.magic (!nodes) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  __ret := (Obj.magic (!n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pushFront l v =
  let __ret = ref [] in
  (try
  let n = ref (newNode (l) (v)) in
  n := (("next", Obj.repr ((Obj.obj (List.assoc ("head") !l) : int))) :: List.remove_assoc ("next") (Obj.magic (!n) : (string * Obj.t) list));
  if ((Obj.obj (List.assoc ("head") !l) : int) <> 0) then (
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  let h = ref ((Obj.obj (List.assoc ((Obj.obj (List.assoc ("head") !l) : int)) !nodes) : (string * Obj.t) list)) in
  h := (("prev", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("prev") !h);
  nodes := (((Obj.magic (try List.assoc ("id") !h with Not_found -> 0) : int), Obj.repr (!h)) :: List.remove_assoc ((Obj.magic (try List.assoc ("id") !h with Not_found -> 0) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  ) else (
  l := (("tail", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("tail") (Obj.magic (!l) : (string * Obj.t) list));
  );
  l := (("head", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("head") (Obj.magic (!l) : (string * Obj.t) list));
  let nodes2 = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  nodes2 := (((Obj.obj (List.assoc ("id") !n) : int), Obj.repr (!n)) :: List.remove_assoc ((Obj.obj (List.assoc ("id") !n) : int)) (Obj.magic (!nodes2) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes2)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  __ret := (Obj.magic (!n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and pushBack l v =
  let __ret = ref [] in
  (try
  let n = ref (newNode (l) (v)) in
  n := (("prev", Obj.repr ((Obj.obj (List.assoc ("tail") !l) : int))) :: List.remove_assoc ("prev") (Obj.magic (!n) : (string * Obj.t) list));
  if ((Obj.obj (List.assoc ("tail") !l) : int) <> 0) then (
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  let t = ref ((Obj.obj (List.assoc ((Obj.obj (List.assoc ("tail") !l) : int)) !nodes) : (string * Obj.t) list)) in
  t := (("next", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("next") !t);
  nodes := (((Obj.magic (try List.assoc ("id") !t with Not_found -> 0) : int), Obj.repr (!t)) :: List.remove_assoc ((Obj.magic (try List.assoc ("id") !t with Not_found -> 0) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  ) else (
  l := (("head", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("head") (Obj.magic (!l) : (string * Obj.t) list));
  );
  l := (("tail", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("tail") (Obj.magic (!l) : (string * Obj.t) list));
  let nodes2 = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  nodes2 := (((Obj.obj (List.assoc ("id") !n) : int), Obj.repr (!n)) :: List.remove_assoc ((Obj.obj (List.assoc ("id") !n) : int)) (Obj.magic (!nodes2) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes2)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  __ret := (Obj.magic (!n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insertBefore l refID v =
  let __ret = ref [] in
  (try
  let refID = (Obj.magic refID : int) in
  if (refID = 0) then (
  __ret := (Obj.magic (pushFront (l) (v)) : (string * Obj.t) list); raise Return
  );
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  let ref_ = ref ((Obj.obj (List.assoc (refID) !nodes) : (string * Obj.t) list)) in
  let n = ref (newNode (l) (v)) in
  n := (("prev", Obj.repr ((try List.assoc ("prev") !ref_ with Not_found -> 0))) :: List.remove_assoc ("prev") (Obj.magic (!n) : (string * Obj.t) list));
  n := (("next", Obj.repr ((try List.assoc ("id") !ref_ with Not_found -> 0))) :: List.remove_assoc ("next") (Obj.magic (!n) : (string * Obj.t) list));
  if ((Obj.magic (try List.assoc ("prev") !ref_ with Not_found -> 0) : int) <> 0) then (
  let p = ref ((Obj.obj (List.assoc ((Obj.magic (try List.assoc ("prev") !ref_ with Not_found -> 0) : int)) !nodes) : (string * Obj.t) list)) in
  p := (("next", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("next") !p);
  nodes := (((Obj.magic (try List.assoc ("id") !p with Not_found -> 0) : int), Obj.repr (!p)) :: List.remove_assoc ((Obj.magic (try List.assoc ("id") !p with Not_found -> 0) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  ) else (
  l := (("head", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("head") (Obj.magic (!l) : (string * Obj.t) list));
  );
  ref_ := (("prev", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("prev") !ref_);
  nodes := ((refID, Obj.repr (!ref_)) :: List.remove_assoc (refID) (Obj.magic (!nodes) : (int * Obj.t) list));
  nodes := (((Obj.obj (List.assoc ("id") !n) : int), Obj.repr (!n)) :: List.remove_assoc ((Obj.obj (List.assoc ("id") !n) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  __ret := (Obj.magic (!n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and insertAfter l refID v =
  let __ret = ref [] in
  (try
  let refID = (Obj.magic refID : int) in
  if (refID = 0) then (
  __ret := (Obj.magic (pushBack (l) (v)) : (string * Obj.t) list); raise Return
  );
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : int) : (string * (string * Obj.t) list) list)) in
  let ref_ = ref ((Obj.obj (List.assoc (refID) !nodes) : (string * Obj.t) list)) in
  let n = ref (newNode (l) (v)) in
  n := (("next", Obj.repr ((try List.assoc ("next") !ref_ with Not_found -> 0))) :: List.remove_assoc ("next") (Obj.magic (!n) : (string * Obj.t) list));
  n := (("prev", Obj.repr ((try List.assoc ("id") !ref_ with Not_found -> 0))) :: List.remove_assoc ("prev") (Obj.magic (!n) : (string * Obj.t) list));
  if ((Obj.magic (try List.assoc ("next") !ref_ with Not_found -> 0) : int) <> 0) then (
  let nx = ref ((Obj.obj (List.assoc ((Obj.magic (try List.assoc ("next") !ref_ with Not_found -> 0) : int)) !nodes) : (string * Obj.t) list)) in
  nx := (("prev", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("prev") !nx);
  nodes := (((Obj.magic (try List.assoc ("id") !nx with Not_found -> 0) : int), Obj.repr (!nx)) :: List.remove_assoc ((Obj.magic (try List.assoc ("id") !nx with Not_found -> 0) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  ) else (
  l := (("tail", Obj.repr ((Obj.obj (List.assoc ("id") !n) : int))) :: List.remove_assoc ("tail") (Obj.magic (!l) : (string * Obj.t) list));
  );
  ref_ := (("next", (Obj.obj (List.assoc ("id") !n) : int)) :: List.remove_assoc ("next") !ref_);
  nodes := ((refID, Obj.repr (!ref_)) :: List.remove_assoc (refID) (Obj.magic (!nodes) : (int * Obj.t) list));
  nodes := (((Obj.obj (List.assoc ("id") !n) : int), Obj.repr (!n)) :: List.remove_assoc ((Obj.obj (List.assoc ("id") !n) : int)) (Obj.magic (!nodes) : (int * Obj.t) list));
  l := (("nodes", Obj.repr (!nodes)) :: List.remove_assoc ("nodes") (Obj.magic (!l) : (string * Obj.t) list));
  __ret := (Obj.magic (!n) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let l = ref (newList ()) in
  let e4 = ref (pushBack (l) (Obj.repr (4))) in
  let e1 = ref (pushFront (l) (Obj.repr (1))) in
  ignore (insertBefore (l) (Obj.repr ((Obj.obj (List.assoc ("id") !e4) : int))) (Obj.repr (3)));
  ignore (insertAfter (l) (Obj.repr ((Obj.obj (List.assoc ("id") !e1) : int))) ("two"));
  let id = ref ((Obj.magic (Obj.obj (List.assoc ("head") !l) : Obj.t) : int)) in
  let nodes = ref ((Obj.magic (Obj.obj (List.assoc ("nodes") !l) : Obj.t) : (string * (string * Obj.t) list) list)) in
  (try while (!id <> 0) do
    try
  let node = ref ((Obj.obj (List.assoc (!id) !nodes) : (string * Obj.t) list)) in
  print_endline (__show ((try List.assoc ("value") !node with Not_found -> 0)));
  id := (Obj.magic (try List.assoc ("next") !node with Not_found -> 0) : int);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()