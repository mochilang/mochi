(* Generated by Mochi transpiler v0.10.39 on 2025-07-24 17:44 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let ss = ref ([("runtimeFields", [])]) in
  print_endline ("Create two fields at runtime: \n");
  let i = ref (1) in
  (try while (!i <= 2) do
    try
  print_endline ((("  Field #" ^ (string_of_int (!i))) ^ ":\n"));
  print_endline ("       Enter name  : ");
  let name = (try read_line () with End_of_file -> "") in
  print_endline ("       Enter value : ");
  let value = (try read_line () with End_of_file -> "") in
  let fields = ref ((List.assoc ("runtimeFields") !ss)) in
  fields := ((name, value) :: List.remove_assoc name !fields);
  ss := (("runtimeFields", !fields) :: List.remove_assoc "runtimeFields" !ss);
  print_endline ("\n");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while true do
    try
  print_endline ("Which field do you want to inspect ? ");
  let name = (try read_line () with End_of_file -> "") in
  if (List.mem_assoc name (List.assoc ("runtimeFields") !ss)) then (
  let value = (List.assoc (name) (List.assoc ("runtimeFields") !ss)) in
  print_endline ((("Its value is '" ^ value) ^ "'"));
  __ret := (); raise Return
  ) else (
  print_endline ("There is no field of that name, try again\n");
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
