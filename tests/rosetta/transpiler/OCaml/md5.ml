(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:09 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let () =
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun pair ->
    try
  let sum = Digest.to_hex (Digest.string (List.nth (pair) (1))) in
  if (sum <> List.nth (pair) (0)) then (
  print_endline ("MD5 fail");
  print_endline ("  for string,");
  print_endline (List.nth (pair) (1));
  print_endline ("  expected:  ");
  print_endline (List.nth (pair) (0));
  print_endline ("  got:       ");
  print_endline (__show sum);
  );
    with Continue -> ()) ([["d41d8cd98f00b204e9800998ecf8427e"; ""]; ["0cc175b9c0f1b6a831c399e269772661"; "a"]; ["900150983cd24fb0d6963f7d28e17f72"; "abc"]; ["f96b697d7cb7938d525a2f31aaf161d0"; "message digest"]; ["c3fcd3d76192e4007dfb496cca67e13b"; "abcdefghijklmnopqrstuvwxyz"]; ["d174ab98d277d9f5a5611c2c9f419d9f"; "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"]; ["57edf4a22be3c955ac49da2e2107b67a"; ("12345678901234567890" ^ "123456789012345678901234567890123456789012345678901234567890")]; ["e38ca1d920c4b8b8d3946b2c72f01680"; "The quick brown fox jumped over the lazy dog's back"]]) with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()