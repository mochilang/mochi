(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let _two_pi = 6.283185307179586
let rec _mod x m =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let m = (Obj.magic m : float) in
  __ret := (Obj.magic ((x -. (float_of_int ((Obj.magic (x /. m) : int)) *. m))) : float); raise Return
  with Return -> !__ret)

and _sin x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y3 = (y2 *. y) in
  let y5 = (y3 *. y2) in
  let y7 = (y5 *. y2) in
  __ret := (Obj.magic ((((y -. (y3 /. 6.0)) +. (y5 /. 120.0)) -. (y7 /. 5040.0))) : float); raise Return
  with Return -> !__ret)

and _cos x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (_mod (Obj.repr ((x +. _pi))) (Obj.repr (_two_pi)) -. _pi) in
  let y2 = (y *. y) in
  let y4 = (y2 *. y2) in
  let y6 = (y4 *. y2) in
  __ret := (Obj.magic ((((1.0 -. (y2 /. 2.0)) +. (y4 /. 24.0)) -. (y6 /. 720.0))) : float); raise Return
  with Return -> !__ret)


let nodes = ref ([[("x", Obj.repr ((-.(1.0)))); ("y", Obj.repr ((-.(1.0)))); ("z", Obj.repr ((-.(1.0))))]; [("x", Obj.repr ((-.(1.0)))); ("y", Obj.repr ((-.(1.0)))); ("z", Obj.repr (1.0))]; [("x", Obj.repr ((-.(1.0)))); ("y", Obj.repr (1.0)); ("z", Obj.repr ((-.(1.0))))]; [("x", Obj.repr ((-.(1.0)))); ("y", Obj.repr (1.0)); ("z", Obj.repr (1.0))]; [("x", Obj.repr (1.0)); ("y", Obj.repr ((-.(1.0)))); ("z", Obj.repr ((-.(1.0))))]; [("x", Obj.repr (1.0)); ("y", Obj.repr ((-.(1.0)))); ("z", Obj.repr (1.0))]; [("x", Obj.repr (1.0)); ("y", Obj.repr (1.0)); ("z", Obj.repr ((-.(1.0))))]; [("x", Obj.repr (1.0)); ("y", Obj.repr (1.0)); ("z", Obj.repr (1.0))]])
let edges = ref ([[0; 1]; [1; 3]; [3; 2]; [2; 0]; [4; 5]; [5; 7]; [7; 6]; [6; 4]; [0; 4]; [1; 5]; [2; 6]; [3; 7]])
let rec rotate p ax ay =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let ax = (Obj.magic ax : float) in
  let ay = (Obj.magic ay : float) in
  let sinx = _sin (Obj.repr (ax)) in
  let cosx = _cos (Obj.repr (ax)) in
  let siny = _sin (Obj.repr (ay)) in
  let cosy = _cos (Obj.repr (ay)) in
  let x1 = (Obj.obj (List.assoc ("x") p) : float) in
  let y1 = (((Obj.obj (List.assoc ("y") p) : float) *. cosx) -. ((Obj.obj (List.assoc ("z") p) : float) *. sinx)) in
  let z1 = (((Obj.obj (List.assoc ("y") p) : float) *. sinx) +. ((Obj.obj (List.assoc ("z") p) : float) *. cosx)) in
  let x2 = ((x1 *. cosy) +. (z1 *. siny)) in
  let z2 = (((-.(x1)) *. siny) +. (z1 *. cosy)) in
  __ret := (Obj.magic ([("x", Obj.repr (x2)); ("y", Obj.repr (y1)); ("z", Obj.repr (z2))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let width = 40
let height = 20
let distance = 3.0
let scale = 8.0
let rec project p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let factor = (scale /. ((Obj.obj (List.assoc ("z") p) : float) +. distance)) in
  let x = ((Obj.magic ((Obj.obj (List.assoc ("x") p) : float) *. factor) : int) + (width / 2)) in
  let y = ((Obj.magic ((-.((Obj.obj (List.assoc ("y") p) : float))) *. factor) : int) + (height / 2)) in
  __ret := (Obj.magic ([("x", Obj.repr (x)); ("y", Obj.repr (y))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and clearGrid () =
  let __ret = ref ([] : string list list) in
  (try
  let g = ref (([] : string list list)) in
  let y = ref (0) in
  (try while (!y < height) do
    try
  let row = ref (([] : string list)) in
  let x = ref (0) in
  (try while (!x < width) do
    try
  row := (List.append (!row) [(Obj.magic (" ") : string)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  g := (List.append (!g) [(Obj.magic (!row) : string list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!g) : string list list); raise Return
  with Return -> !__ret)

and drawPoint g x y ch =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  if ((((x >= 0) && (x < width)) && (y >= 0)) && (y < height)) then (
  let row = ref (List.nth (!g) (y)) in
  row := (List.mapi (fun __i __x -> if __i = x then ch else __x) (!row));
  g := (List.mapi (fun __i __x -> if __i = y then !row else __x) (!g));
  );
    !__ret
  with Return -> !__ret)

and bresenham x0 y0 x1 y1 g ch =
  let __ret = ref (Obj.magic 0) in
  (try
  x0 := (Obj.magic !x0 : int);
  y0 := (Obj.magic !y0 : int);
  let x1 = (Obj.magic x1 : int) in
  let y1 = (Obj.magic y1 : int) in
  let dx = ref ((x1 - !x0)) in
  if (!dx < 0) then (
  dx := -(!dx);
  );
  let dy = ref ((y1 - !y0)) in
  if (!dy < 0) then (
  dy := -(!dy);
  );
  let sx = ref (-(1)) in
  if (!x0 < x1) then (
  sx := 1;
  );
  let sy = ref (-(1)) in
  if (!y0 < y1) then (
  sy := 1;
  );
  let err = ref ((!dx - !dy)) in
  (try while true do
    try
  ignore (drawPoint (ref (g)) (Obj.repr (!x0)) (Obj.repr (!y0)) (ch));
  if ((!x0 = x1) && (!y0 = y1)) then (
  raise Break;
  );
  let e2 = ref ((2 * !err)) in
  if (!e2 > -(!dy)) then (
  err := (!err - !dy);
  x0 := (!x0 + !sx);
  );
  if (!e2 < !dx) then (
  err := (!err + !dx);
  y0 := (!y0 + !sy);
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and render g =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let y = ref (0) in
  (try while (!y < height) do
    try
  let line = ref ("") in
  let x = ref (0) in
  (try while (!x < width) do
    try
  line := (!line ^ List.nth (List.nth (g) (!y)) (!x));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  out := ((!out ^ !line) ^ "\n");
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let f = ref (0) in
  (try while (!f < 10) do
    try
  let grid = ref (clearGrid ()) in
  let rot = ref (([] : (string * Obj.t) list list)) in
  let i = ref (0) in
  let ay = ref (((_pi /. 4.0) +. ((float_of_int (!f) *. _pi) /. 10.0))) in
  (try while (!i < List.length (!nodes)) do
    try
  let p = rotate (List.nth (!nodes) (!i)) (Obj.repr ((_pi /. 4.0))) (Obj.repr (!ay)) in
  let pp = project (p) in
  rot := (List.append (!rot) [(Obj.magic (pp) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let e = ref (0) in
  (try while (!e < List.length (!edges)) do
    try
  let a = List.nth (List.nth (!edges) (!e)) (0) in
  let b = List.nth (List.nth (!edges) (!e)) (1) in
  let p1 = List.nth (!rot) (a) in
  let p2 = List.nth (!rot) (b) in
  ignore (bresenham (ref ((Obj.obj (List.assoc ("x") p1) : int))) (ref ((Obj.obj (List.assoc ("y") p1) : int))) (Obj.repr ((Obj.obj (List.assoc ("x") p2) : int))) (Obj.repr ((Obj.obj (List.assoc ("y") p2) : int))) (!grid) ("#"));
  e := (!e + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (render (!grid));
  f := (!f + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()