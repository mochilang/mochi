(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:59 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf3 s ch start =
  let __ret = ref 0 in
  (try
  let start = (Obj.magic start : int) in
  let i = ref (start) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let digits = "0123456789" in
  let idx = ref (indexOf3 (digits) (ch) (Obj.repr (0))) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((48 + !idx)) : int); raise Return
  );
  if (ch = "X") then (
  __ret := (Obj.magic (88) : int); raise Return
  );
  if (ch = "é") then (
  __ret := (Obj.magic (233) : int); raise Return
  );
  if (ch = "😍") then (
  __ret := (Obj.magic (128525) : int); raise Return
  );
  if (ch = "🐡") then (
  __ret := (Obj.magic (128033) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and toHex n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let digits = "0123456789ABCDEF" in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let v = ref (n) in
  let out = ref ("") in
  (try while (!v > 0) do
    try
  let d = (!v mod 16) in
  out := (String.sub (digits) d ((d + 1) - d) ^ !out);
  v := (!v / 16);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and analyze s =
  let __ret = ref (Obj.magic 0) in
  (try
  let le = String.length (s) in
  print_endline ((((("Analyzing \"" ^ s) ^ "\" which has a length of ") ^ (string_of_int (le))) ^ ":"));
  if (le > 1) then (
  let i = ref (0) in
  (try while (!i < (le - 1)) do
    try
  let j = ref ((!i + 1)) in
  (try while (!j < le) do
    try
  if (String.sub (s) !j ((!j + 1) - !j) = String.sub (s) !i ((!i + 1) - !i)) then (
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  print_endline ("  Not all characters in the string are unique.");
  print_endline ((((((((("  '" ^ ch) ^ "' (0x") ^ String.lowercase_ascii (toHex (Obj.repr (ord (ch))))) ^ ") is duplicated at positions ") ^ (string_of_int ((!i + 1)))) ^ " and ") ^ (string_of_int ((!j + 1)))) ^ ".\n"));
  __ret := (); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  print_endline ("  All characters in the string are unique.\n");
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let strings = ref ([""; "."; "abcABC"; "XYZ ZYX"; "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ"; "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X"; "hétérogénéité"; "🎆🎃🎇🎈"; "😍😀🙌💃😍🙌"; "🐠🐟🐡🦈🐬🐳🐋🐡"]) in
  let i = ref (0) in
  (try while (!i < List.length !strings) do
    try
  ignore (analyze (List.nth (!strings) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()