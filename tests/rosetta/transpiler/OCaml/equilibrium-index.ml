(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 23:02 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let seed = ref ((_now () mod 2147483647))
let rec randN n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  seed := (((!seed * 1664525) + 1013904223) mod 2147483647);
  __ret := (Obj.magic ((!seed mod n)) : int); raise Return
  with Return -> !__ret)

and eqIndices xs =
  let __ret = ref ([] : int list) in
  (try
  let r = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  r := (!r + List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let l = ref (0) in
  let eq = ref (([] : int list)) in
  i := 0;
  (try while (!i < List.length (xs)) do
    try
  r := (!r - List.nth (xs) (!i));
  if (!l = !r) then (
  eq := (List.append (!eq) [(Obj.magic (!i) : int)]);
  );
  l := (!l + List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!eq) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (__show (eqIndices ([-(7); 1; 5; 2; -(4); 3; 0])));
  let verylong = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < 10000) do
    try
  seed := (((!seed * 1664525) + 1013904223) mod 2147483647);
  verylong := (List.append (!verylong) [(Obj.magic (((!seed mod 1001) - 500)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show (eqIndices (!verylong)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()