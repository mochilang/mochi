(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec digitSumMod n base =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let base = (Obj.magic base : int) in
  let sum = ref (0) in
  let j = ref (n) in
  (try while (!j > 0) do
    try
  sum := (!sum + (!j mod base));
  j := (!j / base);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!sum mod base)) : int); raise Return
  with Return -> !__ret)

and fairshareList n base =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let base = (Obj.magic base : int) in
  let res = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (List.append (!res) [(Obj.magic (digitSumMod (Obj.repr (!i)) (Obj.repr (base))) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and sortInts xs =
  let __ret = ref ([] : int list) in
  (try
  let arr = ref (xs) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let j = ref (0) in
  (try while (!j < (List.length (!arr) - 1)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let t = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then t else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and turns n base =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let base = (Obj.magic base : int) in
  let counts = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < base) do
    try
  counts := (List.append (!counts) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  let v = digitSumMod (Obj.repr (!i)) (Obj.repr (base)) in
  counts := (List.mapi (fun __i __x -> if __i = v then (List.nth (!counts) (v) + 1) else __x) (!counts));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let freq = ref ([]) in
  let fkeys = ref (([] : int list)) in
  i := 0;
  (try while (!i < base) do
    try
  let c = List.nth (!counts) (!i) in
  if (c > 0) then (
  if (List.mem_assoc c !freq) then (
  freq := ((c, ((try List.assoc (c) !freq with Not_found -> (Obj.magic 0)) + 1)) :: List.remove_assoc c !freq);
  ) else (
  freq := ((c, 1) :: List.remove_assoc c !freq);
  fkeys := (List.append (!fkeys) [(Obj.magic (c) : int)]);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let total = ref (0) in
  i := 0;
  (try while (!i < List.length (!fkeys)) do
    try
  total := (!total + (try List.assoc (List.nth (!fkeys) (!i)) !freq with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!total <> base) then (
  __ret := (Obj.magic ((("only " ^ (string_of_int (!total))) ^ " have a turn")) : string); raise Return
  );
  fkeys := sortInts (!fkeys);
  let res = ref ("") in
  i := 0;
  (try while (!i < List.length (!fkeys)) do
    try
  if (!i > 0) then (
  res := (!res ^ " or ");
  );
  res := (!res ^ (string_of_int (List.nth (!fkeys) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let bases1 = ref ([2; 3; 5; 11]) in
  let i = ref (0) in
  (try while (!i < List.length (!bases1)) do
    try
  let b = List.nth (!bases1) (!i) in
  print_endline ((((let s = (string_of_int (b)) in let l = 2 in let pch = String.get (" ") 0 in let sl = String.length s in if sl >= l then s else String.make (l - sl) pch ^ s) ^ " : ") ^ __show (fairshareList (Obj.repr (25)) (Obj.repr (b)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  print_endline ("How many times does each get a turn in 50000 iterations?");
  let bases2 = ref ([191; 1377; 49999; 50000; 50001]) in
  i := 0;
  (try while (!i < List.length (!bases2)) do
    try
  let b = List.nth (!bases2) (!i) in
  let t = turns (Obj.repr (50000)) (Obj.repr (b)) in
  print_endline (((("  With " ^ (string_of_int (b))) ^ " people: ") ^ t));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()