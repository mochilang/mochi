(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec rotate s n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  __ret := (Obj.magic ((String.sub (s) n (String.length (s) - n) ^ String.sub (s) 0 (n - 0))) : string); raise Return
  with Return -> !__ret)

let rec scrambleLeft s =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((String.sub (s) 0 (1 - 0) ^ String.sub (s) 2 (14 - 2)) ^ String.sub (s) 1 (2 - 1)) ^ String.sub (s) 14 (String.length (s) - 14))) : string); raise Return
  with Return -> !__ret)

let rec scrambleRight s =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (((((String.sub (s) 1 (3 - 1) ^ String.sub (s) 4 (15 - 4)) ^ String.sub (s) 3 (4 - 3)) ^ String.sub (s) 15 (String.length (s) - 15)) ^ String.sub (s) 0 (1 - 0))) : string); raise Return
  with Return -> !__ret)

let rec chao text encode =
  let __ret = ref "" in
  (try
  let left = ref ("HXUCZVAMDSLKPEFJRIGTWOBNYQ") in
  let right = ref ("PTLNBQDEOYSFAVZKGJRIHWXUMC") in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let ch = String.sub (text) !i ((!i + 1) - !i) in
  let idx = ref (0) in
  if encode then (
  idx := (try String.index (!right) (String.get (ch) 0) with Not_found -> -1);
  out := (!out ^ String.sub (!left) !idx ((!idx + 1) - !idx));
  ) else (
  idx := (try String.index (!left) (String.get (ch) 0) with Not_found -> -1);
  out := (!out ^ String.sub (!right) !idx ((!idx + 1) - !idx));
  );
  left := rotate (!left) (!idx);
  right := rotate (!right) (!idx);
  left := scrambleLeft (!left);
  right := scrambleRight (!right);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let plain = "WELLDONEISBETTERTHANWELLSAID" in
  let cipher = chao (plain) (true) in
  print_endline (__show plain);
  print_endline (__show cipher);
  print_endline (chao (cipher) (false));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
