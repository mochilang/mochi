(* Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec poolPut p x =
  let __ret = ref ([] : int list) in
  (try
  let x = (Obj.magic x : int) in
  __ret := (Obj.magic (List.append p [x]) : int list); raise Return
  with Return -> !__ret)

let rec poolGet p =
  let __ret = ref [] in
  (try
  if (List.length (!p) = 0) then (
  print_endline ("pool empty");
  __ret := (Obj.magic ([("pool", Obj.repr !p); ("val", Obj.repr 0)]) : (string * Obj.t) list); raise Return
  );
  let idx = (List.length (!p) - 1) in
  let v = List.nth (!p) (idx) in
  p := List.of_seq (Seq.take (idx - 0) (Seq.drop 0 (List.to_seq !p)));
  __ret := (Obj.magic ([("pool", Obj.repr !p); ("val", Obj.repr v)]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec clearPool p =
  let __ret = ref ([] : int list) in
  (try
  __ret := (Obj.magic ([]) : int list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let pool = ref ([]) in
  let i = ref (1) in
  let j = ref (2) in
  print_endline ((string_of_int ((!i + !j))));
  pool := poolPut (!pool) (!i);
  pool := poolPut (!pool) (!j);
  i := 0;
  j := 0;
  let res1 = ref (poolGet (pool)) in
  pool := (Obj.obj (List.assoc ("pool") !res1) : int list);
  i := (Obj.magic (Obj.obj (List.assoc ("val") !res1) : Obj.t) : int);
  let res2 = ref (poolGet (pool)) in
  pool := (Obj.obj (List.assoc ("pool") !res2) : int list);
  j := (Obj.magic (Obj.obj (List.assoc ("val") !res2) : Obj.t) : int);
  i := 4;
  j := 5;
  print_endline ((string_of_int ((!i + !j))));
  pool := poolPut (!pool) (!i);
  pool := poolPut (!pool) (!j);
  i := 0;
  j := 0;
  pool := clearPool (!pool);
  let res3 = ref (poolGet (pool)) in
  pool := (Obj.obj (List.assoc ("pool") !res3) : int list);
  i := (Obj.magic (Obj.obj (List.assoc ("val") !res3) : Obj.t) : int);
  let res4 = ref (poolGet (pool)) in
  pool := (Obj.obj (List.assoc ("pool") !res4) : int list);
  j := (Obj.magic (Obj.obj (List.assoc ("val") !res4) : Obj.t) : int);
  i := 7;
  j := 8;
  print_endline ((string_of_int ((!i + !j))));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
