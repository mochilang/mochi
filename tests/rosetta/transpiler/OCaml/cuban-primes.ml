(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec modPow base exp m =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let m = (Obj.magic m : int) in
  let result = ref ((1 mod m)) in
  let b = ref ((base mod m)) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := ((!result * !b) mod m);
  );
  b := ((!b * !b) mod m);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  (try List.iter (fun p ->
    try
  if ((n mod p) = 0) then (
  __ret := (Obj.magic ((n = p)) : bool); raise Return
  );
    with Continue -> ()) ([2; 3; 5; 7; 11; 13; 17; 19; 23; 29]) with Break -> ());
  let d = ref ((n - 1)) in
  let s = ref (0) in
  (try while ((!d mod 2) = 0) do
    try
  d := (!d / 2);
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  (try List.iter (fun a ->
    try
  if ((a mod n) = 0) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  let x = ref (modPow (Obj.repr (a)) (Obj.repr (!d)) (Obj.repr (n))) in
  if ((!x = 1) || (!x = (n - 1))) then (
  raise Continue;
  );
  let r = ref (1) in
  let passed = ref (false) in
  (try while (!r < !s) do
    try
  x := ((!x * !x) mod n);
  if (!x = (n - 1)) then (
  passed := true;
  raise Break;
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!passed) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
    with Continue -> ()) ([2; 325; 9375; 28178; 450775; 9780504; 1795265022]) with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and commatize n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  let i = ref ((String.length (!s) - 3)) in
  (try while (!i > 0) do
    try
  s := ((String.sub (!s) 0 (!i - 0) ^ ",") ^ String.sub (!s) !i (String.length (!s) - !i));
  i := (!i - 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and pad s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let out = ref (s) in
  (try while (String.length (!out) < width) do
    try
  out := (" " ^ !out);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and join xs sep =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and formatRow row =
  let __ret = ref "" in
  (try
  let padded = ref (([] : string list)) in
  let i = ref (0) in
  (try while (!i < List.length (row)) do
    try
  padded := (List.append (!padded) [(Obj.magic (pad (List.nth (row) (!i)) (Obj.repr (9))) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((("[" ^ join (!padded) (" ")) ^ "]")) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cubans = ref (([] : string list)) in
  let cube1 = ref (1) in
  let count = ref (0) in
  let cube100k = ref (0) in
  let i = ref (1) in
  (try while true do
    try
  let j = ref ((!i + 1)) in
  let cube2 = ref (((!j * !j) * !j)) in
  let diff = ref ((!cube2 - !cube1)) in
  if isPrime (Obj.repr (!diff)) then (
  if (!count < 200) then (
  cubans := (List.append (!cubans) [(Obj.magic (commatize (Obj.repr (!diff))) : string)]);
  );
  count := (!count + 1);
  if (!count = 100000) then (
  cube100k := !diff;
  raise Break;
  );
  );
  cube1 := !cube2;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("The first 200 cuban primes are:-");
  let row = ref (0) in
  (try while (!row < 20) do
    try
  let slice = ref (([] : string list)) in
  let k = ref (0) in
  (try while (!k < 10) do
    try
  slice := (List.append (!slice) [(Obj.magic (List.nth (!cubans) (((!row * 10) + !k))) : string)]);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (formatRow (!slice));
  row := (!row + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("\nThe 100,000th cuban prime is " ^ commatize (Obj.repr (!cube100k))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()