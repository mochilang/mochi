(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 19:02 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec padLeft n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and squeeze s ch =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let prev = ref (false) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.sub (s) !i ((!i + 1) - !i) in
  if (c = ch) then (
  if not (!prev) then (
  out := (!out ^ c);
  prev := true;
  );
  ) else (
  out := (!out ^ c);
  prev := false;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)


let strings = ref ([""; "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln "; "..1111111111111111111111111111111111111111111111111111111111111117777888"; "I never give 'em hell, I just tell the truth, and they think it's hell. "; "                                                   ---  Harry S Truman  "; "The better the 4-wheel drive, the further you'll be from help when ya get stuck!"; "headmistressship"; "aardvark"; "😍😀🙌💃😍😍😍🙌"])
let chars = ref ([[" "]; ["-"]; ["7"]; ["."]; [" "; "-"; "r"]; ["e"]; ["s"]; ["a"]; ["😍"]])
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < List.length (!strings)) do
    try
  let j = ref (0) in
  let s = List.nth (!strings) (!i) in
  (try while (!j < List.length (List.nth (!chars) (!i))) do
    try
  let c = List.nth (List.nth (!chars) (!i)) (!j) in
  let ss = squeeze (s) (c) in
  print_endline ((("specified character = '" ^ c) ^ "'"));
  print_endline ((((("original : length = " ^ padLeft (Obj.repr (String.length (s))) (Obj.repr (2))) ^ ", string = «««") ^ s) ^ "»»»"));
  print_endline ((((("squeezed : length = " ^ padLeft (Obj.repr (String.length (ss))) (Obj.repr (2))) ^ ", string = «««") ^ ss) ^ "»»»"));
  print_endline ("");
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()