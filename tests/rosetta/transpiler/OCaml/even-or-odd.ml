(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec parseBigInt str =
  let __ret = ref (Z.of_int 0) in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub str (0) (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref ((Z.of_int (0))) in
  (try while (!i < String.length (str)) do
    try
  let ch = String.sub str (!i) ((!i + 1) - !i) in
  let d = int_of_string (ch) in
  n := (Z.add ((Z.mul (!n) ((Z.of_int (10))))) ((Z.of_int (d))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := (Z.neg (!n));
  );
  __ret := (Obj.magic (!n) : Z.t); raise Return
  with Return -> !__ret)

and pad n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and showInt n =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  let line = ref ((("Testing integer " ^ pad (Obj.repr (n)) (Obj.repr (3))) ^ ":  ")) in
  if ((n mod 2) = 0) then (
  line := (!line ^ "even ");
  ) else (
  line := (!line ^ " odd ");
  );
  if ((n mod 2) = 0) then (
  line := (!line ^ "even");
  ) else (
  line := (!line ^ " odd");
  );
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)

and showBig s =
  let __ret = ref (Obj.magic 0) in
  (try
  let b = parseBigInt (s) in
  let line = ref ((("Testing big integer " ^ (Z.to_string (b))) ^ ":  ")) in
  if ((Z.rem (b) ((Z.of_int (2)))) = (Z.of_int (0))) then (
  line := (!line ^ "even");
  ) else (
  line := (!line ^ "odd");
  );
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (showInt (Obj.repr (-(2))));
  ignore (showInt (Obj.repr (-(1))));
  ignore (showInt (Obj.repr (0)));
  ignore (showInt (Obj.repr (1)));
  ignore (showInt (Obj.repr (2)));
  ignore (showBig ("-222222222222222222222222222222222222"));
  ignore (showBig ("-1"));
  ignore (showBig ("0"));
  ignore (showBig ("1"));
  ignore (showBig ("222222222222222222222222222222222222"));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()