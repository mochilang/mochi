(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec parseIntStr str =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + (try List.assoc (String.sub (str) !i ((!i + 1) - !i)) !digits with Not_found -> (Obj.magic 0)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and fields s =
  let __ret = ref ([] : string list) in
  (try
  let words = ref (([] : string list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (((ch = " ") || (ch = "\t")) || (ch = "\n")) then (
  if (String.length (!cur) > 0) then (
  words := (List.append (!words) [(Obj.magic (!cur) : string)]);
  cur := "";
  );
  ) else (
  cur := (!cur ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!cur) > 0) then (
  words := (List.append (!words) [(Obj.magic (!cur) : string)]);
  );
  __ret := (Obj.magic (!words) : string list); raise Return
  with Return -> !__ret)

and unescape s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((String.sub (s) !i ((!i + 1) - !i) = "\\") && ((!i + 1) < String.length (s))) then (
  let c = String.sub (s) (!i + 1) ((!i + 2) - (!i + 1)) in
  if (c = "n") then (
  out := (!out ^ "\n");
  i := (!i + 2);
  raise Continue;
  ) else (
  if (c = "\\") then (
  out := (!out ^ "\\");
  i := (!i + 2);
  raise Continue;
  );
  );
  );
  out := (!out ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and parseProgram src =
  let __ret = ref [] in
  (try
  let lines = ref (split (src) ("\n")) in
  let header = ref (fields (List.nth (!lines) (0))) in
  let dataSize = parseIntStr (List.nth (!header) (1)) in
  let nStrings = parseIntStr (List.nth (!header) (3)) in
  let stringPool = ref (([] : string list)) in
  let i = ref (1) in
  (try while (!i <= nStrings) do
    try
  let s = List.nth (!lines) (!i) in
  if (String.length (s) > 0) then (
  stringPool := (List.append (!stringPool) [(Obj.magic (unescape (String.sub (s) 1 ((String.length (s) - 1) - 1))) : string)]);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let code = ref (([] : (string * Obj.t) list list)) in
  let addrMap = ref ([]) in
  (try while (!i < List.length (!lines)) do
    try
  let line = trim (List.nth (!lines) (!i)) in
  if (String.length (line) = 0) then (
  raise Break;
  );
  let parts = ref (fields (line)) in
  let addr = parseIntStr (List.nth (!parts) (0)) in
  let op = List.nth (!parts) (1) in
  let arg = ref (0) in
  if (op = "push") then (
  arg := parseIntStr (List.nth (!parts) (2));
  ) else (
  if ((op = "fetch") || (op = "store")) then (
  arg := parseIntStr (String.sub (List.nth (!parts) (2)) 1 ((String.length (List.nth (!parts) (2)) - 1) - 1));
  ) else (
  if ((op = "jmp") || (op = "jz")) then (
  arg := parseIntStr (List.nth (!parts) (3));
  );
  );
  );
  code := (List.append (!code) [(Obj.magic ([("addr", Obj.repr (addr)); ("op", Obj.repr (op)); ("arg", Obj.repr (!arg))]) : (string * Obj.t) list)]);
  addrMap := ((addr, (List.length (!code) - 1)) :: List.remove_assoc (addr) !addrMap);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("dataSize", Obj.repr (dataSize)); ("strings", Obj.repr (!stringPool)); ("code", Obj.repr (!code)); ("addrMap", Obj.repr (!addrMap))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and runVM prog =
  let __ret = ref (Obj.magic 0) in
  (try
  let data = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc ("dataSize") prog) : int)) do
    try
  data := (List.append (!data) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let stack = ref (([] : int list)) in
  let pc = ref (0) in
  let code = (Obj.obj (List.assoc ("code") prog) : int) in
  let addrMap = (Obj.obj (List.assoc ("addrMap") prog) : int) in
  let pool = (Obj.obj (List.assoc ("strings") prog) : int) in
  let line = ref ("") in
  (try while (!pc < List.length (code)) do
    try
  let inst = List.nth (code) (!pc) in
  let op = (try List.assoc ("op") inst with Not_found -> (Obj.magic 0)) in
  let arg = (try List.assoc ("arg") inst with Not_found -> (Obj.magic 0)) in
  if (op = "push") then (
  stack := (List.append (!stack) [(Obj.magic (arg) : int)]);
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "store") then (
  data := (List.mapi (fun __i __x -> if __i = arg then List.nth (!stack) ((List.length (!stack) - 1)) else __x) (!data));
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "fetch") then (
  stack := (List.append (!stack) [(Obj.magic (List.nth (!data) (arg)) : int)]);
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "add") then (
  stack := (List.mapi (fun __i __x -> if __i = (List.length (!stack) - 2) then (List.nth (!stack) ((List.length (!stack) - 2)) + List.nth (!stack) ((List.length (!stack) - 1))) else __x) (!stack));
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "lt") then (
  let v = ref (0) in
  if (List.nth (!stack) ((List.length (!stack) - 2)) < List.nth (!stack) ((List.length (!stack) - 1))) then (
  v := 1;
  );
  stack := (List.mapi (fun __i __x -> if __i = (List.length (!stack) - 2) then !v else __x) (!stack));
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "jz") then (
  let v = List.nth (!stack) ((List.length (!stack) - 1)) in
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  if (v = 0) then (
  pc := List.nth (addrMap) (arg);
  ) else (
  pc := (!pc + 1);
  );
  raise Continue;
  );
  if (op = "jmp") then (
  pc := List.nth (addrMap) (arg);
  raise Continue;
  );
  if (op = "prts") then (
  let s = List.nth (pool) (List.nth (!stack) ((List.length (!stack) - 1))) in
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  if (s <> "\n") then (
  line := (!line ^ __show (s));
  );
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "prti") then (
  line := (!line ^ (string_of_int (List.nth (!stack) ((List.length (!stack) - 1)))));
  print_endline (__show !line);
  line := "";
  stack := List.of_seq (Seq.take ((List.length (!stack) - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  pc := (!pc + 1);
  raise Continue;
  );
  if (op = "halt") then (
  raise Break;
  );
  pc := (!pc + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and trim s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  (try while ((!start < String.length (s)) && ((String.sub (s) !start ((!start + 1) - !start) = " ") || (String.sub (s) !start ((!start + 1) - !start) = "\t"))) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  let end_ = ref (String.length (s)) in
  (try while ((!end_ > !start) && ((String.sub (s) (!end_ - 1) (!end_ - (!end_ - 1)) = " ") || (String.sub (s) (!end_ - 1) (!end_ - (!end_ - 1)) = "\t"))) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) !start (!end_ - !start)) : string); raise Return
  with Return -> !__ret)

and split s sep =
  let __ret = ref ([] : string list) in
  (try
  let parts = ref (([] : string list)) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (((String.length (sep) > 0) && ((!i + String.length (sep)) <= String.length (s))) && (String.sub (s) !i ((!i + String.length (sep)) - !i) = sep)) then (
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  cur := "";
  i := (!i + String.length (sep));
  ) else (
  cur := (!cur ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  parts := (List.append (!parts) [(Obj.magic (!cur) : string)]);
  __ret := (Obj.magic (!parts) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let programText = (((((((((((((((((((("Datasize: 1 Strings: 2\n" ^ "\"count is: \"\n") ^ "\"\\n\"\n") ^ "    0 push  1\n") ^ "    5 store [0]\n") ^ "   10 fetch [0]\n") ^ "   15 push  10\n") ^ "   20 lt\n") ^ "   21 jz     (43) 65\n") ^ "   26 push  0\n") ^ "   31 prts\n") ^ "   32 fetch [0]\n") ^ "   37 prti\n") ^ "   38 push  1\n") ^ "   43 prts\n") ^ "   44 fetch [0]\n") ^ "   49 push  1\n") ^ "   54 add\n") ^ "   55 store [0]\n") ^ "   60 jmp    (-51) 10\n") ^ "   65 halt\n") in
  let prog = ref (parseProgram (programText)) in
  ignore (runVM (!prog));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()