(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let nodes = ref ([])
let head = ref ((0 - 1))
let tail = ref ((0 - 1))
let rec listString () =
  let __ret = ref "" in
  (try
  if (!head = (0 - 1)) then (
  __ret := (Obj.magic ("<nil>") : string); raise Return
  );
  let r = ref (("[" ^ __show ((try List.assoc ("value") (Obj.obj (List.assoc (!head) !nodes) : (string * Obj.t) list) with Not_found -> 0)))) in
  let id = ref ((Obj.magic (try List.assoc ("next") (Obj.obj (List.assoc (!head) !nodes) : (string * Obj.t) list) with Not_found -> 0) : int)) in
  (try while (!id <> (0 - 1)) do
    try
  r := ((!r ^ " ") ^ __show ((try List.assoc ("value") (Obj.obj (List.assoc (!id) !nodes) : (string * Obj.t) list) with Not_found -> 0)));
  id := (Obj.magic (try List.assoc ("next") (Obj.obj (List.assoc (!id) !nodes) : (string * Obj.t) list) with Not_found -> 0) : int);
    with Continue -> ()
  done with Break -> ());
  r := (!r ^ "]");
  __ret := (Obj.magic (!r) : string); raise Return
  with Return -> !__ret)


let out = ref ("From tail:")
let id = ref (!tail)
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (listString ());
  nodes := ((0, Obj.repr ([("value", Obj.repr ("A")); ("next", Obj.repr ((0 - 1))); ("prev", Obj.repr ((0 - 1)))])) :: List.remove_assoc (0) (Obj.magic (!nodes) : (int * Obj.t) list));
  head := 0;
  tail := 0;
  nodes := ((1, Obj.repr ([("value", Obj.repr ("B")); ("next", Obj.repr ((0 - 1))); ("prev", Obj.repr (0))])) :: List.remove_assoc (1) (Obj.magic (!nodes) : (int * Obj.t) list));
  nodes := ((0, Obj.repr ((("next", 1) :: List.remove_assoc ("next") (Obj.obj (List.assoc (0) !nodes) : (string * Obj.t) list)))) :: List.remove_assoc (0) (Obj.magic (!nodes) : (int * Obj.t) list));
  tail := 1;
  print_endline (listString ());
  nodes := ((2, Obj.repr ([("value", Obj.repr ("C")); ("next", Obj.repr (1)); ("prev", Obj.repr (0))])) :: List.remove_assoc (2) (Obj.magic (!nodes) : (int * Obj.t) list));
  nodes := ((1, Obj.repr ((("prev", 2) :: List.remove_assoc ("prev") (Obj.obj (List.assoc (1) !nodes) : (string * Obj.t) list)))) :: List.remove_assoc (1) (Obj.magic (!nodes) : (int * Obj.t) list));
  nodes := ((0, Obj.repr ((("next", 2) :: List.remove_assoc ("next") (Obj.obj (List.assoc (0) !nodes) : (string * Obj.t) list)))) :: List.remove_assoc (0) (Obj.magic (!nodes) : (int * Obj.t) list));
  print_endline (listString ());
  (try while (!id <> (0 - 1)) do
    try
  out := ((!out ^ " ") ^ __show ((try List.assoc ("value") (Obj.obj (List.assoc (!id) !nodes) : (string * Obj.t) list) with Not_found -> 0)));
  id := (Obj.magic (try List.assoc ("prev") (Obj.obj (List.assoc (!id) !nodes) : (string * Obj.t) list) with Not_found -> 0) : int);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !out);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()