(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let _even_root = 0
let _odd_root = 1
let rec newNode len =
  let __ret = ref [] in
  (try
  let len = (Obj.magic len : int) in
  __ret := (Obj.magic ([("length", Obj.repr (len)); ("edges", Obj.repr ([])); ("suffix", Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and eertree s =
  let __ret = ref ([] : (string * Obj.t) list list) in
  (try
  let tree = ref (([] : (string * Obj.t) list list)) in
  tree := (List.append (!tree) [(Obj.magic ([("length", Obj.repr (0)); ("suffix", Obj.repr (_odd_root)); ("edges", Obj.repr ([]))]) : (string * Obj.t) list)]);
  tree := (List.append (!tree) [(Obj.magic ([("length", Obj.repr (-(1))); ("suffix", Obj.repr (_odd_root)); ("edges", Obj.repr ([]))]) : (string * Obj.t) list)]);
  let suffix = ref (_odd_root) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.sub (s) !i ((!i + 1) - !i) in
  let n = ref (!suffix) in
  let k = ref (0) in
  (try while true do
    try
  k := (Obj.magic (Obj.obj (List.assoc ("length") (List.nth (!tree) (!n)) : Obj.t)) : int);
  let b = ((!i - !k) - 1) in
  if ((b >= 0) && (String.sub (s) b ((b + 1) - b) = c)) then (
  raise Break;
  );
  n := (Obj.magic (Obj.obj (List.assoc ("suffix") (List.nth (!tree) (!n)) : Obj.t)) : int);
    with Continue -> ()
  done with Break -> ());
  let edges = ref ((Obj.magic (Obj.obj (List.assoc ("edges") (List.nth (!tree) (!n)) : Obj.t)) : (string * int) list)) in
  if (List.mem_assoc c !edges) then (
  suffix := (try List.assoc (c) (!edges) with Not_found -> 0);
  i := (!i + 1);
  raise Continue;
  );
  suffix := List.length (!tree);
  tree := (List.append (!tree) [(Obj.magic (newNode (Obj.repr ((!k + 2)))) : (string * Obj.t) list)]);
  edges := ((c, !suffix) :: List.remove_assoc (c) !edges);
  tree := (List.mapi (fun __i __x -> if __i = !n then (("edges", Obj.repr (!edges)) :: List.remove_assoc ("edges") (Obj.magic (List.nth (!tree) (!n)) : (string * Obj.t) list)) else __x) (!tree));
  if ((Obj.magic (Obj.obj (List.assoc ("length") (List.nth (!tree) (!suffix)) : Obj.t)) : int) = 1) then (
  tree := (List.mapi (fun __i __x -> if __i = !suffix then (("suffix", Obj.repr (0)) :: List.remove_assoc ("suffix") (Obj.magic (List.nth (!tree) (!suffix)) : (string * Obj.t) list)) else __x) (!tree));
  i := (!i + 1);
  raise Continue;
  );
  (try while true do
    try
  n := (Obj.magic (Obj.obj (List.assoc ("suffix") (List.nth (!tree) (!n)) : Obj.t)) : int);
  let b = ((!i - (Obj.magic (Obj.obj (List.assoc ("length") (List.nth (!tree) (!n)) : Obj.t)) : int)) - 1) in
  if ((b >= 0) && (String.sub (s) b ((b + 1) - b) = c)) then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  let en = ref ((Obj.magic (Obj.obj (List.assoc ("edges") (List.nth (!tree) (!n)) : Obj.t)) : (string * int) list)) in
  tree := (List.mapi (fun __i __x -> if __i = !suffix then (("suffix", Obj.repr ((try List.assoc (c) (!en) with Not_found -> 0))) :: List.remove_assoc ("suffix") (Obj.magic (List.nth (!tree) (!suffix)) : (string * Obj.t) list)) else __x) (!tree));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!tree) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and child tree idx p acc =
  let __ret = ref ([] : string list) in
  (try
  let idx = (Obj.magic idx : int) in
  let edges = ref ((Obj.magic (Obj.obj (List.assoc ("edges") (List.nth (tree) (idx)) : Obj.t)) : (string * int) list)) in
  (try List.iter (fun (ch, _) ->
    try
  let nxt = (try List.assoc (ch) (!edges) with Not_found -> 0) in
  let pal = ((ch ^ p) ^ ch) in
  acc := (List.append (!acc) [(Obj.magic (pal) : string)]);
  acc := child (tree) (Obj.repr (nxt)) (pal) (acc);
    with Continue -> ()) (!edges) with Break -> ());
  __ret := (Obj.magic (!acc) : string list); raise Return
  with Return -> !__ret)

and subPalindromes tree =
  let __ret = ref ([] : string list) in
  (try
  let res = ref (([] : string list)) in
  res := child (tree) (Obj.repr (_even_root)) ("") (res);
  let oEdges = ref ((Obj.magic (Obj.obj (List.assoc ("edges") (List.nth (tree) (_odd_root)) : Obj.t)) : (string * int) list)) in
  (try List.iter (fun (ch, _) ->
    try
  res := (List.append (!res) [(Obj.magic (ch) : string)]);
  res := child (tree) (Obj.repr ((try List.assoc (ch) (!oEdges) with Not_found -> 0))) (ch) (res);
    with Continue -> ()) (!oEdges) with Break -> ());
  __ret := (Obj.magic (!res) : string list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let tree = ref (eertree ("eertree")) in
  let subs = ref (subPalindromes (!tree)) in
  print_endline (__show (!subs));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()