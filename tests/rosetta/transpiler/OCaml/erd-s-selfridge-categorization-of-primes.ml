(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:55 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec generatePrimes n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let primes = ref ([2]) in
  let cand = ref (3) in
  (try while (List.length (!primes) < n) do
    try
  let isP = ref (true) in
  let i = ref (0) in
  (try while (!i < List.length (!primes)) do
    try
  let p = List.nth (!primes) (!i) in
  if ((p * p) > !cand) then (
  raise Break;
  );
  if ((!cand mod p) = 0) then (
  isP := false;
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !isP then (
  primes := (List.append (!primes) [(Obj.magic (!cand) : int)]);
  );
  cand := (!cand + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!primes) : int list); raise Return
  with Return -> !__ret)

and primeFactors n primes =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let factors = ref (([] : int list)) in
  let num = ref (n) in
  let i = ref (0) in
  (try while ((!i < List.length (primes)) && ((List.nth (primes) (!i) * List.nth (primes) (!i)) <= !num)) do
    try
  let p = List.nth (primes) (!i) in
  (try while ((!num mod p) = 0) do
    try
  factors := (List.append (!factors) [(Obj.magic (p) : int)]);
  num := (!num / p);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!num > 1) then (
  factors := (List.append (!factors) [(Obj.magic (!num) : int)]);
  );
  __ret := (Obj.magic (!factors) : int list); raise Return
  with Return -> !__ret)


let prevCats = ref ([])
let rec cat p primes =
  let __ret = ref 0 in
  (try
  let p = (Obj.magic p : int) in
  if (List.mem_assoc p !prevCats) then (
  __ret := (Obj.magic ((try List.assoc (p) (!prevCats) with Not_found -> 0)) : int); raise Return
  );
  let pf = ref (primeFactors (Obj.repr ((p + 1))) (primes)) in
  let all23 = ref (true) in
  (try List.iter (fun f ->
    try
  if ((f <> 2) && (f <> 3)) then (
  all23 := false;
  raise Break;
  );
    with Continue -> ()) (!pf) with Break -> ());
  if !all23 then (
  prevCats := ((p, 1) :: List.remove_assoc (p) !prevCats);
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (p > 2) then (
  let unique = ref (([] : int list)) in
  let last = ref (-(1)) in
  (try List.iter (fun f ->
    try
  if (f <> !last) then (
  unique := (List.append (!unique) [(Obj.magic (f) : int)]);
  last := f;
  );
    with Continue -> ()) (!pf) with Break -> ());
  pf := !unique;
  );
  let c = ref (2) in
  (try while (!c <= 11) do
    try
  let ok = ref (true) in
  (try List.iter (fun f ->
    try
  if (cat (Obj.repr (f)) (primes) >= !c) then (
  ok := false;
  raise Break;
  );
    with Continue -> ()) (!pf) with Break -> ());
  if !ok then (
  prevCats := ((p, !c) :: List.remove_assoc (p) !prevCats);
  __ret := (Obj.magic (!c) : int); raise Return
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  prevCats := ((p, 12) :: List.remove_assoc (p) !prevCats);
  __ret := (Obj.magic (12) : int); raise Return
  with Return -> !__ret)

and padLeft n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let primes = ref (generatePrimes (Obj.repr (1000))) in
  let es = ref (([] : int list list)) in
  (try for _ = 0 to (12 - 1) do
    try
  es := (List.append (!es) [(Obj.magic ([]) : int list)]);
    with Continue -> ()
  done with Break -> ());
  print_endline ("First 200 primes:\n");
  let idx = ref (0) in
  (try while (!idx < 200) do
    try
  let p = List.nth (!primes) (!idx) in
  let c = cat (Obj.repr (p)) (!primes) in
  es := (List.mapi (fun __i __x -> if __i = (c - 1) then (List.append (List.nth (!es) ((c - 1))) [(Obj.magic (p) : int)]) else __x) (!es));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let c = ref (1) in
  (try while (!c <= 6) do
    try
  if (List.length (List.nth (!es) ((!c - 1))) > 0) then (
  print_endline ((("Category " ^ (string_of_int (!c))) ^ ":"));
  print_endline (__show (__show (List.nth (!es) ((!c - 1)))));
  print_endline ("");
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("First thousand primes:\n");
  (try while (!idx < 1000) do
    try
  let p = List.nth (!primes) (!idx) in
  let cv = cat (Obj.repr (p)) (!primes) in
  es := (List.mapi (fun __i __x -> if __i = (cv - 1) then (List.append (List.nth (!es) ((cv - 1))) [(Obj.magic (p) : int)]) else __x) (!es));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  c := 1;
  (try while (!c <= 12) do
    try
  let e = ref (List.nth (!es) ((!c - 1))) in
  if (List.length (!e) > 0) then (
  let line = ((((((("Category " ^ padLeft (Obj.repr (!c)) (Obj.repr (2))) ^ ": First = ") ^ padLeft (Obj.repr (List.nth (!e) (0))) (Obj.repr (7))) ^ "  Last = ") ^ padLeft (Obj.repr (List.nth (!e) ((List.length (!e) - 1)))) (Obj.repr (8))) ^ "  Count = ") ^ padLeft (Obj.repr (List.length (!e))) (Obj.repr (6))) in
  print_endline (__show line);
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()