(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let width = 320
let height = 240
let img = ref (([] : string list list))
let y = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!y < height) do
    try
  let row = ref (([] : string list)) in
  let x = ref (0) in
  (try while (!x < width) do
    try
  row := (List.append (!row) [(Obj.magic ("green") : string)]);
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  img := (List.append (!img) [(Obj.magic (!row) : string list)]);
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  img := (List.mapi (fun __i __x -> if __i = 100 then (List.mapi (fun __i __x -> if __i = 100 then "red" else __x) (List.nth (!img) (100))) else __x) (!img));
  print_endline ((("The color of the pixel at (  0,   0) is " ^ List.nth (List.nth (!img) (0)) (0)) ^ "."));
  print_endline ((("The color of the pixel at (100, 100) is " ^ List.nth (List.nth (!img) (100)) (100)) ^ "."));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()