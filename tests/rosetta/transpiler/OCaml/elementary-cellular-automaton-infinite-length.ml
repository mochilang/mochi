(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let p = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  p := (!p * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!p) : int); raise Return
  with Return -> !__ret)

and btoi b =
  let __ret = ref 0 in
  (try
  if b then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and addNoCells cells =
  let __ret = ref "" in
  (try
  let l = ref ("O") in
  let r = ref ("O") in
  if (String.sub (!cells) 0 (1 - 0) = "O") then (
  l := ".";
  );
  if (String.sub (!cells) (String.length (!cells) - 1) (String.length (!cells) - (String.length (!cells) - 1)) = "O") then (
  r := ".";
  );
  cells := ((!l ^ !cells) ^ !r);
  cells := ((!l ^ !cells) ^ !r);
  __ret := (Obj.magic (!cells) : string); raise Return
  with Return -> !__ret)

and step cells ruleVal =
  let __ret = ref "" in
  (try
  let ruleVal = (Obj.magic ruleVal : int) in
  let newCells = ref ("") in
  let i = ref (0) in
  (try while (!i < (String.length (cells) - 2)) do
    try
  let bin = ref (0) in
  let b = ref (2) in
  let n = ref (!i) in
  (try while (!n < (!i + 3)) do
    try
  bin := (!bin + (btoi ((String.sub (cells) !n ((!n + 1) - !n) = "O")) * pow2 (Obj.repr (!b))));
  b := (!b - 1);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let a = ref (".") in
  if (((ruleVal / pow2 (Obj.repr (!bin))) mod 2) = 1) then (
  a := "O";
  );
  newCells := (!newCells ^ !a);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!newCells) : string); raise Return
  with Return -> !__ret)

and repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and evolve l ruleVal =
  let __ret = ref (Obj.magic 0) in
  (try
  let l = (Obj.magic l : int) in
  let ruleVal = (Obj.magic ruleVal : int) in
  print_endline (((" Rule #" ^ (string_of_int (ruleVal))) ^ ":"));
  let cells = ref ("O") in
  let x = ref (0) in
  (try while (!x < l) do
    try
  cells := addNoCells (cells);
  let width = ref ((40 + (String.length (!cells) / 2))) in
  let spaces = ref (repeat (" ") (Obj.repr ((!width - String.length (!cells))))) in
  print_endline ((!spaces ^ !cells));
  cells := step (!cells) (Obj.repr (ruleVal));
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  (try List.iter (fun r ->
    try
  ignore (evolve (Obj.repr (25)) (Obj.repr (r)));
  print_endline ("");
    with Continue -> ()) ([90; 30]) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()