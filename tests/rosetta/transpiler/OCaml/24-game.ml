(* Generated by Mochi transpiler v0.10.37 on 2025-07-23 12:42 +0700 *)


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)

exception Break
exception Continue

exception Return

let rec randDigit () =
  let __ret = ref 0 in
  (try
  __ret := ((_now () mod 9) + 1); raise Return;
  __ret := ((_now () mod 9) + 1);
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let digits = ref ([]) in
  (try for i = 0 to (4 - 1) do
    try
  digits := List.append !digits [randDigit ()];
    with Continue -> ()
  done with Break -> ());
  let numstr = ref ("") in
  (try for i = 0 to (4 - 1) do
    try
  numstr := (!numstr ^ (string_of_int (List.nth (!digits) (i))));
    with Continue -> ()
  done with Break -> ());
  print_endline ((("Your numbers: " ^ !numstr) ^ "\n"));
  print_endline ("Enter RPN: ");
  let expr = ref ((try read_line () with End_of_file -> "")) in
  if (String.length !expr <> 7) then (
  print_endline ("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
  __ret := (); raise Return;
  );
  let stack = ref ([]) in
  let i = ref (0) in
  let valid = ref (true) in
  (try while (!i < String.length !expr) do
    try
  let ch = String.sub !expr !i ((!i + 1) - !i) in
  if ((ch >= "0") && (ch <= "9")) then (
  if (List.length !digits = 0) then (
  print_endline ("too many numbers.");
  __ret := (); raise Return;
  );
  let j = ref (0) in
  (try while (List.nth (!digits) (!j) <> (int_of_string ch - int_of_string "0")) do
    try
  j := (!j + 1);
  if (!j = List.length !digits) then (
  print_endline ("wrong numbers.");
  __ret := (); raise Return;
  );
    with Continue -> ()
  done with Break -> ());
  digits := (List.of_seq (Seq.take (!j - 0) (Seq.drop 0 (List.to_seq !digits))) @ List.of_seq (Seq.take (List.length !digits - (!j + 1)) (Seq.drop (!j + 1) (List.to_seq !digits))));
  stack := List.append !stack [float_of_int (int_of_string ch - int_of_string "0")];
  ) else (
  if (List.length !stack < 2) then (
  print_endline ("invalid expression syntax.");
  valid := false;
  raise Break;
  );
  let b = ref (List.nth (!stack) ((List.length !stack - 1))) in
  let a = ref (List.nth (!stack) ((List.length !stack - 2))) in
  if (ch = "+") then (
  stack := (List.mapi (fun __i __x -> if __i = (List.length !stack - 2) then (!a +. !b) else __x) (!stack));
  ) else (
  if (ch = "-") then (
  stack := (List.mapi (fun __i __x -> if __i = (List.length !stack - 2) then (!a -. !b) else __x) (!stack));
  ) else (
  if (ch = "*") then (
  stack := (List.mapi (fun __i __x -> if __i = (List.length !stack - 2) then (!a *. !b) else __x) (!stack));
  ) else (
  if (ch = "/") then (
  stack := (List.mapi (fun __i __x -> if __i = (List.length !stack - 2) then (!a /. !b) else __x) (!stack));
  ) else (
  print_endline ((ch ^ " invalid."));
  valid := false;
  raise Break;
  );
  );
  );
  );
  stack := List.of_seq (Seq.take ((List.length !stack - 1) - 0) (Seq.drop 0 (List.to_seq !stack)));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !valid then (
  if (abs_float (List.nth (!stack) (0) -. 24.0) > 0.000001) then (
  print_endline ((("incorrect. " ^ (string_of_float (List.nth (!stack) (0)))) ^ " != 24"));
  ) else (
  print_endline ("correct.");
  );
  );
    !__ret
  with Return -> !__ret)

let () =
  main ();
