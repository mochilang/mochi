(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:20 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec factorial n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let result = ref (1) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  result := (!result * !i);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  let d = ref (3) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let out = ref (s) in
  (try while (String.length (!out) < w) do
    try
  out := (" " ^ !out);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = ref (0) in
  let count = ref (0) in
  (try while (!count < 10) do
    try
  n := (!n + 1);
  let f = factorial (Obj.repr (!n)) in
  if isPrime (Obj.repr ((f - 1))) then (
  count := (!count + 1);
  print_endline (((((padLeft ((string_of_int (!count))) (Obj.repr (2)) ^ ": ") ^ padLeft ((string_of_int (!n))) (Obj.repr (2))) ^ "! - 1 = ") ^ (string_of_int ((f - 1)))));
  );
  if ((!count < 10) && isPrime (Obj.repr ((f + 1)))) then (
  count := (!count + 1);
  print_endline (((((padLeft ((string_of_int (!count))) (Obj.repr (2)) ^ ": ") ^ padLeft ((string_of_int (!n))) (Obj.repr (2))) ^ "! + 1 = ") ^ (string_of_int ((f + 1)))));
  );
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()