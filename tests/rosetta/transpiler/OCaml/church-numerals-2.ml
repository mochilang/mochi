(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec id x =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := x; raise Return
  with Return -> !__ret)

and compose f g =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun x ->
  __ret := (Obj.magic (f (g (Obj.repr (x)))) : Obj.t -> Obj.t); raise Return
  f (g (Obj.repr (x))))) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and zero () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic (id) : Obj.t -> Obj.t); raise Return
  id)) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and one () =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic (id) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and succ n =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic (compose (f) (n (f))) : Obj.t -> Obj.t); raise Return
  compose (f) (n (f)))) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and plus m n =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic ((fun f ->
  __ret := (Obj.magic (compose (m (f)) (n (f))) : Obj.t -> Obj.t); raise Return
  compose (m (f)) (n (f)))) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and mult m n =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic (compose (m) (n)) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and exp m n =
  let __ret = ref (Obj.magic 0) in
  (try
  __ret := (Obj.magic (n (m)) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret)

and toInt x =
  let __ret = ref 0 in
  (try
  let counter = ref (0) in
let rec fCounter f =
  let __ret = ref (Obj.magic 0) in
  (try
  counter := (!counter + 1);
  __ret := (Obj.magic (f) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret) in
  x (fCounter);
  __ret := !counter; raise Return
  with Return -> !__ret)

and toStr x =
  let __ret = ref "" in
  (try
  let s = ref ("") in
let rec fCounter f =
  let __ret = ref (Obj.magic 0) in
  (try
  s := (!s ^ "|");
  __ret := (Obj.magic (f) : Obj.t -> Obj.t); raise Return
  with Return -> !__ret) in
  x (fCounter);
  __ret := !s; raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (("zero = " ^ (string_of_int (toInt (zero ())))));
  let onev = one () in
  print_endline (("one = " ^ (string_of_int (toInt (onev)))));
  let two = succ (succ (zero ())) in
  print_endline (("two = " ^ (string_of_int (toInt (two)))));
  let three = plus (onev) (two) in
  print_endline (("three = " ^ (string_of_int (toInt (three)))));
  let four = mult (two) (two) in
  print_endline (("four = " ^ (string_of_int (toInt (four)))));
  let eight = exp (two) (three) in
  print_endline (("eight = " ^ (string_of_int (toInt (eight)))));
  print_endline (("toStr(four) = " ^ toStr (four)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()