(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bsearch arr x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let low = ref (0) in
  let high = ref ((List.length (arr) - 1)) in
  (try while (!low <= !high) do
    try
  let mid = ((!low + !high) / 2) in
  if (List.nth (arr) (mid) > x) then (
  high := (mid - 1);
  ) else (
  if (List.nth (arr) (mid) < x) then (
  low := (mid + 1);
  ) else (
  __ret := (Obj.magic (mid) : int); raise Return
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec bsearchRec arr x low high =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let low = (Obj.magic low : int) in
  let high = (Obj.magic high : int) in
  if (high < low) then (
  __ret := (Obj.magic (-(1)) : int); raise Return
  );
  let mid = ((low + high) / 2) in
  if (List.nth (arr) (mid) > x) then (
  __ret := (Obj.magic (bsearchRec (arr) (x) (low) ((mid - 1))) : int); raise Return
  ) else (
  if (List.nth (arr) (mid) < x) then (
  __ret := (Obj.magic (bsearchRec (arr) (x) ((mid + 1)) (high)) : int); raise Return
  );
  );
  __ret := (Obj.magic (mid) : int); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nums = ref ([-(31); 0; 1; 2; 2; 4; 65; 83; 99; 782]) in
  let x = ref (2) in
  let idx = ref (bsearch (!nums) (!x)) in
  if (!idx >= 0) then (
  print_endline (((((string_of_int (!x)) ^ " is at index ") ^ (string_of_int (!idx))) ^ "."));
  ) else (
  print_endline (((string_of_int (!x)) ^ " is not found."));
  );
  x := 5;
  idx := bsearchRec (!nums) (!x) (0) ((List.length (!nums) - 1));
  if (!idx >= 0) then (
  print_endline (((((string_of_int (!x)) ^ " is at index ") ^ (string_of_int (!idx))) ^ "."));
  ) else (
  print_endline (((string_of_int (!x)) ^ " is not found."));
  );
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
