(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec commatize n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  let i = ref ((String.length (!s) mod 3)) in
  if (!i = 0) then (
  i := 3;
  );
  let out = ref (String.sub !s (0) (!i - 0)) in
  (try while (!i < String.length (!s)) do
    try
  out := ((!out ^ ",") ^ String.sub !s (!i) ((!i + 3) - !i));
  i := (!i + 3);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and p _l n =
  let __ret = ref 0 in
  (try
  let _l = (Obj.magic _l : int) in
  let n = (Obj.magic n : int) in
  let _ls = (string_of_int (_l)) in
  let digits = ref (1) in
  let d = ref (1) in
  (try while (!d <= (18 - String.length (_ls))) do
    try
  digits := (!digits * 10);
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  let ten18 = 1000000000000000000 in
  let count = ref (0) in
  let i = ref (0) in
  let probe = ref (1) in
  (try while true do
    try
  probe := (!probe * 2);
  i := (!i + 1);
  if (!probe >= ten18) then (
  (try while true do
    try
  if (!probe >= ten18) then (
  probe := (!probe / 10);
  );
  if ((!probe / !digits) = _l) then (
  count := (!count + 1);
  if (!count >= n) then (
  count := (!count - 1);
  raise Break;
  );
  );
  probe := (!probe * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  );
  let ps = ref ((string_of_int (!probe))) in
  let le = ref (String.length (_ls)) in
  if (!le > String.length (!ps)) then (
  le := String.length (!ps);
  );
  if (String.sub !ps (0) (!le - 0) = _ls) then (
  count := (!count + 1);
  if (!count >= n) then (
  raise Break;
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!i) : int); raise Return
  with Return -> !__ret)


let params = ref ([[12; 1]; [12; 2]; [123; 45]])
let idx = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!idx < List.length (!params)) do
    try
  let _l = List.nth (List.nth (!params) (!idx)) (0) in
  let m = List.nth (List.nth (!params) (!idx)) (1) in
  print_endline (((((("p(" ^ (string_of_int (_l))) ^ ", ") ^ (string_of_int (m))) ^ ") = ") ^ commatize (Obj.repr (p (Obj.repr (_l)) (Obj.repr (m))))));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()