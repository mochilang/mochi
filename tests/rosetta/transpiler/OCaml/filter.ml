(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec randPerm n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let arr = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  arr := (List.append (!arr) [(Obj.magic (!i) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref ((n - 1)) in
  (try while (!idx > 0) do
    try
  let j = (_now () mod (!idx + 1)) in
  let tmp = List.nth (!arr) (!idx) in
  arr := (List.mapi (fun __i __x -> if __i = !idx then List.nth (!arr) (j) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = j then tmp else __x) (!arr));
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and even xs =
  let __ret = ref ([] : int list) in
  (try
  let r = ref (([] : int list)) in
  (try List.iter (fun x ->
    try
  if ((x mod 2) = 0) then (
  r := (List.append (!r) [(Obj.magic (x) : int)]);
  );
    with Continue -> ()) (xs) with Break -> ());
  __ret := (Obj.magic (!r) : int list); raise Return
  with Return -> !__ret)

and reduceToEven xs =
  let __ret = ref ([] : int list) in
  (try
  let arr = ref (xs) in
  let last = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!arr)) do
    try
  let e = List.nth (!arr) (!i) in
  if ((e mod 2) = 0) then (
  arr := (List.mapi (fun __i __x -> if __i = !last then e else __x) (!arr));
  last := (!last + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.of_seq (Seq.take (!last - 0) (Seq.drop 0 (List.to_seq !arr)))) : int list); raise Return
  with Return -> !__ret)

and listStr xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if ((!i + 1) < List.length (xs)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = ref (randPerm (Obj.repr (20))) in
  let cap_a = ref (20) in
  print_endline (listStr (!a));
  print_endline (listStr (even (!a)));
  print_endline (listStr (!a));
  a := reduceToEven (!a);
  print_endline (listStr (!a));
  print_endline (((("a len: " ^ (string_of_int (List.length (!a)))) ^ " cap: ") ^ (string_of_int (!cap_a))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()