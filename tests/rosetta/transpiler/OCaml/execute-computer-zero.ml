(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec floorMod a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let r = ref ((a mod b)) in
  if (!r < 0) then (
  r := (!r + b);
  );
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)

and run bc =
  let __ret = ref 0 in
  (try
  let acc = ref (0) in
  let pc = ref (0) in
  (try while (!pc < 32) do
    try
  let op = (List.nth (!bc) (!pc) / 32) in
  let arg = (List.nth (!bc) (!pc) mod 32) in
  pc := (!pc + 1);
  if (op = 0) then (
  ) else (
  if (op = 1) then (
  acc := List.nth (!bc) (arg);
  ) else (
  if (op = 2) then (
  bc := (List.mapi (fun __i __x -> if __i = arg then !acc else __x) (!bc));
  ) else (
  if (op = 3) then (
  acc := floorMod ((!acc + List.nth (!bc) (arg))) (256);
  ) else (
  if (op = 4) then (
  acc := floorMod ((!acc - List.nth (!bc) (arg))) (256);
  ) else (
  if (op = 5) then (
  if (!acc = 0) then (
  pc := arg;
  );
  ) else (
  if (op = 6) then (
  pc := arg;
  ) else (
  if (op = 7) then (
  raise Break;
  ) else (
  raise Break;
  );
  );
  );
  );
  );
  );
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!acc) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let programs = ref ([[35; 100; 224; 2; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]; [44; 106; 76; 43; 141; 75; 168; 192; 44; 224; 8; 7; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]; [46; 79; 109; 78; 47; 77; 48; 145; 171; 80; 192; 46; 224; 1; 1; 0; 8; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]; [45; 111; 69; 112; 71; 0; 78; 0; 171; 79; 192; 46; 224; 32; 0; 28; 1; 0; 0; 0; 6; 0; 2; 26; 5; 20; 3; 30; 1; 22; 4; 24]; [35; 132; 224; 0; 255; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]; [35; 132; 224; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]; [35; 100; 224; 1; 255; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0]]) in
  let i = ref (0) in
  (try while (!i < List.length (!programs)) do
    try
  let res = run (ref (List.nth (!programs) (!i))) in
  print_endline ((string_of_int (res)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()