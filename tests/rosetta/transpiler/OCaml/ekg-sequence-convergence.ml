(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec contains xs n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = n) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  if (!x < 0) then (
  x := -(!x);
  );
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and sortInts xs =
  let __ret = ref ([] : int list) in
  (try
  let arr = ref (xs) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let tmp = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and areSame s t =
  let __ret = ref false in
  (try
  if (List.length (s) <> List.length (t)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let a = ref (sortInts (s)) in
  let b = ref (sortInts (t)) in
  let i = ref (0) in
  (try while (!i < List.length (!a)) do
    try
  if (List.nth (!a) (!i) <> List.nth (!b) (!i)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and printSlice start seq =
  let __ret = ref (Obj.magic 0) in
  (try
  let start = (Obj.magic start : int) in
  let first = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < 30) do
    try
  first := (List.append (!first) [(Obj.magic (List.nth (seq) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let pad = ref ("") in
  if (start < 10) then (
  pad := " ";
  );
  print_endline ((((("EKG(" ^ !pad) ^ (string_of_int (start))) ^ "): ") ^ __show (!first)));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let limit = 100 in
  let starts = ref ([2; 5; 7; 9; 10]) in
  let ekg = ref (([] : int list list)) in
  let s = ref (0) in
  (try while (!s < List.length (!starts)) do
    try
  let seq = ref ([1; List.nth (!starts) (!s)]) in
  let n = ref (2) in
  (try while (!n < limit) do
    try
  let i = ref (2) in
  let done_ = ref (false) in
  (try while not (!done_) do
    try
  if (not (contains (!seq) (Obj.repr (!i))) && (gcd (Obj.repr (List.nth (!seq) ((!n - 1)))) (Obj.repr (!i)) > 1)) then (
  seq := (List.append (!seq) [(Obj.magic (!i) : int)]);
  done_ := true;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  ekg := (List.append (!ekg) [(Obj.magic (!seq) : int list)]);
  ignore (printSlice (Obj.repr (List.nth (!starts) (!s))) (!seq));
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (2) in
  let found = ref (false) in
  (try while (!i < limit) do
    try
  if ((List.nth (List.nth (!ekg) (1)) (!i) = List.nth (List.nth (!ekg) (2)) (!i)) && areSame (List.of_seq (Seq.take (!i - 0) (Seq.drop 0 (List.to_seq (List.nth (!ekg) (1)))))) (List.of_seq (Seq.take (!i - 0) (Seq.drop 0 (List.to_seq (List.nth (!ekg) (2))))))) then (
  print_endline (("\nEKG(5) and EKG(7) converge at term " ^ (string_of_int ((!i + 1)))));
  found := true;
  raise Break;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  print_endline ((("\nEKG5(5) and EKG(7) do not converge within " ^ (string_of_int (limit))) ^ " terms"));
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()