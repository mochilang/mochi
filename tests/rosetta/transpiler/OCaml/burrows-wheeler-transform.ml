(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:37 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

open Str


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let stx = "\x02"
let etx = "\x03"
let rec contains s ch =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

let rec sortStrings xs =
  let __ret = ref ([] : string list) in
  (try
  let arr = ref (xs) in
  let n = ref (List.length (!arr)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let j = ref (0) in
  (try while (!j < (!n - 1)) do
    try
  if (List.nth (!arr) (!j) > List.nth (!arr) ((!j + 1))) then (
  let tmp = List.nth (!arr) (!j) in
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then tmp else __x) (!arr));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

let rec bwt s =
  let __ret = ref [] in
  (try
  if ((let len_s = String.length !s and len_sub = String.length stx in let rec aux i = if i + len_sub > len_s then false else if String.sub !s i len_sub = stx then true else aux (i + 1) in aux 0) || (let len_s = String.length !s and len_sub = String.length etx in let rec aux i = if i + len_sub > len_s then false else if String.sub !s i len_sub = etx then true else aux (i + 1) in aux 0)) then (
  __ret := (Obj.magic ([("err", Obj.repr true); ("res", Obj.repr "")]) : (string * Obj.t) list); raise Return
  );
  s := ((stx ^ !s) ^ etx);
  let le = String.length (!s) in
  let table = ref ([]) in
  let i = ref (0) in
  (try while (!i < le) do
    try
  let rot = (String.sub (!s) !i (le - !i) ^ String.sub (!s) 0 (!i - 0)) in
  table := (List.append !table [rot]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  table := sortStrings (!table);
  let last = ref ("") in
  i := 0;
  (try while (!i < le) do
    try
  last := (!last ^ String.sub (List.nth (!table) (!i)) (le - 1) (le - (le - 1)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([("err", Obj.repr false); ("res", Obj.repr !last)]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec ibwt r =
  let __ret = ref "" in
  (try
  let le = String.length (r) in
  let table = ref ([]) in
  let i = ref (0) in
  (try while (!i < le) do
    try
  table := (List.append !table [""]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let n = ref (0) in
  (try while (!n < le) do
    try
  i := 0;
  (try while (!i < le) do
    try
  table := (List.mapi (fun __i __x -> if __i = !i then (String.sub (r) !i ((!i + 1) - !i) ^ List.nth (!table) (!i)) else __x) (!table));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  table := sortStrings (!table);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < le) do
    try
  if (String.sub (List.nth (!table) (!i)) (le - 1) (le - (le - 1)) = etx) then (
  __ret := (Obj.magic (String.sub (List.nth (!table) (!i)) 1 ((le - 1) - 1)) : string); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ("") : string); raise Return
  with Return -> !__ret)

let rec makePrintable s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (ch = stx) then (
  out := (!out ^ "^");
  ) else (
  if (ch = etx) then (
  out := (!out ^ "|");
  ) else (
  out := (!out ^ ch);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let examples = ref (["banana"; "appellee"; "dogwood"; "TO BE OR NOT TO BE OR WANT TO BE OR NOT?"; "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES"; "\x02ABC\x03"]) in
  (try List.iter (fun t ->
    try
  print_endline (makePrintable (t));
  let res = ref (bwt (ref (t))) in
  if (Obj.obj (List.assoc ("err") !res) : bool) then (
  print_endline (" --> ERROR: String can't contain STX or ETX");
  print_endline (" -->");
  ) else (
  let enc = (Obj.obj (List.assoc ("res") !res) : string) in
  print_endline ((" --> " ^ makePrintable (enc)));
  let r = ibwt (enc) in
  print_endline ((" --> " ^ r));
  );
  print_endline ("");
    with Continue -> ()) !examples with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
