(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Return

let rec createLine a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let slope = (((Obj.obj (List.assoc ("y") b) : float) -. (Obj.obj (List.assoc ("y") a) : float)) /. ((Obj.obj (List.assoc ("x") b) : float) -. (Obj.obj (List.assoc ("x") a) : float))) in
  let yint = ((Obj.obj (List.assoc ("y") a) : float) -. (slope *. (Obj.obj (List.assoc ("x") a) : float))) in
  __ret := (Obj.magic ([("slope", Obj.repr (slope)); ("yint", Obj.repr (yint))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and evalX l x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ((((Obj.obj (List.assoc ("slope") l) : float) *. x) +. (Obj.obj (List.assoc ("yint") l) : float))) : float); raise Return
  with Return -> !__ret)

and intersection l1 l2 =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if ((Obj.obj (List.assoc ("slope") l1) : float) = (Obj.obj (List.assoc ("slope") l2) : float)) then (
  __ret := (Obj.magic ([("x", Obj.repr (0.0)); ("y", Obj.repr (0.0))]) : (string * Obj.t) list); raise Return
  );
  let x = (((Obj.obj (List.assoc ("yint") l2) : float) -. (Obj.obj (List.assoc ("yint") l1) : float)) /. ((Obj.obj (List.assoc ("slope") l1) : float) -. (Obj.obj (List.assoc ("slope") l2) : float))) in
  let y = evalX (l1) (x) in
  __ret := (Obj.magic ([("x", Obj.repr (x)); ("y", Obj.repr (y))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let l1 = createLine ([("x", Obj.repr (4.0)); ("y", Obj.repr (0.0))]) ([("x", Obj.repr (6.0)); ("y", Obj.repr (10.0))]) in
  let l2 = createLine ([("x", Obj.repr (0.0)); ("y", Obj.repr (3.0))]) ([("x", Obj.repr (10.0)); ("y", Obj.repr (7.0))]) in
  let p = intersection (l1) (l2) in
  print_endline ((((("{" ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("x") p) : float)))) ^ " ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("y") p) : float)))) ^ "}"));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()