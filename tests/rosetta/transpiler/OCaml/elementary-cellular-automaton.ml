(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bitAt x idx =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let idx = (Obj.magic idx : int) in
  let v = ref (x) in
  let i = ref (0) in
  (try while (!i < idx) do
    try
  v := (!v / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!v mod 2)) : int); raise Return
  with Return -> !__ret)

and outputState state =
  let __ret = ref (Obj.magic 0) in
  (try
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (state)) do
    try
  if (String.sub (state) !i ((!i + 1) - !i) = "1") then (
  line := (!line ^ "#");
  ) else (
  line := (!line ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)

and step state r =
  let __ret = ref "" in
  (try
  let r = (Obj.magic r : int) in
  let cells = String.length (state) in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < cells) do
    try
  let l = String.sub (state) (((!i - 1) + cells) mod cells) (((((!i - 1) + cells) mod cells) + 1) - (((!i - 1) + cells) mod cells)) in
  let c = String.sub (state) !i ((!i + 1) - !i) in
  let rt = String.sub (state) ((!i + 1) mod cells) ((((!i + 1) mod cells) + 1) - ((!i + 1) mod cells)) in
  let idx = ref (0) in
  if (l = "1") then (
  idx := (!idx + 4);
  );
  if (c = "1") then (
  idx := (!idx + 2);
  );
  if (rt = "1") then (
  idx := (!idx + 1);
  );
  if (bitAt (Obj.repr (r)) (Obj.repr (!idx)) = 1) then (
  out := (!out ^ "1");
  ) else (
  out := (!out ^ "0");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and elem r cells generations state =
  let __ret = ref (Obj.magic 0) in
  (try
  let r = (Obj.magic r : int) in
  let cells = (Obj.magic cells : int) in
  let generations = (Obj.magic generations : int) in
  ignore (outputState (state));
  let g = ref (0) in
  let s = ref (state) in
  (try while (!g < generations) do
    try
  s := step (!s) (Obj.repr (r));
  ignore (outputState (!s));
  g := (!g + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and randInit cells seed =
  let __ret = ref "" in
  (try
  let cells = (Obj.magic cells : int) in
  let seed = (Obj.magic seed : int) in
  let s = ref ("") in
  let val_ = ref (seed) in
  let i = ref (0) in
  (try while (!i < cells) do
    try
  val_ := (((!val_ * 1664525) + 1013904223) mod 2147483647);
  if ((!val_ mod 2) = 0) then (
  s := (!s ^ "0");
  ) else (
  s := (!s ^ "1");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and singleInit cells =
  let __ret = ref "" in
  (try
  let cells = (Obj.magic cells : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < cells) do
    try
  if (!i = (cells / 2)) then (
  s := (!s ^ "1");
  ) else (
  s := (!s ^ "0");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let cells = 20 in
  let generations = 9 in
  print_endline ("Single 1, rule 90:");
  let state = ref (singleInit (Obj.repr (cells))) in
  ignore (elem (Obj.repr (90)) (Obj.repr (cells)) (Obj.repr (generations)) (!state));
  print_endline ("Random intial state, rule 30:");
  state := randInit (Obj.repr (cells)) (Obj.repr (3));
  ignore (elem (Obj.repr (30)) (Obj.repr (cells)) (Obj.repr (generations)) (!state));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()