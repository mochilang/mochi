(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 11:40 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec pow_int base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let result = ref (1) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := (!result * !b);
  );
  b := (!b * !b);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and pow_big base exp =
  let __ret = ref (Z.of_int 0) in
  (try
  let exp = (Obj.magic exp : int) in
  let result = ref ((Z.of_int (1))) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  result := (Z.mul (!result) (!b));
  );
  b := (Z.mul (!b) (!b));
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : Z.t); raise Return
  with Return -> !__ret)

and parseBigInt str =
  let __ret = ref (Z.of_int 0) in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (str) > 0) && (String.sub (str) 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref ((Z.of_int (0))) in
  (try while (!i < String.length (str)) do
    try
  let ch = String.sub (str) !i ((!i + 1) - !i) in
  let d = int_of_string (ch) in
  n := (Z.add ((Z.mul (!n) ((Z.of_int (10))))) ((Z.of_int (d))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := (Z.neg (!n));
  );
  __ret := (Obj.magic (!n) : Z.t); raise Return
  with Return -> !__ret)

and fermat n =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let p = pow_int (2) (n) in
  __ret := (Obj.magic ((Z.add (pow_big ((Z.of_int (2))) (p)) ((Z.of_int (1))))) : Z.t); raise Return
  with Return -> !__ret)

and primeFactorsBig n =
  let __ret = ref ([] : Z.t list) in
  (try
  let factors = ref (([] : Z.t list)) in
  let m = ref (n) in
  let d = ref ((Z.of_int (2))) in
  (try while ((Z.rem (!m) (!d)) = (Z.of_int (0))) do
    try
  factors := (List.append (!factors) [(Obj.magic (!d) : Z.t)]);
  m := (Z.div (!m) (!d));
    with Continue -> ()
  done with Break -> ());
  d := (Z.of_int (3));
  (try while ((Z.mul (!d) (!d)) <= !m) do
    try
  (try while ((Z.rem (!m) (!d)) = (Z.of_int (0))) do
    try
  factors := (List.append (!factors) [(Obj.magic (!d) : Z.t)]);
  m := (Z.div (!m) (!d));
    with Continue -> ()
  done with Break -> ());
  d := (Z.add (!d) ((Z.of_int (2))));
    with Continue -> ()
  done with Break -> ());
  if (!m > (Z.of_int (1))) then (
  factors := (List.append (!factors) [(Obj.magic (!m) : Z.t)]);
  );
  __ret := (Obj.magic (!factors) : Z.t list); raise Return
  with Return -> !__ret)

and show_list xs =
  let __ret = ref "" in
  (try
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  line := (!line ^ (Z.to_string (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  line := (!line ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!line) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nums = ref (([] : Z.t list)) in
  (try for i = 0 to (8 - 1) do
    try
  nums := (List.append (!nums) [(Obj.magic (fermat (i)) : Z.t)]);
    with Continue -> ()
  done with Break -> ());
  print_endline ("First 8 Fermat numbers:");
  (try List.iter (fun n ->
    try
  print_endline ((Z.to_string (n)));
    with Continue -> ()) (!nums) with Break -> ());
  let extra = ref ([(6, [(Z.of_int (274177)); (Z.of_int (67280421310721))]); (7, [parseBigInt ("59649589127497217"); parseBigInt ("5704689200685129054721")])]) in
  print_endline ("\nFactors:");
  let i = ref (0) in
  (try while (!i < List.length (!nums)) do
    try
  let facs = ref (([] : Z.t list)) in
  if (!i <= 5) then (
  facs := primeFactorsBig (List.nth (!nums) (!i));
  ) else (
  facs := (try List.assoc (!i) !extra with Not_found -> (Obj.magic 0));
  );
  print_endline (((("F" ^ (string_of_int (!i))) ^ " = ") ^ show_list (!facs)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()