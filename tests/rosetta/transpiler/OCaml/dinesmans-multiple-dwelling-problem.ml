(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec absInt n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  if (n < 0) then (
  __ret := (Obj.magic (-(n)) : int); raise Return
  );
  __ret := (Obj.magic (n) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let b = ref (1) in
  (try while (!b <= 5) do
    try
  if (!b <> 5) then (
  let c = ref (1) in
  (try while (!c <= 5) do
    try
  if ((!c <> 1) && (!c <> !b)) then (
  let f = ref (1) in
  (try while (!f <= 5) do
    try
  if (((((!f <> 1) && (!f <> 5)) && (!f <> !b)) && (!f <> !c)) && (absInt (Obj.repr ((!f - !c))) > 1)) then (
  let m = ref (1) in
  (try while (!m <= 5) do
    try
  if ((((!m <> !b) && (!m <> !c)) && (!m <> !f)) && (!m > !c)) then (
  let s = ref (1) in
  (try while (!s <= 5) do
    try
  if (((((!s <> !b) && (!s <> !c)) && (!s <> !f)) && (!s <> !m)) && (absInt (Obj.repr ((!s - !f))) > 1)) then (
  print_endline ((((((((((("Baker in " ^ (string_of_int (!b))) ^ ", Cooper in ") ^ (string_of_int (!c))) ^ ", Fletcher in ") ^ (string_of_int (!f))) ^ ", Miller in ") ^ (string_of_int (!m))) ^ ", Smith in ") ^ (string_of_int (!s))) ^ "."));
  __ret := (); raise Return
  );
  s := (!s + 1);
    with Continue -> ()
  done with Break -> ());
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  );
  f := (!f + 1);
    with Continue -> ()
  done with Break -> ());
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("No solution found.");
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()