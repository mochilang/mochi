(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec binom n k =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let k = (Obj.magic k : int) in
  if ((k < 0) || (k > n)) then (
  __ret := (Obj.magic ((Z.of_int (0))) : Z.t); raise Return
  );
  let kk = ref (k) in
  if (!kk > (n - !kk)) then (
  kk := (n - !kk);
  );
  let res = ref ((Z.of_int (1))) in
  let i = ref (0) in
  (try while (!i < !kk) do
    try
  res := (Z.mul (!res) ((Z.of_int ((n - !i)))));
  i := (!i + 1);
  res := (Z.div (!res) ((Z.of_int (!i))));
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : Z.t); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((Z.to_string (binom (Obj.repr (5)) (Obj.repr (3)))));
  print_endline ((Z.to_string (binom (Obj.repr (60)) (Obj.repr (30)))));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()