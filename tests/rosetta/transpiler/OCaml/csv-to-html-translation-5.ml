(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

open Str


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())


let _split s sep =
  let c = if String.length sep = 0 then ' ' else sep.[0] in
  String.split_on_char c s

exception Break
exception Continue

exception Return

let rec split s sep =
  let __ret = ref ([] : string list) in
  (try
  let out = ref (([] : string list)) in
  let start = ref (0) in
  let i = ref (0) in
  let n = String.length (sep) in
  (try while (!i <= (String.length (s) - n)) do
    try
  if (String.sub (s) !i ((!i + n) - !i) = sep) then (
  out := (List.append (!out) [(Obj.magic (String.sub (s) !start (!i - !start)) : string)]);
  i := (!i + n);
  start := !i;
  ) else (
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  out := (List.append (!out) [(Obj.magic (String.sub (s) !start (String.length (s) - !start)) : string)]);
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)

and htmlEscape s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (ch = "&") then (
  out := (!out ^ "&amp;");
  ) else (
  if (ch = "<") then (
  out := (!out ^ "&lt;");
  ) else (
  if (ch = ">") then (
  out := (!out ^ "&gt;");
  ) else (
  out := (!out ^ ch);
  );
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)


let rows = ref (([] : string list list))
let () =
  let mem_start = _mem () in
  let start = _now () in
  let c = ((((("Character,Speech\n" ^ "The multitude,The messiah! Show us the messiah!\n") ^ "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") ^ "The multitude,Who are you?\n") ^ "Brians mother,I'm his mother; that's who!\n") ^ "The multitude,Behold his mother! Behold his mother!") in
  (try List.iter (fun line ->
    try
  rows := (List.append (!rows) [(Obj.magic (_split (line) (",")) : string list)]);
    with Continue -> ()) (_split (c) ("\n")) with Break -> ());
  print_endline ("<table>");
  (try List.iter (fun row ->
    try
  let cells = ref ("") in
  (try List.iter (fun cell ->
    try
  cells := (((!cells ^ "<td>") ^ htmlEscape (cell)) ^ "</td>");
    with Continue -> ()) (row) with Break -> ());
  print_endline ((("    <tr>" ^ !cells) ^ "</tr>"));
    with Continue -> ()) (!rows) with Break -> ());
  print_endline ("</table>");
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()