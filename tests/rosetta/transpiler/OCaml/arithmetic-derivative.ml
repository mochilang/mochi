(* Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec primeFactors n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let factors = ref ([]) in
  let x = ref (n) in
  (try while ((!x mod 2) = 0) do
    try
  factors := List.append !factors [2];
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  let p = ref (3) in
  (try while ((!p * !p) <= !x) do
    try
  (try while ((!x mod !p) = 0) do
    try
  factors := List.append !factors [!p];
  x := (!x / !p);
    with Continue -> ()
  done with Break -> ());
  p := (!p + 2);
    with Continue -> ()
  done with Break -> ());
  if (!x > 1) then (
  factors := List.append !factors [!x];
  );
  __ret := (Obj.magic (!factors) : int list); raise Return
  with Return -> !__ret)

let rec repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec _d n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : float) in
  if (n < 0.0) then (
  __ret := (Obj.magic ((-.(_d ((-.(n)))))) : float); raise Return
  );
  if (n < 2.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let factors = ref ([]) in
  if (n < 10000000000000000000.0) then (
  factors := primeFactors ((Obj.magic n : int));
  ) else (
  let g = (Obj.magic (n /. 100.0) : int) in
  factors := primeFactors (g);
  factors := List.append !factors [2];
  factors := List.append !factors [2];
  factors := List.append !factors [5];
  factors := List.append !factors [5];
  );
  let c = List.length (!factors) in
  if (c = 1) then (
  __ret := (Obj.magic (1.0) : float); raise Return
  );
  if (c = 2) then (
  __ret := (Obj.magic (float_of_int ((List.nth (!factors) (0) + List.nth (!factors) (1)))) : float); raise Return
  );
  let d = (n /. float_of_int (List.nth (!factors) (0))) in
  __ret := (Obj.magic (((_d (d) *. float_of_int (List.nth (!factors) (0))) +. d)) : float); raise Return
  with Return -> !__ret)

let rec pad n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < 4) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let vals = ref ([]) in
  let n = ref (-(99)) in
  (try while (!n < 101) do
    try
  vals := List.append !vals [(Obj.magic _d (float_of_int (!n)) : int)];
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let i = ref (0) in
  (try while (!i < List.length (!vals)) do
    try
  let line = ref ("") in
  let j = ref (0) in
  (try while (!j < 10) do
    try
  line := (!line ^ pad (List.nth (!vals) ((!i + !j))));
  if (!j < 9) then (
  line := (!line ^ " ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  i := (!i + 10);
    with Continue -> ()
  done with Break -> ());
  let pow = ref (1.0) in
  let m = ref (1) in
  (try while (!m < 21) do
    try
  pow := (!pow *. 10.0);
  let exp = ref ((string_of_int (!m))) in
  if (String.length (!exp) < 2) then (
  exp := (!exp ^ " ");
  );
  let res = ref (((string_of_int (!m)) ^ repeat ("0") ((!m - 1)))) in
  print_endline (((("D(10^" ^ !exp) ^ ") / 7 = ") ^ !res));
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
