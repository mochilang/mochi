(* Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec qsel a k =
  let __ret = ref 0.0 in
  (try
  k := (Obj.magic !k : int);
  let arr = ref (a) in
  (try while (List.length (!arr) > 1) do
    try
  let px = ref ((_now () mod List.length (!arr))) in
  let pv = ref (List.nth (!arr) (!px)) in
  let last = (List.length (!arr) - 1) in
  let tmp = List.nth (!arr) (!px) in
  arr := (List.mapi (fun __i __x -> if __i = !px then List.nth (!arr) (last) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = last then tmp else __x) (!arr));
  px := 0;
  let i = ref (0) in
  (try while (!i < last) do
    try
  let v = List.nth (!arr) (!i) in
  if (v < !pv) then (
  let t = List.nth (!arr) (!px) in
  arr := (List.mapi (fun __i __x -> if __i = !px then List.nth (!arr) (!i) else __x) (!arr));
  arr := (List.mapi (fun __i __x -> if __i = !i then t else __x) (!arr));
  px := (!px + 1);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = !px then !pv else __x) (!arr));
  if (!px = !k) then (
  __ret := (Obj.magic (!pv) : float); raise Return
  );
  if (!k < !px) then (
  arr := List.of_seq (Seq.take (!px - 0) (Seq.drop 0 (List.to_seq (!arr))));
  ) else (
  arr := List.of_seq (Seq.take (List.length (!arr) - (!px + 1)) (Seq.drop (!px + 1) (List.to_seq (!arr))));
  k := (!k - (!px + 1));
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!arr) (0)) : float); raise Return
  with Return -> !__ret)

and fivenum a =
  let __ret = ref ([] : (float) list) in
  (try
  let last = (List.length (a) - 1) in
  let m = (last / 2) in
  let n5 = ref (([] : (float) list)) in
  n5 := (List.append (!n5) [(Obj.magic (qsel (List.of_seq (Seq.take (m - 0) (Seq.drop 0 (List.to_seq (a))))) (ref (0))) : float)]);
  n5 := (List.append (!n5) [(Obj.magic (qsel (List.of_seq (Seq.take (m - 0) (Seq.drop 0 (List.to_seq (a))))) (ref ((List.length (a) / 4)))) : float)]);
  n5 := (List.append (!n5) [(Obj.magic (qsel (a) (ref (m))) : float)]);
  let arr2 = ref (List.of_seq (Seq.take (List.length (a) - m) (Seq.drop m (List.to_seq (a))))) in
  let q3 = ((last - m) - (List.length (a) / 4)) in
  n5 := (List.append (!n5) [(Obj.magic (qsel (!arr2) (ref (q3))) : float)]);
  arr2 := List.of_seq (Seq.take (List.length (!arr2) - q3) (Seq.drop q3 (List.to_seq (!arr2))));
  n5 := (List.append (!n5) [(Obj.magic (qsel (!arr2) (ref ((List.length (!arr2) - 1)))) : float)]);
  __ret := (Obj.magic (!n5) : float list); raise Return
  with Return -> !__ret)


let x1 = ref ([36.0; 40.0; 7.0; 39.0; 41.0; 15.0])
let x2 = ref ([15.0; 6.0; 42.0; 41.0; 7.0; 36.0; 49.0; 40.0; 39.0; 47.0; 43.0])
let x3 = ref ([0.14082834; 0.0974879; 1.73131507; 0.87636009; (-.(1.95059594)); 0.73438555; (-.(0.03035726)); 1.4667597; (-.(0.74621349)); (-.(0.72588772)); 0.6390516; 0.61501527; (-.(0.9898378)); (-.(1.00447874)); (-.(0.62759469)); 0.66206163; 1.04312009; (-.(0.10305385)); 0.75775634; 0.32566578])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (__show (fivenum (!x1))));
  print_endline (__show (__show (fivenum (!x2))));
  print_endline (__show (__show (fivenum (!x3))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()