(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec dbRec k n t p a seq =
  let __ret = ref ([] : int list) in
  (try
  let k = (Obj.magic k : int) in
  let n = (Obj.magic n : int) in
  let t = (Obj.magic t : int) in
  let p = (Obj.magic p : int) in
  if (t > n) then (
  if ((n mod p) = 0) then (
  let j = ref (1) in
  (try while (!j <= p) do
    try
  seq := (List.append (!seq) [(Obj.magic (List.nth (!a) (!j)) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  ) else (
  a := (List.mapi (fun __i __x -> if __i = t then List.nth (!a) ((t - p)) else __x) (!a));
  seq := dbRec (Obj.repr (k)) (Obj.repr (n)) (Obj.repr ((t + 1))) (Obj.repr (p)) (a) (seq);
  let j = ref ((List.nth (!a) ((t - p)) + 1)) in
  (try while (!j < k) do
    try
  a := (List.mapi (fun __i __x -> if __i = t then !j else __x) (!a));
  seq := dbRec (Obj.repr (k)) (Obj.repr (n)) (Obj.repr ((t + 1))) (Obj.repr (t)) (a) (seq);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!seq) : int list); raise Return
  with Return -> !__ret)

and deBruijn k n =
  let __ret = ref "" in
  (try
  let k = (Obj.magic k : int) in
  let n = (Obj.magic n : int) in
  let digits = "0123456789" in
  let alphabet = ref (digits) in
  if (k < 10) then (
  alphabet := String.sub (digits) 0 (k - 0);
  );
  let a = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < (k * n)) do
    try
  a := (List.append (!a) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let seq = ref (([] : int list)) in
  seq := dbRec (Obj.repr (k)) (Obj.repr (n)) (Obj.repr (1)) (Obj.repr (1)) (a) (seq);
  let b = ref ("") in
  let idx = ref (0) in
  (try while (!idx < List.length (!seq)) do
    try
  b := (!b ^ String.make 1 (String.get (!alphabet) List.nth (!seq) (!idx)));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  b := (!b ^ String.sub (!b) 0 ((n - 1) - 0));
  __ret := (Obj.magic (!b) : string); raise Return
  with Return -> !__ret)

and allDigits s =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if ((ch < "0") || (ch > "9")) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and parseIntStr str =
  let __ret = ref 0 in
  (try
  let n = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (str)) do
    try
  n := ((!n * 10) + int_of_string (String.sub (str) !i ((!i + 1) - !i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!n) : int); raise Return
  with Return -> !__ret)

and validate db =
  let __ret = ref (Obj.magic 0) in
  (try
  let le = String.length (db) in
  let found = ref (([] : int list)) in
  let i = ref (0) in
  (try while (!i < 10000) do
    try
  found := (List.append (!found) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < (le - 3)) do
    try
  let s = String.sub (db) !j ((!j + 4) - !j) in
  if allDigits (s) then (
  let n = parseIntStr (s) in
  found := (List.mapi (fun __i __x -> if __i = n then (List.nth (!found) (n) + 1) else __x) (!found));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let errs = ref (([] : string list)) in
  let k = ref (0) in
  (try while (!k < 10000) do
    try
  if (List.nth (!found) (!k) = 0) then (
  errs := (List.append (!errs) [(Obj.magic ((("    PIN number " ^ padLeft (Obj.repr (!k)) (Obj.repr (4))) ^ " missing")) : string)]);
  ) else (
  if (List.nth (!found) (!k) > 1) then (
  errs := (List.append (!errs) [(Obj.magic ((((("    PIN number " ^ padLeft (Obj.repr (!k)) (Obj.repr (4))) ^ " occurs ") ^ (string_of_int (List.nth (!found) (!k)))) ^ " times")) : string)]);
  );
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  let lerr = List.length (!errs) in
  if (lerr = 0) then (
  print_endline ("  No errors found");
  ) else (
  let pl = ref ("s") in
  if (lerr = 1) then (
  pl := "";
  );
  print_endline ((((("  " ^ (string_of_int (lerr))) ^ " error") ^ !pl) ^ " found:"));
  let msg = joinStr (!errs) ("\n") in
  print_endline (__show msg);
  );
    !__ret
  with Return -> !__ret)

and padLeft n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := ("0" ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and joinStr xs sep =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ sep);
  );
  res := (!res ^ List.nth (xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and reverse s =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref ((String.length (s) - 1)) in
  (try while (!i >= 0) do
    try
  out := (!out ^ String.sub (s) !i ((!i + 1) - !i));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let db = ref (deBruijn (Obj.repr (10)) (Obj.repr (4))) in
  let le = String.length (!db) in
  print_endline (("The length of the de Bruijn sequence is " ^ (string_of_int (le))));
  print_endline ("\nThe first 130 digits of the de Bruijn sequence are:");
  print_endline (String.sub (!db) 0 (130 - 0));
  print_endline ("\nThe last 130 digits of the de Bruijn sequence are:");
  print_endline (String.sub (!db) (le - 130) (String.length (!db) - (le - 130)));
  print_endline ("\nValidating the de Bruijn sequence:");
  ignore (validate (!db));
  print_endline ("\nValidating the reversed de Bruijn sequence:");
  let dbr = reverse (!db) in
  ignore (validate (dbr));
  db := ((String.sub (!db) 0 (4443 - 0) ^ ".") ^ String.sub (!db) 4444 (String.length (!db) - 4444));
  print_endline ("\nValidating the overlaid de Bruijn sequence:");
  ignore (validate (!db));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()