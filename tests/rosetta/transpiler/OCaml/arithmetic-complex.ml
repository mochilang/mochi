(* Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Return

let rec add a b =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("re", Obj.repr ((Obj.obj (List.assoc ("re") a) : float) +. (Obj.obj (List.assoc ("re") b) : float))); ("im", Obj.repr ((Obj.obj (List.assoc ("im") a) : float) +. (Obj.obj (List.assoc ("im") b) : float)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec mul a b =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (((Obj.obj (List.assoc ("re") a) : float) *. (Obj.obj (List.assoc ("re") b) : float)) -. ((Obj.obj (List.assoc ("im") a) : float) *. (Obj.obj (List.assoc ("im") b) : float)))); ("im", Obj.repr (((Obj.obj (List.assoc ("re") a) : float) *. (Obj.obj (List.assoc ("im") b) : float)) +. ((Obj.obj (List.assoc ("im") a) : float) *. (Obj.obj (List.assoc ("re") b) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec neg a =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (-.((Obj.obj (List.assoc ("re") a) : float)))); ("im", Obj.repr (-.((Obj.obj (List.assoc ("im") a) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec inv a =
  let __ret = ref [] in
  (try
  let denom = (((Obj.obj (List.assoc ("re") a) : float) *. (Obj.obj (List.assoc ("re") a) : float)) +. ((Obj.obj (List.assoc ("im") a) : float) *. (Obj.obj (List.assoc ("im") a) : float))) in
  __ret := (Obj.magic ([("re", Obj.repr ((Obj.obj (List.assoc ("re") a) : float) /. denom)); ("im", Obj.repr ((-.((Obj.obj (List.assoc ("im") a) : float))) /. denom))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec conj a =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (Obj.obj (List.assoc ("re") a) : float)); ("im", Obj.repr (-.((Obj.obj (List.assoc ("im") a) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

let rec cstr a =
  let __ret = ref "" in
  (try
  let s = ref (("(" ^ (string_of_float ((Obj.obj (List.assoc ("re") a) : float))))) in
  if ((Obj.obj (List.assoc ("im") a) : float) >= float_of_int (0)) then (
  s := (((!s ^ "+") ^ (string_of_float ((Obj.obj (List.assoc ("im") a) : float)))) ^ "i)");
  ) else (
  s := ((!s ^ (string_of_float ((Obj.obj (List.assoc ("im") a) : float)))) ^ "i)");
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let a = [("re", Obj.repr 1.0); ("im", Obj.repr 1.0)]
let b = [("re", Obj.repr 3.14159); ("im", Obj.repr 1.25)]
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (("a:       " ^ cstr (a)));
  print_endline (("b:       " ^ cstr (b)));
  print_endline (("a + b:   " ^ cstr (add (a) (b))));
  print_endline (("a * b:   " ^ cstr (mul (a) (b))));
  print_endline (("-a:      " ^ cstr (neg (a))));
  print_endline (("1 / a:   " ^ cstr (inv (a))));
  print_endline (("aÌ…:       " ^ cstr (conj (a))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
