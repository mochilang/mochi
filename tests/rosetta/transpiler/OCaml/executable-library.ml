(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec hailstone n =
  let __ret = ref ([] : int list) in
  (try
  let n = (Obj.magic n : int) in
  let seq = ref (([] : int list)) in
  let x = ref (n) in
  seq := (List.append (!seq) [(Obj.magic (!x) : int)]);
  (try while (!x > 1) do
    try
  if ((!x mod 2) = 0) then (
  x := (!x / 2);
  ) else (
  x := ((3 * !x) + 1);
  );
  seq := (List.append (!seq) [(Obj.magic (!x) : int)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!seq) : int list); raise Return
  with Return -> !__ret)

and listString xs =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  s := (!s ^ (string_of_int (List.nth (xs) (!i))));
  if (!i < (List.length (xs) - 1)) then (
  s := (!s ^ " ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and libMain () =
  let __ret = ref (Obj.magic 0) in
  (try
  let seq = ref (hailstone (Obj.repr (27))) in
  print_endline ("");
  print_endline ("Hailstone sequence for the number 27:");
  print_endline ((("  has " ^ (string_of_int (List.length (!seq)))) ^ " elements"));
  print_endline (("  starts with " ^ listString (List.of_seq (Seq.take (4 - 0) (Seq.drop 0 (List.to_seq (!seq)))))));
  print_endline (("  ends with " ^ listString (List.of_seq (Seq.take (List.length (!seq) - (List.length (!seq) - 4)) (Seq.drop (List.length (!seq) - 4) (List.to_seq (!seq)))))));
  let longest = ref (0) in
  let length = ref (0) in
  let i = ref (1) in
  (try while (!i < 100000) do
    try
  let l = List.length (hailstone (Obj.repr (!i))) in
  if (l > !length) then (
  longest := !i;
  length := l;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  print_endline (((((string_of_int (!longest)) ^ " has the longest Hailstone sequence, its length being ") ^ (string_of_int (!length))) ^ "."));
    !__ret
  with Return -> !__ret)


let () =
  ignore (libMain ());
  ()