(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cosApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n <= 10) do
    try
  let denom = float_of_int ((((2 * !n) - 1) * (2 * !n))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and cis x =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic ([("re", Obj.repr (cosApprox (Obj.repr (x)))); ("im", Obj.repr (sinApprox (Obj.repr (x))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (((Obj.obj (List.assoc ("re") a) : float) +. (Obj.obj (List.assoc ("re") b) : float)))); ("im", Obj.repr (((Obj.obj (List.assoc ("im") a) : float) +. (Obj.obj (List.assoc ("im") b) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("re", Obj.repr (((Obj.obj (List.assoc ("re") a) : float) -. (Obj.obj (List.assoc ("re") b) : float)))); ("im", Obj.repr (((Obj.obj (List.assoc ("im") a) : float) -. (Obj.obj (List.assoc ("im") b) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("re", Obj.repr ((((Obj.obj (List.assoc ("re") a) : float) *. (Obj.obj (List.assoc ("re") b) : float)) -. ((Obj.obj (List.assoc ("im") a) : float) *. (Obj.obj (List.assoc ("im") b) : float))))); ("im", Obj.repr ((((Obj.obj (List.assoc ("re") a) : float) *. (Obj.obj (List.assoc ("im") b) : float)) +. ((Obj.obj (List.assoc ("im") a) : float) *. (Obj.obj (List.assoc ("re") b) : float)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and ditfft2Rec x y offX offY n s =
  let __ret = ref (Obj.magic 0) in
  (try
  let offX = (Obj.magic offX : int) in
  let offY = (Obj.magic offY : int) in
  let n = (Obj.magic n : int) in
  let s = (Obj.magic s : int) in
  if (n = 1) then (
  y := (List.mapi (fun __i __x -> if __i = offY then [("re", Obj.repr (List.nth (x) (offX))); ("im", Obj.repr (0.0))] else __x) (!y));
  __ret := (); raise Return
  );
  ignore (ditfft2Rec (x) (y) (Obj.repr (offX)) (Obj.repr (offY)) (Obj.repr ((n / 2))) (Obj.repr ((2 * s))));
  ignore (ditfft2Rec (x) (y) (Obj.repr ((offX + s))) (Obj.repr ((offY + (n / 2)))) (Obj.repr ((n / 2))) (Obj.repr ((2 * s))));
  let k = ref (0) in
  (try while (!k < (n / 2)) do
    try
  let angle = ((((-.(2.0)) *. _pi) *. float_of_int (!k)) /. float_of_int (n)) in
  let tf = mul (cis (Obj.repr (angle))) (List.nth (!y) (((offY + !k) + (n / 2)))) in
  let a = add (List.nth (!y) ((offY + !k))) (tf) in
  let b = sub (List.nth (!y) ((offY + !k))) (tf) in
  y := (List.mapi (fun __i __x -> if __i = (offY + !k) then a else __x) (!y));
  y := (List.mapi (fun __i __x -> if __i = ((offY + !k) + (n / 2)) then b else __x) (!y));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and ditfft2 x y n s =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  let s = (Obj.magic s : int) in
  ignore (ditfft2Rec (x) (ref (y)) (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (n)) (Obj.repr (s)));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = ref ([1.0; 1.0; 1.0; 1.0; 0.0; 0.0; 0.0; 0.0]) in
  let y = ref (([] : (string * Obj.t) list list)) in
  let i = ref (0) in
  (try while (!i < List.length (!x)) do
    try
  y := (List.append (!y) [(Obj.magic ([("re", Obj.repr (0.0)); ("im", Obj.repr (0.0))]) : (string * Obj.t) list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (ditfft2 (!x) (!y) (Obj.repr (List.length (!x))) (Obj.repr (1)));
  (try List.iter (fun c ->
    try
  let line = ref (pad (fmt (Obj.repr ((Obj.obj (List.assoc ("re") c) : float)))) (Obj.repr (8))) in
  if ((Obj.obj (List.assoc ("im") c) : float) >= float_of_int (0)) then (
  line := ((!line ^ "+") ^ fmt (Obj.repr ((Obj.obj (List.assoc ("im") c) : float))));
  ) else (
  line := (!line ^ fmt (Obj.repr ((Obj.obj (List.assoc ("im") c) : float))));
  );
  print_endline (__show !line);
    with Continue -> ()) (!y) with Break -> ());
    !__ret
  with Return -> !__ret)

and pad s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let t = ref (s) in
  (try while (String.length (!t) < w) do
    try
  t := (" " ^ !t);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : string); raise Return
  with Return -> !__ret)

and fmt x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let y = ref ((floorf (Obj.repr (((x *. 10000.0) +. 0.5))) /. 10000.0)) in
  let s = ref ((Printf.sprintf "%.16g" (!y))) in
  let dot = ref ((try String.index (!s) '.' with Not_found -> -1)) in
  if (!dot = (0 - 1)) then (
  s := (!s ^ ".0000");
  ) else (
  let d = ref (((String.length (!s) - !dot) - 1)) in
  (try while (!d < 4) do
    try
  s := (!s ^ "0");
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and floorf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic x : int) in
  __ret := (Obj.magic (float_of_int (y)) : float); raise Return
  with Return -> !__ret)

and indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()