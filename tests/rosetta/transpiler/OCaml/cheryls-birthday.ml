(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let choices = ref ([[("month", Obj.repr (5)); ("day", Obj.repr (15))]; [("month", Obj.repr (5)); ("day", Obj.repr (16))]; [("month", Obj.repr (5)); ("day", Obj.repr (19))]; [("month", Obj.repr (6)); ("day", Obj.repr (17))]; [("month", Obj.repr (6)); ("day", Obj.repr (18))]; [("month", Obj.repr (7)); ("day", Obj.repr (14))]; [("month", Obj.repr (7)); ("day", Obj.repr (16))]; [("month", Obj.repr (8)); ("day", Obj.repr (14))]; [("month", Obj.repr (8)); ("day", Obj.repr (15))]; [("month", Obj.repr (8)); ("day", Obj.repr (17))]])
let rec monthUnique b list =
  let __ret = ref false in
  (try
  let c = ref (0) in
  (try List.iter (fun x ->
    try
  if ((Obj.obj (List.assoc ("month") x) : int) = (Obj.obj (List.assoc ("month") b) : int)) then (
  c := (!c + 1);
  );
    with Continue -> ()) (list) with Break -> ());
  __ret := (Obj.magic ((!c = 1)) : bool); raise Return
  with Return -> !__ret)

and dayUnique b list =
  let __ret = ref false in
  (try
  let c = ref (0) in
  (try List.iter (fun x ->
    try
  if ((Obj.obj (List.assoc ("day") x) : int) = (Obj.obj (List.assoc ("day") b) : int)) then (
  c := (!c + 1);
  );
    with Continue -> ()) (list) with Break -> ());
  __ret := (Obj.magic ((!c = 1)) : bool); raise Return
  with Return -> !__ret)

and monthWithUniqueDay b list =
  let __ret = ref false in
  (try
  (try List.iter (fun x ->
    try
  if (((Obj.obj (List.assoc ("month") x) : int) = (Obj.obj (List.assoc ("month") b) : int)) && dayUnique (x) (list)) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) (list) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and bstr b =
  let __ret = ref "" in
  (try
  let months = ref ([""; "January"; "February"; "March"; "April"; "May"; "June"; "July"; "August"; "September"; "October"; "November"; "December"]) in
  __ret := (Obj.magic (((List.nth (!months) ((Obj.obj (List.assoc ("month") b) : int)) ^ " ") ^ (string_of_int ((Obj.obj (List.assoc ("day") b) : int))))) : string); raise Return
  with Return -> !__ret)


let () =
  let filtered = ref (([] : (string * Obj.t) list list)) in
  let filtered2 = ref (([] : (string * Obj.t) list list)) in
  let filtered3 = ref (([] : (string * Obj.t) list list)) in
  let filtered4 = ref (([] : (string * Obj.t) list list)) in
  let mem_start = _mem () in
  let start = _now () in
  (try List.iter (fun bd ->
    try
  if not (monthUnique (bd) (!choices)) then (
  filtered := (List.append (!filtered) [(Obj.magic (bd) : (string * Obj.t) list)]);
  );
    with Continue -> ()) (!choices) with Break -> ());
  (try List.iter (fun bd ->
    try
  if not (monthWithUniqueDay (bd) (!filtered)) then (
  filtered2 := (List.append (!filtered2) [(Obj.magic (bd) : (string * Obj.t) list)]);
  );
    with Continue -> ()) (!filtered) with Break -> ());
  (try List.iter (fun bd ->
    try
  if dayUnique (bd) (!filtered2) then (
  filtered3 := (List.append (!filtered3) [(Obj.magic (bd) : (string * Obj.t) list)]);
  );
    with Continue -> ()) (!filtered2) with Break -> ());
  (try List.iter (fun bd ->
    try
  if monthUnique (bd) (!filtered3) then (
  filtered4 := (List.append (!filtered4) [(Obj.magic (bd) : (string * Obj.t) list)]);
  );
    with Continue -> ()) (!filtered3) with Break -> ());
  if (List.length (!filtered4) = 1) then (
  print_endline (("Cheryl's birthday is " ^ bstr (List.nth (!filtered4) (0))));
  ) else (
  print_endline ("Something went wrong!");
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()