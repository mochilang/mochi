(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec mod_ n m =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let m = (Obj.magic m : int) in
  __ret := (Obj.magic ((((n mod m) + m) mod m)) : int); raise Return
  with Return -> !__ret)

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  if ((n mod 3) = 0) then (
  __ret := (Obj.magic ((n = 3)) : bool); raise Return
  );
  let d = ref (5) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 4);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

let rec pad n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec carmichael p1 =
  let __ret = ref (Obj.magic 0) in
  (try
  let p1 = (Obj.magic p1 : int) in
  (try for h3 = 2 to (p1 - 1) do
    try
  (try for d = 1 to ((h3 + p1) - 1) do
    try
  if (((((h3 + p1) * (p1 - 1)) mod d) = 0) && (mod_ ((-(p1) * p1)) (h3) = (d mod h3))) then (
  let p2 = (1 + (((p1 - 1) * (h3 + p1)) / d)) in
  if not (isPrime (p2)) then (
  raise Continue;
  );
  let p3 = (1 + ((p1 * p2) / h3)) in
  if not (isPrime (p3)) then (
  raise Continue;
  );
  if (((p2 * p3) mod (p1 - 1)) <> 1) then (
  raise Continue;
  );
  let c = ((p1 * p2) * p3) in
  print_endline (((((((pad (p1) (2) ^ "   ") ^ pad (p2) (4)) ^ "   ") ^ pad (p3) (5)) ^ "     ") ^ (string_of_int (c))));
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("The following are Carmichael munbers for p1 <= 61:\n");
  print_endline ("p1     p2      p3     product");
  print_endline ("==     ==      ==     =======");
  (try for p1 = 2 to (62 - 1) do
    try
  if isPrime (p1) then (
  ignore (carmichael (p1));
  );
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
