(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let row = 3 in
  let col = 4 in
  let a = ref (([] : int list list)) in
  let i = ref (0) in
  (try while (!i < row) do
    try
  let rowArr = ref (([] : int list)) in
  let j = ref (0) in
  (try while (!j < col) do
    try
  rowArr := (List.append (!rowArr) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  a := (List.append (!a) [(Obj.magic (!rowArr) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (("a[0][0] = " ^ (string_of_int (List.nth (List.nth (!a) (0)) (0)))));
  a := (List.mapi (fun __i __x -> if __i = (row - 1) then (List.mapi (fun __i __x -> if __i = (col - 1) then 7 else __x) (List.nth (!a) ((row - 1)))) else __x) (!a));
  print_endline (((((("a[" ^ (string_of_int ((row - 1)))) ^ "][") ^ (string_of_int ((col - 1)))) ^ "] = ") ^ (string_of_int (List.nth (List.nth (!a) ((row - 1))) ((col - 1))))));
  a := ([] : int list list);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()