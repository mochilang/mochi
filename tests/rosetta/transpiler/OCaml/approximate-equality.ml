(* Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

let rec maxf a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  if (a > b) then (
  __ret := (Obj.magic (a) : float); raise Return
  );
  __ret := (Obj.magic (b) : float); raise Return
  with Return -> !__ret)

let rec isClose a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : float) in
  let b = (Obj.magic b : float) in
  let relTol = 0.000000001 in
  let t = abs_float (a -. b) in
  let u = (relTol *. maxf (abs_float a) (abs_float b)) in
  __ret := (Obj.magic ((t <= u)) : bool); raise Return
  with Return -> !__ret)

let rec sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 10) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let root2 = sqrtApprox (2.0) in
  let pairs = ref ([[100000000000000.02; 100000000000000.02]; [100.01; 100.011]; [(10000000000000.002 /. 10000.0); 1000000000.0000001]; [0.001; 0.0010000001]; [0.000000000000000000000101; 0.0]; [(root2 *. root2); 2.0]; [((-.(root2)) *. root2); (-.(2.0))]; [100000000000000000.0; 100000000000000000.0]; [3.141592653589793; 3.141592653589793]]) in
  (try List.iter (fun pair ->
    try
  let a = List.nth (pair) (0) in
  let b = List.nth (pair) (1) in
  let s = if isClose (a) (b) then "≈" else "≉" in
  print_endline ((((((string_of_float (a)) ^ " ") ^ s) ^ " ") ^ (string_of_float (b))));
    with Continue -> ()) !pairs with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
