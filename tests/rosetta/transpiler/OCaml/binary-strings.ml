(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 21:41 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec char n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let letters = "abcdefghijklmnopqrstuvwxyz" in
  let idx = (n - 97) in
  if ((idx < 0) || (idx >= String.length (letters))) then (
  __ret := (Obj.magic ("?") : string); raise Return
  );
  __ret := (Obj.magic (String.sub (letters) idx ((idx + 1) - idx)) : string); raise Return
  with Return -> !__ret)

let rec fromBytes bs =
  let __ret = ref "" in
  (try
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (bs)) do
    try
  s := (!s ^ char (List.nth (bs) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let b = ref ([98; 105; 110; 97; 114; 121])
let c = ref (!b)
let d = ref ([])
let i = ref (0)
let z = ref (List.append !b [122])
let sub = ref (List.of_seq (Seq.take (3 - 1) (Seq.drop 1 (List.to_seq !b))))
let f = ref ([])
let rem = ref ([])
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show (!b));
  print_endline (__show (!c));
  print_endline (__show ((!b = !c)));
  (try while (!i < List.length (!b)) do
    try
  d := List.append !d [List.nth (!b) (!i)];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  d := (List.mapi (fun __i __x -> if __i = 1 then 97 else __x) (!d));
  d := (List.mapi (fun __i __x -> if __i = 4 then 110 else __x) (!d));
  print_endline (fromBytes (!b));
  print_endline (fromBytes (!d));
  print_endline (__show ((List.length (!b) = 0)));
  print_endline (fromBytes (!z));
  print_endline (fromBytes (!sub));
  i := 0;
  (try while (!i < List.length (!d)) do
    try
  let val_ = List.nth (!d) (!i) in
  if (val_ = 110) then (
  f := List.append !f [109];
  ) else (
  f := List.append !f [val_];
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (((fromBytes (!d) ^ " -> ") ^ fromBytes (!f)));
  rem := List.append !rem [List.nth (!b) (0)];
  i := 3;
  (try while (!i < List.length (!b)) do
    try
  rem := List.append !rem [List.nth (!b) (!i)];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (fromBytes (!rem));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
