(* Generated by Mochi transpiler v0.10.39 on 2025-07-25 08:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec d2d d =
  let __ret = ref 0.0 in
  (try
  __ret := (d mod 360.0); raise Return
  with Return -> !__ret)

let rec g2g g =
  let __ret = ref 0.0 in
  (try
  __ret := (g mod 400.0); raise Return
  with Return -> !__ret)

let rec m2m m =
  let __ret = ref 0.0 in
  (try
  __ret := (m mod 6400.0); raise Return
  with Return -> !__ret)

let rec r2r r =
  let __ret = ref 0.0 in
  (try
  __ret := (r mod (2.0 *. 3.141592653589793)); raise Return
  with Return -> !__ret)

let rec d2g d =
  let __ret = ref 0.0 in
  (try
  __ret := ((d2d (d) *. 400.0) /. 360.0); raise Return
  with Return -> !__ret)

let rec d2m d =
  let __ret = ref 0.0 in
  (try
  __ret := ((d2d (d) *. 6400.0) /. 360.0); raise Return
  with Return -> !__ret)

let rec d2r d =
  let __ret = ref 0.0 in
  (try
  __ret := ((d2d (d) *. 3.141592653589793) /. 180.0); raise Return
  with Return -> !__ret)

let rec g2d g =
  let __ret = ref 0.0 in
  (try
  __ret := ((g2g (g) *. 360.0) /. 400.0); raise Return
  with Return -> !__ret)

let rec g2m g =
  let __ret = ref 0.0 in
  (try
  __ret := ((g2g (g) *. 6400.0) /. 400.0); raise Return
  with Return -> !__ret)

let rec g2r g =
  let __ret = ref 0.0 in
  (try
  __ret := ((g2g (g) *. 3.141592653589793) /. 200.0); raise Return
  with Return -> !__ret)

let rec m2d m =
  let __ret = ref 0.0 in
  (try
  __ret := ((m2m (m) *. 360.0) /. 6400.0); raise Return
  with Return -> !__ret)

let rec m2g m =
  let __ret = ref 0.0 in
  (try
  __ret := ((m2m (m) *. 400.0) /. 6400.0); raise Return
  with Return -> !__ret)

let rec m2r m =
  let __ret = ref 0.0 in
  (try
  __ret := ((m2m (m) *. 3.141592653589793) /. 3200.0); raise Return
  with Return -> !__ret)

let rec r2d r =
  let __ret = ref 0.0 in
  (try
  __ret := ((r2r (r) *. 180.0) /. 3.141592653589793); raise Return
  with Return -> !__ret)

let rec r2g r =
  let __ret = ref 0.0 in
  (try
  __ret := ((r2r (r) *. 200.0) /. 3.141592653589793); raise Return
  with Return -> !__ret)

let rec r2m r =
  let __ret = ref 0.0 in
  (try
  __ret := ((r2r (r) *. 3200.0) /. 3.141592653589793); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let angles = ref ([(-.(2.0)); (-.(1.0)); 0.0; 1.0; 2.0; 6.2831853; 16.0; 57.2957795; 359.0; 399.0; 6399.0; 1000000.0]) in
  print_endline ("degrees normalized_degs gradians mils radians");
  (try List.iter (fun a ->
    try
  print_endline ((((((((((string_of_float (a)) ^ " ") ^ (string_of_float (d2d (a)))) ^ " ") ^ (string_of_float (d2g (a)))) ^ " ") ^ (string_of_float (d2m (a)))) ^ " ") ^ (string_of_float (d2r (a)))));
    with Continue -> ()) !angles with Break -> ());
  print_endline ("\ngradians normalized_grds degrees mils radians");
  (try List.iter (fun a ->
    try
  print_endline ((((((((((string_of_float (a)) ^ " ") ^ (string_of_float (g2g (a)))) ^ " ") ^ (string_of_float (g2d (a)))) ^ " ") ^ (string_of_float (g2m (a)))) ^ " ") ^ (string_of_float (g2r (a)))));
    with Continue -> ()) !angles with Break -> ());
  print_endline ("\nmils normalized_mils degrees gradians radians");
  (try List.iter (fun a ->
    try
  print_endline ((((((((((string_of_float (a)) ^ " ") ^ (string_of_float (m2m (a)))) ^ " ") ^ (string_of_float (m2d (a)))) ^ " ") ^ (string_of_float (m2g (a)))) ^ " ") ^ (string_of_float (m2r (a)))));
    with Continue -> ()) !angles with Break -> ());
  print_endline ("\nradians normalized_rads degrees gradians mils");
  (try List.iter (fun a ->
    try
  print_endline ((((((((((string_of_float (a)) ^ " ") ^ (string_of_float (r2r (a)))) ^ " ") ^ (string_of_float (r2d (a)))) ^ " ") ^ (string_of_float (r2g (a)))) ^ " ") ^ (string_of_float (r2m (a)))));
    with Continue -> ()) !angles with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  ignore (main ());
