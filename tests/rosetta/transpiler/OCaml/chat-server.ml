(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec removeName names name =
  let __ret = ref ([] : string list) in
  (try
  let out = ref (([] : string list)) in
  (try List.iter (fun n ->
    try
  if (n <> name) then (
  out := (List.append !out [(Obj.magic (n) : string)]);
  );
    with Continue -> ()) names with Break -> ());
  __ret := (Obj.magic (!out) : string list); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let clients = ref (([] : string list)) in
let rec broadcast msg =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline (__show msg);
    !__ret
  with Return -> !__ret) in
let rec add name =
  let __ret = ref (Obj.magic 0) in
  (try
  clients := (List.append !clients [(Obj.magic (name) : string)]);
  ignore (broadcast ((("+++ \"" ^ name) ^ "\" connected +++\n")));
    !__ret
  with Return -> !__ret) in
let rec send name msg =
  let __ret = ref (Obj.magic 0) in
  (try
  ignore (broadcast ((((name ^ "> ") ^ msg) ^ "\n")));
    !__ret
  with Return -> !__ret) in
let rec remove name =
  let __ret = ref (Obj.magic 0) in
  (try
  clients := removeName (!clients) (name);
  ignore (broadcast ((("--- \"" ^ name) ^ "\" disconnected ---\n")));
    !__ret
  with Return -> !__ret) in
  ignore (add ("Alice"));
  ignore (add ("Bob"));
  ignore (send ("Alice") ("Hello Bob!"));
  ignore (send ("Bob") ("Hi Alice!"));
  ignore (remove ("Bob"));
  ignore (remove ("Alice"));
  ignore (broadcast ("Server stopping!\n"));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
