(* Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec bottles n =
  let __ret = ref "" in
  let n = ref n in
  (try
  if (!n = 0) then (
  __ret := "No more bottles"; raise Return;
  );
  if (!n = 1) then (
  __ret := "1 bottle"; raise Return;
  );
  __ret := ((string_of_int (!n)) ^ " bottles"); raise Return;
  __ret := ((string_of_int (!n)) ^ " bottles");
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let i = ref (99) in
  (try while (!i > 0) do
    try
  print_endline ((bottles (!i) ^ " of beer on the wall"));
  print_endline ((bottles (!i) ^ " of beer"));
  print_endline ("Take one down, pass it around");
  print_endline ((bottles ((!i - 1)) ^ " of beer on the wall"));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  main ();
