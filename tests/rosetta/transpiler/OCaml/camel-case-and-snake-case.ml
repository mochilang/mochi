(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 18:10 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec trimSpace s =
  let __ret = ref "" in
  (try
  let start = ref (0) in
  (try while ((!start < String.length (s)) && (String.sub (s) !start ((!start + 1) - !start) = " ")) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  let end_ = ref (String.length (s)) in
  (try while ((!end_ > !start) && (String.sub (s) (!end_ - 1) (!end_ - (!end_ - 1)) = " ")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (String.sub (s) !start (!end_ - !start)) : string); raise Return
  with Return -> !__ret)

let rec isUpper ch =
  let __ret = ref false in
  (try
  __ret := (Obj.magic (((ch >= "A") && (ch <= "Z"))) : bool); raise Return
  with Return -> !__ret)

let rec padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

let rec snakeToCamel s =
  let __ret = ref "" in
  (try
  s := trimSpace (!s);
  let out = ref ("") in
  let up = ref (false) in
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let ch = String.sub (!s) !i ((!i + 1) - !i) in
  if ((((ch = "_") || (ch = "-")) || (ch = " ")) || (ch = ".")) then (
  up := true;
  i := (!i + 1);
  raise Continue;
  );
  if (!i = 0) then (
  out := (!out ^ String.lowercase_ascii (ch));
  up := false;
  i := (!i + 1);
  raise Continue;
  );
  if !up then (
  out := (!out ^ String.uppercase_ascii (ch));
  up := false;
  ) else (
  out := (!out ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec camelToSnake s =
  let __ret = ref "" in
  (try
  s := trimSpace (!s);
  let out = ref ("") in
  let prevUnd = ref (false) in
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let ch = String.sub (!s) !i ((!i + 1) - !i) in
  if (((ch = " ") || (ch = "-")) || (ch = ".")) then (
  if (not (!prevUnd) && (String.length (!out) > 0)) then (
  out := (!out ^ "_");
  prevUnd := true;
  );
  i := (!i + 1);
  raise Continue;
  );
  if (ch = "_") then (
  if (not (!prevUnd) && (String.length (!out) > 0)) then (
  out := (!out ^ "_");
  prevUnd := true;
  );
  i := (!i + 1);
  raise Continue;
  );
  if isUpper (ch) then (
  if ((!i > 0) && not (!prevUnd)) then (
  out := (!out ^ "_");
  );
  out := (!out ^ String.lowercase_ascii (ch));
  prevUnd := false;
  ) else (
  out := (!out ^ String.lowercase_ascii (ch));
  prevUnd := false;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let start = ref (0) in
  (try while ((!start < String.length (!out)) && (String.sub (!out) !start ((!start + 1) - !start) = "_")) do
    try
  start := (!start + 1);
    with Continue -> ()
  done with Break -> ());
  let end_ = ref (String.length (!out)) in
  (try while ((!end_ > !start) && (String.sub (!out) (!end_ - 1) (!end_ - (!end_ - 1)) = "_")) do
    try
  end_ := (!end_ - 1);
    with Continue -> ()
  done with Break -> ());
  out := String.sub (!out) !start (!end_ - !start);
  let res = ref ("") in
  let j = ref (0) in
  let lastUnd = ref (false) in
  (try while (!j < String.length (!out)) do
    try
  let c = String.sub (!out) !j ((!j + 1) - !j) in
  if (c = "_") then (
  if not (!lastUnd) then (
  res := (!res ^ c);
  );
  lastUnd := true;
  ) else (
  res := (!res ^ c);
  lastUnd := false;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let samples = ref (["snakeCase"; "snake_case"; "snake-case"; "snake case"; "snake CASE"; "snake.case"; "variable_10_case"; "variable10Case"; "É›rgo rE tHis"; "hurry-up-joe!"; "c://my-docs/happy_Flag-Day/12.doc"; " spaces "]) in
  print_endline ("=== To snake_case ===");
  (try List.iter (fun s ->
    try
  print_endline (((padLeft (s) (34) ^ " => ") ^ camelToSnake (ref (s))));
    with Continue -> ()) !samples with Break -> ());
  print_endline ("");
  print_endline ("=== To camelCase ===");
  (try List.iter (fun s ->
    try
  print_endline (((padLeft (s) (34) ^ " => ") ^ snakeToCamel (ref (s))));
    with Continue -> ()) !samples with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
