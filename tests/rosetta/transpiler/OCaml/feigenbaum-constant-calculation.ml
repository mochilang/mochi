(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec floorf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let y = (Obj.magic x : int) in
  __ret := (Obj.magic (float_of_int (y)) : float); raise Return
  with Return -> !__ret)

and indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((0 - 1)) : int); raise Return
  with Return -> !__ret)

and fmt8 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let y = ref ((floorf (Obj.repr (((x *. 100000000.0) +. 0.5))) /. 100000000.0)) in
  let s = ref ((Printf.sprintf "%.16g" (!y))) in
  let dot = ref ((try String.index (!s) '.' with Not_found -> -1)) in
  if (!dot = (0 - 1)) then (
  s := (!s ^ ".00000000");
  ) else (
  let decs = ref (((String.length (!s) - !dot) - 1)) in
  (try while (!decs < 8) do
    try
  s := (!s ^ "0");
  decs := (!decs + 1);
    with Continue -> ()
  done with Break -> ());
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and pad2 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : int) in
  let s = ref ((string_of_int (x))) in
  if (String.length (!s) < 2) then (
  s := (" " ^ !s);
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let maxIt = 13 in
  let maxItJ = 10 in
  let a1 = ref (1.0) in
  let a2 = ref (0.0) in
  let d1 = ref (3.2) in
  print_endline (" i       d");
  let i = ref (2) in
  (try while (!i <= maxIt) do
    try
  let a = ref ((!a1 +. ((!a1 -. !a2) /. !d1))) in
  let j = ref (1) in
  (try while (!j <= maxItJ) do
    try
  let x = ref (0.0) in
  let y = ref (0.0) in
  let k = ref (1) in
  let limit = pow_int (Obj.repr (2)) (Obj.repr (!i)) in
  (try while (!k <= limit) do
    try
  y := (1.0 -. ((2.0 *. !y) *. !x));
  x := (!a -. (!x *. !x));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a -. (!x /. !y));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let d = ref (((!a1 -. !a2) /. (!a -. !a1))) in
  print_endline (((pad2 (Obj.repr (!i)) ^ "    ") ^ fmt8 (Obj.repr (!d))));
  d1 := !d;
  a2 := !a1;
  a1 := !a;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and pow_int base exp =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let exp = (Obj.magic exp : int) in
  let r = ref (1) in
  let b = ref (base) in
  let e = ref (exp) in
  (try while (!e > 0) do
    try
  if ((!e mod 2) = 1) then (
  r := (!r * !b);
  );
  b := (!b * !b);
  e := (!e / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()