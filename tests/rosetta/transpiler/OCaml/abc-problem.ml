(* Generated by Mochi transpiler v0.10.40 on 2025-07-25 20:48 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec fields s =
  let __ret = ref [] in
  (try
  let res = ref ([]) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let c = String.sub (s) !i ((!i + 1) - !i) in
  if (c = " ") then (
  if (String.length (!cur) > 0) then (
  res := List.append !res [!cur];
  cur := "";
  );
  ) else (
  cur := (!cur ^ c);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!cur) > 0) then (
  res := List.append !res [!cur];
  );
  __ret := !res; raise Return
  with Return -> !__ret)

let rec canSpell word blks =
  let __ret = ref false in
  (try
  if (String.length (word) = 0) then (
  __ret := true; raise Return
  );
  let c = String.lowercase_ascii (String.sub (word) 0 (1 - 0)) in
  let i = ref (0) in
  (try while (!i < List.length (blks)) do
    try
  let b = List.nth (blks) (!i) in
  if ((c = String.lowercase_ascii (String.sub (b) 0 (1 - 0))) || (c = String.lowercase_ascii (String.sub (b) 1 (2 - 1)))) then (
  let rest = ref ([]) in
  let j = ref (0) in
  (try while (!j < List.length (blks)) do
    try
  if (!j <> !i) then (
  rest := List.append !rest [List.nth (blks) (!j)];
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if canSpell (String.sub (word) 1 (String.length (word) - 1)) (!rest) then (
  __ret := true; raise Return
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := false; raise Return
  with Return -> !__ret)

let rec newSpeller blocks =
  let __ret = ref (Obj.magic 0) in
  (try
  let bl = ref (fields (blocks)) in
  __ret := (fun w ->
  canSpell (w) (!bl)); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let sp = newSpeller ("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM") in
  (try List.iter (fun word ->
    try
  print_endline (((word ^ " ") ^ __show (sp (word))));
    with Continue -> ()) ["A"; "BARK"; "BOOK"; "TREAT"; "COMMON"; "SQUAD"; "CONFUSE"] with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
