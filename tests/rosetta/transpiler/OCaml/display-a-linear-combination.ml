(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec padRight s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let r = ref (s) in
  (try while (String.length (!r) < w) do
    try
  r := (!r ^ " ");
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : string); raise Return
  with Return -> !__ret)

and linearCombo c =
  let __ret = ref "" in
  (try
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (c)) do
    try
  let n = List.nth (c) (!i) in
  if (n <> 0) then (
  let op = ref ("") in
  if ((n < 0) && (String.length (!out) = 0)) then (
  op := "-";
  ) else (
  if (n < 0) then (
  op := " - ";
  ) else (
  if ((n > 0) && (String.length (!out) = 0)) then (
  op := "";
  ) else (
  op := " + ";
  );
  );
  );
  let av = ref (n) in
  if (!av < 0) then (
  av := -(!av);
  );
  let coeff = ref (((string_of_int (!av)) ^ "*")) in
  if (!av = 1) then (
  coeff := "";
  );
  out := (((((!out ^ !op) ^ !coeff) ^ "e(") ^ (string_of_int ((!i + 1)))) ^ ")");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!out) = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let combos = ref ([[1; 2; 3]; [0; 1; 2; 3]; [1; 0; 3; 4]; [1; 2; 0]; [0; 0; 0]; [0]; [1; 1; 1]; [-(1); -(1); -(1)]; [-(1); -(2); 0; -(3)]; [-(1)]]) in
  let idx = ref (0) in
  (try while (!idx < List.length (!combos)) do
    try
  let c = ref (List.nth (!combos) (!idx)) in
  let t = ref ("[") in
  let j = ref (0) in
  (try while (!j < List.length (!c)) do
    try
  t := (!t ^ (string_of_int (List.nth (!c) (!j))));
  if (!j < (List.length (!c) - 1)) then (
  t := (!t ^ ", ");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  t := (!t ^ "]");
  let lc = linearCombo (!c) in
  print_endline (((padRight (!t) (Obj.repr (15)) ^ "  ->  ") ^ lc));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()