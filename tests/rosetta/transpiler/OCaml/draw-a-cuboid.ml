(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and cubLine n dx dy cde =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  let dx = (Obj.magic dx : int) in
  let dy = (Obj.magic dy : int) in
  let line = ref ((repeat (" ") (Obj.repr ((n + 1))) ^ String.sub (cde) 0 (1 - 0))) in
  let d = ref (((9 * dx) - 1)) in
  (try while (!d > 0) do
    try
  line := (!line ^ String.sub (cde) 1 (2 - 1));
  d := (!d - 1);
    with Continue -> ()
  done with Break -> ());
  line := (!line ^ String.sub (cde) 0 (1 - 0));
  line := ((!line ^ repeat (" ") (Obj.repr (dy))) ^ String.sub (cde) 2 (String.length (cde) - 2));
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)

and cuboid dx dy dz =
  let __ret = ref (Obj.magic 0) in
  (try
  let dx = (Obj.magic dx : int) in
  let dy = (Obj.magic dy : int) in
  let dz = (Obj.magic dz : int) in
  print_endline ((((((("cuboid " ^ (string_of_int (dx))) ^ " ") ^ (string_of_int (dy))) ^ " ") ^ (string_of_int (dz))) ^ ":"));
  ignore (cubLine (Obj.repr ((dy + 1))) (Obj.repr (dx)) (Obj.repr (0)) ("+-"));
  let i = ref (1) in
  (try while (!i <= dy) do
    try
  ignore (cubLine (Obj.repr (((dy - !i) + 1))) (Obj.repr (dx)) (Obj.repr ((!i - 1))) ("/ |"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (cubLine (Obj.repr (0)) (Obj.repr (dx)) (Obj.repr (dy)) ("+-|"));
  let j = ref ((((4 * dz) - dy) - 2)) in
  (try while (!j > 0) do
    try
  ignore (cubLine (Obj.repr (0)) (Obj.repr (dx)) (Obj.repr (dy)) ("| |"));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  ignore (cubLine (Obj.repr (0)) (Obj.repr (dx)) (Obj.repr (dy)) ("| +"));
  i := 1;
  (try while (!i <= dy) do
    try
  ignore (cubLine (Obj.repr (0)) (Obj.repr (dx)) (Obj.repr ((dy - !i))) ("| /"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  ignore (cubLine (Obj.repr (0)) (Obj.repr (dx)) (Obj.repr (0)) ("+-\n"));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (cuboid (Obj.repr (2)) (Obj.repr (3)) (Obj.repr (4)));
  print_endline ("");
  ignore (cuboid (Obj.repr (1)) (Obj.repr (1)) (Obj.repr (1)));
  print_endline ("");
  ignore (cuboid (Obj.repr (6)) (Obj.repr (2)) (Obj.repr (1)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()