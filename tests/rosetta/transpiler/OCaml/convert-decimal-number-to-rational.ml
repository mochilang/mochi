(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec gcd a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  if (!x < 0) then (
  x := -(!x);
  );
  let y = ref (b) in
  if (!y < 0) then (
  y := -(!y);
  );
  (try while (!y <> 0) do
    try
  let t = (!x mod !y) in
  x := !y;
  y := t;
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

and parseRational s =
  let __ret = ref ([] : (string * int) list) in
  (try
  let intPart = ref (0) in
  let fracPart = ref (0) in
  let denom = ref (1) in
  let afterDot = ref (false) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  let ch = String.sub (s) !i ((!i + 1) - !i) in
  if (ch = ".") then (
  afterDot := true;
  ) else (
  let d = (int_of_string (ch) - int_of_string ("0")) in
  if not (!afterDot) then (
  intPart := ((!intPart * 10) + d);
  ) else (
  fracPart := ((!fracPart * 10) + d);
  denom := (!denom * 10);
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let num = ref (((!intPart * !denom) + !fracPart)) in
  let g = gcd (Obj.repr (!num)) (Obj.repr (!denom)) in
  __ret := (Obj.magic ([("num", (!num / g)); ("den", (!denom / g))]) : (string * int) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let inputs = ref (["0.9054054"; "0.518518"; "0.75"]) in
  (try List.iter (fun s ->
    try
  let r = ref (parseRational (s)) in
  print_endline (((((s ^ " = ") ^ (string_of_int ((try List.assoc ("num") !r with Not_found -> (Obj.magic 0))))) ^ "/") ^ (string_of_int ((try List.assoc ("den") !r with Not_found -> (Obj.magic 0))))));
    with Continue -> ()) (!inputs) with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()