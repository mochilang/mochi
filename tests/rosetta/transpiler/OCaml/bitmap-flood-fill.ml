(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let grid = ref ([["."; "."; "."; "."; "."]; ["."; "#"; "#"; "#"; "."]; ["."; "#"; "."; "#"; "."]; ["."; "#"; "#"; "#"; "."]; ["."; "."; "."; "."; "."]])
let rec flood x y repl =
  let __ret = ref (Obj.magic 0) in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let target = List.nth (List.nth (!grid) (y)) (x) in
  if (target = repl) then (
  __ret := (); raise Return
  );
let rec ff px py =
  let __ret = ref (Obj.magic 0) in
  (try
  let px = (Obj.magic px : int) in
  let py = (Obj.magic py : int) in
  if ((((px < 0) || (py < 0)) || (py >= List.length (!grid))) || (px >= List.length (List.nth (!grid) (0)))) then (
  __ret := (); raise Return
  );
  if (List.nth (List.nth (!grid) (py)) (px) <> target) then (
  __ret := (); raise Return
  );
  grid := (List.mapi (fun __i __x -> if __i = py then (List.mapi (fun __i __x -> if __i = px then repl else __x) (List.nth (!grid) (py))) else __x) (!grid));
  ignore (ff ((px - 1)) (py));
  ignore (ff ((px + 1)) (py));
  ignore (ff (px) ((py - 1)));
  ignore (ff (px) ((py + 1)));
    !__ret
  with Return -> !__ret) in
  ignore (ff (x) (y));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (flood (2) (2) ("o"));
  (try List.iter (fun row ->
    try
  let line = ref ("") in
  (try List.iter (fun ch ->
    try
  line := (!line ^ ch);
    with Continue -> ()) row with Break -> ());
  print_endline (__show !line);
    with Continue -> ()) !grid with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
