(* Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec fields s =
  let __ret = ref [] in
  let s = ref s in
  (try
  let words = ref ([]) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length !s) do
    try
  let ch = String.sub !s !i ((!i + 1) - !i) in
  if (((ch = " ") || (ch = "\n")) || (ch = "\t")) then (
  if (String.length !cur > 0) then (
  words := List.append !words [!cur];
  cur := "";
  );
  ) else (
  cur := (!cur ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length !cur > 0) then (
  words := List.append !words [!cur];
  );
  __ret := !words; raise Return;
  __ret := !words;
    !__ret
  with Return -> !__ret)

let rec join xs sep =
  let __ret = ref "" in
  let xs = ref xs in
  let sep = ref sep in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length !xs) do
    try
  if (!i > 0) then (
  res := (!res ^ !sep);
  );
  res := (!res ^ List.nth (!xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !res; raise Return;
  __ret := !res;
    !__ret
  with Return -> !__ret)

let rec numberName n =
  let __ret = ref "" in
  let n = ref n in
  (try
  let small = ref (["no"; "one"; "two"; "three"; "four"; "five"; "six"; "seven"; "eight"; "nine"; "ten"; "eleven"; "twelve"; "thirteen"; "fourteen"; "fifteen"; "sixteen"; "seventeen"; "eighteen"; "nineteen"]) in
  let tens = ref (["ones"; "ten"; "twenty"; "thirty"; "forty"; "fifty"; "sixty"; "seventy"; "eighty"; "ninety"]) in
  if (!n < 0) then (
  __ret := ""; raise Return;
  );
  if (!n < 20) then (
  __ret := List.nth (!small) (!n); raise Return;
  );
  if (!n < 100) then (
  let t = ref (List.nth (!tens) ((!n / 10))) in
  let s = ref ((!n mod 10)) in
  if (!s > 0) then (
  t := ((!t ^ " ") ^ List.nth (!small) (!s));
  );
  __ret := !t; raise Return;
  );
  __ret := ""; raise Return;
  __ret := "";
    !__ret
  with Return -> !__ret)

let rec pluralizeFirst s n =
  let __ret = ref "" in
  let s = ref s in
  let n = ref n in
  (try
  if (!n = 1) then (
  __ret := !s; raise Return;
  );
  let w = ref (fields (!s)) in
  if (List.length !w > 0) then (
  w := (List.mapi (fun __i __x -> if __i = 0 then (List.nth (!w) (0) ^ "s") else __x) (!w));
  );
  __ret := join (!w) (" "); raise Return;
  __ret := join (!w) (" ");
    !__ret
  with Return -> !__ret)

let rec randInt seed n =
  let __ret = ref 0 in
  let seed = ref seed in
  let n = ref n in
  (try
  let next = (((!seed * 1664525) + 1013904223) mod 2147483647) in
  __ret := (next mod !n); raise Return;
  __ret := (next mod !n);
    !__ret
  with Return -> !__ret)

let rec slur p d =
  let __ret = ref "" in
  let p = ref p in
  let d = ref d in
  (try
  if (String.length !p <= 2) then (
  __ret := !p; raise Return;
  );
  let a = ref ([]) in
  let i = ref (1) in
  (try while (!i < (String.length !p - 1)) do
    try
  a := List.append !a [String.sub !p !i ((!i + 1) - !i)];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let idx = ref ((List.length !a - 1)) in
  let seed = ref (!d) in
  (try while (!idx >= 1) do
    try
  seed := (((!seed * 1664525) + 1013904223) mod 2147483647);
  if ((!seed mod 100) >= !d) then (
  let j = (!seed mod (!idx + 1)) in
  let tmp = List.nth (!a) (!idx) in
  a := (List.mapi (fun __i __x -> if __i = !idx then List.nth (!a) (j) else __x) (!a));
  a := (List.mapi (fun __i __x -> if __i = j then tmp else __x) (!a));
  );
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  let s = ref (String.sub !p 0 (1 - 0)) in
  let k = ref (0) in
  (try while (!k < List.length !a) do
    try
  s := (!s ^ List.nth (!a) (!k));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ String.sub !p (String.length !p - 1) (String.length !p - (String.length !p - 1)));
  let w = ref (fields (!s)) in
  __ret := join (!w) (" "); raise Return;
  __ret := join (!w) (" ");
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let i = ref (99) in
  (try while (!i > 0) do
    try
  print_endline (((((slur (numberName (!i)) (!i) ^ " ") ^ pluralizeFirst (slur ("bottle of") (!i)) (!i)) ^ " ") ^ slur ("beer on the wall") (!i)));
  print_endline (((((slur (numberName (!i)) (!i) ^ " ") ^ pluralizeFirst (slur ("bottle of") (!i)) (!i)) ^ " ") ^ slur ("beer") (!i)));
  print_endline (((((slur ("take one") (!i) ^ " ") ^ slur ("down") (!i)) ^ " ") ^ slur ("pass it around") (!i)));
  print_endline (((((slur (numberName ((!i - 1))) (!i) ^ " ") ^ pluralizeFirst (slur ("bottle of") (!i)) ((!i - 1))) ^ " ") ^ slur ("beer on the wall") (!i)));
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  main ();
