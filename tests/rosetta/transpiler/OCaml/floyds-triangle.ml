(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 15:22 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec floyd n =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = (Obj.magic n : int) in
  print_endline ((("Floyd " ^ (string_of_int (n))) ^ ":"));
  let lowerLeftCorner = (((n * (n - 1)) / 2) + 1) in
  let lastInColumn = ref (lowerLeftCorner) in
  let lastInRow = ref (1) in
  let i = ref (1) in
  let row = ref (1) in
  let line = ref ("") in
  (try while (!row <= n) do
    try
  let w = String.length ((string_of_int (!lastInColumn))) in
  if (!i < !lastInRow) then (
  line := ((!line ^ pad ((string_of_int (!i))) (w)) ^ " ");
  lastInColumn := (!lastInColumn + 1);
  ) else (
  line := (!line ^ pad ((string_of_int (!i))) (w));
  print_endline (__show !line);
  line := "";
  row := (!row + 1);
  lastInRow := (!lastInRow + !row);
  lastInColumn := lowerLeftCorner;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and pad s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let t = ref (s) in
  (try while (String.length (!t) < w) do
    try
  t := (" " ^ !t);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!t) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (floyd (5));
  ignore (floyd (14));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()