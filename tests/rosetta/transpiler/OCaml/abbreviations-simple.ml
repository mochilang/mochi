(* Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:13 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"

exception Break
exception Continue

exception Return

let rec fields s =
  let __ret = ref [] in
  let s = ref s in
  (try
  let words = ref ([]) in
  let cur = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let ch = String.sub !s !i ((!i + 1) - !i) in
  if (((ch = " ") || (ch = "\n")) || (ch = "\t")) then (
  if (String.length (!cur) > 0) then (
  words := List.append !words [!cur];
  cur := "";
  );
  ) else (
  cur := (!cur ^ ch);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!cur) > 0) then (
  words := List.append !words [!cur];
  );
  __ret := !words; raise Return;
  __ret := !words;
    !__ret
  with Return -> !__ret)

let rec padRight s width =
  let __ret = ref "" in
  let s = ref s in
  let width = ref width in
  (try
  let out = ref (!s) in
  let i = ref (String.length (!s)) in
  (try while (!i < !width) do
    try
  out := (!out ^ " ");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !out; raise Return;
  __ret := !out;
    !__ret
  with Return -> !__ret)

let rec join xs sep =
  let __ret = ref "" in
  let xs = ref xs in
  let sep = ref sep in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (!xs)) do
    try
  if (!i > 0) then (
  res := (!res ^ !sep);
  );
  res := (!res ^ List.nth (!xs) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !res; raise Return;
  __ret := !res;
    !__ret
  with Return -> !__ret)

let rec parseIntStr str =
  let __ret = ref 0 in
  let str = ref str in
  (try
  let i = ref (0) in
  let neg = ref (false) in
  if ((String.length (!str) > 0) && (String.sub !str 0 (1 - 0) = "-")) then (
  neg := true;
  i := 1;
  );
  let n = ref (0) in
  let digits = ref ([("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]) in
  (try while (!i < String.length (!str)) do
    try
  n := ((!n * 10) + (List.assoc (String.sub !str !i ((!i + 1) - !i)) !digits));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if !neg then (
  n := -(!n);
  );
  __ret := !n; raise Return;
  __ret := !n;
    !__ret
  with Return -> !__ret)

let rec isDigits s =
  let __ret = ref false in
  let s = ref s in
  (try
  if (String.length (!s) = 0) then (
  __ret := false; raise Return;
  );
  let i = ref (0) in
  (try while (!i < String.length (!s)) do
    try
  let ch = String.sub !s !i ((!i + 1) - !i) in
  if ((ch < "0") || (ch > "9")) then (
  __ret := false; raise Return;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := true; raise Return;
  __ret := true;
    !__ret
  with Return -> !__ret)

let rec readTable table =
  let __ret = ref [] in
  let table = ref table in
  (try
  let toks = ref (fields (!table)) in
  let cmds = ref ([]) in
  let mins = ref ([]) in
  let i = ref (0) in
  (try while (!i < List.length (!toks)) do
    try
  let cmd = List.nth (!toks) (!i) in
  let minlen = ref (String.length (cmd)) in
  i := (!i + 1);
  if ((!i < List.length (!toks)) && isDigits (List.nth (!toks) (!i))) then (
  let num = parseIntStr (List.nth (!toks) (!i)) in
  if ((num >= 1) && (num < String.length (cmd))) then (
  minlen := num;
  i := (!i + 1);
  );
  );
  cmds := List.append !cmds [cmd];
  mins := List.append !mins [!minlen];
    with Continue -> ()
  done with Break -> ());
  __ret := [("commands", Obj.repr !cmds); ("mins", Obj.repr !mins)]; raise Return;
  __ret := [("commands", Obj.repr !cmds); ("mins", Obj.repr !mins)];
    !__ret
  with Return -> !__ret)

let rec validate commands mins words =
  let __ret = ref [] in
  let commands = ref commands in
  let mins = ref mins in
  let words = ref words in
  (try
  let results = ref ([]) in
  let wi = ref (0) in
  (try while (!wi < List.length (!words)) do
    try
  let w = List.nth (!words) (!wi) in
  let found = ref (false) in
  let wlen = String.length (w) in
  let ci = ref (0) in
  (try while (!ci < List.length (!commands)) do
    try
  let cmd = List.nth (!commands) (!ci) in
  if (((List.nth (!mins) (!ci) <> 0) && (wlen >= List.nth (!mins) (!ci))) && (wlen <= String.length (cmd))) then (
  let c = String.uppercase_ascii (cmd) in
  let ww = String.uppercase_ascii (w) in
  if (String.sub c 0 (wlen - 0) = ww) then (
  results := List.append !results [c];
  found := true;
  raise Break;
  );
  );
  ci := (!ci + 1);
    with Continue -> ()
  done with Break -> ());
  if not (!found) then (
  results := List.append !results ["*error*"];
  );
  wi := (!wi + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := !results; raise Return;
  __ret := !results;
    !__ret
  with Return -> !__ret)

let rec main () =
  let __ret = ref () in
  (try
  let table = (((((((("" ^ "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") ^ "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") ^ "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") ^ "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") ^ "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") ^ "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") ^ "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") ^ "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ") in
  let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin" in
  let tbl = ref (readTable (table)) in
  let commands = ref ((Obj.obj (List.assoc ("commands") !tbl) : string list)) in
  let mins = ref ((Obj.obj (List.assoc ("mins") !tbl) : int list)) in
  let words = ref (fields (sentence)) in
  let results = ref (validate (!commands) (!mins) (!words)) in
  let out1 = ref ("user words:") in
  let k = ref (0) in
  (try while (!k < List.length (!words)) do
    try
  out1 := (!out1 ^ " ");
  if (!k < (List.length (!words) - 1)) then (
  out1 := (!out1 ^ padRight (List.nth (!words) (!k)) (String.length (List.nth (!results) (!k))));
  ) else (
  out1 := (!out1 ^ List.nth (!words) (!k));
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !out1);
  print_endline (("full words: " ^ join (!results) (" ")));
    !__ret
  with Return -> !__ret)

let () =
  main ();
