(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec ln x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let k = ref (0.0) in
  let v = ref (x) in
  (try while (!v >= 2.0) do
    try
  v := (!v /. 2.0);
  k := (!k +. 1.0);
    with Continue -> ()
  done with Break -> ());
  (try while (!v < 1.0) do
    try
  v := (!v *. 2.0);
  k := (!k -. 1.0);
    with Continue -> ()
  done with Break -> ());
  let z = ((!v -. 1.0) /. (!v +. 1.0)) in
  let zpow = ref (z) in
  let sum = ref (z) in
  let i = ref (3) in
  (try while (!i <= 9) do
    try
  zpow := ((!zpow *. z) *. z);
  sum := (!sum +. (!zpow /. float_of_int (!i)));
  i := (!i + 2);
    with Continue -> ()
  done with Break -> ());
  let ln2 = 0.6931471805599453 in
  __ret := (Obj.magic (((!k *. ln2) +. (2.0 *. !sum))) : float); raise Return
  with Return -> !__ret)

and harmonic n =
  let __ret = ref 0.0 in
  (try
  let n = (Obj.magic n : int) in
  let sum = ref (0.0) in
  let i = ref (1) in
  (try while (!i <= n) do
    try
  sum := (!sum +. (1.0 /. float_of_int (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let n = 100000 in
  let gamma = (harmonic (Obj.repr (n)) -. ln (Obj.repr (float_of_int (n)))) in
  print_endline ((Printf.sprintf "%.16g" (gamma)));
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()