(* Generated by Mochi transpiler v0.10.50 on 2025-07-30 23:14 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rows = 20
let cols = 30
let p = 0.01
let f = 0.001
let rec repeat ch n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < n) do
    try
  s := (!s ^ ch);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and chance prob =
  let __ret = ref false in
  (try
  let prob = (Obj.magic prob : float) in
  let threshold = int_of_float ((prob *. 1000.0)) in
  __ret := (Obj.magic (((_now () mod 1000) < threshold)) : bool); raise Return
  with Return -> !__ret)

and newBoard () =
  let __ret = ref ([] : string list list) in
  (try
  let b = ref (([] : string list list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row = ref (([] : string list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  if ((_now () mod 2) = 0) then (
  row := (List.append (!row) [(Obj.magic ("T") : string)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (" ") : string)]);
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  b := (List.append (!b) [(Obj.magic (!row) : string list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!b) : string list list); raise Return
  with Return -> !__ret)

and step src =
  let __ret = ref ([] : string list list) in
  (try
  let dst = ref (([] : string list list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row = ref (([] : string list)) in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  let cell = ref (List.nth (List.nth (src) (!r)) (!c)) in
  let next = ref (!cell) in
  if (!cell = "#") then (
  next := " ";
  ) else (
  if (!cell = "T") then (
  let burning = ref (false) in
  let dr = ref (-(1)) in
  (try while (!dr <= 1) do
    try
  let dc = ref (-(1)) in
  (try while (!dc <= 1) do
    try
  if ((!dr <> 0) || (!dc <> 0)) then (
  let rr = (!r + !dr) in
  let cc = (!c + !dc) in
  if ((((rr >= 0) && (rr < rows)) && (cc >= 0)) && (cc < cols)) then (
  if (List.nth (List.nth (src) (rr)) (cc) = "#") then (
  burning := true;
  );
  );
  );
  dc := (!dc + 1);
    with Continue -> ()
  done with Break -> ());
  dr := (!dr + 1);
    with Continue -> ()
  done with Break -> ());
  if (!burning || chance (f)) then (
  next := "#";
  );
  ) else (
  if chance (p) then (
  next := "T";
  );
  );
  );
  row := (List.append (!row) [(Obj.magic (!next) : string)]);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  dst := (List.append (!dst) [(Obj.magic (!row) : string list)]);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dst) : string list list); raise Return
  with Return -> !__ret)

and printBoard b =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((repeat ("__") (cols) ^ "\n\n"));
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let line = ref ("") in
  let c = ref (0) in
  (try while (!c < cols) do
    try
  let cell = List.nth (List.nth (b) (!r)) (!c) in
  if (cell = " ") then (
  line := (!line ^ "  ");
  ) else (
  line := ((!line ^ " ") ^ cell);
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((!line ^ "\n"));
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let board = ref (newBoard ()) in
  let mem_start = _mem () in
  let start = _now () in
  ignore (printBoard (!board));
  board := step (!board);
  ignore (printBoard (!board));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
