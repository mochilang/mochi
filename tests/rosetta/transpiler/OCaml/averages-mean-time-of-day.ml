(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let rec sinApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n <= 8) do
    try
  let denom = float_of_int (((2 * !n) * ((2 * !n) + 1))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

let rec cosApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (1.0) in
  let sum = ref (1.0) in
  let n = ref (1) in
  (try while (!n <= 8) do
    try
  let denom = float_of_int ((((2 * !n) - 1) * (2 * !n))) in
  term := ((((-.(!term)) *. x) *. x) /. denom);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

let rec atanApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x > 1.0) then (
  __ret := (Obj.magic (((_pi /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  if (x < (-.(1.0))) then (
  __ret := (Obj.magic ((((-.(_pi)) /. 2.0) -. (x /. ((x *. x) +. 0.28)))) : float); raise Return
  );
  __ret := (Obj.magic ((x /. (1.0 +. ((0.28 *. x) *. x)))) : float); raise Return
  with Return -> !__ret)

let rec atan2Approx y x =
  let __ret = ref 0.0 in
  (try
  let y = (Obj.magic y : float) in
  let x = (Obj.magic x : float) in
  if (x > 0.0) then (
  __ret := (Obj.magic (atanApprox ((y /. x))) : float); raise Return
  );
  if (x < 0.0) then (
  if (y >= 0.0) then (
  __ret := (Obj.magic ((atanApprox ((y /. x)) +. _pi)) : float); raise Return
  );
  __ret := (Obj.magic ((atanApprox ((y /. x)) -. _pi)) : float); raise Return
  );
  if (y > 0.0) then (
  __ret := (Obj.magic ((_pi /. 2.0)) : float); raise Return
  );
  if (y < 0.0) then (
  __ret := (Obj.magic (((-.(_pi)) /. 2.0)) : float); raise Return
  );
  __ret := (Obj.magic (0.0) : float); raise Return
  with Return -> !__ret)

let rec digit ch =
  let __ret = ref 0 in
  (try
  let digits = "0123456789" in
  let i = ref (0) in
  (try while (!i < String.length (digits)) do
    try
  if (String.sub (digits) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

let rec parseTwo s idx =
  let __ret = ref 0 in
  (try
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic (((digit (String.sub (s) idx ((idx + 1) - idx)) * 10) + digit (String.sub (s) (idx + 1) ((idx + 2) - (idx + 1))))) : int); raise Return
  with Return -> !__ret)

let rec parseSec s =
  let __ret = ref 0.0 in
  (try
  let h = parseTwo (s) (0) in
  let m = parseTwo (s) (3) in
  let sec = parseTwo (s) (6) in
  let tmp = ((((h * 60) + m) * 60) + sec) in
  __ret := (Obj.magic (float_of_int (tmp)) : float); raise Return
  with Return -> !__ret)

let rec pad n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n < 10) then (
  __ret := (Obj.magic (("0" ^ (string_of_int (n)))) : string); raise Return
  );
  __ret := (Obj.magic ((string_of_int (n))) : string); raise Return
  with Return -> !__ret)

let rec meanTime times =
  let __ret = ref "" in
  (try
  let ssum = ref (0.0) in
  let csum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (times)) do
    try
  let sec = parseSec (List.nth (times) (!i)) in
  let ang = (((sec *. 2.0) *. _pi) /. 86400.0) in
  ssum := (!ssum +. sinApprox (ang));
  csum := (!csum +. cosApprox (ang));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let theta = ref (atan2Approx (!ssum) (!csum)) in
  let frac = ref ((!theta /. (2.0 *. _pi))) in
  (try while (!frac < 0.0) do
    try
  frac := (!frac +. 1.0);
    with Continue -> ()
  done with Break -> ());
  let total = (!frac *. 86400.0) in
  let si = (Obj.magic total : int) in
  let h = (si / 3600) in
  let m = ((si mod 3600) / 60) in
  let s = (si mod 60) in
  __ret := (Obj.magic (((((pad (h) ^ ":") ^ pad (m)) ^ ":") ^ pad (s))) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let inputs = ref (["23:00:17"; "23:40:20"; "00:12:45"; "00:17:19"]) in
  print_endline (meanTime (!inputs));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
