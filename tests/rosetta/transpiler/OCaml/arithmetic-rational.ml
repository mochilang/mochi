(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 09:22 UTC *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec intSqrt x =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  if (x < 2) then (
  __ret := (Obj.magic (x) : int); raise Return
  );
  let left = ref (1) in
  let right = ref ((x / 2)) in
  let ans = ref (0) in
  (try while (!left <= !right) do
    try
  let mid = (!left + ((!right - !left) / 2)) in
  let sq = (mid * mid) in
  if (sq = x) then (
  __ret := (Obj.magic (mid) : int); raise Return
  );
  if (sq < x) then (
  left := (mid + 1);
  ans := mid;
  ) else (
  right := (mid - 1);
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : int); raise Return
  with Return -> !__ret)

let rec sumRecip n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let s = ref (1) in
  let limit = intSqrt (n) in
  let f = ref (2) in
  (try while (!f <= limit) do
    try
  if ((n mod !f) = 0) then (
  s := (!s + (n / !f));
  let f2 = (n / !f) in
  if (f2 <> !f) then (
  s := (!s + !f);
  );
  );
  f := (!f + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : int); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nums = ref ([6; 28; 120; 496; 672; 8128; 30240; 32760; 523776]) in
  (try List.iter (fun n ->
    try
  let s = sumRecip (n) in
  if ((s mod n) = 0) then (
  let val_ = (s / n) in
  let perfect = ref ("") in
  if (val_ = 1) then (
  perfect := "perfect!";
  );
  print_endline (((((("Sum of recipr. factors of " ^ (string_of_int (n))) ^ " = ") ^ (string_of_int (val_))) ^ " exactly ") ^ !perfect));
  );
    with Continue -> ()) !nums with Break -> ());
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
