(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:36 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Return

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ("program start");
  let ev = ref ([("set", Obj.repr (false))]) in
  print_endline ("program sleeping");
  print_endline ("task start");
  ev := (("set", Obj.repr (true)) :: List.remove_assoc ("set") (Obj.magic (!ev) : (string * Obj.t) list));
  print_endline ("program signaling event");
  if (Obj.obj (List.assoc ("set") (!ev) : Obj.t)) then (
  print_endline ("event reset by task");
  ev := (("set", Obj.repr (false)) :: List.remove_assoc ("set") (Obj.magic (!ev) : (string * Obj.t) list));
  );
    !__ret
  with Return -> !__ret)


let () =
  ignore (main ());
  ()