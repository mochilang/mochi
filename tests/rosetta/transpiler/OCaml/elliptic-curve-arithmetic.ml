(* Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let bCoeff = 7.0
let rec zero () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("x", Obj.repr (0.0)); ("y", Obj.repr (0.0)); ("inf", Obj.repr (true))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and isZero p =
  let __ret = ref false in
  (try
  __ret := (Obj.magic ((Obj.obj (List.assoc ("inf") (p) : Obj.t))) : bool); raise Return
  with Return -> !__ret)

and neg p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([("x", Obj.repr ((Obj.obj (List.assoc ("x") (p) : Obj.t)))); ("y", Obj.repr ((-.((Obj.obj (List.assoc ("y") (p) : Obj.t)))))); ("inf", Obj.repr ((Obj.obj (List.assoc ("inf") (p) : Obj.t))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and dbl p =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if isZero (p) then (
  __ret := (Obj.magic (p) : (string * Obj.t) list); raise Return
  );
  let _l = (((3.0 *. (Obj.obj (List.assoc ("x") (p) : Obj.t))) *. (Obj.obj (List.assoc ("x") (p) : Obj.t))) /. (2.0 *. (Obj.obj (List.assoc ("y") (p) : Obj.t)))) in
  let x = ((_l *. _l) -. (2.0 *. (Obj.obj (List.assoc ("x") (p) : Obj.t)))) in
  __ret := (Obj.magic ([("x", Obj.repr (x)); ("y", Obj.repr (((_l *. ((Obj.obj (List.assoc ("x") (p) : Obj.t)) -. x)) -. (Obj.obj (List.assoc ("y") (p) : Obj.t))))); ("inf", Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add p q =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if isZero (p) then (
  __ret := (Obj.magic (q) : (string * Obj.t) list); raise Return
  );
  if isZero (q) then (
  __ret := (Obj.magic (p) : (string * Obj.t) list); raise Return
  );
  if ((Obj.obj (List.assoc ("x") (p) : Obj.t)) = (Obj.obj (List.assoc ("x") (q) : Obj.t))) then (
  if ((Obj.obj (List.assoc ("y") (p) : Obj.t)) = (Obj.obj (List.assoc ("y") (q) : Obj.t))) then (
  __ret := (Obj.magic (dbl (p)) : (string * Obj.t) list); raise Return
  );
  __ret := (Obj.magic (zero ()) : (string * Obj.t) list); raise Return
  );
  let _l = (((Obj.obj (List.assoc ("y") (q) : Obj.t)) -. (Obj.obj (List.assoc ("y") (p) : Obj.t))) /. ((Obj.obj (List.assoc ("x") (q) : Obj.t)) -. (Obj.obj (List.assoc ("x") (p) : Obj.t)))) in
  let x = (((_l *. _l) -. (Obj.obj (List.assoc ("x") (p) : Obj.t))) -. (Obj.obj (List.assoc ("x") (q) : Obj.t))) in
  __ret := (Obj.magic ([("x", Obj.repr (x)); ("y", Obj.repr (((_l *. ((Obj.obj (List.assoc ("x") (p) : Obj.t)) -. x)) -. (Obj.obj (List.assoc ("y") (p) : Obj.t))))); ("inf", Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and mul p n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let r = ref (zero ()) in
  let q = ref (p) in
  let k = ref (n) in
  (try while (!k > 0) do
    try
  if ((!k mod 2) = 1) then (
  r := add (!r) (!q);
  );
  q := dbl (!q);
  k := (!k / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and cbrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 40) do
    try
  guess := (((2.0 *. !guess) +. (x /. (!guess *. !guess))) /. 3.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and fromY y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let y = (Obj.magic y : float) in
  __ret := (Obj.magic ([("x", Obj.repr (cbrtApprox (Obj.repr (((y *. y) -. bCoeff))))); ("y", Obj.repr (y)); ("inf", Obj.repr (false))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and show s p =
  let __ret = ref (Obj.magic 0) in
  (try
  if isZero (p) then (
  print_endline ((s ^ "Zero"));
  ) else (
  print_endline ((((((s ^ "(") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("x") (p) : Obj.t))))) ^ ", ") ^ (Printf.sprintf "%.16g" ((Obj.obj (List.assoc ("y") (p) : Obj.t))))) ^ ")"));
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = fromY (Obj.repr (1.0)) in
  let b = fromY (Obj.repr (2.0)) in
  ignore (show ("a = ") (a));
  ignore (show ("b = ") (b));
  let c = add (a) (b) in
  ignore (show ("c = a + b = ") (c));
  let d = neg (c) in
  ignore (show ("d = -c = ") (d));
  ignore (show ("c + d = ") (add (c) (d)));
  ignore (show ("a + b + d = ") (add (a) (add (b) (d))));
  ignore (show ("a * 12345 = ") (mul (a) (Obj.repr (12345))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()