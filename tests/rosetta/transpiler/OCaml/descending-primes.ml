(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  if ((n mod 2) = 0) then (
  __ret := (Obj.magic ((n = 2)) : bool); raise Return
  );
  let d = ref (3) in
  (try while ((!d * !d) <= n) do
    try
  if ((n mod !d) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  d := (!d + 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)


let digits = ref ([9; 8; 7; 6; 5; 4; 3; 2; 1])
let rec gen idx cur used =
  let __ret = ref ([] : int list) in
  (try
  let idx = (Obj.magic idx : int) in
  let cur = (Obj.magic cur : int) in
  if (idx = List.length (!digits)) then (
  if (used && isPrime (Obj.repr (cur))) then (
  __ret := (Obj.magic ([cur]) : int list); raise Return
  );
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let with_ = ref (gen (Obj.repr ((idx + 1))) (Obj.repr (((cur * 10) + List.nth (!digits) (idx)))) (true)) in
  let without = ref (gen (Obj.repr ((idx + 1))) (Obj.repr (cur)) (used)) in
  __ret := (Obj.magic ((List.sort_uniq compare (!with_ @ !without))) : int list); raise Return
  with Return -> !__ret)


let primes = ref (gen (Obj.repr (0)) (Obj.repr (0)) (false))
let rec pad n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < width) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)


let i = ref (0)
let line = ref ("")
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((("There are " ^ (string_of_int (List.length (!primes)))) ^ " descending primes, namely:"));
  (try while (!i < List.length (!primes)) do
    try
  line := ((!line ^ pad (Obj.repr (List.nth (!primes) (!i))) (Obj.repr (8))) ^ " ");
  if (((!i + 1) mod 10) = 0) then (
  print_endline (String.sub (!line) 0 ((String.length (!line) - 1) - 0));
  line := "";
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!line) > 0) then (
  print_endline (String.sub (!line) 0 ((String.length (!line) - 1) - 0));
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()