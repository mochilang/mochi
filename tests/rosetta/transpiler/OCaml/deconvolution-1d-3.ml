(* Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and fmt1 x =
  let __ret = ref "" in
  (try
  let x = (Obj.magic x : float) in
  let y = ref ((float_of_int ((Obj.magic ((x *. 10.0) +. 0.5) : int)) /. 10.0)) in
  let s = ref ((Printf.sprintf "%.16g" (!y))) in
  let dot = (try String.index (!s) '.' with Not_found -> -1) in
  if (dot < 0) then (
  s := (!s ^ ".0");
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and printColumnMatrix xs =
  let __ret = ref (Obj.magic 0) in
  (try
  if (List.length (xs) = 0) then (
  __ret := (); raise Return
  );
  print_endline ((("⎡" ^ fmt1 (Obj.repr (List.nth (xs) (0)))) ^ "⎤"));
  let i = ref (1) in
  (try while (!i < (List.length (xs) - 1)) do
    try
  print_endline ((("⎢" ^ fmt1 (Obj.repr (List.nth (xs) (!i)))) ^ "⎥"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((("⎣ " ^ fmt1 (Obj.repr (List.nth (xs) ((List.length (xs) - 1))))) ^ "⎦"));
    !__ret
  with Return -> !__ret)

and deconv g f =
  let __ret = ref ([] : float list) in
  (try
  let h = ref (([] : float list)) in
  let n = ref (0) in
  let hn = ((List.length (g) - List.length (f)) + 1) in
  (try while (!n < hn) do
    try
  let v = ref (List.nth (g) (!n)) in
  let lower = ref (0) in
  if (!n >= List.length (f)) then (
  lower := ((!n - List.length (f)) + 1);
  );
  let i = ref (!lower) in
  (try while (!i < !n) do
    try
  v := (!v -. (List.nth (!h) (!i) *. List.nth (f) ((!n - !i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  v := (!v /. List.nth (f) (0));
  h := (List.append (!h) [(Obj.magic (!v) : float)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!h) : float list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let h = ref ([(-.(8.0)); (-.(9.0)); (-.(3.0)); (-.(1.0)); (-.(6.0)); 7.0]) in
  let f = ref ([(-.(3.0)); (-.(6.0)); (-.(1.0)); 8.0; (-.(6.0)); 3.0; (-.(1.0)); (-.(9.0)); (-.(9.0)); 3.0; (-.(2.0)); 5.0; 2.0; (-.(2.0)); (-.(7.0)); (-.(1.0))]) in
  let g = ref ([24.0; 75.0; 71.0; (-.(34.0)); 3.0; 22.0; (-.(45.0)); 23.0; 245.0; 25.0; 52.0; 25.0; (-.(67.0)); (-.(96.0)); 96.0; 31.0; 55.0; 36.0; 29.0; (-.(43.0)); (-.(7.0))]) in
  print_endline ("deconv(g, f) =");
  ignore (printColumnMatrix (deconv (!g) (!f)));
  print_endline ("");
  print_endline ("deconv(g, h) =");
  ignore (printColumnMatrix (deconv (!g) (!h)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()