(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:15 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec randInt s n =
  let __ret = ref ([] : int list) in
  (try
  let s = (Obj.magic s : int) in
  let n = (Obj.magic n : int) in
  let next = (((s * 1664525) + 1013904223) mod 2147483647) in
  __ret := (Obj.magic ([next; (next mod n)]) : int list); raise Return
  with Return -> !__ret)

let rec padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

let rec makeSeq s le =
  let __ret = ref [] in
  (try
  s := (Obj.magic !s : int);
  let le = (Obj.magic le : int) in
  let bases = "ACGT" in
  let out = ref ("") in
  let i = ref (0) in
  (try while (!i < le) do
    try
  let r = ref (randInt (!s) (4)) in
  s := List.nth (!r) (0);
  let idx = List.nth (!r) (1) in
  out := (!out ^ String.sub (bases) idx ((idx + 1) - idx));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([Obj.repr (!s); Obj.repr (!out)]) : Obj.t list); raise Return
  with Return -> !__ret)

let rec mutate s dna w =
  let __ret = ref [] in
  (try
  s := (Obj.magic !s : int);
  let bases = "ACGT" in
  let le = String.length (dna) in
  let r = ref (randInt (!s) (le)) in
  s := List.nth (!r) (0);
  let p = List.nth (!r) (1) in
  r := randInt (!s) (300);
  s := List.nth (!r) (0);
  let x = List.nth (!r) (1) in
  let arr = ref ([]) in
  let i = ref (0) in
  (try while (!i < le) do
    try
  arr := List.append !arr [String.sub (dna) !i ((!i + 1) - !i)];
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (x < List.nth (w) (0)) then (
  r := randInt (!s) (4);
  s := List.nth (!r) (0);
  let idx = List.nth (!r) (1) in
  let b = String.sub (bases) idx ((idx + 1) - idx) in
  print_endline ((((((("  Change @" ^ padLeft ((string_of_int (p))) (3)) ^ " '") ^ List.nth (!arr) (p)) ^ "' to '") ^ b) ^ "'"));
  arr := (List.mapi (fun __i __x -> if __i = p then b else __x) (!arr));
  ) else (
  if (x < (List.nth (w) (0) + List.nth (w) (1))) then (
  print_endline ((((("  Delete @" ^ padLeft ((string_of_int (p))) (3)) ^ " '") ^ List.nth (!arr) (p)) ^ "'"));
  let j = ref (p) in
  (try while (!j < (List.length (!arr) - 1)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j + 1)) else __x) (!arr));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  arr := List.of_seq (Seq.take ((List.length (!arr) - 1) - 0) (Seq.drop 0 (List.to_seq !arr)));
  ) else (
  r := randInt (!s) (4);
  s := List.nth (!r) (0);
  let idx2 = List.nth (!r) (1) in
  let b = String.sub (bases) idx2 ((idx2 + 1) - idx2) in
  arr := List.append !arr [""];
  let j = ref ((List.length (!arr) - 1)) in
  (try while (!j > p) do
    try
  arr := (List.mapi (fun __i __x -> if __i = !j then List.nth (!arr) ((!j - 1)) else __x) (!arr));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((((("  Insert @" ^ padLeft ((string_of_int (p))) (3)) ^ " '") ^ b) ^ "'"));
  arr := (List.mapi (fun __i __x -> if __i = p then b else __x) (!arr));
  );
  );
  let out = ref ("") in
  i := 0;
  (try while (!i < List.length (!arr)) do
    try
  out := (!out ^ List.nth (!arr) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([Obj.repr (!s); Obj.repr (!out)]) : Obj.t list); raise Return
  with Return -> !__ret)

let rec prettyPrint dna rowLen =
  let __ret = ref (Obj.magic 0) in
  (try
  let rowLen = (Obj.magic rowLen : int) in
  print_endline ("SEQUENCE:");
  let le = String.length (dna) in
  let i = ref (0) in
  (try while (!i < le) do
    try
  let k = ref ((!i + rowLen)) in
  if (!k > le) then (
  k := le;
  );
  print_endline (((padLeft ((string_of_int (!i))) (5) ^ ": ") ^ String.sub (dna) !i (!k - !i)));
  i := (!i + rowLen);
    with Continue -> ()
  done with Break -> ());
  let a = ref (0) in
  let c = ref (0) in
  let g = ref (0) in
  let t = ref (0) in
  let idx = ref (0) in
  (try while (!idx < le) do
    try
  let ch = String.sub (dna) !idx ((!idx + 1) - !idx) in
  if (ch = "A") then (
  a := (!a + 1);
  ) else (
  if (ch = "C") then (
  c := (!c + 1);
  ) else (
  if (ch = "G") then (
  g := (!g + 1);
  ) else (
  if (ch = "T") then (
  t := (!t + 1);
  );
  );
  );
  );
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  print_endline ("BASE COUNT:");
  print_endline (("    A: " ^ padLeft ((string_of_int (!a))) (3)));
  print_endline (("    C: " ^ padLeft ((string_of_int (!c))) (3)));
  print_endline (("    G: " ^ padLeft ((string_of_int (!g))) (3)));
  print_endline (("    T: " ^ padLeft ((string_of_int (!t))) (3)));
  print_endline ("    ------");
  print_endline (("    Î£: " ^ (string_of_int (le))));
  print_endline ("    ======");
    !__ret
  with Return -> !__ret)

let rec wstring w =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((((("  Change: " ^ (string_of_int (List.nth (w) (0)))) ^ "\n  Delete: ") ^ (string_of_int (List.nth (w) (1)))) ^ "\n  Insert: ") ^ (string_of_int (List.nth (w) (2)))) ^ "\n")) : string); raise Return
  with Return -> !__ret)

let rec main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let seed = ref (1) in
  let res = ref (makeSeq (seed) (250)) in
  seed := (Obj.magic List.nth (!res) (0) : int);
  let dna = ref ((Obj.magic List.nth (!res) (1) : string)) in
  ignore (prettyPrint (!dna) (50));
  let muts = 10 in
  let w = ref ([100; 100; 100]) in
  print_endline ("\nWEIGHTS (ex 300):");
  print_endline (wstring (!w));
  print_endline ((("MUTATIONS (" ^ (string_of_int (muts))) ^ "):"));
  let i = ref (0) in
  (try while (!i < muts) do
    try
  res := mutate (seed) (!dna) (!w);
  seed := (Obj.magic List.nth (!res) (0) : int);
  dna := (Obj.magic List.nth (!res) (1) : string);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  ignore (prettyPrint (!dna) (50));
    !__ret
  with Return -> !__ret)

let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
