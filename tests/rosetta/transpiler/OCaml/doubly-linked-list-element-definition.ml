(* Generated by Mochi transpiler v0.10.55 on 2025-08-02 18:27 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec _node value next prev =
  let __ret = ref [] in
  (try
  __ret := (Obj.magic ([("value", Obj.repr (value)); ("next", Obj.repr (next)); ("prev", Obj.repr (prev))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let a = ref (_node ("A") (nil) (nil)) in
  let b = ref (_node ("B") (nil) (!a)) in
  a := (("next", Obj.repr (!b)) :: List.remove_assoc ("next") (Obj.magic (!a) : (string * Obj.t) list));
  let c = ref (_node ("C") (nil) (!b)) in
  b := (("next", Obj.repr (!c)) :: List.remove_assoc ("next") (Obj.magic (!b) : (string * Obj.t) list));
  let p = ref (!a) in
  let line = ref ("") in
  (try while (!p <> nil) do
    try
  line := (!line ^ (Obj.magic (Obj.obj (List.assoc ("value") !p) : (string * int) list) : string));
  p := (Obj.obj (List.assoc ("next") !p) : Obj.t);
  if (!p <> nil) then (
  line := (!line ^ " ");
  );
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  p := !c;
  line := "";
  (try while (!p <> nil) do
    try
  line := (!line ^ (Obj.magic (Obj.obj (List.assoc ("value") !p) : (string * int) list) : string));
  p := (Obj.obj (List.assoc ("prev") !p) : Obj.t);
  if (!p <> nil) then (
  line := (!line ^ " ");
  );
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()