(* Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:20 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then
    let i = (magic v : int) in
    if i = 0 || i = 1 then string_of_bool (i <> 0)
    else string_of_int i
  else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0

exception Break
exception Continue

exception Return

let rec factorial n =
  let __ret = ref (Z.of_int 0) in
  (try
  let n = (Obj.magic n : int) in
  let r = ref ((Z.of_int (1))) in
  let i = ref (2) in
  (try while (!i <= n) do
    try
  r := (Z.mul (!r) ((Z.of_int (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!r) : Z.t); raise Return
  with Return -> !__ret)


let () =
  (try for i = 0 to (11 - 1) do
    try
  print_endline ((((string_of_int (i)) ^ " ") ^ (Z.to_string (factorial (Obj.repr (i))))));
    with Continue -> ()
  done with Break -> ());
  print_endline (("100 " ^ (Z.to_string (factorial (Obj.repr (100))))));
  print_endline (("800 " ^ (Z.to_string (factorial (Obj.repr (800))))));
  ()