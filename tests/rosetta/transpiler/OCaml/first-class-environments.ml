(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let jobs = 12
let rec pad n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let s = ref ((string_of_int (n))) in
  (try while (String.length (!s) < 4) do
    try
  s := (" " ^ !s);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and hail seq cnt =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  seq := (Obj.magic !seq : int);
  cnt := (Obj.magic !cnt : int);
  let out = ref (pad (Obj.repr (!seq))) in
  if (!seq <> 1) then (
  cnt := (!cnt + 1);
  if ((!seq mod 2) <> 0) then (
  seq := ((3 * !seq) + 1);
  ) else (
  seq := (!seq / 2);
  );
  );
  __ret := (Obj.magic ([("seq", Obj.repr (!seq)); ("cnt", Obj.repr (!cnt)); ("out", Obj.repr (!out))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let seqs = ref (([] : int list)) in
  let cnts = ref (([] : int list)) in
  (try for i = 0 to (jobs - 1) do
    try
  seqs := (List.append (!seqs) [(Obj.magic ((i + 1)) : int)]);
  cnts := (List.append (!cnts) [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  (try while true do
    try
  let line = ref ("") in
  let i = ref (0) in
  (try while (!i < jobs) do
    try
  let res = hail (ref (List.nth (!seqs) (!i))) (ref (List.nth (!cnts) (!i))) in
  seqs := (List.mapi (fun __i __x -> if __i = !i then (Obj.obj (List.assoc ("seq") res) : int) else __x) (!seqs));
  cnts := (List.mapi (fun __i __x -> if __i = !i then (Obj.obj (List.assoc ("cnt") res) : int) else __x) (!cnts));
  line := (!line ^ (Obj.obj (List.assoc ("out") res) : string));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !line);
  let done_ = ref (true) in
  let j = ref (0) in
  (try while (!j < jobs) do
    try
  if (List.nth (!seqs) (!j) <> 1) then (
  done_ := false;
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if !done_ then (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  print_endline ("");
  print_endline ("COUNTS:");
  let counts = ref ("") in
  let k = ref (0) in
  (try while (!k < jobs) do
    try
  counts := (!counts ^ pad (Obj.repr (List.nth (!cnts) (!k))));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline (__show !counts);
  print_endline ("");
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()