(* Generated by Mochi transpiler v0.10.42 on 2025-07-27 23:17 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec padLeft s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let res = ref ("") in
  let n = ref ((w - String.length (s))) in
  (try while (!n > 0) do
    try
  res := (!res ^ " ");
  n := (!n - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ s)) : string); raise Return
  with Return -> !__ret)

let rec padRight s w =
  let __ret = ref "" in
  (try
  let w = (Obj.magic w : int) in
  let out = ref (s) in
  let i = ref (String.length (s)) in
  (try while (!i < w) do
    try
  out := (!out ^ " ");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!out) : string); raise Return
  with Return -> !__ret)

let rec indexOf s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if (String.sub (s) !i ((!i + 1) - !i) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

let rec format2 f =
  let __ret = ref "" in
  (try
  let f = (Obj.magic f : float) in
  let s = ref ((string_of_float (f))) in
  let idx = (try String.index (!s) '.' with Not_found -> -1) in
  if (idx < 0) then (
  s := (!s ^ ".00");
  ) else (
  let need = ref ((idx + 3)) in
  if (String.length (!s) > !need) then (
  s := String.sub (!s) 0 (!need - 0);
  ) else (
  (try while (String.length (!s) < !need) do
    try
  s := (!s ^ "0");
    with Continue -> ()
  done with Break -> ());
  );
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

let rec cpx h =
  let __ret = ref 0 in
  (try
  let h = (Obj.magic h : float) in
  let x = ref ((Obj.magic ((h /. 11.25) +. 0.5) : int)) in
  x := (!x mod 32);
  if (!x < 0) then (
  x := (!x + 32);
  );
  __ret := (Obj.magic (!x) : int); raise Return
  with Return -> !__ret)

let compassPoint = ref (["North"; "North by east"; "North-northeast"; "Northeast by north"; "Northeast"; "Northeast by east"; "East-northeast"; "East by north"; "East"; "East by south"; "East-southeast"; "Southeast by east"; "Southeast"; "Southeast by south"; "South-southeast"; "South by east"; "South"; "South by west"; "South-southwest"; "Southwest by south"; "Southwest"; "Southwest by west"; "West-southwest"; "West by south"; "West"; "West by north"; "West-northwest"; "Northwest by west"; "Northwest"; "Northwest by north"; "North-northwest"; "North by west"])
let rec degrees2compasspoint h =
  let __ret = ref "" in
  (try
  let h = (Obj.magic h : float) in
  __ret := (Obj.magic (List.nth (!compassPoint) (cpx (h))) : string); raise Return
  with Return -> !__ret)

let headings = ref ([0.0; 16.87; 16.88; 33.75; 50.62; 50.63; 67.5; 84.37; 84.38; 101.25; 118.12; 118.13; 135.0; 151.87; 151.88; 168.75; 185.62; 185.63; 202.5; 219.37; 219.38; 236.25; 253.12; 253.13; 270.0; 286.87; 286.88; 303.75; 320.62; 320.63; 337.5; 354.37; 354.38])
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ("Index  Compass point         Degree");
  (try while (!i < List.length (!headings)) do
    try
  let h = List.nth (!headings) (!i) in
  let idx = ((!i mod 32) + 1) in
  let cp = degrees2compasspoint (h) in
  print_endline ((((((padLeft ((string_of_int (idx))) (4) ^ "   ") ^ padRight (cp) (19)) ^ " ") ^ format2 (h)) ^ "Â°"));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
