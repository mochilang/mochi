(* Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:57 +0700 *)


let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
      let hd = field o 0 in
      let tl = field o 1 in
      let rest = list_aux tl in
      if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
  | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
  | 252 -> (magic v : string)
  | 253 -> string_of_float (magic v)
  | _ -> "<value>"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec isPrime n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 2) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (2) in
  (try while ((!i * !i) <= n) do
    try
  if ((n mod !i) = 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and search base prefix depth limit best =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  let prefix = (Obj.magic prefix : int) in
  let depth = (Obj.magic depth : int) in
  let limit = (Obj.magic limit : int) in
  let best = (Obj.magic best : int) in
  let b = ref (best) in
  let d = ref (1) in
  (try while (!d < base) do
    try
  let val_ = ((prefix * base) + !d) in
  if isPrime (Obj.repr (val_)) then (
  if (val_ > !b) then (
  b := val_;
  );
  if ((depth + 1) < limit) then (
  b := search (Obj.repr (base)) (Obj.repr (val_)) (Obj.repr ((depth + 1))) (Obj.repr (limit)) (Obj.repr (!b));
  );
  );
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!b) : int); raise Return
  with Return -> !__ret)

and largest base =
  let __ret = ref 0 in
  (try
  let base = (Obj.magic base : int) in
  __ret := (Obj.magic (search (Obj.repr (base)) (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (6)) (Obj.repr (0))) : int); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let b = ref (3) in
  (try while (!b <= 17) do
    try
  print_endline ((((string_of_int (!b)) ^ ": ") ^ (string_of_int (largest (Obj.repr (!b))))));
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()