;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (search_user directory username)
 (call/cc (lambda (ret1)
 (ret1 (hash-table-ref directory username)
)
)
)
)
(define (main)
 (call/cc (lambda (ret2)
 (let ((client (alist->hash-table (list (cons "Base" "dc=example,dc=com")
 (cons "Host" "ldap.example.com")
 (cons "Port" 389)
 (cons "GroupFilter" "(memberUid=%s)
")
)
)
)
)
 (begin (let ((directory (alist->hash-table (list (cons "username" (list "admins" "users")
)
 (cons "john" (list "users")
)
)
)
)
)
 (begin (let ((groups (search_user directory "username")
)
)
 (begin (if (> (cond ((string? groups)
 (string-length groups)
)
 ((hash-table? groups)
 (hash-table-size groups)
)
 (else (length groups)
)
)
 0)
 (begin (let ((out "Groups: [")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i (cond ((string? groups)
 (string-length groups)
)
 ((hash-table? groups)
 (hash-table-size groups)
)
 (else (length groups)
)
)
)
 (begin (set! out (string-append (string-append (string-append out "\"")
 (list-ref groups i)
)
 "\"")
)
 (if (< i (- (cond ((string? groups)
 (string-length groups)
)
 ((hash-table? groups)
 (hash-table-size groups)
)
 (else (length groups)
)
)
 1)
)
 (begin (set! out (string-append out ", ")
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote nil)
)
)
)
)
 (loop3)
)
)
)
 (set! out (string-append out "]")
)
 (display (to-str out)
)
 (newline)
)
)
)
)
)
 (begin (display (to-str "User not found")
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
(main)
