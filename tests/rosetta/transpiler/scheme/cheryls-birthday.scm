;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (monthUnique b list) (call/cc (lambda (ret1) (let ((c 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((x (car xs))) (begin (if (equal? (hash-table-ref x "month") (hash-table-ref b "month")) (begin (set! c (+ c 1))) (quote ())))) (loop2 (cdr xs))))))) (loop2 list)))) (ret1 (equal? c 1)))))))
(define (dayUnique b list) (call/cc (lambda (ret4) (let ((c 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((x (car xs))) (begin (if (equal? (hash-table-ref x "day") (hash-table-ref b "day")) (begin (set! c (+ c 1))) (quote ())))) (loop5 (cdr xs))))))) (loop5 list)))) (ret4 (equal? c 1)))))))
(define (monthWithUniqueDay b list) (call/cc (lambda (ret7) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((x (car xs))) (begin (if (and (equal? (hash-table-ref x "month") (hash-table-ref b "month")) (dayUnique x list)) (begin (ret7 #t)) (quote ())))) (loop8 (cdr xs))))))) (loop8 list)))) (ret7 #f)))))
(define (bstr b) (call/cc (lambda (ret10) (let ((months (_list "" "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))) (begin (ret10 (string-append (string-append (list-ref months (hash-table-ref b "month")) " ") (to-str (hash-table-ref b "day")))))))))
(define choices (_list (alist->hash-table (_list (cons "month" 5) (cons "day" 15))) (alist->hash-table (_list (cons "month" 5) (cons "day" 16))) (alist->hash-table (_list (cons "month" 5) (cons "day" 19))) (alist->hash-table (_list (cons "month" 6) (cons "day" 17))) (alist->hash-table (_list (cons "month" 6) (cons "day" 18))) (alist->hash-table (_list (cons "month" 7) (cons "day" 14))) (alist->hash-table (_list (cons "month" 7) (cons "day" 16))) (alist->hash-table (_list (cons "month" 8) (cons "day" 14))) (alist->hash-table (_list (cons "month" 8) (cons "day" 15))) (alist->hash-table (_list (cons "month" 8) (cons "day" 17)))))
(define filtered (_list))
(call/cc (lambda (break12) (letrec ((loop11 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((bd (car xs))) (begin (if (not (monthUnique bd choices)) (begin (set! filtered (append filtered (_list bd)))) (quote ())))) (loop11 (cdr xs))))))) (loop11 choices))))
(define filtered2 (_list))
(call/cc (lambda (break14) (letrec ((loop13 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((bd (car xs))) (begin (if (not (monthWithUniqueDay bd filtered)) (begin (set! filtered2 (append filtered2 (_list bd)))) (quote ())))) (loop13 (cdr xs))))))) (loop13 filtered))))
(define filtered3 (_list))
(call/cc (lambda (break16) (letrec ((loop15 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((bd (car xs))) (begin (if (dayUnique bd filtered2) (begin (set! filtered3 (append filtered3 (_list bd)))) (quote ())))) (loop15 (cdr xs))))))) (loop15 filtered2))))
(define filtered4 (_list))
(call/cc (lambda (break18) (letrec ((loop17 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((bd (car xs))) (begin (if (monthUnique bd filtered3) (begin (set! filtered4 (append filtered4 (_list bd)))) (quote ())))) (loop17 (cdr xs))))))) (loop17 filtered3))))
(if (equal? (cond ((string? filtered4) (string-length filtered4)) ((hash-table? filtered4) (hash-table-size filtered4)) (else (length filtered4))) 1) (begin (_display (to-str (string-append "Cheryl's birthday is " (bstr (list-ref filtered4 0))))) (newline)) (begin (_display (to-str "Something went wrong!")) (newline)))
