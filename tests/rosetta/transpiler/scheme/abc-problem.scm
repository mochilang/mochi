;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start13 (now)
)
)
 (begin (define (fields s)
 (call/cc (lambda (ret1)
 (let ((res (list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((c (substring s i (+ i 1)
)
)
)
 (begin (if (string=? c " ")
 (begin (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! res (append res (list cur)
)
)
 (set! cur "")
)
 (quote nil)
)
)
 (begin (set! cur (string-append cur c)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! res (append res (list cur)
)
)
)
 (quote nil)
)
 (ret1 res)
)
)
)
)
)
)
)
)
)
 (define (canSpell word blks)
 (call/cc (lambda (ret4)
 (begin (if (equal? (cond ((string? word)
 (string-length word)
)
 ((hash-table? word)
 (hash-table-size word)
)
 (else (length word)
)
)
 0)
 (begin (ret4 #t)
)
 (quote nil)
)
 (let ((c (lower (substring word 0 1)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? blks)
 (string-length blks)
)
 ((hash-table? blks)
 (hash-table-size blks)
)
 (else (length blks)
)
)
)
 (begin (let ((b (list-ref blks i)
)
)
 (begin (if (or (string=? c (lower (substring b 0 1)
)
)
 (string=? c (lower (substring b 1 2)
)
)
)
 (begin (let ((rest (list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< j (cond ((string? blks)
 (string-length blks)
)
 ((hash-table? blks)
 (hash-table-size blks)
)
 (else (length blks)
)
)
)
 (begin (if (not (equal? j i)
)
 (begin (set! rest (append rest (list (list-ref blks j)
)
)
)
)
 (quote nil)
)
 (set! j (+ j 1)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (if (canSpell (substring word 1 (string-length word)
)
 rest)
 (begin (ret4 #t)
)
 (quote nil)
)
)
)
)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 #f)
)
)
)
)
)
)
)
)
 (define (newSpeller blocks)
 (call/cc (lambda (ret9)
 (let ((bl (fields blocks)
)
)
 (begin (ret9 (lambda (w)
 (canSpell w bl)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret10)
 (let ((sp (newSpeller "BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((word (car xs)
)
)
 (begin (display (to-str (string-append (string-append word " ")
 (to-str (sp word)
)
)
)
)
 (newline)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 (list "A" "BARK" "BOOK" "TREAT" "COMMON" "SQUAD" "CONFUSE")
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end14 (now)
)
)
 (let ((dur15 (quotient (- end14 start13)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur15)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
