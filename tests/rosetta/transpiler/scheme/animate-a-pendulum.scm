;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define PI 3.141592653589793)
(define (sinApprox x)
 (call/cc (lambda (ret1)
 (let ((term x)
)
 (begin (let ((sum x)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= n 10)
 (begin (let ((denom (* (* 2 n)
 (+ (* 2 n)
 1)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
)
)
(define (cosApprox x)
 (call/cc (lambda (ret4)
 (let ((term 1.0)
)
 (begin (let ((sum 1.0)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= n 10)
 (begin (let ((denom (* (- (* 2 n)
 1)
 (* 2 n)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 sum)
)
)
)
)
)
)
)
)
)
(define (sqrtApprox x)
 (call/cc (lambda (ret7)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i 10)
 (begin (set! guess (/ (+ guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
 (ret7 guess)
)
)
)
)
)
)
)
(define L 10.0)
(define G 9.81)
(define dt 0.2)
(define phi0 (/ PI 4.0)
)
(define omega (sqrtApprox (/ G L)
)
)
(define t 0.0)
(call/cc (lambda (break11)
 (letrec ((loop10 (lambda (step)
 (if (< step 10)
 (begin (begin (let ((phi (* phi0 (cosApprox (* omega t)
)
)
)
)
 (begin (let ((pos (inexact->exact (+ (* 10.0 (sinApprox phi)
)
 0.5)
)
)
)
 (begin (display (to-str (to-str pos)
)
)
 (newline)
 (set! t (+ t dt)
)
)
)
)
)
)
 (loop10 (+ step 1)
)
)
 (quote nil)
)
)
)
)
 (loop10 0)
)
)
)
