;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start32 (now)
)
)
 (begin (define PI 3.141592653589793)
 (define (sinApprox x)
 (call/cc (lambda (ret1)
 (let ((term x)
)
 (begin (let ((sum x)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= n 8)
 (begin (let ((denom (+ 0.0 (* (* 2 n)
 (_add (* 2 n)
 1)
)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
)
)
 (define (cosApprox x)
 (call/cc (lambda (ret4)
 (let ((term 1.0)
)
 (begin (let ((sum 1.0)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= n 8)
 (begin (let ((denom (+ 0.0 (* (- (* 2 n)
 1)
 (* 2 n)
)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 sum)
)
)
)
)
)
)
)
)
)
 (define (atanApprox x)
 (call/cc (lambda (ret7)
 (begin (if (> x 1.0)
 (begin (ret7 (- (/ PI 2.0)
 (/ x (_add (* x x)
 0.28)
)
)
)
)
 (quote ()
)
)
 (if (< x (- 1.0)
)
 (begin (ret7 (- (/ (- PI)
 2.0)
 (/ x (_add (* x x)
 0.28)
)
)
)
)
 (quote ()
)
)
 (ret7 (/ x (_add 1.0 (* (* 0.28 x)
 x)
)
)
)
)
)
)
)
 (define (atan2Approx y x)
 (call/cc (lambda (ret8)
 (begin (if (> x 0.0)
 (begin (let ((r (atanApprox (/ y x)
)
)
)
 (begin (ret8 r)
)
)
)
 (quote ()
)
)
 (if (< x 0.0)
 (begin (if (>= y 0.0)
 (begin (ret8 (_add (atanApprox (/ y x)
)
 PI)
)
)
 (quote ()
)
)
 (ret8 (- (atanApprox (/ y x)
)
 PI)
)
)
 (quote ()
)
)
 (if (> y 0.0)
 (begin (ret8 (/ PI 2.0)
)
)
 (quote ()
)
)
 (if (< y 0.0)
 (begin (ret8 (/ (- PI)
 2.0)
)
)
 (quote ()
)
)
 (ret8 0.0)
)
)
)
)
 (define (sqrtApprox x)
 (call/cc (lambda (ret9)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i 10)
 (begin (set! guess (/ (_add guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 guess)
)
)
)
)
)
)
)
 (define (rad x)
 (call/cc (lambda (ret12)
 (ret12 (/ (* x PI)
 180.0)
)
)
)
)
 (define (deg x)
 (call/cc (lambda (ret13)
 (ret13 (/ (* x 180.0)
 PI)
)
)
)
)
 (define (distance lat1 lon1 lat2 lon2)
 (call/cc (lambda (ret14)
 (let ((phi1 (rad lat1)
)
)
 (begin (let ((phi2 (rad lat2)
)
)
 (begin (let ((dphi (rad (- lat2 lat1)
)
)
)
 (begin (let ((dlambda (rad (- lon2 lon1)
)
)
)
 (begin (let ((sdphi (sinApprox (/ dphi 2)
)
)
)
 (begin (let ((sdlambda (sinApprox (/ dlambda 2)
)
)
)
 (begin (let ((a (_add (* sdphi sdphi)
 (* (* (* (cosApprox phi1)
 (cosApprox phi2)
)
 sdlambda)
 sdlambda)
)
)
)
 (begin (let ((c (* 2 (atan2Approx (sqrtApprox a)
 (sqrtApprox (- 1 a)
)
)
)
)
)
 (begin (ret14 (* (/ 6371.0 1.852)
 c)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (bearing lat1 lon1 lat2 lon2)
 (call/cc (lambda (ret15)
 (let ((phi1 (rad lat1)
)
)
 (begin (let ((phi2 (rad lat2)
)
)
 (begin (let ((dl (rad (- lon2 lon1)
)
)
)
 (begin (let ((y (* (sinApprox dl)
 (cosApprox phi2)
)
)
)
 (begin (let ((x (- (* (cosApprox phi1)
 (sinApprox phi2)
)
 (* (* (sinApprox phi1)
 (cosApprox phi2)
)
 (cosApprox dl)
)
)
)
)
 (begin (let ((br (deg (atan2Approx y x)
)
)
)
 (begin (if (_lt br 0)
 (begin (set! br (_add br 360)
)
)
 (quote ()
)
)
 (ret15 br)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define airports (_list (alist->hash-table (_list (cons "name" "Koksijde Air Base")
 (cons "country" "Belgium")
 (cons "icao" "EBFN")
 (cons "lat" 51.090301513671875)
 (cons "lon" 2.652780055999756)
)
)
 (alist->hash-table (_list (cons "name" "Ostend-Bruges International Airport")
 (cons "country" "Belgium")
 (cons "icao" "EBOS")
 (cons "lat" 51.198898315399994)
 (cons "lon" 2.8622200489)
)
)
 (alist->hash-table (_list (cons "name" "Kent International Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGMH")
 (cons "lat" 51.342201)
 (cons "lon" 1.34611)
)
)
 (alist->hash-table (_list (cons "name" "Calais-Dunkerque Airport")
 (cons "country" "France")
 (cons "icao" "LFAC")
 (cons "lat" 50.962100982666016)
 (cons "lon" 1.954759955406189)
)
)
 (alist->hash-table (_list (cons "name" "Westkapelle heliport")
 (cons "country" "Belgium")
 (cons "icao" "EBKW")
 (cons "lat" 51.32222366333)
 (cons "lon" 3.2930560112)
)
)
 (alist->hash-table (_list (cons "name" "Lympne Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGMK")
 (cons "lat" 51.08)
 (cons "lon" 1.013)
)
)
 (alist->hash-table (_list (cons "name" "Ursel Air Base")
 (cons "country" "Belgium")
 (cons "icao" "EBUL")
 (cons "lat" 51.14419937133789)
 (cons "lon" 3.475559949874878)
)
)
 (alist->hash-table (_list (cons "name" "Southend Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGMC")
 (cons "lat" 51.5713996887207)
 (cons "lon" 0.6955559849739075)
)
)
 (alist->hash-table (_list (cons "name" "Merville-Calonne Airport")
 (cons "country" "France")
 (cons "icao" "LFQT")
 (cons "lat" 50.61840057373047)
 (cons "lon" 2.642240047454834)
)
)
 (alist->hash-table (_list (cons "name" "Wevelgem Airport")
 (cons "country" "Belgium")
 (cons "icao" "EBKT")
 (cons "lat" 50.817199707)
 (cons "lon" 3.20472002029)
)
)
 (alist->hash-table (_list (cons "name" "Midden-Zeeland Airport")
 (cons "country" "Netherlands")
 (cons "icao" "EHMZ")
 (cons "lat" 51.5121994019)
 (cons "lon" 3.73111009598)
)
)
 (alist->hash-table (_list (cons "name" "Lydd Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGMD")
 (cons "lat" 50.95610046386719)
 (cons "lon" 0.9391670227050781)
)
)
 (alist->hash-table (_list (cons "name" "RAF Wattisham")
 (cons "country" "United Kingdom")
 (cons "icao" "EGUW")
 (cons "lat" 52.1273002625)
 (cons "lon" 0.956264019012)
)
)
 (alist->hash-table (_list (cons "name" "Beccles Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGSM")
 (cons "lat" 52.435298919699996)
 (cons "lon" 1.6183300018300002)
)
)
 (alist->hash-table (_list (cons "name" "Lille/Marcq-en-Baroeul Airport")
 (cons "country" "France")
 (cons "icao" "LFQO")
 (cons "lat" 50.687198638916016)
 (cons "lon" 3.0755600929260254)
)
)
 (alist->hash-table (_list (cons "name" "Lashenden (Headcorn)
 Airfield")
 (cons "country" "United Kingdom")
 (cons "icao" "EGKH")
 (cons "lat" 51.156898)
 (cons "lon" 0.641667)
)
)
 (alist->hash-table (_list (cons "name" "Le Touquet-CÃ´te d'Opale Airport")
 (cons "country" "France")
 (cons "icao" "LFAT")
 (cons "lat" 50.517398834228516)
 (cons "lon" 1.6205899715423584)
)
)
 (alist->hash-table (_list (cons "name" "Rochester Airport")
 (cons "country" "United Kingdom")
 (cons "icao" "EGTO")
 (cons "lat" 51.351898193359375)
 (cons "lon" 0.5033329725265503)
)
)
 (alist->hash-table (_list (cons "name" "Lille-Lesquin Airport")
 (cons "country" "France")
 (cons "icao" "LFQQ")
 (cons "lat" 50.563332)
 (cons "lon" 3.086886)
)
)
 (alist->hash-table (_list (cons "name" "Thurrock Airfield")
 (cons "country" "United Kingdom")
 (cons "icao" "EGMT")
 (cons "lat" 51.537505)
 (cons "lon" 0.367634)
)
)
)
)
 (define (floor x)
 (call/cc (lambda (ret16)
 (let ((i (let ((v17 x)
)
 (cond ((string? v17)
 (exact (floor (string->number v17)
)
)
)
 ((boolean? v17)
 (if v17 1 0)
)
 (else (exact (floor v17)
)
)
)
)
)
)
 (begin (if (> (+ 0.0 i)
 x)
 (begin (set! i (- i 1)
)
)
 (quote ()
)
)
 (ret16 (+ 0.0 i)
)
)
)
)
)
)
 (define (pow10 n)
 (call/cc (lambda (ret18)
 (let ((p 1.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< i n)
 (begin (set! p (* p 10.0)
)
 (set! i (+ i 1)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (ret18 p)
)
)
)
)
)
)
)
 (define (round x n)
 (call/cc (lambda (ret21)
 (let ((m (pow10 n)
)
)
 (begin (ret21 (/ (floor (_add (* x m)
 0.5)
)
 m)
)
)
)
)
)
)
 (define (sortByDistance xs)
 (call/cc (lambda (ret22)
 (let ((arr xs)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< i (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
 (begin (let ((j i)
)
 (begin (call/cc (lambda (break26)
 (letrec ((loop25 (lambda ()
 (if (and (> j 0)
 (_gt (cond ((string? (list-ref arr (- j 1)
)
)
 (substring (list-ref arr (- j 1)
)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref arr (- j 1)
)
)
 (hash-table-ref (list-ref arr (- j 1)
)
 0)
)
 (else (list-ref (list-ref arr (- j 1)
)
 0)
)
)
 (cond ((string? (list-ref arr j)
)
 (substring (list-ref arr j)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref arr j)
)
 (hash-table-ref (list-ref arr j)
 0)
)
 (else (list-ref (list-ref arr j)
 0)
)
)
)
)
 (begin (let ((tmp (list-ref arr (- j 1)
)
)
)
 (begin (list-set! arr (- j 1)
 (list-ref arr j)
)
 (list-set! arr j tmp)
 (set! j (- j 1)
)
)
)
 (loop25)
)
 (quote ()
)
)
)
)
)
 (loop25)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (ret22 arr)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret27)
 (let ((planeLat 51.514669)
)
 (begin (let ((planeLon 2.198581)
)
 (begin (let ((results (_list)
)
)
 (begin (call/cc (lambda (break29)
 (letrec ((loop28 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((ap (car xs)
)
)
 (begin (let ((d (distance planeLat planeLon (hash-table-ref ap "lat")
 (hash-table-ref ap "lon")
)
)
)
 (begin (let ((b (bearing planeLat planeLon (hash-table-ref ap "lat")
 (hash-table-ref ap "lon")
)
)
)
 (begin (set! results (append results (_list (_list d b ap)
)
)
)
)
)
)
)
)
)
 (loop28 (cdr xs)
)
)
)
)
)
)
 (loop28 airports)
)
)
)
 (set! results (sortByDistance results)
)
 (_display (to-str "Distance Bearing ICAO Country               Airport")
)
 (newline)
 (_display (to-str "--------------------------------------------------------------")
)
 (newline)
 (let ((i 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< i (cond ((string? results)
 (string-length results)
)
 ((hash-table? results)
 (hash-table-size results)
)
 (else (length results)
)
)
)
 (begin (let ((r (list-ref results i)
)
)
 (begin (let ((ap (list-ref r 2)
)
)
 (begin (let ((dist (list-ref r 0)
)
)
 (begin (let ((bear (list-ref r 1)
)
)
 (begin (let ((line (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (to-str (round dist 1)
)
 "\t")
 (to-str (round bear 0)
)
)
 "\t")
 (hash-table-ref ap "icao")
)
 "\t")
 (hash-table-ref ap "country")
)
 " ")
 (hash-table-ref ap "name")
)
)
)
 (begin (_display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end33 (now)
)
)
 (let ((dur34 (quotient (- end33 start32)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur34)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
