;; Generated on 2025-07-27 23:17 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start19 (now)
)
)
 (begin (define (bigrat a b)
 (call/cc (lambda (ret1)
 (ret1 (quotient a b)
)
)
)
)
 (define (calkinWilf n)
 (call/cc (lambda (ret2)
 (let ((seq (_list)
)
)
 (begin (set! seq (append seq (_list (bigrat 1 1)
)
)
)
 (let ((i 1)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i n)
 (begin (let ((prev (list-ref seq (- i 1)
)
)
)
 (begin (let ((a (numerator prev)
)
)
 (begin (let ((b (denominator prev)
)
)
 (begin (let ((f (quotient a b)
)
)
 (begin (let ((t (bigrat f 1)
)
)
 (begin (set! t (* t 2)
)
 (set! t (- t prev)
)
 (set! t (+ t 1)
)
 (set! t (quotient 1 t)
)
 (set! seq (append seq (_list t)
)
)
 (set! i (+ i 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (ret2 seq)
)
)
)
)
)
)
)
 (define (toContinued r)
 (call/cc (lambda (ret5)
 (let ((a (numerator r)
)
)
 (begin (let ((b (denominator r)
)
)
 (begin (let ((res (_list)
)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if #t (begin (set! res (append res (_list (let ((v8 (quotient a b)
)
)
 (cond ((string? v8)
 (exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (exact (floor v8)
)
)
)
)
)
)
)
 (let ((t (modulo a b)
)
)
 (begin (set! a b)
 (set! b t)
 (if (equal? a 1)
 (begin (break7 (quote ()
)
)
)
 (quote ()
)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (if (equal? (modulo (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
 2)
 0)
 (begin (list-set! res (- (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
 1)
 (- (list-ref res (- (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
 1)
)
 1)
)
 (set! res (append res (_list 1)
)
)
)
 (quote ()
)
)
 (ret5 res)
)
)
)
)
)
)
)
)
)
 (define (termNumber cf)
 (call/cc (lambda (ret9)
 (let ((b "")
)
 (begin (let ((d "1")
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((n (car xs)
)
)
 (begin (set! b (string-append (_repeat d n)
 b)
)
 (if (string=? d "1")
 (begin (set! d "0")
)
 (begin (set! d "1")
)
)
)
)
 (loop10 (cdr xs)
)
)
)
)
)
)
 (loop10 cf)
)
)
)
 (ret9 (_parseIntStr b 2)
)
)
)
)
)
)
)
)
 (define (commatize n)
 (call/cc (lambda (ret12)
 (let ((s (to-str n)
)
)
 (begin (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (let ((cnt 0)
)
 (begin (let ((neg #f)
)
 (begin (if (string=? (substring s 0 1)
 "-")
 (begin (set! neg #t)
 (set! s (substring s 1 (string-length s)
)
)
)
 (quote ()
)
)
 (set! i (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 1)
)
 (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (>= i 0)
 (begin (set! out (string-append (substring s i (+ i 1)
)
 out)
)
 (set! cnt (+ cnt 1)
)
 (if (and (equal? cnt 3)
 (not (equal? i 0)
)
)
 (begin (set! out (string-append "," out)
)
 (set! cnt 0)
)
 (quote ()
)
)
 (set! i (- i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (if neg (begin (set! out (string-append "-" out)
)
)
 (quote ()
)
)
 (ret12 out)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret15)
 (let ((cw (calkinWilf 20)
)
)
 (begin (_display (to-str "The first 20 terms of the Calkin-Wilf sequnence are:")
)
 (newline)
 (let ((i 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i 20)
 (begin (let ((r (cond ((string? cw)
 (substring cw i (+ i 1)
)
)
 ((hash-table? cw)
 (hash-table-ref cw i)
)
 (else (list-ref cw i)
)
)
)
)
 (begin (let ((s (to-str (numerator r)
)
)
)
 (begin (if (not (equal? (denominator r)
 1)
)
 (begin (set! s (string-append (string-append s "/")
 (to-str (denominator r)
)
)
)
)
 (quote ()
)
)
 (_display (to-str (string-append (string-append (padStart (to-str (+ i (let ((v18 1)
)
 (cond ((string? v18)
 (exact (floor (string->number v18)
)
)
)
 ((boolean? v18)
 (if v18 1 0)
)
 (else (exact (floor v18)
)
)
)
)
)
)
 2 " ")
 ": ")
 s)
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((r (bigrat 83116 51639)
)
)
 (begin (let ((cf (toContinued r)
)
)
 (begin (let ((tn (termNumber cf)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append "" (to-str (numerator r)
)
)
 "/")
 (to-str (denominator r)
)
)
 " is the ")
 (commatize tn)
)
 "th term of the sequence.")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end20 (now)
)
)
 (let ((dur21 (quotient (- end20 start19)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur21)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
