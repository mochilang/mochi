;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start15 (now)
)
)
 (begin (define bCoeff 7.0)
 (define (zero)
 (call/cc (lambda (ret1)
 (ret1 (alist->hash-table (_list (cons "x" 0.0)
 (cons "y" 0.0)
 (cons "inf" #t)
)
)
)
)
)
)
 (define (isZero p)
 (call/cc (lambda (ret2)
 (ret2 (hash-table-ref p "inf")
)
)
)
)
 (define (neg p)
 (call/cc (lambda (ret3)
 (ret3 (alist->hash-table (_list (cons "x" (hash-table-ref p "x")
)
 (cons "y" (- (hash-table-ref p "y")
)
)
 (cons "inf" (hash-table-ref p "inf")
)
)
)
)
)
)
)
 (define (dbl p)
 (call/cc (lambda (ret4)
 (begin (if (isZero p)
 (begin (ret4 p)
)
 (quote ()
)
)
 (let ((L (/ (* (* 3.0 (hash-table-ref p "x")
)
 (hash-table-ref p "x")
)
 (* 2.0 (hash-table-ref p "y")
)
)
)
)
 (begin (let ((x (- (* L L)
 (* 2.0 (hash-table-ref p "x")
)
)
)
)
 (begin (ret4 (alist->hash-table (_list (cons "x" x)
 (cons "y" (- (* L (- (hash-table-ref p "x")
 x)
)
 (hash-table-ref p "y")
)
)
 (cons "inf" #f)
)
)
)
)
)
)
)
)
)
)
)
 (define (add p q)
 (call/cc (lambda (ret5)
 (begin (if (isZero p)
 (begin (ret5 q)
)
 (quote ()
)
)
 (if (isZero q)
 (begin (ret5 p)
)
 (quote ()
)
)
 (if (equal? (hash-table-ref p "x")
 (hash-table-ref q "x")
)
 (begin (if (equal? (hash-table-ref p "y")
 (hash-table-ref q "y")
)
 (begin (ret5 (dbl p)
)
)
 (quote ()
)
)
 (ret5 (zero)
)
)
 (quote ()
)
)
 (let ((L (/ (- (hash-table-ref q "y")
 (hash-table-ref p "y")
)
 (- (hash-table-ref q "x")
 (hash-table-ref p "x")
)
)
)
)
 (begin (let ((x (- (- (* L L)
 (hash-table-ref p "x")
)
 (hash-table-ref q "x")
)
)
)
 (begin (ret5 (alist->hash-table (_list (cons "x" x)
 (cons "y" (- (* L (- (hash-table-ref p "x")
 x)
)
 (hash-table-ref p "y")
)
)
 (cons "inf" #f)
)
)
)
)
)
)
)
)
)
)
)
 (define (mul p n)
 (call/cc (lambda (ret6)
 (let ((r (zero)
)
)
 (begin (let ((q p)
)
 (begin (let ((k n)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (> k 0)
 (begin (if (equal? (modulo k 2)
 1)
 (begin (set! r (add r q)
)
)
 (quote ()
)
)
 (set! q (dbl q)
)
 (set! k (quotient k 2)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 r)
)
)
)
)
)
)
)
)
)
 (define (cbrtApprox x)
 (call/cc (lambda (ret9)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i 40)
 (begin (set! guess (/ (_add (* 2.0 guess)
 (/ x (* guess guess)
)
)
 3.0)
)
 (set! i (+ i 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 guess)
)
)
)
)
)
)
)
 (define (fromY y)
 (call/cc (lambda (ret12)
 (ret12 (alist->hash-table (_list (cons "x" (cbrtApprox (- (* y y)
 bCoeff)
)
)
 (cons "y" y)
 (cons "inf" #f)
)
)
)
)
)
)
 (define (show s p)
 (call/cc (lambda (ret13)
 (if (isZero p)
 (begin (_display (to-str (string-append s "Zero")
)
)
 (newline)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append s "(")
 (to-str (hash-table-ref p "x")
)
)
 ", ")
 (to-str (hash-table-ref p "y")
)
)
 ")
")
)
)
 (newline)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret14)
 (let ((a (fromY 1.0)
)
)
 (begin (let ((b (fromY 2.0)
)
)
 (begin (show "a = " a)
 (show "b = " b)
 (let ((c (add a b)
)
)
 (begin (show "c = a + b = " c)
 (let ((d (neg c)
)
)
 (begin (show "d = -c = " d)
 (show "c + d = " (add c d)
)
 (show "a + b + d = " (add a (add b d)
)
)
 (show "a * 12345 = " (mul a 12345)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end16 (now)
)
)
 (let ((dur17 (quotient (- end16 start15)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur17)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
