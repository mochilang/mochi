;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start24 (now)
)
)
 (begin (define (shuffle xs)
 (call/cc (lambda (ret1)
 (let ((arr xs)
)
 (begin (let ((i 99)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> i 0)
 (begin (let ((j (modulo (now)
 (+ i 1)
)
)
)
 (begin (let ((tmp (list-ref arr i)
)
)
 (begin (list-set! arr i (list-ref arr j)
)
 (list-set! arr j tmp)
 (set! i (- i 1)
)
)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 arr)
)
)
)
)
)
)
)
 (define (doTrials trials np strategy)
 (call/cc (lambda (ret4)
 (let ((pardoned 0)
)
 (begin (let ((t 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< t trials)
 (begin (let ((drawers (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i 100)
 (begin (set! drawers (append drawers (list i)
)
)
 (set! i (+ i 1)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (set! drawers (shuffle drawers)
)
 (let ((p 0)
)
 (begin (let ((success #t)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< p np)
 (begin (let ((found #f)
)
 (begin (if (string=? strategy "optimal")
 (begin (let ((prev p)
)
 (begin (let ((d 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< d 50)
 (begin (let ((this (list-ref drawers prev)
)
)
 (begin (if (equal? this p)
 (begin (set! found #t)
 (break12 (quote nil)
)
)
 (quote nil)
)
 (set! prev this)
 (set! d (+ d 1)
)
)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
)
)
)
)
)
 (begin (let ((opened (list)
)
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< k 100)
 (begin (set! opened (append opened (list #f)
)
)
 (set! k (+ k 1)
)
 (loop13)
)
 (quote nil)
)
)
)
)
 (loop13)
)
)
)
 (let ((d 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< d 50)
 (begin (let ((n (modulo (now)
 100)
)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (list-ref opened n)
 (begin (set! n (modulo (now)
 100)
)
 (loop17)
)
 (quote nil)
)
)
)
)
 (loop17)
)
)
)
 (list-set! opened n #t)
 (if (equal? (list-ref drawers n)
 p)
 (begin (set! found #t)
 (break16 (quote nil)
)
)
 (quote nil)
)
 (set! d (+ d 1)
)
)
)
 (loop15)
)
 (quote nil)
)
)
)
)
 (loop15)
)
)
)
)
)
)
)
)
)
)
)
 (if (not found)
 (begin (set! success #f)
 (break10 (quote nil)
)
)
 (quote nil)
)
 (set! p (+ p 1)
)
)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (if success (begin (set! pardoned (+ pardoned 1)
)
)
 (quote nil)
)
 (set! t (+ t 1)
)
)
)
)
)
)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (let ((rf (* (/ pardoned trials)
 100.0)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append (string-append "  strategy = " strategy)
 "  pardoned = ")
 (to-str pardoned)
)
 " relative frequency = ")
 (to-str rf)
)
 "%")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret19)
 (let ((trials 1000)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((np (car xs)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append "Results from " (to-str trials)
)
 " trials with ")
 (to-str np)
)
 " prisoners:\n")
)
)
 (newline)
 (call/cc (lambda (break23)
 (letrec ((loop22 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((strat (car xs)
)
)
 (begin (doTrials trials np strat)
)
)
 (loop22 (cdr xs)
)
)
)
)
)
)
 (loop22 (list "random" "optimal")
)
)
)
)
)
)
 (loop20 (cdr xs)
)
)
)
)
)
)
 (loop20 (list 10 100)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end25 (now)
)
)
 (let ((dur26 (quotient (- end25 start24)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur26)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
