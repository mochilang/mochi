;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define PI 3.141592653589793)
(define (sinApprox x)
 (call/cc (lambda (ret1)
 (let ((term x)
)
 (begin (let ((sum x)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= n 12)
 (begin (let ((denom (* (* 2 n)
 (+ (* 2 n)
 1)
)
)
)
 (begin (set! term (quotient (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
)
)
(define dt 0.01)
(define s 0.0)
(define t1 0.0)
(define k1 (sinApprox 0.0)
)
(define i 1)
(call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (<= i 200)
 (begin (let ((t2 (* i dt)
)
)
 (begin (let ((k2 (sinApprox (* t2 PI)
)
)
)
 (begin (set! s (+ s (* (* (+ k1 k2)
 0.5)
 (- t2 t1)
)
)
)
 (set! t1 t2)
 (set! k1 k2)
 (set! i (+ i 1)
)
)
)
)
)
 (loop4)
)
 (quote nil)
)
)
)
)
 (loop4)
)
)
)
(define i2 1)
(call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (<= i2 50)
 (begin (let ((t2 (+ 2.0 (* i2 dt)
)
)
)
 (begin (let ((k2 0.0)
)
 (begin (set! s (+ s (* (* (+ k1 k2)
 0.5)
 (- t2 t1)
)
)
)
 (set! t1 t2)
 (set! k1 k2)
 (set! i2 (+ i2 1)
)
)
)
)
)
 (loop6)
)
 (quote nil)
)
)
)
)
 (loop6)
)
)
)
(display (to-str s)
)
(newline)
