;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (poolPut p x)
 (call/cc (lambda (ret1)
 (ret1 (append p (list x)
)
)
)
)
)
(define (poolGet p)
 (call/cc (lambda (ret2)
 (begin (if (equal? (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
 0)
 (begin (display (to-str "pool empty")
)
 (newline)
 (ret2 (alist->hash-table (list (cons "pool" p)
 (cons "val" 0)
)
)
)
)
 (quote nil)
)
 (let ((idx (- (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
 1)
)
)
 (begin (let ((v (list-ref p idx)
)
)
 (begin (set! p (take (drop p 0)
 (- idx 0)
)
)
 (ret2 (alist->hash-table (list (cons "pool" p)
 (cons "val" v)
)
)
)
)
)
)
)
)
)
)
)
(define (clearPool p)
 (call/cc (lambda (ret3)
 (ret3 (list)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (let ((pool (list)
)
)
 (begin (let ((i 1)
)
 (begin (let ((j 2)
)
 (begin (display (to-str (to-str (+ i j)
)
)
)
 (newline)
 (set! pool (poolPut pool i)
)
 (set! pool (poolPut pool j)
)
 (set! i 0)
 (set! j 0)
 (let ((res1 (poolGet pool)
)
)
 (begin (set! pool (hash-table-ref res1 "pool")
)
 (set! i (inexact->exact (hash-table-ref res1 "val")
)
)
 (let ((res2 (poolGet pool)
)
)
 (begin (set! pool (hash-table-ref res2 "pool")
)
 (set! j (inexact->exact (hash-table-ref res2 "val")
)
)
 (set! i 4)
 (set! j 5)
 (display (to-str (to-str (+ i j)
)
)
)
 (newline)
 (set! pool (poolPut pool i)
)
 (set! pool (poolPut pool j)
)
 (set! i 0)
 (set! j 0)
 (set! pool (clearPool pool)
)
 (let ((res3 (poolGet pool)
)
)
 (begin (set! pool (hash-table-ref res3 "pool")
)
 (set! i (inexact->exact (hash-table-ref res3 "val")
)
)
 (let ((res4 (poolGet pool)
)
)
 (begin (set! pool (hash-table-ref res4 "pool")
)
 (set! j (inexact->exact (hash-table-ref res4 "val")
)
)
 (set! i 7)
 (set! j 8)
 (display (to-str (to-str (+ i j)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
