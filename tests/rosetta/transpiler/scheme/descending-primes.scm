;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (isPrime n)
 (call/cc (lambda (ret1)
 (begin (if (< n 2)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (if (equal? (modulo n 2)
 0)
 (begin (ret1 (equal? n 2)
)
)
 (quote ()
)
)
 (let ((d 3)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (_le (* d d)
 n)
 (begin (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! d (+ d 2)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #t)
)
)
)
)
)
)
(define digits (_list 9 8 7 6 5 4 3 2 1)
)
(define (gen idx cur used)
 (call/cc (lambda (ret4)
 (begin (if (equal? idx (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
)
 (begin (if (and used (isPrime cur)
)
 (begin (ret4 (_list cur)
)
)
 (quote ()
)
)
 (ret4 (_list)
)
)
 (quote ()
)
)
 (let ((with (gen (+ idx 1)
 (_add (* cur 10)
 (list-ref digits idx)
)
 #t)
)
)
 (begin (let ((without (gen (+ idx 1)
 cur used)
)
)
 (begin (ret4 (append with without)
)
)
)
)
)
)
)
)
)
(define primes (gen 0 0 #f)
)
(define (pad n width)
 (call/cc (lambda (ret5)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 s)
)
)
)
)
)
(_display (to-str (string-append (string-append "There are " (to-str (cond ((string? primes)
 (string-length primes)
)
 ((hash-table? primes)
 (hash-table-size primes)
)
 (else (length primes)
)
)
)
)
 " descending primes, namely:")
)
)
(newline)
(define i 0)
(define line "")
(call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? primes)
 (string-length primes)
)
 ((hash-table? primes)
 (hash-table-size primes)
)
 (else (length primes)
)
)
)
 (begin (set! line (string-append (string-append line (pad (list-ref primes i)
 8)
)
 " ")
)
 (if (equal? (modulo (+ i 1)
 10)
 0)
 (begin (_display (to-str (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 1)
)
)
)
 (newline)
 (set! line "")
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
(if (> (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 0)
 (begin (_display (to-str (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 1)
)
)
)
 (newline)
)
 (quote ()
)
)
