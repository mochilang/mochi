;; Generated on 2025-07-26 21:54 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start2 (now)
)
)
 (begin (define (main)
 (call/cc (lambda (ret1)
 (begin (display (to-str "Diagram after trimming whitespace and removal of blank lines:\n")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|                      ID                       |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|                    QDCOUNT                    |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|                    ANCOUNT                    |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|                    NSCOUNT                    |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "|                    ARCOUNT                    |")
)
 (newline)
 (display (to-str "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
)
 (newline)
 (display (to-str "\nDecoded:\n")
)
 (newline)
 (display (to-str "Name     Bits  Start  End")
)
 (newline)
 (display (to-str "=======  ====  =====  ===")
)
 (newline)
 (display (to-str "ID        16      0    15")
)
 (newline)
 (display (to-str "QR         1     16    16")
)
 (newline)
 (display (to-str "Opcode     4     17    20")
)
 (newline)
 (display (to-str "AA         1     21    21")
)
 (newline)
 (display (to-str "TC         1     22    22")
)
 (newline)
 (display (to-str "RD         1     23    23")
)
 (newline)
 (display (to-str "RA         1     24    24")
)
 (newline)
 (display (to-str "Z          3     25    27")
)
 (newline)
 (display (to-str "RCODE      4     28    31")
)
 (newline)
 (display (to-str "QDCOUNT   16     32    47")
)
 (newline)
 (display (to-str "ANCOUNT   16     48    63")
)
 (newline)
 (display (to-str "NSCOUNT   16     64    79")
)
 (newline)
 (display (to-str "ARCOUNT   16     80    95")
)
 (newline)
 (display (to-str "\nTest string in hex:")
)
 (newline)
 (display (to-str "78477bbf5496e12e1bf169a4")
)
 (newline)
 (display (to-str "\nTest string in binary:")
)
 (newline)
 (display (to-str "011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100")
)
 (newline)
 (display (to-str "\nUnpacked:\n")
)
 (newline)
 (display (to-str "Name     Size  Bit pattern")
)
 (newline)
 (display (to-str "=======  ====  ================")
)
 (newline)
 (display (to-str "ID        16   0111100001000111")
)
 (newline)
 (display (to-str "QR         1   0")
)
 (newline)
 (display (to-str "Opcode     4   1111")
)
 (newline)
 (display (to-str "AA         1   0")
)
 (newline)
 (display (to-str "TC         1   1")
)
 (newline)
 (display (to-str "RD         1   1")
)
 (newline)
 (display (to-str "RA         1   1")
)
 (newline)
 (display (to-str "Z          3   011")
)
 (newline)
 (display (to-str "RCODE      4   1111")
)
 (newline)
 (display (to-str "QDCOUNT   16   0101010010010110")
)
 (newline)
 (display (to-str "ANCOUNT   16   1110000100101110")
)
 (newline)
 (display (to-str "NSCOUNT   16   0001101111110001")
)
 (newline)
 (display (to-str "ARCOUNT   16   0110100110100100")
)
 (newline)
)
)
)
)
 (main)
 (let ((end3 (now)
)
)
 (let ((dur4 (quotient (- end3 start2)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur4)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
