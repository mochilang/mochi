;; Generated on 2025-08-04 16:05 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(let ((start29 (current-jiffy)) (jps32 (jiffies-per-second))) (begin (let ((PI 3.141592653589793)) (begin (define (_mod x m) (call/cc (lambda (ret1) (ret1 (- x (* (+ 0.0 (let ((v2 (/ x m))) (cond ((string? v2) (inexact->exact (floor (string->number v2)))) ((boolean? v2) (if v2 1 0)) (else (inexact->exact (floor v2)))))) m)))))) (define (_sin x) (call/cc (lambda (ret3) (let ((y (- (_mod (+ x PI) (* 2.0 PI)) PI))) (begin (let ((y2 (* y y))) (begin (let ((y3 (* y2 y))) (begin (let ((y5 (* y3 y2))) (begin (let ((y7 (* y5 y2))) (begin (ret3 (- (_add (- y (/ y3 6.0)) (/ y5 120.0)) (/ y7 5040.0)))))))))))))))) (define (_cos x) (call/cc (lambda (ret4) (let ((y (- (_mod (+ x PI) (* 2.0 PI)) PI))) (begin (let ((y2 (* y y))) (begin (let ((y4 (* y2 y2))) (begin (let ((y6 (* y4 y2))) (begin (ret4 (- (_add (- 1.0 (/ y2 2.0)) (/ y4 24.0)) (/ y6 720.0)))))))))))))) (let ((width 80)) (begin (let ((height 40)) (begin (let ((depth 6)) (begin (let ((angle 12.0)) (begin (let ((length 12.0)) (begin (let ((frac 0.8)) (begin (define (clearGrid) (call/cc (lambda (ret5) (let ((g (_list))) (begin (let ((y 0)) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda () (if (< y height) (begin (let ((row (_list))) (begin (let ((x 0)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< x width) (begin (set! row (append row (_list " "))) (set! x (+ x 1)) (loop8)) (quote ()))))) (loop8)))) (set! g (append g (_list row))) (set! y (+ y 1)))))) (loop6)) (quote ()))))) (loop6)))) (ret5 g)))))))) (define (drawPoint g x y) (call/cc (lambda (ret10) (if (and (and (and (>= x 0) (< x width)) (>= y 0)) (< y height)) (begin (let ((row (list-ref g y))) (begin (list-set! row x "#") (list-set! g y row)))) (quote ()))))) (define (bresenham x0 y0 x1 y1 g) (call/cc (lambda (ret11) (let ((dx (- x1 x0))) (begin (if (< dx 0) (begin (set! dx (- dx))) (quote ())) (let ((dy (- y1 y0))) (begin (if (< dy 0) (begin (set! dy (- dy))) (quote ())) (let ((sx (- 1))) (begin (if (< x0 x1) (begin (set! sx 1)) (quote ())) (let ((sy (- 1))) (begin (if (< y0 y1) (begin (set! sy 1)) (quote ())) (let ((err (- dx dy))) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if #t (begin (drawPoint g x0 y0) (if (and (equal? x0 x1) (equal? y0 y1)) (begin (break13 (quote ()))) (quote ())) (let ((e2 (* 2 err))) (begin (if (> e2 (- dy)) (begin (set! err (- err dy)) (set! x0 (+ x0 sx))) (quote ())) (if (< e2 dx) (begin (set! err (+ err dx)) (set! y0 (+ y0 sy))) (quote ())))) (loop12)) (quote ()))))) (loop12))))))))))))))))) (define (ftree g x y dist dir d) (call/cc (lambda (ret14) (let ((rad (/ (* dir PI) 180.0))) (begin (let ((x2 (_add x (* dist (_sin rad))))) (begin (let ((y2 (- y (* dist (_cos rad))))) (begin (bresenham (let ((v19 x)) (cond ((string? v19) (inexact->exact (floor (string->number v19)))) ((boolean? v19) (if v19 1 0)) (else (inexact->exact (floor v19))))) (let ((v20 y)) (cond ((string? v20) (inexact->exact (floor (string->number v20)))) ((boolean? v20) (if v20 1 0)) (else (inexact->exact (floor v20))))) (let ((v21 x2)) (cond ((string? v21) (inexact->exact (floor (string->number v21)))) ((boolean? v21) (if v21 1 0)) (else (inexact->exact (floor v21))))) (let ((v22 y2)) (cond ((string? v22) (inexact->exact (floor (string->number v22)))) ((boolean? v22) (if v22 1 0)) (else (inexact->exact (floor v22))))) g) (if (> d 0) (begin (ftree g x2 y2 (* dist frac) (- dir angle) (- d 1)) (ftree g x2 y2 (* dist frac) (+ dir angle) (- d 1))) (quote ()))))))))))) (define (render g) (call/cc (lambda (ret23) (let ((out "")) (begin (let ((y 0)) (begin (call/cc (lambda (break25) (letrec ((loop24 (lambda () (if (< y height) (begin (let ((line "")) (begin (let ((x 0)) (begin (call/cc (lambda (break27) (letrec ((loop26 (lambda () (if (< x width) (begin (set! line (string-append line (cond ((string? (list-ref g y)) (_substring (list-ref g y) x (+ x 1))) ((hash-table? (list-ref g y)) (hash-table-ref (list-ref g y) x)) (else (list-ref (list-ref g y) x))))) (set! x (+ x 1)) (loop26)) (quote ()))))) (loop26)))) (set! out (string-append out line)) (if (_lt y (- height 1)) (begin (set! out (string-append out "\n"))) (quote ())) (set! y (+ y 1)))))) (loop24)) (quote ()))))) (loop24)))) (ret23 out)))))))) (define (main) (call/cc (lambda (ret28) (let ((grid (clearGrid))) (begin (ftree grid (+ 0.0 (quotient width 2)) (+ 0.0 (- height 1)) length 0.0 depth) (_display (to-str (render grid))) (newline)))))) (main))))))))))))))) (let ((end30 (current-jiffy))) (let ((dur31 (quotient (* (- end30 start29) 1000000) jps32))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur31) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
