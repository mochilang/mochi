;; Generated on 2025-07-28 11:46 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start20 (now)
)
)
 (begin (define (zero f)
 (call/cc (lambda (ret1)
 (ret1 (lambda (x)
 (call/cc (lambda (ret2)
 (ret2 x)
)
)
)
)
)
)
)
 (define (succ c)
 (call/cc (lambda (ret3)
 (ret3 (lambda (f)
 (call/cc (lambda (ret4)
 (ret4 (lambda (x)
 (call/cc (lambda (ret5)
 (ret5 (f ((c f)
 x)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (add c d)
 (call/cc (lambda (ret6)
 (ret6 (lambda (f)
 (call/cc (lambda (ret7)
 (ret7 (lambda (x)
 (call/cc (lambda (ret8)
 (ret8 ((c f)
 ((d f)
 x)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (mul c d)
 (call/cc (lambda (ret9)
 (ret9 (lambda (f)
 (call/cc (lambda (ret10)
 (ret10 (lambda (x)
 (call/cc (lambda (ret11)
 (ret11 ((c (d f)
)
 x)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (pow c d)
 (call/cc (lambda (ret12)
 (let ((di (toInt d)
)
)
 (begin (let ((prod c)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i di)
 (begin (set! prod (mul prod c)
)
 (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 prod)
)
)
)
)
)
)
)
)
)
 (define (incr i)
 (call/cc (lambda (ret15)
 (ret15 (+ (let ((v16 i)
)
 (cond ((string? v16)
 (inexact->exact (floor (string->number v16)
)
)
)
 ((boolean? v16)
 (if v16 1 0)
)
 (else (inexact->exact (floor v16)
)
)
)
)
 1)
)
)
)
)
 (define (toInt c)
 (call/cc (lambda (ret17)
 (ret17 (let ((v18 ((c incr)
 0)
)
)
 (cond ((string? v18)
 (inexact->exact (floor (string->number v18)
)
)
)
 ((boolean? v18)
 (if v18 1 0)
)
 (else (inexact->exact (floor v18)
)
)
)
)
)
)
)
)
 (define (intToChurch i)
 (call/cc (lambda (ret19)
 (begin (if (equal? i 0)
 (begin (ret19 zero)
)
 (quote ()
)
)
 (ret19 (succ (intToChurch (- i 1)
)
)
)
)
)
)
)
 (define z zero)
 (define three (succ (succ (succ z)
)
)
)
 (define four (succ three)
)
 (_display (to-str (string-append "three        -> " (to-str (toInt three)
)
)
)
)
 (newline)
 (_display (to-str (string-append "four         -> " (to-str (toInt four)
)
)
)
)
 (newline)
 (_display (to-str (string-append "three + four -> " (to-str (toInt (add three four)
)
)
)
)
)
 (newline)
 (_display (to-str (string-append "three * four -> " (to-str (toInt (mul three four)
)
)
)
)
)
 (newline)
 (_display (to-str (string-append "three ^ four -> " (to-str (toInt (expt three four)
)
)
)
)
)
 (newline)
 (_display (to-str (string-append "four ^ three -> " (to-str (toInt (expt four three)
)
)
)
)
)
 (newline)
 (_display (to-str (string-append "5 -> five    -> " (to-str (toInt (intToChurch 5)
)
)
)
)
)
 (newline)
 (let ((end21 (now)
)
)
 (let ((dur22 (quotient (- end21 start20)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur22)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
