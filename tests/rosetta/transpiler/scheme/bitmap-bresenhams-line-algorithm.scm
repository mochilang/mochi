;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start8 (now)
)
)
 (begin (define (absi x)
 (call/cc (lambda (ret1)
 (begin (if (< x 0)
 (begin (ret1 (- x)
)
)
 (quote ()
)
)
 (ret1 x)
)
)
)
)
 (define (bresenham x0 y0 x1 y1)
 (call/cc (lambda (ret2)
 (let ((dx (absi (- x1 x0)
)
)
)
 (begin (let ((dy (absi (- y1 y0)
)
)
)
 (begin (let ((sx (- 1)
)
)
 (begin (if (< x0 x1)
 (begin (set! sx 1)
)
 (quote ()
)
)
 (let ((sy (- 1)
)
)
 (begin (if (< y0 y1)
 (begin (set! sy 1)
)
 (quote ()
)
)
 (let ((err (- dx dy)
)
)
 (begin (let ((pts (_list)
)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if #t (begin (set! pts (append pts (_list (alist->hash-table (_list (cons "x" x0)
 (cons "y" y0)
)
)
)
)
)
 (if (and (equal? x0 x1)
 (equal? y0 y1)
)
 (begin (break4 (quote ()
)
)
)
 (quote ()
)
)
 (let ((e2 (* 2 err)
)
)
 (begin (if (_gt e2 (- dy)
)
 (begin (set! err (- err dy)
)
 (set! x0 (+ x0 sx)
)
)
 (quote ()
)
)
 (if (_lt e2 dx)
 (begin (set! err (+ err dx)
)
 (set! y0 (+ y0 sy)
)
)
 (quote ()
)
)
)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (ret2 pts)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret5)
 (let ((pts (bresenham 0 0 6 4)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< i (cond ((string? pts)
 (string-length pts)
)
 ((hash-table? pts)
 (hash-table-size pts)
)
 (else (length pts)
)
)
)
 (begin (let ((p (cond ((string? pts)
 (substring pts i (+ i 1)
)
)
 ((hash-table? pts)
 (hash-table-ref pts i)
)
 (else (list-ref pts i)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append "(" (to-str (hash-table-ref p "x")
)
)
 ",")
 (to-str (hash-table-ref p "y")
)
)
 ")
")
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end9 (now)
)
)
 (let ((dur10 (quotient (- end9 start8)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur10)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
