;; Generated on 2025-07-27 23:17 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start15 (now)
)
)
 (begin (define daysInMonth (_list 31 28 31 30 31 30 31 31 30 31 30 31)
)
 (define start (_list 3 6 6 2 4 0 2 5 1 3 6 1)
)
 (define months (_list " January " " February" "  March  " "  April  " "   May   " "   June  " "   July  " "  August " "September" " October " " November" " December")
)
 (define days (_list "Su" "Mo" "Tu" "We" "Th" "Fr" "Sa")
)
 (_display (to-str "                                [SNOOPY]\n")
)
 (newline)
 (_display (to-str "                                  1969\n")
)
 (newline)
 (define qtr 0)
 (call/cc (lambda (break2)
 (letrec ((loop1 (lambda ()
 (if (< qtr 4)
 (begin (let ((mi 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< mi 3)
 (begin (_display (to-str (string-append (string-append "      " (list-ref months (+ (* qtr 3)
 mi)
)
)
 "           ")
)
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
 (set! mi (+ mi 1)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (_display (to-str "")
)
 (newline)
 (set! mi 0)
 (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< mi 3)
 (begin (let ((d 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< d 7)
 (begin (_display (to-str (string-append " " (list-ref days d)
)
)
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
 (set! d (+ d 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (_display (to-str "     ")
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
 (set! mi (+ mi 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (_display (to-str "")
)
 (newline)
 (let ((week 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< week 6)
 (begin (set! mi 0)
 (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< mi 3)
 (begin (let ((day 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< day 7)
 (begin (let ((m (+ (* qtr 3)
 mi)
)
)
 (begin (let ((val (+ (- (+ (* week 7)
 day)
 (list-ref start m)
)
 1)
)
)
 (begin (if (and (>= val 1)
 (<= val (list-ref daysInMonth m)
)
)
 (begin (let ((s (to-str val)
)
)
 (begin (if (equal? (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 1)
 (begin (set! s (string-append " " s)
)
)
 (quote ()
)
)
 (_display (to-str (string-append " " s)
)
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
)
)
)
 (begin (_display (to-str "   ")
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
)
)
 (set! day (+ day 1)
)
)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (_display (to-str "     ")
)
 (_display " ")
 (_display (to-str (if #f #t #f)
)
)
 (newline)
 (set! mi (+ mi 1)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (_display (to-str "")
)
 (newline)
 (set! week (+ week 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (_display (to-str "")
)
 (newline)
 (set! qtr (+ qtr 1)
)
)
)
)
)
 (loop1)
)
 (quote ()
)
)
)
)
)
 (loop1)
)
)
)
 (let ((end16 (now)
)
)
 (let ((dur17 (quotient (- end16 start15)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur17)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
