;; Generated on 2025-07-27 23:14 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define stx "\x02;")
(define etx "\x03;")
(define (contains s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 #t)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #f)
)
)
)
)
)
(define (sortStrings xs)
 (call/cc (lambda (ret4)
 (let ((arr xs)
)
 (begin (let ((n (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i n)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (_lt j (- n 1)
)
 (begin (if (string>? (list-ref arr j)
 (list-ref arr (+ j 1)
)
)
 (begin (let ((tmp (list-ref arr j)
)
)
 (begin (list-set! arr j (list-ref arr (+ j 1)
)
)
 (list-set! arr (+ j 1)
 tmp)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 arr)
)
)
)
)
)
)
)
)
)
(define (bwt s)
 (call/cc (lambda (ret9)
 (begin (if (or (contains s stx)
 (contains s etx)
)
 (begin (ret9 (alist->hash-table (_list (cons "err" #t)
 (cons "res" "")
)
)
)
)
 (quote ()
)
)
 (set! s (string-append (string-append stx s)
 etx)
)
 (let ((le (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (begin (let ((table (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i le)
 (begin (let ((rot (string-append (substring s i le)
 (substring s 0 i)
)
)
)
 (begin (set! table (append table (_list rot)
)
)
 (set! i (+ i 1)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! table (sortStrings table)
)
 (let ((last "")
)
 (begin (set! i 0)
 (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i le)
 (begin (set! last (string-append last (substring (list-ref table i)
 (- le 1)
 le)
)
)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (ret9 (alist->hash-table (_list (cons "err" #f)
 (cons "res" last)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (ibwt r)
 (call/cc (lambda (ret14)
 (let ((le (cond ((string? r)
 (string-length r)
)
 ((hash-table? r)
 (hash-table-size r)
)
 (else (length r)
)
)
)
)
 (begin (let ((table (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< i le)
 (begin (set! table (append table (_list "")
)
)
 (set! i (+ i 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (let ((n 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< n le)
 (begin (set! i 0)
 (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< i le)
 (begin (list-set! table i (string-append (substring r i (+ i 1)
)
 (list-ref table i)
)
)
 (set! i (+ i 1)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (set! table (sortStrings table)
)
 (set! n (+ n 1)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (set! i 0)
 (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< i le)
 (begin (if (string=? (substring (list-ref table i)
 (- le 1)
 le)
 etx)
 (begin (ret14 (substring (list-ref table i)
 1 (- le 1)
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (ret14 "")
)
)
)
)
)
)
)
)
)
)
)
(define (makePrintable s)
 (call/cc (lambda (ret23)
 (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (string=? ch stx)
 (begin (set! out (string-append out "^")
)
)
 (if (string=? ch etx)
 (begin (set! out (string-append out "|")
)
)
 (begin (set! out (string-append out ch)
)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
 (ret23 out)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret26)
 (let ((examples (_list "banana" "appellee" "dogwood" "TO BE OR NOT TO BE OR WANT TO BE OR NOT?" "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES" "\x02;ABC\x03;")
)
)
 (begin (call/cc (lambda (break28)
 (letrec ((loop27 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((t (car xs)
)
)
 (begin (_display (to-str (makePrintable t)
)
)
 (newline)
 (let ((res (bwt t)
)
)
 (begin (if (cond ((string? res)
 (substring res "err" (+ "err" 1)
)
)
 ((hash-table? res)
 (hash-table-ref res "err")
)
 (else (list-ref res "err")
)
)
 (begin (_display (to-str " --> ERROR: String can't contain STX or ETX")
)
 (newline)
 (_display (to-str " -->")
)
 (newline)
)
 (begin (let ((enc (to-str (cond ((string? res)
 (substring res "res" (+ "res" 1)
)
)
 ((hash-table? res)
 (hash-table-ref res "res")
)
 (else (list-ref res "res")
)
)
)
)
)
 (begin (_display (to-str (string-append " --> " (makePrintable enc)
)
)
)
 (newline)
 (let ((r (ibwt enc)
)
)
 (begin (_display (to-str (string-append " --> " r)
)
)
 (newline)
)
)
)
)
)
)
 (_display (to-str "")
)
 (newline)
)
)
)
)
 (loop27 (cdr xs)
)
)
)
)
)
)
 (loop27 examples)
)
)
)
)
)
)
)
)
(main)
