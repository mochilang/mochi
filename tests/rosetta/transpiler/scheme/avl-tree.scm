;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start28 (now)
)
)
 (begin (define (Node data)
 (call/cc (lambda (ret1)
 (ret1 (alist->hash-table (_list (cons "Data" data)
 (cons "Balance" 0)
 (cons "Link" (_list (quote ()
)
 (quote ()
)
)
)
)
)
)
)
)
)
 (define (getLink n dir)
 (call/cc (lambda (ret2)
 (ret2 (list-ref (hash-table-ref/default n "Link" (quote ()
)
)
 dir)
)
)
)
)
 (define (setLink n dir v)
 (call/cc (lambda (ret3)
 (let ((links (hash-table-ref/default n "Link" (quote ()
)
)
)
)
 (begin (list-set! links dir v)
 (hash-table-set! n "Link" links)
)
)
)
)
)
 (define (opp dir)
 (call/cc (lambda (ret4)
 (ret4 (- 1 dir)
)
)
)
)
 (define (single root dir)
 (call/cc (lambda (ret5)
 (let ((tmp (getLink root (opp dir)
)
)
)
 (begin (setLink root (opp dir)
 (getLink tmp dir)
)
 (setLink tmp dir root)
 (ret5 tmp)
)
)
)
)
)
 (define (double root dir)
 (call/cc (lambda (ret6)
 (let ((tmp (getLink (getLink root (opp dir)
)
 dir)
)
)
 (begin (setLink (getLink root (opp dir)
)
 dir (getLink tmp (opp dir)
)
)
 (setLink tmp (opp dir)
 (getLink root (opp dir)
)
)
 (setLink root (opp dir)
 tmp)
 (set! tmp (getLink root (opp dir)
)
)
 (setLink root (opp dir)
 (getLink tmp dir)
)
 (setLink tmp dir root)
 (ret6 tmp)
)
)
)
)
)
 (define (adjustBalance root dir bal)
 (call/cc (lambda (ret7)
 (let ((n (getLink root dir)
)
)
 (begin (let ((nn (getLink n (opp dir)
)
)
)
 (begin (if (equal? (hash-table-ref/default nn "Balance" (quote ()
)
)
 0)
 (begin (hash-table-set! root "Balance" 0)
 (hash-table-set! n "Balance" 0)
)
 (if (equal? (hash-table-ref/default nn "Balance" (quote ()
)
)
 bal)
 (begin (hash-table-set! root "Balance" (- bal)
)
 (hash-table-set! n "Balance" 0)
)
 (begin (hash-table-set! root "Balance" 0)
 (hash-table-set! n "Balance" bal)
)
)
)
 (hash-table-set! nn "Balance" 0)
)
)
)
)
)
)
)
 (define (insertBalance root dir)
 (call/cc (lambda (ret8)
 (let ((n (getLink root dir)
)
)
 (begin (let ((bal (- (* 2 dir)
 1)
)
)
 (begin (if (equal? (hash-table-ref/default n "Balance" (quote ()
)
)
 bal)
 (begin (hash-table-set! root "Balance" 0)
 (hash-table-set! n "Balance" 0)
 (ret8 (single root (opp dir)
)
)
)
 (quote ()
)
)
 (adjustBalance root dir bal)
 (ret8 (double root (opp dir)
)
)
)
)
)
)
)
)
)
 (define (insertR root data)
 (call/cc (lambda (ret9)
 (begin (if (equal? root (quote ()
)
)
 (begin (ret9 (alist->hash-table (_list (cons "node" (Node data)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (let ((node root)
)
 (begin (let ((dir 0)
)
 (begin (if (< (let ((v10 (hash-table-ref/default node "Data" (quote ()
)
)
)
)
 (cond ((string? v10)
 (inexact->exact (string->number v10)
)
)
 ((boolean? v10)
 (if v10 1 0)
)
 (else (inexact->exact v10)
)
)
)
 data)
 (begin (set! dir 1)
)
 (quote ()
)
)
 (let ((r (insertR (getLink node dir)
 data)
)
)
 (begin (setLink node dir (cond ((string? r)
 (substring r "node" (+ "node" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "node")
)
 (else (list-ref r "node")
)
)
)
 (if (cond ((string? r)
 (substring r "done" (+ "done" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "done")
)
 (else (list-ref r "done")
)
)
 (begin (ret9 (alist->hash-table (_list (cons "node" node)
 (cons "done" #t)
)
)
)
)
 (quote ()
)
)
 (hash-table-set! node "Balance" (+ (let ((v11 (hash-table-ref/default node "Balance" (quote ()
)
)
)
)
 (cond ((string? v11)
 (inexact->exact (string->number v11)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact v11)
)
)
)
 (- (* 2 dir)
 1)
)
)
 (if (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 0)
 (begin (ret9 (alist->hash-table (_list (cons "node" node)
 (cons "done" #t)
)
)
)
)
 (quote ()
)
)
 (if (or (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 1)
 (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 (- 1)
)
)
 (begin (ret9 (alist->hash-table (_list (cons "node" node)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (ret9 (alist->hash-table (_list (cons "node" (insertBalance node dir)
)
 (cons "done" #t)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (Insert tree data)
 (call/cc (lambda (ret12)
 (let ((r (insertR tree data)
)
)
 (begin (ret12 (cond ((string? r)
 (substring r "node" (+ "node" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "node")
)
 (else (list-ref r "node")
)
)
)
)
)
)
)
)
 (define (removeBalance root dir)
 (call/cc (lambda (ret13)
 (let ((n (getLink root (opp dir)
)
)
)
 (begin (let ((bal (- (* 2 dir)
 1)
)
)
 (begin (if (equal? (hash-table-ref/default n "Balance" (quote ()
)
)
 (- bal)
)
 (begin (hash-table-set! root "Balance" 0)
 (hash-table-set! n "Balance" 0)
 (ret13 (alist->hash-table (_list (cons "node" (single root dir)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (if (equal? (hash-table-ref/default n "Balance" (quote ()
)
)
 bal)
 (begin (adjustBalance root (opp dir)
 (- bal)
)
 (ret13 (alist->hash-table (_list (cons "node" (double root dir)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (hash-table-set! root "Balance" (- bal)
)
 (hash-table-set! n "Balance" bal)
 (ret13 (alist->hash-table (_list (cons "node" (single root dir)
)
 (cons "done" #t)
)
)
)
)
)
)
)
)
)
)
 (define (removeR root data)
 (call/cc (lambda (ret14)
 (begin (if (equal? root (quote ()
)
)
 (begin (ret14 (alist->hash-table (_list (cons "node" (quote ()
)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (let ((node root)
)
 (begin (if (equal? (let ((v15 (hash-table-ref/default node "Data" (quote ()
)
)
)
)
 (cond ((string? v15)
 (inexact->exact (string->number v15)
)
)
 ((boolean? v15)
 (if v15 1 0)
)
 (else (inexact->exact v15)
)
)
)
 data)
 (begin (if (equal? (getLink node 0)
 (quote ()
)
)
 (begin (ret14 (alist->hash-table (_list (cons "node" (getLink node 1)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (if (equal? (getLink node 1)
 (quote ()
)
)
 (begin (ret14 (alist->hash-table (_list (cons "node" (getLink node 0)
)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (let ((heir (getLink node 0)
)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (not (equal? (getLink heir 1)
 (quote ()
)
)
)
 (begin (set! heir (getLink heir 1)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (hash-table-set! node "Data" (cond ((string? heir)
 (substring heir "Data" (+ "Data" 1)
)
)
 ((hash-table? heir)
 (hash-table-ref heir "Data")
)
 (else (list-ref heir "Data")
)
)
)
 (set! data (let ((v18 (cond ((string? heir)
 (substring heir "Data" (+ "Data" 1)
)
)
 ((hash-table? heir)
 (hash-table-ref heir "Data")
)
 (else (list-ref heir "Data")
)
)
)
)
 (cond ((string? v18)
 (inexact->exact (string->number v18)
)
)
 ((boolean? v18)
 (if v18 1 0)
)
 (else (inexact->exact v18)
)
)
)
)
)
)
)
 (quote ()
)
)
 (let ((dir 0)
)
 (begin (if (< (let ((v19 (hash-table-ref/default node "Data" (quote ()
)
)
)
)
 (cond ((string? v19)
 (inexact->exact (string->number v19)
)
)
 ((boolean? v19)
 (if v19 1 0)
)
 (else (inexact->exact v19)
)
)
)
 data)
 (begin (set! dir 1)
)
 (quote ()
)
)
 (let ((r (removeR (getLink node dir)
 data)
)
)
 (begin (setLink node dir (cond ((string? r)
 (substring r "node" (+ "node" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "node")
)
 (else (list-ref r "node")
)
)
)
 (if (cond ((string? r)
 (substring r "done" (+ "done" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "done")
)
 (else (list-ref r "done")
)
)
 (begin (ret14 (alist->hash-table (_list (cons "node" node)
 (cons "done" #t)
)
)
)
)
 (quote ()
)
)
 (hash-table-set! node "Balance" (- (+ (let ((v20 (hash-table-ref/default node "Balance" (quote ()
)
)
)
)
 (cond ((string? v20)
 (inexact->exact (string->number v20)
)
)
 ((boolean? v20)
 (if v20 1 0)
)
 (else (inexact->exact v20)
)
)
)
 1)
 (* 2 dir)
)
)
 (if (or (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 1)
 (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 (- 1)
)
)
 (begin (ret14 (alist->hash-table (_list (cons "node" node)
 (cons "done" #t)
)
)
)
)
 (quote ()
)
)
 (if (equal? (hash-table-ref/default node "Balance" (quote ()
)
)
 0)
 (begin (ret14 (alist->hash-table (_list (cons "node" node)
 (cons "done" #f)
)
)
)
)
 (quote ()
)
)
 (ret14 (removeBalance node dir)
)
)
)
)
)
)
)
)
)
)
)
 (define (Remove tree data)
 (call/cc (lambda (ret21)
 (let ((r (removeR tree data)
)
)
 (begin (ret21 (cond ((string? r)
 (substring r "node" (+ "node" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "node")
)
 (else (list-ref r "node")
)
)
)
)
)
)
)
)
 (define (indentStr n)
 (call/cc (lambda (ret22)
 (let ((s "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< i n)
 (begin (set! s (string-append s " ")
)
 (set! i (+ i 1)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (ret22 s)
)
)
)
)
)
)
)
 (define (dumpNode node indent comma)
 (call/cc (lambda (ret25)
 (let ((sp (indentStr indent)
)
)
 (begin (if (equal? node (quote ()
)
)
 (begin (let ((line (string-append sp "null")
)
)
 (begin (if comma (begin (set! line (string-append line ",")
)
)
 (quote ()
)
)
 (display (to-str line)
)
 (newline)
)
)
)
 (begin (display (to-str (string-append sp "{")
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (indentStr (+ indent 3)
)
 "\"Data\": ")
 (to-str (cond ((string? node)
 (substring node "Data" (+ "Data" 1)
)
)
 ((hash-table? node)
 (hash-table-ref node "Data")
)
 (else (list-ref node "Data")
)
)
)
)
 ",")
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (indentStr (+ indent 3)
)
 "\"Balance\": ")
 (to-str (cond ((string? node)
 (substring node "Balance" (+ "Balance" 1)
)
)
 ((hash-table? node)
 (hash-table-ref node "Balance")
)
 (else (list-ref node "Balance")
)
)
)
)
 ",")
)
)
 (newline)
 (display (to-str (string-append (indentStr (+ indent 3)
)
 "\"Link\": [")
)
)
 (newline)
 (dumpNode (getLink node 0)
 (+ indent 6)
 #t)
 (dumpNode (getLink node 1)
 (+ indent 6)
 #f)
 (display (to-str (string-append (indentStr (+ indent 3)
)
 "]")
)
)
 (newline)
 (let ((end (string-append sp "}")
)
)
 (begin (if comma (begin (set! end (string-append end ",")
)
)
 (quote ()
)
)
 (display (to-str end)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (dump node indent)
 (call/cc (lambda (ret26)
 (dumpNode node indent #f)
)
)
)
 (define (main)
 (call/cc (lambda (ret27)
 (let ((tree (quote ()
)
)
)
 (begin (display (to-str "Empty tree:")
)
 (newline)
 (dump tree 0)
 (display (to-str "")
)
 (newline)
 (display (to-str "Insert test:")
)
 (newline)
 (set! tree (Insert tree 3)
)
 (set! tree (Insert tree 1)
)
 (set! tree (Insert tree 4)
)
 (set! tree (Insert tree 1)
)
 (set! tree (Insert tree 5)
)
 (dump tree 0)
 (display (to-str "")
)
 (newline)
 (display (to-str "Remove test:")
)
 (newline)
 (set! tree (Remove tree 3)
)
 (set! tree (Remove tree 1)
)
 (let ((t tree)
)
 (begin (hash-table-set! t "Balance" 0)
 (set! tree t)
 (dump tree 0)
)
)
)
)
)
)
)
 (main)
 (let ((end29 (now)
)
)
 (let ((dur30 (quotient (- end29 start28)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur30)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
