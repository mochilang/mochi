;; Generated on 2025-07-27 23:58 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define width 81)
(define height 5)
(define lines (_list)
)
(call/cc (lambda (break2)
 (letrec ((loop1 (lambda (i)
 (if (< i height)
 (begin (begin (let ((row "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< j width)
 (begin (set! row (string-append row "*")
)
 (set! j (+ j 1)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (set! lines (append lines (_list row)
)
)
)
)
)
)
)
 (loop1 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop1 0)
)
)
)
(define (setChar s idx ch)
 (call/cc (lambda (ret5)
 (ret5 (string-append (string-append (substring s 0 idx)
 ch)
 (substring s (+ idx 1)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
)
)
)
(define stack (_list (alist->hash-table (_list (cons "start" 0)
 (cons "len" width)
 (cons "index" 1)
)
)
)
)
(call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (> (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 0)
 (begin (let ((frame (list-ref stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 1)
)
)
)
 (begin (set! stack (take (drop stack 0)
 (- (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 1)
 0)
)
)
 (let ((start (hash-table-ref/default frame "start" (quote ()
)
)
)
)
 (begin (let ((lenSeg (hash-table-ref/default frame "len" (quote ()
)
)
)
)
 (begin (let ((index (hash-table-ref/default frame "index" (quote ()
)
)
)
)
 (begin (let ((seg (let ((v8 (quotient lenSeg 3)
)
)
 (cond ((string? v8)
 (exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (exact (floor v8)
)
)
)
)
)
)
 (begin (if (equal? seg 0)
 (begin (loop6)
)
 (quote ()
)
)
 (let ((i index)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i height)
 (begin (let ((j (+ start seg)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (_lt j (_add start (* 2 seg)
)
)
 (begin (list-set! lines i (setChar (list-ref lines i)
 j " ")
)
 (set! j (+ j 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (set! stack (append stack (_list (alist->hash-table (_list (cons "start" start)
 (cons "len" seg)
 (cons "index" (+ index 1)
)
)
)
)
)
)
 (set! stack (append stack (_list (alist->hash-table (_list (cons "start" (_add start (* seg 2)
)
)
 (cons "len" seg)
 (cons "index" (+ index 1)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
(call/cc (lambda (break14)
 (letrec ((loop13 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((line (car xs)
)
)
 (begin (_display (to-str line)
)
 (newline)
)
)
 (loop13 (cdr xs)
)
)
)
)
)
)
 (loop13 lines)
)
)
)
