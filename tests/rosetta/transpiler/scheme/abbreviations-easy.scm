;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fields s)
 (call/cc (lambda (ret1)
 (let ((words (list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (string-length s)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (or (string=? ch " ")
 (string=? ch "\n")
)
 (string=? ch "\t")
)
 (begin (if (> (string-length cur)
 0)
 (begin (set! words (append words (list cur)
)
)
 (set! cur "")
)
 (quote nil)
)
)
 (begin (set! cur (string-append cur ch)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (if (> (string-length cur)
 0)
 (begin (set! words (append words (list cur)
)
)
)
 (quote nil)
)
 (ret1 words)
)
)
)
)
)
)
)
)
)
(define (padRight s width)
 (call/cc (lambda (ret4)
 (let ((out s)
)
 (begin (let ((i (string-length s)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i width)
 (begin (set! out (string-append out " ")
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 out)
)
)
)
)
)
)
)
(define (join xs sep)
 (call/cc (lambda (ret7)
 (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (length xs)
)
 (begin (if (> i 0)
 (begin (set! res (string-append res sep)
)
)
 (quote nil)
)
 (set! res (string-append res (list-ref xs i)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
 (ret7 res)
)
)
)
)
)
)
)
(define (validate commands words mins)
 (call/cc (lambda (ret10)
 (let ((results (list)
)
)
 (begin (if (equal? (length words)
 0)
 (begin (ret10 results)
)
 (quote nil)
)
 (let ((wi 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< wi (length words)
)
 (begin (let ((w (list-ref words wi)
)
)
 (begin (let ((found #f)
)
 (begin (let ((wlen (string-length w)
)
)
 (begin (let ((ci 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< ci (length commands)
)
 (begin (let ((cmd (list-ref commands ci)
)
)
 (begin (if (and (and (not (equal? (list-ref mins ci)
 0)
)
 (>= wlen (list-ref mins ci)
)
)
 (<= wlen (string-length cmd)
)
)
 (begin (let ((c (upper cmd)
)
)
 (begin (let ((ww (upper w)
)
)
 (begin (if (string=? (substring c 0 wlen)
 ww)
 (begin (set! results (append results (list c)
)
)
 (set! found #t)
 (break14 (quote nil)
)
)
 (quote nil)
)
)
)
)
)
)
 (quote nil)
)
 (set! ci (+ ci 1)
)
)
)
 (loop13)
)
 (quote nil)
)
)
)
)
 (loop13)
)
)
)
 (if (not found)
 (begin (set! results (append results (list "*error*")
)
)
)
 (quote nil)
)
 (set! wi (+ wi 1)
)
)
)
)
)
)
)
)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
 (ret10 results)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret15)
 (let ((table (string-append (string-append (string-append (string-append (string-append (string-append "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ")
 "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ")
 " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ")
 "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ")
 "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ")
 "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
)
)
 (begin (let ((commands (fields table)
)
)
 (begin (let ((mins (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i (length commands)
)
 (begin (let ((count 0)
)
 (begin (let ((j 0)
)
 (begin (let ((cmd (list-ref commands i)
)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< j (string-length cmd)
)
 (begin (let ((ch (substring cmd j (+ j 1)
)
)
)
 (begin (if (and (string>=? ch "A")
 (string<=? ch "Z")
)
 (begin (set! count (+ count 1)
)
)
 (quote nil)
)
 (set! j (+ j 1)
)
)
)
 (loop18)
)
 (quote nil)
)
)
)
)
 (loop18)
)
)
)
 (set! mins (append mins (list count)
)
)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop16)
)
 (quote nil)
)
)
)
)
 (loop16)
)
)
)
 (let ((sentence "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin")
)
 (begin (let ((words (fields sentence)
)
)
 (begin (let ((results (validate commands words mins)
)
)
 (begin (let ((out1 "user words:  ")
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< k (length words)
)
 (begin (set! out1 (string-append (string-append out1 (padRight (list-ref words k)
 (string-length (list-ref results k)
)
)
)
 " ")
)
 (set! k (+ k 1)
)
 (loop20)
)
 (quote nil)
)
)
)
)
 (loop20)
)
)
)
 (display (to-str out1)
)
 (newline)
 (display (to-str (string-append "full words:  " (join results " ")
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
