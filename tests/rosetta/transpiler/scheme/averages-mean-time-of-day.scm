;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define PI 3.141592653589793)
(define (sinApprox x)
 (call/cc (lambda (ret1)
 (let ((term x)
)
 (begin (let ((sum x)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= n 8)
 (begin (let ((denom (* (* 2 n)
 (+ (* 2 n)
 1)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
)
)
(define (cosApprox x)
 (call/cc (lambda (ret4)
 (let ((term 1.0)
)
 (begin (let ((sum 1.0)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= n 8)
 (begin (let ((denom (* (- (* 2 n)
 1)
 (* 2 n)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 sum)
)
)
)
)
)
)
)
)
)
(define (atanApprox x)
 (call/cc (lambda (ret7)
 (begin (if (> x 1.0)
 (begin (ret7 (- (/ PI 2.0)
 (/ x (+ (* x x)
 0.28)
)
)
)
)
 (quote ()
)
)
 (if (< x (- 1.0)
)
 (begin (ret7 (- (/ (- PI)
 2.0)
 (/ x (+ (* x x)
 0.28)
)
)
)
)
 (quote ()
)
)
 (ret7 (/ x (+ 1.0 (* (* 0.28 x)
 x)
)
)
)
)
)
)
)
(define (atan2Approx y x)
 (call/cc (lambda (ret8)
 (begin (if (> x 0.0)
 (begin (ret8 (atanApprox (/ y x)
)
)
)
 (quote ()
)
)
 (if (< x 0.0)
 (begin (if (>= y 0.0)
 (begin (ret8 (+ (atanApprox (/ y x)
)
 PI)
)
)
 (quote ()
)
)
 (ret8 (- (atanApprox (/ y x)
)
 PI)
)
)
 (quote ()
)
)
 (if (> y 0.0)
 (begin (ret8 (/ PI 2.0)
)
)
 (quote ()
)
)
 (if (< y 0.0)
 (begin (ret8 (/ (- PI)
 2.0)
)
)
 (quote ()
)
)
 (ret8 0.0)
)
)
)
)
(define (digit ch)
 (call/cc (lambda (ret9)
 (let ((digits "0123456789")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
)
 (begin (if (string=? (substring digits i (+ i 1)
)
 ch)
 (begin (ret9 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 0)
)
)
)
)
)
)
)
(define (parseTwo s idx)
 (call/cc (lambda (ret12)
 (ret12 (+ (* (digit (substring s idx (+ idx 1)
)
)
 10)
 (digit (substring s (+ idx 1)
 (+ idx 2)
)
)
)
)
)
)
)
(define (parseSec s)
 (call/cc (lambda (ret13)
 (let ((h (parseTwo s 0)
)
)
 (begin (let ((m (parseTwo s 3)
)
)
 (begin (let ((sec (parseTwo s 6)
)
)
 (begin (let ((tmp (+ (* (+ (* h 60)
 m)
 60)
 sec)
)
)
 (begin (ret13 tmp)
)
)
)
)
)
)
)
)
)
)
)
(define (pad n)
 (call/cc (lambda (ret14)
 (begin (if (< n 10)
 (begin (ret14 (string-append "0" (to-str n)
)
)
)
 (quote ()
)
)
 (ret14 (to-str n)
)
)
)
)
)
(define (meanTime times)
 (call/cc (lambda (ret15)
 (let ((ssum 0.0)
)
 (begin (let ((csum 0.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i (cond ((string? times)
 (string-length times)
)
 ((hash-table? times)
 (hash-table-size times)
)
 (else (length times)
)
)
)
 (begin (let ((sec (parseSec (list-ref times i)
)
)
)
 (begin (let ((ang (/ (* (* sec 2.0)
 PI)
 86400.0)
)
)
 (begin (set! ssum (+ ssum (sinApprox ang)
)
)
 (set! csum (+ csum (cosApprox ang)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((theta (atan2Approx ssum csum)
)
)
 (begin (let ((frac (/ theta (* 2.0 PI)
)
)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< frac 0.0)
 (begin (set! frac (+ frac 1.0)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (let ((total (* frac 86400.0)
)
)
 (begin (let ((si (let ((v20 total)
)
 (cond ((string? v20)
 (inexact->exact (string->number v20)
)
)
 ((boolean? v20)
 (if v20 1 0)
)
 (else (inexact->exact v20)
)
)
)
)
)
 (begin (let ((h (let ((v21 (quotient si 3600)
)
)
 (cond ((string? v21)
 (inexact->exact (string->number v21)
)
)
 ((boolean? v21)
 (if v21 1 0)
)
 (else (inexact->exact v21)
)
)
)
)
)
 (begin (let ((m (let ((v22 (quotient (modulo si 3600)
 60)
)
)
 (cond ((string? v22)
 (inexact->exact (string->number v22)
)
)
 ((boolean? v22)
 (if v22 1 0)
)
 (else (inexact->exact v22)
)
)
)
)
)
 (begin (let ((s (let ((v23 (modulo si 60)
)
)
 (cond ((string? v23)
 (inexact->exact (string->number v23)
)
)
 ((boolean? v23)
 (if v23 1 0)
)
 (else (inexact->exact v23)
)
)
)
)
)
 (begin (ret15 (string-append (string-append (string-append (string-append (pad h)
 ":")
 (pad m)
)
 ":")
 (pad s)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret24)
 (let ((inputs (list "23:00:17" "23:40:20" "00:12:45" "00:17:19")
)
)
 (begin (display (to-str (meanTime inputs)
)
)
 (newline)
)
)
)
)
)
(main)
