;; Generated on 2025-07-30 21:05 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start7 (now)
)
)
 (begin (define (qsel a k)
 (call/cc (lambda (ret1)
 (let ((arr a)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
 1)
 (begin (let ((px (modulo (now)
 (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
)
)
 (begin (let ((pv (list-ref arr px)
)
)
 (begin (let ((last (- (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
 1)
)
)
 (begin (let ((tmp (list-ref arr px)
)
)
 (begin (list-set! arr px (list-ref arr last)
)
 (list-set! arr last tmp)
 (set! px 0)
 (let ((i 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< i last)
 (begin (let ((v (list-ref arr i)
)
)
 (begin (if (< v pv)
 (begin (let ((t (list-ref arr px)
)
)
 (begin (list-set! arr px (list-ref arr i)
)
 (list-set! arr i t)
 (set! px (+ px 1)
)
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (list-set! arr px pv)
 (if (equal? px k)
 (begin (ret1 pv)
)
 (quote ()
)
)
 (if (< k px)
 (begin (set! arr (take (drop arr 0)
 (- px 0)
)
)
)
 (begin (set! arr (take (drop arr (+ px 1)
)
 (- (length arr)
 (+ px 1)
)
)
)
 (set! k (- k (+ px 1)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (list-ref arr 0)
)
)
)
)
)
)
 (define (fivenum a)
 (call/cc (lambda (ret6)
 (let ((last (- (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 1)
)
)
 (begin (let ((m (quotient last 2)
)
)
 (begin (let ((n5 (_list)
)
)
 (begin (set! n5 (append n5 (_list (qsel (take (drop a 0)
 (- m 0)
)
 0)
)
)
)
 (set! n5 (append n5 (_list (qsel (take (drop a 0)
 (- m 0)
)
 (quotient (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 4)
)
)
)
)
 (set! n5 (append n5 (_list (qsel a m)
)
)
)
 (let ((arr2 (take (drop a m)
 (- (length a)
 m)
)
)
)
 (begin (let ((q3 (- (- last m)
 (quotient (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 4)
)
)
)
 (begin (set! n5 (append n5 (_list (qsel arr2 q3)
)
)
)
 (set! arr2 (take (drop arr2 q3)
 (- (length arr2)
 q3)
)
)
 (set! n5 (append n5 (_list (qsel arr2 (- (cond ((string? arr2)
 (string-length arr2)
)
 ((hash-table? arr2)
 (hash-table-size arr2)
)
 (else (length arr2)
)
)
 1)
)
)
)
)
 (ret6 n5)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define x1 (_list 36.0 40.0 7.0 39.0 41.0 15.0)
)
 (define x2 (_list 15.0 6.0 42.0 41.0 7.0 36.0 49.0 40.0 39.0 47.0 43.0)
)
 (define x3 (_list 0.14082834 0.0974879 1.73131507 0.87636009 (- 1.95059594)
 0.73438555 (- 0.03035726)
 1.4667597 (- 0.74621349)
 (- 0.72588772)
 0.6390516 0.61501527 (- 0.9898378)
 (- 1.00447874)
 (- 0.62759469)
 0.66206163 1.04312009 (- 0.10305385)
 0.75775634 0.32566578)
)
 (_display (to-str (to-str (fivenum x1)
)
)
)
 (newline)
 (_display (to-str (to-str (fivenum x2)
)
)
)
 (newline)
 (_display (to-str (to-str (fivenum x3)
)
)
)
 (newline)
 (let ((end8 (now)
)
)
 (let ((dur9 (quotient (- end8 start7)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur9)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
