;; Generated on 2025-07-27 23:58 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (trimSpace s)
 (call/cc (lambda (ret1)
 (let ((start 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (and (< start (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (string=? (substring s start (+ start 1)
)
 " ")
)
 (begin (set! start (+ start 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (let ((end (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (and (> end start)
 (string=? (substring s (- end 1)
 end)
 " ")
)
 (begin (set! end (- end 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (ret1 (substring s start end)
)
)
)
)
)
)
)
)
(define (isUpper ch)
 (call/cc (lambda (ret6)
 (ret6 (and (string>=? ch "A")
 (string<=? ch "Z")
)
)
)
)
)
(define (padLeft s w)
 (call/cc (lambda (ret7)
 (let ((res "")
)
 (begin (let ((n (- w (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (> n 0)
 (begin (set! res (string-append res " ")
)
 (set! n (- n 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 (string-append res s)
)
)
)
)
)
)
)
)
(define (snakeToCamel s)
 (call/cc (lambda (ret10)
 (begin (set! s (trimSpace s)
)
 (let ((out "")
)
 (begin (let ((up #f)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (or (or (string=? ch "_")
 (string=? ch "-")
)
 (string=? ch " ")
)
 (string=? ch ".")
)
 (begin (set! up #t)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
 (if (equal? i 0)
 (begin (set! out (string-append out (lower ch)
)
)
 (set! up #f)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
 (if up (begin (set! out (string-append out (upper ch)
)
)
 (set! up #f)
)
 (begin (set! out (string-append out ch)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 out)
)
)
)
)
)
)
)
)
)
)
(define (camelToSnake s)
 (call/cc (lambda (ret13)
 (begin (set! s (trimSpace s)
)
 (let ((out "")
)
 (begin (let ((prevUnd #f)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (or (string=? ch " ")
 (string=? ch "-")
)
 (string=? ch ".")
)
 (begin (if (and (not prevUnd)
 (> (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
 0)
)
 (begin (set! out (string-append out "_")
)
 (set! prevUnd #t)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop14)
)
 (quote ()
)
)
 (if (string=? ch "_")
 (begin (if (and (not prevUnd)
 (> (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
 0)
)
 (begin (set! out (string-append out "_")
)
 (set! prevUnd #t)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop14)
)
 (quote ()
)
)
 (if (isUpper ch)
 (begin (if (and (> i 0)
 (not prevUnd)
)
 (begin (set! out (string-append out "_")
)
)
 (quote ()
)
)
 (set! out (string-append out (lower ch)
)
)
 (set! prevUnd #f)
)
 (begin (set! out (string-append out (lower ch)
)
)
 (set! prevUnd #f)
)
)
 (set! i (+ i 1)
)
)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (let ((start 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (and (< start (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
)
 (string=? (substring out start (+ start 1)
)
 "_")
)
 (begin (set! start (+ start 1)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((end (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (and (> end start)
 (string=? (substring out (- end 1)
 end)
 "_")
)
 (begin (set! end (- end 1)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (set! out (substring out start end)
)
 (let ((res "")
)
 (begin (let ((j 0)
)
 (begin (let ((lastUnd #f)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< j (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
)
 (begin (let ((c (substring out j (+ j 1)
)
)
)
 (begin (if (string=? c "_")
 (begin (if (not lastUnd)
 (begin (set! res (string-append res c)
)
)
 (quote ()
)
)
 (set! lastUnd #t)
)
 (begin (set! res (string-append res c)
)
 (set! lastUnd #f)
)
)
 (set! j (+ j 1)
)
)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (ret13 res)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret22)
 (let ((samples (_list "snakeCase" "snake_case" "snake-case" "snake case" "snake CASE" "snake.case" "variable_10_case" "variable10Case" "É›rgo rE tHis" "hurry-up-joe!" "c://my-docs/happy_Flag-Day/12.doc" " spaces ")
)
)
 (begin (_display (to-str "=== To snake_case ===")
)
 (newline)
 (call/cc (lambda (break24)
 (letrec ((loop23 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((s (car xs)
)
)
 (begin (_display (to-str (string-append (string-append (padLeft s 34)
 " => ")
 (camelToSnake s)
)
)
)
 (newline)
)
)
 (loop23 (cdr xs)
)
)
)
)
)
)
 (loop23 samples)
)
)
)
 (_display (to-str "")
)
 (newline)
 (_display (to-str "=== To camelCase ===")
)
 (newline)
 (call/cc (lambda (break26)
 (letrec ((loop25 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((s (car xs)
)
)
 (begin (_display (to-str (string-append (string-append (padLeft s 34)
 " => ")
 (snakeToCamel s)
)
)
)
 (newline)
)
)
 (loop25 (cdr xs)
)
)
)
)
)
)
 (loop25 samples)
)
)
)
)
)
)
)
)
(main)
