;; Generated on 2025-08-01 15:22 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (main)
 (call/cc (lambda (ret1)
 (let ((INF 1000000000)
)
 (begin (let ((n 4)
)
 (begin (let ((dist (_list)
)
)
 (begin (let ((next (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i n)
 (begin (let ((row (_list)
)
)
 (begin (let ((nrow (_list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< j n)
 (begin (if (equal? i j)
 (begin (set! row (append row (_list 0)
)
)
)
 (begin (set! row (append row (_list INF)
)
)
)
)
 (set! nrow (append nrow (_list (- 0 1)
)
)
)
 (set! j (+ j 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! dist (append dist (_list row)
)
)
 (set! next (append next (_list nrow)
)
)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (list-set! (list-ref dist 0)
 2 (- 2)
)
 (list-set! (list-ref next 0)
 2 2)
 (list-set! (list-ref dist 2)
 3 2)
 (list-set! (list-ref next 2)
 3 3)
 (list-set! (list-ref dist 3)
 1 (- 1)
)
 (list-set! (list-ref next 3)
 1 1)
 (list-set! (list-ref dist 1)
 0 4)
 (list-set! (list-ref next 1)
 0 0)
 (list-set! (list-ref dist 1)
 2 3)
 (list-set! (list-ref next 1)
 2 2)
 (let ((k 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< k n)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< j n)
 (begin (if (and (< (cond ((string? (list-ref dist i)
)
 (substring (list-ref dist i)
 k (+ k 1)
)
)
 ((hash-table? (list-ref dist i)
)
 (hash-table-ref (list-ref dist i)
 k)
)
 (else (list-ref (list-ref dist i)
 k)
)
)
 INF)
 (< (cond ((string? (list-ref dist k)
)
 (substring (list-ref dist k)
 j (+ j 1)
)
)
 ((hash-table? (list-ref dist k)
)
 (hash-table-ref (list-ref dist k)
 j)
)
 (else (list-ref (list-ref dist k)
 j)
)
)
 INF)
)
 (begin (let ((alt (+ (cond ((string? (list-ref dist i)
)
 (substring (list-ref dist i)
 k (+ k 1)
)
)
 ((hash-table? (list-ref dist i)
)
 (hash-table-ref (list-ref dist i)
 k)
)
 (else (list-ref (list-ref dist i)
 k)
)
)
 (cond ((string? (list-ref dist k)
)
 (substring (list-ref dist k)
 j (+ j 1)
)
)
 ((hash-table? (list-ref dist k)
)
 (hash-table-ref (list-ref dist k)
 j)
)
 (else (list-ref (list-ref dist k)
 j)
)
)
)
)
)
 (begin (if (< alt (cond ((string? (list-ref dist i)
)
 (substring (list-ref dist i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref dist i)
)
 (hash-table-ref (list-ref dist i)
 j)
)
 (else (list-ref (list-ref dist i)
 j)
)
)
)
 (begin (list-set! (list-ref dist i)
 j alt)
 (list-set! (list-ref next i)
 j (cond ((string? (list-ref next i)
)
 (substring (list-ref next i)
 k (+ k 1)
)
)
 ((hash-table? (list-ref next i)
)
 (hash-table-ref (list-ref next i)
 k)
)
 (else (list-ref (list-ref next i)
 k)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (set! k (+ k 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (define (path u v)
 (call/cc (lambda (ret12)
 (let ((ui (- u 1)
)
)
 (begin (let ((vi (- v 1)
)
)
 (begin (if (equal? (cond ((string? (list-ref next ui)
)
 (substring (list-ref next ui)
 vi (+ vi 1)
)
)
 ((hash-table? (list-ref next ui)
)
 (hash-table-ref (list-ref next ui)
 vi)
)
 (else (list-ref (list-ref next ui)
 vi)
)
)
 (- 0 1)
)
 (begin (ret12 (_list)
)
)
 (quote ()
)
)
 (let ((p (_list u)
)
)
 (begin (let ((cur ui)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (not (equal? cur vi)
)
 (begin (set! cur (cond ((string? (list-ref next cur)
)
 (substring (list-ref next cur)
 vi (+ vi 1)
)
)
 ((hash-table? (list-ref next cur)
)
 (hash-table-ref (list-ref next cur)
 vi)
)
 (else (list-ref (list-ref next cur)
 vi)
)
)
)
 (set! p (append p (_list (+ cur 1)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 p)
)
)
)
)
)
)
)
)
)
)
)
 (define (pathStr p)
 (call/cc (lambda (ret15)
 (let ((s "")
)
 (begin (let ((first #t)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< idx (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
)
 (begin (let ((x (list-ref p idx)
)
)
 (begin (if (not first)
 (begin (set! s (string-append s " -> ")
)
)
 (quote ()
)
)
 (set! s (string-append s (to-str x)
)
)
 (set! first #f)
 (set! idx (+ idx 1)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (ret15 s)
)
)
)
)
)
)
)
)
)
 (_display (to-str "pair\tdist\tpath")
)
 (newline)
 (let ((a 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< a n)
 (begin (let ((b 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< b n)
 (begin (if (not (equal? a b)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (to-str (+ a 1)
)
 " -> ")
 (to-str (+ b 1)
)
)
 "\t")
 (to-str (cond ((string? (list-ref dist a)
)
 (substring (list-ref dist a)
 b (+ b 1)
)
)
 ((hash-table? (list-ref dist a)
)
 (hash-table-ref (list-ref dist a)
 b)
)
 (else (list-ref (list-ref dist a)
 b)
)
)
)
)
 "\t")
 (pathStr (path (+ a 1)
 (+ b 1)
)
)
)
)
)
 (newline)
)
 (quote ()
)
)
 (set! b (+ b 1)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (set! a (+ a 1)
)
)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
