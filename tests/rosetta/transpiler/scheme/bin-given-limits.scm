;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start17 (now)
)
)
 (begin (define (getBins limits data)
 (call/cc (lambda (ret1)
 (let ((n (cond ((string? limits)
 (string-length limits)
)
 ((hash-table? limits)
 (hash-table-size limits)
)
 (else (length limits)
)
)
)
)
 (begin (let ((bins (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (_lt i (+ n 1)
)
 (begin (set! bins (append bins (_list 0)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< j (cond ((string? data)
 (string-length data)
)
 ((hash-table? data)
 (hash-table-size data)
)
 (else (length data)
)
)
)
 (begin (let ((d (list-ref data j)
)
)
 (begin (let ((index 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< index (cond ((string? limits)
 (string-length limits)
)
 ((hash-table? limits)
 (hash-table-size limits)
)
 (else (length limits)
)
)
)
 (begin (if (< d (list-ref limits index)
)
 (begin (break7 (quote ()
)
)
)
 (quote ()
)
)
 (if (equal? d (list-ref limits index)
)
 (begin (set! index (+ index 1)
)
 (break7 (quote ()
)
)
)
 (quote ()
)
)
 (set! index (+ index 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (list-set! bins index (+ (list-ref bins index)
 1)
)
 (set! j (+ j 1)
)
)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (ret1 bins)
)
)
)
)
)
)
)
)
)
)
)
 (define (padLeft n width)
 (call/cc (lambda (ret8)
 (let ((s (to-str n)
)
)
 (begin (let ((pad (- width (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i pad)
 (begin (set! out (string-append out " ")
)
 (set! i (+ i 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (ret8 (string-append out s)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (printBins limits bins)
 (call/cc (lambda (ret11)
 (let ((n (cond ((string? limits)
 (string-length limits)
)
 ((hash-table? limits)
 (hash-table-size limits)
)
 (else (length limits)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append "           < " (padLeft (list-ref limits 0)
 3)
)
 " = ")
 (padLeft (list-ref bins 0)
 2)
)
)
)
 (newline)
 (let ((i 1)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i n)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append ">= " (padLeft (list-ref limits (- i 1)
)
 3)
)
 " and < ")
 (padLeft (list-ref limits i)
 3)
)
 " = ")
 (padLeft (list-ref bins i)
 2)
)
)
)
 (newline)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (display (to-str (string-append (string-append (string-append ">= " (padLeft (list-ref limits (- n 1)
)
 3)
)
 "           = ")
 (padLeft (list-ref bins n)
 2)
)
)
)
 (newline)
 (display (to-str "")
)
 (newline)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret14)
 (let ((limitsList (_list (_list 23 37 43 53 67 83)
 (_list 14 18 249 312 389 392 513 591 634 720)
)
)
)
 (begin (let ((dataList (_list (_list 95 21 94 12 99 4 70 75 83 93 52 80 57 5 53 86 65 17 92 83 71 61 54 58 47 16 8 9 32 84 7 87 46 19 30 37 96 6 98 40 79 97 45 64 60 29 49 36 43 55)
 (_list
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< i (cond ((string? limitsList)
 (string-length limitsList)
)
 ((hash-table? limitsList)
 (hash-table-size limitsList)
)
 (else (length limitsList)
)
)
)
 (begin (display (to-str (string-append (string-append "Example " (to-str (+ i 1)
)
)
 "\n")
)
)
 (newline)
 (let ((bins (getBins (list-ref limitsList i)
 (list-ref dataList i)
)
)
)
 (begin (printBins (list-ref limitsList i)
 bins)
 (set! i (+ i 1)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end18 (now)
)
)
 (let ((dur19 (quotient (- end18 start17)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur19)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
