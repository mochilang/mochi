;; Generated on 2025-08-02 20:37 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start8 (now))) (begin (define (sqrtApprox x) (call/cc (lambda (ret1) (let ((g x)) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i 40) (begin (set! g (/ (_add g (/ x g)) 2.0)) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 g)))))))) (define (hypot x y) (call/cc (lambda (ret4) (ret4 (sqrtApprox (_add (* x x) (* y y))))))) (define Two "Two circles.") (define R0 "R==0.0 does not describe circles.") (define Co "Coincident points describe an infinite number of circles.") (define CoR0 "Coincident points with r==0.0 describe a degenerate circle.") (define Diam "Points form a diameter and describe only a single circle.") (define Far "Points too far apart to form circles.") (define (circles p1 p2 r) (call/cc (lambda (ret5) (begin (if (and (equal? (hash-table-ref p1 "x") (hash-table-ref p2 "x")) (equal? (hash-table-ref p1 "y") (hash-table-ref p2 "y"))) (begin (if (equal? r 0.0) (begin (ret5 (_list p1 p1 "Coincident points with r==0.0 describe a degenerate circle."))) (quote ())) (ret5 (_list p1 p2 "Coincident points describe an infinite number of circles."))) (quote ())) (if (equal? r 0.0) (begin (ret5 (_list p1 p2 "R==0.0 does not describe circles."))) (quote ())) (let ((dx (- (hash-table-ref p2 "x") (hash-table-ref p1 "x")))) (begin (let ((dy (- (hash-table-ref p2 "y") (hash-table-ref p1 "y")))) (begin (let ((q (hypot dx dy))) (begin (if (_gt q (* 2.0 r)) (begin (ret5 (_list p1 p2 "Points too far apart to form circles."))) (quote ())) (let ((m (alist->hash-table (_list (cons "x" (/ (+ (hash-table-ref p1 "x") (hash-table-ref p2 "x")) 2.0)) (cons "y" (/ (+ (hash-table-ref p1 "y") (hash-table-ref p2 "y")) 2.0)))))) (begin (if (equal? q (* 2.0 r)) (begin (ret5 (_list m m "Points form a diameter and describe only a single circle."))) (quote ())) (let ((d (sqrtApprox (- (* r r) (/ (* q q) 4.0))))) (begin (let ((ox (/ (* d dx) q))) (begin (let ((oy (/ (* d dy) q))) (begin (ret5 (_list (alist->hash-table (_list (cons "x" (- (hash-table-ref m "x") oy)) (cons "y" (_add (hash-table-ref m "y") ox)))) (alist->hash-table (_list (cons "x" (_add (hash-table-ref m "x") oy)) (cons "y" (- (hash-table-ref m "y") ox)))) "Two circles.")))))))))))))))))))) (define td (_list (_list (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) (alist->hash-table (_list (cons "x" 0.8765) (cons "y" 0.2345))) 2.0) (_list (alist->hash-table (_list (cons "x" 0.0) (cons "y" 2.0))) (alist->hash-table (_list (cons "x" 0.0) (cons "y" 0.0))) 1.0) (_list (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) 2.0) (_list (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) (alist->hash-table (_list (cons "x" 0.8765) (cons "y" 0.2345))) 0.5) (_list (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) (alist->hash-table (_list (cons "x" 0.1234) (cons "y" 0.9876))) 0.0))) (call/cc (lambda (break7) (letrec ((loop6 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((tc (car xs))) (begin (let ((p1 (cond ((string? tc) (_substring tc 0 (+ 0 1))) ((hash-table? tc) (hash-table-ref tc 0)) (else (list-ref tc 0))))) (begin (let ((p2 (cond ((string? tc) (_substring tc 1 (+ 1 1))) ((hash-table? tc) (hash-table-ref tc 1)) (else (list-ref tc 1))))) (begin (let ((r (cond ((string? tc) (_substring tc 2 (+ 2 1))) ((hash-table? tc) (hash-table-ref tc 2)) (else (list-ref tc 2))))) (begin (_display (to-str (string-append (string-append (string-append (string-append "p1:  {" (to-str (hash-table-ref p1 "x"))) " ") (to-str (hash-table-ref p1 "y"))) "}"))) (newline) (_display (to-str (string-append (string-append (string-append (string-append "p2:  {" (to-str (hash-table-ref p2 "x"))) " ") (to-str (hash-table-ref p2 "y"))) "}"))) (newline) (_display (to-str (string-append "r:  " (to-str r)))) (newline) (let ((res (circles p1 p2 r))) (begin (let ((c1 (cond ((string? res) (_substring res 0 (+ 0 1))) ((hash-table? res) (hash-table-ref res 0)) (else (list-ref res 0))))) (begin (let ((c2 (cond ((string? res) (_substring res 1 (+ 1 1))) ((hash-table? res) (hash-table-ref res 1)) (else (list-ref res 1))))) (begin (let ((caseStr (cond ((string? res) (_substring res 2 (+ 2 1))) ((hash-table? res) (hash-table-ref res 2)) (else (list-ref res 2))))) (begin (_display (to-str (string-append "   " caseStr))) (newline) (if (or (string=? caseStr "Points form a diameter and describe only a single circle.") (string=? caseStr "Coincident points with r==0.0 describe a degenerate circle.")) (begin (_display (to-str (string-append (string-append (string-append (string-append "   Center:  {" (to-str (hash-table-ref c1 "x"))) " ") (to-str (hash-table-ref c1 "y"))) "}"))) (newline)) (begin (if (string=? caseStr "Two circles.") (begin (_display (to-str (string-append (string-append (string-append (string-append "   Center 1:  {" (to-str (hash-table-ref c1 "x"))) " ") (to-str (hash-table-ref c1 "y"))) "}"))) (newline) (_display (to-str (string-append (string-append (string-append (string-append "   Center 2:  {" (to-str (hash-table-ref c2 "x"))) " ") (to-str (hash-table-ref c2 "y"))) "}"))) (newline)) (quote ())))) (_display (to-str "")) (newline))))))))))))))))) (loop6 (cdr xs))))))) (loop6 td)))) (let ((end9 (now))) (let ((dur10 (quotient (- end9 start8) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur10) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
