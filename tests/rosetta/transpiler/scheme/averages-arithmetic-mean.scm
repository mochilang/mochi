;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (mean v)
 (call/cc (lambda (ret1)
 (begin (if (equal? (cond ((string? v)
 (string-length v)
)
 ((hash-table? v)
 (hash-table-size v)
)
 (else (length v)
)
)
 0)
 (begin (ret1 (alist->hash-table (list (cons "ok" #f)
)
)
)
)
 (quote ()
)
)
 (let ((sum 0.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? v)
 (string-length v)
)
 ((hash-table? v)
 (hash-table-size v)
)
 (else (length v)
)
)
)
 (begin (set! sum (+ sum (list-ref v i)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (alist->hash-table (list (cons "ok" #t)
 (cons "mean" (/ sum (cond ((string? v)
 (string-length v)
)
 ((hash-table? v)
 (hash-table-size v)
)
 (else (length v)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (let ((sets (list (list)
 (list 3.0 1.0 4.0 1.0 5.0 9.0)
 (list 100000000000000000000.0 3.0 1.0 4.0 1.0 5.0 9.0 (- 100000000000000000000.0)
)
 (list 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0 0.0 0.0 0.0 0.0 0.11)
 (list 10.0 20.0 30.0 40.0 50.0 (- 100.0)
 4.7 (- 1100.0)
)
)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((v (car xs)
)
)
 (begin (display (to-str (string-append "Vector: " (to-str v)
)
)
)
 (newline)
 (let ((r (mean v)
)
)
 (begin (if (hash-table-ref/default r "ok" (quote ()
)
)
 (begin (display (to-str (string-append (string-append (string-append "Mean of " (to-str (cond ((string? v)
 (string-length v)
)
 ((hash-table? v)
 (hash-table-size v)
)
 (else (length v)
)
)
)
)
 " numbers is ")
 (to-str (hash-table-ref/default r "mean" (quote ()
)
)
)
)
)
)
 (newline)
)
 (begin (display (to-str "Mean undefined")
)
 (newline)
)
)
 (display (to-str "")
)
 (newline)
)
)
)
)
 (loop5 (cdr xs)
)
)
)
)
)
)
 (loop5 sets)
)
)
)
)
)
)
)
)
(main)
