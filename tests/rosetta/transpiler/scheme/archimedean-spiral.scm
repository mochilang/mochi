;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define PI 3.141592653589793)
(define (sinApprox x)
 (call/cc (lambda (ret1)
 (let ((term x)
)
 (begin (let ((sum x)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= n 10)
 (begin (let ((denom (* (* 2 n)
 (+ (* 2 n)
 1)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
)
)
(define (cosApprox x)
 (call/cc (lambda (ret4)
 (let ((term 1.0)
)
 (begin (let ((sum 1.0)
)
 (begin (let ((n 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= n 10)
 (begin (let ((denom (* (- (* 2 n)
 1)
 (* 2 n)
)
)
)
 (begin (set! term (/ (* (* (- term)
 x)
 x)
 denom)
)
 (set! sum (+ sum term)
)
 (set! n (+ n 1)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 sum)
)
)
)
)
)
)
)
)
)
(define degreesIncr (/ (* 0.1 PI)
 180.0)
)
(define turns 2.0)
(define stop (* (* (* 360.0 turns)
 10.0)
 degreesIncr)
)
(define width 600.0)
(define centre (/ width 2.0)
)
(define a 1.0)
(define b 20.0)
(define theta 0.0)
(define count 0)
(call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< theta stop)
 (begin (let ((r (+ a (* b theta)
)
)
)
 (begin (let ((x (* r (cosApprox theta)
)
)
)
 (begin (let ((y (* r (sinApprox theta)
)
)
)
 (begin (if (equal? (modulo count 100)
 0)
 (begin (display (to-str (string-append (string-append (to-str (+ centre x)
)
 ",")
 (to-str (- centre y)
)
)
)
)
 (newline)
)
 (quote nil)
)
 (set! theta (+ theta degreesIncr)
)
 (set! count (+ count 1)
)
)
)
)
)
)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
