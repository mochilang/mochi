;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (pfacSum i)
 (call/cc (lambda (ret1)
 (let ((sum 0)
)
 (begin (let ((p 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= p (quotient i 2)
)
 (begin (if (equal? (modulo i p)
 0)
 (begin (set! sum (+ sum p)
)
)
 (quote nil)
)
 (set! p (+ p 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
(define (pad n width)
 (call/cc (lambda (ret4)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 s)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret7)
 (let ((sums (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i 20000)
 (begin (set! sums (append sums (list 0)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
 (set! i 1)
 (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i 20000)
 (begin (list-set! sums i (pfacSum i)
)
 (set! i (+ i 1)
)
 (loop10)
)
 (quote nil)
)
)
)
)
 (loop10)
)
)
)
 (display (to-str "The amicable pairs below 20,000 are:")
)
 (newline)
 (let ((n 2)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< n 19999)
 (begin (let ((m (list-ref sums n)
)
)
 (begin (if (and (and (> m n)
 (< m 20000)
)
 (equal? n (list-ref sums m)
)
)
 (begin (display (to-str (string-append (string-append (string-append "  " (pad n 5)
)
 " and ")
 (pad m 5)
)
)
)
 (newline)
)
 (quote nil)
)
 (set! n (+ n 1)
)
)
)
 (loop12)
)
 (quote nil)
)
)
)
)
 (loop12)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
