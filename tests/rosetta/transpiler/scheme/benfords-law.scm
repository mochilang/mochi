;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (floorf x)
 (call/cc (lambda (ret1)
 (let ((y (let ((v2 x)
)
 (cond ((string? v2)
 (inexact->exact (string->number v2)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact v2)
)
)
)
)
)
 (begin (ret1 y)
)
)
)
)
)
(define (indexOf s ch)
 (call/cc (lambda (ret3)
 (let ((i 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret3 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (ret3 (- 1)
)
)
)
)
)
)
(define (fmtF3 x)
 (call/cc (lambda (ret6)
 (let ((y (/ (floorf (+ (* x 1000.0)
 0.5)
)
 1000.0)
)
)
 (begin (let ((s (to-str y)
)
)
 (begin (let ((dot (indexOf s ".")
)
)
 (begin (if (equal? dot (- 0 1)
)
 (begin (set! s (string-append s ".000")
)
)
 (begin (let ((decs (- (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 dot)
 1)
)
)
 (begin (if (> decs 3)
 (begin (set! s (substring s 0 (+ dot 4)
)
)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< decs 3)
 (begin (set! s (string-append s "0")
)
 (set! decs (+ decs 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
)
)
)
)
)
)
 (ret6 s)
)
)
)
)
)
)
)
)
)
(define (padFloat3 x width)
 (call/cc (lambda (ret9)
 (let ((s (fmtF3 x)
)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 s)
)
)
)
)
)
(define (fib1000)
 (call/cc (lambda (ret12)
 (let ((a 0.0)
)
 (begin (let ((b 1.0)
)
 (begin (let ((res (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i 1000)
 (begin (set! res (append res (_list b)
)
)
 (let ((t b)
)
 (begin (set! b (+ b a)
)
 (set! a t)
 (set! i (+ i 1)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 res)
)
)
)
)
)
)
)
)
)
)
)
(define (leadingDigit x)
 (call/cc (lambda (ret15)
 (begin (if (< x 0.0)
 (begin (set! x (- x)
)
)
 (quote ()
)
)
 (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (>= x 10.0)
 (begin (set! x (/ x 10.0)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (and (> x 0.0)
 (< x 1.0)
)
 (begin (set! x (* x 10.0)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (ret15 (let ((v20 x)
)
 (cond ((string? v20)
 (inexact->exact (string->number v20)
)
)
 ((boolean? v20)
 (if v20 1 0)
)
 (else (inexact->exact v20)
)
)
)
)
)
)
)
)
(define (show nums title)
 (call/cc (lambda (ret21)
 (let ((counts (_list 0 0 0 0 0 0 0 0 0)
)
)
 (begin (call/cc (lambda (break23)
 (letrec ((loop22 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((n (car xs)
)
)
 (begin (let ((d (leadingDigit n)
)
)
 (begin (if (and (>= d 1)
 (<= d 9)
)
 (begin (list-set! counts (- d 1)
 (+ (list-ref counts (- d 1)
)
 1)
)
)
 (quote ()
)
)
)
)
)
)
 (loop22 (cdr xs)
)
)
)
)
)
)
 (loop22 nums)
)
)
)
 (let ((preds (_list 0.301 0.176 0.125 0.097 0.079 0.067 0.058 0.051 0.046)
)
)
 (begin (let ((total (cond ((string? nums)
 (string-length nums)
)
 ((hash-table? nums)
 (hash-table-size nums)
)
 (else (length nums)
)
)
)
)
 (begin (display (to-str title)
)
 (newline)
 (display (to-str "Digit  Observed  Predicted")
)
 (newline)
 (let ((i 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< i 9)
 (begin (let ((obs (/ (list-ref counts i)
 total)
)
)
 (begin (let ((line (string-append (string-append (string-append (string-append (string-append "  " (to-str (+ i 1)
)
)
 "  ")
 (padFloat3 obs 9)
)
 "  ")
 (padFloat3 (list-ref preds i)
 8)
)
)
)
 (begin (display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret26)
 (show (fib1000)
 "First 1000 Fibonacci numbers")
)
)
)
(main)
