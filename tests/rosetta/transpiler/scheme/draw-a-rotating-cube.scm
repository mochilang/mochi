;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start30 (now)
)
)
 (begin (define PI 3.141592653589793)
 (define TWO_PI 6.283185307179586)
 (define (_mod x m)
 (call/cc (lambda (ret1)
 (ret1 (- x (* (let ((v2 (/ x m)
)
)
 (cond ((string? v2)
 (exact (floor (string->number v2)
)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (exact (floor v2)
)
)
)
)
 m)
)
)
)
)
)
 (define (_sin x)
 (call/cc (lambda (ret3)
 (let ((y (- (_mod (+ x PI)
 TWO_PI)
 PI)
)
)
 (begin (let ((y2 (* y y)
)
)
 (begin (let ((y3 (* y2 y)
)
)
 (begin (let ((y5 (* y3 y2)
)
)
 (begin (let ((y7 (* y5 y2)
)
)
 (begin (ret3 (- (_add (- y (/ y3 6.0)
)
 (/ y5 120.0)
)
 (/ y7 5040.0)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (_cos x)
 (call/cc (lambda (ret4)
 (let ((y (- (_mod (+ x PI)
 TWO_PI)
 PI)
)
)
 (begin (let ((y2 (* y y)
)
)
 (begin (let ((y4 (* y2 y2)
)
)
 (begin (let ((y6 (* y4 y2)
)
)
 (begin (ret4 (- (_add (- 1.0 (/ y2 2.0)
)
 (/ y4 24.0)
)
 (/ y6 720.0)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define nodes (_list (alist->hash-table (_list (cons "x" (- 1.0)
)
 (cons "y" (- 1.0)
)
 (cons "z" (- 1.0)
)
)
)
 (alist->hash-table (_list (cons "x" (- 1.0)
)
 (cons "y" (- 1.0)
)
 (cons "z" 1.0)
)
)
 (alist->hash-table (_list (cons "x" (- 1.0)
)
 (cons "y" 1.0)
 (cons "z" (- 1.0)
)
)
)
 (alist->hash-table (_list (cons "x" (- 1.0)
)
 (cons "y" 1.0)
 (cons "z" 1.0)
)
)
 (alist->hash-table (_list (cons "x" 1.0)
 (cons "y" (- 1.0)
)
 (cons "z" (- 1.0)
)
)
)
 (alist->hash-table (_list (cons "x" 1.0)
 (cons "y" (- 1.0)
)
 (cons "z" 1.0)
)
)
 (alist->hash-table (_list (cons "x" 1.0)
 (cons "y" 1.0)
 (cons "z" (- 1.0)
)
)
)
 (alist->hash-table (_list (cons "x" 1.0)
 (cons "y" 1.0)
 (cons "z" 1.0)
)
)
)
)
 (define edges (_list (_list 0 1)
 (_list 1 3)
 (_list 3 2)
 (_list 2 0)
 (_list 4 5)
 (_list 5 7)
 (_list 7 6)
 (_list 6 4)
 (_list 0 4)
 (_list 1 5)
 (_list 2 6)
 (_list 3 7)
)
)
 (define (rotate p ax ay)
 (call/cc (lambda (ret5)
 (let ((sinx (_sin ax)
)
)
 (begin (let ((cosx (_cos ax)
)
)
 (begin (let ((siny (_sin ay)
)
)
 (begin (let ((cosy (_cos ay)
)
)
 (begin (let ((x1 (hash-table-ref p "x")
)
)
 (begin (let ((y1 (- (* (hash-table-ref p "y")
 cosx)
 (* (hash-table-ref p "z")
 sinx)
)
)
)
 (begin (let ((z1 (_add (* (hash-table-ref p "y")
 sinx)
 (* (hash-table-ref p "z")
 cosx)
)
)
)
 (begin (let ((x2 (_add (* x1 cosy)
 (* z1 siny)
)
)
)
 (begin (let ((z2 (_add (* (- x1)
 siny)
 (* z1 cosy)
)
)
)
 (begin (ret5 (alist->hash-table (_list (cons "x" x2)
 (cons "y" y1)
 (cons "z" z2)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define width 40)
 (define height 20)
 (define distance 3.0)
 (define scale 8.0)
 (define (project p)
 (call/cc (lambda (ret6)
 (let ((factor (/ scale (+ (hash-table-ref p "z")
 distance)
)
)
)
 (begin (let ((x (_add (let ((v7 (* (hash-table-ref p "x")
 factor)
)
)
 (cond ((string? v7)
 (exact (floor (string->number v7)
)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (exact (floor v7)
)
)
)
)
 (quotient width 2)
)
)
)
 (begin (let ((y (_add (let ((v8 (* (- (hash-table-ref p "y")
)
 factor)
)
)
 (cond ((string? v8)
 (exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (exact (floor v8)
)
)
)
)
 (quotient height 2)
)
)
)
 (begin (ret6 (alist->hash-table (_list (cons "x" x)
 (cons "y" y)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (clearGrid)
 (call/cc (lambda (ret9)
 (let ((g (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< y height)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< x width)
 (begin (set! row (append row (_list " ")
)
)
 (set! x (+ x 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (set! g (append g (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 g)
)
)
)
)
)
)
)
 (define (drawPoint g x y ch)
 (call/cc (lambda (ret14)
 (if (and (and (and (>= x 0)
 (< x width)
)
 (>= y 0)
)
 (< y height)
)
 (begin (let ((row (list-ref g y)
)
)
 (begin (list-set! row x ch)
 (list-set! g y row)
)
)
)
 (quote ()
)
)
)
)
)
 (define (bresenham x0 y0 x1 y1 g ch)
 (call/cc (lambda (ret15)
 (let ((dx (- x1 x0)
)
)
 (begin (if (< dx 0)
 (begin (set! dx (- dx)
)
)
 (quote ()
)
)
 (let ((dy (- y1 y0)
)
)
 (begin (if (< dy 0)
 (begin (set! dy (- dy)
)
)
 (quote ()
)
)
 (let ((sx (- 1)
)
)
 (begin (if (< x0 x1)
 (begin (set! sx 1)
)
 (quote ()
)
)
 (let ((sy (- 1)
)
)
 (begin (if (< y0 y1)
 (begin (set! sy 1)
)
 (quote ()
)
)
 (let ((err (- dx dy)
)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if #t (begin (drawPoint g x0 y0 ch)
 (if (and (equal? x0 x1)
 (equal? y0 y1)
)
 (begin (break17 (quote ()
)
)
)
 (quote ()
)
)
 (let ((e2 (* 2 err)
)
)
 (begin (if (> e2 (- dy)
)
 (begin (set! err (- err dy)
)
 (set! x0 (+ x0 sx)
)
)
 (quote ()
)
)
 (if (< e2 dx)
 (begin (set! err (+ err dx)
)
 (set! y0 (+ y0 sy)
)
)
 (quote ()
)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (render g)
 (call/cc (lambda (ret18)
 (let ((out "")
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< y height)
 (begin (let ((line "")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< x width)
 (begin (set! line (string-append line (cond ((string? (list-ref g y)
)
 (substring (list-ref g y)
 x (+ x 1)
)
)
 ((hash-table? (list-ref g y)
)
 (hash-table-ref (list-ref g y)
 x)
)
 (else (list-ref (list-ref g y)
 x)
)
)
)
)
 (set! x (+ x 1)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (set! out (string-append (string-append out line)
 "\n")
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (ret18 out)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret23)
 (let ((f 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< f 10)
 (begin (let ((grid (clearGrid)
)
)
 (begin (let ((rot (_list)
)
)
 (begin (let ((i 0)
)
 (begin (let ((ay (_add (/ PI 4.0)
 (/ (* f PI)
 10.0)
)
)
)
 (begin (call/cc (lambda (break27)
 (letrec ((loop26 (lambda ()
 (if (< i (cond ((string? nodes)
 (string-length nodes)
)
 ((hash-table? nodes)
 (hash-table-size nodes)
)
 (else (length nodes)
)
)
)
 (begin (let ((p (rotate (list-ref nodes i)
 (/ PI 4.0)
 ay)
)
)
 (begin (let ((pp (project p)
)
)
 (begin (set! rot (append rot (_list pp)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop26)
)
 (quote ()
)
)
)
)
)
 (loop26)
)
)
)
 (let ((e 0)
)
 (begin (call/cc (lambda (break29)
 (letrec ((loop28 (lambda ()
 (if (< e (cond ((string? edges)
 (string-length edges)
)
 ((hash-table? edges)
 (hash-table-size edges)
)
 (else (length edges)
)
)
)
 (begin (let ((a (cond ((string? (list-ref edges e)
)
 (substring (list-ref edges e)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref edges e)
)
 (hash-table-ref (list-ref edges e)
 0)
)
 (else (list-ref (list-ref edges e)
 0)
)
)
)
)
 (begin (let ((b (cond ((string? (list-ref edges e)
)
 (substring (list-ref edges e)
 1 (+ 1 1)
)
)
 ((hash-table? (list-ref edges e)
)
 (hash-table-ref (list-ref edges e)
 1)
)
 (else (list-ref (list-ref edges e)
 1)
)
)
)
)
 (begin (let ((p1 (list-ref rot a)
)
)
 (begin (let ((p2 (list-ref rot b)
)
)
 (begin (bresenham (hash-table-ref p1 "x")
 (hash-table-ref p1 "y")
 (hash-table-ref p2 "x")
 (hash-table-ref p2 "y")
 grid "#")
 (set! e (+ e 1)
)
)
)
)
)
)
)
)
)
 (loop28)
)
 (quote ()
)
)
)
)
)
 (loop28)
)
)
)
 (_display (to-str (render grid)
)
)
 (newline)
 (set! f (+ f 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
)
)
)
)
)
 (main)
 (let ((end31 (now)
)
)
 (let ((dur32 (quotient (- end31 start30)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur32)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
