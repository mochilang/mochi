;; Generated on 2025-07-27 01:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start25 (now)
)
)
 (begin (define (newBitmap w h c)
 (call/cc (lambda (ret1)
 (let ((rows (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< y h)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< x w)
 (begin (set! row (append row (_list c)
)
)
 (set! x (+ x 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! rows (append rows (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (alist->hash-table (_list (cons "width" w)
 (cons "height" h)
 (cons "pixels" rows)
)
)
)
)
)
)
)
)
)
)
 (define (setPixel b x y c)
 (call/cc (lambda (ret6)
 (let ((rows (hash-table-ref b "pixels")
)
)
 (begin (let ((row (list-ref rows y)
)
)
 (begin (list-set! row x c)
 (list-set! rows y row)
 (hash-table-set! b "pixels" rows)
)
)
)
)
)
)
)
 (define (fillRect b x y w h c)
 (call/cc (lambda (ret7)
 (let ((yy y)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (_lt yy (+ y h)
)
 (begin (let ((xx x)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (_lt xx (+ x w)
)
 (begin (setPixel b xx yy c)
 (set! xx (+ xx 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! yy (+ yy 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
)
)
)
)
)
 (define (pad n width)
 (call/cc (lambda (ret12)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 s)
)
)
)
)
)
 (define (writePPMP3 b)
 (call/cc (lambda (ret15)
 (let ((maxv 0)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< y (hash-table-ref b "height")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< x (hash-table-ref b "width")
)
 (begin (let ((p (cond ((string? (list-ref (hash-table-ref b "pixels")
 y)
)
 (substring (list-ref (hash-table-ref b "pixels")
 y)
 x (+ x 1)
)
)
 ((hash-table? (list-ref (hash-table-ref b "pixels")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "pixels")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "pixels")
 y)
 x)
)
)
)
)
 (begin (if (> (hash-table-ref p "R")
 maxv)
 (begin (set! maxv (hash-table-ref p "R")
)
)
 (quote ()
)
)
 (if (> (hash-table-ref p "G")
 maxv)
 (begin (set! maxv (hash-table-ref p "G")
)
)
 (quote ()
)
)
 (if (> (hash-table-ref p "B")
 maxv)
 (begin (set! maxv (hash-table-ref p "B")
)
)
 (quote ()
)
)
 (set! x (+ x 1)
)
)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (set! y (+ y 1)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((out (string-append (string-append (string-append (string-append (string-append (string-append "P3\n# generated from Bitmap.writeppmp3\n" (to-str (hash-table-ref b "width")
)
)
 " ")
 (to-str (hash-table-ref b "height")
)
)
 "\n")
 (to-str maxv)
)
 "\n")
)
)
 (begin (let ((numsize (cond ((string? (to-str maxv)
)
 (string-length (to-str maxv)
)
)
 ((hash-table? (to-str maxv)
)
 (hash-table-size (to-str maxv)
)
)
 (else (length (to-str maxv)
)
)
)
)
)
 (begin (set! y (- (hash-table-ref b "height")
 1)
)
 (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (>= y 0)
 (begin (let ((line "")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break23)
 (letrec ((loop22 (lambda ()
 (if (< x (hash-table-ref b "width")
)
 (begin (let ((p (cond ((string? (list-ref (hash-table-ref b "pixels")
 y)
)
 (substring (list-ref (hash-table-ref b "pixels")
 y)
 x (+ x 1)
)
)
 ((hash-table? (list-ref (hash-table-ref b "pixels")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "pixels")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "pixels")
 y)
 x)
)
)
)
)
 (begin (set! line (string-append (string-append (string-append (string-append (string-append (string-append line "   ")
 (pad (hash-table-ref p "R")
 numsize)
)
 " ")
 (pad (hash-table-ref p "G")
 numsize)
)
 " ")
 (pad (hash-table-ref p "B")
 numsize)
)
)
 (set! x (+ x 1)
)
)
)
 (loop22)
)
 (quote ()
)
)
)
)
)
 (loop22)
)
)
)
 (set! out (string-append out line)
)
 (if (> y 0)
 (begin (set! out (string-append out "\n")
)
)
 (begin (set! out (string-append out "\n")
)
)
)
 (set! y (- y 1)
)
)
)
)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (ret15 out)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret24)
 (let ((black (alist->hash-table (_list (cons "R" 0)
 (cons "G" 0)
 (cons "B" 0)
)
)
)
)
 (begin (let ((white (alist->hash-table (_list (cons "R" 255)
 (cons "G" 255)
 (cons "B" 255)
)
)
)
)
 (begin (let ((bm (newBitmap 4 4 black)
)
)
 (begin (fillRect bm 1 0 1 2 white)
 (setPixel bm 3 3 (alist->hash-table (_list (cons "R" 127)
 (cons "G" 0)
 (cons "B" 63)
)
)
)
 (let ((ppm (writePPMP3 bm)
)
)
 (begin (display (to-str ppm)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end26 (now)
)
)
 (let ((dur27 (quotient (- end26 start25)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur27)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
