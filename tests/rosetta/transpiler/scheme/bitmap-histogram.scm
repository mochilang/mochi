;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start25 (now)
)
)
 (begin (define (image)
 (call/cc (lambda (ret1)
 (ret1 (_list (_list 0 0 10000)
 (_list 65535 65535 65535)
 (_list 65535 65535 65535)
)
)
)
)
)
 (define (histogram g bins)
 (call/cc (lambda (ret2)
 (begin (if (<= bins 0)
 (begin (set! bins (cond ((string? (list-ref g 0)
)
 (string-length (list-ref g 0)
)
)
 ((hash-table? (list-ref g 0)
)
 (hash-table-size (list-ref g 0)
)
)
 (else (length (list-ref g 0)
)
)
)
)
)
 (quote ()
)
)
 (let ((h (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i bins)
 (begin (set! h (append h (_list 0)
)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (let ((y 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< y (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
 (begin (let ((row (list-ref g y)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< x (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (let ((p (list-ref row x)
)
)
 (begin (let ((idx (let ((v9 (/ (* p (- bins 1)
)
 65535)
)
)
 (cond ((string? v9)
 (inexact->exact (floor (string->number v9)
)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (inexact->exact (floor v9)
)
)
)
)
)
)
 (begin (list-set! h idx (+ (list-ref h idx)
 1)
)
 (set! x (+ x 1)
)
)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret2 h)
)
)
)
)
)
)
)
)
)
)
 (define (medianThreshold h)
 (call/cc (lambda (ret10)
 (let ((lb 0)
)
 (begin (let ((ub (- (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
 1)
)
)
 (begin (let ((lSum 0)
)
 (begin (let ((uSum 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (<= lb ub)
 (begin (if (_lt (+ lSum (list-ref h lb)
)
 (+ uSum (list-ref h ub)
)
)
 (begin (set! lSum (+ lSum (list-ref h lb)
)
)
 (set! lb (+ lb 1)
)
)
 (begin (set! uSum (+ uSum (list-ref h ub)
)
)
 (set! ub (- ub 1)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 (let ((v13 (/ (* ub 65535)
 (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
)
)
)
 (cond ((string? v13)
 (inexact->exact (floor (string->number v13)
)
)
)
 ((boolean? v13)
 (if v13 1 0)
)
 (else (inexact->exact (floor v13)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (threshold g t)
 (call/cc (lambda (ret14)
 (let ((out (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< y (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
 (begin (let ((row (list-ref g y)
)
)
 (begin (let ((newRow (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< x (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (if (< (list-ref row x)
 t)
 (begin (set! newRow (append newRow (_list 0)
)
)
)
 (begin (set! newRow (append newRow (_list 65535)
)
)
)
)
 (set! x (+ x 1)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (set! out (append out (_list newRow)
)
)
 (set! y (+ y 1)
)
)
)
)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (ret14 out)
)
)
)
)
)
)
)
 (define (printImage g)
 (call/cc (lambda (ret19)
 (let ((y 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< y (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
 (begin (let ((row (list-ref g y)
)
)
 (begin (let ((line "")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break23)
 (letrec ((loop22 (lambda ()
 (if (< x (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (if (equal? (list-ref row x)
 0)
 (begin (set! line (string-append line "0")
)
)
 (begin (set! line (string-append line "1")
)
)
)
 (set! x (+ x 1)
)
 (loop22)
)
 (quote ()
)
)
)
)
)
 (loop22)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! y (+ y 1)
)
)
)
)
)
)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret24)
 (let ((img (image)
)
)
 (begin (let ((h (histogram img 0)
)
)
 (begin (display (to-str (string-append "Histogram: " (to-str h)
)
)
)
 (newline)
 (let ((t (medianThreshold h)
)
)
 (begin (display (to-str (string-append "Threshold: " (to-str t)
)
)
)
 (newline)
 (let ((bw (threshold img t)
)
)
 (begin (printImage bw)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end26 (now)
)
)
 (let ((dur27 (quotient (- end26 start25)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur27)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
