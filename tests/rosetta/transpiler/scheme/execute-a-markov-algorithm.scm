;; Generated on 2025-08-04 08:17 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (split s sep) (call/cc (lambda (ret1) (let ((parts (_list))) (begin (let ((cur "")) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (_len s)) (begin (if (and (and (> (_len sep) 0) (_le (+ i (_len sep)) (_len s))) (string=? (_substring s i (+ i (_len sep))) sep)) (begin (set! parts (append parts (_list cur))) (set! cur "") (set! i (+ i (_len sep)))) (begin (set! cur (string-append cur (_substring s i (+ i 1)))) (set! i (+ i 1)))) (loop2)) (quote ()))))) (loop2)))) (set! parts (append parts (_list cur))) (ret1 parts))))))))))
(define (trimSpace s) (call/cc (lambda (ret4) (let ((start 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (and (< start (_len s)) (or (string=? (_substring s start (+ start 1)) " ") (string=? (_substring s start (+ start 1)) "\t"))) (begin (set! start (+ start 1)) (loop5)) (quote ()))))) (loop5)))) (let ((end (_len s))) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (and (> end start) (or (string=? (_substring s (- end 1) end) " ") (string=? (_substring s (- end 1) end) "\t"))) (begin (set! end (- end 1)) (loop7)) (quote ()))))) (loop7)))) (ret4 (_substring s start end)))))))))
(define (indexOfSub s sub) (call/cc (lambda (ret9) (begin (if (equal? (_len sub) 0) (begin (ret9 0)) (quote ())) (let ((i 0)) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (_le (+ i (_len sub)) (_len s)) (begin (if (string=? (_substring s i (+ i (_len sub))) sub) (begin (ret9 i)) (quote ())) (set! i (+ i 1)) (loop10)) (quote ()))))) (loop10)))) (ret9 (- 0 1))))))))
(define (parseRules rs) (call/cc (lambda (ret12) (let ((rules (_list))) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((line (car xs))) (begin (let ((ln line)) (begin (let ((hash (indexOfSub ln "#"))) (begin (if (_ge hash 0) (begin (set! ln (if (string? ln) (_substring ln 0 hash) (take (drop ln 0) (- hash 0))))) (quote ())) (set! ln (trimSpace ln)) (if (equal? (_len ln) 0) (begin (loop13 (cdr xs))) (quote ())) (let ((arrow (- 0 1))) (begin (let ((j 0)) (begin (call/cc (lambda (break16) (letrec ((loop15 (lambda () (if (_le (+ j 2) (_len ln)) (begin (if (string=? (_substring ln j (+ j 2)) "->") (begin (let ((pre (and (> j 0) (or (string=? (if (string? ln) (_substring ln (- j 1) j) (take (drop ln (- j 1)) (- j (- j 1)))) " ") (string=? (if (string? ln) (_substring ln (- j 1) j) (take (drop ln (- j 1)) (- j (- j 1)))) "\t"))))) (begin (let ((post (and (_lt (+ j 2) (_len ln)) (or (string=? (if (string? ln) (_substring ln (+ j 2) (+ j 3)) (take (drop ln (+ j 2)) (- (+ j 3) (+ j 2)))) " ") (string=? (if (string? ln) (_substring ln (+ j 2) (+ j 3)) (take (drop ln (+ j 2)) (- (+ j 3) (+ j 2)))) "\t"))))) (begin (if (and pre post) (begin (set! arrow j) (break16 (quote ()))) (quote ()))))))) (quote ())) (set! j (+ j 1)) (loop15)) (quote ()))))) (loop15)))) (if (< arrow 0) (begin (set! arrow (indexOfSub ln "->"))) (quote ())) (if (< arrow 0) (begin (ret12 (alist->hash-table (_list (cons "ok" #f))))) (quote ())) (let ((pat (trimSpace (if (string? ln) (_substring ln 0 arrow) (take (drop ln 0) (- arrow 0)))))) (begin (let ((rest (trimSpace (if (string? ln) (_substring ln (+ arrow 2) (_len ln)) (take (drop ln (+ arrow 2)) (- (_len ln) (+ arrow 2))))))) (begin (let ((term #f)) (begin (if (and (> (_len rest) 0) (string=? (if (string? rest) (_substring rest 0 1) (take (drop rest 0) (- 1 0))) ".")) (begin (set! term #t) (set! rest (if (string? rest) (_substring rest 1 (_len rest)) (take (drop rest 1) (- (_len rest) 1))))) (quote ())) (let ((rep rest)) (begin (set! rules (append rules (_list (alist->hash-table (_list (cons "pat" pat) (cons "rep" rep) (cons "term" term)))))))))))))))))))))))) (loop13 (cdr xs))))))) (loop13 (split rs "\n"))))) (ret12 (alist->hash-table (_list (cons "ok" #t) (cons "rules" rules)))))))))
(define (runRules rules s) (call/cc (lambda (ret17) (let ((changed #t)) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda () (if changed (begin (set! changed #f) (let ((i 0)) (begin (call/cc (lambda (break21) (letrec ((loop20 (lambda () (if (< i (_len rules)) (begin (let ((r (list-ref rules i))) (begin (let ((pat (hash-table-ref/default r "pat" (quote ())))) (begin (let ((rep (hash-table-ref/default r "rep" (quote ())))) (begin (let ((term (hash-table-ref/default r "term" (quote ())))) (begin (let ((idx (indexOfSub s pat))) (begin (if (_ge idx 0) (begin (set! s (string-append (string-append (_substring s 0 idx) rep) (_substring s (_add idx (_len pat)) (string-length s)))) (set! changed #t) (if term (begin (ret17 s)) (quote ())) (break21 (quote ()))) (quote ())) (set! i (+ i 1)))))))))))) (loop20)) (quote ()))))) (loop20)))))) (loop18)) (quote ()))))) (loop18)))) (ret17 s))))))
(define (interpret ruleset input) (call/cc (lambda (ret22) (let ((p (parseRules ruleset))) (begin (if (not (cond ((string? p) (_substring p "ok" (+ "ok" 1))) ((hash-table? p) (hash-table-ref p "ok")) (else (list-ref p "ok")))) (begin (ret22 (alist->hash-table (_list (cons "ok" #f) (cons "out" ""))))) (quote ())) (let ((out (runRules (cond ((string? p) (_substring p "rules" (+ "rules" 1))) ((hash-table? p) (hash-table-ref p "rules")) (else (list-ref p "rules"))) input))) (begin (ret22 (alist->hash-table (_list (cons "ok" #t) (cons "out" out)))))))))))
(define testSet (_list (alist->hash-table (_list (cons "ruleSet" "# This rules file is extracted from Wikipedia:\n# http://en.wikipedia.org/wiki/Markov_Algorithm\nA -> apple\nB -> bag\nS -> shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n") (cons "sample" "I bought a B of As from T S.") (cons "output" "I bought a bag of apples from my brother."))) (alist->hash-table (_list (cons "ruleSet" "# Slightly modified from the rules on Wikipedia\nA -> apple\nB -> bag\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n") (cons "sample" "I bought a B of As from T S.") (cons "output" "I bought a bag of apples from T shop."))) (alist->hash-table (_list (cons "ruleSet" "# BNF Syntax testing rules\nA -> apple\nWWWW -> with\nBgage -> ->.*\nB -> bag\n->.* -> money\nW -> WW\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n") (cons "sample" "I bought a B of As W my Bgage from T S.") (cons "output" "I bought a bag of apples with my money from T shop."))) (alist->hash-table (_list (cons "ruleSet" "### Unary Multiplication Engine, for testing Markov Algorithm implementations\n### By Donal Fellows.\n# Unary addition engine\n_+1 -> _1+\n1+1 -> 11+\n# Pass for converting from the splitting of multiplication into ordinary\n# addition\n1! -> !1\n,! -> !+\n_! -> _\n# Unary multiplication by duplicating left side, right side times\n1*1 -> x,@y\n1x -> xX\nX, -> 1,1\nX1 -> 1X\n_x -> _X\n,x -> ,X\ny1 -> 1y\ny_ -> _\n# Next phase of applying\n1@1 -> x,@y\n1@_ -> @_\n,@_ -> !_\n++ -> +\n# Termination cleanup for addition\n_1 -> 1\n1+_ -> 1\n_+_ ->\n") (cons "sample" "_1111*11111_") (cons "output" "11111111111111111111"))) (alist->hash-table (_list (cons "ruleSet" "# Turing machine: three-state busy beaver\n#\n# state A, symbol 0 => write 1, move right, new state B\nA0 -> 1B\n# state A, symbol 1 => write 1, move left, new state C\n0A1 -> C01\n1A1 -> C11\n# state B, symbol 0 => write 1, move left, new state A\n0B0 -> A01\n1B0 -> A11\n# state B, symbol 1 => write 1, move right, new state B\nB1 -> 1B\n# state C, symbol 0 => write 1, move left, new state B\n0C0 -> B01\n1C0 -> B11\n# state C, symbol 1 => write 1, move left, halt\n0C1 -> H01\n1C1 -> H11\n") (cons "sample" "000000A000000") (cons "output" "00011H1111000")))))
(define (main) (call/cc (lambda (ret23) (begin (_display (to-str (string-append (string-append "validating " (to-str (_len testSet))) " test cases"))) (newline) (let ((failures #f)) (begin (let ((i 0)) (begin (call/cc (lambda (break25) (letrec ((loop24 (lambda () (if (< i (_len testSet)) (begin (let ((tc (list-ref testSet i))) (begin (let ((res (interpret (cond ((string? tc) (_substring tc "ruleSet" (+ "ruleSet" 1))) ((hash-table? tc) (hash-table-ref tc "ruleSet")) (else (list-ref tc "ruleSet"))) (cond ((string? tc) (_substring tc "sample" (+ "sample" 1))) ((hash-table? tc) (hash-table-ref tc "sample")) (else (list-ref tc "sample")))))) (begin (if (not (cond ((string? res) (_substring res "ok" (+ "ok" 1))) ((hash-table? res) (hash-table-ref res "ok")) (else (list-ref res "ok")))) (begin (_display (to-str (string-append (string-append "test " (to-str (+ i 1))) " invalid ruleset"))) (newline) (set! failures #t)) (if (not (string=? (cond ((string? res) (_substring res "out" (+ "out" 1))) ((hash-table? res) (hash-table-ref res "out")) (else (list-ref res "out"))) (cond ((string? tc) (_substring tc "output" (+ "output" 1))) ((hash-table? tc) (hash-table-ref tc "output")) (else (list-ref tc "output"))))) (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append "test " (to-str (+ i 1))) ": got ") (cond ((string? res) (_substring res "out" (+ "out" 1))) ((hash-table? res) (hash-table-ref res "out")) (else (list-ref res "out")))) ", want ") (cond ((string? tc) (_substring tc "output" (+ "output" 1))) ((hash-table? tc) (hash-table-ref tc "output")) (else (list-ref tc "output")))))) (newline) (set! failures #t)) (quote ()))) (set! i (+ i 1)))))) (loop24)) (quote ()))))) (loop24)))) (if (not failures) (begin (_display (to-str "no failures")) (newline)) (quote ()))))))))))
(main)
