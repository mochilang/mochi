;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (isPrime n)
 (call/cc (lambda (ret1)
 (begin (if (< n 2)
 (begin (ret1 #f)
)
 (quote nil)
)
 (if (equal? (modulo n 2)
 0)
 (begin (ret1 (equal? n 2)
)
)
 (quote nil)
)
 (if (equal? (modulo n 3)
 0)
 (begin (ret1 (equal? n 3)
)
)
 (quote nil)
)
 (let ((d 5)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= (* d d)
 n)
 (begin (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote nil)
)
 (set! d (+ d 2)
)
 (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote nil)
)
 (set! d (+ d 4)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #t)
)
)
)
)
)
)
(define (sumDigits n)
 (call/cc (lambda (ret4)
 (let ((s 0)
)
 (begin (let ((x n)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> x 0)
 (begin (set! s (+ s (modulo x 10)
)
)
 (set! x (inexact->exact (quotient x 10)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 s)
)
)
)
)
)
)
)
(define (pad n)
 (call/cc (lambda (ret7)
 (begin (if (< n 10)
 (begin (ret7 (string-append "  " (to-str n)
)
)
)
 (quote nil)
)
 (if (< n 100)
 (begin (ret7 (string-append " " (to-str n)
)
)
)
 (quote nil)
)
 (ret7 (to-str n)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret8)
 (begin (display (to-str "Additive primes less than 500:")
)
 (newline)
 (let ((count 0)
)
 (begin (let ((line "")
)
 (begin (let ((lineCount 0)
)
 (begin (let ((i 2)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i 500)
 (begin (if (and (isPrime i)
 (isPrime (sumDigits i)
)
)
 (begin (set! count (+ count 1)
)
 (set! line (string-append (string-append line (pad i)
)
 "  ")
)
 (set! lineCount (+ lineCount 1)
)
 (if (equal? lineCount 10)
 (begin (display (to-str (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 2)
)
)
)
 (newline)
 (set! line "")
 (set! lineCount 0)
)
 (quote nil)
)
)
 (quote nil)
)
 (if (> i 2)
 (begin (set! i (+ i 2)
)
)
 (begin (set! i (+ i 1)
)
)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (if (> lineCount 0)
 (begin (display (to-str (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 2)
)
)
)
 (newline)
)
 (quote nil)
)
 (display (to-str (string-append (to-str count)
 " additive primes found.")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
