;; Generated on 2025-07-30 21:05 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start16 (now)
)
)
 (begin (define (log10floor n)
 (call/cc (lambda (ret1)
 (let ((p 0)
)
 (begin (let ((v n)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (>= v 10)
 (begin (set! v (let ((v4 (quotient v 10)
)
)
 (cond ((string? v4)
 (inexact->exact (floor (string->number v4)
)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact (floor v4)
)
)
)
)
)
 (set! p (+ p 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 p)
)
)
)
)
)
)
)
 (define (commatize n)
 (call/cc (lambda (ret5)
 (let ((s (to-str n)
)
)
 (begin (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (and (> i 0)
 (equal? (modulo (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 i)
 3)
 0)
)
 (begin (set! res (string-append res ",")
)
)
 (quote ()
)
)
 (set! res (string-append res (substring s i (+ i 1)
)
)
)
 (set! i (+ i 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 res)
)
)
)
)
)
)
)
)
)
 (define (showDistribution sizes)
 (call/cc (lambda (ret8)
 (let ((bins (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i 12)
 (begin (set! bins (append bins (_list 0)
)
)
 (set! i (+ i 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (let ((total 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((sz (car xs)
)
)
 (begin (set! total (_add total sz)
)
 (let ((idx 0)
)
 (begin (if (_gt sz 0)
 (begin (set! idx (_add (log10floor sz)
 1)
)
)
 (quote ()
)
)
 (list-set! bins idx (+ (list-ref bins idx)
 1)
)
)
)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 sizes)
)
)
)
 (_display (to-str "File size distribution:\n")
)
 (newline)
 (set! i 0)
 (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i (cond ((string? bins)
 (string-length bins)
)
 ((hash-table? bins)
 (hash-table-size bins)
)
 (else (length bins)
)
)
)
 (begin (let ((prefix "  ")
)
 (begin (if (> i 0)
 (begin (set! prefix "+ ")
)
 (quote ()
)
)
 (_display (to-str (string-append (string-append (string-append (string-append prefix "Files less than 10 ^ ")
 (to-str i)
)
 " bytes : ")
 (to-str (list-ref bins i)
)
)
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (_display (to-str "                                  -----")
)
 (newline)
 (_display (to-str (string-append "= Total number of files         : " (to-str (cond ((string? sizes)
 (string-length sizes)
)
 ((hash-table? sizes)
 (hash-table-size sizes)
)
 (else (length sizes)
)
)
)
)
)
)
 (newline)
 (_display (to-str (string-append (string-append "  Total size of files           : " (commatize total)
)
 " bytes")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret15)
 (let ((sizes (_list 0 1 9 10 99 100 1234 50000 730000 8200000)
)
)
 (begin (showDistribution sizes)
)
)
)
)
)
 (main)
 (let ((end17 (now)
)
)
 (let ((dur18 (quotient (- end17 start16)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur18)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
