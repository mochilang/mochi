;; Generated on 2025-07-26 19:01 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start8 (now)
)
)
 (begin (define (node cl le aa ri)
 (call/cc (lambda (ret1)
 (ret1 (alist->hash-table (_list (cons "cl" cl)
 (cons "le" le)
 (cons "aa" aa)
 (cons "ri" ri)
)
)
)
)
)
)
 (define (treeString t)
 (call/cc (lambda (ret2)
 (begin (if (equal? t (quote ()
)
)
 (begin (ret2 "E")
)
 (quote ()
)
)
 (let ((m t)
)
 (begin (ret2 (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "T(" (hash-table-ref/default m "cl" (quote ()
)
)
)
 ", ")
 (treeString (hash-table-ref/default m "le" (quote ()
)
)
)
)
 ", ")
 (to-str (hash-table-ref/default m "aa" (quote ()
)
)
)
)
 ", ")
 (treeString (hash-table-ref/default m "ri" (quote ()
)
)
)
)
 ")
")
)
)
)
)
)
)
)
 (define (balance t)
 (call/cc (lambda (ret3)
 (begin (if (equal? t (quote ()
)
)
 (begin (ret3 t)
)
 (quote ()
)
)
 (let ((m t)
)
 (begin (if (not (string=? (hash-table-ref/default m "cl" (quote ()
)
)
 "B")
)
 (begin (ret3 t)
)
 (quote ()
)
)
 (let ((le (hash-table-ref/default m "le" (quote ()
)
)
)
)
 (begin (let ((ri (hash-table-ref/default m "ri" (quote ()
)
)
)
)
 (begin (if (not (equal? le (quote ()
)
)
)
 (begin (let ((leMap le)
)
 (begin (if (string=? (hash-table-ref/default leMap "cl" (quote ()
)
)
 "R")
 (begin (let ((lele (hash-table-ref/default leMap "le" (quote ()
)
)
)
)
 (begin (if (not (equal? lele (quote ()
)
)
)
 (begin (let ((leleMap lele)
)
 (begin (if (string=? (hash-table-ref/default leleMap "cl" (quote ()
)
)
 "R")
 (begin (ret3 (node "R" (node "B" (hash-table-ref/default leleMap "le" (quote ()
)
)
 (hash-table-ref/default leleMap "aa" (quote ()
)
)
 (hash-table-ref/default leleMap "ri" (quote ()
)
)
)
 (hash-table-ref/default leMap "aa" (quote ()
)
)
 (node "B" (hash-table-ref/default leMap "ri" (quote ()
)
)
 (hash-table-ref/default m "aa" (quote ()
)
)
 ri)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (let ((leri (hash-table-ref/default leMap "ri" (quote ()
)
)
)
)
 (begin (if (not (equal? leri (quote ()
)
)
)
 (begin (let ((leriMap leri)
)
 (begin (if (string=? (hash-table-ref/default leriMap "cl" (quote ()
)
)
 "R")
 (begin (ret3 (node "R" (node "B" (hash-table-ref/default leMap "le" (quote ()
)
)
 (hash-table-ref/default leMap "aa" (quote ()
)
)
 (hash-table-ref/default leriMap "le" (quote ()
)
)
)
 (hash-table-ref/default leriMap "aa" (quote ()
)
)
 (node "B" (hash-table-ref/default leriMap "ri" (quote ()
)
)
 (hash-table-ref/default m "aa" (quote ()
)
)
 ri)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (if (not (equal? ri (quote ()
)
)
)
 (begin (let ((riMap ri)
)
 (begin (if (string=? (hash-table-ref/default riMap "cl" (quote ()
)
)
 "R")
 (begin (let ((rile (hash-table-ref/default riMap "le" (quote ()
)
)
)
)
 (begin (if (not (equal? rile (quote ()
)
)
)
 (begin (let ((rileMap rile)
)
 (begin (if (string=? (hash-table-ref/default rileMap "cl" (quote ()
)
)
 "R")
 (begin (ret3 (node "R" (node "B" (hash-table-ref/default m "le" (quote ()
)
)
 (hash-table-ref/default m "aa" (quote ()
)
)
 (hash-table-ref/default rileMap "le" (quote ()
)
)
)
 (hash-table-ref/default rileMap "aa" (quote ()
)
)
 (node "B" (hash-table-ref/default rileMap "ri" (quote ()
)
)
 (hash-table-ref/default riMap "aa" (quote ()
)
)
 (hash-table-ref/default riMap "ri" (quote ()
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (let ((riri (hash-table-ref/default riMap "ri" (quote ()
)
)
)
)
 (begin (if (not (equal? riri (quote ()
)
)
)
 (begin (let ((ririMap riri)
)
 (begin (if (string=? (hash-table-ref/default ririMap "cl" (quote ()
)
)
 "R")
 (begin (ret3 (node "R" (node "B" (hash-table-ref/default m "le" (quote ()
)
)
 (hash-table-ref/default m "aa" (quote ()
)
)
 (hash-table-ref/default riMap "le" (quote ()
)
)
)
 (hash-table-ref/default riMap "aa" (quote ()
)
)
 (node "B" (hash-table-ref/default ririMap "le" (quote ()
)
)
 (hash-table-ref/default ririMap "aa" (quote ()
)
)
 (hash-table-ref/default ririMap "ri" (quote ()
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (ret3 t)
)
)
)
)
)
)
)
)
)
)
 (define (ins tr x)
 (call/cc (lambda (ret4)
 (begin (if (equal? tr (quote ()
)
)
 (begin (ret4 (node "R" (quote ()
)
 x (quote ()
)
)
)
)
 (quote ()
)
)
 (if (_lt x (cond ((string? tr)
 (substring tr "aa" (+ "aa" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "aa")
)
 (else (list-ref tr "aa")
)
)
)
 (begin (ret4 (balance (node (cond ((string? tr)
 (substring tr "cl" (+ "cl" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "cl")
)
 (else (list-ref tr "cl")
)
)
 (ins (cond ((string? tr)
 (substring tr "le" (+ "le" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "le")
)
 (else (list-ref tr "le")
)
)
 x)
 (cond ((string? tr)
 (substring tr "aa" (+ "aa" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "aa")
)
 (else (list-ref tr "aa")
)
)
 (cond ((string? tr)
 (substring tr "ri" (+ "ri" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "ri")
)
 (else (list-ref tr "ri")
)
)
)
)
)
)
 (quote ()
)
)
 (if (_gt x (cond ((string? tr)
 (substring tr "aa" (+ "aa" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "aa")
)
 (else (list-ref tr "aa")
)
)
)
 (begin (ret4 (balance (node (cond ((string? tr)
 (substring tr "cl" (+ "cl" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "cl")
)
 (else (list-ref tr "cl")
)
)
 (cond ((string? tr)
 (substring tr "le" (+ "le" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "le")
)
 (else (list-ref tr "le")
)
)
 (cond ((string? tr)
 (substring tr "aa" (+ "aa" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "aa")
)
 (else (list-ref tr "aa")
)
)
 (ins (cond ((string? tr)
 (substring tr "ri" (+ "ri" 1)
)
)
 ((hash-table? tr)
 (hash-table-ref tr "ri")
)
 (else (list-ref tr "ri")
)
)
 x)
)
)
)
)
 (quote ()
)
)
 (ret4 tr)
)
)
)
)
 (define (insert tr x)
 (call/cc (lambda (ret5)
 (let ((t (ins tr x)
)
)
 (begin (if (equal? t (quote ()
)
)
 (begin (ret5 (quote ()
)
)
)
 (quote ()
)
)
 (let ((m t)
)
 (begin (ret5 (node "B" (hash-table-ref/default m "le" (quote ()
)
)
 (hash-table-ref/default m "aa" (quote ()
)
)
 (hash-table-ref/default m "ri" (quote ()
)
)
)
)
)
)
)
)
)
)
)
 (define tr (quote ()
)
)
 (define i 1)
 (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (<= i 16)
 (begin (set! tr (insert tr i)
)
 (set! i (+ i 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (display (to-str (treeString tr)
)
)
 (newline)
 (let ((end9 (now)
)
)
 (let ((dur10 (quotient (- end9 start8)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur10)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
