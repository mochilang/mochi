;; Generated on 2025-08-03 09:40 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start11 (now))) (begin (define (listToStringInts xs) (call/cc (lambda (ret1) (let ((s "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs)))) (begin (set! s (string-append s (to-str (let ((v4 (list-ref xs i))) (cond ((string? v4) (inexact->exact (floor (string->number v4)))) ((boolean? v4) (if v4 1 0)) (else (inexact->exact (floor v4)))))))) (if (_lt i (- (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs))) 1)) (begin (set! s (string-append s " "))) (quote ())) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 (string-append s "]"))))))))) (define (deconv g f) (call/cc (lambda (ret5) (let ((h (_list))) (begin (let ((n 0)) (begin (let ((hn (_add (- (cond ((string? g) (string-length g)) ((hash-table? g) (hash-table-size g)) (else (length g))) (cond ((string? f) (string-length f)) ((hash-table? f) (hash-table-size f)) (else (length f)))) 1))) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda () (if (< n hn) (begin (let ((v (list-ref g n))) (begin (let ((lower 0)) (begin (if (>= n (cond ((string? f) (string-length f)) ((hash-table? f) (hash-table-size f)) (else (length f)))) (begin (set! lower (_add (- n (cond ((string? f) (string-length f)) ((hash-table? f) (hash-table-size f)) (else (length f)))) 1))) (quote ())) (let ((i lower)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< i n) (begin (set! v (- v (* (list-ref h i) (list-ref f (- n i))))) (set! i (+ i 1)) (loop8)) (quote ()))))) (loop8)))) (set! v (/ v (list-ref f 0))) (set! h (append h (_list v))) (set! n (+ n 1)))))))) (loop6)) (quote ()))))) (loop6)))) (ret5 h)))))))))) (define (main) (call/cc (lambda (ret10) (let ((h (_list (- 8.0) (- 9.0) (- 3.0) (- 1.0) (- 6.0) 7.0))) (begin (let ((f (_list (- 3.0) (- 6.0) (- 1.0) 8.0 (- 6.0) 3.0 (- 1.0) (- 9.0) (- 9.0) 3.0 (- 2.0) 5.0 2.0 (- 2.0) (- 7.0) (- 1.0)))) (begin (let ((g (_list 24.0 75.0 71.0 (- 34.0) 3.0 22.0 (- 45.0) 23.0 245.0 25.0 52.0 25.0 (- 67.0) (- 96.0) 96.0 31.0 55.0 36.0 29.0 (- 43.0) (- 7.0)))) (begin (_display (to-str (listToStringInts h))) (newline) (_display (to-str (listToStringInts (deconv g f)))) (newline) (_display (to-str (listToStringInts f))) (newline) (_display (to-str (listToStringInts (deconv g h)))) (newline)))))))))) (main) (let ((end12 (now))) (let ((dur13 (quotient (- end12 start11) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur13) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
