;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (pad2 n)
 (call/cc (lambda (ret1)
 (begin (if (< n 10)
 (begin (ret1 (string-append "0" (to-str n)
)
)
)
 (quote ()
)
)
 (ret1 (to-str n)
)
)
)
)
)
(define (weekdayName z)
 (call/cc (lambda (ret2)
 (let ((names (_list "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")
)
)
 (begin (ret2 (list-ref names (modulo (+ z 4)
 7)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret3)
 (let ((ts (let ((v4 (quotient (now)
 1000000000)
)
)
 (cond ((string? v4)
 (inexact->exact (floor (string->number v4)
)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact (floor v4)
)
)
)
)
)
)
 (begin (let ((days (let ((v5 (quotient ts 86400)
)
)
 (cond ((string? v5)
 (inexact->exact (floor (string->number v5)
)
)
)
 ((boolean? v5)
 (if v5 1 0)
)
 (else (inexact->exact (floor v5)
)
)
)
)
)
)
 (begin (let ((z (+ days 719468)
)
)
 (begin (let ((era (let ((v6 (quotient z 146097)
)
)
 (cond ((string? v6)
 (inexact->exact (floor (string->number v6)
)
)
)
 ((boolean? v6)
 (if v6 1 0)
)
 (else (inexact->exact (floor v6)
)
)
)
)
)
)
 (begin (let ((doe (- z (* era 146097)
)
)
)
 (begin (let ((yoe (quotient (- (_add (- doe (quotient doe 1460)
)
 (quotient doe 36524)
)
 (quotient doe 146096)
)
 (let ((v7 365)
)
 (cond ((string? v7)
 (inexact->exact (floor (string->number v7)
)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (inexact->exact (floor v7)
)
)
)
)
)
)
)
 (begin (let ((y (_add yoe (* era 400)
)
)
)
 (begin (let ((doy (- doe (- (_add (* 365 yoe)
 (quotient yoe 4)
)
 (quotient yoe 100)
)
)
)
)
 (begin (let ((mp (quotient (_add (* 5 doy)
 2)
 (let ((v8 153)
)
 (cond ((string? v8)
 (inexact->exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact (floor v8)
)
)
)
)
)
)
)
 (begin (let ((d (let ((v10 (_add (- doy (quotient (_add (* 153 mp)
 2)
 (let ((v9 5)
)
 (cond ((string? v9)
 (inexact->exact (floor (string->number v9)
)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (inexact->exact (floor v9)
)
)
)
)
)
)
 1)
)
)
 (cond ((string? v10)
 (inexact->exact (floor (string->number v10)
)
)
)
 ((boolean? v10)
 (if v10 1 0)
)
 (else (inexact->exact (floor v10)
)
)
)
)
)
)
 (begin (let ((m (let ((v11 (+ mp 3)
)
)
 (cond ((string? v11)
 (inexact->exact (floor (string->number v11)
)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact (floor v11)
)
)
)
)
)
)
 (begin (if (> m 12)
 (begin (set! y (+ y 1)
)
 (set! m (- m 12)
)
)
 (quote ()
)
)
 (let ((iso (string-append (string-append (string-append (string-append (to-str y)
 "-")
 (pad2 m)
)
 "-")
 (pad2 d)
)
)
)
 (begin (_display (to-str iso)
)
 (newline)
 (let ((months (_list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December")
)
)
 (begin (let ((line (string-append (string-append (string-append (string-append (string-append (string-append (weekdayName days)
 ", ")
 (list-ref months (- m 1)
)
)
 " ")
 (to-str d)
)
 ", ")
 (to-str y)
)
)
)
 (begin (_display (to-str line)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
