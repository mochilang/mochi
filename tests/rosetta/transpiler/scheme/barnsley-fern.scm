;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define xMin (- 2.182)
)
(define xMax 2.6558)
(define yMin 0.0)
(define yMax 9.9983)
(define width 60)
(define nIter 10000)
(define dx (- xMax xMin)
)
(define dy (- yMax yMin)
)
(define height (let ((v1 (/ (* width dy)
 dx)
)
)
 (cond ((string? v1)
 (inexact->exact (string->number v1)
)
)
 ((boolean? v1)
 (if v1 1 0)
)
 (else (inexact->exact v1)
)
)
)
)
(define grid (_list)
)
(define row 0)
(call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< row height)
 (begin (let ((line (_list)
)
)
 (begin (let ((col 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< col width)
 (begin (set! line (append line (_list " ")
)
)
 (set! col (+ col 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! grid (append grid (_list line)
)
)
 (set! row (+ row 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
(define seed 1)
(define (randInt s n)
 (call/cc (lambda (ret6)
 (let ((next (modulo (+ (* s 1664525)
 1013904223)
 2147483647)
)
)
 (begin (ret6 (_list next (modulo next n)
)
)
)
)
)
)
)
(define x 0.0)
(define y 0.0)
(define ix (let ((v7 (/ (* width (- x xMin)
)
 dx)
)
)
 (cond ((string? v7)
 (inexact->exact (string->number v7)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (inexact->exact v7)
)
)
)
)
(define iy (let ((v8 (/ (* height (- yMax y)
)
 dy)
)
)
 (cond ((string? v8)
 (inexact->exact (string->number v8)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact v8)
)
)
)
)
(if (and (and (and (>= ix 0)
 (< ix width)
)
 (>= iy 0)
)
 (< iy height)
)
 (begin (list-set! (list-ref grid iy)
 ix "*")
)
 (quote ()
)
)
(define i 0)
(call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i nIter)
 (begin (let ((res (randInt seed 100)
)
)
 (begin (set! seed (cond ((string? res)
 (substring res 0 (+ 0 1)
)
)
 ((hash-table? res)
 (hash-table-ref res 0)
)
 (else (list-ref res 0)
)
)
)
 (let ((r (cond ((string? res)
 (substring res 1 (+ 1 1)
)
)
 ((hash-table? res)
 (hash-table-ref res 1)
)
 (else (list-ref res 1)
)
)
)
)
 (begin (if (< r 85)
 (begin (let ((nx (+ (* 0.85 x)
 (* 0.04 y)
)
)
)
 (begin (let ((ny (+ (+ (* (- 0.04)
 x)
 (* 0.85 y)
)
 1.6)
)
)
 (begin (set! x nx)
 (set! y ny)
)
)
)
)
)
 (if (< r 92)
 (begin (let ((nx (- (* 0.2 x)
 (* 0.26 y)
)
)
)
 (begin (let ((ny (+ (+ (* 0.23 x)
 (* 0.22 y)
)
 1.6)
)
)
 (begin (set! x nx)
 (set! y ny)
)
)
)
)
)
 (if (< r 99)
 (begin (let ((nx (+ (* (- 0.15)
 x)
 (* 0.28 y)
)
)
)
 (begin (let ((ny (+ (+ (* 0.26 x)
 (* 0.24 y)
)
 0.44)
)
)
 (begin (set! x nx)
 (set! y ny)
)
)
)
)
)
 (begin (set! x 0.0)
 (set! y (* 0.16 y)
)
)
)
)
)
 (set! ix (let ((v11 (/ (* width (- x xMin)
)
 dx)
)
)
 (cond ((string? v11)
 (inexact->exact (string->number v11)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact v11)
)
)
)
)
 (set! iy (let ((v12 (/ (* height (- yMax y)
)
 dy)
)
)
 (cond ((string? v12)
 (inexact->exact (string->number v12)
)
)
 ((boolean? v12)
 (if v12 1 0)
)
 (else (inexact->exact v12)
)
)
)
)
 (if (and (and (and (>= ix 0)
 (< ix width)
)
 (>= iy 0)
)
 (< iy height)
)
 (begin (list-set! (list-ref grid iy)
 ix "*")
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
(set! row 0)
(call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< row height)
 (begin (let ((line "")
)
 (begin (let ((col 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< col width)
 (begin (set! line (string-append line (cond ((string? (list-ref grid row)
)
 (substring (list-ref grid row)
 col (+ col 1)
)
)
 ((hash-table? (list-ref grid row)
)
 (hash-table-ref (list-ref grid row)
 col)
)
 (else (list-ref (list-ref grid row)
 col)
)
)
)
)
 (set! col (+ col 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! row (+ row 1)
)
)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
