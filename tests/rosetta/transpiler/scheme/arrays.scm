;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (listStr xs)
 (call/cc (lambda (ret1)
 (let ((s "[")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (set! s (string-append s (to-str (list-ref xs i)
)
)
)
 (if (< (+ i 1)
 (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (set! s (string-append s " ")
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (set! s (string-append s "]")
)
 (ret1 s)
)
)
)
)
)
)
)
(define a (list 0 0 0 0 0)
)
(display (to-str (string-append "len(a)
 = " (to-str (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
)
)
)
(newline)
(display (to-str (string-append "a = " (listStr a)
)
)
)
(newline)
(list-set! a 0 3)
(display (to-str (string-append "a = " (listStr a)
)
)
)
(newline)
(display (to-str (string-append "a[0] = " (to-str (list-ref a 0)
)
)
)
)
(newline)
(define s (take (drop a 0)
 (- 4 0)
)
)
(define cap_s 5)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(display (to-str (string-append (string-append (string-append "len(s)
 = " (to-str (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 "  cap(s)
 = ")
 (to-str cap_s)
)
)
)
(newline)
(set! s (take (drop a 0)
 (- 5 0)
)
)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(list-set! a 0 22)
(list-set! s 0 22)
(display (to-str (string-append "a = " (listStr a)
)
)
)
(newline)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(set! s (append s (list 4)
)
)
(set! s (append s (list 5)
)
)
(set! s (append s (list 6)
)
)
(set! cap_s 10)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(display (to-str (string-append (string-append (string-append "len(s)
 = " (to-str (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 "  cap(s)
 = ")
 (to-str cap_s)
)
)
)
(newline)
(list-set! a 4 (- 1)
)
(display (to-str (string-append "a = " (listStr a)
)
)
)
(newline)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(set! s (list)
)
(call/cc (lambda (break5)
 (letrec ((loop4 (lambda (i)
 (if (< i 8)
 (begin (begin (set! s (append s (list 0)
)
)
)
 (loop4 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop4 0)
)
)
)
(set! cap_s 8)
(display (to-str (string-append "s = " (listStr s)
)
)
)
(newline)
(display (to-str (string-append (string-append (string-append "len(s)
 = " (to-str (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 "  cap(s)
 = ")
 (to-str cap_s)
)
)
)
(newline)
