;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (det m)
 (call/cc (lambda (ret1)
 (let ((n (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
)
 (begin (if (equal? n 1)
 (begin (ret1 (cond ((string? (list-ref m 0)
)
 (substring (list-ref m 0)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref m 0)
)
 (hash-table-ref (list-ref m 0)
 0)
)
 (else (list-ref (list-ref m 0)
 0)
)
)
)
)
 (quote ()
)
)
 (let ((total 0.0)
)
 (begin (let ((sign 1.0)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< c n)
 (begin (let ((sub (_list)
)
)
 (begin (let ((r 1)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< r n)
 (begin (let ((row (_list)
)
)
 (begin (let ((cc 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< cc n)
 (begin (if (not (equal? cc c)
)
 (begin (set! row (append row (_list (cond ((string? (list-ref m r)
)
 (substring (list-ref m r)
 cc (+ cc 1)
)
)
 ((hash-table? (list-ref m r)
)
 (hash-table-ref (list-ref m r)
 cc)
)
 (else (list-ref (list-ref m r)
 cc)
)
)
)
)
)
)
 (quote ()
)
)
 (set! cc (+ cc 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (set! sub (append sub (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! total (_add total (* (* sign (cond ((string? (list-ref m 0)
)
 (substring (list-ref m 0)
 c (+ c 1)
)
)
 ((hash-table? (list-ref m 0)
)
 (hash-table-ref (list-ref m 0)
 c)
)
 (else (list-ref (list-ref m 0)
 c)
)
)
)
 (det sub)
)
)
)
 (set! sign (* sign (- 1.0)
)
)
 (set! c (+ c 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 total)
)
)
)
)
)
)
)
)
)
)
)
(define (replaceCol m col v)
 (call/cc (lambda (ret8)
 (let ((res (_list)
)
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< r (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
 (begin (let ((row (_list)
)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< c (cond ((string? (list-ref m r)
)
 (string-length (list-ref m r)
)
)
 ((hash-table? (list-ref m r)
)
 (hash-table-size (list-ref m r)
)
)
 (else (length (list-ref m r)
)
)
)
)
 (begin (if (equal? c col)
 (begin (set! row (append row (_list (list-ref v r)
)
)
)
)
 (begin (set! row (append row (_list (cond ((string? (list-ref m r)
)
 (substring (list-ref m r)
 c (+ c 1)
)
)
 ((hash-table? (list-ref m r)
)
 (hash-table-ref (list-ref m r)
 c)
)
 (else (list-ref (list-ref m r)
 c)
)
)
)
)
)
)
)
 (set! c (+ c 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (set! res (append res (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (ret8 res)
)
)
)
)
)
)
)
(define m (_list (_list 2.0 (- 1.0)
 5.0 1.0)
 (_list 3.0 2.0 2.0 (- 6.0)
)
 (_list 1.0 3.0 3.0 (- 1.0)
)
 (_list 5.0 (- 2.0)
 (- 3.0)
 3.0)
)
)
(define v (_list (- 3.0)
 (- 32.0)
 (- 47.0)
 49.0)
)
(define d (det m)
)
(define x (_list)
)
(define i 0)
(call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i (cond ((string? v)
 (string-length v)
)
 ((hash-table? v)
 (hash-table-size v)
)
 (else (length v)
)
)
)
 (begin (let ((mc (replaceCol m i v)
)
)
 (begin (set! x (append x (_list (/ (det mc)
 d)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
(define s "[")
(define j 0)
(call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< j (cond ((string? x)
 (string-length x)
)
 ((hash-table? x)
 (hash-table-size x)
)
 (else (length x)
)
)
)
 (begin (set! s (string-append s (to-str (list-ref x j)
)
)
)
 (if (_lt j (- (cond ((string? x)
 (string-length x)
)
 ((hash-table? x)
 (hash-table-size x)
)
 (else (length x)
)
)
 1)
)
 (begin (set! s (string-append s " ")
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
(set! s (string-append s "]")
)
(_display (to-str s)
)
(newline)
