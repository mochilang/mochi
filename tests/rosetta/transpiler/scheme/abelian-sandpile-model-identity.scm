;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start28 (now)
)
)
 (begin (define (neighborsList)
 (call/cc (lambda (ret1)
 (ret1 (list (list 1 3)
 (list 0 2 4)
 (list 1 5)
 (list 0 4 6)
 (list 1 3 5 7)
 (list 2 4 8)
 (list 3 7)
 (list 4 6 8)
 (list 5 7)
)
)
)
)
)
 (define (plus a b)
 (call/cc (lambda (ret2)
 (let ((res (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
 (begin (set! res (append res (list (+ (list-ref a i)
 (list-ref b i)
)
)
)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote nil)
)
)
)
)
 (loop3)
)
)
)
 (ret2 res)
)
)
)
)
)
)
)
 (define (isStable p)
 (call/cc (lambda (ret5)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (if (> v 3)
 (begin (ret5 #f)
)
 (quote nil)
)
)
)
 (loop6 (cdr xs)
)
)
)
)
)
)
 (loop6 p)
)
)
)
 (ret5 #t)
)
)
)
)
 (define (topple p)
 (call/cc (lambda (ret8)
 (let ((neighbors (neighborsList)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
)
 (begin (if (> (list-ref p i)
 3)
 (begin (list-set! p i (- (list-ref p i)
 4)
)
 (let ((nbs (list-ref neighbors i)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((j (car xs)
)
)
 (begin (list-set! p j (+ (list-ref p j)
 1)
)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 nbs)
)
)
)
 (ret8 0)
)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (ret8 0)
)
)
)
)
)
)
)
 (define (pileString p)
 (call/cc (lambda (ret13)
 (let ((s "")
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< r 3)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< c 3)
 (begin (set! s (string-append (string-append s (to-str (list-ref p (+ (* 3 r)
 c)
)
)
)
 " ")
)
 (set! c (+ c 1)
)
 (loop16)
)
 (quote nil)
)
)
)
)
 (loop16)
)
)
)
 (set! s (string-append s "\n")
)
 (set! r (+ r 1)
)
)
)
 (loop14)
)
 (quote nil)
)
)
)
)
 (loop14)
)
)
)
 (ret13 s)
)
)
)
)
)
)
)
 (display (to-str "Avalanche of topplings:\n")
)
 (newline)
 (define s4 (list 4 3 3 3 1 2 0 2 3)
)
 (display (to-str (pileString s4)
)
)
 (newline)
 (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (not (isStable s4)
)
 (begin (topple s4)
 (display (to-str (pileString s4)
)
)
 (newline)
 (loop18)
)
 (quote nil)
)
)
)
)
 (loop18)
)
)
)
 (display (to-str "Commutative additions:\n")
)
 (newline)
 (define s1 (list 1 2 0 2 1 1 0 1 3)
)
 (define s2 (list 2 1 3 1 0 1 0 1 0)
)
 (define s3_a (plus s1 s2)
)
 (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (not (isStable s3_a)
)
 (begin (topple s3_a)
 (loop20)
)
 (quote nil)
)
)
)
)
 (loop20)
)
)
)
 (define s3_b (plus s2 s1)
)
 (call/cc (lambda (break23)
 (letrec ((loop22 (lambda ()
 (if (not (isStable s3_b)
)
 (begin (topple s3_b)
 (loop22)
)
 (quote nil)
)
)
)
)
 (loop22)
)
)
)
 (display (to-str (string-append (string-append (string-append (string-append (pileString s1)
 "\nplus\n\n")
 (pileString s2)
)
 "\nequals\n\n")
 (pileString s3_a)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (string-append "and\n\n" (pileString s2)
)
 "\nplus\n\n")
 (pileString s1)
)
 "\nalso equals\n\n")
 (pileString s3_b)
)
)
)
 (newline)
 (display (to-str "Addition of identity sandpile:\n")
)
 (newline)
 (define s3 (list 3 3 3 3 3 3 3 3 3)
)
 (define s3_id (list 2 1 2 1 0 1 2 1 2)
)
 (define s4b (plus s3 s3_id)
)
 (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (not (isStable s4b)
)
 (begin (topple s4b)
 (loop24)
)
 (quote nil)
)
)
)
)
 (loop24)
)
)
)
 (display (to-str (string-append (string-append (string-append (string-append (pileString s3)
 "\nplus\n\n")
 (pileString s3_id)
)
 "\nequals\n\n")
 (pileString s4b)
)
)
)
 (newline)
 (display (to-str "Addition of identities:\n")
)
 (newline)
 (define s5 (plus s3_id s3_id)
)
 (call/cc (lambda (break27)
 (letrec ((loop26 (lambda ()
 (if (not (isStable s5)
)
 (begin (topple s5)
 (loop26)
)
 (quote nil)
)
)
)
)
 (loop26)
)
)
)
 (display (to-str (string-append (string-append (string-append (string-append (pileString s3_id)
 "\nplus\n\n")
 (pileString s3_id)
)
 "\nequals\n\n")
 (pileString s5)
)
)
)
 (newline)
 (let ((end29 (now)
)
)
 (let ((dur30 (quotient (- end29 start28)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur30)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
