;; Generated on 2025-07-25 19:02 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi io))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(let ((start67 (now)
)
)
 (begin (define SIZE 4)
 (define (newBoard)
 (call/cc (lambda (ret1)
 (let ((b (list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< y SIZE)
 (begin (let ((row (list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< x SIZE)
 (begin (set! row (append row (list 0)
)
)
 (set! x (+ x 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! b (append b (list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (alist->hash-table (list (cons "cells" b)
)
)
)
)
)
)
)
)
)
)
 (define (spawnTile b)
 (call/cc (lambda (ret6)
 (let ((grid (hash-table-ref b "cells")
)
)
 (begin (let ((empty (list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< y SIZE)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< x SIZE)
 (begin (if (equal? (cond ((string? (list-ref grid y)
)
 (string-ref (list-ref grid y)
 x)
)
 ((hash-table? (list-ref grid y)
)
 (hash-table-ref (list-ref grid y)
 x)
)
 (else (list-ref (list-ref grid y)
 x)
)
)
 0)
 (begin (set! empty (append empty (list (list x y)
)
)
)
)
 (quote ()
)
)
 (set! x (+ x 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (set! y (+ y 1)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (if (equal? (cond ((string? empty)
 (string-length empty)
)
 ((hash-table? empty)
 (hash-table-size empty)
)
 (else (length empty)
)
)
 0)
 (begin (ret6 (alist->hash-table (list (cons "board" b)
 (cons "full" #t)
)
)
)
)
 (quote ()
)
)
 (let ((idx (modulo (now)
 (cond ((string? empty)
 (string-length empty)
)
 ((hash-table? empty)
 (hash-table-size empty)
)
 (else (length empty)
)
)
)
)
)
 (begin (let ((cell (list-ref empty idx)
)
)
 (begin (let ((val 4)
)
 (begin (if (< (modulo (now)
 10)
 9)
 (begin (set! val 2)
)
 (quote ()
)
)
 (list-set! (list-ref grid (list-ref cell 1)
)
 (list-ref cell 0)
 val)
 (ret6 (alist->hash-table (list (cons "board" (alist->hash-table (list (cons "cells" grid)
)
)
)
 (cons "full" (equal? (cond ((string? empty)
 (string-length empty)
)
 ((hash-table? empty)
 (hash-table-size empty)
)
 (else (length empty)
)
)
 1)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (pad n)
 (call/cc (lambda (ret11)
 (let ((s (to-str n)
)
)
 (begin (let ((pad (- 4 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (let ((i 0)
)
 (begin (let ((out "")
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i pad)
 (begin (set! out (string-append out " ")
)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (ret11 (string-append out s)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (draw b score)
 (call/cc (lambda (ret14)
 (begin (display (to-str (string-append "Score: " (to-str score)
)
)
)
 (newline)
 (let ((y 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< y SIZE)
 (begin (display (to-str "+----+----+----+----+")
)
 (newline)
 (let ((line "|")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< x SIZE)
 (begin (let ((v (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
)
)
 (begin (if (equal? v 0)
 (begin (set! line (string-append line "    |")
)
)
 (begin (set! line (string-append (string-append line (pad v)
)
 "|")
)
)
)
 (set! x (+ x 1)
)
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! y (+ y 1)
)
)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (display (to-str "+----+----+----+----+")
)
 (newline)
 (display (to-str "W=Up S=Down A=Left D=Right Q=Quit")
)
 (newline)
)
)
)
)
)
)
 (define (reverseRow r)
 (call/cc (lambda (ret19)
 (let ((out (list)
)
)
 (begin (let ((i (- (cond ((string? r)
 (string-length r)
)
 ((hash-table? r)
 (hash-table-size r)
)
 (else (length r)
)
)
 1)
)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (>= i 0)
 (begin (set! out (append out (list (list-ref r i)
)
)
)
 (set! i (- i 1)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (ret19 out)
)
)
)
)
)
)
)
 (define (slideLeft row)
 (call/cc (lambda (ret22)
 (let ((xs (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< i (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (if (not (equal? (list-ref row i)
 0)
)
 (begin (set! xs (append xs (list (list-ref row i)
)
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (let ((res (list)
)
)
 (begin (let ((gain 0)
)
 (begin (set! i 0)
 (call/cc (lambda (break26)
 (letrec ((loop25 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (if (and (< (+ i 1)
 (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (equal? (list-ref xs i)
 (list-ref xs (+ i 1)
)
)
)
 (begin (let ((v (* (list-ref xs i)
 2)
)
)
 (begin (set! gain (+ gain v)
)
 (set! res (append res (list v)
)
)
 (set! i (+ i 2)
)
)
)
)
 (begin (set! res (append res (list (list-ref xs i)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop25)
)
 (quote ()
)
)
)
)
)
 (loop25)
)
)
)
 (call/cc (lambda (break28)
 (letrec ((loop27 (lambda ()
 (if (< (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
 SIZE)
 (begin (set! res (append res (list 0)
)
)
 (loop27)
)
 (quote ()
)
)
)
)
)
 (loop27)
)
)
)
 (ret22 (alist->hash-table (list (cons "row" res)
 (cons "gain" gain)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (moveLeft b score)
 (call/cc (lambda (ret29)
 (let ((grid (hash-table-ref b "cells")
)
)
 (begin (let ((moved #f)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< y SIZE)
 (begin (let ((r (slideLeft (list-ref grid y)
)
)
)
 (begin (let ((new (hash-table-ref r "row")
)
)
 (begin (set! score (+ score (hash-table-ref r "gain")
)
)
 (let ((x 0)
)
 (begin (call/cc (lambda (break33)
 (letrec ((loop32 (lambda ()
 (if (< x SIZE)
 (begin (if (not (equal? (cond ((string? (list-ref grid y)
)
 (string-ref (list-ref grid y)
 x)
)
 ((hash-table? (list-ref grid y)
)
 (hash-table-ref (list-ref grid y)
 x)
)
 (else (list-ref (list-ref grid y)
 x)
)
)
 (list-ref new x)
)
)
 (begin (set! moved #t)
)
 (quote ()
)
)
 (list-set! (list-ref grid y)
 x (list-ref new x)
)
 (set! x (+ x 1)
)
 (loop32)
)
 (quote ()
)
)
)
)
)
 (loop32)
)
)
)
 (set! y (+ y 1)
)
)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
 (ret29 (alist->hash-table (list (cons "board" (alist->hash-table (list (cons "cells" grid)
)
)
)
 (cons "score" score)
 (cons "moved" moved)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (moveRight b score)
 (call/cc (lambda (ret34)
 (let ((grid (hash-table-ref b "cells")
)
)
 (begin (let ((moved #f)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break36)
 (letrec ((loop35 (lambda ()
 (if (< y SIZE)
 (begin (let ((rev (reverseRow (list-ref grid y)
)
)
)
 (begin (let ((r (slideLeft rev)
)
)
 (begin (set! rev (hash-table-ref r "row")
)
 (set! score (+ score (hash-table-ref r "gain")
)
)
 (set! rev (reverseRow rev)
)
 (let ((x 0)
)
 (begin (call/cc (lambda (break38)
 (letrec ((loop37 (lambda ()
 (if (< x SIZE)
 (begin (if (not (equal? (cond ((string? (list-ref grid y)
)
 (string-ref (list-ref grid y)
 x)
)
 ((hash-table? (list-ref grid y)
)
 (hash-table-ref (list-ref grid y)
 x)
)
 (else (list-ref (list-ref grid y)
 x)
)
)
 (list-ref rev x)
)
)
 (begin (set! moved #t)
)
 (quote ()
)
)
 (list-set! (list-ref grid y)
 x (list-ref rev x)
)
 (set! x (+ x 1)
)
 (loop37)
)
 (quote ()
)
)
)
)
)
 (loop37)
)
)
)
 (set! y (+ y 1)
)
)
)
)
)
)
)
 (loop35)
)
 (quote ()
)
)
)
)
)
 (loop35)
)
)
)
 (ret34 (alist->hash-table (list (cons "board" (alist->hash-table (list (cons "cells" grid)
)
)
)
 (cons "score" score)
 (cons "moved" moved)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (getCol b x)
 (call/cc (lambda (ret39)
 (let ((col (list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break41)
 (letrec ((loop40 (lambda ()
 (if (< y SIZE)
 (begin (set! col (append col (list (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
)
)
)
 (set! y (+ y 1)
)
 (loop40)
)
 (quote ()
)
)
)
)
)
 (loop40)
)
)
)
 (ret39 col)
)
)
)
)
)
)
)
 (define (setCol b x col)
 (call/cc (lambda (ret42)
 (let ((rows (hash-table-ref b "cells")
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break44)
 (letrec ((loop43 (lambda ()
 (if (< y SIZE)
 (begin (let ((row (list-ref rows y)
)
)
 (begin (list-set! row x (list-ref col y)
)
 (list-set! rows y row)
 (set! y (+ y 1)
)
)
)
 (loop43)
)
 (quote ()
)
)
)
)
)
 (loop43)
)
)
)
 (hash-table-set! b "cells" rows)
)
)
)
)
)
)
)
 (define (moveUp b score)
 (call/cc (lambda (ret45)
 (let ((grid (hash-table-ref b "cells")
)
)
 (begin (let ((moved #f)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break47)
 (letrec ((loop46 (lambda ()
 (if (< x SIZE)
 (begin (let ((col (getCol b x)
)
)
 (begin (let ((r (slideLeft col)
)
)
 (begin (let ((new (hash-table-ref r "row")
)
)
 (begin (set! score (+ score (hash-table-ref r "gain")
)
)
 (let ((y 0)
)
 (begin (call/cc (lambda (break49)
 (letrec ((loop48 (lambda ()
 (if (< y SIZE)
 (begin (if (not (equal? (cond ((string? (list-ref grid y)
)
 (string-ref (list-ref grid y)
 x)
)
 ((hash-table? (list-ref grid y)
)
 (hash-table-ref (list-ref grid y)
 x)
)
 (else (list-ref (list-ref grid y)
 x)
)
)
 (list-ref new y)
)
)
 (begin (set! moved #t)
)
 (quote ()
)
)
 (list-set! (list-ref grid y)
 x (list-ref new y)
)
 (set! y (+ y 1)
)
 (loop48)
)
 (quote ()
)
)
)
)
)
 (loop48)
)
)
)
 (set! x (+ x 1)
)
)
)
)
)
)
)
)
)
 (loop46)
)
 (quote ()
)
)
)
)
)
 (loop46)
)
)
)
 (ret45 (alist->hash-table (list (cons "board" (alist->hash-table (list (cons "cells" grid)
)
)
)
 (cons "score" score)
 (cons "moved" moved)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (moveDown b score)
 (call/cc (lambda (ret50)
 (let ((grid (hash-table-ref b "cells")
)
)
 (begin (let ((moved #f)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break52)
 (letrec ((loop51 (lambda ()
 (if (< x SIZE)
 (begin (let ((col (reverseRow (getCol b x)
)
)
)
 (begin (let ((r (slideLeft col)
)
)
 (begin (set! col (hash-table-ref r "row")
)
 (set! score (+ score (hash-table-ref r "gain")
)
)
 (set! col (reverseRow col)
)
 (let ((y 0)
)
 (begin (call/cc (lambda (break54)
 (letrec ((loop53 (lambda ()
 (if (< y SIZE)
 (begin (if (not (equal? (cond ((string? (list-ref grid y)
)
 (string-ref (list-ref grid y)
 x)
)
 ((hash-table? (list-ref grid y)
)
 (hash-table-ref (list-ref grid y)
 x)
)
 (else (list-ref (list-ref grid y)
 x)
)
)
 (list-ref col y)
)
)
 (begin (set! moved #t)
)
 (quote ()
)
)
 (list-set! (list-ref grid y)
 x (list-ref col y)
)
 (set! y (+ y 1)
)
 (loop53)
)
 (quote ()
)
)
)
)
)
 (loop53)
)
)
)
 (set! x (+ x 1)
)
)
)
)
)
)
)
 (loop51)
)
 (quote ()
)
)
)
)
)
 (loop51)
)
)
)
 (ret50 (alist->hash-table (list (cons "board" (alist->hash-table (list (cons "cells" grid)
)
)
)
 (cons "score" score)
 (cons "moved" moved)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (hasMoves b)
 (call/cc (lambda (ret55)
 (let ((y 0)
)
 (begin (call/cc (lambda (break57)
 (letrec ((loop56 (lambda ()
 (if (< y SIZE)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break59)
 (letrec ((loop58 (lambda ()
 (if (< x SIZE)
 (begin (if (equal? (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
 0)
 (begin (ret55 #t)
)
 (quote ()
)
)
 (if (and (< (+ x 1)
 SIZE)
 (equal? (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
 (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 (+ x 1)
)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 (+ x 1)
)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 (+ x 1)
)
)
)
)
)
 (begin (ret55 #t)
)
 (quote ()
)
)
 (if (and (< (+ y 1)
 SIZE)
 (equal? (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
 (cond ((string? (list-ref (hash-table-ref b "cells")
 (+ y 1)
)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 (+ y 1)
)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 (+ y 1)
)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 (+ y 1)
)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 (+ y 1)
)
 x)
)
)
)
)
 (begin (ret55 #t)
)
 (quote ()
)
)
 (set! x (+ x 1)
)
 (loop58)
)
 (quote ()
)
)
)
)
)
 (loop58)
)
)
)
 (set! y (+ y 1)
)
)
)
 (loop56)
)
 (quote ()
)
)
)
)
)
 (loop56)
)
)
)
 (ret55 #f)
)
)
)
)
)
 (define (has2048 b)
 (call/cc (lambda (ret60)
 (let ((y 0)
)
 (begin (call/cc (lambda (break62)
 (letrec ((loop61 (lambda ()
 (if (< y SIZE)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break64)
 (letrec ((loop63 (lambda ()
 (if (< x SIZE)
 (begin (if (>= (cond ((string? (list-ref (hash-table-ref b "cells")
 y)
)
 (string-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 ((hash-table? (list-ref (hash-table-ref b "cells")
 y)
)
 (hash-table-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
 (else (list-ref (list-ref (hash-table-ref b "cells")
 y)
 x)
)
)
 2048)
 (begin (ret60 #t)
)
 (quote ()
)
)
 (set! x (+ x 1)
)
 (loop63)
)
 (quote ()
)
)
)
)
)
 (loop63)
)
)
)
 (set! y (+ y 1)
)
)
)
 (loop61)
)
 (quote ()
)
)
)
)
)
 (loop61)
)
)
)
 (ret60 #f)
)
)
)
)
)
 (define board (newBoard)
)
 (define r (spawnTile board)
)
 (set! board (hash-table-ref r "board")
)
 (define full (hash-table-ref r "full")
)
 (set! r (spawnTile board)
)
 (set! board (hash-table-ref r "board")
)
 (set! full (hash-table-ref r "full")
)
 (define score 0)
 (draw board score)
 (call/cc (lambda (break66)
 (letrec ((loop65 (lambda ()
 (if #t (begin (display (to-str "Move: ")
)
 (newline)
 (let ((cmd (_input)
)
)
 (begin (let ((moved #f)
)
 (begin (if (or (string=? cmd "a")
 (string=? cmd "A")
)
 (begin (let ((m (moveLeft board score)
)
)
 (begin (set! board (hash-table-ref m "board")
)
 (set! score (hash-table-ref m "score")
)
 (set! moved (hash-table-ref m "moved")
)
)
)
)
 (quote ()
)
)
 (if (or (string=? cmd "d")
 (string=? cmd "D")
)
 (begin (let ((m (moveRight board score)
)
)
 (begin (set! board (hash-table-ref m "board")
)
 (set! score (hash-table-ref m "score")
)
 (set! moved (hash-table-ref m "moved")
)
)
)
)
 (quote ()
)
)
 (if (or (string=? cmd "w")
 (string=? cmd "W")
)
 (begin (let ((m (moveUp board score)
)
)
 (begin (set! board (hash-table-ref m "board")
)
 (set! score (hash-table-ref m "score")
)
 (set! moved (hash-table-ref m "moved")
)
)
)
)
 (quote ()
)
)
 (if (or (string=? cmd "s")
 (string=? cmd "S")
)
 (begin (let ((m (moveDown board score)
)
)
 (begin (set! board (hash-table-ref m "board")
)
 (set! score (hash-table-ref m "score")
)
 (set! moved (hash-table-ref m "moved")
)
)
)
)
 (quote ()
)
)
 (if (or (string=? cmd "q")
 (string=? cmd "Q")
)
 (begin (break66 (quote ()
)
)
)
 (quote ()
)
)
 (if moved (begin (let ((r2 (spawnTile board)
)
)
 (begin (set! board (hash-table-ref r2 "board")
)
 (set! full (hash-table-ref r2 "full")
)
 (if (and full (not (hasMoves board)
)
)
 (begin (draw board score)
 (display (to-str "Game Over")
)
 (newline)
 (break66 (quote ()
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (draw board score)
 (if (has2048 board)
 (begin (display (to-str "You win!")
)
 (newline)
 (break66 (quote ()
)
)
)
 (quote ()
)
)
 (if (not (hasMoves board)
)
 (begin (display (to-str "Game Over")
)
 (newline)
 (break66 (quote ()
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop65)
)
 (quote ()
)
)
)
)
)
 (loop65)
)
)
)
 (let ((end68 (now)
)
)
 (let ((dur69 (quotient (- end68 start67)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur69)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
