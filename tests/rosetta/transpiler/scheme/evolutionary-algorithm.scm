;; Generated on 2025-08-04 08:17 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define target "METHINKS IT IS LIKE A WEASEL")
(define chars "ABCDEFGHIJKLMNOPQRSTUVWXYZ ")
(define seed 1)
(define (randInt s n) (call/cc (lambda (ret1) (let ((next (modulo (_add (* s 1664525) 1013904223) 2147483647))) (begin (ret1 (_list next (modulo next n))))))))
(define (randChar) (call/cc (lambda (ret2) (let ((r (randInt seed (cond ((string? chars) (string-length chars)) ((hash-table? chars) (hash-table-size chars)) (else (length chars)))))) (begin (set! seed (cond ((string? r) (_substring r 0 (+ 0 1))) ((hash-table? r) (hash-table-ref r 0)) (else (list-ref r 0)))) (let ((idx (let ((v3 (cond ((string? r) (_substring r 1 (+ 1 1))) ((hash-table? r) (hash-table-ref r 1)) (else (list-ref r 1))))) (cond ((string? v3) (inexact->exact (floor (string->number v3)))) ((boolean? v3) (if v3 1 0)) (else (inexact->exact (floor v3))))))) (begin (ret2 (_substring chars idx (+ idx 1))))))))))
(define (randomString n) (call/cc (lambda (ret4) (let ((s "")) (begin (let ((i 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< i n) (begin (set! s (string-append s (randChar))) (set! i (+ i 1)) (loop5)) (quote ()))))) (loop5)))) (ret4 s))))))))
(define (fitness s) (call/cc (lambda (ret7) (let ((h 0)) (begin (let ((i 0)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< i (cond ((string? target) (string-length target)) ((hash-table? target) (hash-table-size target)) (else (length target)))) (begin (if (not (string=? (_substring s i (+ i 1)) (_substring target i (+ i 1)))) (begin (set! h (+ h 1))) (quote ())) (set! i (+ i 1)) (loop8)) (quote ()))))) (loop8)))) (ret7 h))))))))
(define (mutate p) (call/cc (lambda (ret10) (let ((m "")) (begin (let ((i 0)) (begin (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< i (cond ((string? p) (string-length p)) ((hash-table? p) (hash-table-size p)) (else (length p)))) (begin (let ((r (randInt seed 20))) (begin (set! seed (cond ((string? r) (_substring r 0 (+ 0 1))) ((hash-table? r) (hash-table-ref r 0)) (else (list-ref r 0)))) (if (equal? (cond ((string? r) (_substring r 1 (+ 1 1))) ((hash-table? r) (hash-table-ref r 1)) (else (list-ref r 1))) 0) (begin (set! m (string-append m (randChar)))) (begin (set! m (string-append m (_substring p i (+ i 1)))))) (set! i (+ i 1)))) (loop11)) (quote ()))))) (loop11)))) (ret10 m))))))))
(define (main) (call/cc (lambda (ret13) (let ((parent (randomString (cond ((string? target) (string-length target)) ((hash-table? target) (hash-table-size target)) (else (length target)))))) (begin (_display (to-str parent)) (newline) (let ((best (fitness parent))) (begin (let ((done #f)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (not done) (begin (let ((i 0)) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (< i 20) (begin (let ((child (mutate parent))) (begin (let ((f (fitness child))) (begin (if (_lt f best) (begin (set! best f) (set! parent child) (_display (to-str parent)) (newline) (if (equal? best 0) (begin (set! done #t) (break17 (quote ()))) (quote ()))) (quote ())) (set! i (+ i 1)))))) (loop16)) (quote ()))))) (loop16)))))) (loop14)) (quote ()))))) (loop14)))))))))))))
(main)
