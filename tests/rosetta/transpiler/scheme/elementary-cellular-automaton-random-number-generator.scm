;; Generated on 2025-08-03 10:21 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define n 64)
(define (pow2 k) (call/cc (lambda (ret1) (let ((v 1)) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i k) (begin (set! v (* v 2)) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 v))))))))
(define (ruleBit ruleNum idx) (call/cc (lambda (ret4) (let ((r ruleNum)) (begin (let ((i 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< i idx) (begin (set! r (quotient r 2)) (set! i (+ i 1)) (loop5)) (quote ()))))) (loop5)))) (ret4 (modulo r 2)))))))))
(define (evolve state ruleNum) (call/cc (lambda (ret7) (let ((out (_list))) (begin (let ((p 0)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< p 10) (begin (let ((b 0)) (begin (let ((q 7)) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (>= q 0) (begin (let ((st state)) (begin (set! b (_add b (* (list-ref st 0) (pow2 q)))) (let ((next (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< i n) (begin (let ((lidx (- i 1))) (begin (if (< lidx 0) (begin (set! lidx (- n 1))) (quote ())) (let ((left (list-ref st lidx))) (begin (let ((center (list-ref st i))) (begin (let ((ridx (+ i 1))) (begin (if (>= ridx n) (begin (set! ridx 0)) (quote ())) (let ((right (list-ref st ridx))) (begin (let ((index (_add (_add (* left 4) (* center 2)) right))) (begin (set! next (append next (_list (ruleBit ruleNum index)))) (set! i (+ i 1)))))))))))))) (loop12)) (quote ()))))) (loop12)))) (set! state next) (set! q (- q 1)))))))) (loop10)) (quote ()))))) (loop10)))) (set! out (append out (_list b))) (set! p (+ p 1)))))) (loop8)) (quote ()))))) (loop8)))) (ret7 out))))))))
(define init (_list))
(define i 0)
(call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< i n) (begin (set! init (append init (_list 0))) (set! i (+ i 1)) (loop14)) (quote ()))))) (loop14))))
(list-set! init 0 1)
(define bytes (evolve init 30))
(_display (to-str (to-str bytes)))
(newline)
