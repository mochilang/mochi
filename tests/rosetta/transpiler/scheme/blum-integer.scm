;; Generated on 2025-07-27 16:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start22 (now)
)
)
 (begin (define (isPrime n)
 (call/cc (lambda (ret1)
 (begin (if (< n 2)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (if (equal? (modulo n 2)
 0)
 (begin (ret1 (equal? n 2)
)
)
 (quote ()
)
)
 (if (equal? (modulo n 3)
 0)
 (begin (ret1 (equal? n 3)
)
)
 (quote ()
)
)
 (let ((d 5)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (_le (* d d)
 n)
 (begin (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! d (+ d 2)
)
 (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! d (+ d 4)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #t)
)
)
)
)
)
)
 (define (firstPrimeFactor n)
 (call/cc (lambda (ret4)
 (begin (if (equal? n 1)
 (begin (ret4 1)
)
 (quote ()
)
)
 (if (equal? (modulo n 3)
 0)
 (begin (ret4 3)
)
 (quote ()
)
)
 (if (equal? (modulo n 5)
 0)
 (begin (ret4 5)
)
 (quote ()
)
)
 (let ((inc (_list 4 2 4 2 4 6 2 6)
)
)
 (begin (let ((k 7)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (_le (* k k)
 n)
 (begin (if (equal? (modulo n k)
 0)
 (begin (ret4 k)
)
 (quote ()
)
)
 (set! k (+ k (list-ref inc i)
)
)
 (set! i (modulo (+ i 1)
 (cond ((string? inc)
 (string-length inc)
)
 ((hash-table? inc)
 (hash-table-size inc)
)
 (else (length inc)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 n)
)
)
)
)
)
)
)
)
)
)
 (define (indexOf s ch)
 (call/cc (lambda (ret7)
 (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret7 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 (- 1)
)
)
)
)
)
)
 (define (padLeft n width)
 (call/cc (lambda (ret10)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 s)
)
)
)
)
)
 (define (formatFloat f prec)
 (call/cc (lambda (ret13)
 (let ((s (to-str f)
)
)
 (begin (let ((idx (indexOf s ".")
)
)
 (begin (if (_lt idx 0)
 (begin (ret13 s)
)
 (quote ()
)
)
 (let ((need (+ (+ idx 1)
 prec)
)
)
 (begin (if (_gt (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 need)
 (begin (ret13 (substring s 0 need)
)
)
 (quote ()
)
)
 (ret13 s)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret14)
 (let ((blum (_list)
)
)
 (begin (let ((counts (_list 0 0 0 0)
)
)
 (begin (let ((digits (_list 1 3 7 9)
)
)
 (begin (let ((i 1)
)
 (begin (let ((bc 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if #t (begin (let ((p (firstPrimeFactor i)
)
)
 (begin (if (equal? (modulo p 4)
 3)
 (begin (let ((q (let ((v17 (quotient i p)
)
)
 (cond ((string? v17)
 (inexact->exact (floor (string->number v17)
)
)
)
 ((boolean? v17)
 (if v17 1 0)
)
 (else (inexact->exact (floor v17)
)
)
)
)
)
)
 (begin (if (and (and (not (equal? q p)
)
 (equal? (modulo q 4)
 3)
)
 (isPrime q)
)
 (begin (if (< bc 50)
 (begin (set! blum (append blum (_list i)
)
)
)
 (quote ()
)
)
 (let ((d (modulo i 10)
)
)
 (begin (if (equal? d 1)
 (begin (list-set! counts 0 (+ (list-ref counts 0)
 1)
)
)
 (if (equal? d 3)
 (begin (list-set! counts 1 (+ (list-ref counts 1)
 1)
)
)
 (if (equal? d 7)
 (begin (list-set! counts 2 (+ (list-ref counts 2)
 1)
)
)
 (if (equal? d 9)
 (begin (list-set! counts 3 (+ (list-ref counts 3)
 1)
)
)
 (quote ()
)
)
)
)
)
 (set! bc (+ bc 1)
)
 (if (equal? bc 50)
 (begin (_display (to-str "First 50 Blum integers:")
)
 (newline)
 (let ((idx 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< idx 50)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< j 10)
 (begin (set! line (string-append (string-append line (padLeft (list-ref blum idx)
 3)
)
 " ")
)
 (set! idx (+ idx 1)
)
 (set! j (+ j 1)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (_display (to-str (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 1)
)
)
)
 (newline)
)
)
)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (break16 (quote ()
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (if (equal? (modulo i 5)
 3)
 (begin (set! i (+ i 4)
)
)
 (begin (set! i (+ i 2)
)
)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end23 (now)
)
)
 (let ((dur24 (quotient (- end23 start22)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur24)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
