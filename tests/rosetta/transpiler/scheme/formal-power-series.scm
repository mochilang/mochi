;; Generated on 2025-08-04 15:16 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(let ((start39 (current-jiffy)) (jps42 (jiffies-per-second))) (begin (define (newFps fn) (call/cc (lambda (ret1) (ret1 (alist->hash-table (_list (cons "coeffs" (_list)) (cons "compute" fn))))))) (define (extract f n) (call/cc (lambda (ret2) (begin (call/cc (lambda (break4) (letrec ((loop3 (lambda () (if (<= (_len (hash-table-ref f "coeffs")) n) (begin (let ((idx (_len (hash-table-ref f "coeffs")))) (begin (let ((v ((hash-table-ref f "compute") idx))) (begin (hash-table-set! f "coeffs" (append (hash-table-ref f "coeffs") (_list v))))))) (loop3)) (quote ()))))) (loop3)))) (ret2 (list-ref (hash-table-ref f "coeffs") n)))))) (define (one) (call/cc (lambda (ret5) (ret5 (newFps (lambda (i) (call/cc (lambda (ret6) (begin (if (equal? i 0) (begin (ret6 1.0)) (quote ())) (ret6 0.0)))))))))) (define (add a b) (call/cc (lambda (ret7) (ret7 (newFps (lambda (n) (call/cc (lambda (ret8) (ret8 (_add (extract a n) (extract b n))))))))))) (define (sub a b) (call/cc (lambda (ret9) (ret9 (newFps (lambda (n) (call/cc (lambda (ret10) (ret10 (- (extract a n) (extract b n))))))))))) (define (mul a b) (call/cc (lambda (ret11) (ret11 (newFps (lambda (n) (call/cc (lambda (ret12) (let ((s 0.0)) (begin (let ((k 0)) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (_le k n) (begin (set! s (_add s (* (extract a k) (extract b (- n k))))) (set! k (+ k 1)) (loop13)) (quote ()))))) (loop13)))) (ret12 s))))))))))))) (define (div a b) (call/cc (lambda (ret15) (let ((q (newFps (lambda (n) (call/cc (lambda (ret16) (ret16 0.0))))))) (begin (hash-table-set! q "compute" (lambda (n) (call/cc (lambda (ret17) (let ((b0 (extract b 0))) (begin (if (equal? b0 0.0) (begin (ret17 (/ 0.0 0.0))) (quote ())) (let ((s (extract a n))) (begin (let ((k 1)) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda () (if (_le k n) (begin (set! s (- s (* (extract b k) (extract q (- n k))))) (set! k (+ k 1)) (loop18)) (quote ()))))) (loop18)))) (ret17 (/ s b0)))))))))))) (ret15 q)))))) (define (differentiate a) (call/cc (lambda (ret20) (ret20 (newFps (lambda (n) (call/cc (lambda (ret21) (ret21 (* (+ 0.0 (_add n 1)) (extract a (_add n 1)))))))))))) (define (integrate a) (call/cc (lambda (ret22) (ret22 (newFps (lambda (n) (call/cc (lambda (ret23) (begin (if (equal? n 0) (begin (ret23 0.0)) (quote ())) (ret23 (/ (extract a (- n 1)) (+ 0.0 n)))))))))))) (define (sinCos) (call/cc (lambda (ret24) (let ((sin (newFps (lambda (n) (call/cc (lambda (ret25) (ret25 0.0))))))) (begin (let ((cos (sub (one) (integrate sin)))) (begin (hash-table-set! sin "compute" (lambda (n) (call/cc (lambda (ret26) (begin (if (equal? n 0) (begin (ret26 0.0)) (quote ())) (ret26 (/ (extract cos (- n 1)) (+ 0.0 n)))))))) (ret24 (alist->hash-table (_list (cons "sin" sin) (cons "cos" cos))))))))))) (define (floorf x) (call/cc (lambda (ret27) (let ((y (let ((v28 x)) (cond ((string? v28) (inexact->exact (floor (string->number v28)))) ((boolean? v28) (if v28 1 0)) (else (inexact->exact (floor v28))))))) (begin (ret27 (+ 0.0 y))))))) (define (fmtF5 x) (call/cc (lambda (ret29) (let ((y (/ (floorf (_add (* x 100000.0) 0.5)) 100000.0))) (begin (let ((s (to-str y))) (begin (let ((dot (indexOf s "."))) (begin (if (equal? dot (- 0 1)) (begin (set! s (string-append s ".00000"))) (begin (let ((decs (- (- (_len s) dot) 1))) (begin (if (> decs 5) (begin (set! s (_substring s 0 (+ dot 6)))) (begin (call/cc (lambda (break31) (letrec ((loop30 (lambda () (if (< decs 5) (begin (set! s (string-append s "0")) (set! decs (+ decs 1)) (loop30)) (quote ()))))) (loop30)))))))))) (ret29 s)))))))))) (define (padFloat5 x width) (call/cc (lambda (ret32) (let ((s (fmtF5 x))) (begin (call/cc (lambda (break34) (letrec ((loop33 (lambda () (if (< (_len s) width) (begin (set! s (string-append " " s)) (loop33)) (quote ()))))) (loop33)))) (ret32 s)))))) (define (partialSeries f) (call/cc (lambda (ret35) (let ((out "")) (begin (let ((i 0)) (begin (call/cc (lambda (break37) (letrec ((loop36 (lambda () (if (< i 6) (begin (set! out (string-append (string-append (string-append out " ") (padFloat5 (extract f i) 8)) " ")) (set! i (+ i 1)) (loop36)) (quote ()))))) (loop36)))) (ret35 out)))))))) (define (main) (call/cc (lambda (ret38) (let ((p (sinCos))) (begin (_display (to-str (string-append "sin:" (partialSeries (hash-table-ref p "sin"))))) (newline) (_display (to-str (string-append "cos:" (partialSeries (hash-table-ref p "cos"))))) (newline)))))) (main) (let ((end40 (current-jiffy))) (let ((dur41 (quotient (* (- end40 start39) 1000000) jps42))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur41) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
