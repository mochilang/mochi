;; Generated on 2025-07-27 16:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start16 (now)
)
)
 (begin (define (indexOfStr h n)
 (call/cc (lambda (ret1)
 (let ((hlen (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
)
)
 (begin (let ((nlen (cond ((string? n)
 (string-length n)
)
 ((hash-table? n)
 (hash-table-size n)
)
 (else (length n)
)
)
)
)
 (begin (if (equal? nlen 0)
 (begin (ret1 0)
)
 (quote ()
)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (_le i (- hlen nlen)
)
 (begin (if (string=? (substring h i (+ i nlen)
)
 n)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
)
)
)
)
 (define (stringSearchSingle h n)
 (call/cc (lambda (ret4)
 (ret4 (indexOfStr h n)
)
)
)
)
 (define (stringSearch h n)
 (call/cc (lambda (ret5)
 (let ((result (_list)
)
)
 (begin (let ((start 0)
)
 (begin (let ((hlen (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
)
)
 (begin (let ((nlen (cond ((string? n)
 (string-length n)
)
 ((hash-table? n)
 (hash-table-size n)
)
 (else (length n)
)
)
)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< start hlen)
 (begin (let ((idx (indexOfStr (substring h start hlen)
 n)
)
)
 (begin (if (_ge idx 0)
 (begin (set! result (append result (_list (+ start idx)
)
)
)
 (set! start (+ (+ start idx)
 nlen)
)
)
 (begin (break7 (quote ()
)
)
)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 result)
)
)
)
)
)
)
)
)
)
)
)
 (define (display nums)
 (call/cc (lambda (ret8)
 (let ((s "[")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i (cond ((string? nums)
 (string-length nums)
)
 ((hash-table? nums)
 (hash-table-size nums)
)
 (else (length nums)
)
)
)
 (begin (if (> i 0)
 (begin (set! s (string-append s ", ")
)
)
 (quote ()
)
)
 (set! s (string-append s (to-str (list-ref nums i)
)
)
)
 (set! i (+ i 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (set! s (string-append s "]")
)
 (ret8 s)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret11)
 (let ((texts (_list "GCTAGCTCTACGAGTCTA" "GGCTATAATGCGTA" "there would have been a time for such a word" "needle need noodle needle" "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages" "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.")
)
)
 (begin (let ((patterns (_list "TCTA" "TAATAAA" "word" "needle" "and" "alfalfa")
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i (cond ((string? texts)
 (string-length texts)
)
 ((hash-table? texts)
 (hash-table-size texts)
)
 (else (length texts)
)
)
)
 (begin (_display (to-str (string-append (string-append (string-append "text" (to-str (+ i 1)
)
)
 " = ")
 (list-ref texts i)
)
)
)
 (newline)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (_display (to-str "")
)
 (newline)
 (let ((j 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j (cond ((string? texts)
 (string-length texts)
)
 ((hash-table? texts)
 (hash-table-size texts)
)
 (else (length texts)
)
)
)
 (begin (let ((idxs (stringSearch (list-ref texts j)
 (list-ref patterns j)
)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append "Found \"" (list-ref patterns j)
)
 "\" in 'text")
 (to-str (+ j 1)
)
)
 "' at indexes ")
 (display idxs)
)
)
)
 (newline)
 (set! j (+ j 1)
)
)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end17 (now)
)
)
 (let ((dur18 (quotient (- end17 start16)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur18)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
