;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (main)
 (call/cc (lambda (ret1)
 (let ((a 12)
)
 (begin (let ((b 8)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " + ")
 (to-str b)
)
 " = ")
 (to-str (+ a b)
)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " - ")
 (to-str b)
)
 " = ")
 (to-str (- a b)
)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " * ")
 (to-str b)
)
 " = ")
 (to-str (* a b)
)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " / ")
 (to-str b)
)
 " = ")
 (to-str (let ((v2 (quotient a b)
)
)
 (cond ((string? v2)
 (inexact->exact (string->number v2)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact v2)
)
)
)
)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " % ")
 (to-str b)
)
 " = ")
 (to-str (modulo a b)
)
)
)
)
 (newline)
)
)
)
)
)
)
)
(main)
