;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (ackermann m n)
 (call/cc (lambda (ret1)
 (begin (if (equal? m 0)
 (begin (ret1 (+ n 1)
)
)
 (quote nil)
)
 (if (equal? n 0)
 (begin (ret1 (ackermann (- m 1)
 1)
)
)
 (quote nil)
)
 (ret1 (ackermann (- m 1)
 (ackermann m (- n 1)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret2)
 (begin (display (to-str (string-append "A(0, 0)
 = " (to-str (ackermann 0 0)
)
)
)
)
 (newline)
 (display (to-str (string-append "A(1, 2)
 = " (to-str (ackermann 1 2)
)
)
)
)
 (newline)
 (display (to-str (string-append "A(2, 4)
 = " (to-str (ackermann 2 4)
)
)
)
)
 (newline)
 (display (to-str (string-append "A(3, 4)
 = " (to-str (ackermann 3 4)
)
)
)
)
 (newline)
)
)
)
)
(main)
