;; Generated on 2025-08-03 17:09 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (generatePrimes n) (call/cc (lambda (ret1) (let ((primes (_list 2))) (begin (let ((cand 3)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< (cond ((string? primes) (string-length primes)) ((hash-table? primes) (hash-table-size primes)) (else (length primes))) n) (begin (let ((isP #t)) (begin (let ((i 0)) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (< i (cond ((string? primes) (string-length primes)) ((hash-table? primes) (hash-table-size primes)) (else (length primes)))) (begin (let ((p (list-ref primes i))) (begin (if (_gt (* p p) cand) (begin (break5 (quote ()))) (quote ())) (if (equal? (modulo cand p) 0) (begin (set! isP #f) (break5 (quote ()))) (quote ())) (set! i (+ i 1)))) (loop4)) (quote ()))))) (loop4)))) (if isP (begin (set! primes (append primes (_list cand)))) (quote ())) (set! cand (+ cand 2)))))) (loop2)) (quote ()))))) (loop2)))) (ret1 primes))))))))
(define (primeFactors n primes) (call/cc (lambda (ret6) (let ((factors (_list))) (begin (let ((num n)) (begin (let ((i 0)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (and (< i (cond ((string? primes) (string-length primes)) ((hash-table? primes) (hash-table-size primes)) (else (length primes)))) (_le (* (list-ref primes i) (list-ref primes i)) num)) (begin (let ((p (list-ref primes i))) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (equal? (modulo num p) 0) (begin (set! factors (append factors (_list p))) (set! num (quotient num p)) (loop9)) (quote ()))))) (loop9)))) (set! i (+ i 1)))) (loop7)) (quote ()))))) (loop7)))) (if (> num 1) (begin (set! factors (append factors (_list num)))) (quote ())) (ret6 factors))))))))))
(define prevCats (alist->hash-table (_list)))
(define (cat p primes) (call/cc (lambda (ret11) (begin (if (cond ((hash-table? prevCats) (hash-table-exists? prevCats p)) ((string? prevCats) (if (string-contains prevCats p) #t #f)) (else (if (member p prevCats) #t #f))) (begin (ret11 (hash-table-ref/default prevCats p (quote ())))) (quote ())) (let ((pf (primeFactors (+ p 1) primes))) (begin (let ((all23 #t)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((f (car xs))) (begin (if (and (not (equal? f 2)) (not (equal? f 3))) (begin (set! all23 #f) (break13 (quote ()))) (quote ())))) (loop12 (cdr xs))))))) (loop12 pf)))) (if all23 (begin (hash-table-set! prevCats p 1) (ret11 1)) (quote ())) (if (> p 2) (begin (let ((unique (_list))) (begin (let ((last (- 1))) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((f (car xs))) (begin (if (not (equal? f last)) (begin (set! unique (append unique (_list f))) (set! last f)) (quote ())))) (loop14 (cdr xs))))))) (loop14 pf)))) (set! pf unique)))))) (quote ())) (let ((c 2)) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (<= c 11) (begin (let ((ok #t)) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((f (car xs))) (begin (if (_ge (cat f primes) c) (begin (set! ok #f) (break19 (quote ()))) (quote ())))) (loop18 (cdr xs))))))) (loop18 pf)))) (if ok (begin (hash-table-set! prevCats p c) (ret11 c)) (quote ())) (set! c (+ c 1)))) (loop16)) (quote ()))))) (loop16)))) (hash-table-set! prevCats p 12) (ret11 12)))))))))))
(define (padLeft n width) (call/cc (lambda (ret20) (let ((s (to-str n))) (begin (call/cc (lambda (break22) (letrec ((loop21 (lambda () (if (< (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) width) (begin (set! s (string-append " " s)) (loop21)) (quote ()))))) (loop21)))) (ret20 s))))))
(define (main) (call/cc (lambda (ret23) (let ((primes (generatePrimes 1000))) (begin (let ((es (_list))) (begin (call/cc (lambda (break25) (letrec ((loop24 (lambda (_) (if (< _ 12) (begin (begin (set! es (append es (_list (_list))))) (loop24 (+ _ 1))) (quote ()))))) (loop24 0)))) (_display (to-str "First 200 primes:\n")) (newline) (let ((idx 0)) (begin (call/cc (lambda (break27) (letrec ((loop26 (lambda () (if (< idx 200) (begin (let ((p (cond ((string? primes) (_substring primes idx (+ idx 1))) ((hash-table? primes) (hash-table-ref primes idx)) (else (list-ref primes idx))))) (begin (let ((c (cat p primes))) (begin (list-set! es (- c 1) (append (list-ref es (- c 1)) (_list p))) (set! idx (+ idx 1)))))) (loop26)) (quote ()))))) (loop26)))) (let ((c 1)) (begin (call/cc (lambda (break29) (letrec ((loop28 (lambda () (if (<= c 6) (begin (if (> (cond ((string? (list-ref es (- c 1))) (string-length (list-ref es (- c 1)))) ((hash-table? (list-ref es (- c 1))) (hash-table-size (list-ref es (- c 1)))) (else (length (list-ref es (- c 1))))) 0) (begin (_display (to-str (string-append (string-append "Category " (to-str c)) ":"))) (newline) (_display (to-str (to-str (list-ref es (- c 1))))) (newline) (_display (to-str "")) (newline)) (quote ())) (set! c (+ c 1)) (loop28)) (quote ()))))) (loop28)))) (_display (to-str "First thousand primes:\n")) (newline) (call/cc (lambda (break31) (letrec ((loop30 (lambda () (if (< idx 1000) (begin (let ((p (cond ((string? primes) (_substring primes idx (+ idx 1))) ((hash-table? primes) (hash-table-ref primes idx)) (else (list-ref primes idx))))) (begin (let ((cv (cat p primes))) (begin (list-set! es (- cv 1) (append (list-ref es (- cv 1)) (_list p))) (set! idx (+ idx 1)))))) (loop30)) (quote ()))))) (loop30)))) (set! c 1) (call/cc (lambda (break33) (letrec ((loop32 (lambda () (if (<= c 12) (begin (let ((e (list-ref es (- c 1)))) (begin (if (> (cond ((string? e) (string-length e)) ((hash-table? e) (hash-table-size e)) (else (length e))) 0) (begin (let ((line (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Category " (padLeft c 2)) ": First = ") (padLeft (list-ref e 0) 7)) "  Last = ") (padLeft (list-ref e (- (cond ((string? e) (string-length e)) ((hash-table? e) (hash-table-size e)) (else (length e))) 1)) 8)) "  Count = ") (padLeft (cond ((string? e) (string-length e)) ((hash-table? e) (hash-table-size e)) (else (length e))) 6)))) (begin (_display (to-str line)) (newline)))) (quote ())) (set! c (+ c 1)))) (loop32)) (quote ()))))) (loop32)))))))))))))))
(main)
