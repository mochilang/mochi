;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (intSqrt x)
 (call/cc (lambda (ret1)
 (begin (if (< x 2)
 (begin (ret1 x)
)
 (quote nil)
)
 (let ((left 1)
)
 (begin (let ((right (quotient x 2)
)
)
 (begin (let ((ans 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= left right)
 (begin (let ((mid (+ left (quotient (- right left)
 2)
)
)
)
 (begin (let ((sq (* mid mid)
)
)
 (begin (if (equal? sq x)
 (begin (ret1 mid)
)
 (quote nil)
)
 (if (< sq x)
 (begin (set! left (+ mid 1)
)
 (set! ans mid)
)
 (begin (set! right (- mid 1)
)
)
)
)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 ans)
)
)
)
)
)
)
)
)
)
)
(define (sumRecip n)
 (call/cc (lambda (ret4)
 (let ((s 1)
)
 (begin (let ((limit (intSqrt n)
)
)
 (begin (let ((f 2)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= f limit)
 (begin (if (equal? (modulo n f)
 0)
 (begin (set! s (+ s (quotient n f)
)
)
 (let ((f2 (quotient n f)
)
)
 (begin (if (not (equal? f2 f)
)
 (begin (set! s (+ s f)
)
)
 (quote nil)
)
)
)
)
 (quote nil)
)
 (set! f (+ f 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 s)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret7)
 (let ((nums (list 6 28 120 496 672 8128 30240 32760 523776)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((n (car xs)
)
)
 (begin (let ((s (sumRecip n)
)
)
 (begin (if (equal? (modulo s n)
 0)
 (begin (let ((val (quotient s n)
)
)
 (begin (let ((perfect "")
)
 (begin (if (equal? val 1)
 (begin (set! perfect "perfect!")
)
 (quote nil)
)
 (display (to-str (string-append (string-append (string-append (string-append (string-append "Sum of recipr. factors of " (to-str n)
)
 " = ")
 (to-str val)
)
 " exactly ")
 perfect)
)
)
 (newline)
)
)
)
)
)
 (quote nil)
)
)
)
)
)
 (loop8 (cdr xs)
)
)
)
)
)
)
 (loop8 nums)
)
)
)
)
)
)
)
)
(main)
