;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (angleDiff b1 b2)
 (call/cc (lambda (ret1)
 (let ((d (- b2 b1)
)
)
 (begin (if (< d (- 0 180.0)
)
 (begin (ret1 (+ d 360.0)
)
)
 (quote nil)
)
 (if (> d 180.0)
 (begin (ret1 (- d 360.0)
)
)
 (quote nil)
)
 (ret1 d)
)
)
)
)
)
(define testCases (list (list 20.0 45.0)
 (list (- 0 45.0)
 45.0)
 (list (- 0 85.0)
 90.0)
 (list (- 0 95.0)
 90.0)
 (list (- 0 45.0)
 125.0)
 (list (- 0 45.0)
 145.0)
 (list 29.4803 (- 0 88.6381)
)
 (list (- 0 78.3251)
 (- 0 159.036)
)
)
)
(call/cc (lambda (break3)
 (letrec ((loop2 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((tc (car xs)
)
)
 (begin (display (to-str (angleDiff (cond ((string? tc)
 (string-ref tc 0)
)
 ((hash-table? tc)
 (hash-table-ref tc 0)
)
 (else (list-ref tc 0)
)
)
 (cond ((string? tc)
 (string-ref tc 1)
)
 ((hash-table? tc)
 (hash-table-ref tc 1)
)
 (else (list-ref tc 1)
)
)
)
)
)
 (newline)
)
)
 (loop2 (cdr xs)
)
)
)
)
)
)
 (loop2 testCases)
)
)
)
