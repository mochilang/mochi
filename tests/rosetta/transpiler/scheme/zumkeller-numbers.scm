;; Generated on 2025-08-04 21:29 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (getDivisors n) (call/cc (lambda (ret1) (let ((divs (_list 1 n))) (begin (let ((i 2)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (<= (* i i) n) (begin (if (equal? (modulo n i) 0) (begin (let ((j (let ((v4 (quotient n i))) (cond ((string? v4) (inexact->exact (floor (string->number v4)))) ((boolean? v4) (if v4 1 0)) (else (inexact->exact (floor v4))))))) (begin (set! divs (append divs (_list i))) (if (not (equal? i j)) (begin (set! divs (append divs (_list j)))) (quote ()))))) (quote ())) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 divs))))))))
(define (sum xs) (call/cc (lambda (ret5) (let ((s 0)) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((x (car xs))) (begin (set! s (_add s x)))) (loop6 (cdr xs))))))) (loop6 xs)))) (ret5 s))))))
(define (isPartSum divs target) (call/cc (lambda (ret8) (let ((possible (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (<= i target) (begin (set! possible (append possible (_list #f))) (set! i (+ i 1)) (loop9)) (quote ()))))) (loop9)))) (list-set! possible 0 #t) (call/cc (lambda (break12) (letrec ((loop11 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((v (car xs))) (begin (let ((s target)) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (_ge s v) (begin (if (list-ref possible (- s v)) (begin (list-set! possible s #t)) (quote ())) (set! s (- s 1)) (loop13)) (quote ()))))) (loop13)))))))) (loop11 (cdr xs))))))) (loop11 divs)))) (ret8 (list-ref possible target)))))))))
(define (isZumkeller n) (call/cc (lambda (ret15) (let ((divs (getDivisors n))) (begin (let ((s (sum divs))) (begin (if (equal? (fmod s 2) 1) (begin (ret15 #f)) (quote ())) (if (equal? (modulo n 2) 1) (begin (let ((abundance (- s (* 2 n)))) (begin (ret15 (and (> abundance 0) (equal? (fmod abundance 2) 0)))))) (quote ())) (ret15 (isPartSum divs (/ s 2))))))))))
(define (pad n width) (call/cc (lambda (ret16) (let ((s (to-str n))) (begin (call/cc (lambda (break18) (letrec ((loop17 (lambda () (if (< (_len s) width) (begin (set! s (string-append " " s)) (loop17)) (quote ()))))) (loop17)))) (ret16 s))))))
(define (main) (call/cc (lambda (ret19) (begin (_display (to-str "The first 220 Zumkeller numbers are:")) (newline) (let ((count 0)) (begin (let ((line "")) (begin (let ((i 2)) (begin (call/cc (lambda (break21) (letrec ((loop20 (lambda () (if (< count 220) (begin (if (isZumkeller i) (begin (set! line (string-append (string-append line (pad i 3)) " ")) (set! count (+ count 1)) (if (equal? (modulo count 20) 0) (begin (_display (to-str (_substring line 0 (- (_len line) 1)))) (newline) (set! line "")) (quote ()))) (quote ())) (set! i (+ i 1)) (loop20)) (quote ()))))) (loop20)))) (_display (to-str "\nThe first 40 odd Zumkeller numbers are:")) (newline) (set! count 0) (set! line "") (set! i 3) (call/cc (lambda (break23) (letrec ((loop22 (lambda () (if (< count 40) (begin (if (isZumkeller i) (begin (set! line (string-append (string-append line (pad i 5)) " ")) (set! count (+ count 1)) (if (equal? (modulo count 10) 0) (begin (_display (to-str (_substring line 0 (- (_len line) 1)))) (newline) (set! line "")) (quote ()))) (quote ())) (set! i (+ i 2)) (loop22)) (quote ()))))) (loop22)))) (_display (to-str "\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")) (newline) (set! count 0) (set! line "") (set! i 3) (call/cc (lambda (break25) (letrec ((loop24 (lambda () (if (< count 40) (begin (if (and (not (equal? (modulo i 10) 5)) (isZumkeller i)) (begin (set! line (string-append (string-append line (pad i 7)) " ")) (set! count (+ count 1)) (if (equal? (modulo count 8) 0) (begin (_display (to-str (_substring line 0 (- (_len line) 1)))) (newline) (set! line "")) (quote ()))) (quote ())) (set! i (+ i 2)) (loop24)) (quote ()))))) (loop24))))))))))))))
(main)
