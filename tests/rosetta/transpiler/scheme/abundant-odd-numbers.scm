;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start21 (now)
)
)
 (begin (define (divisors n)
 (call/cc (lambda (ret1)
 (let ((divs (list 1)
)
)
 (begin (let ((divs2 (list)
)
)
 (begin (let ((i 2)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= (* i i)
 n)
 (begin (if (equal? (modulo n i)
 0)
 (begin (let ((j (let ((v4 (quotient n i)
)
)
 (cond ((string? v4)
 (inexact->exact (string->number v4)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact v4)
)
)
)
)
)
 (begin (set! divs (append divs (list i)
)
)
 (if (not (equal? i j)
)
 (begin (set! divs2 (append divs2 (list j)
)
)
)
 (quote nil)
)
)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (let ((j (- (cond ((string? divs2)
 (string-length divs2)
)
 ((hash-table? divs2)
 (hash-table-size divs2)
)
 (else (length divs2)
)
)
 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (>= j 0)
 (begin (set! divs (append divs (list (list-ref divs2 j)
)
)
)
 (set! j (- j 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret1 divs)
)
)
)
)
)
)
)
)
)
)
)
 (define (sum xs)
 (call/cc (lambda (ret7)
 (let ((tot 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (set! tot (+ tot v)
)
)
)
 (loop8 (cdr xs)
)
)
)
)
)
)
 (loop8 xs)
)
)
)
 (ret7 tot)
)
)
)
)
)
 (define (sumStr xs)
 (call/cc (lambda (ret10)
 (let ((s "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (set! s (string-append (string-append s (to-str (list-ref xs i)
)
)
 " + ")
)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
 (ret10 (substring s 0 (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 3)
)
)
)
)
)
)
)
)
)
 (define (pad2 n)
 (call/cc (lambda (ret13)
 (let ((s (to-str n)
)
)
 (begin (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 2)
 (begin (ret13 (string-append " " s)
)
)
 (quote nil)
)
 (ret13 s)
)
)
)
)
)
 (define (pad5 n)
 (call/cc (lambda (ret14)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 5)
 (begin (set! s (string-append " " s)
)
 (loop15)
)
 (quote nil)
)
)
)
)
 (loop15)
)
)
)
 (ret14 s)
)
)
)
)
)
 (define (abundantOdd searchFrom countFrom countTo printOne)
 (call/cc (lambda (ret17)
 (let ((count countFrom)
)
 (begin (let ((n searchFrom)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< count countTo)
 (begin (let ((divs (divisors n)
)
)
 (begin (let ((tot (apply + divs)
)
)
 (begin (if (> tot n)
 (begin (set! count (+ count 1)
)
 (if (and printOne (< count countTo)
)
 (begin (set! n (+ n 2)
)
 (loop18)
)
 (quote nil)
)
 (let ((s (sumStr divs)
)
)
 (begin (if (not printOne)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (pad2 count)
 ". ")
 (pad5 n)
)
 " < ")
 s)
 " = ")
 (to-str tot)
)
)
)
 (newline)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (to-str n)
 " < ")
 s)
 " = ")
 (to-str tot)
)
)
)
 (newline)
)
)
)
)
)
 (quote nil)
)
 (set! n (+ n 2)
)
)
)
)
)
 (loop18)
)
 (quote nil)
)
)
)
)
 (loop18)
)
)
)
 (ret17 n)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret20)
 (let ((max 25)
)
 (begin (display (to-str (string-append (string-append "The first " (to-str max)
)
 " abundant odd numbers are:")
)
)
 (newline)
 (let ((n (abundantOdd 1 0 max #f)
)
)
 (begin (display (to-str "\nThe one thousandth abundant odd number is:")
)
 (newline)
 (abundantOdd n max 1000 #t)
 (display (to-str "\nThe first abundant odd number above one billion is:")
)
 (newline)
 (abundantOdd 1000000001 0 1 #t)
)
)
)
)
)
)
)
 (main)
 (let ((end22 (now)
)
)
 (let ((dur23 (quotient (- end22 start21)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur23)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
