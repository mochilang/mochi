;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start8 (now)
)
)
 (begin (define dayNames (_list "Sweetmorn" "Boomtime" "Pungenday" "Prickle-Prickle" "Setting Orange")
)
 (define seasons (_list "Chaos" "Discord" "Confusion" "Bureaucracy" "The Aftermath")
)
 (define holydays (_list (_list "Mungday" "Chaoflux")
 (_list "Mojoday" "Discoflux")
 (_list "Syaday" "Confuflux")
 (_list "Zaraday" "Bureflux")
 (_list "Maladay" "Afflux")
)
)
 (define (isLeap y)
 (call/cc (lambda (ret1)
 (begin (if (equal? (modulo y 400)
 0)
 (begin (ret1 #t)
)
 (quote ()
)
)
 (if (equal? (modulo y 100)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (ret1 (equal? (modulo y 4)
 0)
)
)
)
)
)
 (define daysBefore (_list 0 31 59 90 120 151 181 212 243 273 304 334)
)
 (define (dayOfYear y m d)
 (call/cc (lambda (ret2)
 (let ((doy (+ (list-ref daysBefore (- m 1)
)
 d)
)
)
 (begin (if (and (> m 2)
 (isLeap y)
)
 (begin (set! doy (+ doy 1)
)
)
 (quote ()
)
)
 (ret2 doy)
)
)
)
)
)
 (define (ordinal n)
 (call/cc (lambda (ret3)
 (let ((suff "th")
)
 (begin (let ((mod100 (modulo n 100)
)
)
 (begin (if (or (< mod100 11)
 (> mod100 13)
)
 (begin (let ((r (modulo n 10)
)
)
 (begin (if (equal? r 1)
 (begin (set! suff "st")
)
 (if (equal? r 2)
 (begin (set! suff "nd")
)
 (if (equal? r 3)
 (begin (set! suff "rd")
)
 (quote ()
)
)
)
)
)
)
)
 (quote ()
)
)
 (ret3 (string-append (to-str n)
 suff)
)
)
)
)
)
)
)
)
 (define (discordian y m d)
 (call/cc (lambda (ret4)
 (begin (if (and (and (isLeap y)
 (equal? m 2)
)
 (equal? d 29)
)
 (begin (ret4 (string-append "St. Tib's Day, YOLD " (to-str (+ y 1166)
)
)
)
)
 (quote ()
)
)
 (let ((doy (dayOfYear y m d)
)
)
 (begin (if (and (isLeap y)
 (_gt doy 60)
)
 (begin (set! doy (- doy 1)
)
)
 (quote ()
)
)
 (let ((idx (- doy 1)
)
)
 (begin (let ((season (quotient idx 73)
)
)
 (begin (let ((day (modulo idx 73)
)
)
 (begin (let ((res (string-append (string-append (string-append (string-append (string-append (string-append (list-ref dayNames (modulo idx 5)
)
 ", the ")
 (ordinal (_add day 1)
)
)
 " day of ")
 (list-ref seasons season)
)
 " in the YOLD ")
 (to-str (+ y 1166)
)
)
)
)
 (begin (if (equal? day 4)
 (begin (set! res (string-append (string-append (string-append res ". Celebrate ")
 (cond ((string? (list-ref holydays season)
)
 (substring (list-ref holydays season)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref holydays season)
)
 (hash-table-ref (list-ref holydays season)
 0)
)
 (else (list-ref (list-ref holydays season)
 0)
)
)
)
 "!")
)
)
 (quote ()
)
)
 (if (equal? day 49)
 (begin (set! res (string-append (string-append (string-append res ". Celebrate ")
 (cond ((string? (list-ref holydays season)
)
 (substring (list-ref holydays season)
 1 (+ 1 1)
)
)
 ((hash-table? (list-ref holydays season)
)
 (hash-table-ref (list-ref holydays season)
 1)
)
 (else (list-ref (list-ref holydays season)
 1)
)
)
)
 "!")
)
)
 (quote ()
)
)
 (ret4 res)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret5)
 (let ((dates (_list (_list 2010 7 22)
 (_list 2012 2 28)
 (_list 2012 2 29)
 (_list 2012 3 1)
 (_list 2012 12 31)
 (_list 2013 1 1)
 (_list 2100 12 31)
 (_list 2015 10 19)
 (_list 2010 1 5)
 (_list 2011 5 3)
 (_list 2000 3 13)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< i (cond ((string? dates)
 (string-length dates)
)
 ((hash-table? dates)
 (hash-table-size dates)
)
 (else (length dates)
)
)
)
 (begin (let ((dt (list-ref dates i)
)
)
 (begin (_display (to-str (discordian (list-ref dt 0)
 (list-ref dt 1)
 (list-ref dt 2)
)
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end9 (now)
)
)
 (let ((dur10 (quotient (- end9 start8)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur10)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
