;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start27 (now)
)
)
 (begin (define (contains xs n)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (if (equal? (list-ref xs i)
 n)
 (begin (ret1 #t)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #f)
)
)
)
)
)
 (define (gcd a b)
 (call/cc (lambda (ret4)
 (let ((x a)
)
 (begin (let ((y b)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (not (equal? y 0)
)
 (begin (let ((t (modulo x y)
)
)
 (begin (set! x y)
 (set! y t)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (if (< x 0)
 (begin (set! x (- x)
)
)
 (quote ()
)
)
 (ret4 x)
)
)
)
)
)
)
)
 (define (sortInts xs)
 (call/cc (lambda (ret7)
 (let ((arr xs)
)
 (begin (let ((n (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (_lt j (- n 1)
)
 (begin (if (> (list-ref arr j)
 (list-ref arr (+ j 1)
)
)
 (begin (let ((tmp (list-ref arr j)
)
)
 (begin (list-set! arr j (list-ref arr (+ j 1)
)
)
 (list-set! arr (+ j 1)
 tmp)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 arr)
)
)
)
)
)
)
)
)
)
 (define (areSame s t)
 (call/cc (lambda (ret12)
 (begin (if (not (equal? (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 (cond ((string? t)
 (string-length t)
)
 ((hash-table? t)
 (hash-table-size t)
)
 (else (length t)
)
)
)
)
 (begin (ret12 #f)
)
 (quote ()
)
)
 (let ((a (sortInts s)
)
)
 (begin (let ((b (sortInts t)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
 (begin (if (not (equal? (cond ((string? a)
 (substring a i (+ i 1)
)
)
 ((hash-table? a)
 (hash-table-ref a i)
)
 (else (list-ref a i)
)
)
 (cond ((string? b)
 (substring b i (+ i 1)
)
)
 ((hash-table? b)
 (hash-table-ref b i)
)
 (else (list-ref b i)
)
)
)
)
 (begin (ret12 #f)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 #t)
)
)
)
)
)
)
)
)
)
)
 (define (printSlice start seq)
 (call/cc (lambda (ret15)
 (let ((first (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i 30)
 (begin (set! first (append first (_list (list-ref seq i)
)
)
)
 (set! i (+ i 1)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((pad "")
)
 (begin (if (< start 10)
 (begin (set! pad " ")
)
 (quote ()
)
)
 (_display (to-str (string-append (string-append (string-append (string-append "EKG(" pad)
 (to-str start)
)
 ")
: ")
 (to-str first)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret18)
 (let ((limit 100)
)
 (begin (let ((starts (_list 2 5 7 9 10)
)
)
 (begin (let ((ekg (_list)
)
)
 (begin (let ((s 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< s (cond ((string? starts)
 (string-length starts)
)
 ((hash-table? starts)
 (hash-table-size starts)
)
 (else (length starts)
)
)
)
 (begin (let ((seq (_list 1 (list-ref starts s)
)
)
)
 (begin (let ((n 2)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< n limit)
 (begin (let ((i 2)
)
 (begin (let ((done #f)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (not done)
 (begin (if (and (not (contains seq i)
)
 (_gt (gcd (list-ref seq (- n 1)
)
 i)
 1)
)
 (begin (set! seq (append seq (_list i)
)
)
 (set! done #t)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (set! n (+ n 1)
)
)
)
)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (set! ekg (append ekg (_list seq)
)
)
 (printSlice (list-ref starts s)
 seq)
 (set! s (+ s 1)
)
)
)
)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (let ((i 2)
)
 (begin (let ((found #f)
)
 (begin (call/cc (lambda (break26)
 (letrec ((loop25 (lambda ()
 (if (< i limit)
 (begin (if (and (equal? (cond ((string? (list-ref ekg 1)
)
 (substring (list-ref ekg 1)
 i (+ i 1)
)
)
 ((hash-table? (list-ref ekg 1)
)
 (hash-table-ref (list-ref ekg 1)
 i)
)
 (else (list-ref (list-ref ekg 1)
 i)
)
)
 (cond ((string? (list-ref ekg 2)
)
 (substring (list-ref ekg 2)
 i (+ i 1)
)
)
 ((hash-table? (list-ref ekg 2)
)
 (hash-table-ref (list-ref ekg 2)
 i)
)
 (else (list-ref (list-ref ekg 2)
 i)
)
)
)
 (areSame (if (string? (list-ref ekg 1)
)
 (substring (list-ref ekg 1)
 0 i)
 (take (drop (list-ref ekg 1)
 0)
 (- i 0)
)
)
 (if (string? (list-ref ekg 2)
)
 (substring (list-ref ekg 2)
 0 i)
 (take (drop (list-ref ekg 2)
 0)
 (- i 0)
)
)
)
)
 (begin (_display (to-str (string-append "\nEKG(5)
 and EKG(7)
 converge at term " (to-str (+ i 1)
)
)
)
)
 (newline)
 (set! found #t)
 (break26 (quote ()
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop25)
)
 (quote ()
)
)
)
)
)
 (loop25)
)
)
)
 (if (not found)
 (begin (_display (to-str (string-append (string-append "\nEKG5(5)
 and EKG(7)
 do not converge within " (to-str limit)
)
 " terms")
)
)
 (newline)
)
 (quote ()
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end28 (now)
)
)
 (let ((dur29 (quotient (- end28 start27)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur29)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
