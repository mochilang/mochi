;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start26 (now)
)
)
 (begin (define (square_to_maps square)
 (call/cc (lambda (ret1)
 (let ((emap (alist->hash-table (_list)
)
)
)
 (begin (let ((dmap (alist->hash-table (_list)
)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< x (cond ((string? square)
 (string-length square)
)
 ((hash-table? square)
 (hash-table-size square)
)
 (else (length square)
)
)
)
 (begin (let ((row (list-ref square x)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< y (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (let ((ch (list-ref row y)
)
)
 (begin (hash-table-set! emap ch (_list x y)
)
 (hash-table-set! dmap (string-append (string-append (to-str x)
 ",")
 (to-str y)
)
 ch)
 (set! y (+ y 1)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! x (+ x 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (alist->hash-table (_list (cons "e" emap)
 (cons "d" dmap)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (remove_space text emap)
 (call/cc (lambda (ret6)
 (let ((s (upper text)
)
)
 (begin (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (and (not (string=? ch " ")
)
 (cond ((string? emap)
 (if (string-contains emap ch)
 #t #f)
)
 ((hash-table? emap)
 (if (hash-table-exists? emap ch)
 #t #f)
)
 (else (if (member ch emap)
 #t #f)
)
)
)
 (begin (set! out (string-append out ch)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 out)
)
)
)
)
)
)
)
)
)
 (define (encrypt text emap dmap)
 (call/cc (lambda (ret9)
 (begin (set! text (remove_space text emap)
)
 (let ((row0 (_list)
)
)
 (begin (let ((row1 (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i (cond ((string? text)
 (string-length text)
)
 ((hash-table? text)
 (hash-table-size text)
)
 (else (length text)
)
)
)
 (begin (let ((ch (substring text i (+ i 1)
)
)
)
 (begin (let ((xy (hash-table-ref/default emap ch (quote ()
)
)
)
)
 (begin (set! row0 (append row0 (_list (list-ref xy 0)
)
)
)
 (set! row1 (append row1 (_list (list-ref xy 1)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (call/cc (lambda (break13)
 (letrec ((loop12 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((v (car xs)
)
)
 (begin (set! row0 (append row0 (_list v)
)
)
)
)
 (loop12 (cdr xs)
)
)
)
)
)
)
 (loop12 row1)
)
)
)
 (let ((res "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j (cond ((string? row0)
 (string-length row0)
)
 ((hash-table? row0)
 (hash-table-size row0)
)
 (else (length row0)
)
)
)
 (begin (let ((key (string-append (string-append (to-str (list-ref row0 j)
)
 ",")
 (to-str (list-ref row0 (+ j 1)
)
)
)
)
)
 (begin (set! res (string-append res (hash-table-ref/default dmap key (quote ()
)
)
)
)
 (set! j (+ j 2)
)
)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (ret9 res)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (decrypt text emap dmap)
 (call/cc (lambda (ret16)
 (begin (set! text (remove_space text emap)
)
 (let ((coords (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< i (cond ((string? text)
 (string-length text)
)
 ((hash-table? text)
 (hash-table-size text)
)
 (else (length text)
)
)
)
 (begin (let ((ch (substring text i (+ i 1)
)
)
)
 (begin (let ((xy (hash-table-ref/default emap ch (quote ()
)
)
)
)
 (begin (set! coords (append coords (_list (list-ref xy 0)
)
)
)
 (set! coords (append coords (_list (list-ref xy 1)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (let ((half (quotient (cond ((string? coords)
 (string-length coords)
)
 ((hash-table? coords)
 (hash-table-size coords)
)
 (else (length coords)
)
)
 2)
)
)
 (begin (let ((k1 (_list)
)
)
 (begin (let ((k2 (_list)
)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< idx half)
 (begin (set! k1 (append k1 (_list (list-ref coords idx)
)
)
)
 (set! idx (+ idx 1)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< idx (cond ((string? coords)
 (string-length coords)
)
 ((hash-table? coords)
 (hash-table-size coords)
)
 (else (length coords)
)
)
)
 (begin (set! k2 (append k2 (_list (list-ref coords idx)
)
)
)
 (set! idx (+ idx 1)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (let ((res "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< j half)
 (begin (let ((key (string-append (string-append (to-str (list-ref k1 j)
)
 ",")
 (to-str (list-ref k2 j)
)
)
)
)
 (begin (set! res (string-append res (hash-table-ref/default dmap key (quote ()
)
)
)
)
 (set! j (+ j 1)
)
)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (ret16 res)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret25)
 (let ((squareRosetta (_list (_list "A" "B" "C" "D" "E")
 (_list "F" "G" "H" "I" "K")
 (_list "L" "M" "N" "O" "P")
 (_list "Q" "R" "S" "T" "U")
 (_list "V" "W" "X" "Y" "Z")
 (_list "J" "1" "2" "3" "4")
)
)
)
 (begin (let ((squareWikipedia (_list (_list "B" "G" "W" "K" "Z")
 (_list "Q" "P" "N" "D" "S")
 (_list "I" "O" "A" "X" "E")
 (_list "F" "C" "L" "U" "M")
 (_list "T" "H" "Y" "V" "R")
 (_list "J" "1" "2" "3" "4")
)
)
)
 (begin (let ((textRosetta "0ATTACKATDAWN")
)
 (begin (let ((textWikipedia "FLEEATONCE")
)
 (begin (let ((textTest "The invasion will start on the first of January")
)
 (begin (let ((maps (square_to_maps squareRosetta)
)
)
 (begin (let ((emap (cond ((string? maps)
 (substring maps "e" (+ "e" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "e")
)
 (else (list-ref maps "e")
)
)
)
)
 (begin (let ((dmap (cond ((string? maps)
 (substring maps "d" (+ "d" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "d")
)
 (else (list-ref maps "d")
)
)
)
)
 (begin (display (to-str "from Rosettacode")
)
 (newline)
 (display (to-str (string-append "original:\t " textRosetta)
)
)
 (newline)
 (let ((s (encrypt textRosetta emap dmap)
)
)
 (begin (display (to-str (string-append "codiert:\t " s)
)
)
 (newline)
 (set! s (decrypt s emap dmap)
)
 (display (to-str (string-append "and back:\t " s)
)
)
 (newline)
 (set! maps (square_to_maps squareWikipedia)
)
 (set! emap (cond ((string? maps)
 (substring maps "e" (+ "e" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "e")
)
 (else (list-ref maps "e")
)
)
)
 (set! dmap (cond ((string? maps)
 (substring maps "d" (+ "d" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "d")
)
 (else (list-ref maps "d")
)
)
)
 (display (to-str "from Wikipedia")
)
 (newline)
 (display (to-str (string-append "original:\t " textWikipedia)
)
)
 (newline)
 (set! s (encrypt textWikipedia emap dmap)
)
 (display (to-str (string-append "codiert:\t " s)
)
)
 (newline)
 (set! s (decrypt s emap dmap)
)
 (display (to-str (string-append "and back:\t " s)
)
)
 (newline)
 (set! maps (square_to_maps squareWikipedia)
)
 (set! emap (cond ((string? maps)
 (substring maps "e" (+ "e" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "e")
)
 (else (list-ref maps "e")
)
)
)
 (set! dmap (cond ((string? maps)
 (substring maps "d" (+ "d" 1)
)
)
 ((hash-table? maps)
 (hash-table-ref maps "d")
)
 (else (list-ref maps "d")
)
)
)
 (display (to-str "from Rosettacode long part")
)
 (newline)
 (display (to-str (string-append "original:\t " textTest)
)
)
 (newline)
 (set! s (encrypt textTest emap dmap)
)
 (display (to-str (string-append "codiert:\t " s)
)
)
 (newline)
 (set! s (decrypt s emap dmap)
)
 (display (to-str (string-append "and back:\t " s)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end27 (now)
)
)
 (let ((dur28 (quotient (- end27 start26)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur28)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
