;; Generated on 2025-08-03 09:40 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start15 (now))) (begin (define (sqrtApprox x) (call/cc (lambda (ret1) (begin (if (<= x 0.0) (begin (ret1 0.0)) (quote ())) (let ((g x)) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i 20) (begin (set! g (/ (_add g (/ x g)) 2.0)) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 g))))))))) (define dxs (_list (- 0.533) 0.27 0.859 (- 0.043) (- 0.205) (- 0.127) (- 0.071) 0.275 1.251 (- 0.231) (- 0.401) 0.269 0.491 0.951 1.15 0.001 (- 0.382) 0.161 0.915 2.08 (- 2.337) 0.034 (- 0.126) 0.014 0.709 0.129 (- 1.093) (- 0.483) (- 1.193) 0.02 (- 0.051) 0.047 (- 0.095) 0.695 0.34 (- 0.182) 0.287 0.213 (- 0.423) (- 0.021) (- 0.134) 1.798 0.021 (- 1.099) (- 0.361) 1.636 (- 1.134) 1.315 0.201 0.034 0.097 (- 0.17) 0.054 (- 0.553) (- 0.024) (- 0.181) (- 0.7) (- 0.361) (- 0.789) 0.279 (- 0.174) (- 0.009) (- 0.323) (- 0.658) 0.348 (- 0.528) 0.881 0.021 (- 0.853) 0.157 0.648 1.774 (- 1.043) 0.051 0.021 0.247 (- 0.31) 0.171 0.0 0.106 0.024 (- 0.386) 0.962 0.765 (- 0.125) (- 0.289) 0.521 0.017 0.281 (- 0.749) (- 0.149) (- 2.436) (- 0.909) 0.394 (- 0.113) (- 0.598) 0.443 (- 0.521) (- 0.799) 0.087)) (define dys (_list 0.136 0.717 0.459 (- 0.225) 1.392 0.385 0.121 (- 0.395) 0.49 (- 0.682) (- 0.065) 0.242 (- 0.288) 0.658 0.459 0.0 0.426 0.205 (- 0.765) (- 2.188) (- 0.742) (- 0.01) 0.089 0.208 0.585 0.633 (- 0.444) (- 0.351) (- 1.087) 0.199 0.701 0.096 (- 0.025) (- 0.868) 1.051 0.157 0.216 0.162 0.249 (- 0.007) 0.009 0.508 (- 0.79) 0.723 0.881 (- 0.508) 0.393 (- 0.226) 0.71 0.038 (- 0.217) 0.831 0.48 0.407 0.447 (- 0.295) 1.126 0.38 0.549 (- 0.445) (- 0.046) 0.428 (- 0.074) 0.217 (- 0.822) 0.491 1.347 (- 0.141) 1.23 (- 0.044) 0.079 0.219 0.698 0.275 0.056 0.031 0.421 0.064 0.721 0.104 (- 0.729) 0.65 (- 1.103) 0.154 (- 1.72) 0.051 (- 0.385) 0.477 1.537 (- 0.901) 0.939 (- 0.411) 0.341 (- 0.411) 0.106 0.224 (- 0.947) (- 1.424) (- 0.542) (- 1.032))) (define (funnel fa r) (call/cc (lambda (ret4) (let ((x 0.0)) (begin (let ((result (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< i (cond ((string? fa) (string-length fa)) ((hash-table? fa) (hash-table-size fa)) (else (length fa)))) (begin (let ((f (list-ref fa i))) (begin (set! result (append result (_list (+ x f)))) (set! x (r x f)) (set! i (+ i 1)))) (loop5)) (quote ()))))) (loop5)))) (ret4 result)))))))))) (define (mean fa) (call/cc (lambda (ret7) (let ((sum 0.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< i (cond ((string? fa) (string-length fa)) ((hash-table? fa) (hash-table-size fa)) (else (length fa)))) (begin (set! sum (+ sum (list-ref fa i))) (set! i (+ i 1)) (loop8)) (quote ()))))) (loop8)))) (ret7 (/ sum (+ 0.0 (cond ((string? fa) (string-length fa)) ((hash-table? fa) (hash-table-size fa)) (else (length fa))))))))))))) (define (stdDev fa) (call/cc (lambda (ret10) (let ((m (mean fa))) (begin (let ((sum 0.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< i (cond ((string? fa) (string-length fa)) ((hash-table? fa) (hash-table-size fa)) (else (length fa)))) (begin (let ((d (- (list-ref fa i) m))) (begin (set! sum (_add sum (* d d))) (set! i (+ i 1)))) (loop11)) (quote ()))))) (loop11)))) (let ((r (sqrtApprox (/ sum (+ 0.0 (cond ((string? fa) (string-length fa)) ((hash-table? fa) (hash-table-size fa)) (else (length fa)))))))) (begin (ret10 r)))))))))))) (define (experiment label r) (call/cc (lambda (ret13) (let ((rxs (funnel dxs r))) (begin (let ((rys (funnel dys r))) (begin (_display (to-str (string-append label "  :      x        y"))) (newline) (_display (to-str (string-append (string-append (string-append "Mean    :  " (to-str (mean rxs))) ", ") (to-str (mean rys))))) (newline) (_display (to-str (string-append (string-append (string-append "Std Dev :  " (to-str (stdDev rxs))) ", ") (to-str (stdDev rys))))) (newline) (_display (to-str "")) (newline)))))))) (define (main) (call/cc (lambda (ret14) (begin (experiment "Rule 1" (lambda (x y) 0.0)) (experiment "Rule 2" (lambda (x dz) (- dz))) (experiment "Rule 3" (lambda (z dz) (- (_add z dz)))) (experiment "Rule 4" (lambda (z dz) (_add z dz))))))) (main) (let ((end16 (now))) (let ((dur17 (quotient (- end16 start15) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur17) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
