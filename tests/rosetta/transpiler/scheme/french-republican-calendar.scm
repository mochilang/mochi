;; Generated on 2025-08-01 15:22 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define gregorianStr (_list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December")
)
(define gregorian (_list 31 28 31 30 31 30 31 31 30 31 30 31)
)
(define republicanStr (_list "Vendemiaire" "Brumaire" "Frimaire" "Nivose" "Pluviose" "Ventose" "Germinal" "Floreal" "Prairial" "Messidor" "Thermidor" "Fructidor")
)
(define sansculotidesStr (_list "Fete de la vertu" "Fete du genie" "Fete du travail" "Fete de l'opinion" "Fete des recompenses" "Fete de la Revolution")
)
(define (greLeap year)
 (call/cc (lambda (ret1)
 (let ((a (let ((v2 (modulo year 4)
)
)
 (cond ((string? v2)
 (inexact->exact (floor (string->number v2)
)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact (floor v2)
)
)
)
)
)
)
 (begin (let ((b (let ((v3 (modulo year 100)
)
)
 (cond ((string? v3)
 (inexact->exact (floor (string->number v3)
)
)
)
 ((boolean? v3)
 (if v3 1 0)
)
 (else (inexact->exact (floor v3)
)
)
)
)
)
)
 (begin (let ((c (let ((v4 (modulo year 400)
)
)
 (cond ((string? v4)
 (inexact->exact (floor (string->number v4)
)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact (floor v4)
)
)
)
)
)
)
 (begin (ret1 (and (equal? a 0)
 (or (not (equal? b 0)
)
 (equal? c 0)
)
)
)
)
)
)
)
)
)
)
)
)
(define (repLeap year)
 (call/cc (lambda (ret5)
 (let ((a (let ((v6 (modulo (+ year 1)
 4)
)
)
 (cond ((string? v6)
 (inexact->exact (floor (string->number v6)
)
)
)
 ((boolean? v6)
 (if v6 1 0)
)
 (else (inexact->exact (floor v6)
)
)
)
)
)
)
 (begin (let ((b (let ((v7 (modulo (+ year 1)
 100)
)
)
 (cond ((string? v7)
 (inexact->exact (floor (string->number v7)
)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (inexact->exact (floor v7)
)
)
)
)
)
)
 (begin (let ((c (let ((v8 (modulo (+ year 1)
 400)
)
)
 (cond ((string? v8)
 (inexact->exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact (floor v8)
)
)
)
)
)
)
 (begin (ret5 (and (equal? a 0)
 (or (not (equal? b 0)
)
 (equal? c 0)
)
)
)
)
)
)
)
)
)
)
)
)
(define (greToDay d m y)
 (call/cc (lambda (ret9)
 (let ((yy y)
)
 (begin (let ((mm m)
)
 (begin (if (< mm 3)
 (begin (set! yy (- yy 1)
)
 (set! mm (+ mm 12)
)
)
 (quote ()
)
)
 (ret9 (- (_add (_add (_add (- (/ (* yy 36525)
 100)
 (quotient yy 100)
)
 (quotient yy 400)
)
 (/ (* 306 (+ mm 1)
)
 10)
)
 d)
 654842)
)
)
)
)
)
)
)
)
(define (repToDay d m y)
 (call/cc (lambda (ret10)
 (let ((dd d)
)
 (begin (let ((mm m)
)
 (begin (if (equal? mm 13)
 (begin (set! mm (- mm 1)
)
 (set! dd (+ dd 30)
)
)
 (quote ()
)
)
 (if (repLeap y)
 (begin (set! dd (- dd 1)
)
)
 (quote ()
)
)
 (ret10 (- (_add (_add (_add (- (_add (* 365 y)
 (quotient (+ y 1)
 4)
)
 (quotient (+ y 1)
 100)
)
 (quotient (+ y 1)
 400)
)
 (* 30 mm)
)
 dd)
 395)
)
)
)
)
)
)
)
)
(define (dayToGre day)
 (call/cc (lambda (ret11)
 (let ((y (/ (* day 100)
 36525)
)
)
 (begin (let ((d (_add (- day (/ (* y 36525)
 100)
)
 21)
)
)
 (begin (set! y (+ y 1792)
)
 (set! d (- (- (_add d (quotient y 100)
)
 (quotient y 400)
)
 13)
)
 (let ((m 8)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (> d (list-ref gregorian m)
)
 (begin (set! d (- d (list-ref gregorian m)
)
)
 (set! m (+ m 1)
)
 (if (equal? m 12)
 (begin (set! m 0)
 (set! y (+ y 1)
)
 (if (greLeap y)
 (begin (list-set! gregorian 1 29)
)
 (begin (list-set! gregorian 1 28)
)
)
)
 (quote ()
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (set! m (+ m 1)
)
 (ret11 (_list d m y)
)
)
)
)
)
)
)
)
)
)
(define (dayToRep day)
 (call/cc (lambda (ret14)
 (let ((y (/ (* (- day 1)
 100)
 36525)
)
)
 (begin (if (repLeap y)
 (begin (set! y (- y 1)
)
)
 (quote ()
)
)
 (let ((d (- (_add (_add (- day (/ (* (+ y 1)
 36525)
 100)
)
 365)
 (quotient (+ y 1)
 100)
)
 (quotient (+ y 1)
 400)
)
)
)
 (begin (set! y (+ y 1)
)
 (let ((m 1)
)
 (begin (let ((sc 5)
)
 (begin (if (repLeap y)
 (begin (set! sc 6)
)
 (quote ()
)
)
 (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (> d 30)
 (begin (set! d (- d 30)
)
 (set! m (+ m 1)
)
 (if (equal? m 13)
 (begin (if (> d sc)
 (begin (set! d (- d sc)
)
 (set! m 1)
 (set! y (+ y 1)
)
 (set! sc 5)
 (if (repLeap y)
 (begin (set! sc 6)
)
 (quote ()
)
)
)
 (quote ()
)
)
)
 (quote ()
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (ret14 (_list d m y)
)
)
)
)
)
)
)
)
)
)
)
)
(define (formatRep d m y)
 (call/cc (lambda (ret17)
 (begin (if (equal? m 13)
 (begin (ret17 (string-append (string-append (list-ref sansculotidesStr (- d 1)
)
 " ")
 (to-str y)
)
)
)
 (quote ()
)
)
 (ret17 (string-append (string-append (string-append (string-append (to-str d)
 " ")
 (list-ref republicanStr (- m 1)
)
)
 " ")
 (to-str y)
)
)
)
)
)
)
(define (formatGre d m y)
 (call/cc (lambda (ret18)
 (ret18 (string-append (string-append (string-append (string-append (to-str d)
 " ")
 (list-ref gregorianStr (- m 1)
)
)
 " ")
 (to-str y)
)
)
)
)
)
(define rep (dayToRep (greToDay 20 5 1795)
)
)
(_display (to-str (formatRep (cond ((string? rep)
 (substring rep 0 (+ 0 1)
)
)
 ((hash-table? rep)
 (hash-table-ref rep 0)
)
 (else (list-ref rep 0)
)
)
 (cond ((string? rep)
 (substring rep 1 (+ 1 1)
)
)
 ((hash-table? rep)
 (hash-table-ref rep 1)
)
 (else (list-ref rep 1)
)
)
 (cond ((string? rep)
 (substring rep 2 (+ 2 1)
)
)
 ((hash-table? rep)
 (hash-table-ref rep 2)
)
 (else (list-ref rep 2)
)
)
)
)
)
(newline)
(define gre (dayToGre (repToDay 1 9 3)
)
)
(_display (to-str (formatGre (cond ((string? gre)
 (substring gre 0 (+ 0 1)
)
)
 ((hash-table? gre)
 (hash-table-ref gre 0)
)
 (else (list-ref gre 0)
)
)
 (cond ((string? gre)
 (substring gre 1 (+ 1 1)
)
)
 ((hash-table? gre)
 (hash-table-ref gre 1)
)
 (else (list-ref gre 1)
)
)
 (cond ((string? gre)
 (substring gre 2 (+ 2 1)
)
)
 ((hash-table? gre)
 (hash-table-ref gre 2)
)
 (else (list-ref gre 2)
)
)
)
)
)
(newline)
