;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start27 (now)
)
)
 (begin (define (trimLeftZeros s)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (and (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (string=? (substring s i (+ i 1)
)
 "0")
)
 (begin (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (substring s i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
)
)
)
)
 (define (btString s)
 (call/cc (lambda (ret4)
 (begin (set! s (trimLeftZeros s)
)
 (let ((b (_list)
)
)
 (begin (let ((i (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (>= i 0)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (string=? ch "+")
 (begin (set! b (append b (_list 1)
)
)
)
 (begin (if (string=? ch "0")
 (begin (set! b (append b (_list 0)
)
)
)
 (begin (if (string=? ch "-")
 (begin (set! b (append b (_list (- 0 1)
)
)
)
)
 (begin (ret4 (alist->hash-table (_list (cons "bt" (_list)
)
 (cons "ok" #f)
)
)
)
)
)
)
)
)
)
 (set! i (- i 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 (alist->hash-table (_list (cons "bt" b)
 (cons "ok" #t)
)
)
)
)
)
)
)
)
)
)
)
 (define (btToString b)
 (call/cc (lambda (ret7)
 (begin (if (equal? (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
 0)
 (begin (ret7 "0")
)
 (quote ()
)
)
 (let ((r "")
)
 (begin (let ((i (- (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
 1)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (>= i 0)
 (begin (let ((d (list-ref b i)
)
)
 (begin (if (equal? d (- 0 1)
)
 (begin (set! r (string-append r "-")
)
)
 (begin (if (equal? d 0)
 (begin (set! r (string-append r "0")
)
)
 (begin (set! r (string-append r "+")
)
)
)
)
)
 (set! i (- i 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 r)
)
)
)
)
)
)
)
)
 (define (btInt i)
 (call/cc (lambda (ret10)
 (begin (if (equal? i 0)
 (begin (ret10 (_list)
)
)
 (quote ()
)
)
 (let ((n i)
)
 (begin (let ((b (_list)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (not (equal? n 0)
)
 (begin (let ((m (modulo n 3)
)
)
 (begin (set! n (let ((v13 (quotient n 3)
)
)
 (cond ((string? v13)
 (inexact->exact (string->number v13)
)
)
 ((boolean? v13)
 (if v13 1 0)
)
 (else (inexact->exact v13)
)
)
)
)
 (if (equal? m 2)
 (begin (set! m (- 0 1)
)
 (set! n (+ n 1)
)
)
 (begin (if (equal? m (- 0 2)
)
 (begin (set! m 1)
 (set! n (- n 1)
)
)
 (quote ()
)
)
)
)
 (set! b (append b (_list m)
)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 b)
)
)
)
)
)
)
)
)
 (define (btToInt b)
 (call/cc (lambda (ret14)
 (let ((r 0)
)
 (begin (let ((pt 1)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< i (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
 (begin (set! r (+ r (* (list-ref b i)
 pt)
)
)
 (set! pt (* pt 3)
)
 (set! i (+ i 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (ret14 r)
)
)
)
)
)
)
)
)
)
 (define (btNeg b)
 (call/cc (lambda (ret17)
 (let ((r (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< i (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
 (begin (set! r (append r (_list (- (list-ref b i)
)
)
)
)
 (set! i (+ i 1)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (ret17 r)
)
)
)
)
)
)
)
 (define (btAdd a b)
 (call/cc (lambda (ret20)
 (ret20 (btInt (+ (btToInt a)
 (btToInt b)
)
)
)
)
)
)
 (define (btMul a b)
 (call/cc (lambda (ret21)
 (ret21 (btInt (* (btToInt a)
 (btToInt b)
)
)
)
)
)
)
 (define (padLeft s w)
 (call/cc (lambda (ret22)
 (let ((r s)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< (cond ((string? r)
 (string-length r)
)
 ((hash-table? r)
 (hash-table-size r)
)
 (else (length r)
)
)
 w)
 (begin (set! r (string-append " " r)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (ret22 r)
)
)
)
)
)
 (define (show label b)
 (call/cc (lambda (ret25)
 (let ((l (padLeft label 7)
)
)
 (begin (let ((bs (padLeft (btToString b)
 12)
)
)
 (begin (let ((is (padLeft (to-str (btToInt b)
)
 7)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append l " ")
 bs)
 " ")
 is)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret26)
 (let ((ares (btString "+-0++0+")
)
)
 (begin (let ((a (cond ((string? ares)
 (substring ares "bt" (+ "bt" 1)
)
)
 ((hash-table? ares)
 (hash-table-ref ares "bt")
)
 (else (list-ref ares "bt")
)
)
)
)
 (begin (let ((b (btInt (- 436)
)
)
)
 (begin (let ((cres (btString "+-++-")
)
)
 (begin (let ((c (cond ((string? cres)
 (substring cres "bt" (+ "bt" 1)
)
)
 ((hash-table? cres)
 (hash-table-ref cres "bt")
)
 (else (list-ref cres "bt")
)
)
)
)
 (begin (show "a:" a)
 (show "b:" b)
 (show "c:" c)
 (show "a(b-c)
:" (btMul a (btAdd b (btNeg c)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end28 (now)
)
)
 (let ((dur29 (quotient (- end28 start27)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur29)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
