;; Generated on 2025-07-26 21:21 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start18 (now)
)
)
 (begin (define (sortRunes s)
 (call/cc (lambda (ret1)
 (let ((arr (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! arr (append arr (_list (substring s i (+ i 1)
)
)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (let ((n (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
)
 (begin (let ((m 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< m n)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (_lt j (- n 1)
)
 (begin (if (string>? (list-ref arr j)
 (list-ref arr (+ j 1)
)
)
 (begin (let ((tmp (list-ref arr j)
)
)
 (begin (list-set! arr j (list-ref arr (+ j 1)
)
)
 (list-set! arr (+ j 1)
 tmp)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (set! m (+ m 1)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (let ((out "")
)
 (begin (set! i 0)
 (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (set! out (string-append out (list-ref arr i)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret1 out)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (deranged a b)
 (call/cc (lambda (ret10)
 (begin (if (not (equal? (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
)
 (begin (ret10 #f)
)
 (quote ()
)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
 (begin (if (string=? (substring a i (+ i 1)
)
 (substring b i (+ i 1)
)
)
 (begin (ret10 #f)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 #t)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret13)
 (let ((words (_list "constitutionalism" "misconstitutional")
)
)
 (begin (let ((m (alist->hash-table (_list)
)
)
)
 (begin (let ((bestLen 0)
)
 (begin (let ((w1 "")
)
 (begin (let ((w2 "")
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((w (car xs)
)
)
 (begin (if (<= (cond ((string? w)
 (string-length w)
)
 ((hash-table? w)
 (hash-table-size w)
)
 (else (length w)
)
)
 bestLen)
 (begin (loop14 (cdr xs)
)
)
 (quote ()
)
)
 (let ((k (sortRunes w)
)
)
 (begin (if (not (cond ((string? m)
 (if (string-contains m k)
 #t #f)
)
 ((hash-table? m)
 (if (hash-table-exists? m k)
 #t #f)
)
 (else (if (member k m)
 #t #f)
)
)
)
 (begin (hash-table-set! m k (_list w)
)
 (loop14 (cdr xs)
)
)
 (quote ()
)
)
 (call/cc (lambda (break17)
 (letrec ((loop16 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((c (car xs)
)
)
 (begin (if (deranged w c)
 (begin (set! bestLen (cond ((string? w)
 (string-length w)
)
 ((hash-table? w)
 (hash-table-size w)
)
 (else (length w)
)
)
)
 (set! w1 c)
 (set! w2 w)
 (break17 (quote ()
)
)
)
 (quote ()
)
)
)
)
 (loop16 (cdr xs)
)
)
)
)
)
)
 (loop16 (hash-table-ref/default m k (quote ()
)
)
)
)
)
)
 (hash-table-set! m k (append (hash-table-ref/default m k (quote ()
)
)
 (_list w)
)
)
)
)
)
)
 (loop14 (cdr xs)
)
)
)
)
)
)
 (loop14 words)
)
)
)
 (display (to-str (string-append (string-append (string-append (string-append w1 " ")
 w2)
 " : Length ")
 (to-str bestLen)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end19 (now)
)
)
 (let ((dur20 (quotient (- end19 start18)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur20)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
