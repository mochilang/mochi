;; Generated on 2025-07-27 23:17 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start14 (now)
)
)
 (begin (define (indexOf s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
 (define (ord ch)
 (call/cc (lambda (ret4)
 (let ((upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
)
 (begin (let ((lower "abcdefghijklmnopqrstuvwxyz")
)
 (begin (let ((idx (indexOf upper ch)
)
)
 (begin (if (_ge idx 0)
 (begin (ret4 (+ 65 idx)
)
)
 (quote ()
)
)
 (set! idx (indexOf lower ch)
)
 (if (_ge idx 0)
 (begin (ret4 (+ 97 idx)
)
)
 (quote ()
)
)
 (ret4 0)
)
)
)
)
)
)
)
)
)
 (define (chr n)
 (call/cc (lambda (ret5)
 (let ((upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
)
 (begin (let ((lower "abcdefghijklmnopqrstuvwxyz")
)
 (begin (if (and (>= n 65)
 (< n 91)
)
 (begin (ret5 (substring upper (- n 65)
 (- n 64)
)
)
)
 (quote ()
)
)
 (if (and (>= n 97)
 (< n 123)
)
 (begin (ret5 (substring lower (- n 97)
 (- n 96)
)
)
)
 (quote ()
)
)
 (ret5 "?")
)
)
)
)
)
)
)
 (define (shiftRune r k)
 (call/cc (lambda (ret6)
 (begin (if (and (string>=? r "a")
 (string<=? r "z")
)
 (begin (ret6 (chr (+ (modulo (+ (- (ord r)
 97)
 k)
 26)
 97)
)
)
)
 (quote ()
)
)
 (if (and (string>=? r "A")
 (string<=? r "Z")
)
 (begin (ret6 (chr (+ (modulo (+ (- (ord r)
 65)
 k)
 26)
 65)
)
)
)
 (quote ()
)
)
 (ret6 r)
)
)
)
)
 (define (encipher s k)
 (call/cc (lambda (ret7)
 (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! out (string-append out (shiftRune (substring s i (+ i 1)
)
 k)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 out)
)
)
)
)
)
)
)
 (define (decipher s k)
 (call/cc (lambda (ret10)
 (ret10 (encipher s (modulo (- 26 (modulo k 26)
)
 26)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret11)
 (let ((pt "The five boxing wizards jump quickly")
)
 (begin (_display (to-str (string-append "Plaintext: " pt)
)
)
 (newline)
 (call/cc (lambda (break13)
 (letrec ((loop12 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((key (car xs)
)
)
 (begin (if (or (_lt key 1)
 (_gt key 25)
)
 (begin (_display (to-str (string-append (string-append "Key " (to-str key)
)
 " invalid")
)
)
 (newline)
 (loop12 (cdr xs)
)
)
 (quote ()
)
)
 (let ((ct (encipher pt key)
)
)
 (begin (_display (to-str (string-append "Key " (to-str key)
)
)
)
 (newline)
 (_display (to-str (string-append "  Enciphered: " ct)
)
)
 (newline)
 (_display (to-str (string-append "  Deciphered: " (decipher ct key)
)
)
)
 (newline)
)
)
)
)
 (loop12 (cdr xs)
)
)
)
)
)
)
 (loop12 (_list 0 1 7 25 26)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end15 (now)
)
)
 (let ((dur16 (quotient (- end15 start14)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur16)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
