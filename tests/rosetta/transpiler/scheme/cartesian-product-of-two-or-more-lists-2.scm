;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (listStr xs) (call/cc (lambda (ret1) (let ((s "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs)))) (begin (set! s (string-append s (to-str (list-ref xs i)))) (if (_lt i (- (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs))) 1)) (begin (set! s (string-append s " "))) (quote ())) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (set! s (string-append s "]")) (ret1 s))))))))
(define (llStr lst) (call/cc (lambda (ret4) (let ((s "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< i (cond ((string? lst) (string-length lst)) ((hash-table? lst) (hash-table-size lst)) (else (length lst)))) (begin (set! s (string-append s (listStr (list-ref lst i)))) (if (_lt i (- (cond ((string? lst) (string-length lst)) ((hash-table? lst) (hash-table-size lst)) (else (length lst))) 1)) (begin (set! s (string-append s " "))) (quote ())) (set! i (+ i 1)) (loop5)) (quote ()))))) (loop5)))) (set! s (string-append s "]")) (ret4 s))))))))
(define (cartN lists) (call/cc (lambda (ret7) (begin (if (equal? lists (quote ())) (begin (ret7 (_list))) (quote ())) (let ((a lists)) (begin (if (equal? (cond ((string? a) (string-length a)) ((hash-table? a) (hash-table-size a)) (else (length a))) 0) (begin (ret7 (_list (_list)))) (quote ())) (let ((c 1)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((xs (car xs))) (begin (set! c (* c (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs))))))) (loop8 (cdr xs))))))) (loop8 a)))) (if (equal? c 0) (begin (ret7 (_list))) (quote ())) (let ((res (_list))) (begin (let ((idx (_list))) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((_ (car xs))) (begin (set! idx (append idx (_list 0))))) (loop10 (cdr xs))))))) (loop10 a)))) (let ((n (cond ((string? a) (string-length a)) ((hash-table? a) (hash-table-size a)) (else (length a))))) (begin (let ((count 0)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< count c) (begin (let ((row (_list))) (begin (let ((j 0)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< j n) (begin (set! row (append row (_list (cond ((string? (list-ref a j)) (_substring (list-ref a j) (list-ref idx j) (+ (list-ref idx j) 1))) ((hash-table? (list-ref a j)) (hash-table-ref (list-ref a j) (list-ref idx j))) (else (list-ref (list-ref a j) (list-ref idx j))))))) (set! j (+ j 1)) (loop14)) (quote ()))))) (loop14)))) (set! res (append res (_list row))) (let ((k (- n 1))) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (>= k 0) (begin (list-set! idx k (+ (list-ref idx k) 1)) (if (< (list-ref idx k) (cond ((string? (list-ref a k)) (string-length (list-ref a k))) ((hash-table? (list-ref a k)) (hash-table-size (list-ref a k))) (else (length (list-ref a k))))) (begin (break17 (quote ()))) (quote ())) (list-set! idx k 0) (set! k (- k 1)) (loop16)) (quote ()))))) (loop16)))) (set! count (+ count 1)))))))) (loop12)) (quote ()))))) (loop12)))) (ret7 res)))))))))))))))))
(define (main) (call/cc (lambda (ret18) (begin (_display (to-str (llStr (cartN (_list (_list 1 2) (_list 3 4)))))) (newline) (_display (to-str (llStr (cartN (_list (_list 3 4) (_list 1 2)))))) (newline) (_display (to-str (llStr (cartN (_list (_list 1 2) (_list)))))) (newline) (_display (to-str (llStr (cartN (_list (_list) (_list 1 2)))))) (newline) (_display (to-str "")) (newline) (_display (to-str "[")) (newline) (call/cc (lambda (break20) (letrec ((loop19 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((p (car xs))) (begin (_display (to-str (string-append " " (listStr p)))) (newline))) (loop19 (cdr xs))))))) (loop19 (cartN (_list (_list 1776 1789) (_list 7 12) (_list 4 14 23) (_list 0 1))))))) (_display (to-str "]")) (newline) (_display (to-str (llStr (cartN (_list (_list 1 2 3) (_list 30) (_list 500 100)))))) (newline) (_display (to-str (llStr (cartN (_list (_list 1 2 3) (_list) (_list 500 100)))))) (newline) (_display (to-str "")) (newline) (_display (to-str (llStr (cartN (quote ()))))) (newline) (_display (to-str (llStr (cartN (_list))))) (newline)))))
(main)
