;; Generated on 2025-07-27 16:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start46 (now)
)
)
 (begin (define (pow2 n)
 (call/cc (lambda (ret1)
 (let ((v 1)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i n)
 (begin (set! v (* v 2)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 v)
)
)
)
)
)
)
)
 (define (lshift x n)
 (call/cc (lambda (ret4)
 (ret4 (* x (pow2 n)
)
)
)
)
)
 (define (rshift x n)
 (call/cc (lambda (ret5)
 (ret5 (quotient x (pow2 n)
)
)
)
)
)
 (define (NewWriter order)
 (call/cc (lambda (ret6)
 (ret6 (alist->hash-table (_list (cons "order" order)
 (cons "bits" 0)
 (cons "nbits" 0)
 (cons "data" (_list)
)
)
)
)
)
)
)
 (define (writeBitsLSB w c width)
 (call/cc (lambda (ret7)
 (begin (hash-table-set! w "bits" (+ (hash-table-ref w "bits")
 (lshift c (hash-table-ref w "nbits")
)
)
)
 (hash-table-set! w "nbits" (+ (hash-table-ref w "nbits")
 width)
)
 (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (>= (hash-table-ref w "nbits")
 8)
 (begin (let ((b (modulo (hash-table-ref w "bits")
 256)
)
)
 (begin (hash-table-set! w "data" (append (hash-table-ref w "data")
 (_list b)
)
)
 (hash-table-set! w "bits" (rshift (hash-table-ref w "bits")
 8)
)
 (hash-table-set! w "nbits" (- (hash-table-ref w "nbits")
 8)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 w)
)
)
)
)
 (define (writeBitsMSB w c width)
 (call/cc (lambda (ret10)
 (begin (hash-table-set! w "bits" (+ (hash-table-ref w "bits")
 (lshift c (- (- 32 width)
 (hash-table-ref w "nbits")
)
)
)
)
 (hash-table-set! w "nbits" (+ (hash-table-ref w "nbits")
 width)
)
 (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (>= (hash-table-ref w "nbits")
 8)
 (begin (let ((b (modulo (rshift (hash-table-ref w "bits")
 24)
 256)
)
)
 (begin (hash-table-set! w "data" (append (hash-table-ref w "data")
 (_list b)
)
)
 (hash-table-set! w "bits" (* (modulo (hash-table-ref w "bits")
 (pow2 24)
)
 256)
)
 (hash-table-set! w "nbits" (- (hash-table-ref w "nbits")
 8)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 w)
)
)
)
)
 (define (WriteBits w c width)
 (call/cc (lambda (ret13)
 (begin (if (string=? (hash-table-ref w "order")
 "LSB")
 (begin (ret13 (writeBitsLSB w c width)
)
)
 (quote ()
)
)
 (ret13 (writeBitsMSB w c width)
)
)
)
)
)
 (define (CloseWriter w)
 (call/cc (lambda (ret14)
 (begin (if (> (hash-table-ref w "nbits")
 0)
 (begin (if (string=? (hash-table-ref w "order")
 "MSB")
 (begin (hash-table-set! w "bits" (rshift (hash-table-ref w "bits")
 24)
)
)
 (quote ()
)
)
 (hash-table-set! w "data" (append (hash-table-ref w "data")
 (_list (modulo (hash-table-ref w "bits")
 256)
)
)
)
)
 (quote ()
)
)
 (hash-table-set! w "bits" 0)
 (hash-table-set! w "nbits" 0)
 (ret14 w)
)
)
)
)
 (define (NewReader data order)
 (call/cc (lambda (ret15)
 (ret15 (alist->hash-table (_list (cons "order" order)
 (cons "data" data)
 (cons "idx" 0)
 (cons "bits" 0)
 (cons "nbits" 0)
)
)
)
)
)
)
 (define (readBitsLSB r width)
 (call/cc (lambda (ret16)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< (hash-table-ref r "nbits")
 width)
 (begin (if (>= (hash-table-ref r "idx")
 (cond ((string? (hash-table-ref r "data")
)
 (string-length (hash-table-ref r "data")
)
)
 ((hash-table? (hash-table-ref r "data")
)
 (hash-table-size (hash-table-ref r "data")
)
)
 (else (length (hash-table-ref r "data")
)
)
)
)
 (begin (ret16 (alist->hash-table (_list (cons "val" 0)
 (cons "eof" #t)
)
)
)
)
 (quote ()
)
)
 (let ((b (list-ref (hash-table-ref r "data")
 (hash-table-ref r "idx")
)
)
)
 (begin (hash-table-set! r "idx" (+ (hash-table-ref r "idx")
 1)
)
 (hash-table-set! r "bits" (+ (hash-table-ref r "bits")
 (lshift b (hash-table-ref r "nbits")
)
)
)
 (hash-table-set! r "nbits" (+ (hash-table-ref r "nbits")
 8)
)
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (let ((mask (- (pow2 width)
 1)
)
)
 (begin (let ((out (modulo (hash-table-ref r "bits")
 (+ mask 1)
)
)
)
 (begin (hash-table-set! r "bits" (rshift (hash-table-ref r "bits")
 width)
)
 (hash-table-set! r "nbits" (- (hash-table-ref r "nbits")
 width)
)
 (ret16 (alist->hash-table (_list (cons "val" out)
 (cons "eof" #f)
)
)
)
)
)
)
)
)
)
)
)
 (define (readBitsMSB r width)
 (call/cc (lambda (ret19)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< (hash-table-ref r "nbits")
 width)
 (begin (if (>= (hash-table-ref r "idx")
 (cond ((string? (hash-table-ref r "data")
)
 (string-length (hash-table-ref r "data")
)
)
 ((hash-table? (hash-table-ref r "data")
)
 (hash-table-size (hash-table-ref r "data")
)
)
 (else (length (hash-table-ref r "data")
)
)
)
)
 (begin (ret19 (alist->hash-table (_list (cons "val" 0)
 (cons "eof" #t)
)
)
)
)
 (quote ()
)
)
 (let ((b (list-ref (hash-table-ref r "data")
 (hash-table-ref r "idx")
)
)
)
 (begin (hash-table-set! r "idx" (+ (hash-table-ref r "idx")
 1)
)
 (hash-table-set! r "bits" (+ (hash-table-ref r "bits")
 (lshift b (- 24 (hash-table-ref r "nbits")
)
)
)
)
 (hash-table-set! r "nbits" (+ (hash-table-ref r "nbits")
 8)
)
)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (let ((out (rshift (hash-table-ref r "bits")
 (- 32 width)
)
)
)
 (begin (hash-table-set! r "bits" (modulo (* (hash-table-ref r "bits")
 (pow2 width)
)
 (pow2 32)
)
)
 (hash-table-set! r "nbits" (- (hash-table-ref r "nbits")
 width)
)
 (ret19 (alist->hash-table (_list (cons "val" out)
 (cons "eof" #f)
)
)
)
)
)
)
)
)
)
 (define (ReadBits r width)
 (call/cc (lambda (ret22)
 (begin (if (string=? (hash-table-ref r "order")
 "LSB")
 (begin (ret22 (readBitsLSB r width)
)
)
 (quote ()
)
)
 (ret22 (readBitsMSB r width)
)
)
)
)
)
 (define (toBinary n bits)
 (call/cc (lambda (ret23)
 (let ((b "")
)
 (begin (let ((val n)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< i bits)
 (begin (set! b (string-append (to-str (modulo val 2)
)
 b)
)
 (set! val (quotient val 2)
)
 (set! i (+ i 1)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
 (ret23 b)
)
)
)
)
)
)
)
)
)
 (define (bytesToBits bs)
 (call/cc (lambda (ret26)
 (let ((out "[")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break28)
 (letrec ((loop27 (lambda ()
 (if (< i (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (set! out (string-append out (toBinary (list-ref bs i)
 8)
)
)
 (if (_lt (+ i 1)
 (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (set! out (string-append out " ")
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop27)
)
 (quote ()
)
)
)
)
)
 (loop27)
)
)
)
 (set! out (string-append out "]")
)
 (ret26 out)
)
)
)
)
)
)
)
 (define (bytesToHex bs)
 (call/cc (lambda (ret29)
 (let ((digits "0123456789ABCDEF")
)
 (begin (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< i (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (let ((b (list-ref bs i)
)
)
 (begin (let ((hi (quotient b 16)
)
)
 (begin (let ((lo (modulo b 16)
)
)
 (begin (set! out (string-append (string-append out (substring digits hi (+ hi 1)
)
)
 (substring digits lo (+ lo 1)
)
)
)
 (if (_lt (+ i 1)
 (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (set! out (string-append out " ")
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
 (ret29 out)
)
)
)
)
)
)
)
)
)
 (define (ord ch)
 (call/cc (lambda (ret32)
 (let ((upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
)
 (begin (let ((lower "abcdefghijklmnopqrstuvwxyz")
)
 (begin (let ((idx (indexOf upper ch)
)
)
 (begin (if (>= idx 0)
 (begin (ret32 (+ 65 idx)
)
)
 (quote ()
)
)
 (set! idx (indexOf lower ch)
)
 (if (>= idx 0)
 (begin (ret32 (+ 97 idx)
)
)
 (quote ()
)
)
 (if (and (string>=? ch "0")
 (string<=? ch "9")
)
 (begin (ret32 (+ 48 (parseIntStr ch)
)
)
)
 (quote ()
)
)
 (if (string=? ch " ")
 (begin (ret32 32)
)
 (quote ()
)
)
 (if (string=? ch ".")
 (begin (ret32 46)
)
 (quote ()
)
)
 (ret32 0)
)
)
)
)
)
)
)
)
)
 (define (chr n)
 (call/cc (lambda (ret33)
 (let ((upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
)
 (begin (let ((lower "abcdefghijklmnopqrstuvwxyz")
)
 (begin (if (and (>= n 65)
 (< n 91)
)
 (begin (ret33 (substring upper (- n 65)
 (- n 64)
)
)
)
 (quote ()
)
)
 (if (and (>= n 97)
 (< n 123)
)
 (begin (ret33 (substring lower (- n 97)
 (- n 96)
)
)
)
 (quote ()
)
)
 (if (and (>= n 48)
 (< n 58)
)
 (begin (let ((digits "0123456789")
)
 (begin (ret33 (substring digits (- n 48)
 (- n 47)
)
)
)
)
)
 (quote ()
)
)
 (if (equal? n 32)
 (begin (ret33 " ")
)
 (quote ()
)
)
 (if (equal? n 46)
 (begin (ret33 ".")
)
 (quote ()
)
)
 (ret33 "?")
)
)
)
)
)
)
)
 (define (bytesOfStr s)
 (call/cc (lambda (ret34)
 (let ((bs (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break36)
 (letrec ((loop35 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! bs (append bs (_list (ord (substring s i (+ i 1)
)
)
)
)
)
 (set! i (+ i 1)
)
 (loop35)
)
 (quote ()
)
)
)
)
)
 (loop35)
)
)
)
 (ret34 bs)
)
)
)
)
)
)
)
 (define (bytesToDec bs)
 (call/cc (lambda (ret37)
 (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break39)
 (letrec ((loop38 (lambda ()
 (if (< i (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (set! out (string-append out (to-str (list-ref bs i)
)
)
)
 (if (_lt (+ i 1)
 (cond ((string? bs)
 (string-length bs)
)
 ((hash-table? bs)
 (hash-table-size bs)
)
 (else (length bs)
)
)
)
 (begin (set! out (string-append out " ")
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop38)
)
 (quote ()
)
)
)
)
)
 (loop38)
)
)
)
 (ret37 out)
)
)
)
)
)
)
)
 (define (Example)
 (call/cc (lambda (ret40)
 (let ((message "This is a test.")
)
 (begin (let ((msgBytes (bytesOfStr message)
)
)
 (begin (_display (to-str (string-append (string-append (string-append "\"" message)
 "\" as bytes: ")
 (bytesToDec msgBytes)
)
)
)
 (newline)
 (_display (to-str (string-append "    original bits: " (bytesToBits msgBytes)
)
)
)
 (newline)
 (let ((bw (NewWriter "MSB")
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break42)
 (letrec ((loop41 (lambda ()
 (if (< i (cond ((string? msgBytes)
 (string-length msgBytes)
)
 ((hash-table? msgBytes)
 (hash-table-size msgBytes)
)
 (else (length msgBytes)
)
)
)
 (begin (set! bw (WriteBits bw (cond ((string? msgBytes)
 (substring msgBytes i (+ i 1)
)
)
 ((hash-table? msgBytes)
 (hash-table-ref msgBytes i)
)
 (else (list-ref msgBytes i)
)
)
 7)
)
 (set! i (+ i 1)
)
 (loop41)
)
 (quote ()
)
)
)
)
)
 (loop41)
)
)
)
 (set! bw (CloseWriter bw)
)
 (_display (to-str (string-append "Written bitstream: " (bytesToBits (hash-table-ref bw "data")
)
)
)
)
 (newline)
 (_display (to-str (string-append "Written bytes: " (bytesToHex (hash-table-ref bw "data")
)
)
)
)
 (newline)
 (let ((br (NewReader (hash-table-ref bw "data")
 "MSB")
)
)
 (begin (let ((result "")
)
 (begin (call/cc (lambda (break44)
 (letrec ((loop43 (lambda ()
 (if #t (begin (let ((r (ReadBits br 7)
)
)
 (begin (if (cond ((string? r)
 (substring r "eof" (+ "eof" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "eof")
)
 (else (list-ref r "eof")
)
)
 (begin (break44 (quote ()
)
)
)
 (quote ()
)
)
 (let ((v (let ((v45 (cond ((string? r)
 (substring r "val" (+ "val" 1)
)
)
 ((hash-table? r)
 (hash-table-ref r "val")
)
 (else (list-ref r "val")
)
)
)
)
 (cond ((string? v45)
 (inexact->exact (floor (string->number v45)
)
)
)
 ((boolean? v45)
 (if v45 1 0)
)
 (else (inexact->exact (floor v45)
)
)
)
)
)
)
 (begin (if (not (equal? v 0)
)
 (begin (set! result (string-append result (chr v)
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop43)
)
 (quote ()
)
)
)
)
)
 (loop43)
)
)
)
 (_display (to-str (string-append (string-append "Read back as \"" result)
 "\"")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (Example)
 (let ((end47 (now)
)
)
 (let ((dur48 (quotient (- end47 start46)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur48)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
