;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start33 (now)
)
)
 (begin (define (split s sep)
 (call/cc (lambda (ret1)
 (let ((out (_list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (and (_le (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (string=? (substring s i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
 sep)
)
 (begin (set! out (append out (_list cur)
)
)
 (set! cur "")
 (set! i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
)
 (begin (set! cur (string-append cur (substring s i (+ i 1)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (set! out (append out (_list cur)
)
)
 (ret1 out)
)
)
)
)
)
)
)
)
)
 (define (join xs sep)
 (call/cc (lambda (ret4)
 (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (if (> i 0)
 (begin (set! res (string-append res sep)
)
)
 (quote ()
)
)
 (set! res (string-append res (list-ref xs i)
)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 res)
)
)
)
)
)
)
)
 (define (trimLeftSpaces s)
 (call/cc (lambda (ret7)
 (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (and (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (string=? (substring s i (+ i 1)
)
 " ")
)
 (begin (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 (substring s i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
)
)
)
)
 (define (makeIndent outline tab)
 (call/cc (lambda (ret10)
 (let ((lines (split outline "\n")
)
)
 (begin (let ((nodes (_list)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((line (car xs)
)
)
 (begin (let ((line2 (trimLeftSpaces line)
)
)
 (begin (let ((level (quotient (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 (cond ((string? line2)
 (string-length line2)
)
 ((hash-table? line2)
 (hash-table-size line2)
)
 (else (length line2)
)
)
)
 tab)
)
)
 (begin (set! nodes (append nodes (_list (alist->hash-table (_list (cons "level" level)
 (cons "name" line2)
)
)
)
)
)
)
)
)
)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 lines)
)
)
)
 (ret10 nodes)
)
)
)
)
)
)
)
 (define (toNest nodes start level n)
 (call/cc (lambda (ret13)
 (begin (if (equal? level 0)
 (begin (hash-table-set! n "name" (cond ((string? (list-ref nodes 0)
)
 (substring (list-ref nodes 0)
 "name" (+ "name" 1)
)
)
 ((hash-table? (list-ref nodes 0)
)
 (hash-table-ref (list-ref nodes 0)
 "name")
)
 (else (list-ref (list-ref nodes 0)
 "name")
)
)
)
)
 (quote ()
)
)
 (let ((i (+ start 1)
)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< i (cond ((string? nodes)
 (string-length nodes)
)
 ((hash-table? nodes)
 (hash-table-size nodes)
)
 (else (length nodes)
)
)
)
 (begin (let ((node (list-ref nodes i)
)
)
 (begin (let ((lev (let ((v16 (hash-table-ref/default node "level" (quote ()
)
)
)
)
 (cond ((string? v16)
 (exact (floor (string->number v16)
)
)
)
 ((boolean? v16)
 (if v16 1 0)
)
 (else (exact (floor v16)
)
)
)
)
)
)
 (begin (if (equal? lev (+ level 1)
)
 (begin (let ((child (alist->hash-table (_list (cons "name" (hash-table-ref/default node "name" (quote ()
)
)
)
 (cons "children" (_list)
)
)
)
)
)
 (begin (toNest nodes i (+ level 1)
 child)
 (let ((cs (hash-table-ref/default n "children" (quote ()
)
)
)
)
 (begin (set! cs (append cs (_list child)
)
)
 (hash-table-set! n "children" cs)
)
)
)
)
)
 (if (<= lev level)
 (begin (ret13 (quote ()
)
)
)
 (quote ()
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
)
)
)
)
)
)
 (define (countLeaves n)
 (call/cc (lambda (ret17)
 (let ((kids (hash-table-ref/default n "children" (quote ()
)
)
)
)
 (begin (if (equal? (cond ((string? kids)
 (string-length kids)
)
 ((hash-table? kids)
 (hash-table-size kids)
)
 (else (length kids)
)
)
 0)
 (begin (ret17 1)
)
 (quote ()
)
)
 (let ((total 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((k (car xs)
)
)
 (begin (set! total (_add total (countLeaves k)
)
)
)
)
 (loop18 (cdr xs)
)
)
)
)
)
)
 (loop18 kids)
)
)
)
 (ret17 total)
)
)
)
)
)
)
)
 (define (nodesByDepth root depth)
 (call/cc (lambda (ret20)
 (let ((levels (_list)
)
)
 (begin (let ((current (_list root)
)
)
 (begin (let ((d 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< d depth)
 (begin (set! levels (append levels (_list current)
)
)
 (let ((next (_list)
)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((n (car xs)
)
)
 (begin (let ((kids (cond ((string? n)
 (substring n "children" (+ "children" 1)
)
)
 ((hash-table? n)
 (hash-table-ref n "children")
)
 (else (list-ref n "children")
)
)
)
)
 (begin (call/cc (lambda (break26)
 (letrec ((loop25 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((k (car xs)
)
)
 (begin (set! next (append next (_list k)
)
)
)
)
 (loop25 (cdr xs)
)
)
)
)
)
)
 (loop25 kids)
)
)
)
)
)
)
)
 (loop23 (cdr xs)
)
)
)
)
)
)
 (loop23 current)
)
)
)
 (set! current next)
 (set! d (+ d 1)
)
)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (ret20 levels)
)
)
)
)
)
)
)
)
)
 (define (toMarkup n cols depth)
 (call/cc (lambda (ret27)
 (let ((lines (_list)
)
)
 (begin (set! lines (append lines (_list "{| class=\"wikitable\" style=\"text-align: center;\"")
)
)
 (let ((l1 "|-")
)
 (begin (set! lines (append lines (_list l1)
)
)
 (let ((span (countLeaves n)
)
)
 (begin (set! lines (append lines (_list (string-append (string-append (string-append (string-append (string-append "| style=\"background: " (list-ref cols 0)
)
 " \" colSpan=")
 (to-str span)
)
 " | ")
 (to-str (hash-table-ref/default n "name" (quote ()
)
)
)
)
)
)
)
 (set! lines (append lines (_list l1)
)
)
 (let ((lvls (nodesByDepth n depth)
)
)
 (begin (let ((lvl 1)
)
 (begin (call/cc (lambda (break29)
 (letrec ((loop28 (lambda ()
 (if (< lvl depth)
 (begin (let ((nodes (cond ((string? lvls)
 (substring lvls lvl (+ lvl 1)
)
)
 ((hash-table? lvls)
 (hash-table-ref lvls lvl)
)
 (else (list-ref lvls lvl)
)
)
)
)
 (begin (if (equal? (cond ((string? nodes)
 (string-length nodes)
)
 ((hash-table? nodes)
 (hash-table-size nodes)
)
 (else (length nodes)
)
)
 0)
 (begin (set! lines (append lines (_list "|  |")
)
)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< idx (cond ((string? nodes)
 (string-length nodes)
)
 ((hash-table? nodes)
 (hash-table-size nodes)
)
 (else (length nodes)
)
)
)
 (begin (let ((node (cond ((string? nodes)
 (substring nodes idx (+ idx 1)
)
)
 ((hash-table? nodes)
 (hash-table-ref nodes idx)
)
 (else (list-ref nodes idx)
)
)
)
)
 (begin (set! span (countLeaves node)
)
 (let ((col lvl)
)
 (begin (if (equal? lvl 1)
 (begin (set! col (+ idx 1)
)
)
 (quote ()
)
)
 (if (>= col (cond ((string? cols)
 (string-length cols)
)
 ((hash-table? cols)
 (hash-table-size cols)
)
 (else (length cols)
)
)
)
 (begin (set! col (- (cond ((string? cols)
 (string-length cols)
)
 ((hash-table? cols)
 (hash-table-size cols)
)
 (else (length cols)
)
)
 1)
)
)
 (quote ()
)
)
 (let ((cell (string-append (string-append (string-append (string-append (string-append "| style=\"background: " (list-ref cols col)
)
 " \" colspan=")
 (to-str span)
)
 " | ")
 (to-str (cond ((string? node)
 (substring node "name" (+ "name" 1)
)
)
 ((hash-table? node)
 (hash-table-ref node "name")
)
 (else (list-ref node "name")
)
)
)
)
)
)
 (begin (set! lines (append lines (_list cell)
)
)
 (set! idx (+ idx 1)
)
)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
)
)
)
)
 (if (_lt lvl (- depth 1)
)
 (begin (set! lines (append lines (_list l1)
)
)
)
 (quote ()
)
)
 (set! lvl (+ lvl 1)
)
)
)
 (loop28)
)
 (quote ()
)
)
)
)
)
 (loop28)
)
)
)
 (set! lines (append lines (_list "|}")
)
)
 (ret27 (join lines "\n")
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret32)
 (let ((outline (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Display an outline as a nested table.\n" "    Parse the outline to a tree,\n")
 "        measuring the indent of each line,\n")
 "        translating the indentation to a nested structure,\n")
 "        and padding the tree to even depth.\n")
 "    count the leaves descending from each node,\n")
 "        defining the width of a leaf as 1,\n")
 "        and the width of a parent node as a sum.\n")
 "            (The sum of the widths of its children)
\n")
 "    and write out a table with 'colspan' values\n")
 "        either as a wiki table,\n")
 "        or as HTML.")
)
)
 (begin (let ((yellow "#ffffe6;")
)
 (begin (let ((orange "#ffebd2;")
)
 (begin (let ((green "#f0fff0;")
)
 (begin (let ((blue "#e6ffff;")
)
 (begin (let ((pink "#ffeeff;")
)
 (begin (let ((cols (_list yellow orange green blue pink)
)
)
 (begin (let ((nodes (makeIndent outline 4)
)
)
 (begin (let ((n (alist->hash-table (_list (cons "name" "")
 (cons "children" (_list)
)
)
)
)
)
 (begin (toNest nodes 0 0 n)
 (_display (to-str (toMarkup n cols 4)
)
)
 (newline)
 (_display (to-str "\n")
)
 (newline)
 (let ((outline2 (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Display an outline as a nested table.\n" "    Parse the outline to a tree,\n")
 "        measuring the indent of each line,\n")
 "        translating the indentation to a nested structure,\n")
 "        and padding the tree to even depth.\n")
 "    count the leaves descending from each node,\n")
 "        defining the width of a leaf as 1,\n")
 "        and the width of a parent node as a sum.\n")
 "            (The sum of the widths of its children)
\n")
 "            Propagating the sums upward as necessary.\n")
 "    and write out a table with 'colspan' values\n")
 "        either as a wiki table,\n")
 "        or as HTML.\n")
 "    Optionally add color to the nodes.")
)
)
 (begin (let ((cols2 (_list blue yellow orange green pink)
)
)
 (begin (let ((nodes2 (makeIndent outline2 4)
)
)
 (begin (let ((n2 (alist->hash-table (_list (cons "name" "")
 (cons "children" (_list)
)
)
)
)
)
 (begin (toNest nodes2 0 0 n2)
 (_display (to-str (toMarkup n2 cols2 4)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end34 (now)
)
)
 (let ((dur35 (quotient (- end34 start33)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur35)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
