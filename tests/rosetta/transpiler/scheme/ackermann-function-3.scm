;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (pow_big base exp)
 (call/cc (lambda (ret1)
 (let ((result 1)
)
 (begin (let ((b base)
)
 (begin (let ((e exp)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> e 0)
 (begin (if (equal? (modulo e 2)
 1)
 (begin (set! result (* result b)
)
)
 (quote nil)
)
 (set! b (* b b)
)
 (set! e (inexact->exact (quotient e 2)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 result)
)
)
)
)
)
)
)
)
)
(define (bit_len x)
 (call/cc (lambda (ret4)
 (let ((n x)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> n 0)
 (begin (set! n (quotient n 2)
)
 (set! c (+ c 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 c)
)
)
)
)
)
)
)
(define err "")
(define (ackermann2 m n)
 (call/cc (lambda (ret7)
 (begin (if (not (string=? err "")
)
 (begin (ret7 0)
)
 (quote nil)
)
 (if (<= m 3)
 (begin (let ((mi (let ((v8 m)
)
 (cond ((string? v8)
 (inexact->exact (string->number v8)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact v8)
)
)
)
)
)
 (begin (if (equal? mi 0)
 (begin (ret7 (+ n 1)
)
)
 (quote nil)
)
 (if (equal? mi 1)
 (begin (ret7 (+ n 2)
)
)
 (quote nil)
)
 (if (equal? mi 2)
 (begin (ret7 (+ (* 2 n)
 3)
)
)
 (quote nil)
)
 (if (equal? mi 3)
 (begin (let ((nb (bit_len n)
)
)
 (begin (if (> nb 64)
 (begin (set! err (string-append (string-append "A(m,n)
 had n of " (to-str nb)
)
 " bits; too large")
)
 (ret7 0)
)
 (quote nil)
)
 (let ((r (pow_big 2 (let ((v9 n)
)
 (cond ((string? v9)
 (inexact->exact (string->number v9)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (inexact->exact v9)
)
)
)
)
)
)
 (begin (ret7 (- (* 8 r)
 3)
)
)
)
)
)
)
 (quote nil)
)
)
)
)
 (quote nil)
)
 (if (equal? (bit_len n)
 0)
 (begin (ret7 (ackermann2 (- m 1)
 1)
)
)
 (quote nil)
)
 (ret7 (ackermann2 (- m 1)
 (ackermann2 m (- n 1)
)
)
)
)
)
)
)
(define (show m n)
 (call/cc (lambda (ret10)
 (begin (set! err "")
 (let ((res (ackermann2 m n)
)
)
 (begin (if (not (string=? err "")
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append "A(" (to-str m)
)
 ", ")
 (to-str n)
)
 ")
 = Error: ")
 err)
)
)
 (newline)
 (ret10 (quote nil)
)
)
 (quote nil)
)
 (if (<= (bit_len res)
 256)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append "A(" (to-str m)
)
 ", ")
 (to-str n)
)
 ")
 = ")
 (to-str res)
)
)
)
 (newline)
)
 (begin (let ((s (to-str res)
)
)
 (begin (let ((pre (substring s 0 20)
)
)
 (begin (let ((suf (substring s (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 20)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "A(" (to-str m)
)
 ", ")
 (to-str n)
)
 ")
 = ")
 (to-str (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 " digits starting/ending with: ")
 pre)
 "...")
 suf)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret11)
 (begin (show 0 0)
 (show 1 2)
 (show 2 4)
 (show 3 100)
 (show 3 1000000)
 (show 4 1)
 (show 4 2)
 (show 4 3)
)
)
)
)
(main)
