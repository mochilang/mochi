;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (abs x)
 (call/cc (lambda (ret1)
 (begin (if (< x 0.0)
 (begin (ret1 (- x)
)
)
 (quote nil)
)
 (ret1 x)
)
)
)
)
(define (maxf a b)
 (call/cc (lambda (ret2)
 (begin (if (> a b)
 (begin (ret2 a)
)
 (quote nil)
)
 (ret2 b)
)
)
)
)
(define (isClose a b)
 (call/cc (lambda (ret3)
 (let ((relTol 1e-09)
)
 (begin (let ((t (abs (- a b)
)
)
)
 (begin (let ((u (* relTol (maxf (abs a)
 (abs b)
)
)
)
)
 (begin (ret3 (<= t u)
)
)
)
)
)
)
)
)
)
)
(define (sqrtApprox x)
 (call/cc (lambda (ret4)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i 10)
 (begin (set! guess (/ (+ guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 guess)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret7)
 (let ((root2 (sqrtApprox 2.0)
)
)
 (begin (let ((pairs (list (list 1.0000000000000002e+14 1.0000000000000002e+14)
 (list 100.01 100.011)
 (list (/ 1.0000000000000002e+13 10000.0)
 1.0000000000000001e+09)
 (list 0.001 0.0010000001)
 (list 1.01e-22 0.0)
 (list (* root2 root2)
 2.0)
 (list (* (- root2)
 root2)
 (- 2.0)
)
 (list 100000000000000000.0 100000000000000000.0)
 (list 3.141592653589793 3.141592653589793)
)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((pair (car xs)
)
)
 (begin (let ((a (cond ((string? pair)
 (string-ref pair 0)
)
 ((hash-table? pair)
 (hash-table-ref pair 0)
)
 (else (list-ref pair 0)
)
)
)
)
 (begin (let ((b (cond ((string? pair)
 (string-ref pair 1)
)
 ((hash-table? pair)
 (hash-table-ref pair 1)
)
 (else (list-ref pair 1)
)
)
)
)
 (begin (let ((s (if (isClose a b)
 "≈" "≉")
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (to-str a)
 " ")
 s)
 " ")
 (to-str b)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
 (loop8 (cdr xs)
)
)
)
)
)
)
 (loop8 pairs)
)
)
)
)
)
)
)
)
)
)
(main)
