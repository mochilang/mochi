;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start9 (now)
)
)
 (begin (define OP_CAT 0)
 (define OP_DOG 1)
 (define (beastKind b)
 (call/cc (lambda (ret1)
 (ret1 (let ((match2 b)
)
 (if (equal? (hash-table-ref match2 "op")
 OP_DOG)
 (let ((k (hash-table-ref match2 "kind")
)
)
 k)
 (if (equal? (hash-table-ref match2 "op")
 OP_CAT)
 (let ((k (hash-table-ref match2 "kind")
)
)
 k)
 (quote nil)
)
)
)
)
)
)
)
 (define (beastName b)
 (call/cc (lambda (ret3)
 (ret3 (let ((match4 b)
)
 (if (equal? (hash-table-ref match4 "op")
 OP_DOG)
 (let ((n (hash-table-ref match4 "name")
)
)
 n)
 (if (equal? (hash-table-ref match4 "op")
 OP_CAT)
 (let ((n (hash-table-ref match4 "name")
)
)
 n)
 (quote nil)
)
)
)
)
)
)
)
 (define (beastCry b)
 (call/cc (lambda (ret5)
 (ret5 (let ((match6 b)
)
 (if (equal? (hash-table-ref match6 "op")
 OP_DOG)
 "Woof" (if (equal? (hash-table-ref match6 "op")
 OP_CAT)
 "Meow" (quote nil)
)
)
)
)
)
)
)
 (define (bprint b)
 (call/cc (lambda (ret7)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append (beastName b)
 ", who's a ")
 (beastKind b)
)
 ", cries: \"")
 (beastCry b)
)
 "\".")
)
)
 (newline)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret8)
 (let ((d (alist->hash-table (list (cons "op" OP_DOG)
 (cons "kind" "labrador")
 (cons "name" "Max")
)
)
)
)
 (begin (let ((c (alist->hash-table (list (cons "op" OP_CAT)
 (cons "kind" "siamese")
 (cons "name" "Sammy")
)
)
)
)
 (begin (bprint d)
 (bprint c)
)
)
)
)
)
)
)
 (main)
 (let ((end10 (now)
)
)
 (let ((dur11 (quotient (- end10 start9)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur11)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
