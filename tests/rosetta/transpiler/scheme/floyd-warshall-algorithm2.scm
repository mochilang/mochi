;; Generated on 2025-08-04 15:16 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(let ((start26 (current-jiffy)) (jps29 (jiffies-per-second))) (begin (let ((INF 1000000)) (begin (define (floydWarshall graph) (call/cc (lambda (ret1) (let ((n (_len graph))) (begin (let ((dist (_list))) (begin (let ((next (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i n) (begin (let ((drow (_list))) (begin (let ((nrow (_list))) (begin (let ((j 0)) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (< j n) (begin (set! drow (append drow (_list (cond ((string? (list-ref graph i)) (_substring (list-ref graph i) j (+ j 1))) ((hash-table? (list-ref graph i)) (hash-table-ref (list-ref graph i) j)) (else (list-ref (list-ref graph i) j)))))) (if (and (< (cond ((string? (list-ref graph i)) (_substring (list-ref graph i) j (+ j 1))) ((hash-table? (list-ref graph i)) (hash-table-ref (list-ref graph i) j)) (else (list-ref (list-ref graph i) j))) INF) (not (equal? i j))) (begin (set! nrow (append nrow (_list j)))) (begin (set! nrow (append nrow (_list (- 1)))))) (set! j (+ j 1)) (loop4)) (quote ()))))) (loop4)))) (set! dist (append dist (_list drow))) (set! next (append next (_list nrow))) (set! i (+ i 1)))))))) (loop2)) (quote ()))))) (loop2)))) (let ((k 0)) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda () (if (< k n) (begin (let ((i 0)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (< i n) (begin (let ((j 0)) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (< j n) (begin (if (and (< (cond ((string? (list-ref dist i)) (_substring (list-ref dist i) k (+ k 1))) ((hash-table? (list-ref dist i)) (hash-table-ref (list-ref dist i) k)) (else (list-ref (list-ref dist i) k))) INF) (< (cond ((string? (list-ref dist k)) (_substring (list-ref dist k) j (+ j 1))) ((hash-table? (list-ref dist k)) (hash-table-ref (list-ref dist k) j)) (else (list-ref (list-ref dist k) j))) INF)) (begin (let ((alt (+ (cond ((string? (list-ref dist i)) (_substring (list-ref dist i) k (+ k 1))) ((hash-table? (list-ref dist i)) (hash-table-ref (list-ref dist i) k)) (else (list-ref (list-ref dist i) k))) (cond ((string? (list-ref dist k)) (_substring (list-ref dist k) j (+ j 1))) ((hash-table? (list-ref dist k)) (hash-table-ref (list-ref dist k) j)) (else (list-ref (list-ref dist k) j)))))) (begin (if (< alt (cond ((string? (list-ref dist i)) (_substring (list-ref dist i) j (+ j 1))) ((hash-table? (list-ref dist i)) (hash-table-ref (list-ref dist i) j)) (else (list-ref (list-ref dist i) j)))) (begin (list-set! (list-ref dist i) j alt) (list-set! (list-ref next i) j (cond ((string? (list-ref next i)) (_substring (list-ref next i) k (+ k 1))) ((hash-table? (list-ref next i)) (hash-table-ref (list-ref next i) k)) (else (list-ref (list-ref next i) k))))) (quote ()))))) (quote ())) (set! j (+ j 1)) (loop10)) (quote ()))))) (loop10)))) (set! i (+ i 1)))) (loop8)) (quote ()))))) (loop8)))) (set! k (+ k 1)))) (loop6)) (quote ()))))) (loop6)))) (ret1 (alist->hash-table (_list (cons "dist" dist) (cons "next" next))))))))))))))))) (define (path u v next) (call/cc (lambda (ret12) (begin (if (< (cond ((string? (list-ref next u)) (_substring (list-ref next u) v (+ v 1))) ((hash-table? (list-ref next u)) (hash-table-ref (list-ref next u) v)) (else (list-ref (list-ref next u) v))) 0) (begin (ret12 (_list))) (quote ())) (let ((p (_list u))) (begin (let ((x u)) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (not (equal? x v)) (begin (set! x (cond ((string? (list-ref next x)) (_substring (list-ref next x) v (+ v 1))) ((hash-table? (list-ref next x)) (hash-table-ref (list-ref next x) v)) (else (list-ref (list-ref next x) v)))) (set! p (append p (_list x))) (loop13)) (quote ()))))) (loop13)))) (ret12 p))))))))) (define (pathStr p) (call/cc (lambda (ret15) (let ((s "")) (begin (let ((i 0)) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (< i (_len p)) (begin (set! s (string-append s (to-str (+ (list-ref p i) 1)))) (if (_lt i (- (_len p) 1)) (begin (set! s (string-append s " -> "))) (quote ())) (set! i (+ i 1)) (loop16)) (quote ()))))) (loop16)))) (ret15 s)))))))) (let ((n 4)) (begin (let ((g (_list))) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda (i) (if (< i n) (begin (begin (let ((row (_list))) (begin (call/cc (lambda (break21) (letrec ((loop20 (lambda (j) (if (< j n) (begin (begin (if (equal? i j) (begin (set! row (append row (_list 0)))) (begin (set! row (append row (_list INF)))))) (loop20 (+ j 1))) (quote ()))))) (loop20 0)))) (set! g (append g (_list row)))))) (loop18 (+ i 1))) (quote ()))))) (loop18 0)))) (list-set! (list-ref g 0) 2 (- 2)) (list-set! (list-ref g 2) 3 2) (list-set! (list-ref g 3) 1 (- 1)) (list-set! (list-ref g 1) 0 4) (list-set! (list-ref g 1) 2 3) (let ((res (floydWarshall g))) (begin (_display (to-str "pair\tdist\tpath")) (newline) (let ((i 0)) (begin (call/cc (lambda (break23) (letrec ((loop22 (lambda () (if (< i n) (begin (let ((j 0)) (begin (call/cc (lambda (break25) (letrec ((loop24 (lambda () (if (< j n) (begin (if (not (equal? i j)) (begin (let ((p (path i j (hash-table-ref res "next")))) (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (to-str (+ i 1)) " -> ") (to-str (+ j 1))) "\t") (to-str (cond ((string? (cond ((string? (hash-table-ref res "dist")) (_substring (hash-table-ref res "dist") i (+ i 1))) ((hash-table? (hash-table-ref res "dist")) (hash-table-ref (hash-table-ref res "dist") i)) (else (list-ref (hash-table-ref res "dist") i)))) (_substring (cond ((string? (hash-table-ref res "dist")) (_substring (hash-table-ref res "dist") i (+ i 1))) ((hash-table? (hash-table-ref res "dist")) (hash-table-ref (hash-table-ref res "dist") i)) (else (list-ref (hash-table-ref res "dist") i))) j (+ j 1))) ((hash-table? (cond ((string? (hash-table-ref res "dist")) (_substring (hash-table-ref res "dist") i (+ i 1))) ((hash-table? (hash-table-ref res "dist")) (hash-table-ref (hash-table-ref res "dist") i)) (else (list-ref (hash-table-ref res "dist") i)))) (hash-table-ref (cond ((string? (hash-table-ref res "dist")) (_substring (hash-table-ref res "dist") i (+ i 1))) ((hash-table? (hash-table-ref res "dist")) (hash-table-ref (hash-table-ref res "dist") i)) (else (list-ref (hash-table-ref res "dist") i))) j)) (else (list-ref (cond ((string? (hash-table-ref res "dist")) (_substring (hash-table-ref res "dist") i (+ i 1))) ((hash-table? (hash-table-ref res "dist")) (hash-table-ref (hash-table-ref res "dist") i)) (else (list-ref (hash-table-ref res "dist") i))) j))))) "\t") (pathStr p)))) (newline)))) (quote ())) (set! j (+ j 1)) (loop24)) (quote ()))))) (loop24)))) (set! i (+ i 1)))) (loop22)) (quote ()))))) (loop22)))))))))))))) (let ((end27 (current-jiffy))) (let ((dur28 (quotient (* (- end27 start26) 1000000) jps29))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur28) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
