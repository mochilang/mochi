;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (collapse s)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (let ((prev "")
)
 (begin (let ((res "")
)
 (begin (let ((orig (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (not (string=? ch prev)
)
 (begin (set! res (string-append res ch)
)
 (set! prev ch)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (_list res orig (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (let ((strings (_list "" "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln " "..111111111111111111111111111111111111111111111111111111111111111777888" "I never give 'em hell, I just tell the truth, and they think it's hell. " "                                                   ---  Harry S Truman " "The better the 4-wheel drive, the further you'll be from help when ya get stuck!" "headmistressship" "aardvark" "😍😀🙌💃😍😍😍🙌")
)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< idx (cond ((string? strings)
 (string-length strings)
)
 ((hash-table? strings)
 (hash-table-size strings)
)
 (else (length strings)
)
)
)
 (begin (let ((s (list-ref strings idx)
)
)
 (begin (let ((r (collapse s)
)
)
 (begin (let ((cs (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
)
 (begin (let ((olen (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (let ((clen (cond ((string? r)
 (substring r 2 (+ 2 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 2)
)
 (else (list-ref r 2)
)
)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append "original : length = " (to-str olen)
)
 ", string = «««")
 s)
 "»»»")
)
)
 (newline)
 (_display (to-str (string-append (string-append (string-append (string-append "collapsed: length = " (to-str clen)
)
 ", string = «««")
 cs)
 "»»»\n")
)
)
 (newline)
 (set! idx (+ idx 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
)
)
)
)
)
)
)
(main)
