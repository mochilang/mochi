;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (listStr xs)
 (call/cc (lambda (ret1)
 (let ((s "[")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (set! s (string-append s (to-str (list-ref xs i)
)
)
)
 (if (_lt i (- (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
 1)
)
 (begin (set! s (string-append s " ")
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (set! s (string-append s "]")
)
 (ret1 s)
)
)
)
)
)
)
)
(define (pointerDemo)
 (call/cc (lambda (ret4)
 (begin (_display (to-str "Pointer:")
)
 (newline)
 (let ((i 0)
)
 (begin (_display (to-str "Before:")
)
 (newline)
 (_display (to-str (string-append (string-append (string-append "\t<address>: " (to-str i)
)
 ", ")
 (to-str i)
)
)
)
 (newline)
 (set! i 3)
 (_display (to-str "After:")
)
 (newline)
 (_display (to-str (string-append (string-append (string-append "\t<address>: " (to-str i)
)
 ", ")
 (to-str i)
)
)
)
 (newline)
)
)
)
)
)
)
(define (sliceDemo)
 (call/cc (lambda (ret5)
 (begin (_display (to-str "Slice:")
)
 (newline)
 (let ((a (_list)
)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda (_)
 (if (< _ 10)
 (begin (begin (set! a (append a (_list 0)
)
)
)
 (loop6 (+ _ 1)
)
)
 (quote ()
)
)
)
)
)
 (loop6 0)
)
)
)
 (let ((s a)
)
 (begin (_display (to-str "Before:")
)
 (newline)
 (_display (to-str (string-append "\ts: " (listStr s)
)
)
)
 (newline)
 (_display (to-str (string-append "\ta: " (listStr a)
)
)
)
 (newline)
 (let ((data (_list 65 32 115 116 114 105 110 103 46)
)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< idx (cond ((string? data)
 (string-length data)
)
 ((hash-table? data)
 (hash-table-size data)
)
 (else (length data)
)
)
)
 (begin (list-set! s idx (list-ref data idx)
)
 (set! idx (+ idx 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (_display (to-str "After:")
)
 (newline)
 (_display (to-str (string-append "\ts: " (listStr s)
)
)
)
 (newline)
 (_display (to-str (string-append "\ta: " (listStr a)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
(pointerDemo)
(_display (to-str "")
)
(newline)
(sliceDemo)
