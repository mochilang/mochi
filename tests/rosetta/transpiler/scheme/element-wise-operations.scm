;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start39 (now)
)
)
 (begin (define (pow10 n)
 (call/cc (lambda (ret1)
 (let ((r 1.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i n)
 (begin (set! r (* r 10.0)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 r)
)
)
)
)
)
)
)
 (define (powf base exp)
 (call/cc (lambda (ret4)
 (begin (if (equal? exp 0.5)
 (begin (let ((guess base)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i 20)
 (begin (set! guess (/ (_add guess (/ base guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 guess)
)
)
)
)
)
 (quote ()
)
)
 (let ((result 1.0)
)
 (begin (let ((n (let ((v7 exp)
)
 (cond ((string? v7)
 (exact (floor (string->number v7)
)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (exact (floor v7)
)
)
)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (set! result (* result base)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret4 result)
)
)
)
)
)
)
)
)
)
)
 (define (formatFloat f prec)
 (call/cc (lambda (ret10)
 (let ((scale (pow10 prec)
)
)
 (begin (let ((scaled (_add (* f scale)
 0.5)
)
)
 (begin (let ((n (let ((v11 scaled)
)
 (cond ((string? v11)
 (exact (floor (string->number v11)
)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (exact (floor v11)
)
)
)
)
)
)
 (begin (let ((digits (to-str n)
)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (<= (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
 prec)
 (begin (set! digits (string-append "0" digits)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (let ((intPart (substring digits 0 (- (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
 prec)
)
)
)
 (begin (let ((fracPart (substring digits (- (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
 prec)
 (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
)
)
)
 (begin (ret10 (string-append (string-append intPart ".")
 fracPart)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (padLeft s w)
 (call/cc (lambda (ret14)
 (let ((res "")
)
 (begin (let ((n (- w (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (> n 0)
 (begin (set! res (string-append res " ")
)
 (set! n (- n 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (ret14 (string-append res s)
)
)
)
)
)
)
)
)
 (define (rowString row)
 (call/cc (lambda (ret17)
 (let ((s "[")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< i (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
 (begin (set! s (string-append s (padLeft (formatFloat (list-ref row i)
 3)
 6)
)
)
 (if (_lt i (- (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
 1)
)
 (begin (set! s (string-append s " ")
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (ret17 (string-append s "] ")
)
)
)
)
)
)
)
)
 (define (printMatrix heading m)
 (call/cc (lambda (ret20)
 (begin (_display (to-str heading)
)
 (newline)
 (let ((i 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< i (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
 (begin (_display (to-str (rowString (list-ref m i)
)
)
)
 (newline)
 (set! i (+ i 1)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
)
)
)
)
)
)
 (define (elementWiseMM m1 m2 f)
 (call/cc (lambda (ret23)
 (let ((z (_list)
)
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< r (cond ((string? m1)
 (string-length m1)
)
 ((hash-table? m1)
 (hash-table-size m1)
)
 (else (length m1)
)
)
)
 (begin (let ((row (_list)
)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break27)
 (letrec ((loop26 (lambda ()
 (if (< c (cond ((string? (list-ref m1 r)
)
 (string-length (list-ref m1 r)
)
)
 ((hash-table? (list-ref m1 r)
)
 (hash-table-size (list-ref m1 r)
)
)
 (else (length (list-ref m1 r)
)
)
)
)
 (begin (set! row (append row (_list (f (cond ((string? (list-ref m1 r)
)
 (substring (list-ref m1 r)
 c (+ c 1)
)
)
 ((hash-table? (list-ref m1 r)
)
 (hash-table-ref (list-ref m1 r)
 c)
)
 (else (list-ref (list-ref m1 r)
 c)
)
)
 (cond ((string? (list-ref m2 r)
)
 (substring (list-ref m2 r)
 c (+ c 1)
)
)
 ((hash-table? (list-ref m2 r)
)
 (hash-table-ref (list-ref m2 r)
 c)
)
 (else (list-ref (list-ref m2 r)
 c)
)
)
)
)
)
)
 (set! c (+ c 1)
)
 (loop26)
)
 (quote ()
)
)
)
)
)
 (loop26)
)
)
)
 (set! z (append z (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
 (ret23 z)
)
)
)
)
)
)
)
 (define (elementWiseMS m s f)
 (call/cc (lambda (ret28)
 (let ((z (_list)
)
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break30)
 (letrec ((loop29 (lambda ()
 (if (< r (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
 (begin (let ((row (_list)
)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break32)
 (letrec ((loop31 (lambda ()
 (if (< c (cond ((string? (list-ref m r)
)
 (string-length (list-ref m r)
)
)
 ((hash-table? (list-ref m r)
)
 (hash-table-size (list-ref m r)
)
)
 (else (length (list-ref m r)
)
)
)
)
 (begin (set! row (append row (_list (f (cond ((string? (list-ref m r)
)
 (substring (list-ref m r)
 c (+ c 1)
)
)
 ((hash-table? (list-ref m r)
)
 (hash-table-ref (list-ref m r)
 c)
)
 (else (list-ref (list-ref m r)
 c)
)
)
 s)
)
)
)
 (set! c (+ c 1)
)
 (loop31)
)
 (quote ()
)
)
)
)
)
 (loop31)
)
)
)
 (set! z (append z (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop29)
)
 (quote ()
)
)
)
)
)
 (loop29)
)
)
)
 (ret28 z)
)
)
)
)
)
)
)
 (define (add a b)
 (call/cc (lambda (ret33)
 (ret33 (+ a b)
)
)
)
)
 (define (sub a b)
 (call/cc (lambda (ret34)
 (ret34 (- a b)
)
)
)
)
 (define (mul a b)
 (call/cc (lambda (ret35)
 (ret35 (* a b)
)
)
)
)
 (define (div a b)
 (call/cc (lambda (ret36)
 (ret36 (/ a b)
)
)
)
)
 (define (exp a b)
 (call/cc (lambda (ret37)
 (ret37 (powf a b)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret38)
 (let ((m1 (_list (_list 3.0 1.0 4.0)
 (_list 1.0 5.0 9.0)
)
)
)
 (begin (let ((m2 (_list (_list 2.0 7.0 1.0)
 (_list 8.0 2.0 8.0)
)
)
)
 (begin (printMatrix "m1:" m1)
 (printMatrix "m2:" m2)
 (_display (to-str "")
)
 (newline)
 (printMatrix "m1 + m2:" (elementWiseMM m1 m2 add)
)
 (printMatrix "m1 - m2:" (elementWiseMM m1 m2 sub)
)
 (printMatrix "m1 * m2:" (elementWiseMM m1 m2 mul)
)
 (printMatrix "m1 / m2:" (elementWiseMM m1 m2 div)
)
 (printMatrix "m1 ^ m2:" (elementWiseMM m1 m2 exp)
)
 (_display (to-str "")
)
 (newline)
 (let ((s 0.5)
)
 (begin (_display (to-str (string-append "s: " (to-str s)
)
)
)
 (newline)
 (printMatrix "m1 + s:" (elementWiseMS m1 s add)
)
 (printMatrix "m1 - s:" (elementWiseMS m1 s sub)
)
 (printMatrix "m1 * s:" (elementWiseMS m1 s mul)
)
 (printMatrix "m1 / s:" (elementWiseMS m1 s div)
)
 (printMatrix "m1 ^ s:" (elementWiseMS m1 s exp)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end40 (now)
)
)
 (let ((dur41 (quotient (- end40 start39)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur41)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
