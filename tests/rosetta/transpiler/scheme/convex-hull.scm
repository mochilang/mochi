;; Generated on 2025-08-01 19:22 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (ccw a b c) (call/cc (lambda (ret1) (let ((lhs (* (- (hash-table-ref b "x") (hash-table-ref a "x")) (- (hash-table-ref c "y") (hash-table-ref a "y"))))) (begin (let ((rhs (* (- (hash-table-ref b "y") (hash-table-ref a "y")) (- (hash-table-ref c "x") (hash-table-ref a "x"))))) (begin (ret1 (> lhs rhs)))))))))
(define (sortPoints ps) (call/cc (lambda (ret2) (let ((arr ps)) (begin (let ((n (cond ((string? arr) (string-length arr)) ((hash-table? arr) (hash-table-size arr)) (else (length arr))))) (begin (let ((i 0)) (begin (call/cc (lambda (break4) (letrec ((loop3 (lambda () (if (< i n) (begin (let ((j 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (_lt j (- n 1)) (begin (let ((p (list-ref arr j))) (begin (let ((q (list-ref arr (+ j 1)))) (begin (if (or (> (hash-table-ref p "x") (hash-table-ref q "x")) (and (equal? (hash-table-ref p "x") (hash-table-ref q "x")) (> (hash-table-ref p "y") (hash-table-ref q "y")))) (begin (list-set! arr j q) (list-set! arr (+ j 1) p)) (quote ())) (set! j (+ j 1)))))) (loop5)) (quote ()))))) (loop5)))) (set! i (+ i 1)))) (loop3)) (quote ()))))) (loop3)))) (ret2 arr))))))))))
(define (convexHull ps) (call/cc (lambda (ret7) (begin (set! ps (sortPoints ps)) (let ((h (_list))) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((pt (car xs))) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (and (>= (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 2) (eq? (ccw (list-ref h (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 2)) (list-ref h (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1)) pt) #f)) (begin (set! h (take (drop h 0) (- (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1) 0))) (loop10)) (quote ()))))) (loop10)))) (set! h (append h (_list pt))))) (loop8 (cdr xs))))))) (loop8 ps)))) (let ((i (- (cond ((string? ps) (string-length ps)) ((hash-table? ps) (hash-table-size ps)) (else (length ps))) 2))) (begin (let ((t (+ (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1))) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (>= i 0) (begin (let ((pt (list-ref ps i))) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (and (>= (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) t) (eq? (ccw (list-ref h (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 2)) (list-ref h (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1)) pt) #f)) (begin (set! h (take (drop h 0) (- (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1) 0))) (loop14)) (quote ()))))) (loop14)))) (set! h (append h (_list pt))) (set! i (- i 1)))) (loop12)) (quote ()))))) (loop12)))) (ret7 (take (drop h 0) (- (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1) 0)))))))))))))
(define (pointStr p) (call/cc (lambda (ret16) (ret16 (string-append (string-append (string-append (string-append "(" (to-str (hash-table-ref p "x"))) ",") (to-str (hash-table-ref p "y"))) ")")))))
(define (hullStr h) (call/cc (lambda (ret17) (let ((s "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda () (if (< i (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h)))) (begin (set! s (string-append s (pointStr (list-ref h i)))) (if (_lt i (- (cond ((string? h) (string-length h)) ((hash-table? h) (hash-table-size h)) (else (length h))) 1)) (begin (set! s (string-append s " "))) (quote ())) (set! i (+ i 1)) (loop18)) (quote ()))))) (loop18)))) (set! s (string-append s "]")) (ret17 s))))))))
(define pts (_list (alist->hash-table (_list (cons "x" 16) (cons "y" 3))) (alist->hash-table (_list (cons "x" 12) (cons "y" 17))) (alist->hash-table (_list (cons "x" 0) (cons "y" 6))) (alist->hash-table (_list (cons "x" (- 4)) (cons "y" (- 6)))) (alist->hash-table (_list (cons "x" 16) (cons "y" 6))) (alist->hash-table (_list (cons "x" 16) (cons "y" (- 7)))) (alist->hash-table (_list (cons "x" 16) (cons "y" (- 3)))) (alist->hash-table (_list (cons "x" 17) (cons "y" (- 4)))) (alist->hash-table (_list (cons "x" 5) (cons "y" 19))) (alist->hash-table (_list (cons "x" 19) (cons "y" (- 8)))) (alist->hash-table (_list (cons "x" 3) (cons "y" 16))) (alist->hash-table (_list (cons "x" 12) (cons "y" 13))) (alist->hash-table (_list (cons "x" 3) (cons "y" (- 4)))) (alist->hash-table (_list (cons "x" 17) (cons "y" 5))) (alist->hash-table (_list (cons "x" (- 3)) (cons "y" 15))) (alist->hash-table (_list (cons "x" (- 3)) (cons "y" (- 9)))) (alist->hash-table (_list (cons "x" 0) (cons "y" 11))) (alist->hash-table (_list (cons "x" (- 9)) (cons "y" (- 3)))) (alist->hash-table (_list (cons "x" (- 4)) (cons "y" (- 2)))) (alist->hash-table (_list (cons "x" 12) (cons "y" 10)))))
(define hull (convexHull pts))
(_display (to-str (string-append "Convex Hull: " (hullStr hull))))
(newline)
