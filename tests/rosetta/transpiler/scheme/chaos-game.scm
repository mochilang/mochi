;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define width 60)
(define height (let ((v1 (* (+ 0.0 width) 0.86602540378))) (cond ((string? v1) (inexact->exact (floor (string->number v1)))) ((boolean? v1) (if v1 1 0)) (else (inexact->exact (floor v1))))))
(define iterations 5000)
(define grid (_list))
(define y 0)
(call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< y height) (begin (let ((line (_list))) (begin (let ((x 0)) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (< x width) (begin (set! line (append line (_list " "))) (set! x (+ x 1)) (loop4)) (quote ()))))) (loop4)))) (set! grid (append grid (_list line))) (set! y (+ y 1)))))) (loop2)) (quote ()))))) (loop2))))
(define (randInt s n) (call/cc (lambda (ret6) (let ((next (modulo (_add (* s 1664525) 1013904223) 2147483647))) (begin (ret6 (_list next (modulo next n))))))))
(define seed 1)
(define vertices (_list (_list 0 (- height 1)) (_list (- width 1) (- height 1)) (_list (let ((v7 (quotient width 2))) (cond ((string? v7) (inexact->exact (floor (string->number v7)))) ((boolean? v7) (if v7 1 0)) (else (inexact->exact (floor v7))))) 0)))
(define px (let ((v8 (quotient width 2))) (cond ((string? v8) (inexact->exact (floor (string->number v8)))) ((boolean? v8) (if v8 1 0)) (else (inexact->exact (floor v8))))))
(define py (let ((v9 (quotient height 2))) (cond ((string? v9) (inexact->exact (floor (string->number v9)))) ((boolean? v9) (if v9 1 0)) (else (inexact->exact (floor v9))))))
(define i 0)
(call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (< i iterations) (begin (let ((r (randInt seed 3))) (begin (set! seed (cond ((string? r) (_substring r 0 (+ 0 1))) ((hash-table? r) (hash-table-ref r 0)) (else (list-ref r 0)))) (let ((idx (let ((v12 (cond ((string? r) (_substring r 1 (+ 1 1))) ((hash-table? r) (hash-table-ref r 1)) (else (list-ref r 1))))) (cond ((string? v12) (inexact->exact (floor (string->number v12)))) ((boolean? v12) (if v12 1 0)) (else (inexact->exact (floor v12))))))) (begin (let ((v (list-ref vertices idx))) (begin (set! px (let ((v13 (quotient (+ px (list-ref v 0)) 2))) (cond ((string? v13) (inexact->exact (floor (string->number v13)))) ((boolean? v13) (if v13 1 0)) (else (inexact->exact (floor v13)))))) (set! py (let ((v14 (quotient (+ py (list-ref v 1)) 2))) (cond ((string? v14) (inexact->exact (floor (string->number v14)))) ((boolean? v14) (if v14 1 0)) (else (inexact->exact (floor v14)))))) (if (and (and (and (>= px 0) (< px width)) (>= py 0)) (< py height)) (begin (list-set! (list-ref grid py) px "*")) (quote ())) (set! i (+ i 1)))))))) (loop10)) (quote ()))))) (loop10))))
(set! y 0)
(call/cc (lambda (break16) (letrec ((loop15 (lambda () (if (< y height) (begin (let ((line "")) (begin (let ((x 0)) (begin (call/cc (lambda (break18) (letrec ((loop17 (lambda () (if (< x width) (begin (set! line (string-append line (cond ((string? (list-ref grid y)) (_substring (list-ref grid y) x (+ x 1))) ((hash-table? (list-ref grid y)) (hash-table-ref (list-ref grid y) x)) (else (list-ref (list-ref grid y) x))))) (set! x (+ x 1)) (loop17)) (quote ()))))) (loop17)))) (_display (to-str line)) (newline) (set! y (+ y 1)))))) (loop15)) (quote ()))))) (loop15))))
