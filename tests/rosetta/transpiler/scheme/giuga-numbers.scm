;; Generated on 2025-08-04 17:04 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (primeFactors n) (call/cc (lambda (ret1) (let ((factors (_list))) (begin (let ((last 0)) (begin (let ((x n)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (equal? (modulo x 2) 0) (begin (if (equal? last 2) (begin (ret1 (_list))) (quote ())) (set! factors (append factors (_list 2))) (set! last 2) (set! x (quotient x 2)) (loop2)) (quote ()))))) (loop2)))) (let ((p 3)) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (<= (* p p) x) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda () (if (equal? (modulo x p) 0) (begin (if (equal? last p) (begin (ret1 (_list))) (quote ())) (set! factors (append factors (_list p))) (set! last p) (set! x (quotient x p)) (loop6)) (quote ()))))) (loop6)))) (set! p (+ p 2)) (loop4)) (quote ()))))) (loop4)))) (if (> x 1) (begin (if (equal? last x) (begin (ret1 (_list))) (quote ())) (set! factors (append factors (_list x)))) (quote ())) (ret1 factors))))))))))))
(define (isGiuga n) (call/cc (lambda (ret8) (let ((facs (primeFactors n))) (begin (if (<= (_len facs) 2) (begin (ret8 #f)) (quote ())) (call/cc (lambda (break10) (letrec ((loop9 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((f (car xs))) (begin (if (not (equal? (fmod (- (/ n f) 1) f) 0)) (begin (ret8 #f)) (quote ())))) (loop9 (cdr xs))))))) (loop9 facs)))) (ret8 #t))))))
(define (main) (call/cc (lambda (ret11) (let ((known (_list 30 858 1722 66198))) (begin (let ((nums (_list))) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((n (car xs))) (begin (if (isGiuga n) (begin (set! nums (append nums (_list n)))) (quote ())))) (loop12 (cdr xs))))))) (loop12 known)))) (_display (to-str "The first 4 Giuga numbers are:")) (newline) (_display (to-str nums)) (newline))))))))
(main)
