;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (concatInts a b)
 (call/cc (lambda (ret1)
 (let ((out (list)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (set! out (append out (list v)
)
)
)
)
 (loop2 (cdr xs)
)
)
)
)
)
)
 (loop2 a)
)
)
)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (set! out (append out (list v)
)
)
)
)
 (loop4 (cdr xs)
)
)
)
)
)
)
 (loop4 b)
)
)
)
 (ret1 out)
)
)
)
)
)
(define (concatAny a b)
 (call/cc (lambda (ret6)
 (let ((out (list)
)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (set! out (append out (list v)
)
)
)
)
 (loop7 (cdr xs)
)
)
)
)
)
)
 (loop7 a)
)
)
)
 (call/cc (lambda (break10)
 (letrec ((loop9 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((v (car xs)
)
)
 (begin (set! out (append out (list v)
)
)
)
)
 (loop9 (cdr xs)
)
)
)
)
)
)
 (loop9 b)
)
)
)
 (ret6 out)
)
)
)
)
)
(define a (list 1 2 3)
)
(define b (list 7 12 60)
)
(display (to-str (to-str (concatInts a b)
)
)
)
(newline)
(define i (list 1 2 3)
)
(define j (list "Crosby" "Stills" "Nash" "Young")
)
(display (to-str (to-str (concatAny i j)
)
)
)
(newline)
(define l (list 1 2 3)
)
(define m (list 7 12 60)
)
(display (to-str (to-str (concatInts l m)
)
)
)
(newline)
