;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (bellTriangle n)
 (call/cc (lambda (ret1)
 (let ((tri (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i n)
 (begin (let ((row (_list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< j i)
 (begin (set! row (append row (_list 0)
)
)
 (set! j (+ j 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! tri (append tri (_list row)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (list-set! (list-ref tri 1)
 0 1)
 (set! i 2)
 (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< i n)
 (begin (list-set! (list-ref tri i)
 0 (cond ((string? (list-ref tri (- i 1)
)
)
 (substring (list-ref tri (- i 1)
)
 (- i 2)
 (+ (- i 2)
 1)
)
)
 ((hash-table? (list-ref tri (- i 1)
)
)
 (hash-table-ref (list-ref tri (- i 1)
)
 (- i 2)
)
)
 (else (list-ref (list-ref tri (- i 1)
)
 (- i 2)
)
)
)
)
 (let ((j 1)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< j i)
 (begin (list-set! (list-ref tri i)
 j (+ (cond ((string? (list-ref tri i)
)
 (substring (list-ref tri i)
 (- j 1)
 (+ (- j 1)
 1)
)
)
 ((hash-table? (list-ref tri i)
)
 (hash-table-ref (list-ref tri i)
 (- j 1)
)
)
 (else (list-ref (list-ref tri i)
 (- j 1)
)
)
)
 (cond ((string? (list-ref tri (- i 1)
)
)
 (substring (list-ref tri (- i 1)
)
 (- j 1)
 (+ (- j 1)
 1)
)
)
 ((hash-table? (list-ref tri (- i 1)
)
)
 (hash-table-ref (list-ref tri (- i 1)
)
 (- j 1)
)
)
 (else (list-ref (list-ref tri (- i 1)
)
 (- j 1)
)
)
)
)
)
 (set! j (+ j 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret1 tri)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret10)
 (let ((bt (bellTriangle 51)
)
)
 (begin (display (to-str "First fifteen and fiftieth Bell numbers:")
)
 (newline)
 (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (i)
 (if (< i 16)
 (begin (begin (display (to-str (string-append (string-append (string-append "" (padStart (to-str i)
 2 " ")
)
 ": ")
 (to-str (cond ((string? (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
)
 (substring (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
 0 (+ 0 1)
)
)
 ((hash-table? (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
)
 (hash-table-ref (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
 0)
)
 (else (list-ref (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
 0)
)
)
)
)
)
)
 (newline)
)
 (loop11 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop11 1)
)
)
)
 (display (to-str (string-append "50: " (to-str (cond ((string? (cond ((string? bt)
 (substring bt 50 (+ 50 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt 50)
)
 (else (list-ref bt 50)
)
)
)
 (substring (cond ((string? bt)
 (substring bt 50 (+ 50 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt 50)
)
 (else (list-ref bt 50)
)
)
 0 (+ 0 1)
)
)
 ((hash-table? (cond ((string? bt)
 (substring bt 50 (+ 50 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt 50)
)
 (else (list-ref bt 50)
)
)
)
 (hash-table-ref (cond ((string? bt)
 (substring bt 50 (+ 50 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt 50)
)
 (else (list-ref bt 50)
)
)
 0)
)
 (else (list-ref (cond ((string? bt)
 (substring bt 50 (+ 50 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt 50)
)
 (else (list-ref bt 50)
)
)
 0)
)
)
)
)
)
)
 (newline)
 (display (to-str "")
)
 (newline)
 (display (to-str "The first ten rows of Bell's triangle:")
)
 (newline)
 (call/cc (lambda (break14)
 (letrec ((loop13 (lambda (i)
 (if (< i 11)
 (begin (begin (display (to-str (cond ((string? bt)
 (substring bt i (+ i 1)
)
)
 ((hash-table? bt)
 (hash-table-ref bt i)
)
 (else (list-ref bt i)
)
)
)
)
 (newline)
)
 (loop13 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop13 1)
)
)
)
)
)
)
)
)
(main)
