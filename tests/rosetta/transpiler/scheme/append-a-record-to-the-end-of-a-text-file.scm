;; Generated on 2025-07-26 21:33 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start4 (now)
)
)
 (begin (define (writeTwo)
 (call/cc (lambda (ret1)
 (ret1 (_list "jsmith:x:1001:1000:Joe Smith,Room 1007,(234)
555-8917,(234)
555-0077,jsmith@rosettacode.org:/home/jsmith:/bin/bash" "jdoe:x:1002:1000:Jane Doe,Room 1004,(234)
555-8914,(234)
555-0044,jdoe@rosettacode.org:/home/jsmith:/bin/bash")
)
)
)
)
 (define (appendOneMore lines)
 (call/cc (lambda (ret2)
 (ret2 (append lines (_list "xyz:x:1003:1000:X Yz,Room 1003,(234)
555-8913,(234)
555-0033,xyz@rosettacode.org:/home/xyz:/bin/bash")
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret3)
 (let ((lines (writeTwo)
)
)
 (begin (set! lines (appendOneMore lines)
)
 (if (and (>= (cond ((string? lines)
 (string-length lines)
)
 ((hash-table? lines)
 (hash-table-size lines)
)
 (else (length lines)
)
)
 3)
 (string=? (cond ((string? lines)
 (substring lines 2 (+ 2 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines 2)
)
 (else (list-ref lines 2)
)
)
 "xyz:x:1003:1000:X Yz,Room 1003,(234)
555-8913,(234)
555-0033,xyz@rosettacode.org:/home/xyz:/bin/bash")
)
 (begin (display (to-str "append okay")
)
 (newline)
)
 (begin (display (to-str "it didn't work")
)
 (newline)
)
)
)
)
)
)
)
 (main)
 (let ((end5 (now)
)
)
 (let ((dur6 (quotient (- end5 start4)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur6)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
