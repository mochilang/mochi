;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (isPrime n) (call/cc (lambda (ret1) (begin (if (< n 2) (begin (ret1 #f)) (quote ())) (if (equal? (modulo n 2) 0) (begin (ret1 (equal? n 2))) (quote ())) (if (equal? (modulo n 3) 0) (begin (ret1 (equal? n 3))) (quote ())) (let ((d 5)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (_le (* d d) n) (begin (if (equal? (modulo n d) 0) (begin (ret1 #f)) (quote ())) (set! d (+ d 2)) (if (equal? (modulo n d) 0) (begin (ret1 #f)) (quote ())) (set! d (+ d 4)) (loop2)) (quote ()))))) (loop2)))) (ret1 #t)))))))
(define (bigTrim a) (call/cc (lambda (ret4) (let ((n (cond ((string? a) (string-length a)) ((hash-table? a) (hash-table-size a)) (else (length a))))) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (and (> n 1) (equal? (list-ref a (- n 1)) 0)) (begin (set! a (take (drop a 0) (- (- n 1) 0))) (set! n (- n 1)) (loop5)) (quote ()))))) (loop5)))) (ret4 a))))))
(define (bigFromInt x) (call/cc (lambda (ret7) (begin (if (equal? x 0) (begin (ret7 (_list 0))) (quote ())) (let ((digits (_list))) (begin (let ((n x)) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (> n 0) (begin (set! digits (append digits (_list (modulo n 10)))) (set! n (quotient n 10)) (loop8)) (quote ()))))) (loop8)))) (ret7 digits)))))))))
(define (bigMulSmall a m) (call/cc (lambda (ret10) (begin (if (equal? m 0) (begin (ret10 (_list 0))) (quote ())) (let ((res (_list))) (begin (let ((carry 0)) (begin (let ((i 0)) (begin (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< i (cond ((string? a) (string-length a)) ((hash-table? a) (hash-table-size a)) (else (length a)))) (begin (let ((prod (_add (* (list-ref a i) m) carry))) (begin (set! res (append res (_list (modulo prod 10)))) (set! carry (quotient prod 10)) (set! i (+ i 1)))) (loop11)) (quote ()))))) (loop11)))) (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (> carry 0) (begin (set! res (append res (_list (modulo carry 10)))) (set! carry (quotient carry 10)) (loop13)) (quote ()))))) (loop13)))) (ret10 (bigTrim res))))))))))))
(define (bigToString a) (call/cc (lambda (ret15) (let ((s "")) (begin (let ((i (- (cond ((string? a) (string-length a)) ((hash-table? a) (hash-table-size a)) (else (length a))) 1))) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (>= i 0) (begin (set! s (string-append s (to-str (list-ref a i)))) (set! i (- i 1)) (loop16)) (quote ()))))) (loop16)))) (ret15 s))))))))
(define (pow2 k) (call/cc (lambda (ret18) (let ((r 1)) (begin (let ((i 0)) (begin (call/cc (lambda (break20) (letrec ((loop19 (lambda () (if (< i k) (begin (set! r (* r 2)) (set! i (+ i 1)) (loop19)) (quote ()))))) (loop19)))) (ret18 r))))))))
(define (ccFactors n m) (call/cc (lambda (ret21) (let ((p (_add (* 6 m) 1))) (begin (if (not (isPrime p)) (begin (ret21 (_list))) (quote ())) (let ((prod (bigFromInt p))) (begin (set! p (_add (* 12 m) 1)) (if (not (isPrime p)) (begin (ret21 (_list))) (quote ())) (set! prod (bigMulSmall prod p)) (let ((i 1)) (begin (call/cc (lambda (break23) (letrec ((loop22 (lambda () (if (_le i (- n 2)) (begin (set! p (_add (* (* (pow2 i) 9) m) 1)) (if (not (isPrime p)) (begin (ret21 (_list))) (quote ())) (set! prod (bigMulSmall prod p)) (set! i (+ i 1)) (loop22)) (quote ()))))) (loop22)))) (ret21 prod))))))))))
(define (ccNumbers start end) (call/cc (lambda (ret24) (let ((n start)) (begin (call/cc (lambda (break26) (letrec ((loop25 (lambda () (if (<= n end) (begin (let ((m 1)) (begin (if (> n 4) (begin (set! m (pow2 (- n 4)))) (quote ())) (call/cc (lambda (break28) (letrec ((loop27 (lambda () (if #t (begin (let ((num (ccFactors n m))) (begin (if (> (cond ((string? num) (string-length num)) ((hash-table? num) (hash-table-size num)) (else (length num))) 0) (begin (_display (to-str (string-append (string-append (string-append "a(" (to-str n)) ") = ") (bigToString num)))) (newline) (break28 (quote ()))) (quote ())) (if (<= n 4) (begin (set! m (+ m 1))) (begin (set! m (_add m (pow2 (- n 4)))))))) (loop27)) (quote ()))))) (loop27)))) (set! n (+ n 1)))) (loop25)) (quote ()))))) (loop25)))))))))
(ccNumbers 3 9)
