;; Generated on 2025-08-03 10:21 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start30 (now))) (begin (define (gcd a b) (call/cc (lambda (ret1) (let ((x a)) (begin (if (< x 0) (begin (set! x (- x))) (quote ())) (let ((y b)) (begin (if (< y 0) (begin (set! y (- y))) (quote ())) (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (not (equal? y 0)) (begin (let ((t (modulo x y))) (begin (set! x y) (set! y t))) (loop2)) (quote ()))))) (loop2)))) (ret1 x)))))))) (define (divisors n) (call/cc (lambda (ret4) (let ((divs (_list))) (begin (let ((i 1)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (_le (* i i) n) (begin (if (equal? (modulo n i) 0) (begin (set! divs (append divs (_list i))) (let ((j (let ((v7 (quotient n i))) (cond ((string? v7) (inexact->exact (floor (string->number v7)))) ((boolean? v7) (if v7 1 0)) (else (inexact->exact (floor v7))))))) (begin (if (not (equal? i j)) (begin (set! divs (append divs (_list j)))) (quote ()))))) (quote ())) (set! i (+ i 1)) (loop5)) (quote ()))))) (loop5)))) (ret4 divs)))))))) (define (sum xs) (call/cc (lambda (ret8) (let ((s 0)) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((v (car xs))) (begin (set! s (_add s v)))) (loop9 (cdr xs))))))) (loop9 xs)))) (ret8 s)))))) (define (isDuffinian n) (call/cc (lambda (ret11) (let ((divs (divisors n))) (begin (if (<= (cond ((string? divs) (string-length divs)) ((hash-table? divs) (hash-table-size divs)) (else (length divs))) 2) (begin (ret11 #f)) (quote ())) (let ((sigma (sum divs))) (begin (ret11 (equal? (gcd sigma n) 1))))))))) (define (pad n width) (call/cc (lambda (ret12) (let ((s (to-str n))) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (< (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) width) (begin (set! s (string-append " " s)) (loop13)) (quote ()))))) (loop13)))) (ret12 s)))))) (define (printTable nums perRow width) (call/cc (lambda (ret15) (let ((i 0)) (begin (let ((line "")) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (< i (cond ((string? nums) (string-length nums)) ((hash-table? nums) (hash-table-size nums)) (else (length nums)))) (begin (set! line (string-append (string-append line " ") (pad (list-ref nums i) width))) (if (equal? (modulo (+ i 1) perRow) 0) (begin (_display (to-str (_substring line 1 (cond ((string? line) (string-length line)) ((hash-table? line) (hash-table-size line)) (else (length line)))))) (newline) (set! line "")) (quote ())) (set! i (+ i 1)) (loop16)) (quote ()))))) (loop16)))) (if (> (cond ((string? line) (string-length line)) ((hash-table? line) (hash-table-size line)) (else (length line))) 0) (begin (_display (to-str (_substring line 1 (cond ((string? line) (string-length line)) ((hash-table? line) (hash-table-size line)) (else (length line)))))) (newline)) (quote ()))))))))) (define (main) (call/cc (lambda (ret18) (let ((duff (_list))) (begin (let ((n 1)) (begin (call/cc (lambda (break20) (letrec ((loop19 (lambda () (if (< (cond ((string? duff) (string-length duff)) ((hash-table? duff) (hash-table-size duff)) (else (length duff))) 50) (begin (if (isDuffinian n) (begin (set! duff (append duff (_list n)))) (quote ())) (set! n (+ n 1)) (loop19)) (quote ()))))) (loop19)))) (_display (to-str "First 50 Duffinian numbers:")) (newline) (printTable duff 10 3) (let ((triplets (_list))) (begin (set! n 1) (call/cc (lambda (break22) (letrec ((loop21 (lambda () (if (< (cond ((string? triplets) (string-length triplets)) ((hash-table? triplets) (hash-table-size triplets)) (else (length triplets))) 20) (begin (if (and (and (isDuffinian n) (isDuffinian (+ n 1))) (isDuffinian (+ n 2))) (begin (set! triplets (append triplets (_list (string-append (string-append (string-append (string-append (string-append (string-append "(" (to-str n)) ",") (to-str (+ n 1))) ",") (to-str (+ n 2))) ")")))) (set! n (+ n 3))) (quote ())) (set! n (+ n 1)) (loop21)) (quote ()))))) (loop21)))) (_display (to-str "\nFirst 20 Duffinian triplets:")) (newline) (let ((i 0)) (begin (call/cc (lambda (break24) (letrec ((loop23 (lambda () (if (< i (cond ((string? triplets) (string-length triplets)) ((hash-table? triplets) (hash-table-size triplets)) (else (length triplets)))) (begin (let ((line "")) (begin (let ((j 0)) (begin (call/cc (lambda (break26) (letrec ((loop25 (lambda () (if (and (< j 4) (< i (cond ((string? triplets) (string-length triplets)) ((hash-table? triplets) (hash-table-size triplets)) (else (length triplets))))) (begin (set! line (string-append line (padStr (list-ref triplets i) 16))) (set! j (+ j 1)) (set! i (+ i 1)) (loop25)) (quote ()))))) (loop25)))) (_display (to-str line)) (newline))))) (loop23)) (quote ()))))) (loop23))))))))))))))) (define (padStr s width) (call/cc (lambda (ret27) (let ((res s)) (begin (call/cc (lambda (break29) (letrec ((loop28 (lambda () (if (< (cond ((string? res) (string-length res)) ((hash-table? res) (hash-table-size res)) (else (length res))) width) (begin (set! res (string-append res " ")) (loop28)) (quote ()))))) (loop28)))) (ret27 res)))))) (main) (let ((end31 (now))) (let ((dur32 (quotient (- end31 start30) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur32) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
