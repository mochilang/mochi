;; Generated on 2025-07-27 23:58 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (newFactory)
 (call/cc (lambda (ret1)
 (let ((sn 0)
)
 (begin (define (New)
 (call/cc (lambda (ret2)
 (begin (set! sn (+ sn 1)
)
 (let ((b (alist->hash-table (_list (cons "secret" sn)
)
)
)
)
 (begin (if (equal? sn 1)
 (begin (hash-table-set! b "Contents" "rabbit")
)
 (if (equal? sn 2)
 (begin (hash-table-set! b "Contents" "rock")
)
 (quote ()
)
)
)
 (ret2 b)
)
)
)
)
)
)
 (define (Count)
 (call/cc (lambda (ret3)
 (ret3 sn)
)
)
)
 (ret1 (_list New Count)
)
)
)
)
)
)
(define funcs (newFactory)
)
(define New (cond ((string? funcs)
 (substring funcs 0 (+ 0 1)
)
)
 ((hash-table? funcs)
 (hash-table-ref funcs 0)
)
 (else (list-ref funcs 0)
)
)
)
(define Count (cond ((string? funcs)
 (substring funcs 1 (+ 1 1)
)
)
 ((hash-table? funcs)
 (hash-table-ref funcs 1)
)
 (else (list-ref funcs 1)
)
)
)
(define (TellSecret self)
 (call/cc (lambda (ret4)
 (ret4 "secret")
)
)
)
