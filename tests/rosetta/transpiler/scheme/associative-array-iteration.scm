;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (main)
 (call/cc (lambda (ret1)
 (let ((m (alist->hash-table (list (cons "hello" 13)
 (cons "world" 31)
 (cons "!" 71)
)
)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((k (car xs)
)
)
 (begin (display (to-str (string-append (string-append (string-append "key = " k)
 ", value = ")
 (to-str (hash-table-ref/default m k (quote ()
)
)
)
)
)
)
 (newline)
)
)
 (loop2 (cdr xs)
)
)
)
)
)
)
 (loop2 (hash-table-keys m)
)
)
)
)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((k (car xs)
)
)
 (begin (display (to-str (string-append "key = " k)
)
)
 (newline)
)
)
 (loop4 (cdr xs)
)
)
)
)
)
)
 (loop4 (hash-table-keys m)
)
)
)
)
 (call/cc (lambda (break7)
 (letrec ((loop6 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((k (car xs)
)
)
 (begin (display (to-str (string-append "value = " (to-str (hash-table-ref/default m k (quote ()
)
)
)
)
)
)
 (newline)
)
)
 (loop6 (cdr xs)
)
)
)
)
)
)
 (loop6 (hash-table-keys m)
)
)
)
)
)
)
)
)
)
(main)
