;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (accumulator sum)
 (call/cc (lambda (ret1)
 (let ((store (list sum)
)
)
 (begin (define (add nv)
 (call/cc (lambda (ret2)
 (begin (list-set! store 0 (+ (list-ref store 0)
 nv)
)
 (ret2 (list-ref store 0)
)
)
)
)
)
 (ret1 "add")
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret3)
 (let ((x (accumulator 1)
)
)
 (begin (x 5)
 (accumulator 3)
 (display (to-str (to-str (x 2.3)
)
)
)
 (newline)
)
)
)
)
)
(main)
