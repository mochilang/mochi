;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (connect client)
 (call/cc (lambda (ret1)
 (ret1 (and (not (string=? (hash-table-ref client "Host")
 "")
)
 (> (hash-table-ref client "Port")
 0)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret2)
 (let ((client (alist->hash-table (list (cons "Base" "dc=example,dc=com")
 (cons "Host" "ldap.example.com")
 (cons "Port" 389)
 (cons "UseSSL" #f)
 (cons "BindDN" "uid=readonlyuser,ou=People,dc=example,dc=com")
 (cons "BindPassword" "readonlypassword")
 (cons "UserFilter" "(uid=%s)
")
 (cons "GroupFilter" "(memberUid=%s)
")
 (cons "Attributes" (list "givenName" "sn" "mail" "uid")
)
)
)
)
)
 (begin (if (connect client)
 (begin (display (to-str (string-append "Connected to " (hash-table-ref client "Host")
)
)
)
 (newline)
)
 (begin (display (to-str "Failed to connect")
)
 (newline)
)
)
)
)
)
)
)
(main)
