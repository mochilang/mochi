;; Generated on 2025-07-30 21:05 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start37 (now)
)
)
 (begin (define (toBase n b)
 (call/cc (lambda (ret1)
 (begin (if (equal? n 0)
 (begin (ret1 "0")
)
 (quote ()
)
)
 (let ((s "")
)
 (begin (let ((x n)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> x 0)
 (begin (set! s (string-append (to-str (modulo x b)
)
 s)
)
 (set! x (let ((v4 (quotient x b)
)
)
 (cond ((string? v4)
 (inexact->exact (floor (string->number v4)
)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact (floor v4)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 s)
)
)
)
)
)
)
)
)
 (define (parseIntBase s b)
 (call/cc (lambda (ret10)
 (let ((n 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! n (_add (* n b)
 (_parseIntStr (substring s i (+ i 1)
)
 10)
)
)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 n)
)
)
)
)
)
)
)
 (define (reverseStr s)
 (call/cc (lambda (ret13)
 (let ((out "")
)
 (begin (let ((i (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 1)
)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (>= i 0)
 (begin (set! out (string-append out (substring s i (+ i 1)
)
)
)
 (set! i (- i 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (ret13 out)
)
)
)
)
)
)
)
 (define (isPalindrome s)
 (call/cc (lambda (ret16)
 (ret16 (string=? s (reverseStr s)
)
)
)
)
)
 (define (isPalindromeBin n)
 (call/cc (lambda (ret17)
 (let ((b (toBase n 2)
)
)
 (begin (ret17 (isPalindrome b)
)
)
)
)
)
)
 (define (myMin a b)
 (call/cc (lambda (ret18)
 (begin (if (< a b)
 (begin (ret18 a)
)
 (quote ()
)
)
 (ret18 b)
)
)
)
)
 (define (myMax a b)
 (call/cc (lambda (ret19)
 (begin (if (> a b)
 (begin (ret19 a)
)
 (quote ()
)
)
 (ret19 b)
)
)
)
)
 (define (reverse3 n)
 (call/cc (lambda (ret20)
 (let ((x 0)
)
 (begin (let ((y n)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (not (equal? y 0)
)
 (begin (set! x (_add (* x 3)
 (modulo y 3)
)
)
 (set! y (let ((v23 (quotient y 3)
)
)
 (cond ((string? v23)
 (inexact->exact (floor (string->number v23)
)
)
)
 ((boolean? v23)
 (if v23 1 0)
)
 (else (inexact->exact (floor v23)
)
)
)
)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (ret20 x)
)
)
)
)
)
)
)
 (define (show n)
 (call/cc (lambda (ret24)
 (begin (_display (to-str (string-append "Decimal : " (to-str n)
)
)
)
 (newline)
 (_display (to-str (string-append "Binary  : " (toBase n 2)
)
)
)
 (newline)
 (_display (to-str (string-append "Ternary : " (toBase n 3)
)
)
)
 (newline)
 (_display (to-str "")
)
 (newline)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret25)
 (begin (_display (to-str "The first 6 numbers which are palindromic in both binary and ternary are :\n")
)
 (newline)
 (show 0)
 (let ((count 1)
)
 (begin (let ((lo 0)
)
 (begin (let ((hi 1)
)
 (begin (let ((pow2 1)
)
 (begin (let ((pow3 1)
)
 (begin (call/cc (lambda (break27)
 (letrec ((loop26 (lambda ()
 (if #t (begin (let ((i lo)
)
 (begin (call/cc (lambda (break29)
 (letrec ((loop28 (lambda ()
 (if (< i hi)
 (begin (let ((n (_add (* (_add (* i 3)
 1)
 pow3)
 (reverse3 i)
)
)
)
 (begin (if (isPalindromeBin n)
 (begin (show n)
 (set! count (+ count 1)
)
 (if (>= count 6)
 (begin (ret25 (quote ()
)
)
)
 (quote ()
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop28)
)
 (quote ()
)
)
)
)
)
 (loop28)
)
)
)
 (if (equal? i pow3)
 (begin (set! pow3 (* pow3 3)
)
)
 (begin (set! pow2 (* pow2 4)
)
)
)
 (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if #t (begin (call/cc (lambda (break33)
 (letrec ((loop32 (lambda ()
 (if (<= pow2 pow3)
 (begin (set! pow2 (* pow2 4)
)
 (loop32)
)
 (quote ()
)
)
)
)
)
 (loop32)
)
)
)
 (let ((lo2 (let ((v34 (quotient (- (quotient pow2 pow3)
 1)
 3)
)
)
 (cond ((string? v34)
 (inexact->exact (floor (string->number v34)
)
)
)
 ((boolean? v34)
 (if v34 1 0)
)
 (else (inexact->exact (floor v34)
)
)
)
)
)
)
 (begin (let ((hi2 (+ (let ((v35 (quotient (- (/ (* pow2 2)
 pow3)
 1)
 3)
)
)
 (cond ((string? v35)
 (inexact->exact (floor (string->number v35)
)
)
)
 ((boolean? v35)
 (if v35 1 0)
)
 (else (inexact->exact (floor v35)
)
)
)
)
 1)
)
)
 (begin (let ((lo3 (let ((v36 (quotient pow3 3)
)
)
 (cond ((string? v36)
 (inexact->exact (floor (string->number v36)
)
)
)
 ((boolean? v36)
 (if v36 1 0)
)
 (else (inexact->exact (floor v36)
)
)
)
)
)
)
 (begin (let ((hi3 pow3)
)
 (begin (if (>= lo2 hi3)
 (begin (set! pow3 (* pow3 3)
)
)
 (if (>= lo3 hi2)
 (begin (set! pow2 (* pow2 4)
)
)
 (begin (set! lo (myMax lo2 lo3)
)
 (set! hi (myMin hi2 hi3)
)
 (break31 (quote ()
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
)
)
 (loop26)
)
 (quote ()
)
)
)
)
)
 (loop26)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end38 (now)
)
)
 (let ((dur39 (quotient (- end38 start37)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur39)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
