;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start11 (now)
)
)
 (begin (define (bernoulli n)
 (call/cc (lambda (ret1)
 (let ((a (_list)
)
)
 (begin (let ((m 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= m n)
 (begin (set! a (append a (_list (/ 1 (+ m 1)
)
)
)
)
 (let ((j m)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (>= j 1)
 (begin (list-set! a (- j 1)
 (* j (- (list-ref a (- j 1)
)
 (list-ref a j)
)
)
)
 (set! j (- j 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! m (+ m 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (list-ref a 0)
)
)
)
)
)
)
)
)
 (define (padStart s width pad)
 (call/cc (lambda (ret6)
 (let ((out s)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
 width)
 (begin (set! out (string-append pad out)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 out)
)
)
)
)
)
 (call/cc (lambda (break10)
 (letrec ((loop9 (lambda (i)
 (if (< i 61)
 (begin (begin (let ((b (bernoulli i)
)
)
 (begin (if (not (equal? (numerator b)
 0)
)
 (begin (let ((numStr (to-str (numerator b)
)
)
)
 (begin (let ((denStr (to-str (denominator b)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append "B(" (padStart (to-str i)
 2 " ")
)
 ")
 =")
 (padStart numStr 45 " ")
)
 "/")
 denStr)
)
)
 (newline)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (loop9 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop9 0)
)
)
)
 (let ((end12 (now)
)
)
 (let ((dur13 (quotient (- end12 start11)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur13)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
