;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (bernoulli n)
 (call/cc (lambda (ret1)
 (let ((a (_list)
)
)
 (begin (let ((m 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= m n)
 (begin (set! a (append a (_list (quotient 1 (+ m 1)
)
)
)
)
 (let ((j m)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (>= j 1)
 (begin (list-set! a (- j 1)
 (* j (- (list-ref a (- j 1)
)
 (list-ref a j)
)
)
)
 (set! j (- j 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! m (+ m 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (list-ref a 0)
)
)
)
)
)
)
)
)
(define (padStart s width pad)
 (call/cc (lambda (ret6)
 (let ((out s)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
 width)
 (begin (set! out (string-append pad out)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 out)
)
)
)
)
)
(call/cc (lambda (break10)
 (letrec ((loop9 (lambda (i)
 (if (< i 61)
 (begin (begin (let ((b (bernoulli i)
)
)
 (begin (if (not (equal? (num b)
 0)
)
 (begin (let ((numStr (to-str (num b)
)
)
)
 (begin (let ((denStr (to-str (denom b)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append "B(" (padStart (to-str i)
 2 " ")
)
 ")
 =")
 (padStart numStr 45 " ")
)
 "/")
 denStr)
)
)
 (newline)
)
)
)
)
)
 (quote ()
)
)
)
)
)
 (loop9 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop9 0)
)
)
)
