WARNING: importing already defined binding: equal?
WARNING: importing already defined binding: let-syntax
WARNING: importing already defined binding: letrec-syntax
WARNING: importing already defined binding: display
WARNING: importing already defined binding: write
WARNING: out of order define: (define (path u v) (call/cc (lambda (ret12) (let ((ui (- u 1))) (begin (let ((vi (- v 1))) (begin (if (equal? (cond ((string? (list-ref next ui)) (substring (list-ref next ui) vi (+ vi 1))) ((hash-table? (list-ref next ui)) (hash-table-ref (list-ref next ui) vi)) (else (list-ref (list-ref next ui) vi))) (- 0 1)) (begin (ret12 (_list))) (quote ())) (let ((p (_list u))) (begin (let ((cur ui)) (begin (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if (not (equal? cur vi)) (begin (set! cur (cond ((string? (list-ref next cur)) (substring (list-ref next cur) vi (+ vi 1))) ((hash-table? (list-ref next cur)) (hash-table-ref (list-ref next cur) vi)) (else (list-ref (list-ref next cur) vi)))) (set! p (append p (_list (+ cur 1)))) (loop13)) (quote ()))))) (loop13)))) (ret12 p))))))))))))
WARNING: out of order define: (define (pathStr p) (call/cc (lambda (ret15) (let ((s "")) (begin (let ((first #t)) (begin (let ((idx 0)) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (< idx (cond ((string? p) (string-length p)) ((hash-table? p) (hash-table-size p)) (else (length p)))) (begin (let ((x (list-ref p idx))) (begin (if (not first) (begin (set! s (string-append s " -> "))) (quote ())) (set! s (string-append s (to-str x))) (set! first #f) (set! idx (+ idx 1)))) (loop16)) (quote ()))))) (loop16)))) (ret15 s))))))))))
pair	dist	path
1 -> 2	-1	1 -> 3 -> 4 -> 2
1 -> 3	-2	1 -> 3
1 -> 4	0	1 -> 3 -> 4
2 -> 1	4	2 -> 1
2 -> 3	2	2 -> 1 -> 3
2 -> 4	4	2 -> 1 -> 3 -> 4
3 -> 1	5	3 -> 4 -> 2 -> 1
3 -> 2	1	3 -> 4 -> 2
3 -> 4	2	3 -> 4
4 -> 1	3	4 -> 2 -> 1
4 -> 2	-1	4 -> 2
4 -> 3	1	4 -> 2 -> 1 -> 3