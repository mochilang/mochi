;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start7 (now)
)
)
 (begin (define (commatize n)
 (call/cc (lambda (ret1)
 (let ((s (to-str n)
)
)
 (begin (let ((i (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 3)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> i 0)
 (begin (set! s (string-append (string-append (substring s 0 i)
 ",")
 (substring s i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (set! i (- i 3)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 s)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret4)
 (let ((data (_list (alist->hash-table (_list (cons "pm" 10)
 (cons "g1" 4)
 (cons "s1" 7)
 (cons "g2" 6)
 (cons "s2" 23)
 (cons "d" 16)
)
)
 (alist->hash-table (_list (cons "pm" 100)
 (cons "g1" 14)
 (cons "s1" 113)
 (cons "g2" 16)
 (cons "s2" 1831)
 (cons "d" 1718)
)
)
 (alist->hash-table (_list (cons "pm" 1000)
 (cons "g1" 14)
 (cons "s1" 113)
 (cons "g2" 16)
 (cons "s2" 1831)
 (cons "d" 1718)
)
)
 (alist->hash-table (_list (cons "pm" 10000)
 (cons "g1" 36)
 (cons "s1" 9551)
 (cons "g2" 38)
 (cons "s2" 30593)
 (cons "d" 21042)
)
)
 (alist->hash-table (_list (cons "pm" 100000)
 (cons "g1" 70)
 (cons "s1" 173359)
 (cons "g2" 72)
 (cons "s2" 31397)
 (cons "d" 141962)
)
)
 (alist->hash-table (_list (cons "pm" 1000000)
 (cons "g1" 100)
 (cons "s1" 396733)
 (cons "g2" 102)
 (cons "s2" 1444309)
 (cons "d" 1047576)
)
)
 (alist->hash-table (_list (cons "pm" 10000000)
 (cons "g1" 148)
 (cons "s1" 2010733)
 (cons "g2" 150)
 (cons "s2" 13626257)
 (cons "d" 11615524)
)
)
 (alist->hash-table (_list (cons "pm" 100000000)
 (cons "g1" 198)
 (cons "s1" 46006769)
 (cons "g2" 200)
 (cons "s2" 378043979)
 (cons "d" 332037210)
)
)
 (alist->hash-table (_list (cons "pm" 1000000000)
 (cons "g1" 276)
 (cons "s1" 649580171)
 (cons "g2" 278)
 (cons "s2" 4260928601)
 (cons "d" 3611348430)
)
)
 (alist->hash-table (_list (cons "pm" 10000000000)
 (cons "g1" 332)
 (cons "s1" 5893180121)
 (cons "g2" 334)
 (cons "s2" 30827138509)
 (cons "d" 24933958388)
)
)
 (alist->hash-table (_list (cons "pm" 100000000000)
 (cons "g1" 386)
 (cons "s1" 35238645587)
 (cons "g2" 388)
 (cons "s2" 156798792223)
 (cons "d" 121560146636)
)
)
)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((entry (car xs)
)
)
 (begin (let ((pm (commatize (cond ((string? entry)
 (substring entry "pm" (+ "pm" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "pm")
)
 (else (list-ref entry "pm")
)
)
)
)
)
 (begin (let ((line1 (string-append (string-append "Earliest difference > " pm)
 " between adjacent prime gap starting primes:")
)
)
 (begin (_display (to-str line1)
)
 (newline)
 (let ((line2 (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Gap " (to-str (cond ((string? entry)
 (substring entry "g1" (+ "g1" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "g1")
)
 (else (list-ref entry "g1")
)
)
)
)
 " starts at ")
 (commatize (cond ((string? entry)
 (substring entry "s1" (+ "s1" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "s1")
)
 (else (list-ref entry "s1")
)
)
)
)
 ", gap ")
 (to-str (cond ((string? entry)
 (substring entry "g2" (+ "g2" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "g2")
)
 (else (list-ref entry "g2")
)
)
)
)
 " starts at ")
 (commatize (cond ((string? entry)
 (substring entry "s2" (+ "s2" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "s2")
)
 (else (list-ref entry "s2")
)
)
)
)
 ", difference is ")
 (commatize (cond ((string? entry)
 (substring entry "d" (+ "d" 1)
)
)
 ((hash-table? entry)
 (hash-table-ref entry "d")
)
 (else (list-ref entry "d")
)
)
)
)
 ".")
)
)
 (begin (_display (to-str line2)
)
 (newline)
 (_display (to-str "")
)
 (newline)
)
)
)
)
)
)
)
)
 (loop5 (cdr xs)
)
)
)
)
)
)
 (loop5 data)
)
)
)
)
)
)
)
)
 (main)
 (let ((end8 (now)
)
)
 (let ((dur9 (quotient (- end8 start7)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur9)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
