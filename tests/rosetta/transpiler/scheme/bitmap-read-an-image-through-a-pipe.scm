;; Generated on 2025-07-27 01:08 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start10 (now)
)
)
 (begin (define (parseIntStr str)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (let ((neg #f)
)
 (begin (if (and (> (cond ((string? str)
 (string-length str)
)
 ((hash-table? str)
 (hash-table-size str)
)
 (else (length str)
)
)
 0)
 (string=? (substring str 0 1)
 "-")
)
 (begin (set! neg #t)
 (set! i 1)
)
 (quote ()
)
)
 (let ((n 0)
)
 (begin (let ((digits (alist->hash-table (_list (cons "0" 0)
 (cons "1" 1)
 (cons "2" 2)
 (cons "3" 3)
 (cons "4" 4)
 (cons "5" 5)
 (cons "6" 6)
 (cons "7" 7)
 (cons "8" 8)
 (cons "9" 9)
)
)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? str)
 (string-length str)
)
 ((hash-table? str)
 (hash-table-size str)
)
 (else (length str)
)
)
)
 (begin (set! n (+ (* n 10)
 (cond ((string? digits)
 (substring digits (substring str i (+ i 1)
)
 (+ (substring str i (+ i 1)
)
 1)
)
)
 ((hash-table? digits)
 (hash-table-ref digits (substring str i (+ i 1)
)
)
)
 (else (list-ref digits (substring str i (+ i 1)
)
)
)
)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (if neg (begin (set! n (- n)
)
)
 (quote ()
)
)
 (ret1 n)
)
)
)
)
)
)
)
)
)
)
)
 (define (splitWs s)
 (call/cc (lambda (ret4)
 (let ((parts (_list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (or (or (string=? ch " ")
 (string=? ch "\n")
)
 (string=? ch "\t")
)
 (string=? ch "\r")
)
 (begin (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! parts (append parts (_list cur)
)
)
 (set! cur "")
)
 (quote ()
)
)
)
 (begin (set! cur (string-append cur ch)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! parts (append parts (_list cur)
)
)
)
 (quote ()
)
)
 (ret4 parts)
)
)
)
)
)
)
)
)
)
 (define (parsePpm data)
 (call/cc (lambda (ret7)
 (let ((toks (splitWs data)
)
)
 (begin (if (< (cond ((string? toks)
 (string-length toks)
)
 ((hash-table? toks)
 (hash-table-size toks)
)
 (else (length toks)
)
)
 4)
 (begin (ret7 (alist->hash-table (_list (cons "err" #t)
)
)
)
)
 (quote ()
)
)
 (let ((magic (cond ((string? toks)
 (substring toks 0 (+ 0 1)
)
)
 ((hash-table? toks)
 (hash-table-ref toks 0)
)
 (else (list-ref toks 0)
)
)
)
)
 (begin (let ((w (parseIntStr (cond ((string? toks)
 (substring toks 1 (+ 1 1)
)
)
 ((hash-table? toks)
 (hash-table-ref toks 1)
)
 (else (list-ref toks 1)
)
)
)
)
)
 (begin (let ((h (parseIntStr (cond ((string? toks)
 (substring toks 2 (+ 2 1)
)
)
 ((hash-table? toks)
 (hash-table-ref toks 2)
)
 (else (list-ref toks 2)
)
)
)
)
)
 (begin (let ((maxv (parseIntStr (cond ((string? toks)
 (substring toks 3 (+ 3 1)
)
)
 ((hash-table? toks)
 (hash-table-ref toks 3)
)
 (else (list-ref toks 3)
)
)
)
)
)
 (begin (let ((px (_list)
)
)
 (begin (let ((i 4)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? toks)
 (string-length toks)
)
 ((hash-table? toks)
 (hash-table-size toks)
)
 (else (length toks)
)
)
)
 (begin (set! px (append px (_list (parseIntStr (cond ((string? toks)
 (substring toks i (+ i 1)
)
)
 ((hash-table? toks)
 (hash-table-ref toks i)
)
 (else (list-ref toks i)
)
)
)
)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 (alist->hash-table (_list (cons "magic" magic)
 (cons "w" w)
 (cons "h" h)
 (cons "max" maxv)
 (cons "px" px)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define ppmData "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n")
 (define img (parsePpm ppmData)
)
 (display (to-str (string-append (string-append (string-append "width=" (to-str (hash-table-ref img "w")
)
)
 " height=")
 (to-str (hash-table-ref img "h")
)
)
)
)
 (newline)
 (let ((end11 (now)
)
)
 (let ((dur12 (quotient (- end11 start10)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur12)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
