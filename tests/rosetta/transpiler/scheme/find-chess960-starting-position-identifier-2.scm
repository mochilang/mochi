;; Generated on 2025-07-30 21:05 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start21 (now)
)
)
 (begin (define g2lMap (alist->hash-table (_list (cons "♜" "R")
 (cons "♞" "N")
 (cons "♝" "B")
 (cons "♛" "Q")
 (cons "♚" "K")
 (cons "♖" "R")
 (cons "♘" "N")
 (cons "♗" "B")
 (cons "♕" "Q")
 (cons "♔" "K")
)
)
)
 (define names (alist->hash-table (_list (cons "R" "rook")
 (cons "N" "knight")
 (cons "B" "bishop")
 (cons "Q" "queen")
 (cons "K" "king")
)
)
)
 (define ntable (alist->hash-table (_list (cons "01" 0)
 (cons "02" 1)
 (cons "03" 2)
 (cons "04" 3)
 (cons "12" 4)
 (cons "13" 5)
 (cons "14" 6)
 (cons "23" 7)
 (cons "24" 8)
 (cons "34" 9)
)
)
)
 (define (indexOf s sub)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (_le i (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 (cond ((string? sub)
 (string-length sub)
)
 ((hash-table? sub)
 (hash-table-size sub)
)
 (else (length sub)
)
)
)
)
 (begin (if (string=? (substring s i (+ i (cond ((string? sub)
 (string-length sub)
)
 ((hash-table? sub)
 (hash-table-size sub)
)
 (else (length sub)
)
)
)
)
 sub)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
 (define (removeChar s ch)
 (call/cc (lambda (ret4)
 (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((c (substring s i (+ i 1)
)
)
)
 (begin (if (not (string=? c ch)
)
 (begin (set! res (string-append res c)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 res)
)
)
)
)
)
)
)
 (define (g2l pieces)
 (call/cc (lambda (ret7)
 (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? pieces)
 (string-length pieces)
)
 ((hash-table? pieces)
 (hash-table-size pieces)
)
 (else (length pieces)
)
)
)
 (begin (let ((ch (substring pieces i (+ i 1)
)
)
)
 (begin (set! res (string-append res (hash-table-ref/default g2lMap ch (quote ()
)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 res)
)
)
)
)
)
)
)
 (define (countChar s ch)
 (call/cc (lambda (ret10)
 (let ((c 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (set! c (+ c 1)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 c)
)
)
)
)
)
)
)
 (define (spid pieces)
 (call/cc (lambda (ret13)
 (begin (set! pieces (g2l pieces)
)
 (if (not (equal? (cond ((string? pieces)
 (string-length pieces)
)
 ((hash-table? pieces)
 (hash-table-size pieces)
)
 (else (length pieces)
)
)
 8)
)
 (begin (ret13 (- 1)
)
)
 (quote ()
)
)
 (call/cc (lambda (break15)
 (letrec ((loop14 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((one (car xs)
)
)
 (begin (if (not (equal? (countChar pieces one)
 1)
)
 (begin (ret13 (- 1)
)
)
 (quote ()
)
)
)
)
 (loop14 (cdr xs)
)
)
)
)
)
)
 (loop14 (_list "K" "Q")
)
)
)
)
 (call/cc (lambda (break17)
 (letrec ((loop16 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((two (car xs)
)
)
 (begin (if (not (equal? (countChar pieces two)
 2)
)
 (begin (ret13 (- 1)
)
)
 (quote ()
)
)
)
)
 (loop16 (cdr xs)
)
)
)
)
)
)
 (loop16 (_list "R" "N" "B")
)
)
)
)
 (let ((r1 (indexOf pieces "R")
)
)
 (begin (let ((r2 (_add (_add (indexOf (substring pieces (_add r1 1)
 (cond ((string? pieces)
 (string-length pieces)
)
 ((hash-table? pieces)
 (hash-table-size pieces)
)
 (else (length pieces)
)
)
)
 "R")
 r1)
 1)
)
)
 (begin (let ((k (indexOf pieces "K")
)
)
 (begin (if (or (_lt k r1)
 (_gt k r2)
)
 (begin (ret13 (- 1)
)
)
 (quote ()
)
)
 (let ((b1 (indexOf pieces "B")
)
)
 (begin (let ((b2 (_add (_add (indexOf (substring pieces (_add b1 1)
 (cond ((string? pieces)
 (string-length pieces)
)
 ((hash-table? pieces)
 (hash-table-size pieces)
)
 (else (length pieces)
)
)
)
 "B")
 b1)
 1)
)
)
 (begin (if (equal? (fmod (- b2 b1)
 2)
 0)
 (begin (ret13 (- 1)
)
)
 (quote ()
)
)
 (let ((piecesN (removeChar (removeChar pieces "Q")
 "B")
)
)
 (begin (let ((n1 (indexOf piecesN "N")
)
)
 (begin (let ((n2 (_add (_add (indexOf (substring piecesN (_add n1 1)
 (cond ((string? piecesN)
 (string-length piecesN)
)
 ((hash-table? piecesN)
 (hash-table-size piecesN)
)
 (else (length piecesN)
)
)
)
 "N")
 n1)
 1)
)
)
 (begin (let ((N (hash-table-ref/default ntable (string-append (to-str n1)
 (to-str n2)
)
 (quote ()
)
)
)
)
 (begin (let ((piecesQ (removeChar pieces "B")
)
)
 (begin (let ((Q (indexOf piecesQ "Q")
)
)
 (begin (let ((D (indexOf "0246" (to-str b1)
)
)
)
 (begin (let ((L (indexOf "1357" (to-str b2)
)
)
)
 (begin (if (equal? D (- 0 1)
)
 (begin (set! D (indexOf "0246" (to-str b2)
)
)
 (set! L (indexOf "1357" (to-str b1)
)
)
)
 (quote ()
)
)
 (ret13 (_add (_add (_add (* 96 N)
 (* 16 Q)
)
 (* 4 D)
)
 L)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret18)
 (call/cc (lambda (break20)
 (letrec ((loop19 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((pieces (car xs)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append pieces " or ")
 (g2l pieces)
)
 " has SP-ID of ")
 (to-str (spid pieces)
)
)
)
)
 (newline)
)
)
 (loop19 (cdr xs)
)
)
)
)
)
)
 (loop19 (_list "♕♘♖♗♗♘♔♖" "♖♘♗♕♔♗♘♖" "♖♕♘♗♗♔♖♘" "♖♘♕♗♗♔♖♘")
)
)
)
)
)
)
)
 (main)
 (let ((end22 (now)
)
)
 (let ((dur23 (quotient (- end22 start21)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur23)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
