;; Generated on 2025-07-27 22:52 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi io))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(let ((start12 (now)
)
)
 (begin (define (indexOf s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
 (define (shuffle xs)
 (call/cc (lambda (ret4)
 (let ((arr xs)
)
 (begin (let ((i (- (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> i 0)
 (begin (let ((j (modulo (now)
 (+ i 1)
)
)
)
 (begin (let ((tmp (list-ref arr i)
)
)
 (begin (list-set! arr i (list-ref arr j)
)
 (list-set! arr j tmp)
 (set! i (- i 1)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 arr)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret7)
 (begin (_display (to-str "Cows and Bulls")
)
 (newline)
 (_display (to-str "Guess four digit number of unique digits in the range 1 to 9.")
)
 (newline)
 (_display (to-str "A correct digit but not in the correct place is a cow.")
)
 (newline)
 (_display (to-str "A correct digit in the correct place is a bull.")
)
 (newline)
 (let ((digits (_list "1" "2" "3" "4" "5" "6" "7" "8" "9")
)
)
 (begin (set! digits (shuffle digits)
)
 (let ((pat (string-append (string-append (string-append (list-ref digits 0)
 (list-ref digits 1)
)
 (list-ref digits 2)
)
 (list-ref digits 3)
)
)
)
 (begin (let ((valid "123456789")
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if #t (begin (_display (to-str "Guess: ")
)
 (newline)
 (let ((guess (_input)
)
)
 (begin (if (not (equal? (cond ((string? guess)
 (string-length guess)
)
 ((hash-table? guess)
 (hash-table-size guess)
)
 (else (length guess)
)
)
 4)
)
 (begin (_display (to-str "Please guess a four digit number.")
)
 (newline)
 (loop8)
)
 (quote ()
)
)
 (let ((cows 0)
)
 (begin (let ((bulls 0)
)
 (begin (let ((seen "")
)
 (begin (let ((i 0)
)
 (begin (let ((malformed #f)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i 4)
 (begin (let ((cg (substring guess i (+ i 1)
)
)
)
 (begin (if (not (equal? (indexOf seen cg)
 (- 1)
)
)
 (begin (_display (to-str (string-append "Repeated digit: " cg)
)
)
 (newline)
 (set! malformed #t)
 (break11 (quote ()
)
)
)
 (quote ()
)
)
 (set! seen (string-append seen cg)
)
 (let ((pos (indexOf pat cg)
)
)
 (begin (if (equal? pos (- 1)
)
 (begin (if (equal? (indexOf valid cg)
 (- 1)
)
 (begin (_display (to-str (string-append "Invalid digit: " cg)
)
)
 (newline)
 (set! malformed #t)
 (break11 (quote ()
)
)
)
 (quote ()
)
)
)
 (begin (if (equal? pos i)
 (begin (set! bulls (+ bulls 1)
)
)
 (begin (set! cows (+ cows 1)
)
)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (if malformed (begin (loop8)
)
 (quote ()
)
)
 (_display (to-str (string-append (string-append (string-append "Cows: " (to-str cows)
)
 ", bulls: ")
 (to-str bulls)
)
)
)
 (newline)
 (if (equal? bulls 4)
 (begin (_display (to-str "You got it.")
)
 (newline)
 (break9 (quote ()
)
)
)
 (quote ()
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end13 (now)
)
)
 (let ((dur14 (quotient (- end13 start12)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur14)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
