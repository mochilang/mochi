;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start21 (now)
)
)
 (begin (define (fields s)
 (call/cc (lambda (ret1)
 (let ((words (list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (or (string=? ch " ")
 (string=? ch "\n")
)
 (string=? ch "\t")
)
 (begin (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! words (append words (list cur)
)
)
 (set! cur "")
)
 (quote nil)
)
)
 (begin (set! cur (string-append cur ch)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (if (> (cond ((string? cur)
 (string-length cur)
)
 ((hash-table? cur)
 (hash-table-size cur)
)
 (else (length cur)
)
)
 0)
 (begin (set! words (append words (list cur)
)
)
)
 (quote nil)
)
 (ret1 words)
)
)
)
)
)
)
)
)
)
 (define (join xs sep)
 (call/cc (lambda (ret4)
 (let ((res "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (if (> i 0)
 (begin (set! res (string-append res sep)
)
)
 (quote nil)
)
 (set! res (string-append res (list-ref xs i)
)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 res)
)
)
)
)
)
)
)
 (define (numberName n)
 (call/cc (lambda (ret7)
 (let ((small (list "no" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten" "eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen")
)
)
 (begin (let ((tens (list "ones" "ten" "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety")
)
)
 (begin (if (< n 0)
 (begin (ret7 "")
)
 (quote nil)
)
 (if (< n 20)
 (begin (ret7 (list-ref small n)
)
)
 (quote nil)
)
 (if (< n 100)
 (begin (let ((t (list-ref tens (let ((v8 (quotient n 10)
)
)
 (cond ((string? v8)
 (inexact->exact (string->number v8)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact v8)
)
)
)
)
)
)
 (begin (let ((s (modulo n 10)
)
)
 (begin (if (> s 0)
 (begin (set! t (string-append (string-append t " ")
 (list-ref small s)
)
)
)
 (quote nil)
)
 (ret7 t)
)
)
)
)
)
 (quote nil)
)
 (ret7 "")
)
)
)
)
)
)
)
 (define (pluralizeFirst s n)
 (call/cc (lambda (ret9)
 (begin (if (equal? n 1)
 (begin (ret9 s)
)
 (quote nil)
)
 (let ((w (fields s)
)
)
 (begin (if (> (cond ((string? w)
 (string-length w)
)
 ((hash-table? w)
 (hash-table-size w)
)
 (else (length w)
)
)
 0)
 (begin (list-set! w 0 (string-append (list-ref w 0)
 "s")
)
)
 (quote nil)
)
 (ret9 (join w " ")
)
)
)
)
)
)
)
 (define (randInt seed n)
 (call/cc (lambda (ret10)
 (let ((next (modulo (+ (* seed 1664525)
 1013904223)
 2147483647)
)
)
 (begin (ret10 (modulo next n)
)
)
)
)
)
)
 (define (slur p d)
 (call/cc (lambda (ret11)
 (begin (if (<= (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
 2)
 (begin (ret11 p)
)
 (quote nil)
)
 (let ((a (list)
)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i (- (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
 1)
)
 (begin (set! a (append a (list (substring p i (+ i 1)
)
)
)
)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote nil)
)
)
)
)
 (loop12)
)
)
)
 (let ((idx (- (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 1)
)
)
 (begin (let ((seed d)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (>= idx 1)
 (begin (set! seed (modulo (+ (* seed 1664525)
 1013904223)
 2147483647)
)
 (if (>= (modulo seed 100)
 d)
 (begin (let ((j (modulo seed (+ idx 1)
)
)
)
 (begin (let ((tmp (list-ref a idx)
)
)
 (begin (list-set! a idx (list-ref a j)
)
 (list-set! a j tmp)
)
)
)
)
)
 (quote nil)
)
 (set! idx (- idx 1)
)
 (loop14)
)
 (quote nil)
)
)
)
)
 (loop14)
)
)
)
 (let ((s (substring p 0 1)
)
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< k (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
 (begin (set! s (string-append s (list-ref a k)
)
)
 (set! k (+ k 1)
)
 (loop16)
)
 (quote nil)
)
)
)
)
 (loop16)
)
)
)
 (set! s (string-append s (substring p (- (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
 1)
 (cond ((string? p)
 (string-length p)
)
 ((hash-table? p)
 (hash-table-size p)
)
 (else (length p)
)
)
)
)
)
 (let ((w (fields s)
)
)
 (begin (ret11 (join w " ")
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret18)
 (let ((i 99)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (> i 0)
 (begin (display (to-str (string-append (string-append (string-append (string-append (slur (numberName i)
 i)
 " ")
 (pluralizeFirst (slur "bottle of" i)
 i)
)
 " ")
 (slur "beer on the wall" i)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (slur (numberName i)
 i)
 " ")
 (pluralizeFirst (slur "bottle of" i)
 i)
)
 " ")
 (slur "beer" i)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (slur "take one" i)
 " ")
 (slur "down" i)
)
 " ")
 (slur "pass it around" i)
)
)
)
 (newline)
 (display (to-str (string-append (string-append (string-append (string-append (slur (numberName (- i 1)
)
 i)
 " ")
 (pluralizeFirst (slur "bottle of" i)
 (- i 1)
)
)
 " ")
 (slur "beer on the wall" i)
)
)
)
 (newline)
 (set! i (- i 1)
)
 (loop19)
)
 (quote nil)
)
)
)
)
 (loop19)
)
)
)
)
)
)
)
)
 (main)
 (let ((end22 (now)
)
)
 (let ((dur23 (quotient (- end22 start21)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur23)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
