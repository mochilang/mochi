;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start22 (now)
)
)
 (begin (define OP_NUM 0)
 (define OP_BIN 1)
 (define OP_ADD 1)
 (define OP_SUB 2)
 (define OP_MUL 3)
 (define OP_DIV 4)
 (define (binEval op l r)
 (call/cc (lambda (ret1)
 (let ((lv (exprEval l)
)
)
 (begin (let ((rv (exprEval r)
)
)
 (begin (if (equal? op OP_ADD)
 (begin (ret1 (alist->hash-table (list (cons "num" (+ (* (hash-table-ref lv "num")
 (hash-table-ref rv "denom")
)
 (* (hash-table-ref lv "denom")
 (hash-table-ref rv "num")
)
)
)
 (cons "denom" (* (hash-table-ref lv "denom")
 (hash-table-ref rv "denom")
)
)
)
)
)
)
 (quote nil)
)
 (if (equal? op OP_SUB)
 (begin (ret1 (alist->hash-table (list (cons "num" (- (* (hash-table-ref lv "num")
 (hash-table-ref rv "denom")
)
 (* (hash-table-ref lv "denom")
 (hash-table-ref rv "num")
)
)
)
 (cons "denom" (* (hash-table-ref lv "denom")
 (hash-table-ref rv "denom")
)
)
)
)
)
)
 (quote nil)
)
 (if (equal? op OP_MUL)
 (begin (ret1 (alist->hash-table (list (cons "num" (* (hash-table-ref lv "num")
 (hash-table-ref rv "num")
)
)
 (cons "denom" (* (hash-table-ref lv "denom")
 (hash-table-ref rv "denom")
)
)
)
)
)
)
 (quote nil)
)
 (ret1 (alist->hash-table (list (cons "num" (* (hash-table-ref lv "num")
 (hash-table-ref rv "denom")
)
)
 (cons "denom" (* (hash-table-ref lv "denom")
 (hash-table-ref rv "num")
)
)
)
)
)
)
)
)
)
)
)
)
 (define (binString op l r)
 (call/cc (lambda (ret2)
 (let ((ls (exprString l)
)
)
 (begin (let ((rs (exprString r)
)
)
 (begin (let ((opstr "")
)
 (begin (if (equal? op OP_ADD)
 (begin (set! opstr " + ")
)
 (if (equal? op OP_SUB)
 (begin (set! opstr " - ")
)
 (if (equal? op OP_MUL)
 (begin (set! opstr " * ")
)
 (begin (set! opstr " / ")
)
)
)
)
 (ret2 (string-append (string-append (string-append (string-append "(" ls)
 opstr)
 rs)
 ")
")
)
)
)
)
)
)
)
)
)
)
 (define (newNum n)
 (call/cc (lambda (ret3)
 (ret3 (alist->hash-table (list (cons "op" OP_NUM)
 (cons "value" (alist->hash-table (list (cons "num" n)
 (cons "denom" 1)
)
)
)
)
)
)
)
)
)
 (define (exprEval x)
 (call/cc (lambda (ret4)
 (ret4 (let ((match5 x)
)
 (if (equal? (hash-table-ref match5 "op")
 OP_NUM)
 (let ((v (hash-table-ref match5 "value")
)
)
 v)
 (if (equal? (hash-table-ref match5 "op")
 OP_BIN)
 (let ((op (hash-table-ref match5 "op")
)
 (l (hash-table-ref match5 "left")
)
 (r (hash-table-ref match5 "right")
)
)
 (binEval op l r)
)
 (quote nil)
)
)
)
)
)
)
)
 (define (exprString x)
 (call/cc (lambda (ret6)
 (ret6 (let ((match7 x)
)
 (if (equal? (hash-table-ref match7 "op")
 OP_NUM)
 (let ((v (hash-table-ref match7 "value")
)
)
 (to-str (hash-table-ref v "num")
)
)
 (if (equal? (hash-table-ref match7 "op")
 OP_BIN)
 (let ((op (hash-table-ref match7 "op")
)
 (l (hash-table-ref match7 "left")
)
 (r (hash-table-ref match7 "right")
)
)
 (binString op l r)
)
 (quote nil)
)
)
)
)
)
)
)
 (define n_cards 4)
 (define goal 24)
 (define digit_range 9)
 (define (solve xs)
 (call/cc (lambda (ret8)
 (begin (if (equal? (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
 1)
 (begin (let ((f (exprEval (list-ref xs 0)
)
)
)
 (begin (if (and (not (equal? (hash-table-ref f "denom")
 0)
)
 (equal? (hash-table-ref f "num")
 (* (hash-table-ref f "denom")
 goal)
)
)
 (begin (display (to-str (exprString (list-ref xs 0)
)
)
)
 (newline)
 (ret8 #t)
)
 (quote nil)
)
 (ret8 #f)
)
)
)
 (quote nil)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (let ((j (+ i 1)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< j (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (let ((rest (list)
)
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< k (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (if (and (not (equal? k i)
)
 (not (equal? k j)
)
)
 (begin (set! rest (append rest (list (list-ref xs k)
)
)
)
)
 (quote nil)
)
 (set! k (+ k 1)
)
 (loop13)
)
 (quote nil)
)
)
)
)
 (loop13)
)
)
)
 (let ((a (list-ref xs i)
)
)
 (begin (let ((b (list-ref xs j)
)
)
 (begin (let ((node (alist->hash-table (list (cons "op" OP_BIN)
 (cons "op" OP_ADD)
 (cons "left" a)
 (cons "right" b)
)
)
)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((op (car xs)
)
)
 (begin (set! node (alist->hash-table (list (cons "op" OP_BIN)
 (cons "op" op)
 (cons "left" a)
 (cons "right" b)
)
)
)
 (if (solve (append rest (list node)
)
)
 (begin (ret8 #t)
)
 (quote nil)
)
)
)
 (loop15 (cdr xs)
)
)
)
)
)
)
 (loop15 (list OP_ADD OP_SUB OP_MUL OP_DIV)
)
)
)
)
 (set! node (alist->hash-table (list (cons "op" OP_BIN)
 (cons "op" OP_SUB)
 (cons "left" b)
 (cons "right" a)
)
)
)
 (if (solve (append rest (list node)
)
)
 (begin (ret8 #t)
)
 (quote nil)
)
 (set! node (alist->hash-table (list (cons "op" OP_BIN)
 (cons "op" OP_DIV)
 (cons "left" b)
 (cons "right" a)
)
)
)
 (if (solve (append rest (list node)
)
)
 (begin (ret8 #t)
)
 (quote nil)
)
 (set! j (+ j 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (ret8 #f)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret17)
 (let ((iter 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< iter 10)
 (begin (let ((cards (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< i n_cards)
 (begin (let ((n (+ (modulo (now)
 (- digit_range 1)
)
 1)
)
)
 (begin (set! cards (append cards (list (newNum n)
)
)
)
 (display (to-str (string-append " " (to-str n)
)
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
 (loop20)
)
 (quote nil)
)
)
)
)
 (loop20)
)
)
)
 (display (to-str ":  ")
)
 (newline)
 (if (not (solve cards)
)
 (begin (display (to-str "No solution")
)
 (newline)
)
 (quote nil)
)
 (set! iter (+ iter 1)
)
)
)
)
)
 (loop18)
)
 (quote nil)
)
)
)
)
 (loop18)
)
)
)
)
)
)
)
)
 (main)
 (let ((end23 (now)
)
)
 (let ((dur24 (quotient (- end23 start22)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur24)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
