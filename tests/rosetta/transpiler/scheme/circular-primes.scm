;; Generated on 2025-08-02 20:54 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start18 (now))) (begin (define (isPrime n) (call/cc (lambda (ret1) (begin (if (< n 2) (begin (ret1 #f)) (quote ())) (if (equal? (modulo n 2) 0) (begin (ret1 (equal? n 2))) (quote ())) (if (equal? (modulo n 3) 0) (begin (ret1 (equal? n 3))) (quote ())) (let ((d 5)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (_le (* d d) n) (begin (if (equal? (modulo n d) 0) (begin (ret1 #f)) (quote ())) (set! d (+ d 2)) (if (equal? (modulo n d) 0) (begin (ret1 #f)) (quote ())) (set! d (+ d 4)) (loop2)) (quote ()))))) (loop2)))) (ret1 #t))))))) (define circs (_list)) (define (isCircular n) (call/cc (lambda (ret4) (let ((nn n)) (begin (let ((pow 1)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (> nn 0) (begin (set! pow (* pow 10)) (set! nn (quotient nn 10)) (loop5)) (quote ()))))) (loop5)))) (set! nn n) (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if #t (begin (set! nn (* nn 10)) (let ((f (quotient nn pow))) (begin (set! nn (_add nn (* f (- 1 pow)))) (if (equal? nn n) (begin (break8 (quote ()))) (quote ())) (if (not (isPrime nn)) (begin (ret4 #f)) (quote ())))) (loop7)) (quote ()))))) (loop7)))) (ret4 #t)))))))) (_display (to-str "The first 19 circular primes are:")) (newline) (define digits (_list 1 3 7 9)) (define q (_list 1 2 3 5 7 9)) (define fq (_list 1 2 3 5 7 9)) (define count 0) (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if #t (begin (let ((f (list-ref q 0))) (begin (let ((fd (list-ref fq 0))) (begin (if (and (isPrime f) (isCircular f)) (begin (set! circs (append circs (_list f))) (set! count (+ count 1)) (if (equal? count 19) (begin (break10 (quote ()))) (quote ()))) (quote ())) (set! q (take (drop q 1) (- (length q) 1))) (set! fq (take (drop fq 1) (- (length fq) 1))) (if (and (not (equal? f 2)) (not (equal? f 5))) (begin (call/cc (lambda (break12) (letrec ((loop11 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((d (car xs))) (begin (set! q (append q (_list (_add (* f 10) d)))) (set! fq (append fq (_list fd))))) (loop11 (cdr xs))))))) (loop11 digits))))) (quote ())))))) (loop9)) (quote ()))))) (loop9)))) (define (showList xs) (call/cc (lambda (ret13) (let ((out "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< i (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs)))) (begin (set! out (string-append out (to-str (list-ref xs i)))) (if (_lt i (- (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs))) 1)) (begin (set! out (string-append out ", "))) (quote ())) (set! i (+ i 1)) (loop14)) (quote ()))))) (loop14)))) (ret13 (string-append out "]"))))))))) (_display (to-str (showList circs))) (newline) (_display (to-str "\nThe next 4 circular primes, in repunit format, are:")) (newline) (_display (to-str "[R(19) R(23) R(317) R(1031)]")) (newline) (_display (to-str "\nThe following repunits are probably circular primes:")) (newline) (call/cc (lambda (break17) (letrec ((loop16 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((i (car xs))) (begin (_display (to-str (string-append (string-append "R(" (to-str i)) ") : true"))) (newline))) (loop16 (cdr xs))))))) (loop16 (_list 5003 9887 15073 25031 35317 49081))))) (let ((end19 (now))) (let ((dur20 (quotient (- end19 start18) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur20) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
