;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start11 (now)
)
)
 (begin (define doors (list)
)
 (call/cc (lambda (break2)
 (letrec ((loop1 (lambda (i)
 (if (< i 100)
 (begin (begin (set! doors (append doors (list #f)
)
)
)
 (loop1 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop1 0)
)
)
)
 (call/cc (lambda (break4)
 (letrec ((loop3 (lambda (pass)
 (if (< pass 101)
 (begin (begin (let ((idx (- pass 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< idx 100)
 (begin (list-set! doors idx (not (list-ref doors idx)
)
)
 (set! idx (+ idx pass)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
)
)
)
 (loop3 (+ pass 1)
)
)
 (quote nil)
)
)
)
)
 (loop3 1)
)
)
)
 (call/cc (lambda (break8)
 (letrec ((loop7 (lambda (row)
 (if (< row 10)
 (begin (begin (let ((line "")
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda (col)
 (if (< col 10)
 (begin (begin (let ((idx (+ (* row 10)
 col)
)
)
 (begin (if (list-ref doors idx)
 (begin (set! line (string-append line "1")
)
)
 (begin (set! line (string-append line "0")
)
)
)
 (if (< col 9)
 (begin (set! line (string-append line " ")
)
)
 (quote nil)
)
)
)
)
 (loop9 (+ col 1)
)
)
 (quote nil)
)
)
)
)
 (loop9 0)
)
)
)
 (display (to-str line)
)
 (newline)
)
)
)
 (loop7 (+ row 1)
)
)
 (quote nil)
)
)
)
)
 (loop7 0)
)
)
)
 (let ((end12 (now)
)
)
 (let ((dur13 (quotient (- end12 start11)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur13)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
