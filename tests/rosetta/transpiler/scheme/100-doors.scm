;; Generated on 2025-07-22 21:48 +0700
(import (only (scheme base) call/cc list-ref list-set! list))
(import (scheme time))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define doors (list)
)
(call/cc (lambda (break8)
 (letrec ((loop7 (lambda (i)
 (if (< i 100)
 (begin (begin (set! doors (append doors (list #f)
)
)
)
 (loop7 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop7 0)
)
)
)
(call/cc (lambda (break10)
 (letrec ((loop9 (lambda (pass)
 (if (< pass 101)
 (begin (begin (let ((idx (- pass 1)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< idx 100)
 (begin (list-set! doors idx (not (list-ref doors idx)
)
)
 (set! idx (+ idx pass)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
)
)
)
 (loop9 (+ pass 1)
)
)
 (quote nil)
)
)
)
)
 (loop9 1)
)
)
)
(call/cc (lambda (break14)
 (letrec ((loop13 (lambda (row)
 (if (< row 10)
 (begin (begin (let ((line "")
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda (col)
 (if (< col 10)
 (begin (begin (let ((idx (+ (* row 10)
 col)
)
)
 (begin (if (list-ref doors idx)
 (begin (set! line (string-append line "1")
)
)
 (begin (set! line (string-append line "0")
)
)
)
 (if (< col 9)
 (begin (set! line (string-append line " ")
)
)
 (quote nil)
)
)
)
)
 (loop15 (+ col 1)
)
)
 (quote nil)
)
)
)
)
 (loop15 0)
)
)
)
 (display (to-str line)
)
 (newline)
)
)
)
 (loop13 (+ row 1)
)
)
 (quote nil)
)
)
)
)
 (loop13 0)
)
)
)
