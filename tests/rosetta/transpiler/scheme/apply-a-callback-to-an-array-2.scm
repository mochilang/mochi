;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (each xs f)
 (call/cc (lambda (ret1)
 (call/cc (lambda (break3)
 (letrec ((loop2 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((x (car xs)
)
)
 (begin (f x)
)
)
 (loop2 (cdr xs)
)
)
)
)
)
)
 (loop2 xs)
)
)
)
)
)
)
(define (Map xs f)
 (call/cc (lambda (ret4)
 (let ((r (list)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((x (car xs)
)
)
 (begin (set! r (append r (list (f x)
)
)
)
)
)
 (loop5 (cdr xs)
)
)
)
)
)
)
 (loop5 xs)
)
)
)
 (ret4 r)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret7)
 (let ((s (list 1 2 3 4 5)
)
)
 (begin (each s (lambda (i)
 (begin (display (to-str (to-str (* i i)
)
)
)
 (newline)
)
)
)
 (display (to-str (to-str (Map s (lambda (i)
 (* i i)
)
)
)
)
)
 (newline)
)
)
)
)
)
(main)
