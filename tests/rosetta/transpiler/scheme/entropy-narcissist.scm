;; Generated on 2025-07-28 10:28 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (log2 x)
 (call/cc (lambda (ret1)
 (let ((k 0.0)
)
 (begin (let ((v x)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (>= v 2.0)
 (begin (set! v (/ v 2.0)
)
 (set! k (+ k 1.0)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< v 1.0)
 (begin (set! v (* v 2.0)
)
 (set! k (- k 1.0)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (let ((z (/ (- v 1.0)
 (+ v 1.0)
)
)
)
 (begin (let ((zpow z)
)
 (begin (let ((sum z)
)
 (begin (let ((i 3)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (<= i 9)
 (begin (set! zpow (* (* zpow z)
 z)
)
 (set! sum (_add sum (/ zpow (+ 0.0 i)
)
)
)
 (set! i (+ i 2)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (let ((ln2 0.6931471805599453)
)
 (begin (ret1 (_add k (/ (* 2.0 sum)
 ln2)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (entropy data)
 (call/cc (lambda (ret8)
 (begin (if (string=? data "")
 (begin (ret8 0.0)
)
 (quote ()
)
)
 (let ((counts (alist->hash-table (_list)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i (cond ((string? data)
 (string-length data)
)
 ((hash-table? data)
 (hash-table-size data)
)
 (else (length data)
)
)
)
 (begin (let ((ch (substring data i (+ i 1)
)
)
)
 (begin (if (cond ((string? counts)
 (if (string-contains counts ch)
 #t #f)
)
 ((hash-table? counts)
 (if (hash-table-exists? counts ch)
 #t #f)
)
 (else (if (member ch counts)
 #t #f)
)
)
 (begin (hash-table-set! counts ch (+ (hash-table-ref/default counts ch (quote ()
)
)
 1)
)
)
 (begin (hash-table-set! counts ch 1)
)
)
 (set! i (+ i 1)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (let ((e 0.0)
)
 (begin (let ((l (+ 0.0 (cond ((string? data)
 (string-length data)
)
 ((hash-table? data)
 (hash-table-size data)
)
 (else (length data)
)
)
)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((ch (car xs)
)
)
 (begin (let ((px (/ (+ 0.0 (hash-table-ref/default counts ch (quote ()
)
)
)
 l)
)
)
 (begin (if (> px 0.0)
 (begin (set! e (- e (* px (log2 px)
)
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 (hash-table-keys counts)
)
)
)
)
 (ret8 e)
)
)
)
)
)
)
)
)
)
)
)
)
(define source (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "// Mochi translation of the Rosetta \"Entropy-Narcissist\" task\n" "// Simplified to compute the entropy of this source string\n\n")
 "fun log2(x: float)
: float {\n")
 "  var k = 0.0\n")
 "  var v = x\n")
 "  while v >= 2.0 {\n")
 "    v = v / 2.0\n")
 "    k = k + 1.0\n")
 "  }\n")
 "  while v < 1.0 {\n")
 "    v = v * 2.0\n")
 "    k = k - 1.0\n")
 "  }\n")
 "  let z = (v - 1.0)
 / (v + 1.0)
\n")
 "  var zpow = z\n")
 "  var sum = z\n")
 "  var i = 3\n")
 "  while i <= 9 {\n")
 "    zpow = zpow * z * z\n")
 "    sum = sum + zpow / (i as float)
\n")
 "    i = i + 2\n")
 "  }\n")
 "  let ln2 = 0.6931471805599453\n")
 "  return k + 2.0 * sum / ln2\n")
 "}\n\n")
 "fun entropy(data: string)
: float {\n")
 "  if data == \"\" { return 0.0 }\n")
 "  var counts: map<string,int> = {}\n")
 "  var i = 0\n")
 "  while i < len(data)
 {\n")
 "    let ch = substring(data, i, i+1)
\n")
 "    if ch in counts {\n")
 "      counts[ch] = counts[ch] + 1\n")
 "    } else {\n")
 "      counts[ch] = 1\n")
 "    }\n")
 "    i = i + 1\n")
 "  }\n")
 "  var e = 0.0\n")
 "  let l = len(data)
 as float\n")
 "  for ch in counts {\n")
 "    let px = (counts[ch] as float)
 / l\n")
 "    if px > 0.0 {\n")
 "      e = e - px * log2(px)
\n")
 "    }\n")
 "  }\n")
 "  return e\n")
 "}\n\n")
 "// Store the program source as a string constant\n")
 "let source = ... // truncated in actual source\n")
 "\nfun main()
 {\n")
 "  print(\"Source file entropy: \" + str(entropy(source)
)
)
\n")
 "}\n\n")
 "main()
\n")
)
(define (main)
 (call/cc (lambda (ret13)
 (begin (_display (to-str (string-append "Source file entropy: " (to-str (entropy source)
)
)
)
)
 (newline)
)
)
)
)
(main)
