;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (poly p)
 (call/cc (lambda (ret1)
 (let ((s "")
)
 (begin (let ((coef 1)
)
 (begin (let ((i p)
)
 (begin (if (not (equal? coef 1)
)
 (begin (set! s (string-append s (to-str coef)
)
)
)
 (quote nil)
)
 (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> i 0)
 (begin (set! s (string-append s "x")
)
 (if (not (equal? i 1)
)
 (begin (set! s (string-append (string-append s "^")
 (to-str i)
)
)
)
 (quote nil)
)
 (set! coef (inexact->exact (quotient (* coef i)
 (+ (- p i)
 1)
)
)
)
 (let ((d coef)
)
 (begin (if (equal? (modulo (- p (- i 1)
)
 2)
 1)
 (begin (set! d (- d)
)
)
 (quote nil)
)
 (if (< d 0)
 (begin (set! s (string-append (string-append s " - ")
 (to-str (- d)
)
)
)
)
 (begin (set! s (string-append (string-append s " + ")
 (to-str d)
)
)
)
)
 (set! i (- i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (if (string=? s "")
 (begin (set! s "1")
)
 (quote nil)
)
 (ret1 s)
)
)
)
)
)
)
)
)
)
(define (aks n)
 (call/cc (lambda (ret4)
 (begin (if (< n 2)
 (begin (ret4 #f)
)
 (quote nil)
)
 (let ((c n)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i n)
 (begin (if (not (equal? (modulo c n)
 0)
)
 (begin (ret4 #f)
)
 (quote nil)
)
 (set! c (inexact->exact (quotient (* c (- n i)
)
 (+ i 1)
)
)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 #t)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret7)
 (let ((p 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (<= p 7)
 (begin (display (to-str (string-append (string-append (to-str p)
 ":  ")
 (poly p)
)
)
)
 (newline)
 (set! p (+ p 1)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
 (let ((first #t)
)
 (begin (set! p 2)
 (let ((line "")
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< p 50)
 (begin (if (aks p)
 (begin (if first (begin (set! line (string-append line (to-str p)
)
)
 (set! first #f)
)
 (begin (set! line (string-append (string-append line " ")
 (to-str p)
)
)
)
)
)
 (quote nil)
)
 (set! p (+ p 1)
)
 (loop10)
)
 (quote nil)
)
)
)
)
 (loop10)
)
)
)
 (display (to-str line)
)
 (newline)
)
)
)
)
)
)
)
)
)
(main)
