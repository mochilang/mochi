;; Generated on 2025-07-26 19:01 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start14 (now)
)
)
 (begin (define (poly p)
 (call/cc (lambda (ret1)
 (let ((s "")
)
 (begin (let ((coef 1)
)
 (begin (let ((i p)
)
 (begin (if (not (equal? coef 1)
)
 (begin (set! s (string-append s (to-str coef)
)
)
)
 (quote ()
)
)
 (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> i 0)
 (begin (set! s (string-append s "x")
)
 (if (not (equal? i 1)
)
 (begin (set! s (string-append (string-append s "^")
 (to-str i)
)
)
)
 (quote ()
)
)
 (set! coef (let ((v4 (quotient (* coef i)
 (+ (- p i)
 1)
)
)
)
 (cond ((string? v4)
 (inexact->exact (string->number v4)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact v4)
)
)
)
)
 (let ((d coef)
)
 (begin (if (equal? (modulo (- p (- i 1)
)
 2)
 1)
 (begin (set! d (- d)
)
)
 (quote ()
)
)
 (if (< d 0)
 (begin (set! s (string-append (string-append s " - ")
 (to-str (- d)
)
)
)
)
 (begin (set! s (string-append (string-append s " + ")
 (to-str d)
)
)
)
)
 (set! i (- i 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (if (string=? s "")
 (begin (set! s "1")
)
 (quote ()
)
)
 (ret1 s)
)
)
)
)
)
)
)
)
)
 (define (aks n)
 (call/cc (lambda (ret5)
 (begin (if (< n 2)
 (begin (ret5 #f)
)
 (quote ()
)
)
 (let ((c n)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< i n)
 (begin (if (not (equal? (modulo c n)
 0)
)
 (begin (ret5 #f)
)
 (quote ()
)
)
 (set! c (let ((v8 (quotient (* c (- n i)
)
 (+ i 1)
)
)
)
 (cond ((string? v8)
 (inexact->exact (string->number v8)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (inexact->exact v8)
)
)
)
)
 (set! i (+ i 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 #t)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret9)
 (let ((p 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (<= p 7)
 (begin (display (to-str (string-append (string-append (to-str p)
 ":  ")
 (poly p)
)
)
)
 (newline)
 (set! p (+ p 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (let ((first #t)
)
 (begin (set! p 2)
 (let ((line "")
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< p 50)
 (begin (if (aks p)
 (begin (if first (begin (set! line (string-append line (to-str p)
)
)
 (set! first #f)
)
 (begin (set! line (string-append (string-append line " ")
 (to-str p)
)
)
)
)
)
 (quote ()
)
)
 (set! p (+ p 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (display (to-str line)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end15 (now)
)
)
 (let ((dur16 (quotient (- end15 start14)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur16)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
