;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (pow_int base exp)
 (call/cc (lambda (ret1)
 (let ((result 1)
)
 (begin (let ((b base)
)
 (begin (let ((e exp)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> e 0)
 (begin (if (equal? (modulo e 2)
 1)
 (begin (set! result (* result b)
)
)
 (quote nil)
)
 (set! b (* b b)
)
 (set! e (inexact->exact (quotient e 2)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 result)
)
)
)
)
)
)
)
)
)
(define (pow_big base exp)
 (call/cc (lambda (ret4)
 (let ((result 1)
)
 (begin (let ((b base)
)
 (begin (let ((e exp)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> e 0)
 (begin (if (equal? (modulo e 2)
 1)
 (begin (set! result (* result b)
)
)
 (quote nil)
)
 (set! b (* b b)
)
 (set! e (inexact->exact (quotient e 2)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 result)
)
)
)
)
)
)
)
)
)
(define e1 (pow_int 3 2)
)
(define e2 (pow_int 4 e1)
)
(define base 5)
(define x (pow_big base e2)
)
(define s (to-str x)
)
(display (to-str "5^(4^(3^2)
)
 has")
)
(display " ")
(display (to-str (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
(display " ")
(display (to-str "digits:")
)
(display " ")
(display (to-str (substring s 0 20)
)
)
(display " ")
(display (to-str "...")
)
(display " ")
(display (to-str (substring s (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 20)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
(newline)
