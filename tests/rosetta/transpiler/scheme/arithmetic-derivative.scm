;; Generated on 2025-07-26 21:42 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start29 (now)
)
)
 (begin (define (primeFactors n)
 (call/cc (lambda (ret1)
 (let ((factors (_list)
)
)
 (begin (let ((x n)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (equal? (modulo x 2)
 0)
 (begin (set! factors (append factors (_list 2)
)
)
 (set! x (let ((v4 (quotient x 2)
)
)
 (cond ((string? v4)
 (inexact->exact (string->number v4)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact v4)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (let ((p 3)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (_le (* p p)
 x)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (equal? (modulo x p)
 0)
 (begin (set! factors (append factors (_list p)
)
)
 (set! x (let ((v9 (quotient x p)
)
)
 (cond ((string? v9)
 (inexact->exact (string->number v9)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (inexact->exact v9)
)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (set! p (+ p 2)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (if (> x 1)
 (begin (set! factors (append factors (_list x)
)
)
)
 (quote ()
)
)
 (ret1 factors)
)
)
)
)
)
)
)
)
)
 (define (repeat ch n)
 (call/cc (lambda (ret10)
 (let ((s "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< i n)
 (begin (set! s (string-append s ch)
)
 (set! i (+ i 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 s)
)
)
)
)
)
)
)
 (define (D n)
 (call/cc (lambda (ret13)
 (begin (if (< n 0.0)
 (begin (ret13 (- (D (- n)
)
)
)
)
 (quote ()
)
)
 (if (< n 2.0)
 (begin (ret13 0.0)
)
 (quote ()
)
)
 (let ((factors (_list)
)
)
 (begin (if (< n 10000000000000000000.0)
 (begin (set! factors (primeFactors (let ((v14 n)
)
 (cond ((string? v14)
 (inexact->exact (string->number v14)
)
)
 ((boolean? v14)
 (if v14 1 0)
)
 (else (inexact->exact v14)
)
)
)
)
)
)
 (begin (let ((g (let ((v15 (/ n 100.0)
)
)
 (cond ((string? v15)
 (inexact->exact (string->number v15)
)
)
 ((boolean? v15)
 (if v15 1 0)
)
 (else (inexact->exact v15)
)
)
)
)
)
 (begin (set! factors (primeFactors g)
)
 (set! factors (append factors (_list 2)
)
)
 (set! factors (append factors (_list 2)
)
)
 (set! factors (append factors (_list 5)
)
)
 (set! factors (append factors (_list 5)
)
)
)
)
)
)
 (let ((c (cond ((string? factors)
 (string-length factors)
)
 ((hash-table? factors)
 (hash-table-size factors)
)
 (else (length factors)
)
)
)
)
 (begin (if (equal? c 1)
 (begin (ret13 1.0)
)
 (quote ()
)
)
 (if (equal? c 2)
 (begin (ret13 (+ (list-ref factors 0)
 (list-ref factors 1)
)
)
)
 (quote ()
)
)
 (let ((d (/ n (list-ref factors 0)
)
)
)
 (begin (ret13 (+ (* (D d)
 (list-ref factors 0)
)
 d)
)
)
)
)
)
)
)
)
)
)
)
 (define (pad n)
 (call/cc (lambda (ret16)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 4)
 (begin (set! s (string-append " " s)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (ret16 s)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret19)
 (let ((vals (_list)
)
)
 (begin (let ((n (- 99)
)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< n 101)
 (begin (set! vals (append vals (_list (let ((v22 (D n)
)
)
 (cond ((string? v22)
 (inexact->exact (string->number v22)
)
)
 ((boolean? v22)
 (if v22 1 0)
)
 (else (inexact->exact v22)
)
)
)
)
)
)
 (set! n (+ n 1)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< i (cond ((string? vals)
 (string-length vals)
)
 ((hash-table? vals)
 (hash-table-size vals)
)
 (else (length vals)
)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break26)
 (letrec ((loop25 (lambda ()
 (if (< j 10)
 (begin (set! line (string-append line (pad (list-ref vals (+ i j)
)
)
)
)
 (if (< j 9)
 (begin (set! line (string-append line " ")
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop25)
)
 (quote ()
)
)
)
)
)
 (loop25)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! i (+ i 10)
)
)
)
)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (let ((pow 1.0)
)
 (begin (let ((m 1)
)
 (begin (call/cc (lambda (break28)
 (letrec ((loop27 (lambda ()
 (if (< m 21)
 (begin (set! pow (* pow 10.0)
)
 (let ((exp (to-str m)
)
)
 (begin (if (< (cond ((string? exp)
 (string-length exp)
)
 ((hash-table? exp)
 (hash-table-size exp)
)
 (else (length exp)
)
)
 2)
 (begin (set! exp (string-append exp " ")
)
)
 (quote ()
)
)
 (let ((res (string-append (to-str m)
 (repeat "0" (- m 1)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append "D(10^" exp)
 ")
 / 7 = ")
 res)
)
)
 (newline)
 (set! m (+ m 1)
)
)
)
)
)
 (loop27)
)
 (quote ()
)
)
)
)
)
 (loop27)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end30 (now)
)
)
 (let ((dur31 (quotient (- end30 start29)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur31)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
