;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (primeFactors n)
 (call/cc (lambda (ret1)
 (let ((factors (list)
)
)
 (begin (let ((x n)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (equal? (modulo x 2)
 0)
 (begin (set! factors (append factors (list 2)
)
)
 (set! x (inexact->exact (quotient x 2)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (let ((p 3)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (<= (* p p)
 x)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (equal? (modulo x p)
 0)
 (begin (set! factors (append factors (list p)
)
)
 (set! x (inexact->exact (quotient x p)
)
)
 (loop6)
)
 (quote nil)
)
)
)
)
 (loop6)
)
)
)
 (set! p (+ p 2)
)
 (loop4)
)
 (quote nil)
)
)
)
)
 (loop4)
)
)
)
 (if (> x 1)
 (begin (set! factors (append factors (list x)
)
)
)
 (quote nil)
)
 (ret1 factors)
)
)
)
)
)
)
)
)
)
(define (repeat ch n)
 (call/cc (lambda (ret8)
 (let ((s "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< i n)
 (begin (set! s (string-append s ch)
)
 (set! i (+ i 1)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (ret8 s)
)
)
)
)
)
)
)
(define (D n)
 (call/cc (lambda (ret11)
 (begin (if (< n 0.0)
 (begin (ret11 (- (D (- n)
)
)
)
)
 (quote nil)
)
 (if (< n 2.0)
 (begin (ret11 0.0)
)
 (quote nil)
)
 (let ((factors (list)
)
)
 (begin (if (< n 10000000000000000000.0)
 (begin (set! factors (primeFactors (inexact->exact n)
)
)
)
 (begin (let ((g (inexact->exact (/ n 100.0)
)
)
)
 (begin (set! factors (primeFactors g)
)
 (set! factors (append factors (list 2)
)
)
 (set! factors (append factors (list 2)
)
)
 (set! factors (append factors (list 5)
)
)
 (set! factors (append factors (list 5)
)
)
)
)
)
)
 (let ((c (cond ((string? factors)
 (string-length factors)
)
 ((hash-table? factors)
 (hash-table-size factors)
)
 (else (length factors)
)
)
)
)
 (begin (if (equal? c 1)
 (begin (ret11 1.0)
)
 (quote nil)
)
 (if (equal? c 2)
 (begin (ret11 (+ (list-ref factors 0)
 (list-ref factors 1)
)
)
)
 (quote nil)
)
 (let ((d (/ n (list-ref factors 0)
)
)
)
 (begin (ret11 (+ (* (D d)
 (list-ref factors 0)
)
 d)
)
)
)
)
)
)
)
)
)
)
)
(define (pad n)
 (call/cc (lambda (ret12)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 4)
 (begin (set! s (string-append " " s)
)
 (loop13)
)
 (quote nil)
)
)
)
)
 (loop13)
)
)
)
 (ret12 s)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret15)
 (let ((vals (list)
)
)
 (begin (let ((n (- 99)
)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< n 101)
 (begin (set! vals (append vals (list (inexact->exact (D n)
)
)
)
)
 (set! n (+ n 1)
)
 (loop16)
)
 (quote nil)
)
)
)
)
 (loop16)
)
)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< i (cond ((string? vals)
 (string-length vals)
)
 ((hash-table? vals)
 (hash-table-size vals)
)
 (else (length vals)
)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< j 10)
 (begin (set! line (string-append line (pad (list-ref vals (+ i j)
)
)
)
)
 (if (< j 9)
 (begin (set! line (string-append line " ")
)
)
 (quote nil)
)
 (set! j (+ j 1)
)
 (loop20)
)
 (quote nil)
)
)
)
)
 (loop20)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! i (+ i 10)
)
)
)
)
)
 (loop18)
)
 (quote nil)
)
)
)
)
 (loop18)
)
)
)
 (let ((pow 1.0)
)
 (begin (let ((m 1)
)
 (begin (call/cc (lambda (break23)
 (letrec ((loop22 (lambda ()
 (if (< m 21)
 (begin (set! pow (* pow 10.0)
)
 (let ((exp (to-str m)
)
)
 (begin (if (< (cond ((string? exp)
 (string-length exp)
)
 ((hash-table? exp)
 (hash-table-size exp)
)
 (else (length exp)
)
)
 2)
 (begin (set! exp (string-append exp " ")
)
)
 (quote nil)
)
 (let ((res (string-append (to-str m)
 (repeat "0" (- m 1)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append "D(10^" exp)
 ")
 / 7 = ")
 res)
)
)
 (newline)
 (set! m (+ m 1)
)
)
)
)
)
 (loop22)
)
 (quote nil)
)
)
)
)
 (loop22)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
