;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start15 (now)
)
)
 (begin (define seed 1)
 (define (prng max)
 (call/cc (lambda (ret1)
 (begin (set! seed (modulo (+ (* seed 1103515245)
 12345)
 2147483648)
)
 (ret1 (modulo seed max)
)
)
)
)
)
 (define (gen n)
 (call/cc (lambda (ret2)
 (let ((arr (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i n)
 (begin (set! arr (append arr (_list "[")
)
)
 (set! arr (append arr (_list "]")
)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (let ((j (- (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> j 0)
 (begin (let ((k (prng (+ j 1)
)
)
)
 (begin (let ((tmp (list-ref arr j)
)
)
 (begin (list-set! arr j (list-ref arr k)
)
 (list-set! arr k tmp)
 (set! j (- j 1)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (let ((out "")
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((ch (car xs)
)
)
 (begin (set! out (string-append out ch)
)
)
)
 (loop7 (cdr xs)
)
)
)
)
)
)
 (loop7 arr)
)
)
)
 (ret2 out)
)
)
)
)
)
)
)
)
)
)
)
 (define (testBalanced s)
 (call/cc (lambda (ret9)
 (let ((open 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((c (substring s i (+ i 1)
)
)
)
 (begin (if (string=? c "[")
 (begin (set! open (+ open 1)
)
)
 (if (string=? c "]")
 (begin (if (equal? open 0)
 (begin (display (to-str (string-append s ": not ok")
)
)
 (newline)
 (ret9 (quote ()
)
)
)
 (quote ()
)
)
 (set! open (- open 1)
)
)
 (begin (display (to-str (string-append s ": not ok")
)
)
 (newline)
 (ret9 (quote ()
)
)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (if (equal? open 0)
 (begin (display (to-str (string-append s ": ok")
)
)
 (newline)
)
 (begin (display (to-str (string-append s ": not ok")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret12)
 (let ((i 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i 10)
 (begin (testBalanced (gen i)
)
 (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (testBalanced "()
")
)
)
)
)
)
 (main)
 (let ((end16 (now)
)
)
 (let ((dur17 (quotient (- end16 start15)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur17)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
