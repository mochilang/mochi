;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start23 (now)
)
)
 (begin (define (nextRand seed)
 (call/cc (lambda (ret1)
 (ret1 (modulo (+ (* seed 1664525)
 1013904223)
 2147483647)
)
)
)
)
 (define (shuffleChars s seed)
 (call/cc (lambda (ret2)
 (let ((chars (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! chars (append chars (_list (substring s i (+ i 1)
)
)
)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (let ((sd seed)
)
 (begin (let ((idx (- (cond ((string? chars)
 (string-length chars)
)
 ((hash-table? chars)
 (hash-table-size chars)
)
 (else (length chars)
)
)
 1)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (> idx 0)
 (begin (set! sd (nextRand sd)
)
 (let ((j (modulo sd (+ idx 1)
)
)
)
 (begin (let ((tmp (list-ref chars idx)
)
)
 (begin (list-set! chars idx (list-ref chars j)
)
 (list-set! chars j tmp)
 (set! idx (- idx 1)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (let ((res "")
)
 (begin (set! i 0)
 (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i (cond ((string? chars)
 (string-length chars)
)
 ((hash-table? chars)
 (hash-table-size chars)
)
 (else (length chars)
)
)
)
 (begin (set! res (string-append res (list-ref chars i)
)
)
 (set! i (+ i 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret2 (_list res sd)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (bestShuffle s seed)
 (call/cc (lambda (ret9)
 (let ((r (shuffleChars s seed)
)
)
 (begin (let ((t (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
)
 (begin (let ((sd (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (let ((arr (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< i (cond ((string? t)
 (string-length t)
)
 ((hash-table? t)
 (hash-table-size t)
)
 (else (length t)
)
)
)
 (begin (set! arr (append arr (_list (substring t i (+ i 1)
)
)
)
)
 (set! i (+ i 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! i 0)
 (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
 (begin (if (and (and (not (equal? i j)
)
 (not (string=? (list-ref arr i)
 (substring s j (+ j 1)
)
)
)
)
 (not (string=? (list-ref arr j)
 (substring s i (+ i 1)
)
)
)
)
 (begin (let ((tmp (list-ref arr i)
)
)
 (begin (list-set! arr i (list-ref arr j)
)
 (list-set! arr j tmp)
 (break15 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (let ((count 0)
)
 (begin (set! i 0)
 (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
 (begin (if (string=? (list-ref arr i)
 (substring s i (+ i 1)
)
)
 (begin (set! count (+ count 1)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (let ((out "")
)
 (begin (set! i 0)
 (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< i (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
 (begin (set! out (string-append out (list-ref arr i)
)
)
 (set! i (+ i 1)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (ret9 (_list out sd count)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret20)
 (let ((ts (_list "abracadabra" "seesaw" "elk" "grrrrrr" "up" "a")
)
)
 (begin (let ((seed 1)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< i (cond ((string? ts)
 (string-length ts)
)
 ((hash-table? ts)
 (hash-table-size ts)
)
 (else (length ts)
)
)
)
 (begin (let ((r (bestShuffle (list-ref ts i)
 seed)
)
)
 (begin (let ((shuf (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
)
 (begin (set! seed (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
 (let ((cnt (cond ((string? r)
 (substring r 2 (+ 2 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 2)
)
 (else (list-ref r 2)
)
)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append (list-ref ts i)
 " -> ")
 shuf)
 " (")
 (to-str cnt)
)
 ")
")
)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end24 (now)
)
)
 (let ((dur25 (quotient (- end24 start23)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur25)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
