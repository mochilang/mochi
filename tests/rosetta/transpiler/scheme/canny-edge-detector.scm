;; Generated on 2025-07-27 23:58 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define PI 3.141592653589793)
(define (conv2d img k)
 (call/cc (lambda (ret1)
 (let ((h (cond ((string? img)
 (string-length img)
)
 ((hash-table? img)
 (hash-table-size img)
)
 (else (length img)
)
)
)
)
 (begin (let ((w (cond ((string? (list-ref img 0)
)
 (string-length (list-ref img 0)
)
)
 ((hash-table? (list-ref img 0)
)
 (hash-table-size (list-ref img 0)
)
)
 (else (length (list-ref img 0)
)
)
)
)
)
 (begin (let ((n (cond ((string? k)
 (string-length k)
)
 ((hash-table? k)
 (hash-table-size k)
)
 (else (length k)
)
)
)
)
 (begin (let ((half (quotient n 2)
)
)
 (begin (let ((out (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< y h)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< x w)
 (begin (let ((sum 0.0)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< j n)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (let ((yy (- (+ y j)
 half)
)
)
 (begin (if (< yy 0)
 (begin (set! yy 0)
)
 (quote ()
)
)
 (if (>= yy h)
 (begin (set! yy (- h 1)
)
)
 (quote ()
)
)
 (let ((xx (- (+ x i)
 half)
)
)
 (begin (if (< xx 0)
 (begin (set! xx 0)
)
 (quote ()
)
)
 (if (>= xx w)
 (begin (set! xx (- w 1)
)
)
 (quote ()
)
)
 (set! sum (+ sum (* (cond ((string? (list-ref img yy)
)
 (substring (list-ref img yy)
 xx (+ xx 1)
)
)
 ((hash-table? (list-ref img yy)
)
 (hash-table-ref (list-ref img yy)
 xx)
)
 (else (list-ref (list-ref img yy)
 xx)
)
)
 (cond ((string? (list-ref k j)
)
 (substring (list-ref k j)
 i (+ i 1)
)
)
 ((hash-table? (list-ref k j)
)
 (hash-table-ref (list-ref k j)
 i)
)
 (else (list-ref (list-ref k j)
 i)
)
)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (set! j (+ j 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (set! row (append row (_list sum)
)
)
 (set! x (+ x 1)
)
)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! out (append out (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 out)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (gradient img)
 (call/cc (lambda (ret10)
 (let ((hx (_list (_list (- 1.0)
 0.0 1.0)
 (_list (- 2.0)
 0.0 2.0)
 (_list (- 1.0)
 0.0 1.0)
)
)
)
 (begin (let ((hy (_list (_list 1.0 2.0 1.0)
 (_list 0.0 0.0 0.0)
 (_list (- 1.0)
 (- 2.0)
 (- 1.0)
)
)
)
)
 (begin (let ((gx (conv2d img hx)
)
)
 (begin (let ((gy (conv2d img hy)
)
)
 (begin (let ((h (cond ((string? img)
 (string-length img)
)
 ((hash-table? img)
 (hash-table-size img)
)
 (else (length img)
)
)
)
)
 (begin (let ((w (cond ((string? (list-ref img 0)
)
 (string-length (list-ref img 0)
)
)
 ((hash-table? (list-ref img 0)
)
 (hash-table-size (list-ref img 0)
)
)
 (else (length (list-ref img 0)
)
)
)
)
)
 (begin (let ((out (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< y h)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< x w)
 (begin (let ((g (+ (* (cond ((string? (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
)
 (substring (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x (+ x 1)
)
)
 ((hash-table? (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
)
 (hash-table-ref (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x)
)
 (else (list-ref (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x)
)
)
 (cond ((string? (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
)
 (substring (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x (+ x 1)
)
)
 ((hash-table? (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
)
 (hash-table-ref (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x)
)
 (else (list-ref (cond ((string? gx)
 (substring gx y (+ y 1)
)
)
 ((hash-table? gx)
 (hash-table-ref gx y)
)
 (else (list-ref gx y)
)
)
 x)
)
)
)
 (* (cond ((string? (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
)
 (substring (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x (+ x 1)
)
)
 ((hash-table? (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
)
 (hash-table-ref (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x)
)
 (else (list-ref (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x)
)
)
 (cond ((string? (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
)
 (substring (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x (+ x 1)
)
)
 ((hash-table? (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
)
 (hash-table-ref (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x)
)
 (else (list-ref (cond ((string? gy)
 (substring gy y (+ y 1)
)
)
 ((hash-table? gy)
 (hash-table-ref gy y)
)
 (else (list-ref gy y)
)
)
 x)
)
)
)
)
)
)
 (begin (set! row (append row (_list g)
)
)
 (set! x (+ x 1)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (set! out (append out (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 out)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (threshold g t)
 (call/cc (lambda (ret15)
 (let ((h (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
)
 (begin (let ((w (cond ((string? (list-ref g 0)
)
 (string-length (list-ref g 0)
)
)
 ((hash-table? (list-ref g 0)
)
 (hash-table-size (list-ref g 0)
)
)
 (else (length (list-ref g 0)
)
)
)
)
)
 (begin (let ((out (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< y h)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< x w)
 (begin (if (>= (cond ((string? (list-ref g y)
)
 (substring (list-ref g y)
 x (+ x 1)
)
)
 ((hash-table? (list-ref g y)
)
 (hash-table-ref (list-ref g y)
 x)
)
 (else (list-ref (list-ref g y)
 x)
)
)
 t)
 (begin (set! row (append row (_list 1)
)
)
)
 (begin (set! row (append row (_list 0)
)
)
)
)
 (set! x (+ x 1)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (set! out (append out (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (ret15 out)
)
)
)
)
)
)
)
)
)
)
)
(define (printMatrix m)
 (call/cc (lambda (ret20)
 (let ((y 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< y (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
 (begin (let ((line "")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (< x (cond ((string? (list-ref m 0)
)
 (string-length (list-ref m 0)
)
)
 ((hash-table? (list-ref m 0)
)
 (hash-table-size (list-ref m 0)
)
)
 (else (length (list-ref m 0)
)
)
)
)
 (begin (set! line (string-append line (to-str (cond ((string? (list-ref m y)
)
 (substring (list-ref m y)
 x (+ x 1)
)
)
 ((hash-table? (list-ref m y)
)
 (hash-table-ref (list-ref m y)
 x)
)
 (else (list-ref (list-ref m y)
 x)
)
)
)
)
)
 (if (_lt x (- (cond ((string? (list-ref m 0)
)
 (string-length (list-ref m 0)
)
)
 ((hash-table? (list-ref m 0)
)
 (hash-table-size (list-ref m 0)
)
)
 (else (length (list-ref m 0)
)
)
)
 1)
)
 (begin (set! line (string-append line " ")
)
)
 (quote ()
)
)
 (set! x (+ x 1)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (_display (to-str line)
)
 (newline)
 (set! y (+ y 1)
)
)
)
)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret25)
 (let ((img (_list (_list 0.0 0.0 0.0 0.0 0.0)
 (_list 0.0 255.0 255.0 255.0 0.0)
 (_list 0.0 255.0 255.0 255.0 0.0)
 (_list 0.0 255.0 255.0 255.0 0.0)
 (_list 0.0 0.0 0.0 0.0 0.0)
)
)
)
 (begin (let ((g (gradient img)
)
)
 (begin (let ((edges (threshold g (* 1020.0 1020.0)
)
)
)
 (begin (printMatrix edges)
)
)
)
)
)
)
)
)
)
(main)
