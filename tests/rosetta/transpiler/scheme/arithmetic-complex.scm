;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (add a b)
 (call/cc (lambda (ret1)
 (ret1 (alist->hash-table (list (cons "re" (+ (hash-table-ref a "re")
 (hash-table-ref b "re")
)
)
 (cons "im" (+ (hash-table-ref a "im")
 (hash-table-ref b "im")
)
)
)
)
)
)
)
)
(define (mul a b)
 (call/cc (lambda (ret2)
 (ret2 (alist->hash-table (list (cons "re" (- (* (hash-table-ref a "re")
 (hash-table-ref b "re")
)
 (* (hash-table-ref a "im")
 (hash-table-ref b "im")
)
)
)
 (cons "im" (+ (* (hash-table-ref a "re")
 (hash-table-ref b "im")
)
 (* (hash-table-ref a "im")
 (hash-table-ref b "re")
)
)
)
)
)
)
)
)
)
(define (neg a)
 (call/cc (lambda (ret3)
 (ret3 (alist->hash-table (list (cons "re" (- (hash-table-ref a "re")
)
)
 (cons "im" (- (hash-table-ref a "im")
)
)
)
)
)
)
)
)
(define (inv a)
 (call/cc (lambda (ret4)
 (let ((denom (+ (* (hash-table-ref a "re")
 (hash-table-ref a "re")
)
 (* (hash-table-ref a "im")
 (hash-table-ref a "im")
)
)
)
)
 (begin (ret4 (alist->hash-table (list (cons "re" (/ (hash-table-ref a "re")
 denom)
)
 (cons "im" (/ (- (hash-table-ref a "im")
)
 denom)
)
)
)
)
)
)
)
)
)
(define (conj a)
 (call/cc (lambda (ret5)
 (ret5 (alist->hash-table (list (cons "re" (hash-table-ref a "re")
)
 (cons "im" (- (hash-table-ref a "im")
)
)
)
)
)
)
)
)
(define (cstr a)
 (call/cc (lambda (ret6)
 (let ((s (string-append "(" (to-str (hash-table-ref a "re")
)
)
)
)
 (begin (if (>= (hash-table-ref a "im")
 0)
 (begin (set! s (string-append (string-append (string-append s "+")
 (to-str (hash-table-ref a "im")
)
)
 "i)
")
)
)
 (begin (set! s (string-append (string-append s (to-str (hash-table-ref a "im")
)
)
 "i)
")
)
)
)
 (ret6 s)
)
)
)
)
)
(define a (alist->hash-table (list (cons "re" 1.0)
 (cons "im" 1.0)
)
)
)
(define b (alist->hash-table (list (cons "re" 3.14159)
 (cons "im" 1.25)
)
)
)
(display (to-str (string-append "a:       " (cstr a)
)
)
)
(newline)
(display (to-str (string-append "b:       " (cstr b)
)
)
)
(newline)
(display (to-str (string-append "a + b:   " (cstr (add a b)
)
)
)
)
(newline)
(display (to-str (string-append "a * b:   " (cstr (mul a b)
)
)
)
)
(newline)
(display (to-str (string-append "-a:      " (cstr (neg a)
)
)
)
)
(newline)
(display (to-str (string-append "1 / a:   " (cstr (inv a)
)
)
)
)
(newline)
(display (to-str (string-append "aÌ…:       " (cstr (conj a)
)
)
)
)
(newline)
