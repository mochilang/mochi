;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (skipWS p)
 (call/cc (lambda (ret1)
 (let ((i (hash-table-ref p "pos")
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (and (< i (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (string=? (substring (hash-table-ref p "expr")
 i (+ i 1)
)
 " ")
)
 (begin (set! i (+ i 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (hash-table-set! p "pos" i)
 (ret1 p)
)
)
)
)
)
(define (parseIntStr str)
 (call/cc (lambda (ret4)
 (let ((i 0)
)
 (begin (let ((n 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? str)
 (string-length str)
)
 ((hash-table? str)
 (hash-table-size str)
)
 (else (length str)
)
)
)
 (begin (set! n (- (+ (* n 10)
 (let ((v7 (substring str i (+ i 1)
)
)
)
 (cond ((string? v7)
 (inexact->exact (string->number v7)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (inexact->exact v7)
)
)
)
)
 48)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 n)
)
)
)
)
)
)
)
(define (parseNumber p)
 (call/cc (lambda (ret8)
 (begin (set! p (skipWS p)
)
 (let ((start (hash-table-ref p "pos")
)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (begin (let ((ch (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
)
)
 (begin (if (and (string>=? ch "0")
 (string<=? ch "9")
)
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
)
 (begin (break10 (quote nil)
)
)
)
)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (let ((token (substring (hash-table-ref p "expr")
 start (hash-table-ref p "pos")
)
)
)
 (begin (ret8 (alist->hash-table (list (cons "v" (parseIntStr token)
)
 (cons "p" p)
)
)
)
)
)
)
)
)
)
)
)
(define (parseFactor p)
 (call/cc (lambda (ret11)
 (begin (set! p (skipWS p)
)
 (if (and (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (string=? (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
 "(")
)
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r (parseExpr p)
)
)
 (begin (let ((v (hash-table-ref r "v")
)
)
 (begin (set! p (hash-table-ref r "p")
)
 (set! p (skipWS p)
)
 (if (and (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (string=? (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
 ")
")
)
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
)
 (quote nil)
)
 (ret11 (alist->hash-table (list (cons "v" v)
 (cons "p" p)
)
)
)
)
)
)
)
)
 (quote nil)
)
 (if (and (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (string=? (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
 "-")
)
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r (parseFactor p)
)
)
 (begin (let ((v (hash-table-ref r "v")
)
)
 (begin (set! p (hash-table-ref r "p")
)
 (ret11 (alist->hash-table (list (cons "v" (- v)
)
 (cons "p" p)
)
)
)
)
)
)
)
)
 (quote nil)
)
 (ret11 (parseNumber p)
)
)
)
)
)
(define (powInt base exp)
 (call/cc (lambda (ret12)
 (let ((r 1)
)
 (begin (let ((b base)
)
 (begin (let ((e exp)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (> e 0)
 (begin (if (equal? (modulo e 2)
 1)
 (begin (set! r (* r b)
)
)
 (quote nil)
)
 (set! b (* b b)
)
 (set! e (quotient e (let ((v15 2)
)
 (cond ((string? v15)
 (inexact->exact (string->number v15)
)
)
 ((boolean? v15)
 (if v15 1 0)
)
 (else (inexact->exact v15)
)
)
)
)
)
 (loop13)
)
 (quote nil)
)
)
)
)
 (loop13)
)
)
)
 (ret12 r)
)
)
)
)
)
)
)
)
)
(define (parsePower p)
 (call/cc (lambda (ret16)
 (let ((r (parseFactor p)
)
)
 (begin (let ((v (hash-table-ref r "v")
)
)
 (begin (set! p (hash-table-ref r "p")
)
 (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if #t (begin (set! p (skipWS p)
)
 (if (and (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (string=? (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
 "^")
)
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r2 (parseFactor p)
)
)
 (begin (let ((rhs (hash-table-ref r2 "v")
)
)
 (begin (set! p (hash-table-ref r2 "p")
)
 (set! v (powInt v rhs)
)
)
)
)
)
)
 (begin (break18 (quote nil)
)
)
)
 (loop17)
)
 (quote nil)
)
)
)
)
 (loop17)
)
)
)
 (ret16 (alist->hash-table (list (cons "v" v)
 (cons "p" p)
)
)
)
)
)
)
)
)
)
)
(define (parseTerm p)
 (call/cc (lambda (ret19)
 (let ((r (parsePower p)
)
)
 (begin (let ((v (hash-table-ref r "v")
)
)
 (begin (set! p (hash-table-ref r "p")
)
 (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if #t (begin (set! p (skipWS p)
)
 (if (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (begin (let ((op (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
)
)
 (begin (if (string=? op "*")
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r2 (parsePower p)
)
)
 (begin (let ((rhs (hash-table-ref r2 "v")
)
)
 (begin (set! p (hash-table-ref r2 "p")
)
 (set! v (* v rhs)
)
 (loop20)
)
)
)
)
)
 (quote nil)
)
 (if (string=? op "/")
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r2 (parsePower p)
)
)
 (begin (let ((rhs (hash-table-ref r2 "v")
)
)
 (begin (set! p (hash-table-ref r2 "p")
)
 (set! v (quotient v (let ((v22 rhs)
)
 (cond ((string? v22)
 (inexact->exact (string->number v22)
)
)
 ((boolean? v22)
 (if v22 1 0)
)
 (else (inexact->exact v22)
)
)
)
)
)
 (loop20)
)
)
)
)
)
 (quote nil)
)
)
)
)
 (quote nil)
)
 (break21 (quote nil)
)
 (loop20)
)
 (quote nil)
)
)
)
)
 (loop20)
)
)
)
 (ret19 (alist->hash-table (list (cons "v" v)
 (cons "p" p)
)
)
)
)
)
)
)
)
)
)
(define (parseExpr p)
 (call/cc (lambda (ret23)
 (let ((r (parseTerm p)
)
)
 (begin (let ((v (hash-table-ref r "v")
)
)
 (begin (set! p (hash-table-ref r "p")
)
 (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if #t (begin (set! p (skipWS p)
)
 (if (< (hash-table-ref p "pos")
 (cond ((string? (hash-table-ref p "expr")
)
 (string-length (hash-table-ref p "expr")
)
)
 ((hash-table? (hash-table-ref p "expr")
)
 (hash-table-size (hash-table-ref p "expr")
)
)
 (else (length (hash-table-ref p "expr")
)
)
)
)
 (begin (let ((op (substring (hash-table-ref p "expr")
 (hash-table-ref p "pos")
 (+ (hash-table-ref p "pos")
 1)
)
)
)
 (begin (if (string=? op "+")
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r2 (parseTerm p)
)
)
 (begin (let ((rhs (hash-table-ref r2 "v")
)
)
 (begin (set! p (hash-table-ref r2 "p")
)
 (set! v (+ v rhs)
)
 (loop24)
)
)
)
)
)
 (quote nil)
)
 (if (string=? op "-")
 (begin (hash-table-set! p "pos" (+ (hash-table-ref p "pos")
 1)
)
 (let ((r2 (parseTerm p)
)
)
 (begin (let ((rhs (hash-table-ref r2 "v")
)
)
 (begin (set! p (hash-table-ref r2 "p")
)
 (set! v (- v rhs)
)
 (loop24)
)
)
)
)
)
 (quote nil)
)
)
)
)
 (quote nil)
)
 (break25 (quote nil)
)
 (loop24)
)
 (quote nil)
)
)
)
)
 (loop24)
)
)
)
 (ret23 (alist->hash-table (list (cons "v" v)
 (cons "p" p)
)
)
)
)
)
)
)
)
)
)
(define (evalExpr expr)
 (call/cc (lambda (ret26)
 (let ((p (alist->hash-table (list (cons "expr" expr)
 (cons "pos" 0)
)
)
)
)
 (begin (let ((r (parseExpr p)
)
)
 (begin (ret26 (hash-table-ref r "v")
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret27)
 (let ((expr "2*(3-1)
+2*5")
)
 (begin (display (to-str (string-append (string-append expr " = ")
 (to-str (evalExpr expr)
)
)
)
)
 (newline)
)
)
)
)
)
(main)
