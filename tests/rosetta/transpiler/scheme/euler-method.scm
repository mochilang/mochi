;; Generated on 2025-08-04 07:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start31 (current-jiffy)) (jps34 (jiffies-per-second))) (begin (define (indexOf s ch) (call/cc (lambda (ret1) (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s)))) (begin (if (string=? (_substring s i (+ i 1)) ch) (begin (ret1 i)) (quote ())) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 (- 1))))))) (define (floorf x) (call/cc (lambda (ret4) (let ((y (let ((v5 x)) (cond ((string? v5) (inexact->exact (floor (string->number v5)))) ((boolean? v5) (if v5 1 0)) (else (inexact->exact (floor v5))))))) (begin (ret4 (+ 0.0 y))))))) (define (powf base exp) (call/cc (lambda (ret6) (let ((r 1.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (< i exp) (begin (set! r (* r base)) (set! i (+ i 1)) (loop7)) (quote ()))))) (loop7)))) (ret6 r)))))))) (define (fmtF x width prec) (call/cc (lambda (ret9) (let ((factor (powf 10.0 prec))) (begin (let ((y (/ (floorf (_add (* x factor) 0.5)) factor))) (begin (let ((s (to-str y))) (begin (let ((dot (indexOf s "."))) (begin (if (equal? dot (- 0 1)) (begin (set! s (string-append s ".")) (let ((j 0)) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (< j prec) (begin (set! s (string-append s "0")) (set! j (+ j 1)) (loop10)) (quote ()))))) (loop10))))))) (begin (let ((decs (- (- (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) dot) 1))) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (_lt decs prec) (begin (set! s (string-append s "0")) (set! decs (_add decs 1)) (loop12)) (quote ()))))) (loop12)))))))) (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) width) (begin (set! s (string-append " " s)) (loop14)) (quote ()))))) (loop14)))) (ret9 s)))))))))))) (define (expf x) (call/cc (lambda (ret16) (begin (if (< x 0.0) (begin (ret16 (/ 1.0 (expf (- x))))) (quote ())) (let ((term 1.0)) (begin (let ((sum 1.0)) (begin (let ((i 1)) (begin (call/cc (lambda (break18) (letrec ((loop17 (lambda () (if (< i 20) (begin (set! term (/ (* term x) (+ 0.0 i))) (set! sum (+ sum term)) (set! i (+ i 1)) (loop17)) (quote ()))))) (loop17)))) (ret16 sum))))))))))) (define (eulerStep f x y h) (call/cc (lambda (ret19) (ret19 (_add y (* h (f x y))))))) (define (newCoolingRate k) (call/cc (lambda (ret20) (ret20 (lambda (dt) (call/cc (lambda (ret21) (ret21 (* (- k) dt))))))))) (define (newTempFunc k ambient initial) (call/cc (lambda (ret22) (ret22 (lambda (t) (call/cc (lambda (ret23) (ret23 (_add ambient (* (- initial ambient) (expf (* (- k) t)))))))))))) (define (newCoolingRateDy k ambient) (call/cc (lambda (ret24) (let ((cr (newCoolingRate k))) (begin (ret24 (lambda (_x obj) (call/cc (lambda (ret25) (ret25 (cr (- obj ambient)))))))))))) (define (main) (call/cc (lambda (ret26) (let ((k 0.07)) (begin (let ((tempRoom 20.0)) (begin (let ((tempObject 100.0)) (begin (let ((fcr (newCoolingRateDy k tempRoom))) (begin (let ((analytic (newTempFunc k tempRoom tempObject))) (begin (call/cc (lambda (break28) (letrec ((loop27 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((step (car xs))) (begin (_display (to-str (string-append "Step size = " (fmtF step 0 1)))) (newline) (_display (to-str " Time Euler's Analytic")) (newline) (let ((temp tempObject)) (begin (let ((time 0.0)) (begin (call/cc (lambda (break30) (letrec ((loop29 (lambda () (if (<= time 100.0) (begin (let ((line (string-append (string-append (string-append (string-append (fmtF time 5 1) " ") (fmtF temp 7 3)) " ") (fmtF (analytic time) 7 3)))) (begin (_display (to-str line)) (newline) (set! temp (eulerStep fcr time temp step)) (set! time (_add time step)))) (loop29)) (quote ()))))) (loop29)))) (_display (to-str "")) (newline))))))) (loop27 (cdr xs))))))) (loop27 (_list 2.0 5.0 10.0)))))))))))))))))) (main) (let ((end32 (current-jiffy))) (let ((dur33 (quotient (* (- end32 start31) 1000000) jps34))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur33) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
