;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (br n d) (call/cc (lambda (ret1) (ret1 (quotient n d)))))
(define testCases (_list (_list (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 2))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 3)))) (_list (alist->hash-table (_list (cons "a" 2) (cons "n" 1) (cons "d" 3))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 7)))) (_list (alist->hash-table (_list (cons "a" 4) (cons "n" 1) (cons "d" 5))) (alist->hash-table (_list (cons "a" (- 1)) (cons "n" 1) (cons "d" 239)))) (_list (alist->hash-table (_list (cons "a" 5) (cons "n" 1) (cons "d" 7))) (alist->hash-table (_list (cons "a" 2) (cons "n" 3) (cons "d" 79)))) (_list (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 2))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 5))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 8)))) (_list (alist->hash-table (_list (cons "a" 4) (cons "n" 1) (cons "d" 5))) (alist->hash-table (_list (cons "a" (- 1)) (cons "n" 1) (cons "d" 70))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 99)))) (_list (alist->hash-table (_list (cons "a" 5) (cons "n" 1) (cons "d" 7))) (alist->hash-table (_list (cons "a" 4) (cons "n" 1) (cons "d" 53))) (alist->hash-table (_list (cons "a" 2) (cons "n" 1) (cons "d" 4443)))) (_list (alist->hash-table (_list (cons "a" 6) (cons "n" 1) (cons "d" 8))) (alist->hash-table (_list (cons "a" 2) (cons "n" 1) (cons "d" 57))) (alist->hash-table (_list (cons "a" 1) (cons "n" 1) (cons "d" 239)))) (_list (alist->hash-table (_list (cons "a" 8) (cons "n" 1) (cons "d" 10))) (alist->hash-table (_list (cons "a" (- 1)) (cons "n" 1) (cons "d" 239))) (alist->hash-table (_list (cons "a" (- 4)) (cons "n" 1) (cons "d" 515)))) (_list (alist->hash-table (_list (cons "a" 12) (cons "n" 1) (cons "d" 18))) (alist->hash-table (_list (cons "a" 8) (cons "n" 1) (cons "d" 57))) (alist->hash-table (_list (cons "a" (- 5)) (cons "n" 1) (cons "d" 239)))) (_list (alist->hash-table (_list (cons "a" 16) (cons "n" 1) (cons "d" 21))) (alist->hash-table (_list (cons "a" 3) (cons "n" 1) (cons "d" 239))) (alist->hash-table (_list (cons "a" 4) (cons "n" 3) (cons "d" 1042)))) (_list (alist->hash-table (_list (cons "a" 22) (cons "n" 1) (cons "d" 28))) (alist->hash-table (_list (cons "a" 2) (cons "n" 1) (cons "d" 443))) (alist->hash-table (_list (cons "a" (- 5)) (cons "n" 1) (cons "d" 1393))) (alist->hash-table (_list (cons "a" (- 10)) (cons "n" 1) (cons "d" 11018)))) (_list (alist->hash-table (_list (cons "a" 22) (cons "n" 1) (cons "d" 38))) (alist->hash-table (_list (cons "a" 17) (cons "n" 7) (cons "d" 601))) (alist->hash-table (_list (cons "a" 10) (cons "n" 7) (cons "d" 8149)))) (_list (alist->hash-table (_list (cons "a" 44) (cons "n" 1) (cons "d" 57))) (alist->hash-table (_list (cons "a" 7) (cons "n" 1) (cons "d" 239))) (alist->hash-table (_list (cons "a" (- 12)) (cons "n" 1) (cons "d" 682))) (alist->hash-table (_list (cons "a" 24) (cons "n" 1) (cons "d" 12943)))) (_list (alist->hash-table (_list (cons "a" 88) (cons "n" 1) (cons "d" 172))) (alist->hash-table (_list (cons "a" 51) (cons "n" 1) (cons "d" 239))) (alist->hash-table (_list (cons "a" 32) (cons "n" 1) (cons "d" 682))) (alist->hash-table (_list (cons "a" 44) (cons "n" 1) (cons "d" 5357))) (alist->hash-table (_list (cons "a" 68) (cons "n" 1) (cons "d" 12943)))) (_list (alist->hash-table (_list (cons "a" 88) (cons "n" 1) (cons "d" 172))) (alist->hash-table (_list (cons "a" 51) (cons "n" 1) (cons "d" 239))) (alist->hash-table (_list (cons "a" 32) (cons "n" 1) (cons "d" 682))) (alist->hash-table (_list (cons "a" 44) (cons "n" 1) (cons "d" 5357))) (alist->hash-table (_list (cons "a" 68) (cons "n" 1) (cons "d" 12944))))))
(define (format ts) (call/cc (lambda (ret2) (let ((s "[")) (begin (let ((i 0)) (begin (call/cc (lambda (break4) (letrec ((loop3 (lambda () (if (< i (cond ((string? ts) (string-length ts)) ((hash-table? ts) (hash-table-size ts)) (else (length ts)))) (begin (let ((t (list-ref ts i))) (begin (set! s (string-append (string-append (string-append (string-append (string-append (string-append (string-append s "{") (to-str (hash-table-ref/default t "a" (quote ())))) " ") (to-str (hash-table-ref/default t "n" (quote ())))) " ") (to-str (hash-table-ref/default t "d" (quote ())))) "}")) (if (_lt i (- (cond ((string? ts) (string-length ts)) ((hash-table? ts) (hash-table-size ts)) (else (length ts))) 1)) (begin (set! s (string-append s " "))) (quote ())) (set! i (+ i 1)))) (loop3)) (quote ()))))) (loop3)))) (ret2 (string-append s "]")))))))))
(define (tanEval coef f) (call/cc (lambda (ret5) (begin (if (equal? coef 1) (begin (ret5 f)) (quote ())) (if (< coef 0) (begin (ret5 (- (tanEval (- coef) f)))) (quote ())) (let ((ca (quotient coef 2))) (begin (let ((cb (- coef ca))) (begin (let ((a (tanEval ca f))) (begin (let ((b (tanEval cb f))) (begin (ret5 (quotient (_add a b) (- 1 (* a b))))))))))))))))
(define (tans m) (call/cc (lambda (ret6) (begin (if (equal? (cond ((string? m) (string-length m)) ((hash-table? m) (hash-table-size m)) (else (length m))) 1) (begin (let ((t (list-ref m 0))) (begin (ret6 (tanEval (hash-table-ref/default t "a" (quote ())) (br (hash-table-ref/default t "n" (quote ())) (hash-table-ref/default t "d" (quote ())))))))) (quote ())) (let ((half (quotient (cond ((string? m) (string-length m)) ((hash-table? m) (hash-table-size m)) (else (length m))) 2))) (begin (let ((a (tans (take (drop m 0) (- half 0))))) (begin (let ((b (tans (take (drop m half) (- (length m) half))))) (begin (ret6 (quotient (_add a b) (- 1 (* a b))))))))))))))
(call/cc (lambda (break8) (letrec ((loop7 (lambda (xs) (if (null? xs) (quote ()) (begin (let ((ts (car xs))) (begin (_display (to-str (string-append (string-append (string-append "tan " (format ts)) " = ") (to-str (tans ts))))) (newline))) (loop7 (cdr xs))))))) (loop7 testCases))))
