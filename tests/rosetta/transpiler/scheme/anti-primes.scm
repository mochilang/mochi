;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (countDivisors n)
 (call/cc (lambda (ret1)
 (begin (if (< n 2)
 (begin (ret1 1)
)
 (quote nil)
)
 (let ((count 2)
)
 (begin (let ((i 2)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= i (quotient n 2)
)
 (begin (if (equal? (modulo n i)
 0)
 (begin (set! count (+ count 1)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 count)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (begin (display (to-str "The first 20 anti-primes are:")
)
 (newline)
 (let ((maxDiv 0)
)
 (begin (let ((count 0)
)
 (begin (let ((n 1)
)
 (begin (let ((line "")
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< count 20)
 (begin (let ((d (countDivisors n)
)
)
 (begin (if (> d maxDiv)
 (begin (set! line (string-append (string-append line (to-str n)
)
 " ")
)
 (set! maxDiv d)
 (set! count (+ count 1)
)
)
 (quote nil)
)
 (set! n (+ n 1)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (set! line (substring line 0 (- (cond ((string? line)
 (string-length line)
)
 ((hash-table? line)
 (hash-table-size line)
)
 (else (length line)
)
)
 1)
)
)
 (display (to-str line)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
