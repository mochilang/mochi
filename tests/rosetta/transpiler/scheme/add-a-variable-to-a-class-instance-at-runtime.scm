;; Generated on 2025-07-25 20:10 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi io))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(let ((start6 (now)
)
)
 (begin (define (main)
 (call/cc (lambda (ret1)
 (let ((ss (alist->hash-table (list (cons "runtimeFields" (alist->hash-table (list)
)
)
)
)
)
)
 (begin (display (to-str "Create two fields at runtime: \n")
)
 (newline)
 (let ((i 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= i 2)
 (begin (display (to-str (string-append (string-append "  Field #" (to-str i)
)
 ":\n")
)
)
 (newline)
 (display (to-str "       Enter name  : ")
)
 (newline)
 (let ((name (_input)
)
)
 (begin (display (to-str "       Enter value : ")
)
 (newline)
 (let ((value (_input)
)
)
 (begin (let ((fields (hash-table-ref ss "runtimeFields")
)
)
 (begin (hash-table-set! fields name value)
 (hash-table-set! ss "runtimeFields" fields)
 (display (to-str "\n")
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if #t (begin (display (to-str "Which field do you want to inspect ? ")
)
 (newline)
 (let ((name (_input)
)
)
 (begin (if (cond ((string? (hash-table-ref ss "runtimeFields")
)
 (if (string-contains (hash-table-ref ss "runtimeFields")
 name)
 #t #f)
)
 ((hash-table? (hash-table-ref ss "runtimeFields")
)
 (if (hash-table-exists? (hash-table-ref ss "runtimeFields")
 name)
 #t #f)
)
 (else (if (member name (hash-table-ref ss "runtimeFields")
)
 #t #f)
)
)
 (begin (let ((value (hash-table-ref/default (hash-table-ref ss "runtimeFields")
 name (quote ()
)
)
)
)
 (begin (display (to-str (string-append (string-append "Its value is '" value)
 "'")
)
)
 (newline)
 (ret1 (quote ()
)
)
)
)
)
 (begin (display (to-str "There is no field of that name, try again\n")
)
 (newline)
)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end7 (now)
)
)
 (let ((dur8 (quotient (- end7 start6)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur8)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
