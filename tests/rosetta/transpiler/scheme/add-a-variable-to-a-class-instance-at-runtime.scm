;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi io))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(define (main)
 (call/cc (lambda (ret1)
 (let ((ss (alist->hash-table (list (cons "runtimeFields" (alist->hash-table (list)
)
)
)
)
)
)
 (begin (display (to-str "Create two fields at runtime: \n")
)
 (newline)
 (let ((i 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= i 2)
 (begin (display (to-str (string-append (string-append "  Field #" (to-str i)
)
 ":\n")
)
)
 (newline)
 (display (to-str "       Enter name  : ")
)
 (newline)
 (let ((name (_input)
)
)
 (begin (display (to-str "       Enter value : ")
)
 (newline)
 (let ((value (_input)
)
)
 (begin (let ((fields (hash-table-ref ss "runtimeFields")
)
)
 (begin (hash-table-set! fields name value)
 (hash-table-set! ss "runtimeFields" fields)
 (display (to-str "\n")
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if #t (begin (display (to-str "Which field do you want to inspect ? ")
)
 (newline)
 (let ((name (_input)
)
)
 (begin (if (cond ((string? (hash-table-ref ss "runtimeFields")
)
 (if (string-contains (hash-table-ref ss "runtimeFields")
 name)
 #t #f)
)
 ((hash-table? (hash-table-ref ss "runtimeFields")
)
 (if (hash-table-exists? (hash-table-ref ss "runtimeFields")
 name)
 #t #f)
)
 (else (if (member name (hash-table-ref ss "runtimeFields")
)
 #t #f)
)
)
 (begin (let ((value (hash-table-ref (hash-table-ref ss "runtimeFields")
 name)
)
)
 (begin (display (to-str (string-append (string-append "Its value is '" value)
 "'")
)
)
 (newline)
 (ret1 (quote nil)
)
)
)
)
 (begin (display (to-str "There is no field of that name, try again\n")
)
 (newline)
)
)
)
)
 (loop4)
)
 (quote nil)
)
)
)
)
 (loop4)
)
)
)
)
)
)
)
)
)
)
(main)
