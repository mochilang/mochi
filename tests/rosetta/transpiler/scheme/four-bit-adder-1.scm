;; Generated on 2025-08-01 15:22 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (xor a b)
 (call/cc (lambda (ret1)
 (ret1 (or (and a (not b)
)
 (and (not a)
 b)
)
)
)
)
)
(define (ha a b)
 (call/cc (lambda (ret2)
 (ret2 (alist->hash-table (_list (cons "s" (xor a b)
)
 (cons "c" (and a b)
)
)
)
)
)
)
)
(define (fa a b c0)
 (call/cc (lambda (ret3)
 (let ((r1 (ha a c0)
)
)
 (begin (let ((r2 (ha (hash-table-ref r1 "s")
 b)
)
)
 (begin (ret3 (alist->hash-table (_list (cons "s" (hash-table-ref r2 "s")
)
 (cons "c" (or (hash-table-ref r1 "c")
 (hash-table-ref r2 "c")
)
)
)
)
)
)
)
)
)
)
)
)
(define (add4 a3 a2 a1 a0 b3 b2 b1 b0)
 (call/cc (lambda (ret4)
 (let ((r0 (fa a0 b0 #f)
)
)
 (begin (let ((r1 (fa a1 b1 (hash-table-ref r0 "c")
)
)
)
 (begin (let ((r2 (fa a2 b2 (hash-table-ref r1 "c")
)
)
)
 (begin (let ((r3 (fa a3 b3 (hash-table-ref r2 "c")
)
)
)
 (begin (ret4 (alist->hash-table (_list (cons "v" (hash-table-ref r3 "c")
)
 (cons "s3" (hash-table-ref r3 "s")
)
 (cons "s2" (hash-table-ref r2 "s")
)
 (cons "s1" (hash-table-ref r1 "s")
)
 (cons "s0" (hash-table-ref r0 "s")
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (b2i b)
 (call/cc (lambda (ret5)
 (begin (if b (begin (ret5 1)
)
 (quote ()
)
)
 (ret5 0)
)
)
)
)
(define (main)
 (call/cc (lambda (ret6)
 (let ((r (add4 #t #f #t #f #t #f #f #t)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (to-str (b2i (hash-table-ref r "v")
)
)
 " ")
 (to-str (b2i (hash-table-ref r "s3")
)
)
)
 " ")
 (to-str (b2i (hash-table-ref r "s2")
)
)
)
 " ")
 (to-str (b2i (hash-table-ref r "s1")
)
)
)
 " ")
 (to-str (b2i (hash-table-ref r "s0")
)
)
)
)
)
 (newline)
)
)
)
)
)
(main)
