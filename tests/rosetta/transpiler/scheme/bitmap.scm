;; Generated on 2025-07-27 01:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start24 (now)
)
)
 (begin (define (pixelFromRgb c)
 (call/cc (lambda (ret1)
 (let ((r (fmod (let ((v2 (/ c 65536)
)
)
 (cond ((string? v2)
 (inexact->exact (floor (string->number v2)
)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact (floor v2)
)
)
)
)
 256)
)
)
 (begin (let ((g (fmod (let ((v3 (/ c 256)
)
)
 (cond ((string? v3)
 (inexact->exact (floor (string->number v3)
)
)
)
 ((boolean? v3)
 (if v3 1 0)
)
 (else (inexact->exact (floor v3)
)
)
)
)
 256)
)
)
 (begin (let ((b (fmod c 256)
)
)
 (begin (ret1 (alist->hash-table (_list (cons "R" r)
 (cons "G" g)
 (cons "B" b)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (rgbFromPixel p)
 (call/cc (lambda (ret4)
 (ret4 (+ (+ (* (hash-table-ref p "R")
 65536)
 (* (hash-table-ref p "G")
 256)
)
 (hash-table-ref p "B")
)
)
)
)
)
 (define (NewBitmap x y)
 (call/cc (lambda (ret5)
 (let ((data (_list)
)
)
 (begin (let ((row 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< row y)
 (begin (let ((r (_list)
)
)
 (begin (let ((col 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< col x)
 (begin (set! r (append r (_list (alist->hash-table (_list (cons "R" 0)
 (cons "G" 0)
 (cons "B" 0)
)
)
)
)
)
 (set! col (+ col 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (set! data (append data (_list r)
)
)
 (set! row (+ row 1)
)
)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 (alist->hash-table (_list (cons "cols" x)
 (cons "rows" y)
 (cons "px" data)
)
)
)
)
)
)
)
)
)
)
 (define (Extent b)
 (call/cc (lambda (ret10)
 (ret10 (alist->hash-table (_list (cons "cols" (hash-table-ref b "cols")
)
 (cons "rows" (hash-table-ref b "rows")
)
)
)
)
)
)
)
 (define (Fill b p)
 (call/cc (lambda (ret11)
 (let ((y 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< y (hash-table-ref b "rows")
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< x (hash-table-ref b "cols")
)
 (begin (let ((px (hash-table-ref b "px")
)
)
 (begin (let ((row (list-ref px y)
)
)
 (begin (list-set! row x p)
 (list-set! px y row)
 (hash-table-set! b "px" px)
 (set! x (+ x 1)
)
)
)
)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (set! y (+ y 1)
)
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
)
)
)
)
)
 (define (FillRgb b c)
 (call/cc (lambda (ret16)
 (Fill b (pixelFromRgb c)
)
)
)
)
 (define (SetPx b x y p)
 (call/cc (lambda (ret17)
 (begin (if (or (or (or (< x 0)
 (>= x (hash-table-ref b "cols")
)
)
 (< y 0)
)
 (>= y (hash-table-ref b "rows")
)
)
 (begin (ret17 #f)
)
 (quote ()
)
)
 (let ((px (hash-table-ref b "px")
)
)
 (begin (let ((row (list-ref px y)
)
)
 (begin (list-set! row x p)
 (list-set! px y row)
 (hash-table-set! b "px" px)
 (ret17 #t)
)
)
)
)
)
)
)
)
 (define (SetPxRgb b x y c)
 (call/cc (lambda (ret18)
 (ret18 (SetPx b x y (pixelFromRgb c)
)
)
)
)
)
 (define (GetPx b x y)
 (call/cc (lambda (ret19)
 (begin (if (or (or (or (< x 0)
 (>= x (hash-table-ref b "cols")
)
)
 (< y 0)
)
 (>= y (hash-table-ref b "rows")
)
)
 (begin (ret19 (alist->hash-table (_list (cons "ok" #f)
)
)
)
)
 (quote ()
)
)
 (let ((row (list-ref (hash-table-ref b "px")
 y)
)
)
 (begin (ret19 (alist->hash-table (_list (cons "ok" #t)
 (cons "pixel" (list-ref row x)
)
)
)
)
)
)
)
)
)
)
 (define (GetPxRgb b x y)
 (call/cc (lambda (ret20)
 (let ((r (GetPx b x y)
)
)
 (begin (if (not (hash-table-ref r "ok")
)
 (begin (ret20 (alist->hash-table (_list (cons "ok" #f)
)
)
)
)
 (quote ()
)
)
 (ret20 (alist->hash-table (_list (cons "ok" #t)
 (cons "rgb" (rgbFromPixel (hash-table-ref r "pixel")
)
)
)
)
)
)
)
)
)
)
 (define (ppmSize b)
 (call/cc (lambda (ret21)
 (let ((header (string-append (string-append (string-append (string-append "P6\n# Creator: Rosetta Code http://rosettacode.org/\n" (to-str (hash-table-ref b "cols")
)
)
 " ")
 (to-str (hash-table-ref b "rows")
)
)
 "\n255\n")
)
)
 (begin (ret21 (+ (cond ((string? header)
 (string-length header)
)
 ((hash-table? header)
 (hash-table-size header)
)
 (else (length header)
)
)
 (* (* 3 (hash-table-ref b "cols")
)
 (hash-table-ref b "rows")
)
)
)
)
)
)
)
)
 (define (pixelStr p)
 (call/cc (lambda (ret22)
 (ret22 (string-append (string-append (string-append (string-append (string-append (string-append "{" (to-str (hash-table-ref p "R")
)
)
 " ")
 (to-str (hash-table-ref p "G")
)
)
 " ")
 (to-str (hash-table-ref p "B")
)
)
 "}")
)
)
)
)
 (define (main)
 (call/cc (lambda (ret23)
 (let ((bm (NewBitmap 300 240)
)
)
 (begin (FillRgb bm 16711680)
 (SetPxRgb bm 10 20 255)
 (SetPxRgb bm 20 30 0)
 (SetPxRgb bm 30 40 1056816)
 (let ((c1 (GetPx bm 0 0)
)
)
 (begin (let ((c2 (GetPx bm 10 20)
)
)
 (begin (let ((c3 (GetPx bm 30 40)
)
)
 (begin (display (to-str (string-append (string-append (string-append "Image size: " (to-str (hash-table-ref bm "cols")
)
)
 " Ã— ")
 (to-str (hash-table-ref bm "rows")
)
)
)
)
 (newline)
 (display (to-str (string-append (to-str (ppmSize bm)
)
 " bytes when encoded as PPM.")
)
)
 (newline)
 (if (hash-table-ref c1 "ok")
 (begin (display (to-str (string-append "Pixel at (0,0)
 is " (pixelStr (hash-table-ref c1 "pixel")
)
)
)
)
 (newline)
)
 (quote ()
)
)
 (if (hash-table-ref c2 "ok")
 (begin (display (to-str (string-append "Pixel at (10,20)
 is " (pixelStr (hash-table-ref c2 "pixel")
)
)
)
)
 (newline)
)
 (quote ()
)
)
 (if (hash-table-ref c3 "ok")
 (begin (let ((p (hash-table-ref c3 "pixel")
)
)
 (begin (let ((r16 (* (hash-table-ref p "R")
 257)
)
)
 (begin (let ((g16 (* (hash-table-ref p "G")
 257)
)
)
 (begin (let ((b16 (* (hash-table-ref p "B")
 257)
)
)
 (begin (display (to-str (string-append (string-append (string-append (string-append (string-append "Pixel at (30,40)
 has R=" (to-str r16)
)
 ", G=")
 (to-str g16)
)
 ", B=")
 (to-str b16)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end25 (now)
)
)
 (let ((dur26 (quotient (- end25 start24)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur26)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
