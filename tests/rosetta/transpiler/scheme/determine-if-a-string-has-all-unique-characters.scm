;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (indexOf3 s ch start)
 (call/cc (lambda (ret1)
 (let ((i start)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
(define (ord ch)
 (call/cc (lambda (ret4)
 (let ((digits "0123456789")
)
 (begin (let ((idx (indexOf3 digits ch 0)
)
)
 (begin (if (_ge idx 0)
 (begin (ret4 (_add 48 idx)
)
)
 (quote ()
)
)
 (if (string=? ch "X")
 (begin (ret4 88)
)
 (quote ()
)
)
 (if (string=? ch "é")
 (begin (ret4 233)
)
 (quote ()
)
)
 (if (string=? ch "😍")
 (begin (ret4 128525)
)
 (quote ()
)
)
 (if (string=? ch "🐡")
 (begin (ret4 128033)
)
 (quote ()
)
)
 (ret4 0)
)
)
)
)
)
)
)
(define (toHex n)
 (call/cc (lambda (ret5)
 (let ((digits "0123456789ABCDEF")
)
 (begin (if (equal? n 0)
 (begin (ret5 "0")
)
 (quote ()
)
)
 (let ((v n)
)
 (begin (let ((out "")
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (> v 0)
 (begin (let ((d (modulo v 16)
)
)
 (begin (set! out (string-append (substring digits d (+ d 1)
)
 out)
)
 (set! v (quotient v 16)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (ret5 out)
)
)
)
)
)
)
)
)
)
(define (analyze s)
 (call/cc (lambda (ret8)
 (let ((le (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append "Analyzing \"" s)
 "\" which has a length of ")
 (to-str le)
)
 ":")
)
)
 (newline)
 (if (> le 1)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (_lt i (- le 1)
)
 (begin (let ((j (+ i 1)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (< j le)
 (begin (if (string=? (substring s j (+ j 1)
)
 (substring s i (+ i 1)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (_display (to-str "  Not all characters in the string are unique.")
)
 (newline)
 (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "  '" ch)
 "' (0x")
 (lower (toHex (ord ch)
)
)
)
 ")
 is duplicated at positions ")
 (to-str (+ i 1)
)
)
 " and ")
 (to-str (+ j 1)
)
)
 ".\n")
)
)
 (newline)
 (ret8 (quote ()
)
)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
)
)
)
 (quote ()
)
)
 (_display (to-str "  All characters in the string are unique.\n")
)
 (newline)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret13)
 (let ((strings (_list "" "." "abcABC" "XYZ ZYX" "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ" "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X" "hétérogénéité" "🎆🎃🎇🎈" "😍😀🙌💃😍🙌" "🐠🐟🐡🦈🐬🐳🐋🐡")
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< i (cond ((string? strings)
 (string-length strings)
)
 ((hash-table? strings)
 (hash-table-size strings)
)
 (else (length strings)
)
)
)
 (begin (analyze (list-ref strings i)
)
 (set! i (+ i 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
)
)
)
)
)
)
)
(main)
