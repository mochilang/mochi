;; Generated on 2025-08-03 09:40 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start35 (now))) (begin (define (dbRec k n t p a seq) (call/cc (lambda (ret1) (begin (if (> t n) (begin (if (equal? (modulo n p) 0) (begin (let ((j 1)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (<= j p) (begin (set! seq (append seq (_list (list-ref a j)))) (set! j (+ j 1)) (loop2)) (quote ()))))) (loop2))))))) (quote ()))) (begin (list-set! a t (list-ref a (- t p))) (set! seq (dbRec k n (+ t 1) p a seq)) (let ((j (+ (list-ref a (- t p)) 1))) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (< j k) (begin (list-set! a t j) (set! seq (dbRec k n (+ t 1) t a seq)) (set! j (+ j 1)) (loop4)) (quote ()))))) (loop4)))))))) (ret1 seq))))) (define (deBruijn k n) (call/cc (lambda (ret6) (let ((digits "0123456789")) (begin (let ((alphabet digits)) (begin (if (< k 10) (begin (set! alphabet (_substring digits 0 k))) (quote ())) (let ((a (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (_lt i (* k n)) (begin (set! a (append a (_list 0))) (set! i (+ i 1)) (loop7)) (quote ()))))) (loop7)))) (let ((seq (_list))) (begin (set! seq (dbRec k n 1 1 a seq)) (let ((b "")) (begin (let ((idx 0)) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (< idx (cond ((string? seq) (string-length seq)) ((hash-table? seq) (hash-table-size seq)) (else (length seq)))) (begin (set! b (string-append b (_substring alphabet (list-ref seq idx) (+ (list-ref seq idx) 1)))) (set! idx (+ idx 1)) (loop9)) (quote ()))))) (loop9)))) (set! b (string-append b (_substring b 0 (- n 1)))) (ret6 b)))))))))))))))))) (define (allDigits s) (call/cc (lambda (ret11) (let ((i 0)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< i (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s)))) (begin (let ((ch (_substring s i (+ i 1)))) (begin (if (or (string<? ch "0") (string>? ch "9")) (begin (ret11 #f)) (quote ())) (set! i (+ i 1)))) (loop12)) (quote ()))))) (loop12)))) (ret11 #t)))))) (define (parseIntStr str) (call/cc (lambda (ret14) (let ((n 0)) (begin (let ((i 0)) (begin (call/cc (lambda (break16) (letrec ((loop15 (lambda () (if (< i (cond ((string? str) (string-length str)) ((hash-table? str) (hash-table-size str)) (else (length str)))) (begin (set! n (_add (* n 10) (let ((v17 (_substring str i (+ i 1)))) (cond ((string? v17) (inexact->exact (floor (string->number v17)))) ((boolean? v17) (if v17 1 0)) (else (inexact->exact (floor v17))))))) (set! i (+ i 1)) (loop15)) (quote ()))))) (loop15)))) (ret14 n)))))))) (define (validate db) (call/cc (lambda (ret18) (let ((le (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db))))) (begin (let ((found (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break20) (letrec ((loop19 (lambda () (if (< i 10000) (begin (set! found (append found (_list 0))) (set! i (+ i 1)) (loop19)) (quote ()))))) (loop19)))) (let ((j 0)) (begin (call/cc (lambda (break22) (letrec ((loop21 (lambda () (if (_lt j (- le 3)) (begin (let ((s (_substring db j (+ j 4)))) (begin (if (allDigits s) (begin (let ((n (parseIntStr s))) (begin (list-set! found n (+ (list-ref found n) 1))))) (quote ())) (set! j (+ j 1)))) (loop21)) (quote ()))))) (loop21)))) (let ((errs (_list))) (begin (let ((k 0)) (begin (call/cc (lambda (break24) (letrec ((loop23 (lambda () (if (< k 10000) (begin (if (equal? (list-ref found k) 0) (begin (set! errs (append errs (_list (string-append (string-append "    PIN number " (padLeft k 4)) " missing"))))) (if (> (list-ref found k) 1) (begin (set! errs (append errs (_list (string-append (string-append (string-append (string-append "    PIN number " (padLeft k 4)) " occurs ") (to-str (list-ref found k))) " times"))))) (quote ()))) (set! k (+ k 1)) (loop23)) (quote ()))))) (loop23)))) (let ((lerr (cond ((string? errs) (string-length errs)) ((hash-table? errs) (hash-table-size errs)) (else (length errs))))) (begin (if (equal? lerr 0) (begin (_display (to-str "  No errors found")) (newline)) (begin (let ((pl "s")) (begin (if (equal? lerr 1) (begin (set! pl "")) (quote ())) (_display (to-str (string-append (string-append (string-append (string-append "  " (to-str lerr)) " error") pl) " found:"))) (newline) (let ((msg (joinStr errs "\n"))) (begin (_display (to-str msg)) (newline)))))))))))))))))))))))) (define (padLeft n width) (call/cc (lambda (ret25) (let ((s (to-str n))) (begin (call/cc (lambda (break27) (letrec ((loop26 (lambda () (if (< (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) width) (begin (set! s (string-append "0" s)) (loop26)) (quote ()))))) (loop26)))) (ret25 s)))))) (define (joinStr xs sep) (call/cc (lambda (ret28) (let ((res "")) (begin (let ((i 0)) (begin (call/cc (lambda (break30) (letrec ((loop29 (lambda () (if (< i (cond ((string? xs) (string-length xs)) ((hash-table? xs) (hash-table-size xs)) (else (length xs)))) (begin (if (> i 0) (begin (set! res (string-append res sep))) (quote ())) (set! res (string-append res (list-ref xs i))) (set! i (+ i 1)) (loop29)) (quote ()))))) (loop29)))) (ret28 res)))))))) (define (reverse s) (call/cc (lambda (ret31) (let ((out "")) (begin (let ((i (- (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s))) 1))) (begin (call/cc (lambda (break33) (letrec ((loop32 (lambda () (if (>= i 0) (begin (set! out (string-append out (_substring s i (+ i 1)))) (set! i (- i 1)) (loop32)) (quote ()))))) (loop32)))) (ret31 out)))))))) (define (main) (call/cc (lambda (ret34) (let ((db (deBruijn 10 4))) (begin (let ((le (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db))))) (begin (_display (to-str (string-append "The length of the de Bruijn sequence is " (to-str le)))) (newline) (_display (to-str "\nThe first 130 digits of the de Bruijn sequence are:")) (newline) (_display (to-str (if (string? db) (_substring db 0 130) (take (drop db 0) (- 130 0))))) (newline) (_display (to-str "\nThe last 130 digits of the de Bruijn sequence are:")) (newline) (_display (to-str (if (string? db) (_substring db (- le 130) (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db)))) (take (drop db (- le 130)) (- (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db))) (- le 130)))))) (newline) (_display (to-str "\nValidating the de Bruijn sequence:")) (newline) (validate db) (_display (to-str "\nValidating the reversed de Bruijn sequence:")) (newline) (let ((dbr (reverse db))) (begin (validate dbr) (set! db (string-append (string-append (if (string? db) (_substring db 0 4443) (take (drop db 0) (- 4443 0))) ".") (if (string? db) (_substring db 4444 (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db)))) (take (drop db 4444) (- (cond ((string? db) (string-length db)) ((hash-table? db) (hash-table-size db)) (else (length db))) 4444))))) (_display (to-str "\nValidating the overlaid de Bruijn sequence:")) (newline) (validate db)))))))))) (main) (let ((end36 (now))) (let ((dur37 (quotient (- end36 start35) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur37) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
