;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (kPrime n k)
 (call/cc (lambda (ret1)
 (let ((nf 0)
)
 (begin (let ((i 2)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= i n)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (equal? (modulo n i)
 0)
 (begin (if (equal? nf k)
 (begin (ret1 #f)
)
 (quote nil)
)
 (set! nf (+ nf 1)
)
 (set! n (quotient n i)
)
 (loop4)
)
 (quote nil)
)
)
)
)
 (loop4)
)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (equal? nf k)
)
)
)
)
)
)
)
)
(define (gen k count)
 (call/cc (lambda (ret6)
 (let ((r (list)
)
)
 (begin (let ((n 2)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< (cond ((string? r)
 (string-length r)
)
 ((hash-table? r)
 (hash-table-size r)
)
 (else (length r)
)
)
 count)
 (begin (if (kPrime n k)
 (begin (set! r (append r (list n)
)
)
)
 (quote nil)
)
 (set! n (+ n 1)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (ret6 r)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret9)
 (let ((k 1)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (<= k 5)
 (begin (display (to-str (string-append (string-append (to-str k)
 " ")
 (to-str (gen k 10)
)
)
)
)
 (newline)
 (set! k (+ k 1)
)
 (loop10)
)
 (quote nil)
)
)
)
)
 (loop10)
)
)
)
)
)
)
)
)
(main)
