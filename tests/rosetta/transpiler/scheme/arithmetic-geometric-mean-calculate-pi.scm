;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (abs x)
 (call/cc (lambda (ret1)
 (begin (if (< x 0.0)
 (begin (ret1 (- x)
)
)
 (quote nil)
)
 (ret1 x)
)
)
)
)
(define (sqrtApprox x)
 (call/cc (lambda (ret2)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i 20)
 (begin (set! guess (/ (+ guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote nil)
)
)
)
)
 (loop3)
)
)
)
 (ret2 guess)
)
)
)
)
)
)
)
(define (agmPi)
 (call/cc (lambda (ret5)
 (let ((a 1.0)
)
 (begin (let ((g (/ 1.0 (sqrtApprox 2.0)
)
)
)
 (begin (let ((sum 0.0)
)
 (begin (let ((pow 2.0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (> (abs (- a g)
)
 1e-15)
 (begin (let ((t (/ (+ a g)
 2.0)
)
)
 (begin (let ((u (sqrtApprox (* a g)
)
)
)
 (begin (set! a t)
 (set! g u)
 (set! pow (* pow 2.0)
)
 (let ((diff (- (* a a)
 (* g g)
)
)
)
 (begin (set! sum (+ sum (* diff pow)
)
)
)
)
)
)
)
)
 (loop6)
)
 (quote nil)
)
)
)
)
 (loop6)
)
)
)
 (let ((pi (/ (* (* 4.0 a)
 a)
 (- 1.0 sum)
)
)
)
 (begin (ret5 pi)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret8)
 (begin (display (to-str (to-str (agmPi)
)
)
)
 (newline)
)
)
)
)
(main)
