;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start29 (now)
)
)
 (begin (define (push h it)
 (call/cc (lambda (ret1)
 (begin (set! h (append h (_list it)
)
)
 (let ((i (- (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
 1)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (and (> i 0)
 (> (cond ((string? (list-ref h (- i 1)
)
)
 (substring (list-ref h (- i 1)
)
 "s" (+ "s" 1)
)
)
 ((hash-table? (list-ref h (- i 1)
)
)
 (hash-table-ref (list-ref h (- i 1)
)
 "s")
)
 (else (list-ref (list-ref h (- i 1)
)
 "s")
)
)
 (cond ((string? (list-ref h i)
)
 (substring (list-ref h i)
 "s" (+ "s" 1)
)
)
 ((hash-table? (list-ref h i)
)
 (hash-table-ref (list-ref h i)
 "s")
)
 (else (list-ref (list-ref h i)
 "s")
)
)
)
)
 (begin (let ((tmp (list-ref h (- i 1)
)
)
)
 (begin (list-set! h (- i 1)
 (list-ref h i)
)
 (list-set! h i tmp)
 (set! i (- i 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 h)
)
)
)
)
)
)
 (define (step h nv dir)
 (call/cc (lambda (ret4)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (or (equal? (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
 0)
 (<= (* nv nv)
 (cond ((string? (list-ref h 0)
)
 (substring (list-ref h 0)
 "s" (+ "s" 1)
)
)
 ((hash-table? (list-ref h 0)
)
 (hash-table-ref (list-ref h 0)
 "s")
)
 (else (list-ref (list-ref h 0)
 "s")
)
)
)
)
 (begin (set! h (push h (alist->hash-table (_list (cons "s" (* nv nv)
)
 (cons "a" nv)
 (cons "b" 0)
)
)
)
)
 (set! nv (+ nv 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (let ((s (cond ((string? (list-ref h 0)
)
 (substring (list-ref h 0)
 "s" (+ "s" 1)
)
)
 ((hash-table? (list-ref h 0)
)
 (hash-table-ref (list-ref h 0)
 "s")
)
 (else (list-ref (list-ref h 0)
 "s")
)
)
)
)
 (begin (let ((v (_list)
)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (and (> (cond ((string? h)
 (string-length h)
)
 ((hash-table? h)
 (hash-table-size h)
)
 (else (length h)
)
)
 0)
 (equal? (cond ((string? (list-ref h 0)
)
 (substring (list-ref h 0)
 "s" (+ "s" 1)
)
)
 ((hash-table? (list-ref h 0)
)
 (hash-table-ref (list-ref h 0)
 "s")
)
 (else (list-ref (list-ref h 0)
 "s")
)
)
 s)
)
 (begin (let ((it (list-ref h 0)
)
)
 (begin (set! h (take (drop h 1)
 (- (length h)
 1)
)
)
 (set! v (append v (_list (_list (hash-table-ref/default it "a" (quote ()
)
)
 (hash-table-ref/default it "b" (quote ()
)
)
)
)
)
)
 (if (> (hash-table-ref/default it "a" (quote ()
)
)
 (hash-table-ref/default it "b" (quote ()
)
)
)
 (begin (set! h (push h (alist->hash-table (_list (cons "s" (+ (* (hash-table-ref/default it "a" (quote ()
)
)
 (hash-table-ref/default it "a" (quote ()
)
)
)
 (* (+ (hash-table-ref/default it "b" (quote ()
)
)
 1)
 (+ (hash-table-ref/default it "b" (quote ()
)
)
 1)
)
)
)
 (cons "a" (hash-table-ref/default it "a" (quote ()
)
)
)
 (cons "b" (+ (hash-table-ref/default it "b" (quote ()
)
)
 1)
)
)
)
)
)
)
 (quote ()
)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (let ((list (_list)
)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((p (car xs)
)
)
 (begin (set! list (append list (_list p)
)
)
)
)
 (loop9 (cdr xs)
)
)
)
)
)
)
 (loop9 v)
)
)
)
 (let ((temp list)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((p (car xs)
)
)
 (begin (if (not (equal? (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
 (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
)
)
 (begin (set! list (append list (_list (_list (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
 (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
 (loop11 (cdr xs)
)
)
)
)
)
)
 (loop11 temp)
)
)
)
 (set! temp list)
 (call/cc (lambda (break14)
 (letrec ((loop13 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((p (car xs)
)
)
 (begin (if (not (equal? (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
 0)
)
 (begin (set! list (append list (_list (_list (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
 (- (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
 (loop13 (cdr xs)
)
)
)
)
)
)
 (loop13 temp)
)
)
)
 (set! temp list)
 (call/cc (lambda (break16)
 (letrec ((loop15 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((p (car xs)
)
)
 (begin (if (not (equal? (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
 0)
)
 (begin (set! list (append list (_list (_list (- (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
)
 (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
 (loop15 (cdr xs)
)
)
)
)
)
)
 (loop15 temp)
)
)
)
 (let ((bestDot (- 999999999)
)
)
 (begin (let ((best dir)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((p (car xs)
)
)
 (begin (let ((cross (- (* (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
 (list-ref dir 1)
)
 (* (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
 (list-ref dir 0)
)
)
)
)
 (begin (if (>= cross 0)
 (begin (let ((dot (+ (* (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
 (list-ref dir 0)
)
 (* (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
 (list-ref dir 1)
)
)
)
)
 (begin (if (> dot bestDot)
 (begin (set! bestDot dot)
 (set! best p)
)
 (quote ()
)
)
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop17 (cdr xs)
)
)
)
)
)
)
 (loop17 list)
)
)
)
 (ret4 (alist->hash-table (_list (cons "d" best)
 (cons "heap" h)
 (cons "n" nv)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (positions n)
 (call/cc (lambda (ret19)
 (let ((pos (_list)
)
)
 (begin (let ((x 0)
)
 (begin (let ((y 0)
)
 (begin (let ((dir (_list 0 1)
)
)
 (begin (let ((heap (_list)
)
)
 (begin (let ((nv 1)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< i n)
 (begin (set! pos (append pos (_list (_list x y)
)
)
)
 (let ((st (step heap nv dir)
)
)
 (begin (set! dir (cond ((string? st)
 (substring st "d" (+ "d" 1)
)
)
 ((hash-table? st)
 (hash-table-ref st "d")
)
 (else (list-ref st "d")
)
)
)
 (set! heap (cond ((string? st)
 (substring st "heap" (+ "heap" 1)
)
)
 ((hash-table? st)
 (hash-table-ref st "heap")
)
 (else (list-ref st "heap")
)
)
)
 (set! nv (let ((v22 (cond ((string? st)
 (substring st "n" (+ "n" 1)
)
)
 ((hash-table? st)
 (hash-table-ref st "n")
)
 (else (list-ref st "n")
)
)
)
)
 (cond ((string? v22)
 (inexact->exact (string->number v22)
)
)
 ((boolean? v22)
 (if v22 1 0)
)
 (else (inexact->exact v22)
)
)
)
)
 (set! x (+ x (list-ref dir 0)
)
)
 (set! y (+ y (list-ref dir 1)
)
)
 (set! i (+ i 1)
)
)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (ret19 pos)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (pad s w)
 (call/cc (lambda (ret23)
 (let ((r s)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (< (cond ((string? r)
 (string-length r)
)
 ((hash-table? r)
 (hash-table-size r)
)
 (else (length r)
)
)
 w)
 (begin (set! r (string-append r " ")
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
 (ret23 r)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret26)
 (let ((pts (positions 40)
)
)
 (begin (display (to-str "The first 40 Babylonian spiral points are:")
)
 (newline)
 (let ((line "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break28)
 (letrec ((loop27 (lambda ()
 (if (< i (cond ((string? pts)
 (string-length pts)
)
 ((hash-table? pts)
 (hash-table-size pts)
)
 (else (length pts)
)
)
)
 (begin (let ((p (cond ((string? pts)
 (substring pts i (+ i 1)
)
)
 ((hash-table? pts)
 (hash-table-ref pts i)
)
 (else (list-ref pts i)
)
)
)
)
 (begin (let ((s (pad (string-append (string-append (string-append (string-append "(" (to-str (cond ((string? p)
 (substring p 0 (+ 0 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 0)
)
 (else (list-ref p 0)
)
)
)
)
 ", ")
 (to-str (cond ((string? p)
 (substring p 1 (+ 1 1)
)
)
 ((hash-table? p)
 (hash-table-ref p 1)
)
 (else (list-ref p 1)
)
)
)
)
 ")
")
 10)
)
)
 (begin (set! line (string-append line s)
)
 (if (equal? (modulo (+ i 1)
 10)
 0)
 (begin (display (to-str line)
)
 (newline)
 (set! line "")
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop27)
)
 (quote ()
)
)
)
)
)
 (loop27)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end30 (now)
)
)
 (let ((dur31 (quotient (- end30 start29)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur31)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
