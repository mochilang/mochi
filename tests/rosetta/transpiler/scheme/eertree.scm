;; Generated on 2025-07-28 10:03 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(let ((start21 (now)
)
)
 (begin (define EVEN_ROOT 0)
 (define ODD_ROOT 1)
 (define (newNode len)
 (call/cc (lambda (ret1)
 (ret1 (alist->hash-table (_list (cons "length" len)
 (cons "edges" (alist->hash-table (_list)
)
)
 (cons "suffix" 0)
)
)
)
)
)
)
 (define (eertree s)
 (call/cc (lambda (ret2)
 (let ((tree (_list)
)
)
 (begin (set! tree (append tree (_list (alist->hash-table (_list (cons "length" 0)
 (cons "suffix" ODD_ROOT)
 (cons "edges" (alist->hash-table (_list)
)
)
)
)
)
)
)
 (set! tree (append tree (_list (alist->hash-table (_list (cons "length" (- 1)
)
 (cons "suffix" ODD_ROOT)
 (cons "edges" (alist->hash-table (_list)
)
)
)
)
)
)
)
 (let ((suffix ODD_ROOT)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((c (substring s i (+ i 1)
)
)
)
 (begin (let ((n suffix)
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if #t (begin (set! k (let ((v7 (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "length" (+ "length" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "length")
)
 (else (list-ref (list-ref tree n)
 "length")
)
)
)
)
 (cond ((string? v7)
 (exact (floor (string->number v7)
)
)
)
 ((boolean? v7)
 (if v7 1 0)
)
 (else (exact (floor v7)
)
)
)
)
)
 (let ((b (- (- i k)
 1)
)
)
 (begin (if (and (>= b 0)
 (string=? (substring s b (+ b 1)
)
 c)
)
 (begin (break6 (quote ()
)
)
)
 (quote ()
)
)
 (set! n (let ((v8 (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "suffix" (+ "suffix" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "suffix")
)
 (else (list-ref (list-ref tree n)
 "suffix")
)
)
)
)
 (cond ((string? v8)
 (exact (floor (string->number v8)
)
)
)
 ((boolean? v8)
 (if v8 1 0)
)
 (else (exact (floor v8)
)
)
)
)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (let ((edges (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "edges" (+ "edges" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "edges")
)
 (else (list-ref (list-ref tree n)
 "edges")
)
)
)
)
 (begin (if (cond ((string? edges)
 (if (string-contains edges c)
 #t #f)
)
 ((hash-table? edges)
 (if (hash-table-exists? edges c)
 #t #f)
)
 (else (if (member c edges)
 #t #f)
)
)
 (begin (set! suffix (hash-table-ref/default edges c (quote ()
)
)
)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote ()
)
)
 (set! suffix (cond ((string? tree)
 (string-length tree)
)
 ((hash-table? tree)
 (hash-table-size tree)
)
 (else (length tree)
)
)
)
 (set! tree (append tree (_list (newNode (+ k 2)
)
)
)
)
 (hash-table-set! edges c suffix)
 (list-set! (list-ref tree n)
 "edges" edges)
 (if (equal? (let ((v9 (cond ((string? (list-ref tree suffix)
)
 (substring (list-ref tree suffix)
 "length" (+ "length" 1)
)
)
 ((hash-table? (list-ref tree suffix)
)
 (hash-table-ref (list-ref tree suffix)
 "length")
)
 (else (list-ref (list-ref tree suffix)
 "length")
)
)
)
)
 (cond ((string? v9)
 (exact (floor (string->number v9)
)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (exact (floor v9)
)
)
)
)
 1)
 (begin (list-set! (list-ref tree suffix)
 "suffix" 0)
 (set! i (+ i 1)
)
 (loop3)
)
 (quote ()
)
)
 (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if #t (begin (set! n (let ((v12 (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "suffix" (+ "suffix" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "suffix")
)
 (else (list-ref (list-ref tree n)
 "suffix")
)
)
)
)
 (cond ((string? v12)
 (exact (floor (string->number v12)
)
)
)
 ((boolean? v12)
 (if v12 1 0)
)
 (else (exact (floor v12)
)
)
)
)
)
 (let ((b (- (- i (let ((v13 (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "length" (+ "length" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "length")
)
 (else (list-ref (list-ref tree n)
 "length")
)
)
)
)
 (cond ((string? v13)
 (exact (floor (string->number v13)
)
)
)
 ((boolean? v13)
 (if v13 1 0)
)
 (else (exact (floor v13)
)
)
)
)
)
 1)
)
)
 (begin (if (and (>= b 0)
 (string=? (substring s b (+ b 1)
)
 c)
)
 (begin (break11 (quote ()
)
)
)
 (quote ()
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (let ((en (cond ((string? (list-ref tree n)
)
 (substring (list-ref tree n)
 "edges" (+ "edges" 1)
)
)
 ((hash-table? (list-ref tree n)
)
 (hash-table-ref (list-ref tree n)
 "edges")
)
 (else (list-ref (list-ref tree n)
 "edges")
)
)
)
)
 (begin (list-set! (list-ref tree suffix)
 "suffix" (hash-table-ref/default en c (quote ()
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
)
)
)
)
)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (ret2 tree)
)
)
)
)
)
)
)
)
)
 (define (child tree idx p acc)
 (call/cc (lambda (ret14)
 (let ((edges (cond ((string? (list-ref tree idx)
)
 (substring (list-ref tree idx)
 "edges" (+ "edges" 1)
)
)
 ((hash-table? (list-ref tree idx)
)
 (hash-table-ref (list-ref tree idx)
 "edges")
)
 (else (list-ref (list-ref tree idx)
 "edges")
)
)
)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((ch (car xs)
)
)
 (begin (let ((nxt (hash-table-ref/default edges ch (quote ()
)
)
)
)
 (begin (let ((pal (string-append (string-append ch p)
 ch)
)
)
 (begin (set! acc (append acc (_list pal)
)
)
 (set! acc (child tree nxt pal acc)
)
)
)
)
)
)
)
 (loop15 (cdr xs)
)
)
)
)
)
)
 (loop15 (hash-table-keys edges)
)
)
)
)
 (ret14 acc)
)
)
)
)
)
 (define (subPalindromes tree)
 (call/cc (lambda (ret17)
 (let ((res (_list)
)
)
 (begin (set! res (child tree EVEN_ROOT "" res)
)
 (let ((oEdges (cond ((string? (list-ref tree ODD_ROOT)
)
 (substring (list-ref tree ODD_ROOT)
 "edges" (+ "edges" 1)
)
)
 ((hash-table? (list-ref tree ODD_ROOT)
)
 (hash-table-ref (list-ref tree ODD_ROOT)
 "edges")
)
 (else (list-ref (list-ref tree ODD_ROOT)
 "edges")
)
)
)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((ch (car xs)
)
)
 (begin (set! res (append res (_list ch)
)
)
 (set! res (child tree (hash-table-ref/default oEdges ch (quote ()
)
)
 ch res)
)
)
)
 (loop18 (cdr xs)
)
)
)
)
)
)
 (loop18 (hash-table-keys oEdges)
)
)
)
)
 (ret17 res)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret20)
 (let ((tree (eertree "eertree")
)
)
 (begin (let ((subs (subPalindromes tree)
)
)
 (begin (_display (to-str (to-str subs)
)
)
 (newline)
)
)
)
)
)
)
)
 (main)
 (let ((end22 (now)
)
)
 (let ((dur23 (quotient (- end22 start21)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur23)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
