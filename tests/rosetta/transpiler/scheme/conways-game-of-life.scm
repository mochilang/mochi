;; Generated on 2025-08-03 00:11 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start34 (now))) (begin (define seed 1) (define (randN n) (call/cc (lambda (ret1) (begin (set! seed (modulo (_add (* seed 1664525) 1013904223) 2147483647)) (ret1 (modulo seed n)))))) (define (newField w h) (call/cc (lambda (ret2) (let ((rows (_list))) (begin (let ((y 0)) (begin (call/cc (lambda (break4) (letrec ((loop3 (lambda () (if (< y h) (begin (let ((row (_list))) (begin (let ((x 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< x w) (begin (set! row (append row (_list #f))) (set! x (+ x 1)) (loop5)) (quote ()))))) (loop5)))) (set! rows (append rows (_list row))) (set! y (+ y 1)))))) (loop3)) (quote ()))))) (loop3)))) (ret2 (alist->hash-table (_list (cons "s" rows) (cons "w" w) (cons "h" h))))))))))) (define (setCell f x y b) (call/cc (lambda (ret7) (let ((rows (hash-table-ref f "s"))) (begin (let ((row (list-ref rows y))) (begin (list-set! row x b) (list-set! rows y row) (hash-table-set! f "s" rows)))))))) (define (state f x y) (call/cc (lambda (ret8) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (< y 0) (begin (set! y (+ y (hash-table-ref f "h"))) (loop9)) (quote ()))))) (loop9)))) (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< x 0) (begin (set! x (+ x (hash-table-ref f "w"))) (loop11)) (quote ()))))) (loop11)))) (ret8 (cond ((string? (list-ref (hash-table-ref f "s") (modulo y (hash-table-ref f "h")))) (_substring (list-ref (hash-table-ref f "s") (modulo y (hash-table-ref f "h"))) (modulo x (hash-table-ref f "w")) (+ (modulo x (hash-table-ref f "w")) 1))) ((hash-table? (list-ref (hash-table-ref f "s") (modulo y (hash-table-ref f "h")))) (hash-table-ref (list-ref (hash-table-ref f "s") (modulo y (hash-table-ref f "h"))) (modulo x (hash-table-ref f "w")))) (else (list-ref (list-ref (hash-table-ref f "s") (modulo y (hash-table-ref f "h"))) (modulo x (hash-table-ref f "w")))))))))) (define (nextState f x y) (call/cc (lambda (ret13) (let ((count 0)) (begin (let ((dy (- 1))) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (<= dy 1) (begin (let ((dx (- 1))) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (<= dx 1) (begin (if (and (not (and (equal? dx 0) (equal? dy 0))) (state f (+ x dx) (+ y dy))) (begin (set! count (+ count 1))) (quote ())) (set! dx (+ dx 1)) (loop16)) (quote ()))))) (loop16)))) (set! dy (+ dy 1)))) (loop14)) (quote ()))))) (loop14)))) (ret13 (or (equal? count 3) (and (equal? count 2) (state f x y))))))))))) (define (newLife w h) (call/cc (lambda (ret18) (let ((a (newField w h))) (begin (let ((i 0)) (begin (call/cc (lambda (break20) (letrec ((loop19 (lambda () (if (< i (quotient (* w h) 2)) (begin (setCell a (randN w) (randN h) #t) (set! i (+ i 1)) (loop19)) (quote ()))))) (loop19)))) (ret18 (alist->hash-table (_list (cons "a" a) (cons "b" (newField w h)) (cons "w" w) (cons "h" h))))))))))) (define (step l) (call/cc (lambda (ret21) (let ((y 0)) (begin (call/cc (lambda (break23) (letrec ((loop22 (lambda () (if (< y (hash-table-ref l "h")) (begin (let ((x 0)) (begin (call/cc (lambda (break25) (letrec ((loop24 (lambda () (if (< x (hash-table-ref l "w")) (begin (setCell (hash-table-ref l "b") x y (nextState (hash-table-ref l "a") x y)) (set! x (+ x 1)) (loop24)) (quote ()))))) (loop24)))) (set! y (+ y 1)))) (loop22)) (quote ()))))) (loop22)))) (let ((tmp (hash-table-ref l "a"))) (begin (hash-table-set! l "a" (hash-table-ref l "b")) (hash-table-set! l "b" tmp)))))))) (define (lifeString l) (call/cc (lambda (ret26) (let ((out "")) (begin (let ((y 0)) (begin (call/cc (lambda (break28) (letrec ((loop27 (lambda () (if (< y (hash-table-ref l "h")) (begin (let ((x 0)) (begin (call/cc (lambda (break30) (letrec ((loop29 (lambda () (if (< x (hash-table-ref l "w")) (begin (if (state (hash-table-ref l "a") x y) (begin (set! out (string-append out "*"))) (begin (set! out (string-append out " ")))) (set! x (+ x 1)) (loop29)) (quote ()))))) (loop29)))) (set! out (string-append out "\n")) (set! y (+ y 1)))) (loop27)) (quote ()))))) (loop27)))) (ret26 out)))))))) (define (main) (call/cc (lambda (ret31) (let ((l (newLife 80 15))) (begin (let ((i 0)) (begin (call/cc (lambda (break33) (letrec ((loop32 (lambda () (if (< i 300) (begin (step l) (_display (to-str "\x0C;")) (newline) (_display (to-str (lifeString l))) (newline) (set! i (+ i 1)) (loop32)) (quote ()))))) (loop32))))))))))) (main) (let ((end35 (now))) (let ((dur36 (quotient (- end35 start34) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur36) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
