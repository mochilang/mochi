;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (xor a b)
 (call/cc (lambda (ret1)
 (let ((res 0)
)
 (begin (let ((bit 1)
)
 (begin (let ((x a)
)
 (begin (let ((y b)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (or (> x 0)
 (> y 0)
)
 (begin (let ((abit (modulo x 2)
)
)
 (begin (let ((bbit (modulo y 2)
)
)
 (begin (if (not (equal? abit bbit)
)
 (begin (set! res (+ res bit)
)
)
 (quote ()
)
)
 (set! x (quotient x 2)
)
 (set! y (quotient y 2)
)
 (set! bit (* bit 2)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 res)
)
)
)
)
)
)
)
)
)
)
)
(define (rshift x n)
 (call/cc (lambda (ret4)
 (let ((v x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i n)
 (begin (set! v (quotient v 2)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 v)
)
)
)
)
)
)
)
(define (ord ch)
 (call/cc (lambda (ret7)
 (let ((upper "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
)
 (begin (let ((lower "abcdefghijklmnopqrstuvwxyz")
)
 (begin (let ((idx (indexOf upper ch)
)
)
 (begin (if (>= idx 0)
 (begin (ret7 (+ 65 idx)
)
)
 (quote ()
)
)
 (set! idx (indexOf lower ch)
)
 (if (>= idx 0)
 (begin (ret7 (+ 97 idx)
)
)
 (quote ()
)
)
 (if (string=? ch " ")
 (begin (ret7 32)
)
 (quote ()
)
)
 (ret7 0)
)
)
)
)
)
)
)
)
)
(define (toHex n)
 (call/cc (lambda (ret8)
 (let ((digits "0123456789ABCDEF")
)
 (begin (if (equal? n 0)
 (begin (ret8 "0")
)
 (quote ()
)
)
 (let ((v n)
)
 (begin (let ((out "")
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (> v 0)
 (begin (let ((d (modulo v 16)
)
)
 (begin (set! out (string-append (substring digits d (+ d 1)
)
 out)
)
 (set! v (quotient v 16)
)
)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (ret8 out)
)
)
)
)
)
)
)
)
)
(define (crc32Table)
 (call/cc (lambda (ret11)
 (let ((table (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i 256)
 (begin (let ((word i)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j 8)
 (begin (if (equal? (modulo word 2)
 1)
 (begin (set! word (xor (rshift word 1)
 3988292384)
)
)
 (begin (set! word (rshift word 1)
)
)
)
 (set! j (+ j 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (set! table (append table (_list word)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (ret11 table)
)
)
)
)
)
)
)
(define table (crc32Table)
)
(define (crc32 s)
 (call/cc (lambda (ret16)
 (let ((crc 4294967295)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((c (ord (substring s i (+ i 1)
)
)
)
)
 (begin (let ((idx (xor (modulo crc 256)
 c)
)
)
 (begin (set! crc (xor (cond ((string? table)
 (substring table idx (+ idx 1)
)
)
 ((hash-table? table)
 (hash-table-ref table idx)
)
 (else (list-ref table idx)
)
)
 (rshift crc 8)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (ret16 (- 4294967295 crc)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret19)
 (let ((s "The quick brown fox jumps over the lazy dog")
)
 (begin (let ((result (crc32 s)
)
)
 (begin (let ((hex (lower (toHex result)
)
)
)
 (begin (_display (to-str hex)
)
 (newline)
)
)
)
)
)
)
)
)
)
(main)
