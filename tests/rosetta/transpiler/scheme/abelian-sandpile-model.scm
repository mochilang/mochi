;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define dim 16)
(define (newPile d)
 (call/cc (lambda (ret1)
 (let ((b (list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< y d)
 (begin (let ((row (list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< x d)
 (begin (set! row (append row (list 0)
)
)
 (set! x (+ x 1)
)
 (loop4)
)
 (quote nil)
)
)
)
)
 (loop4)
)
)
)
 (set! b (append b (list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 b)
)
)
)
)
)
)
)
(define (handlePile pile x y)
 (call/cc (lambda (ret6)
 (begin (if (>= (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 x)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 x)
)
 (else (list-ref (list-ref pile y)
 x)
)
)
 4)
 (begin (list-set! (list-ref pile y)
 x (- (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 x)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 x)
)
 (else (list-ref (list-ref pile y)
 x)
)
)
 4)
)
 (if (> y 0)
 (begin (list-set! (list-ref pile (- y 1)
)
 x (+ (cond ((string? (list-ref pile (- y 1)
)
)
 (string-ref (list-ref pile (- y 1)
)
 x)
)
 ((hash-table? (list-ref pile (- y 1)
)
)
 (hash-table-ref (list-ref pile (- y 1)
)
 x)
)
 (else (list-ref (list-ref pile (- y 1)
)
 x)
)
)
 1)
)
 (if (>= (cond ((string? (list-ref pile (- y 1)
)
)
 (string-ref (list-ref pile (- y 1)
)
 x)
)
 ((hash-table? (list-ref pile (- y 1)
)
)
 (hash-table-ref (list-ref pile (- y 1)
)
 x)
)
 (else (list-ref (list-ref pile (- y 1)
)
 x)
)
)
 4)
 (begin (set! pile (handlePile pile x (- y 1)
)
)
)
 (quote nil)
)
)
 (quote nil)
)
 (if (> x 0)
 (begin (list-set! (list-ref pile y)
 (- x 1)
 (+ (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 (- x 1)
)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 (- x 1)
)
)
 (else (list-ref (list-ref pile y)
 (- x 1)
)
)
)
 1)
)
 (if (>= (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 (- x 1)
)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 (- x 1)
)
)
 (else (list-ref (list-ref pile y)
 (- x 1)
)
)
)
 4)
 (begin (set! pile (handlePile pile (- x 1)
 y)
)
)
 (quote nil)
)
)
 (quote nil)
)
 (if (< y (- dim 1)
)
 (begin (list-set! (list-ref pile (+ y 1)
)
 x (+ (cond ((string? (list-ref pile (+ y 1)
)
)
 (string-ref (list-ref pile (+ y 1)
)
 x)
)
 ((hash-table? (list-ref pile (+ y 1)
)
)
 (hash-table-ref (list-ref pile (+ y 1)
)
 x)
)
 (else (list-ref (list-ref pile (+ y 1)
)
 x)
)
)
 1)
)
 (if (>= (cond ((string? (list-ref pile (+ y 1)
)
)
 (string-ref (list-ref pile (+ y 1)
)
 x)
)
 ((hash-table? (list-ref pile (+ y 1)
)
)
 (hash-table-ref (list-ref pile (+ y 1)
)
 x)
)
 (else (list-ref (list-ref pile (+ y 1)
)
 x)
)
)
 4)
 (begin (set! pile (handlePile pile x (+ y 1)
)
)
)
 (quote nil)
)
)
 (quote nil)
)
 (if (< x (- dim 1)
)
 (begin (list-set! (list-ref pile y)
 (+ x 1)
 (+ (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 (+ x 1)
)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 (+ x 1)
)
)
 (else (list-ref (list-ref pile y)
 (+ x 1)
)
)
)
 1)
)
 (if (>= (cond ((string? (list-ref pile y)
)
 (string-ref (list-ref pile y)
 (+ x 1)
)
)
 ((hash-table? (list-ref pile y)
)
 (hash-table-ref (list-ref pile y)
 (+ x 1)
)
)
 (else (list-ref (list-ref pile y)
 (+ x 1)
)
)
)
 4)
 (begin (set! pile (handlePile pile (+ x 1)
 y)
)
)
 (quote nil)
)
)
 (quote nil)
)
 (set! pile (handlePile pile x y)
)
)
 (quote nil)
)
 (ret6 pile)
)
)
)
)
(define (drawPile pile d)
 (call/cc (lambda (ret7)
 (let ((chars (list " " "░" "▓" "█")
)
)
 (begin (let ((row 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< row d)
 (begin (let ((line "")
)
 (begin (let ((col 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< col d)
 (begin (let ((v (cond ((string? (list-ref pile row)
)
 (string-ref (list-ref pile row)
 col)
)
 ((hash-table? (list-ref pile row)
)
 (hash-table-ref (list-ref pile row)
 col)
)
 (else (list-ref (list-ref pile row)
 col)
)
)
)
)
 (begin (if (> v 3)
 (begin (set! v 3)
)
 (quote nil)
)
 (set! line (string-append line (list-ref chars v)
)
)
 (set! col (+ col 1)
)
)
)
 (loop10)
)
 (quote nil)
)
)
)
)
 (loop10)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! row (+ row 1)
)
)
)
)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret12)
 (let ((pile (newPile 16)
)
)
 (begin (let ((hdim 7)
)
 (begin (list-set! (list-ref pile hdim)
 hdim 16)
 (set! pile (handlePile pile hdim hdim)
)
 (drawPile pile 16)
)
)
)
)
)
)
)
(main)
