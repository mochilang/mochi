;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start8 (now)
)
)
 (begin (define (padLeft s w)
 (call/cc (lambda (ret1)
 (let ((res "")
)
 (begin (let ((n (- w (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (> n 0)
 (begin (set! res (string-append res " ")
)
 (set! n (- n 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (string-append res s)
)
)
)
)
)
)
)
)
 (define dna (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "" "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG")
 "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG")
 "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT")
 "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT")
 "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG")
 "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA")
 "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT")
 "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG")
 "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC")
 "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT")
)
 (display (to-str "SEQUENCE:")
)
 (newline)
 (define le (cond ((string? dna)
 (string-length dna)
)
 ((hash-table? dna)
 (hash-table-size dna)
)
 (else (length dna)
)
)
)
 (define i 0)
 (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< i le)
 (begin (let ((k (+ i 50)
)
)
 (begin (if (> k le)
 (begin (set! k le)
)
 (quote ()
)
)
 (display (to-str (string-append (string-append (padLeft (to-str i)
 5)
 ": ")
 (substring dna i k)
)
)
)
 (newline)
 (set! i (+ i 50)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (define a 0)
 (define c 0)
 (define g 0)
 (define t 0)
 (define idx 0)
 (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< idx le)
 (begin (let ((ch (substring dna idx (+ idx 1)
)
)
)
 (begin (if (string=? ch "A")
 (begin (set! a (+ a 1)
)
)
 (begin (if (string=? ch "C")
 (begin (set! c (+ c 1)
)
)
 (begin (if (string=? ch "G")
 (begin (set! g (+ g 1)
)
)
 (begin (if (string=? ch "T")
 (begin (set! t (+ t 1)
)
)
 (quote ()
)
)
)
)
)
)
)
)
 (set! idx (+ idx 1)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (display (to-str "")
)
 (newline)
 (display (to-str "BASE COUNT:")
)
 (newline)
 (display (to-str (string-append "    A: " (padLeft (to-str a)
 3)
)
)
)
 (newline)
 (display (to-str (string-append "    C: " (padLeft (to-str c)
 3)
)
)
)
 (newline)
 (display (to-str (string-append "    G: " (padLeft (to-str g)
 3)
)
)
)
 (newline)
 (display (to-str (string-append "    T: " (padLeft (to-str t)
 3)
)
)
)
 (newline)
 (display (to-str "    ------")
)
 (newline)
 (display (to-str (string-append "    Î£: " (to-str le)
)
)
)
 (newline)
 (display (to-str "    ======")
)
 (newline)
 (let ((end9 (now)
)
)
 (let ((dur10 (quotient (- end9 start8)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur10)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
