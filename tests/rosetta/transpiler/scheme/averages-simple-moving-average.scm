;; Generated on 2025-07-25 21:06 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start17 (now)
)
)
 (begin (define (indexOf s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
 (define (fmt3 x)
 (call/cc (lambda (ret4)
 (let ((y (/ (let ((v5 (+ (* x 1000.0)
 0.5)
)
)
 (cond ((string? v5)
 (inexact->exact (string->number v5)
)
)
 ((boolean? v5)
 (if v5 1 0)
)
 (else (inexact->exact v5)
)
)
)
 1000.0)
)
)
 (begin (let ((s (to-str y)
)
)
 (begin (let ((dot (indexOf s ".")
)
)
 (begin (if (equal? dot (- 0 1)
)
 (begin (set! s (string-append s ".000")
)
)
 (begin (let ((decs (- (- (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 dot)
 1)
)
)
 (begin (if (> decs 3)
 (begin (set! s (substring s 0 (+ dot 4)
)
)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (< decs 3)
 (begin (set! s (string-append s "0")
)
 (set! decs (+ decs 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
)
)
)
)
)
)
 (ret4 s)
)
)
)
)
)
)
)
)
)
 (define (pad s width)
 (call/cc (lambda (ret8)
 (let ((out s)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (< (cond ((string? out)
 (string-length out)
)
 ((hash-table? out)
 (hash-table-size out)
)
 (else (length out)
)
)
 width)
 (begin (set! out (string-append " " out)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (ret8 out)
)
)
)
)
)
 (define (smaSeries xs period)
 (call/cc (lambda (ret11)
 (let ((res (list)
)
)
 (begin (let ((sum 0.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (set! sum (+ sum (list-ref xs i)
)
)
 (if (>= i period)
 (begin (set! sum (- sum (list-ref xs (- i period)
)
)
)
)
 (quote ()
)
)
 (let ((denom (+ i 1)
)
)
 (begin (if (> denom period)
 (begin (set! denom period)
)
 (quote ()
)
)
 (set! res (append res (list (/ sum denom)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (ret11 res)
)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret14)
 (let ((xs (list 1.0 2.0 3.0 4.0 5.0 5.0 4.0 3.0 2.0 1.0)
)
)
 (begin (let ((sma3 (smaSeries xs 3)
)
)
 (begin (let ((sma5 (smaSeries xs 5)
)
)
 (begin (display (to-str "x       sma3   sma5")
)
 (newline)
 (let ((i 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< i (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
)
 (begin (let ((line (string-append (string-append (string-append (string-append (pad (fmt3 (list-ref xs i)
)
 5)
 "  ")
 (pad (fmt3 (cond ((string? sma3)
 (substring sma3 i (+ i 1)
)
)
 ((hash-table? sma3)
 (hash-table-ref sma3 i)
)
 (else (list-ref sma3 i)
)
)
)
 5)
)
 "  ")
 (pad (fmt3 (cond ((string? sma5)
 (substring sma5 i (+ i 1)
)
)
 ((hash-table? sma5)
 (hash-table-ref sma5 i)
)
 (else (list-ref sma5 i)
)
)
)
 5)
)
)
)
 (begin (display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end18 (now)
)
)
 (let ((dur19 (quotient (- end18 start17)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur19)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
