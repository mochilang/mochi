;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start17 (now)
)
)
 (begin (define (initGrid size)
 (call/cc (lambda (ret1)
 (let ((g (_list)
)
)
 (begin (let ((y 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< y size)
 (begin (let ((row (_list)
)
)
 (begin (let ((x 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< x size)
 (begin (set! row (append row (_list " ")
)
)
 (set! x (+ x 1)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! g (append g (_list row)
)
)
 (set! y (+ y 1)
)
)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 g)
)
)
)
)
)
)
)
 (define (set g x y)
 (call/cc (lambda (ret6)
 (if (and (and (and (>= x 0)
 (< x (cond ((string? (list-ref g 0)
)
 (string-length (list-ref g 0)
)
)
 ((hash-table? (list-ref g 0)
)
 (hash-table-size (list-ref g 0)
)
)
 (else (length (list-ref g 0)
)
)
)
)
)
 (>= y 0)
)
 (< y (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
)
 (begin (list-set! (list-ref g y)
 x "#")
)
 (quote ()
)
)
)
)
)
 (define (circle r)
 (call/cc (lambda (ret7)
 (let ((size (+ (* r 2)
 1)
)
)
 (begin (let ((g (initGrid size)
)
)
 (begin (let ((x r)
)
 (begin (let ((y 0)
)
 (begin (let ((err (- 1 r)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (<= y x)
 (begin (set g (+ r x)
 (+ r y)
)
 (set g (+ r y)
 (+ r x)
)
 (set g (- r x)
 (+ r y)
)
 (set g (- r y)
 (+ r x)
)
 (set g (- r x)
 (- r y)
)
 (set g (- r y)
 (- r x)
)
 (set g (+ r x)
 (- r y)
)
 (set g (+ r y)
 (- r x)
)
 (set! y (+ y 1)
)
 (if (< err 0)
 (begin (set! err (+ (+ err (* 2 y)
)
 1)
)
)
 (begin (set! x (- x 1)
)
 (set! err (+ (+ err (* 2 (- y x)
)
)
 1)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 g)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (trimRight row)
 (call/cc (lambda (ret10)
 (let ((end (cond ((string? row)
 (string-length row)
)
 ((hash-table? row)
 (hash-table-size row)
)
 (else (length row)
)
)
)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (and (> end 0)
 (string=? (list-ref row (- end 1)
)
 " ")
)
 (begin (set! end (- end 1)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (let ((s "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i end)
 (begin (set! s (string-append s (list-ref row i)
)
)
 (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret10 s)
)
)
)
)
)
)
)
)
)
 (define g (circle 10)
)
 (call/cc (lambda (break16)
 (letrec ((loop15 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((row (car xs)
)
)
 (begin (display (to-str (trimRight row)
)
)
 (newline)
)
)
 (loop15 (cdr xs)
)
)
)
)
)
)
 (loop15 g)
)
)
)
 (let ((end18 (now)
)
)
 (let ((dur19 (quotient (- end18 start17)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur19)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
