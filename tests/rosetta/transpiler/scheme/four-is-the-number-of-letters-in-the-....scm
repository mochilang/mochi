;; Generated on 2025-08-01 15:22 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define small (_list "zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten" "eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen")
)
(define tens (_list "" "" "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety")
)
(define smallOrd (_list "zeroth" "first" "second" "third" "fourth" "fifth" "sixth" "seventh" "eighth" "ninth" "tenth" "eleventh" "twelfth" "thirteenth" "fourteenth" "fifteenth" "sixteenth" "seventeenth" "eighteenth" "nineteenth")
)
(define tensOrd (_list "" "" "twentieth" "thirtieth" "fortieth" "fiftieth" "sixtieth" "seventieth" "eightieth" "ninetieth")
)
(define (say n)
 (call/cc (lambda (ret1)
 (begin (if (< n 20)
 (begin (ret1 (list-ref small n)
)
)
 (quote ()
)
)
 (if (< n 100)
 (begin (let ((res (list-ref tens (quotient n 10)
)
)
)
 (begin (let ((m (modulo n 10)
)
)
 (begin (if (not (equal? m 0)
)
 (begin (set! res (string-append (string-append res "-")
 (list-ref small m)
)
)
)
 (quote ()
)
)
 (ret1 res)
)
)
)
)
)
 (quote ()
)
)
 (if (< n 1000)
 (begin (let ((res (string-append (say (quotient n 100)
)
 " hundred")
)
)
 (begin (let ((m (modulo n 100)
)
)
 (begin (if (not (equal? m 0)
)
 (begin (set! res (string-append (string-append res " ")
 (say m)
)
)
)
 (quote ()
)
)
 (ret1 res)
)
)
)
)
)
 (quote ()
)
)
 (if (< n 1000000)
 (begin (let ((res (string-append (say (quotient n 1000)
)
 " thousand")
)
)
 (begin (let ((m (modulo n 1000)
)
)
 (begin (if (not (equal? m 0)
)
 (begin (set! res (string-append (string-append res " ")
 (say m)
)
)
)
 (quote ()
)
)
 (ret1 res)
)
)
)
)
)
 (quote ()
)
)
 (let ((res (string-append (say (quotient n 1000000)
)
 " million")
)
)
 (begin (let ((m (modulo n 1000000)
)
)
 (begin (if (not (equal? m 0)
)
 (begin (set! res (string-append (string-append res " ")
 (say m)
)
)
)
 (quote ()
)
)
 (ret1 res)
)
)
)
)
)
)
)
)
(define (sayOrdinal n)
 (call/cc (lambda (ret2)
 (begin (if (< n 20)
 (begin (ret2 (list-ref smallOrd n)
)
)
 (quote ()
)
)
 (if (< n 100)
 (begin (if (equal? (modulo n 10)
 0)
 (begin (ret2 (list-ref tensOrd (quotient n 10)
)
)
)
 (quote ()
)
)
 (ret2 (string-append (string-append (say (- n (modulo n 10)
)
)
 "-")
 (list-ref smallOrd (modulo n 10)
)
)
)
)
 (quote ()
)
)
 (if (< n 1000)
 (begin (if (equal? (modulo n 100)
 0)
 (begin (ret2 (string-append (say (quotient n 100)
)
 " hundredth")
)
)
 (quote ()
)
)
 (ret2 (string-append (string-append (say (quotient n 100)
)
 " hundred ")
 (sayOrdinal (modulo n 100)
)
)
)
)
 (quote ()
)
)
 (if (< n 1000000)
 (begin (if (equal? (modulo n 1000)
 0)
 (begin (ret2 (string-append (say (quotient n 1000)
)
 " thousandth")
)
)
 (quote ()
)
)
 (ret2 (string-append (string-append (say (quotient n 1000)
)
 " thousand ")
 (sayOrdinal (modulo n 1000)
)
)
)
)
 (quote ()
)
)
 (if (equal? (modulo n 1000000)
 0)
 (begin (ret2 (string-append (say (quotient n 1000000)
)
 " millionth")
)
)
 (quote ()
)
)
 (ret2 (string-append (string-append (say (quotient n 1000000)
)
 " million ")
 (sayOrdinal (modulo n 1000000)
)
)
)
)
)
)
)
(define (split s sep)
 (call/cc (lambda (ret3)
 (let ((parts (_list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (and (and (> (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
 0)
 (_le (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (string=? (substring s i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
 sep)
)
 (begin (set! parts (append parts (_list cur)
)
)
 (set! cur "")
 (set! i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
)
 (begin (set! cur (string-append cur (substring s i (+ i 1)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (set! parts (append parts (_list cur)
)
)
 (ret3 parts)
)
)
)
)
)
)
)
)
)
(define (countLetters s)
 (call/cc (lambda (ret6)
 (let ((cnt 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (let ((ch (substring s i (+ i 1)
)
)
)
 (begin (if (or (and (string>=? ch "A")
 (string<=? ch "Z")
)
 (and (string>=? ch "a")
 (string<=? ch "z")
)
)
 (begin (set! cnt (+ cnt 1)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 cnt)
)
)
)
)
)
)
)
(define words (_list "Four" "is" "the" "number" "of" "letters" "in" "the" "first" "word" "of" "this" "sentence,")
)
(define idx 0)
(define (wordLen w)
 (call/cc (lambda (ret9)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
 w)
 (begin (set! idx (+ idx 1)
)
 (let ((n (countLetters (list-ref words idx)
)
)
)
 (begin (let ((parts (split (say n)
 " ")
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< j (cond ((string? parts)
 (string-length parts)
)
 ((hash-table? parts)
 (hash-table-size parts)
)
 (else (length parts)
)
)
)
 (begin (set! words (append words (_list (cond ((string? parts)
 (substring parts j (+ j 1)
)
)
 ((hash-table? parts)
 (hash-table-ref parts j)
)
 (else (list-ref parts j)
)
)
)
)
)
 (set! j (+ j 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (set! words (append words (_list "in")
)
)
 (set! words (append words (_list "the")
)
)
 (set! parts (split (string-append (sayOrdinal (+ idx 1)
)
 ",")
 " ")
)
 (set! j 0)
 (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j (cond ((string? parts)
 (string-length parts)
)
 ((hash-table? parts)
 (hash-table-size parts)
)
 (else (length parts)
)
)
)
 (begin (set! words (append words (_list (cond ((string? parts)
 (substring parts j (+ j 1)
)
)
 ((hash-table? parts)
 (hash-table-ref parts j)
)
 (else (list-ref parts j)
)
)
)
)
)
 (set! j (+ j 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
)
)
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (let ((word (list-ref words (- w 1)
)
)
)
 (begin (ret9 (_list word (countLetters word)
)
)
)
)
)
)
)
)
(define (totalLength)
 (call/cc (lambda (ret16)
 (let ((tot 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< i (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
 (begin (set! tot (+ tot (cond ((string? (list-ref words i)
)
 (string-length (list-ref words i)
)
)
 ((hash-table? (list-ref words i)
)
 (hash-table-size (list-ref words i)
)
)
 (else (length (list-ref words i)
)
)
)
)
)
 (if (_lt i (- (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
 1)
)
 (begin (set! tot (+ tot 1)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
 (ret16 tot)
)
)
)
)
)
)
)
(define (pad n width)
 (call/cc (lambda (ret19)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 width)
 (begin (set! s (string-append " " s)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (ret19 s)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret22)
 (begin (_display (to-str "The lengths of the first 201 words are:")
)
 (newline)
 (let ((line "")
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (<= i 201)
 (begin (if (equal? (modulo i 25)
 1)
 (begin (if (not (equal? i 1)
)
 (begin (_display (to-str line)
)
 (newline)
)
 (quote ()
)
)
 (set! line (string-append (pad i 3)
 ":")
)
)
 (quote ()
)
)
 (let ((r (wordLen i)
)
)
 (begin (let ((n (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (set! line (string-append (string-append line " ")
 (pad n 2)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (_display (to-str line)
)
 (newline)
 (_display (to-str (string-append "Length of sentence so far: " (to-str (totalLength)
)
)
)
)
 (newline)
 (call/cc (lambda (break26)
 (letrec ((loop25 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((n (car xs)
)
)
 (begin (let ((r (wordLen n)
)
)
 (begin (let ((w (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
)
 (begin (let ((l (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (string-append "Word " (pad n 8)
)
 " is \"")
 w)
 "\", with ")
 (to-str l)
)
 " letters.  Length of sentence so far: ")
 (to-str (totalLength)
)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
 (loop25 (cdr xs)
)
)
)
)
)
)
 (loop25 (_list 1000 10000 100000 1000000 10000000)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
