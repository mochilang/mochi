;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (pfacSum i)
 (call/cc (lambda (ret1)
 (let ((sum 0)
)
 (begin (let ((p 1)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= p (quotient i 2)
)
 (begin (if (equal? (modulo i p)
 0)
 (begin (set! sum (+ sum p)
)
)
 (quote nil)
)
 (set! p (+ p 1)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 sum)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (let ((d 0)
)
 (begin (let ((a 0)
)
 (begin (let ((pnum 0)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (<= i 20000)
 (begin (let ((j (pfacSum i)
)
)
 (begin (if (< j i)
 (begin (set! d (+ d 1)
)
)
 (quote nil)
)
 (if (equal? j i)
 (begin (set! pnum (+ pnum 1)
)
)
 (quote nil)
)
 (if (> j i)
 (begin (set! a (+ a 1)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (display (to-str (string-append (string-append "There are " (to-str d)
)
 " deficient numbers between 1 and 20000")
)
)
 (newline)
 (display (to-str (string-append (string-append "There are " (to-str a)
)
 " abundant numbers  between 1 and 20000")
)
)
 (newline)
 (display (to-str (string-append (string-append "There are " (to-str pnum)
)
 " perfect numbers between 1 and 20000")
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
(main)
