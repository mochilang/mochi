;; Generated on 2025-08-03 10:21 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start33 (now))) (begin (define (newList) (call/cc (lambda (ret1) (ret1 (alist->hash-table (_list (cons "nodes" (alist->hash-table (_list))) (cons "head" 0) (cons "tail" 0) (cons "nextID" 1))))))) (define (newNode l v) (call/cc (lambda (ret2) (let ((id (let ((v3 (hash-table-ref/default l "nextID" (quote ())))) (cond ((string? v3) (inexact->exact (floor (string->number v3)))) ((boolean? v3) (if v3 1 0)) (else (inexact->exact (floor v3))))))) (begin (hash-table-set! l "nextID" (+ id 1)) (let ((nodes (hash-table-ref/default l "nodes" (quote ())))) (begin (let ((n (alist->hash-table (_list (cons "id" id) (cons "value" v) (cons "next" 0) (cons "prev" 0))))) (begin (hash-table-set! nodes id n) (hash-table-set! l "nodes" nodes) (ret2 n)))))))))) (define (pushFront l v) (call/cc (lambda (ret4) (let ((n (newNode l v))) (begin (hash-table-set! n "next" (hash-table-ref/default l "head" (quote ()))) (if (not (equal? (let ((v5 (hash-table-ref/default l "head" (quote ())))) (cond ((string? v5) (inexact->exact (floor (string->number v5)))) ((boolean? v5) (if v5 1 0)) (else (inexact->exact (floor v5))))) 0)) (begin (let ((nodes (hash-table-ref/default l "nodes" (quote ())))) (begin (let ((h (hash-table-ref/default nodes (let ((v6 (hash-table-ref/default l "head" (quote ())))) (cond ((string? v6) (inexact->exact (floor (string->number v6)))) ((boolean? v6) (if v6 1 0)) (else (inexact->exact (floor v6))))) (quote ())))) (begin (hash-table-set! h "prev" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes (let ((v7 (hash-table-ref/default h "id" (quote ())))) (cond ((string? v7) (inexact->exact (floor (string->number v7)))) ((boolean? v7) (if v7 1 0)) (else (inexact->exact (floor v7))))) h) (hash-table-set! l "nodes" nodes)))))) (begin (hash-table-set! l "tail" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))))) (hash-table-set! l "head" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (let ((nodes2 (hash-table-ref/default l "nodes" (quote ())))) (begin (hash-table-set! nodes2 (let ((v8 (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id"))))) (cond ((string? v8) (inexact->exact (floor (string->number v8)))) ((boolean? v8) (if v8 1 0)) (else (inexact->exact (floor v8))))) n) (hash-table-set! l "nodes" nodes2) (ret4 n)))))))) (define (pushBack l v) (call/cc (lambda (ret9) (let ((n (newNode l v))) (begin (hash-table-set! n "prev" (hash-table-ref/default l "tail" (quote ()))) (if (not (equal? (let ((v10 (hash-table-ref/default l "tail" (quote ())))) (cond ((string? v10) (inexact->exact (floor (string->number v10)))) ((boolean? v10) (if v10 1 0)) (else (inexact->exact (floor v10))))) 0)) (begin (let ((nodes (hash-table-ref/default l "nodes" (quote ())))) (begin (let ((t (hash-table-ref/default nodes (let ((v11 (hash-table-ref/default l "tail" (quote ())))) (cond ((string? v11) (inexact->exact (floor (string->number v11)))) ((boolean? v11) (if v11 1 0)) (else (inexact->exact (floor v11))))) (quote ())))) (begin (hash-table-set! t "next" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes (let ((v12 (hash-table-ref/default t "id" (quote ())))) (cond ((string? v12) (inexact->exact (floor (string->number v12)))) ((boolean? v12) (if v12 1 0)) (else (inexact->exact (floor v12))))) t) (hash-table-set! l "nodes" nodes)))))) (begin (hash-table-set! l "head" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))))) (hash-table-set! l "tail" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (let ((nodes2 (hash-table-ref/default l "nodes" (quote ())))) (begin (hash-table-set! nodes2 (let ((v13 (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id"))))) (cond ((string? v13) (inexact->exact (floor (string->number v13)))) ((boolean? v13) (if v13 1 0)) (else (inexact->exact (floor v13))))) n) (hash-table-set! l "nodes" nodes2) (ret9 n)))))))) (define (insertBefore l refID v) (call/cc (lambda (ret14) (begin (if (equal? refID 0) (begin (ret14 (pushFront l v))) (quote ())) (let ((nodes (hash-table-ref/default l "nodes" (quote ())))) (begin (let ((ref (hash-table-ref/default nodes refID (quote ())))) (begin (let ((n (newNode l v))) (begin (hash-table-set! n "prev" (hash-table-ref/default ref "prev" (quote ()))) (hash-table-set! n "next" (hash-table-ref/default ref "id" (quote ()))) (if (not (equal? (let ((v15 (hash-table-ref/default ref "prev" (quote ())))) (cond ((string? v15) (inexact->exact (floor (string->number v15)))) ((boolean? v15) (if v15 1 0)) (else (inexact->exact (floor v15))))) 0)) (begin (let ((p (hash-table-ref/default nodes (let ((v16 (hash-table-ref/default ref "prev" (quote ())))) (cond ((string? v16) (inexact->exact (floor (string->number v16)))) ((boolean? v16) (if v16 1 0)) (else (inexact->exact (floor v16))))) (quote ())))) (begin (hash-table-set! p "next" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes (let ((v17 (hash-table-ref/default p "id" (quote ())))) (cond ((string? v17) (inexact->exact (floor (string->number v17)))) ((boolean? v17) (if v17 1 0)) (else (inexact->exact (floor v17))))) p)))) (begin (hash-table-set! l "head" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))))) (hash-table-set! ref "prev" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes refID ref) (hash-table-set! nodes (let ((v18 (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id"))))) (cond ((string? v18) (inexact->exact (floor (string->number v18)))) ((boolean? v18) (if v18 1 0)) (else (inexact->exact (floor v18))))) n) (hash-table-set! l "nodes" nodes) (ret14 n))))))))))) (define (insertAfter l refID v) (call/cc (lambda (ret19) (begin (if (equal? refID 0) (begin (ret19 (pushBack l v))) (quote ())) (let ((nodes (hash-table-ref/default l "nodes" (quote ())))) (begin (let ((ref (hash-table-ref/default nodes refID (quote ())))) (begin (let ((n (newNode l v))) (begin (hash-table-set! n "next" (hash-table-ref/default ref "next" (quote ()))) (hash-table-set! n "prev" (hash-table-ref/default ref "id" (quote ()))) (if (not (equal? (let ((v20 (hash-table-ref/default ref "next" (quote ())))) (cond ((string? v20) (inexact->exact (floor (string->number v20)))) ((boolean? v20) (if v20 1 0)) (else (inexact->exact (floor v20))))) 0)) (begin (let ((nx (hash-table-ref/default nodes (let ((v21 (hash-table-ref/default ref "next" (quote ())))) (cond ((string? v21) (inexact->exact (floor (string->number v21)))) ((boolean? v21) (if v21 1 0)) (else (inexact->exact (floor v21))))) (quote ())))) (begin (hash-table-set! nx "prev" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes (let ((v22 (hash-table-ref/default nx "id" (quote ())))) (cond ((string? v22) (inexact->exact (floor (string->number v22)))) ((boolean? v22) (if v22 1 0)) (else (inexact->exact (floor v22))))) nx)))) (begin (hash-table-set! l "tail" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))))) (hash-table-set! ref "next" (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id")))) (hash-table-set! nodes refID ref) (hash-table-set! nodes (let ((v23 (cond ((string? n) (_substring n "id" (+ "id" 1))) ((hash-table? n) (hash-table-ref n "id")) (else (list-ref n "id"))))) (cond ((string? v23) (inexact->exact (floor (string->number v23)))) ((boolean? v23) (if v23 1 0)) (else (inexact->exact (floor v23))))) n) (hash-table-set! l "nodes" nodes) (ret19 n))))))))))) (define (main) (call/cc (lambda (ret24) (let ((l (newList))) (begin (let ((e4 (pushBack l 4))) (begin (let ((e1 (pushFront l 1))) (begin (insertBefore l (let ((v26 (cond ((string? e4) (_substring e4 "id" (+ "id" 1))) ((hash-table? e4) (hash-table-ref e4 "id")) (else (list-ref e4 "id"))))) (cond ((string? v26) (inexact->exact (floor (string->number v26)))) ((boolean? v26) (if v26 1 0)) (else (inexact->exact (floor v26))))) 3) (insertAfter l (let ((v28 (cond ((string? e1) (_substring e1 "id" (+ "id" 1))) ((hash-table? e1) (hash-table-ref e1 "id")) (else (list-ref e1 "id"))))) (cond ((string? v28) (inexact->exact (floor (string->number v28)))) ((boolean? v28) (if v28 1 0)) (else (inexact->exact (floor v28))))) "two") (let ((id (let ((v29 (cond ((string? l) (_substring l "head" (+ "head" 1))) ((hash-table? l) (hash-table-ref l "head")) (else (list-ref l "head"))))) (cond ((string? v29) (inexact->exact (floor (string->number v29)))) ((boolean? v29) (if v29 1 0)) (else (inexact->exact (floor v29))))))) (begin (let ((nodes (cond ((string? l) (_substring l "nodes" (+ "nodes" 1))) ((hash-table? l) (hash-table-ref l "nodes")) (else (list-ref l "nodes"))))) (begin (call/cc (lambda (break31) (letrec ((loop30 (lambda () (if (not (equal? id 0)) (begin (let ((node (hash-table-ref/default nodes id (quote ())))) (begin (_display (to-str (to-str (hash-table-ref/default node "value" (quote ()))))) (newline) (set! id (let ((v32 (hash-table-ref/default node "next" (quote ())))) (cond ((string? v32) (inexact->exact (floor (string->number v32)))) ((boolean? v32) (if v32 1 0)) (else (inexact->exact (floor v32)))))))) (loop30)) (quote ()))))) (loop30))))))))))))))))) (main) (let ((end34 (now))) (let ((dur35 (quotient (- end34 start33) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur35) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
