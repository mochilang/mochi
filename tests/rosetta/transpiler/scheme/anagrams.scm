;; Generated on 2025-07-26 21:31 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start24 (now)
)
)
 (begin (define (sortRunes s)
 (call/cc (lambda (ret1)
 (let ((arr (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (set! arr (append arr (_list (substring s i (+ i 1)
)
)
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (let ((n (cond ((string? arr)
 (string-length arr)
)
 ((hash-table? arr)
 (hash-table-size arr)
)
 (else (length arr)
)
)
)
)
 (begin (let ((m 0)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda ()
 (if (< m n)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (_lt j (- n 1)
)
 (begin (if (string>? (list-ref arr j)
 (list-ref arr (+ j 1)
)
)
 (begin (let ((tmp (list-ref arr j)
)
)
 (begin (list-set! arr j (list-ref arr (+ j 1)
)
)
 (list-set! arr (+ j 1)
 tmp)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (set! m (+ m 1)
)
)
)
 (loop4)
)
 (quote ()
)
)
)
)
)
 (loop4)
)
)
)
 (let ((out "")
)
 (begin (set! i 0)
 (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (set! out (string-append out (list-ref arr i)
)
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret1 out)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (sortStrings xs)
 (call/cc (lambda (ret10)
 (let ((res (_list)
)
)
 (begin (let ((tmp xs)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (> (cond ((string? tmp)
 (string-length tmp)
)
 ((hash-table? tmp)
 (hash-table-size tmp)
)
 (else (length tmp)
)
)
 0)
 (begin (let ((min (list-ref tmp 0)
)
)
 (begin (let ((idx 0)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i (cond ((string? tmp)
 (string-length tmp)
)
 ((hash-table? tmp)
 (hash-table-size tmp)
)
 (else (length tmp)
)
)
)
 (begin (if (string<? (list-ref tmp i)
 min)
 (begin (set! min (list-ref tmp i)
)
 (set! idx i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (set! res (append res (_list min)
)
)
 (let ((out (_list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< j (cond ((string? tmp)
 (string-length tmp)
)
 ((hash-table? tmp)
 (hash-table-size tmp)
)
 (else (length tmp)
)
)
)
 (begin (if (not (equal? j idx)
)
 (begin (set! out (append out (_list (list-ref tmp j)
)
)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (set! tmp out)
)
)
)
)
)
)
)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (ret10 res)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret17)
 (let ((words (_list "abel" "able" "bale" "bela" "elba" "alger" "glare" "lager" "large" "regal" "angel" "angle" "galen" "glean" "lange" "caret" "carte" "cater" "crate" "trace" "elan" "lane" "lean" "lena" "neal" "evil" "levi" "live" "veil" "vile")
)
)
 (begin (let ((groups (alist->hash-table (_list)
)
)
)
 (begin (let ((maxLen 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((w (car xs)
)
)
 (begin (let ((k (sortRunes w)
)
)
 (begin (if (not (cond ((string? groups)
 (if (string-contains groups k)
 #t #f)
)
 ((hash-table? groups)
 (if (hash-table-exists? groups k)
 #t #f)
)
 (else (if (member k groups)
 #t #f)
)
)
)
 (begin (hash-table-set! groups k (_list w)
)
)
 (begin (hash-table-set! groups k (append (hash-table-ref/default groups k (quote ()
)
)
 (_list w)
)
)
)
)
 (if (> (cond ((string? (hash-table-ref/default groups k (quote ()
)
)
)
 (string-length (hash-table-ref/default groups k (quote ()
)
)
)
)
 ((hash-table? (hash-table-ref/default groups k (quote ()
)
)
)
 (hash-table-size (hash-table-ref/default groups k (quote ()
)
)
)
)
 (else (length (hash-table-ref/default groups k (quote ()
)
)
)
)
)
 maxLen)
 (begin (set! maxLen (cond ((string? (hash-table-ref/default groups k (quote ()
)
)
)
 (string-length (hash-table-ref/default groups k (quote ()
)
)
)
)
 ((hash-table? (hash-table-ref/default groups k (quote ()
)
)
)
 (hash-table-size (hash-table-ref/default groups k (quote ()
)
)
)
)
 (else (length (hash-table-ref/default groups k (quote ()
)
)
)
)
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop18 (cdr xs)
)
)
)
)
)
)
 (loop18 words)
)
)
)
 (let ((printed (alist->hash-table (_list)
)
)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((w (car xs)
)
)
 (begin (let ((k (sortRunes w)
)
)
 (begin (if (equal? (cond ((string? (hash-table-ref/default groups k (quote ()
)
)
)
 (string-length (hash-table-ref/default groups k (quote ()
)
)
)
)
 ((hash-table? (hash-table-ref/default groups k (quote ()
)
)
)
 (hash-table-size (hash-table-ref/default groups k (quote ()
)
)
)
)
 (else (length (hash-table-ref/default groups k (quote ()
)
)
)
)
)
 maxLen)
 (begin (if (not (cond ((string? printed)
 (if (string-contains printed k)
 #t #f)
)
 ((hash-table? printed)
 (if (hash-table-exists? printed k)
 #t #f)
)
 (else (if (member k printed)
 #t #f)
)
)
)
 (begin (let ((g (sortStrings (hash-table-ref/default groups k (quote ()
)
)
)
)
)
 (begin (let ((line (string-append "[" (cond ((string? g)
 (substring g 0 (+ 0 1)
)
)
 ((hash-table? g)
 (hash-table-ref g 0)
)
 (else (list-ref g 0)
)
)
)
)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break23)
 (letrec ((loop22 (lambda ()
 (if (< i (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
)
 (begin (set! line (string-append (string-append line " ")
 (cond ((string? g)
 (substring g i (+ i 1)
)
)
 ((hash-table? g)
 (hash-table-ref g i)
)
 (else (list-ref g i)
)
)
)
)
 (set! i (+ i 1)
)
 (loop22)
)
 (quote ()
)
)
)
)
)
 (loop22)
)
)
)
 (set! line (string-append line "]")
)
 (display (to-str line)
)
 (newline)
 (hash-table-set! printed k #t)
)
)
)
)
)
)
)
 (quote ()
)
)
)
 (quote ()
)
)
)
)
)
)
 (loop20 (cdr xs)
)
)
)
)
)
)
 (loop20 words)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end25 (now)
)
)
 (let ((dur26 (quotient (- end25 start24)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur26)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
