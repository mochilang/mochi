;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (indexOf s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
(define (fmt1 x)
 (call/cc (lambda (ret4)
 (let ((y (/ (+ 0.0 (let ((v5 (+ (* x 10.0)
 0.5)
)
)
 (cond ((string? v5)
 (inexact->exact (floor (string->number v5)
)
)
)
 ((boolean? v5)
 (if v5 1 0)
)
 (else (inexact->exact (floor v5)
)
)
)
)
)
 10.0)
)
)
 (begin (let ((s (to-str y)
)
)
 (begin (let ((dot (indexOf s ".")
)
)
 (begin (if (_lt dot 0)
 (begin (set! s (string-append s ".0")
)
)
 (quote ()
)
)
 (ret4 s)
)
)
)
)
)
)
)
)
)
(define (printColumnMatrix xs)
 (call/cc (lambda (ret6)
 (begin (if (equal? (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
 0)
 (begin (ret6 (quote ()
)
)
)
 (quote ()
)
)
 (_display (to-str (string-append (string-append "⎡" (fmt1 (list-ref xs 0)
)
)
 "⎤")
)
)
 (newline)
 (let ((i 1)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (_lt i (- (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
 1)
)
 (begin (_display (to-str (string-append (string-append "⎢" (fmt1 (list-ref xs i)
)
)
 "⎥")
)
)
 (newline)
 (set! i (+ i 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (_display (to-str (string-append (string-append "⎣ " (fmt1 (list-ref xs (- (cond ((string? xs)
 (string-length xs)
)
 ((hash-table? xs)
 (hash-table-size xs)
)
 (else (length xs)
)
)
 1)
)
)
)
 "⎦")
)
)
 (newline)
)
)
)
)
)
)
(define (deconv g f)
 (call/cc (lambda (ret9)
 (let ((h (_list)
)
)
 (begin (let ((n 0)
)
 (begin (let ((hn (_add (- (cond ((string? g)
 (string-length g)
)
 ((hash-table? g)
 (hash-table-size g)
)
 (else (length g)
)
)
 (cond ((string? f)
 (string-length f)
)
 ((hash-table? f)
 (hash-table-size f)
)
 (else (length f)
)
)
)
 1)
)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< n hn)
 (begin (let ((v (list-ref g n)
)
)
 (begin (let ((lower 0)
)
 (begin (if (>= n (cond ((string? f)
 (string-length f)
)
 ((hash-table? f)
 (hash-table-size f)
)
 (else (length f)
)
)
)
 (begin (set! lower (_add (- n (cond ((string? f)
 (string-length f)
)
 ((hash-table? f)
 (hash-table-size f)
)
 (else (length f)
)
)
)
 1)
)
)
 (quote ()
)
)
 (let ((i lower)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i n)
 (begin (set! v (- v (* (list-ref h i)
 (list-ref f (- n i)
)
)
)
)
 (set! i (+ i 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (set! v (/ v (list-ref f 0)
)
)
 (set! h (append h (_list v)
)
)
 (set! n (+ n 1)
)
)
)
)
)
)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 h)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret14)
 (let ((h (_list (- 8.0)
 (- 9.0)
 (- 3.0)
 (- 1.0)
 (- 6.0)
 7.0)
)
)
 (begin (let ((f (_list (- 3.0)
 (- 6.0)
 (- 1.0)
 8.0 (- 6.0)
 3.0 (- 1.0)
 (- 9.0)
 (- 9.0)
 3.0 (- 2.0)
 5.0 2.0 (- 2.0)
 (- 7.0)
 (- 1.0)
)
)
)
 (begin (let ((g (_list 24.0 75.0 71.0 (- 34.0)
 3.0 22.0 (- 45.0)
 23.0 245.0 25.0 52.0 25.0 (- 67.0)
 (- 96.0)
 96.0 31.0 55.0 36.0 29.0 (- 43.0)
 (- 7.0)
)
)
)
 (begin (_display (to-str "deconv(g, f)
 =")
)
 (newline)
 (printColumnMatrix (deconv g f)
)
 (_display (to-str "")
)
 (newline)
 (_display (to-str "deconv(g, h)
 =")
)
 (newline)
 (printColumnMatrix (deconv g h)
)
)
)
)
)
)
)
)
)
)
(main)
