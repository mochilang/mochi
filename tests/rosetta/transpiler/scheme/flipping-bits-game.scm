;; Generated on 2025-07-30 21:05 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start48 (now)
)
)
 (begin (define (randInt seed n)
 (call/cc (lambda (ret1)
 (let ((next (modulo (_add (* seed 1664525)
 1013904223)
 2147483647)
)
)
 (begin (ret1 (_list next (modulo next n)
)
)
)
)
)
)
)
 (define (newBoard n seed)
 (call/cc (lambda (ret2)
 (let ((board (_list)
)
)
 (begin (let ((s seed)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i n)
 (begin (let ((row (_list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< j n)
 (begin (let ((r (randInt s 2)
)
)
 (begin (set! s (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
 (set! row (append row (_list (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
)
 (set! j (+ j 1)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (set! board (append board (_list row)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (ret2 (_list board s)
)
)
)
)
)
)
)
)
)
)
 (define (copyBoard b)
 (call/cc (lambda (ret7)
 (let ((nb (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
 (begin (let ((row (_list)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (< j (cond ((string? (list-ref b i)
)
 (string-length (list-ref b i)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-size (list-ref b i)
)
)
 (else (length (list-ref b i)
)
)
)
)
 (begin (set! row (append row (_list (cond ((string? (list-ref b i)
)
 (substring (list-ref b i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-ref (list-ref b i)
 j)
)
 (else (list-ref (list-ref b i)
 j)
)
)
)
)
)
 (set! j (+ j 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! nb (append nb (_list row)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 nb)
)
)
)
)
)
)
)
 (define (flipRow b r)
 (call/cc (lambda (ret12)
 (let ((j 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< j (cond ((string? (list-ref b r)
)
 (string-length (list-ref b r)
)
)
 ((hash-table? (list-ref b r)
)
 (hash-table-size (list-ref b r)
)
)
 (else (length (list-ref b r)
)
)
)
)
 (begin (list-set! (list-ref b r)
 j (- 1 (cond ((string? (list-ref b r)
)
 (substring (list-ref b r)
 j (+ j 1)
)
)
 ((hash-table? (list-ref b r)
)
 (hash-table-ref (list-ref b r)
 j)
)
 (else (list-ref (list-ref b r)
 j)
)
)
)
)
 (set! j (+ j 1)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 b)
)
)
)
)
)
 (define (flipCol b c)
 (call/cc (lambda (ret15)
 (let ((i 0)
)
 (begin (call/cc (lambda (break17)
 (letrec ((loop16 (lambda ()
 (if (< i (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
 (begin (list-set! (list-ref b i)
 c (- 1 (cond ((string? (list-ref b i)
)
 (substring (list-ref b i)
 c (+ c 1)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-ref (list-ref b i)
 c)
)
 (else (list-ref (list-ref b i)
 c)
)
)
)
)
 (set! i (+ i 1)
)
 (loop16)
)
 (quote ()
)
)
)
)
)
 (loop16)
)
)
)
 (ret15 b)
)
)
)
)
)
 (define (boardsEqual a b)
 (call/cc (lambda (ret18)
 (let ((i 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< i (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break22)
 (letrec ((loop21 (lambda ()
 (if (< j (cond ((string? (list-ref a i)
)
 (string-length (list-ref a i)
)
)
 ((hash-table? (list-ref a i)
)
 (hash-table-size (list-ref a i)
)
)
 (else (length (list-ref a i)
)
)
)
)
 (begin (if (not (equal? (cond ((string? (list-ref a i)
)
 (substring (list-ref a i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref a i)
)
 (hash-table-ref (list-ref a i)
 j)
)
 (else (list-ref (list-ref a i)
 j)
)
)
 (cond ((string? (list-ref b i)
)
 (substring (list-ref b i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-ref (list-ref b i)
 j)
)
 (else (list-ref (list-ref b i)
 j)
)
)
)
)
 (begin (ret18 #f)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop21)
)
 (quote ()
)
)
)
)
)
 (loop21)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (ret18 #t)
)
)
)
)
)
 (define (shuffleBoard b seed)
 (call/cc (lambda (ret23)
 (let ((s seed)
)
 (begin (let ((n (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
)
 (begin (let ((k 0)
)
 (begin (call/cc (lambda (break25)
 (letrec ((loop24 (lambda ()
 (if (_lt k (* 2 n)
)
 (begin (let ((r (randInt s n)
)
)
 (begin (set! s (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
 (let ((idx (let ((v26 (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (cond ((string? v26)
 (inexact->exact (floor (string->number v26)
)
)
)
 ((boolean? v26)
 (if v26 1 0)
)
 (else (inexact->exact (floor v26)
)
)
)
)
)
)
 (begin (if (equal? (modulo k 2)
 0)
 (begin (set! b (flipRow b idx)
)
)
 (begin (set! b (flipCol b idx)
)
)
)
 (set! k (+ k 1)
)
)
)
)
)
 (loop24)
)
 (quote ()
)
)
)
)
)
 (loop24)
)
)
)
 (ret23 (_list b s)
)
)
)
)
)
)
)
)
)
)
 (define (solve board target)
 (call/cc (lambda (ret27)
 (let ((n (cond ((string? board)
 (string-length board)
)
 ((hash-table? board)
 (hash-table-size board)
)
 (else (length board)
)
)
)
)
 (begin (let ((row (_list)
)
)
 (begin (let ((col (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break29)
 (letrec ((loop28 (lambda ()
 (if (< i n)
 (begin (let ((diff (if (not (equal? (cond ((string? (list-ref board i)
)
 (substring (list-ref board i)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref board i)
)
 (hash-table-ref (list-ref board i)
 0)
)
 (else (list-ref (list-ref board i)
 0)
)
)
 (cond ((string? (list-ref target i)
)
 (substring (list-ref target i)
 0 (+ 0 1)
)
)
 ((hash-table? (list-ref target i)
)
 (hash-table-ref (list-ref target i)
 0)
)
 (else (list-ref (list-ref target i)
 0)
)
)
)
)
 1 0)
)
)
 (begin (set! row (append row (_list diff)
)
)
 (set! i (+ i 1)
)
)
)
 (loop28)
)
 (quote ()
)
)
)
)
)
 (loop28)
)
)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< j n)
 (begin (let ((diff (if (not (equal? (cond ((string? (list-ref board 0)
)
 (substring (list-ref board 0)
 j (+ j 1)
)
)
 ((hash-table? (list-ref board 0)
)
 (hash-table-ref (list-ref board 0)
 j)
)
 (else (list-ref (list-ref board 0)
 j)
)
)
 (cond ((string? (list-ref target 0)
)
 (substring (list-ref target 0)
 j (+ j 1)
)
)
 ((hash-table? (list-ref target 0)
)
 (hash-table-ref (list-ref target 0)
 j)
)
 (else (list-ref (list-ref target 0)
 j)
)
)
)
)
 1 0)
)
)
 (begin (let ((val (modulo (+ diff (list-ref row 0)
)
 2)
)
)
 (begin (set! col (append col (_list val)
)
)
 (set! j (+ j 1)
)
)
)
)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
 (ret27 (alist->hash-table (_list (cons "row" row)
 (cons "col" col)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (applySolution b sol)
 (call/cc (lambda (ret32)
 (let ((board b)
)
 (begin (let ((moves 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break34)
 (letrec ((loop33 (lambda ()
 (if (< i (cond ((string? (hash-table-ref/default sol "row" (quote ()
)
)
)
 (string-length (hash-table-ref/default sol "row" (quote ()
)
)
)
)
 ((hash-table? (hash-table-ref/default sol "row" (quote ()
)
)
)
 (hash-table-size (hash-table-ref/default sol "row" (quote ()
)
)
)
)
 (else (length (hash-table-ref/default sol "row" (quote ()
)
)
)
)
)
)
 (begin (if (equal? (cond ((string? (hash-table-ref/default sol "row" (quote ()
)
)
)
 (substring (hash-table-ref/default sol "row" (quote ()
)
)
 i (+ i 1)
)
)
 ((hash-table? (hash-table-ref/default sol "row" (quote ()
)
)
)
 (hash-table-ref (hash-table-ref/default sol "row" (quote ()
)
)
 i)
)
 (else (list-ref (hash-table-ref/default sol "row" (quote ()
)
)
 i)
)
)
 1)
 (begin (set! board (flipRow board i)
)
 (set! moves (+ moves 1)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop33)
)
 (quote ()
)
)
)
)
)
 (loop33)
)
)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break36)
 (letrec ((loop35 (lambda ()
 (if (< j (cond ((string? (hash-table-ref/default sol "col" (quote ()
)
)
)
 (string-length (hash-table-ref/default sol "col" (quote ()
)
)
)
)
 ((hash-table? (hash-table-ref/default sol "col" (quote ()
)
)
)
 (hash-table-size (hash-table-ref/default sol "col" (quote ()
)
)
)
)
 (else (length (hash-table-ref/default sol "col" (quote ()
)
)
)
)
)
)
 (begin (if (equal? (cond ((string? (hash-table-ref/default sol "col" (quote ()
)
)
)
 (substring (hash-table-ref/default sol "col" (quote ()
)
)
 j (+ j 1)
)
)
 ((hash-table? (hash-table-ref/default sol "col" (quote ()
)
)
)
 (hash-table-ref (hash-table-ref/default sol "col" (quote ()
)
)
 j)
)
 (else (list-ref (hash-table-ref/default sol "col" (quote ()
)
)
 j)
)
)
 1)
 (begin (set! board (flipCol board j)
)
 (set! moves (+ moves 1)
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop35)
)
 (quote ()
)
)
)
)
)
 (loop35)
)
)
)
 (ret32 (_list board moves)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (printBoard b)
 (call/cc (lambda (ret37)
 (let ((i 0)
)
 (begin (call/cc (lambda (break39)
 (letrec ((loop38 (lambda ()
 (if (< i (cond ((string? b)
 (string-length b)
)
 ((hash-table? b)
 (hash-table-size b)
)
 (else (length b)
)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break41)
 (letrec ((loop40 (lambda ()
 (if (< j (cond ((string? (list-ref b i)
)
 (string-length (list-ref b i)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-size (list-ref b i)
)
)
 (else (length (list-ref b i)
)
)
)
)
 (begin (set! line (string-append line (to-str (cond ((string? (list-ref b i)
)
 (substring (list-ref b i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-ref (list-ref b i)
 j)
)
 (else (list-ref (list-ref b i)
 j)
)
)
)
)
)
 (if (_lt j (- (cond ((string? (list-ref b i)
)
 (string-length (list-ref b i)
)
)
 ((hash-table? (list-ref b i)
)
 (hash-table-size (list-ref b i)
)
)
 (else (length (list-ref b i)
)
)
)
 1)
)
 (begin (set! line (string-append line " ")
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop40)
)
 (quote ()
)
)
)
)
)
 (loop40)
)
)
)
 (_display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
 (loop38)
)
 (quote ()
)
)
)
)
)
 (loop38)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret42)
 (let ((n 3)
)
 (begin (let ((seed 1)
)
 (begin (let ((res (newBoard n seed)
)
)
 (begin (let ((target (cond ((string? res)
 (substring res 0 (+ 0 1)
)
)
 ((hash-table? res)
 (hash-table-ref res 0)
)
 (else (list-ref res 0)
)
)
)
)
 (begin (set! seed (let ((v43 (cond ((string? res)
 (substring res 1 (+ 1 1)
)
)
 ((hash-table? res)
 (hash-table-ref res 1)
)
 (else (list-ref res 1)
)
)
)
)
 (cond ((string? v43)
 (inexact->exact (floor (string->number v43)
)
)
)
 ((boolean? v43)
 (if v43 1 0)
)
 (else (inexact->exact (floor v43)
)
)
)
)
)
 (let ((board (copyBoard target)
)
)
 (begin (call/cc (lambda (break45)
 (letrec ((loop44 (lambda ()
 (if #t (begin (let ((sres (shuffleBoard (copyBoard board)
 seed)
)
)
 (begin (set! board (cond ((string? sres)
 (substring sres 0 (+ 0 1)
)
)
 ((hash-table? sres)
 (hash-table-ref sres 0)
)
 (else (list-ref sres 0)
)
)
)
 (set! seed (let ((v46 (cond ((string? sres)
 (substring sres 1 (+ 1 1)
)
)
 ((hash-table? sres)
 (hash-table-ref sres 1)
)
 (else (list-ref sres 1)
)
)
)
)
 (cond ((string? v46)
 (inexact->exact (floor (string->number v46)
)
)
)
 ((boolean? v46)
 (if v46 1 0)
)
 (else (inexact->exact (floor v46)
)
)
)
)
)
 (if (not (boardsEqual board target)
)
 (begin (break45 (quote ()
)
)
)
 (quote ()
)
)
)
)
 (loop44)
)
 (quote ()
)
)
)
)
)
 (loop44)
)
)
)
 (_display (to-str "Target:")
)
 (newline)
 (printBoard target)
 (_display (to-str "Board:")
)
 (newline)
 (printBoard board)
 (let ((sol (solve board target)
)
)
 (begin (let ((ares (applySolution board sol)
)
)
 (begin (set! board (cond ((string? ares)
 (substring ares 0 (+ 0 1)
)
)
 ((hash-table? ares)
 (hash-table-ref ares 0)
)
 (else (list-ref ares 0)
)
)
)
 (let ((moves (let ((v47 (cond ((string? ares)
 (substring ares 1 (+ 1 1)
)
)
 ((hash-table? ares)
 (hash-table-ref ares 1)
)
 (else (list-ref ares 1)
)
)
)
)
 (cond ((string? v47)
 (inexact->exact (floor (string->number v47)
)
)
)
 ((boolean? v47)
 (if v47 1 0)
)
 (else (inexact->exact (floor v47)
)
)
)
)
)
)
 (begin (_display (to-str "Solved:")
)
 (newline)
 (printBoard board)
 (_display (to-str (string-append "Moves: " (to-str moves)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end49 (now)
)
)
 (let ((dur50 (quotient (- end49 start48)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur50)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
