;; Generated on 2025-07-23 13:04 +0700
(import (only (scheme base) call/cc list-ref list-set! list))
(import (scheme time))
(import (chibi io))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(define (randDigit)
 (call/cc (lambda (ret1)
 (ret1 (+ (modulo (current-jiffy)
 9)
 1)
)
)
)
)
(define (main)
 (call/cc (lambda (ret2)
 (let ((digits (list)
)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda (i)
 (if (< i 4)
 (begin (begin (set! digits (append digits (list (randDigit)
)
)
)
)
 (loop3 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop3 0)
)
)
)
 (let ((numstr "")
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda (i)
 (if (< i 4)
 (begin (begin (set! numstr (string-append numstr (number->string (list-ref digits i)
)
)
)
)
 (loop5 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop5 0)
)
)
)
 (display (to-str (string-append (string-append "Your numbers: " numstr)
 "\n")
)
)
 (newline)
 (display (to-str "Enter RPN: ")
)
 (newline)
 (let ((expr (_input)
)
)
 (begin (if (not (= (string-length expr)
 7)
)
 (begin (display (to-str "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)
")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (let ((stack (list)
)
)
 (begin (let ((i 0)
)
 (begin (let ((valid #t)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i (string-length expr)
)
 (begin (let ((ch (substring expr i (+ i 1)
)
)
)
 (begin (if (and (string>=? ch "0")
 (string<=? ch "9")
)
 (begin (if (= (length digits)
 0)
 (begin (display (to-str "too many numbers.")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (not (= (list-ref digits j)
 (- (cond ((string? ch)
 (inexact->exact (string->number ch)
)
)
 ((boolean? ch)
 (if ch 1 0)
)
 (else (inexact->exact ch)
)
)
 (cond ((string? "0")
 (inexact->exact (string->number "0")
)
)
 ((boolean? "0")
 (if "0" 1 0)
)
 (else (inexact->exact "0")
)
)
)
)
)
 (begin (set! j (+ j 1)
)
 (if (= j (length digits)
)
 (begin (display (to-str "wrong numbers.")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (loop9)
)
 (quote nil)
)
)
)
)
 (loop9)
)
)
)
 (set! digits (+ (take (drop digits 0)
 (- j 0)
)
 (take (drop digits (+ j 1)
)
 (- (length digits)
 (+ j 1)
)
)
)
)
 (set! stack (append stack (list (float (- (cond ((string? ch)
 (inexact->exact (string->number ch)
)
)
 ((boolean? ch)
 (if ch 1 0)
)
 (else (inexact->exact ch)
)
)
 (cond ((string? "0")
 (inexact->exact (string->number "0")
)
)
 ((boolean? "0")
 (if "0" 1 0)
)
 (else (inexact->exact "0")
)
)
)
)
)
)
)
)
)
)
 (begin (if (< (length stack)
 2)
 (begin (display (to-str "invalid expression syntax.")
)
 (newline)
 (set! valid #f)
 (break8 (quote nil)
)
)
 (quote nil)
)
 (let ((b (list-ref stack (- (length stack)
 1)
)
)
)
 (begin (let ((a (list-ref stack (- (length stack)
 2)
)
)
)
 (begin (if (string=? ch "+")
 (begin (list-set! stack (- (length stack)
 2)
 (+ a b)
)
)
 (if (string=? ch "-")
 (begin (list-set! stack (- (length stack)
 2)
 (- a b)
)
)
 (if (string=? ch "*")
 (begin (list-set! stack (- (length stack)
 2)
 (* a b)
)
)
 (if (string=? ch "/")
 (begin (list-set! stack (- (length stack)
 2)
 (quotient a b)
)
)
 (begin (display (to-str (string-append ch " invalid.")
)
)
 (newline)
 (set! valid #f)
 (break8 (quote nil)
)
)
)
)
)
)
 (set! stack (take (drop stack 0)
 (- (- (length stack)
 1)
 0)
)
)
)
)
)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (if valid (begin (if (> (abs (- (list-ref stack 0)
 24.0)
)
 1e-06)
 (begin (display (to-str (string-append (string-append "incorrect. " (number->string (list-ref stack 0)
)
)
 " != 24")
)
)
 (newline)
)
 (begin (display (to-str "correct.")
)
 (newline)
)
)
)
 (quote nil)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
