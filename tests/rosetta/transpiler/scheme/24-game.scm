;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi io))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(let ((start15 (now)
)
)
 (begin (define (randDigit)
 (call/cc (lambda (ret1)
 (ret1 (+ (modulo (now)
 9)
 1)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret2)
 (let ((digits (list)
)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda (i)
 (if (< i 4)
 (begin (begin (set! digits (append digits (list (randDigit)
)
)
)
)
 (loop3 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop3 0)
)
)
)
 (let ((numstr "")
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda (i)
 (if (< i 4)
 (begin (begin (set! numstr (string-append numstr (to-str (list-ref digits i)
)
)
)
)
 (loop5 (+ i 1)
)
)
 (quote nil)
)
)
)
)
 (loop5 0)
)
)
)
 (display (to-str (string-append (string-append "Your numbers: " numstr)
 "\n")
)
)
 (newline)
 (display (to-str "Enter RPN: ")
)
 (newline)
 (let ((expr (_input)
)
)
 (begin (if (not (equal? (cond ((string? expr)
 (string-length expr)
)
 ((hash-table? expr)
 (hash-table-size expr)
)
 (else (length expr)
)
)
 7)
)
 (begin (display (to-str "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)
")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (let ((stack (list)
)
)
 (begin (let ((i 0)
)
 (begin (let ((valid #t)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< i (cond ((string? expr)
 (string-length expr)
)
 ((hash-table? expr)
 (hash-table-size expr)
)
 (else (length expr)
)
)
)
 (begin (let ((ch (substring expr i (+ i 1)
)
)
)
 (begin (if (and (string>=? ch "0")
 (string<=? ch "9")
)
 (begin (if (equal? (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
 0)
 (begin (display (to-str "too many numbers.")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (not (equal? (list-ref digits j)
 (- (let ((v9 ch)
)
 (cond ((string? v9)
 (inexact->exact (string->number v9)
)
)
 ((boolean? v9)
 (if v9 1 0)
)
 (else (inexact->exact v9)
)
)
)
 (let ((v10 "0")
)
 (cond ((string? v10)
 (inexact->exact (string->number v10)
)
)
 ((boolean? v10)
 (if v10 1 0)
)
 (else (inexact->exact v10)
)
)
)
)
)
)
 (begin (set! j (+ j 1)
)
 (if (equal? j (cond ((string? digits)
 (string-length digits)
)
 ((hash-table? digits)
 (hash-table-size digits)
)
 (else (length digits)
)
)
)
 (begin (display (to-str "wrong numbers.")
)
 (newline)
 (ret2 (quote nil)
)
)
 (quote nil)
)
 (loop11)
)
 (quote nil)
)
)
)
)
 (loop11)
)
)
)
 (set! digits (+ (take (drop digits 0)
 (- j 0)
)
 (take (drop digits (+ j 1)
)
 (- (length digits)
 (+ j 1)
)
)
)
)
 (set! stack (append stack (list (float (- (let ((v13 ch)
)
 (cond ((string? v13)
 (inexact->exact (string->number v13)
)
)
 ((boolean? v13)
 (if v13 1 0)
)
 (else (inexact->exact v13)
)
)
)
 (let ((v14 "0")
)
 (cond ((string? v14)
 (inexact->exact (string->number v14)
)
)
 ((boolean? v14)
 (if v14 1 0)
)
 (else (inexact->exact v14)
)
)
)
)
)
)
)
)
)
)
)
 (begin (if (< (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
 (begin (display (to-str "invalid expression syntax.")
)
 (newline)
 (set! valid #f)
 (break8 (quote nil)
)
)
 (quote nil)
)
 (let ((b (list-ref stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 1)
)
)
)
 (begin (let ((a (list-ref stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
)
)
)
 (begin (if (string=? ch "+")
 (begin (list-set! stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
 (+ a b)
)
)
 (if (string=? ch "-")
 (begin (list-set! stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
 (- a b)
)
)
 (if (string=? ch "*")
 (begin (list-set! stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
 (* a b)
)
)
 (if (string=? ch "/")
 (begin (list-set! stack (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 2)
 (quotient a b)
)
)
 (begin (display (to-str (string-append ch " invalid.")
)
)
 (newline)
 (set! valid #f)
 (break8 (quote nil)
)
)
)
)
)
)
 (set! stack (take (drop stack 0)
 (- (- (cond ((string? stack)
 (string-length stack)
)
 ((hash-table? stack)
 (hash-table-size stack)
)
 (else (length stack)
)
)
 1)
 0)
)
)
)
)
)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (if valid (begin (if (> (abs (- (list-ref stack 0)
 24.0)
)
 1e-06)
 (begin (display (to-str (string-append (string-append "incorrect. " (to-str (list-ref stack 0)
)
)
 " != 24")
)
)
 (newline)
)
 (begin (display (to-str "correct.")
)
 (newline)
)
)
)
 (quote nil)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end16 (now)
)
)
 (let ((dur17 (quotient (- end16 start15)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur17)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
