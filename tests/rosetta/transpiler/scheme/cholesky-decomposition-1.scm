;; Generated on 2025-07-28 11:58 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(let ((start37 (now)
)
)
 (begin (define (sqrtApprox x)
 (call/cc (lambda (ret1)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i 20)
 (begin (set! guess (/ (_add guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 guess)
)
)
)
)
)
)
)
 (define (makeSym order elements)
 (call/cc (lambda (ret4)
 (ret4 (alist->hash-table (_list (cons "order" order)
 (cons "ele" elements)
)
)
)
)
)
)
 (define (unpackSym m)
 (call/cc (lambda (ret5)
 (let ((n (hash-table-ref/default m "order" (quote ()
)
)
)
)
 (begin (let ((ele (hash-table-ref/default m "ele" (quote ()
)
)
)
)
 (begin (let ((mat (_list)
)
)
 (begin (let ((idx 0)
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (_lt r n)
 (begin (let ((row (_list)
)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (<= c r)
 (begin (set! row (append row (_list (cond ((string? ele)
 (substring ele idx (+ idx 1)
)
)
 ((hash-table? ele)
 (hash-table-ref ele idx)
)
 (else (list-ref ele idx)
)
)
)
)
)
 (set! idx (+ idx 1)
)
 (set! c (+ c 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (_lt c n)
 (begin (set! row (append row (_list 0.0)
)
)
 (set! c (+ c 1)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (set! mat (append mat (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (set! r 0)
 (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (_lt r n)
 (begin (let ((c (+ r 1)
)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (_lt c n)
 (begin (list-set! (list-ref mat r)
 c (cond ((string? (list-ref mat c)
)
 (substring (list-ref mat c)
 r (+ r 1)
)
)
 ((hash-table? (list-ref mat c)
)
 (hash-table-ref (list-ref mat c)
 r)
)
 (else (list-ref (list-ref mat c)
 r)
)
)
)
 (set! c (+ c 1)
)
 (loop14)
)
 (quote ()
)
)
)
)
)
 (loop14)
)
)
)
 (set! r (+ r 1)
)
)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (ret5 mat)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (printMat m)
 (call/cc (lambda (ret16)
 (let ((i 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< i (cond ((string? m)
 (string-length m)
)
 ((hash-table? m)
 (hash-table-size m)
)
 (else (length m)
)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< j (cond ((string? (list-ref m i)
)
 (string-length (list-ref m i)
)
)
 ((hash-table? (list-ref m i)
)
 (hash-table-size (list-ref m i)
)
)
 (else (length (list-ref m i)
)
)
)
)
 (begin (set! line (string-append line (to-str (cond ((string? (list-ref m i)
)
 (substring (list-ref m i)
 j (+ j 1)
)
)
 ((hash-table? (list-ref m i)
)
 (hash-table-ref (list-ref m i)
 j)
)
 (else (list-ref (list-ref m i)
 j)
)
)
)
)
)
 (if (_lt j (- (cond ((string? (list-ref m i)
)
 (string-length (list-ref m i)
)
)
 ((hash-table? (list-ref m i)
)
 (hash-table-size (list-ref m i)
)
)
 (else (length (list-ref m i)
)
)
)
 1)
)
 (begin (set! line (string-append line " ")
)
)
 (quote ()
)
)
 (set! j (+ j 1)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (_display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
)
)
)
)
)
 (define (printSym m)
 (call/cc (lambda (ret21)
 (printMat (unpackSym m)
)
)
)
)
 (define (printLower m)
 (call/cc (lambda (ret22)
 (let ((n (hash-table-ref/default m "order" (quote ()
)
)
)
)
 (begin (let ((ele (hash-table-ref/default m "ele" (quote ()
)
)
)
)
 (begin (let ((mat (_list)
)
)
 (begin (let ((idx 0)
)
 (begin (let ((r 0)
)
 (begin (call/cc (lambda (break24)
 (letrec ((loop23 (lambda ()
 (if (_lt r n)
 (begin (let ((row (_list)
)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break26)
 (letrec ((loop25 (lambda ()
 (if (<= c r)
 (begin (set! row (append row (_list (cond ((string? ele)
 (substring ele idx (+ idx 1)
)
)
 ((hash-table? ele)
 (hash-table-ref ele idx)
)
 (else (list-ref ele idx)
)
)
)
)
)
 (set! idx (+ idx 1)
)
 (set! c (+ c 1)
)
 (loop25)
)
 (quote ()
)
)
)
)
)
 (loop25)
)
)
)
 (call/cc (lambda (break28)
 (letrec ((loop27 (lambda ()
 (if (_lt c n)
 (begin (set! row (append row (_list 0.0)
)
)
 (set! c (+ c 1)
)
 (loop27)
)
 (quote ()
)
)
)
)
)
 (loop27)
)
)
)
 (set! mat (append mat (_list row)
)
)
 (set! r (+ r 1)
)
)
)
)
)
 (loop23)
)
 (quote ()
)
)
)
)
)
 (loop23)
)
)
)
 (printMat mat)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (choleskyLower a)
 (call/cc (lambda (ret29)
 (let ((n (hash-table-ref/default a "order" (quote ()
)
)
)
)
 (begin (let ((ae (hash-table-ref/default a "ele" (quote ()
)
)
)
)
 (begin (let ((le (_list)
)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break31)
 (letrec ((loop30 (lambda ()
 (if (< idx (cond ((string? ae)
 (string-length ae)
)
 ((hash-table? ae)
 (hash-table-size ae)
)
 (else (length ae)
)
)
)
 (begin (set! le (append le (_list 0.0)
)
)
 (set! idx (+ idx 1)
)
 (loop30)
)
 (quote ()
)
)
)
)
)
 (loop30)
)
)
)
 (let ((row 1)
)
 (begin (let ((col 1)
)
 (begin (let ((dr 0)
)
 (begin (let ((dc 0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break33)
 (letrec ((loop32 (lambda ()
 (if (< i (cond ((string? ae)
 (string-length ae)
)
 ((hash-table? ae)
 (hash-table-size ae)
)
 (else (length ae)
)
)
)
 (begin (let ((e (cond ((string? ae)
 (substring ae i (+ i 1)
)
)
 ((hash-table? ae)
 (hash-table-ref ae i)
)
 (else (list-ref ae i)
)
)
)
)
 (begin (if (< i dr)
 (begin (let ((d (/ (- e (list-ref le i)
)
 (list-ref le dc)
)
)
)
 (begin (list-set! le i d)
 (let ((ci col)
)
 (begin (let ((cx dc)
)
 (begin (let ((j (+ i 1)
)
)
 (begin (call/cc (lambda (break35)
 (letrec ((loop34 (lambda ()
 (if (<= j dr)
 (begin (set! cx (+ cx ci)
)
 (set! ci (+ ci 1)
)
 (list-set! le j (_add (list-ref le j)
 (* d (list-ref le cx)
)
)
)
 (set! j (+ j 1)
)
 (loop34)
)
 (quote ()
)
)
)
)
)
 (loop34)
)
)
)
 (set! col (+ col 1)
)
 (set! dc (+ dc col)
)
)
)
)
)
)
)
)
)
)
 (begin (list-set! le i (sqrtApprox (- e (list-ref le i)
)
)
)
 (set! row (+ row 1)
)
 (set! dr (+ dr row)
)
 (set! col 1)
 (set! dc 0)
)
)
 (set! i (+ i 1)
)
)
)
 (loop32)
)
 (quote ()
)
)
)
)
)
 (loop32)
)
)
)
 (ret29 (alist->hash-table (_list (cons "order" n)
 (cons "ele" le)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (demo a)
 (call/cc (lambda (ret36)
 (begin (_display (to-str "A:")
)
 (newline)
 (printSym a)
 (_display (to-str "L:")
)
 (newline)
 (let ((l (choleskyLower a)
)
)
 (begin (printLower l)
)
)
)
)
)
)
 (demo (makeSym 3 (_list 25.0 15.0 18.0 (- 5.0)
 0.0 11.0)
)
)
 (demo (makeSym 4 (_list 18.0 22.0 70.0 54.0 86.0 174.0 42.0 62.0 134.0 106.0)
)
)
 (let ((end38 (now)
)
)
 (let ((dur39 (quotient (- end38 start37)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur39)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
