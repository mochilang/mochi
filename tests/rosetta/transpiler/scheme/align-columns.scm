;; Generated on 2025-07-26 19:01 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start22 (now)
)
)
 (begin (define (split s sep)
 (call/cc (lambda (ret1)
 (let ((parts (_list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (and (and (> (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
 0)
 (_le (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (string=? (substring s i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
 sep)
)
 (begin (set! parts (append parts (_list cur)
)
)
 (set! cur "")
 (set! i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
)
 (begin (set! cur (string-append cur (substring s i (+ i 1)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (set! parts (append parts (_list cur)
)
)
 (ret1 parts)
)
)
)
)
)
)
)
)
)
 (define (rstripEmpty words)
 (call/cc (lambda (ret4)
 (let ((n (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (and (> n 0)
 (string=? (list-ref words (- n 1)
)
 "")
)
 (begin (set! n (- n 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 (take (drop words 0)
 (- n 0)
)
)
)
)
)
)
)
 (define (spaces n)
 (call/cc (lambda (ret7)
 (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (set! out (string-append out " ")
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 out)
)
)
)
)
)
)
)
 (define (pad word width align)
 (call/cc (lambda (ret10)
 (let ((diff (- width (cond ((string? word)
 (string-length word)
)
 ((hash-table? word)
 (hash-table-size word)
)
 (else (length word)
)
)
)
)
)
 (begin (if (equal? align 0)
 (begin (ret10 (string-append word (spaces diff)
)
)
)
 (quote ()
)
)
 (if (equal? align 2)
 (begin (ret10 (string-append (spaces diff)
 word)
)
)
 (quote ()
)
)
 (let ((left (let ((v11 (quotient diff 2)
)
)
 (cond ((string? v11)
 (inexact->exact (string->number v11)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact v11)
)
)
)
)
)
 (begin (let ((right (- diff left)
)
)
 (begin (ret10 (string-append (string-append (spaces left)
 word)
 (spaces right)
)
)
)
)
)
)
)
)
)
)
)
 (define (newFormatter text)
 (call/cc (lambda (ret12)
 (let ((lines (split text "\n")
)
)
 (begin (let ((fmtLines (_list)
)
)
 (begin (let ((width (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (< i (cond ((string? lines)
 (string-length lines)
)
 ((hash-table? lines)
 (hash-table-size lines)
)
 (else (length lines)
)
)
)
 (begin (if (equal? (cond ((string? (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
)
 (string-length (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
)
)
 ((hash-table? (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
)
 (hash-table-size (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
)
)
 (else (length (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
)
)
)
 0)
 (begin (set! i (+ i 1)
)
 (loop13)
)
 (quote ()
)
)
 (let ((words (rstripEmpty (split (cond ((string? lines)
 (substring lines i (+ i 1)
)
)
 ((hash-table? lines)
 (hash-table-ref lines i)
)
 (else (list-ref lines i)
)
)
 "$")
)
)
)
 (begin (set! fmtLines (append fmtLines (_list words)
)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< j (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
 (begin (let ((wlen (cond ((string? (cond ((string? words)
 (substring words j (+ j 1)
)
)
 ((hash-table? words)
 (hash-table-ref words j)
)
 (else (list-ref words j)
)
)
)
 (string-length (cond ((string? words)
 (substring words j (+ j 1)
)
)
 ((hash-table? words)
 (hash-table-ref words j)
)
 (else (list-ref words j)
)
)
)
)
 ((hash-table? (cond ((string? words)
 (substring words j (+ j 1)
)
)
 ((hash-table? words)
 (hash-table-ref words j)
)
 (else (list-ref words j)
)
)
)
 (hash-table-size (cond ((string? words)
 (substring words j (+ j 1)
)
)
 ((hash-table? words)
 (hash-table-ref words j)
)
 (else (list-ref words j)
)
)
)
)
 (else (length (cond ((string? words)
 (substring words j (+ j 1)
)
)
 ((hash-table? words)
 (hash-table-ref words j)
)
 (else (list-ref words j)
)
)
)
)
)
)
)
 (begin (if (equal? j (cond ((string? width)
 (string-length width)
)
 ((hash-table? width)
 (hash-table-size width)
)
 (else (length width)
)
)
)
 (begin (set! width (append width (_list wlen)
)
)
)
 (if (> wlen (list-ref width j)
)
 (begin (list-set! width j wlen)
)
 (quote ()
)
)
)
 (set! j (+ j 1)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (ret12 (alist->hash-table (_list (cons "text" fmtLines)
 (cons "width" width)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (define (printFmt f align)
 (call/cc (lambda (ret17)
 (let ((lines (hash-table-ref/default f "text" (quote ()
)
)
)
)
 (begin (let ((width (hash-table-ref/default f "width" (quote ()
)
)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break19)
 (letrec ((loop18 (lambda ()
 (if (< i (cond ((string? lines)
 (string-length lines)
)
 ((hash-table? lines)
 (hash-table-size lines)
)
 (else (length lines)
)
)
)
 (begin (let ((words (list-ref lines i)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break21)
 (letrec ((loop20 (lambda ()
 (if (< j (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
 (begin (set! line (string-append (string-append line (pad (list-ref words j)
 (list-ref width j)
 align)
)
 " ")
)
 (set! j (+ j 1)
)
 (loop20)
)
 (quote ()
)
)
)
)
)
 (loop20)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop18)
)
 (quote ()
)
)
)
)
)
 (loop18)
)
)
)
 (display (to-str "")
)
 (newline)
)
)
)
)
)
)
)
)
)
 (define text (string-append (string-append (string-append (string-append (string-append "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" "are$delineated$by$a$single$'dollar'$character,$write$a$program\n")
 "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n")
 "column$are$separated$by$at$least$one$space.\n")
 "Further,$allow$for$each$word$in$a$column$to$be$either$left\n")
 "justified,$right$justified,$or$center$justified$within$its$column.")
)
 (define f (newFormatter text)
)
 (printFmt f 0)
 (printFmt f 1)
 (printFmt f 2)
 (let ((end23 (now)
)
)
 (let ((dur24 (quotient (- end23 start22)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur24)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
