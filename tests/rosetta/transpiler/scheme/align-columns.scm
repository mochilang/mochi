;; Generated on 2025-07-25 01:11 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (split s sep)
 (call/cc (lambda (ret1)
 (let ((parts (list)
)
)
 (begin (let ((cur "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (and (and (> (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
 0)
 (<= (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
 (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
)
 (string=? (substring s i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
 sep)
)
 (begin (set! parts (append parts (list cur)
)
)
 (set! cur "")
 (set! i (+ i (cond ((string? sep)
 (string-length sep)
)
 ((hash-table? sep)
 (hash-table-size sep)
)
 (else (length sep)
)
)
)
)
)
 (begin (set! cur (string-append cur (substring s i (+ i 1)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (set! parts (append parts (list cur)
)
)
 (ret1 parts)
)
)
)
)
)
)
)
)
)
(define (rstripEmpty words)
 (call/cc (lambda (ret4)
 (let ((n (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (and (> n 0)
 (string=? (list-ref words (- n 1)
)
 "")
)
 (begin (set! n (- n 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (ret4 (take (drop words 0)
 (- n 0)
)
)
)
)
)
)
)
(define (spaces n)
 (call/cc (lambda (ret7)
 (let ((out "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< i n)
 (begin (set! out (string-append out " ")
)
 (set! i (+ i 1)
)
 (loop8)
)
 (quote nil)
)
)
)
)
 (loop8)
)
)
)
 (ret7 out)
)
)
)
)
)
)
)
(define (pad word width align)
 (call/cc (lambda (ret10)
 (let ((diff (- width (cond ((string? word)
 (string-length word)
)
 ((hash-table? word)
 (hash-table-size word)
)
 (else (length word)
)
)
)
)
)
 (begin (if (equal? align 0)
 (begin (ret10 (string-append word (spaces diff)
)
)
)
 (quote nil)
)
 (if (equal? align 2)
 (begin (ret10 (string-append (spaces diff)
 word)
)
)
 (quote nil)
)
 (let ((left (inexact->exact (quotient diff 2)
)
)
)
 (begin (let ((right (- diff left)
)
)
 (begin (ret10 (string-append (string-append (spaces left)
 word)
 (spaces right)
)
)
)
)
)
)
)
)
)
)
)
(define (newFormatter text)
 (call/cc (lambda (ret11)
 (let ((lines (split text "\n")
)
)
 (begin (let ((fmtLines (list)
)
)
 (begin (let ((width (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< i (cond ((string? lines)
 (string-length lines)
)
 ((hash-table? lines)
 (hash-table-size lines)
)
 (else (length lines)
)
)
)
 (begin (if (equal? (cond ((string? (list-ref lines i)
)
 (string-length (list-ref lines i)
)
)
 ((hash-table? (list-ref lines i)
)
 (hash-table-size (list-ref lines i)
)
)
 (else (length (list-ref lines i)
)
)
)
 0)
 (begin (set! i (+ i 1)
)
 (loop12)
)
 (quote nil)
)
 (let ((words (rstripEmpty (split (list-ref lines i)
 "$")
)
)
)
 (begin (set! fmtLines (append fmtLines (list words)
)
)
 (let ((j 0)
)
 (begin (call/cc (lambda (break15)
 (letrec ((loop14 (lambda ()
 (if (< j (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
 (begin (let ((wlen (cond ((string? (list-ref words j)
)
 (string-length (list-ref words j)
)
)
 ((hash-table? (list-ref words j)
)
 (hash-table-size (list-ref words j)
)
)
 (else (length (list-ref words j)
)
)
)
)
)
 (begin (if (equal? j (cond ((string? width)
 (string-length width)
)
 ((hash-table? width)
 (hash-table-size width)
)
 (else (length width)
)
)
)
 (begin (set! width (append width (list wlen)
)
)
)
 (if (> wlen (list-ref width j)
)
 (begin (list-set! width j wlen)
)
 (quote nil)
)
)
 (set! j (+ j 1)
)
)
)
 (loop14)
)
 (quote nil)
)
)
)
)
 (loop14)
)
)
)
 (set! i (+ i 1)
)
)
)
)
)
 (loop12)
)
 (quote nil)
)
)
)
)
 (loop12)
)
)
)
 (ret11 (alist->hash-table (list (cons "text" fmtLines)
 (cons "width" width)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (printFmt f align)
 (call/cc (lambda (ret16)
 (let ((lines (hash-table-ref f "text")
)
)
 (begin (let ((width (hash-table-ref f "width")
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if (< i (cond ((string? lines)
 (string-length lines)
)
 ((hash-table? lines)
 (hash-table-size lines)
)
 (else (length lines)
)
)
)
 (begin (let ((words (list-ref lines i)
)
)
 (begin (let ((line "")
)
 (begin (let ((j 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< j (cond ((string? words)
 (string-length words)
)
 ((hash-table? words)
 (hash-table-size words)
)
 (else (length words)
)
)
)
 (begin (set! line (string-append (string-append line (pad (list-ref words j)
 (list-ref width j)
 align)
)
 " ")
)
 (set! j (+ j 1)
)
 (loop19)
)
 (quote nil)
)
)
)
)
 (loop19)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! i (+ i 1)
)
)
)
)
)
)
)
 (loop17)
)
 (quote nil)
)
)
)
)
 (loop17)
)
)
)
 (display (to-str "")
)
 (newline)
)
)
)
)
)
)
)
)
)
(define text (string-append (string-append (string-append (string-append (string-append "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" "are$delineated$by$a$single$'dollar'$character,$write$a$program\n")
 "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n")
 "column$are$separated$by$at$least$one$space.\n")
 "Further,$allow$for$each$word$in$a$column$to$be$either$left\n")
 "justified,$right$justified,$or$center$justified$within$its$column.")
)
(define f (newFormatter text)
)
(printFmt f 0)
(printFmt f 1)
(printFmt f 2)
