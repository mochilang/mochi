;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (isPrime n)
 (call/cc (lambda (ret1)
 (begin (if (< n 2)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (if (equal? (modulo n 2)
 0)
 (begin (ret1 (equal? n 2)
)
)
 (quote ()
)
)
 (if (equal? (modulo n 3)
 0)
 (begin (ret1 (equal? n 3)
)
)
 (quote ()
)
)
 (let ((d 5)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (<= (* d d)
 n)
 (begin (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! d (+ d 2)
)
 (if (equal? (modulo n d)
 0)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! d (+ d 4)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #t)
)
)
)
)
)
)
(define (countPrimeFactors n)
 (call/cc (lambda (ret4)
 (begin (if (equal? n 1)
 (begin (ret4 0)
)
 (quote ()
)
)
 (if (isPrime n)
 (begin (ret4 1)
)
 (quote ()
)
)
 (let ((count 0)
)
 (begin (let ((f 2)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if #t (begin (if (equal? (modulo n f)
 0)
 (begin (set! count (+ count 1)
)
 (set! n (quotient n f)
)
 (if (equal? n 1)
 (begin (ret4 count)
)
 (quote ()
)
)
 (if (isPrime n)
 (begin (set! f n)
)
 (quote ()
)
)
)
 (if (>= f 3)
 (begin (set! f (+ f 2)
)
)
 (begin (set! f 3)
)
)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 count)
)
)
)
)
)
)
)
)
(define (pad4 n)
 (call/cc (lambda (ret7)
 (let ((s (to-str n)
)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
 4)
 (begin (set! s (string-append " " s)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
 (ret7 s)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret10)
 (let ((max 120)
)
 (begin (display (to-str (string-append (string-append "The attractive numbers up to and including " (to-str max)
)
 " are:")
)
)
 (newline)
 (let ((count 0)
)
 (begin (let ((line "")
)
 (begin (let ((lineCount 0)
)
 (begin (let ((i 1)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (<= i max)
 (begin (let ((c (countPrimeFactors i)
)
)
 (begin (if (isPrime c)
 (begin (set! line (string-append line (pad4 i)
)
)
 (set! count (+ count 1)
)
 (set! lineCount (+ lineCount 1)
)
 (if (equal? lineCount 20)
 (begin (display (to-str line)
)
 (newline)
 (set! line "")
 (set! lineCount 0)
)
 (quote ()
)
)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
 (if (> lineCount 0)
 (begin (display (to-str line)
)
 (newline)
)
 (quote ()
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
