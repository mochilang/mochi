;; Generated on 2025-07-27 23:17 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start5 (now)
)
)
 (begin (define (f)
 (call/cc (lambda (ret1)
 (ret1 (_list 0 0.0)
)
)
)
)
 (define (g a b)
 (call/cc (lambda (ret2)
 (ret2 0)
)
)
)
 (define (h s nums)
 (call/cc (lambda (ret3)
 (begin)
)
)
)
 (define (main)
 (call/cc (lambda (ret4)
 (let ((ab (f)
)
)
 (begin (let ((a (cond ((string? ab)
 (substring ab 0 (+ 0 1)
)
)
 ((hash-table? ab)
 (hash-table-ref ab 0)
)
 (else (list-ref ab 0)
)
)
)
)
 (begin (let ((b (cond ((string? ab)
 (substring ab 1 (+ 1 1)
)
)
 ((hash-table? ab)
 (hash-table-ref ab 1)
)
 (else (list-ref ab 1)
)
)
)
)
 (begin (let ((cb (cond ((string? (f)
)
 (substring (f)
 1 (+ 1 1)
)
)
 ((hash-table? (f)
)
 (hash-table-ref (f)
 1)
)
 (else (list-ref (f)
 1)
)
)
)
)
 (begin (let ((d (g a cb)
)
)
 (begin (let ((e (g d b)
)
)
 (begin (let ((i (g d 2.0)
)
)
 (begin (let ((list (_list)
)
)
 (begin (set! list (append list (_list a)
)
)
 (set! list (append list (_list d)
)
)
 (set! list (append list (_list e)
)
)
 (set! list (append list (_list i)
)
)
 (set! i (cond ((string? list)
 (string-length list)
)
 ((hash-table? list)
 (hash-table-size list)
)
 (else (length list)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end6 (now)
)
)
 (let ((dur7 (quotient (- end6 start5)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur7)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
