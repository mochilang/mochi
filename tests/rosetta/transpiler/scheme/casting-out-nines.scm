;; Generated on 2025-08-02 18:09 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (parseIntBase s base) (call/cc (lambda (ret1) (let ((digits "0123456789abcdefghijklmnopqrstuvwxyz")) (begin (let ((n 0)) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s)))) (begin (let ((j 0)) (begin (let ((v 0)) (begin (call/cc (lambda (break5) (letrec ((loop4 (lambda () (if (< j (cond ((string? digits) (string-length digits)) ((hash-table? digits) (hash-table-size digits)) (else (length digits)))) (begin (if (string=? (_substring digits j (+ j 1)) (_substring s i (+ i 1))) (begin (set! v j) (break5 (quote ()))) (quote ())) (set! j (+ j 1)) (loop4)) (quote ()))))) (loop4)))) (set! n (_add (* n base) v)) (set! i (+ i 1)))))) (loop2)) (quote ()))))) (loop2)))) (ret1 n))))))))))
(define (intToBase n base) (call/cc (lambda (ret6) (let ((digits "0123456789abcdefghijklmnopqrstuvwxyz")) (begin (if (equal? n 0) (begin (ret6 "0")) (quote ())) (let ((out "")) (begin (let ((v n)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (> v 0) (begin (let ((d (modulo v base))) (begin (set! out (string-append (_substring digits d (+ d 1)) out)) (set! v (quotient v base)))) (loop7)) (quote ()))))) (loop7)))) (ret6 out))))))))))
(define (subset base begin end) (call/cc (lambda (ret9) (let ((b (parseIntBase begin base))) (begin (let ((e (parseIntBase end base))) (begin (let ((out (_list))) (begin (let ((k b)) (begin (call/cc (lambda (break11) (letrec ((loop10 (lambda () (if (_le k e) (begin (let ((ks (intToBase k base))) (begin (let ((mod (- base 1))) (begin (let ((r1 (fmod (parseIntBase ks base) mod))) (begin (let ((r2 (fmod (* (parseIntBase ks base) (parseIntBase ks base)) mod))) (begin (if (equal? r1 r2) (begin (set! out (append out (_list ks)))) (quote ())) (set! k (_add k 1)))))))))) (loop10)) (quote ()))))) (loop10)))) (ret9 out))))))))))))
(define testCases (_list (alist->hash-table (_list (cons "base" 10) (cons "begin" "1") (cons "end" "100") (cons "kaprekar" (_list "1" "9" "45" "55" "99")))) (alist->hash-table (_list (cons "base" 17) (cons "begin" "10") (cons "end" "gg") (cons "kaprekar" (_list "3d" "d4" "gg"))))))
(define idx 0)
(call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< idx (cond ((string? testCases) (string-length testCases)) ((hash-table? testCases) (hash-table-size testCases)) (else (length testCases)))) (begin (let ((tc (list-ref testCases idx))) (begin (_display (to-str (string-append (string-append (string-append (string-append (string-append (string-append "\nTest case base = " (to-str (cond ((string? tc) (_substring tc "base" (+ "base" 1))) ((hash-table? tc) (hash-table-ref tc "base")) (else (list-ref tc "base"))))) ", begin = ") (cond ((string? tc) (_substring tc "begin" (+ "begin" 1))) ((hash-table? tc) (hash-table-ref tc "begin")) (else (list-ref tc "begin")))) ", end = ") (cond ((string? tc) (_substring tc "end" (+ "end" 1))) ((hash-table? tc) (hash-table-ref tc "end")) (else (list-ref tc "end")))) ":"))) (newline) (let ((s (subset (cond ((string? tc) (_substring tc "base" (+ "base" 1))) ((hash-table? tc) (hash-table-ref tc "base")) (else (list-ref tc "base"))) (cond ((string? tc) (_substring tc "begin" (+ "begin" 1))) ((hash-table? tc) (hash-table-ref tc "begin")) (else (list-ref tc "begin"))) (cond ((string? tc) (_substring tc "end" (+ "end" 1))) ((hash-table? tc) (hash-table-ref tc "end")) (else (list-ref tc "end")))))) (begin (_display (to-str (string-append "Subset:  " (to-str s)))) (newline) (_display (to-str (string-append "Kaprekar:" (to-str (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))))))) (newline) (let ((sx 0)) (begin (let ((valid #t)) (begin (let ((i 0)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< i (cond ((string? (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar")))) (string-length (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))))) ((hash-table? (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar")))) (hash-table-size (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))))) (else (length (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))))))) (begin (let ((k (cond ((string? (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar")))) (_substring (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))) i (+ i 1))) ((hash-table? (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar")))) (hash-table-ref (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))) i)) (else (list-ref (cond ((string? tc) (_substring tc "kaprekar" (+ "kaprekar" 1))) ((hash-table? tc) (hash-table-ref tc "kaprekar")) (else (list-ref tc "kaprekar"))) i))))) (begin (let ((found #f)) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (< sx (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s)))) (begin (if (string=? (cond ((string? s) (_substring s sx (+ sx 1))) ((hash-table? s) (hash-table-ref s sx)) (else (list-ref s sx))) k) (begin (set! found #t) (set! sx (+ sx 1)) (break17 (quote ()))) (quote ())) (set! sx (+ sx 1)) (loop16)) (quote ()))))) (loop16)))) (if (not found) (begin (_display (to-str (string-append (string-append "Fail:" k) " not in subset"))) (newline) (set! valid #f) (break15 (quote ()))) (quote ())) (set! i (+ i 1)))))) (loop14)) (quote ()))))) (loop14)))) (if valid (begin (_display (to-str "Valid subset.")) (newline)) (quote ())) (set! idx (+ idx 1)))))))))))) (loop12)) (quote ()))))) (loop12))))
