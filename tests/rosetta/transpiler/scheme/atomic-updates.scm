;; Generated on 2025-07-26 21:55 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start14 (now)
)
)
 (begin (define (randOrder seed n)
 (call/cc (lambda (ret1)
 (let ((next (modulo (+ (* seed 1664525)
 1013904223)
 2147483647)
)
)
 (begin (ret1 (_list next (modulo next n)
)
)
)
)
)
)
)
 (define (randChaos seed n)
 (call/cc (lambda (ret2)
 (let ((next (modulo (+ (* seed 1103515245)
 12345)
 2147483647)
)
)
 (begin (ret2 (_list next (modulo next n)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret3)
 (let ((nBuckets 10)
)
 (begin (let ((initialSum 1000)
)
 (begin (let ((buckets (_list)
)
)
 (begin (call/cc (lambda (break5)
 (letrec ((loop4 (lambda (i)
 (if (< i nBuckets)
 (begin (begin (set! buckets (append buckets (_list 0)
)
)
)
 (loop4 (+ i 1)
)
)
 (quote ()
)
)
)
)
)
 (loop4 0)
)
)
)
 (let ((i nBuckets)
)
 (begin (let ((dist initialSum)
)
 (begin (call/cc (lambda (break7)
 (letrec ((loop6 (lambda ()
 (if (> i 0)
 (begin (let ((v (quotient dist i)
)
)
 (begin (set! i (- i 1)
)
 (list-set! buckets i v)
 (set! dist (- dist v)
)
)
)
 (loop6)
)
 (quote ()
)
)
)
)
)
 (loop6)
)
)
)
 (let ((tc0 0)
)
 (begin (let ((tc1 0)
)
 (begin (let ((total 0)
)
 (begin (let ((nTicks 0)
)
 (begin (let ((seedOrder 1)
)
 (begin (let ((seedChaos 2)
)
 (begin (display (to-str "sum  ---updates---    mean  buckets")
)
 (newline)
 (let ((t 0)
)
 (begin (call/cc (lambda (break9)
 (letrec ((loop8 (lambda ()
 (if (< t 5)
 (begin (let ((r (randOrder seedOrder nBuckets)
)
)
 (begin (set! seedOrder (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
 (let ((b1 (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (let ((b2 (modulo (+ b1 1)
 nBuckets)
)
)
 (begin (let ((v1 (list-ref buckets b1)
)
)
 (begin (let ((v2 (list-ref buckets b2)
)
)
 (begin (if (> v1 v2)
 (begin (let ((a (let ((v10 (quotient (- v1 v2)
 2)
)
)
 (cond ((string? v10)
 (inexact->exact (string->number v10)
)
)
 ((boolean? v10)
 (if v10 1 0)
)
 (else (inexact->exact v10)
)
)
)
)
)
 (begin (if (> a (list-ref buckets b1)
)
 (begin (set! a (list-ref buckets b1)
)
)
 (quote ()
)
)
 (list-set! buckets b1 (- (list-ref buckets b1)
 a)
)
 (list-set! buckets b2 (+ (list-ref buckets b2)
 a)
)
)
)
)
 (begin (let ((a (let ((v11 (quotient (- v2 v1)
 2)
)
)
 (cond ((string? v11)
 (inexact->exact (string->number v11)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact v11)
)
)
)
)
)
 (begin (if (> a (list-ref buckets b2)
)
 (begin (set! a (list-ref buckets b2)
)
)
 (quote ()
)
)
 (list-set! buckets b2 (- (list-ref buckets b2)
 a)
)
 (list-set! buckets b1 (+ (list-ref buckets b1)
 a)
)
)
)
)
)
 (set! tc0 (+ tc0 1)
)
 (set! r (randChaos seedChaos nBuckets)
)
 (set! seedChaos (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
 (set! b1 (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
 (set! b2 (modulo (+ b1 1)
 nBuckets)
)
 (set! r (randChaos seedChaos (+ (list-ref buckets b1)
 1)
)
)
 (set! seedChaos (cond ((string? r)
 (substring r 0 (+ 0 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 0)
)
 (else (list-ref r 0)
)
)
)
 (let ((amt (cond ((string? r)
 (substring r 1 (+ 1 1)
)
)
 ((hash-table? r)
 (hash-table-ref r 1)
)
 (else (list-ref r 1)
)
)
)
)
 (begin (if (_gt amt (list-ref buckets b1)
)
 (begin (set! amt (list-ref buckets b1)
)
)
 (quote ()
)
)
 (list-set! buckets b1 (- (list-ref buckets b1)
 amt)
)
 (list-set! buckets b2 (+ (list-ref buckets b2)
 amt)
)
 (set! tc1 (+ tc1 1)
)
 (let ((sum 0)
)
 (begin (let ((idx 0)
)
 (begin (call/cc (lambda (break13)
 (letrec ((loop12 (lambda ()
 (if (< idx nBuckets)
 (begin (set! sum (+ sum (list-ref buckets idx)
)
)
 (set! idx (+ idx 1)
)
 (loop12)
)
 (quote ()
)
)
)
)
)
 (loop12)
)
)
)
 (set! total (+ (+ total tc0)
 tc1)
)
 (set! nTicks (+ nTicks 1)
)
 (display (to-str (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (to-str sum)
 " ")
 (to-str tc0)
)
 " ")
 (to-str tc1)
)
 " ")
 (to-str (quotient total nTicks)
)
)
 "  ")
 (to-str buckets)
)
)
)
 (newline)
 (set! tc0 0)
 (set! tc1 0)
 (set! t (+ t 1)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop8)
)
 (quote ()
)
)
)
)
)
 (loop8)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end15 (now)
)
)
 (let ((dur16 (quotient (- end15 start14)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur16)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
