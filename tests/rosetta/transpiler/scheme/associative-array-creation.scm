;; Generated on 2025-07-25 12:33 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (removeKey m k)
 (call/cc (lambda (ret1)
 (let ((out (alist->hash-table (list)
)
)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((key (car xs)
)
)
 (begin (if (not (string=? key k)
)
 (begin (hash-table-set! out key (hash-table-ref/default m key (quote ()
)
)
)
)
 (quote ()
)
)
)
)
 (loop2 (cdr xs)
)
)
)
)
)
)
 (loop2 (hash-table-keys m)
)
)
)
)
 (ret1 out)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret4)
 (let ((x (quote ()
)
)
)
 (begin (set! x (alist->hash-table (list)
)
)
 (hash-table-set! x "foo" 3)
 (let ((y1 (hash-table-ref/default x "bar" (quote ()
)
)
)
)
 (begin (let ((ok (cond ((string? x)
 (if (string-contains x "bar")
 #t #f)
)
 ((hash-table? x)
 (if (hash-table-exists? x "bar")
 #t #f)
)
 (else (if (member "bar" x)
 #t #f)
)
)
)
)
 (begin (display (to-str y1)
)
 (newline)
 (display (to-str (if ok #t #f)
)
)
 (newline)
 (set! x (removeKey x "foo")
)
 (set! x (alist->hash-table (list (cons "foo" 2)
 (cons "bar" 42)
 (cons "baz" (- 1)
)
)
)
)
 (display (to-str (hash-table-ref/default x "foo" (quote ()
)
)
)
)
 (display " ")
 (display (to-str (hash-table-ref/default x "bar" (quote ()
)
)
)
)
 (display " ")
 (display (to-str (hash-table-ref/default x "baz" (quote ()
)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
(main)
