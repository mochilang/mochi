;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (weekday y m d)
 (call/cc (lambda (ret1)
 (let ((yy y)
)
 (begin (let ((mm m)
)
 (begin (if (< mm 3)
 (begin (set! mm (+ mm 12)
)
 (set! yy (- yy 1)
)
)
 (quote ()
)
)
 (let ((k (modulo yy 100)
)
)
 (begin (let ((j (let ((v2 (quotient yy 100)
)
)
 (cond ((string? v2)
 (inexact->exact (floor (string->number v2)
)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact (floor v2)
)
)
)
)
)
)
 (begin (let ((a (let ((v3 (quotient (* 13 (+ mm 1)
)
 5)
)
)
 (cond ((string? v3)
 (inexact->exact (floor (string->number v3)
)
)
)
 ((boolean? v3)
 (if v3 1 0)
)
 (else (inexact->exact (floor v3)
)
)
)
)
)
)
 (begin (let ((b (let ((v4 (quotient k 4)
)
)
 (cond ((string? v4)
 (inexact->exact (floor (string->number v4)
)
)
)
 ((boolean? v4)
 (if v4 1 0)
)
 (else (inexact->exact (floor v4)
)
)
)
)
)
)
 (begin (let ((c (let ((v5 (quotient j 4)
)
)
 (cond ((string? v5)
 (inexact->exact (floor (string->number v5)
)
)
)
 ((boolean? v5)
 (if v5 1 0)
)
 (else (inexact->exact (floor v5)
)
)
)
)
)
)
 (begin (ret1 (modulo (_add (_add (_add (_add (+ d a)
 k)
 b)
 c)
 (* 5 j)
)
 7)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(call/cc (lambda (break7)
 (letrec ((loop6 (lambda (year)
 (if (< year 2122)
 (begin (begin (if (equal? (weekday year 12 25)
 1)
 (begin (_display (to-str (string-append (string-append "25 December " (to-str year)
)
 " is Sunday")
)
)
 (newline)
)
 (quote ()
)
)
)
 (loop6 (+ year 1)
)
)
 (quote ()
)
)
)
)
)
 (loop6 2008)
)
)
)
