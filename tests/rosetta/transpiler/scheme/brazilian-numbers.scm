;; Generated on 2025-07-27 16:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(let ((start21 (now)
)
)
 (begin (define (sameDigits n b)
 (call/cc (lambda (ret1)
 (let ((f (modulo n b)
)
)
 (begin (set! n (let ((v2 (quotient n b)
)
)
 (cond ((string? v2)
 (inexact->exact (floor (string->number v2)
)
)
)
 ((boolean? v2)
 (if v2 1 0)
)
 (else (inexact->exact (floor v2)
)
)
)
)
)
 (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (> n 0)
 (begin (if (not (equal? (modulo n b)
 f)
)
 (begin (ret1 #f)
)
 (quote ()
)
)
 (set! n (let ((v5 (quotient n b)
)
)
 (cond ((string? v5)
 (inexact->exact (floor (string->number v5)
)
)
)
 ((boolean? v5)
 (if v5 1 0)
)
 (else (inexact->exact (floor v5)
)
)
)
)
)
 (loop3)
)
 (quote ()
)
)
)
)
)
 (loop3)
)
)
)
 (ret1 #t)
)
)
)
)
)
 (define (isBrazilian n)
 (call/cc (lambda (ret6)
 (begin (if (< n 7)
 (begin (ret6 #f)
)
 (quote ()
)
)
 (if (and (equal? (modulo n 2)
 0)
 (>= n 8)
)
 (begin (ret6 #t)
)
 (quote ()
)
)
 (let ((b 2)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (_lt b (- n 1)
)
 (begin (if (sameDigits n b)
 (begin (ret6 #t)
)
 (quote ()
)
)
 (set! b (+ b 1)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret6 #f)
)
)
)
)
)
)
 (define (isPrime n)
 (call/cc (lambda (ret9)
 (begin (if (< n 2)
 (begin (ret9 #f)
)
 (quote ()
)
)
 (if (equal? (modulo n 2)
 0)
 (begin (ret9 (equal? n 2)
)
)
 (quote ()
)
)
 (if (equal? (modulo n 3)
 0)
 (begin (ret9 (equal? n 3)
)
)
 (quote ()
)
)
 (let ((d 5)
)
 (begin (call/cc (lambda (break11)
 (letrec ((loop10 (lambda ()
 (if (_le (* d d)
 n)
 (begin (if (equal? (modulo n d)
 0)
 (begin (ret9 #f)
)
 (quote ()
)
)
 (set! d (+ d 2)
)
 (if (equal? (modulo n d)
 0)
 (begin (ret9 #f)
)
 (quote ()
)
)
 (set! d (+ d 4)
)
 (loop10)
)
 (quote ()
)
)
)
)
)
 (loop10)
)
)
)
 (ret9 #t)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret12)
 (let ((kinds (_list " " " odd " " prime ")
)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda (xs)
 (if (null? xs)
 (quote ()
)
 (begin (let ((kind (car xs)
)
)
 (begin (_display (to-str (string-append (string-append "First 20" kind)
 "Brazilian numbers:")
)
)
 (newline)
 (let ((c 0)
)
 (begin (let ((n 7)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if #t (begin (if (isBrazilian n)
 (begin (_display (to-str (string-append (to-str n)
 " ")
)
)
 (newline)
 (set! c (+ c 1)
)
 (if (equal? c 20)
 (begin (_display (to-str "\n")
)
 (newline)
 (break16 (quote ()
)
)
)
 (quote ()
)
)
)
 (quote ()
)
)
 (if (string=? kind " ")
 (begin (set! n (+ n 1)
)
)
 (if (string=? kind " odd ")
 (begin (set! n (+ n 2)
)
)
 (begin (call/cc (lambda (break18)
 (letrec ((loop17 (lambda ()
 (if #t (begin (set! n (+ n 2)
)
 (if (isPrime n)
 (begin (break18 (quote ()
)
)
)
 (quote ()
)
)
 (loop17)
)
 (quote ()
)
)
)
)
)
 (loop17)
)
)
)
)
)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
)
)
)
)
)
)
 (loop13 (cdr xs)
)
)
)
)
)
)
 (loop13 kinds)
)
)
)
 (let ((n 7)
)
 (begin (let ((c 0)
)
 (begin (call/cc (lambda (break20)
 (letrec ((loop19 (lambda ()
 (if (< c 100000)
 (begin (if (isBrazilian n)
 (begin (set! c (+ c 1)
)
)
 (quote ()
)
)
 (set! n (+ n 1)
)
 (loop19)
)
 (quote ()
)
)
)
)
)
 (loop19)
)
)
)
 (_display (to-str (string-append "The 100,000th Brazilian number: " (to-str (- n 1)
)
)
)
)
 (newline)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end22 (now)
)
)
 (let ((dur23 (quotient (- end22 start21)
 1000)
)
)
 (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur23)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
