;; Generated on 2025-07-28 11:25 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((idx (string-contains r del)))
            (if idx
                (loop (substring r (+ idx (string-length del)))
                      (cons (substring r 0 idx) acc))
                (reverse (cons r acc)))))))))
(define (sqrtApprox x)
 (call/cc (lambda (ret1)
 (begin (if (<= x 0.0)
 (begin (ret1 0.0)
)
 (quote ()
)
)
 (let ((guess x)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i 20)
 (begin (set! guess (/ (_add guess (/ x guess)
)
 2.0)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 guess)
)
)
)
)
)
)
)
)
(define (powf base exp)
 (call/cc (lambda (ret4)
 (let ((result 1.0)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i exp)
 (begin (set! result (* result base)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (ret4 result)
)
)
)
)
)
)
)
(define (normalize v)
 (call/cc (lambda (ret7)
 (let ((len (sqrtApprox (_add (_add (* (hash-table-ref v "x")
 (hash-table-ref v "x")
)
 (* (hash-table-ref v "y")
 (hash-table-ref v "y")
)
)
 (* (hash-table-ref v "z")
 (hash-table-ref v "z")
)
)
)
)
)
 (begin (ret7 (alist->hash-table (_list (cons "x" (/ (hash-table-ref v "x")
 len)
)
 (cons "y" (/ (hash-table-ref v "y")
 len)
)
 (cons "z" (/ (hash-table-ref v "z")
 len)
)
)
)
)
)
)
)
)
)
(define (dot a b)
 (call/cc (lambda (ret8)
 (let ((d (_add (_add (* (hash-table-ref a "x")
 (hash-table-ref b "x")
)
 (* (hash-table-ref a "y")
 (hash-table-ref b "y")
)
)
 (* (hash-table-ref a "z")
 (hash-table-ref b "z")
)
)
)
)
 (begin (if (< d 0.0)
 (begin (ret8 (- d)
)
)
 (quote ()
)
)
 (ret8 0.0)
)
)
)
)
)
(define (hitSphere s x y)
 (call/cc (lambda (ret9)
 (let ((dx (- x (hash-table-ref s "cx")
)
)
)
 (begin (let ((dy (- y (hash-table-ref s "cy")
)
)
)
 (begin (let ((zsq (- (* (hash-table-ref s "r")
 (hash-table-ref s "r")
)
 (_add (* dx dx)
 (* dy dy)
)
)
)
)
 (begin (if (< zsq 0.0)
 (begin (ret9 (alist->hash-table (_list (cons "hit" #f)
)
)
)
)
 (quote ()
)
)
 (let ((z (sqrtApprox zsq)
)
)
 (begin (ret9 (alist->hash-table (_list (cons "hit" #t)
 (cons "z1" (- (hash-table-ref s "cz")
 z)
)
 (cons "z2" (_add (hash-table-ref s "cz")
 z)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(define (main)
 (call/cc (lambda (ret10)
 (let ((shades ".:!*oe&#%@")
)
 (begin (let ((light (normalize (alist->hash-table (_list (cons "x" (- 50.0)
)
 (cons "y" 30.0)
 (cons "z" 50.0)
)
)
)
)
)
 (begin (let ((pos (alist->hash-table (_list (cons "cx" 20.0)
 (cons "cy" 20.0)
 (cons "cz" 0.0)
 (cons "r" 20.0)
)
)
)
)
 (begin (let ((neg (alist->hash-table (_list (cons "cx" 1.0)
 (cons "cy" 1.0)
 (cons "cz" (- 6.0)
)
 (cons "r" 20.0)
)
)
)
)
 (begin (let ((yi 0)
)
 (begin (call/cc (lambda (break12)
 (letrec ((loop11 (lambda ()
 (if (<= yi 40)
 (begin (let ((y (+ (+ 0.0 yi)
 0.5)
)
)
 (begin (let ((line "")
)
 (begin (let ((xi (- 20)
)
)
 (begin (call/cc (lambda (break14)
 (letrec ((loop13 (lambda ()
 (if (<= xi 60)
 (begin (let ((x (_add (_add (/ (- (+ 0.0 xi)
 (hash-table-ref pos "cx")
)
 2.0)
 0.5)
 (hash-table-ref pos "cx")
)
)
)
 (begin (let ((hb (hitSphere pos x y)
)
)
 (begin (if (not (hash-table-ref hb "hit")
)
 (begin (set! line (string-append line " ")
)
 (set! xi (+ xi 1)
)
 (loop13)
)
 (quote ()
)
)
 (let ((zb1 (hash-table-ref hb "z1")
)
)
 (begin (let ((zb2 (hash-table-ref hb "z2")
)
)
 (begin (let ((hs (hitSphere neg x y)
)
)
 (begin (let ((hitRes 1)
)
 (begin (if (not (hash-table-ref hs "hit")
)
 (begin (set! hitRes 1)
)
 (if (_gt (hash-table-ref hs "z1")
 zb1)
 (begin (set! hitRes 1)
)
 (if (_gt (hash-table-ref hs "z2")
 zb2)
 (begin (set! hitRes 0)
)
 (if (_gt (hash-table-ref hs "z2")
 zb1)
 (begin (set! hitRes 2)
)
 (begin (set! hitRes 1)
)
)
)
)
)
 (if (equal? hitRes 0)
 (begin (set! line (string-append line " ")
)
 (set! xi (+ xi 1)
)
 (loop13)
)
 (quote ()
)
)
 (let ((vec (quote ()
)
)
)
 (begin (if (equal? hitRes 1)
 (begin (set! vec (alist->hash-table (_list (cons "x" (- x (hash-table-ref pos "cx")
)
)
 (cons "y" (- y (hash-table-ref pos "cy")
)
)
 (cons "z" (- zb1 (hash-table-ref pos "cz")
)
)
)
)
)
)
 (begin (set! vec (alist->hash-table (_list (cons "x" (- (hash-table-ref neg "cx")
 x)
)
 (cons "y" (- (hash-table-ref neg "cy")
 y)
)
 (cons "z" (- (hash-table-ref neg "cz")
 (hash-table-ref hs "z2")
)
)
)
)
)
)
)
 (set! vec (normalize vec)
)
 (let ((b (_add (powf (dot light vec)
 2)
 0.5)
)
)
 (begin (let ((intensity (let ((v15 (* (- 1.0 b)
 (+ 0.0 (cond ((string? shades)
 (string-length shades)
)
 ((hash-table? shades)
 (hash-table-size shades)
)
 (else (length shades)
)
)
)
)
)
)
 (cond ((string? v15)
 (inexact->exact (floor (string->number v15)
)
)
)
 ((boolean? v15)
 (if v15 1 0)
)
 (else (inexact->exact (floor v15)
)
)
)
)
)
)
 (begin (if (< intensity 0)
 (begin (set! intensity 0)
)
 (quote ()
)
)
 (if (>= intensity (cond ((string? shades)
 (string-length shades)
)
 ((hash-table? shades)
 (hash-table-size shades)
)
 (else (length shades)
)
)
)
 (begin (set! intensity (- (cond ((string? shades)
 (string-length shades)
)
 ((hash-table? shades)
 (hash-table-size shades)
)
 (else (length shades)
)
)
 1)
)
)
 (quote ()
)
)
 (set! line (string-append line (substring shades intensity (+ intensity 1)
)
)
)
 (set! xi (+ xi 1)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
 (loop13)
)
 (quote ()
)
)
)
)
)
 (loop13)
)
)
)
 (_display (to-str line)
)
 (newline)
 (set! yi (+ yi 1)
)
)
)
)
)
)
)
 (loop11)
)
 (quote ()
)
)
)
)
)
 (loop11)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
(main)
