;; Generated on 2025-08-03 10:21 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi io))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_input)
  (let ((l (read-line)))
    (if (eof-object? l) "" l)))
(let ((start15 (now))) (begin (define (parseIntStr str) (call/cc (lambda (ret1) (let ((i 0)) (begin (let ((neg #f)) (begin (if (and (> (cond ((string? str) (string-length str)) ((hash-table? str) (hash-table-size str)) (else (length str))) 0) (string=? (_substring str 0 1) "-")) (begin (set! neg #t) (set! i 1)) (quote ())) (let ((n 0)) (begin (let ((digits (alist->hash-table (_list (cons "0" 0) (cons "1" 1) (cons "2" 2) (cons "3" 3) (cons "4" 4) (cons "5" 5) (cons "6" 6) (cons "7" 7) (cons "8" 8) (cons "9" 9))))) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i (cond ((string? str) (string-length str)) ((hash-table? str) (hash-table-size str)) (else (length str)))) (begin (set! n (_add (* n 10) (cond ((string? digits) (_substring digits (_substring str i (+ i 1)) (+ (_substring str i (+ i 1)) 1))) ((hash-table? digits) (hash-table-ref digits (_substring str i (+ i 1)))) (else (list-ref digits (_substring str i (+ i 1))))))) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (if neg (begin (set! n (- n))) (quote ())) (ret1 n)))))))))))) (define (main) (call/cc (lambda (ret4) (let ((n 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (or (< n 1) (> n 5)) (begin (_display (to-str "How many integer variables do you want to create (max 5) : ")) (newline) (let ((line (_input))) (begin (if (> (cond ((string? line) (string-length line)) ((hash-table? line) (hash-table-size line)) (else (length line))) 0) (begin (set! n (parseIntStr line))) (quote ())))) (loop5)) (quote ()))))) (loop5)))) (let ((vars (alist->hash-table (_list)))) (begin (_display (to-str "OK, enter the variable names and their values, below\n")) (newline) (let ((i 1)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (<= i n) (begin (_display (to-str (string-append (string-append "\n  Variable " (to-str i)) "\n"))) (newline) (_display (to-str "    Name  : ")) (newline) (let ((name (_input))) (begin (if (cond ((string? vars) (if (string-contains vars name) #t #f)) ((hash-table? vars) (if (hash-table-exists? vars name) #t #f)) (else (if (member name vars) #t #f))) (begin (_display (to-str "  Sorry, you've already created a variable of that name, try again")) (newline) (loop7)) (quote ())) (let ((value 0)) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if #t (begin (_display (to-str "    Value : ")) (newline) (let ((valstr (_input))) (begin (if (equal? (cond ((string? valstr) (string-length valstr)) ((hash-table? valstr) (hash-table-size valstr)) (else (length valstr))) 0) (begin (_display (to-str "  Not a valid integer, try again")) (newline) (loop9)) (quote ())) (let ((ok #t)) (begin (let ((j 0)) (begin (let ((neg #f)) (begin (if (string=? (_substring valstr 0 1) "-") (begin (set! neg #t) (set! j 1)) (quote ())) (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< j (cond ((string? valstr) (string-length valstr)) ((hash-table? valstr) (hash-table-size valstr)) (else (length valstr)))) (begin (let ((ch (_substring valstr j (+ j 1)))) (begin (if (or (string<? ch "0") (string>? ch "9")) (begin (set! ok #f) (break12 (quote ()))) (quote ())) (set! j (+ j 1)))) (loop11)) (quote ()))))) (loop11)))) (if (not ok) (begin (_display (to-str "  Not a valid integer, try again")) (newline) (loop9)) (quote ())) (set! value (parseIntStr valstr)) (break10 (quote ())))))))))) (loop9)) (quote ()))))) (loop9)))) (hash-table-set! vars name value) (set! i (+ i 1)))))) (loop7)) (quote ()))))) (loop7)))) (_display (to-str "\nEnter q to quit")) (newline) (call/cc (lambda (break14) (letrec ((loop13 (lambda () (if #t (begin (_display (to-str "\nWhich variable do you want to inspect : ")) (newline) (let ((name (_input))) (begin (if (string=? (lower name) "q") (begin (ret4 (quote ()))) (quote ())) (if (cond ((string? vars) (if (string-contains vars name) #t #f)) ((hash-table? vars) (if (hash-table-exists? vars name) #t #f)) (else (if (member name vars) #t #f))) (begin (_display (to-str (string-append "It's value is " (to-str (hash-table-ref/default vars name (quote ())))))) (newline)) (begin (_display (to-str "Sorry there's no variable of that name, try again")) (newline))))) (loop13)) (quote ()))))) (loop13))))))))))))) (main) (let ((end16 (now))) (let ((dur17 (quotient (- end16 start15) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur17) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
