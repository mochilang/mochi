;; Generated on 2025-07-25 01:31 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define msg "Hello World! ")
(define shift 0)
(define inc 1)
(define clicks 0)
(define frames 0)
(call/cc (lambda (break2)
 (letrec ((loop1 (lambda ()
 (if (< clicks 5)
 (begin (let ((line "")
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break4)
 (letrec ((loop3 (lambda ()
 (if (< i (cond ((string? msg)
 (string-length msg)
)
 ((hash-table? msg)
 (hash-table-size msg)
)
 (else (length msg)
)
)
)
 (begin (let ((idx (modulo (+ shift i)
 (cond ((string? msg)
 (string-length msg)
)
 ((hash-table? msg)
 (hash-table-size msg)
)
 (else (length msg)
)
)
)
)
)
 (begin (set! line (string-append line (substring msg idx (+ idx 1)
)
)
)
 (set! i (+ i 1)
)
)
)
 (loop3)
)
 (quote nil)
)
)
)
)
 (loop3)
)
)
)
 (display (to-str line)
)
 (newline)
 (set! shift (modulo (+ shift inc)
 (cond ((string? msg)
 (string-length msg)
)
 ((hash-table? msg)
 (hash-table-size msg)
)
 (else (length msg)
)
)
)
)
 (set! frames (+ frames 1)
)
 (if (equal? (modulo frames (cond ((string? msg)
 (string-length msg)
)
 ((hash-table? msg)
 (hash-table-size msg)
)
 (else (length msg)
)
)
)
 0)
 (begin (set! inc (- (cond ((string? msg)
 (string-length msg)
)
 ((hash-table? msg)
 (hash-table-size msg)
)
 (else (length msg)
)
)
 inc)
)
 (set! clicks (+ clicks 1)
)
)
 (quote nil)
)
)
)
)
)
 (loop1)
)
 (quote nil)
)
)
)
)
 (loop1)
)
)
)
