;; Generated on 2025-07-26 23:50 +0700
(import (only (scheme base) call/cc when list-ref list-set!))
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (inexact->exact (* (current-second) 1000000000))))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(let ((start17 (now)
)
)
 (begin (define (indexOf s ch)
 (call/cc (lambda (ret1)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? s)
 (string-length s)
)
 ((hash-table? s)
 (hash-table-size s)
)
 (else (length s)
)
)
)
 (begin (if (string=? (substring s i (+ i 1)
)
 ch)
 (begin (ret1 i)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop2)
)
 (quote ()
)
)
)
)
)
 (loop2)
)
)
)
 (ret1 (- 1)
)
)
)
)
)
)
 (define (set58 addr)
 (call/cc (lambda (ret4)
 (let ((tmpl "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
)
 (begin (let ((a (_list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i 25)
 (begin (set! a (append a (_list 0)
)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote ()
)
)
)
)
)
 (loop5)
)
)
)
 (let ((idx 0)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< idx (cond ((string? addr)
 (string-length addr)
)
 ((hash-table? addr)
 (hash-table-size addr)
)
 (else (length addr)
)
)
)
 (begin (let ((ch (substring addr idx (+ idx 1)
)
)
)
 (begin (let ((c (indexOf tmpl ch)
)
)
 (begin (if (_lt c 0)
 (begin (ret4 (_list)
)
)
 (quote ()
)
)
 (let ((j 24)
)
 (begin (call/cc (lambda (break10)
 (letrec ((loop9 (lambda ()
 (if (>= j 0)
 (begin (set! c (+ c (* 58 (list-ref a j)
)
)
)
 (list-set! a j (fmod c 256)
)
 (set! c (let ((v11 (/ c 256)
)
)
 (cond ((string? v11)
 (inexact->exact (string->number v11)
)
)
 ((boolean? v11)
 (if v11 1 0)
)
 (else (inexact->exact v11)
)
)
)
)
 (set! j (- j 1)
)
 (loop9)
)
 (quote ()
)
)
)
)
)
 (loop9)
)
)
)
 (if (_gt c 0)
 (begin (ret4 (_list)
)
)
 (quote ()
)
)
 (set! idx (+ idx 1)
)
)
)
)
)
)
)
 (loop7)
)
 (quote ()
)
)
)
)
)
 (loop7)
)
)
)
 (ret4 a)
)
)
)
)
)
)
)
)
)
)
)
 (define (doubleSHA256 bs)
 (call/cc (lambda (ret12)
 (let ((first (sha256 bs)
)
)
 (begin (ret12 (sha256 first)
)
)
)
)
)
)
 (define (computeChecksum a)
 (call/cc (lambda (ret13)
 (let ((hash (doubleSHA256 (take (drop a 0)
 (- 21 0)
)
)
)
)
 (begin (ret13 (if (string? hash)
 (substring hash 0 4)
 (take (drop hash 0)
 (- 4 0)
)
)
)
)
)
)
)
)
 (define (validA58 addr)
 (call/cc (lambda (ret14)
 (let ((a (set58 addr)
)
)
 (begin (if (not (equal? (cond ((string? a)
 (string-length a)
)
 ((hash-table? a)
 (hash-table-size a)
)
 (else (length a)
)
)
 25)
)
 (begin (ret14 #f)
)
 (quote ()
)
)
 (if (not (equal? (cond ((string? a)
 (substring a 0 (+ 0 1)
)
)
 ((hash-table? a)
 (hash-table-ref a 0)
)
 (else (list-ref a 0)
)
)
 0)
)
 (begin (ret14 #f)
)
 (quote ()
)
)
 (let ((sum (computeChecksum a)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break16)
 (letrec ((loop15 (lambda ()
 (if (< i 4)
 (begin (if (not (equal? (cond ((string? a)
 (substring a (+ 21 i)
 (+ (+ 21 i)
 1)
)
)
 ((hash-table? a)
 (hash-table-ref a (+ 21 i)
)
)
 (else (list-ref a (+ 21 i)
)
)
)
 (cond ((string? sum)
 (substring sum i (+ i 1)
)
)
 ((hash-table? sum)
 (hash-table-ref sum i)
)
 (else (list-ref sum i)
)
)
)
)
 (begin (ret14 #f)
)
 (quote ()
)
)
 (set! i (+ i 1)
)
 (loop15)
)
 (quote ()
)
)
)
)
)
 (loop15)
)
)
)
 (ret14 #t)
)
)
)
)
)
)
)
)
)
 (display (to-str (to-str (validA58 "1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")
)
)
)
 (newline)
 (display (to-str (to-str (validA58 "17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")
)
)
)
 (newline)
 (let ((end18 (now)
)
)
 (let ((dur19 (quotient (- end18 start17)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur19)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
