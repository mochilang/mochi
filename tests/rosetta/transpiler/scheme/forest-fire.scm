;; Generated on 2025-08-04 15:16 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(let ((start25 (current-jiffy)) (jps28 (jiffies-per-second))) (begin (let ((rows 20)) (begin (let ((cols 30)) (begin (let ((p 0.01)) (begin (let ((f 0.001)) (begin (define (repeat ch n) (call/cc (lambda (ret1) (let ((s "")) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i n) (begin (set! s (string-append s ch)) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 s)))))))) (define (chance prob) (call/cc (lambda (ret4) (let ((threshold (let ((v5 (* prob 1000.0))) (cond ((string? v5) (exact (floor (string->number v5)))) ((boolean? v5) (if v5 1 0)) (else (exact (floor v5))))))) (begin (ret4 (_lt (modulo (now) 1000) threshold))))))) (define (newBoard) (call/cc (lambda (ret6) (let ((b (_list))) (begin (let ((r 0)) (begin (call/cc (lambda (break8) (letrec ((loop7 (lambda () (if (< r rows) (begin (let ((row (_list))) (begin (let ((c 0)) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (< c cols) (begin (if (equal? (modulo (now) 2) 0) (begin (set! row (append row (_list "T")))) (begin (set! row (append row (_list " "))))) (set! c (+ c 1)) (loop9)) (quote ()))))) (loop9)))) (set! b (append b (_list row))) (set! r (+ r 1)))))) (loop7)) (quote ()))))) (loop7)))) (ret6 b)))))))) (define (step src) (call/cc (lambda (ret11) (let ((dst (_list))) (begin (let ((r 0)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< r rows) (begin (let ((row (_list))) (begin (let ((c 0)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< c cols) (begin (let ((cell (cond ((string? (list-ref src r)) (_substring (list-ref src r) c (+ c 1))) ((hash-table? (list-ref src r)) (hash-table-ref (list-ref src r) c)) (else (list-ref (list-ref src r) c))))) (begin (let ((next cell)) (begin (if (string=? cell "#") (begin (set! next " ")) (if (string=? cell "T") (begin (let ((burning #f)) (begin (let ((dr (- 1))) (begin (call/cc (lambda (break17) (letrec ((loop16 (lambda () (if (<= dr 1) (begin (let ((dc (- 1))) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda () (if (<= dc 1) (begin (if (or (not (equal? dr 0)) (not (equal? dc 0))) (begin (let ((rr (+ r dr))) (begin (let ((cc (+ c dc))) (begin (if (and (and (and (>= rr 0) (< rr rows)) (>= cc 0)) (< cc cols)) (begin (if (string=? (cond ((string? (list-ref src rr)) (_substring (list-ref src rr) cc (+ cc 1))) ((hash-table? (list-ref src rr)) (hash-table-ref (list-ref src rr) cc)) (else (list-ref (list-ref src rr) cc))) "#") (begin (set! burning #t)) (quote ()))) (quote ()))))))) (quote ())) (set! dc (+ dc 1)) (loop18)) (quote ()))))) (loop18)))) (set! dr (+ dr 1)))) (loop16)) (quote ()))))) (loop16)))) (if (or burning (chance f)) (begin (set! next "#")) (quote ()))))))) (begin (if (chance p) (begin (set! next "T")) (quote ()))))) (set! row (append row (_list next))) (set! c (+ c 1)))))) (loop14)) (quote ()))))) (loop14)))) (set! dst (append dst (_list row))) (set! r (+ r 1)))))) (loop12)) (quote ()))))) (loop12)))) (ret11 dst)))))))) (define (printBoard b) (call/cc (lambda (ret20) (begin (_display (to-str (string-append (repeat "__" cols) "\n\n"))) (newline) (let ((r 0)) (begin (call/cc (lambda (break22) (letrec ((loop21 (lambda () (if (< r rows) (begin (let ((line "")) (begin (let ((c 0)) (begin (call/cc (lambda (break24) (letrec ((loop23 (lambda () (if (< c cols) (begin (let ((cell (cond ((string? (list-ref b r)) (_substring (list-ref b r) c (+ c 1))) ((hash-table? (list-ref b r)) (hash-table-ref (list-ref b r) c)) (else (list-ref (list-ref b r) c))))) (begin (if (string=? cell " ") (begin (set! line (string-append line "  "))) (begin (set! line (string-append (string-append line " ") cell)))) (set! c (+ c 1)))) (loop23)) (quote ()))))) (loop23)))) (_display (to-str (string-append line "\n"))) (newline) (set! r (+ r 1)))))) (loop21)) (quote ()))))) (loop21)))))))))) (let ((board (newBoard))) (begin (printBoard board) (set! board (step board)) (printBoard board))))))))))) (let ((end26 (current-jiffy))) (let ((dur27 (quotient (* (- end26 start25) 1000000) jps28))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur27) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
