;; Generated on 2025-07-25 08:58 +0700
(import (only (scheme base) call/cc when list-ref list-set! list))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (* (current-seconds) 1000000000)))(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(let ((start9 (now)
)
)
 (begin (define (amb wordsets res idx)
 (call/cc (lambda (ret1)
 (begin (if (equal? idx (cond ((string? wordsets)
 (string-length wordsets)
)
 ((hash-table? wordsets)
 (hash-table-size wordsets)
)
 (else (length wordsets)
)
)
)
 (begin (ret1 #t)
)
 (quote nil)
)
 (let ((prev "")
)
 (begin (if (> idx 0)
 (begin (set! prev (list-ref res (- idx 1)
)
)
)
 (quote nil)
)
 (let ((i 0)
)
 (begin (call/cc (lambda (break3)
 (letrec ((loop2 (lambda ()
 (if (< i (cond ((string? (list-ref wordsets idx)
)
 (string-length (list-ref wordsets idx)
)
)
 ((hash-table? (list-ref wordsets idx)
)
 (hash-table-size (list-ref wordsets idx)
)
)
 (else (length (list-ref wordsets idx)
)
)
)
)
 (begin (let ((w (cond ((string? (list-ref wordsets idx)
)
 (string-ref (list-ref wordsets idx)
 i)
)
 ((hash-table? (list-ref wordsets idx)
)
 (hash-table-ref (list-ref wordsets idx)
 i)
)
 (else (list-ref (list-ref wordsets idx)
 i)
)
)
)
)
 (begin (if (or (equal? idx 0)
 (string=? (substring prev (- (cond ((string? prev)
 (string-length prev)
)
 ((hash-table? prev)
 (hash-table-size prev)
)
 (else (length prev)
)
)
 1)
 (cond ((string? prev)
 (string-length prev)
)
 ((hash-table? prev)
 (hash-table-size prev)
)
 (else (length prev)
)
)
)
 (substring w 0 1)
)
)
 (begin (list-set! res idx w)
 (if (amb wordsets res (+ idx 1)
)
 (begin (ret1 #t)
)
 (quote nil)
)
)
 (quote nil)
)
 (set! i (+ i 1)
)
)
)
 (loop2)
)
 (quote nil)
)
)
)
)
 (loop2)
)
)
)
 (ret1 #f)
)
)
)
)
)
)
)
)
 (define (main)
 (call/cc (lambda (ret4)
 (let ((wordset (list (list "the" "that" "a")
 (list "frog" "elephant" "thing")
 (list "walked" "treaded" "grows")
 (list "slowly" "quickly")
)
)
)
 (begin (let ((res (list)
)
)
 (begin (let ((i 0)
)
 (begin (call/cc (lambda (break6)
 (letrec ((loop5 (lambda ()
 (if (< i (cond ((string? wordset)
 (string-length wordset)
)
 ((hash-table? wordset)
 (hash-table-size wordset)
)
 (else (length wordset)
)
)
)
 (begin (set! res (append res (list "")
)
)
 (set! i (+ i 1)
)
 (loop5)
)
 (quote nil)
)
)
)
)
 (loop5)
)
)
)
 (if (amb wordset res 0)
 (begin (let ((out (string-append "[" (list-ref res 0)
)
)
)
 (begin (let ((j 1)
)
 (begin (call/cc (lambda (break8)
 (letrec ((loop7 (lambda ()
 (if (< j (cond ((string? res)
 (string-length res)
)
 ((hash-table? res)
 (hash-table-size res)
)
 (else (length res)
)
)
)
 (begin (set! out (string-append (string-append out " ")
 (list-ref res j)
)
)
 (set! j (+ j 1)
)
 (loop7)
)
 (quote nil)
)
)
)
)
 (loop7)
)
)
)
 (set! out (string-append out "]")
)
 (display (to-str out)
)
 (newline)
)
)
)
)
)
 (begin (display (to-str "No amb found")
)
 (newline)
)
)
)
)
)
)
)
)
)
)
)
 (main)
 (let ((end10 (now)
)
)
 (let ((dur11 (quotient (- end10 start9)
 1000)
)
)
 (begin (display (string-append "{\n  \"duration_us\": " (number->string dur11)
 ",\n  \"memory_bytes\": " (number->string (_mem)
)
 ",\n  \"name\": \"main\"\n}")
)
 (newline)
)
)
)
)
)
