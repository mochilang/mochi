;; Generated on 2025-08-04 22:39 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(let ((start16 (current-jiffy)) (jps19 (jiffies-per-second))) (begin (define (fuscVal n) (call/cc (lambda (ret1) (let ((a 1)) (begin (let ((b 0)) (begin (let ((x n)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (> x 0) (begin (if (equal? (modulo x 2) 0) (begin (set! x (quotient x 2)) (set! a (+ a b))) (begin (set! x (quotient (- x 1) 2)) (set! b (+ a b)))) (loop2)) (quote ()))))) (loop2)))) (if (equal? n 0) (begin (ret1 0)) (quote ())) (ret1 b)))))))))) (define (firstFusc n) (call/cc (lambda (ret4) (let ((arr (_list))) (begin (let ((i 0)) (begin (call/cc (lambda (break6) (letrec ((loop5 (lambda () (if (< i n) (begin (set! arr (append arr (_list (fuscVal i)))) (set! i (+ i 1)) (loop5)) (quote ()))))) (loop5)))) (ret4 arr)))))))) (define (commatize n) (call/cc (lambda (ret7) (let ((s (to-str n))) (begin (let ((neg #f)) (begin (if (< n 0) (begin (set! neg #t) (set! s (_substring s 1 (_len s)))) (quote ())) (let ((i (- (_len s) 3))) (begin (call/cc (lambda (break9) (letrec ((loop8 (lambda () (if (>= i 1) (begin (set! s (string-append (string-append (_substring s 0 i) ",") (_substring s i (_len s)))) (set! i (- i 3)) (loop8)) (quote ()))))) (loop8)))) (if neg (begin (ret7 (string-append "-" s))) (quote ())) (ret7 s)))))))))) (define (padLeft s w) (call/cc (lambda (ret10) (let ((out s)) (begin (call/cc (lambda (break12) (letrec ((loop11 (lambda () (if (< (_len out) w) (begin (set! out (string-append " " out)) (loop11)) (quote ()))))) (loop11)))) (ret10 out)))))) (define (main) (call/cc (lambda (ret13) (begin (_display (to-str "The first 61 fusc numbers are:")) (newline) (_display (to-str (to-str (firstFusc 61)))) (newline) (_display (to-str "\nThe fusc numbers whose length > any previous fusc number length are:")) (newline) (let ((idxs (_list 0 37 1173 35499 699051 19573419))) (begin (let ((i 0)) (begin (call/cc (lambda (break15) (letrec ((loop14 (lambda () (if (< i (_len idxs)) (begin (let ((idx (list-ref idxs i))) (begin (let ((val (fuscVal idx))) (begin (let ((numStr (padLeft (commatize val) 7))) (begin (let ((idxStr (padLeft (commatize idx) 10))) (begin (_display (to-str (string-append (string-append (string-append numStr " (index ") idxStr) ")"))) (newline) (set! i (+ i 1)))))))))) (loop14)) (quote ()))))) (loop14)))))))))))) (main) (let ((end17 (current-jiffy))) (let ((dur18 (quotient (* (- end17 start16) 1000000) jps19))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur18) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
