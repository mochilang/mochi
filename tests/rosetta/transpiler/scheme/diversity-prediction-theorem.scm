;; Generated on 2025-08-03 10:21 +0700
(import (rename (scheme base) (list _list)))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (scheme write))
(import (srfi 69))
(import (srfi 1))
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ":" (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "")
        ((string? x) x)
        ((boolean? x) (if x "1" "0"))
        (else (number->string x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (fmod a b) (- a (* (floor (/ a b)) b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(let ((start20 (now))) (begin (define (pow10 n) (call/cc (lambda (ret1) (let ((r 1.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break3) (letrec ((loop2 (lambda () (if (< i n) (begin (set! r (* r 10.0)) (set! i (+ i 1)) (loop2)) (quote ()))))) (loop2)))) (ret1 r)))))))) (define (formatFloat f prec) (call/cc (lambda (ret4) (let ((scale (pow10 prec))) (begin (let ((scaled (_add (* f scale) 0.5))) (begin (let ((n (let ((v5 scaled)) (cond ((string? v5) (inexact->exact (floor (string->number v5)))) ((boolean? v5) (if v5 1 0)) (else (inexact->exact (floor v5))))))) (begin (let ((digits (to-str n))) (begin (call/cc (lambda (break7) (letrec ((loop6 (lambda () (if (<= (cond ((string? digits) (string-length digits)) ((hash-table? digits) (hash-table-size digits)) (else (length digits))) prec) (begin (set! digits (string-append "0" digits)) (loop6)) (quote ()))))) (loop6)))) (let ((intPart (_substring digits 0 (- (cond ((string? digits) (string-length digits)) ((hash-table? digits) (hash-table-size digits)) (else (length digits))) prec)))) (begin (let ((fracPart (_substring digits (- (cond ((string? digits) (string-length digits)) ((hash-table? digits) (hash-table-size digits)) (else (length digits))) prec) (cond ((string? digits) (string-length digits)) ((hash-table? digits) (hash-table-size digits)) (else (length digits)))))) (begin (ret4 (string-append (string-append intPart ".") fracPart))))))))))))))))) (define (padLeft s w) (call/cc (lambda (ret8) (let ((res "")) (begin (let ((n (- w (cond ((string? s) (string-length s)) ((hash-table? s) (hash-table-size s)) (else (length s)))))) (begin (call/cc (lambda (break10) (letrec ((loop9 (lambda () (if (> n 0) (begin (set! res (string-append res " ")) (set! n (- n 1)) (loop9)) (quote ()))))) (loop9)))) (ret8 (string-append res s))))))))) (define (averageSquareDiff f preds) (call/cc (lambda (ret11) (let ((av 0.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break13) (letrec ((loop12 (lambda () (if (< i (cond ((string? preds) (string-length preds)) ((hash-table? preds) (hash-table-size preds)) (else (length preds)))) (begin (set! av (_add av (* (- (list-ref preds i) f) (- (list-ref preds i) f)))) (set! i (+ i 1)) (loop12)) (quote ()))))) (loop12)))) (set! av (/ av (+ 0.0 (cond ((string? preds) (string-length preds)) ((hash-table? preds) (hash-table-size preds)) (else (length preds)))))) (ret11 av)))))))) (define (diversityTheorem truth preds) (call/cc (lambda (ret14) (let ((av 0.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break16) (letrec ((loop15 (lambda () (if (< i (cond ((string? preds) (string-length preds)) ((hash-table? preds) (hash-table-size preds)) (else (length preds)))) (begin (set! av (+ av (list-ref preds i))) (set! i (+ i 1)) (loop15)) (quote ()))))) (loop15)))) (set! av (/ av (+ 0.0 (cond ((string? preds) (string-length preds)) ((hash-table? preds) (hash-table-size preds)) (else (length preds)))))) (let ((avErr (averageSquareDiff truth preds))) (begin (let ((crowdErr (* (- truth av) (- truth av)))) (begin (let ((div (averageSquareDiff av preds))) (begin (ret14 (_list avErr crowdErr div))))))))))))))) (define (main) (call/cc (lambda (ret17) (let ((predsArray (_list (_list 48.0 47.0 51.0) (_list 48.0 47.0 51.0 42.0)))) (begin (let ((truth 49.0)) (begin (let ((i 0)) (begin (call/cc (lambda (break19) (letrec ((loop18 (lambda () (if (< i (cond ((string? predsArray) (string-length predsArray)) ((hash-table? predsArray) (hash-table-size predsArray)) (else (length predsArray)))) (begin (let ((preds (list-ref predsArray i))) (begin (let ((res (diversityTheorem truth preds))) (begin (_display (to-str (string-append "Average-error : " (padLeft (formatFloat (cond ((string? res) (_substring res 0 (+ 0 1))) ((hash-table? res) (hash-table-ref res 0)) (else (list-ref res 0))) 3) 6)))) (newline) (_display (to-str (string-append "Crowd-error   : " (padLeft (formatFloat (cond ((string? res) (_substring res 1 (+ 1 1))) ((hash-table? res) (hash-table-ref res 1)) (else (list-ref res 1))) 3) 6)))) (newline) (_display (to-str (string-append "Diversity     : " (padLeft (formatFloat (cond ((string? res) (_substring res 2 (+ 2 1))) ((hash-table? res) (hash-table-ref res 2)) (else (list-ref res 2))) 3) 6)))) (newline) (_display (to-str "")) (newline) (set! i (+ i 1)))))) (loop18)) (quote ()))))) (loop18))))))))))))) (main) (let ((end21 (now))) (let ((dur22 (quotient (- end21 start20) 1000))) (begin (_display (string-append "{\n  \"duration_us\": " (number->string dur22) ",\n  \"memory_bytes\": " (number->string (_mem)) ",\n  \"name\": \"main\"\n}")) (newline))))))
