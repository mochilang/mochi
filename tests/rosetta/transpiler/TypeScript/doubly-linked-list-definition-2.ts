// Generated by Mochi v0.10.41 on 2025-07-26 19:37:19 GMT+7

export interface N { id: number; value: any; next: number; prev: number }
function newList(): Record<string, any> {
  return {"nodes": {}, "head": 0, "tail": 0, "nextID": 1};
}
function newNode(l: Record<string, any>, v): Record<string, any> {
  let id: number = Math.trunc(l.nextID);
  l.nextID = (id + 1);
  let nodes: Record<number, Record<string, any>> = l.nodes;
  let n: N = {id, "value": v, "next": 0, "prev": 0};
  nodes[id] = n;
  l.nodes = nodes;
  return n;
}
function pushFront(l: Record<string, any>, v): Record<string, any> {
  let n: Record<string, any> = newNode(l, v);
  n.next = l.head;
  if ((Math.trunc(l.head) != 0)) {
    let nodes: Record<number, Record<string, any>> = l.nodes;
    let h: Record<string, any> = nodes[Math.trunc(Math.trunc(l.head))];
    h.prev = n.id;
    nodes[Math.trunc(h.id)] = h;
    l.nodes = nodes;
  } else {
    l.tail = n.id;
  }
  l.head = n.id;
  let nodes2: Record<number, Record<string, any>> = l.nodes;
  nodes2[Math.trunc(n.id)] = n;
  l.nodes = nodes2;
  return n;
}
function pushBack(l: Record<string, any>, v): Record<string, any> {
  let n: Record<string, any> = newNode(l, v);
  n.prev = l.tail;
  if ((Math.trunc(l.tail) != 0)) {
    let nodes: Record<number, Record<string, any>> = l.nodes;
    let t: Record<string, any> = nodes[Math.trunc(Math.trunc(l.tail))];
    t.next = n.id;
    nodes[Math.trunc(t.id)] = t;
    l.nodes = nodes;
  } else {
    l.head = n.id;
  }
  l.tail = n.id;
  let nodes2: Record<number, Record<string, any>> = l.nodes;
  nodes2[Math.trunc(n.id)] = n;
  l.nodes = nodes2;
  return n;
}
function insertBefore(l: Record<string, any>, refID: number, v): Record<string, any> {
  if ((refID == 0)) {
    return pushFront(l, v);
  }
  let nodes: Record<number, Record<string, any>> = l.nodes;
  let ref: Record<string, any> = nodes[refID];
  let n: Record<string, any> = newNode(l, v);
  n.prev = ref.prev;
  n.next = ref.id;
  if ((Math.trunc(ref.prev) != 0)) {
    let p: Record<string, any> = nodes[Math.trunc(Math.trunc(ref.prev))];
    p.next = n.id;
    nodes[Math.trunc(p.id)] = p;
  } else {
    l.head = n.id;
  }
  ref.prev = n.id;
  nodes[refID] = ref;
  nodes[Math.trunc(n.id)] = n;
  l.nodes = nodes;
  return n;
}
function insertAfter(l: Record<string, any>, refID: number, v): Record<string, any> {
  if ((refID == 0)) {
    return pushBack(l, v);
  }
  let nodes: Record<number, Record<string, any>> = l.nodes;
  let ref: Record<string, any> = nodes[refID];
  let n: Record<string, any> = newNode(l, v);
  n.next = ref.next;
  n.prev = ref.id;
  if ((Math.trunc(ref.next) != 0)) {
    let nx: Record<string, any> = nodes[Math.trunc(Math.trunc(ref.next))];
    nx.prev = n.id;
    nodes[Math.trunc(nx.id)] = nx;
  } else {
    l.tail = n.id;
  }
  ref.next = n.id;
  nodes[refID] = ref;
  nodes[Math.trunc(n.id)] = n;
  l.nodes = nodes;
  return n;
}
function main() {
  let l: Record<string, any> = newList();
  let e4: Record<string, any> = pushBack(l, 4);
  let e1: Record<string, any> = pushFront(l, 1);
  insertBefore(l, Math.trunc(e4.id), 3);
  insertAfter(l, Math.trunc(e1.id), "two");
  let id: number = Math.trunc(l.head);
  let nodes: Record<number, Record<string, any>> = l.nodes;
  while ((id != 0)) {
    let node: Record<string, any> = nodes[id];
    console.log(String(node.value));
    id = Math.trunc(node.next);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

