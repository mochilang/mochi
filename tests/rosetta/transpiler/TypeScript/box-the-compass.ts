// Generated by Mochi v0.10.56 on 2025-08-03 17:23:51 GMT+7

function padLeft(s: string, w: number): string {
  let res: string = "";
  let n: number = (w - Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  while ((n > 0)) {
    res = (res + " ");
    n = (n - 1);
  }
  return (res + s);
}
function padRight(s: string, w: number): string {
  let out: string = s;
  let i: number = Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while ((i < w)) {
    out = (out + " ");
    i = (i + 1);
  }
  return out;
}
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function format2(f: number): string {
  let s: string = _str(f);
  let idx: number = s.indexOf(".");
  if ((idx < 0)) {
    s = (s + ".00");
  } else {
    let need: number = (idx + 3);
    if ((Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) > need)) {
      s = (s).substring(0, need);
    } else {
      while ((Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < need)) {
        s = (s + "0");
      }
    }
  }
  return s;
}
function cpx(h: number): number {
  let x: number = Math.trunc(((h / 11.25) + 0.5));
  x = (x % 32);
  if ((x < 0)) {
    x = (x + 32);
  }
  return x;
}
let compassPoint: string[] = ["North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"];
function degrees2compasspoint(h: number): string {
  return compassPoint[Math.trunc(cpx(h))];
}
let headings: number[] = [0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("Index  Compass point         Degree"));
  while ((i < Number(Array.isArray(headings) || typeof headings === 'string' ? headings.length : Object.keys(headings ?? {}).length))) {
    let h: number = headings[i];
    let idx: number = ((i % 32) + 1);
    let cp: string = degrees2compasspoint(h);
    console.log(_str((((((padLeft(_str(idx), 4) + "   ") + padRight(cp, 19)) + " ") + format2(h)) + "Â°")));
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

