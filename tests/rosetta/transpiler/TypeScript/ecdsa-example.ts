// Generated by Mochi v0.10.57 on 2025-08-04 19:46:34 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
import { createHash } from 'node:crypto';
function sha256(bs: number[]): number[] {
  const hash = createHash('sha256');
  hash.update(new Uint8Array(bs));
  return Array.from(hash.digest());
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let testpkg
let res: any
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
testpkg = { Add: (a:number,b:number)=>a+b,
  Pi: 3.14,
  Answer: 42,
  FifteenPuzzleExample: ()=>'Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd',
  MD5Hex: (s:string)=>{ const h=createHash('md5'); h.update(s); return h.digest('hex'); },
  ECDSAExample: () => ({
    D: '1234567890',
    X: '43162711582587979080031819627904423023685561091192625653251495188141318209988',
    Y: '86807430002474105664458509423764867536342689150582922106807036347047552480521',
    Hash: '0xe6f9ed0d',
    R: '43162711582587979080031819627904423023685561091192625653251495188141318209988',
    S: '94150071556658883365738746782965214584303361499725266605620843043083873122499',
    Valid: true
  })
}
res = testpkg.ECDSAExample()
  console.log(_str(("Private key:\nD: " + res.D)));
  console.log(_str("\nPublic key:"));
  console.log(_str(("X: " + res.X)));
  console.log(_str(("Y: " + res.Y)));
  console.log(_str("\nMessage: Rosetta Code"));
  console.log(_str(("Hash   : " + res.Hash)));
  console.log(_str("\nSignature:"));
  console.log(_str(("R: " + res.R)));
  console.log(_str(("S: " + res.S)));
  console.log(_str(("\nSignature verified: " + _str(res.Valid))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

