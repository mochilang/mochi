// Generated by Mochi v0.10.40 on 2025-07-25 21:25:09 GMT+7

export type Fn = any;
export type Church = any;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function zero(f) {
    return (x) => {
return x;
};
  }
  function succ(c) {
    return (f) => {
return (x) => {
return f(c(f)(x));
};
};
  }
  function add(c, d) {
    return (f) => {
return (x) => {
return c(f)(d(f)(x));
};
};
  }
  function mul(c, d) {
    return (f) => {
return (x) => {
return c(d(f))(x);
};
};
  }
  function pow(c, d) {
    let di: number = toInt(d);
    let prod = c;
    let i: number = 1;
    while ((i < di)) {
      prod = mul(prod, c);
      i = (i + 1);
    }
    return prod;
  }
  function incr(i) {
    return (Math.trunc(i) + 1);
  }
  function toInt(c): number {
    return Math.trunc(c(incr)(0));
  }
  function intToChurch(i: number) {
    if ((i == 0)) {
      return zero;
    }
    return succ(intToChurch((i - 1)));
  }
  const z = zero;
  const three = succ(succ(succ(z)));
  const four = succ(three);
  console.log(("three        -> " + String(toInt(three))));
  console.log(("four         -> " + String(toInt(four))));
  console.log(("three + four -> " + String(toInt(add(three, four)))));
  console.log(("three * four -> " + String(toInt(mul(three, four)))));
  console.log(("three ^ four -> " + String(toInt(pow(three, four)))));
  console.log(("four ^ three -> " + String(toInt(pow(four, three)))));
  console.log(("5 -> five    -> " + String(toInt(intToChurch(5)))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

