// Generated by Mochi v0.10.57 on 2025-08-04 17:11:16 GMT+7

function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
async function _lookupHost(name: string): Promise<any[]> {
  try {
    if (typeof Deno !== 'undefined' && 'resolveDns' in Deno) {
      return [await Deno.resolveDns(name, 'A'), null];
    }
    const dns = require('dns').promises;
    return [await dns.resolve4(name), null];
  } catch (e) {
    return [[], e];
  }
}
async function _fetch(url: string, opts?: any): Promise<any> {
  const init: RequestInit = { method: opts?.method ?? 'GET' };
  if (opts?.headers) init.headers = opts.headers;
  if (opts && 'body' in opts) init.body = JSON.stringify(opts.body);
  if (opts?.query) {
    const qs = new URLSearchParams();
    for (const [k, v] of Object.entries(opts.query)) qs.set(k, String(v));
    const sep = url.includes('?') ? '&' : '?';
    url = url + sep + qs.toString();
  }
  const resp = await fetch(url, init);
  const text = await resp.text();
  try { return JSON.parse(text); } catch { return text; }
}
const net = { LookupHost: (host:string)=>_lookupHost(host) };
let res: any[] = await _lookupHost("www.kame.net");
let addrs = res[Math.trunc(0)];
let err = res[Math.trunc(1)];
if ((err == null)) {
  console.log(_str(_str(addrs)));
} else {
  console.log(_str(err));
}
