// Generated by Mochi v0.10.40 on 2025-07-25 17:58:04 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function indexOfStr(h: string, n: string): number {
    const hlen: number = (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length);
    const nlen: number = (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length);
    if ((nlen == 0)) {
      return 0;
    }
    let i: number = 0;
    while ((i <= (hlen - nlen))) {
      if (((h).substring(i, (i + nlen)) == n)) {
        return i;
      }
      i = (i + 1);
    }
    return -1;
  }
  function stringSearchSingle(h: string, n: string): number {
    return indexOfStr(h, n);
  }
  function stringSearch(h: string, n: string): number[] {
    let result: number[] = [];
    let start: number = 0;
    const hlen: number = (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length);
    const nlen: number = (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length);
    while ((start < hlen)) {
      const idx: number = indexOfStr((h).substring(start, hlen), n);
      if ((idx >= 0)) {
        result = [...result, (start + idx)];
        start = ((start + idx) + nlen);
      } else {
        break
      }
    }
    return result;
  }
  function display(nums: number[]): string {
    let s: string = "[";
    let i: number = 0;
    while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
      if ((i > 0)) {
        s = (s + ", ");
      }
      s = (s + String(nums[i]));
      i = (i + 1);
    }
    s = (s + "]");
    return s;
  }
  function main() {
    const texts: string[] = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."];
    const patterns: string[] = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"];
    let i: number = 0;
    while ((i < (Array.isArray(texts) || typeof texts === 'string' ? texts.length : Object.keys(texts ?? {}).length))) {
      console.log(((("text" + String((i + 1))) + " = ") + texts[i]));
      i = (i + 1);
    }
    console.log("");
    let j: number = 0;
    while ((j < (Array.isArray(texts) || typeof texts === 'string' ? texts.length : Object.keys(texts ?? {}).length))) {
      const idxs: number[] = stringSearch(texts[j], patterns[j]);
      console.log(((((("Found \"" + patterns[j]) + "\" in 'text") + String((j + 1))) + "' at indexes ") + display(idxs)));
      j = (j + 1);
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

