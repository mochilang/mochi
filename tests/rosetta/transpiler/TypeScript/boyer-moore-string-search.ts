// Generated by Mochi v0.10.38 on 2025-07-23 17:27:23 GMT+7

function indexOfStr(h: string, n: string): number {
  const hlen: number = (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length);
  const nlen: number = (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length);
  if ((nlen == 0)) {
    return 0;
  }
  let i: number = 0;
  while ((i <= (hlen - nlen))) {
    if (((h).substring(i, (i + nlen)) == n)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function stringSearchSingle(h: string, n: string): number {
  return indexOfStr(h, n);
}
function stringSearch(h: string, n: string): number[] {
  let result: number[] = [];
  let start: number = 0;
  const hlen: number = (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length);
  const nlen: number = (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length);
  while ((start < hlen)) {
    const idx: number = indexOfStr((h).substring(start, hlen), n);
    if ((idx >= 0)) {
      result = [...result, (start + idx)];
      start = ((start + idx) + nlen);
    } else {
      break
    }
  }
  return result;
}
function display(nums: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    if ((i > 0)) {
      s = (s + ", ");
    }
    s = (s + String(nums[Math.trunc(i)]));
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function main() {
  const texts: string[] = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."];
  const patterns: string[] = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"];
  let i: number = 0;
  while ((i < (Array.isArray(texts) || typeof texts === 'string' ? texts.length : Object.keys(texts ?? {}).length))) {
    console.log(((("text" + String((i + 1))) + " = ") + texts[Math.trunc(i)]));
    i = (i + 1);
  }
  console.log("");
  let j: number = 0;
  while ((j < (Array.isArray(texts) || typeof texts === 'string' ? texts.length : Object.keys(texts ?? {}).length))) {
    const idxs: number[] = stringSearch(texts[Math.trunc(j)], patterns[Math.trunc(j)]);
    console.log(((((("Found \"" + patterns[Math.trunc(j)]) + "\" in 'text") + String((j + 1))) + "' at indexes ") + display(idxs)));
    j = (j + 1);
  }
}
main();
