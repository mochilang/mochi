// Generated by Mochi v0.10.42 on 2025-07-28 10:19:35 GMT+7

let small: string[] = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
let tens: string[] = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
let smallOrd: string[] = ["zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"];
let tensOrd: string[] = ["", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"];
function say(n: number): string {
  if ((n < 20)) {
    return small[n];
  }
  if ((n < 100)) {
    let res: string = tens[Math.trunc(Math.trunc(n / 10))];
    let m: bigint = (n % 10);
    if ((m != 0)) {
      res = ((res + "-") + small[m]);
    }
    return res;
  }
  if ((n < 1000)) {
    let res: string = (say(Math.trunc(n / 100)) + " hundred");
    let m: bigint = (n % 100);
    if ((m != 0)) {
      res = ((res + " ") + say(m));
    }
    return res;
  }
  if ((n < 1000000)) {
    let res: string = (say(Math.trunc(n / 1000)) + " thousand");
    let m: bigint = (n % 1000);
    if ((m != 0)) {
      res = ((res + " ") + say(m));
    }
    return res;
  }
  let res: string = (say(Math.trunc(n / 1000000)) + " million");
  let m: bigint = (n % 1000000);
  if ((m != 0)) {
    res = ((res + " ") + say(m));
  }
  return res;
}
function sayOrdinal(n: number): string {
  if ((n < 20)) {
    return smallOrd[n];
  }
  if ((n < 100)) {
    if (((n % 10) == 0)) {
      return tensOrd[Math.trunc(Math.trunc(n / 10))];
    }
    return ((say((n - (n % 10))) + "-") + smallOrd[Math.trunc((n % 10))]);
  }
  if ((n < 1000)) {
    if (((n % 100) == 0)) {
      return (say(Math.trunc(n / 100)) + " hundredth");
    }
    return ((say(Math.trunc(n / 100)) + " hundred ") + sayOrdinal((n % 100)));
  }
  if ((n < 1000000)) {
    if (((n % 1000) == 0)) {
      return (say(Math.trunc(n / 1000)) + " thousandth");
    }
    return ((say(Math.trunc(n / 1000)) + " thousand ") + sayOrdinal((n % 1000)));
  }
  if (((n % 1000000) == 0)) {
    return (say(Math.trunc(n / 1000000)) + " millionth");
  }
  return ((say(Math.trunc(n / 1000000)) + " million ") + sayOrdinal((n % 1000000)));
}
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((((Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + (s).substring(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function countLetters(s: string): number {
  let cnt: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((((ch >= "A") && (ch <= "Z")) || ((ch >= "a") && (ch <= "z")))) {
      cnt = (cnt + 1);
    }
    i = (i + 1);
  }
  return cnt;
}
let words: string[] = ["Four", "is", "the", "number", "of", "letters", "in", "the", "first", "word", "of", "this", "sentence,"];
let idx: number = 0;
function wordLen(w: number): any[] {
  while (((Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length) < w)) {
    idx = (idx + 1);
    let n: number = countLetters(words[idx]);
    let parts: string[] = say(n).split(" ");
    let j: number = 0;
    while ((j < (Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length))) {
      words.push(parts[j]);
      j = (j + 1);
    }
    words.push("in");
    words.push("the");
    parts = (sayOrdinal((idx + 1)) + ",").split(" ");
    j = 0;
    while ((j < (Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length))) {
      words.push(parts[j]);
      j = (j + 1);
    }
  }
  let word: string = words[Math.trunc((w - 1))];
  return [word, countLetters(word)];
}
function totalLength(): number {
  let tot: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length))) {
    tot = (tot + (Array.isArray(words[i]) || typeof words[i] === 'string' ? words[i].length : Object.keys(words[i] ?? {}).length));
    if ((i < ((Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length) - 1))) {
      tot = (tot + 1);
    }
    i = (i + 1);
  }
  return tot;
}
function pad(n: number, width: number): string {
  let s: string = _str(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  console.log(_str("The lengths of the first 201 words are:"));
  let line: string = "";
  let i: number = 1;
  while ((i <= 201)) {
    if (((i % 25) == 1)) {
      if ((i != 1)) {
        console.log(_str(line));
      }
      line = (pad(i, 3) + ":");
    }
    let r: any[] = wordLen(i);
    let n = r[Math.trunc(1)];
    line = ((line + " ") + pad(n, 2));
    i = (i + 1);
  }
  console.log(_str(line));
  console.log(_str(("Length of sentence so far: " + _str(totalLength()))));
  for (const n of [1000, 10000, 100000, 1000000, 10000000]) {
    let r: any[] = wordLen(n);
    let w = r[Math.trunc(0)];
    let l = r[Math.trunc(1)];
    console.log(_str(((((((("Word " + pad(n, 8)) + " is \"") + w) + "\", with ") + _str(l)) + " letters.  Length of sentence so far: ") + _str(totalLength()))));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

