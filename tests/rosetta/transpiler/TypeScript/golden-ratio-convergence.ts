// Generated by Mochi v0.10.41 on 2025-07-27 11:46:42 GMT+7

function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let g: number = x;
  let i: number = 0;
  while ((i < 20)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function main() {
  let oldPhi: number = 1.0;
  let phi: number = 0.0;
  let iters: number = 0;
  let limit: number = 1e-05;
  while (true) {
    phi = (1.0 + (1.0 / oldPhi));
    iters = (iters + 1);
    if ((abs((phi - oldPhi)) <= limit)) {
      break
    }
    oldPhi = phi;
  }
  let actual: number = ((1.0 + sqrtApprox(5.0)) / 2.0);
  console.log(("Final value of phi : " + String(phi)));
  console.log(("Number of iterations : " + String(iters)));
  console.log(("Error (approx) : " + String((phi - actual))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

