// Generated by Mochi v0.10.42 on 2025-07-27 17:14:54 GMT+7

function neighborsList(): number[][] {
  return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]];
}
function plus(a: number[], b: number[]): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    res.push((a[i] + b[i]));
    i = (i + 1);
  }
  return res;
}
function isStable(p: number[]): boolean {
  for (const v of p) {
    if ((v > 3)) {
      return false;
    }
  }
  return true;
}
function topple(p: number[]): number {
  let neighbors: number[][] = neighborsList();
  let i: number = 0;
  while ((i < (Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length))) {
    if ((p[i] > 3)) {
      p[i] = (p[i] - 4);
      let nbs: number[] = neighbors[i];
      for (const j of nbs) {
        p[j] = (p[j] + 1);
      }
      return 0;
    }
    i = (i + 1);
  }
  return 0;
}
function pileString(p: number[]): string {
  let s: string = "";
  let r: number = 0;
  while ((r < 3)) {
    let c: number = 0;
    while ((c < 3)) {
      s = ((s + String(p[Math.trunc(((3 * r) + c))])) + " ");
      c = (c + 1);
    }
    s = (s + "\n");
    r = (r + 1);
  }
  return s;
}
let s4: number[] = [4, 3, 3, 3, 1, 2, 0, 2, 3];
let s1: number[] = [1, 2, 0, 2, 1, 1, 0, 1, 3];
let s2: number[] = [2, 1, 3, 1, 0, 1, 0, 1, 0];
let s3_a: number[] = plus(s1, s2);
let s3_b: number[] = plus(s2, s1);
let s3: number[] = [3, 3, 3, 3, 3, 3, 3, 3, 3];
let s3_id: number[] = [2, 1, 2, 1, 0, 1, 2, 1, 2];
let s4b: number[] = plus(s3, s3_id);
let s5: number[] = plus(s3_id, s3_id);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log("Avalanche of topplings:\n");
  console.log(pileString(s4));
  while (!isStable(s4)) {
    topple(s4);
    console.log(pileString(s4));
  }
  console.log("Commutative additions:\n");
  while (!isStable(s3_a)) {
    topple(s3_a);
  }
  while (!isStable(s3_b)) {
    topple(s3_b);
  }
  console.log(((((pileString(s1) + "\nplus\n\n") + pileString(s2)) + "\nequals\n\n") + pileString(s3_a)));
  console.log(((((("and\n\n" + pileString(s2)) + "\nplus\n\n") + pileString(s1)) + "\nalso equals\n\n") + pileString(s3_b)));
  console.log("Addition of identity sandpile:\n");
  while (!isStable(s4b)) {
    topple(s4b);
  }
  console.log(((((pileString(s3) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s4b)));
  console.log("Addition of identities:\n");
  while (!isStable(s5)) {
    topple(s5);
  }
  console.log(((((pileString(s3_id) + "\nplus\n\n") + pileString(s3_id)) + "\nequals\n\n") + pileString(s5)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

