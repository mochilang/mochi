// Generated by Mochi v0.10.39 on 2025-07-25 10:17:33 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function isPrime(n: number): boolean {
    if ((n < 2)) {
      return false;
    }
    if (((n % 2) == 0)) {
      return (n == 2);
    }
    if (((n % 3) == 0)) {
      return (n == 3);
    }
    let d: number = 5;
    while (((d * d) <= n)) {
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 2);
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 4);
    }
    return true;
  }
  function sumDigits(n: number): number {
    let s: number = 0;
    let x: number = n;
    while ((x > 0)) {
      s = (s + (x % 10));
      x = Math.trunc(Math.trunc(x / 10));
    }
    return s;
  }
  function pad(n: number): string {
    if ((n < 10)) {
      return ("  " + String(n));
    }
    if ((n < 100)) {
      return (" " + String(n));
    }
    return String(n);
  }
  function main() {
    console.log("Additive primes less than 500:");
    let count: number = 0;
    let line: string = "";
    let lineCount: number = 0;
    let i: number = 2;
    while ((i < 500)) {
      if ((isPrime(i) && isPrime(sumDigits(i)))) {
        count = (count + 1);
        line = ((line + pad(i)) + "  ");
        lineCount = (lineCount + 1);
        if ((lineCount == 10)) {
          console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 2)));
          line = "";
          lineCount = 0;
        }
      }
      if ((i > 2)) {
        i = (i + 2);
      } else {
        i = (i + 1);
      }
    }
    if ((lineCount > 0)) {
      console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 2)));
    }
    console.log((String(count) + " additive primes found."));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

