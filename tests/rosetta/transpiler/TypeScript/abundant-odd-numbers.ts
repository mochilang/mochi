// Generated by Mochi v0.10.37 on 2025-07-23 09:26:09 GMT+7

function divisors(n: number): number[] {
  let divs = [1];
  let divs2 = [];
  let i = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      const j = (n / i);
      divs = [...divs, i];
      if ((i != j)) {
        divs2 = [...divs2, j];
      }
    }
    i = (i + 1);
  }
  let j = ((Array.isArray(divs2) || typeof divs2 === 'string' ? divs2.length : Object.keys(divs2 ?? {}).length) - 1);
  while ((j >= 0)) {
    divs = [...divs, divs2[j]];
    j = (j - 1);
  }
  return divs;
}
function sum(xs: number[]): number {
  let tot = 0;
  for (const v of xs) {
    tot = (tot + v);
  }
  return tot;
}
function sumStr(xs: number[]): string {
  let s = "";
  let i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    s = ((s + String(xs[i])) + " + ");
    i = (i + 1);
  }
  return (s).substring(0, ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3));
}
function pad2(n: number): string {
  const s = String(n);
  if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < 2)) {
    return (" " + s);
  }
  return s;
}
function pad5(n: number): string {
  let s = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < 5)) {
    s = (" " + s);
  }
  return s;
}
function abundantOdd(searchFrom: number, countFrom: number, countTo: number, printOne: boolean): number {
  let count = countFrom;
  let n = searchFrom;
  while ((count < countTo)) {
    const divs = divisors(n);
    const tot = divs.reduce((a, b) => a + b, 0.0);
    if ((tot > n)) {
      count = (count + 1);
      if ((printOne && (count < countTo))) {
        n = (n + 2);
        continue
      }
      const s = sumStr(divs);
      if (!printOne) {
        console.log(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + String(tot)));
      } else {
        console.log(((((String(n) + " < ") + s) + " = ") + String(tot)));
      }
    }
    n = (n + 2);
  }
  return n;
}
function main() {
  const max = 25;
  console.log((("The first " + String(max)) + " abundant odd numbers are:"));
  const n = abundantOdd(1, 0, max, false);
  console.log("\nThe one thousandth abundant odd number is:");
  abundantOdd(n, max, 1000, true);
  console.log("\nThe first abundant odd number above one billion is:");
  abundantOdd(1000000001, 0, 1, true);
}
main();
