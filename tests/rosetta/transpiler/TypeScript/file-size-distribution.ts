// Generated by Mochi v0.10.41 on 2025-07-27 11:35:01 GMT+7

function log10floor(n: number): number {
  let p: number = 0;
  let v: number = n;
  while ((v >= 10)) {
    v = Math.trunc(Math.trunc(v / 10));
    p = (p + 1);
  }
  return p;
}
function commatize(n: number): string {
  let s: string = String(n);
  let res: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((i > 0) && ((((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - i) % 3) == 0))) {
      res = (res + ",");
    }
    res = (res + (s).substring(i, (i + 1)));
    i = (i + 1);
  }
  return res;
}
function showDistribution(sizes: number[]) {
  let bins: number[] = [];
  let i: number = 0;
  while ((i < 12)) {
    bins.push(0);
    i = (i + 1);
  }
  let total: number = 0;
  for (const sz of sizes) {
    total = (total + sz);
    let idx: number = 0;
    if ((sz > 0)) {
      idx = (log10floor(sz) + 1);
    }
    bins[idx] = (bins[idx] + 1);
  }
  console.log("File size distribution:\n");
  i = 0;
  while ((i < (Array.isArray(bins) || typeof bins === 'string' ? bins.length : Object.keys(bins ?? {}).length))) {
    let prefix: string = "  ";
    if ((i > 0)) {
      prefix = "+ ";
    }
    console.log(((((prefix + "Files less than 10 ^ ") + String(i)) + " bytes : ") + String(bins[i])));
    i = (i + 1);
  }
  console.log("                                  -----");
  console.log(("= Total number of files         : " + String((Array.isArray(sizes) || typeof sizes === 'string' ? sizes.length : Object.keys(sizes ?? {}).length))));
  console.log((("  Total size of files           : " + commatize(total)) + " bytes"));
}
function main() {
  let sizes: number[] = [0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000];
  showDistribution(sizes);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

