// Generated by Mochi v0.10.41 on 2025-07-27 11:09:17 GMT+7

let seed: number = (_now() % 2147483647);
function randN(n: number): number {
  seed = (((seed * 1664525) + 1013904223) % 2147483647);
  return (seed % n);
}
function eqIndices(xs: number[]): number[] {
  let r: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    r = (r + xs[i]);
    i = (i + 1);
  }
  let l: number = 0;
  let eq: number[] = [];
  i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    r = (r - xs[i]);
    if ((l == r)) {
      eq.push(i);
    }
    l = (l + xs[i]);
    i = (i + 1);
  }
  return eq;
}
function main() {
  console.log("[" + (eqIndices([-7, 1, 5, 2, -4, 3, 0])).join(' ') + "]");
  let verylong: number[] = [];
  let i: number = 0;
  while ((i < 10000)) {
    seed = (((seed * 1664525) + 1013904223) % 2147483647);
    verylong.push(((seed % 1001) - 500));
    i = (i + 1);
  }
  console.log("[" + (eqIndices(verylong)).join(' ') + "]");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

