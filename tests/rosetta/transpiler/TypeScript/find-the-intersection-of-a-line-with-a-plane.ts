// Generated by Mochi v0.10.41 on 2025-07-27 11:35:19 GMT+7

export interface Vector { x: number; y: number; z: number }
function add(a: Vector, b: Vector): Vector {
  return {"x": (a.x + b.x), "y": (a.y + b.y), "z": (a.z + b.z)};
}
function sub(a: Vector, b: Vector): Vector {
  return {"x": (a.x - b.x), "y": (a.y - b.y), "z": (a.z - b.z)};
}
function mul(v: Vector, s: number): Vector {
  return {"x": (v.x * s), "y": (v.y * s), "z": (v.z * s)};
}
function dot(a: Vector, b: Vector): number {
  return (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
}
function intersectPoint(rv: Vector, rp: Vector, pn: Vector, pp: Vector): Vector {
  let diff: Vector = sub(rp, pp);
  let prod1: number = dot(diff, pn);
  let prod2: number = dot(rv, pn);
  let prod3: number = (prod1 / prod2);
  return sub(rp, mul(rv, prod3));
}
function main() {
  let rv: Vector = {"x": 0.0, "y": -1.0, "z": -1.0};
  let rp: Vector = {"x": 0.0, "y": 0.0, "z": 10.0};
  let pn: Vector = {"x": 0.0, "y": 0.0, "z": 1.0};
  let pp: Vector = {"x": 0.0, "y": 0.0, "z": 5.0};
  let ip: Vector = intersectPoint(rv, rp, pn, pp);
  console.log((((((("The ray intersects the plane at (" + String(ip.x)) + ", ") + String(ip.y)) + ", ") + String(ip.z)) + ")"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

