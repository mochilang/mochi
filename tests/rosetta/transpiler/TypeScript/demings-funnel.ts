// Generated by Mochi v0.10.41 on 2025-07-26 17:27:25 GMT+7

function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let g: number = x;
  let i: number = 0;
  while ((i < 20)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
let dxs: number[] = [-0.533, 0.27, 0.859, -0.043, -0.205, -0.127, -0.071, 0.275, 1.251, -0.231, -0.401, 0.269, 0.491, 0.951, 1.15, 0.001, -0.382, 0.161, 0.915, 2.08, -2.337, 0.034, -0.126, 0.014, 0.709, 0.129, -1.093, -0.483, -1.193, 0.02, -0.051, 0.047, -0.095, 0.695, 0.34, -0.182, 0.287, 0.213, -0.423, -0.021, -0.134, 1.798, 0.021, -1.099, -0.361, 1.636, -1.134, 1.315, 0.201, 0.034, 0.097, -0.17, 0.054, -0.553, -0.024, -0.181, -0.7, -0.361, -0.789, 0.279, -0.174, -0.009, -0.323, -0.658, 0.348, -0.528, 0.881, 0.021, -0.853, 0.157, 0.648, 1.774, -1.043, 0.051, 0.021, 0.247, -0.31, 0.171, 0.0, 0.106, 0.024, -0.386, 0.962, 0.765, -0.125, -0.289, 0.521, 0.017, 0.281, -0.749, -0.149, -2.436, -0.909, 0.394, -0.113, -0.598, 0.443, -0.521, -0.799, 0.087];
let dys: number[] = [0.136, 0.717, 0.459, -0.225, 1.392, 0.385, 0.121, -0.395, 0.49, -0.682, -0.065, 0.242, -0.288, 0.658, 0.459, 0.0, 0.426, 0.205, -0.765, -2.188, -0.742, -0.01, 0.089, 0.208, 0.585, 0.633, -0.444, -0.351, -1.087, 0.199, 0.701, 0.096, -0.025, -0.868, 1.051, 0.157, 0.216, 0.162, 0.249, -0.007, 0.009, 0.508, -0.79, 0.723, 0.881, -0.508, 0.393, -0.226, 0.71, 0.038, -0.217, 0.831, 0.48, 0.407, 0.447, -0.295, 1.126, 0.38, 0.549, -0.445, -0.046, 0.428, -0.074, 0.217, -0.822, 0.491, 1.347, -0.141, 1.23, -0.044, 0.079, 0.219, 0.698, 0.275, 0.056, 0.031, 0.421, 0.064, 0.721, 0.104, -0.729, 0.65, -1.103, 0.154, -1.72, 0.051, -0.385, 0.477, 1.537, -0.901, 0.939, -0.411, 0.341, -0.411, 0.106, 0.224, -0.947, -1.424, -0.542, -1.032];
function funnel(fa: number[], r): number[] {
  let x: number = 0.0;
  let result: any[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(fa) || typeof fa === 'string' ? fa.length : Object.keys(fa ?? {}).length))) {
    let f: number = fa[i];
    result.push((x + f));
    x = r(x, f);
    i = (i + 1);
  }
  return result;
}
function mean(fa: number[]): number {
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(fa) || typeof fa === 'string' ? fa.length : Object.keys(fa ?? {}).length))) {
    sum = (sum + fa[i]);
    i = (i + 1);
  }
  return (sum / (Array.isArray(fa) || typeof fa === 'string' ? fa.length : Object.keys(fa ?? {}).length));
}
function stdDev(fa: number[]): number {
  let m: number = mean(fa);
  let sum: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(fa) || typeof fa === 'string' ? fa.length : Object.keys(fa ?? {}).length))) {
    let d: number = (fa[i] - m);
    sum = (sum + (d * d));
    i = (i + 1);
  }
  let r = sqrtApprox((sum / (Array.isArray(fa) || typeof fa === 'string' ? fa.length : Object.keys(fa ?? {}).length)));
  return r;
}
function experiment(label: string, r) {
  let rxs: number[] = funnel(dxs, r);
  let rys: number[] = funnel(dys, r);
  console.log((label + "  :      x        y"));
  console.log(((("Mean    :  " + String(mean(rxs))) + ", ") + String(mean(rys))));
  console.log(((("Std Dev :  " + String(stdDev(rxs))) + ", ") + String(stdDev(rys))));
  console.log("");
}
function main() {
  experiment("Rule 1", (x, y) => 0.0);
  experiment("Rule 2", (x, dz) => -dz);
  experiment("Rule 3", (z, dz) => -(z + dz));
  experiment("Rule 4", (z, dz) => (z + dz));
}
main();
