// Generated by Mochi v0.10.41 on 2025-07-27 11:33:59 GMT+7

function generatePrimes(n: number): number[] {
  let primes: number[] = [2];
  let cand: number = 3;
  while (((Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length) < n)) {
    let isP: boolean = true;
    let i: number = 0;
    while ((i < (Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length))) {
      let p: number = primes[i];
      if (((p * p) > cand)) {
        break
      }
      if (((cand % p) == 0)) {
        isP = false;
        break
      }
      i = (i + 1);
    }
    if (isP) {
      primes.push(cand);
    }
    cand = (cand + 2);
  }
  return primes;
}
function primeFactors(n: number, primes: number[]): number[] {
  let factors: number[] = [];
  let num: number = n;
  let i: number = 0;
  while (((i < (Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length)) && ((primes[i] * primes[i]) <= num))) {
    let p: number = primes[i];
    while (((num % p) == 0)) {
      factors.push(p);
      num = (num / p);
    }
    i = (i + 1);
  }
  if ((num > 1)) {
    factors.push(num);
  }
  return factors;
}
let prevCats: Record<number, number> = {};
function cat(p: number, primes: number[]): number {
  if (_has(prevCats, p)) {
    return prevCats[p];
  }
  let pf: number[] = primeFactors((p + 1), primes);
  let all23: boolean = true;
  for (const f of pf) {
    if (((f != 2) && (f != 3))) {
      all23 = false;
      break
    }
  }
  if (all23) {
    prevCats[p] = 1;
    return 1;
  }
  if ((p > 2)) {
    let unique: number[] = [];
    let last: number = -1;
    for (const f of pf) {
      if ((f != last)) {
        unique.push(f);
        last = f;
      }
    }
    pf = unique;
  }
  let c: number = 2;
  while ((c <= 11)) {
    let ok: boolean = true;
    for (const f of pf) {
      if ((cat(f, primes) >= c)) {
        ok = false;
        break
      }
    }
    if (ok) {
      prevCats[p] = c;
      return c;
    }
    c = (c + 1);
  }
  prevCats[p] = 12;
  return 12;
}
function padLeft(n: number, width: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  let primes: number[] = generatePrimes(1000);
  let es: number[][] = [];
  for (let _ = 0; _ < 12; _++) {
    es.push([]);
  }
  console.log("First 200 primes:\n");
  let idx: number = 0;
  while ((idx < 200)) {
    let p: number = primes[idx];
    let c: number = cat(p, primes);
    es[(c - 1)] = [...es[Math.trunc((c - 1))], p];
    idx = (idx + 1);
  }
  let c: number = 1;
  while ((c <= 6)) {
    if (((Array.isArray(es[Math.trunc((c - 1))]) || typeof es[Math.trunc((c - 1))] === 'string' ? es[Math.trunc((c - 1))].length : Object.keys(es[Math.trunc((c - 1))] ?? {}).length) > 0)) {
      console.log((("Category " + String(c)) + ":"));
      console.log(String(es[Math.trunc((c - 1))]));
      console.log("");
    }
    c = (c + 1);
  }
  console.log("First thousand primes:\n");
  while ((idx < 1000)) {
    let p: number = primes[idx];
    let cv: number = cat(p, primes);
    es[(cv - 1)] = [...es[Math.trunc((cv - 1))], p];
    idx = (idx + 1);
  }
  c = 1;
  while ((c <= 12)) {
    let e: number[] = es[Math.trunc((c - 1))];
    if (((Array.isArray(e) || typeof e === 'string' ? e.length : Object.keys(e ?? {}).length) > 0)) {
      let line: string = ((((((("Category " + padLeft(c, 2)) + ": First = ") + padLeft(e[Math.trunc(0)], 7)) + "  Last = ") + padLeft(e[Math.trunc(((Array.isArray(e) || typeof e === 'string' ? e.length : Object.keys(e ?? {}).length) - 1))], 8)) + "  Count = ") + padLeft((Array.isArray(e) || typeof e === 'string' ? e.length : Object.keys(e ?? {}).length), 6));
      console.log(line);
    }
    c = (c + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _has(obj: any, key: any): boolean {
  return Object.prototype.hasOwnProperty.call(obj, String(key));
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

