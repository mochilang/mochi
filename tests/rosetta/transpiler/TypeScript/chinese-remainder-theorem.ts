// Generated by Mochi v0.10.42 on 2025-07-27 20:34:06 GMT+7

function egcd(a: number, b: number): number[] {
  if ((a == 0)) {
    return [b, 0, 1];
  }
  let res: number = egcd((b % a), a);
  let g = res[Math.trunc(0)];
  let x1 = res[Math.trunc(1)];
  let y1 = res[Math.trunc(2)];
  return [g, (y1 - (Math.trunc(b / a) * x1)), x1];
}
function modInv(a: number, m: number): number {
  let r: number[] = egcd(a, m);
  if ((r[Math.trunc(0)] != 1)) {
    return 0;
  }
  let x: number = r[Math.trunc(1)];
  if ((x < 0)) {
    return (x + m);
  }
  return x;
}
function crt(a: number[], n: number[]): number {
  let prod: number = 1;
  let i: number = 0;
  while ((i < (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length))) {
    prod = (prod * n[i]);
    i = (i + 1);
  }
  let x: number = 0;
  i = 0;
  while ((i < (Array.isArray(n) || typeof n === 'string' ? n.length : Object.keys(n ?? {}).length))) {
    let ni: number = n[i];
    let ai: number = a[i];
    let p: number = Math.trunc(prod / ni);
    let inv: number = modInv((p % ni), ni);
    x = (x + ((ai * inv) * p));
    i = (i + 1);
  }
  return (x % prod);
}
let n: number[] = [3, 5, 7];
let a: number[] = [2, 3, 2];
let res: number = crt(a, n);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log((String(res) + " <nil>"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

