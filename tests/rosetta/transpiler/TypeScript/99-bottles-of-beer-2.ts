// Generated by Mochi v0.10.41 on 2025-07-27 16:11:33 GMT+7

function fields(s: string): string[] {
  let words: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        words.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    words.push(cur);
  }
  return words;
}
function join(xs: string[], sep: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function numberName(n: number): string {
  let small: string[] = ["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
  let tens: string[] = ["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
  if ((n < 0)) {
    return "";
  }
  if ((n < 20)) {
    return small[n];
  }
  if ((n < 100)) {
    let t: string = tens[Math.trunc(Math.trunc(Math.trunc(n / 10)))];
    let s: number = (n % 10);
    if ((s > 0)) {
      t = ((t + " ") + small[s]);
    }
    return t;
  }
  return "";
}
function pluralizeFirst(s: string, n: number): string {
  if ((n == 1)) {
    return s;
  }
  let w: string[] = fields(s);
  if (((Array.isArray(w) || typeof w === 'string' ? w.length : Object.keys(w ?? {}).length) > 0)) {
    w[0] = (w[Math.trunc(0)] + "s");
  }
  return join(w, " ");
}
function randInt(seed: number, n: number): number {
  let next: number = (((seed * 1664525) + 1013904223) % 2147483647);
  return (next % n);
}
function slur(p: string, d: number): string {
  if (((Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length) <= 2)) {
    return p;
  }
  let a: string[] = [];
  let i: number = 1;
  while ((i < ((Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length) - 1))) {
    a.push((p).substring(i, (i + 1)));
    i = (i + 1);
  }
  let idx: number = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
  let seed: number = d;
  while ((idx >= 1)) {
    seed = (((seed * 1664525) + 1013904223) % 2147483647);
    if (((seed % 100) >= d)) {
      let j: number = (seed % (idx + 1));
      let tmp: string = a[idx];
      a[idx] = a[j];
      a[j] = tmp;
    }
    idx = (idx - 1);
  }
  let s: string = (p).substring(0, 1);
  let k: number = 0;
  while ((k < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    s = (s + a[k]);
    k = (k + 1);
  }
  s = (s + (p).substring(((Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length) - 1), (Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length)));
  let w: string[] = fields(s);
  return join(w, " ");
}
function main() {
  let i: number = 99;
  while ((i > 0)) {
    console.log(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer on the wall", i)));
    console.log(((((slur(numberName(i), i) + " ") + pluralizeFirst(slur("bottle of", i), i)) + " ") + slur("beer", i)));
    console.log(((((slur("take one", i) + " ") + slur("down", i)) + " ") + slur("pass it around", i)));
    console.log(((((slur(numberName((i - 1)), i) + " ") + pluralizeFirst(slur("bottle of", i), (i - 1))) + " ") + slur("beer on the wall", i)));
    i = (i - 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

