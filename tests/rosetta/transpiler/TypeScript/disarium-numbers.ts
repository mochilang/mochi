// Generated by Mochi v0.10.41 on 2025-07-26 19:37:05 GMT+7

function pow(base: number, exp: number): number {
  let result: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function isDisarium(n: number): boolean {
  let digits: number[] = [];
  let x: number = n;
  if ((x == 0)) {
    digits.push(0);
  }
  while ((x > 0)) {
    digits.push((x % 10));
    x = Math.trunc(Math.trunc(x / 10));
  }
  let sum: number = 0;
  let pos: number = 1;
  let i: number = ((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - 1);
  while ((i >= 0)) {
    sum = (sum + pow(digits[i], pos));
    pos = (pos + 1);
    i = (i - 1);
  }
  return (sum == n);
}
function main() {
  let count: number = 0;
  let n: number = 0;
  while (((count < 19) && (n < 30000000))) {
    if (isDisarium(n)) {
      console.log(String(n));
      count = (count + 1);
    }
    n = (n + 1);
  }
  console.log((("\nFound the first " + String(count)) + " Disarium numbers."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

