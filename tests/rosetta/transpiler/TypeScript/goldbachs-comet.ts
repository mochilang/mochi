// Generated by Mochi v0.10.41 on 2025-07-27 11:46:35 GMT+7

function sieve(limit: number): boolean[] {
  let primes: boolean[] = [];
  let i: number = 0;
  while ((i < limit)) {
    primes.push(true);
    i = (i + 1);
  }
  primes[0] = false;
  primes[1] = false;
  let p: number = 2;
  while (((p * p) < limit)) {
    if (primes[p]) {
      let k: number = (p * p);
      while ((k < limit)) {
        primes[k] = false;
        k = (k + p);
      }
    }
    p = (p + 1);
  }
  return primes;
}
function goldbachCount(primes: boolean[], n: number): number {
  let c: number = 0;
  let i: number = 1;
  while ((i <= Math.trunc(n / 2))) {
    if ((primes[i] && primes[Math.trunc((n - i))])) {
      c = (c + 1);
    }
    i = (i + 1);
  }
  return c;
}
function pad(n: number): string {
  if ((n < 10)) {
    return ("  " + String(n));
  }
  if ((n < 100)) {
    return (" " + String(n));
  }
  return String(n);
}
function main() {
  let primes: boolean[] = sieve(1000);
  console.log("The first 100 Goldbach numbers:");
  let line: string = "";
  let n: number = 2;
  let count: number = 0;
  while ((count < 100)) {
    let v: number = goldbachCount(primes, (2 * n));
    line = ((line + pad(v)) + " ");
    count = (count + 1);
    n = (n + 1);
    if (((count % 10) == 0)) {
      console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1)));
      line = "";
    }
  }
  let val: number = goldbachCount(primes, 1000);
  console.log(("\nThe 1,000th Goldbach number = " + String(val)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

