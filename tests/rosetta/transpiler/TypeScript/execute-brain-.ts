// Generated by Mochi v0.10.41 on 2025-07-27 11:34:17 GMT+7

function chr(n: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 65) && (n < 91))) {
    return upper.slice((n - 65), (n - 64));
  }
  if (((n >= 97) && (n < 123))) {
    return lower.slice((n - 97), (n - 96));
  }
  if ((n == 32)) {
    return " ";
  }
  if ((n == 33)) {
    return "!";
  }
  if ((n == 44)) {
    return ",";
  }
  if ((n == 13)) {
    return "";
  }
  if ((n == 10)) {
    return "\n";
  }
  return "?";
}
function bf(dLen: number, code: string): string {
  let ds: number[] = [];
  for (let i = 0; i < dLen; i++) {
    ds.push(0);
  }
  let dp: number = 0;
  let ip: number = 0;
  let out: string = "";
  while ((ip < (Array.isArray(code) || typeof code === 'string' ? code.length : Object.keys(code ?? {}).length))) {
    let ch: string = code.slice(ip, (ip + 1));
    if ((ch == ">")) {
      dp = (dp + 1);
    } else {
      if ((ch == "<")) {
        dp = (dp - 1);
      } else {
        if ((ch == "+")) {
          ds[dp] = (ds[dp] + 1);
        } else {
          if ((ch == "-")) {
            ds[dp] = (ds[dp] - 1);
          } else {
            if ((ch == ".")) {
              out = (out + chr(ds[dp]));
            } else {
              if ((ch == ",")) {
              } else {
                if ((ch == "[")) {
                  if ((ds[dp] == 0)) {
                    let nc: number = 1;
                    while ((nc > 0)) {
                      ip = (ip + 1);
                      let cc: string = code.slice(ip, (ip + 1));
                      if ((cc == "[")) {
                        nc = (nc + 1);
                      } else {
                        if ((cc == "]")) {
                          nc = (nc - 1);
                        }
                      }
                    }
                  }
                } else {
                  if ((ch == "]")) {
                    if ((ds[dp] != 0)) {
                      let nc: number = 1;
                      while ((nc > 0)) {
                        ip = (ip - 1);
                        let cc: string = code.slice(ip, (ip + 1));
                        if ((cc == "]")) {
                          nc = (nc + 1);
                        } else {
                          if ((cc == "[")) {
                            nc = (nc - 1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ip = (ip + 1);
  }
  return out;
}
function main() {
  let prog: string = ((("++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++\n" + "++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>\n") + ">+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.\n") + "<+++++++.--------.<<<<<+.<+++.---.");
  let out: string = bf(10, prog);
  console.log(out);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

