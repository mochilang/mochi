// Generated by Mochi v0.10.42 on 2025-07-28 00:39:02 GMT+7

function eulerSum(): number[] {
  let pow5: number[] = [];
  let i: number = 0;
  while ((i < 250)) {
    pow5.push(((((i * i) * i) * i) * i));
    i = (i + 1);
  }
  let sums: Record<number, number[]> = {};
  let x2: number = 2;
  while ((x2 < 250)) {
    let x3: number = 1;
    while ((x3 < x2)) {
      let s: bigint = (pow5[x2] + pow5[x3]);
      if (!(s in sums)) {
        sums[s] = [x2, x3];
      }
      x3 = (x3 + 1);
    }
    x2 = (x2 + 1);
  }
  let x0: number = 4;
  while ((x0 < 250)) {
    let x1: number = 3;
    while ((x1 < x0)) {
      let y: bigint = (x0 + 1);
      while ((y < 250)) {
        let rem: bigint = ((pow5[y] - pow5[x0]) - pow5[x1]);
        if ((rem in sums)) {
          let pair: number[] = sums[rem];
          let a: number = pair[Math.trunc(0)];
          let b: number = pair[Math.trunc(1)];
          if (((x1 > a) && (a > b))) {
            return [x0, x1, a, b, y];
          }
        }
        y = (y + 1);
      }
      x1 = (x1 + 1);
    }
    x0 = (x0 + 1);
  }
  return [0, 0, 0, 0, 0];
}
function main() {
  let r: number[] = eulerSum();
  console.log(((((((((String(r[Math.trunc(0)]) + " ") + String(r[Math.trunc(1)])) + " ") + String(r[Math.trunc(2)])) + " ") + String(r[Math.trunc(3)])) + " ") + String(r[Math.trunc(4)])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

