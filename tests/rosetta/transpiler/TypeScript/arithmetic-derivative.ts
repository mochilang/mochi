// Generated by Mochi v0.10.37 on 2025-07-23 15:55:44 GMT+7

function primeFactors(n: number): number[] {
  let factors: number[] = [];
  let x: number = n;
  while (((x % 2) == 0)) {
    factors = [...factors, 2];
    x = Math.trunc(x / 2);
  }
  let p: number = 3;
  while (((p * p) <= x)) {
    while (((x % p) == 0)) {
      factors = [...factors, p];
      x = Math.trunc(x / p);
    }
    p = (p + 2);
  }
  if ((x > 1)) {
    factors = [...factors, x];
  }
  return factors;
}
function repeat(ch: string, n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}
function D(n: number): number {
  if ((n < 0.0)) {
    return -D(-n);
  }
  if ((n < 2.0)) {
    return 0.0;
  }
  let factors: number[] = [];
  if ((n < 10000000000000000000.0)) {
    factors = primeFactors(n);
  } else {
    const g: number = (n / 100.0);
    factors = primeFactors(g);
    factors = [...factors, 2];
    factors = [...factors, 2];
    factors = [...factors, 5];
    factors = [...factors, 5];
  }
  const c: number = (Array.isArray(factors) || typeof factors === 'string' ? factors.length : Object.keys(factors ?? {}).length);
  if ((c == 1)) {
    return 1.0;
  }
  if ((c == 2)) {
    return (factors[0] + factors[1]);
  }
  const d: number = (n / factors[0]);
  return ((D(d) * factors[0]) + d);
}
function pad(n: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < 4)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  let vals: number[] = [];
  let n: number = -99;
  while ((n < 101)) {
    vals = [...vals, D(n)];
    n = (n + 1);
  }
  let i: number = 0;
  while ((i < (Array.isArray(vals) || typeof vals === 'string' ? vals.length : Object.keys(vals ?? {}).length))) {
    let line: string = "";
    let j: number = 0;
    while ((j < 10)) {
      line = (line + pad(vals[(i + j)]));
      if ((j < 9)) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(line);
    i = (i + 10);
  }
  let pow: number = 1.0;
  let m: number = 1;
  while ((m < 21)) {
    pow = (pow * 10.0);
    let exp: string = String(m);
    if (((Array.isArray(exp) || typeof exp === 'string' ? exp.length : Object.keys(exp ?? {}).length) < 2)) {
      exp = (exp + " ");
    }
    let res: string = (String(m) + repeat("0", (m - 1)));
    console.log(((("D(10^" + exp) + ") / 7 = ") + res));
    m = (m + 1);
  }
}
main();
