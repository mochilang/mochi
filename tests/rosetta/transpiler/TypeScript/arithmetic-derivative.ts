// Generated by Mochi v0.10.42 on 2025-07-27 18:45:16 GMT+7

function primeFactors(n: number): number[] {
  let factors: number[] = [];
  let x: number = n;
  while (((x % 2) == 0)) {
    factors.push(2);
    x = Math.trunc(Math.trunc(x / 2));
  }
  let p: number = 3;
  while (((p * p) <= x)) {
    while (((x % p) == 0)) {
      factors.push(p);
      x = Math.trunc(Math.trunc(x / p));
    }
    p = (p + 2);
  }
  if ((x > 1)) {
    factors.push(x);
  }
  return factors;
}
function repeat(ch: string, n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}
function D(n: number): number {
  if ((n < 0.0)) {
    return -D(-n);
  }
  if ((n < 2.0)) {
    return 0.0;
  }
  let factors: number[] = [];
  if ((n < 10000000000000000000.0)) {
    factors = primeFactors(Math.trunc(n));
  } else {
    let g: number = Math.trunc((n / 100.0));
    factors = primeFactors(g);
    factors.push(2);
    factors.push(2);
    factors.push(5);
    factors.push(5);
  }
  let c: number = (Array.isArray(factors) || typeof factors === 'string' ? factors.length : Object.keys(factors ?? {}).length);
  if ((c == 1)) {
    return 1.0;
  }
  if ((c == 2)) {
    return (factors[Math.trunc(0)] + factors[Math.trunc(1)]);
  }
  let d: number = (n / factors[Math.trunc(0)]);
  return ((D(d) * factors[Math.trunc(0)]) + d);
}
function pad(n: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < 4)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  let vals: number[] = [];
  let n: number = -99;
  while ((n < 101)) {
    vals.push(Math.trunc(D(n)));
    n = (n + 1);
  }
  let i: number = 0;
  while ((i < (Array.isArray(vals) || typeof vals === 'string' ? vals.length : Object.keys(vals ?? {}).length))) {
    let line: string = "";
    let j: number = 0;
    while ((j < 10)) {
      line = (line + pad(vals[Math.trunc((i + j))]));
      if ((j < 9)) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(line);
    i = (i + 10);
  }
  let pow: number = 1.0;
  let m: number = 1;
  while ((m < 21)) {
    pow = (pow * 10.0);
    let exp: string = String(m);
    if (((Array.isArray(exp) || typeof exp === 'string' ? exp.length : Object.keys(exp ?? {}).length) < 2)) {
      exp = (exp + " ");
    }
    let res: string = (String(m) + repeat("0", (m - 1)));
    console.log(((("D(10^" + exp) + ") / 7 = ") + res));
    m = (m + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

