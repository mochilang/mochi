// Generated by Mochi v0.10.39 on 2025-07-25 10:17:26 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  const dim: number = 16;
  function newPile(d: number): number[][] {
    let b: number[][] = [];
    let y: number = 0;
    while ((y < d)) {
      let row: number[] = [];
      let x: number = 0;
      while ((x < d)) {
        row = [...row, 0];
        x = (x + 1);
      }
      b = [...b, row];
      y = (y + 1);
    }
    return b;
  }
  function handlePile(pile: number[][], x: number, y: number): number[][] {
    if ((pile[y][x] >= 4)) {
      pile[y][x] = (pile[y][x] - 4);
      if ((y > 0)) {
        pile[(y - 1)][x] = (pile[Math.trunc((y - 1))][x] + 1);
        if ((pile[Math.trunc((y - 1))][x] >= 4)) {
          pile = handlePile(pile, x, (y - 1));
        }
      }
      if ((x > 0)) {
        pile[y][(x - 1)] = (pile[y][Math.trunc((x - 1))] + 1);
        if ((pile[y][Math.trunc((x - 1))] >= 4)) {
          pile = handlePile(pile, (x - 1), y);
        }
      }
      if ((y < (dim - 1))) {
        pile[(y + 1)][x] = (pile[Math.trunc((y + 1))][x] + 1);
        if ((pile[Math.trunc((y + 1))][x] >= 4)) {
          pile = handlePile(pile, x, (y + 1));
        }
      }
      if ((x < (dim - 1))) {
        pile[y][(x + 1)] = (pile[y][Math.trunc((x + 1))] + 1);
        if ((pile[y][Math.trunc((x + 1))] >= 4)) {
          pile = handlePile(pile, (x + 1), y);
        }
      }
      pile = handlePile(pile, x, y);
    }
    return pile;
  }
  function drawPile(pile: number[][], d: number) {
    const chars: string[] = [" ", "░", "▓", "█"];
    let row: number = 0;
    while ((row < d)) {
      let line: string = "";
      let col: number = 0;
      while ((col < d)) {
        let v: number = pile[row][col];
        if ((v > 3)) {
          v = 3;
        }
        line = (line + chars[v]);
        col = (col + 1);
      }
      console.log(line);
      row = (row + 1);
    }
  }
  function main() {
    let pile: number[][] = newPile(16);
    const hdim: number = 7;
    pile[hdim][hdim] = 16;
    pile = handlePile(pile, hdim, hdim);
    drawPile(pile, 16);
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

