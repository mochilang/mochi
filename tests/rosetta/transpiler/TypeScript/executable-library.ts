// Generated by Mochi v0.10.41 on 2025-07-27 11:34:12 GMT+7

function hailstone(n: number): number[] {
  let seq: number[] = [];
  let x: number = n;
  seq.push(x);
  while ((x > 1)) {
    if (((x % 2) == 0)) {
      x = Math.trunc(x / 2);
    } else {
      x = ((3 * x) + 1);
    }
    seq.push(x);
  }
  return seq;
}
function listString(xs: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    s = (s + String(xs[i]));
    if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function libMain() {
  let seq: number[] = hailstone(27);
  console.log("");
  console.log("Hailstone sequence for the number 27:");
  console.log((("  has " + String((Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length))) + " elements"));
  console.log(("  starts with " + listString(seq.slice(0, 4))));
  console.log(("  ends with " + listString(seq.slice(((Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length) - 4), (Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length)))));
  let longest: number = 0;
  let length: number = 0;
  let i: number = 1;
  while ((i < 100000)) {
    let l: number = (Array.isArray(hailstone(i)) || typeof hailstone(i) === 'string' ? hailstone(i).length : Object.keys(hailstone(i) ?? {}).length);
    if ((l > length)) {
      longest = i;
      length = l;
    }
    i = (i + 1);
  }
  console.log("");
  console.log((((String(longest) + " has the longest Hailstone sequence, its length being ") + String(length)) + "."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  libMain();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

