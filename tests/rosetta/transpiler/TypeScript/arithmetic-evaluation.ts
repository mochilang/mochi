// Generated by Mochi v0.10.39 on 2025-07-24 20:11:16 GMT+7

export interface Parser { expr: string; pos: number }
export interface Res { v: number; p: Parser }
function skipWS(p: Parser): Parser {
  let i: number = p.pos;
  while (((i < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length)) && ((p.expr).substring(i, (i + 1)) == " "))) {
    i = (i + 1);
  }
  p = ({ ...p, "pos": i });
  return p;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let n: number = 0;
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = (((n * 10) + str.slice(i, (i + 1)).charCodeAt(0)) - 48);
    i = (i + 1);
  }
  return n;
}
function parseNumber(p: Parser): Res {
  p = skipWS(p);
  let start: number = p.pos;
  while ((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length))) {
    const ch: string = (p.expr).substring(p.pos, (p.pos + 1));
    if (((ch >= "0") && (ch <= "9"))) {
      p = ({ ...p, "pos": (p.pos + 1) });
    } else {
      break
    }
  }
  const token: string = (p.expr).substring(start, p.pos);
  return {"v": parseIntStr(token), p};
}
function parseFactor(p: Parser): Res {
  p = skipWS(p);
  if (((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length)) && ((p.expr).substring(p.pos, (p.pos + 1)) == "("))) {
    p = ({ ...p, "pos": (p.pos + 1) });
    let r: Res = parseExpr(p);
    let v: number = r.v;
    p = r.p;
    p = skipWS(p);
    if (((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length)) && ((p.expr).substring(p.pos, (p.pos + 1)) == ")"))) {
      p = ({ ...p, "pos": (p.pos + 1) });
    }
    return {v, p};
  }
  if (((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length)) && ((p.expr).substring(p.pos, (p.pos + 1)) == "-"))) {
    p = ({ ...p, "pos": (p.pos + 1) });
    let r: Res = parseFactor(p);
    let v: number = r.v;
    p = r.p;
    return {"v": -v, p};
  }
  return parseNumber(p);
}
function powInt(base: number, exp: number): number {
  let r: number = 1;
  let b: number = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      r = (r * b);
    }
    b = (b * b);
    e = Math.trunc(e / Math.trunc(2));
  }
  return r;
}
function parsePower(p: Parser): Res {
  let r: Res = parseFactor(p);
  let v: number = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if (((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length)) && ((p.expr).substring(p.pos, (p.pos + 1)) == "^"))) {
      p = ({ ...p, "pos": (p.pos + 1) });
      let r2: Res = parseFactor(p);
      let rhs: number = r2.v;
      p = r2.p;
      v = powInt(v, rhs);
    } else {
      break
    }
  }
  return {v, p};
}
function parseTerm(p: Parser): Res {
  let r: Res = parsePower(p);
  let v: number = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if ((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length))) {
      const op: string = (p.expr).substring(p.pos, (p.pos + 1));
      if ((op == "*")) {
        p = ({ ...p, "pos": (p.pos + 1) });
        let r2: Res = parsePower(p);
        let rhs: number = r2.v;
        p = r2.p;
        v = (v * rhs);
        continue
      }
      if ((op == "/")) {
        p = ({ ...p, "pos": (p.pos + 1) });
        let r2: Res = parsePower(p);
        let rhs: number = r2.v;
        p = r2.p;
        v = Math.trunc(v / Math.trunc(rhs));
        continue
      }
    }
    break
  }
  return {v, p};
}
function parseExpr(p: Parser): Res {
  let r: Res = parseTerm(p);
  let v: number = r.v;
  p = r.p;
  while (true) {
    p = skipWS(p);
    if ((p.pos < (Array.isArray(p.expr) || typeof p.expr === 'string' ? p.expr.length : Object.keys(p.expr ?? {}).length))) {
      const op: string = (p.expr).substring(p.pos, (p.pos + 1));
      if ((op == "+")) {
        p = ({ ...p, "pos": (p.pos + 1) });
        let r2: Res = parseTerm(p);
        let rhs: number = r2.v;
        p = r2.p;
        v = (v + rhs);
        continue
      }
      if ((op == "-")) {
        p = ({ ...p, "pos": (p.pos + 1) });
        let r2: Res = parseTerm(p);
        let rhs: number = r2.v;
        p = r2.p;
        v = (v - rhs);
        continue
      }
    }
    break
  }
  return {v, p};
}
function evalExpr(expr: string): number {
  let p: Parser = {expr, "pos": 0};
  const r: Res = parseExpr(p);
  return r.v;
}
function main() {
  const expr: string = "2*(3-1)+2*5";
  console.log(((expr + " = ") + String(evalExpr(expr))));
}
main();
