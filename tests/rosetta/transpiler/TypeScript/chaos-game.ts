// Generated by Mochi v0.10.40 on 2025-07-26 09:36:12 GMT+7

let width: number = 60;
let height: number = Math.trunc((width * 0.86602540378));
let iterations: number = 5000;
let grid: string[][] = [];
let y: number = 0;
function randInt(s: number, n: number): number[] {
  let next: number = (((s * 1664525) + 1013904223) % 2147483647);
  return [next, (next % n)];
}
let seed: number = 1;
let vertices: number[][] = [[0, (height - 1)], [(width - 1), (height - 1)], [Math.trunc(Math.trunc(width / 2)), 0]];
let px: number = Math.trunc(Math.trunc(width / 2));
let py: number = Math.trunc(Math.trunc(height / 2));
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  while ((y < height)) {
    let line: string[] = [];
    let x: number = 0;
    while ((x < width)) {
      line.push(" ");
      x = (x + 1);
    }
    grid.push(line);
    y = (y + 1);
  }
  while ((i < iterations)) {
    let r: number[] = randInt(seed, 3);
    seed = r[Math.trunc(0)];
    let idx: number = Math.trunc(r[Math.trunc(1)]);
    let v: number[] = vertices[idx];
    px = Math.trunc(((px + v[Math.trunc(0)]) / 2));
    py = Math.trunc(((py + v[Math.trunc(1)]) / 2));
    if (((((px >= 0) && (px < width)) && (py >= 0)) && (py < height))) {
      grid[py][px] = "*";
    }
    i = (i + 1);
  }
  y = 0;
  while ((y < height)) {
    let line: string = "";
    let x: number = 0;
    while ((x < width)) {
      line = (line + grid[y][x]);
      x = (x + 1);
    }
    console.log(line);
    y = (y + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

