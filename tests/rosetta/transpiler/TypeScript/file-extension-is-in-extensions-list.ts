// Generated by Mochi v0.10.42 on 2025-07-28 07:51:43 GMT+7

function endsWith(s: string, suf: string): boolean {
  if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < (Array.isArray(suf) || typeof suf === 'string' ? suf.length : Object.keys(suf ?? {}).length))) {
    return false;
  }
  return ((s).substring(((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - (Array.isArray(suf) || typeof suf === 'string' ? suf.length : Object.keys(suf ?? {}).length)), (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) == suf);
}
function lastIndexOf(s: string, sub: string): number {
  let idx: bigint = (0 - 1);
  let i: number = 0;
  while ((i <= ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - (Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length)))) {
    if (((s).substring(i, (i + (Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length))) == sub)) {
      idx = i;
    }
    i = (i + 1);
  }
  return idx;
}
let extensions: string[] = ["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"];
function fileExtInList(filename: string): any[] {
  let fl: string = filename.toLowerCase();
  for (const ext of extensions) {
    let ext2: string = ("." + ext.toLowerCase());
    if (endsWith(fl, ext2)) {
      return [true, ext];
    }
  }
  let idx: number = lastIndexOf(filename, ".");
  if ((idx != (0 - 1))) {
    let t: string = (filename).substring((idx + 1), (Array.isArray(filename) || typeof filename === 'string' ? filename.length : Object.keys(filename ?? {}).length));
    if ((t != "")) {
      return [false, t];
    }
    return [false, "<empty>"];
  }
  return [false, "<none>"];
}
function pad(s: string, w: number): string {
  let t: string = s;
  while (((Array.isArray(t) || typeof t === 'string' ? t.length : Object.keys(t ?? {}).length) < w)) {
    t = (t + " ");
  }
  return t;
}
function main() {
  console.log(_str("The listed extensions are:"));
  console.log(_str("[" + (extensions).join(' ') + "]"));
  let tests: string[] = ["MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"];
  for (const t of tests) {
    let res: any[] = fileExtInList(t);
    let ok: boolean = res[Math.trunc(0)];
    let ext: string = res[Math.trunc(1)];
    console.log(_str((((((pad(t, 20) + " => ") + _str(ok)) + "  (extension = ") + ext) + ")")));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

