// Generated by Mochi v0.10.41 on 2025-07-27 11:03:34 GMT+7

function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  let d: number = 3;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
  }
  return true;
}
function revInt(n: number): number {
  let r: number = 0;
  let t: number = n;
  while ((t > 0)) {
    r = ((r * 10) + (t % 10));
    t = Math.trunc(Math.trunc(t / 10));
  }
  return r;
}
function main() {
  let emirps: number[] = [];
  let n: number = 2;
  while (((Array.isArray(emirps) || typeof emirps === 'string' ? emirps.length : Object.keys(emirps ?? {}).length) < 10000)) {
    if (isPrime(n)) {
      let r: number = revInt(n);
      if (((r != n) && isPrime(r))) {
        emirps.push(n);
      }
    }
    n = (n + 1);
  }
  let line: string = "   [";
  let i: number = 0;
  while ((i < 20)) {
    line = (line + String(emirps[i]));
    if ((i < 19)) {
      line = (line + ", ");
    }
    i = (i + 1);
  }
  line = (line + "]");
  console.log("First 20:");
  console.log(line);
  line = "  [";
  for (const e of emirps) {
    if ((e >= 8000)) {
      break
    }
    if ((e >= 7700)) {
      line = ((line + String(e)) + ", ");
    }
  }
  line = (line + "]");
  console.log("Between 7700 and 8000:");
  console.log(line);
  console.log("10000th:");
  console.log((("   [" + String(emirps[Math.trunc(9999)])) + "]"));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

