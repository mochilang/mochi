// Generated by Mochi v0.10.38 on 2025-07-24 07:33:23 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  const s = typeof Deno !== "undefined" ? Deno.env.get("MOCHI_NOW_SEED") : (process.env.MOCHI_NOW_SEED || "");
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
export interface Rational { num: number; denom: number }
const OP_ADD: number = 1;
const OP_SUB: number = 2;
const OP_MUL: number = 3;
const OP_DIV: number = 4;
export type Expr = { tag: "Num"; value: Rational } | { tag: "Bin"; op: number; left: Expr; right: Expr };
function binEval(op: number, l: Expr, r: Expr): Rational {
  const lv: Rational = exprEval(l);
  const rv: Rational = exprEval(r);
  if ((op == OP_ADD)) {
    return {"num": ((lv.num * rv.denom) + (lv.denom * rv.num)), "denom": (lv.denom * rv.denom)};
  }
  if ((op == OP_SUB)) {
    return {"num": ((lv.num * rv.denom) - (lv.denom * rv.num)), "denom": (lv.denom * rv.denom)};
  }
  if ((op == OP_MUL)) {
    return {"num": (lv.num * rv.num), "denom": (lv.denom * rv.denom)};
  }
  return {"num": (lv.num * rv.denom), "denom": (lv.denom * rv.num)};
}
function binString(op: number, l: Expr, r: Expr): string {
  const ls: string = exprString(l);
  const rs: string = exprString(r);
  let opstr: string = "";
  if ((op == OP_ADD)) {
    opstr = " + ";
  } else {
    if ((op == OP_SUB)) {
      opstr = " - ";
    } else {
      if ((op == OP_MUL)) {
        opstr = " * ";
      } else {
        opstr = " / ";
      }
    }
  }
  return (((("(" + ls) + opstr) + rs) + ")");
}
function newNum(n: number): Expr {
  return {"tag": "Num", "value": {"num": n, "denom": 1}};
}
function exprEval(x: Expr): Rational {
  return ((x.tag === "Num") ? x.value : ((x.tag === "Bin") ? binEval(x.op, x.left, x.right) : undefined));
}
function exprString(x: Expr): string {
  return ((x.tag === "Num") ? String(x.value.num) : ((x.tag === "Bin") ? binString(x.op, x.left, x.right) : undefined));
}
const n_cards: number = 4;
const goal: number = 24;
const digit_range: number = 9;
function solve(xs: Expr[]): boolean {
  if (((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) == 1)) {
    const f: Rational = exprEval(xs[Math.trunc(0)]);
    if (((f.denom != 0) && (f.num == (f.denom * goal)))) {
      console.log(exprString(xs[Math.trunc(0)]));
      return true;
    }
    return false;
  }
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    let j: number = (i + 1);
    while ((j < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      let rest: Expr[] = [];
      let k: number = 0;
      while ((k < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
        if (((k != i) && (k != j))) {
          rest = [...rest, xs[k]];
        }
        k = (k + 1);
      }
      const a: Expr = xs[i];
      const b: Expr = xs[j];
      for (const op of [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
        let node = {"tag": "Bin", op, "left": a, "right": b};
        if (solve([...rest, node])) {
          return true;
        }
      }
      let node: Expr = {"tag": "Bin", "op": OP_SUB, "left": b, "right": a};
      if (solve([...rest, node])) {
        return true;
      }
      node = {"tag": "Bin", "op": OP_DIV, "left": b, "right": a};
      if (solve([...rest, node])) {
        return true;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let iter: number = 0;
  while ((iter < 10)) {
    let cards: Expr[] = [];
    let i: number = 0;
    while ((i < n_cards)) {
      const n: number = ((_now() % (digit_range - 1)) + 1);
      cards = [...cards, newNum(n)];
      console.log((" " + String(n)));
      i = (i + 1);
    }
    console.log(":  ");
    if (!solve(cards)) {
      console.log("No solution");
    }
    iter = (iter + 1);
  }
}
main();
