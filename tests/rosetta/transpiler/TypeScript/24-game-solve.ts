// Generated by Mochi v0.10.37 on 2025-07-22 22:02:41 GMT+7

export interface Node { op: any; left: any; right: any }
var _nowSeed = 0;
var _nowSeeded = false;
{
  const s = typeof Deno !== "undefined" ? Deno.env.get("MOCHI_NOW_SEED") : (process.env.MOCHI_NOW_SEED || "");
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
const OP_NUM: number = 0;
const OP_ADD: number = 1;
const OP_SUB: number = 2;
const OP_MUL: number = 3;
const OP_DIV: number = 4;
function newNum(n: number): Record<string, any> {
  return {"op": OP_NUM, "value": {"num": n, "denom": 1}};
}
function exprEval(x: Record<string, any>): Record<string, number> {
  if ((x.op == OP_NUM)) {
    return x.value;
  }
  const l = exprEval(x.left);
  const r = exprEval(x.right);
  if ((x.op == OP_ADD)) {
    return {"num": ((l.num * r.denom) + (l.denom * r.num)), "denom": (l.denom * r.denom)};
  }
  if ((x.op == OP_SUB)) {
    return {"num": ((l.num * r.denom) - (l.denom * r.num)), "denom": (l.denom * r.denom)};
  }
  if ((x.op == OP_MUL)) {
    return {"num": (l.num * r.num), "denom": (l.denom * r.denom)};
  }
  return {"num": (l.num * r.denom), "denom": (l.denom * r.num)};
}
function exprString(x: Record<string, any>): string {
  if ((x.op == OP_NUM)) {
    return String(x.value.num);
  }
  const ls = exprString(x.left);
  const rs = exprString(x.right);
  let opstr = "";
  if ((x.op == OP_ADD)) {
    opstr = " + ";
  } else {
    if ((x.op == OP_SUB)) {
      opstr = " - ";
    } else {
      if ((x.op == OP_MUL)) {
        opstr = " * ";
      } else {
        opstr = " / ";
      }
    }
  }
  return (((("(" + ls) + opstr) + rs) + ")");
}
const n_cards: number = 4;
const goal: number = 24;
const digit_range: number = 9;
function solve(xs: Record<string, any>[]): boolean {
  if (((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) == 1)) {
    const f = exprEval(xs[0]);
    if (((f.denom != 0) && (f.num == (f.denom * goal)))) {
      console.log(exprString(xs[0]));
      return true;
    }
    return false;
  }
  let i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    let j = (i + 1);
    while ((j < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      let rest = [];
      let k = 0;
      while ((k < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
        if (((k != i) && (k != j))) {
          rest = [...rest, xs[k]];
        }
        k = (k + 1);
      }
      const a = xs[i];
      const b = xs[j];
      for (const op of [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
        let node: Node = {op, "left": a, "right": b};
        if (solve([...rest, node])) {
          return true;
        }
      }
      let node: Node = {"op": OP_SUB, "left": b, "right": a};
      if (solve([...rest, node])) {
        return true;
      }
      node = {"op": OP_DIV, "left": b, "right": a};
      if (solve([...rest, node])) {
        return true;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let iter = 0;
  while ((iter < 10)) {
    let cards = [];
    let i = 0;
    while ((i < n_cards)) {
      const n = ((_now() % (digit_range - 1)) + 1);
      cards = [...cards, newNum(n)];
      console.log((" " + String(n)));
      i = (i + 1);
    }
    console.log(":  ");
    if (!solve(cards)) {
      console.log("No solution");
    }
    iter = (iter + 1);
  }
}
main();
