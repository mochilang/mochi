// Generated by Mochi v0.10.42 on 2025-07-28 10:39:52 GMT+7

export interface Rational { num: number; denom: number }
let OP_ADD: number = 1;
let OP_SUB: number = 2;
let OP_MUL: number = 3;
let OP_DIV: number = 4;
export interface Node { val: Rational; txt: string }
function makeNode(n: number): Node {
  return {"val": {"num": n, "denom": 1}, "txt": _str(n)};
}
function combine(op: number, l: Node, r: Node): Node {
  let res: Rational = {};
  if ((op == OP_ADD)) {
    res = {"num": ((l.val.num * r.val.denom) + (l.val.denom * r.val.num)), "denom": (l.val.denom * r.val.denom)};
  } else {
    if ((op == OP_SUB)) {
      res = {"num": ((l.val.num * r.val.denom) - (l.val.denom * r.val.num)), "denom": (l.val.denom * r.val.denom)};
    } else {
      if ((op == OP_MUL)) {
        res = {"num": (l.val.num * r.val.num), "denom": (l.val.denom * r.val.denom)};
      } else {
        res = {"num": (l.val.num * r.val.denom), "denom": (l.val.denom * r.val.num)};
      }
    }
  }
  let opstr: string = "";
  if ((op == OP_ADD)) {
    opstr = " + ";
  } else {
    if ((op == OP_SUB)) {
      opstr = " - ";
    } else {
      if ((op == OP_MUL)) {
        opstr = " * ";
      } else {
        opstr = " / ";
      }
    }
  }
  return {"val": res, "txt": (((("(" + l.txt) + opstr) + r.txt) + ")")};
}
function exprEval(x: Node): Rational {
  return x.val;
}
function exprString(x: Node): string {
  return x.txt;
}
let n_cards: number = 4;
let goal: number = 24;
let digit_range: number = 9;
function solve(xs: Node[]): boolean {
  if (((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) == 1)) {
    let f: Rational = exprEval(xs[Math.trunc(0)]);
    if (((f.denom != 0) && (f.num == (f.denom * goal)))) {
      console.log(_str(exprString(xs[Math.trunc(0)])));
      return true;
    }
    return false;
  }
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    let j: number = (i + 1);
    while ((j < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      let rest: Node[] = [];
      let k: number = 0;
      while ((k < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
        if (((k != i) && (k != j))) {
          rest.push(xs[k]);
        }
        k = (k + 1);
      }
      let a: Node = xs[i];
      let b: Node = xs[j];
      let node: Node = {};
      for (const op of [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
        node = combine(op, a, b);
        if (solve([...rest, node])) {
          return true;
        }
      }
      node = combine(OP_SUB, b, a);
      if (solve([...rest, node])) {
        return true;
      }
      node = combine(OP_DIV, b, a);
      if (solve([...rest, node])) {
        return true;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let iter: number = 0;
  while ((iter < 10)) {
    let cards: Node[] = [];
    let i: number = 0;
    while ((i < n_cards)) {
      let n: number = ((BigInt(_now()) % (digit_range - 1)) + BigInt(1));
      cards.push(makeNode(n));
      console.log(_str((" " + _str(n))));
      i = (i + 1);
    }
    console.log(_str(":  "));
    if (!solve(cards)) {
      console.log(_str("No solution"));
    }
    iter = (iter + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

