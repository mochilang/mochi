// Generated by Mochi v0.10.42 on 2025-07-28 10:16:19 GMT+7

let rows: number = 20;
let cols: number = 30;
let p: number = 0.01;
let f: number = 0.001;
function repeat(ch: string, n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}
function chance(prob: number): boolean {
  let threshold: number = Math.trunc((prob * 1000.0));
  return ((_now() % 1000) < threshold);
}
function newBoard(): string[][] {
  let b: string[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row: string[] = [];
    let c: number = 0;
    while ((c < cols)) {
      if (((_now() % 2) == 0)) {
        row.push("T");
      } else {
        row.push(" ");
      }
      c = (c + 1);
    }
    b.push(row);
    r = (r + 1);
  }
  return b;
}
function step(src: string[][]): string[][] {
  let dst: string[][] = [];
  let r: number = 0;
  while ((r < rows)) {
    let row: string[] = [];
    let c: number = 0;
    while ((c < cols)) {
      let cell: string = src[r][c];
      let next: string = cell;
      if ((cell == "#")) {
        next = " ";
      } else {
        if ((cell == "T")) {
          let burning: boolean = false;
          let dr: number = -1;
          while ((dr <= 1)) {
            let dc: number = -1;
            while ((dc <= 1)) {
              if (((dr != 0) || (dc != 0))) {
                let rr: bigint = (r + dr);
                let cc: bigint = (c + dc);
                if (((((rr >= 0) && (rr < rows)) && (cc >= 0)) && (cc < cols))) {
                  if ((src[rr][cc] == "#")) {
                    burning = true;
                  }
                }
              }
              dc = (dc + 1);
            }
            dr = (dr + 1);
          }
          if ((burning || chance(f))) {
            next = "#";
          }
        } else {
          if (chance(p)) {
            next = "T";
          }
        }
      }
      row.push(next);
      c = (c + 1);
    }
    dst.push(row);
    r = (r + 1);
  }
  return dst;
}
function printBoard(b: string[][]) {
  console.log(_str((repeat("__", cols) + "\n\n")));
  let r: number = 0;
  while ((r < rows)) {
    let line: string = "";
    let c: number = 0;
    while ((c < cols)) {
      let cell: string = b[r][c];
      if ((cell == " ")) {
        line = (line + "  ");
      } else {
        line = ((line + " ") + cell);
      }
      c = (c + 1);
    }
    console.log(_str((line + "\n")));
    r = (r + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  let board: string[][] = newBoard();
  printBoard(board);
  board = step(board);
  printBoard(board);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

