// Generated by Mochi v0.10.42 on 2025-07-27 21:21:24 GMT+7

function isNumeric(s: string): boolean {
  if ((s == "NaN")) {
    return true;
  }
  let i: number = 0;
  if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) == 0)) {
    return false;
  }
  if (((s[Math.trunc(0)] == "+") || (s[Math.trunc(0)] == "-"))) {
    if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) == 1)) {
      return false;
    }
    i = 1;
  }
  let digits: boolean = false;
  let dot: boolean = false;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = s[i];
    if (((ch >= "0") && (ch <= "9"))) {
      digits = true;
      i = (i + 1);
    } else {
      if (((ch == ".") && (dot == false))) {
        dot = true;
        i = (i + 1);
      } else {
        if ((((ch == "e") || (ch == "E")) && digits)) {
          i = (i + 1);
          if (((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s[i] == "+") || (s[i] == "-")))) {
            i = (i + 1);
          }
          let ed: boolean = false;
          while ((((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && (s[i] >= "0")) && (s[i] <= "9"))) {
            ed = true;
            i = (i + 1);
          }
          return (ed && (i == (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
        } else {
          return false;
        }
      }
    }
  }
  return digits;
}
function main() {
  console.log("Are these strings numeric?");
  let strs: string[] = ["1", "3.14", "-100", "1e2", "NaN", "rose"];
  for (const s of strs) {
    console.log(((("  " + s) + " -> ") + String(isNumeric(s))));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

