// Generated by Mochi v0.10.56 on 2025-08-03 17:22:30 GMT+7

let arr1: number[] = [2, 7, 1, 8, 2];
let counts1: Record<number, number> = {};
let keys1: number[] = [];
let i: number = 0;
let max1: number = 0;
let modes1: number[] = [];
let arr2: number[] = [2, 7, 1, 8, 2, 8];
let counts2: Record<number, number> = {};
let keys2: number[] = [];
let max2: number = 0;
let modes2: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((i < Number(Array.isArray(arr1) || typeof arr1 === 'string' ? arr1.length : Object.keys(arr1 ?? {}).length))) {
    let v: number = arr1[i];
    if ((v in counts1)) {
      counts1[v] = (counts1[v] + 1);
    } else {
      counts1[v] = 1;
      keys1.push(v);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < Number(Array.isArray(keys1) || typeof keys1 === 'string' ? keys1.length : Object.keys(keys1 ?? {}).length))) {
    let k: number = keys1[i];
    let c: number = counts1[k];
    if ((c > max1)) {
      max1 = c;
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < Number(Array.isArray(keys1) || typeof keys1 === 'string' ? keys1.length : Object.keys(keys1 ?? {}).length))) {
    let k: number = keys1[i];
    if ((counts1[k] == max1)) {
      modes1.push(k);
    }
    i = (i + 1);
  }
  console.log(_str(_str(modes1)));
  i = 0;
  while ((i < Number(Array.isArray(arr2) || typeof arr2 === 'string' ? arr2.length : Object.keys(arr2 ?? {}).length))) {
    let v: number = arr2[i];
    if ((v in counts2)) {
      counts2[v] = (counts2[v] + 1);
    } else {
      counts2[v] = 1;
      keys2.push(v);
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < Number(Array.isArray(keys2) || typeof keys2 === 'string' ? keys2.length : Object.keys(keys2 ?? {}).length))) {
    let k: number = keys2[i];
    let c: number = counts2[k];
    if ((c > max2)) {
      max2 = c;
    }
    i = (i + 1);
  }
  i = 0;
  while ((i < Number(Array.isArray(keys2) || typeof keys2 === 'string' ? keys2.length : Object.keys(keys2 ?? {}).length))) {
    let k: number = keys2[i];
    if ((counts2[k] == max2)) {
      modes2.push(k);
    }
    i = (i + 1);
  }
  console.log(_str(_str(modes2)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

