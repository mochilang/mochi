// Generated by Mochi v0.10.40 on 2025-07-25 17:56:49 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function isPrime(n: number): boolean {
    if ((n < 2)) {
      return false;
    }
    if (((n % 2) == 0)) {
      return (n == 2);
    }
    if (((n % 3) == 0)) {
      return (n == 3);
    }
    let d: number = 5;
    while (((d * d) <= n)) {
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 2);
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 4);
    }
    return true;
  }
  function firstPrimeFactor(n: number): number {
    if ((n == 1)) {
      return 1;
    }
    if (((n % 3) == 0)) {
      return 3;
    }
    if (((n % 5) == 0)) {
      return 5;
    }
    let inc: number[] = [4, 2, 4, 2, 4, 6, 2, 6];
    let k: number = 7;
    let i: number = 0;
    while (((k * k) <= n)) {
      if (((n % k) == 0)) {
        return k;
      }
      k = (k + inc[i]);
      i = ((i + 1) % (Array.isArray(inc) || typeof inc === 'string' ? inc.length : Object.keys(inc ?? {}).length));
    }
    return n;
  }
  function indexOf(s: string, ch: string): number {
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if (((s).substring(i, (i + 1)) == ch)) {
        return i;
      }
      i = (i + 1);
    }
    return -1;
  }
  function padLeft(n: number, width: number): string {
    let s: string = String(n);
    while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
      s = (" " + s);
    }
    return s;
  }
  function formatFloat(f: number, prec: number): string {
    const s: string = String(f);
    const idx: number = s.indexOf(".");
    if ((idx < 0)) {
      return s;
    }
    const need: number = ((idx + 1) + prec);
    if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) > need)) {
      return (s).substring(0, need);
    }
    return s;
  }
  function main() {
    let blum: number[] = [];
    let counts: number[] = [0, 0, 0, 0];
    let digits: number[] = [1, 3, 7, 9];
    let i: number = 1;
    let bc: number = 0;
    while (true) {
      const p: number = firstPrimeFactor(i);
      if (((p % 4) == 3)) {
        const q: number = Math.trunc(Math.trunc(i / p));
        if ((((q != p) && ((q % 4) == 3)) && isPrime(q))) {
          if ((bc < 50)) {
            blum = [...blum, i];
          }
          const d: number = (i % 10);
          if ((d == 1)) {
            counts[0] = (counts[Math.trunc(0)] + 1);
          } else {
            if ((d == 3)) {
              counts[1] = (counts[Math.trunc(1)] + 1);
            } else {
              if ((d == 7)) {
                counts[2] = (counts[Math.trunc(2)] + 1);
              } else {
                if ((d == 9)) {
                  counts[3] = (counts[Math.trunc(3)] + 1);
                }
              }
            }
          }
          bc = (bc + 1);
          if ((bc == 50)) {
            console.log("First 50 Blum integers:");
            let idx: number = 0;
            while ((idx < 50)) {
              let line: string = "";
              let j: number = 0;
              while ((j < 10)) {
                line = ((line + padLeft(blum[idx], 3)) + " ");
                idx = (idx + 1);
                j = (j + 1);
              }
              console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1)));
            }
            break
          }
        }
      }
      if (((i % 5) == 3)) {
        i = (i + 4);
      } else {
        i = (i + 2);
      }
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

