// Generated by Mochi v0.10.42 on 2025-07-27 21:44:56 GMT+7

let nodes: Record<number, Record<string, any>> = {};
let head: number = (0 - 1);
let tail: number = (0 - 1);
function listString(): string {
  if ((head == (0 - 1))) {
    return "<nil>";
  }
  let r: string = ("[" + nodes[head].value);
  let id: number = Math.trunc(nodes[head].next);
  while ((id != (0 - 1))) {
    r = ((r + " ") + nodes[id].value);
    id = Math.trunc(nodes[id].next);
  }
  r = (r + "]");
  return r;
}
let out: string = "From tail:";
let id: number = tail;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(listString());
  nodes[0] = {"value": "A", "next": (0 - 1), "prev": (0 - 1)};
  head = 0;
  tail = 0;
  nodes[1] = {"value": "B", "next": (0 - 1), "prev": 0};
  nodes[0].next = 1;
  tail = 1;
  console.log(listString());
  nodes[2] = {"value": "C", "next": 1, "prev": 0};
  nodes[1].prev = 2;
  nodes[0].next = 2;
  console.log(listString());
  while ((id != (0 - 1))) {
    out = ((out + " ") + nodes[id].value);
    id = Math.trunc(nodes[id].prev);
  }
  console.log(out);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

