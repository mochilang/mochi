// Generated by Mochi v0.10.38 on 2025-07-23 17:11:26 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
const PI: number = 3.141592653589793;
const TWO_PI: number = 6.283185307179586;
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 8)) {
    const denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function absFloat(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function absInt(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  const digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function parseDate(s: string): number[] {
  const y: number = parseIntStr(s.slice(0, 4));
  const m: number = parseIntStr(s.slice(5, 7));
  const d: number = parseIntStr(s.slice(8, 10));
  return [y, m, d];
}
function leap(y: number): boolean {
  if (((y % 400) == 0)) {
    return true;
  }
  if (((y % 100) == 0)) {
    return false;
  }
  return ((y % 4) == 0);
}
function daysInMonth(y: number, m: number): number {
  const feb: number = (leap(y) ? 29 : 28);
  const lengths: number[] = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  return lengths[Math.trunc((m - 1))];
}
function addDays(y: number, m: number, d: number, n: number): number[] {
  let yy: number = y;
  let mm: number = m;
  let dd: number = d;
  if ((n >= 0)) {
    let i: number = 0;
    while ((i < n)) {
      dd = (dd + 1);
      if ((dd > daysInMonth(yy, mm))) {
        dd = 1;
        mm = (mm + 1);
        if ((mm > 12)) {
          mm = 1;
          yy = (yy + 1);
        }
      }
      i = (i + 1);
    }
  } else {
    let i: number = 0;
    while ((i > n)) {
      dd = (dd - 1);
      if ((dd < 1)) {
        mm = (mm - 1);
        if ((mm < 1)) {
          mm = 12;
          yy = (yy - 1);
        }
        dd = daysInMonth(yy, mm);
      }
      i = (i - 1);
    }
  }
  return [yy, mm, dd];
}
function pad2(n: number): string {
  if ((n < 10)) {
    return ("0" + String(n));
  }
  return String(n);
}
function dateString(y: number, m: number, d: number): string {
  return ((((String(y) + "-") + pad2(m)) + "-") + pad2(d));
}
function day(y: number, m: number, d: number): number {
  const part1: number = (367 * y);
  const part2: number = Math.trunc(((7 * Math.trunc((y + ((m + 9) / 12)))) / 4));
  const part3: number = Math.trunc(((275 * m) / 9));
  return ((((part1 - part2) + part3) + d) - 730530);
}
function biorhythms(birth: string, target: string) {
  const bparts: number[] = parseDate(birth);
  const by: number = bparts[Math.trunc(0)];
  const bm: number = bparts[Math.trunc(1)];
  const bd: number = bparts[Math.trunc(2)];
  const tparts: number[] = parseDate(target);
  const ty: number = tparts[Math.trunc(0)];
  const tm: number = tparts[Math.trunc(1)];
  const td: number = tparts[Math.trunc(2)];
  const diff: number = absInt((day(ty, tm, td) - day(by, bm, bd)));
  console.log(((("Born " + birth) + ", Target ") + target));
  console.log(("Day " + String(diff)));
  const cycles: string[] = ["Physical day ", "Emotional day", "Mental day   "];
  const lengths: number[] = [23, 28, 33];
  const quadrants: string[][] = [["up and rising", "peak"], ["up but falling", "transition"], ["down and falling", "valley"], ["down but rising", "transition"]];
  let i: number = 0;
  while ((i < 3)) {
    const length: number = lengths[Math.trunc(i)];
    const cycle: string = cycles[Math.trunc(i)];
    const position: number = (diff % length);
    const quadrant: number = ((position * 4) / length);
    let percent: number = sinApprox((((2.0 * PI) * position) / length));
    percent = (floor((percent * 1000.0)) / 10.0);
    let description: string = "";
    if ((percent > 95.0)) {
      description = " peak";
    } else {
      if ((percent < -95.0)) {
        description = " valley";
      } else {
        if ((absFloat(percent) < 5.0)) {
          description = " critical transition";
        } else {
          const daysToAdd: number = ((((quadrant + 1) * length) / 4) - position);
          const res: number[] = addDays(ty, tm, td, daysToAdd);
          const ny: number = res[Math.trunc(0)];
          const nm: number = res[Math.trunc(1)];
          const nd: number = res[Math.trunc(2)];
          const transition: string = dateString(ny, nm, nd);
          const trend: string = quadrants[Math.trunc(quadrant)][Math.trunc(0)];
          const next: string = quadrants[Math.trunc(quadrant)][Math.trunc(1)];
          let pct: string = String(percent);
          if (!pct.includes(".")) {
            pct = (pct + ".0");
          }
          description = ((((((((" " + pct) + "% (") + trend) + ", next ") + next) + " ") + transition) + ")");
        }
      }
    }
    let posStr: string = String(position);
    if ((position < 10)) {
      posStr = (" " + posStr);
    }
    console.log((((cycle + posStr) + " : ") + description));
    i = (i + 1);
  }
  console.log("");
}
function main() {
  const pairs: string[][] = [["1943-03-09", "1972-07-11"], ["1809-01-12", "1863-11-19"], ["1809-02-12", "1863-11-19"]];
  let idx: number = 0;
  while ((idx < (Array.isArray(pairs) || typeof pairs === 'string' ? pairs.length : Object.keys(pairs ?? {}).length))) {
    const p: string[] = pairs[Math.trunc(idx)];
    biorhythms(p[Math.trunc(0)], p[Math.trunc(1)]);
    idx = (idx + 1);
  }
}
main();
