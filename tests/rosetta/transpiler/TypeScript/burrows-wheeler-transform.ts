// Generated by Mochi v0.10.38 on 2025-07-23 17:36:05 GMT+7

const stx: string = "\x02";
const etx: string = "\x03";
function contains(s: string, ch: string): boolean {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function sortStrings(xs: string[]): string[] {
  let arr: string[] = xs;
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[Math.trunc(j)] > arr[Math.trunc((j + 1))])) {
        const tmp: string = arr[Math.trunc(j)];
        arr[j] = arr[Math.trunc((j + 1))];
        arr[(j + 1)] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function bwt(s: string): Record<string, any> {
  if ((s.includes(stx) || s.includes(etx))) {
    return {"err": true, "res": ""};
  }
  s = ((stx + s) + etx);
  const le: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  let table: string[] = [];
  let i: number = 0;
  while ((i < le)) {
    const rot: string = ((s).substring(i, le) + (s).substring(0, i));
    table = [...table, rot];
    i = (i + 1);
  }
  table = sortStrings(table);
  let last: string = "";
  i = 0;
  while ((i < le)) {
    last = (last + (table[Math.trunc(i)]).substring((le - 1), le));
    i = (i + 1);
  }
  return {"err": false, "res": last};
}
function ibwt(r: string): string {
  const le: number = (Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length);
  let table: string[] = [];
  let i: number = 0;
  while ((i < le)) {
    table = [...table, ""];
    i = (i + 1);
  }
  let n: number = 0;
  while ((n < le)) {
    i = 0;
    while ((i < le)) {
      table[i] = ((r).substring(i, (i + 1)) + table[Math.trunc(i)]);
      i = (i + 1);
    }
    table = sortStrings(table);
    n = (n + 1);
  }
  i = 0;
  while ((i < le)) {
    if (((table[Math.trunc(i)]).substring((le - 1), le) == etx)) {
      return (table[Math.trunc(i)]).substring(1, (le - 1));
    }
    i = (i + 1);
  }
  return "";
}
function makePrintable(s: string): string {
  let out: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch: string = (s).substring(i, (i + 1));
    if ((ch == stx)) {
      out = (out + "^");
    } else {
      if ((ch == etx)) {
        out = (out + "|");
      } else {
        out = (out + ch);
      }
    }
    i = (i + 1);
  }
  return out;
}
function main() {
  const examples: string[] = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"];
  for (const t of examples) {
    console.log(makePrintable(t));
    const res = bwt(t);
    if (res[Math.trunc("err")]) {
      console.log(" --> ERROR: String can't contain STX or ETX");
      console.log(" -->");
    } else {
      const enc = res[Math.trunc("res")];
      console.log((" --> " + makePrintable(enc)));
      const r: string = ibwt(enc);
      console.log((" --> " + r));
    }
    console.log("");
  }
}
main();
