// Generated by Mochi v0.10.40 on 2025-07-25 19:44:48 GMT+7

var _nowSeed = 1;
var _nowSeeded = true;
function _now(): number {
  _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
  return _nowSeed;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  const stx: string = "\x02";
  const etx: string = "\x03";
  function contains(s: string, ch: string): boolean {
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if (((s).substring(i, (i + 1)) == ch)) {
        return true;
      }
      i = (i + 1);
    }
    return false;
  }
  function sortStrings(xs: string[]): string[] {
    let arr: string[] = xs;
    let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
    let i: number = 0;
    while ((i < n)) {
      let j: number = 0;
      while ((j < (n - 1))) {
        if ((arr[j] > arr[Math.trunc((j + 1))])) {
          const tmp: string = arr[j];
          arr[j] = arr[Math.trunc((j + 1))];
          arr[(j + 1)] = tmp;
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    return arr;
  }
  function bwt(s: string): Record<string, any> {
    if ((s.includes(stx) || s.includes(etx))) {
      return {"err": true, "res": ""};
    }
    s = ((stx + s) + etx);
    const le: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
    let table: string[] = [];
    let i: number = 0;
    while ((i < le)) {
      const rot: string = ((s).substring(i, le) + (s).substring(0, i));
      table = [...table, rot];
      i = (i + 1);
    }
    table = sortStrings(table);
    let last: string = "";
    i = 0;
    while ((i < le)) {
      last = (last + (table[i]).substring((le - 1), le));
      i = (i + 1);
    }
    return {"err": false, "res": last};
  }
  function ibwt(r: string): string {
    const le: number = (Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length);
    let table: string[] = [];
    let i: number = 0;
    while ((i < le)) {
      table = [...table, ""];
      i = (i + 1);
    }
    let n: number = 0;
    while ((n < le)) {
      i = 0;
      while ((i < le)) {
        table[i] = ((r).substring(i, (i + 1)) + table[i]);
        i = (i + 1);
      }
      table = sortStrings(table);
      n = (n + 1);
    }
    i = 0;
    while ((i < le)) {
      if (((table[i]).substring((le - 1), le) == etx)) {
        return (table[i]).substring(1, (le - 1));
      }
      i = (i + 1);
    }
    return "";
  }
  function makePrintable(s: string): string {
    let out: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      const ch: string = (s).substring(i, (i + 1));
      if ((ch == stx)) {
        out = (out + "^");
      } else {
        if ((ch == etx)) {
          out = (out + "|");
        } else {
          out = (out + ch);
        }
      }
      i = (i + 1);
    }
    return out;
  }
  function main() {
    const examples: string[] = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"];
    for (const t of examples) {
      console.log(makePrintable(t));
      const res = bwt(t);
      if (res.err) {
        console.log(" --> ERROR: String can't contain STX or ETX");
        console.log(" -->");
      } else {
        const enc = res.res;
        console.log((" --> " + makePrintable(enc)));
        const r: string = ibwt(enc);
        console.log((" --> " + r));
      }
      console.log("");
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

