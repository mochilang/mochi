// Generated by Mochi v0.10.40 on 2025-07-26 09:36:01 GMT+7

function listStr(xs: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    s = (s + String(xs[i]));
    if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function llStr(lst: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(lst) || typeof lst === 'string' ? lst.length : Object.keys(lst ?? {}).length))) {
    s = (s + listStr(lst[i]));
    if ((i < ((Array.isArray(lst) || typeof lst === 'string' ? lst.length : Object.keys(lst ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function copy(xs: number[]): number[] {
  let out: number[] = [];
  for (const v of xs) {
    out.push(v);
  }
  return out;
}
function cartN(lists): number[][] {
  if ((lists == null)) {
    return [];
  }
  let a: number[][] = lists;
  if (((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) == 0)) {
    return [[]];
  }
  let out: number[][] = [];
  let last: number = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
  let left: number[][] = cartN(a.slice(0, last));
  for (const p of left) {
    for (const x of a[last]) {
      let row = copy(p);
      row.push(x);
      out.push(row);
    }
  }
  return out;
}
function main() {
  console.log(llStr(cartN([[1, 2], [3, 4]])));
  console.log(llStr(cartN([[3, 4], [1, 2]])));
  console.log(llStr(cartN([[1, 2], []])));
  console.log(llStr(cartN([[], [1, 2]])));
  console.log("");
  console.log("[");
  for (const p of cartN([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]])) {
    console.log((" " + listStr(p)));
  }
  console.log("]");
  console.log(llStr(cartN([[1, 2, 3], [30], [500, 100]])));
  console.log(llStr(cartN([[1, 2, 3], [], [500, 100]])));
  console.log("");
  console.log(llStr(cartN(null)));
  console.log(llStr(cartN([])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

