// Generated by Mochi v0.10.39 on 2025-07-25 10:17:35 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function node(cl: string, le, aa: number, ri): Record<string, any> {
    return {cl, le, aa, ri};
  }
  function treeString(t): string {
    if ((t == null)) {
      return "E";
    }
    const m: Record<string, any> = t;
    return (((((((("T(" + m.cl) + ", ") + treeString(m.le)) + ", ") + String(m.aa)) + ", ") + treeString(m.ri)) + ")");
  }
  function balance(t) {
    if ((t == null)) {
      return t;
    }
    const m: Record<string, any> = t;
    if ((m.cl != "B")) {
      return t;
    }
    const le = m.le;
    const ri = m.ri;
    if ((le != null)) {
      const leMap: Record<string, any> = le;
      if ((leMap.cl == "R")) {
        const lele = leMap.le;
        if ((lele != null)) {
          const leleMap: Record<string, any> = lele;
          if ((leleMap.cl == "R")) {
            return node("R", node("B", leleMap.le, leleMap.aa, leleMap.ri), leMap.aa, node("B", leMap.ri, m.aa, ri));
          }
        }
        const leri = leMap.ri;
        if ((leri != null)) {
          const leriMap: Record<string, any> = leri;
          if ((leriMap.cl == "R")) {
            return node("R", node("B", leMap.le, leMap.aa, leriMap.le), leriMap.aa, node("B", leriMap.ri, m.aa, ri));
          }
        }
      }
    }
    if ((ri != null)) {
      const riMap: Record<string, any> = ri;
      if ((riMap.cl == "R")) {
        const rile = riMap.le;
        if ((rile != null)) {
          const rileMap: Record<string, any> = rile;
          if ((rileMap.cl == "R")) {
            return node("R", node("B", m.le, m.aa, rileMap.le), rileMap.aa, node("B", rileMap.ri, riMap.aa, riMap.ri));
          }
        }
        const riri = riMap.ri;
        if ((riri != null)) {
          const ririMap: Record<string, any> = riri;
          if ((ririMap.cl == "R")) {
            return node("R", node("B", m.le, m.aa, riMap.le), riMap.aa, node("B", ririMap.le, ririMap.aa, ririMap.ri));
          }
        }
      }
    }
    return t;
  }
  function ins(tr, x: number) {
    if ((tr == null)) {
      return node("R", null, x, null);
    }
    if ((x < tr.aa)) {
      return balance(node(tr.cl, ins(tr.le, x), tr.aa, tr.ri));
    }
    if ((x > tr.aa)) {
      return balance(node(tr.cl, tr.le, tr.aa, ins(tr.ri, x)));
    }
    return tr;
  }
  function insert(tr, x: number) {
    const t = ins(tr, x);
    if ((t == null)) {
      return null;
    }
    const m: Record<string, any> = t;
    return node("B", m.le, m.aa, m.ri);
  }
  let tr = null;
  let i: number = 1;
  while ((i <= 16)) {
    tr = insert(tr, i);
    i = (i + 1);
  }
  console.log(treeString(tr));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

