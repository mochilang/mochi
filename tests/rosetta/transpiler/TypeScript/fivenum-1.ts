// Generated by Mochi v0.10.42 on 2025-07-28 07:51:52 GMT+7

function sortFloat(xs: number[]): number[] {
  let arr: number[] = xs;
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[Math.trunc((j + 1))])) {
        let t: number = arr[j];
        arr[j] = arr[Math.trunc((j + 1))];
        arr[(j + 1)] = t;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function median(s: number[]): number {
  let n: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  if (((n % 2) == 1)) {
    return s[Math.trunc(Math.trunc(n / 2))];
  }
  return ((s[Math.trunc((Math.trunc(n / 2) - 1))] + s[Math.trunc(Math.trunc(n / 2))]) / 2.0);
}
function fivenum(xs: number[]): number[] {
  let s: number[] = sortFloat(xs);
  let n: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  let q1: number = s[Math.trunc((Number((n - 1)) / 4))];
  let med: number = median(s);
  let q3: number = s[Math.trunc((Number((3 * Number((n - 1)))) / 4))];
  return [s[Math.trunc(0)], q1, med, q3, s[Math.trunc((n - 1))]];
}
let x1: number[] = [36.0, 40.0, 7.0, 39.0, 41.0, 15.0];
let x2: number[] = [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0];
let x3: number[] = [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(fivenum(x1))));
  console.log(_str(_str(fivenum(x2))));
  console.log(_str(_str(fivenum(x3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

