// Generated by Mochi v0.10.40 on 2025-07-25 17:22:26 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  const PI: number = 3.141592653589793;
  function sinApprox(x: number): number {
    let term: number = x;
    let sum: number = x;
    let n: number = 1;
    while ((n <= 10)) {
      const denom = ((2 * n) * ((2 * n) + 1));
      term = Math.trunc(((-term * x) * x) / denom);
      sum = (sum + term);
      n = (n + 1);
    }
    return sum;
  }
  function cosApprox(x: number): number {
    let term: number = 1.0;
    let sum: number = 1.0;
    let n: number = 1;
    while ((n <= 10)) {
      const denom = (((2 * n) - 1) * (2 * n));
      term = Math.trunc(((-term * x) * x) / denom);
      sum = (sum + term);
      n = (n + 1);
    }
    return sum;
  }
  function sqrtApprox(x: number): number {
    let guess: number = x;
    let i: number = 0;
    while ((i < 10)) {
      guess = ((guess + Math.trunc(x / guess)) / 2.0);
      i = (i + 1);
    }
    return guess;
  }
  const L: number = 10.0;
  const G: number = 9.81;
  const dt: number = 0.2;
  const phi0: number = (PI / 4.0);
  const omega: number = sqrtApprox(Math.trunc(G / L));
  let t: number = 0.0;
  for (let step = 0; step < 10; step++) {
    const phi: number = (phi0 * cosApprox((omega * t)));
    const pos: number = Math.trunc(((10.0 * sinApprox(phi)) + 0.5));
    console.log(String(pos));
    t = (t + dt);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

