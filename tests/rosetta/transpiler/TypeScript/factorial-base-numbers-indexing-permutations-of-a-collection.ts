// Generated by Mochi v0.10.42 on 2025-07-28 01:00:48 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((((Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + (s).substring(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function joinInts(nums: number[], sep: string): string {
  let s: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    if ((i > 0)) {
      s = (s + sep);
    }
    s = (s + _str(nums[i]));
    i = (i + 1);
  }
  return s;
}
function undot(s: string): number[] {
  let parts: string[] = s.split(".");
  let nums: number[] = [];
  for (const p of parts) {
    nums.push(parseIntStr(p));
  }
  return nums;
}
function factorial(n: number): number {
  let f: number = 1;
  let i: number = 2;
  while ((i <= n)) {
    f = (f * i);
    i = (i + 1);
  }
  return f;
}
function genFactBaseNums(size: number, countOnly: boolean): any[] {
  let results: number[][] = [];
  let count: number = 0;
  let n: number = 0;
  while (true) {
    let radix: number = 2;
    let res: number[] = [];
    if (!countOnly) {
      let z: number = 0;
      while ((z < size)) {
        res.push(0);
        z = (z + 1);
      }
    }
    let k: number = n;
    while ((k > 0)) {
      let div: number = Math.trunc(k / radix);
      let rem: bigint = (k % radix);
      if ((!countOnly && (radix <= (size + 1)))) {
        res[((size - radix) + 1)] = rem;
      }
      k = div;
      radix = (radix + 1);
    }
    if ((radix > (size + 2))) {
      break
    }
    count = (count + 1);
    if (!countOnly) {
      results.push(res);
    }
    n = (n + 1);
  }
  return [results, count];
}
function mapToPerms(factNums: number[][]): number[][] {
  let perms: number[][] = [];
  let psize: bigint = ((Array.isArray(factNums[Math.trunc(0)]) || typeof factNums[Math.trunc(0)] === 'string' ? factNums[Math.trunc(0)].length : Object.keys(factNums[Math.trunc(0)] ?? {}).length) + 1);
  let start: number[] = [];
  let i: number = 0;
  while ((i < psize)) {
    start.push(i);
    i = (i + 1);
  }
  for (const fn of factNums) {
    let perm: number[] = [];
    let j: number = 0;
    while ((j < (Array.isArray(start) || typeof start === 'string' ? start.length : Object.keys(start ?? {}).length))) {
      perm.push(start[j]);
      j = (j + 1);
    }
    let m: number = 0;
    while ((m < (Array.isArray(fn) || typeof fn === 'string' ? fn.length : Object.keys(fn ?? {}).length))) {
      let g: number = fn[m];
      if ((g != 0)) {
        let first: number = m;
        let last: bigint = (m + g);
        let t: number = 1;
        while ((t <= g)) {
          let temp = perm[first];
          let x = (first + 1);
          while ((x <= last)) {
            perm[(x - 1)] = perm[x];
            x = (x + 1);
          }
          perm[last] = temp;
          t = (t + 1);
        }
      }
      m = (m + 1);
    }
    perms.push(perm);
  }
  return perms;
}
let seed: number = 1;
function randInt(n: number): number {
  seed = (((seed * 1664525) + 1013904223) % 2147483647);
  return (seed % n);
}
function main() {
  let g: any[] = genFactBaseNums(3, false);
  let factNums = g[Math.trunc(0)];
  let perms: number[][] = mapToPerms(factNums);
  let i: number = 0;
  while ((i < (Array.isArray(factNums) || typeof factNums === 'string' ? factNums.length : Object.keys(factNums ?? {}).length))) {
    console.log(_str(((joinInts(factNums[i], ".") + " -> ") + joinInts(perms[i], ""))));
    i = (i + 1);
  }
  let count2: number = factorial(11);
  console.log(_str(("\nPermutations generated = " + _str(count2))));
  console.log(_str(("compared to 11! which  = " + _str(factorial(11)))));
  console.log(_str(""));
  let fbn51s: string[] = ["39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0", "51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1"];
  factNums = [undot(fbn51s[Math.trunc(0)]), undot(fbn51s[Math.trunc(1)])];
  perms = mapToPerms(factNums);
  let shoe: string = "A♠K♠Q♠J♠T♠9♠8♠7♠6♠5♠4♠3♠2♠A♥K♥Q♥J♥T♥9♥8♥7♥6♥5♥4♥3♥2♥A♦K♦Q♦J♦T♦9♦8♦7♦6♦5♦4♦3♦2♦A♣K♣Q♣J♣T♣9♣8♣7♣6♣5♣4♣3♣2♣";
  let cards: string[] = [];
  i = 0;
  while ((i < 52)) {
    let card: string = (shoe).substring((2 * i), ((2 * i) + 2));
    if ((card.slice(0, 1) == "T")) {
      card = ("10" + card.slice(1, 2));
    }
    cards.push(card);
    i = (i + 1);
  }
  i = 0;
  while ((i < (Array.isArray(fbn51s) || typeof fbn51s === 'string' ? fbn51s.length : Object.keys(fbn51s ?? {}).length))) {
    console.log(_str(fbn51s[i]));
    let perm: number[] = perms[i];
    let j: number = 0;
    let line: string = "";
    while ((j < (Array.isArray(perm) || typeof perm === 'string' ? perm.length : Object.keys(perm ?? {}).length))) {
      line = (line + cards[Math.trunc(perm[j])]);
      j = (j + 1);
    }
    console.log(_str((line + "\n")));
    i = (i + 1);
  }
  let fbn51: number[] = [];
  i = 0;
  while ((i < 51)) {
    fbn51.push(randInt((52 - i)));
    i = (i + 1);
  }
  console.log(_str(joinInts(fbn51, ".")));
  perms = mapToPerms([fbn51]);
  let line: string = "";
  i = 0;
  while ((i < (Array.isArray(perms[Math.trunc(0)]) || typeof perms[Math.trunc(0)] === 'string' ? perms[Math.trunc(0)].length : Object.keys(perms[Math.trunc(0)] ?? {}).length))) {
    line = (line + cards[Math.trunc(perms[Math.trunc(0)][i])]);
    i = (i + 1);
  }
  console.log(_str(line));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

