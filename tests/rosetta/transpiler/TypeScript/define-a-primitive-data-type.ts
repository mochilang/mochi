// Generated by Mochi v0.10.40 on 2025-07-26 00:40:37 GMT+7

function TinyInt_Add(self: TinyInt, t2: TinyInt): TinyInt {
  return NewTinyInt((self.value + t2.value));
}
function TinyInt_Sub(self: TinyInt, t2: TinyInt): TinyInt {
  return NewTinyInt((self.value - t2.value));
}
function TinyInt_Mul(self: TinyInt, t2: TinyInt): TinyInt {
  return NewTinyInt((self.value * t2.value));
}
function TinyInt_Div(self: TinyInt, t2: TinyInt): TinyInt {
  return NewTinyInt((self.value / t2.value));
}
function TinyInt_Rem(self: TinyInt, t2: TinyInt): TinyInt {
  return NewTinyInt((self.value % t2.value));
}
function TinyInt_Inc(self: TinyInt): TinyInt {
  return self.Add(NewTinyInt(1));
}
function TinyInt_Dec(self: TinyInt): TinyInt {
  return self.Sub(NewTinyInt(1));
}
export interface TinyInt { value: number }
function NewTinyInt(i: number): TinyInt {
  if ((i < 1)) {
    i = 1;
  } else {
    if ((i > 10)) {
      i = 10;
    }
  }
  return {"value": i, "Div": function(...args){ return TinyInt_Div(this, ...args); }, "Rem": function(...args){ return TinyInt_Rem(this, ...args); }, "Inc": function(...args){ return TinyInt_Inc(this, ...args); }, "Dec": function(...args){ return TinyInt_Dec(this, ...args); }, "Add": function(...args){ return TinyInt_Add(this, ...args); }, "Sub": function(...args){ return TinyInt_Sub(this, ...args); }, "Mul": function(...args){ return TinyInt_Mul(this, ...args); }};
}
function main() {
  let t1 = NewTinyInt(6);
  let t2 = NewTinyInt(3);
  console.log(("t1      = " + String(t1.value)));
  console.log(("t2      = " + String(t2.value)));
  console.log(("t1 + t2 = " + String(t1.Add(t2).value)));
  console.log(("t1 - t2 = " + String(t1.Sub(t2).value)));
  console.log(("t1 * t2 = " + String(t1.Mul(t2).value)));
  console.log(("t1 / t2 = " + String(t1.Div(t2).value)));
  console.log(("t1 % t2 = " + String(t1.Rem(t2).value)));
  console.log(("t1 + 1  = " + String(t1.Inc().value)));
  console.log(("t1 - 1  = " + String(t1.Dec().value)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

