// Generated by Mochi v0.10.38 on 2025-07-23 20:04:19 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if ((s.slice(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function rotate(s: string, n: number): string {
  return (s.slice(n) + s.slice(0, n));
}
function scrambleLeft(s: string): string {
  return (((s.slice(0, 1) + s.slice(2, 14)) + s.slice(1, 2)) + s.slice(14));
}
function scrambleRight(s: string): string {
  return ((((s.slice(1, 3) + s.slice(4, 15)) + s.slice(3, 4)) + s.slice(15)) + s.slice(0, 1));
}
function chao(text: string, encode: boolean): string {
  let left: string = "HXUCZVAMDSLKPEFJRIGTWOBNYQ";
  let right: string = "PTLNBQDEOYSFAVZKGJRIHWXUMC";
  let out: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(text) || typeof text === 'string' ? text.length : Object.keys(text ?? {}).length))) {
    const ch: string = text.slice(i, (i + 1));
    let idx: number = 0;
    if (encode) {
      idx = right.indexOf(ch);
      out = (out + left.slice(idx, (idx + 1)));
    } else {
      idx = left.indexOf(ch);
      out = (out + right.slice(idx, (idx + 1)));
    }
    left = rotate(left, idx);
    right = rotate(right, idx);
    left = scrambleLeft(left);
    right = scrambleRight(right);
    i = (i + 1);
  }
  return out;
}
function main() {
  const plain: string = "WELLDONEISBETTERTHANWELLSAID";
  const cipher: string = chao(plain, true);
  console.log(plain);
  console.log(cipher);
  console.log(chao(cipher, false));
}
main();
