// Generated by Mochi v0.10.40 on 2025-07-25 21:24:42 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function indexOf(s: string, ch: string): number {
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if ((s.slice(i, (i + 1)) == ch)) {
        return i;
      }
      i = (i + 1);
    }
    return -1;
  }
  function rotate(s: string, n: number): string {
    return (s.slice(n) + s.slice(0, n));
  }
  function scrambleLeft(s: string): string {
    return (((s.slice(0, 1) + s.slice(2, 14)) + s.slice(1, 2)) + s.slice(14));
  }
  function scrambleRight(s: string): string {
    return ((((s.slice(1, 3) + s.slice(4, 15)) + s.slice(3, 4)) + s.slice(15)) + s.slice(0, 1));
  }
  function chao(text: string, encode: boolean): string {
    let left: string = "HXUCZVAMDSLKPEFJRIGTWOBNYQ";
    let right: string = "PTLNBQDEOYSFAVZKGJRIHWXUMC";
    let out: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(text) || typeof text === 'string' ? text.length : Object.keys(text ?? {}).length))) {
      const ch: string = text.slice(i, (i + 1));
      let idx: number = 0;
      if (encode) {
        idx = right.indexOf(ch);
        out = (out + left.slice(idx, (idx + 1)));
      } else {
        idx = left.indexOf(ch);
        out = (out + right.slice(idx, (idx + 1)));
      }
      left = rotate(left, idx);
      right = rotate(right, idx);
      left = scrambleLeft(left);
      right = scrambleRight(right);
      i = (i + 1);
    }
    return out;
  }
  function main() {
    const plain: string = "WELLDONEISBETTERTHANWELLSAID";
    const cipher: string = chao(plain, true);
    console.log(plain);
    console.log(cipher);
    console.log(chao(cipher, false));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

