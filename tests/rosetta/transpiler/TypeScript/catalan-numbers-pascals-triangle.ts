// Generated by Mochi v0.10.42 on 2025-07-27 20:33:42 GMT+7

let n: number = 15;
let t: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  for (let _ = 0; _ < (n + 2); _++) {
    t.push(0);
  }
  t[1] = 1;
  for (let i = 1; i < (n + 1); i++) {
    let j: number = i;
    while ((j > 1)) {
      t[j] = (t[j] + t[Math.trunc((j - 1))]);
      j = (j - 1);
    }
    t[Math.trunc((i + 1))] = t[i];
    j = (i + 1);
    while ((j > 1)) {
      t[j] = (t[j] + t[Math.trunc((j - 1))]);
      j = (j - 1);
    }
    let cat: number = (t[Math.trunc((i + 1))] - t[i]);
    if ((i < 10)) {
      console.log((((" " + String(i)) + " : ") + String(cat)));
    } else {
      console.log(((String(i) + " : ") + String(cat)));
    }
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

