// Generated by Mochi v0.10.42 on 2025-07-27 21:45:00 GMT+7

export interface Data { pm: number; g1: number; s1: number; g2: number; s2: number; d: number }
function commatize(n: number): string {
  let s: string = String(n);
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3);
  while ((i > 0)) {
    s = ((s.slice(0, i) + ",") + s.slice(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
    i = (i - 3);
  }
  return s;
}
function main() {
  let data: Data[] = [{"pm": 10, "g1": 4, "s1": 7, "g2": 6, "s2": 23, "d": 16}, {"pm": 100, "g1": 14, "s1": 113, "g2": 16, "s2": 1831, "d": 1718}, {"pm": 1000, "g1": 14, "s1": 113, "g2": 16, "s2": 1831, "d": 1718}, {"pm": 10000, "g1": 36, "s1": 9551, "g2": 38, "s2": 30593, "d": 21042}, {"pm": 100000, "g1": 70, "s1": 173359, "g2": 72, "s2": 31397, "d": 141962}, {"pm": 1000000, "g1": 100, "s1": 396733, "g2": 102, "s2": 1444309, "d": 1047576}, {"pm": 10000000, "g1": 148, "s1": 2010733, "g2": 150, "s2": 13626257, "d": 11615524}, {"pm": 100000000, "g1": 198, "s1": 46006769, "g2": 200, "s2": 378043979, "d": 332037210}, {"pm": 1000000000, "g1": 276, "s1": 649580171, "g2": 278, "s2": 4260928601, "d": 3611348430}, {"pm": 10000000000, "g1": 332, "s1": 5893180121, "g2": 334, "s2": 30827138509, "d": 24933958388}, {"pm": 100000000000, "g1": 386, "s1": 35238645587, "g2": 388, "s2": 156798792223, "d": 121560146636}];
  for (const entry of data) {
    let pm = commatize(entry.pm);
    let line1: string = (("Earliest difference > " + pm) + " between adjacent prime gap starting primes:");
    console.log(line1);
    let line2 = (((((((((("Gap " + String(entry.g1)) + " starts at ") + commatize(entry.s1)) + ", gap ") + String(entry.g2)) + " starts at ") + commatize(entry.s2)) + ", difference is ") + commatize(entry.d)) + ".");
    console.log(line2);
    console.log("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

