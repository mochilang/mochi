// Generated by Mochi v0.10.55 on 2025-08-02 20:30:50 GMT+7

function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let g: number = x;
  let i: number = 0;
  while ((i < 20)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
export interface Rsdv { n: number; a: number; q: number }
function newRsdv(): Rsdv {
  return {"n": 0.0, "a": 0.0, "q": 0.0};
}
function add(r: Rsdv, x: number): Rsdv {
  let n1: number = (r.n + 1.0);
  let a1: number = (r.a + ((x - r.a) / n1));
  let q1: number = (r.q + ((x - r.a) * (x - a1)));
  return {"n": n1, "a": a1, "q": q1};
}
function sd(r: Rsdv): number {
  return sqrtApprox((r.q / r.n));
}
function main() {
  let r: Rsdv = newRsdv();
  for (const x of [2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0]) {
    r = add(r, x);
    console.log(_str(_str(sd(r))));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  globalThis.gc?.()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

