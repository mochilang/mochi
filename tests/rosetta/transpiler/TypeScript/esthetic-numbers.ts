// Generated by Mochi v0.10.41 on 2025-07-27 11:34:01 GMT+7

let digits: string = "0123456789abcdef";
function toBase(n: number, b: number): string {
  if ((n == 0)) {
    return "0";
  }
  let v: number = n;
  let out: string = "";
  while ((v > 0)) {
    let d: number = (v % b);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / b);
  }
  return out;
}
function uabs(a: number, b: number): number {
  if ((a > b)) {
    return (a - b);
  }
  return (b - a);
}
function isEsthetic(n: number, b: number): boolean {
  if ((n == 0)) {
    return false;
  }
  let i: number = (n % b);
  n = Math.trunc(n / b);
  while ((n > 0)) {
    let j: number = (n % b);
    if ((uabs(i, j) != 1)) {
      return false;
    }
    n = Math.trunc(n / b);
    i = j;
  }
  return true;
}
let esths: number[] = [];
function dfs(n: number, m: number, i: number) {
  if (((i >= n) && (i <= m))) {
    esths.push(i);
  }
  if (((i == 0) || (i > m))) {
    return;
  }
  let d: number = (i % 10);
  let i1: number = (((i * 10) + d) - 1);
  let i2: number = (i1 + 2);
  if ((d == 0)) {
    dfs(n, m, i2);
  } else {
    if ((d == 9)) {
      dfs(n, m, i1);
    } else {
      dfs(n, m, i1);
      dfs(n, m, i2);
    }
  }
}
function commatize(n: number): string {
  let s: string = String(n);
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3);
  while ((i >= 1)) {
    s = ((s.slice(0, i) + ",") + s.slice(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
    i = (i - 3);
  }
  return s;
}
function listEsths(n: number, n2: number, m: number, m2: number, perLine: number, showAll: boolean) {
  esths = [];
  let i: number = 0;
  while ((i < 10)) {
    dfs(n2, m2, i);
    i = (i + 1);
  }
  let le: number = (Array.isArray(esths) || typeof esths === 'string' ? esths.length : Object.keys(esths ?? {}).length);
  console.log((((((("Base 10: " + commatize(le)) + " esthetic numbers between ") + commatize(n)) + " and ") + commatize(m)) + ":"));
  if (showAll) {
    let c: number = 0;
    let line: string = "";
    for (const v of esths) {
      if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
        line = (line + " ");
      }
      line = (line + String(v));
      c = (c + 1);
      if (((c % perLine) == 0)) {
        console.log(line);
        line = "";
      }
    }
    if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
      console.log(line);
    }
  } else {
    let line: string = "";
    let idx: number = 0;
    while ((idx < perLine)) {
      if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
        line = (line + " ");
      }
      line = (line + String(esths[idx]));
      idx = (idx + 1);
    }
    console.log(line);
    console.log("............");
    line = "";
    idx = (le - perLine);
    while ((idx < le)) {
      if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
        line = (line + " ");
      }
      line = (line + String(esths[idx]));
      idx = (idx + 1);
    }
    console.log(line);
  }
  console.log("");
}
function main() {
  let b: number = 2;
  while ((b <= 16)) {
    let start: number = (4 * b);
    let stop: number = (6 * b);
    console.log((((((("Base " + String(b)) + ": ") + String(start)) + "th to ") + String(stop)) + "th esthetic numbers:"));
    let n: number = 1;
    let c: number = 0;
    let line: string = "";
    while ((c < stop)) {
      if (isEsthetic(n, b)) {
        c = (c + 1);
        if ((c >= start)) {
          if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
            line = (line + " ");
          }
          line = (line + toBase(n, b));
        }
      }
      n = (n + 1);
    }
    console.log(line);
    console.log("");
    b = (b + 1);
  }
  listEsths(1000, 1010, 9999, 9898, 16, true);
  listEsths(100000000, 101010101, 130000000, 123456789, 9, true);
  listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false);
  listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false);
  listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

