// Generated by Mochi v0.10.57 on 2025-08-04 19:46:33 GMT+7

let vals: number[] = [0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66];
let billions: number[] = [0, 2, 4, 6];
function ebanNumbers(start: number, stop: number): number[] {
  let nums: number[] = [];
  for (const b of billions) {
    for (const m of vals) {
      for (const t of vals) {
        for (const r of vals) {
          let n: number = ((((b * 1000000000) + (m * 1000000)) + (t * 1000)) + r);
          if (((n >= start) && (n <= stop))) {
            nums.push(n);
          }
        }
      }
    }
  }
  return nums;
}
function countEban(start: number, stop: number): number {
  let count: number = 0;
  for (const b of billions) {
    for (const m of vals) {
      for (const t of vals) {
        for (const r of vals) {
          let n: number = ((((b * 1000000000) + (m * 1000000)) + (t * 1000)) + r);
          if (((n >= start) && (n <= stop))) {
            count = (count + 1);
          }
        }
      }
    }
  }
  return count;
}
function main() {
  let ranges: any[][] = [[2, 1000, true], [1000, 4000, true], [2, 10000, false], [2, 100000, false], [2, 1000000, false], [2, 10000000, false], [2, 100000000, false], [2, 1000000000, false]];
  for (const rg of ranges) {
    let start: number = Math.trunc(rg[Math.trunc(0)]);
    let stop: number = Math.trunc(rg[Math.trunc(1)]);
    let show: boolean = rg[Math.trunc(2)];
    if ((start == 2)) {
      console.log(_str((("eban numbers up to and including " + _str(stop)) + ":")));
    } else {
      console.log(_str((((("eban numbers between " + _str(start)) + " and ") + _str(stop)) + " (inclusive):")));
    }
    if (show) {
      let nums: number[] = ebanNumbers(start, stop);
      let line: string = "";
      let i: number = 0;
      while ((i < Number(Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
        line = ((line + _str(nums[i])) + " ");
        i = (i + 1);
      }
      if ((Number(Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
        console.log(_str((line).substring(0, (Number(Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1))));
      }
    }
    let c: number = countEban(start, stop);
    console.log(_str((("count = " + _str(c)) + "\n")));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

