// Generated by Mochi v0.10.42 on 2025-07-27 21:20:54 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function digits(n: number): number[] {
  if ((n == 0)) {
    return [0];
  }
  let rev: number[] = [];
  let x: number = n;
  while ((x > 0)) {
    rev.push((x % 10));
    x = Math.trunc(Math.trunc(x / 10));
  }
  let out: number[] = [];
  let i: number = ((Array.isArray(rev) || typeof rev === 'string' ? rev.length : Object.keys(rev ?? {}).length) - 1);
  while ((i >= 0)) {
    out.push(rev[i]);
    i = (i - 1);
  }
  return out;
}
function commatize(n: number): string {
  let s: string = String(n);
  let out: string = "";
  let i: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while ((i > 3)) {
    out = (("," + s.slice((i - 3), i)) + out);
    i = (i - 3);
  }
  out = (s.slice(0, i) + out);
  return out;
}
function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  let d: number = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if ((((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function reverseStr(s: string): string {
  let out: string = "";
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  while ((i >= 0)) {
    out = (out + s.slice(i, (i + 1)));
    i = (i - 1);
  }
  return out;
}
function pad(s: string, w: number): string {
  let out: string = s;
  while (((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < w)) {
    out = (" " + out);
  }
  return out;
}
function findFirst(list: number[]): number[] {
  let i: number = 0;
  while ((i < (Array.isArray(list) || typeof list === 'string' ? list.length : Object.keys(list ?? {}).length))) {
    if ((list[i] > 10000000)) {
      return [list[i], i];
    }
    i = (i + 1);
  }
  return [-1, -1];
}
function main() {
  let ranges: number[][] = [[0, 0], [101, 909], [11011, 99099], [1110111, 9990999], [111101111, 119101111]];
  let cyclops: number[] = [];
  for (const r of ranges) {
    let start: number = r[Math.trunc(0)];
    let end: number = r[Math.trunc(1)];
    let numDigits: number = (Array.isArray(String(start)) || typeof String(start) === 'string' ? String(start).length : Object.keys(String(start) ?? {}).length);
    let center: number = Math.trunc(numDigits / 2);
    let i: number = start;
    while ((i <= end)) {
      let ds: number[] = digits(i);
      if ((ds[center] == 0)) {
        let count: number = 0;
        for (const d of ds) {
          if ((d == 0)) {
            count = (count + 1);
          }
        }
        if ((count == 1)) {
          cyclops.push(i);
        }
      }
      i = (i + 1);
    }
  }
  console.log("The first 50 cyclops numbers are:");
  let idx: number = 0;
  while ((idx < 50)) {
    console.log((pad(commatize(cyclops[idx]), 6) + " "));
    idx = (idx + 1);
    if (((idx % 10) == 0)) {
      console.log("\n");
    }
  }
  let fi: number[] = findFirst(cyclops);
  console.log(((("\nFirst such number > 10 million is " + commatize(fi[Math.trunc(0)])) + " at zero-based index ") + commatize(fi[Math.trunc(1)])));
  let primes: number[] = [];
  for (const n of cyclops) {
    if (isPrime(n)) {
      primes.push(n);
    }
  }
  console.log("\n\nThe first 50 prime cyclops numbers are:");
  idx = 0;
  while ((idx < 50)) {
    console.log((pad(commatize(primes[idx]), 6) + " "));
    idx = (idx + 1);
    if (((idx % 10) == 0)) {
      console.log("\n");
    }
  }
  let fp: number[] = findFirst(primes);
  console.log(((("\nFirst such number > 10 million is " + commatize(fp[Math.trunc(0)])) + " at zero-based index ") + commatize(fp[Math.trunc(1)])));
  let bpcyclops: number[] = [];
  let ppcyclops: number[] = [];
  for (const p of primes) {
    let ps: string = String(p);
    let splitp: string[] = ps.split("0");
    let noMiddle = parseIntStr((splitp[Math.trunc(0)] + splitp[Math.trunc(1)]));
    if (isPrime(noMiddle)) {
      bpcyclops.push(p);
    }
    if ((ps == reverseStr(ps))) {
      ppcyclops.push(p);
    }
  }
  console.log("\n\nThe first 50 blind prime cyclops numbers are:");
  idx = 0;
  while ((idx < 50)) {
    console.log((pad(commatize(bpcyclops[idx]), 6) + " "));
    idx = (idx + 1);
    if (((idx % 10) == 0)) {
      console.log("\n");
    }
  }
  let fb: number[] = findFirst(bpcyclops);
  console.log(((("\nFirst such number > 10 million is " + commatize(fb[Math.trunc(0)])) + " at zero-based index ") + commatize(fb[Math.trunc(1)])));
  console.log("\n\nThe first 50 palindromic prime cyclops numbers are:");
  idx = 0;
  while ((idx < 50)) {
    console.log((pad(commatize(ppcyclops[idx]), 9) + " "));
    idx = (idx + 1);
    if (((idx % 8) == 0)) {
      console.log("\n");
    }
  }
  let fpp: number[] = findFirst(ppcyclops);
  console.log(((("\n\nFirst such number > 10 million is " + commatize(fpp[Math.trunc(0)])) + " at zero-based index ") + commatize(fpp[Math.trunc(1)])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

