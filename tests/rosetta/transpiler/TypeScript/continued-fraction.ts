// Generated by Mochi v0.10.39 on 2025-07-24 14:52:51 GMT+7

function newTerm(a: number, b: number): Record<string, number> {
  return {a, b};
}
function cfSqrt2(nTerms: number): Record<string, number>[] {
  let f: Record<string, number>[] = [];
  let n: number = 0;
  while ((n < nTerms)) {
    f = [...f, newTerm(2, 1)];
    n = (n + 1);
  }
  if ((nTerms > 0)) {
    f[0].a = 1;
  }
  return f;
}
function cfNap(nTerms: number): Record<string, number>[] {
  let f: Record<string, number>[] = [];
  let n: number = 0;
  while ((n < nTerms)) {
    f = [...f, newTerm(n, (n - 1))];
    n = (n + 1);
  }
  if ((nTerms > 0)) {
    f[0].a = 2;
  }
  if ((nTerms > 1)) {
    f[1].b = 1;
  }
  return f;
}
function cfPi(nTerms: number): Record<string, number>[] {
  let f: Record<string, number>[] = [];
  let n: number = 0;
  while ((n < nTerms)) {
    const g: number = ((2 * n) - 1);
    f = [...f, newTerm(6, (g * g))];
    n = (n + 1);
  }
  if ((nTerms > 0)) {
    f[0].a = 3;
  }
  return f;
}
function real(f: Record<string, number>[]): number {
  let r: number = 0.0;
  let i: number = ((Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length) - 1);
  while ((i > 0)) {
    r = Math.trunc(f[i].b / (f[i].a + r));
    i = (i - 1);
  }
  if (((Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length) > 0)) {
    r = (r + f[Math.trunc(0)].a);
  }
  return r;
}
function main() {
  console.log(("sqrt2: " + String(real(cfSqrt2(20)))));
  console.log(("nap:   " + String(real(cfNap(20)))));
  console.log(("pi:    " + String(real(cfPi(20)))));
}
main();
