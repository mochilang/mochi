// Generated by Mochi v0.10.40 on 2025-07-25 22:05:09 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function newTerm(a: number, b: number): Record<string, number> {
    return {a, b};
  }
  function cfSqrt2(nTerms: number): Record<string, number>[] {
    let f: Record<string, number>[] = [];
    let n: number = 0;
    while ((n < nTerms)) {
      f = [...f, newTerm(2, 1)];
      n = (n + 1);
    }
    if ((nTerms > 0)) {
      f[0].a = 1;
    }
    return f;
  }
  function cfNap(nTerms: number): Record<string, number>[] {
    let f: Record<string, number>[] = [];
    let n: number = 0;
    while ((n < nTerms)) {
      f = [...f, newTerm(n, (n - 1))];
      n = (n + 1);
    }
    if ((nTerms > 0)) {
      f[0].a = 2;
    }
    if ((nTerms > 1)) {
      f[1].b = 1;
    }
    return f;
  }
  function cfPi(nTerms: number): Record<string, number>[] {
    let f: Record<string, number>[] = [];
    let n: number = 0;
    while ((n < nTerms)) {
      const g: number = ((2 * n) - 1);
      f = [...f, newTerm(6, (g * g))];
      n = (n + 1);
    }
    if ((nTerms > 0)) {
      f[0].a = 3;
    }
    return f;
  }
  function real(f: Record<string, number>[]): number {
    let r: number = 0.0;
    let i: number = ((Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length) - 1);
    while ((i > 0)) {
      r = (f[i].b / (f[i].a + r));
      i = (i - 1);
    }
    if (((Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length) > 0)) {
      r = (r + f[Math.trunc(0)].a);
    }
    return r;
  }
  function main() {
    console.log(("sqrt2: " + String(real(cfSqrt2(20)))));
    console.log(("nap:   " + String(real(cfNap(20)))));
    console.log(("pi:    " + String(real(cfPi(20)))));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

