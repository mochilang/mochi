// Generated by Mochi v0.10.42 on 2025-07-27 18:45:45 GMT+7

let PI: number = 3.141592653589793;
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 8)) {
    let denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function cosApprox(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n <= 8)) {
    let denom = (((2 * n) - 1) * (2 * n));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function atanApprox(x: number): number {
  if ((x > 1.0)) {
    return ((PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  if ((x < -1.0)) {
    return ((-PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  return (x / (1.0 + ((0.28 * x) * x)));
}
function atan2Approx(y: number, x: number): number {
  if ((x > 0.0)) {
    return atanApprox((y / x));
  }
  if ((x < 0.0)) {
    if ((y >= 0.0)) {
      return (atanApprox((y / x)) + PI);
    }
    return (atanApprox((y / x)) - PI);
  }
  if ((y > 0.0)) {
    return (PI / 2.0);
  }
  if ((y < 0.0)) {
    return (-PI / 2.0);
  }
  return 0.0;
}
function digit(ch: string): number {
  let digits: string = "0123456789";
  let i: number = 0;
  while ((i < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
    if (((digits).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return 0;
}
function parseTwo(s: string, idx: number): number {
  return ((digit((s).substring(idx, (idx + 1))) * 10) + digit((s).substring((idx + 1), (idx + 2))));
}
function parseSec(s: string): number {
  let h: number = parseTwo(s, 0);
  let m: number = parseTwo(s, 3);
  let sec: number = parseTwo(s, 6);
  let tmp: number = ((((h * 60) + m) * 60) + sec);
  return tmp;
}
function pad(n: number): string {
  if ((n < 10)) {
    return ("0" + String(n));
  }
  return String(n);
}
function meanTime(times: string[]): string {
  let ssum: number = 0.0;
  let csum: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(times) || typeof times === 'string' ? times.length : Object.keys(times ?? {}).length))) {
    let sec: number = parseSec(times[i]);
    let ang: number = (((sec * 2.0) * PI) / 86400.0);
    ssum = (ssum + sinApprox(ang));
    csum = (csum + cosApprox(ang));
    i = (i + 1);
  }
  let theta: number = atan2Approx(ssum, csum);
  let frac: number = (theta / (2.0 * PI));
  while ((frac < 0.0)) {
    frac = (frac + 1.0);
  }
  let total: number = (frac * 86400.0);
  let si: number = Math.trunc(total);
  let h: number = Math.trunc(Math.trunc(si / 3600));
  let m: number = Math.trunc(Math.trunc((si % 3600) / 60));
  let s: number = Math.trunc((si % 60));
  return ((((pad(h) + ":") + pad(m)) + ":") + pad(s));
}
function main() {
  let inputs: string[] = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"];
  console.log(meanTime(inputs));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

