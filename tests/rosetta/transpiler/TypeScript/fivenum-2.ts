// Generated by Mochi v0.10.42 on 2025-07-28 07:51:53 GMT+7

function qsel(a: number[], k: number): number {
  let arr: number[] = a;
  while (((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) > 1)) {
    let px: bigint = (_now() % (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length));
    let pv: number = arr[px];
    let last: bigint = ((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
    let tmp: number = arr[px];
    arr[px] = arr[last];
    arr[last] = tmp;
    px = 0;
    let i: number = 0;
    while ((i < Number(last))) {
      let v: number = arr[i];
      if ((v < pv)) {
        let t: number = arr[px];
        arr[px] = arr[i];
        arr[i] = t;
        px = (px + 1);
      }
      i = (i + 1);
    }
    arr[px] = pv;
    if ((Number(px) == k)) {
      return pv;
    }
    if ((k < Number(px))) {
      arr = arr.slice(0, px);
    } else {
      arr = arr.slice((px + 1));
      k = (k - Number((px + 1)));
    }
  }
  return arr[Math.trunc(0)];
}
function fivenum(a: number[]): number[] {
  let last: bigint = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
  let m: bigint = (Number(last) / 2);
  let n5: number[] = [];
  n5.push(qsel(a.slice(0, m), 0));
  n5.push(qsel(a.slice(0, m), Math.trunc((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) / 4)));
  n5.push(qsel(a, m));
  let arr2: number[] = a.slice(m);
  let q3: bigint = ((last - m) - Math.trunc((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) / 4));
  n5.push(qsel(arr2, q3));
  arr2 = arr2.slice(q3);
  n5.push(qsel(arr2, ((Array.isArray(arr2) || typeof arr2 === 'string' ? arr2.length : Object.keys(arr2 ?? {}).length) - 1)));
  return n5;
}
let x1: number[] = [36.0, 40.0, 7.0, 39.0, 41.0, 15.0];
let x2: number[] = [15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0];
let x3: number[] = [0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(_str(fivenum(x1))));
  console.log(_str(_str(fivenum(x2))));
  console.log(_str(_str(fivenum(x3))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

