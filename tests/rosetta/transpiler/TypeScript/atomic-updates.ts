// Generated by Mochi v0.10.42 on 2025-07-27 18:45:39 GMT+7

function randOrder(seed: number, n: number): number[] {
  let next: number = (((seed * 1664525) + 1013904223) % 2147483647);
  return [next, (next % n)];
}
function randChaos(seed: number, n: number): number[] {
  let next: number = (((seed * 1103515245) + 12345) % 2147483647);
  return [next, (next % n)];
}
function main() {
  let nBuckets: number = 10;
  let initialSum: number = 1000;
  let buckets: number[] = [];
  for (let i = 0; i < nBuckets; i++) {
    buckets.push(0);
  }
  let i: number = nBuckets;
  let dist: number = initialSum;
  while ((i > 0)) {
    let v: number = Math.trunc(dist / i);
    i = (i - 1);
    buckets[i] = v;
    dist = (dist - v);
  }
  let tc0: number = 0;
  let tc1: number = 0;
  let total: number = 0;
  let nTicks: number = 0;
  let seedOrder: number = 1;
  let seedChaos: number = 2;
  console.log("sum  ---updates---    mean  buckets");
  let t: number = 0;
  while ((t < 5)) {
    let r: number[] = randOrder(seedOrder, nBuckets);
    seedOrder = r[Math.trunc(0)];
    let b1: number = r[Math.trunc(1)];
    let b2: number = ((b1 + 1) % nBuckets);
    let v1: number = buckets[b1];
    let v2: number = buckets[b2];
    if ((v1 > v2)) {
      let a: number = Math.trunc(Math.trunc((v1 - v2) / 2));
      if ((a > buckets[b1])) {
        a = buckets[b1];
      }
      buckets[b1] = (buckets[b1] - a);
      buckets[b2] = (buckets[b2] + a);
    } else {
      let a: number = Math.trunc(Math.trunc((v2 - v1) / 2));
      if ((a > buckets[b2])) {
        a = buckets[b2];
      }
      buckets[b2] = (buckets[b2] - a);
      buckets[b1] = (buckets[b1] + a);
    }
    tc0 = (tc0 + 1);
    r = randChaos(seedChaos, nBuckets);
    seedChaos = r[Math.trunc(0)];
    b1 = r[Math.trunc(1)];
    b2 = ((b1 + 1) % nBuckets);
    r = randChaos(seedChaos, (buckets[b1] + 1));
    seedChaos = r[Math.trunc(0)];
    let amt: number = r[Math.trunc(1)];
    if ((amt > buckets[b1])) {
      amt = buckets[b1];
    }
    buckets[b1] = (buckets[b1] - amt);
    buckets[b2] = (buckets[b2] + amt);
    tc1 = (tc1 + 1);
    let sum: number = 0;
    let idx: number = 0;
    while ((idx < nBuckets)) {
      sum = (sum + buckets[idx]);
      idx = (idx + 1);
    }
    total = ((total + tc0) + tc1);
    nTicks = (nTicks + 1);
    console.log(((((((((String(sum) + " ") + String(tc0)) + " ") + String(tc1)) + " ") + String(Math.trunc(total / nTicks))) + "  ") + String(buckets)));
    tc0 = 0;
    tc1 = 0;
    t = (t + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

