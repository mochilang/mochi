// Generated by Mochi v0.10.40 on 2025-07-25 21:25:06 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function sqrtApprox(x: number): number {
    let guess: number = x;
    let i: number = 0;
    while ((i < 20)) {
      guess = ((guess + (x / guess)) / 2.0);
      i = (i + 1);
    }
    return guess;
  }
  function cholesky(a: number[][]): number[][] {
    const n: number = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
    let l: number[][] = [];
    let i: number = 0;
    while ((i < n)) {
      let row: number[] = [];
      let j: number = 0;
      while ((j < n)) {
        row = [...row, 0.0];
        j = (j + 1);
      }
      l = [...l, row];
      i = (i + 1);
    }
    i = 0;
    while ((i < n)) {
      let j: number = 0;
      while ((j <= i)) {
        let sum: number = a[i][j];
        let k: number = 0;
        while ((k < j)) {
          sum = (sum - (l[i][k] * l[j][k]));
          k = (k + 1);
        }
        if ((i == j)) {
          l[i][j] = sqrtApprox(sum);
        } else {
          l[i][j] = (sum / l[j][j]);
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    return l;
  }
  function printMat(m: number[][]) {
    let i: number = 0;
    while ((i < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
      let line: string = "";
      let j: number = 0;
      while ((j < (Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length))) {
        line = (line + String(m[i][j]));
        if ((j < ((Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length) - 1))) {
          line = (line + " ");
        }
        j = (j + 1);
      }
      console.log(line);
      i = (i + 1);
    }
  }
  function demo(a: number[][]) {
    console.log("A:");
    printMat(a);
    const l: number[][] = cholesky(a);
    console.log("L:");
    printMat(l);
  }
  demo([[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]]);
  demo([[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]]);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

