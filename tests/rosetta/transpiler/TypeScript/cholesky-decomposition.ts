// Generated by Mochi v0.10.38 on 2025-07-23 20:16:13 GMT+7

function sqrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function cholesky(a: number[][]): number[][] {
  const n: number = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
  let l: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < n)) {
      row = [...row, 0.0];
      j = (j + 1);
    }
    l = [...l, row];
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j <= i)) {
      let sum: number = a[i][j];
      let k: number = 0;
      while ((k < j)) {
        sum = (sum - (l[i][k] * l[j][k]));
        k = (k + 1);
      }
      if ((i == j)) {
        l[i][j] = sqrtApprox(sum);
      } else {
        l[i][j] = (sum / l[j][j]);
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return l;
}
function printMat(m: number[][]) {
  let i: number = 0;
  while ((i < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
    let line: string = "";
    let j: number = 0;
    while ((j < (Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length))) {
      line = (line + String(m[i][j]));
      if ((j < ((Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length) - 1))) {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(line);
    i = (i + 1);
  }
}
function demo(a: number[][]) {
  console.log("A:");
  printMat(a);
  const l: number[][] = cholesky(a);
  console.log("L:");
  printMat(l);
}
demo([[25.0, 15.0, -5.0], [15.0, 18.0, 0.0], [-5.0, 0.0, 11.0]]);
demo([[18.0, 22.0, 54.0, 42.0], [22.0, 70.0, 86.0, 62.0], [54.0, 86.0, 174.0, 134.0], [42.0, 62.0, 134.0, 106.0]]);
