// Generated by Mochi v0.10.42 on 2025-07-28 01:00:31 GMT+7

function makeInf(): number {
  let x: number = 1.0;
  let i: number = 0;
  while ((i < 400)) {
    x = (x * 10.0);
    i = (i + 1);
  }
  return x;
}
function makeMax(): number {
  let x: number = 1.0;
  let i: number = 0;
  while ((i < 308)) {
    x = (x * 10.0);
    i = (i + 1);
  }
  return x;
}
function isNaN(x: number): boolean {
  return (x != x);
}
function validateNaN(n: number, op: string) {
  if (isNaN(n)) {
    console.log(_str((op + " -> NaN")));
  } else {
    console.log(_str("!!! Expected NaN from") + " " + _str(op) + " " + _str(" Found") + " " + _str(n));
  }
}
function validateZero(n: number, op: string) {
  if ((n == 0)) {
    console.log(_str((op + " -> 0")));
  } else {
    console.log(_str("!!! Expected 0 from") + " " + _str(op) + " " + _str(" Found") + " " + _str(n));
  }
}
function validateGT(a: number, b: number, op: string) {
  if ((a > b)) {
    console.log(_str(op));
  } else {
    console.log(_str("!!! Expected") + " " + _str(op) + " " + _str(" Found not true."));
  }
}
function validateNE(a: number, b: number, op: string) {
  if ((a == b)) {
    console.log(_str("!!! Expected") + " " + _str(op) + " " + _str(" Found not true."));
  } else {
    console.log(_str(op));
  }
}
function validateEQ(a: number, b: number, op: string) {
  if ((a == b)) {
    console.log(_str(op));
  } else {
    console.log(_str("!!! Expected") + " " + _str(op) + " " + _str(" Found not true."));
  }
}
function main() {
  let negZero: number = -0.0;
  let posInf: number = makeInf();
  let negInf: number = -posInf;
  let nan: number = (posInf / posInf);
  let maxVal: number = makeMax();
  console.log(_str(negZero) + " " + _str(posInf) + " " + _str(negInf) + " " + _str(nan));
  console.log(_str(negZero) + " " + _str(posInf) + " " + _str(negInf) + " " + _str(nan));
  console.log(_str(""));
  validateNaN((negInf + posInf), "-Inf + Inf");
  validateNaN((0.0 * posInf), "0 * Inf");
  validateNaN((posInf / posInf), "Inf / Inf");
  validateNaN((posInf % 1.0), "Inf % 1");
  validateNaN((1.0 + nan), "1 + NaN");
  validateZero((1.0 / posInf), "1 / Inf");
  validateGT(posInf, maxVal, "Inf > max value");
  validateGT(-maxVal, negInf, "-Inf < max neg value");
  validateNE(nan, nan, "NaN != NaN");
  validateEQ(negZero, 0.0, "-0 == 0");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

