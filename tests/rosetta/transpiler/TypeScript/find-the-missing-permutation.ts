// Generated by Mochi v0.10.41 on 2025-07-27 11:41:55 GMT+7

let given: string[] = ["ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"];
function idx(ch: string): number {
  if ((ch == "A")) {
    return 0;
  }
  if ((ch == "B")) {
    return 1;
  }
  if ((ch == "C")) {
    return 2;
  }
  return 3;
}
function main() {
  let res: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(given[Math.trunc(0)]) || typeof given[Math.trunc(0)] === 'string' ? given[Math.trunc(0)].length : Object.keys(given[Math.trunc(0)] ?? {}).length))) {
    let counts: number[] = [0, 0, 0, 0];
    for (const p of given) {
      let ch: string = (p).substring(i, (i + 1));
      let j: number = idx(ch);
      counts[j] = (counts[j] + 1);
    }
    let j: number = 0;
    while ((j < 4)) {
      if (((counts[j] % 2) == 1)) {
        if ((j == 0)) {
          res = (res + "A");
        } else {
          if ((j == 1)) {
            res = (res + "B");
          } else {
            if ((j == 2)) {
              res = (res + "C");
            } else {
              res = (res + "D");
            }
          }
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  console.log(res);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

