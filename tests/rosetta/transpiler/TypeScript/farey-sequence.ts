// Generated by Mochi v0.10.42 on 2025-07-28 01:01:06 GMT+7

export interface Frac { num: number; den: number }
function fracStr(f: Frac): string {
  return ((_str(f.num) + "/") + _str(f.den));
}
function gen(l: Frac, r: Frac, n: number, acc: Frac[]): Frac[] {
  let m: Frac = {"num": (l.num + r.num), "den": (l.den + r.den)};
  if ((m.den <= n)) {
    acc = gen(l, m, n, acc);
    acc.push(m);
    acc = gen(m, r, n, acc);
  }
  return acc;
}
function totient(n: number): number {
  let tot: number = n;
  let nn: number = n;
  let p: number = 2;
  while (((p * p) <= nn)) {
    if (((nn % p) == 0)) {
      while (((nn % p) == 0)) {
        nn = Math.trunc(nn / p);
      }
      tot = (tot - Math.trunc(tot / p));
    }
    if ((p == 2)) {
      p = 1;
    }
    p = (p + 2);
  }
  if ((nn > 1)) {
    tot = (tot - Math.trunc(tot / nn));
  }
  return tot;
}
function main() {
  let n: number = 1;
  while ((n <= 11)) {
    let l: Frac = {"num": 0, "den": 1};
    let r: Frac = {"num": 1, "den": 1};
    let seq: Frac[] = gen(l, r, n, []);
    let line: string = ((("F(" + _str(n)) + "): ") + fracStr(l));
    for (const f of seq) {
      line = ((line + " ") + fracStr(f));
    }
    line = ((line + " ") + fracStr(r));
    console.log(_str(line));
    n = (n + 1);
  }
  let sum: number = 1;
  let i: number = 1;
  let next: number = 100;
  while ((i <= 1000)) {
    sum = (sum + totient(i));
    if ((i == next)) {
      console.log(_str(((("|F(" + _str(i)) + ")|: ") + _str(sum))));
      next = (next + 100);
    }
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

