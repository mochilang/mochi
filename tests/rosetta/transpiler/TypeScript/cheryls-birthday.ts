// Generated by Mochi v0.10.40 on 2025-07-25 21:25:02 GMT+7

export interface Birthday { month: number; day: number }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function monthUnique(b: Birthday, list: Birthday[]): boolean {
    let c: number = 0;
    for (const x of list) {
      if ((x.month == b.month)) {
        c = (c + 1);
      }
    }
    return (c == 1);
  }
  function dayUnique(b: Birthday, list: Birthday[]): boolean {
    let c: number = 0;
    for (const x of list) {
      if ((x.day == b.day)) {
        c = (c + 1);
      }
    }
    return (c == 1);
  }
  function monthWithUniqueDay(b: Birthday, list: Birthday[]): boolean {
    for (const x of list) {
      if (((x.month == b.month) && dayUnique(x, list))) {
        return true;
      }
    }
    return false;
  }
  function bstr(b: Birthday): string {
    const months: string[] = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    return ((months[Math.trunc(b.month)] + " ") + String(b.day));
  }
  let choices: Birthday[] = [{"month": 5, "day": 15}, {"month": 5, "day": 16}, {"month": 5, "day": 19}, {"month": 6, "day": 17}, {"month": 6, "day": 18}, {"month": 7, "day": 14}, {"month": 7, "day": 16}, {"month": 8, "day": 14}, {"month": 8, "day": 15}, {"month": 8, "day": 17}];
  let filtered: Birthday[] = [];
  for (const bd of choices) {
    if (!monthUnique(bd, choices)) {
      filtered = [...filtered, bd];
    }
  }
  let filtered2: Birthday[] = [];
  for (const bd of filtered) {
    if (!monthWithUniqueDay(bd, filtered)) {
      filtered2 = [...filtered2, bd];
    }
  }
  let filtered3: Birthday[] = [];
  for (const bd of filtered2) {
    if (dayUnique(bd, filtered2)) {
      filtered3 = [...filtered3, bd];
    }
  }
  let filtered4: Birthday[] = [];
  for (const bd of filtered3) {
    if (monthUnique(bd, filtered3)) {
      filtered4 = [...filtered4, bd];
    }
  }
  if (((Array.isArray(filtered4) || typeof filtered4 === 'string' ? filtered4.length : Object.keys(filtered4 ?? {}).length) == 1)) {
    console.log(("Cheryl's birthday is " + bstr(filtered4[Math.trunc(0)])));
  } else {
    console.log("Something went wrong!");
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

