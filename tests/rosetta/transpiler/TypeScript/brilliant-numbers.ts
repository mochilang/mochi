// Generated by Mochi v0.10.40 on 2025-07-26 05:52:57 GMT+7

function primesUpTo(n: number): number[] {
  let sieve: boolean[] = [];
  let i: number = 0;
  while ((i <= n)) {
    sieve.push(true);
    i = (i + 1);
  }
  let p: number = 2;
  while (((p * p) <= n)) {
    if (sieve[p]) {
      let m: number = (p * p);
      while ((m <= n)) {
        sieve[m] = false;
        m = (m + p);
      }
    }
    p = (p + 1);
  }
  let res: number[] = [];
  let x: number = 2;
  while ((x <= n)) {
    if (sieve[x]) {
      res.push(x);
    }
    x = (x + 1);
  }
  return res;
}
function sortInts(xs: number[]): number[] {
  let res: number[] = [];
  let tmp: number[] = xs;
  while (((Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length) > 0)) {
    let min: number = tmp[Math.trunc(0)];
    let idx: number = 0;
    let i: number = 1;
    while ((i < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = (i + 1);
    }
    res.push(min);
    let out: number[] = [];
    let j: number = 0;
    while ((j < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
      if ((j != idx)) {
        out.push(tmp[j]);
      }
      j = (j + 1);
    }
    tmp = out;
  }
  return res;
}
function commatize(n: number): string {
  let s: string = String(n);
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3);
  while ((i >= 1)) {
    s = ((s.slice(0, i) + ",") + s.slice(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
    i = (i - 3);
  }
  return s;
}
let primes: number[] = primesUpTo(3200000);
function getBrilliant(digits: number, limit: number, countOnly: boolean): Record<string, any> {
  let brilliant: number[] = [];
  let count: number = 0;
  let pow: number = 1;
  let next: number = 999999999999999;
  let k: number = 1;
  while ((k <= digits)) {
    let s: number[] = [];
    for (const p of primes) {
      if ((p >= (pow * 10))) {
        break
      }
      if ((p > pow)) {
        s.push(p);
      }
    }
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      let j: number = i;
      while ((j < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
        let prod: number = (s[i] * s[j]);
        if ((prod < limit)) {
          if (countOnly) {
            count = (count + 1);
          } else {
            brilliant.push(prod);
          }
        } else {
          if ((prod < next)) {
            next = prod;
          }
          break
        }
        j = (j + 1);
      }
      i = (i + 1);
    }
    pow = (pow * 10);
    k = (k + 1);
  }
  if (countOnly) {
    return {"bc": count, next};
  }
  return {"bc": brilliant, next};
}
function main() {
  console.log("First 100 brilliant numbers:");
  let r: Record<string, any> = getBrilliant(2, 10000, false);
  let br: number[] = sortInts(r.bc);
  br = br.slice(0, 100);
  let i: number = 0;
  while ((i < (Array.isArray(br) || typeof br === 'string' ? br.length : Object.keys(br ?? {}).length))) {
    _stdout_write((String(String(br[i])).padStart(4, " ") + " "));
    if ((((i + 1) % 10) == 0)) {
      console.log("");
    }
    i = (i + 1);
  }
  console.log("");
  let k: number = 1;
  while ((k <= 13)) {
    let limit = Math.pow(10, k);
    let r2: Record<string, any> = getBrilliant(k, limit, true);
    let total = r2.bc;
    let next = r2.next;
    let climit: string = commatize(limit);
    let ctotal = commatize((total + 1));
    let cnext: string = commatize(next);
    console.log(((((("First >= " + String(climit).padStart(18, " ")) + " is ") + String(ctotal).padStart(14, " ")) + " in the series: ") + String(cnext).padStart(18, " ")));
    k = (k + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

