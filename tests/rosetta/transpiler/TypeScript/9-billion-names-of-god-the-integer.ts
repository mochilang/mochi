// Generated by Mochi v0.10.40 on 2025-07-25 14:34:12 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function bigTrim(a: number[]): number[] {
    let n: number = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
    while (((n > 1) && (a[Math.trunc((n - 1))] == 0))) {
      a = a.slice(0, (n - 1));
      n = (n - 1);
    }
    return a;
  }
  function bigFromInt(x: number): number[] {
    if ((x == 0)) {
      return [0];
    }
    let digits: number[] = [];
    let n: number = x;
    while ((n > 0)) {
      digits = [...digits, (n % 10)];
      n = Math.trunc(n / 10);
    }
    return digits;
  }
  function bigAdd(a: number[], b: number[]): number[] {
    let res: number[] = [];
    let carry: number = 0;
    let i: number = 0;
    while ((((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length)) || (i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) || (carry > 0))) {
      let av: number = 0;
      if ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
        av = a[i];
      }
      let bv: number = 0;
      if ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
        bv = b[i];
      }
      let s: number = ((av + bv) + carry);
      res = [...res, (s % 10)];
      carry = (s / 10);
      i = (i + 1);
    }
    return bigTrim(res);
  }
  function bigSub(a: number[], b: number[]): number[] {
    let res: number[] = [];
    let borrow: number = 0;
    let i: number = 0;
    while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
      let av: number = a[i];
      let bv: number = 0;
      if ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
        bv = b[i];
      }
      let diff: number = ((av - bv) - borrow);
      if ((diff < 0)) {
        diff = (diff + 10);
        borrow = 1;
      } else {
        borrow = 0;
      }
      res = [...res, diff];
      i = (i + 1);
    }
    return bigTrim(res);
  }
  function bigToString(a: number[]): string {
    let s: string = "";
    let i: number = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
    while ((i >= 0)) {
      s = (s + String(a[i]));
      i = (i - 1);
    }
    return s;
  }
  function minInt(a: number, b: number): number {
    if ((a < b)) {
      return a;
    } else {
      return b;
    }
  }
  function cumu(n: number): number[][] {
    let cache: number[][][] = [[bigFromInt(1)]];
    let y: number = 1;
    while ((y <= n)) {
      let row: number[][] = [bigFromInt(0)];
      let x: number = 1;
      while ((x <= y)) {
        const val: number[] = cache[Math.trunc((y - x))][Math.trunc(minInt(x, (y - x)))];
        row = [...row, bigAdd(row[Math.trunc(((Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length) - 1))], val)];
        x = (x + 1);
      }
      cache = [...cache, row];
      y = (y + 1);
    }
    return cache[n];
  }
  function row(n: number): string[] {
    const e: number[][] = cumu(n);
    let out: string[] = [];
    let i: number = 0;
    while ((i < n)) {
      const diff: number[] = bigSub(e[Math.trunc((i + 1))], e[i]);
      out = [...out, bigToString(diff)];
      i = (i + 1);
    }
    return out;
  }
  console.log("rows:");
  let x: number = 1;
  while ((x < 11)) {
    const r: string[] = row(x);
    let line: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length))) {
      line = (((line + " ") + r[i]) + " ");
      i = (i + 1);
    }
    console.log(line);
    x = (x + 1);
  }
  console.log("");
  console.log("sums:");
  for (const num of [23, 123, 1234]) {
    const r: string[] = cumu(num);
    console.log(((String(num) + " ") + bigToString(r[Math.trunc(((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) - 1))])));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

