// Generated by Mochi v0.10.37 on 2025-07-22 23:17:31 GMT+7

function bigTrim(a: number[]): number[] {
  let n = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
  while (((n > 1) && (a[(n - 1)] == 0))) {
    a = a.slice(0, (n - 1));
    n = (n - 1);
  }
  return a;
}
function bigFromInt(x: number): number[] {
  if ((x == 0)) {
    return [0];
  }
  let digits = [];
  let n = x;
  while ((n > 0)) {
    digits = [...digits, (n % 10)];
    n = (n / 10);
  }
  return digits;
}
function bigAdd(a: number[], b: number[]): number[] {
  let res = [];
  let carry = 0;
  let i = 0;
  while ((((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length)) || (i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) || (carry > 0))) {
    let av = 0;
    if ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
      av = a[i];
    }
    let bv = 0;
    if ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
      bv = b[i];
    }
    let s = ((av + bv) + carry);
    res = [...res, (s % 10)];
    carry = (s / 10);
    i = (i + 1);
  }
  return bigTrim(res);
}
function bigSub(a: number[], b: number[]): number[] {
  let res = [];
  let borrow = 0;
  let i = 0;
  while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    let av = a[i];
    let bv = 0;
    if ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
      bv = b[i];
    }
    let diff = ((av - bv) - borrow);
    if ((diff < 0)) {
      diff = (diff + 10);
      borrow = 1;
    } else {
      borrow = 0;
    }
    res = [...res, diff];
    i = (i + 1);
  }
  return bigTrim(res);
}
function bigToString(a: number[]): string {
  let s = "";
  let i = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
  while ((i >= 0)) {
    s = (s + String(a[i]));
    i = (i - 1);
  }
  return s;
}
function minInt(a: number, b: number): number {
  if ((a < b)) {
    return a;
  } else {
    return b;
  }
}
function cumu(n: number): number[][] {
  let cache = [[bigFromInt(1)]];
  let y = 1;
  while ((y <= n)) {
    let row = [bigFromInt(0)];
    let x: number = 1;
    while ((x <= y)) {
      const val = cache[(y - x)][minInt(x, (y - x))];
      row = [...row, bigAdd(row[((Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length) - 1)], val)];
      x = (x + 1);
    }
    cache = [...cache, row];
    y = (y + 1);
  }
  return cache[n];
}
function row(n: number): string[] {
  const e = cumu(n);
  let out = [];
  let i = 0;
  while ((i < n)) {
    const diff = bigSub(e[(i + 1)], e[i]);
    out = [...out, bigToString(diff)];
    i = (i + 1);
  }
  return out;
}
console.log("rows:");
let x: number = 1;
while ((x < 11)) {
  const r = row(x);
  let line = "";
  let i = 0;
  while ((i < (Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length))) {
    line = (((line + " ") + r[i]) + " ");
    i = (i + 1);
  }
  console.log(line);
  x = (x + 1);
}
console.log("");
console.log("sums:");
for (const num of [23, 123, 1234]) {
  const r = cumu(num);
  console.log(((String(num) + " ") + bigToString(r[((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) - 1)])));
}
