// Generated by Mochi v0.10.42 on 2025-07-28 08:02:02 GMT+7

function pow_int(base: number, exp: number): number {
  let result: number = 1;
  let b: number = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = (result * b);
    }
    b = (b * b);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
function pow_big(base: bigint, exp: number): bigint {
  let result: bigint = 1n;
  let b: bigint = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = (result * b);
    }
    b = (b * b);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
function parseBigInt(str: string): bigint {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && ((str).substring(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: bigint = 0n;
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    let ch = (str).substring(i, (i + 1));
    let d: number = Math.trunc(ch);
    n = (BigInt((n * 10n)) + BigInt(d));
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function fermat(n: number): bigint {
  let p: number = pow_int(2, n);
  return (pow_big(2n, p) + 1n);
}
function primeFactorsBig(n: bigint): bigint[] {
  let factors: bigint[] = [];
  let m: bigint = n;
  let d: bigint = 2n;
  while (((m % d) == 0)) {
    factors.push(d);
    m = (m / d);
  }
  d = 3n;
  while ((BigInt((d * d)) <= m)) {
    while (((m % d) == 0)) {
      factors.push(d);
      m = (m / d);
    }
    d = (d + BigInt(2));
  }
  if ((m > BigInt(1))) {
    factors.push(m);
  }
  return factors;
}
function show_list(xs: bigint[]): string {
  let line: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    line = (line + _str(xs[i]));
    if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
      line = (line + " ");
    }
    i = (i + 1);
  }
  return line;
}
function main() {
  let nums: bigint[] = [];
  for (let i = 0; i < 8; i++) {
    nums.push(fermat(i));
  }
  console.log(_str("First 8 Fermat numbers:"));
  for (const n of nums) {
    console.log(_str(_str(n)));
  }
  let extra: Record<number, bigint[]> = {[6]: [274177n, 67280421310721n], [7]: [parseBigInt("59649589127497217"), parseBigInt("5704689200685129054721")]};
  console.log(_str("\nFactors:"));
  let i: number = 0;
  while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    let facs: bigint[] = [];
    if ((i <= 5)) {
      facs = primeFactorsBig(nums[i]);
    } else {
      facs = extra[i];
    }
    console.log(_str(((("F" + _str(i)) + " = ") + show_list(facs))));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

