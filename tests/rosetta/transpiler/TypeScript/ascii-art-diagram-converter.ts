// Generated by Mochi v0.10.42 on 2025-07-27 18:45:32 GMT+7

function main() {
  console.log("Diagram after trimming whitespace and removal of blank lines:\n");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|                      ID                       |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|                    QDCOUNT                    |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|                    ANCOUNT                    |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|                    NSCOUNT                    |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("|                    ARCOUNT                    |");
  console.log("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
  console.log("\nDecoded:\n");
  console.log("Name     Bits  Start  End");
  console.log("=======  ====  =====  ===");
  console.log("ID        16      0    15");
  console.log("QR         1     16    16");
  console.log("Opcode     4     17    20");
  console.log("AA         1     21    21");
  console.log("TC         1     22    22");
  console.log("RD         1     23    23");
  console.log("RA         1     24    24");
  console.log("Z          3     25    27");
  console.log("RCODE      4     28    31");
  console.log("QDCOUNT   16     32    47");
  console.log("ANCOUNT   16     48    63");
  console.log("NSCOUNT   16     64    79");
  console.log("ARCOUNT   16     80    95");
  console.log("\nTest string in hex:");
  console.log("78477bbf5496e12e1bf169a4");
  console.log("\nTest string in binary:");
  console.log("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100");
  console.log("\nUnpacked:\n");
  console.log("Name     Size  Bit pattern");
  console.log("=======  ====  ================");
  console.log("ID        16   0111100001000111");
  console.log("QR         1   0");
  console.log("Opcode     4   1111");
  console.log("AA         1   0");
  console.log("TC         1   1");
  console.log("RD         1   1");
  console.log("RA         1   1");
  console.log("Z          3   011");
  console.log("RCODE      4   1111");
  console.log("QDCOUNT   16   0101010010010110");
  console.log("ANCOUNT   16   1110000100101110");
  console.log("NSCOUNT   16   0001101111110001");
  console.log("ARCOUNT   16   0110100110100100");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

