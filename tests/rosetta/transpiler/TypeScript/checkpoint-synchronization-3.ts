// Generated by Mochi v0.10.42 on 2025-07-27 20:34:01 GMT+7

function lower(ch: string): string {
  let up: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let low: string = "abcdefghijklmnopqrstuvwxyz";
  let i: number = 0;
  while ((i < (Array.isArray(up) || typeof up === 'string' ? up.length : Object.keys(up ?? {}).length))) {
    if ((ch == (up).substring(i, (i + 1)))) {
      return (low).substring(i, (i + 1));
    }
    i = (i + 1);
  }
  return ch;
}
let partList: string[] = ["A", "B", "C", "D"];
let nAssemblies: number = 3;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  for (const p of partList) {
    console.log((p + " worker running"));
  }
  for (let cycle = 1; cycle < (nAssemblies + 1); cycle++) {
    console.log(("begin assembly cycle " + String(cycle)));
    let a: string = "";
    for (const p of partList) {
      console.log((p + " worker begins part"));
      console.log(((p + " worker completed ") + p.toLowerCase()));
      a = (a + p.toLowerCase());
    }
    console.log((((a + " assembled.  cycle ") + String(cycle)) + " complete"));
  }
  for (const p of partList) {
    console.log((p + " worker stopped"));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

