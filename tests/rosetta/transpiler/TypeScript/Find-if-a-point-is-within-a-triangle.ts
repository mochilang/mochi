// Generated by Mochi v0.10.42 on 2025-07-28 10:39:56 GMT+7

function sign(px: number, py: number, ax: number, ay: number, bx: number, by: number): number {
  return (((px - bx) * (ay - by)) - ((ax - bx) * (py - by)));
}
function pointInTriangle(px: number, py: number, ax: number, ay: number, bx: number, by: number, cx: number, cy: number): boolean {
  let d1: number = sign(px, py, ax, ay, bx, by);
  let d2: number = sign(px, py, bx, by, cx, cy);
  let d3: number = sign(px, py, cx, cy, ax, ay);
  let hasNeg: boolean = (((d1 < 0.0) || (d2 < 0.0)) || (d3 < 0.0));
  let hasPos: boolean = (((d1 > 0.0) || (d2 > 0.0)) || (d3 > 0.0));
  return !(hasNeg && hasPos);
}
let points: number[][] = [[0.0, 0.0], [0.0, 1.0], [3.0, 1.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  let tri1: number[][] = [[(3.0 / 2.0), (12.0 / 5.0)], [(51.0 / 10.0), (-31.0 / 10.0)], [(-19.0 / 5.0), 1.2]];
  console.log(_str("Triangle is") + " " + _str("[" + (tri1).join(' ') + "]"));
  let ax: number = tri1[Math.trunc(0)][Math.trunc(0)];
  let ay: number = tri1[Math.trunc(0)][Math.trunc(1)];
  let bx: number = tri1[Math.trunc(1)][Math.trunc(0)];
  let by: number = tri1[Math.trunc(1)][Math.trunc(1)];
  let cx: number = tri1[Math.trunc(2)][Math.trunc(0)];
  let cy: number = tri1[Math.trunc(2)][Math.trunc(1)];
  for (const p of points) {
    let inside: boolean = pointInTriangle(p[Math.trunc(0)], p[Math.trunc(1)], ax, ay, bx, by, cx, cy);
    console.log(_str("Point") + " " + _str("[" + (p).join(' ') + "]") + " " + _str("is within triangle?") + " " + _str(inside));
  }
  console.log(_str(""));
  let tri2: number[][] = [[(1.0 / 10.0), (1.0 / 9.0)], [(100.0 / 8.0), (100.0 / 3.0)], [(100.0 / 4.0), (100.0 / 9.0)]];
  console.log(_str("Triangle is") + " " + _str("[" + (tri2).join(' ') + "]"));
  ax = tri2[Math.trunc(0)][Math.trunc(0)];
  ay = tri2[Math.trunc(0)][Math.trunc(1)];
  bx = tri2[Math.trunc(1)][Math.trunc(0)];
  by = tri2[Math.trunc(1)][Math.trunc(1)];
  cx = tri2[Math.trunc(2)][Math.trunc(0)];
  cy = tri2[Math.trunc(2)][Math.trunc(1)];
  let x: number = (ax + ((3.0 / 7.0) * (bx - ax)));
  let y: number = (ay + ((3.0 / 7.0) * (by - ay)));
  let pt: number[] = [x, y];
  let inside: boolean = pointInTriangle(x, y, ax, ay, bx, by, cx, cy);
  console.log(_str("Point") + " " + _str("[" + (pt).join(' ') + "]") + " " + _str("is within triangle ?") + " " + _str(inside));
  console.log(_str(""));
  let tri3: number[][] = [[(1.0 / 10.0), (1.0 / 9.0)], [(100.0 / 8.0), (100.0 / 3.0)], [(-100.0 / 8.0), (100.0 / 6.0)]];
  console.log(_str("Triangle is") + " " + _str("[" + (tri3).join(' ') + "]"));
  cx = tri3[Math.trunc(2)][Math.trunc(0)];
  cy = tri3[Math.trunc(2)][Math.trunc(1)];
  inside = pointInTriangle(x, y, ax, ay, bx, by, cx, cy);
  console.log(_str("Point") + " " + _str("[" + (pt).join(' ') + "]") + " " + _str("is within triangle ?") + " " + _str(inside));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

