// Generated by Mochi v0.10.40 on 2025-07-26 00:24:12 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function listToStringInts(xs: number[]): string {
    let s: string = "[";
    let i: number = 0;
    while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      s = (s + String(Math.trunc(xs[i])));
      if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
        s = (s + " ");
      }
      i = (i + 1);
    }
    return (s + "]");
  }
  function deconv(g: number[], f: number[]): number[] {
    let h: number[] = [];
    let n: number = 0;
    let hn: number = (((Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length) - (Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length)) + 1);
    while ((n < hn)) {
      let v: number = g[n];
      let lower: number = 0;
      if ((n >= (Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length))) {
        lower = ((n - (Array.isArray(f) || typeof f === 'string' ? f.length : Object.keys(f ?? {}).length)) + 1);
      }
      let i = lower;
      while ((i < n)) {
        v = (v - (h[i] * f[Math.trunc((n - i))]));
        i = (i + 1);
      }
      v = (v / f[Math.trunc(0)]);
      h = [...h, v];
      n = (n + 1);
    }
    return h;
  }
  function main() {
    let h: number[] = [-8.0, -9.0, -3.0, -1.0, -6.0, 7.0];
    let f: number[] = [-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0];
    let g: number[] = [24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0];
    console.log(listToStringInts(h));
    console.log(listToStringInts(deconv(g, f)));
    console.log(listToStringInts(f));
    console.log(listToStringInts(deconv(g, h)));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

