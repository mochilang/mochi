// Generated by Mochi v0.10.41 on 2025-07-27 11:34:28 GMT+7

export interface If2 { cond1: boolean; cond2: boolean }
function else1(i: If2, f): If2 {
  if ((i.cond1 && (i.cond2 == false))) {
    f();
  }
  return i;
}
function else2(i: If2, f): If2 {
  if ((i.cond2 && (i.cond1 == false))) {
    f();
  }
  return i;
}
function else0(i: If2, f): If2 {
  if (((i.cond1 == false) && (i.cond2 == false))) {
    f();
  }
  return i;
}
function if2(cond1: boolean, cond2: boolean, f): If2 {
  if ((cond1 && cond2)) {
    f();
  }
  return {cond1, cond2};
}
let a: number = 0;
let b: number = 1;
let t: If2 = if2((a == 1), (b == 3), () => {
console.log("a = 1 and b = 3");
});
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  t = else1(t, () => {
console.log("a = 1 and b <> 3");
});
  t = else2(t, () => {
console.log("a <> 1 and b = 3");
});
  else0(t, () => {
console.log("a <> 1 and b <> 3");
});
  a = 1;
  b = 0;
  t = if2((a == 1), (b == 3), () => {
console.log("a = 1 and b = 3");
});
  t = else0(t, () => {
console.log("a <> 1 and b <> 3");
});
  else1(t, () => {
console.log("a = 1 and b <> 3");
});
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

