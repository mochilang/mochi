// Generated by Mochi v0.10.42 on 2025-07-28 00:38:53 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function floorf(x: number): number {
  let y: number = Math.trunc(x);
  return y;
}
function powf(base: number, exp: number): number {
  let r: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    r = (r * base);
    i = (i + 1);
  }
  return r;
}
function fmtF(x: number, width: number, prec: number): string {
  let factor: number = powf(10.0, prec);
  let y: number = (floorf(((x * factor) + 0.5)) / factor);
  let s: string = String(y);
  let dot: number = s.indexOf(".");
  if ((dot == (0 - 1))) {
    s = (s + ".");
    let j: number = 0;
    while ((j < prec)) {
      s = (s + "0");
      j = (j + 1);
    }
  } else {
    let decs: bigint = (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - dot) - 1);
    while ((decs < prec)) {
      s = (s + "0");
      decs = (decs + 1);
    }
  }
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function expf(x: number): number {
  if ((x < 0.0)) {
    return (1.0 / expf(-x));
  }
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = 1;
  while ((i < 20)) {
    term = ((term * x) / i);
    sum = (sum + term);
    i = (i + 1);
  }
  return sum;
}
function eulerStep(f, x: number, y: number, h: number): number {
  return (y + (h * f(x, y)));
}
function newCoolingRate(k: number) {
  return (dt) => {
return (-k * dt);
};
}
function newTempFunc(k: number, ambient: number, initial: number) {
  return (t) => {
return (ambient + ((initial - ambient) * expf((-k * t))));
};
}
function newCoolingRateDy(k: number, ambient: number) {
  let cr = newCoolingRate(k);
  return (_x, obj) => {
return cr((obj - ambient));
};
}
function main() {
  let k: number = 0.07;
  let tempRoom: number = 20.0;
  let tempObject: number = 100.0;
  let fcr = newCoolingRateDy(k, tempRoom);
  let analytic = newTempFunc(k, tempRoom, tempObject);
  for (const step of [2.0, 5.0, 10.0]) {
    console.log(("Step size = " + fmtF(step, 0, 1)));
    console.log(" Time Euler's Analytic");
    let temp: number = tempObject;
    let time: number = 0.0;
    while ((time <= 100.0)) {
      let line: string = ((((fmtF(time, 5, 1) + " ") + fmtF(temp, 7, 3)) + " ") + fmtF(analytic(time), 7, 3));
      console.log(line);
      temp = eulerStep(fcr, time, temp, step);
      time = (time + step);
    }
    console.log("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

