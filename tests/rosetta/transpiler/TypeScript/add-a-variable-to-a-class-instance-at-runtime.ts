// Generated by Mochi v0.10.37 on 2025-07-23 12:59:48 GMT+7

let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
export interface SomeStruct { runtimeFields: Record<string, string> }
function main() {
  let ss: SomeStruct = {"runtimeFields": {}};
  console.log("Create two fields at runtime: \n");
  let i: number = 1;
  while ((i <= 2)) {
    console.log((("  Field #" + String(i)) + ":\n"));
    console.log("       Enter name  : ");
    const name: string = _input();
    console.log("       Enter value : ");
    const value: string = _input();
    let fields: Record<string, string> = ss.runtimeFields;
    fields[name] = value;
    ss = ({ ...ss, "runtimeFields": fields });
    console.log("\n");
    i = (i + 1);
  }
  while (true) {
    console.log("Which field do you want to inspect ? ");
    const name: string = _input();
    if ((name in ss.runtimeFields)) {
      const value: string = ss.runtimeFields[name];
      console.log((("Its value is '" + value) + "'"));
      return;
    } else {
      console.log("There is no field of that name, try again\n");
    }
  }
}
main();
