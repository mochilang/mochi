// Generated by Mochi v0.10.41 on 2025-07-27 11:09:03 GMT+7

function commatize(n: number): string {
  let s: string = String(n);
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3);
  while ((i >= 1)) {
    s = ((s.slice(0, i) + ",") + s.slice(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
    i = (i - 3);
  }
  return s;
}
function primeSieve(n: number): boolean[] {
  let sieve: boolean[] = [];
  let i: number = 0;
  while ((i <= n)) {
    sieve.push(false);
    i = (i + 1);
  }
  sieve[0] = true;
  sieve[1] = true;
  let p: number = 2;
  while (((p * p) <= n)) {
    if (!sieve[p]) {
      let m: number = (p * p);
      while ((m <= n)) {
        sieve[m] = true;
        m = (m + p);
      }
    }
    p = (p + 1);
  }
  return sieve;
}
function search(xs: number[], target: number): number {
  let low: number = 0;
  let high: number = (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length);
  while ((low < high)) {
    let mid: number = Math.trunc((low + high) / 2);
    if ((xs[mid] < target)) {
      low = (mid + 1);
    } else {
      high = mid;
    }
  }
  return low;
}
function main() {
  let limit: number = 45000;
  let compMap: boolean[] = primeSieve(limit);
  let compSums: number[] = [];
  let primeSums: number[] = [];
  let csum: number = 0;
  let psum: number = 0;
  let i: number = 2;
  while ((i <= limit)) {
    if (compMap[i]) {
      csum = (csum + i);
      compSums.push(csum);
    } else {
      psum = (psum + i);
      primeSums.push(psum);
    }
    i = (i + 1);
  }
  console.log("Sum        | Prime Index | Composite Index");
  console.log("------------------------------------------");
  let idx: number = 0;
  while ((idx < (Array.isArray(primeSums) || typeof primeSums === 'string' ? primeSums.length : Object.keys(primeSums ?? {}).length))) {
    let s: number = primeSums[idx];
    let j: number = search(compSums, s);
    if (((j < (Array.isArray(compSums) || typeof compSums === 'string' ? compSums.length : Object.keys(compSums ?? {}).length)) && (compSums[j] == s))) {
      let sumStr = String(commatize(s)).padStart(10, " ");
      let piStr = String(commatize((idx + 1))).padStart(11, " ");
      let ciStr = String(commatize((j + 1))).padStart(15, " ");
      console.log(((((sumStr + " | ") + piStr) + " | ") + ciStr));
    }
    idx = (idx + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

