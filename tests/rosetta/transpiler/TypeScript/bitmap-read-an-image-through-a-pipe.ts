// Generated by Mochi v0.10.42 on 2025-07-27 20:11:52 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function splitWs(s: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if (((((ch == " ") || (ch == "\n")) || (ch == "\t")) || (ch == "\r"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        parts.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    parts.push(cur);
  }
  return parts;
}
function parsePpm(data: string): Record<string, any> {
  let toks: string[] = splitWs(data);
  if (((Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length) < 4)) {
    return {"err": true};
  }
  let magic: string = toks[Math.trunc(0)];
  let w = parseIntStr(toks[Math.trunc(1)]);
  let h = parseIntStr(toks[Math.trunc(2)]);
  let maxv = parseIntStr(toks[Math.trunc(3)]);
  let px: number[] = [];
  let i: number = 4;
  while ((i < (Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length))) {
    px.push(parseIntStr(toks[i]));
    i = (i + 1);
  }
  return {magic, w, h, "max": maxv, px};
}
let ppmData: string = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n";
let img: Record<string, any> = parsePpm(ppmData);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(((("width=" + String(img.w)) + " height=") + String(img.h)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

