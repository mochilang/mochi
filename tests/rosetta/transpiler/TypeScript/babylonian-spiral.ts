// Generated by Mochi v0.10.38 on 2025-07-23 16:24:02 GMT+7

function push(h: Record<string, number>[], it: Record<string, number>): Record<string, number>[] {
  h = [...h, it];
  let i: number = ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1);
  while (((i > 0) && (h[(i - 1)].s > h[i].s))) {
    const tmp: Record<string, number> = h[(i - 1)];
    h[(i - 1)] = h[i];
    h[i] = tmp;
    i = (i - 1);
  }
  return h;
}
function step(h: Record<string, number>[], nv: number, dir: number[]): Record<string, any> {
  while ((((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) == 0) || ((nv * nv) <= h[0].s))) {
    h = push(h, {"s": (nv * nv), "a": nv, "b": 0});
    nv = (nv + 1);
  }
  const s: number = h[0].s;
  let v: number[][] = [];
  while ((((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) > 0) && (h[0].s == s))) {
    const it: Record<string, number> = h[0];
    h = h.slice(1);
    v = [...v, [it.a, it.b]];
    if ((it.a > it.b)) {
      h = push(h, {"s": ((it.a * it.a) + ((it.b + 1) * (it.b + 1))), "a": it.a, "b": (it.b + 1)});
    }
  }
  let list: number[][] = [];
  for (const p of v) {
    list = [...list, p];
  }
  let temp: number[][] = list;
  for (const p of temp) {
    if ((p[0] != p[1])) {
      list = [...list, [p[1], p[0]]];
    }
  }
  temp = list;
  for (const p of temp) {
    if ((p[1] != 0)) {
      list = [...list, [p[0], -p[1]]];
    }
  }
  temp = list;
  for (const p of temp) {
    if ((p[0] != 0)) {
      list = [...list, [-p[0], p[1]]];
    }
  }
  let bestDot: number = -999999999;
  let best: number[] = dir;
  for (const p of list) {
    const cross = ((p[0] * dir[1]) - (p[1] * dir[0]));
    if ((cross >= 0)) {
      const dot = ((p[0] * dir[0]) + (p[1] * dir[1]));
      if ((dot > bestDot)) {
        bestDot = dot;
        best = p;
      }
    }
  }
  return {"d": best, "heap": h, "n": nv};
}
function positions(n: number): number[][] {
  let pos: number[][] = [];
  let x: number = 0;
  let y: number = 0;
  let dir: number[] = [0, 1];
  let heap: Record<string, number>[] = [];
  let nv: number = 1;
  let i: number = 0;
  while ((i < n)) {
    pos = [...pos, [x, y]];
    const st: Record<string, any> = step(heap, nv, dir);
    dir = st.d;
    heap = st.heap;
    nv = st.n;
    x = (x + dir[0]);
    y = (y + dir[1]);
    i = (i + 1);
  }
  return pos;
}
function pad(s: string, w: number): string {
  let r: string = s;
  while (((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) < w)) {
    r = (r + " ");
  }
  return r;
}
function main() {
  const pts: number[][] = positions(40);
  console.log("The first 40 Babylonian spiral points are:");
  let line: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(pts) || typeof pts === 'string' ? pts.length : Object.keys(pts ?? {}).length))) {
    const p: number[] = pts[i];
    const s: string = pad((((("(" + String(p[0])) + ", ") + String(p[1])) + ")"), 10);
    line = (line + s);
    if ((((i + 1) % 10) == 0)) {
      console.log(line);
      line = "";
    }
    i = (i + 1);
  }
}
main();
