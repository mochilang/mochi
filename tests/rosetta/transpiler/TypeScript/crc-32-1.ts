// Generated by Mochi v0.10.42 on 2025-07-27 21:18:54 GMT+7

function xor(a: number, b: number): number {
  let res: number = 0;
  let bit: number = 1;
  let x: number = a;
  let y: number = b;
  while (((x > 0) || (y > 0))) {
    let abit: number = (x % 2);
    let bbit: number = (y % 2);
    if ((abit != bbit)) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
  }
  return res;
}
function rshift(x: number, n: number): number {
  let v: number = x;
  let i: number = 0;
  while ((i < n)) {
    v = Math.trunc(v / 2);
    i = (i + 1);
  }
  return v;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = lower.indexOf(ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  if ((ch == " ")) {
    return 32;
  }
  return 0;
}
function toHex(n: number): string {
  let digits: string = "0123456789ABCDEF";
  if ((n == 0)) {
    return "0";
  }
  let v: number = n;
  let out: string = "";
  while ((v > 0)) {
    let d: number = (v % 16);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / 16);
  }
  return out;
}
function crc32Table(): number[] {
  let table: number[] = [];
  let i: number = 0;
  while ((i < 256)) {
    let word: number = i;
    let j: number = 0;
    while ((j < 8)) {
      if (((word % 2) == 1)) {
        word = xor(rshift(word, 1), 3988292384);
      } else {
        word = rshift(word, 1);
      }
      j = (j + 1);
    }
    table.push(word);
    i = (i + 1);
  }
  return table;
}
let table: number[] = crc32Table();
function crc32(s: string): number {
  let crc: number = 4294967295;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let c: number = ord(s.slice(i, (i + 1)));
    let idx: number = xor((crc % 256), c);
    crc = xor(table[idx], rshift(crc, 8));
    i = (i + 1);
  }
  return (4294967295 - crc);
}
function main() {
  let s: string = "The quick brown fox jumps over the lazy dog";
  let result: number = crc32(s);
  let hex: string = toHex(result);
  console.log(hex);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

