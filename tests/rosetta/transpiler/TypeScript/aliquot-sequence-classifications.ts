// Generated by Mochi v0.10.37 on 2025-07-23 13:09:24 GMT+7

const THRESHOLD: number = 140737488355328;
function indexOf(xs: number[], value: number): number {
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((xs[i] == value)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
function contains(xs: number[], value: number): boolean {
  return (indexOf(xs, value) != (0 - 1));
}
function maxOf(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}
function intSqrt(n: number): number {
  if ((n == 0)) {
    return 0;
  }
  let x: number = n;
  let y: number = ((x + 1) / 2);
  while ((y < x)) {
    x = y;
    y = ((x + Math.trunc(n / x)) / 2);
  }
  return x;
}
function sumProperDivisors(n: number): number {
  if ((n < 2)) {
    return 0;
  }
  const sqrt: number = intSqrt(n);
  let sum = 1;
  let i: number = 2;
  while ((i <= sqrt)) {
    if (((n % i) == 0)) {
      sum = ((sum + i) + Math.trunc(n / i));
    }
    i = (i + 1);
  }
  if (((sqrt * sqrt) == n)) {
    sum = (sum - sqrt);
  }
  return sum;
}
function classifySequence(k: number): Record<string, any> {
  let last: number = k;
  let seq: number[] = [k];
  while (true) {
    last = sumProperDivisors(last);
    seq = [...seq, last];
    const n: number = (Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length);
    let aliquot: string = "";
    if ((last == 0)) {
      aliquot = "Terminating";
    } else {
      if (((n == 2) && (last == k))) {
        aliquot = "Perfect";
      } else {
        if (((n == 3) && (last == k))) {
          aliquot = "Amicable";
        } else {
          if (((n >= 4) && (last == k))) {
            aliquot = (("Sociable[" + String((n - 1))) + "]");
          } else {
            if ((last == seq[(n - 2)])) {
              aliquot = "Aspiring";
            } else {
              if (contains(seq.slice(1, maxOf(1, (n - 2))), last)) {
                const idx = indexOf(seq, last);
                aliquot = (("Cyclic[" + String(((n - 1) - idx))) + "]");
              } else {
                if (((n == 16) || (last > THRESHOLD))) {
                  aliquot = "Non-Terminating";
                }
              }
            }
          }
        }
      }
    }
    if ((aliquot != "")) {
      return {seq, aliquot};
    }
  }
  return {seq, "aliquot": ""};
}
function padLeft(n: number, w: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < w)) {
    s = (" " + s);
  }
  return s;
}
function padRight(s: string, w: number): string {
  let r: string = s;
  while (((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) < w)) {
    r = (r + " ");
  }
  return r;
}
function joinWithCommas(seq: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length))) {
    s = (s + String(seq[i]));
    if ((i < ((Array.isArray(seq) || typeof seq === 'string' ? seq.length : Object.keys(seq ?? {}).length) - 1))) {
      s = (s + ", ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function main() {
  console.log("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n");
  let k: number = 1;
  while ((k <= 10)) {
    const res: Record<string, any> = classifySequence(k);
    console.log(((((padLeft(k, 2) + ": ") + padRight(res.aliquot, 15)) + " ") + joinWithCommas(res.seq)));
    k = (k + 1);
  }
  console.log("");
  const s: number[] = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488];
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const val: number = s[i];
    const res: Record<string, any> = classifySequence(val);
    console.log(((((padLeft(val, 7) + ": ") + padRight(res.aliquot, 15)) + " ") + joinWithCommas(res.seq)));
    i = (i + 1);
  }
  console.log("");
  const big: number = 15355717786080;
  const r: Record<string, any> = classifySequence(big);
  console.log(((((String(big) + ": ") + padRight(r.aliquot, 15)) + " ") + joinWithCommas(r.seq)));
}
main();
