// Generated by Mochi v0.10.42 on 2025-07-27 21:09:33 GMT+7

export interface Point { x: number; y: number }
function ccw(a: Point, b: Point, c: Point): boolean {
  let lhs: number = ((b.x - a.x) * (c.y - a.y));
  let rhs: number = ((b.y - a.y) * (c.x - a.x));
  return (lhs > rhs);
}
function sortPoints(ps: Point[]): Point[] {
  let arr: Point[] = ps;
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      let p: Point = arr[j];
      let q: Point = arr[Math.trunc((j + 1))];
      if (((p.x > q.x) || ((p.x == q.x) && (p.y > q.y)))) {
        arr[j] = q;
        arr[(j + 1)] = p;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function convexHull(ps: Point[]): Point[] {
  ps = sortPoints(ps);
  let h: Point[] = [];
  for (const pt of ps) {
    while ((((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) >= 2) && (ccw(h[Math.trunc(((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 2))], h[Math.trunc(((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1))], pt) == false))) {
      h = h.slice(0, ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1));
    }
    h.push(pt);
  }
  let i: number = ((Array.isArray(ps) || typeof ps === 'string' ? ps.length : Object.keys(ps ?? {}).length) - 2);
  let t: number = ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) + 1);
  while ((i >= 0)) {
    let pt: Point = ps[i];
    while ((((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) >= t) && (ccw(h[Math.trunc(((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 2))], h[Math.trunc(((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1))], pt) == false))) {
      h = h.slice(0, ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1));
    }
    h.push(pt);
    i = (i - 1);
  }
  return h.slice(0, ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1));
}
function pointStr(p: Point): string {
  return (((("(" + String(p.x)) + ",") + String(p.y)) + ")");
}
function hullStr(h: Point[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length))) {
    s = (s + pointStr(h[i]));
    if ((i < ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let pts: Point[] = [{"x": 16, "y": 3}, {"x": 12, "y": 17}, {"x": 0, "y": 6}, {"x": -4, "y": -6}, {"x": 16, "y": 6}, {"x": 16, "y": -7}, {"x": 16, "y": -3}, {"x": 17, "y": -4}, {"x": 5, "y": 19}, {"x": 19, "y": -8}, {"x": 3, "y": 16}, {"x": 12, "y": 13}, {"x": 3, "y": -4}, {"x": 17, "y": 5}, {"x": -3, "y": 15}, {"x": -3, "y": -9}, {"x": 0, "y": 11}, {"x": -9, "y": -3}, {"x": -4, "y": -2}, {"x": 12, "y": 10}];
let hull: Point[] = convexHull(pts);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(("Convex Hull: " + hullStr(hull)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

