// Generated by Mochi v0.10.42 on 2025-07-28 10:39:55 GMT+7

function gcd(a: number, b: number): number {
  let x: number = a;
  if ((x < 0)) {
    x = -x;
  }
  let y: number = b;
  if ((y < 0)) {
    y = -y;
  }
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function divisors(n: number): number[] {
  let divs: number[] = [];
  let i: number = 1;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      divs.push(i);
      let j: number = Math.trunc(Math.trunc(n / i));
      if ((i != j)) {
        divs.push(j);
      }
    }
    i = (i + 1);
  }
  return divs;
}
function sum(xs: number[]): number {
  let s: number = 0;
  for (const v of xs) {
    s = (s + v);
  }
  return s;
}
function isDuffinian(n: number): boolean {
  let divs: number[] = divisors(n);
  if (((Array.isArray(divs) || typeof divs === 'string' ? divs.length : Object.keys(divs ?? {}).length) <= 2)) {
    return false;
  }
  let sigma: number = divs.reduce((a, b) => a + b, 0.0);
  return (gcd(sigma, n) == 1);
}
function pad(n: number, width: number): string {
  let s: string = _str(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function printTable(nums: number[], perRow: number, width: number) {
  let i: number = 0;
  let line: string = "";
  while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    line = ((line + " ") + pad(nums[i], width));
    if ((((i + 1) % BigInt(perRow)) == 0)) {
      console.log(_str((line).substring(1, (Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length))));
      line = "";
    }
    i = (i + 1);
  }
  if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
    console.log(_str((line).substring(1, (Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length))));
  }
}
function main() {
  let duff: number[] = [];
  let n: number = 1;
  while (((Array.isArray(duff) || typeof duff === 'string' ? duff.length : Object.keys(duff ?? {}).length) < 50)) {
    if (isDuffinian(n)) {
      duff.push(n);
    }
    n = (n + 1);
  }
  console.log(_str("First 50 Duffinian numbers:"));
  printTable(duff, 10, 3);
  let triplets: string[] = [];
  n = 1;
  while (((Array.isArray(triplets) || typeof triplets === 'string' ? triplets.length : Object.keys(triplets ?? {}).length) < 20)) {
    if (((isDuffinian(n) && isDuffinian((n + 1))) && isDuffinian((n + 2)))) {
      triplets.push((((((("(" + _str(n)) + ",") + _str((n + 1))) + ",") + _str((n + 2))) + ")"));
      n = (n + 3);
    }
    n = (n + 1);
  }
  console.log(_str("\nFirst 20 Duffinian triplets:"));
  let i: number = 0;
  while ((i < (Array.isArray(triplets) || typeof triplets === 'string' ? triplets.length : Object.keys(triplets ?? {}).length))) {
    let line: string = "";
    let j: number = 0;
    while (((j < 4) && (i < (Array.isArray(triplets) || typeof triplets === 'string' ? triplets.length : Object.keys(triplets ?? {}).length)))) {
      line = (line + padStr(triplets[i], 16));
      j = (j + 1);
      i = (i + 1);
    }
    console.log(_str(line));
  }
}
function padStr(s: string, width: number): string {
  let res: string = s;
  while (((Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length) < width)) {
    res = (res + " ");
  }
  return res;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

