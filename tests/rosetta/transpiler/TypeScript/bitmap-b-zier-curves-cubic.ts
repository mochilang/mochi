// Generated by Mochi v0.10.56 on 2025-08-03 17:23:29 GMT+7

let b3Seg: number = 30;
export interface Pixel { r: number; g: number; b: number }
function pixelFromRgb(rgb: number): Pixel {
  let r: number = Math.trunc((Math.trunc(rgb / 65536) % 256));
  let g: number = Math.trunc((Math.trunc(rgb / 256) % 256));
  let b: Record<string, any> = Math.trunc((rgb % 256));
  return {r, g, b};
}
function newBitmap(cols: number, rows: number): Record<string, any> {
  let d: Pixel[][] = [];
  let y: number = 0;
  while ((y < rows)) {
    let row: Pixel[] = [];
    let x: number = 0;
    while ((x < cols)) {
      row.push({"r": 0, "g": 0, "b": 0});
      x = (x + 1);
    }
    d.push(row);
    y = (y + 1);
  }
  return {cols, rows, "data": d};
}
function setPx(b: Record<string, any>, x: number, y: number, p: Pixel) {
  let cols: number = Math.trunc(b.cols);
  let rows: number = Math.trunc(b.rows);
  if (((((x >= 0) && (x < cols)) && (y >= 0)) && (y < rows))) {
    b.data[y][x] = p;
  }
}
function fill(b: Record<string, any>, p: Pixel) {
  let cols: number = Math.trunc(b.cols);
  let rows: number = Math.trunc(b.rows);
  let y: number = 0;
  while ((y < rows)) {
    let x: number = 0;
    while ((x < cols)) {
      b.data[y][x] = p;
      x = (x + 1);
    }
    y = (y + 1);
  }
}
function fillRgb(b: Record<string, any>, rgb: number) {
  fill(b, pixelFromRgb(rgb));
}
function line(b: Record<string, any>, x0: number, y0: number, x1: number, y1: number, p: Pixel) {
  let dx: number = (x1 - x0);
  if ((dx < 0)) {
    dx = -dx;
  }
  let dy: number = (y1 - y0);
  if ((dy < 0)) {
    dy = -dy;
  }
  let sx: number = -1;
  if ((x0 < x1)) {
    sx = 1;
  }
  let sy: number = -1;
  if ((y0 < y1)) {
    sy = 1;
  }
  let err: number = (dx - dy);
  while (true) {
    setPx(b, x0, y0, p);
    if (((x0 == x1) && (y0 == y1))) {
      break
    }
    let e2: number = (2 * err);
    if ((e2 > (0 - dy))) {
      err = (err - dy);
      x0 = (x0 + sx);
    }
    if ((e2 < dx)) {
      err = (err + dx);
      y0 = (y0 + sy);
    }
  }
}
function bezier3(b: Record<string, any>, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number, p: Pixel) {
  let px: number[] = [];
  let py: number[] = [];
  let i: number = 0;
  while ((i <= b3Seg)) {
    px.push(0);
    py.push(0);
    i = (i + 1);
  }
  let fx1: number = x1;
  let fy1: number = y1;
  let fx2: number = x2;
  let fy2: number = y2;
  let fx3: number = x3;
  let fy3: number = y3;
  let fx4: number = x4;
  let fy4: number = y4;
  i = 0;
  while ((i <= b3Seg)) {
    let d: number = (i / b3Seg);
    let a: number = (1.0 - d);
    let bcoef: number = (a * a);
    let ccoef: number = (d * d);
    let a2: number = (a * bcoef);
    let b2: number = ((3.0 * bcoef) * d);
    let c2: number = ((3.0 * a) * ccoef);
    let d2: number = (ccoef * d);
    px[i] = Math.trunc(((((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)) + (d2 * fx4)));
    py[i] = Math.trunc(((((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)) + (d2 * fy4)));
    i = (i + 1);
  }
  let x0: number = px[Math.trunc(0)];
  let y0: number = py[Math.trunc(0)];
  i = 1;
  while ((i <= b3Seg)) {
    let x: number = px[i];
    let y: number = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let b: Record<string, any>
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
b = newBitmap(400, 300)
  fillRgb(b, 16773055);
  bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

