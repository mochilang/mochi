// Generated by Mochi v0.10.42 on 2025-07-27 21:45:05 GMT+7

export interface Pt { x: number; y: number; inf: boolean }
let bCoeff: number = 7.0;
function zero(): Pt {
  return {"x": 0.0, "y": 0.0, "inf": true};
}
function isZero(p: Pt): boolean {
  return p.inf;
}
function neg(p: Pt): Pt {
  return {"x": p.x, "y": -p.y, "inf": p.inf};
}
function dbl(p: Pt): Pt {
  if (isZero(p)) {
    return p;
  }
  let L: number = (((3.0 * p.x) * p.x) / (2.0 * p.y));
  let x: number = ((L * L) - (2.0 * p.x));
  return {x, "y": ((L * (p.x - x)) - p.y), "inf": false};
}
function add(p: Pt, q: Pt): Pt {
  if (isZero(p)) {
    return q;
  }
  if (isZero(q)) {
    return p;
  }
  if ((p.x == q.x)) {
    if ((p.y == q.y)) {
      return dbl(p);
    }
    return zero();
  }
  let L: number = ((q.y - p.y) / (q.x - p.x));
  let x: number = (((L * L) - p.x) - q.x);
  return {x, "y": ((L * (p.x - x)) - p.y), "inf": false};
}
function mul(p: Pt, n: number): Pt {
  let r: Pt = zero();
  let q: Pt = p;
  let k: number = n;
  while ((k > 0)) {
    if (((k % 2) == 1)) {
      r = add(r, q);
    }
    q = dbl(q);
    k = Math.trunc(k / 2);
  }
  return r;
}
function cbrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 40)) {
    guess = (((2.0 * guess) + (x / (guess * guess))) / 3.0);
    i = (i + 1);
  }
  return guess;
}
function fromY(y: number): Pt {
  return {"x": cbrtApprox(((y * y) - bCoeff)), y, "inf": false};
}
function show(s: string, p: Pt) {
  if (isZero(p)) {
    console.log((s + "Zero"));
  } else {
    console.log((((((s + "(") + String(p.x)) + ", ") + String(p.y)) + ")"));
  }
}
function main() {
  let a: Pt = fromY(1.0);
  let b: Pt = fromY(2.0);
  show("a = ", a);
  show("b = ", b);
  let c: Pt = add(a, b);
  show("c = a + b = ", c);
  let d: Pt = neg(c);
  show("d = -c = ", d);
  show("c + d = ", add(c, d));
  show("a + b + d = ", add(a, add(b, d)));
  show("a * 12345 = ", mul(a, 12345));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

