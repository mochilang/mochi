// Generated by Mochi v0.10.56 on 2025-08-03 17:23:05 GMT+7

let seed: number = 1;
function prng(max: number): number {
  seed = (((seed * 1103515245) + 12345) % 2147483648);
  return (seed % max);
}
function gen(n: number): string {
  let arr: string[] = [];
  let i: number = 0;
  while ((i < n)) {
    arr.push("[");
    arr.push("]");
    i = (i + 1);
  }
  let j: number = (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
  while ((j > 0)) {
    let k: number = prng((j + 1));
    let tmp: string = arr[j];
    arr[j] = arr[k];
    arr[k] = tmp;
    j = (j - 1);
  }
  let out: string = "";
  for (const ch of arr) {
    out = (out + ch);
  }
  return out;
}
function testBalanced(s: string) {
  let open: number = 0;
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let c: string = s.slice(i, (i + 1));
    if ((c == "[")) {
      open = (open + 1);
    } else {
      if ((c == "]")) {
        if ((open == 0)) {
          console.log(_str((s + ": not ok")));
          return;
        }
        open = (open - 1);
      } else {
        console.log(_str((s + ": not ok")));
        return;
      }
    }
    i = (i + 1);
  }
  if ((open == 0)) {
    console.log(_str((s + ": ok")));
  } else {
    console.log(_str((s + ": not ok")));
  }
}
function main() {
  let i: number = 0;
  while ((i < 10)) {
    testBalanced(gen(i));
    i = (i + 1);
  }
  testBalanced("()");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

