// Generated by Mochi v0.10.40 on 2025-07-26 09:24:45 GMT+7

function bigrat(a: number, b: number): number {
  return (a / b);
}
function calkinWilf(n: number): number[] {
  let seq: number[] = [];
  seq.push(bigrat(1, 1));
  let i: number = 1;
  while ((i < n)) {
    let prev: number = seq[Math.trunc((i - 1))];
    let a: number = num(prev);
    let b: number = denom(prev);
    let f: number = (a / b);
    let t: number = bigrat(f, 1);
    t = (t * 2);
    t = (t - prev);
    t = (t + 1);
    t = (1 / t);
    seq.push(t);
    i = (i + 1);
  }
  return seq;
}
function toContinued(r: number): number[] {
  let a: number = num(r);
  let b: number = denom(r);
  let res: number[] = [];
  while (true) {
    res.push(Math.trunc((a / b)));
    let t: number = (a % b);
    a = b;
    b = t;
    if ((a == 1)) {
      break
    }
  }
  if ((((Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length) % 2) == 0)) {
    res[((Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length) - 1)] = (res[Math.trunc(((Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length) - 1))] - 1);
    res.push(1);
  }
  return res;
}
function termNumber(cf: number[]): number {
  let b: string = "";
  let d: string = "1";
  for (const n of cf) {
    b = (repeat(d, n) + b);
    if ((d == "1")) {
      d = "0";
    } else {
      d = "1";
    }
  }
  return parseIntStr(b, 2);
}
function commatize(n: number): string {
  let s: string = String(n);
  let out: string = "";
  let i: number = 0;
  let cnt: number = 0;
  let neg: boolean = false;
  if ((s.slice(0, 1) == "-")) {
    neg = true;
    s = s.slice(1);
  }
  i = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  while ((i >= 0)) {
    out = (s.slice(i, (i + 1)) + out);
    cnt = (cnt + 1);
    if (((cnt == 3) && (i != 0))) {
      out = ("," + out);
      cnt = 0;
    }
    i = (i - 1);
  }
  if (neg) {
    out = ("-" + out);
  }
  return out;
}
function main() {
  let cw: number[] = calkinWilf(20);
  console.log("The first 20 terms of the Calkin-Wilf sequnence are:");
  let i: number = 0;
  while ((i < 20)) {
    let r: number = cw[i];
    let s: string = String(num(r));
    if ((denom(r) != 1)) {
      s = ((s + "/") + String(denom(r)));
    }
    console.log(((String((i + Math.trunc(1))).padStart(2, " ") + ": ") + s));
    i = (i + 1);
  }
  let r: number = bigrat(83116, 51639);
  let cf: number[] = toContinued(r);
  let tn: number = termNumber(cf);
  console.log((((((("" + String(num(r))) + "/") + String(denom(r))) + " is the ") + commatize(tn)) + "th term of the sequence."));
}
var _nowSeed = 1992085998;
var _nowSeeded = true;
function _now(): number {
  _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
  return _nowSeed;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function num(x: number): number { return x; }
function denom(_x: number): number { return 1; }
function repeat(s: string, n: number): string { return s.repeat(Math.trunc(n)); }
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

