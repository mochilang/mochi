// Generated by Mochi v0.10.39 on 2025-07-24 14:52:57 GMT+7

export interface Field { s: boolean[][]; w: number; h: number }
export interface Life { a: Field; b: Field; w: number; h: number }
let seed: number = 1;
function randN(n: number): number {
  seed = (((seed * 1664525) + 1013904223) % 2147483647);
  return (seed % n);
}
function newField(w: number, h: number): Field {
  let rows: boolean[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: boolean[] = [];
    let x: number = 0;
    while ((x < w)) {
      row = [...row, false];
      x = (x + 1);
    }
    rows = [...rows, row];
    y = (y + 1);
  }
  return {"s": rows, w, h};
}
function setCell(f: Field, x: number, y: number, b: boolean) {
  let rows: boolean[][] = f.s;
  let row: boolean[] = rows[y];
  row[x] = b;
  rows[y] = row;
  f = ({ ...f, "s": rows });
}
function state(f: Field, x: number, y: number): boolean {
  while ((y < 0)) {
    y = (y + f.h);
  }
  while ((x < 0)) {
    x = (x + f.w);
  }
  return f.s[Math.trunc((y % f.h))][Math.trunc((x % f.w))];
}
function nextState(f: Field, x: number, y: number): boolean {
  let count: number = 0;
  let dy: number = -1;
  while ((dy <= 1)) {
    let dx: number = -1;
    while ((dx <= 1)) {
      if ((!((dx == 0) && (dy == 0)) && state(f, (x + dx), (y + dy)))) {
        count = (count + 1);
      }
      dx = (dx + 1);
    }
    dy = (dy + 1);
  }
  return ((count == 3) || ((count == 2) && state(f, x, y)));
}
function newLife(w: number, h: number): Life {
  let a: Field = newField(w, h);
  let i: number = 0;
  while ((i < Math.trunc((w * h) / 2))) {
    setCell(a, randN(w), randN(h), true);
    i = (i + 1);
  }
  return {a, "b": newField(w, h), w, h};
}
function step(l: Life) {
  let y: number = 0;
  while ((y < l.h)) {
    let x: number = 0;
    while ((x < l.w)) {
      setCell(l.b, x, y, nextState(l.a, x, y));
      x = (x + 1);
    }
    y = (y + 1);
  }
  let tmp: Field = l.a;
  l = ({ ...l, "a": l.b });
  l = ({ ...l, "b": tmp });
}
function lifeString(l: Life): string {
  let out: string = "";
  let y: number = 0;
  while ((y < l.h)) {
    let x: number = 0;
    while ((x < l.w)) {
      if (state(l.a, x, y)) {
        out = (out + "*");
      } else {
        out = (out + " ");
      }
      x = (x + 1);
    }
    out = (out + "\n");
    y = (y + 1);
  }
  return out;
}
function main() {
  let l: Life = newLife(80, 15);
  let i: number = 0;
  while ((i < 300)) {
    step(l);
    console.log("\f");
    console.log(lifeString(l));
    i = (i + 1);
  }
}
main();
