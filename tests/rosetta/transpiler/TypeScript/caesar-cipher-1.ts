// Generated by Mochi v0.10.40 on 2025-07-25 19:44:53 GMT+7

var _nowSeed = 1;
var _nowSeeded = true;
function _now(): number {
  _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
  return _nowSeed;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function indexOf(s: string, ch: string): number {
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if (((s).substring(i, (i + 1)) == ch)) {
        return i;
      }
      i = (i + 1);
    }
    return -1;
  }
  function ord(ch: string): number {
    const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower = "abcdefghijklmnopqrstuvwxyz";
    let idx = upper.indexOf(ch);
    if ((idx >= 0)) {
      return (65 + idx);
    }
    idx = lower.indexOf(ch);
    if ((idx >= 0)) {
      return (97 + idx);
    }
    return 0;
  }
  function chr(n: number): string {
    const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const lower = "abcdefghijklmnopqrstuvwxyz";
    if (((n >= 65) && (n < 91))) {
      return upper.slice((n - 65), (n - 64));
    }
    if (((n >= 97) && (n < 123))) {
      return lower.slice((n - 97), (n - 96));
    }
    return "?";
  }
  function shiftRune(r: string, k: number): string {
    if (((r >= "a") && (r <= "z"))) {
      return chr(((((ord(r) - 97) + k) % 26) + 97));
    }
    if (((r >= "A") && (r <= "Z"))) {
      return chr(((((ord(r) - 65) + k) % 26) + 65));
    }
    return r;
  }
  function encipher(s: string, k: number): string {
    let out: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      out = (out + shiftRune(s.slice(i, (i + 1)), k));
      i = (i + 1);
    }
    return out;
  }
  function decipher(s: string, k: number): string {
    return encipher(s, ((26 - (k % 26)) % 26));
  }
  function main() {
    const pt: string = "The five boxing wizards jump quickly";
    console.log(("Plaintext: " + pt));
    for (const key of [0, 1, 7, 25, 26]) {
      if (((key < 1) || (key > 25))) {
        console.log((("Key " + String(key)) + " invalid"));
        continue
      }
      const ct = encipher(pt, key);
      console.log(("Key " + String(key)));
      console.log(("  Enciphered: " + ct));
      console.log(("  Deciphered: " + decipher(ct, key)));
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

