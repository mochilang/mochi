// Generated by Mochi v0.10.42 on 2025-07-28 07:51:51 GMT+7

export interface Point { x: number; y: number }
export interface Line { slope: number; yint: number }
function createLine(a: Point, b: Point): Line {
  let slope: number = ((b.y - a.y) / (b.x - a.x));
  let yint: number = (a.y - (slope * a.x));
  return {slope, yint};
}
function evalX(l: Line, x: number): number {
  return ((l.slope * x) + l.yint);
}
function intersection(l1: Line, l2: Line): Point {
  if ((l1.slope == l2.slope)) {
    return {"x": 0.0, "y": 0.0};
  }
  let x: number = ((l2.yint - l1.yint) / (l1.slope - l2.slope));
  let y: number = evalX(l1, x);
  return {x, y};
}
function main() {
  let l1: Line = createLine({"x": 4.0, "y": 0.0}, {"x": 6.0, "y": 10.0});
  let l2: Line = createLine({"x": 0.0, "y": 3.0}, {"x": 10.0, "y": 7.0});
  let p: Point = intersection(l1, l2);
  console.log(_str((((("{" + _str(p.x)) + " ") + _str(p.y)) + "}")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

