// Generated by Mochi v0.10.37 on 2025-07-23 15:52:34 GMT+7

function poolPut(p: number[], x: number): number[] {
  return [...p, x];
}
function poolGet(p: number[]): Record<string, any> {
  if (((Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length) == 0)) {
    console.log("pool empty");
    return {"pool": p, "val": 0};
  }
  const idx: number = ((Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length) - 1);
  const v: number = p[idx];
  p = p.slice(0, idx);
  return {"pool": p, "val": v};
}
function clearPool(p: number[]): number[] {
  return [];
}
function main() {
  let pool: number[] = [];
  let i: number = 1;
  let j: number = 2;
  console.log(String((i + j)));
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  const res1: Record<string, any> = poolGet(pool);
  pool = res1.pool;
  i = res1.val;
  const res2: Record<string, any> = poolGet(pool);
  pool = res2.pool;
  j = res2.val;
  i = 4;
  j = 5;
  console.log(String((i + j)));
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  pool = clearPool(pool);
  const res3: Record<string, any> = poolGet(pool);
  pool = res3.pool;
  i = res3.val;
  const res4: Record<string, any> = poolGet(pool);
  pool = res4.pool;
  j = res4.val;
  i = 7;
  j = 8;
  console.log(String((i + j)));
}
main();
