// Generated by Mochi v0.10.42 on 2025-07-27 17:18:50 GMT+7

function amb(wordsets: string[][], res: string[], idx: number): boolean {
  if ((idx == (Array.isArray(wordsets) || typeof wordsets === 'string' ? wordsets.length : Object.keys(wordsets ?? {}).length))) {
    return true;
  }
  let prev: string = "";
  if ((idx > 0)) {
    prev = res[Math.trunc((idx - 1))];
  }
  let i: number = 0;
  while ((i < (Array.isArray(wordsets[idx]) || typeof wordsets[idx] === 'string' ? wordsets[idx].length : Object.keys(wordsets[idx] ?? {}).length))) {
    let w: string = wordsets[idx][i];
    if (((idx == 0) || ((prev).substring(((Array.isArray(prev) || typeof prev === 'string' ? prev.length : Object.keys(prev ?? {}).length) - 1), (Array.isArray(prev) || typeof prev === 'string' ? prev.length : Object.keys(prev ?? {}).length)) == (w).substring(0, 1)))) {
      res[idx] = w;
      if (amb(wordsets, res, (idx + 1))) {
        return true;
      }
    }
    i = (i + 1);
  }
  return false;
}
function main() {
  let wordset: string[][] = [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]];
  let res: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(wordset) || typeof wordset === 'string' ? wordset.length : Object.keys(wordset ?? {}).length))) {
    res.push("");
    i = (i + 1);
  }
  if (amb(wordset, res, 0)) {
    let out: string = ("[" + res[Math.trunc(0)]);
    let j: number = 1;
    while ((j < (Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length))) {
      out = ((out + " ") + res[j]);
      j = (j + 1);
    }
    out = (out + "]");
    console.log(out);
  } else {
    console.log("No amb found");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

