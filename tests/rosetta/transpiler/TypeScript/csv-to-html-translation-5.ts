// Generated by Mochi v0.10.40 on 2025-07-26 00:04:26 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function split(s: string, sep: string): string[] {
    let out: string[] = [];
    let start: number = 0;
    let i: number = 0;
    const n: number = (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length);
    while ((i <= ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - n))) {
      if (((s).substring(i, (i + n)) == sep)) {
        out = [...out, (s).substring(start, i)];
        i = (i + n);
        start = i;
      } else {
        i = (i + 1);
      }
    }
    out = [...out, (s).substring(start, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))];
    return out;
  }
  function htmlEscape(s: string): string {
    let out: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      const ch: string = (s).substring(i, (i + 1));
      if ((ch == "&")) {
        out = (out + "&amp;");
      } else {
        if ((ch == "<")) {
          out = (out + "&lt;");
        } else {
          if ((ch == ">")) {
            out = (out + "&gt;");
          } else {
            out = (out + ch);
          }
        }
      }
      i = (i + 1);
    }
    return out;
  }
  const c: string = ((((("Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n") + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") + "The multitude,Who are you?\n") + "Brians mother,I'm his mother; that's who!\n") + "The multitude,Behold his mother! Behold his mother!");
  let rows: string[][] = [];
  for (const line of c.split("\n")) {
    rows = [...rows, line.split(",")];
  }
  console.log("<table>");
  for (const row of rows) {
    let cells: string = "";
    for (const cell of row) {
      cells = (((cells + "<td>") + htmlEscape(cell)) + "</td>");
    }
    console.log((("    <tr>" + cells) + "</tr>"));
  }
  console.log("</table>");
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

