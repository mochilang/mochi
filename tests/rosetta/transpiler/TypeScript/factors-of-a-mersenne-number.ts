// Generated by Mochi v0.10.42 on 2025-07-28 01:00:59 GMT+7

let qlimit: number = 50000;
function powf(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let g: number = x;
  let i: number = 0;
  while ((i < 20)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
function modPow(base: number, exp: number, mod: number): number {
  let result: bigint = (1 % mod);
  let b: bigint = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    b = ((b * b) % mod);
    e = Math.trunc(e / 2);
  }
  return result;
}
function mtest(m: number) {
  if ((m < 4)) {
    console.log(_str((((_str(m) + " < 4.  M") + _str(m)) + " not tested.")));
    return;
  }
  let flimit: number = sqrtApprox((powf(2.0, m) - 1.0));
  let qlast: number = 0;
  if ((flimit < qlimit)) {
    qlast = Math.trunc(flimit);
  } else {
    qlast = qlimit;
  }
  let composite: boolean[] = [];
  let i: number = 0;
  while ((i <= qlast)) {
    composite.push(false);
    i = (i + 1);
  }
  let sq: number = Math.trunc(sqrtApprox(qlast));
  let q: number = 3;
  while (true) {
    if ((q <= sq)) {
      let j: bigint = (q * q);
      while ((j <= qlast)) {
        composite[j] = true;
        j = (j + q);
      }
    }
    let q8: bigint = (q % 8);
    if ((((q8 == 1) || (q8 == 7)) && (modPow(2, m, q) == 1))) {
      console.log(_str(((("M" + _str(m)) + " has factor ") + _str(q))));
      return;
    }
    while (true) {
      q = (q + 2);
      if ((q > qlast)) {
        console.log(_str((("No factors of M" + _str(m)) + " found.")));
        return;
      }
      if (!composite[q]) {
        break
      }
    }
  }
}
function main() {
  mtest(31);
  mtest(67);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

