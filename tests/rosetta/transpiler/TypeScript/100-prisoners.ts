// Generated by Mochi v0.10.42 on 2025-07-27 17:14:06 GMT+7

function shuffle(xs: number[]): number[] {
  let arr: number[] = xs;
  let i: number = 99;
  while ((i > 0)) {
    let j: number = (_now() % (i + 1));
    let tmp: number = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = (i - 1);
  }
  return arr;
}
function doTrials(trials: number, np: number, strategy: string) {
  let pardoned: number = 0;
  let t: number = 0;
  while ((t < trials)) {
    let drawers: number[] = [];
    let i: number = 0;
    while ((i < 100)) {
      drawers.push(i);
      i = (i + 1);
    }
    drawers = shuffle(drawers);
    let p: number = 0;
    let success: boolean = true;
    while ((p < np)) {
      let found: boolean = false;
      if ((strategy == "optimal")) {
        let prev: number = p;
        let d: number = 0;
        while ((d < 50)) {
          let _this: number = drawers[prev];
          if ((_this == p)) {
            found = true;
            break
          }
          prev = _this;
          d = (d + 1);
        }
      } else {
        let opened: boolean[] = [];
        let k: number = 0;
        while ((k < 100)) {
          opened.push(false);
          k = (k + 1);
        }
        let d: number = 0;
        while ((d < 50)) {
          let n: number = (_now() % 100);
          while (opened[n]) {
            n = (_now() % 100);
          }
          opened[n] = true;
          if ((drawers[n] == p)) {
            found = true;
            break
          }
          d = (d + 1);
        }
      }
      if (!found) {
        success = false;
        break
      }
      p = (p + 1);
    }
    if (success) {
      pardoned = (pardoned + 1);
    }
    t = (t + 1);
  }
  let rf: number = ((pardoned / trials) * 100.0);
  console.log((((((("  strategy = " + strategy) + "  pardoned = ") + String(pardoned)) + " relative frequency = ") + String(rf)) + "%"));
}
function main() {
  let trials: number = 1000;
  for (const np of [10, 100]) {
    console.log((((("Results from " + String(trials)) + " trials with ") + String(np)) + " prisoners:\n"));
    for (const strat of ["random", "optimal"]) {
      doTrials(trials, np, strat);
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

