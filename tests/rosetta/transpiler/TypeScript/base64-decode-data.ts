// Generated by Mochi v0.10.56 on 2025-08-03 17:23:09 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if ((s[i] == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if (((Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str[Math.trunc(0)] == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str[i]]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = lower.indexOf(ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  if (((ch >= "0") && (ch <= "9"))) {
    return (48 + parseIntStr(ch));
  }
  if ((ch == "+")) {
    return 43;
  }
  if ((ch == "/")) {
    return 47;
  }
  if ((ch == " ")) {
    return 32;
  }
  if ((ch == "=")) {
    return 61;
  }
  return 0;
}
function chr(n: number): string {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let lower = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 65) && (n < 91))) {
    return upper.slice((n - 65), (n - 64));
  }
  if (((n >= 97) && (n < 123))) {
    return lower.slice((n - 97), (n - 96));
  }
  if (((n >= 48) && (n < 58))) {
    let digits: string = "0123456789";
    return digits.slice((n - 48), (n - 47));
  }
  if ((n == 43)) {
    return "+";
  }
  if ((n == 47)) {
    return "/";
  }
  if ((n == 32)) {
    return " ";
  }
  if ((n == 61)) {
    return "=";
  }
  return "?";
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (_str((val % 2)) + b);
    val = Math.trunc(Math.trunc(val / 2));
    i = (i + 1);
  }
  return b;
}
function binToInt(bits: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < Number(Array.isArray(bits) || typeof bits === 'string' ? bits.length : Object.keys(bits ?? {}).length))) {
    n = ((n * 2) + parseIntStr(bits.slice(i, (i + 1))));
    i = (i + 1);
  }
  return n;
}
function base64Encode(text: string): string {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  let bin: string = "";
  for (const ch of text) {
    bin = (bin + toBinary(ord(ch), 8));
  }
  while (((Number(Array.isArray(bin) || typeof bin === 'string' ? bin.length : Object.keys(bin ?? {}).length) % 6) != 0)) {
    bin = (bin + "0");
  }
  let out: string = "";
  let i: number = 0;
  while ((i < Number(Array.isArray(bin) || typeof bin === 'string' ? bin.length : Object.keys(bin ?? {}).length))) {
    let chunk: string = bin.slice(i, (i + 6));
    let val: number = binToInt(chunk);
    out = (out + alphabet.slice(val, (val + 1)));
    i = (i + 6);
  }
  let pad: number = ((3 - (Number(Array.isArray(text) || typeof text === 'string' ? text.length : Object.keys(text ?? {}).length) % 3)) % 3);
  if ((pad == 1)) {
    out = (out.slice(0, (Number(Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) - 1)) + "=");
  }
  if ((pad == 2)) {
    out = (out.slice(0, (Number(Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) - 2)) + "==");
  }
  return out;
}
function base64Decode(enc: string): string {
  let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  let bin: string = "";
  let i: number = 0;
  while ((i < Number(Array.isArray(enc) || typeof enc === 'string' ? enc.length : Object.keys(enc ?? {}).length))) {
    let ch: string = enc[i];
    if ((ch == "=")) {
      break
    }
    let idx: number = alphabet.indexOf(ch);
    bin = (bin + toBinary(idx, 6));
    i = (i + 1);
  }
  let out: string = "";
  i = 0;
  while (((i + 8) <= Number(Array.isArray(bin) || typeof bin === 'string' ? bin.length : Object.keys(bin ?? {}).length))) {
    let chunk: string = bin.slice(i, (i + 8));
    let val: number = binToInt(chunk);
    out = (out + chr(val));
    i = (i + 8);
  }
  return out;
}
let msg: string = "Rosetta Code Base64 decode data task";
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let enc: string
let dec: string
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str(("Original : " + msg)));
enc = base64Encode(msg)
  console.log(_str(("\nEncoded  : " + enc)));
dec = base64Decode(enc)
  console.log(_str(("\nDecoded  : " + dec)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

