// Generated by Mochi v0.10.38 on 2025-07-23 17:15:26 GMT+7

function pow2(n: number): number {
  let v: number = 1;
  let i: number = 0;
  while ((i < n)) {
    v = (v * 2);
    i = (i + 1);
  }
  return v;
}
function lshift(x: number, n: number): number {
  return (x * pow2(n));
}
function rshift(x: number, n: number): number {
  return Math.trunc(x / pow2(n));
}
export interface Writer { order: string; bits: number; nbits: number; data: number[] }
function NewWriter(order: string): Writer {
  return {order, "bits": 0, "nbits": 0, "data": []};
}
function writeBitsLSB(w: Writer, c: number, width: number): Writer {
  w = ({ ...w, "bits": (w.bits + lshift(c, w.nbits)) });
  w = ({ ...w, "nbits": (w.nbits + width) });
  while ((w.nbits >= 8)) {
    const b: number = (w.bits % 256);
    w = ({ ...w, "data": [...w.data, b] });
    w = ({ ...w, "bits": rshift(w.bits, 8) });
    w = ({ ...w, "nbits": (w.nbits - 8) });
  }
  return w;
}
function writeBitsMSB(w: Writer, c: number, width: number): Writer {
  w = ({ ...w, "bits": (w.bits + lshift(c, ((32 - width) - w.nbits))) });
  w = ({ ...w, "nbits": (w.nbits + width) });
  while ((w.nbits >= 8)) {
    const b: number = (rshift(w.bits, 24) % 256);
    w = ({ ...w, "data": [...w.data, b] });
    w = ({ ...w, "bits": ((w.bits % pow2(24)) * 256) });
    w = ({ ...w, "nbits": (w.nbits - 8) });
  }
  return w;
}
function WriteBits(w: Writer, c: number, width: number): Writer {
  if ((w.order == "LSB")) {
    return writeBitsLSB(w, c, width);
  }
  return writeBitsMSB(w, c, width);
}
function CloseWriter(w: Writer): Writer {
  if ((w.nbits > 0)) {
    if ((w.order == "MSB")) {
      w = ({ ...w, "bits": rshift(w.bits, 24) });
    }
    w = ({ ...w, "data": [...w.data, (w.bits % 256)] });
  }
  w = ({ ...w, "bits": 0 });
  w = ({ ...w, "nbits": 0 });
  return w;
}
export interface Reader { order: string; data: number[]; idx: number; bits: number; nbits: number }
function NewReader(data: number[], order: string): Reader {
  return {order, data, "idx": 0, "bits": 0, "nbits": 0};
}
function readBitsLSB(r: Reader, width: number): Record<string, any> {
  while ((r.nbits < width)) {
    if ((r.idx >= (Array.isArray(r.data) || typeof r.data === 'string' ? r.data.length : Object.keys(r.data ?? {}).length))) {
      return {"val": 0, "eof": true};
    }
    const b: number = r.data[Math.trunc(r.idx)];
    r = ({ ...r, "idx": (r.idx + 1) });
    r = ({ ...r, "bits": (r.bits + lshift(b, r.nbits)) });
    r = ({ ...r, "nbits": (r.nbits + 8) });
  }
  const mask: number = (pow2(width) - 1);
  const out: number = (r.bits % (mask + 1));
  r = ({ ...r, "bits": rshift(r.bits, width) });
  r = ({ ...r, "nbits": (r.nbits - width) });
  return {"val": out, "eof": false};
}
function readBitsMSB(r: Reader, width: number): Record<string, any> {
  while ((r.nbits < width)) {
    if ((r.idx >= (Array.isArray(r.data) || typeof r.data === 'string' ? r.data.length : Object.keys(r.data ?? {}).length))) {
      return {"val": 0, "eof": true};
    }
    const b: number = r.data[Math.trunc(r.idx)];
    r = ({ ...r, "idx": (r.idx + 1) });
    r = ({ ...r, "bits": (r.bits + lshift(b, (24 - r.nbits))) });
    r = ({ ...r, "nbits": (r.nbits + 8) });
  }
  const out: number = rshift(r.bits, (32 - width));
  r = ({ ...r, "bits": ((r.bits * pow2(width)) % pow2(32)) });
  r = ({ ...r, "nbits": (r.nbits - width) });
  return {"val": out, "eof": false};
}
function ReadBits(r: Reader, width: number): Record<string, any> {
  if ((r.order == "LSB")) {
    return readBitsLSB(r, width);
  }
  return readBitsMSB(r, width);
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (String((val % 2)) + b);
    val = Math.trunc(val / 2);
    i = (i + 1);
  }
  return b;
}
function bytesToBits(bs: number[]): string {
  let out: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    out = (out + toBinary(bs[Math.trunc(i)], 8));
    if (((i + 1) < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
      out = (out + " ");
    }
    i = (i + 1);
  }
  out = (out + "]");
  return out;
}
function bytesToHex(bs: number[]): string {
  const digits: string = "0123456789ABCDEF";
  let out: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    const b: number = bs[Math.trunc(i)];
    const hi: number = Math.trunc(b / 16);
    const lo: number = (b % 16);
    out = ((out + digits.slice(hi, (hi + 1))) + digits.slice(lo, (lo + 1)));
    if (((i + 1) < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
      out = (out + " ");
    }
    i = (i + 1);
  }
  return out;
}
function ord(ch: string): number {
  const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = lower.indexOf(ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  if (((ch >= "0") && (ch <= "9"))) {
    return (48 + parseIntStr(ch));
  }
  if ((ch == " ")) {
    return 32;
  }
  if ((ch == ".")) {
    return 46;
  }
  return 0;
}
function chr(n: number): string {
  const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const lower = "abcdefghijklmnopqrstuvwxyz";
  if (((n >= 65) && (n < 91))) {
    return upper.slice((n - 65), (n - 64));
  }
  if (((n >= 97) && (n < 123))) {
    return lower.slice((n - 97), (n - 96));
  }
  if (((n >= 48) && (n < 58))) {
    const digits: string = "0123456789";
    return digits.slice((n - 48), (n - 47));
  }
  if ((n == 32)) {
    return " ";
  }
  if ((n == 46)) {
    return ".";
  }
  return "?";
}
function bytesOfStr(s: string): number[] {
  let bs: number[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    bs = [...bs, ord(s.slice(i, (i + 1)))];
    i = (i + 1);
  }
  return bs;
}
function bytesToDec(bs: number[]): string {
  let out: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    out = (out + String(bs[Math.trunc(i)]));
    if (((i + 1) < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
      out = (out + " ");
    }
    i = (i + 1);
  }
  return out;
}
function Example() {
  const message: string = "This is a test.";
  const msgBytes: number[] = bytesOfStr(message);
  console.log(((("\"" + message) + "\" as bytes: ") + bytesToDec(msgBytes)));
  console.log(("    original bits: " + bytesToBits(msgBytes)));
  let bw: Writer = NewWriter("MSB");
  let i: number = 0;
  while ((i < (Array.isArray(msgBytes) || typeof msgBytes === 'string' ? msgBytes.length : Object.keys(msgBytes ?? {}).length))) {
    bw = WriteBits(bw, msgBytes[Math.trunc(i)], 7);
    i = (i + 1);
  }
  bw = CloseWriter(bw);
  console.log(("Written bitstream: " + bytesToBits(bw.data)));
  console.log(("Written bytes: " + bytesToHex(bw.data)));
  let br: Reader = NewReader(bw.data, "MSB");
  let result: string = "";
  while (true) {
    const r: Record<string, any> = ReadBits(br, 7);
    if (r.eof) {
      break
    }
    const v: number = Math.trunc(r.val);
    if ((v != 0)) {
      result = (result + chr(v));
    }
  }
  console.log((("Read back as \"" + result) + "\""));
}
Example();
