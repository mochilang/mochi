// Generated by Mochi v0.10.56 on 2025-08-03 17:22:32 GMT+7

function powf(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function nthRoot(x: number, n: number): number {
  let low: number = 0.0;
  let high: number = x;
  let i: number = 0;
  while ((i < 60)) {
    let mid: number = ((low + high) / 2.0);
    if ((powf(mid, n) > x)) {
      high = mid;
    } else {
      low = mid;
    }
    i = (i + 1);
  }
  return low;
}
function main() {
  let sum: number = 0.0;
  let sumRecip: number = 0.0;
  let prod: number = 1.0;
  let n: number = 1;
  while ((n <= 10)) {
    let f: number = n;
    sum = (sum + f);
    sumRecip = (sumRecip + (1.0 / f));
    prod = (prod * f);
    n = (n + 1);
  }
  let count = 10.0;
  let a = (sum / count);
  let g: number = nthRoot(prod, 10);
  let h = (count / sumRecip);
  console.log(_str(((((("A: " + _str(a)) + " G: ") + _str(g)) + " H: ") + _str(h))));
  console.log(_str(("A >= G >= H: " + _str(((a >= g) && (g >= h))))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

