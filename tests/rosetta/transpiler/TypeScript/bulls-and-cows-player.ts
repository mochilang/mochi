// Generated by Mochi v0.10.42 on 2025-07-27 20:13:35 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function fields(s: string): string[] {
  let words: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((((ch == " ") || (ch == "\t")) || (ch == "\n"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        words.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    words.push(cur);
  }
  return words;
}
function makePatterns(): string[] {
  let digits: string[] = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
  let pats: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
    let j: number = 0;
    while ((j < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
      if ((j != i)) {
        let k: number = 0;
        while ((k < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
          if (((k != i) && (k != j))) {
            let l: number = 0;
            while ((l < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
              if ((((l != i) && (l != j)) && (l != k))) {
                pats.push((((digits[i] + digits[j]) + digits[k]) + digits[l]));
              }
              l = (l + 1);
            }
          }
          k = (k + 1);
        }
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return pats;
}
function main() {
  console.log(((((("Cows and bulls/player\n" + "You think of four digit number of unique digits in the range 1 to 9.\n") + "I guess.  You score my guess:\n") + "    A correct digit but not in the correct place is a cow.\n") + "    A correct digit in the correct place is a bull.\n") + "You give my score as two numbers separated with a space."));
  let patterns: string[] = makePatterns();
  while (true) {
    if (((Array.isArray(patterns) || typeof patterns === 'string' ? patterns.length : Object.keys(patterns ?? {}).length) == 0)) {
      console.log("Oops, check scoring.");
      return;
    }
    let guess: string = patterns[Math.trunc(0)];
    patterns = patterns.slice(1);
    let cows: number = 0;
    let bulls: number = 0;
    while (true) {
      console.log((("My guess: " + guess) + ".  Score? (c b) "));
      let line: string = _input();
      let toks: string[] = fields(line);
      if (((Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length) == 2)) {
        let c: number = Math.trunc(toks[Math.trunc(0)]);
        let b: number = Math.trunc(toks[Math.trunc(1)]);
        if ((((((c >= 0) && (c <= 4)) && (b >= 0)) && (b <= 4)) && ((c + b) <= 4))) {
          cows = c;
          bulls = b;
          break
        }
      }
      console.log("Score guess as two numbers: cows bulls");
    }
    if ((bulls == 4)) {
      console.log("I did it. :)");
      return;
    }
    let next: string[] = [];
    let idx: number = 0;
    while ((idx < (Array.isArray(patterns) || typeof patterns === 'string' ? patterns.length : Object.keys(patterns ?? {}).length))) {
      let pat: string = patterns[idx];
      let c: number = 0;
      let b: number = 0;
      let i: number = 0;
      while ((i < 4)) {
        let cg: string = (guess).substring(i, (i + 1));
        let cp: string = (pat).substring(i, (i + 1));
        if ((cg == cp)) {
          b = (b + 1);
        } else {
          if ((pat.indexOf(cg) >= 0)) {
            c = (c + 1);
          }
        }
        i = (i + 1);
      }
      if (((c == cows) && (b == bulls))) {
        next.push(pat);
      }
      idx = (idx + 1);
    }
    patterns = next;
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

