// Generated by Mochi v0.10.42 on 2025-07-27 18:45:26 GMT+7

function intSqrt(x: number): number {
  if ((x < 2)) {
    return x;
  }
  let left: number = 1;
  let right: number = Math.trunc(x / 2);
  let ans: number = 0;
  while ((left <= right)) {
    let mid: number = (left + Math.trunc((right - left) / 2));
    let sq: number = (mid * mid);
    if ((sq == x)) {
      return mid;
    }
    if ((sq < x)) {
      left = (mid + 1);
      ans = mid;
    } else {
      right = (mid - 1);
    }
  }
  return ans;
}
function sumRecip(n: number): number {
  let s: number = 1;
  let limit: number = intSqrt(n);
  let f: number = 2;
  while ((f <= limit)) {
    if (((n % f) == 0)) {
      s = (s + Math.trunc(n / f));
      let f2: number = Math.trunc(n / f);
      if ((f2 != f)) {
        s = (s + f);
      }
    }
    f = (f + 1);
  }
  return s;
}
function main() {
  let nums: number[] = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776];
  for (const n of nums) {
    let s: number = sumRecip(n);
    if (((s % n) == 0)) {
      let val: number = Math.trunc(s / n);
      let perfect: string = "";
      if ((val == 1)) {
        perfect = "perfect!";
      }
      console.log(((((("Sum of recipr. factors of " + String(n)) + " = ") + String(val)) + " exactly ") + perfect));
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

