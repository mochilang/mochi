// Generated by Mochi v0.10.42 on 2025-07-27 21:44:58 GMT+7

export interface V3 { x: number; y: number; z: number }
function sqrtApprox(x: number): number {
  if ((x <= 0.0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 20)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function powf(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < exp)) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function normalize(v: V3): V3 {
  let len = sqrtApprox((((v.x * v.x) + (v.y * v.y)) + (v.z * v.z)));
  return {"x": (v.x / len), "y": (v.y / len), "z": (v.z / len)};
}
function dot(a: V3, b: V3): number {
  let d: number = (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
  if ((d < 0.0)) {
    return -d;
  }
  return 0.0;
}
function drawSphere(r: number, k: number, ambient: number, light: V3, shades: string) {
  let i: number = -r;
  while ((i <= r)) {
    let x: number = (i + 0.5);
    let line: string = "";
    let j: number = -(2 * r);
    while ((j <= (2 * r))) {
      let y: number = ((j / 2.0) + 0.5);
      if ((((x * x) + (y * y)) <= (r * r))) {
        let zsq: number = (((r * r) - (x * x)) - (y * y));
        let vec: V3 = normalize({x, y, "z": sqrtApprox(zsq)});
        let b: number = (powf(dot(light, vec), k) + ambient);
        let intensity: number = Math.trunc(((1.0 - b) * ((Array.isArray(shades) || typeof shades === 'string' ? shades.length : Object.keys(shades ?? {}).length) - 1.0)));
        if ((intensity < 0)) {
          intensity = 0;
        }
        if ((intensity >= (Array.isArray(shades) || typeof shades === 'string' ? shades.length : Object.keys(shades ?? {}).length))) {
          intensity = ((Array.isArray(shades) || typeof shades === 'string' ? shades.length : Object.keys(shades ?? {}).length) - 1);
        }
        line = (line + (shades).substring(intensity, (intensity + 1)));
      } else {
        line = (line + " ");
      }
      j = (j + 1);
    }
    console.log(line);
    i = (i + 1);
  }
}
function main() {
  let shades: string = ".:!*oe&#%@";
  let light: V3 = normalize({"x": 30.0, "y": 30.0, "z": -50.0});
  drawSphere(20, 4, 0.1, light, shades);
  drawSphere(10, 2, 0.4, light, shades);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

