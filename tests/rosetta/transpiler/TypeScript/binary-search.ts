// Generated by Mochi v0.10.56 on 2025-08-03 17:23:20 GMT+7

function bsearch(arr: number[], x: number): number {
  let low: number = 0;
  let high: number = (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
  while ((low <= high)) {
    let mid: number = Math.trunc((low + high) / 2);
    if ((arr[mid] > x)) {
      high = (mid - 1);
    } else {
      if ((arr[mid] < x)) {
        low = (mid + 1);
      } else {
        return mid;
      }
    }
  }
  return -1;
}
function bsearchRec(arr: number[], x: number, low: number, high: number): number {
  if ((high < low)) {
    return -1;
  }
  let mid: number = Math.trunc((low + high) / 2);
  if ((arr[mid] > x)) {
    return bsearchRec(arr, x, low, (mid - 1));
  } else {
    if ((arr[mid] < x)) {
      return bsearchRec(arr, x, (mid + 1), high);
    }
  }
  return mid;
}
function main() {
  let nums: number[] = [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782];
  let x: number = 2;
  let idx: number = bsearch(nums, x);
  if ((idx >= 0)) {
    console.log(_str((((_str(x) + " is at index ") + _str(idx)) + ".")));
  } else {
    console.log(_str((_str(x) + " is not found.")));
  }
  x = 5;
  idx = bsearchRec(nums, x, 0, (Number(Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length) - 1));
  if ((idx >= 0)) {
    console.log(_str((((_str(x) + " is at index ") + _str(idx)) + ".")));
  } else {
    console.log(_str((_str(x) + " is not found.")));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

