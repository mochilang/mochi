// Generated by Mochi v0.10.42 on 2025-07-27 21:20:57 GMT+7

function pad2(n: number): string {
  if ((n < 10)) {
    return ("0" + String(n));
  }
  return String(n);
}
function weekdayName(z: number): string {
  let names: string[] = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  return names[Math.trunc(((z + 4) % 7))];
}
function main() {
  let ts: number = Math.trunc(Math.trunc(_now() / 1000000000));
  let days: number = Math.trunc(Math.trunc(ts / 86400));
  let z: number = (days + 719468);
  let era: number = Math.trunc(Math.trunc(z / 146097));
  let doe: number = (z - (era * 146097));
  let yoe: number = Math.trunc((((doe - Math.trunc(doe / 1460)) + Math.trunc(doe / 36524)) - Math.trunc(doe / 146096)) / Math.trunc(365));
  let y: number = (yoe + (era * 400));
  let doy: number = (doe - (((365 * yoe) + Math.trunc(yoe / 4)) - Math.trunc(yoe / 100)));
  let mp: number = Math.trunc(((5 * doy) + 2) / Math.trunc(153));
  let d: number = Math.trunc(((doy - Math.trunc(((153 * mp) + 2) / Math.trunc(5))) + 1));
  let m: number = Math.trunc((mp + 3));
  if ((m > 12)) {
    y = (y + 1);
    m = (m - 12);
  }
  let iso: string = ((((String(y) + "-") + pad2(m)) + "-") + pad2(d));
  console.log(iso);
  let months: string[] = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  let line: string = ((((((weekdayName(days) + ", ") + months[Math.trunc((m - 1))]) + " ") + String(d)) + ", ") + String(y));
  console.log(line);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

