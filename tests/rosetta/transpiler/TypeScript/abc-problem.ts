// Generated by Mochi v0.10.40 on 2025-07-25 17:09:10 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function fields(s: string): string[] {
    let res: string[] = [];
    let cur: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      const c: string = s.slice(i, (i + 1));
      if ((c == " ")) {
        if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
          res = [...res, cur];
          cur = "";
        }
      } else {
        cur = (cur + c);
      }
      i = (i + 1);
    }
    if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
      res = [...res, cur];
    }
    return res;
  }
  function canSpell(word: string, blks: string[]): boolean {
    if (((Array.isArray(word) || typeof word === 'string' ? word.length : Object.keys(word ?? {}).length) == 0)) {
      return true;
    }
    const c: string = word.slice(0, 1).toLowerCase();
    let i: number = 0;
    while ((i < (Array.isArray(blks) || typeof blks === 'string' ? blks.length : Object.keys(blks ?? {}).length))) {
      const b: string = blks[i];
      if (((c == b.slice(0, 1).toLowerCase()) || (c == b.slice(1, 2).toLowerCase()))) {
        let rest: string[] = [];
        let j: number = 0;
        while ((j < (Array.isArray(blks) || typeof blks === 'string' ? blks.length : Object.keys(blks ?? {}).length))) {
          if ((j != i)) {
            rest = [...rest, blks[j]];
          }
          j = (j + 1);
        }
        if (canSpell(word.slice(1), rest)) {
          return true;
        }
      }
      i = (i + 1);
    }
    return false;
  }
  function newSpeller(blocks: string) {
    const bl: string[] = fields(blocks);
    return (w) => canSpell(w, bl);
  }
  function main() {
    const sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM");
    for (const word of ["A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"]) {
      console.log(((word + " ") + String(sp(word))));
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

