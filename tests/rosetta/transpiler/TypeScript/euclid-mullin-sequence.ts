// Generated by Mochi v0.10.42 on 2025-07-27 23:33:12 GMT+7

let zero: bigint = 0n;
let one: bigint = 1n;
let two: bigint = 2n;
let three: bigint = 3n;
let four: bigint = 4n;
let five: bigint = 5n;
let six: bigint = 6n;
let ten: bigint = 10n;
let k100: bigint = 100000n;
function gcd(a: bigint, b: bigint): bigint {
  let x: bigint = a;
  let y: bigint = b;
  while ((y != zero)) {
    let t: bigint = (x % y);
    x = y;
    y = t;
  }
  return x;
}
function absBig(x: bigint): bigint {
  if ((x < zero)) {
    return (zero - x);
  }
  return x;
}
function pollardRho(n: bigint, c: bigint): bigint {
  function g(x: bigint, y: bigint): bigint {
    let x2: bigint = (x * x);
    x2 = (x2 + c);
    return (x2 % y);
  }
  let x: bigint = 2n;
  let y: bigint = 2n;
  let z: bigint = 1n;
  let d: bigint = 0n;
  let count: number = 0;
  while (true) {
    x = g(x, n);
    y = g(g(y, n), n);
    d = absBig((x - y));
    d = (d % n);
    z = (z * d);
    count = (count + 1);
    if ((count == 100)) {
      d = gcd(z, n);
      if ((d != one)) {
        break
      }
      z = one;
      count = 0;
    }
  }
  if ((d == n)) {
    return zero;
  }
  return d;
}
function smallestPrimeFactorWheel(n: bigint, max: bigint): bigint {
  if (((n % two) == zero)) {
    return two;
  }
  if (((n % three) == zero)) {
    return three;
  }
  if (((n % five) == zero)) {
    return five;
  }
  let k: bigint = 7n;
  let inc: bigint[] = [four, two, four, two, four, six, two, six];
  let i: number = 0;
  while (((k * k) <= n)) {
    if (((n % k) == zero)) {
      return k;
    }
    k = (k + inc[i]);
    if ((k > max)) {
      break
    }
    i = ((i + 1) % 8);
  }
  return zero;
}
function smallestPrimeFactor(n: bigint): bigint {
  let s: bigint = smallestPrimeFactorWheel(n, k100);
  if ((s != zero)) {
    return s;
  }
  let c: bigint = 1n;
  while (true) {
    let d: bigint = pollardRho(n, c);
    if ((d == zero)) {
      if ((c == ten)) {
        return n;
      }
      c = (c + one);
    } else {
      let factor: bigint = smallestPrimeFactorWheel(d, d);
      let s2: bigint = smallestPrimeFactorWheel((n / d), factor);
      if ((s2 != zero)) {
        if ((s2 < factor)) {
          return s2;
        } else {
          return factor;
        }
      }
      return factor;
    }
  }
}
function main() {
  let k: number = 19;
  console.log((("First " + String(k)) + " terms of the Euclidâ€“Mullin sequence:"));
  console.log(2);
  let prod: bigint = 2n;
  let count: number = 1;
  while ((count < k)) {
    let z: bigint = (prod + one);
    let t: bigint = smallestPrimeFactor(z);
    console.log(t);
    prod = (prod * t);
    count = (count + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

