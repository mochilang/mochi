// Generated by Mochi v0.10.40 on 2025-07-25 17:22:34 GMT+7

export interface Complex { re: number; im: number }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function add(a: Complex, b: Complex): Complex {
    return {"re": (a.re + b.re), "im": (a.im + b.im)};
  }
  function mul(a: Complex, b: Complex): Complex {
    return {"re": ((a.re * b.re) - (a.im * b.im)), "im": ((a.re * b.im) + (a.im * b.re))};
  }
  function neg(a: Complex): Complex {
    return {"re": -a.re, "im": -a.im};
  }
  function inv(a: Complex): Complex {
    const denom = ((a.re * a.re) + (a.im * a.im));
    return {"re": Math.trunc(a.re / denom), "im": Math.trunc(-a.im / denom)};
  }
  function conj(a: Complex): Complex {
    return {"re": a.re, "im": -a.im};
  }
  function cstr(a: Complex): string {
    let s: string = ("(" + String(a.re));
    if ((a.im >= 0)) {
      s = (((s + "+") + String(a.im)) + "i)");
    } else {
      s = ((s + String(a.im)) + "i)");
    }
    return s;
  }
  const a: Complex = {"re": 1.0, "im": 1.0};
  const b: Complex = {"re": 3.14159, "im": 1.25};
  console.log(("a:       " + cstr(a)));
  console.log(("b:       " + cstr(b)));
  console.log(("a + b:   " + cstr(add(a, b))));
  console.log(("a * b:   " + cstr(mul(a, b))));
  console.log(("-a:      " + cstr(neg(a))));
  console.log(("1 / a:   " + cstr(inv(a))));
  console.log(("aÌ…:       " + cstr(conj(a))));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

