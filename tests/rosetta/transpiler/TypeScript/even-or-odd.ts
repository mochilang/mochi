// Generated by Mochi v0.10.42 on 2025-07-28 00:41:09 GMT+7

function parseBigInt(str: string): bigint {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && ((str).substring(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: bigint = 0n;
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    let ch = (str).substring(i, (i + 1));
    let d: number = Math.trunc(ch);
    n = ((n * 10n) + BigInt(d));
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function pad(n: number, width: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function showInt(n: number) {
  let line: string = (("Testing integer " + pad(n, 3)) + ":  ");
  if (((n % 2) == 0)) {
    line = (line + "even ");
  } else {
    line = (line + " odd ");
  }
  if (((n % 2) == 0)) {
    line = (line + "even");
  } else {
    line = (line + " odd");
  }
  console.log(line);
}
function showBig(s: string) {
  let b: bigint = parseBigInt(s);
  let line: string = (("Testing big integer " + String(b)) + ":  ");
  if (((b % 2n) == 0n)) {
    line = (line + "even");
  } else {
    line = (line + "odd");
  }
  console.log(line);
}
function main() {
  showInt(-2);
  showInt(-1);
  showInt(0);
  showInt(1);
  showInt(2);
  showBig("-222222222222222222222222222222222222");
  showBig("-1");
  showBig("0");
  showBig("1");
  showBig("222222222222222222222222222222222222");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

