// Generated by Mochi v0.10.40 on 2025-07-25 17:41:17 GMT+7

function trimLeftZeros(s: string): string {
  let i: number = 0;
  while (((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s).substring(i, (i + 1)) == "0"))) {
    i = (i + 1);
  }
  return (s).substring(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
}
function btString(s: string): Record<string, any> {
  s = trimLeftZeros(s);
  let b: number[] = [];
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  while ((i >= 0)) {
    const ch: string = (s).substring(i, (i + 1));
    if ((ch == "+")) {
      b = [...b, 1];
    } else {
      if ((ch == "0")) {
        b = [...b, 0];
      } else {
        if ((ch == "-")) {
          b = [...b, (0 - 1)];
        } else {
          return {"bt": [], "ok": false};
        }
      }
    }
    i = (i - 1);
  }
  return {"bt": b, "ok": true};
}
function btToString(b: number[]): string {
  if (((Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length) == 0)) {
    return "0";
  }
  let r: string = "";
  let i: number = ((Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length) - 1);
  while ((i >= 0)) {
    const d: number = b[i];
    if ((d == (0 - 1))) {
      r = (r + "-");
    } else {
      if ((d == 0)) {
        r = (r + "0");
      } else {
        r = (r + "+");
      }
    }
    i = (i - 1);
  }
  return r;
}
function btInt(i: number): number[] {
  if ((i == 0)) {
    return [];
  }
  let n: number = i;
  let b: number[] = [];
  while ((n != 0)) {
    let m: number = (n % 3);
    n = Math.trunc(Math.trunc(n / 3));
    if ((m == 2)) {
      m = (0 - 1);
      n = (n + 1);
    } else {
      if ((m == (0 - 2))) {
        m = 1;
        n = (n - 1);
      }
    }
    b = [...b, m];
  }
  return b;
}
function btToInt(b: number[]): number {
  let r: number = 0;
  let pt: number = 1;
  let i: number = 0;
  while ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    r = (r + (b[i] * pt));
    pt = (pt * 3);
    i = (i + 1);
  }
  return r;
}
function btNeg(b: number[]): number[] {
  let r: number[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    r = [...r, -b[i]];
    i = (i + 1);
  }
  return r;
}
function btAdd(a: number[], b: number[]): number[] {
  return btInt((btToInt(a) + btToInt(b)));
}
function btMul(a: number[], b: number[]): number[] {
  return btInt((btToInt(a) * btToInt(b)));
}
function padLeft(s: string, w: number): string {
  let r: string = s;
  while (((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) < w)) {
    r = (" " + r);
  }
  return r;
}
function show(label: string, b: number[]) {
  const l: string = padLeft(label, 7);
  const bs: string = padLeft(btToString(b), 12);
  const is: string = padLeft(String(btToInt(b)), 7);
  console.log(((((l + " ") + bs) + " ") + is));
}
function main() {
  const ares: Record<string, any> = btString("+-0++0+");
  const a = ares.bt;
  const b: number[] = btInt(-436);
  const cres: Record<string, any> = btString("+-++-");
  const c = cres.bt;
  show("a:", a);
  show("b:", b);
  show("c:", c);
  show("a(b-c):", btMul(a, btAdd(b, btNeg(c))));
}
main();
