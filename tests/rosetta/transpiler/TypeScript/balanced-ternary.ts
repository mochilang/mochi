// Generated by Mochi v0.10.56 on 2025-08-03 17:23:07 GMT+7

function trimLeftZeros(s: string): string {
  let i: number = 0;
  while (((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s).substring(i, (i + 1)) == "0"))) {
    i = (i + 1);
  }
  return (s).substring(i, Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
}
function btString(s: string): Record<string, any> {
  s = trimLeftZeros(s);
  let b: number[] = [];
  let i: number = (Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  while ((i >= 0)) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch == "+")) {
      b.push(1);
    } else {
      if ((ch == "0")) {
        b.push(0);
      } else {
        if ((ch == "-")) {
          b.push((0 - 1));
        } else {
          return {"bt": [], "ok": false};
        }
      }
    }
    i = (i - 1);
  }
  return {"bt": b, "ok": true};
}
function btToString(b: number[]): string {
  if ((Number(Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length) == 0)) {
    return "0";
  }
  let r: string = "";
  let i: number = (Number(Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length) - 1);
  while ((i >= 0)) {
    let d: number = b[i];
    if ((d == (0 - 1))) {
      r = (r + "-");
    } else {
      if ((d == 0)) {
        r = (r + "0");
      } else {
        r = (r + "+");
      }
    }
    i = (i - 1);
  }
  return r;
}
function btInt(i: number): number[] {
  if ((i == 0)) {
    return [];
  }
  let n: number = i;
  let b: number[] = [];
  while ((n != 0)) {
    let m: number = (n % 3);
    n = Math.trunc(Math.trunc(n / 3));
    if ((m == 2)) {
      m = (0 - 1);
      n = (n + 1);
    } else {
      if ((m == (0 - 2))) {
        m = 1;
        n = (n - 1);
      }
    }
    b.push(m);
  }
  return b;
}
function btToInt(b: number[]): number {
  let r: number = 0;
  let pt: number = 1;
  let i: number = 0;
  while ((i < Number(Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    r = (r + (b[i] * pt));
    pt = (pt * 3);
    i = (i + 1);
  }
  return r;
}
function btNeg(b: number[]): number[] {
  let r: number[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    r.push(-b[i]);
    i = (i + 1);
  }
  return r;
}
function btAdd(a: number[], b: number[]): number[] {
  return btInt((btToInt(a) + btToInt(b)));
}
function btMul(a: number[], b: number[]): number[] {
  return btInt((btToInt(a) * btToInt(b)));
}
function padLeft(s: string, w: number): string {
  let r: string = s;
  while ((Number(Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) < w)) {
    r = (" " + r);
  }
  return r;
}
function show(label: string, b: number[]) {
  let l: string = padLeft(label, 7);
  let bs: string = padLeft(btToString(b), 12);
  let is: string = padLeft(_str(btToInt(b)), 7);
  console.log(_str(((((l + " ") + bs) + " ") + is)));
}
function main() {
  let ares: Record<string, any> = btString("+-0++0+");
  let a = ares.bt;
  let b: number[] = btInt(-436);
  let cres: Record<string, any> = btString("+-++-");
  let c = cres.bt;
  show("a:", a);
  show("b:", b);
  show("c:", c);
  show("a(b-c):", btMul(a, btAdd(b, btNeg(c))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

