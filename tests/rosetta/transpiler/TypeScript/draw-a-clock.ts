// Generated by Mochi v0.10.57 on 2025-08-04 19:46:20 GMT+7

function pow2(exp: number): number {
  let r: number = 1;
  let i: number = 0;
  while ((i < exp)) {
    r = (r * 2);
    i = (i + 1);
  }
  return r;
}
function bin(n: number, digits: number): string {
  let s: string = "";
  let i: number = (digits - 1);
  while ((i >= 0)) {
    let p: number = pow2(i);
    if ((n >= p)) {
      s = (s + "x");
      n = (n - p);
    } else {
      s = (s + " ");
    }
    if ((i > 0)) {
      s = (s + "|");
    }
    i = (i - 1);
  }
  return s;
}
let xs: string = "";
let i: number = 0;
let out: string = "";
let j: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let t: number
let sec: number
let mins: number
let min: number
let hour: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
t = Math.trunc(_now() / 1000000000)
sec = (t % 60)
mins = Math.trunc(t / 60)
min = (mins % 60)
hour = (Math.trunc(mins / 60) % 24)
  console.log(_str(bin(hour, 8)));
  console.log(_str(""));
  console.log(_str(bin(min, 8)));
  console.log(_str(""));
  while ((i < sec)) {
    xs = (xs + "x");
    i = (i + 1);
  }
  while ((j < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    out = (out + (xs).substring(j, (j + 1)));
    if (((((j + 1) % 5) == 0) && ((j + 1) < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length)))) {
      out = (out + "|");
    }
    j = (j + 1);
  }
  console.log(_str(out));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

