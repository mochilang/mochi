// Generated by Mochi v0.10.39 on 2025-07-24 15:22:41 GMT+7

function primeFactors(n: number): number[] {
  let factors: number[] = [];
  let x: number = n;
  while (((x % 2) == 0)) {
    factors = [...factors, 2];
    x = Math.trunc(Math.trunc(x / 2));
  }
  let p: number = 3;
  while (((p * p) <= x)) {
    while (((x % p) == 0)) {
      factors = [...factors, p];
      x = Math.trunc(Math.trunc(x / p));
    }
    p = (p + 2);
  }
  if ((x > 1)) {
    factors = [...factors, x];
  }
  return factors;
}
function commatize(n: number): string {
  let s: string = String(n);
  let out: string = "";
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  let c: number = 0;
  while ((i >= 0)) {
    out = ((s).substring(i, (i + 1)) + out);
    c = (c + 1);
    if ((((c % 3) == 0) && (i > 0))) {
      out = ("," + out);
    }
    i = (i - 1);
  }
  return out;
}
function indexOf(s: string, sub: string): number {
  let i: number = 0;
  while (((i + (Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + (Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length))) == sub)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function pad10(s: string): string {
  let str: string = s;
  while (((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) < 10)) {
    str = (" " + str);
  }
  return str;
}
function trimRightStr(s: string): string {
  let end: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while (((end > 0) && ((s).substring((end - 1), end) == " "))) {
    end = (end - 1);
  }
  return (s).substring(0, end);
}
function main() {
  let res: number[] = [];
  let count: number = 0;
  let k: number = (11 * 11);
  while ((count < 20)) {
    if (((((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0))) {
      k = (k + 2);
      continue
    }
    const factors: number[] = primeFactors(k);
    if (((Array.isArray(factors) || typeof factors === 'string' ? factors.length : Object.keys(factors ?? {}).length) > 1)) {
      const s: string = String(k);
      let includesAll: boolean = true;
      let prev: number = -1;
      for (const f of factors) {
        if ((f == prev)) {
          continue
        }
        const fs = String(f);
        if ((s.indexOf(fs) == -1)) {
          includesAll = false;
          break
        }
        prev = f;
      }
      if (includesAll) {
        res = [...res, k];
        count = (count + 1);
      }
    }
    k = (k + 2);
  }
  let line: string = "";
  for (const e of res.slice(0, 10)) {
    line = ((line + pad10(commatize(e))) + " ");
  }
  console.log(trimRightStr(line));
  line = "";
  for (const e of res.slice(10, 20)) {
    line = ((line + pad10(commatize(e))) + " ");
  }
  console.log(trimRightStr(line));
}
main();
