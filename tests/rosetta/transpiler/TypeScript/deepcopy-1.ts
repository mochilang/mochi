// Generated by Mochi v0.10.39 on 2025-07-24 18:23:28 GMT+7

export interface cds { i: number; s: string; b: number[]; m: Record<number, boolean> }
function copyList(src: number[]): number[] {
  let out: number[] = [];
  for (const v of src) {
    out = [...out, v];
  }
  return out;
}
function copyMap(src: Record<number, boolean>): Record<number, boolean> {
  let out: Record<number, boolean> = {};
  for (const k in src) {
    out[k] = src[k];
  }
  return out;
}
function deepcopy(c: cds): cds {
  return {"i": c.i, "s": c.s, "b": copyList(c.b), "m": copyMap(c.m)};
}
function cdsStr(c: cds): string {
  let bs: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(c.b) || typeof c.b === 'string' ? c.b.length : Object.keys(c.b ?? {}).length))) {
    bs = (bs + String(c.b[i]));
    if ((i < ((Array.isArray(c.b) || typeof c.b === 'string' ? c.b.length : Object.keys(c.b ?? {}).length) - 1))) {
      bs = (bs + " ");
    }
    i = (i + 1);
  }
  bs = (bs + "]");
  let ms: string = "map[";
  let first: boolean = true;
  for (const k in c.m) {
    if (!first) {
      ms = (ms + " ");
    }
    ms = (((ms + String(k)) + ":") + String(c.m[k]));
    first = false;
  }
  ms = (ms + "]");
  return (((((((("{" + String(c.i)) + " ") + c.s) + " ") + bs) + " ") + ms) + "}");
}
let c1: cds = {"i": 1, "s": "one", "b": [117, 110, 105, 116], "m": {[1]: true}};
let c2: cds = deepcopy(c1);
console.log(cdsStr(c1));
console.log(cdsStr(c2));
c1 = {"i": 0, "s": "nil", "b": [122, 101, 114, 111], "m": {[1]: false}};
console.log(cdsStr(c1));
console.log(cdsStr(c2));
