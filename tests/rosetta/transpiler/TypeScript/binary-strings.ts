// Generated by Mochi v0.10.42 on 2025-07-27 20:11:35 GMT+7

function char(n: number): string {
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  let idx: number = (n - 97);
  if (((idx < 0) || (idx >= (Array.isArray(letters) || typeof letters === 'string' ? letters.length : Object.keys(letters ?? {}).length)))) {
    return "?";
  }
  return (letters).substring(idx, (idx + 1));
}
function fromBytes(bs: number[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    s = (s + char(bs[i]));
    i = (i + 1);
  }
  return s;
}
let b: number[] = [98, 105, 110, 97, 114, 121];
let c: number[] = b;
let d: number[] = [];
let i: number = 0;
let z: any[] = [...b, 122];
let sub: number[] = b.slice(1, 3);
let f: number[] = [];
let rem: number[] = [];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(String(b));
  console.log(String(c));
  console.log(String((b == c)));
  while ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    d.push(b[i]);
    i = (i + 1);
  }
  d[1] = 97;
  d[4] = 110;
  console.log(fromBytes(b));
  console.log(fromBytes(d));
  console.log(String(((Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length) == 0)));
  console.log(fromBytes(z));
  console.log(fromBytes(sub));
  i = 0;
  while ((i < (Array.isArray(d) || typeof d === 'string' ? d.length : Object.keys(d ?? {}).length))) {
    let val: number = d[i];
    if ((val == 110)) {
      f.push(109);
    } else {
      f.push(val);
    }
    i = (i + 1);
  }
  console.log(((fromBytes(d) + " -> ") + fromBytes(f)));
  rem.push(b[Math.trunc(0)]);
  i = 3;
  while ((i < (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length))) {
    rem.push(b[i]);
    i = (i + 1);
  }
  console.log(fromBytes(rem));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

