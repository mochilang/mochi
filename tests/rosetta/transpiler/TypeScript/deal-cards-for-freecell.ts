// Generated by Mochi v0.10.42 on 2025-07-27 21:20:59 GMT+7

let seed: number = 1;
function rnd(): number {
  seed = (((seed * 214013) + 2531011) % 2147483648);
  return Math.trunc(seed / 65536);
}
function deal(game: number): number[] {
  seed = game;
  let deck: number[] = [];
  let i: number = 0;
  while ((i < 52)) {
    deck.push((51 - i));
    i = (i + 1);
  }
  i = 0;
  while ((i < 51)) {
    let j: number = (51 - (rnd() % (52 - i)));
    let tmp: number = deck[i];
    deck[i] = deck[j];
    deck[j] = tmp;
    i = (i + 1);
  }
  return deck;
}
let suits: string = "CDHS";
let nums: string = "A23456789TJQK";
function show(cards: number[]) {
  let i: number = 0;
  while ((i < (Array.isArray(cards) || typeof cards === 'string' ? cards.length : Object.keys(cards ?? {}).length))) {
    let c: number = cards[i];
    _stdout_write(((" " + (nums).substring(Math.trunc(c / 4), (Math.trunc(c / 4) + 1))) + (suits).substring((c % 4), ((c % 4) + 1))));
    if (((((i + 1) % 8) == 0) || ((i + 1) == (Array.isArray(cards) || typeof cards === 'string' ? cards.length : Object.keys(cards ?? {}).length)))) {
      console.log("");
    }
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log("");
  console.log("Game #1");
  show(deal(1));
  console.log("");
  console.log("Game #617");
  show(deal(617));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

