// Generated by Mochi v0.10.42 on 2025-07-27 20:33:37 GMT+7

function main() {
  let pkg_dog: string = "Salt";
  let Dog: string = "Pepper";
  let pkg_DOG: string = "Mustard";
  function packageSees(d1: string, d2: string, d3: string): Record<string, boolean> {
    console.log(((((("Package sees: " + d1) + " ") + d2) + " ") + d3));
    return {"pkg_dog": true, "Dog": true, "pkg_DOG": true};
  }
  let d = packageSees(pkg_dog, Dog, pkg_DOG);
  console.log((("There are " + String((Array.isArray(d) || typeof d === 'string' ? d.length : Object.keys(d ?? {}).length))) + " dogs.\n"));
  let dog: string = "Benjamin";
  d = packageSees(pkg_dog, Dog, pkg_DOG);
  console.log(((((("Main sees:   " + dog) + " ") + Dog) + " ") + pkg_DOG));
  d.dog = true;
  d.Dog = true;
  d.pkg_DOG = true;
  console.log((("There are " + String((Array.isArray(d) || typeof d === 'string' ? d.length : Object.keys(d ?? {}).length))) + " dogs.\n"));
  Dog = "Samba";
  d = packageSees(pkg_dog, Dog, pkg_DOG);
  console.log(((((("Main sees:   " + dog) + " ") + Dog) + " ") + pkg_DOG));
  d.dog = true;
  d.Dog = true;
  d.pkg_DOG = true;
  console.log((("There are " + String((Array.isArray(d) || typeof d === 'string' ? d.length : Object.keys(d ?? {}).length))) + " dogs.\n"));
  let DOG: string = "Bernie";
  d = packageSees(pkg_dog, Dog, pkg_DOG);
  console.log(((((("Main sees:   " + dog) + " ") + Dog) + " ") + DOG));
  d.dog = true;
  d.Dog = true;
  d.pkg_DOG = true;
  d.DOG = true;
  console.log((("There are " + String((Array.isArray(d) || typeof d === 'string' ? d.length : Object.keys(d ?? {}).length))) + " dogs."));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

