// Generated by Mochi v0.10.41 on 2025-07-27 12:29:35 GMT+7

function getDivisors(n: number): number[] {
  let divs: number[] = [1, n];
  let i: number = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      let j: number = Math.trunc(Math.trunc(n / i));
      divs.push(i);
      if ((i != j)) {
        divs.push(j);
      }
    }
    i = (i + 1);
  }
  return divs;
}
function sum(xs: number[]): number {
  let s: number = 0;
  for (const x of xs) {
    s = (s + x);
  }
  return s;
}
function isPartSum(divs: number[], target: number): boolean {
  let possible: boolean[] = [];
  let i: number = 0;
  while ((i <= target)) {
    possible.push(false);
    i = (i + 1);
  }
  possible[0] = true;
  for (const v of divs) {
    let s: number = target;
    while ((s >= v)) {
      if (possible[Math.trunc((s - v))]) {
        possible[s] = true;
      }
      s = (s - 1);
    }
  }
  return possible[target];
}
function isZumkeller(n: number): boolean {
  let divs: number[] = getDivisors(n);
  let s: number = divs.reduce((a, b) => a + b, 0.0);
  if (((s % 2) == 1)) {
    return false;
  }
  if (((n % 2) == 1)) {
    let abundance: number = (s - (2 * n));
    return ((abundance > 0) && ((abundance % 2) == 0));
  }
  return isPartSum(divs, Math.trunc(s / 2));
}
function pad(n: number, width: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  console.log("The first 220 Zumkeller numbers are:");
  let count: number = 0;
  let line: string = "";
  let i: number = 2;
  while ((count < 220)) {
    if (isZumkeller(i)) {
      line = ((line + pad(i, 3)) + " ");
      count = (count + 1);
      if (((count % 20) == 0)) {
        console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1)));
        line = "";
      }
    }
    i = (i + 1);
  }
  console.log("\nThe first 40 odd Zumkeller numbers are:");
  count = 0;
  line = "";
  i = 3;
  while ((count < 40)) {
    if (isZumkeller(i)) {
      line = ((line + pad(i, 5)) + " ");
      count = (count + 1);
      if (((count % 10) == 0)) {
        console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1)));
        line = "";
      }
    }
    i = (i + 2);
  }
  console.log("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:");
  count = 0;
  line = "";
  i = 3;
  while ((count < 40)) {
    if ((((i % 10) != 5) && isZumkeller(i))) {
      line = ((line + pad(i, 7)) + " ");
      count = (count + 1);
      if (((count % 8) == 0)) {
        console.log((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1)));
        line = "";
      }
    }
    i = (i + 2);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

