// Generated by Mochi v0.10.42 on 2025-07-28 01:01:03 GMT+7

function digitSumMod(n: number, base: number): number {
  let sum: number = 0;
  let j: number = n;
  while ((j > 0)) {
    sum = (sum + (j % base));
    j = Math.trunc(j / base);
  }
  return (sum % base);
}
function fairshareList(n: number, base: number): number[] {
  let res: number[] = [];
  let i: number = 0;
  while ((i < n)) {
    res.push(digitSumMod(i, base));
    i = (i + 1);
  }
  return res;
}
function sortInts(xs: number[]): number[] {
  let arr: number[] = xs;
  let i: number = 0;
  while ((i < (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    let j: number = 0;
    while ((j < ((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1))) {
      if ((arr[j] > arr[Math.trunc((j + 1))])) {
        let t: number = arr[j];
        arr[j] = arr[Math.trunc((j + 1))];
        arr[(j + 1)] = t;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function turns(n: number, base: number): string {
  let counts: number[] = [];
  let i: number = 0;
  while ((i < base)) {
    counts.push(0);
    i = (i + 1);
  }
  i = 0;
  while ((i < n)) {
    let v: number = digitSumMod(i, base);
    counts[v] = (counts[v] + 1);
    i = (i + 1);
  }
  let freq: Record<number, number> = {};
  let fkeys: number[] = [];
  i = 0;
  while ((i < base)) {
    let c: number = counts[i];
    if ((c > 0)) {
      if ((c in freq)) {
        freq[c] = (freq[c] + 1);
      } else {
        freq[c] = 1;
        fkeys.push(c);
      }
    }
    i = (i + 1);
  }
  let total: number = 0;
  i = 0;
  while ((i < (Array.isArray(fkeys) || typeof fkeys === 'string' ? fkeys.length : Object.keys(fkeys ?? {}).length))) {
    total = (total + freq[Math.trunc(fkeys[i])]);
    i = (i + 1);
  }
  if ((total != base)) {
    return (("only " + _str(total)) + " have a turn");
  }
  fkeys = sortInts(fkeys);
  let res: string = "";
  i = 0;
  while ((i < (Array.isArray(fkeys) || typeof fkeys === 'string' ? fkeys.length : Object.keys(fkeys ?? {}).length))) {
    if ((i > 0)) {
      res = (res + " or ");
    }
    res = (res + _str(fkeys[i]));
    i = (i + 1);
  }
  return res;
}
function main() {
  let bases1: number[] = [2, 3, 5, 11];
  let i: number = 0;
  while ((i < (Array.isArray(bases1) || typeof bases1 === 'string' ? bases1.length : Object.keys(bases1 ?? {}).length))) {
    let b: number = bases1[i];
    console.log(_str(((String(_str(b)).padStart(2, " ") + " : ") + _str(fairshareList(25, b)))));
    i = (i + 1);
  }
  console.log(_str(""));
  console.log(_str("How many times does each get a turn in 50000 iterations?"));
  let bases2: number[] = [191, 1377, 49999, 50000, 50001];
  i = 0;
  while ((i < (Array.isArray(bases2) || typeof bases2 === 'string' ? bases2.length : Object.keys(bases2 ?? {}).length))) {
    let b: number = bases2[i];
    let t: string = turns(50000, b);
    console.log(_str(((("  With " + _str(b)) + " people: ") + t)));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

