// Generated by Mochi v0.10.42 on 2025-07-28 10:40:00 GMT+7

function pfacSum(i: number): number {
  let sum: number = 0;
  let p: number = 1;
  while ((p <= Math.trunc(i / 2))) {
    if (((i % p) == 0)) {
      sum = (sum + p);
    }
    p = (p + 1);
  }
  return sum;
}
function main() {
  let d: number = 0;
  let a: number = 0;
  let pnum: number = 0;
  let i: number = 1;
  while ((i <= 20000)) {
    let j: number = pfacSum(i);
    if ((j < i)) {
      d = (d + 1);
    }
    if ((j == i)) {
      pnum = (pnum + 1);
    }
    if ((j > i)) {
      a = (a + 1);
    }
    i = (i + 1);
  }
  console.log(_str((("There are " + _str(d)) + " deficient numbers between 1 and 20000")));
  console.log(_str((("There are " + _str(a)) + " abundant numbers  between 1 and 20000")));
  console.log(_str((("There are " + _str(pnum)) + " perfect numbers between 1 and 20000")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

