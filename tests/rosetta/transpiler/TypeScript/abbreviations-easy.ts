// Generated by Mochi v0.10.37 on 2025-07-23 10:25:52 GMT+7

function fields(s: string): string[] {
  let words: string[] = [];
  let cur = "";
  let i = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch = (s).substring(i, (i + 1));
    if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        words = [...words, cur];
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    words = [...words, cur];
  }
  return words;
}
function padRight(s: string, width: number): string {
  let out = s;
  let i = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while ((i < width)) {
    out = (out + " ");
    i = (i + 1);
  }
  return out;
}
function join(xs: string[], sep: string): string {
  let res = "";
  let i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function validate(commands: string[], words: string[], mins: number[]): string[] {
  let results: string[] = [];
  if (((Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length) == 0)) {
    return results;
  }
  let wi = 0;
  while ((wi < (Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length))) {
    const w = words[wi];
    let found = false;
    const wlen = (Array.isArray(w) || typeof w === 'string' ? w.length : Object.keys(w ?? {}).length);
    let ci = 0;
    while ((ci < (Array.isArray(commands) || typeof commands === 'string' ? commands.length : Object.keys(commands ?? {}).length))) {
      const cmd = commands[ci];
      if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= (Array.isArray(cmd) || typeof cmd === 'string' ? cmd.length : Object.keys(cmd ?? {}).length)))) {
        const c = cmd.toUpperCase();
        const ww = w.toUpperCase();
        if (((c).substring(0, wlen) == ww)) {
          results = [...results, c];
          found = true;
          break
        }
      }
      ci = (ci + 1);
    }
    if (!found) {
      results = [...results, "*error*"];
    }
    wi = (wi + 1);
  }
  return results;
}
function main() {
  const table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ");
  const commands = fields(table);
  let mins: number[] = [];
  let i = 0;
  while ((i < (Array.isArray(commands) || typeof commands === 'string' ? commands.length : Object.keys(commands ?? {}).length))) {
    let count = 0;
    let j = 0;
    const cmd = commands[i];
    while ((j < (Array.isArray(cmd) || typeof cmd === 'string' ? cmd.length : Object.keys(cmd ?? {}).length))) {
      const ch = (cmd).substring(j, (j + 1));
      if (((ch >= "A") && (ch <= "Z"))) {
        count = (count + 1);
      }
      j = (j + 1);
    }
    mins = [...mins, count];
    i = (i + 1);
  }
  const sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
  const words = fields(sentence);
  const results = validate(commands, words, mins);
  let out1 = "user words:  ";
  let k = 0;
  while ((k < (Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length))) {
    out1 = ((out1 + padRight(words[k], (Array.isArray(results[k]) || typeof results[k] === 'string' ? results[k].length : Object.keys(results[k] ?? {}).length))) + " ");
    k = (k + 1);
  }
  console.log(out1);
  console.log(("full words:  " + join(results, " ")));
}
main();
