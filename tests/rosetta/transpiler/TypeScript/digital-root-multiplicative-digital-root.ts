// Generated by Mochi v0.10.42 on 2025-07-27 21:44:48 GMT+7

export interface MDRResult { mp: number; mdr: number }
function pad(s: string, width: number): string {
  let out: string = s;
  while (((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < width)) {
    out = (" " + out);
  }
  return out;
}
function mult(n: number, base: number): number {
  let m: number = 1;
  let x: number = n;
  let b: number = base;
  while ((x > 0)) {
    m = (m * (x % b));
    x = Math.trunc(x / b);
  }
  return m;
}
function multDigitalRoot(n: number, base: number): MDRResult {
  let m: number = n;
  let mp: number = 0;
  let b: number = base;
  while ((m >= b)) {
    m = mult(m, base);
    mp = (mp + 1);
  }
  return {mp, "mdr": Math.trunc(m)};
}
function main() {
  let base: number = 10;
  let size: number = 5;
  console.log(((((pad("Number", 20) + " ") + pad("MDR", 3)) + " ") + pad("MP", 3)));
  let nums: number[] = [123321, 7739, 893, 899998, 3778888999, 277777788888899];
  let i: number = 0;
  while ((i < (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length))) {
    let n: number = nums[i];
    let r: MDRResult = multDigitalRoot(n, base);
    console.log(((((pad(String(n), 20) + " ") + pad(String(r.mdr), 3)) + " ") + pad(String(r.mp), 3)));
    i = (i + 1);
  }
  console.log("");
  let list: number[][] = [];
  let idx: number = 0;
  while ((idx < base)) {
    list.push([]);
    idx = (idx + 1);
  }
  let cnt: number = (size * base);
  let n: number = 0;
  let b: number = base;
  while ((cnt > 0)) {
    let r: MDRResult = multDigitalRoot(n, base);
    let mdr: number = r.mdr;
    if (((Array.isArray(list[mdr]) || typeof list[mdr] === 'string' ? list[mdr].length : Object.keys(list[mdr] ?? {}).length) < size)) {
      list[mdr] = [...list[mdr], Math.trunc(n)];
      cnt = (cnt - 1);
    }
    n = (n + 1);
  }
  console.log("MDR: First");
  let j: number = 0;
  while ((j < base)) {
    console.log(((pad(String(j), 3) + ": ") + String(list[j])));
    j = (j + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

