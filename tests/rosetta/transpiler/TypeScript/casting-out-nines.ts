// Generated by Mochi v0.10.38 on 2025-07-23 19:59:18 GMT+7

export interface TestCase { base: number; begin: string; end: string; kaprekar: string[] }
function parseIntBase(s: string, base: number): number {
  const digits: string = "0123456789abcdefghijklmnopqrstuvwxyz";
  let n: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let j: number = 0;
    let v: number = 0;
    while ((j < (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
      if (((digits).substring(j, (j + 1)) == s.slice(i, (i + 1)))) {
        v = j;
        break
      }
      j = (j + 1);
    }
    n = ((n * base) + v);
    i = (i + 1);
  }
  return n;
}
function intToBase(n: number, base: number): string {
  const digits: string = "0123456789abcdefghijklmnopqrstuvwxyz";
  if ((n == 0)) {
    return "0";
  }
  let out: string = "";
  let v: number = n;
  while ((v > 0)) {
    const d: number = (v % base);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / base);
  }
  return out;
}
function subset(base: number, begin: string, end: string): string[] {
  let b: number = parseIntBase(begin, base);
  let e: number = parseIntBase(end, base);
  let out: string[] = [];
  let k: number = b;
  while ((k <= e)) {
    const ks: string = intToBase(k, base);
    const mod: number = (base - 1);
    const r1: number = (parseIntBase(ks, base) % mod);
    const r2: number = ((parseIntBase(ks, base) * parseIntBase(ks, base)) % mod);
    if ((r1 == r2)) {
      out = [...out, ks];
    }
    k = (k + 1);
  }
  return out;
}
const testCases: TestCase[] = [{"base": 10, "begin": "1", "end": "100", "kaprekar": ["1", "9", "45", "55", "99"]}, {"base": 17, "begin": "10", "end": "gg", "kaprekar": ["3d", "d4", "gg"]}];
let idx: number = 0;
while ((idx < (Array.isArray(testCases) || typeof testCases === 'string' ? testCases.length : Object.keys(testCases ?? {}).length))) {
  const tc: TestCase = testCases[idx];
  console.log((((((("\nTest case base = " + String(tc.base)) + ", begin = ") + tc.begin) + ", end = ") + tc.end) + ":"));
  const s = subset(tc.base, tc.begin, tc.end);
  console.log(("Subset:  " + String(s)));
  console.log(("Kaprekar:" + String(tc.kaprekar)));
  let sx: number = 0;
  let valid: boolean = true;
  let i: number = 0;
  while ((i < (Array.isArray(tc.kaprekar) || typeof tc.kaprekar === 'string' ? tc.kaprekar.length : Object.keys(tc.kaprekar ?? {}).length))) {
    const k = tc.kaprekar[i];
    let found: boolean = false;
    while ((sx < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if ((s[sx] == k)) {
        found = true;
        sx = (sx + 1);
        break
      }
      sx = (sx + 1);
    }
    if (!found) {
      console.log((("Fail:" + k) + " not in subset"));
      valid = false;
      break
    }
    i = (i + 1);
  }
  if (valid) {
    console.log("Valid subset.");
  }
  idx = (idx + 1);
}
