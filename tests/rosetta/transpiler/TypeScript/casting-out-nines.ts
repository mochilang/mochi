// Generated by Mochi v0.10.57 on 2025-08-04 16:11:26 GMT+7

export interface TestCase { base: number; begin: string; end: string; kaprekar: string[] }
function parseIntBase(s: string, base: number): number {
  let digits: string = "0123456789abcdefghijklmnopqrstuvwxyz";
  let n: number = 0;
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let j: number = 0;
    let v: number = 0;
    while ((j < Number(Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
      if (((digits).substring(j, (j + 1)) == s.slice(i, (i + 1)))) {
        v = j;
        break
      }
      j = (j + 1);
    }
    n = ((n * base) + v);
    i = (i + 1);
  }
  return n;
}
function intToBase(n: number, base: number): string {
  let digits: string = "0123456789abcdefghijklmnopqrstuvwxyz";
  if ((n == 0)) {
    return "0";
  }
  let out: string = "";
  let v: number = n;
  while ((v > 0)) {
    let d: number = (v % base);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / base);
  }
  return out;
}
function subset(base: number, begin: string, end: string): string[] {
  let b: number = parseIntBase(begin, base);
  let e: number = parseIntBase(end, base);
  let out: string[] = [];
  let k: number = b;
  while ((k <= e)) {
    let ks: string = intToBase(k, base);
    let mod: number = (base - 1);
    let r1: number = (parseIntBase(ks, base) % mod);
    let r2: number = ((parseIntBase(ks, base) * parseIntBase(ks, base)) % mod);
    if ((r1 == r2)) {
      out.push(ks);
    }
    k = (k + 1);
  }
  return out;
}
let testCases: TestCase[] = [{"base": 10, "begin": "1", "end": "100", "kaprekar": ["1", "9", "45", "55", "99"]}, {"base": 17, "begin": "10", "end": "gg", "kaprekar": ["3d", "d4", "gg"]}];
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  while ((idx < Number(Array.isArray(testCases) || typeof testCases === 'string' ? testCases.length : Object.keys(testCases ?? {}).length))) {
    let tc: TestCase = testCases[idx];
    console.log(_str((((((("\nTest case base = " + _str(tc.base)) + ", begin = ") + tc.begin) + ", end = ") + tc.end) + ":")));
    let s = subset(tc.base, tc.begin, tc.end);
    console.log(_str(("Subset:  " + _str(s))));
    console.log(_str(("Kaprekar:" + _str(tc.kaprekar))));
    let sx: number = 0;
    let valid: boolean = true;
    let i: number = 0;
    while ((i < Number(Array.isArray(tc.kaprekar) || typeof tc.kaprekar === 'string' ? tc.kaprekar.length : Object.keys(tc.kaprekar ?? {}).length))) {
      let k = tc.kaprekar[i];
      let found: boolean = false;
      while ((sx < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
        if ((s[sx] == k)) {
          found = true;
          sx = (sx + 1);
          break
        }
        sx = (sx + 1);
      }
      if (!found) {
        console.log(_str((("Fail:" + k) + " not in subset")));
        valid = false;
        break
      }
      i = (i + 1);
    }
    if (valid) {
      console.log(_str("Valid subset."));
    }
    idx = (idx + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

