// Generated by Mochi v0.10.40 on 2025-07-26 10:07:37 GMT+7

function primesUpTo(n: number): number[] {
  let sieve: boolean[] = [];
  let i: number = 0;
  while ((i <= n)) {
    sieve.push(true);
    i = (i + 1);
  }
  let p: number = 2;
  while (((p * p) <= n)) {
    if (sieve[p]) {
      let m: number = (p * p);
      while ((m <= n)) {
        sieve[m] = false;
        m = (m + p);
      }
    }
    p = (p + 1);
  }
  let res: number[] = [];
  let x: number = 2;
  while ((x <= n)) {
    if (sieve[x]) {
      res.push(x);
    }
    x = (x + 1);
  }
  return res;
}
let LIMIT: number = 999999;
let primes: number[] = primesUpTo(LIMIT);
function longestSeq(dir: string) {
  let pd: number = 0;
  let longSeqs: number[][] = [[2]];
  let currSeq: number[] = [2];
  let i: number = 1;
  while ((i < (Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length))) {
    let d: number = (primes[i] - primes[Math.trunc((i - 1))]);
    if ((((dir == "ascending") && (d <= pd)) || ((dir == "descending") && (d >= pd)))) {
      if (((Array.isArray(currSeq) || typeof currSeq === 'string' ? currSeq.length : Object.keys(currSeq ?? {}).length) > (Array.isArray(longSeqs[Math.trunc(0)]) || typeof longSeqs[Math.trunc(0)] === 'string' ? longSeqs[Math.trunc(0)].length : Object.keys(longSeqs[Math.trunc(0)] ?? {}).length))) {
        longSeqs = [currSeq];
      } else {
        if (((Array.isArray(currSeq) || typeof currSeq === 'string' ? currSeq.length : Object.keys(currSeq ?? {}).length) == (Array.isArray(longSeqs[Math.trunc(0)]) || typeof longSeqs[Math.trunc(0)] === 'string' ? longSeqs[Math.trunc(0)].length : Object.keys(longSeqs[Math.trunc(0)] ?? {}).length))) {
          longSeqs.push(currSeq);
        }
      }
      currSeq = [primes[Math.trunc((i - 1))], primes[i]];
    } else {
      currSeq.push(primes[i]);
    }
    pd = d;
    i = (i + 1);
  }
  if (((Array.isArray(currSeq) || typeof currSeq === 'string' ? currSeq.length : Object.keys(currSeq ?? {}).length) > (Array.isArray(longSeqs[Math.trunc(0)]) || typeof longSeqs[Math.trunc(0)] === 'string' ? longSeqs[Math.trunc(0)].length : Object.keys(longSeqs[Math.trunc(0)] ?? {}).length))) {
    longSeqs = [currSeq];
  } else {
    if (((Array.isArray(currSeq) || typeof currSeq === 'string' ? currSeq.length : Object.keys(currSeq ?? {}).length) == (Array.isArray(longSeqs[Math.trunc(0)]) || typeof longSeqs[Math.trunc(0)] === 'string' ? longSeqs[Math.trunc(0)].length : Object.keys(longSeqs[Math.trunc(0)] ?? {}).length))) {
      longSeqs.push(currSeq);
    }
  }
  console.log((((("Longest run(s) of primes with " + dir) + " differences is ") + String((Array.isArray(longSeqs[Math.trunc(0)]) || typeof longSeqs[Math.trunc(0)] === 'string' ? longSeqs[Math.trunc(0)].length : Object.keys(longSeqs[Math.trunc(0)] ?? {}).length))) + " :"));
  for (const ls of longSeqs) {
    let diffs: number[] = [];
    let j: number = 1;
    while ((j < (Array.isArray(ls) || typeof ls === 'string' ? ls.length : Object.keys(ls ?? {}).length))) {
      diffs.push((ls[j] - ls[Math.trunc((j - 1))]));
      j = (j + 1);
    }
    let k: number = 0;
    while ((k < ((Array.isArray(ls) || typeof ls === 'string' ? ls.length : Object.keys(ls ?? {}).length) - 1))) {
      _stdout_write((((String(ls[k]) + " (") + String(diffs[k])) + ") "));
      k = (k + 1);
    }
    console.log(String(ls[Math.trunc(((Array.isArray(ls) || typeof ls === 'string' ? ls.length : Object.keys(ls ?? {}).length) - 1))]));
  }
  console.log("");
}
function main() {
  console.log("For primes < 1 million:\n");
  for (const dir of ["ascending", "descending"]) {
    longestSeq(dir);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _stdout_write(s: string) {
  if (typeof Deno !== 'undefined') {
    Deno.stdout.writeSync(new TextEncoder().encode(s));
  } else if (typeof process !== 'undefined') {
    process.stdout.write(s);
  } else {
    console.log(s);
  }
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

