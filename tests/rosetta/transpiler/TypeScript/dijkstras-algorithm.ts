// Generated by Mochi v0.10.41 on 2025-07-26 19:37:00 GMT+7

let INF: number = 1000000000;
let graph: Record<string, Record<string, number>> = {};
function addEdge(u: string, v: string, w: number) {
  if (!(u in graph)) {
    graph[u] = {};
  }
  graph[u][v] = w;
  if (!(v in graph)) {
    graph[v] = {};
  }
}
function removeAt(xs: string[], idx: number): string[] {
  let out: string[] = [];
  let i: number = 0;
  for (const x of xs) {
    if ((i != idx)) {
      out.push(x);
    }
    i = (i + 1);
  }
  return out;
}
function dijkstra(source: string): Record<string, any> {
  let dist: Record<string, number> = {};
  let prev: Record<string, string> = {};
  for (const v in graph) {
    dist[v] = INF;
    prev[v] = "";
  }
  dist[source] = 0;
  let q: string[] = [];
  for (const v in graph) {
    q.push(v);
  }
  while (((Array.isArray(q) || typeof q === 'string' ? q.length : Object.keys(q ?? {}).length) > 0)) {
    let bestIdx: number = 0;
    let u: string = q[Math.trunc(0)];
    let i: number = 1;
    while ((i < (Array.isArray(q) || typeof q === 'string' ? q.length : Object.keys(q ?? {}).length))) {
      let v: string = q[i];
      if ((dist[v] < dist[u])) {
        u = v;
        bestIdx = i;
      }
      i = (i + 1);
    }
    q = removeAt(q, bestIdx);
    for (const v in graph[u]) {
      let alt: number = (dist[u] + graph[u][v]);
      if ((alt < dist[v])) {
        dist[v] = alt;
        prev[v] = u;
      }
    }
  }
  return {dist, prev};
}
function path(prev: Record<string, string>, v: string): string {
  let s: string = v;
  let cur: string = v;
  while ((prev[cur] != "")) {
    cur = prev[cur];
    s = (cur + s);
  }
  return s;
}
function main() {
  addEdge("a", "b", 7);
  addEdge("a", "c", 9);
  addEdge("a", "f", 14);
  addEdge("b", "c", 10);
  addEdge("b", "d", 15);
  addEdge("c", "d", 11);
  addEdge("c", "f", 2);
  addEdge("d", "e", 6);
  addEdge("e", "f", 9);
  let res: Record<string, any> = dijkstra("a");
  let dist: Record<string, number> = res.dist;
  let prev: Record<string, string> = res.prev;
  console.log(((("Distance to e: " + String(dist.e)) + ", Path: ") + path(prev, "e")));
  console.log(((("Distance to f: " + String(dist.f)) + ", Path: ") + path(prev, "f")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

