// Generated by Mochi v0.10.56 on 2025-08-03 17:26:02 GMT+7

function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function shuffle(xs: string[]): string[] {
  let arr: string[] = xs;
  let i: number = (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
  while ((i > 0)) {
    let j: number = (_now() % (i + 1));
    let tmp: string = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = (i - 1);
  }
  return arr;
}
function main() {
  console.log(_str("Cows and Bulls"));
  console.log(_str("Guess four digit number of unique digits in the range 1 to 9."));
  console.log(_str("A correct digit but not in the correct place is a cow."));
  console.log(_str("A correct digit in the correct place is a bull."));
  let digits: string[] = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
  digits = shuffle(digits);
  let pat: string = (((digits[Math.trunc(0)] + digits[Math.trunc(1)]) + digits[Math.trunc(2)]) + digits[Math.trunc(3)]);
  let valid: string = "123456789";
  while (true) {
    console.log(_str("Guess: "));
    let guess: string = _input();
    if ((Number(Array.isArray(guess) || typeof guess === 'string' ? guess.length : Object.keys(guess ?? {}).length) != 4)) {
      console.log(_str("Please guess a four digit number."));
      continue
    }
    let cows: number = 0;
    let bulls: number = 0;
    let seen: string = "";
    let i: number = 0;
    let malformed: boolean = false;
    while ((i < 4)) {
      let cg: string = (guess).substring(i, (i + 1));
      if ((seen.indexOf(cg) != -1)) {
        console.log(_str(("Repeated digit: " + cg)));
        malformed = true;
        break
      }
      seen = (seen + cg);
      let pos: number = pat.indexOf(cg);
      if ((pos == -1)) {
        if ((valid.indexOf(cg) == -1)) {
          console.log(_str(("Invalid digit: " + cg)));
          malformed = true;
          break
        }
      } else {
        if ((pos == i)) {
          bulls = (bulls + 1);
        } else {
          cows = (cows + 1);
        }
      }
      i = (i + 1);
    }
    if (malformed) {
      continue
    }
    console.log(_str(((("Cows: " + _str(cows)) + ", bulls: ") + _str(bulls))));
    if ((bulls == 4)) {
      console.log(_str("You got it."));
      break
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

