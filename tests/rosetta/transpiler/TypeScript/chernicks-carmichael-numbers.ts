// Generated by Mochi v0.10.42 on 2025-07-27 20:34:04 GMT+7

function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  let d: number = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}
function bigTrim(a: number[]): number[] {
  let n: number = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
  while (((n > 1) && (a[Math.trunc((n - 1))] == 0))) {
    a = a.slice(0, (n - 1));
    n = (n - 1);
  }
  return a;
}
function bigFromInt(x: number): number[] {
  if ((x == 0)) {
    return [0];
  }
  let digits: number[] = [];
  let n: number = x;
  while ((n > 0)) {
    digits.push((n % 10));
    n = Math.trunc(n / 10);
  }
  return digits;
}
function bigMulSmall(a: number[], m: number): number[] {
  if ((m == 0)) {
    return [0];
  }
  let res: number[] = [];
  let carry: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    let prod: number = ((a[i] * m) + carry);
    res.push((prod % 10));
    carry = Math.trunc(prod / 10);
    i = (i + 1);
  }
  while ((carry > 0)) {
    res.push((carry % 10));
    carry = Math.trunc(carry / 10);
  }
  return bigTrim(res);
}
function bigToString(a: number[]): string {
  let s: string = "";
  let i: number = ((Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length) - 1);
  while ((i >= 0)) {
    s = (s + String(a[i]));
    i = (i - 1);
  }
  return s;
}
function pow2(k: number): number {
  let r: number = 1;
  let i: number = 0;
  while ((i < k)) {
    r = (r * 2);
    i = (i + 1);
  }
  return r;
}
function ccFactors(n: number, m: number): number[] {
  let p: number = ((6 * m) + 1);
  if (!isPrime(p)) {
    return [];
  }
  let prod: number[] = bigFromInt(p);
  p = ((12 * m) + 1);
  if (!isPrime(p)) {
    return [];
  }
  prod = bigMulSmall(prod, p);
  let i: number = 1;
  while ((i <= (n - 2))) {
    p = (((pow2(i) * 9) * m) + 1);
    if (!isPrime(p)) {
      return [];
    }
    prod = bigMulSmall(prod, p);
    i = (i + 1);
  }
  return prod;
}
function ccNumbers(start: number, end: number) {
  let n: number = start;
  while ((n <= end)) {
    let m: number = 1;
    if ((n > 4)) {
      m = pow2((n - 4));
    }
    while (true) {
      let num = ccFactors(n, m);
      if (((Array.isArray(num) || typeof num === 'string' ? num.length : Object.keys(num ?? {}).length) > 0)) {
        console.log(((("a(" + String(n)) + ") = ") + bigToString(num)));
        break
      }
      if ((n <= 4)) {
        m = (m + 1);
      } else {
        m = (m + pow2((n - 4)));
      }
    }
    n = (n + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  ccNumbers(3, 9);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

