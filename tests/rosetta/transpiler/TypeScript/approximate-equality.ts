// Generated by Mochi v0.10.42 on 2025-07-27 18:45:10 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function maxf(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}
function isClose(a: number, b: number): boolean {
  let relTol: number = 1e-09;
  let t = abs((a - b));
  let u: number = (relTol * maxf(abs(a), abs(b)));
  return (t <= u);
}
function sqrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function main() {
  let root2: number = sqrtApprox(2.0);
  let pairs: number[][] = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [(1.0000000000000002e+13 / 10000.0), 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0.0], [(root2 * root2), 2.0], [(-root2 * root2), -2.0], [100000000000000000.0, 100000000000000000.0], [3.141592653589793, 3.141592653589793]];
  for (const pair of pairs) {
    let a: number = pair[Math.trunc(0)];
    let b: number = pair[Math.trunc(1)];
    let s: string = (isClose(a, b) ? "≈" : "≉");
    console.log(((((String(a) + " ") + s) + " ") + String(b)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

