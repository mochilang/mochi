// Generated by Mochi v0.10.56 on 2025-08-03 17:42:57 GMT+7

function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let epsilon: number = 1e-15;
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function pow10(n: number): number {
  let r: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    r = (r * 10.0);
    i = (i + 1);
  }
  return r;
}
function formatFloat(f: number, prec: number): string {
  let scale: number = pow10(prec);
  let scaled: number = ((f * scale) + 0.5);
  let n: number = Math.trunc(scaled);
  let digits: string = _str(n);
  while ((Number(Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) <= prec)) {
    digits = ("0" + digits);
  }
  let intPart: string = (digits).substring(0, (Number(Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec));
  let fracPart: string = (digits).substring((Number(Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec), Number(Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length));
  return ((intPart + ".") + fracPart);
}
let factval: number = 1;
let e: number = 2.0;
let n: number = 2;
let term: number = 1.0;
while (true) {
  factval = (factval * n);
  n = (n + 1);
  term = (1.0 / factval);
  e = (e + term);
  if ((absf(term) < epsilon)) {
    break
  }
}
console.log(_str(("e = " + formatFloat(e, 15))));
