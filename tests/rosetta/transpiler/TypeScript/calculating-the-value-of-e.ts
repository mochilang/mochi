// Generated by Mochi v0.10.42 on 2025-07-27 20:13:06 GMT+7

let epsilon: number = 1e-15;
function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function pow10(n: number): number {
  let r: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    r = (r * 10.0);
    i = (i + 1);
  }
  return r;
}
function formatFloat(f: number, prec: number): string {
  let scale: number = pow10(prec);
  let scaled: number = ((f * scale) + 0.5);
  let n: number = Math.trunc(scaled);
  let digits: string = String(n);
  while (((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) <= prec)) {
    digits = ("0" + digits);
  }
  let intPart: string = (digits).substring(0, ((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec));
  let fracPart: string = (digits).substring(((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec), (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length));
  return ((intPart + ".") + fracPart);
}
let factval: number = 1;
let e: number = 2.0;
let n: number = 2;
let term: number = 1.0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  while (true) {
    factval = (factval * n);
    n = (n + 1);
    term = (1.0 / factval);
    e = (e + term);
    if ((absf(term) < epsilon)) {
      break
    }
  }
  console.log(("e = " + formatFloat(e, 15)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

