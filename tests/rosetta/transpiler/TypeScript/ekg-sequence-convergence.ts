// Generated by Mochi v0.10.41 on 2025-07-26 20:32:41 GMT+7

function contains(xs: number[], n: number): boolean {
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((xs[i] == n)) {
      return true;
    }
    i = (i + 1);
  }
  return false;
}
function gcd(a: number, b: number): number {
  let x: number = a;
  let y: number = b;
  while ((y != 0)) {
    let t: number = (x % y);
    x = y;
    y = t;
  }
  if ((x < 0)) {
    x = -x;
  }
  return x;
}
function sortInts(xs: number[]): number[] {
  let arr: number[] = xs;
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[Math.trunc((j + 1))])) {
        let tmp: number = arr[j];
        arr[j] = arr[Math.trunc((j + 1))];
        arr[(j + 1)] = tmp;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function areSame(s: number[], t: number[]): boolean {
  if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) != (Array.isArray(t) || typeof t === 'string' ? t.length : Object.keys(t ?? {}).length))) {
    return false;
  }
  let a: number[] = sortInts(s);
  let b: number[] = sortInts(t);
  let i: number = 0;
  while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    if ((a[i] != b[i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function printSlice(start: number, seq: number[]) {
  let first: number[] = [];
  let i: number = 0;
  while ((i < 30)) {
    first.push(seq[i]);
    i = (i + 1);
  }
  let pad: string = "";
  if ((start < 10)) {
    pad = " ";
  }
  console.log((((("EKG(" + pad) + String(start)) + "): ") + String(first)));
}
function main() {
  let limit: number = 100;
  let starts: number[] = [2, 5, 7, 9, 10];
  let ekg: number[][] = [];
  let s: number = 0;
  while ((s < (Array.isArray(starts) || typeof starts === 'string' ? starts.length : Object.keys(starts ?? {}).length))) {
    let seq: number[] = [1, starts[s]];
    let n: number = 2;
    while ((n < limit)) {
      let i: number = 2;
      let done: boolean = false;
      while (!done) {
        if ((!seq.includes(i) && (gcd(seq[Math.trunc((n - 1))], i) > 1))) {
          seq.push(i);
          done = true;
        }
        i = (i + 1);
      }
      n = (n + 1);
    }
    ekg.push(seq);
    printSlice(starts[s], seq);
    s = (s + 1);
  }
  let i: number = 2;
  let found: boolean = false;
  while ((i < limit)) {
    if (((ekg[Math.trunc(1)][i] == ekg[Math.trunc(2)][i]) && areSame(ekg[Math.trunc(1)].slice(0, i), ekg[Math.trunc(2)].slice(0, i)))) {
      console.log(("\nEKG(5) and EKG(7) converge at term " + String((i + 1))));
      found = true;
      break
    }
    i = (i + 1);
  }
  if (!found) {
    console.log((("\nEKG5(5) and EKG(7) do not converge within " + String(limit)) + " terms"));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

