// Generated by Mochi v0.10.42 on 2025-07-27 21:21:24 GMT+7

function padLeft(n: number, width: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function squeeze(s: string, ch: string): string {
  let out: string = "";
  let prev: boolean = false;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let c: string = (s).substring(i, (i + 1));
    if ((c == ch)) {
      if (!prev) {
        out = (out + c);
        prev = true;
      }
    } else {
      out = (out + c);
      prev = false;
    }
    i = (i + 1);
  }
  return out;
}
let strings: string[] = ["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"];
let chars: string[][] = [[" "], ["-"], ["7"], ["."], [" ", "-", "r"], ["e"], ["s"], ["a"], ["😍"]];
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  while ((i < (Array.isArray(strings) || typeof strings === 'string' ? strings.length : Object.keys(strings ?? {}).length))) {
    let j: number = 0;
    let s: string = strings[i];
    while ((j < (Array.isArray(chars[i]) || typeof chars[i] === 'string' ? chars[i].length : Object.keys(chars[i] ?? {}).length))) {
      let c: string = chars[i][j];
      let ss: string = squeeze(s, c);
      console.log((("specified character = '" + c) + "'"));
      console.log((((("original : length = " + padLeft((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length), 2)) + ", string = «««") + s) + "»»»"));
      console.log((((("squeezed : length = " + padLeft((Array.isArray(ss) || typeof ss === 'string' ? ss.length : Object.keys(ss ?? {}).length), 2)) + ", string = «««") + ss) + "»»»"));
      console.log("");
      j = (j + 1);
    }
    i = (i + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

