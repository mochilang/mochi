// Generated by Mochi v0.10.55 on 2025-08-02 17:55:47 GMT+7

let nPts: number = 100;
let rMin: number = 10;
let rMax: number = 15;
let span: number = ((rMax + 1) + rMax);
let poss: number[][] = [];
let min2: number = (rMin * rMin);
let max2: number = (rMax * rMax);
let rows: string[][] = [];
let r: number = 0;
let u: number = 0;
let seen: Record<string, boolean> = {};
let n: number = 0;
let i2: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let y: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
y = -rMax
  while ((y <= rMax)) {
    let x: number = -rMax;
    while ((x <= rMax)) {
      let r2: number = ((x * x) + (y * y));
      if (((r2 >= min2) && (r2 <= max2))) {
        poss.push([x, y]);
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  console.log(_str((_str(Number(Array.isArray(poss) || typeof poss === 'string' ? poss.length : Object.keys(poss ?? {}).length)) + " possible points")));
  while ((r < span)) {
    let row: string[] = [];
    let c: number = 0;
    while ((c < (span * 2))) {
      row.push(" ");
      c = (c + 1);
    }
    rows.push(row);
    r = (r + 1);
  }
  while ((n < nPts)) {
    let i: number = (_now() % Number(Array.isArray(poss) || typeof poss === 'string' ? poss.length : Object.keys(poss ?? {}).length));
    let x: number = poss[i][Math.trunc(0)];
    let yy: number = poss[i][Math.trunc(1)];
    let row: string[] = (yy + rMax);
    let col: number = ((x + rMax) * 2);
    rows[row][col] = "*";
    let key: string = ((_str(row) + ",") + _str(col));
    if (!seen[key]) {
      seen[key] = true;
      u = (u + 1);
    }
    n = (n + 1);
  }
  while ((i2 < span)) {
    let line: string = "";
    let j: number = 0;
    while ((j < (span * 2))) {
      line = (line + rows[i2][j]);
      j = (j + 1);
    }
    console.log(_str(line));
    i2 = (i2 + 1);
  }
  console.log(_str((_str(u) + " unique points")));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

