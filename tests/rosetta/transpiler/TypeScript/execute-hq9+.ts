// Generated by Mochi v0.10.42 on 2025-07-28 00:53:42 GMT+7

function bottles(n: number): string {
  if ((n == 0)) {
    return "No more bottles";
  }
  if ((n == 1)) {
    return "1 bottle";
  }
  return (String(n) + " bottles");
}
function sing99() {
  let i: number = 99;
  while ((i > 0)) {
    console.log((bottles(i) + " of beer on the wall"));
    console.log((bottles(i) + " of beer"));
    console.log("Take one down, pass it around");
    console.log((bottles((i - 1)) + " of beer on the wall"));
    i = (i - 1);
  }
}
function run(code: string) {
  let acc: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(code) || typeof code === 'string' ? code.length : Object.keys(code ?? {}).length))) {
    let ch: string = (code).substring(i, (i + 1));
    if ((ch == "H")) {
      console.log("Hello, World!");
    } else {
      if ((ch == "Q")) {
        console.log(code);
      } else {
        if ((ch == "9")) {
          sing99();
        } else {
          if ((ch == "+")) {
            acc = (acc + 1);
          }
        }
      }
    }
    i = (i + 1);
  }
}
function main() {
  let code: string = _input();
  run(code);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

