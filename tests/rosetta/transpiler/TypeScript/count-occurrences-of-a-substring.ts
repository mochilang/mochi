// Generated by Mochi v0.10.55 on 2025-08-02 20:23:28 GMT+7

function countOccurrences(s: string, sub: string): number {
  if ((Number(Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length) == 0)) {
    return (Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) + 1);
  }
  let cnt: number = 0;
  let i: number = 0;
  let step: number = Number(Array.isArray(sub) || typeof sub === 'string' ? sub.length : Object.keys(sub ?? {}).length);
  while (((i + step) <= Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + step)) == sub)) {
      cnt = (cnt + 1);
      i = (i + step);
    } else {
      i = (i + 1);
    }
  }
  return cnt;
}
function main() {
  console.log(_str(_str(countOccurrences("the three truths", "th"))));
  console.log(_str(_str(countOccurrences("ababababab", "abab"))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  globalThis.gc?.()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

