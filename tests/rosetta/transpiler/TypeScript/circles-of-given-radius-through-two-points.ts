// Generated by Mochi v0.10.38 on 2025-07-23 20:29:21 GMT+7

export interface Point { x: number; y: number }
function sqrtApprox(x: number): number {
  let g: number = x;
  let i: number = 0;
  while ((i < 40)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
function hypot(x: number, y: number): number {
  return sqrtApprox(((x * x) + (y * y)));
}
const Two: string = "Two circles.";
const R0: string = "R==0.0 does not describe circles.";
const Co: string = "Coincident points describe an infinite number of circles.";
const CoR0: string = "Coincident points with r==0.0 describe a degenerate circle.";
const Diam: string = "Points form a diameter and describe only a single circle.";
const Far: string = "Points too far apart to form circles.";
function circles(p1: Point, p2: Point, r: number): any[] {
  if (((p1.x == p2.x) && (p1.y == p2.y))) {
    if ((r == 0.0)) {
      return [p1, p1, "Coincident points with r==0.0 describe a degenerate circle."];
    }
    return [p1, p2, "Coincident points describe an infinite number of circles."];
  }
  if ((r == 0.0)) {
    return [p1, p2, "R==0.0 does not describe circles."];
  }
  const dx: number = (p2.x - p1.x);
  const dy: number = (p2.y - p1.y);
  const q: number = hypot(dx, dy);
  if ((q > (2.0 * r))) {
    return [p1, p2, "Points too far apart to form circles."];
  }
  const m: Point = {"x": ((p1.x + p2.x) / 2.0), "y": ((p1.y + p2.y) / 2.0)};
  if ((q == (2.0 * r))) {
    return [m, m, "Points form a diameter and describe only a single circle."];
  }
  const d: number = sqrtApprox(((r * r) - ((q * q) / 4.0)));
  const ox: number = ((d * dx) / q);
  const oy: number = ((d * dy) / q);
  return [{"x": (m.x - oy), "y": (m.y + ox)}, {"x": (m.x + oy), "y": (m.y - ox)}, "Two circles."];
}
let td: any[][] = [[{"x": 0.1234, "y": 0.9876}, {"x": 0.8765, "y": 0.2345}, 2.0], [{"x": 0.0, "y": 2.0}, {"x": 0.0, "y": 0.0}, 1.0], [{"x": 0.1234, "y": 0.9876}, {"x": 0.1234, "y": 0.9876}, 2.0], [{"x": 0.1234, "y": 0.9876}, {"x": 0.8765, "y": 0.2345}, 0.5], [{"x": 0.1234, "y": 0.9876}, {"x": 0.1234, "y": 0.9876}, 0.0]];
for (const tc of td) {
  const p1 = tc[Math.trunc(0)];
  const p2 = tc[Math.trunc(1)];
  const r = tc[Math.trunc(2)];
  console.log((((("p1:  {" + String(p1.x)) + " ") + String(p1.y)) + "}"));
  console.log((((("p2:  {" + String(p2.x)) + " ") + String(p2.y)) + "}"));
  console.log(("r:  " + String(r)));
  const res: any[] = circles(p1, p2, r);
  const c1 = res[Math.trunc(0)];
  const c2 = res[Math.trunc(1)];
  const caseStr = res[Math.trunc(2)];
  console.log(("   " + caseStr));
  if (((caseStr == "Points form a diameter and describe only a single circle.") || (caseStr == "Coincident points with r==0.0 describe a degenerate circle."))) {
    console.log((((("   Center:  {" + String(c1.x)) + " ") + String(c1.y)) + "}"));
  } else {
    if ((caseStr == "Two circles.")) {
      console.log((((("   Center 1:  {" + String(c1.x)) + " ") + String(c1.y)) + "}"));
      console.log((((("   Center 2:  {" + String(c2.x)) + " ") + String(c2.y)) + "}"));
    }
  }
  console.log("");
}
