// Generated by Mochi v0.10.42 on 2025-07-27 21:08:39 GMT+7

export interface Point { x: number; y: number }
function sqrtApprox(x: number): number {
  let g: number = x;
  let i: number = 0;
  while ((i < 40)) {
    g = ((g + (x / g)) / 2.0);
    i = (i + 1);
  }
  return g;
}
function hypot(x: number, y: number): number {
  return sqrtApprox(((x * x) + (y * y)));
}
let Two: string = "Two circles.";
let R0: string = "R==0.0 does not describe circles.";
let Co: string = "Coincident points describe an infinite number of circles.";
let CoR0: string = "Coincident points with r==0.0 describe a degenerate circle.";
let Diam: string = "Points form a diameter and describe only a single circle.";
let Far: string = "Points too far apart to form circles.";
function circles(p1: Point, p2: Point, r: number): any[] {
  if (((p1.x == p2.x) && (p1.y == p2.y))) {
    if ((r == 0.0)) {
      return [p1, p1, "Coincident points with r==0.0 describe a degenerate circle."];
    }
    return [p1, p2, "Coincident points describe an infinite number of circles."];
  }
  if ((r == 0.0)) {
    return [p1, p2, "R==0.0 does not describe circles."];
  }
  let dx: number = (p2.x - p1.x);
  let dy: number = (p2.y - p1.y);
  let q: number = hypot(dx, dy);
  if ((q > (2.0 * r))) {
    return [p1, p2, "Points too far apart to form circles."];
  }
  let m: Point = {"x": ((p1.x + p2.x) / 2.0), "y": ((p1.y + p2.y) / 2.0)};
  if ((q == (2.0 * r))) {
    return [m, m, "Points form a diameter and describe only a single circle."];
  }
  let d: number = sqrtApprox(((r * r) - ((q * q) / 4.0)));
  let ox: number = ((d * dx) / q);
  let oy: number = ((d * dy) / q);
  return [{"x": (m.x - oy), "y": (m.y + ox)}, {"x": (m.x + oy), "y": (m.y - ox)}, "Two circles."];
}
let td: any[][] = [[{"x": 0.1234, "y": 0.9876}, {"x": 0.8765, "y": 0.2345}, 2.0], [{"x": 0.0, "y": 2.0}, {"x": 0.0, "y": 0.0}, 1.0], [{"x": 0.1234, "y": 0.9876}, {"x": 0.1234, "y": 0.9876}, 2.0], [{"x": 0.1234, "y": 0.9876}, {"x": 0.8765, "y": 0.2345}, 0.5], [{"x": 0.1234, "y": 0.9876}, {"x": 0.1234, "y": 0.9876}, 0.0]];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  for (const tc of td) {
    let p1 = tc[Math.trunc(0)];
    let p2 = tc[Math.trunc(1)];
    let r = tc[Math.trunc(2)];
    console.log((((("p1:  {" + String(p1.x)) + " ") + String(p1.y)) + "}"));
    console.log((((("p2:  {" + String(p2.x)) + " ") + String(p2.y)) + "}"));
    console.log(("r:  " + String(r)));
    let res: any[] = circles(p1, p2, r);
    let c1 = res[Math.trunc(0)];
    let c2 = res[Math.trunc(1)];
    let caseStr = res[Math.trunc(2)];
    console.log(("   " + caseStr));
    if (((caseStr == "Points form a diameter and describe only a single circle.") || (caseStr == "Coincident points with r==0.0 describe a degenerate circle."))) {
      console.log((((("   Center:  {" + String(c1.x)) + " ") + String(c1.y)) + "}"));
    } else {
      if ((caseStr == "Two circles.")) {
        console.log((((("   Center 1:  {" + String(c1.x)) + " ") + String(c1.y)) + "}"));
        console.log((((("   Center 2:  {" + String(c2.x)) + " ") + String(c2.y)) + "}"));
      }
    }
    console.log("");
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

