// Generated by Mochi v0.10.42 on 2025-07-28 10:15:59 GMT+7

function floyd(n: number) {
  console.log(_str((("Floyd " + _str(n)) + ":")));
  let lowerLeftCorner: bigint = (Math.trunc((n * (n - 1)) / 2) + 1);
  let lastInColumn: bigint = lowerLeftCorner;
  let lastInRow: number = 1;
  let i: number = 1;
  let row: number = 1;
  let line: string = "";
  while ((row <= n)) {
    let w: number = (Array.isArray(_str(lastInColumn)) || typeof _str(lastInColumn) === 'string' ? _str(lastInColumn).length : Object.keys(_str(lastInColumn) ?? {}).length);
    if ((i < lastInRow)) {
      line = ((line + pad(_str(i), w)) + " ");
      lastInColumn = (lastInColumn + 1);
    } else {
      line = (line + pad(_str(i), w));
      console.log(_str(line));
      line = "";
      row = (row + 1);
      lastInRow = (lastInRow + row);
      lastInColumn = lowerLeftCorner;
    }
    i = (i + 1);
  }
}
function pad(s: string, w: number): string {
  let t: string = s;
  while (((Array.isArray(t) || typeof t === 'string' ? t.length : Object.keys(t ?? {}).length) < w)) {
    t = (" " + t);
  }
  return t;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  floyd(5);
  floyd(14);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

