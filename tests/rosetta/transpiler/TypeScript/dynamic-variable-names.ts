// Generated by Mochi v0.10.57 on 2025-08-04 19:46:30 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if (((Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str.slice(i, (i + 1))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function main() {
  let n: number = 0;
  while (((n < 1) || (n > 5))) {
    console.log(_str("How many integer variables do you want to create (max 5) : "));
    let line: string = _input();
    if ((Number(Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
      n = parseIntStr(line);
    }
  }
  let vars: Record<string, number> = {};
  console.log(_str("OK, enter the variable names and their values, below\n"));
  let i: number = 1;
  while ((i <= n)) {
    console.log(_str((("\n  Variable " + _str(i)) + "\n")));
    console.log(_str("    Name  : "));
    let name: string = _input();
    if ((name in vars)) {
      console.log(_str("  Sorry, you've already created a variable of that name, try again"));
      continue
    }
    let value: number = 0;
    while (true) {
      console.log(_str("    Value : "));
      let valstr: string = _input();
      if ((Number(Array.isArray(valstr) || typeof valstr === 'string' ? valstr.length : Object.keys(valstr ?? {}).length) == 0)) {
        console.log(_str("  Not a valid integer, try again"));
        continue
      }
      let ok: boolean = true;
      let j: number = 0;
      let neg: boolean = false;
      if ((valstr.slice(0, 1) == "-")) {
        neg = true;
        j = 1;
      }
      while ((j < Number(Array.isArray(valstr) || typeof valstr === 'string' ? valstr.length : Object.keys(valstr ?? {}).length))) {
        let ch: string = valstr.slice(j, (j + 1));
        if (((ch < "0") || (ch > "9"))) {
          ok = false;
          break
        }
        j = (j + 1);
      }
      if (!ok) {
        console.log(_str("  Not a valid integer, try again"));
        continue
      }
      value = parseIntStr(valstr);
      break
    }
    vars[name] = value;
    i = (i + 1);
  }
  console.log(_str("\nEnter q to quit"));
  while (true) {
    console.log(_str("\nWhich variable do you want to inspect : "));
    let name: string = _input();
    if ((name.toLowerCase() == "q")) {
      return;
    }
    if ((name in vars)) {
      console.log(_str(("It's value is " + _str(vars[name]))));
    } else {
      console.log(_str("Sorry there's no variable of that name, try again"));
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

