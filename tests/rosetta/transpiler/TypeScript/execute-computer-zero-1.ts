// Generated by Mochi v0.10.42 on 2025-07-28 00:48:06 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
export interface Ops { NOP: number; LDA: number; STA: number; ADD: number; SUB: number; BRZ: number; JMP: number; STP: number }
export interface Opcodes { NOP: number; LDA: number; STA: number; ADD: number; SUB: number; BRZ: number; JMP: number; STP: number }
export interface Instruction { Label: string; Opcode: string; Arg: string }
function trim(s: string): string {
  let start: number = 0;
  while (((start < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s.slice(start, (start + 1)) == " ") || (s.slice(start, (start + 1)) == "\t")))) {
    start = (start + 1);
  }
  let end: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while (((end > start) && ((s.slice((end - 1), end) == " ") || (s.slice((end - 1), end) == "\t")))) {
    end = (end - 1);
  }
  return (s).substring(start, end);
}
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((((Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + (s).substring(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function splitWS(s: string): string[] {
  let out: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if (((ch == " ") || (ch == "\t"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        out.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    out.push(cur);
  }
  return out;
}
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function parseAsm(asm: string): Record<string, any> {
  let lines: string[] = asm.split("\n");
  let instrs: Instruction[] = [];
  let labels: Record<string, number> = {};
  let lineNum: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(lines) || typeof lines === 'string' ? lines.length : Object.keys(lines ?? {}).length))) {
    let line: string = lines[i];
    if ((line.indexOf(";") != -1)) {
      line = (line).substring(0, line.indexOf(";"));
    }
    line = trim(line);
    let label: string = "";
    if ((line.indexOf(":") != -1)) {
      let idx: number = line.indexOf(":");
      label = trim((line).substring(0, idx));
      line = trim((line).substring((idx + 1), (Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length)));
    }
    let opcode: string = "";
    let arg: string = "";
    if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
      let parts: string[] = splitWS(line);
      if (((Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length) > 0)) {
        opcode = parts[Math.trunc(0)];
      }
      if (((Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length) > 1)) {
        arg = parts[Math.trunc(1)];
      } else {
        let ops: Ops = {"NOP": 0, "LDA": 1, "STA": 2, "ADD": 3, "SUB": 4, "BRZ": 5, "JMP": 6, "STP": 7};
        if (!(opcode in ops)) {
          arg = opcode;
          opcode = "";
        }
      }
    }
    if ((label != "")) {
      labels[label] = lineNum;
    }
    instrs.push({"Label": label, "Opcode": opcode, "Arg": arg});
    lineNum = (lineNum + 1);
    i = (i + 1);
  }
  return {"instructions": instrs, labels};
}
function compile(p: Record<string, any>): number[] {
  let instrs: Instruction[] = p.instructions;
  let labels: Record<string, number> = p.labels;
  let bytecode: number[] = [];
  let i: number = 0;
  let opcodes: Opcodes = {"NOP": 0, "LDA": 1, "STA": 2, "ADD": 3, "SUB": 4, "BRZ": 5, "JMP": 6, "STP": 7};
  while ((i < (Array.isArray(instrs) || typeof instrs === 'string' ? instrs.length : Object.keys(instrs ?? {}).length))) {
    let ins: Instruction = instrs[i];
    let arg: number = 0;
    if ((ins.Arg != "")) {
      if ((ins.Arg in labels)) {
        arg = labels[ins.Arg];
      } else {
        arg = parseIntStr(ins.Arg);
      }
    }
    let code: number = 0;
    if ((ins.Opcode != "")) {
      code = opcodes[Math.trunc(ins.Opcode)];
    }
    bytecode.push(((code * 32) + arg));
    i = (i + 1);
  }
  while (((Array.isArray(bytecode) || typeof bytecode === 'string' ? bytecode.length : Object.keys(bytecode ?? {}).length) < 32)) {
    bytecode.push(0);
  }
  return bytecode;
}
function floorMod(a: number, b: number): number {
  let r: bigint = (a % b);
  if ((r < 0)) {
    r = (r + b);
  }
  return r;
}
function run(bytecode: number[]): number {
  let acc: number = 0;
  let pc: number = 0;
  let mem: number[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(bytecode) || typeof bytecode === 'string' ? bytecode.length : Object.keys(bytecode ?? {}).length))) {
    mem.push(bytecode[i]);
    i = (i + 1);
  }
  while ((pc < 32)) {
    let op: number = Math.trunc(mem[pc] / 32);
    let arg: bigint = (mem[pc] % 32);
    pc = (pc + 1);
    if ((op == 0)) {
      continue
    } else {
      if ((op == 1)) {
        acc = mem[arg];
      } else {
        if ((op == 2)) {
          mem[arg] = acc;
        } else {
          if ((op == 3)) {
            acc = floorMod((acc + mem[arg]), 256);
          } else {
            if ((op == 4)) {
              acc = floorMod((acc - mem[arg]), 256);
            } else {
              if ((op == 5)) {
                if ((acc == 0)) {
                  pc = arg;
                }
              } else {
                if ((op == 6)) {
                  pc = arg;
                } else {
                  if ((op == 7)) {
                    break
                  } else {
                    break
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return acc;
}
function execute(asm: string): number {
  let parsed: Record<string, any> = parseAsm(asm);
  let bc: number[] = compile(parsed);
  return run(bc);
}
function main() {
  let examples: string[] = [(((("LDA   x\n" + "ADD   y       ; accumulator = x + y\n") + "STP\n") + "x:            2\n") + "y:            2"), ((((((((((((("loop:   LDA   prodt\n" + "        ADD   x\n") + "        STA   prodt\n") + "        LDA   y\n") + "        SUB   one\n") + "        STA   y\n") + "        BRZ   done\n") + "        JMP   loop\n") + "done:   LDA   prodt   ; to display it\n") + "        STP\n") + "x:            8\n") + "y:            7\n") + "prodt:        0\n") + "one:          1"), ((((((((((((((((("loop:   LDA   n\n" + "        STA   temp\n") + "        ADD   m\n") + "        STA   n\n") + "        LDA   temp\n") + "        STA   m\n") + "        LDA   count\n") + "        SUB   one\n") + "        BRZ   done\n") + "        STA   count\n") + "        JMP   loop\n") + "done:   LDA   n       ; to display it\n") + "        STP\n") + "m:            1\n") + "n:            1\n") + "temp:         0\n") + "count:        8       ; valid range: 1-11\n") + "one:          1"), ((((((((((((((((((((((((((((((("start:  LDA   load\n" + "ADD   car     ; head of list\n") + "STA   ldcar\n") + "ADD   one\n") + "STA   ldcdr   ; next CONS cell\n") + "ldcar:  NOP\n") + "STA   value\n") + "ldcdr:  NOP\n") + "BRZ   done    ; 0 stands for NIL\n") + "STA   car\n") + "JMP   start\n") + "done:   LDA   value   ; CAR of last CONS\n") + "STP\n") + "load:   LDA   0\n") + "value:        0\n") + "car:          28\n") + "one:          1\n") + "                        ; order of CONS cells\n") + "                        ; in memory\n") + "                        ; does not matter\n") + "        6\n") + "        0       ; 0 stands for NIL\n") + "        2       ; (CADR ls)\n") + "        26      ; (CDDR ls) -- etc.\n") + "        5\n") + "        20\n") + "        3\n") + "        30\n") + "        1       ; value of (CAR ls)\n") + "        22      ; points to (CDR ls)\n") + "        4\n") + "        24"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "         0\n") + "         255"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "                0\n") + "                1"), (((("LDA  3\n" + "ADD  4\n") + "STP  0\n") + "                1\n") + "                255")];
  let i: number = 0;
  while ((i < (Array.isArray(examples) || typeof examples === 'string' ? examples.length : Object.keys(examples ?? {}).length))) {
    let res: number = execute(examples[i]);
    console.log(String(res));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

