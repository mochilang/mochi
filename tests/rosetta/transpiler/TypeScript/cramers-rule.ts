// Generated by Mochi v0.10.40 on 2025-07-26 00:03:40 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function det(m: number[][]): number {
    const n: number = (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length);
    if ((n == 1)) {
      return m[Math.trunc(0)][Math.trunc(0)];
    }
    let total: number = 0.0;
    let sign: number = 1.0;
    let c: number = 0;
    while ((c < n)) {
      let sub: number[][] = [];
      let r: number = 1;
      while ((r < n)) {
        let row: number[] = [];
        let cc: number = 0;
        while ((cc < n)) {
          if ((cc != c)) {
            row = [...row, m[r][cc]];
          }
          cc = (cc + 1);
        }
        sub = [...sub, row];
        r = (r + 1);
      }
      total = (total + ((sign * m[Math.trunc(0)][c]) * det(sub)));
      sign = (sign * -1.0);
      c = (c + 1);
    }
    return total;
  }
  function replaceCol(m: number[][], col: number, v: number[]): number[][] {
    let res: number[][] = [];
    let r: number = 0;
    while ((r < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
      let row: number[] = [];
      let c: number = 0;
      while ((c < (Array.isArray(m[r]) || typeof m[r] === 'string' ? m[r].length : Object.keys(m[r] ?? {}).length))) {
        if ((c == col)) {
          row = [...row, v[r]];
        } else {
          row = [...row, m[r][c]];
        }
        c = (c + 1);
      }
      res = [...res, row];
      r = (r + 1);
    }
    return res;
  }
  const m: number[][] = [[2.0, -1.0, 5.0, 1.0], [3.0, 2.0, 2.0, -6.0], [1.0, 3.0, 3.0, -1.0], [5.0, -2.0, -3.0, 3.0]];
  const v: number[] = [-3.0, -32.0, -47.0, 49.0];
  const d: number = det(m);
  let x: number[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(v) || typeof v === 'string' ? v.length : Object.keys(v ?? {}).length))) {
    const mc: number[][] = replaceCol(m, i, v);
    x = [...x, (det(mc) / d)];
    i = (i + 1);
  }
  let s: string = "[";
  let j: number = 0;
  while ((j < (Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length))) {
    s = (s + String(x[j]));
    if ((j < ((Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length) - 1))) {
      s = (s + " ");
    }
    j = (j + 1);
  }
  s = (s + "]");
  console.log(s);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

