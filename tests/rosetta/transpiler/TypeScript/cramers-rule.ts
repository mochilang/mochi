// Generated by Mochi v0.10.39 on 2025-07-24 16:57:10 GMT+7

function det(m: number[][]): number {
  const n: number = (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length);
  if ((n == 1)) {
    return m[Math.trunc(0)][Math.trunc(0)];
  }
  let total: number = 0.0;
  let sign: number = 1.0;
  let c: number = 0;
  while ((c < n)) {
    let sub: number[][] = [];
    let r: number = 1;
    while ((r < n)) {
      let row: number[] = [];
      let cc: number = 0;
      while ((cc < n)) {
        if ((cc != c)) {
          row = [...row, m[r][cc]];
        }
        cc = (cc + 1);
      }
      sub = [...sub, row];
      r = (r + 1);
    }
    total = (total + ((sign * m[Math.trunc(0)][c]) * det(sub)));
    sign = (sign * -1.0);
    c = (c + 1);
  }
  return total;
}
function replaceCol(m: number[][], col: number, v: number[]): number[][] {
  let res: number[][] = [];
  let r: number = 0;
  while ((r < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
    let row: number[] = [];
    let c: number = 0;
    while ((c < (Array.isArray(m[r]) || typeof m[r] === 'string' ? m[r].length : Object.keys(m[r] ?? {}).length))) {
      if ((c == col)) {
        row = [...row, v[r]];
      } else {
        row = [...row, m[r][c]];
      }
      c = (c + 1);
    }
    res = [...res, row];
    r = (r + 1);
  }
  return res;
}
const m: number[][] = [[2.0, -1.0, 5.0, 1.0], [3.0, 2.0, 2.0, -6.0], [1.0, 3.0, 3.0, -1.0], [5.0, -2.0, -3.0, 3.0]];
const v: number[] = [-3.0, -32.0, -47.0, 49.0];
const d: number = det(m);
let x: number[] = [];
let i: number = 0;
while ((i < (Array.isArray(v) || typeof v === 'string' ? v.length : Object.keys(v ?? {}).length))) {
  const mc: number[][] = replaceCol(m, i, v);
  x = [...x, Math.trunc(det(mc) / d)];
  i = (i + 1);
}
let s: string = "[";
let j: number = 0;
while ((j < (Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length))) {
  s = (s + String(x[j]));
  if ((j < ((Array.isArray(x) || typeof x === 'string' ? x.length : Object.keys(x ?? {}).length) - 1))) {
    s = (s + " ");
  }
  j = (j + 1);
}
s = (s + "]");
console.log(s);
