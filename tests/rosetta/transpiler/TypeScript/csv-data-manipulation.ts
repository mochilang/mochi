// Generated by Mochi v0.10.40 on 2025-07-26 00:04:07 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function join(xs: string[], sep: string): string {
    let res: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      if ((i > 0)) {
        res = (res + sep);
      }
      res = (res + xs[i]);
      i = (i + 1);
    }
    return res;
  }
  function parseIntStr(str: string): number {
    let i: number = 0;
    let neg: boolean = false;
    if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
      neg = true;
      i = 1;
    }
    let n: number = 0;
    const digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
    while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
      n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
      i = (i + 1);
    }
    if (neg) {
      n = -n;
    }
    return n;
  }
  let rows: string[][] = [["A", "B", "C"], ["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"]];
  rows[0] = [...rows[Math.trunc(0)], "SUM"];
  let i: number = 1;
  while ((i < (Array.isArray(rows) || typeof rows === 'string' ? rows.length : Object.keys(rows ?? {}).length))) {
    let sum: number = 0;
    for (const s of rows[i]) {
      sum = (sum + parseIntStr(s));
    }
    rows[i] = [...rows[i], String(sum)];
    i = (i + 1);
  }
  for (const r of rows) {
    console.log(join(r, ","));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

