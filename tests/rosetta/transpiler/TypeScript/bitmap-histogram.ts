// Generated by Mochi v0.10.42 on 2025-07-27 20:11:47 GMT+7

function image(): number[][] {
  return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]];
}
function histogram(g: number[][], bins: number): number[] {
  if ((bins <= 0)) {
    bins = (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length);
  }
  let h: number[] = [];
  let i: number = 0;
  while ((i < bins)) {
    h.push(0);
    i = (i + 1);
  }
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[y];
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      let p: number = row[x];
      let idx: number = Math.trunc(Math.trunc((p * (bins - 1)) / 65535));
      h[idx] = (h[idx] + 1);
      x = (x + 1);
    }
    y = (y + 1);
  }
  return h;
}
function medianThreshold(h: number[]): number {
  let lb: number = 0;
  let ub: number = ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1);
  let lSum: number = 0;
  let uSum: number = 0;
  while ((lb <= ub)) {
    if (((lSum + h[lb]) < (uSum + h[ub]))) {
      lSum = (lSum + h[lb]);
      lb = (lb + 1);
    } else {
      uSum = (uSum + h[ub]);
      ub = (ub - 1);
    }
  }
  return Math.trunc(Math.trunc((ub * 65535) / (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length)));
}
function threshold(g: number[][], t: number): number[][] {
  let out: number[][] = [];
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[y];
    let newRow: number[] = [];
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      if ((row[x] < t)) {
        newRow.push(0);
      } else {
        newRow.push(65535);
      }
      x = (x + 1);
    }
    out.push(newRow);
    y = (y + 1);
  }
  return out;
}
function printImage(g: number[][]) {
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[y];
    let line: string = "";
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      if ((row[x] == 0)) {
        line = (line + "0");
      } else {
        line = (line + "1");
      }
      x = (x + 1);
    }
    console.log(line);
    y = (y + 1);
  }
}
function main() {
  let img: number[][] = image();
  let h: number[] = histogram(img, 0);
  console.log(("Histogram: " + String(h)));
  let t: number = medianThreshold(h);
  console.log(("Threshold: " + String(t)));
  let bw: number[][] = threshold(img, t);
  printImage(bw);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

