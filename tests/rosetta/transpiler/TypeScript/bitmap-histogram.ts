// Generated by Mochi v0.10.38 on 2025-07-23 17:13:20 GMT+7

function image(): number[][] {
  return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]];
}
function histogram(g: number[][], bins: number): number[] {
  if ((bins <= 0)) {
    bins = (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length);
  }
  let h: number[] = [];
  let i: number = 0;
  while ((i < bins)) {
    h = [...h, 0];
    i = (i + 1);
  }
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[Math.trunc(y)];
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      let p: number = row[Math.trunc(x)];
      let idx: number = Math.trunc(((p * (bins - 1)) / 65535));
      h[idx] = (h[Math.trunc(idx)] + 1);
      x = (x + 1);
    }
    y = (y + 1);
  }
  return h;
}
function medianThreshold(h: number[]): number {
  let lb: number = 0;
  let ub: number = ((Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length) - 1);
  let lSum: number = 0;
  let uSum: number = 0;
  while ((lb <= ub)) {
    if (((lSum + h[Math.trunc(lb)]) < (uSum + h[Math.trunc(ub)]))) {
      lSum = (lSum + h[Math.trunc(lb)]);
      lb = (lb + 1);
    } else {
      uSum = (uSum + h[Math.trunc(ub)]);
      ub = (ub - 1);
    }
  }
  return Math.trunc(((ub * 65535) / (Array.isArray(h) || typeof h === 'string' ? h.length : Object.keys(h ?? {}).length)));
}
function threshold(g: number[][], t: number): number[][] {
  let out: number[][] = [];
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[Math.trunc(y)];
    let newRow: number[] = [];
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      if ((row[Math.trunc(x)] < t)) {
        newRow = [...newRow, 0];
      } else {
        newRow = [...newRow, 65535];
      }
      x = (x + 1);
    }
    out = [...out, newRow];
    y = (y + 1);
  }
  return out;
}
function printImage(g: number[][]) {
  let y: number = 0;
  while ((y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
    let row: number[] = g[Math.trunc(y)];
    let line: string = "";
    let x: number = 0;
    while ((x < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      if ((row[Math.trunc(x)] == 0)) {
        line = (line + "0");
      } else {
        line = (line + "1");
      }
      x = (x + 1);
    }
    console.log(line);
    y = (y + 1);
  }
}
function main() {
  const img: number[][] = image();
  const h: number[] = histogram(img, 0);
  console.log(("Histogram: " + String(h)));
  const t: number = medianThreshold(h);
  console.log(("Threshold: " + String(t)));
  const bw: number[][] = threshold(img, t);
  printImage(bw);
}
main();
