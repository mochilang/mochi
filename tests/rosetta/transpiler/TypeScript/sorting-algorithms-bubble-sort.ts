// Generated by Mochi v0.10.41 on 2025-07-27 12:29:35 GMT+7

function bubbleSort(a: number[]): number[] {
  let arr: number[] = a;
  let itemCount: number = ((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
  while (true) {
    let hasChanged: boolean = false;
    let index: number = 0;
    while ((index < itemCount)) {
      if ((arr[index] > arr[Math.trunc((index + 1))])) {
        let tmp: number = arr[index];
        arr[index] = arr[Math.trunc((index + 1))];
        arr[(index + 1)] = tmp;
        hasChanged = true;
      }
      index = (index + 1);
    }
    if (!hasChanged) {
      break
    }
    itemCount = (itemCount - 1);
  }
  return arr;
}
let list: number[] = [31, 41, 59, 26, 53, 58, 97, 93, 23, 84];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(("unsorted: " + String(list)));
  list = bubbleSort(list);
  console.log(("sorted!  " + String(list)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

