// Generated by Mochi v0.10.41 on 2025-07-26 20:31:04 GMT+7

function repeat(ch: string, n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}
function cubLine(n: number, dx: number, dy: number, cde: string) {
  let line: string = (repeat(" ", (n + 1)) + cde.slice(0, 1));
  let d: number = ((9 * dx) - 1);
  while ((d > 0)) {
    line = (line + cde.slice(1, 2));
    d = (d - 1);
  }
  line = (line + cde.slice(0, 1));
  line = ((line + repeat(" ", dy)) + cde.slice(2));
  console.log(line);
}
function cuboid(dx: number, dy: number, dz: number) {
  console.log((((((("cuboid " + String(dx)) + " ") + String(dy)) + " ") + String(dz)) + ":"));
  cubLine((dy + 1), dx, 0, "+-");
  let i: number = 1;
  while ((i <= dy)) {
    cubLine(((dy - i) + 1), dx, (i - 1), "/ |");
    i = (i + 1);
  }
  cubLine(0, dx, dy, "+-|");
  let j: number = (((4 * dz) - dy) - 2);
  while ((j > 0)) {
    cubLine(0, dx, dy, "| |");
    j = (j - 1);
  }
  cubLine(0, dx, dy, "| +");
  i = 1;
  while ((i <= dy)) {
    cubLine(0, dx, (dy - i), "| /");
    i = (i + 1);
  }
  cubLine(0, dx, 0, "+-\n");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  cuboid(2, 3, 4);
  console.log("");
  cuboid(1, 1, 1);
  console.log("");
  cuboid(6, 2, 1);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

