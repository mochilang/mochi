// Generated by Mochi v0.10.40 on 2025-07-26 00:22:36 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function isPrime(n: number): boolean {
    if ((n < 2)) {
      return false;
    }
    if (((n % 2) == 0)) {
      return (n == 2);
    }
    if (((n % 3) == 0)) {
      return (n == 3);
    }
    let d: number = 5;
    while (((d * d) <= n)) {
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 2);
      if (((n % d) == 0)) {
        return false;
      }
      d = (d + 4);
    }
    return true;
  }
  function listToString(xs: number[]): string {
    let s: string = "[";
    let i: number = 0;
    while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
      s = (s + String(xs[i]));
      if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
        s = (s + " ");
      }
      i = (i + 1);
    }
    return (s + "]");
  }
  function main() {
    let count: number = 0;
    let limit: number = 25;
    let n: number = 17;
    let repunit: number = 1111111111111111;
    let eleven: number = 11;
    let hundred: number = 100;
    let deceptive: number[] = [];
    while ((count < limit)) {
      if (((!isPrime(n) && ((n % 3) != 0)) && ((n % 5) != 0))) {
        let bn: number = n;
        if (((repunit % bn) == 0)) {
          deceptive = [...deceptive, n];
          count = (count + 1);
        }
      }
      n = (n + 2);
      repunit = ((repunit * hundred) + eleven);
    }
    console.log((("The first " + String(limit)) + " deceptive numbers are:"));
    console.log(listToString(deceptive));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

