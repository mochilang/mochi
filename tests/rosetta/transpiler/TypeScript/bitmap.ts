// Generated by Mochi v0.10.40 on 2025-07-25 17:55:14 GMT+7

export interface Pixel { R: number; G: number; B: number }
export interface Bitmap { cols: number; rows: number; px: Pixel[][] }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function pixelFromRgb(c: number): Pixel {
    const r: number = (Math.trunc(Math.trunc(c / 65536)) % 256);
    const g: number = (Math.trunc(Math.trunc(c / 256)) % 256);
    const b: number = (c % 256);
    return {"R": r, "G": g, "B": b};
  }
  function rgbFromPixel(p: Pixel): number {
    return (((p.R * 65536) + (p.G * 256)) + p.B);
  }
  function NewBitmap(x: number, y: number): Bitmap {
    let data: Pixel[][] = [];
    let row: number = 0;
    while ((row < y)) {
      let r: Pixel[] = [];
      let col: number = 0;
      while ((col < x)) {
        r = [...r, {"R": 0, "G": 0, "B": 0}];
        col = (col + 1);
      }
      data = [...data, r];
      row = (row + 1);
    }
    return {"cols": x, "rows": y, "px": data};
  }
  function Extent(b: Bitmap): Record<string, number> {
    return {"cols": b.cols, "rows": b.rows};
  }
  function Fill(b: Bitmap, p: Pixel) {
    let y: number = 0;
    while ((y < b.rows)) {
      let x: number = 0;
      while ((x < b.cols)) {
        let px: Pixel[][] = b.px;
        let row: Pixel[] = px[y];
        row[x] = p;
        px[y] = row;
        b.px = px;
        x = (x + 1);
      }
      y = (y + 1);
    }
  }
  function FillRgb(b: Bitmap, c: number) {
    Fill(b, pixelFromRgb(c));
  }
  function SetPx(b: Bitmap, x: number, y: number, p: Pixel): boolean {
    if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
      return false;
    }
    let px: Pixel[][] = b.px;
    let row: Pixel[] = px[y];
    row[x] = p;
    px[y] = row;
    b.px = px;
    return true;
  }
  function SetPxRgb(b: Bitmap, x: number, y: number, c: number): boolean {
    return SetPx(b, x, y, pixelFromRgb(c));
  }
  function GetPx(b: Bitmap, x: number, y: number): Record<string, any> {
    if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
      return {"ok": false};
    }
    const row: Pixel[] = b.px[y];
    return {"ok": true, "pixel": row[x]};
  }
  function GetPxRgb(b: Bitmap, x: number, y: number): Record<string, any> {
    const r: Record<string, any> = GetPx(b, x, y);
    if (!r.ok) {
      return {"ok": false};
    }
    return {"ok": true, "rgb": rgbFromPixel(r.pixel)};
  }
  function ppmSize(b: Bitmap): number {
    const header: string = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + String(b.cols)) + " ") + String(b.rows)) + "\n255\n");
    return ((Array.isArray(header) || typeof header === 'string' ? header.length : Object.keys(header ?? {}).length) + ((3 * b.cols) * b.rows));
  }
  function pixelStr(p: Pixel): string {
    return (((((("{" + String(p.R)) + " ") + String(p.G)) + " ") + String(p.B)) + "}");
  }
  function main() {
    let bm: Bitmap = NewBitmap(300, 240);
    FillRgb(bm, 16711680);
    SetPxRgb(bm, 10, 20, 255);
    SetPxRgb(bm, 20, 30, 0);
    SetPxRgb(bm, 30, 40, 1056816);
    const c1: Record<string, any> = GetPx(bm, 0, 0);
    const c2: Record<string, any> = GetPx(bm, 10, 20);
    const c3: Record<string, any> = GetPx(bm, 30, 40);
    console.log(((("Image size: " + String(bm.cols)) + " Ã— ") + String(bm.rows)));
    console.log((String(ppmSize(bm)) + " bytes when encoded as PPM."));
    if (c1.ok) {
      console.log(("Pixel at (0,0) is " + pixelStr(c1.pixel)));
    }
    if (c2.ok) {
      console.log(("Pixel at (10,20) is " + pixelStr(c2.pixel)));
    }
    if (c3.ok) {
      const p = c3.pixel;
      let r16 = (p.R * 257);
      let g16 = (p.G * 257);
      let b16 = (p.B * 257);
      console.log(((((("Pixel at (30,40) has R=" + String(r16)) + ", G=") + String(g16)) + ", B=") + String(b16)));
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

