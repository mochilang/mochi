// Generated by Mochi v0.10.57 on 2025-08-04 16:11:16 GMT+7

export interface Stack { start: number; len: number; index: number }
let width: number = 81;
let height: number = 5;
let lines: string[] = [];
function setChar(s: string, idx: number, ch: string): string {
  return (((s).substring(0, idx) + ch) + (s).substring((idx + 1), Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
}
let stack: Stack[] = [{"start": 0, "len": width, "index": 1}];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (let i = 0; i < height; i++) {
    let row: string = "";
    let j: number = 0;
    while ((j < width)) {
      row = (row + "*");
      j = (j + 1);
    }
    lines.push(row);
  }
  while ((Number(Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) > 0)) {
    let frame: Stack = stack[Math.trunc((Number(Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))];
    stack = stack.slice(0, (Number(Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
    let start = frame.start;
    let lenSeg = frame.len;
    let index = frame.index;
    let seg = Math.trunc((lenSeg / 3));
    if ((seg == 0)) {
      continue
    }
    let i = index;
    while ((i < height)) {
      let j: string = (start + seg);
      while ((j < (start + (2 * seg)))) {
        lines[i] = setChar(lines[i], j, " ");
        j = (j + 1);
      }
      i = (i + 1);
    }
    stack.push({start, "len": seg, "index": (index + 1)});
    stack.push({"start": (start + (seg * 2)), "len": seg, "index": (index + 1)});
  }
  for (const line of lines) {
    console.log(_str(line));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

