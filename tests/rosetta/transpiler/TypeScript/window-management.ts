// Generated by Mochi v0.10.41 on 2025-07-27 12:29:35 GMT+7

export interface Window { x: number; y: number; w: number; h: number; maximized: boolean; iconified: boolean; visible: boolean; shifted: boolean }
function showState(w: Window, label: string) {
  console.log(((((((((((((((label + ": pos=(") + String(w.x)) + ",") + String(w.y)) + ") size=(") + String(w.w)) + "x") + String(w.h)) + ") max=") + String(w.maximized)) + " icon=") + String(w.iconified)) + " visible=") + String(w.visible)));
}
function maximize(w: Window): Window {
  w.maximized = true;
  w.w = 800;
  w.h = 600;
  return w;
}
function unmaximize(w: Window): Window {
  w.maximized = false;
  w.w = 640;
  w.h = 480;
  return w;
}
function iconify(w: Window): Window {
  w.iconified = true;
  w.visible = false;
  return w;
}
function deiconify(w: Window): Window {
  w.iconified = false;
  w.visible = true;
  return w;
}
function hide(w: Window): Window {
  w.visible = false;
  return w;
}
function showWindow(w: Window): Window {
  w.visible = true;
  return w;
}
function move(w: Window): Window {
  if (w.shifted) {
    w.x = (w.x - 10);
    w.y = (w.y - 10);
  } else {
    w.x = (w.x + 10);
    w.y = (w.y + 10);
  }
  w.shifted = !w.shifted;
  return w;
}
function main() {
  let win: Window = {"x": 100, "y": 100, "w": 640, "h": 480, "maximized": false, "iconified": false, "visible": true, "shifted": false};
  showState(win, "Start");
  win = maximize(win);
  showState(win, "Maximize");
  win = unmaximize(win);
  showState(win, "Unmaximize");
  win = iconify(win);
  showState(win, "Iconify");
  win = deiconify(win);
  showState(win, "Deiconify");
  win = hide(win);
  showState(win, "Hide");
  win = showWindow(win);
  showState(win, "Show");
  win = move(win);
  showState(win, "Move");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

