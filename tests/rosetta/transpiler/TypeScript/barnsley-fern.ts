// Generated by Mochi v0.10.42 on 2025-07-27 20:11:23 GMT+7

let xMin: number = -2.182;
let xMax: number = 2.6558;
let yMin: number = 0.0;
let yMax: number = 9.9983;
let width: number = 60;
let nIter: number = 10000;
let dx: number = (xMax - xMin);
let dy: number = (yMax - yMin);
let height: number = Math.trunc(((width * dy) / dx));
let grid: string[][] = [];
let row: number = 0;
let seed: number = 1;
function randInt(s: number, n: number): number[] {
  let next: number = (((s * 1664525) + 1013904223) % 2147483647);
  return [next, (next % n)];
}
let x: number = 0.0;
let y: number = 0.0;
let ix: number = Math.trunc(((width * (x - xMin)) / dx));
let iy: number = Math.trunc(((height * (yMax - y)) / dy));
let i: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  while ((row < height)) {
    let line: string[] = [];
    let col: number = 0;
    while ((col < width)) {
      line.push(" ");
      col = (col + 1);
    }
    grid.push(line);
    row = (row + 1);
  }
  if (((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height))) {
    grid[iy][ix] = "*";
  }
  while ((i < nIter)) {
    let res: number[] = randInt(seed, 100);
    seed = res[Math.trunc(0)];
    let r: number = res[Math.trunc(1)];
    if ((r < 85)) {
      let nx: number = ((0.85 * x) + (0.04 * y));
      let ny: number = (((-0.04 * x) + (0.85 * y)) + 1.6);
      x = nx;
      y = ny;
    } else {
      if ((r < 92)) {
        let nx: number = ((0.2 * x) - (0.26 * y));
        let ny: number = (((0.23 * x) + (0.22 * y)) + 1.6);
        x = nx;
        y = ny;
      } else {
        if ((r < 99)) {
          let nx: number = ((-0.15 * x) + (0.28 * y));
          let ny: number = (((0.26 * x) + (0.24 * y)) + 0.44);
          x = nx;
          y = ny;
        } else {
          x = 0.0;
          y = (0.16 * y);
        }
      }
    }
    ix = Math.trunc(((width * (x - xMin)) / dx));
    iy = Math.trunc(((height * (yMax - y)) / dy));
    if (((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height))) {
      grid[iy][ix] = "*";
    }
    i = (i + 1);
  }
  row = 0;
  while ((row < height)) {
    let line: string = "";
    let col: number = 0;
    while ((col < width)) {
      line = (line + grid[row][col]);
      col = (col + 1);
    }
    console.log(line);
    row = (row + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

