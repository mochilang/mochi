// Generated by Mochi v0.10.42 on 2025-07-28 10:17:23 GMT+7

export interface Fps { coeffs: number[]; compute: any }
function newFps(fn): Fps {
  return {"coeffs": [], "compute": fn};
}
function extract(f: Fps, n: number): number {
  while (((Array.isArray(f.coeffs) || typeof f.coeffs === 'string' ? f.coeffs.length : Object.keys(f.coeffs ?? {}).length) <= n)) {
    let idx: number = (Array.isArray(f.coeffs) || typeof f.coeffs === 'string' ? f.coeffs.length : Object.keys(f.coeffs ?? {}).length);
    let v: number = f.compute(idx);
    f.coeffs = [...f.coeffs, v];
  }
  return f.coeffs[n];
}
function one(): Fps {
  return newFps((i) => {
if ((i == 0)) {
return 1.0;
}
return 0.0;
});
}
function add(a: Fps, b: Fps): Fps {
  return newFps((n) => {
return (extract(a, n) + extract(b, n));
});
}
function sub(a: Fps, b: Fps): Fps {
  return newFps((n) => {
return (extract(a, n) - extract(b, n));
});
}
function mul(a: Fps, b: Fps): Fps {
  return newFps((n) => {
let s: number = 0.0;
let k: number = 0;
while ((k <= n)) {
s = (s + (extract(a, k) * extract(b, (n - k))));
k = (k + 1);
}
return s;
});
}
function div(a: Fps, b: Fps): Fps {
  let q: Fps = newFps((n) => {
return 0.0;
});
  q.compute = (n) => {
let b0: number = extract(b, 0);
if ((b0 == 0.0)) {
return (0.0 / 0.0);
}
let s = extract(a, n);
let k: number = 1;
while ((k <= n)) {
s = (s - (extract(b, k) * extract(q, (n - k))));
k = (k + 1);
}
return (s / b0);
};
  return q;
}
function differentiate(a: Fps): Fps {
  return newFps((n) => {
return ((n + 1) * extract(a, (n + 1)));
});
}
function integrate(a: Fps): Fps {
  return newFps((n) => {
if ((n == 0)) {
return 0.0;
}
return (extract(a, (n - 1)) / n);
});
}
export interface Pair { sin: Fps; cos: Fps }
function sinCos(): Pair {
  let sin: Fps = newFps((n) => {
return 0.0;
});
  let cos: Fps = sub(one(), integrate(sin));
  sin.compute = (n) => {
if ((n == 0)) {
return 0.0;
}
return (extract(cos, (n - 1)) / n);
};
  return {sin, cos};
}
function floorf(x: number): number {
  let y: number = Math.trunc(x);
  return y;
}
function fmtF5(x: number): string {
  let y: number = (floorf(((x * 100000.0) + 0.5)) / 100000.0);
  let s: string = _str(y);
  let dot: number = s.indexOf(".");
  if ((dot == (0 - 1))) {
    s = (s + ".00000");
  } else {
    let decs: bigint = (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - dot) - 1);
    if ((decs > 5)) {
      s = (s).substring(0, (dot + 6));
    } else {
      while ((decs < 5)) {
        s = (s + "0");
        decs = (decs + 1);
      }
    }
  }
  return s;
}
function padFloat5(x: number, width: number): string {
  let s: string = fmtF5(x);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function partialSeries(f: Fps): string {
  let out: string = "";
  let i: number = 0;
  while ((i < 6)) {
    out = (((out + " ") + padFloat5(extract(f, i), 8)) + " ");
    i = (i + 1);
  }
  return out;
}
function main() {
  let p: Pair = sinCos();
  console.log(_str(("sin:" + partialSeries(p.sin))));
  console.log(_str(("cos:" + partialSeries(p.cos))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

