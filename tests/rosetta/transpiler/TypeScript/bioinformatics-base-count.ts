// Generated by Mochi v0.10.56 on 2025-08-03 17:23:22 GMT+7

function padLeft(s: string, w: number): string {
  let res: string = "";
  let n: number = (w - Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  while ((n > 0)) {
    res = (res + " ");
    n = (n - 1);
  }
  return (res + s);
}
let dna: string = (((((((((("" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
let i: number = 0;
let a: number = 0;
let c: number = 0;
let g: number = 0;
let t: number = 0;
let idx: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
let le: number
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str("SEQUENCE:"));
le = Number(Array.isArray(dna) || typeof dna === 'string' ? dna.length : Object.keys(dna ?? {}).length)
  while ((i < le)) {
    let k: number = (i + 50);
    if ((k > le)) {
      k = le;
    }
    console.log(_str(((padLeft(_str(i), 5) + ": ") + dna.slice(i, k))));
    i = (i + 50);
  }
  while ((idx < le)) {
    let ch: string = (dna).substring(idx, (idx + 1));
    if ((ch == "A")) {
      a = (a + 1);
    } else {
      if ((ch == "C")) {
        c = (c + 1);
      } else {
        if ((ch == "G")) {
          g = (g + 1);
        } else {
          if ((ch == "T")) {
            t = (t + 1);
          }
        }
      }
    }
    idx = (idx + 1);
  }
  console.log(_str(""));
  console.log(_str("BASE COUNT:"));
  console.log(_str(("    A: " + padLeft(_str(a), 3))));
  console.log(_str(("    C: " + padLeft(_str(c), 3))));
  console.log(_str(("    G: " + padLeft(_str(g), 3))));
  console.log(_str(("    T: " + padLeft(_str(t), 3))));
  console.log(_str("    ------"));
  console.log(_str(("    Î£: " + _str(le))));
  console.log(_str("    ======"));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

