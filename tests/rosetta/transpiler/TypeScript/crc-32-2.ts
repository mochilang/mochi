// Generated by Mochi v0.10.39 on 2025-07-24 16:59:24 GMT+7

function xor(a: number, b: number): number {
  let res: number = 0;
  let bit: number = 1;
  let x: number = a;
  let y: number = b;
  while (((x > 0) || (y > 0))) {
    const abit: number = (x % 2);
    const bbit: number = (y % 2);
    if ((abit != bbit)) {
      res = (res + bit);
    }
    x = Math.trunc(x / 2);
    y = Math.trunc(y / 2);
    bit = (bit * 2);
  }
  return res;
}
function rshift(x: number, n: number): number {
  let v: number = x;
  let i: number = 0;
  while ((i < n)) {
    v = Math.trunc(v / 2);
    i = (i + 1);
  }
  return v;
}
function ord(ch: string): number {
  const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const lower = "abcdefghijklmnopqrstuvwxyz";
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  idx = lower.indexOf(ch);
  if ((idx >= 0)) {
    return (97 + idx);
  }
  if ((ch == " ")) {
    return 32;
  }
  return 0;
}
function toHex(n: number): string {
  const digits: string = "0123456789ABCDEF";
  if ((n == 0)) {
    return "0";
  }
  let v: number = n;
  let out: string = "";
  while ((v > 0)) {
    const d: number = (v % 16);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / 16);
  }
  return out;
}
function crc32Table(): number[] {
  let table: number[] = [];
  let i: number = 0;
  while ((i < 256)) {
    let word: number = i;
    let j: number = 0;
    while ((j < 8)) {
      if (((word % 2) == 1)) {
        word = xor(rshift(word, 1), 3988292384);
      } else {
        word = rshift(word, 1);
      }
      j = (j + 1);
    }
    table = [...table, word];
    i = (i + 1);
  }
  return table;
}
const table: number[] = crc32Table();
function crc32(s: string): number {
  let crc: number = 4294967295;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const c: number = ord(s.slice(i, (i + 1)));
    const idx: number = xor((crc % 256), c);
    crc = xor(table[idx], rshift(crc, 8));
    i = (i + 1);
  }
  return (4294967295 - crc);
}
function main() {
  const s: string = "The quick brown fox jumps over the lazy dog";
  const result: number = crc32(s);
  const hex: string = toHex(result).toLowerCase();
  console.log(hex);
}
main();
