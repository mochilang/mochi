// Generated by Mochi v0.10.42 on 2025-07-28 07:54:44 GMT+7

export interface ServerData { pub: { "somefile.bin": string; "readme.txt": string } }
export interface ServerNames { pub: string[] }
export interface FileInfo { name: string; size: number; kind: string }
export interface FTPConn { dir: string }
let serverData: ServerData = {"pub": {"somefile.bin": "This is a file from the FTP server.", "readme.txt": "Hello from ftp."}};
let serverNames: ServerNames = {"pub": ["somefile.bin", "readme.txt"]};
function connect(hostport: string): FTPConn {
  console.log(_str(("Connected to " + hostport)));
  return {"dir": "/"};
}
function login(conn: FTPConn, user: string, pass: string) {
  console.log(_str(("Logged in as " + user)));
}
function changeDir(conn: FTPConn, dir: string) {
  conn.dir = dir;
}
function list(conn: FTPConn): FileInfo[] {
  let names = serverNames[conn.dir];
  let dataDir = serverData[conn.dir];
  let out: FileInfo[] = [];
  for (const name of names) {
    let content = dataDir[name];
    out.push({name, "size": (Array.isArray(content) || typeof content === 'string' ? content.length : Object.keys(content ?? {}).length), "kind": "file"});
  }
  return out;
}
function retrieve(conn: FTPConn, name: string): string {
  return serverData[conn.dir][name];
}
function main() {
  let conn: FTPConn = connect("localhost:21");
  login(conn, "anonymous", "anonymous");
  changeDir(conn, "pub");
  console.log(_str(conn.dir));
  let files: FileInfo[] = list(conn);
  for (const f of files) {
    console.log(_str(((f.name + " ") + _str(f.size))));
  }
  let data: string = retrieve(conn, "somefile.bin");
  console.log(_str((("Wrote " + _str((Array.isArray(data) || typeof data === 'string' ? data.length : Object.keys(data ?? {}).length))) + " bytes to somefile.bin")));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

