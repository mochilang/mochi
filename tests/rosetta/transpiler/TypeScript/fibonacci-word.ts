// Generated by Mochi v0.10.41 on 2025-07-27 11:34:51 GMT+7

const math = Math;
function entropy(s: string): number {
  let counts: Record<string, number> = {};
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch in counts)) {
      counts[ch] = (counts[ch] + 1);
    } else {
      counts[ch] = 1;
    }
    i = (i + 1);
  }
  let hm: number = 0.0;
  for (const k of _keys(counts)) {
    let c: number = counts[k];
    hm = (hm + (c * (math.log(c) / math.log(2.0))));
  }
  let l: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  return ((math.log(l) / math.log(2.0)) - (hm / l));
}
function fibonacciWord(n: number): string {
  let a: string = "1";
  let b: string = "0";
  let i: number = 1;
  while ((i < n)) {
    let tmp: string = b;
    b = (b + a);
    a = tmp;
    i = (i + 1);
  }
  return a;
}
function main() {
  console.log(((pad("N", 3) + pad("Length", 9)) + "  Entropy      Word"));
  let n: number = 1;
  while ((n < 10)) {
    let s: string = fibonacciWord(n);
    console.log((((((pad(String(n), 3) + pad(String((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)), 9)) + "  ") + fmt(entropy(s))) + "  ") + s));
    n = (n + 1);
  }
  while ((n <= 37)) {
    let s: string = fibonacciWord(n);
    console.log((((pad(String(n), 3) + pad(String((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)), 9)) + "  ") + fmt(entropy(s))));
    n = (n + 1);
  }
}
function pad(s: string, w: number): string {
  let t: string = s;
  while (((Array.isArray(t) || typeof t === 'string' ? t.length : Object.keys(t ?? {}).length) < w)) {
    t = (" " + t);
  }
  return t;
}
function fmt(x: number): string {
  let y: number = (floorf(((x * 100000000.0) + 0.5)) / 100000000.0);
  let s: string = String(y);
  let dot: number = s.indexOf(".");
  if ((dot == (0 - 1))) {
    s = (s + ".00000000");
  } else {
    let d: number = (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - dot) - 1);
    while ((d < 8)) {
      s = (s + "0");
      d = (d + 1);
    }
  }
  return s;
}
function floorf(x: number): number {
  let y: number = Math.trunc(x);
  return y;
}
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return (0 - 1);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _keys(obj: any): any[] {
  return Object.keys(obj);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

