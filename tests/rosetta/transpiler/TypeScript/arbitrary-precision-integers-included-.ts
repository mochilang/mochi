// Generated by Mochi v0.10.42 on 2025-07-27 18:45:11 GMT+7

function pow_int(base: number, exp: number): number {
  let result: number = 1;
  let b: number = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = (result * b);
    }
    b = (b * b);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
function pow_big(base: number, exp: number): number {
  let result: number = 1;
  let b: number = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = (result * b);
    }
    b = (b * b);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
let e1: number = pow_int(3, 2);
let e2: number = pow_int(4, e1);
let base: number = 5;
let x: number = pow_big(base, e2);
let s: string = String(x);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log("5^(4^(3^2)) has" + " " + (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) + " " + "digits:" + " " + (s).substring(0, 20) + " " + "..." + " " + (s).substring(((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 20), (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

