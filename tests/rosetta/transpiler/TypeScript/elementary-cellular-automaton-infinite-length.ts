// Generated by Mochi v0.10.41 on 2025-07-27 11:02:34 GMT+7

function pow2(n: number): number {
  let p: number = 1;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 2);
    i = (i + 1);
  }
  return p;
}
function btoi(b: boolean): number {
  if (b) {
    return 1;
  }
  return 0;
}
function addNoCells(cells: string): string {
  let l: string = "O";
  let r: string = "O";
  if (((cells).substring(0, 1) == "O")) {
    l = ".";
  }
  if (((cells).substring(((Array.isArray(cells) || typeof cells === 'string' ? cells.length : Object.keys(cells ?? {}).length) - 1), (Array.isArray(cells) || typeof cells === 'string' ? cells.length : Object.keys(cells ?? {}).length)) == "O")) {
    r = ".";
  }
  cells = ((l + cells) + r);
  cells = ((l + cells) + r);
  return cells;
}
function step(cells: string, ruleVal: number): string {
  let newCells: string = "";
  let i: number = 0;
  while ((i < ((Array.isArray(cells) || typeof cells === 'string' ? cells.length : Object.keys(cells ?? {}).length) - 2))) {
    let bin: number = 0;
    let b: number = 2;
    let n: number = i;
    while ((n < (i + 3))) {
      bin = (bin + (btoi(((cells).substring(n, (n + 1)) == "O")) * pow2(b)));
      b = (b - 1);
      n = (n + 1);
    }
    let a: string = ".";
    if (((Math.trunc(ruleVal / pow2(bin)) % 2) == 1)) {
      a = "O";
    }
    newCells = (newCells + a);
    i = (i + 1);
  }
  return newCells;
}
function repeat(ch: string, n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + ch);
    i = (i + 1);
  }
  return s;
}
function evolve(l: number, ruleVal: number) {
  console.log(((" Rule #" + String(ruleVal)) + ":"));
  let cells: string = "O";
  let x: number = 0;
  while ((x < l)) {
    cells = addNoCells(cells);
    let width: number = (40 + Math.trunc((Array.isArray(cells) || typeof cells === 'string' ? cells.length : Object.keys(cells ?? {}).length) / 2));
    let spaces: string = repeat(" ", (width - (Array.isArray(cells) || typeof cells === 'string' ? cells.length : Object.keys(cells ?? {}).length)));
    console.log((spaces + cells));
    cells = step(cells, ruleVal);
    x = (x + 1);
  }
}
function main() {
  for (const r of [90, 30]) {
    evolve(25, r);
    console.log("");
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

