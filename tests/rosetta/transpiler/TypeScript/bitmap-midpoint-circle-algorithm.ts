// Generated by Mochi v0.10.42 on 2025-07-27 20:11:48 GMT+7

function initGrid(size: number): string[][] {
  let g: string[][] = [];
  let y: number = 0;
  while ((y < size)) {
    let row: string[] = [];
    let x: number = 0;
    while ((x < size)) {
      row.push(" ");
      x = (x + 1);
    }
    g.push(row);
    y = (y + 1);
  }
  return g;
}
function set(g: string[][], x: number, y: number) {
  if (((((x >= 0) && (x < (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length))) && (y >= 0)) && (y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length)))) {
    g[y][x] = "#";
  }
}
function circle(r: number): string[][] {
  let size: number = ((r * 2) + 1);
  let g: string[][] = initGrid(size);
  let x: number = r;
  let y: number = 0;
  let err: number = (1 - r);
  while ((y <= x)) {
    set(g, (r + x), (r + y));
    set(g, (r + y), (r + x));
    set(g, (r - x), (r + y));
    set(g, (r - y), (r + x));
    set(g, (r - x), (r - y));
    set(g, (r - y), (r - x));
    set(g, (r + x), (r - y));
    set(g, (r + y), (r - x));
    y = (y + 1);
    if ((err < 0)) {
      err = ((err + (2 * y)) + 1);
    } else {
      x = (x - 1);
      err = ((err + (2 * (y - x))) + 1);
    }
  }
  return g;
}
function trimRight(row: string[]): string {
  let end: number = (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length);
  while (((end > 0) && (row[Math.trunc((end - 1))] == " "))) {
    end = (end - 1);
  }
  let s: string = "";
  let i: number = 0;
  while ((i < end)) {
    s = (s + row[i]);
    i = (i + 1);
  }
  return s;
}
let g: string[][] = circle(10);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  for (const row of g) {
    console.log(trimRight(row));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

