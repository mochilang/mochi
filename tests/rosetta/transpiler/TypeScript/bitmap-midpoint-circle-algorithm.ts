// Generated by Mochi v0.10.38 on 2025-07-23 17:13:22 GMT+7

function initGrid(size: number): string[][] {
  let g: string[][] = [];
  let y: number = 0;
  while ((y < size)) {
    let row: string[] = [];
    let x: number = 0;
    while ((x < size)) {
      row = [...row, " "];
      x = (x + 1);
    }
    g = [...g, row];
    y = (y + 1);
  }
  return g;
}
function set(g: string[][], x: number, y: number) {
  if (((((x >= 0) && (x < (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length))) && (y >= 0)) && (y < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length)))) {
    g[y][x] = "#";
  }
}
function circle(r: number): string[][] {
  const size: number = ((r * 2) + 1);
  let g: string[][] = initGrid(size);
  let x: number = r;
  let y: number = 0;
  let err: number = (1 - r);
  while ((y <= x)) {
    set(g, (r + x), (r + y));
    set(g, (r + y), (r + x));
    set(g, (r - x), (r + y));
    set(g, (r - y), (r + x));
    set(g, (r - x), (r - y));
    set(g, (r - y), (r - x));
    set(g, (r + x), (r - y));
    set(g, (r + y), (r - x));
    y = (y + 1);
    if ((err < 0)) {
      err = ((err + (2 * y)) + 1);
    } else {
      x = (x - 1);
      err = ((err + (2 * (y - x))) + 1);
    }
  }
  return g;
}
function trimRight(row: string[]): string {
  let end: number = (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length);
  while (((end > 0) && (row[Math.trunc((end - 1))] == " "))) {
    end = (end - 1);
  }
  let s: string = "";
  let i: number = 0;
  while ((i < end)) {
    s = (s + row[Math.trunc(i)]);
    i = (i + 1);
  }
  return s;
}
let g: string[][] = circle(10);
for (const row of g) {
  console.log(trimRight(row));
}
