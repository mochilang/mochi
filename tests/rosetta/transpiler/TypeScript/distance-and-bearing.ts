// Generated by Mochi v0.10.42 on 2025-07-27 21:44:52 GMT+7

let PI: number = 3.141592653589793;
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 8)) {
    let denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function cosApprox(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n <= 8)) {
    let denom = (((2 * n) - 1) * (2 * n));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function atanApprox(x: number): number {
  if ((x > 1.0)) {
    return ((PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  if ((x < -1.0)) {
    return ((-PI / 2.0) - (x / ((x * x) + 0.28)));
  }
  return (x / (1.0 + ((0.28 * x) * x)));
}
function atan2Approx(y: number, x: number): number {
  if ((x > 0.0)) {
    let r: number = atanApprox((y / x));
    return r;
  }
  if ((x < 0.0)) {
    if ((y >= 0.0)) {
      return (atanApprox((y / x)) + PI);
    }
    return (atanApprox((y / x)) - PI);
  }
  if ((y > 0.0)) {
    return (PI / 2.0);
  }
  if ((y < 0.0)) {
    return (-PI / 2.0);
  }
  return 0.0;
}
function sqrtApprox(x: number): number {
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
function rad(x: number): number {
  return ((x * PI) / 180.0);
}
function deg(x: number): number {
  return ((x * 180.0) / PI);
}
function distance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  let phi1: number = rad(lat1);
  let phi2: number = rad(lat2);
  let dphi: number = rad((lat2 - lat1));
  let dlambda: number = rad((lon2 - lon1));
  let sdphi: number = sinApprox((dphi / 2));
  let sdlambda: number = sinApprox((dlambda / 2));
  let a: number = ((sdphi * sdphi) + (((cosApprox(phi1) * cosApprox(phi2)) * sdlambda) * sdlambda));
  let c: number = (2 * atan2Approx(sqrtApprox(a), sqrtApprox((1 - a))));
  return ((6371.0 / 1.852) * c);
}
function bearing(lat1: number, lon1: number, lat2: number, lon2: number): number {
  let phi1: number = rad(lat1);
  let phi2: number = rad(lat2);
  let dl: number = rad((lon2 - lon1));
  let y: number = (sinApprox(dl) * cosApprox(phi2));
  let x: number = ((cosApprox(phi1) * sinApprox(phi2)) - ((sinApprox(phi1) * cosApprox(phi2)) * cosApprox(dl)));
  let br: number = deg(atan2Approx(y, x));
  if ((br < 0)) {
    br = (br + 360);
  }
  return br;
}
export interface Airport { name: string; country: string; icao: string; lat: number; lon: number }
let airports: Airport[] = [{"name": "Koksijde Air Base", "country": "Belgium", "icao": "EBFN", "lat": 51.090301513671875, "lon": 2.652780055999756}, {"name": "Ostend-Bruges International Airport", "country": "Belgium", "icao": "EBOS", "lat": 51.198898315399994, "lon": 2.8622200489}, {"name": "Kent International Airport", "country": "United Kingdom", "icao": "EGMH", "lat": 51.342201, "lon": 1.34611}, {"name": "Calais-Dunkerque Airport", "country": "France", "icao": "LFAC", "lat": 50.962100982666016, "lon": 1.954759955406189}, {"name": "Westkapelle heliport", "country": "Belgium", "icao": "EBKW", "lat": 51.32222366333, "lon": 3.2930560112}, {"name": "Lympne Airport", "country": "United Kingdom", "icao": "EGMK", "lat": 51.08, "lon": 1.013}, {"name": "Ursel Air Base", "country": "Belgium", "icao": "EBUL", "lat": 51.14419937133789, "lon": 3.475559949874878}, {"name": "Southend Airport", "country": "United Kingdom", "icao": "EGMC", "lat": 51.5713996887207, "lon": 0.6955559849739075}, {"name": "Merville-Calonne Airport", "country": "France", "icao": "LFQT", "lat": 50.61840057373047, "lon": 2.642240047454834}, {"name": "Wevelgem Airport", "country": "Belgium", "icao": "EBKT", "lat": 50.817199707, "lon": 3.20472002029}, {"name": "Midden-Zeeland Airport", "country": "Netherlands", "icao": "EHMZ", "lat": 51.5121994019, "lon": 3.73111009598}, {"name": "Lydd Airport", "country": "United Kingdom", "icao": "EGMD", "lat": 50.95610046386719, "lon": 0.9391670227050781}, {"name": "RAF Wattisham", "country": "United Kingdom", "icao": "EGUW", "lat": 52.1273002625, "lon": 0.956264019012}, {"name": "Beccles Airport", "country": "United Kingdom", "icao": "EGSM", "lat": 52.435298919699996, "lon": 1.6183300018300002}, {"name": "Lille/Marcq-en-Baroeul Airport", "country": "France", "icao": "LFQO", "lat": 50.687198638916016, "lon": 3.0755600929260254}, {"name": "Lashenden (Headcorn) Airfield", "country": "United Kingdom", "icao": "EGKH", "lat": 51.156898, "lon": 0.641667}, {"name": "Le Touquet-CÃ´te d'Opale Airport", "country": "France", "icao": "LFAT", "lat": 50.517398834228516, "lon": 1.6205899715423584}, {"name": "Rochester Airport", "country": "United Kingdom", "icao": "EGTO", "lat": 51.351898193359375, "lon": 0.5033329725265503}, {"name": "Lille-Lesquin Airport", "country": "France", "icao": "LFQQ", "lat": 50.563332, "lon": 3.086886}, {"name": "Thurrock Airfield", "country": "United Kingdom", "icao": "EGMT", "lat": 51.537505, "lon": 0.367634}];
function floor(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function pow10(n: number): number {
  let p: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    p = (p * 10.0);
    i = (i + 1);
  }
  return p;
}
function round(x: number, n: number): number {
  let m: number = pow10(n);
  return (floor(((x * m) + 0.5)) / m);
}
function sortByDistance(xs: any[][]): any[][] {
  let arr: any[][] = xs;
  let i: number = 1;
  while ((i < (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    let j: number = i;
    while (((j > 0) && (arr[Math.trunc((j - 1))][Math.trunc(0)] > arr[j][Math.trunc(0)]))) {
      let tmp: any[] = arr[Math.trunc((j - 1))];
      arr[(j - 1)] = arr[j];
      arr[j] = tmp;
      j = (j - 1);
    }
    i = (i + 1);
  }
  return arr;
}
function main() {
  let planeLat: number = 51.514669;
  let planeLon: number = 2.198581;
  let results: any[][] = [];
  for (const ap of airports) {
    let d: number = distance(planeLat, planeLon, ap.lat, ap.lon);
    let b: number = bearing(planeLat, planeLon, ap.lat, ap.lon);
    results.push([d, b, ap]);
  }
  results = sortByDistance(results);
  console.log("Distance Bearing ICAO Country               Airport");
  console.log("--------------------------------------------------------------");
  let i: number = 0;
  while ((i < (Array.isArray(results) || typeof results === 'string' ? results.length : Object.keys(results ?? {}).length))) {
    let r: any[] = results[i];
    let ap: Airport = r[Math.trunc(2)];
    let dist = r[Math.trunc(0)];
    let bear = r[Math.trunc(1)];
    let line: string = ((((((((String(round(dist, 1)) + "\t") + String(round(bear, 0))) + "\t") + ap.icao) + "\t") + ap.country) + " ") + ap.name);
    console.log(line);
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

