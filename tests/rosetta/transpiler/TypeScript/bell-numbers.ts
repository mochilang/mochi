// Generated by Mochi v0.10.56 on 2025-08-03 17:23:11 GMT+7

function bellTriangle(n: number): number[][] {
  let tri: number[][] = [];
  let i: number = 0;
  while ((i < n)) {
    let row: number[] = [];
    let j: number = 0;
    while ((j < i)) {
      row.push(0n);
      j = (j + 1);
    }
    tri.push(row);
    i = (i + 1);
  }
  tri[1][0] = 1;
  i = 2;
  while ((i < n)) {
    tri[i][0] = tri[Math.trunc((i - 1))][Math.trunc((i - 2))];
    let j: number = 1;
    while ((j < i)) {
      tri[i][j] = (tri[i][Math.trunc((j - 1))] + tri[Math.trunc((i - 1))][Math.trunc((j - 1))]);
      j = (j + 1);
    }
    i = (i + 1);
  }
  return tri;
}
function main() {
  let bt: number[][] = bellTriangle(51);
  console.log(_str("First fifteen and fiftieth Bell numbers:"));
  for (let i = 1; i < 16; i++) {
    console.log(_str(((("" + String(_str(i)).padStart(2, " ")) + ": ") + _str(bt[i][Math.trunc(0)]))));
  }
  console.log(_str(("50: " + _str(bt[Math.trunc(50)][Math.trunc(0)]))));
  console.log(_str(""));
  console.log(_str("The first ten rows of Bell's triangle:"));
  for (let i = 1; i < 11; i++) {
    console.log(_str("[" + (bt[i]).join(' ') + "]"));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

