// Generated by Mochi v0.10.40 on 2025-07-25 21:25:10 GMT+7

export type Church = any;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function id(x) {
    return x;
  }
  function compose(f, g) {
    return (x) => {
return f(g(x));
};
  }
  function zero() {
    return (f) => {
return id;
};
  }
  function one() {
    return id;
  }
  function succ(n) {
    return (f) => {
return compose(f, n(f));
};
  }
  function plus(m, n) {
    return (f) => {
return compose(m(f), n(f));
};
  }
  function mult(m, n) {
    return compose(m, n);
  }
  function exp(m, n) {
    return n(m);
  }
  function toInt(x): number {
    let counter: number = 0;
    function fCounter(f) {
      counter = (counter + 1);
      return f;
    }
    x(fCounter)(id);
    return counter;
  }
  function toStr(x): string {
    let s: string = "";
    function fCounter(f) {
      s = (s + "|");
      return f;
    }
    x(fCounter)(id);
    return s;
  }
  function main() {
    console.log(("zero = " + String(toInt(zero()))));
    const onev = one();
    console.log(("one = " + String(toInt(onev))));
    const two = succ(succ(zero()));
    console.log(("two = " + String(toInt(two))));
    const three = plus(onev, two);
    console.log(("three = " + String(toInt(three))));
    const four = mult(two, two);
    console.log(("four = " + String(toInt(four))));
    const eight = exp(two, three);
    console.log(("eight = " + String(toInt(eight))));
    console.log(("toStr(four) = " + toStr(four)));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

