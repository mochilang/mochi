// Generated by Mochi v0.10.42 on 2025-07-28 00:54:03 GMT+7

function p(x: number, e: number): number {
  let r: number = 1.0;
  let i: number = 0;
  while ((i < Math.trunc(e))) {
    r = (r * x);
    i = (i + 1);
  }
  return r;
}
let ops: string[] = ["-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"];
function padInt(f: number): string {
  let s: string = String(Math.trunc(f));
  if ((f >= 0)) {
    return (" " + s);
  }
  return s;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  for (const x of [-5.0, 5.0]) {
    for (const e of [2.0, 3.0]) {
      let a: number = -p(x, e);
      let b: number = -p(x, e);
      let c: number = p(-x, e);
      let d: number = -p(x, e);
      console.log((((((((((((((((((((("x = " + ((x < 0) ? "" : " ")) + String(Math.trunc(x))) + " e = ") + String(Math.trunc(e))) + " | ") + ops[Math.trunc(0)]) + " = ") + padInt(a)) + " | ") + ops[Math.trunc(1)]) + " = ") + padInt(b)) + " | ") + ops[Math.trunc(2)]) + " = ") + padInt(c)) + " | ") + ops[Math.trunc(3)]) + " = ") + padInt(d)));
    }
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

