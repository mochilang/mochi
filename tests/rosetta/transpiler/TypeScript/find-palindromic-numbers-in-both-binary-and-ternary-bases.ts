// Generated by Mochi v0.10.41 on 2025-07-27 11:35:15 GMT+7

function toBase(n: number, b: number): string {
  if ((n == 0)) {
    return "0";
  }
  let s: string = "";
  let x: number = n;
  while ((x > 0)) {
    s = (String((x % b)) + s);
    x = Math.trunc(Math.trunc(x / b));
  }
  return s;
}
function reverseStr(s: string): string {
  let out: string = "";
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1);
  while ((i >= 0)) {
    out = (out + s.slice(i, (i + 1)));
    i = (i - 1);
  }
  return out;
}
function isPal(s: string): boolean {
  return (s == reverseStr(s));
}
function main() {
  console.log("Numbers palindromic in both binary and ternary :\n");
  let count: number = 0;
  let n: number = 0;
  while ((count < 4)) {
    let b2: string = toBase(n, 2);
    let b3: string = toBase(n, 3);
    if ((isPal(b2) && isPal(b3))) {
      console.log(String(n));
      count = (count + 1);
    }
    n = (n + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

