// Generated by Mochi v0.10.42 on 2025-07-27 18:45:56 GMT+7

function Node(data: number): Record<string, any> {
  return {"Data": data, "Balance": 0, "Link": [null, null]};
}
function getLink(n: Record<string, any>, dir: number) {
  return n.Link[dir];
}
function setLink(n: Record<string, any>, dir: number, v) {
  let links: any[] = n.Link;
  links[dir] = v;
  n.Link = links;
}
function opp(dir: number): number {
  return (1 - dir);
}
function single(root: Record<string, any>, dir: number): Record<string, any> {
  let tmp = getLink(root, opp(dir));
  setLink(root, opp(dir), getLink(tmp, dir));
  setLink(tmp, dir, root);
  return tmp;
}
function double(root: Record<string, any>, dir: number): Record<string, any> {
  let tmp = getLink(getLink(root, opp(dir)), dir);
  setLink(getLink(root, opp(dir)), dir, getLink(tmp, opp(dir)));
  setLink(tmp, opp(dir), getLink(root, opp(dir)));
  setLink(root, opp(dir), tmp);
  tmp = getLink(root, opp(dir));
  setLink(root, opp(dir), getLink(tmp, dir));
  setLink(tmp, dir, root);
  return tmp;
}
function adjustBalance(root: Record<string, any>, dir: number, bal: number) {
  let n: Record<string, any> = getLink(root, dir);
  let nn: Record<string, any> = getLink(n, opp(dir));
  if ((nn.Balance == 0)) {
    root.Balance = 0;
    n.Balance = 0;
  } else {
    if ((nn.Balance == bal)) {
      root.Balance = -bal;
      n.Balance = 0;
    } else {
      root.Balance = 0;
      n.Balance = bal;
    }
  }
  nn.Balance = 0;
}
function insertBalance(root: Record<string, any>, dir: number): Record<string, any> {
  let n: Record<string, any> = getLink(root, dir);
  let bal: number = ((2 * dir) - 1);
  if ((n.Balance == bal)) {
    root.Balance = 0;
    n.Balance = 0;
    return single(root, opp(dir));
  }
  adjustBalance(root, dir, bal);
  return double(root, opp(dir));
}
function insertR(root, data: number): Record<string, any> {
  if ((root == null)) {
    return {"node": Node(data), "done": false};
  }
  let node: Record<string, any> = root;
  let dir: number = 0;
  if ((Math.trunc(node.Data) < data)) {
    dir = 1;
  }
  let r: Record<string, any> = insertR(getLink(node, dir), data);
  setLink(node, dir, r.node);
  if (r.done) {
    return {node, "done": true};
  }
  node.Balance = (Math.trunc(node.Balance) + ((2 * dir) - 1));
  if ((node.Balance == 0)) {
    return {node, "done": true};
  }
  if (((node.Balance == 1) || (node.Balance == -1))) {
    return {node, "done": false};
  }
  return {"node": insertBalance(node, dir), "done": true};
}
function Insert(tree, data: number) {
  let r: Record<string, any> = insertR(tree, data);
  return r.node;
}
function removeBalance(root: Record<string, any>, dir: number): Record<string, any> {
  let n: Record<string, any> = getLink(root, opp(dir));
  let bal: number = ((2 * dir) - 1);
  if ((n.Balance == -bal)) {
    root.Balance = 0;
    n.Balance = 0;
    return {"node": single(root, dir), "done": false};
  }
  if ((n.Balance == bal)) {
    adjustBalance(root, opp(dir), -bal);
    return {"node": double(root, dir), "done": false};
  }
  root.Balance = -bal;
  n.Balance = bal;
  return {"node": single(root, dir), "done": true};
}
function removeR(root, data: number): Record<string, any> {
  if ((root == null)) {
    return {"node": null, "done": false};
  }
  let node: Record<string, any> = root;
  if ((Math.trunc(node.Data) == data)) {
    if ((getLink(node, 0) == null)) {
      return {"node": getLink(node, 1), "done": false};
    }
    if ((getLink(node, 1) == null)) {
      return {"node": getLink(node, 0), "done": false};
    }
    let heir = getLink(node, 0);
    while ((getLink(heir, 1) != null)) {
      heir = getLink(heir, 1);
    }
    node.Data = heir.Data;
    data = Math.trunc(heir.Data);
  }
  let dir: number = 0;
  if ((Math.trunc(node.Data) < data)) {
    dir = 1;
  }
  let r: Record<string, any> = removeR(getLink(node, dir), data);
  setLink(node, dir, r.node);
  if (r.done) {
    return {node, "done": true};
  }
  node.Balance = ((Math.trunc(node.Balance) + 1) - (2 * dir));
  if (((node.Balance == 1) || (node.Balance == -1))) {
    return {node, "done": true};
  }
  if ((node.Balance == 0)) {
    return {node, "done": false};
  }
  return removeBalance(node, dir);
}
function Remove(tree, data: number) {
  let r: Record<string, any> = removeR(tree, data);
  return r.node;
}
function indentStr(n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + " ");
    i = (i + 1);
  }
  return s;
}
function dumpNode(node, indent: number, comma: boolean) {
  let sp: string = indentStr(indent);
  if ((node == null)) {
    let line: string = (sp + "null");
    if (comma) {
      line = (line + ",");
    }
    console.log(line);
  } else {
    console.log((sp + "{"));
    console.log((((indentStr((indent + 3)) + "\"Data\": ") + String(node.Data)) + ","));
    console.log((((indentStr((indent + 3)) + "\"Balance\": ") + String(node.Balance)) + ","));
    console.log((indentStr((indent + 3)) + "\"Link\": ["));
    dumpNode(getLink(node, 0), (indent + 6), true);
    dumpNode(getLink(node, 1), (indent + 6), false);
    console.log((indentStr((indent + 3)) + "]"));
    let end: string = (sp + "}");
    if (comma) {
      end = (end + ",");
    }
    console.log(end);
  }
}
function dump(node, indent: number) {
  dumpNode(node, indent, false);
}
function main() {
  let tree = null;
  console.log("Empty tree:");
  dump(tree, 0);
  console.log("");
  console.log("Insert test:");
  tree = Insert(tree, 3);
  tree = Insert(tree, 1);
  tree = Insert(tree, 4);
  tree = Insert(tree, 1);
  tree = Insert(tree, 5);
  dump(tree, 0);
  console.log("");
  console.log("Remove test:");
  tree = Remove(tree, 3);
  tree = Remove(tree, 1);
  let t: Record<string, any> = tree;
  t.Balance = 0;
  tree = t;
  dump(tree, 0);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

