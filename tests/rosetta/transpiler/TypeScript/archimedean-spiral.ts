// Generated by Mochi v0.10.42 on 2025-07-27 18:45:12 GMT+7

let PI: number = 3.141592653589793;
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 10)) {
    let denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function cosApprox(x: number): number {
  let term: number = 1.0;
  let sum: number = 1.0;
  let n: number = 1;
  while ((n <= 10)) {
    let denom = (((2 * n) - 1) * (2 * n));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
let degreesIncr: number = ((0.1 * PI) / 180.0);
let turns: number = 2.0;
let stop: number = (((360.0 * turns) * 10.0) * degreesIncr);
let width: number = 600.0;
let centre: number = (width / 2.0);
let a: number = 1.0;
let b: number = 20.0;
let theta: number = 0.0;
let count: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  while ((theta < stop)) {
    let r: number = (a + (b * theta));
    let x: number = (r * cosApprox(theta));
    let y: number = (r * sinApprox(theta));
    if (((count % 100) == 0)) {
      console.log(((String((centre + x)) + ",") + String((centre - y))));
    }
    theta = (theta + degreesIncr);
    count = (count + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

