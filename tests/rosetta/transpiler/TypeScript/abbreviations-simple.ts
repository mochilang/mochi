// Generated by Mochi v0.10.37 on 2025-07-23 10:26:34 GMT+7

export interface Digits { 0: number; 1: number; 2: number; 3: number; 4: number; 5: number; 6: number; 7: number; 8: number; 9: number }
function fields(s: string): string[] {
  let words: string[] = [];
  let cur = "";
  let i = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch = (s).substring(i, (i + 1));
    if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        words = [...words, cur];
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    words = [...words, cur];
  }
  return words;
}
function padRight(s: string, width: number): string {
  let out = s;
  let i = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while ((i < width)) {
    out = (out + " ");
    i = (i + 1);
  }
  return out;
}
function join(xs: string[], sep: string): string {
  let res = "";
  let i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function parseIntStr(str: string): number {
  let i = 0;
  let neg = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n = 0;
  const digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str.slice(i, (i + 1))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function isDigits(s: string): boolean {
  if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) == 0)) {
    return false;
  }
  let i = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch = (s).substring(i, (i + 1));
    if (((ch < "0") || (ch > "9"))) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function readTable(table: string): Record<string, any> {
  const toks = fields(table);
  let cmds: string[] = [];
  let mins: number[] = [];
  let i = 0;
  while ((i < (Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length))) {
    const cmd = toks[i];
    let minlen = (Array.isArray(cmd) || typeof cmd === 'string' ? cmd.length : Object.keys(cmd ?? {}).length);
    i = (i + 1);
    if (((i < (Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length)) && isDigits(toks[i]))) {
      const num = parseIntStr(toks[i]);
      if (((num >= 1) && (num < (Array.isArray(cmd) || typeof cmd === 'string' ? cmd.length : Object.keys(cmd ?? {}).length)))) {
        minlen = num;
        i = (i + 1);
      }
    }
    cmds = [...cmds, cmd];
    mins = [...mins, minlen];
  }
  return {"commands": cmds, mins};
}
function validate(commands: string[], mins: number[], words: string[]): string[] {
  let results: string[] = [];
  let wi = 0;
  while ((wi < (Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length))) {
    const w = words[wi];
    let found = false;
    const wlen = (Array.isArray(w) || typeof w === 'string' ? w.length : Object.keys(w ?? {}).length);
    let ci = 0;
    while ((ci < (Array.isArray(commands) || typeof commands === 'string' ? commands.length : Object.keys(commands ?? {}).length))) {
      const cmd = commands[ci];
      if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= (Array.isArray(cmd) || typeof cmd === 'string' ? cmd.length : Object.keys(cmd ?? {}).length)))) {
        const c = cmd.toUpperCase();
        const ww = w.toUpperCase();
        if (((c).substring(0, wlen) == ww)) {
          results = [...results, c];
          found = true;
          break
        }
      }
      ci = (ci + 1);
    }
    if (!found) {
      results = [...results, "*error*"];
    }
    wi = (wi + 1);
  }
  return results;
}
function main() {
  const table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ");
  const sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin";
  const tbl = readTable(table);
  const commands = tbl.commands;
  const mins = tbl.mins;
  const words = fields(sentence);
  const results = validate(commands, mins, words);
  let out1 = "user words:";
  let k = 0;
  while ((k < (Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length))) {
    out1 = (out1 + " ");
    if ((k < ((Array.isArray(words) || typeof words === 'string' ? words.length : Object.keys(words ?? {}).length) - 1))) {
      out1 = (out1 + padRight(words[k], (Array.isArray(results[k]) || typeof results[k] === 'string' ? results[k].length : Object.keys(results[k] ?? {}).length)));
    } else {
      out1 = (out1 + words[k]);
    }
    k = (k + 1);
  }
  console.log(out1);
  console.log(("full words: " + join(results, " ")));
}
main();
