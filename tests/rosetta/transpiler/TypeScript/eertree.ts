// Generated by Mochi v0.10.42 on 2025-07-27 21:45:01 GMT+7

let EVEN_ROOT: number = 0;
let ODD_ROOT: number = 1;
function newNode(len: number): Record<string, any> {
  return {"length": len, "edges": {}, "suffix": 0};
}
function eertree(s: string): Record<string, any>[] {
  let tree: Record<string, any>[] = [];
  tree.push({"length": 0, "suffix": ODD_ROOT, "edges": {}});
  tree.push({"length": -1, "suffix": ODD_ROOT, "edges": {}});
  let suffix: number = ODD_ROOT;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let c: string = s.slice(i, (i + 1));
    let n: number = suffix;
    let k: number = 0;
    while (true) {
      k = Math.trunc(tree[n].length);
      let b: number = ((i - k) - 1);
      if (((b >= 0) && (s.slice(b, (b + 1)) == c))) {
        break
      }
      n = Math.trunc(tree[n].suffix);
    }
    let edges: Record<string, number> = tree[n].edges;
    if ((c in edges)) {
      suffix = edges[c];
      i = (i + 1);
      continue
    }
    suffix = (Array.isArray(tree) || typeof tree === 'string' ? tree.length : Object.keys(tree ?? {}).length);
    tree.push(newNode((k + 2)));
    edges[c] = suffix;
    tree[n].edges = edges;
    if ((Math.trunc(tree[suffix].length) == 1)) {
      tree[suffix].suffix = 0;
      i = (i + 1);
      continue
    }
    while (true) {
      n = Math.trunc(tree[n].suffix);
      let b: number = ((i - Math.trunc(tree[n].length)) - 1);
      if (((b >= 0) && (s.slice(b, (b + 1)) == c))) {
        break
      }
    }
    let en: Record<string, number> = tree[n].edges;
    tree[suffix].suffix = en[c];
    i = (i + 1);
  }
  return tree;
}
function child(tree: Record<string, any>[], idx: number, p: string, acc: string[]): string[] {
  let edges: Record<string, number> = tree[idx].edges;
  for (const ch in edges) {
    let nxt: number = edges[ch];
    let pal: string = ((ch + p) + ch);
    acc.push(pal);
    acc = child(tree, nxt, pal, acc);
  }
  return acc;
}
function subPalindromes(tree: Record<string, any>[]): string[] {
  let res: string[] = [];
  res = child(tree, EVEN_ROOT, "", res);
  let oEdges: Record<string, number> = tree[ODD_ROOT].edges;
  for (const ch in oEdges) {
    res.push(ch);
    res = child(tree, oEdges[ch], ch, res);
  }
  return res;
}
function main() {
  let tree: Record<string, any>[] = eertree("eertree");
  let subs: string[] = subPalindromes(tree);
  console.log(String(subs));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

