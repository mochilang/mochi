// Generated by Mochi v0.10.40 on 2025-07-25 17:41:42 GMT+7

function absi(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
export interface Point { x: number; y: number }
function bresenham(x0: number, y0: number, x1: number, y1: number): Point[] {
  let dx: number = absi((x1 - x0));
  let dy: number = absi((y1 - y0));
  let sx: number = -1;
  if ((x0 < x1)) {
    sx = 1;
  }
  let sy: number = -1;
  if ((y0 < y1)) {
    sy = 1;
  }
  let err: number = (dx - dy);
  let pts: Point[] = [];
  while (true) {
    pts = [...pts, {"x": x0, "y": y0}];
    if (((x0 == x1) && (y0 == y1))) {
      break
    }
    let e2: number = (2 * err);
    if ((e2 > -dy)) {
      err = (err - dy);
      x0 = (x0 + sx);
    }
    if ((e2 < dx)) {
      err = (err + dx);
      y0 = (y0 + sy);
    }
  }
  return pts;
}
function main() {
  const pts: Point[] = bresenham(0, 0, 6, 4);
  let i: number = 0;
  while ((i < (Array.isArray(pts) || typeof pts === 'string' ? pts.length : Object.keys(pts ?? {}).length))) {
    const p: Point = pts[i];
    console.log((((("(" + String(p.x)) + ",") + String(p.y)) + ")"));
    i = (i + 1);
  }
}
main();
