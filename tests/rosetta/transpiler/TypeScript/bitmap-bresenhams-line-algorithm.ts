// Generated by Mochi v0.10.42 on 2025-07-27 20:11:45 GMT+7

function absi(x: number): number {
  if ((x < 0)) {
    return -x;
  }
  return x;
}
export interface Point { x: number; y: number }
function bresenham(x0: number, y0: number, x1: number, y1: number): Point[] {
  let dx: number = absi((x1 - x0));
  let dy: number = absi((y1 - y0));
  let sx: number = -1;
  if ((x0 < x1)) {
    sx = 1;
  }
  let sy: number = -1;
  if ((y0 < y1)) {
    sy = 1;
  }
  let err: number = (dx - dy);
  let pts: Point[] = [];
  while (true) {
    pts.push({"x": x0, "y": y0});
    if (((x0 == x1) && (y0 == y1))) {
      break
    }
    let e2: number = (2 * err);
    if ((e2 > -dy)) {
      err = (err - dy);
      x0 = (x0 + sx);
    }
    if ((e2 < dx)) {
      err = (err + dx);
      y0 = (y0 + sy);
    }
  }
  return pts;
}
function main() {
  let pts: Point[] = bresenham(0, 0, 6, 4);
  let i: number = 0;
  while ((i < (Array.isArray(pts) || typeof pts === 'string' ? pts.length : Object.keys(pts ?? {}).length))) {
    let p: Point = pts[i];
    console.log((((("(" + String(p.x)) + ",") + String(p.y)) + ")"));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

