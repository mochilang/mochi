// Generated by Mochi v0.10.41 on 2025-07-27 11:34:07 GMT+7

let target: string = "METHINKS IT IS LIKE A WEASEL";
let chars: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
let seed: number = 1;
function randInt(s: number, n: number): number[] {
  let next: number = (((s * 1664525) + 1013904223) % 2147483647);
  return [next, (next % n)];
}
function randChar(): string {
  let r: number[] = randInt(seed, (Array.isArray(chars) || typeof chars === 'string' ? chars.length : Object.keys(chars ?? {}).length));
  seed = r[Math.trunc(0)];
  let idx: number = Math.trunc(r[Math.trunc(1)]);
  return (chars).substring(idx, (idx + 1));
}
function randomString(n: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < n)) {
    s = (s + randChar());
    i = (i + 1);
  }
  return s;
}
function fitness(s: string): number {
  let h: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(target) || typeof target === 'string' ? target.length : Object.keys(target ?? {}).length))) {
    if (((s).substring(i, (i + 1)) != (target).substring(i, (i + 1)))) {
      h = (h + 1);
    }
    i = (i + 1);
  }
  return h;
}
function mutate(p: string): string {
  let m: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length))) {
    let r: number[] = randInt(seed, 20);
    seed = r[Math.trunc(0)];
    if ((r[Math.trunc(1)] == 0)) {
      m = (m + randChar());
    } else {
      m = (m + (p).substring(i, (i + 1)));
    }
    i = (i + 1);
  }
  return m;
}
function main() {
  let parent: string = randomString((Array.isArray(target) || typeof target === 'string' ? target.length : Object.keys(target ?? {}).length));
  console.log(parent);
  let best: number = fitness(parent);
  let done: boolean = false;
  while (!done) {
    let i: number = 0;
    while ((i < 20)) {
      let child: string = mutate(parent);
      let f: number = fitness(child);
      if ((f < best)) {
        best = f;
        parent = child;
        console.log(parent);
        if ((best == 0)) {
          done = true;
          break
        }
      }
      i = (i + 1);
    }
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

