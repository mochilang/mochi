// Generated by Mochi v0.10.56 on 2025-08-03 17:23:33 GMT+7

let grid: string[][] = [[".", ".", ".", ".", "."], [".", "#", "#", "#", "."], [".", "#", ".", "#", "."], [".", "#", "#", "#", "."], [".", ".", ".", ".", "."]];
function flood(x: number, y: number, repl: string) {
  let target: string = grid[y][x];
  if ((target == repl)) {
    return;
  }
  function ff(px: number, py: number) {
    if (((((px < 0) || (py < 0)) || (py >= Number(Array.isArray(grid) || typeof grid === 'string' ? grid.length : Object.keys(grid ?? {}).length))) || (px >= Number(Array.isArray(grid[Math.trunc(0)]) || typeof grid[Math.trunc(0)] === 'string' ? grid[Math.trunc(0)].length : Object.keys(grid[Math.trunc(0)] ?? {}).length)))) {
      return;
    }
    if ((grid[py][px] != target)) {
      return;
    }
    grid[py][px] = repl;
    ff((px - 1), py);
    ff((px + 1), py);
    ff(px, (py - 1));
    ff(px, (py + 1));
  }
  ff(x, y);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  flood(2, 2, "o");
  for (const row of grid) {
    let line: string = "";
    for (const ch of row) {
      line = (line + ch);
    }
    console.log(_str(line));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

