// Generated by Mochi v0.10.39 on 2025-07-25 10:16:15 GMT+7

export interface MoveResult { idx: number; ok: boolean }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
{
  const _startMem = _mem()
  const _start = _now()
  let board: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0];
  const solved: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0];
  let empty: number = 15;
  let moves: number = 0;
  let quit: boolean = false;
  function randMove(): number {
    return (_now() % 4);
  }
  function isSolved(): boolean {
    let i: number = 0;
    while ((i < 16)) {
      if ((board[i] != solved[i])) {
        return false;
      }
      i = (i + 1);
    }
    return true;
  }
  function isValidMove(m: number): MoveResult {
    if ((m == 0)) {
      return {"idx": (empty - 4), "ok": (Math.trunc(empty / 4) > 0)};
    }
    if ((m == 1)) {
      return {"idx": (empty + 4), "ok": (Math.trunc(empty / 4) < 3)};
    }
    if ((m == 2)) {
      return {"idx": (empty + 1), "ok": ((empty % 4) < 3)};
    }
    if ((m == 3)) {
      return {"idx": (empty - 1), "ok": ((empty % 4) > 0)};
    }
    return {"idx": 0, "ok": false};
  }
  function doMove(m: number): boolean {
    const r: MoveResult = isValidMove(m);
    if (!r.ok) {
      return false;
    }
    const i: number = empty;
    const j: number = r.idx;
    const tmp: number = board[i];
    board[i] = board[j];
    board[j] = tmp;
    empty = j;
    moves = (moves + 1);
    return true;
  }
  function shuffle(n: number) {
    let i: number = 0;
    while (((i < n) || isSolved())) {
      if (doMove(randMove())) {
        i = (i + 1);
      }
    }
  }
  function printBoard() {
    let line: string = "";
    let i: number = 0;
    while ((i < 16)) {
      const val: number = board[i];
      if ((val == 0)) {
        line = (line + "  .");
      } else {
        const s: string = String(val);
        if ((val < 10)) {
          line = ((line + "  ") + s);
        } else {
          line = ((line + " ") + s);
        }
      }
      if (((i % 4) == 3)) {
        console.log(line);
        line = "";
      }
      i = (i + 1);
    }
  }
  function playOneMove() {
    while (true) {
      console.log((("Enter move #" + String((moves + 1))) + " (U, D, L, R, or Q): "));
      const s: string = _input();
      if ((s == "")) {
        continue
      }
      const c: string = s.slice(0, 1);
      let m: number = 0;
      if (((c == "U") || (c == "u"))) {
        m = 0;
      } else {
        if (((c == "D") || (c == "d"))) {
          m = 1;
        } else {
          if (((c == "R") || (c == "r"))) {
            m = 2;
          } else {
            if (((c == "L") || (c == "l"))) {
              m = 3;
            } else {
              if (((c == "Q") || (c == "q"))) {
                console.log((("Quiting after " + String(moves)) + " moves."));
                quit = true;
                return;
              } else {
                console.log(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like)."));
                continue
              }
            }
          }
        }
      }
      if (!doMove(m)) {
        console.log("That is not a valid move at the moment.");
        continue
      }
      return;
    }
  }
  function play() {
    console.log("Starting board:");
    while ((!quit && (isSolved() == false))) {
      console.log("");
      printBoard();
      playOneMove();
    }
    if (isSolved()) {
      console.log((("You solved the puzzle in " + String(moves)) + " moves."));
    }
  }
  function main() {
    shuffle(50);
    play();
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

