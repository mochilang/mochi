// Generated by Mochi v0.10.39 on 2025-07-24 15:21:43 GMT+7

let n: string[][] = [];
function initN() {
  let i: number = 0;
  while ((i < 15)) {
    let row: string[] = [];
    let j: number = 0;
    while ((j < 11)) {
      row = [...row, " "];
      j = (j + 1);
    }
    row[5] = "x";
    n = [...n, row];
    i = (i + 1);
  }
}
function horiz(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[r][c] = "x";
    c = (c + 1);
  }
}
function verti(r1: number, r2: number, c: number) {
  let r: number = r1;
  while ((r <= r2)) {
    n[r][c] = "x";
    r = (r + 1);
  }
}
function diagd(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[((r + c) - c1)][c] = "x";
    c = (c + 1);
  }
}
function diagu(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[((r - c) + c1)][c] = "x";
    c = (c + 1);
  }
}
let draw: Record<number, any> = {};
function initDraw() {
  draw[1] = () => {
horiz(6, 10, 0);
};
  draw[2] = () => {
horiz(6, 10, 4);
};
  draw[3] = () => {
diagd(6, 10, 0);
};
  draw[4] = () => {
diagu(6, 10, 4);
};
  draw[5] = () => {
draw[1]();
draw[4]();
};
  draw[6] = () => {
verti(0, 4, 10);
};
  draw[7] = () => {
draw[1]();
draw[6]();
};
  draw[8] = () => {
draw[2]();
draw[6]();
};
  draw[9] = () => {
draw[1]();
draw[8]();
};
  draw[10] = () => {
horiz(0, 4, 0);
};
  draw[20] = () => {
horiz(0, 4, 4);
};
  draw[30] = () => {
diagu(0, 4, 4);
};
  draw[40] = () => {
diagd(0, 4, 0);
};
  draw[50] = () => {
draw[10]();
draw[40]();
};
  draw[60] = () => {
verti(0, 4, 0);
};
  draw[70] = () => {
draw[10]();
draw[60]();
};
  draw[80] = () => {
draw[20]();
draw[60]();
};
  draw[90] = () => {
draw[10]();
draw[80]();
};
  draw[100] = () => {
horiz(6, 10, 14);
};
  draw[200] = () => {
horiz(6, 10, 10);
};
  draw[300] = () => {
diagu(6, 10, 14);
};
  draw[400] = () => {
diagd(6, 10, 10);
};
  draw[500] = () => {
draw[100]();
draw[400]();
};
  draw[600] = () => {
verti(10, 14, 10);
};
  draw[700] = () => {
draw[100]();
draw[600]();
};
  draw[800] = () => {
draw[200]();
draw[600]();
};
  draw[900] = () => {
draw[100]();
draw[800]();
};
  draw[1000] = () => {
horiz(0, 4, 14);
};
  draw[2000] = () => {
horiz(0, 4, 10);
};
  draw[3000] = () => {
diagd(0, 4, 10);
};
  draw[4000] = () => {
diagu(0, 4, 14);
};
  draw[5000] = () => {
draw[1000]();
draw[4000]();
};
  draw[6000] = () => {
verti(10, 14, 0);
};
  draw[7000] = () => {
draw[1000]();
draw[6000]();
};
  draw[8000] = () => {
draw[2000]();
draw[6000]();
};
  draw[9000] = () => {
draw[1000]();
draw[8000]();
};
}
function printNumeral() {
  let i: number = 0;
  while ((i < 15)) {
    let line: string = "";
    let j: number = 0;
    while ((j < 11)) {
      line = ((line + n[i][j]) + " ");
      j = (j + 1);
    }
    console.log(line);
    i = (i + 1);
  }
  console.log("");
}
initDraw();
const numbers: number[] = [0, 1, 20, 300, 4000, 5555, 6789, 9999];
for (const _number of numbers) {
  initN();
  console.log((String(_number) + ":"));
  let num = _number;
  const thousands = Math.trunc(num / 1000);
  num = (num % 1000);
  const hundreds = Math.trunc(num / 100);
  num = (num % 100);
  const tens = Math.trunc(num / 10);
  const ones = (num % 10);
  if ((thousands > 0)) {
    draw[(thousands * 1000)]();
  }
  if ((hundreds > 0)) {
    draw[(hundreds * 100)]();
  }
  if ((tens > 0)) {
    draw[(tens * 10)]();
  }
  if ((ones > 0)) {
    draw[ones]();
  }
  printNumeral();
}
