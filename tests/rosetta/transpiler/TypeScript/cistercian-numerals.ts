// Generated by Mochi v0.10.42 on 2025-07-27 21:08:42 GMT+7

let n: string[][] = [];
function initN() {
  let i: number = 0;
  while ((i < 15)) {
    let row: string[] = [];
    let j: number = 0;
    while ((j < 11)) {
      row.push(" ");
      j = (j + 1);
    }
    row[5] = "x";
    n.push(row);
    i = (i + 1);
  }
}
function horiz(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[r][c] = "x";
    c = (c + 1);
  }
}
function verti(r1: number, r2: number, c: number) {
  let r: number = r1;
  while ((r <= r2)) {
    n[r][c] = "x";
    r = (r + 1);
  }
}
function diagd(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[((r + c) - c1)][c] = "x";
    c = (c + 1);
  }
}
function diagu(c1: number, c2: number, r: number) {
  let c: number = c1;
  while ((c <= c2)) {
    n[((r - c) + c1)][c] = "x";
    c = (c + 1);
  }
}
let draw: Record<number, any> = {};
function initDraw() {
  draw[1] = () => {
horiz(6, 10, 0);
};
  draw[2] = () => {
horiz(6, 10, 4);
};
  draw[3] = () => {
diagd(6, 10, 0);
};
  draw[4] = () => {
diagu(6, 10, 4);
};
  draw[5] = () => {
draw[Math.trunc(1)]();
draw[Math.trunc(4)]();
};
  draw[6] = () => {
verti(0, 4, 10);
};
  draw[7] = () => {
draw[Math.trunc(1)]();
draw[Math.trunc(6)]();
};
  draw[8] = () => {
draw[Math.trunc(2)]();
draw[Math.trunc(6)]();
};
  draw[9] = () => {
draw[Math.trunc(1)]();
draw[Math.trunc(8)]();
};
  draw[10] = () => {
horiz(0, 4, 0);
};
  draw[20] = () => {
horiz(0, 4, 4);
};
  draw[30] = () => {
diagu(0, 4, 4);
};
  draw[40] = () => {
diagd(0, 4, 0);
};
  draw[50] = () => {
draw[Math.trunc(10)]();
draw[Math.trunc(40)]();
};
  draw[60] = () => {
verti(0, 4, 0);
};
  draw[70] = () => {
draw[Math.trunc(10)]();
draw[Math.trunc(60)]();
};
  draw[80] = () => {
draw[Math.trunc(20)]();
draw[Math.trunc(60)]();
};
  draw[90] = () => {
draw[Math.trunc(10)]();
draw[Math.trunc(80)]();
};
  draw[100] = () => {
horiz(6, 10, 14);
};
  draw[200] = () => {
horiz(6, 10, 10);
};
  draw[300] = () => {
diagu(6, 10, 14);
};
  draw[400] = () => {
diagd(6, 10, 10);
};
  draw[500] = () => {
draw[Math.trunc(100)]();
draw[Math.trunc(400)]();
};
  draw[600] = () => {
verti(10, 14, 10);
};
  draw[700] = () => {
draw[Math.trunc(100)]();
draw[Math.trunc(600)]();
};
  draw[800] = () => {
draw[Math.trunc(200)]();
draw[Math.trunc(600)]();
};
  draw[900] = () => {
draw[Math.trunc(100)]();
draw[Math.trunc(800)]();
};
  draw[1000] = () => {
horiz(0, 4, 14);
};
  draw[2000] = () => {
horiz(0, 4, 10);
};
  draw[3000] = () => {
diagd(0, 4, 10);
};
  draw[4000] = () => {
diagu(0, 4, 14);
};
  draw[5000] = () => {
draw[Math.trunc(1000)]();
draw[Math.trunc(4000)]();
};
  draw[6000] = () => {
verti(10, 14, 0);
};
  draw[7000] = () => {
draw[Math.trunc(1000)]();
draw[Math.trunc(6000)]();
};
  draw[8000] = () => {
draw[Math.trunc(2000)]();
draw[Math.trunc(6000)]();
};
  draw[9000] = () => {
draw[Math.trunc(1000)]();
draw[Math.trunc(8000)]();
};
}
function printNumeral() {
  let i: number = 0;
  while ((i < 15)) {
    let line: string = "";
    let j: number = 0;
    while ((j < 11)) {
      line = ((line + n[i][j]) + " ");
      j = (j + 1);
    }
    console.log(line);
    i = (i + 1);
  }
  console.log("");
}
let numbers: number[] = [0, 1, 20, 300, 4000, 5555, 6789, 9999];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  initDraw();
  for (const _number of numbers) {
    initN();
    console.log((String(_number) + ":"));
    let num: number = _number;
    let thousands = Math.trunc(num / 1000);
    num = (num % 1000);
    let hundreds = Math.trunc(num / 100);
    num = (num % 100);
    let tens = Math.trunc(num / 10);
    let ones = (num % 10);
    if ((thousands > 0)) {
      draw[(Math.trunc(thousands) * 1000)]();
    }
    if ((hundreds > 0)) {
      draw[(Math.trunc(hundreds) * 100)]();
    }
    if ((tens > 0)) {
      draw[(Math.trunc(tens) * 10)]();
    }
    if ((ones > 0)) {
      draw[ones]();
    }
    printNumeral();
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

