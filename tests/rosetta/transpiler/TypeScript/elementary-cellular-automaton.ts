// Generated by Mochi v0.10.41 on 2025-07-27 11:02:58 GMT+7

function bitAt(x: number, idx: number): number {
  let v: number = x;
  let i: number = 0;
  while ((i < idx)) {
    v = Math.trunc(Math.trunc(v / 2));
    i = (i + 1);
  }
  return (v % 2);
}
function outputState(state: string) {
  let line: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(state) || typeof state === 'string' ? state.length : Object.keys(state ?? {}).length))) {
    if ((state.slice(i, (i + 1)) == "1")) {
      line = (line + "#");
    } else {
      line = (line + " ");
    }
    i = (i + 1);
  }
  console.log(line);
}
function step(state: string, r: number): string {
  let cells: number = (Array.isArray(state) || typeof state === 'string' ? state.length : Object.keys(state ?? {}).length);
  let out: string = "";
  let i: number = 0;
  while ((i < cells)) {
    let l: string = state.slice((((i - 1) + cells) % cells), ((((i - 1) + cells) % cells) + 1));
    let c: string = state.slice(i, (i + 1));
    let rt: string = state.slice(((i + 1) % cells), (((i + 1) % cells) + 1));
    let idx: number = 0;
    if ((l == "1")) {
      idx = (idx + 4);
    }
    if ((c == "1")) {
      idx = (idx + 2);
    }
    if ((rt == "1")) {
      idx = (idx + 1);
    }
    if ((bitAt(r, idx) == 1)) {
      out = (out + "1");
    } else {
      out = (out + "0");
    }
    i = (i + 1);
  }
  return out;
}
function elem(r: number, cells: number, generations: number, state: string) {
  outputState(state);
  let g: number = 0;
  let s: string = state;
  while ((g < generations)) {
    s = step(s, r);
    outputState(s);
    g = (g + 1);
  }
}
function randInit(cells: number, seed: number): string {
  let s: string = "";
  let val: number = seed;
  let i: number = 0;
  while ((i < cells)) {
    val = (((val * 1664525) + 1013904223) % 2147483647);
    if (((val % 2) == 0)) {
      s = (s + "0");
    } else {
      s = (s + "1");
    }
    i = (i + 1);
  }
  return s;
}
function singleInit(cells: number): string {
  let s: string = "";
  let i: number = 0;
  while ((i < cells)) {
    if ((i == Math.trunc(cells / 2))) {
      s = (s + "1");
    } else {
      s = (s + "0");
    }
    i = (i + 1);
  }
  return s;
}
function main() {
  let cells: number = 20;
  let generations: number = 9;
  console.log("Single 1, rule 90:");
  let state: string = singleInit(cells);
  elem(90, cells, generations, state);
  console.log("Random intial state, rule 30:");
  state = randInit(cells, 3);
  elem(30, cells, generations, state);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

