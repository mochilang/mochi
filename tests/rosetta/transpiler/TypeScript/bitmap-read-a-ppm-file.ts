// Generated by Mochi v0.10.38 on 2025-07-23 17:13:54 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
export interface Pixel { R: number; G: number; B: number }
export interface Bitmap { w: number; h: number; max: number; data: Pixel[][] }
function newBitmap(w: number, h: number, max: number): Bitmap {
  let rows: Pixel[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: Pixel[] = [];
    let x: number = 0;
    while ((x < w)) {
      row = [...row, {"R": 0, "G": 0, "B": 0}];
      x = (x + 1);
    }
    rows = [...rows, row];
    y = (y + 1);
  }
  return {w, h, max, "data": rows};
}
function setPx(b: Bitmap, x: number, y: number, p: Pixel) {
  let rows: Pixel[][] = b.data;
  let row: Pixel[] = rows[Math.trunc(y)];
  row[x] = p;
  rows[y] = row;
  b = ({ ...b, "data": rows });
}
function getPx(b: Bitmap, x: number, y: number): Pixel {
  return b.data[Math.trunc(y)][Math.trunc(x)];
}
function splitLines(s: string): string[] {
  let out: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch: string = s.substring(i, (i + 1));
    if ((ch == "\n")) {
      out = [...out, cur];
      cur = "";
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  out = [...out, cur];
  return out;
}
function splitWS(s: string): string[] {
  let out: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    const ch: string = s.substring(i, (i + 1));
    if (((((ch == " ") || (ch == "\t")) || (ch == "\r")) || (ch == "\n"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        out = [...out, cur];
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    out = [...out, cur];
  }
  return out;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  const digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function tokenize(s: string): string[] {
  const lines: string[] = splitLines(s);
  let toks: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(lines) || typeof lines === 'string' ? lines.length : Object.keys(lines ?? {}).length))) {
    const line: string = lines[Math.trunc(i)];
    if ((((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0) && (line.substring(0, 1) == "#"))) {
      i = (i + 1);
      continue
    }
    const parts: string[] = splitWS(line);
    let j: number = 0;
    while ((j < (Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length))) {
      toks = [...toks, parts[Math.trunc(j)]];
      j = (j + 1);
    }
    i = (i + 1);
  }
  return toks;
}
function readP3(text: string): Bitmap {
  const toks: string[] = tokenize(text);
  if (((Array.isArray(toks) || typeof toks === 'string' ? toks.length : Object.keys(toks ?? {}).length) < 4)) {
    return newBitmap(0, 0, 0);
  }
  if ((toks[Math.trunc(0)] != "P3")) {
    return newBitmap(0, 0, 0);
  }
  const w: number = parseIntStr(toks[Math.trunc(1)]);
  const h: number = parseIntStr(toks[Math.trunc(2)]);
  const maxv: number = parseIntStr(toks[Math.trunc(3)]);
  let idx: number = 4;
  let bm: Bitmap = newBitmap(w, h, maxv);
  let y: number = (h - 1);
  while ((y >= 0)) {
    let x: number = 0;
    while ((x < w)) {
      const r: number = parseIntStr(toks[Math.trunc(idx)]);
      const g: number = parseIntStr(toks[Math.trunc((idx + 1))]);
      const b: number = parseIntStr(toks[Math.trunc((idx + 2))]);
      setPx(bm, x, y, {"R": r, "G": g, "B": b});
      idx = (idx + 3);
      x = (x + 1);
    }
    y = (y - 1);
  }
  return bm;
}
function toGrey(b: Bitmap) {
  const h: number = b.h;
  const w: number = b.w;
  let m: number = 0;
  let y: number = 0;
  while ((y < h)) {
    let x: number = 0;
    while ((x < w)) {
      const p: Pixel = getPx(b, x, y);
      let l: number = ((((p.R * 2126) + (p.G * 7152)) + (p.B * 722)) / 10000);
      if ((l > b.max)) {
        l = b.max;
      }
      setPx(b, x, y, {"R": l, "G": l, "B": l});
      if ((l > m)) {
        m = l;
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  b = ({ ...b, "max": m });
}
function pad(n: number, w: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < w)) {
    s = (" " + s);
  }
  return s;
}
function writeP3(b: Bitmap): string {
  const h: number = b.h;
  const w: number = b.w;
  let max: number = b.max;
  const digits: number = (Array.isArray(String(max)) || typeof String(max) === 'string' ? String(max).length : Object.keys(String(max) ?? {}).length);
  let out: string = (((((("P3\n# generated from Bitmap.writeppmp3\n" + String(w)) + " ") + String(h)) + "\n") + String(max)) + "\n");
  let y: number = (h - 1);
  while ((y >= 0)) {
    let line: string = "";
    let x: number = 0;
    while ((x < w)) {
      const p: Pixel = getPx(b, x, y);
      line = ((((((line + "   ") + pad(p.R, digits)) + " ") + pad(p.G, digits)) + " ") + pad(p.B, digits));
      x = (x + 1);
    }
    out = ((out + line) + "\n");
    y = (y - 1);
  }
  return out;
}
let ppmtxt: string = ((((((("P3\n" + "# feep.ppm\n") + "4 4\n") + "15\n") + " 0  0  0    0  0  0    0  0  0   15  0 15\n") + " 0  0  0    0 15  7    0  0  0    0  0  0\n") + " 0  0  0    0  0  0    0 15  7    0  0  0\n") + "15  0 15    0  0  0    0  0  0    0  0  0\n");
console.log("Original Colour PPM file");
console.log(ppmtxt);
let bm: Bitmap = readP3(ppmtxt);
console.log("Grey PPM:");
toGrey(bm);
const out: string = writeP3(bm);
console.log(out);
