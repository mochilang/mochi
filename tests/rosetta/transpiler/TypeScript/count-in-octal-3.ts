// Generated by Mochi v0.10.42 on 2025-07-27 21:09:44 GMT+7

function toOct(n: number): string {
  if ((n == 0)) {
    return "0";
  }
  let digits: string = "01234567";
  let out: string = "";
  let v: number = n;
  while ((v > 0)) {
    let d: number = (v % 8);
    out = (digits.slice(d, (d + 1)) + out);
    v = Math.trunc(v / 8);
  }
  return out;
}
function main() {
  let i: number = 0.0;
  while (true) {
    console.log(toOct(Math.trunc(i)));
    if ((i == 3.0)) {
      i = (9007199254740992.0 - 4.0);
      console.log("...");
    }
    let next: number = (i + 1.0);
    if ((next == i)) {
      break
    }
    i = next;
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

