// Generated by Mochi v0.10.56 on 2025-08-03 17:23:59 GMT+7

export interface Foobar { Exported: number; unexported: number }
function examineAndModify(f: Foobar): Foobar {
  console.log(_str(((((((((" v: {" + _str(f.Exported)) + " ") + _str(f.unexported)) + "} = {") + _str(f.Exported)) + " ") + _str(f.unexported)) + "}")));
  console.log(_str("    Idx Name       Type CanSet"));
  console.log(_str("     0: Exported   int  true"));
  console.log(_str("     1: unexported int  false"));
  f.Exported = 16;
  f.unexported = 44;
  console.log(_str("  modified unexported field via unsafe"));
  return f;
}
function anotherExample() {
  console.log(_str("bufio.ReadByte returned error: unsafely injected error value into bufio inner workings"));
}
let obj: Foobar = {"Exported": 12, "unexported": 42};
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  console.log(_str((((("obj: {" + _str(obj.Exported)) + " ") + _str(obj.unexported)) + "}")));
  obj = examineAndModify(obj);
  console.log(_str((((("obj: {" + _str(obj.Exported)) + " ") + _str(obj.unexported)) + "}")));
  anotherExample();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

