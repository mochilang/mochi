// Generated by Mochi v0.10.40 on 2025-07-25 20:50:15 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  const PI: number = 3.141592653589793;
  function conv2d(img: number[][], k: number[][]): number[][] {
    const h: number = (Array.isArray(img) || typeof img === 'string' ? img.length : Object.keys(img ?? {}).length);
    const w: number = (Array.isArray(img[Math.trunc(0)]) || typeof img[Math.trunc(0)] === 'string' ? img[Math.trunc(0)].length : Object.keys(img[Math.trunc(0)] ?? {}).length);
    const n: number = (Array.isArray(k) || typeof k === 'string' ? k.length : Object.keys(k ?? {}).length);
    const half: number = Math.trunc(n / 2);
    let out: number[][] = [];
    let y: number = 0;
    while ((y < h)) {
      let row: number[] = [];
      let x: number = 0;
      while ((x < w)) {
        let sum: number = 0.0;
        let j: number = 0;
        while ((j < n)) {
          let i: number = 0;
          while ((i < n)) {
            let yy: number = ((y + j) - half);
            if ((yy < 0)) {
              yy = 0;
            }
            if ((yy >= h)) {
              yy = (h - 1);
            }
            let xx: number = ((x + i) - half);
            if ((xx < 0)) {
              xx = 0;
            }
            if ((xx >= w)) {
              xx = (w - 1);
            }
            sum = (sum + (img[yy][xx] * k[j][i]));
            i = (i + 1);
          }
          j = (j + 1);
        }
        row = [...row, sum];
        x = (x + 1);
      }
      out = [...out, row];
      y = (y + 1);
    }
    return out;
  }
  function gradient(img: number[][]): number[][] {
    const hx: number[][] = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]];
    const hy: number[][] = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]];
    let gx: number[][] = conv2d(img, hx);
    let gy: number[][] = conv2d(img, hy);
    let h: number = (Array.isArray(img) || typeof img === 'string' ? img.length : Object.keys(img ?? {}).length);
    let w: number = (Array.isArray(img[Math.trunc(0)]) || typeof img[Math.trunc(0)] === 'string' ? img[Math.trunc(0)].length : Object.keys(img[Math.trunc(0)] ?? {}).length);
    let out: number[][] = [];
    let y: number = 0;
    while ((y < h)) {
      let row: number[] = [];
      let x: number = 0;
      while ((x < w)) {
        const g: number = ((gx[y][x] * gx[y][x]) + (gy[y][x] * gy[y][x]));
        row = [...row, g];
        x = (x + 1);
      }
      out = [...out, row];
      y = (y + 1);
    }
    return out;
  }
  function threshold(g: number[][], t: number): number[][] {
    let h: number = (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length);
    let w: number = (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length);
    let out: number[][] = [];
    let y: number = 0;
    while ((y < h)) {
      let row: number[] = [];
      let x: number = 0;
      while ((x < w)) {
        if ((g[y][x] >= t)) {
          row = [...row, 1];
        } else {
          row = [...row, 0];
        }
        x = (x + 1);
      }
      out = [...out, row];
      y = (y + 1);
    }
    return out;
  }
  function printMatrix(m: number[][]) {
    let y: number = 0;
    while ((y < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
      let line: string = "";
      let x: number = 0;
      while ((x < (Array.isArray(m[Math.trunc(0)]) || typeof m[Math.trunc(0)] === 'string' ? m[Math.trunc(0)].length : Object.keys(m[Math.trunc(0)] ?? {}).length))) {
        line = (line + String(m[y][x]));
        if ((x < ((Array.isArray(m[Math.trunc(0)]) || typeof m[Math.trunc(0)] === 'string' ? m[Math.trunc(0)].length : Object.keys(m[Math.trunc(0)] ?? {}).length) - 1))) {
          line = (line + " ");
        }
        x = (x + 1);
      }
      console.log(line);
      y = (y + 1);
    }
  }
  function main() {
    const img: number[][] = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]];
    const g: number[][] = gradient(img);
    const edges: number[][] = threshold(g, (1020.0 * 1020.0));
    printMatrix(edges);
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

