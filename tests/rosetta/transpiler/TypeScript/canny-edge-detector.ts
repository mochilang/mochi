// Generated by Mochi v0.10.38 on 2025-07-23 19:23:46 GMT+7

const PI: number = 3.141592653589793;
function conv2d(img: number[][], k: number[][]): number[][] {
  const h: number = (Array.isArray(img) || typeof img === 'string' ? img.length : Object.keys(img ?? {}).length);
  const w: number = (Array.isArray(img[Math.trunc(0)]) || typeof img[Math.trunc(0)] === 'string' ? img[Math.trunc(0)].length : Object.keys(img[Math.trunc(0)] ?? {}).length);
  const n: number = (Array.isArray(k) || typeof k === 'string' ? k.length : Object.keys(k ?? {}).length);
  const half: number = Math.trunc(n / 2);
  let out: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      let sum: number = 0.0;
      let j: number = 0;
      while ((j < n)) {
        let i: number = 0;
        while ((i < n)) {
          let yy: number = ((y + j) - half);
          if ((yy < 0)) {
            yy = 0;
          }
          if ((yy >= h)) {
            yy = (h - 1);
          }
          let xx: number = ((x + i) - half);
          if ((xx < 0)) {
            xx = 0;
          }
          if ((xx >= w)) {
            xx = (w - 1);
          }
          sum = (sum + (img[Math.trunc(yy)][Math.trunc(xx)] * k[Math.trunc(j)][Math.trunc(i)]));
          i = (i + 1);
        }
        j = (j + 1);
      }
      row = [...row, sum];
      x = (x + 1);
    }
    out = [...out, row];
    y = (y + 1);
  }
  return out;
}
function gradient(img: number[][]): number[][] {
  const hx: number[][] = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]];
  const hy: number[][] = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]];
  let gx: number[][] = conv2d(img, hx);
  let gy: number[][] = conv2d(img, hy);
  let h: number = (Array.isArray(img) || typeof img === 'string' ? img.length : Object.keys(img ?? {}).length);
  let w: number = (Array.isArray(img[Math.trunc(0)]) || typeof img[Math.trunc(0)] === 'string' ? img[Math.trunc(0)].length : Object.keys(img[Math.trunc(0)] ?? {}).length);
  let out: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      const g: number = ((gx[Math.trunc(y)][Math.trunc(x)] * gx[Math.trunc(y)][Math.trunc(x)]) + (gy[Math.trunc(y)][Math.trunc(x)] * gy[Math.trunc(y)][Math.trunc(x)]));
      row = [...row, g];
      x = (x + 1);
    }
    out = [...out, row];
    y = (y + 1);
  }
  return out;
}
function threshold(g: number[][], t: number): number[][] {
  let h: number = (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length);
  let w: number = (Array.isArray(g[Math.trunc(0)]) || typeof g[Math.trunc(0)] === 'string' ? g[Math.trunc(0)].length : Object.keys(g[Math.trunc(0)] ?? {}).length);
  let out: number[][] = [];
  let y: number = 0;
  while ((y < h)) {
    let row: number[] = [];
    let x: number = 0;
    while ((x < w)) {
      if ((g[Math.trunc(y)][Math.trunc(x)] >= t)) {
        row = [...row, 1];
      } else {
        row = [...row, 0];
      }
      x = (x + 1);
    }
    out = [...out, row];
    y = (y + 1);
  }
  return out;
}
function printMatrix(m: number[][]) {
  let y: number = 0;
  while ((y < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
    let line: string = "";
    let x: number = 0;
    while ((x < (Array.isArray(m[Math.trunc(0)]) || typeof m[Math.trunc(0)] === 'string' ? m[Math.trunc(0)].length : Object.keys(m[Math.trunc(0)] ?? {}).length))) {
      line = (line + String(m[Math.trunc(y)][Math.trunc(x)]));
      if ((x < ((Array.isArray(m[Math.trunc(0)]) || typeof m[Math.trunc(0)] === 'string' ? m[Math.trunc(0)].length : Object.keys(m[Math.trunc(0)] ?? {}).length) - 1))) {
        line = (line + " ");
      }
      x = (x + 1);
    }
    console.log(line);
    y = (y + 1);
  }
}
function main() {
  const img: number[][] = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]];
  const g: number[][] = gradient(img);
  const edges: number[][] = threshold(g, (1020.0 * 1020.0));
  printMatrix(edges);
}
main();
