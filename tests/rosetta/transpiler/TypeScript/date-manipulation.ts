// Generated by Mochi v0.10.40 on 2025-07-26 00:11:59 GMT+7

export interface Months { January: number; February: number; March: number; April: number; May: number; June: number; July: number; August: number; September: number; October: number; November: number; December: number }
export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
export interface ZoneOffsets { EST: number; EDT: number; MST: number }
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  let months: Months = {"January": 1, "February": 2, "March": 3, "April": 4, "May": 5, "June": 6, "July": 7, "August": 8, "September": 9, "October": 10, "November": 11, "December": 12};
  function isLeap(y: number): boolean {
    if (((y % 400) == 0)) {
      return true;
    }
    if (((y % 100) == 0)) {
      return false;
    }
    return ((y % 4) == 0);
  }
  function daysInMonth(y: number, m: number): number {
    let feb: number = (isLeap(y) ? 29 : 28);
    let lengths: number[] = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return lengths[Math.trunc((m - 1))];
  }
  function daysBeforeYear(y: number): number {
    let days: number = 0;
    let yy: number = 1970;
    while ((yy < y)) {
      days = (days + 365);
      if (isLeap(yy)) {
        days = (days + 1);
      }
      yy = (yy + 1);
    }
    return days;
  }
  function daysBeforeMonth(y: number, m: number): number {
    let days: number = 0;
    let mm: number = 1;
    while ((mm < m)) {
      days = (days + daysInMonth(y, mm));
      mm = (mm + 1);
    }
    return days;
  }
  function epochSeconds(y: number, m: number, d: number, h: number, mi: number): number {
    let days: number = ((daysBeforeYear(y) + daysBeforeMonth(y, m)) + (d - 1));
    return (((days * 86400) + (h * 3600)) + (mi * 60));
  }
  function fromEpoch(sec: number): number[] {
    let days: number = Math.trunc(sec / 86400);
    let rem: number = (sec % 86400);
    let y: number = 1970;
    while (true) {
      let dy: number = (isLeap(y) ? 366 : 365);
      if ((days >= dy)) {
        days = (days - dy);
        y = (y + 1);
      } else {
        break
      }
    }
    let m: number = 1;
    while (true) {
      let dim: number = daysInMonth(y, m);
      if ((days >= dim)) {
        days = (days - dim);
        m = (m + 1);
      } else {
        break
      }
    }
    let d: number = (days + 1);
    let h: number = (rem / 3600);
    let mi: number = ((rem % 3600) / 60);
    return [y, m, d, h, mi];
  }
  function pad2(n: number): string {
    if ((n < 10)) {
      return ("0" + String(n));
    }
    return String(n);
  }
  function absInt(n: number): number {
    if ((n < 0)) {
      return -n;
    }
    return n;
  }
  function formatDate(parts: number[], offset: number, abbr: string): string {
    let y: number = parts[Math.trunc(0)];
    let m: number = parts[Math.trunc(1)];
    let d: number = parts[Math.trunc(2)];
    let h: number = parts[Math.trunc(3)];
    let mi: number = parts[Math.trunc(4)];
    let sign: string = "+";
    if ((offset < 0)) {
      sign = "-";
    }
    let off: number = Math.trunc(absInt(offset) / 60);
    let offh: string = pad2(Math.trunc(off / 60));
    let offm: string = pad2((off % 60));
    return ((((((((((((((String(y) + "-") + pad2(m)) + "-") + pad2(d)) + " ") + pad2(h)) + ":") + pad2(mi)) + ":00 ") + sign) + offh) + offm) + " ") + abbr);
  }
  function parseIntStr(str: string): number {
    let i: number = 0;
    let neg: boolean = false;
    if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && ((str).substring(0, 1) == "-"))) {
      neg = true;
      i = 1;
    }
    let n: number = 0;
    let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
    while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
      n = ((n * 10) + digits[Math.trunc((str).substring(i, (i + 1)))]);
      i = (i + 1);
    }
    if (neg) {
      n = -n;
    }
    return n;
  }
  function indexOf(s: string, ch: string): number {
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      if (((s).substring(i, (i + 1)) == ch)) {
        return i;
      }
      i = (i + 1);
    }
    return -1;
  }
  function parseTime(s: string): number[] {
    let c: number = s.indexOf(":");
    let h = parseIntStr((s).substring(0, c));
    let mi = parseIntStr((s).substring((c + 1), (c + 3)));
    let ampm: string = (s).substring(((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 2), (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
    let hh = h;
    if (((ampm == "pm") && (h != 12))) {
      hh = (h + 12);
    }
    if (((ampm == "am") && (h == 12))) {
      hh = 0;
    }
    return [hh, mi];
  }
  function main() {
    let input = "March 7 2009 7:30pm EST";
    console.log(("Input:              " + input));
    let parts: any[] = [];
    let cur: string = "";
    let i: number = 0;
    while ((i < (Array.isArray(input) || typeof input === 'string' ? input.length : Object.keys(input ?? {}).length))) {
      let ch = (input).substring(i, (i + 1));
      if ((ch == " ")) {
        if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
          parts = [...parts, cur];
          cur = "";
        }
      } else {
        cur = (cur + ch);
      }
      i = (i + 1);
    }
    if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
      parts = [...parts, cur];
    }
    let month = months[Math.trunc(parts[Math.trunc(0)])];
    let day = parseIntStr(parts[Math.trunc(1)]);
    let year = parseIntStr(parts[Math.trunc(2)]);
    let tm: number[] = parseTime(parts[Math.trunc(3)]);
    let hour: number = tm[Math.trunc(0)];
    let minute: number = tm[Math.trunc(1)];
    let tz = parts[Math.trunc(4)];
    let zoneOffsets: ZoneOffsets = {"EST": -18000, "EDT": -14400, "MST": -25200};
    let local = epochSeconds(year, month, day, hour, minute);
    let utc = (local - zoneOffsets[tz]);
    let utc12 = (utc + 43200);
    let startDST: number = epochSeconds(2009, 3, 8, 7, 0);
    let offEast: number = -18000;
    if ((utc12 >= startDST)) {
      offEast = -14400;
    }
    let eastParts = fromEpoch((utc12 + offEast));
    let eastAbbr: string = "EST";
    if ((offEast == -14400)) {
      eastAbbr = "EDT";
    }
    console.log(("+12 hrs:            " + formatDate(eastParts, offEast, eastAbbr)));
    let offAZ: number = -25200;
    let azParts = fromEpoch((utc12 + offAZ));
    console.log(("+12 hrs in Arizona: " + formatDate(azParts, offAZ, "MST")));
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

