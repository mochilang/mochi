// Generated by Mochi v0.10.40 on 2025-07-25 17:22:23 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function sortRunes(s: string): string {
    let arr: string[] = [];
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      arr = [...arr, s.slice(i, (i + 1))];
      i = (i + 1);
    }
    let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
    let m: number = 0;
    while ((m < n)) {
      let j: number = 0;
      while ((j < (n - 1))) {
        if ((arr[j] > arr[Math.trunc((j + 1))])) {
          const tmp: string = arr[j];
          arr[j] = arr[Math.trunc((j + 1))];
          arr[(j + 1)] = tmp;
        }
        j = (j + 1);
      }
      m = (m + 1);
    }
    let out: string = "";
    i = 0;
    while ((i < n)) {
      out = (out + arr[i]);
      i = (i + 1);
    }
    return out;
  }
  function sortStrings(xs: string[]): string[] {
    let res: string[] = [];
    let tmp: string[] = xs;
    while (((Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length) > 0)) {
      let min: string = tmp[Math.trunc(0)];
      let idx: number = 0;
      let i: number = 1;
      while ((i < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
        if ((tmp[i] < min)) {
          min = tmp[i];
          idx = i;
        }
        i = (i + 1);
      }
      res = [...res, min];
      let out: string[] = [];
      let j: number = 0;
      while ((j < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
        if ((j != idx)) {
          out = [...out, tmp[j]];
        }
        j = (j + 1);
      }
      tmp = out;
    }
    return res;
  }
  function main() {
    const words: string[] = ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"];
    let groups: Record<string, string[]> = {};
    let maxLen: number = 0;
    for (const w of words) {
      const k = sortRunes(w);
      if (!(k in groups)) {
        groups[k] = [w];
      } else {
        groups[k] = [...groups[k], w];
      }
      if (((Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length) > maxLen)) {
        maxLen = (Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length);
      }
    }
    let printed: Record<string, boolean> = {};
    for (const w of words) {
      const k = sortRunes(w);
      if (((Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length) == maxLen)) {
        if (!(k in printed)) {
          let g: string[] = sortStrings(groups[k]);
          let line: string = ("[" + g[Math.trunc(0)]);
          let i: number = 1;
          while ((i < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
            line = ((line + " ") + g[i]);
            i = (i + 1);
          }
          line = (line + "]");
          console.log(line);
          printed[k] = true;
        }
      }
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

