// Generated by Mochi v0.10.37 on 2025-07-23 15:51:48 GMT+7

function sortRunes(s: string): string {
  let arr: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    arr = [...arr, s.slice(i, (i + 1))];
    i = (i + 1);
  }
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let m: number = 0;
  while ((m < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[(j + 1)])) {
        const tmp: string = arr[j];
        arr[j] = arr[(j + 1)];
        arr[(j + 1)] = tmp;
      }
      j = (j + 1);
    }
    m = (m + 1);
  }
  let out: string = "";
  i = 0;
  while ((i < n)) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return out;
}
function sortStrings(xs: string[]): string[] {
  let res: string[] = [];
  let tmp: string[] = xs;
  while (((Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length) > 0)) {
    let min = tmp[0];
    let idx: number = 0;
    let i: number = 1;
    while ((i < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = (i + 1);
    }
    res = [...res, min];
    let out: string[] = [];
    let j: number = 0;
    while ((j < (Array.isArray(tmp) || typeof tmp === 'string' ? tmp.length : Object.keys(tmp ?? {}).length))) {
      if ((j != idx)) {
        out = [...out, tmp[j]];
      }
      j = (j + 1);
    }
    tmp = out;
  }
  return res;
}
function main() {
  const words: string[] = ["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"];
  let groups: Record<string, string[]> = {};
  let maxLen: number = 0;
  for (const w of words) {
    const k = sortRunes(w);
    if (!(k in groups)) {
      groups[k] = [w];
    } else {
      groups[k] = [...groups[k], w];
    }
    if (((Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length) > maxLen)) {
      maxLen = (Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length);
    }
  }
  let printed: Record<string, boolean> = {};
  for (const w of words) {
    const k = sortRunes(w);
    if (((Array.isArray(groups[k]) || typeof groups[k] === 'string' ? groups[k].length : Object.keys(groups[k] ?? {}).length) == maxLen)) {
      if (!(k in printed)) {
        let g: string[] = sortStrings(groups[k]);
        let line: string = ("[" + g[0]);
        let i: number = 1;
        while ((i < (Array.isArray(g) || typeof g === 'string' ? g.length : Object.keys(g ?? {}).length))) {
          line = ((line + " ") + g[i]);
          i = (i + 1);
        }
        line = (line + "]");
        console.log(line);
        printed[k] = true;
      }
    }
  }
}
main();
