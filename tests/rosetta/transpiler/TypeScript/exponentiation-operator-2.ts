// Generated by Mochi v0.10.42 on 2025-07-28 00:53:56 GMT+7

function expI(b: number, p: number): number {
  let r: number = 1;
  let i: number = 0;
  while ((i < p)) {
    r = (r * b);
    i = (i + 1);
  }
  return r;
}
function expF(b: number, p: number): number {
  let r: number = 1.0;
  let pow: number = b;
  let n: number = p;
  let neg: boolean = false;
  if ((p < 0)) {
    n = -p;
    neg = true;
  }
  while ((n > 0)) {
    if (((n % 2) == 1)) {
      r = (r * pow);
    }
    pow = (pow * pow);
    n = Math.trunc(n / 2);
  }
  if (neg) {
    r = (1.0 / r);
  }
  return r;
}
function printExpF(b: number, p: number) {
  if (((b == 0.0) && (p < 0))) {
    console.log((((String(b) + "^") + String(p)) + ": +Inf"));
  } else {
    console.log(((((String(b) + "^") + String(p)) + ": ") + String(expF(b, p))));
  }
}
function main() {
  console.log("expI tests");
  for (const pair of [[2, 10], [2, -10], [-2, 10], [-2, 11], [11, 0]]) {
    if ((pair[Math.trunc(1)] < 0)) {
      console.log((((String(pair[Math.trunc(0)]) + "^") + String(pair[Math.trunc(1)])) + ": negative power not allowed"));
    } else {
      console.log(((((String(pair[Math.trunc(0)]) + "^") + String(pair[Math.trunc(1)])) + ": ") + String(expI(pair[Math.trunc(0)], pair[Math.trunc(1)]))));
    }
  }
  console.log("overflow undetected");
  console.log(("10^10: " + String(expI(10, 10))));
  console.log("\nexpF tests:");
  for (const pair of [[2.0, 10], [2.0, -10], [-2.0, 10], [-2.0, 11], [11.0, 0]]) {
    printExpF(pair[Math.trunc(0)], pair[Math.trunc(1)]);
  }
  console.log("disallowed in expI, allowed here");
  printExpF(0.0, -1);
  console.log("other interesting cases for 32 bit float type");
  printExpF(10.0, 39);
  printExpF(10.0, -39);
  printExpF(-10.0, 39);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

