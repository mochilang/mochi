// Generated by Mochi v0.10.56 on 2025-08-03 17:23:13 GMT+7

function bernoulli(n: number): number {
  let a: number[] = [];
  let m: number = 0;
  while ((m <= n)) {
    a.push((Number(1) / Number((m + 1))));
    let j: number = m;
    while ((j >= 1)) {
      a[(j - 1)] = (Number(j) * (a[Math.trunc((j - 1))] - a[j]));
      j = (j - 1);
    }
    m = (m + 1);
  }
  return a[Math.trunc(0)];
}
function padStart(s: string, width: number, pad: string): string {
  let out: string = s;
  while ((Number(Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < width)) {
    out = (pad + out);
  }
  return out;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function num(x: number): number { return x; }
function denom(_x: number): number { return 1; }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (let i = 0; i < 61; i++) {
    let b: number = bernoulli(i);
    if ((num(b) != 0)) {
      let numStr: string = _str(num(b));
      let denStr: string = _str(denom(b));
      console.log(_str(((((("B(" + String(_str(i)).padStart(2, " ")) + ") =") + String(numStr).padStart(45, " ")) + "/") + denStr)));
    }
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

