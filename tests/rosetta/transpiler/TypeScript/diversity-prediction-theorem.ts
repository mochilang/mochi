// Generated by Mochi v0.10.41 on 2025-07-26 19:37:13 GMT+7

function pow10(n: number): number {
  let r: number = 1.0;
  let i: number = 0;
  while ((i < n)) {
    r = (r * 10.0);
    i = (i + 1);
  }
  return r;
}
function formatFloat(f: number, prec: number): string {
  let scale: number = pow10(prec);
  let scaled: number = ((f * scale) + 0.5);
  let n: number = Math.trunc(scaled);
  let digits: string = String(n);
  while (((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) <= prec)) {
    digits = ("0" + digits);
  }
  let intPart: string = (digits).substring(0, ((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec));
  let fracPart: string = (digits).substring(((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) - prec), (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length));
  return ((intPart + ".") + fracPart);
}
function padLeft(s: string, w: number): string {
  let res: string = "";
  let n: number = (w - (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  while ((n > 0)) {
    res = (res + " ");
    n = (n - 1);
  }
  return (res + s);
}
function averageSquareDiff(f: number, preds: number[]): number {
  let av: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(preds) || typeof preds === 'string' ? preds.length : Object.keys(preds ?? {}).length))) {
    av = (av + ((preds[i] - f) * (preds[i] - f)));
    i = (i + 1);
  }
  av = (av / (Array.isArray(preds) || typeof preds === 'string' ? preds.length : Object.keys(preds ?? {}).length));
  return av;
}
function diversityTheorem(truth: number, preds: number[]): number[] {
  let av: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(preds) || typeof preds === 'string' ? preds.length : Object.keys(preds ?? {}).length))) {
    av = (av + preds[i]);
    i = (i + 1);
  }
  av = (av / (Array.isArray(preds) || typeof preds === 'string' ? preds.length : Object.keys(preds ?? {}).length));
  let avErr: number = averageSquareDiff(truth, preds);
  let crowdErr: number = ((truth - av) * (truth - av));
  let div: number = averageSquareDiff(av, preds);
  return [avErr, crowdErr, div];
}
function main() {
  let predsArray: number[][] = [[48.0, 47.0, 51.0], [48.0, 47.0, 51.0, 42.0]];
  let truth: number = 49.0;
  let i: number = 0;
  while ((i < (Array.isArray(predsArray) || typeof predsArray === 'string' ? predsArray.length : Object.keys(predsArray ?? {}).length))) {
    let preds: number[] = predsArray[i];
    let res: number[] = diversityTheorem(truth, preds);
    console.log(("Average-error : " + padLeft(formatFloat(res[Math.trunc(0)], 3), 6)));
    console.log(("Crowd-error   : " + padLeft(formatFloat(res[Math.trunc(1)], 3), 6)));
    console.log(("Diversity     : " + padLeft(formatFloat(res[Math.trunc(2)], 3), 6)));
    console.log("");
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

