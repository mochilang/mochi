// Generated by Mochi v0.10.41 on 2025-07-27 11:34:33 GMT+7

export interface Edge { a: number; b: number }
function contains(xs: number[], v: number): boolean {
  for (const x of xs) {
    if ((x == v)) {
      return true;
    }
  }
  return false;
}
function sliceEqual(a: number[], b: number[]): boolean {
  let i: number = 0;
  while ((i < (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length))) {
    if ((a[i] != b[i])) {
      return false;
    }
    i = (i + 1);
  }
  return true;
}
function reverse(xs: number[]) {
  let i: number = 0;
  let j: number = ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1);
  while ((i < j)) {
    let t: number = xs[i];
    xs[i] = xs[j];
    xs[j] = t;
    i = (i + 1);
    j = (j - 1);
  }
}
function copyInts(xs: number[]): number[] {
  let out: number[] = [];
  for (const v of xs) {
    out.push(v);
  }
  return out;
}
function perimEqual(p1: number[], p2: number[]): boolean {
  if (((Array.isArray(p1) || typeof p1 === 'string' ? p1.length : Object.keys(p1 ?? {}).length) != (Array.isArray(p2) || typeof p2 === 'string' ? p2.length : Object.keys(p2 ?? {}).length))) {
    return false;
  }
  for (const v of p1) {
    if (!p2.includes(v)) {
      return false;
    }
  }
  let c: number[] = copyInts(p1);
  let r: number = 0;
  while ((r < 2)) {
    let i: number = 0;
    while ((i < (Array.isArray(p1) || typeof p1 === 'string' ? p1.length : Object.keys(p1 ?? {}).length))) {
      if (sliceEqual(c, p2)) {
        return true;
      }
      let t: number = c[Math.trunc(((Array.isArray(c) || typeof c === 'string' ? c.length : Object.keys(c ?? {}).length) - 1))];
      let j: number = ((Array.isArray(c) || typeof c === 'string' ? c.length : Object.keys(c ?? {}).length) - 1);
      while ((j > 0)) {
        c[j] = c[Math.trunc((j - 1))];
        j = (j - 1);
      }
      c[0] = t;
      i = (i + 1);
    }
    reverse(c);
    r = (r + 1);
  }
  return false;
}
function sortEdges(es: Edge[]): Edge[] {
  let arr: Edge[] = es;
  let n: number = (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length);
  let i: number = 0;
  while ((i < n)) {
    let j: number = 0;
    while ((j < (n - 1))) {
      let a: Edge = arr[j];
      let b: Edge = arr[Math.trunc((j + 1))];
      if (((a.a > b.a) || ((a.a == b.a) && (a.b > b.b)))) {
        arr[j] = b;
        arr[(j + 1)] = a;
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  return arr;
}
function concat(a: Edge[], b: Edge[]): Edge[] {
  let out: Edge[] = [];
  for (const x of a) {
    out.push(x);
  }
  for (const x of b) {
    out.push(x);
  }
  return out;
}
function faceToPerim(face: Edge[]) {
  let le: number = (Array.isArray(face) || typeof face === 'string' ? face.length : Object.keys(face ?? {}).length);
  if ((le == 0)) {
    return null;
  }
  let edges: Edge[] = [];
  let i: number = 0;
  while ((i < le)) {
    let e: Edge[] = face[i];
    if ((e.b <= e.a)) {
      return null;
    }
    edges.push(e);
    i = (i + 1);
  }
  edges = sortEdges(edges);
  let firstEdge: Edge = edges[Math.trunc(0)];
  let perim: number[] = [firstEdge.a, firstEdge.b];
  let first: number = firstEdge.a;
  let last: number = firstEdge.b;
  edges = edges.slice(1, (Array.isArray(edges) || typeof edges === 'string' ? edges.length : Object.keys(edges ?? {}).length));
  le = (Array.isArray(edges) || typeof edges === 'string' ? edges.length : Object.keys(edges ?? {}).length);
  let done: boolean = false;
  while (((le > 0) && !done)) {
    let idx: number = 0;
    let found: boolean = false;
    while ((idx < le)) {
      let e: Edge[] = edges[idx];
      if ((e.a == last)) {
        perim.push(e.b);
        last = e.b;
        found = true;
      } else {
        if ((e.b == last)) {
          perim.push(e.a);
          last = e.a;
          found = true;
        }
      }
      if (found) {
        edges = concat(edges.slice(0, idx), edges.slice((idx + 1), (Array.isArray(edges) || typeof edges === 'string' ? edges.length : Object.keys(edges ?? {}).length)));
        le = (le - 1);
        if ((last == first)) {
          if ((le == 0)) {
            done = true;
          } else {
            return null;
          }
        }
        break
      }
      idx = (idx + 1);
    }
    if (!found) {
      return null;
    }
  }
  return perim.slice(0, ((Array.isArray(perim) || typeof perim === 'string' ? perim.length : Object.keys(perim ?? {}).length) - 1));
}
function listStr(xs: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    s = (s + String(xs[i]));
    if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
let e: Edge[] = [{"a": 7, "b": 11}, {"a": 1, "b": 11}, {"a": 1, "b": 7}];
let f: Edge[] = [{"a": 11, "b": 23}, {"a": 1, "b": 17}, {"a": 17, "b": 23}, {"a": 1, "b": 11}];
let g: Edge[] = [{"a": 8, "b": 14}, {"a": 17, "b": 19}, {"a": 10, "b": 12}, {"a": 10, "b": 14}, {"a": 12, "b": 17}, {"a": 8, "b": 18}, {"a": 18, "b": 19}];
let h: Edge[] = [{"a": 1, "b": 3}, {"a": 9, "b": 11}, {"a": 3, "b": 11}, {"a": 1, "b": 11}];
let faces: Edge[][] = [e, f, g, h];
let names: string[] = ["E", "F", "G", "H"];
let idx2: number = 0;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log("Perimeter format equality checks:");
  console.log(("  Q == R is " + String(perimEqual([8, 1, 3], [1, 3, 8]))));
  console.log(("  U == V is " + String(perimEqual([18, 8, 14, 10, 12, 17, 19], [8, 14, 10, 12, 17, 19, 18]))));
  console.log("\nEdge to perimeter format translations:");
  while ((idx2 < (Array.isArray(faces) || typeof faces === 'string' ? faces.length : Object.keys(faces ?? {}).length))) {
    let per = faceToPerim(faces[idx2]);
    if ((per == null)) {
      console.log((("  " + names[idx2]) + " => Invalid edge format"));
    } else {
      console.log(((("  " + names[idx2]) + " => ") + listStr(per)));
    }
    idx2 = (idx2 + 1);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

