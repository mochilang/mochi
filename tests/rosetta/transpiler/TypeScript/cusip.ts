// Generated by Mochi v0.10.55 on 2025-08-02 20:30:57 GMT+7

function ord(ch: string): number {
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  if (((ch >= "0") && (ch <= "9"))) {
    return (parseIntStr(ch, 10) + 48);
  }
  let idx = upper.indexOf(ch);
  if ((idx >= 0)) {
    return (65 + idx);
  }
  return 0;
}
function isCusip(s: string): boolean {
  if ((Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) != 9)) {
    return false;
  }
  let sum: number = 0;
  let i: number = 0;
  while ((i < 8)) {
    let c: string = s.slice(i, (i + 1));
    let v: number = 0;
    if (((c >= "0") && (c <= "9"))) {
      v = parseIntStr(c, 10);
    } else {
      if (((c >= "A") && (c <= "Z"))) {
        v = (ord(c) - 55);
      } else {
        if ((c == "*")) {
          v = 36;
        } else {
          if ((c == "@")) {
            v = 37;
          } else {
            if ((c == "#")) {
              v = 38;
            } else {
              return false;
            }
          }
        }
      }
    }
    if (((i % 2) == 1)) {
      v = (v * 2);
    }
    sum = ((sum + Math.trunc(v / 10)) + (v % 10));
    i = (i + 1);
  }
  return (parseIntStr(s.slice(8, 9), 10) == ((10 - (sum % 10)) % 10));
}
let candidates: string[] = ["037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function parseIntStr(s: string, base: number): number { return parseInt(s, Math.trunc(base)); }
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const cand of candidates) {
    let b: string = "incorrect";
    if (isCusip(cand)) {
      b = "correct";
    }
    console.log(_str(((cand + " -> ") + b)));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  globalThis.gc?.()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

