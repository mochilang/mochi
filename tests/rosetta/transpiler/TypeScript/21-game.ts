// Generated by Mochi v0.10.42 on 2025-07-28 10:39:51 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str.slice(i, (i + 1))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function main() {
  let total: number = 0;
  let computer: boolean = ((_now() % 2) == 0);
  console.log(_str("Enter q to quit at any time\n"));
  if (computer) {
    console.log(_str("The computer will choose first"));
  } else {
    console.log(_str("You will choose first"));
  }
  console.log(_str("\n\nRunning total is now 0\n\n"));
  let round: number = 1;
  let done: boolean = false;
  while (!done) {
    console.log(_str((("ROUND " + _str(round)) + ":\n\n")));
    let i: number = 0;
    while (((i < 2) && !done)) {
      if (computer) {
        let choice: number = 0;
        if ((total < 18)) {
          choice = ((_now() % 3) + 1);
        } else {
          choice = (21 - total);
        }
        total = (total + choice);
        console.log(_str(("The computer chooses " + _str(choice))));
        console.log(_str(("Running total is now " + _str(total))));
        if ((total == 21)) {
          console.log(_str("\nSo, commiserations, the computer has won!"));
          done = true;
        }
      } else {
        while (true) {
          console.log(_str("Your choice 1 to 3 : "));
          let line: string = _input();
          if (((line == "q") || (line == "Q"))) {
            console.log(_str("OK, quitting the game"));
            done = true;
            break
          }
          let num = parseIntStr(line);
          if (((num < 1) || (num > 3))) {
            if (((total + num) > 21)) {
              console.log(_str("Too big, try again"));
            } else {
              console.log(_str("Out of range, try again"));
            }
            continue
          }
          if (((total + num) > 21)) {
            console.log(_str("Too big, try again"));
            continue
          }
          total = (total + num);
          console.log(_str(("Running total is now " + _str(total))));
          break
        }
        if ((total == 21)) {
          console.log(_str("\nSo, congratulations, you've won!"));
          done = true;
        }
      }
      console.log(_str("\n"));
      computer = !computer;
      i = (i + 1);
    }
    round = (round + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

