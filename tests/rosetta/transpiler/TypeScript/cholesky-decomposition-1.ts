// Generated by Mochi v0.10.40 on 2025-07-25 21:25:05 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function sqrtApprox(x: number): number {
    let guess: number = x;
    let i: number = 0;
    while ((i < 20)) {
      guess = ((guess + (x / guess)) / 2.0);
      i = (i + 1);
    }
    return guess;
  }
  function makeSym(order: number, elements: number[]): Record<string, any> {
    return {order, "ele": elements};
  }
  function unpackSym(m: Record<string, any>): number[][] {
    const n = m.order;
    const ele = m.ele;
    let mat: number[][] = [];
    let idx: number = 0;
    let r: number = 0;
    while ((r < n)) {
      let row: number[] = [];
      let c: number = 0;
      while ((c <= r)) {
        row = [...row, ele[idx]];
        idx = (idx + 1);
        c = (c + 1);
      }
      while ((c < n)) {
        row = [...row, 0.0];
        c = (c + 1);
      }
      mat = [...mat, row];
      r = (r + 1);
    }
    r = 0;
    while ((r < n)) {
      let c: number = (r + 1);
      while ((c < n)) {
        mat[r][c] = mat[c][r];
        c = (c + 1);
      }
      r = (r + 1);
    }
    return mat;
  }
  function printMat(m: number[][]) {
    let i: number = 0;
    while ((i < (Array.isArray(m) || typeof m === 'string' ? m.length : Object.keys(m ?? {}).length))) {
      let line: string = "";
      let j: number = 0;
      while ((j < (Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length))) {
        line = (line + String(m[i][j]));
        if ((j < ((Array.isArray(m[i]) || typeof m[i] === 'string' ? m[i].length : Object.keys(m[i] ?? {}).length) - 1))) {
          line = (line + " ");
        }
        j = (j + 1);
      }
      console.log(line);
      i = (i + 1);
    }
  }
  function printSym(m: Record<string, any>) {
    printMat(unpackSym(m));
  }
  function printLower(m: Record<string, any>) {
    const n = m.order;
    const ele = m.ele;
    let mat: number[][] = [];
    let idx: number = 0;
    let r: number = 0;
    while ((r < n)) {
      let row: number[] = [];
      let c: number = 0;
      while ((c <= r)) {
        row = [...row, ele[idx]];
        idx = (idx + 1);
        c = (c + 1);
      }
      while ((c < n)) {
        row = [...row, 0.0];
        c = (c + 1);
      }
      mat = [...mat, row];
      r = (r + 1);
    }
    printMat(mat);
  }
  function choleskyLower(a: Record<string, any>): Record<string, any> {
    const n = a.order;
    const ae = a.ele;
    let le: number[] = [];
    let idx: number = 0;
    while ((idx < (Array.isArray(ae) || typeof ae === 'string' ? ae.length : Object.keys(ae ?? {}).length))) {
      le = [...le, 0.0];
      idx = (idx + 1);
    }
    let row: number = 1;
    let col: number = 1;
    let dr: number = 0;
    let dc: number = 0;
    let i: number = 0;
    while ((i < (Array.isArray(ae) || typeof ae === 'string' ? ae.length : Object.keys(ae ?? {}).length))) {
      const e = ae[i];
      if ((i < dr)) {
        let d = ((e - le[i]) / le[dc]);
        le[i] = d;
        let ci: number = col;
        let cx: number = dc;
        let j: number = (i + 1);
        while ((j <= dr)) {
          cx = (cx + ci);
          ci = (ci + 1);
          le[j] = (le[j] + (d * le[cx]));
          j = (j + 1);
        }
        col = (col + 1);
        dc = (dc + col);
      } else {
        le[i] = sqrtApprox((e - le[i]));
        row = (row + 1);
        dr = (dr + row);
        col = 1;
        dc = 0;
      }
      i = (i + 1);
    }
    return {"order": n, "ele": le};
  }
  function demo(a: Record<string, any>) {
    console.log("A:");
    printSym(a);
    console.log("L:");
    const l: Record<string, any> = choleskyLower(a);
    printLower(l);
  }
  demo(makeSym(3, [25.0, 15.0, 18.0, -5.0, 0.0, 11.0]));
  demo(makeSym(4, [18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0]));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

