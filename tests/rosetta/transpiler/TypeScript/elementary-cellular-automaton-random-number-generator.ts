// Generated by Mochi v0.10.41 on 2025-07-27 11:02:47 GMT+7

let n: number = 64;
function pow2(k: number): number {
  let v: number = 1;
  let i: number = 0;
  while ((i < k)) {
    v = (v * 2);
    i = (i + 1);
  }
  return v;
}
function ruleBit(ruleNum: number, idx: number): number {
  let r: number = ruleNum;
  let i: number = 0;
  while ((i < idx)) {
    r = Math.trunc(r / 2);
    i = (i + 1);
  }
  return (r % 2);
}
function evolve(state: number[], ruleNum: number): number[] {
  let out: number[] = [];
  let p: number = 0;
  while ((p < 10)) {
    let b: number = 0;
    let q: number = 7;
    while ((q >= 0)) {
      let st: number[] = state;
      b = (b + (st[Math.trunc(0)] * pow2(q)));
      let next: number[] = [];
      let i: number = 0;
      while ((i < n)) {
        let lidx: number = (i - 1);
        if ((lidx < 0)) {
          lidx = (n - 1);
        }
        let left: number = st[lidx];
        let center: number = st[i];
        let ridx: number = (i + 1);
        if ((ridx >= n)) {
          ridx = 0;
        }
        let right: number = st[ridx];
        let index: number = (((left * 4) + (center * 2)) + right);
        next.push(ruleBit(ruleNum, index));
        i = (i + 1);
      }
      state = next;
      q = (q - 1);
    }
    out.push(b);
    p = (p + 1);
  }
  return out;
}
let init: number[] = [];
let i: number = 0;
let bytes: number[] = evolve(init, 30);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  while ((i < n)) {
    init.push(0);
    i = (i + 1);
  }
  init[0] = 1;
  console.log(String(bytes));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

