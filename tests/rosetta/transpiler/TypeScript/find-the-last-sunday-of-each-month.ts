// Generated by Mochi v0.10.41 on 2025-07-27 11:35:26 GMT+7

function leapYear(y: number): boolean {
  return ((((y % 4) == 0) && ((y % 100) != 0)) || ((y % 400) == 0));
}
function monthDays(y: number, m: number): number {
  let days: number[] = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  if (((m == 2) && leapYear(y))) {
    return 29;
  }
  return days[m];
}
function zeller(y: number, m: number, d: number): number {
  let mm: number = m;
  let yy: number = y;
  if ((mm < 3)) {
    mm = (mm + 12);
    yy = (yy - 1);
  }
  let K: number = (yy % 100);
  let J: number = Math.trunc(yy / 100);
  let h: number = ((((((d + Math.trunc((13 * (mm + 1)) / 5)) + K) + Math.trunc(K / 4)) + Math.trunc(J / 4)) + (5 * J)) % 7);
  return ((h + 6) % 7);
}
function lastSunday(y: number, m: number): number {
  let day: number = monthDays(y, m);
  while (((day > 0) && (zeller(y, m, day) != 0))) {
    day = (day - 1);
  }
  return day;
}
function monthName(m: number): string {
  let names: string[] = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  return names[m];
}
function main() {
  let year: number = Math.trunc(_input());
  console.log(("Last Sundays of each month of " + String(year)));
  console.log("==================================");
  let m: number = 1;
  while ((m <= 12)) {
    let day: number = lastSunday(year, m);
    console.log(((monthName(m) + ": ") + String(day)));
    m = (m + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

