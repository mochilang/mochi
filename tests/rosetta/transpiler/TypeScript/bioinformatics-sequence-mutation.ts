// Generated by Mochi v0.10.56 on 2025-08-03 17:23:25 GMT+7

function randInt(s: number, n: number): number[] {
  let next: number = (((s * 1664525) + 1013904223) % 2147483647);
  return [next, (next % n)];
}
function padLeft(s: string, w: number): string {
  let res: string = "";
  let n: number = (w - Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  while ((n > 0)) {
    res = (res + " ");
    n = (n - 1);
  }
  return (res + s);
}
function makeSeq(s: number, le: number): any[] {
  let bases: string = "ACGT";
  let out: string = "";
  let i: number = 0;
  while ((i < le)) {
    let r: number[] = randInt(s, 4);
    s = r[Math.trunc(0)];
    let idx: number = Math.trunc(r[Math.trunc(1)]);
    out = (out + (bases).substring(idx, (idx + 1)));
    i = (i + 1);
  }
  return [s, out];
}
function mutate(s: number, dna: string, w: number[]): any[] {
  let bases: string = "ACGT";
  let le: number = Number(Array.isArray(dna) || typeof dna === 'string' ? dna.length : Object.keys(dna ?? {}).length);
  let r: number[] = randInt(s, le);
  s = r[Math.trunc(0)];
  let p: number = Math.trunc(r[Math.trunc(1)]);
  r = randInt(s, 300);
  s = r[Math.trunc(0)];
  let x: number = Math.trunc(r[Math.trunc(1)]);
  let arr: string[] = [];
  let i: number = 0;
  while ((i < le)) {
    arr.push((dna).substring(i, (i + 1)));
    i = (i + 1);
  }
  if ((x < w[Math.trunc(0)])) {
    r = randInt(s, 4);
    s = r[Math.trunc(0)];
    let idx: number = Math.trunc(r[Math.trunc(1)]);
    let b: string = (bases).substring(idx, (idx + 1));
    console.log(_str((((((("  Change @" + padLeft(_str(p), 3)) + " '") + arr[p]) + "' to '") + b) + "'")));
    arr[p] = b;
  } else {
    if ((x < (w[Math.trunc(0)] + w[Math.trunc(1)]))) {
      console.log(_str((((("  Delete @" + padLeft(_str(p), 3)) + " '") + arr[p]) + "'")));
      let j: number = p;
      while ((j < (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1))) {
        arr[j] = arr[Math.trunc((j + 1))];
        j = (j + 1);
      }
      arr = arr.slice(0, (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1));
    } else {
      r = randInt(s, 4);
      s = r[Math.trunc(0)];
      let idx2: number = Math.trunc(r[Math.trunc(1)]);
      let b: string = (bases).substring(idx2, (idx2 + 1));
      arr.push("");
      let j: number = (Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
      while ((j > p)) {
        arr[j] = arr[Math.trunc((j - 1))];
        j = (j - 1);
      }
      console.log(_str((((("  Insert @" + padLeft(_str(p), 3)) + " '") + b) + "'")));
      arr[p] = b;
    }
  }
  let out: string = "";
  i = 0;
  while ((i < Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return [s, out];
}
function prettyPrint(dna: string, rowLen: number) {
  console.log(_str("SEQUENCE:"));
  let le: number = Number(Array.isArray(dna) || typeof dna === 'string' ? dna.length : Object.keys(dna ?? {}).length);
  let i: number = 0;
  while ((i < le)) {
    let k: number = (i + rowLen);
    if ((k > le)) {
      k = le;
    }
    console.log(_str(((padLeft(_str(i), 5) + ": ") + dna.slice(i, k))));
    i = (i + rowLen);
  }
  let a: number = 0;
  let c: number = 0;
  let g: number = 0;
  let t: number = 0;
  let idx: number = 0;
  while ((idx < le)) {
    let ch: string = (dna).substring(idx, (idx + 1));
    if ((ch == "A")) {
      a = (a + 1);
    } else {
      if ((ch == "C")) {
        c = (c + 1);
      } else {
        if ((ch == "G")) {
          g = (g + 1);
        } else {
          if ((ch == "T")) {
            t = (t + 1);
          }
        }
      }
    }
    idx = (idx + 1);
  }
  console.log(_str(""));
  console.log(_str("BASE COUNT:"));
  console.log(_str(("    A: " + padLeft(_str(a), 3))));
  console.log(_str(("    C: " + padLeft(_str(c), 3))));
  console.log(_str(("    G: " + padLeft(_str(g), 3))));
  console.log(_str(("    T: " + padLeft(_str(t), 3))));
  console.log(_str("    ------"));
  console.log(_str(("    Î£: " + _str(le))));
  console.log(_str("    ======"));
}
function wstring(w: number[]): string {
  return (((((("  Change: " + _str(w[Math.trunc(0)])) + "\n  Delete: ") + _str(w[Math.trunc(1)])) + "\n  Insert: ") + _str(w[Math.trunc(2)])) + "\n");
}
function main() {
  let seed: number = 1;
  let res: any[] = makeSeq(seed, 250);
  seed = res[Math.trunc(0)];
  let dna: string = res[Math.trunc(1)];
  prettyPrint(dna, 50);
  let muts: number = 10;
  let w: number[] = [100, 100, 100];
  console.log(_str("\nWEIGHTS (ex 300):"));
  console.log(_str(wstring(w)));
  console.log(_str((("MUTATIONS (" + _str(muts)) + "):")));
  let i: number = 0;
  while ((i < muts)) {
    res = mutate(seed, dna, w);
    seed = res[Math.trunc(0)];
    dna = res[Math.trunc(1)];
    i = (i + 1);
  }
  console.log(_str(""));
  prettyPrint(dna, 50);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

