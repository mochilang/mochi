// Generated by Mochi v0.10.39 on 2025-07-24 18:20:17 GMT+7

function modPow(base: number, exp: number, m: number): number {
  let result: number = (1 % m);
  let b: number = (base % m);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % m);
    }
    b = ((b * b) % m);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  for (const p of [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) {
    if (((n % p) == 0)) {
      return (n == p);
    }
  }
  let d: number = (n - 1);
  let s: number = 0;
  while (((d % 2) == 0)) {
    d = Math.trunc(d / 2);
    s = (s + 1);
  }
  for (const a of [2, 325, 9375, 28178, 450775, 9780504, 1795265022]) {
    if (((a % n) == 0)) {
      return true;
    }
    let x = modPow(a, d, n);
    if (((x == 1) || (x == (n - 1)))) {
      continue
    }
    let r: number = 1;
    let passed: boolean = false;
    while ((r < s)) {
      x = ((x * x) % n);
      if ((x == (n - 1))) {
        passed = true;
        break
      }
      r = (r + 1);
    }
    if (!passed) {
      return false;
    }
  }
  return true;
}
function commatize(n: number): string {
  let s: string = String(n);
  let i: number = ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 3);
  while ((i > 0)) {
    s = (((s).substring(0, i) + ",") + (s).substring(i, (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)));
    i = (i - 3);
  }
  return s;
}
function pad(s: string, width: number): string {
  let out: string = s;
  while (((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < width)) {
    out = (" " + out);
  }
  return out;
}
function join(xs: string[], sep: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function formatRow(row: string[]): string {
  let padded: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
    padded = [...padded, pad(row[i], 9)];
    i = (i + 1);
  }
  return (("[" + join(padded, " ")) + "]");
}
function main() {
  let cubans: string[] = [];
  let cube1: number = 1;
  let count: number = 0;
  let cube100k: number = 0;
  let i: number = 1;
  while (true) {
    let j: number = (i + 1);
    let cube2: number = ((j * j) * j);
    let diff: number = (cube2 - cube1);
    if (isPrime(diff)) {
      if ((count < 200)) {
        cubans = [...cubans, commatize(diff)];
      }
      count = (count + 1);
      if ((count == 100000)) {
        cube100k = diff;
        break
      }
    }
    cube1 = cube2;
    i = (i + 1);
  }
  console.log("The first 200 cuban primes are:-");
  let row: number = 0;
  while ((row < 20)) {
    let slice: string[] = [];
    let k: number = 0;
    while ((k < 10)) {
      slice = [...slice, cubans[Math.trunc(((row * 10) + k))]];
      k = (k + 1);
    }
    console.log(formatRow(slice));
    row = (row + 1);
  }
  console.log(("\nThe 100,000th cuban prime is " + commatize(cube100k)));
}
main();
