// Generated by Mochi v0.10.40 on 2025-07-26 10:13:10 GMT+7

function listStr(xs: number[]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    s = (s + String(xs[i]));
    if ((i < ((Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function pointerDemo() {
  console.log("Pointer:");
  let i: number = 0;
  console.log("Before:");
  console.log(((("\t<address>: " + String(i)) + ", ") + String(i)));
  i = 3;
  console.log("After:");
  console.log(((("\t<address>: " + String(i)) + ", ") + String(i)));
}
function sliceDemo() {
  console.log("Slice:");
  let a: any[] = [];
  for (let _ = 0; _ < 10; _++) {
    a.push(0);
  }
  let s: any[] = a;
  console.log("Before:");
  console.log(("\ts: " + listStr(s)));
  console.log(("\ta: " + listStr(a)));
  let data: number[] = [65, 32, 115, 116, 114, 105, 110, 103, 46];
  let idx: number = 0;
  while ((idx < (Array.isArray(data) || typeof data === 'string' ? data.length : Object.keys(data ?? {}).length))) {
    s[idx] = data[idx];
    idx = (idx + 1);
  }
  console.log("After:");
  console.log(("\ts: " + listStr(s)));
  console.log(("\ta: " + listStr(a)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  pointerDemo();
  console.log("");
  sliceDemo();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

