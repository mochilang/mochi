// Generated by Mochi v0.10.41 on 2025-07-26 19:37:06 GMT+7

let dayNames: string[] = ["Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"];
let seasons: string[] = ["Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"];
let holydays: string[][] = [["Mungday", "Chaoflux"], ["Mojoday", "Discoflux"], ["Syaday", "Confuflux"], ["Zaraday", "Bureflux"], ["Maladay", "Afflux"]];
function isLeap(y: number): boolean {
  if (((y % 400) == 0)) {
    return true;
  }
  if (((y % 100) == 0)) {
    return false;
  }
  return ((y % 4) == 0);
}
let daysBefore: number[] = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
function dayOfYear(y: number, m: number, d: number): number {
  let doy: number = (daysBefore[Math.trunc((m - 1))] + d);
  if (((m > 2) && isLeap(y))) {
    doy = (doy + 1);
  }
  return doy;
}
function ordinal(n: number): string {
  let suff: string = "th";
  let mod100: number = (n % 100);
  if (((mod100 < 11) || (mod100 > 13))) {
    let r: number = (n % 10);
    if ((r == 1)) {
      suff = "st";
    } else {
      if ((r == 2)) {
        suff = "nd";
      } else {
        if ((r == 3)) {
          suff = "rd";
        }
      }
    }
  }
  return (String(n) + suff);
}
function discordian(y: number, m: number, d: number): string {
  if (((isLeap(y) && (m == 2)) && (d == 29))) {
    return ("St. Tib's Day, YOLD " + String((y + 1166)));
  }
  let doy: number = dayOfYear(y, m, d);
  if ((isLeap(y) && (doy > 60))) {
    doy = (doy - 1);
  }
  let idx: number = (doy - 1);
  let season: number = Math.trunc(idx / 73);
  let day: number = (idx % 73);
  let res: string = ((((((dayNames[Math.trunc((idx % 5))] + ", the ") + ordinal((day + 1))) + " day of ") + seasons[season]) + " in the YOLD ") + String((y + 1166)));
  if ((day == 4)) {
    res = (((res + ". Celebrate ") + holydays[season][Math.trunc(0)]) + "!");
  }
  if ((day == 49)) {
    res = (((res + ". Celebrate ") + holydays[season][Math.trunc(1)]) + "!");
  }
  return res;
}
function main() {
  let dates: number[][] = [[2010, 7, 22], [2012, 2, 28], [2012, 2, 29], [2012, 3, 1], [2012, 12, 31], [2013, 1, 1], [2100, 12, 31], [2015, 10, 19], [2010, 1, 5], [2011, 5, 3], [2000, 3, 13]];
  let i: number = 0;
  while ((i < (Array.isArray(dates) || typeof dates === 'string' ? dates.length : Object.keys(dates ?? {}).length))) {
    let dt: number[] = dates[i];
    console.log(discordian(dt[Math.trunc(0)], dt[Math.trunc(1)], dt[Math.trunc(2)]));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

