// Generated by Mochi v0.10.40 on 2025-07-25 22:05:29 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function gcd(a: number, b: number): number {
    let x: number = a;
    if ((x < 0)) {
      x = -x;
    }
    let y: number = b;
    if ((y < 0)) {
      y = -y;
    }
    while ((y != 0)) {
      const t: number = (x % y);
      x = y;
      y = t;
    }
    return x;
  }
  function parseRational(s: string): Record<string, number> {
    let intPart: number = 0;
    let fracPart: number = 0;
    let denom: number = 1;
    let afterDot: boolean = false;
    let i: number = 0;
    while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
      const ch: string = (s).substring(i, (i + 1));
      if ((ch == ".")) {
        afterDot = true;
      } else {
        const d: number = (Math.trunc(ch) - Math.trunc("0"));
        if (!afterDot) {
          intPart = ((intPart * 10) + d);
        } else {
          fracPart = ((fracPart * 10) + d);
          denom = (denom * 10);
        }
      }
      i = (i + 1);
    }
    let num = ((intPart * denom) + fracPart);
    const g = gcd(num, denom);
    return {"num": Math.trunc((num / g)), "den": Math.trunc((denom / g))};
  }
  function main() {
    const inputs: string[] = ["0.9054054", "0.518518", "0.75"];
    for (const s of inputs) {
      const r = parseRational(s);
      console.log(((((s + " = ") + String(r.num)) + "/") + String(r.den)));
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

