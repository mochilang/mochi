// Generated by Mochi v0.10.55 on 2025-08-02 20:30:55 GMT+7

function padLeft(n: number, width: number): string {
  let s: string = _str(n);
  while ((Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function modPow(base: number, exp: number, mod: number): number {
  let result: number = (1 % mod);
  let b: number = (base % mod);
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = ((result * b) % mod);
    }
    b = ((b * b) % mod);
    e = Math.trunc(e / 2);
  }
  return result;
}
function main() {
  let k: number = 2;
  while ((k <= 10)) {
    console.log(_str((("The first 50 Curzon numbers using a base of " + _str(k)) + " :")));
    let count: number = 0;
    let n: number = 1;
    let curzon50: number[] = [];
    while (true) {
      let d: number = ((k * n) + 1);
      if ((((modPow(k, n, d) + 1) % d) == 0)) {
        if ((count < 50)) {
          curzon50.push(n);
        }
        count = (count + 1);
        if ((count == 50)) {
          let idx: number = 0;
          while ((idx < Number(Array.isArray(curzon50) || typeof curzon50 === 'string' ? curzon50.length : Object.keys(curzon50 ?? {}).length))) {
            let line: string = "";
            let j: number = 0;
            while ((j < 10)) {
              line = ((line + padLeft(curzon50[idx], 4)) + " ");
              idx = (idx + 1);
              j = (j + 1);
            }
            console.log(_str((line).substring(0, (Number(Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1))));
          }
        }
        if ((count == 1000)) {
          console.log(_str(("\nOne thousandth: " + _str(n))));
          break
        }
      }
      n = (n + 1);
    }
    console.log(_str(""));
    k = (k + 2);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  globalThis.gc?.()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

