// Generated by Mochi v0.10.57 on 2025-08-04 19:46:10 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if (((Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str.slice(i, (i + 1))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
let days: string[] = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
function anchorDay(y: number): number {
  return ((((2 + (5 * (y % 4))) + (4 * (y % 100))) + (6 * (y % 400))) % 7);
}
function isLeapYear(y: number): boolean {
  return (((y % 4) == 0) && (((y % 100) != 0) || ((y % 400) == 0)));
}
let firstDaysCommon: number[] = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
let firstDaysLeap: number[] = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
function main() {
  let dates: string[] = ["1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02"];
  console.log(_str("Days of week given by Doomsday rule:"));
  for (const date of dates) {
    let y = parseIntStr(date.slice(0, 4));
    let m = (parseIntStr(date.slice(5, 7)) - 1);
    let d = parseIntStr(date.slice(8, 10));
    let a = anchorDay(y);
    let f: number = firstDaysCommon[m];
    if (isLeapYear(y)) {
      f = firstDaysLeap[m];
    }
    let w = (d - f);
    if ((w < 0)) {
      w = (7 + w);
    }
    let dow = ((a + w) % 7);
    console.log(_str(((date + " -> ") + days[dow])));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

