// Generated by Mochi v0.10.42 on 2025-07-27 18:45:48 GMT+7

function sel(list: number[], k: number): number {
  let i: number = 0;
  while ((i <= k)) {
    let minIndex: number = i;
    let j: number = (i + 1);
    while ((j < (Array.isArray(list) || typeof list === 'string' ? list.length : Object.keys(list ?? {}).length))) {
      if ((list[j] < list[minIndex])) {
        minIndex = j;
      }
      j = (j + 1);
    }
    let tmp: number = list[i];
    list[i] = list[minIndex];
    list[minIndex] = tmp;
    i = (i + 1);
  }
  return list[k];
}
function median(a: number[]): number {
  let arr: number[] = a;
  let half: number = Math.trunc(Math.trunc((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) / 2));
  let med: number = sel(arr, half);
  if ((((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) % 2) == 0)) {
    return ((med + arr[Math.trunc((half - 1))]) / 2.0);
  }
  return med;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(String(median([3.0, 1.0, 4.0, 1.0])));
  console.log(String(median([3.0, 1.0, 4.0, 1.0, 5.0])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

