// Generated by Mochi v0.10.41 on 2025-07-27 11:01:24 GMT+7

export interface DivResult { q: number; r: number }
function egyptianDivide(dividend: number, divisor: number): DivResult {
  if (((dividend < 0) || (divisor <= 0))) {
    panic("Invalid argument(s)");
  }
  if ((dividend < divisor)) {
    return {"q": 0, "r": dividend};
  }
  let powers: number[] = [1];
  let doublings: number[] = [divisor];
  let doubling: number = (divisor * 2);
  while ((doubling <= dividend)) {
    powers.push((powers[Math.trunc(((Array.isArray(powers) || typeof powers === 'string' ? powers.length : Object.keys(powers ?? {}).length) - 1))] * 2));
    doublings.push(doubling);
    doubling = (doubling * 2);
  }
  let ans: number = 0;
  let accum: number = 0;
  let i: number = ((Array.isArray(doublings) || typeof doublings === 'string' ? doublings.length : Object.keys(doublings ?? {}).length) - 1);
  while ((i >= 0)) {
    if (((accum + doublings[i]) <= dividend)) {
      accum = (accum + doublings[i]);
      ans = (ans + powers[i]);
      if ((accum == dividend)) {
        break
      }
    }
    i = (i - 1);
  }
  return {"q": ans, "r": (dividend - accum)};
}
function main() {
  let dividend: number = 580;
  let divisor: number = 34;
  let res: DivResult = egyptianDivide(dividend, divisor);
  console.log(((((((String(dividend) + " divided by ") + String(divisor)) + " is ") + String(res.q)) + " with remainder ") + String(res.r)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

