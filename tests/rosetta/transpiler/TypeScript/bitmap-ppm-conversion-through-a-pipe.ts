// Generated by Mochi v0.10.56 on 2025-08-03 17:23:37 GMT+7

export interface Pixel { R: number; G: number; B: number }
function pixelFromRgb(c: number): Pixel {
  let r: number = (Math.trunc(Math.trunc(c / 65536)) % 256);
  let g: number = (Math.trunc(Math.trunc(c / 256)) % 256);
  let b: number = (c % 256);
  return {"R": r, "G": g, "B": b};
}
function rgbFromPixel(p: Pixel): number {
  return (((p.R * 65536) + (p.G * 256)) + p.B);
}
export interface Bitmap { cols: number; rows: number; px: Pixel[][] }
function NewBitmap(x: number, y: number): Bitmap {
  let data: Pixel[][] = [];
  let row: number = 0;
  while ((row < y)) {
    let r: Pixel[] = [];
    let col: number = 0;
    while ((col < x)) {
      r.push({"R": 0, "G": 0, "B": 0});
      col = (col + 1);
    }
    data.push(r);
    row = (row + 1);
  }
  return {"cols": x, "rows": y, "px": data};
}
function FillRgb(b: Bitmap, c: number) {
  let y: number = 0;
  let p: Pixel = pixelFromRgb(c);
  while ((y < b.rows)) {
    let x: number = 0;
    while ((x < b.cols)) {
      let px: Pixel[][] = b.px;
      let row: Pixel[] = px[y];
      row[x] = p;
      px[y] = row;
      b.px = px;
      x = (x + 1);
    }
    y = (y + 1);
  }
}
function SetPxRgb(b: Bitmap, x: number, y: number, c: number): boolean {
  if (((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows))) {
    return false;
  }
  let px: Pixel[][] = b.px;
  let row: Pixel[] = px[y];
  row[x] = pixelFromRgb(c);
  px[y] = row;
  b.px = px;
  return true;
}
function nextRand(seed: number): number {
  return (((seed * 1664525) + 1013904223) % 2147483648);
}
function main() {
  let bm: Bitmap = NewBitmap(400, 300);
  FillRgb(bm, 12615744);
  let seed: number = _now();
  let i: number = 0;
  while ((i < 2000)) {
    seed = nextRand(seed);
    let x: number = (seed % 400);
    seed = nextRand(seed);
    let y: number = (seed % 300);
    SetPxRgb(bm, x, y, 8405024);
    i = (i + 1);
  }
  let x: number = 0;
  while ((x < 400)) {
    let y: number = 240;
    while ((y < 245)) {
      SetPxRgb(bm, x, y, 8405024);
      y = (y + 1);
    }
    y = 260;
    while ((y < 265)) {
      SetPxRgb(bm, x, y, 8405024);
      y = (y + 1);
    }
    x = (x + 1);
  }
  let y: number = 0;
  while ((y < 300)) {
    let x: number = 80;
    while ((x < 85)) {
      SetPxRgb(bm, x, y, 8405024);
      x = (x + 1);
    }
    x = 95;
    while ((x < 100)) {
      SetPxRgb(bm, x, y, 8405024);
      x = (x + 1);
    }
    y = (y + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

