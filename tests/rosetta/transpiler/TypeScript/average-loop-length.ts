// Generated by Mochi v0.10.42 on 2025-07-27 18:45:42 GMT+7

function absf(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function floorf(x: number): number {
  let y: number = Math.trunc(x);
  return y;
}
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function fmtF(x: number): string {
  let y: number = (floorf(((x * 10000.0) + 0.5)) / 10000.0);
  let s: string = String(y);
  let dot: number = s.indexOf(".");
  if ((dot == (0 - 1))) {
    s = (s + ".0000");
  } else {
    let decs: number = (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - dot) - 1);
    if ((decs > 4)) {
      s = (s).substring(0, (dot + 5));
    } else {
      while ((decs < 4)) {
        s = (s + "0");
        decs = (decs + 1);
      }
    }
  }
  return s;
}
function padInt(n: number, width: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function padFloat(x: number, width: number): string {
  let s: string = fmtF(x);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function avgLen(n: number): number {
  let tests: number = 10000;
  let sum: number = 0;
  let seed: number = 1;
  let t: number = 0;
  while ((t < tests)) {
    let visited: boolean[] = [];
    let i: number = 0;
    while ((i < n)) {
      visited.push(false);
      i = (i + 1);
    }
    let x: number = 0;
    while (!visited[x]) {
      visited[x] = true;
      sum = (sum + 1);
      seed = (((seed * 1664525) + 1013904223) % 2147483647);
      x = (seed % n);
    }
    t = (t + 1);
  }
  return (sum / tests);
}
function ana(n: number): number {
  let nn: number = n;
  let term: number = 1.0;
  let sum: number = 1.0;
  let i: number = (nn - 1.0);
  while ((i >= 1.0)) {
    term = (term * (i / nn));
    sum = (sum + term);
    i = (i - 1.0);
  }
  return sum;
}
function main() {
  let nmax: number = 20;
  console.log(" N    average    analytical    (error)");
  console.log("===  =========  ============  =========");
  let n: number = 1;
  while ((n <= nmax)) {
    let a: number = avgLen(n);
    let b: number = ana(n);
    let err: number = ((absf((a - b)) / b) * 100.0);
    let line: string = (((((((padInt(n, 3) + "  ") + padFloat(a, 9)) + "  ") + padFloat(b, 12)) + "  (") + padFloat(err, 6)) + "%)");
    console.log(line);
    n = (n + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

