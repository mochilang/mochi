// Generated by Mochi v0.10.42 on 2025-07-28 00:54:08 GMT+7

function nextPrime(primes: number[], start: number): number {
  let n: number = start;
  while (true) {
    let isP: boolean = true;
    let i: number = 0;
    while ((i < (Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length))) {
      let p: number = primes[i];
      if (((p * p) > n)) {
        break
      }
      if (((n % p) == 0)) {
        isP = false;
        break
      }
      i = (i + 1);
    }
    if (isP) {
      return n;
    }
    n = (n + 2);
  }
}
function main() {
  let primes: number[] = [2];
  let cand: number = 3;
  while (((Array.isArray(primes) || typeof primes === 'string' ? primes.length : Object.keys(primes ?? {}).length) < 10000)) {
    cand = nextPrime(primes, cand);
    primes.push(cand);
    cand = (cand + 2);
  }
  let line: string = "First twenty:";
  let i: number = 0;
  while ((i < 20)) {
    line = ((line + " ") + String(primes[i]));
    i = (i + 1);
  }
  console.log(line);
  let idx: number = 0;
  while ((primes[idx] <= 100)) {
    idx = (idx + 1);
  }
  line = ("Between 100 and 150: " + String(primes[idx]));
  idx = (idx + 1);
  while ((primes[idx] < 150)) {
    line = ((line + " ") + String(primes[idx]));
    idx = (idx + 1);
  }
  console.log(line);
  while ((primes[idx] <= 7700)) {
    idx = (idx + 1);
  }
  let count: number = 0;
  while ((primes[idx] < 8000)) {
    count = (count + 1);
    idx = (idx + 1);
  }
  console.log(("Number beween 7,700 and 8,000: " + String(count)));
  console.log(("10,000th prime: " + String(primes[Math.trunc(9999)])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

