// Generated by Mochi v0.10.40 on 2025-07-25 14:31:20 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    let data: string;
    if (typeof Deno !== 'undefined') {
      const dec = new TextDecoder();
      const chunks: string[] = [];
      const buf = new Uint8Array(1024);
      for (;;) {
        const n = Deno.stdin.readSync(buf);
        if (n === null) break;
        chunks.push(dec.decode(buf.subarray(0, n)));
        if (n < buf.length) break;
      }
      data = chunks.join('');
    } else {
      const fs = require('fs');
      data = fs.readFileSync(0, 'utf8');
    }
    _inputData = data.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? '' : v;
}
{
  const _startMem = _mem()
  const _start = _now()
  function randDigit(): number {
    return ((_now() % 9) + 1);
  }
  function main() {
    let digits: any[] = [];
    for (let i = 0; i < 4; i++) {
      digits = [...digits, randDigit()];
    }
    let numstr: string = "";
    for (let i = 0; i < 4; i++) {
      numstr = (numstr + String(digits[i]));
    }
    console.log((("Your numbers: " + numstr) + "\n"));
    console.log("Enter RPN: ");
    let expr: string = _input();
    if (((Array.isArray(expr) || typeof expr === 'string' ? expr.length : Object.keys(expr ?? {}).length) != 7)) {
      console.log("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
      return;
    }
    let stack: any[] = [];
    let i: number = 0;
    let valid: boolean = true;
    while ((i < (Array.isArray(expr) || typeof expr === 'string' ? expr.length : Object.keys(expr ?? {}).length))) {
      const ch: string = (expr).substring(i, (i + 1));
      if (((ch >= "0") && (ch <= "9"))) {
        if (((Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length) == 0)) {
          console.log("too many numbers.");
          return;
        }
        let j: number = 0;
        while ((digits[j] != (Math.trunc(ch) - Math.trunc("0")))) {
          j = (j + 1);
          if ((j == (Array.isArray(digits) || typeof digits === 'string' ? digits.length : Object.keys(digits ?? {}).length))) {
            console.log("wrong numbers.");
            return;
          }
        }
        digits = [...digits.slice(0, j), ...digits.slice((j + 1))];
        stack = [...stack, float((Math.trunc(ch) - Math.trunc("0")))];
      } else {
        if (((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) < 2)) {
          console.log("invalid expression syntax.");
          valid = false;
          break
        }
        let b = stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))];
        let a = stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2))];
        if ((ch == "+")) {
          stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = (a + b);
        } else {
          if ((ch == "-")) {
            stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = (a - b);
          } else {
            if ((ch == "*")) {
              stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = (a * b);
            } else {
              if ((ch == "/")) {
                stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = (a / b);
              } else {
                console.log((ch + " invalid."));
                valid = false;
                break
              }
            }
          }
        }
        stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      }
      i = (i + 1);
    }
    if (valid) {
      if ((abs((stack[Math.trunc(0)] - 24.0)) > 1e-06)) {
        console.log((("incorrect. " + String(stack[Math.trunc(0)])) + " != 24"));
      } else {
        console.log("correct.");
      }
    }
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

