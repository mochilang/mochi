// Generated by Mochi v0.10.41 on 2025-07-27 11:46:15 GMT+7

function primeFactors(n: number): number[] {
  let factors: number[] = [];
  let last: number = 0;
  let x: number = n;
  while (((x % 2) == 0)) {
    if ((last == 2)) {
      return [];
    }
    factors.push(2);
    last = 2;
    x = Math.trunc(x / 2);
  }
  let p: number = 3;
  while (((p * p) <= x)) {
    while (((x % p) == 0)) {
      if ((last == p)) {
        return [];
      }
      factors.push(p);
      last = p;
      x = Math.trunc(x / p);
    }
    p = (p + 2);
  }
  if ((x > 1)) {
    if ((last == x)) {
      return [];
    }
    factors.push(x);
  }
  return factors;
}
function isGiuga(n: number): boolean {
  let facs: number[] = primeFactors(n);
  if (((Array.isArray(facs) || typeof facs === 'string' ? facs.length : Object.keys(facs ?? {}).length) <= 2)) {
    return false;
  }
  for (const f of facs) {
    if ((((Math.trunc(n / f) - 1) % f) != 0)) {
      return false;
    }
  }
  return true;
}
function main() {
  let known: number[] = [30, 858, 1722, 66198];
  let nums: number[] = [];
  for (const n of known) {
    if (isGiuga(n)) {
      nums.push(n);
    }
  }
  console.log("The first 4 Giuga numbers are:");
  console.log("[" + (nums).join(' ') + "]");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

