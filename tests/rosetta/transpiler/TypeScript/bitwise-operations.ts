// Generated by Mochi v0.10.38 on 2025-07-23 17:18:26 GMT+7

function toUnsigned16(n: number): number {
  let u: number = n;
  if ((u < 0)) {
    u = (u + 65536);
  }
  return (u % 65536);
}
function bin16(n: number): string {
  let u: number = toUnsigned16(n);
  let bits: string = "";
  let mask: number = 32768;
  for (let i = 0; i < 16; i++) {
    if ((u >= mask)) {
      bits = (bits + "1");
      u = (u - mask);
    } else {
      bits = (bits + "0");
    }
    mask = Math.trunc(Math.trunc(mask / 2));
  }
  return bits;
}
function bit_and(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) && ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_or(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) || ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_xor(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    const abit: number = (ua % 2);
    const bbit: number = (ub % 2);
    if ((((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1)))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_not(a: number): number {
  let ua: number = toUnsigned16(a);
  return (65535 - ua);
}
function shl(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let i: number = 0;
  while ((i < b)) {
    ua = ((ua * 2) % 65536);
    i = (i + 1);
  }
  return ua;
}
function shr(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let i: number = 0;
  while ((i < b)) {
    ua = Math.trunc(Math.trunc(ua / 2));
    i = (i + 1);
  }
  return ua;
}
function las(a: number, b: number): number {
  return shl(a, b);
}
function ras(a: number, b: number): number {
  let val: number = a;
  let i: number = 0;
  while ((i < b)) {
    if ((val >= 0)) {
      val = Math.trunc(Math.trunc(val / 2));
    } else {
      val = Math.trunc(((val - 1) / 2));
    }
    i = (i + 1);
  }
  return toUnsigned16(val);
}
function rol(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  const left: number = shl(ua, b);
  const right: number = shr(ua, (16 - b));
  return toUnsigned16((left + right));
}
function ror(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  const right: number = shr(ua, b);
  const left: number = shl(ua, (16 - b));
  return toUnsigned16((left + right));
}
function bitwise(a: number, b: number) {
  console.log(("a:   " + bin16(a)));
  console.log(("b:   " + bin16(b)));
  console.log(("and: " + bin16(bit_and(a, b))));
  console.log(("or:  " + bin16(bit_or(a, b))));
  console.log(("xor: " + bin16(bit_xor(a, b))));
  console.log(("not: " + bin16(bit_not(a))));
  if ((b < 0)) {
    console.log("Right operand is negative, but all shifts require an unsigned right operand (shift distance).");
    return null;
  }
  console.log(("shl: " + bin16(shl(a, b))));
  console.log(("shr: " + bin16(shr(a, b))));
  console.log(("las: " + bin16(las(a, b))));
  console.log(("ras: " + bin16(ras(a, b))));
  console.log(("rol: " + bin16(rol(a, b))));
  console.log(("ror: " + bin16(ror(a, b))));
}
bitwise(-460, 6);
