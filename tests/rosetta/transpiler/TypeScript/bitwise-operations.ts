// Generated by Mochi v0.10.56 on 2025-08-03 17:23:47 GMT+7

function toUnsigned16(n: number): number {
  let u: number = n;
  if ((u < 0)) {
    u = (u + 65536);
  }
  return (u % 65536);
}
function bin16(n: number): string {
  let u: number = toUnsigned16(n);
  let bits: string = "";
  let mask: number = 32768;
  for (let i = 0; i < 16; i++) {
    if ((u >= mask)) {
      bits = (bits + "1");
      u = (u - mask);
    } else {
      bits = (bits + "0");
    }
    mask = Math.trunc(Math.trunc(mask / 2));
  }
  return bits;
}
function bit_and(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) && ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_or(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    if ((((ua % 2) == 1) || ((ub % 2) == 1))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_xor(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let ub: number = toUnsigned16(b);
  let res: number = 0;
  let bit: number = 1;
  for (let i = 0; i < 16; i++) {
    let abit: number = (ua % 2);
    let bbit: number = (ub % 2);
    if ((((abit == 1) && (bbit == 0)) || ((abit == 0) && (bbit == 1)))) {
      res = (res + bit);
    }
    ua = Math.trunc(Math.trunc(ua / 2));
    ub = Math.trunc(Math.trunc(ub / 2));
    bit = (bit * 2);
  }
  return res;
}
function bit_not(a: number): number {
  let ua: number = toUnsigned16(a);
  return (65535 - ua);
}
function shl(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let i: number = 0;
  while ((i < b)) {
    ua = ((ua * 2) % 65536);
    i = (i + 1);
  }
  return ua;
}
function shr(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let i: number = 0;
  while ((i < b)) {
    ua = Math.trunc(Math.trunc(ua / 2));
    i = (i + 1);
  }
  return ua;
}
function las(a: number, b: number): number {
  return shl(a, b);
}
function ras(a: number, b: number): number {
  let val: number = a;
  let i: number = 0;
  while ((i < b)) {
    if ((val >= 0)) {
      val = Math.trunc(Math.trunc(val / 2));
    } else {
      val = Math.trunc(Math.trunc((val - 1) / 2));
    }
    i = (i + 1);
  }
  return toUnsigned16(val);
}
function rol(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let left: number = shl(ua, b);
  let right: number = shr(ua, (16 - b));
  return toUnsigned16((left + right));
}
function ror(a: number, b: number): number {
  let ua: number = toUnsigned16(a);
  let right: number = shr(ua, b);
  let left: number = shl(ua, (16 - b));
  return toUnsigned16((left + right));
}
function bitwise(a: number, b: number) {
  console.log(_str(("a:   " + bin16(a))));
  console.log(_str(("b:   " + bin16(b))));
  console.log(_str(("and: " + bin16(bit_and(a, b)))));
  console.log(_str(("or:  " + bin16(bit_or(a, b)))));
  console.log(_str(("xor: " + bin16(bit_xor(a, b)))));
  console.log(_str(("not: " + bin16(bit_not(a)))));
  if ((b < 0)) {
    console.log(_str("Right operand is negative, but all shifts require an unsigned right operand (shift distance)."));
    return null;
  }
  console.log(_str(("shl: " + bin16(shl(a, b)))));
  console.log(_str(("shr: " + bin16(shr(a, b)))));
  console.log(_str(("las: " + bin16(las(a, b)))));
  console.log(_str(("ras: " + bin16(ras(a, b)))));
  console.log(_str(("rol: " + bin16(rol(a, b)))));
  console.log(_str(("ror: " + bin16(ror(a, b)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  bitwise(-460, 6);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

