// Generated by Mochi v0.10.38 on 2025-07-23 17:14:06 GMT+7

function pow2(n: number): number {
  let v: number = 1;
  let i: number = 0;
  while ((i < n)) {
    v = (v * 2);
    i = (i + 1);
  }
  return v;
}
function lshift(x: number, n: number): number {
  return (x * pow2(n));
}
function rshift(x: number, n: number): number {
  return Math.trunc(x / pow2(n));
}
export interface Writer { order: string; bits: number; nbits: number; data: number[] }
function NewWriter(order: string): Writer {
  return {order, "bits": 0, "nbits": 0, "data": []};
}
function writeBitsLSB(w: Writer, c: number, width: number): Writer {
  w = ({ ...w, "bits": (w.bits + lshift(c, w.nbits)) });
  w = ({ ...w, "nbits": (w.nbits + width) });
  while ((w.nbits >= 8)) {
    const b: number = (w.bits % 256);
    w = ({ ...w, "data": [...w.data, b] });
    w = ({ ...w, "bits": rshift(w.bits, 8) });
    w = ({ ...w, "nbits": (w.nbits - 8) });
  }
  return w;
}
function writeBitsMSB(w: Writer, c: number, width: number): Writer {
  w = ({ ...w, "bits": (w.bits + lshift(c, ((32 - width) - w.nbits))) });
  w = ({ ...w, "nbits": (w.nbits + width) });
  while ((w.nbits >= 8)) {
    const b: number = (rshift(w.bits, 24) % 256);
    w = ({ ...w, "data": [...w.data, b] });
    w = ({ ...w, "bits": ((w.bits % pow2(24)) * 256) });
    w = ({ ...w, "nbits": (w.nbits - 8) });
  }
  return w;
}
function WriteBits(w: Writer, c: number, width: number): Writer {
  if ((w.order == "LSB")) {
    return writeBitsLSB(w, c, width);
  }
  return writeBitsMSB(w, c, width);
}
function CloseWriter(w: Writer): Writer {
  if ((w.nbits > 0)) {
    if ((w.order == "MSB")) {
      w = ({ ...w, "bits": rshift(w.bits, 24) });
    }
    w = ({ ...w, "data": [...w.data, (w.bits % 256)] });
  }
  w = ({ ...w, "bits": 0 });
  w = ({ ...w, "nbits": 0 });
  return w;
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (String((val % 2)) + b);
    val = Math.trunc(val / 2);
    i = (i + 1);
  }
  return b;
}
function bytesToBits(bs: number[]): string {
  let out: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    out = (out + toBinary(bs[Math.trunc(i)], 8));
    if (((i + 1) < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
      out = (out + " ");
    }
    i = (i + 1);
  }
  out = (out + "]");
  return out;
}
function ExampleWriter_WriteBits() {
  let bw: Writer = NewWriter("MSB");
  bw = WriteBits(bw, 15, 4);
  bw = WriteBits(bw, 0, 1);
  bw = WriteBits(bw, 19, 5);
  bw = CloseWriter(bw);
  console.log(bytesToBits(bw.data));
}
ExampleWriter_WriteBits();
