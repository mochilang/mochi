// Generated by Mochi v0.10.42 on 2025-07-27 20:11:56 GMT+7

function pow2(n: number): number {
  let v: number = 1;
  let i: number = 0;
  while ((i < n)) {
    v = (v * 2);
    i = (i + 1);
  }
  return v;
}
function lshift(x: number, n: number): number {
  return (x * pow2(n));
}
function rshift(x: number, n: number): number {
  return Math.trunc(x / pow2(n));
}
export interface Writer { order: string; bits: number; nbits: number; data: number[] }
function NewWriter(order: string): Writer {
  return {order, "bits": 0, "nbits": 0, "data": []};
}
function writeBitsLSB(w: Writer, c: number, width: number): Writer {
  w.bits = (w.bits + lshift(c, w.nbits));
  w.nbits = (w.nbits + width);
  while ((w.nbits >= 8)) {
    let b: number = (w.bits % 256);
    w.data = [...w.data, b];
    w.bits = rshift(w.bits, 8);
    w.nbits = (w.nbits - 8);
  }
  return w;
}
function writeBitsMSB(w: Writer, c: number, width: number): Writer {
  w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)));
  w.nbits = (w.nbits + width);
  while ((w.nbits >= 8)) {
    let b: number = (rshift(w.bits, 24) % 256);
    w.data = [...w.data, b];
    w.bits = ((w.bits % pow2(24)) * 256);
    w.nbits = (w.nbits - 8);
  }
  return w;
}
function WriteBits(w: Writer, c: number, width: number): Writer {
  if ((w.order == "LSB")) {
    return writeBitsLSB(w, c, width);
  }
  return writeBitsMSB(w, c, width);
}
function CloseWriter(w: Writer): Writer {
  if ((w.nbits > 0)) {
    if ((w.order == "MSB")) {
      w.bits = rshift(w.bits, 24);
    }
    w.data = [...w.data, (w.bits % 256)];
  }
  w.bits = 0;
  w.nbits = 0;
  return w;
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (String((val % 2)) + b);
    val = Math.trunc(val / 2);
    i = (i + 1);
  }
  return b;
}
function bytesToBits(bs: number[]): string {
  let out: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
    out = (out + toBinary(bs[i], 8));
    if (((i + 1) < (Array.isArray(bs) || typeof bs === 'string' ? bs.length : Object.keys(bs ?? {}).length))) {
      out = (out + " ");
    }
    i = (i + 1);
  }
  out = (out + "]");
  return out;
}
function ExampleWriter_WriteBits() {
  let bw: Writer = NewWriter("MSB");
  bw = WriteBits(bw, 15, 4);
  bw = WriteBits(bw, 0, 1);
  bw = WriteBits(bw, 19, 5);
  bw = CloseWriter(bw);
  console.log(bytesToBits(bw.data));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  ExampleWriter_WriteBits();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

