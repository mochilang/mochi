// Generated by Mochi v0.10.42 on 2025-07-27 21:44:49 GMT+7

function absInt(n: number): number {
  if ((n < 0)) {
    return -n;
  }
  return n;
}
function main() {
  let b: number = 1;
  while ((b <= 5)) {
    if ((b != 5)) {
      let c: number = 1;
      while ((c <= 5)) {
        if (((c != 1) && (c != b))) {
          let f: number = 1;
          while ((f <= 5)) {
            if ((((((f != 1) && (f != 5)) && (f != b)) && (f != c)) && (absInt((f - c)) > 1))) {
              let m: number = 1;
              while ((m <= 5)) {
                if (((((m != b) && (m != c)) && (m != f)) && (m > c))) {
                  let s: number = 1;
                  while ((s <= 5)) {
                    if ((((((s != b) && (s != c)) && (s != f)) && (s != m)) && (absInt((s - f)) > 1))) {
                      console.log((((((((((("Baker in " + String(b)) + ", Cooper in ") + String(c)) + ", Fletcher in ") + String(f)) + ", Miller in ") + String(m)) + ", Smith in ") + String(s)) + "."));
                      return;
                    }
                    s = (s + 1);
                  }
                }
                m = (m + 1);
              }
            }
            f = (f + 1);
          }
        }
        c = (c + 1);
      }
    }
    b = (b + 1);
  }
  console.log("No solution found.");
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

