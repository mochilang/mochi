// Generated by Mochi v0.10.37 on 2025-07-22 21:35:16 GMT+7

var _nowSeed = 0;
var _nowSeeded = false;
{
  const s = typeof Deno !== "undefined" ? Deno.env.get("MOCHI_NOW_SEED") : (process.env.MOCHI_NOW_SEED || "");
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}
const SIZE: number = 4;
function newBoard(): number[][] {
  let b = [];
  let y = 0;
  while ((y < SIZE)) {
    let row = [];
    let x = 0;
    while ((x < SIZE)) {
      row = [...row, 0];
      x = (x + 1);
    }
    b = [...b, row];
    y = (y + 1);
  }
  return b;
}
function spawnTile(b: number[][]): Record<string, any> {
  let empty = [];
  let y = 0;
  while ((y < SIZE)) {
    let x = 0;
    while ((x < SIZE)) {
      if ((b[y][x] == 0)) {
        empty = [...empty, [x, y]];
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  if (((Array.isArray(empty) || typeof empty === 'string' ? empty.length : Object.keys(empty ?? {}).length) == 0)) {
    return {"board": b, "full": true};
  }
  let idx = (_now() % (Array.isArray(empty) || typeof empty === 'string' ? empty.length : Object.keys(empty ?? {}).length));
  const cell = empty[idx];
  let val = 4;
  if (((_now() % 10) < 9)) {
    val = 2;
  }
  b[cell[1]][cell[0]] = val;
  return {"board": b, "full": ((Array.isArray(empty) || typeof empty === 'string' ? empty.length : Object.keys(empty ?? {}).length) == 1)};
}
function pad(n: number): string {
  let s = String(n);
  let pad = (4 - (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  let i = 0;
  let out = "";
  while ((i < pad)) {
    out = (out + " ");
    i = (i + 1);
  }
  return (out + s);
}
function draw(b: number[][], score: number) {
  console.log(("Score: " + String(score)));
  let y = 0;
  while ((y < SIZE)) {
    console.log("+----+----+----+----+");
    let line = "|";
    let x = 0;
    while ((x < SIZE)) {
      let v = b[y][x];
      if ((v == 0)) {
        line = (line + "    |");
      } else {
        line = ((line + pad(v)) + "|");
      }
      x = (x + 1);
    }
    console.log(line);
    y = (y + 1);
  }
  console.log("+----+----+----+----+");
  console.log("W=Up S=Down A=Left D=Right Q=Quit");
}
function reverseRow(r: number[]): number[] {
  let out = [];
  let i = ((Array.isArray(r) || typeof r === 'string' ? r.length : Object.keys(r ?? {}).length) - 1);
  while ((i >= 0)) {
    out = [...out, r[i]];
    i = (i - 1);
  }
  return out;
}
function slideLeft(row: number[]): Record<string, any> {
  let xs = [];
  let i = 0;
  while ((i < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
    if ((row[i] != 0)) {
      xs = [...xs, row[i]];
    }
    i = (i + 1);
  }
  let res = [];
  let gain = 0;
  i = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((((i + 1) < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length)) && (xs[i] == xs[(i + 1)]))) {
      const v = (xs[i] * 2);
      gain = (gain + v);
      res = [...res, v];
      i = (i + 2);
    } else {
      res = [...res, xs[i]];
      i = (i + 1);
    }
  }
  while (((Array.isArray(res) || typeof res === 'string' ? res.length : Object.keys(res ?? {}).length) < SIZE)) {
    res = [...res, 0];
  }
  return {"row": res, gain};
}
function moveLeft(b: number[][], score: number): Record<string, any> {
  let moved = false;
  let y = 0;
  while ((y < SIZE)) {
    const r: Record<string, any> = slideLeft(b[y]);
    const _new = r.row;
    score = (score + r.gain);
    let x = 0;
    while ((x < SIZE)) {
      if ((b[y][x] != _new[x])) {
        moved = true;
      }
      b[y][x] = _new[x];
      x = (x + 1);
    }
    y = (y + 1);
  }
  return {"board": b, score, moved};
}
function moveRight(b: number[][], score: number): Record<string, any> {
  let moved = false;
  let y = 0;
  while ((y < SIZE)) {
    let rev = reverseRow(b[y]);
    const r: Record<string, any> = slideLeft(rev);
    rev = r.row;
    score = (score + r.gain);
    rev = reverseRow(rev);
    let x = 0;
    while ((x < SIZE)) {
      if ((b[y][x] != rev[x])) {
        moved = true;
      }
      b[y][x] = rev[x];
      x = (x + 1);
    }
    y = (y + 1);
  }
  return {"board": b, score, moved};
}
function getCol(b: number[][], x: number): number[] {
  let col = [];
  let y = 0;
  while ((y < SIZE)) {
    col = [...col, b[y][x]];
    y = (y + 1);
  }
  return col;
}
function setCol(b: number[][], x: number, col: number[]) {
  let y = 0;
  while ((y < SIZE)) {
    b[y][x] = col[y];
    y = (y + 1);
  }
}
function moveUp(b: number[][], score: number): Record<string, any> {
  let moved = false;
  let x = 0;
  while ((x < SIZE)) {
    let col = getCol(b, x);
    const r: Record<string, any> = slideLeft(col);
    const _new = r.row;
    score = (score + r.gain);
    let y = 0;
    while ((y < SIZE)) {
      if ((b[y][x] != _new[y])) {
        moved = true;
      }
      b[y][x] = _new[y];
      y = (y + 1);
    }
    x = (x + 1);
  }
  return {"board": b, score, moved};
}
function moveDown(b: number[][], score: number): Record<string, any> {
  let moved = false;
  let x = 0;
  while ((x < SIZE)) {
    let col = reverseRow(getCol(b, x));
    const r: Record<string, any> = slideLeft(col);
    col = r.row;
    score = (score + r.gain);
    col = reverseRow(col);
    let y = 0;
    while ((y < SIZE)) {
      if ((b[y][x] != col[y])) {
        moved = true;
      }
      b[y][x] = col[y];
      y = (y + 1);
    }
    x = (x + 1);
  }
  return {"board": b, score, moved};
}
function hasMoves(b: number[][]): boolean {
  let y = 0;
  while ((y < SIZE)) {
    let x = 0;
    while ((x < SIZE)) {
      if ((b[y][x] == 0)) {
        return true;
      }
      if ((((x + 1) < SIZE) && (b[y][x] == b[y][(x + 1)]))) {
        return true;
      }
      if ((((y + 1) < SIZE) && (b[y][x] == b[(y + 1)][x]))) {
        return true;
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return false;
}
function has2048(b: number[][]): boolean {
  let y = 0;
  while ((y < SIZE)) {
    let x = 0;
    while ((x < SIZE)) {
      if ((b[y][x] >= 2048)) {
        return true;
      }
      x = (x + 1);
    }
    y = (y + 1);
  }
  return false;
}
let board = newBoard();
let r: Record<string, any> = spawnTile(board);
board = r.board;
let full = r.full;
r = spawnTile(board);
board = r.board;
full = r.full;
let score: number = 0;
draw(board, score);
while (true) {
  console.log("Move: ");
  const cmd = input();
  let moved = false;
  if (((cmd == "a") || (cmd == "A"))) {
    const m = moveLeft(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
  if (((cmd == "d") || (cmd == "D"))) {
    const m = moveRight(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
  if (((cmd == "w") || (cmd == "W"))) {
    const m = moveUp(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
  if (((cmd == "s") || (cmd == "S"))) {
    const m = moveDown(board, score);
    board = m.board;
    score = m.score;
    moved = m.moved;
  }
  if (((cmd == "q") || (cmd == "Q"))) {
    break
  }
  if (moved) {
    const r2 = spawnTile(board);
    board = r2.board;
    full = r2.full;
    if ((full && !hasMoves(board))) {
      draw(board, score);
      console.log("Game Over");
      break
    }
  }
  draw(board, score);
  if (has2048(board)) {
    console.log("You win!");
    break
  }
  if (!hasMoves(board)) {
    console.log("Game Over");
    break
  }
}
