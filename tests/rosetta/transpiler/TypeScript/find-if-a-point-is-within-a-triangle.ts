// Generated by Mochi v0.10.41 on 2025-07-27 11:35:11 GMT+7

function abs(x: number): number {
  if ((x < 0.0)) {
    return -x;
  }
  return x;
}
function area(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): number {
  return abs(((((x1 * (y2 - y3)) + (x2 * (y3 - y1))) + (x3 * (y1 - y2))) / 2.0));
}
function pointInTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x: number, y: number): boolean {
  let A: number = area(x1, y1, x2, y2, x3, y3);
  let A1: number = area(x, y, x2, y2, x3, y3);
  let A2: number = area(x1, y1, x, y, x3, y3);
  let A3: number = area(x1, y1, x2, y2, x, y);
  let diff: number = abs((((A1 + A2) + A3) - A));
  if ((diff < 0.0001)) {
    return true;
  }
  return false;
}
function main() {
  let tri1: number[][] = [[(3.0 / 2), (12.0 / 5)], [(51.0 / 10), (-31.0 / 10)], [(-19.0 / 5), 1.2]];
  console.log(("Triangle is " + String(tri1)));
  for (const pt of [[0.0, 0.0], [0.0, 1.0], [3.0, 1.0]]) {
    let ok: boolean = pointInTriangle(tri1[Math.trunc(0)][Math.trunc(0)], tri1[Math.trunc(0)][Math.trunc(1)], tri1[Math.trunc(1)][Math.trunc(0)], tri1[Math.trunc(1)][Math.trunc(1)], tri1[Math.trunc(2)][Math.trunc(0)], tri1[Math.trunc(2)][Math.trunc(1)], pt[Math.trunc(0)], pt[Math.trunc(1)]);
    console.log(((("Point " + String(pt)) + " is within triangle? ") + String(ok)));
  }
  console.log("");
  let tri2: number[][] = [[(1.0 / 10), (1.0 / 9)], [(100.0 / 8), (100.0 / 3)], [(100.0 / 4), (100.0 / 9)]];
  console.log(("Triangle is " + String(tri2)));
  let x: number = (tri2[Math.trunc(0)][Math.trunc(0)] + ((3.0 / 7) * (tri2[Math.trunc(1)][Math.trunc(0)] - tri2[Math.trunc(0)][Math.trunc(0)])));
  let y: number = (tri2[Math.trunc(0)][Math.trunc(1)] + ((3.0 / 7) * (tri2[Math.trunc(1)][Math.trunc(1)] - tri2[Math.trunc(0)][Math.trunc(1)])));
  let pt: number[] = [x, y];
  let ok: boolean = pointInTriangle(tri2[Math.trunc(0)][Math.trunc(0)], tri2[Math.trunc(0)][Math.trunc(1)], tri2[Math.trunc(1)][Math.trunc(0)], tri2[Math.trunc(1)][Math.trunc(1)], tri2[Math.trunc(2)][Math.trunc(0)], tri2[Math.trunc(2)][Math.trunc(1)], x, y);
  console.log(((("Point " + String(pt)) + " is within triangle ? ") + String(ok)));
  console.log("");
  tri2 = [[(1.0 / 10), (1.0 / 9)], [(100.0 / 8), (100.0 / 3)], [(-100.0 / 8), (100.0 / 6)]];
  console.log(("Triangle is " + String(tri2)));
  ok = pointInTriangle(tri2[Math.trunc(0)][Math.trunc(0)], tri2[Math.trunc(0)][Math.trunc(1)], tri2[Math.trunc(1)][Math.trunc(0)], tri2[Math.trunc(1)][Math.trunc(1)], tri2[Math.trunc(2)][Math.trunc(0)], tri2[Math.trunc(2)][Math.trunc(1)], x, y);
  console.log(((("Point " + String(pt)) + " is within triangle ? ") + String(ok)));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

