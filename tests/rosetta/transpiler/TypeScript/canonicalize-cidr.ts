// Generated by Mochi v0.10.57 on 2025-08-04 16:11:15 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if ((((Number(Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + Number(Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + Number(Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + Number(Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function join(xs: string[], sep: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < Number(Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[i]);
    i = (i + 1);
  }
  return res;
}
function repeat(ch: string, n: number): string {
  let out: string = "";
  let i: number = 0;
  while ((i < n)) {
    out = (out + ch);
    i = (i + 1);
  }
  return out;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if (((Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < Number(Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[str.slice(i, (i + 1))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (_str((val % 2)) + b);
    val = Math.trunc(Math.trunc(val / 2));
    i = (i + 1);
  }
  return b;
}
function binToInt(bits: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < Number(Array.isArray(bits) || typeof bits === 'string' ? bits.length : Object.keys(bits ?? {}).length))) {
    n = ((n * 2) + parseIntStr(bits.slice(i, (i + 1))));
    i = (i + 1);
  }
  return n;
}
function padRight(s: string, width: number): string {
  let out: string = s;
  while ((Number(Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < width)) {
    out = (out + " ");
  }
  return out;
}
function canonicalize(cidr: string): string {
  let parts: string[] = cidr.split("/");
  let dotted: string = parts[Math.trunc(0)];
  let size = parseIntStr(parts[Math.trunc(1)]);
  let binParts: string[] = [];
  for (const p of dotted.split(".")) {
    binParts.push(toBinary(parseIntStr(p), 8));
  }
  let binary: string = join(binParts, "");
  binary = (binary.slice(0, size) + repeat("0", (32 - size)));
  let canonParts: string[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(binary) || typeof binary === 'string' ? binary.length : Object.keys(binary ?? {}).length))) {
    canonParts.push(_str(binToInt(binary.slice(i, (i + 8)))));
    i = (i + 8);
  }
  return ((join(canonParts, ".") + "/") + parts[Math.trunc(1)]);
}
let tests: string[] = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"];
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  for (const t of tests) {
    console.log(_str(((padRight(t, 18) + " -> ") + canonicalize(t))));
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

