// Generated by Mochi v0.10.38 on 2025-07-23 19:25:27 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((((Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts = [...parts, cur];
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + s.slice(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts = [...parts, cur];
  return parts;
}
function join(xs: string[], sep: string): string {
  let res: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(xs) || typeof xs === 'string' ? xs.length : Object.keys(xs ?? {}).length))) {
    if ((i > 0)) {
      res = (res + sep);
    }
    res = (res + xs[Math.trunc(i)]);
    i = (i + 1);
  }
  return res;
}
function repeat(ch: string, n: number): string {
  let out: string = "";
  let i: number = 0;
  while ((i < n)) {
    out = (out + ch);
    i = (i + 1);
  }
  return out;
}
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  const digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function toBinary(n: number, bits: number): string {
  let b: string = "";
  let val: number = n;
  let i: number = 0;
  while ((i < bits)) {
    b = (String((val % 2)) + b);
    val = Math.trunc(Math.trunc(val / 2));
    i = (i + 1);
  }
  return b;
}
function binToInt(bits: string): number {
  let n: number = 0;
  let i: number = 0;
  while ((i < (Array.isArray(bits) || typeof bits === 'string' ? bits.length : Object.keys(bits ?? {}).length))) {
    n = ((n * 2) + parseIntStr(bits.slice(i, (i + 1))));
    i = (i + 1);
  }
  return n;
}
function padRight(s: string, width: number): string {
  let out: string = s;
  while (((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) < width)) {
    out = (out + " ");
  }
  return out;
}
function canonicalize(cidr: string): string {
  const parts: string[] = split(cidr, "/");
  const dotted: string = parts[Math.trunc(0)];
  const size = parseIntStr(parts[Math.trunc(1)]);
  let binParts: string[] = [];
  for (const p of split(dotted, ".")) {
    binParts = [...binParts, toBinary(parseIntStr(p), 8)];
  }
  let binary: string = join(binParts, "");
  binary = (binary.slice(0, size) + repeat("0", (32 - size)));
  let canonParts: string[] = [];
  let i: number = 0;
  while ((i < (Array.isArray(binary) || typeof binary === 'string' ? binary.length : Object.keys(binary ?? {}).length))) {
    canonParts = [...canonParts, String(binToInt(binary.slice(i, (i + 8))))];
    i = (i + 8);
  }
  return ((join(canonParts, ".") + "/") + parts[Math.trunc(1)]);
}
const tests: string[] = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"];
for (const t of tests) {
  console.log(((padRight(t, 18) + " -> ") + canonicalize(t)));
}
