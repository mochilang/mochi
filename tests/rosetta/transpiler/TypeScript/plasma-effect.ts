// Generated by Mochi v0.10.41 on 2025-07-27 12:29:34 GMT+7

let PI: number = 3.141592653589793;
function floorf(x: number): number {
  let i: number = Math.trunc(x);
  if ((i > x)) {
    i = (i - 1);
  }
  return i;
}
function frac(x: number): number {
  return (x - floorf(x));
}
function sinApprox(x: number): number {
  let term: number = x;
  let sum: number = x;
  let n: number = 1;
  while ((n <= 10)) {
    let denom = ((2 * n) * ((2 * n) + 1));
    term = (((-term * x) * x) / denom);
    sum = (sum + term);
    n = (n + 1);
  }
  return sum;
}
function sqrtApprox(x: number): number {
  if ((x <= 0)) {
    return 0.0;
  }
  let guess: number = x;
  let i: number = 0;
  while ((i < 10)) {
    guess = ((guess + (x / guess)) / 2.0);
    i = (i + 1);
  }
  return guess;
}
let nframes: number = 10;
let w: number = 32;
let h: number = 32;
let total: number = 0;
let f: number = 1;
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  while ((f <= nframes)) {
    let y: number = 0;
    while ((y < h)) {
      let x: number = 0;
      while ((x < w)) {
        let fx: number = x;
        let fy: number = y;
        let value: number = sinApprox((fx / 16.0));
        value = (value + sinApprox((fy / 8.0)));
        value = (value + sinApprox(((fx + fy) / 16.0)));
        value = (value + sinApprox((sqrtApprox(((fx * fx) + (fy * fy))) / 8.0)));
        value = (value + 4.0);
        value = (value / 8.0);
        let rem: number = frac((value + (f / nframes)));
        let ci: number = (Math.trunc((nframes * rem)) + 1);
        total = (total + ci);
        x = (x + 1);
      }
      y = (y + 1);
    }
    f = (f + 1);
  }
  console.log(total);
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

