// Generated by Mochi v0.10.42 on 2025-07-27 20:33:25 GMT+7

function trimSpace(s: string): string {
  let start: number = 0;
  while (((start < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && (s.slice(start, (start + 1)) == " "))) {
    start = (start + 1);
  }
  let end: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while (((end > start) && (s.slice((end - 1), end) == " "))) {
    end = (end - 1);
  }
  return s.slice(start, end);
}
function isUpper(ch: string): boolean {
  return ((ch >= "A") && (ch <= "Z"));
}
function padLeft(s: string, w: number): string {
  let res: string = "";
  let n: number = (w - (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
  while ((n > 0)) {
    res = (res + " ");
    n = (n - 1);
  }
  return (res + s);
}
function snakeToCamel(s: string): string {
  s = trimSpace(s);
  let out: string = "";
  let up: boolean = false;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = s.slice(i, (i + 1));
    if (((((ch == "_") || (ch == "-")) || (ch == " ")) || (ch == "."))) {
      up = true;
      i = (i + 1);
      continue
    }
    if ((i == 0)) {
      out = (out + ch.toLowerCase());
      up = false;
      i = (i + 1);
      continue
    }
    if (up) {
      out = (out + ch.toUpperCase());
      up = false;
    } else {
      out = (out + ch);
    }
    i = (i + 1);
  }
  return out;
}
function camelToSnake(s: string): string {
  s = trimSpace(s);
  let out: string = "";
  let prevUnd: boolean = false;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = s.slice(i, (i + 1));
    if ((((ch == " ") || (ch == "-")) || (ch == "."))) {
      if ((!prevUnd && ((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) > 0))) {
        out = (out + "_");
        prevUnd = true;
      }
      i = (i + 1);
      continue
    }
    if ((ch == "_")) {
      if ((!prevUnd && ((Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length) > 0))) {
        out = (out + "_");
        prevUnd = true;
      }
      i = (i + 1);
      continue
    }
    if (isUpper(ch)) {
      if (((i > 0) && !prevUnd)) {
        out = (out + "_");
      }
      out = (out + ch.toLowerCase());
      prevUnd = false;
    } else {
      out = (out + ch.toLowerCase());
      prevUnd = false;
    }
    i = (i + 1);
  }
  let start: number = 0;
  while (((start < (Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length)) && (out.slice(start, (start + 1)) == "_"))) {
    start = (start + 1);
  }
  let end: number = (Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length);
  while (((end > start) && (out.slice((end - 1), end) == "_"))) {
    end = (end - 1);
  }
  out = out.slice(start, end);
  let res: string = "";
  let j: number = 0;
  let lastUnd: boolean = false;
  while ((j < (Array.isArray(out) || typeof out === 'string' ? out.length : Object.keys(out ?? {}).length))) {
    let c: string = out.slice(j, (j + 1));
    if ((c == "_")) {
      if (!lastUnd) {
        res = (res + c);
      }
      lastUnd = true;
    } else {
      res = (res + c);
      lastUnd = false;
    }
    j = (j + 1);
  }
  return res;
}
function main() {
  let samples: string[] = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "];
  console.log("=== To snake_case ===");
  for (const s of samples) {
    console.log(((padLeft(s, 34) + " => ") + camelToSnake(s)));
  }
  console.log("");
  console.log("=== To camelCase ===");
  for (const s of samples) {
    console.log(((padLeft(s, 34) + " => ") + snakeToCamel(s)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

