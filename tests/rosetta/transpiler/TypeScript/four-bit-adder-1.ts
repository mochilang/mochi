// Generated by Mochi v0.10.42 on 2025-07-28 10:18:31 GMT+7

export interface SumCarry { s: boolean; c: boolean }
export interface Add4Result { v: boolean; s3: boolean; s2: boolean; s1: boolean; s0: boolean }
function xor(a: boolean, b: boolean): boolean {
  return ((a && !b) || (!a && b));
}
function ha(a: boolean, b: boolean): SumCarry {
  return {"s": xor(a, b), "c": (a && b)};
}
function fa(a: boolean, b: boolean, c0: boolean): SumCarry {
  let r1: SumCarry = ha(a, c0);
  let r2: SumCarry = ha(r1.s, b);
  return {"s": r2.s, "c": (r1.c || r2.c)};
}
function add4(a3: boolean, a2: boolean, a1: boolean, a0: boolean, b3: boolean, b2: boolean, b1: boolean, b0: boolean): Add4Result {
  let r0: SumCarry = fa(a0, b0, false);
  let r1: SumCarry = fa(a1, b1, r0.c);
  let r2: SumCarry = fa(a2, b2, r1.c);
  let r3: SumCarry = fa(a3, b3, r2.c);
  return {"v": r3.c, "s3": r3.s, "s2": r2.s, "s1": r1.s, "s0": r0.s};
}
function b2i(b: boolean): number {
  if (b) {
    return 1;
  }
  return 0;
}
function main() {
  let r: Add4Result = add4(true, false, true, false, true, false, false, true);
  console.log(_str(((((((((_str(b2i(r.v)) + " ") + _str(b2i(r.s3))) + " ") + _str(b2i(r.s2))) + " ") + _str(b2i(r.s1))) + " ") + _str(b2i(r.s0)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

