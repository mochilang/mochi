// Generated by Mochi v0.10.41 on 2025-07-27 11:04:59 GMT+7

function log2(x: number): number {
  let k: number = 0.0;
  let v: number = x;
  while ((v >= 2.0)) {
    v = (v / 2.0);
    k = (k + 1.0);
  }
  while ((v < 1.0)) {
    v = (v * 2.0);
    k = (k - 1.0);
  }
  let z: number = ((v - 1.0) / (v + 1.0));
  let zpow: number = z;
  let sum: number = z;
  let i: number = 3;
  while ((i <= 9)) {
    zpow = ((zpow * z) * z);
    sum = (sum + (zpow / i));
    i = (i + 2);
  }
  let ln2: number = 0.6931471805599453;
  return (k + ((2.0 * sum) / ln2));
}
function main() {
  let s: string = "1223334444";
  let counts: Record<string, number> = {};
  let l: number = 0.0;
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((ch in counts)) {
      counts[ch] = (counts[ch] + 1);
    } else {
      counts[ch] = 1;
    }
    l = (l + 1.0);
    i = (i + 1);
  }
  let hm: number = 0.0;
  for (const ch in counts) {
    let c: number = counts[ch];
    hm = (hm + (c * log2(c)));
  }
  console.log(String((log2(l) - (hm / l))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

