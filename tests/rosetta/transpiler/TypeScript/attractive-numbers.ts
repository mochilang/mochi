// Generated by Mochi v0.10.42 on 2025-07-27 18:45:41 GMT+7

function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  let d: number = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}
function countPrimeFactors(n: number): number {
  if ((n == 1)) {
    return 0;
  }
  if (isPrime(n)) {
    return 1;
  }
  let count: number = 0;
  let f: number = 2;
  while (true) {
    if (((n % f) == 0)) {
      count = (count + 1);
      n = Math.trunc(n / f);
      if ((n == 1)) {
        return count;
      }
      if (isPrime(n)) {
        f = n;
      }
    } else {
      if ((f >= 3)) {
        f = (f + 2);
      } else {
        f = 3;
      }
    }
  }
  return count;
}
function pad4(n: number): string {
  let s: string = String(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < 4)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  let max = 120;
  console.log((("The attractive numbers up to and including " + String(max)) + " are:"));
  let count: number = 0;
  let line: string = "";
  let lineCount: number = 0;
  let i: number = 1;
  while ((i <= max)) {
    let c: number = countPrimeFactors(i);
    if (isPrime(c)) {
      line = (line + pad4(i));
      count = (count + 1);
      lineCount = (lineCount + 1);
      if ((lineCount == 20)) {
        console.log(line);
        line = "";
        lineCount = 0;
      }
    }
    i = (i + 1);
  }
  if ((lineCount > 0)) {
    console.log(line);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

