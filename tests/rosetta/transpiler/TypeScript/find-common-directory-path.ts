// Generated by Mochi v0.10.42 on 2025-07-28 07:51:46 GMT+7

function splitPath(p: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(p) || typeof p === 'string' ? p.length : Object.keys(p ?? {}).length))) {
    if (((p).substring(i, (i + 1)) == "/")) {
      if ((cur != "")) {
        parts.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + (p).substring(i, (i + 1)));
    }
    i = (i + 1);
  }
  if ((cur != "")) {
    parts.push(cur);
  }
  return parts;
}
function joinPath(parts: string[]): string {
  let s: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length))) {
    s = ((s + "/") + parts[i]);
    i = (i + 1);
  }
  return s;
}
function commonPrefix(paths: string[]): string {
  if (((Array.isArray(paths) || typeof paths === 'string' ? paths.length : Object.keys(paths ?? {}).length) == 0)) {
    return "";
  }
  let base: string[] = splitPath(paths[Math.trunc(0)]);
  let i: number = 0;
  let prefix: string[] = [];
  while ((i < (Array.isArray(base) || typeof base === 'string' ? base.length : Object.keys(base ?? {}).length))) {
    let comp: string = base[i];
    let ok: boolean = true;
    for (const p of paths) {
      let parts: string[] = splitPath(p);
      if (((i >= (Array.isArray(parts) || typeof parts === 'string' ? parts.length : Object.keys(parts ?? {}).length)) || (parts[i] != comp))) {
        ok = false;
        break
      }
    }
    if (ok) {
      prefix.push(comp);
    } else {
      break
    }
    i = (i + 1);
  }
  return joinPath(prefix);
}
function main() {
  let paths: string[] = ["/home/user1/tmp/coverage/test", "/home/user1/tmp/covert/operator", "/home/user1/tmp/coven/members", "/home//user1/tmp/coventry", "/home/user1/././tmp/covertly/foo", "/home/bob/../user1/tmp/coved/bar"];
  let c: string = commonPrefix(paths);
  if ((c == "")) {
    console.log(_str("No common path"));
  } else {
    console.log(_str(("Common path: " + c)));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

