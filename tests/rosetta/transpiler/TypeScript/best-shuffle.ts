// Generated by Mochi v0.10.56 on 2025-08-03 17:23:15 GMT+7

function nextRand(seed: number): number {
  return (((seed * 1664525) + 1013904223) % 2147483647);
}
function shuffleChars(s: string, seed: number): any[] {
  let chars: string[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    chars.push((s).substring(i, (i + 1)));
    i = (i + 1);
  }
  let sd: number = seed;
  let idx: number = (Number(Array.isArray(chars) || typeof chars === 'string' ? chars.length : Object.keys(chars ?? {}).length) - 1);
  while ((idx > 0)) {
    sd = nextRand(sd);
    let j: number = (sd % (idx + 1));
    let tmp: string = chars[idx];
    chars[idx] = chars[j];
    chars[j] = tmp;
    idx = (idx - 1);
  }
  let res: string = "";
  i = 0;
  while ((i < Number(Array.isArray(chars) || typeof chars === 'string' ? chars.length : Object.keys(chars ?? {}).length))) {
    res = (res + chars[i]);
    i = (i + 1);
  }
  return [res, sd];
}
function bestShuffle(s: string, seed: number): any[] {
  let r: any[] = shuffleChars(s, seed);
  let t = r[Math.trunc(0)];
  let sd = r[Math.trunc(1)];
  let arr: string[] = [];
  let i: number = 0;
  while ((i < Number(Array.isArray(t) || typeof t === 'string' ? t.length : Object.keys(t ?? {}).length))) {
    arr.push((t).substring(i, (i + 1)));
    i = (i + 1);
  }
  i = 0;
  while ((i < Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    let j: number = 0;
    while ((j < Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
      if ((((i != j) && (arr[i] != (s).substring(j, (j + 1)))) && (arr[j] != (s).substring(i, (i + 1))))) {
        let tmp: string = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
        break
      }
      j = (j + 1);
    }
    i = (i + 1);
  }
  let count: number = 0;
  i = 0;
  while ((i < Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    if ((arr[i] == (s).substring(i, (i + 1)))) {
      count = (count + 1);
    }
    i = (i + 1);
  }
  let out: string = "";
  i = 0;
  while ((i < Number(Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length))) {
    out = (out + arr[i]);
    i = (i + 1);
  }
  return [out, sd, count];
}
function main() {
  let ts: string[] = ["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"];
  let seed: number = 1;
  let i: number = 0;
  while ((i < Number(Array.isArray(ts) || typeof ts === 'string' ? ts.length : Object.keys(ts ?? {}).length))) {
    let r: any[] = bestShuffle(ts[i], seed);
    let shuf = r[Math.trunc(0)];
    seed = r[Math.trunc(1)];
    let cnt = r[Math.trunc(2)];
    console.log(_str((((((ts[i] + " -> ") + shuf) + " (") + _str(cnt)) + ")")));
    i = (i + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

