// Generated by Mochi v0.10.39 on 2025-07-24 18:23:02 GMT+7

function Foo_Method(self: Foo, b: number): number {
  return (self.value + b);
}
function pow(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < Math.trunc(exp))) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function PowN(b: number) {
  return (e) => pow(b, e);
}
function PowE(e: number) {
  return (b) => pow(b, e);
}
export interface Foo { value: number }
function main() {
  const pow2 = PowN(2.0);
  const cube = PowE(3.0);
  console.log(("2^8 = " + String(pow2(8.0))));
  console.log(("4Â³ = " + String(cube(4.0))));
  let a: Foo = {"value": 2, "Method": function(...args){ return Foo_Method(this, ...args); }};
  const fn1 = (b) => a.Method(b);
  const fn2 = (f, b) => f.Method(b);
  console.log(("2 + 2 = " + String(a.Method(2))));
  console.log(("2 + 3 = " + String(fn1(3))));
  console.log(("2 + 4 = " + String(fn2(a, 4))));
  console.log(("3 + 5 = " + String(fn2({"value": 3, "Method": function(...args){ return Foo_Method(this, ...args); }}, 5))));
}
main();
