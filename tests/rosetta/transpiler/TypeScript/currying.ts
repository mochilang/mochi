// Generated by Mochi v0.10.55 on 2025-08-02 20:30:54 GMT+7

function Foo_Method(self: Foo, b: number): number {
  return (self.value + b);
}
function pow(base: number, exp: number): number {
  let result: number = 1.0;
  let i: number = 0;
  while ((i < Math.trunc(exp))) {
    result = (result * base);
    i = (i + 1);
  }
  return result;
}
function PowN(b: number) {
  return (e) => pow(b, e);
}
function PowE(e: number) {
  return (b) => pow(b, e);
}
export interface Foo { value: number }
function main() {
  let pow2 = PowN(2.0);
  let cube = PowE(3.0);
  console.log(_str(("2^8 = " + _str(pow2(8.0)))));
  console.log(_str(("4Â³ = " + _str(cube(4.0)))));
  let a: Foo = {"value": 2, "Method": function(...args){ return Foo_Method(this, ...args); }};
  let fn1 = (b) => a.Method(b);
  let fn2 = (f, b) => f.Method(b);
  console.log(_str(("2 + 2 = " + _str(a.Method(2)))));
  console.log(_str(("2 + 3 = " + _str(fn1(3)))));
  console.log(_str(("2 + 4 = " + _str(fn2(a, 4)))));
  console.log(_str(("3 + 5 = " + _str(fn2({"value": 3, "Method": function(...args){ return Foo_Method(this, ...args); }}, 5)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  globalThis.gc?.()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

