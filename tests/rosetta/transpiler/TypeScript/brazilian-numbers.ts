// Generated by Mochi v0.10.56 on 2025-08-03 17:23:53 GMT+7

function sameDigits(n: number, b: number): boolean {
  let f: number = (n % b);
  n = Math.trunc(Math.trunc(n / b));
  while ((n > 0)) {
    if (((n % b) != f)) {
      return false;
    }
    n = Math.trunc(Math.trunc(n / b));
  }
  return true;
}
function isBrazilian(n: number): boolean {
  if ((n < 7)) {
    return false;
  }
  if ((((n % 2) == 0) && (n >= 8))) {
    return true;
  }
  let b: number = 2;
  while ((b < (n - 1))) {
    if (sameDigits(n, b)) {
      return true;
    }
    b = (b + 1);
  }
  return false;
}
function isPrime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  if (((n % 2) == 0)) {
    return (n == 2);
  }
  if (((n % 3) == 0)) {
    return (n == 3);
  }
  let d: number = 5;
  while (((d * d) <= n)) {
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 2);
    if (((n % d) == 0)) {
      return false;
    }
    d = (d + 4);
  }
  return true;
}
function main() {
  let kinds: string[] = [" ", " odd ", " prime "];
  for (const kind of kinds) {
    console.log(_str((("First 20" + kind) + "Brazilian numbers:")));
    let c: number = 0;
    let n: number = 7;
    while (true) {
      if (isBrazilian(n)) {
        console.log(_str((_str(n) + " ")));
        c = (c + 1);
        if ((c == 20)) {
          console.log(_str("\n"));
          break
        }
      }
      if ((kind == " ")) {
        n = (n + 1);
      } else {
        if ((kind == " odd ")) {
          n = (n + 2);
        } else {
          while (true) {
            n = (n + 2);
            if (isPrime(n)) {
              break
            }
          }
        }
      }
    }
  }
  let n: number = 7;
  let c: number = 0;
  while ((c < 100000)) {
    if (isBrazilian(n)) {
      c = (c + 1);
    }
    n = (n + 1);
  }
  console.log(_str(("The 100,000th Brazilian number: " + _str((n - 1)))));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().heapUsed ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().heapUsed;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  globalThis.gc?.()
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  globalThis.gc?.()
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

