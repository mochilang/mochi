// Generated by Mochi v0.10.42 on 2025-07-27 18:45:49 GMT+7

function qsel(a: number[], k: number): number {
  let arr: number[] = a;
  while (((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) > 1)) {
    let px: number = (_now() % (Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length));
    let pv: number = arr[px];
    let last: number = ((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) - 1);
    let tmp: number = arr[px];
    arr[px] = arr[last];
    arr[last] = tmp;
    px = 0;
    let i: number = 0;
    while ((i < last)) {
      let v: number = arr[i];
      if ((v < pv)) {
        let tmp2: number = arr[px];
        arr[px] = arr[i];
        arr[i] = tmp2;
        px = (px + 1);
      }
      i = (i + 1);
    }
    if ((px == k)) {
      return pv;
    }
    if ((k < px)) {
      arr = arr.slice(0, px);
    } else {
      let tmp2: number = arr[px];
      arr[px] = pv;
      arr[last] = tmp2;
      arr = arr.slice((px + 1));
      k = (k - (px + 1));
    }
  }
  return arr[Math.trunc(0)];
}
function median(list: number[]): number {
  let arr: number[] = list;
  let half: number = Math.trunc(Math.trunc((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) / 2));
  let med: number = qsel(arr, half);
  if ((((Array.isArray(arr) || typeof arr === 'string' ? arr.length : Object.keys(arr ?? {}).length) % 2) == 0)) {
    return ((med + qsel(arr, (half - 1))) / 2.0);
  }
  return med;
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  console.log(String(median([3.0, 1.0, 4.0, 1.0])));
  console.log(String(median([3.0, 1.0, 4.0, 1.0, 5.0])));
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

