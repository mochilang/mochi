// Generated by Mochi v0.10.42 on 2025-07-27 21:08:44 GMT+7

export interface Digits { "0": number; "1": number; "2": number; "3": number; "4": number; "5": number; "6": number; "7": number; "8": number; "9": number }
function parseIntStr(str: string): number {
  let i: number = 0;
  let neg: boolean = false;
  if ((((Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length) > 0) && (str.slice(0, 1) == "-"))) {
    neg = true;
    i = 1;
  }
  let n: number = 0;
  let digits: Digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9};
  while ((i < (Array.isArray(str) || typeof str === 'string' ? str.length : Object.keys(str ?? {}).length))) {
    n = ((n * 10) + digits[Math.trunc(str.slice(i, (i + 1)))]);
    i = (i + 1);
  }
  if (neg) {
    n = -n;
  }
  return n;
}
function fields(s: string): string[] {
  let words: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    let ch: string = (s).substring(i, (i + 1));
    if ((((ch == " ") || (ch == "\t")) || (ch == "\n"))) {
      if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
        words.push(cur);
        cur = "";
      }
    } else {
      cur = (cur + ch);
    }
    i = (i + 1);
  }
  if (((Array.isArray(cur) || typeof cur === 'string' ? cur.length : Object.keys(cur ?? {}).length) > 0)) {
    words.push(cur);
  }
  return words;
}
function unescape(s: string): string {
  let out: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s.slice(i, (i + 1)) == "\\") && ((i + 1) < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)))) {
      let c: string = s.slice((i + 1), (i + 2));
      if ((c == "n")) {
        out = (out + "\n");
        i = (i + 2);
        continue
      } else {
        if ((c == "\\")) {
          out = (out + "\\");
          i = (i + 2);
          continue
        }
      }
    }
    out = (out + s.slice(i, (i + 1)));
    i = (i + 1);
  }
  return out;
}
function parseProgram(src: string): Record<string, any> {
  let lines: string[] = src.split("\n");
  let header: string[] = fields(lines[Math.trunc(0)]);
  let dataSize = parseIntStr(header[Math.trunc(1)]);
  let nStrings = parseIntStr(header[Math.trunc(3)]);
  let stringPool: string[] = [];
  let i: number = 1;
  while ((i <= nStrings)) {
    let s: string = lines[i];
    if (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) > 0)) {
      stringPool.push(unescape(s.slice(1, ((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 1))));
    }
    i = (i + 1);
  }
  let code: Record<string, any>[] = [];
  let addrMap: Record<number, number> = {};
  while ((i < (Array.isArray(lines) || typeof lines === 'string' ? lines.length : Object.keys(lines ?? {}).length))) {
    let line: string = trim(lines[i]);
    if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) == 0)) {
      break
    }
    let parts: string[] = fields(line);
    let addr = parseIntStr(parts[Math.trunc(0)]);
    let op: string = parts[Math.trunc(1)];
    let arg: number = 0;
    if ((op == "push")) {
      arg = parseIntStr(parts[Math.trunc(2)]);
    } else {
      if (((op == "fetch") || (op == "store"))) {
        arg = parseIntStr(parts[Math.trunc(2)].slice(1, ((Array.isArray(parts[Math.trunc(2)]) || typeof parts[Math.trunc(2)] === 'string' ? parts[Math.trunc(2)].length : Object.keys(parts[Math.trunc(2)] ?? {}).length) - 1)));
      } else {
        if (((op == "jmp") || (op == "jz"))) {
          arg = parseIntStr(parts[Math.trunc(3)]);
        }
      }
    }
    code.push({addr, op, arg});
    addrMap[addr] = ((Array.isArray(code) || typeof code === 'string' ? code.length : Object.keys(code ?? {}).length) - 1);
    i = (i + 1);
  }
  return {dataSize, "strings": stringPool, code, addrMap};
}
function runVM(prog: Record<string, any>) {
  let data: number[] = [];
  let i: number = 0;
  while ((i < prog.dataSize)) {
    data.push(0);
    i = (i + 1);
  }
  let stack: number[] = [];
  let pc: number = 0;
  let code = prog.code;
  let addrMap = prog.addrMap;
  let pool = prog.strings;
  let line: string = "";
  while ((pc < (Array.isArray(code) || typeof code === 'string' ? code.length : Object.keys(code ?? {}).length))) {
    let inst = code[pc];
    let op = inst.op;
    let arg = inst.arg;
    if ((op == "push")) {
      stack.push(arg);
      pc = (pc + 1);
      continue
    }
    if ((op == "store")) {
      data[arg] = stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))];
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      pc = (pc + 1);
      continue
    }
    if ((op == "fetch")) {
      stack.push(data[arg]);
      pc = (pc + 1);
      continue
    }
    if ((op == "add")) {
      stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = (stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2))] + stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))]);
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      pc = (pc + 1);
      continue
    }
    if ((op == "lt")) {
      let v: number = 0;
      if ((stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2))] < stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))])) {
        v = 1;
      }
      stack[((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 2)] = v;
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      pc = (pc + 1);
      continue
    }
    if ((op == "jz")) {
      let v: number = stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))];
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      if ((v == 0)) {
        pc = addrMap[arg];
      } else {
        pc = (pc + 1);
      }
      continue
    }
    if ((op == "jmp")) {
      pc = addrMap[arg];
      continue
    }
    if ((op == "prts")) {
      let s = pool[Math.trunc(stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))])];
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      if ((s != "\n")) {
        line = (line + s);
      }
      pc = (pc + 1);
      continue
    }
    if ((op == "prti")) {
      line = (line + String(stack[Math.trunc(((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1))]));
      console.log(line);
      line = "";
      stack = stack.slice(0, ((Array.isArray(stack) || typeof stack === 'string' ? stack.length : Object.keys(stack ?? {}).length) - 1));
      pc = (pc + 1);
      continue
    }
    if ((op == "halt")) {
      break
    }
    pc = (pc + 1);
  }
}
function trim(s: string): string {
  let start: number = 0;
  while (((start < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length)) && ((s.slice(start, (start + 1)) == " ") || (s.slice(start, (start + 1)) == "\t")))) {
    start = (start + 1);
  }
  let end: number = (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length);
  while (((end > start) && ((s.slice((end - 1), end) == " ") || (s.slice((end - 1), end) == "\t")))) {
    end = (end - 1);
  }
  return (s).substring(start, end);
}
function split(s: string, sep: string): string[] {
  let parts: string[] = [];
  let cur: string = "";
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((((Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length) > 0) && ((i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length)) <= (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) && ((s).substring(i, (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length))) == sep))) {
      parts.push(cur);
      cur = "";
      i = (i + (Array.isArray(sep) || typeof sep === 'string' ? sep.length : Object.keys(sep ?? {}).length));
    } else {
      cur = (cur + (s).substring(i, (i + 1)));
      i = (i + 1);
    }
  }
  parts.push(cur);
  return parts;
}
function main() {
  let programText: string = (((((((((((((((((((("Datasize: 1 Strings: 2\n" + "\"count is: \"\n") + "\"\\n\"\n") + "    0 push  1\n") + "    5 store [0]\n") + "   10 fetch [0]\n") + "   15 push  10\n") + "   20 lt\n") + "   21 jz     (43) 65\n") + "   26 push  0\n") + "   31 prts\n") + "   32 fetch [0]\n") + "   37 prti\n") + "   38 push  1\n") + "   43 prts\n") + "   44 fetch [0]\n") + "   49 push  1\n") + "   54 add\n") + "   55 store [0]\n") + "   60 jmp    (-51) 10\n") + "   65 halt\n");
  let prog: Record<string, any> = parseProgram(programText);
  runVM(prog);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

