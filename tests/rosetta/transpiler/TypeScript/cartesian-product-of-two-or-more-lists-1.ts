// Generated by Mochi v0.10.42 on 2025-07-27 20:33:32 GMT+7

function cart2(a: number[], b: number[]): number[][] {
  let p: number[][] = [];
  for (const x of a) {
    for (const y of b) {
      p.push([x, y]);
    }
  }
  return p;
}
function llStr(lst: number[][]): string {
  let s: string = "[";
  let i: number = 0;
  while ((i < (Array.isArray(lst) || typeof lst === 'string' ? lst.length : Object.keys(lst ?? {}).length))) {
    let row: number[] = lst[i];
    s = (s + "[");
    let j: number = 0;
    while ((j < (Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length))) {
      s = (s + String(row[j]));
      if ((j < ((Array.isArray(row) || typeof row === 'string' ? row.length : Object.keys(row ?? {}).length) - 1))) {
        s = (s + " ");
      }
      j = (j + 1);
    }
    s = (s + "]");
    if ((i < ((Array.isArray(lst) || typeof lst === 'string' ? lst.length : Object.keys(lst ?? {}).length) - 1))) {
      s = (s + " ");
    }
    i = (i + 1);
  }
  s = (s + "]");
  return s;
}
function main() {
  console.log(llStr(cart2([1, 2], [3, 4])));
  console.log(llStr(cart2([3, 4], [1, 2])));
  console.log(llStr(cart2([1, 2], [])));
  console.log(llStr(cart2([], [1, 2])));
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

