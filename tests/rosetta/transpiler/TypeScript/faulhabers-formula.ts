// Generated by Mochi v0.10.42 on 2025-07-28 01:06:41 GMT+7

function bernoulli(n: number): number {
  let a: number[] = [];
  let m: number = 0;
  while ((m <= n)) {
    a.push((Number(1) / Number((m + 1))));
    let j: number = m;
    while ((j >= 1)) {
      a[(j - 1)] = (Number(j) * (a[Math.trunc((j - 1))] - a[j]));
      j = (j - 1);
    }
    m = (m + 1);
  }
  return a[Math.trunc(0)];
}
function binom(n: number, k: number): bigint {
  if (((k < 0) || (k > n))) {
    return 0n;
  }
  let kk: number = k;
  if ((kk > (n - kk))) {
    kk = (n - kk);
  }
  let res: bigint = 1n;
  let i: number = 0;
  while ((i < kk)) {
    res = (res * BigInt((n - i)));
    i = (i + 1);
    res = (res / BigInt(i));
  }
  return res;
}
function coeff(p: number, j: number): number {
  let base: number = (Number(1) / Number((p + 1)));
  let c: number = base;
  if (((j % 2) == 1)) {
    c = -c;
  }
  c = (c * Number(binom((p + 1), j)));
  c = (c * bernoulli(j));
  return c;
}
function main() {
  let p: number = 0;
  while ((p < 10)) {
    let line: string = (_str(p) + " :");
    let j: number = 0;
    while ((j <= p)) {
      let c: number = coeff(p, j);
      if ((_str(c) != "0/1")) {
        line = (((line + " ") + _str(c)) + "Ã—n");
        let exp: bigint = ((p + 1) - j);
        if ((Number(exp) > 1)) {
          line = ((line + "^") + _str(exp));
        }
      }
      j = (j + 1);
    }
    console.log(_str(line));
    p = (p + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

