// Generated by Mochi v0.10.42 on 2025-07-28 10:27:04 GMT+7

export interface StepResult { n: bigint; ok: boolean }
function step(n: bigint, program: bigint[][]): StepResult {
  let i: number = 0;
  while ((i < (Array.isArray(program) || typeof program === 'string' ? program.length : Object.keys(program ?? {}).length))) {
    let num = program[i][Math.trunc(0)];
    let den: bigint = program[i][Math.trunc(1)];
    if ((BigInt((n % den)) == 0n)) {
      n = (n / den * BigInt(num));
      return {n, "ok": true};
    }
    i = (i + 1);
  }
  return {n, "ok": false};
}
function main() {
  let program: bigint[][] = [[17n, 91n], [78n, 85n], [19n, 51n], [23n, 38n], [29n, 33n], [77n, 29n], [95n, 23n], [77n, 19n], [1n, 17n], [11n, 13n], [13n, 11n], [15n, 14n], [15n, 2n], [55n, 1n]];
  let n: bigint = 2n;
  let primes: number = 0;
  let count: number = 0;
  let limit: number = 1000000;
  let two: bigint = 2n;
  let line: string = "";
  while (((primes < 20) && (count < limit))) {
    let res: StepResult = step(n, program);
    n = res.n;
    if (!res.ok) {
      break
    }
    let m: bigint = n;
    let pow: number = 0;
    while ((BigInt((m % two)) == 0n)) {
      m = m / two;
      pow = (pow + 1);
    }
    if (((m == 1n) && (pow > 1))) {
      line = ((line + _str(pow)) + " ");
      primes = (primes + 1);
    }
    count = (count + 1);
  }
  if (((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) > 0)) {
    console.log(_str((line).substring(0, ((Array.isArray(line) || typeof line === 'string' ? line.length : Object.keys(line ?? {}).length) - 1))));
  } else {
    console.log(_str(""));
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

