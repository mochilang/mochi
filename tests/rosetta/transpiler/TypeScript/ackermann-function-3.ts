// Generated by Mochi v0.10.42 on 2025-07-28 10:40:03 GMT+7

function pow_big(base: bigint, exp: number): bigint {
  let result: number = 1;
  let b: number = base;
  let e: number = exp;
  while ((e > 0)) {
    if (((e % 2) == 1)) {
      result = (result * b);
    }
    b = (b * b);
    e = Math.trunc(Math.trunc(e / 2));
  }
  return result;
}
function bit_len(x: bigint): number {
  let n: number = x;
  let c: number = 0;
  while ((n > 0)) {
    n = Math.trunc(n / 2);
    c = (c + 1);
  }
  return c;
}
let err: string = "";
function ackermann2(m: bigint, n: bigint): bigint {
  if ((err != "")) {
    return 0n;
  }
  if ((m <= BigInt(3))) {
    let mi = Math.trunc(m);
    if ((mi == 0)) {
      return (n + BigInt(1));
    }
    if ((mi == 1)) {
      return (n + BigInt(2));
    }
    if ((mi == 2)) {
      return ((BigInt(2) * n) + 3);
    }
    if ((mi == 3)) {
      let nb: number = bit_len(n);
      if ((nb > 64)) {
        err = (("A(m,n) had n of " + _str(nb)) + " bits; too large");
        return 0n;
      }
      let r = pow_big(2n, Math.trunc(n));
      return ((8 * r) - 3);
    }
  }
  if ((bit_len(n) == 0)) {
    return ackermann2((m - 1n), 1n);
  }
  return ackermann2((m - 1n), ackermann2(m, (n - 1n)));
}
function show(m: number, n: number) {
  err = "";
  let res: number = ackermann2(BigInt(m), BigInt(n));
  if ((err != "")) {
    console.log(_str(((((("A(" + _str(m)) + ", ") + _str(n)) + ") = Error: ") + err)));
    return;
  }
  if ((bit_len(res) <= 256)) {
    console.log(_str(((((("A(" + _str(m)) + ", ") + _str(n)) + ") = ") + _str(res))));
  } else {
    let s: string = _str(res);
    let pre: string = (s).substring(0, 20);
    let suf: string = (s).substring(((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - 20), (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length));
    console.log(_str(((((((((("A(" + _str(m)) + ", ") + _str(n)) + ") = ") + _str((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) + " digits starting/ending with: ") + pre) + "...") + suf)));
  }
}
function main() {
  show(0, 0);
  show(1, 2);
  show(2, 4);
  show(3, 100);
  show(3, 1000000);
  show(4, 1);
  show(4, 2);
  show(4, 3);
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

