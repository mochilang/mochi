// Generated by Mochi v0.10.42 on 2025-07-28 10:40:10 GMT+7

function pfacSum(i: number): number {
  let sum: number = 0;
  let p: number = 1;
  while ((p <= Math.trunc(i / 2))) {
    if (((i % p) == 0)) {
      sum = (sum + p);
    }
    p = (p + 1);
  }
  return sum;
}
function pad(n: number, width: number): string {
  let s: string = _str(n);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function main() {
  let sums: number[] = [];
  let i: number = 0;
  while ((i < 20000)) {
    sums.push(0);
    i = (i + 1);
  }
  i = 1;
  while ((i < 20000)) {
    sums[i] = pfacSum(i);
    i = (i + 1);
  }
  console.log(_str("The amicable pairs below 20,000 are:"));
  let n: number = 2;
  while ((n < 19999)) {
    let m: number = sums[n];
    if ((((m > n) && (m < 20000)) && (n == sums[m]))) {
      console.log(_str(((("  " + pad(n, 5)) + " and ") + pad(m, 5))));
    }
    n = (n + 1);
  }
}
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
function _str(x: any): string {
  if (typeof x === 'number') {
    if (Object.is(x, -0)) return '-0';
    if (x === Infinity) return '+Inf';
    if (x === -Infinity) return '-Inf';
    if (Number.isNaN(x)) return 'NaN';
  }
  return String(x);
}
(() => {
  const _startMem = _mem()
  const _start = _now()
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
})();

