// Generated by Mochi v0.10.40 on 2025-07-25 17:41:22 GMT+7

function floorf(x: number): number {
  const y: number = Math.trunc(x);
  return y;
}
function indexOf(s: string, ch: string): number {
  let i: number = 0;
  while ((i < (Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length))) {
    if (((s).substring(i, (i + 1)) == ch)) {
      return i;
    }
    i = (i + 1);
  }
  return -1;
}
function fmtF3(x: number): string {
  let y: number = (floorf(((x * 1000.0) + 0.5)) / 1000.0);
  let s: string = String(y);
  let dot: number = s.indexOf(".");
  if ((dot == (0 - 1))) {
    s = (s + ".000");
  } else {
    let decs: number = (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) - dot) - 1);
    if ((decs > 3)) {
      s = (s).substring(0, (dot + 4));
    } else {
      while ((decs < 3)) {
        s = (s + "0");
        decs = (decs + 1);
      }
    }
  }
  return s;
}
function padFloat3(x: number, width: number): string {
  let s: string = fmtF3(x);
  while (((Array.isArray(s) || typeof s === 'string' ? s.length : Object.keys(s ?? {}).length) < width)) {
    s = (" " + s);
  }
  return s;
}
function fib1000(): number[] {
  let a: number = 0.0;
  let b: number = 1.0;
  let res: number[] = [];
  let i: number = 0;
  while ((i < 1000)) {
    res = [...res, b];
    let t: number = b;
    b = (b + a);
    a = t;
    i = (i + 1);
  }
  return res;
}
function leadingDigit(x: number): number {
  if ((x < 0.0)) {
    x = -x;
  }
  while ((x >= 10.0)) {
    x = (x / 10.0);
  }
  while (((x > 0.0) && (x < 1.0))) {
    x = (x * 10.0);
  }
  return Math.trunc(x);
}
function show(nums: number[], title: string) {
  let counts: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (const n of nums) {
    const d = leadingDigit(n);
    if (((d >= 1) && (d <= 9))) {
      counts[(d - 1)] = (counts[Math.trunc((d - 1))] + 1);
    }
  }
  const preds: number[] = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046];
  const total: number = (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length);
  console.log(title);
  console.log("Digit  Observed  Predicted");
  let i: number = 0;
  while ((i < 9)) {
    const obs: number = (counts[i] / total);
    let line: string = ((((("  " + String((i + 1))) + "  ") + padFloat3(obs, 9)) + "  ") + padFloat3(preds[i], 8));
    console.log(line);
    i = (i + 1);
  }
}
function main() {
  show(fib1000(), "First 1000 Fibonacci numbers");
}
main();
