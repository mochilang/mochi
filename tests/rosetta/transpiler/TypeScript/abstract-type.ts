// Generated by Mochi v0.10.40 on 2025-07-25 17:10:11 GMT+7

export type Beast = { tag: "Dog"; kind: string; name: string } | { tag: "Cat"; kind: string; name: string };
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  function beastKind(b: Beast): string {
    return ((b.tag === "Dog") ? b.kind : ((b.tag === "Cat") ? b.kind : undefined));
  }
  function beastName(b: Beast): string {
    return ((b.tag === "Dog") ? b.name : ((b.tag === "Cat") ? b.name : undefined));
  }
  function beastCry(b: Beast): string {
    return ((b.tag === "Dog") ? "Woof" : ((b.tag === "Cat") ? "Meow" : undefined));
  }
  function bprint(b: Beast) {
    console.log((((((beastName(b) + ", who's a ") + beastKind(b)) + ", cries: \"") + beastCry(b)) + "\"."));
  }
  function main() {
    const d: Beast = {"tag": "Dog", "kind": "labrador", "name": "Max"};
    const c: Beast = {"tag": "Cat", "kind": "siamese", "name": "Sammy"};
    bprint(d);
    bprint(c);
  }
  main();
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

