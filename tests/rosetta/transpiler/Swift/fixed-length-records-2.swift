// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:33 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func `repeat`(_ s: String, _ n: Int) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < n) {
            out = ((out + s) as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func trimRightSpace(_ s: String) -> String {
        var i: Int = (Int(((s).count)) - 1)
        while ((i >= 0) && (String(Array(s)[i..<(i + 1)]) == " ")) {
            i = ((i - 1) as! Int)
        }
        return (String(Array(s)[0..<(i + 1)]) as! String)
    }
    func block2text(_ block: [String]) -> [String] {
        var out: [String] = ([] as! [String])
        for b in block {
            out = (_append(out, String(describing: trimRightSpace((b as! String)))) as! [String])
        }
        return (out as! [String])
    }
    func text2block(_ lines: [String]) -> [String] {
        var out: [String] = ([] as! [String])
        var count: Int = 0
        for line in lines {
            var s: String = line
            let le = Int(((s).count))
            if (le > 64) {
                s = (String(Array(s)[0..<64]) as! String)
            } else if (le < 64) {
                s = ((s + String(describing: `repeat`(" ", ((64 - le) as! Int)))) as! String)
            }
            
            out = (_append(out, s) as! [String])
            count = ((count + 1) as! Int)
        }
        if ((count % 16) != 0) {
            let pad = (16 - (count % 16))
            var i: Int = 0
            while (i < pad) {
                out = (_append(out, String(describing: `repeat`(" ", 64))) as! [String])
                i = ((i + 1) as! Int)
            }
        }
        return (out as! [String])
    }
    var lines: [String] = (["alpha", "beta", "gamma"] as! [String])
    var blocks: [String] = (text2block((lines as! [String])) as! [String])
    var outLines: [String] = (block2text((blocks as! [String])) as! [String])
    for l in outLines {
        if (l != "") {
            print(_p(l))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
