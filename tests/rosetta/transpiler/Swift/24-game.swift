// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:15:40 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func randDigit() -> Int {
        return (Int((Int(_now()) % 9)) &+ 1)
    }
    func main() {
        var digits: [Any?] = []
        for i in 0..<4 {
            digits = ((_append(digits, Int(randDigit())) as! [Int]) as! [Any?])
        }
        var numstr: String = ""
        for i in 0..<4 {
            numstr = ((numstr + String(describing: digits[i])) as! String)
        }
        print(_p((("Your numbers: " + numstr) + "\n")))
        print(_p("Enter RPN: "))
        var expr: String = (readLine() ?? "")
        if (Int(((expr).count)) != 7) {
            print(_p("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)"))
            return
        }
        var stack: [Any?] = []
        var i: Int = 0
        var valid: Bool = true
        while (i < Int(((expr).count))) {
            let ch = String(describing: String(Array(String(describing: (expr as! String)))[Int(i)..<Int((i &+ 1))]))
            if ((ch >= "0") && (ch <= "9")) {
                if (Int(((digits).count)) == 0) {
                    print(_p("too many numbers."))
                    return
                }
                var j: Int = 0
                while ((digits[j] as! Int) != (Int(_int(ch)) &- Int(_int("0")))) {
                    j = Int((j &+ 1))
                    if (j == Int(((digits).count))) {
                        print(_p("wrong numbers."))
                        return
                    }
                }
                digits = (((Array(digits[0..<j]) as! [Any?]) + (Array(digits[(j &+ 1)..<digits.count]) as! [Any?])) as! [Any?])
                stack = (_append(stack, Double((Int(_int(ch)) &- Int(_int("0"))))) as! [Any?])
            } else {
                if (Int(((stack).count)) < 2) {
                    print(_p("invalid expression syntax."))
                    valid = false
                    break
                }
                var b: Any? = stack[(Int(((stack).count)) &- 1)]
                var a: Any? = stack[(Int(((stack).count)) &- 2)]
                if (ch == "+") {
                    stack[(Int(((stack).count)) &- 2)] = (_num(a) + _num(b))
                } else if (ch == "-") {
                    stack[(Int(((stack).count)) &- 2)] = (_num(a) - _num(b))
                } else if (ch == "*") {
                    stack[(Int(((stack).count)) &- 2)] = (_num(a) * _num(b))
                } else if (ch == "/") {
                    stack[(Int(((stack).count)) &- 2)] = (_num(a) / _num(b))
                } else {
                    print(_p((ch + " invalid.")))
                    valid = false
                    break
                }
                
                
                
                stack = (Array(stack[0..<(Int(((stack).count)) &- 1)]) as! [Any?])
            }
            i = Int((i &+ 1))
        }
        if valid {
            if (Double(abs((Double(stack[0]) - 24.0))) > 0.000001) {
                print(_p((("incorrect. " + String(describing: stack[0])) + " != 24")))
            } else {
                print(_p("correct."))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
