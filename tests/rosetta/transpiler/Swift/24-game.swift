// Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:23:40 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func randDigit() -> Int {
    return ((Int((Int(_now()) % 9)) + 1) as! Int)
}
func main() {
    var digits: [Any] = ([] as! [Any])
    for i in 0..<4 {
        digits = (((((digits as! [Any]) + [Int(randDigit())]) as! [Any]) as! [Int]) as! [Any])
    }
    var numstr = ""
    for i in 0..<4 {
        numstr = ((String(numstr) + String(String(describing: (digits as! [Any])[i]))) as! String)
    }
    print((("Your numbers: " + String(numstr)) + "\n"))
    print("Enter RPN: ")
    var expr = String((readLine() ?? ""))
    if (Int(((String(expr)).count)) != 7) {
        print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
        return
    }
    var stack: [Any] = ([] as! [Any])
    var i = 0
    var valid = true
    while (Int(i) < Int(((String(expr)).count))) {
        let ch = String(String(Array(String(expr))[Int(i)..<((Int(i) + 1) as! Int)]))
        if ((String(ch) >= "0") && (String(ch) <= "9")) {
            if (Int((((digits as! [Any])).count)) == 0) {
                print("too many numbers.")
                return
            }
            var j = 0
            while (((digits as! [Any])[Int(j)] as! Int) != ((String(ch) as! Int) - ("0" as! Int))) {
                j = ((Int(j) + 1) as! Int)
                if (Int(j) == Int((((digits as! [Any])).count))) {
                    print("wrong numbers.")
                    return
                }
            }
            digits = (((Array(digits[0..<Int(j)]) as! [Any]) + (Array(digits[(Int(j) + 1)..<digits.count]) as! [Any])) as! [Any])
            stack = (((stack as! [Any]) + [Double(((String(ch) as! Int) - ("0" as! Int)))]) as! [Any])
        } else {
            if (Int((((stack as! [Any])).count)) < 2) {
                print("invalid expression syntax.")
                valid = false
                break
            }
            var b = (stack as! [Any])[(Int((((stack as! [Any])).count)) - 1)]
            var a = (stack as! [Any])[(Int((((stack as! [Any])).count)) - 2)]
            if (String(ch) == "+") {
                stack[(Int((((stack as! [Any])).count)) - 2)] = ((a as! Int) + (b as! Int))
            } else if (String(ch) == "-") {
                stack[(Int((((stack as! [Any])).count)) - 2)] = ((a as! Int) - (b as! Int))
            } else if (String(ch) == "*") {
                stack[(Int((((stack as! [Any])).count)) - 2)] = ((a as! Int) * (b as! Int))
            } else if (String(ch) == "/") {
                stack[(Int((((stack as! [Any])).count)) - 2)] = ((a as! Int) / (b as! Int))
            } else {
                print((String(ch) + " invalid."))
                valid = false
                break
            }
            
            
            
            stack = (Array(stack[0..<(Int((((stack as! [Any])).count)) - 1)]) as! [Any])
        }
        i = ((Int(i) + 1) as! Int)
    }
    if (valid as! Bool) {
        if ((abs((((stack as! [Any])[0] as! Double) - 24.0)) as! Double) > 0.000001) {
            print((("incorrect. " + String(String(describing: (stack as! [Any])[0]))) + " != 24"))
        } else {
            print("correct.")
        }
    }
}
main()
