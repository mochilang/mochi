// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:13:36 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func randDigit() -> Int {
    return ((Int((Int(_now()) % 9)) + 1) as! Int)
}
func main() {
    var digits: [Any] = ([] as! [Any])
    for i in 0..<4 {
        digits = ((((digits + [Int(randDigit())]) as! [Any]) as! [Int]) as! [Any])
    }
    var numstr = ""
    for i in 0..<4 {
        numstr = ((numstr + String(describing: (digits as! [Any])[i])) as! String)
    }
    print((("Your numbers: " + numstr) + "\n"))
    print("Enter RPN: ")
    var expr = String((readLine() ?? ""))!
    if (Int(((expr).count)) != 7) {
        print("invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)")
        return
    }
    var stack: [Any] = ([] as! [Any])
    var i = 0
    var valid = true
    while (i < Int(((expr).count))) {
        let ch = String(describing: String(Array((expr as! String))[(i as! Int)..<((i + 1) as! Int)]))
        if ((ch >= "0") && (ch <= "9")) {
            if (Int(((digits).count)) == 0) {
                print("too many numbers.")
                return
            }
            var j = 0
            while (((digits as! [Any])[j] as! Int) != ((ch as! Int) - "0")) {
                j = ((j + 1) as! Int)
                if (j == Int(((digits).count))) {
                    print("wrong numbers.")
                    return
                }
            }
            digits = ((Array(digits[0..<j]) + Array(digits[(j + 1)..<digits.count])) as! [Any])
            stack = ((stack + [Double(((ch as! Int) - "0"))]) as! [Any])
        } else {
            if (Int(((stack).count)) < 2) {
                print("invalid expression syntax.")
                valid = false
                break
            }
            var b = (stack as! [Any])[(Int(((stack).count)) - 1)]
            var a = (stack as! [Any])[(Int(((stack).count)) - 2)]
            if (ch == "+") {
                stack[(Int(((stack).count)) - 2)] = (_num(a) + _num(b))
            } else if (ch == "-") {
                stack[(Int(((stack).count)) - 2)] = (_num(a) - _num(b))
            } else if (ch == "*") {
                stack[(Int(((stack).count)) - 2)] = (_num(a) * _num(b))
            } else if (ch == "/") {
                stack[(Int(((stack).count)) - 2)] = (_num(a) / _num(b))
            } else {
                print((ch + " invalid."))
                valid = false
                break
            }
            
            
            
            stack = (Array(stack[0..<(Int(((stack).count)) - 1)]) as! [Any])
        }
        i = ((i + 1) as! Int)
    }
    if valid {
        if (Double(abs((((stack as! [Any])[0] as! Double) - 24.0)))! > 0.000001) {
            print((("incorrect. " + String(describing: (stack as! [Any])[0])) + " != 24"))
        } else {
            print("correct.")
        }
    }
}
_ = main()
