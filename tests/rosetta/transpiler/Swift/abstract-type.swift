// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:25 GMT+7
import Foundation

indirect enum Beast {
    case Dog(kind: String, name: String)
    case Cat(kind: String, name: String)
}
func beastKind(_ b: Beast) -> String {
    return ({ () -> Any in
    switch b {
        case let .Dog(k, _):
        return k
        case let .Cat(k, _):
        return k
        default:
        var z: Any
        return z
    }
}() as! String)
}
func beastName(_ b: Beast) -> String {
    return ({ () -> Any in
    switch b {
        case let .Dog(_, n):
        return n
        case let .Cat(_, n):
        return n
        default:
        var z: Any
        return z
    }
}() as! String)
}
func beastCry(_ b: Beast) -> String {
    return String(describing: { () -> String in
    switch b {
        case let .Dog(_, _):
        return "Woof"
        case let .Cat(_, _):
        return "Meow"
        default:
        var z: String
        return z
    }
}())
}
func bprint(_ b: Beast) {
    print((((((String(describing: beastName((b as! Beast))) + ", who's a ") + String(describing: beastKind((b as! Beast)))) + ", cries: \"") + String(describing: beastCry((b as! Beast)))) + "\"."))
}
func main() {
    let d: Beast = Beast.Dog(kind: "labrador", name: "Max")
    let c: Beast = Beast.Cat(kind: "siamese", name: "Sammy")
    _ = bprint((d as! Beast))
    _ = bprint((c as! Beast))
}
_ = main()
