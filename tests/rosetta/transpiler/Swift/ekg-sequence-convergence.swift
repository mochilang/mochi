// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:37 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func contains(_ xs: [Int], _ n: Int) -> Bool {
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if ((xs[i] as! Int) == n) {
                return true
            }
            i = Int((i + 1))
        }
        return false
    }
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        var y: Int = b
        while (y != 0) {
            let t = (x % y)
            x = Int(y)
            y = Int(t)
        }
        if (x < 0) {
            x = Int(-x)
        }
        return Int(x)
    }
    func sortInts(_ xs: [Int]) -> [Int] {
        var arr: [Int] = xs
        var n: Int = Int(((arr).count))
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n - 1)) {
                if ((arr[j] as! Int) > (arr[(j + 1)] as! Int)) {
                    let tmp = (arr[j] as! Int)
                    arr[j] = (arr[(j + 1)] as! Int)
                    arr[(j + 1)] = Int(tmp)
                }
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        return (arr as! [Int])
    }
    func areSame(_ s: [Int], _ t: [Int]) -> Bool {
        if (Int(((s).count)) != Int(((t).count))) {
            return false
        }
        var a: [Int] = (sortInts((s as! [Int])) as! [Int])
        var b: [Int] = (sortInts((t as! [Int])) as! [Int])
        var i: Int = 0
        while (i < Int(((a).count))) {
            if ((a[i] as! Int) != (b[i] as! Int)) {
                return false
            }
            i = Int((i + 1))
        }
        return true
    }
    func printSlice(_ start: Int, _ seq: [Int]) {
        var first: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < 30) {
            first = (_append(first, (seq[i] as! Int)) as! [Int])
            i = Int((i + 1))
        }
        var pad: String = ""
        if (start < 10) {
            pad = " "
        }
        print(_p((((("EKG(" + pad) + _p(start)) + "): ") + _p(first))))
    }
    func main() {
        let limit = 100
        let starts = ([2, 5, 7, 9, 10] as! [Int])
        var ekg: [[Int]] = ([] as! [[Int]])
        var s: Int = 0
        while (s < Int(((starts).count))) {
            var seq: [Int] = ([1, (starts[s] as! Int)] as! [Int])
            var n: Int = 2
            while (n < limit) {
                var i: Int = 2
                var done: Bool = false
                while (!done) {
                    if ((!((seq as! [Int]).contains(Int(i)))) && (Int(gcd((seq[(n - 1)] as! Int), Int(i))) > 1)) {
                        seq = (_append(seq, i) as! [Int])
                        done = true
                    }
                    i = Int((i + 1))
                }
                n = Int((n + 1))
            }
            ekg = (_append(ekg, seq) as! [[Int]])
            _ = printSlice((starts[s] as! Int), (seq as! [Int]))
            s = Int((s + 1))
        }
        var i: Int = 2
        var found: Bool = false
        while (i < limit) {
            if (((ekg[1][i] as! Int) == (ekg[2][i] as! Int)) && areSame((Array(ekg[1][0..<i]) as! [Int]), (Array(ekg[2][0..<i]) as! [Int]))) {
                print(_p(("\nEKG(5) and EKG(7) converge at term " + _p((i + 1)))))
                found = true
                break
            }
            i = Int((i + 1))
        }
        if (!found) {
            print(_p((("\nEKG5(5) and EKG(7) do not converge within " + _p(limit)) + " terms")))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
