// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:22:00 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func isPrime(_ n: Int) -> Bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    var d: Int = 5
    while ((d &* d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = Int((d &+ 2))
        if ((n % d) == 0) {
            return false
        }
        d = Int((d &+ 4))
    }
    return true
}
func commatize(_ n: Int) -> String {
    var s: String = String(describing: n)
    var i: Int = (Int(((s).count)) &- 3)
    while (i >= 1) {
        s = (((String(Array(s)[0..<i]) + ",") + String(Array(s)[i..<Int(((s).count))])) as! String)
        i = Int((i &- 3))
    }
    return s
}
func padLeft(_ s: String, _ w: Int) -> String {
    var out: String = s
    while (Int(((out).count)) < w) {
        out = ((" " + out) as! String)
    }
    return out
}
func padRight(_ s: String, _ w: Int) -> String {
    var out: String = s
    while (Int(((out).count)) < w) {
        out = ((out + " ") as! String)
    }
    return out
}
let limit = 42
func main() {
    var i: Int = limit
    var n: Int = 0
    while (n < limit) {
        if isPrime((i as! Int)) {
            n = Int((n &+ 1))
            let nStr = String(describing: padRight(String(describing: n), 2))
            let pStr = String(describing: padLeft(String(describing: commatize((i as! Int))), 19))
            print(_p(((("n = " + nStr) + "  ") + pStr)))
            i = Int(((i &+ i) &- 1))
        }
        i = Int((i &+ 1))
    }
}
_ = main()
