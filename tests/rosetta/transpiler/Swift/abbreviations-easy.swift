// Generated by Mochi transpiler v0.10.38 on 2025-07-24 13:10:01 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var s = s
    var words: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        let ch = String(String(Array(String(s))[Int(i)..<((Int(i) + 1) as! Int)]))
        if (((String(ch) == " ") || (String(ch) == "\n")) || (String(ch) == "\t")) {
            if (Int(((String(cur)).count)) > 0) {
                words = (((words as! [String]) + [String(cur)]) as! [String])
                cur = ""
            }
        } else {
            cur = ((String(cur) + String(ch)) as! String)
        }
        i = ((Int(i) + 1) as! Int)
    }
    if (Int(((String(cur)).count)) > 0) {
        words = (((words as! [String]) + [String(cur)]) as! [String])
    }
    return (words as! [String])
}
func padRight(_ s: String, _ width: Int) -> String {
    var s = s
    var width = width
    var out = String(s)
    var i = Int(((String(s)).count))
    while (Int(i) < Int(width)) {
        out = ((String(out) + " ") as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(out)
}
func join(_ xs: [String], _ sep: String) -> String {
    var xs = xs
    var sep = sep
    var res = ""
    var i = 0
    while (Int(i) < Int((((xs as! [String])).count))) {
        if (Int(i) > 0) {
            res = ((String(res) + String(sep)) as! String)
        }
        res = ((String(res) + String(xs[Int(i)])) as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(res)
}
func validate(_ commands: [String], _ words: [String], _ mins: [Int]) -> [String] {
    var commands = commands
    var words = words
    var mins = mins
    var results: [String] = ([] as! [String])
    if (Int((((words as! [String])).count)) == 0) {
        return (results as! [String])
    }
    var wi = 0
    while (Int(wi) < Int((((words as! [String])).count))) {
        let w = String(words[Int(wi)])
        var found = false
        let wlen = Int(((String(w)).count))
        var ci = 0
        while (Int(ci) < Int((((commands as! [String])).count))) {
            let cmd = String(commands[Int(ci)])
            if (((Int(mins[Int(ci)]) != 0) && (Int(wlen) >= Int(mins[Int(ci)]))) && (Int(wlen) <= Int(((String(cmd)).count)))) {
                let c = String((String(cmd).uppercased()))
                let ww = String((String(w).uppercased()))
                if (String(String(Array(String(c))[0..<Int(wlen)])) == String(ww)) {
                    results = (((results as! [String]) + [String(c)]) as! [String])
                    found = true
                    break
                }
            }
            ci = ((Int(ci) + 1) as! Int)
        }
        if (!(found as! Bool)) {
            results = (((results as! [String]) + ["*error*"]) as! [String])
        }
        wi = ((Int(wi) + 1) as! Int)
    }
    return (results as! [String])
}
func main() {
    let table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
    let commands = (fields(String(table)) as! [String])
    var mins: [Int] = ([] as! [Int])
    var i = 0
    while (Int(i) < Int((((commands as! [String])).count))) {
        var count = 0
        var j = 0
        let cmd = String(commands[Int(i)])
        while (Int(j) < Int(((String(cmd)).count))) {
            let ch = String(String(Array(String(cmd))[Int(j)..<((Int(j) + 1) as! Int)]))
            if ((String(ch) >= "A") && (String(ch) <= "Z")) {
                count = ((Int(count) + 1) as! Int)
            }
            j = ((Int(j) + 1) as! Int)
        }
        mins = (((mins as! [Int]) + [Int(count)]) as! [Int])
        i = ((Int(i) + 1) as! Int)
    }
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
    let words = (fields(String(sentence)) as! [String])
    let results = (validate((commands as! [String]), (words as! [String]), (mins as! [Int])) as! [String])
    var out1 = "user words:  "
    var k = 0
    while (Int(k) < Int((((words as! [String])).count))) {
        out1 = (((String(out1) + String(padRight(String(words[Int(k)]), Int(((String(results[Int(k)])).count))))) + " ") as! String)
        k = ((Int(k) + 1) as! Int)
    }
    print(String(out1))
    print(("full words:  " + String(join((results as! [String]), " "))))
}
main()
