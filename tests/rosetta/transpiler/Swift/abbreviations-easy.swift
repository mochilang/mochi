// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:08:49 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fields(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var cur = ""
        var i = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))
            if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
                if (Int(((cur).count)) > 0) {
                    words = ((words + [cur]) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + ch) as! String)
            }
            i = ((i + 1) as! Int)
        }
        if (Int(((cur).count)) > 0) {
            words = ((words + [cur]) as! [String])
        }
        return (words as! [String])
    }
    func padRight(_ s: String, _ width: Int) -> String {
        var out = (s as! String)
        var i = Int(((s).count))
        while (i < width) {
            out = ((out + " ") as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res = ""
        var i = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + String(describing: xs[i])) as! String)
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func validate(_ commands: [String], _ words: [String], _ mins: [Int]) -> [String] {
        var results: [String] = ([] as! [String])
        if (Int(((words).count)) == 0) {
            return (results as! [String])
        }
        var wi = 0
        while (wi < Int(((words).count))) {
            let w = String(describing: words[wi])
            var found = false
            let wlen = Int(((w).count))
            var ci = 0
            while (ci < Int(((commands).count))) {
                let cmd = String(describing: commands[ci])
                if (((Int(mins[ci]) != 0) && (wlen >= Int(mins[ci]))) && (wlen <= Int(((cmd).count)))) {
                    let c = String(describing: ((cmd as! String).uppercased()))
                    let ww = String(describing: ((w as! String).uppercased()))
                    if (String(describing: String(Array((c as! String))[0..<(wlen as! Int)])) == ww) {
                        results = ((results + [c]) as! [String])
                        found = true
                        break
                    }
                }
                ci = ((ci + 1) as! Int)
            }
            if (!found) {
                results = ((results + ["*error*"]) as! [String])
            }
            wi = ((wi + 1) as! Int)
        }
        return (results as! [String])
    }
    func main() {
        let table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
        let commands = (fields((table as! String)) as! [String])
        var mins: [Int] = ([] as! [Int])
        var i = 0
        while (i < Int(((commands).count))) {
            var count = 0
            var j = 0
            let cmd = String(describing: commands[i])
            while (j < Int(((cmd).count))) {
                let ch = String(describing: String(Array((cmd as! String))[(j as! Int)..<((j + 1) as! Int)]))
                if ((ch >= "A") && (ch <= "Z")) {
                    count = ((count + 1) as! Int)
                }
                j = ((j + 1) as! Int)
            }
            mins = ((mins + [count]) as! [Int])
            i = ((i + 1) as! Int)
        }
        let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
        let words = (fields((sentence as! String)) as! [String])
        let results = (validate((commands as! [String]), (words as! [String]), (mins as! [Int])) as! [String])
        var out1 = "user words:  "
        var k = 0
        while (k < Int(((words).count))) {
            out1 = (((out1 + String(describing: padRight(String(describing: words[k]), Int(((String(describing: results[k])).count))))) + " ") as! String)
            k = ((k + 1) as! Int)
        }
        print(out1)
        print(("full words:  " + String(describing: join((results as! [String]), " "))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
