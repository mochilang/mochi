// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:19:31 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var s = s
    var words: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (i < ((s).count)) {
        let ch = String(Array(s)[i..<(i + 1)])
        if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
            if (((cur).count) > 0) {
                words = ((words + [cur]) as! [String])
                cur = ""
            }
        } else {
            cur = ((cur + ch) as! String)
        }
        i = ((i + 1) as! Int)
    }
    if (((cur).count) > 0) {
        words = ((words + [cur]) as! [String])
    }
    return (words as! [String])
}
func padRight(_ s: String, _ width: Int) -> String {
    var s = s
    var width = width
    var out = s
    var i = ((s).count)
    while (i < width) {
        out = ((out + " ") as! String)
        i = ((i + 1) as! Int)
    }
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var xs = xs
    var sep = sep
    var res = ""
    var i = 0
    while (i < ((xs).count)) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + xs[i]) as! String)
        i = ((i + 1) as! Int)
    }
    return res
}
func validate(_ commands: [String], _ words: [String], _ mins: [Int]) -> [String] {
    var commands = commands
    var words = words
    var mins = mins
    var results: [String] = ([] as! [String])
    if (((words).count) == 0) {
        return (results as! [String])
    }
    var wi = 0
    while (wi < ((words).count)) {
        let w = words[wi]
        var found = false
        let wlen = ((w).count)
        var ci = 0
        while (ci < ((commands).count)) {
            let cmd = commands[ci]
            if (((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= ((cmd).count))) {
                let c = (cmd.uppercased())
                let ww = (w.uppercased())
                if (String(Array(c)[0..<wlen]) == ww) {
                    results = ((results + [c]) as! [String])
                    found = true
                    break
                }
            }
            ci = ((ci + 1) as! Int)
        }
        if (!found) {
            results = ((results + ["*error*"]) as! [String])
        }
        wi = ((wi + 1) as! Int)
    }
    return (results as! [String])
}
func main() {
    let table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
    let commands = fields(table)
    var mins: [Int] = ([] as! [Int])
    var i = 0
    while (i < ((commands).count)) {
        var count = 0
        var j = 0
        let cmd = commands[i]
        while (j < ((cmd).count)) {
            let ch = String(Array(cmd)[j..<(j + 1)])
            if ((ch >= "A") && (ch <= "Z")) {
                count = ((count + 1) as! Int)
            }
            j = ((j + 1) as! Int)
        }
        mins = ((mins + [count]) as! [Int])
        i = ((i + 1) as! Int)
    }
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
    let words = fields(sentence)
    let results = validate(commands, words, mins)
    var out1 = "user words:  "
    var k = 0
    while (k < ((words).count)) {
        out1 = (((out1 + padRight(words[k], ((results[k]).count))) + " ") as! String)
        k = ((k + 1) as! Int)
    }
    print(out1)
    print(("full words:  " + join(results, " ")))
}
main()
