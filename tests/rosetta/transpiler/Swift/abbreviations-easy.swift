// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:14 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var words: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (i < Int(((s).count))) {
        let ch = String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))
        if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
            if (Int(((cur).count)) > 0) {
                words = ((words + [cur]) as! [String])
                cur = ""
            }
        } else {
            cur = ((cur + ch) as! String)
        }
        i = ((i + 1) as! Int)
    }
    if (Int(((cur).count)) > 0) {
        words = ((words + [cur]) as! [String])
    }
    return (words as! [String])
}
func padRight(_ s: String, _ width: Int) -> String {
    var out = (s as! String)
    var i = Int(((s).count))
    while (i < width) {
        out = ((out + " ") as! String)
        i = ((i + 1) as! Int)
    }
    return (out as! String)
}
func join(_ xs: [String], _ sep: String) -> String {
    var res = ""
    var i = 0
    while (i < Int(((xs).count))) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + String(describing: xs[i])) as! String)
        i = ((i + 1) as! Int)
    }
    return (res as! String)
}
func validate(_ commands: [String], _ words: [String], _ mins: [Int]) -> [String] {
    var results: [String] = ([] as! [String])
    if (Int(((words).count)) == 0) {
        return (results as! [String])
    }
    var wi = 0
    while (wi < Int(((words).count))) {
        let w = String(describing: words[wi])
        var found = false
        let wlen = Int(((w).count))
        var ci = 0
        while (ci < Int(((commands).count))) {
            let cmd = String(describing: commands[ci])
            if (((Int(mins[ci]) != 0) && (wlen >= Int(mins[ci]))) && (wlen <= Int(((cmd).count)))) {
                let c = String(describing: ((cmd as! String).uppercased()))
                let ww = String(describing: ((w as! String).uppercased()))
                if (String(describing: String(Array((c as! String))[0..<(wlen as! Int)])) == ww) {
                    results = ((results + [c]) as! [String])
                    found = true
                    break
                }
            }
            ci = ((ci + 1) as! Int)
        }
        if (!found) {
            results = ((results + ["*error*"]) as! [String])
        }
        wi = ((wi + 1) as! Int)
    }
    return (results as! [String])
}
func main() {
    let table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
    let commands = (fields((table as! String)) as! [String])
    var mins: [Int] = ([] as! [Int])
    var i = 0
    while (i < Int(((commands).count))) {
        var count = 0
        var j = 0
        let cmd = String(describing: commands[i])
        while (j < Int(((cmd).count))) {
            let ch = String(describing: String(Array((cmd as! String))[(j as! Int)..<((j + 1) as! Int)]))
            if ((ch >= "A") && (ch <= "Z")) {
                count = ((count + 1) as! Int)
            }
            j = ((j + 1) as! Int)
        }
        mins = ((mins + [count]) as! [Int])
        i = ((i + 1) as! Int)
    }
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
    let words = (fields((sentence as! String)) as! [String])
    let results = (validate((commands as! [String]), (words as! [String]), (mins as! [Int])) as! [String])
    var out1 = "user words:  "
    var k = 0
    while (k < Int(((words).count))) {
        out1 = (((out1 + String(describing: padRight(String(describing: words[k]), Int(((String(describing: results[k])).count))))) + " ") as! String)
        k = ((k + 1) as! Int)
    }
    print(out1)
    print(("full words:  " + String(describing: join((results as! [String]), " "))))
}
_ = main()
