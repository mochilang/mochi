// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:11:35 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf3(_ s: String, _ ch: String, _ start: Int) -> Int {
        var i: Int = start
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func ord(_ ch: String) -> Int {
        let digits = "0123456789"
        var idx: Int = Int(indexOf3((digits as! String), (ch as! String), 0))
        if (idx >= 0) {
            return (48 &+ idx)
        }
        if (ch == "X") {
            return 88
        }
        if (ch == "é") {
            return 233
        }
        if (ch == "😍") {
            return 128525
        }
        if (ch == "🐡") {
            return 128033
        }
        return 0
    }
    func toHex(_ n: Int) -> String {
        let digits = "0123456789ABCDEF"
        if (n == 0) {
            return "0"
        }
        var v: Int = n
        var out: String = ""
        while (v > 0) {
            let d = (v % 16)
            out = ((String(Array(digits)[d..<(d &+ 1)]) + out) as! String)
            v = Int((v / 16))
        }
        return out
    }
    func analyze(_ s: String) {
        let le = Int(((s).count))
        print(_p((((("Analyzing \"" + s) + "\" which has a length of ") + _p(le)) + ":")))
        if (le > 1) {
            var i: Int = 0
            while (i < (le &- 1)) {
                var j: Int = (i &+ 1)
                while (j < le) {
                    if (String(describing: String(Array(String(describing: (s as! String)))[Int(j)..<Int((j &+ 1))])) == String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))) {
                        let ch = String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))
                        print(_p("  Not all characters in the string are unique."))
                        print(_p((((((((("  '" + ch) + "' (0x") + String(describing: (String(describing: toHex(Int(ord((ch as! String))))).lowercased()))) + ") is duplicated at positions ") + _p((i &+ 1))) + " and ") + _p((j &+ 1))) + ".\n")))
                        return
                    }
                    j = Int((j &+ 1))
                }
                i = Int((i &+ 1))
            }
        }
        print(_p("  All characters in the string are unique.\n"))
    }
    func main() {
        let strings: [String] = (["", ".", "abcABC", "XYZ ZYX", "1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ", "01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X", "hétérogénéité", "🎆🎃🎇🎈", "😍😀🙌💃😍🙌", "🐠🐟🐡🦈🐬🐳🐋🐡"] as! [String])
        var i: Int = 0
        while (i < Int(((strings).count))) {
            _ = analyze((strings[i] as! String))
            i = Int((i &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
