// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:59 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Vector {
        var x: Double
        var y: Double
        var z: Double
    }
    func add(_ a: Vector, _ b: Vector) -> Vector {
        return (Vector(x: (a.x + b.x), y: (a.y + b.y), z: (a.z + b.z)) as! Vector)
    }
    func sub(_ a: Vector, _ b: Vector) -> Vector {
        return (Vector(x: (a.x - b.x), y: (a.y - b.y), z: (a.z - b.z)) as! Vector)
    }
    func mul(_ v: Vector, _ s: Double) -> Vector {
        return (Vector(x: (v.x * s), y: (v.y * s), z: (v.z * s)) as! Vector)
    }
    func dot(_ a: Vector, _ b: Vector) -> Double {
        return Double((((a.x * b.x) + (a.y * b.y)) + (a.z * b.z)))
    }
    func intersectPoint(_ rv: Vector, _ rp: Vector, _ pn: Vector, _ pp: Vector) -> Vector {
        let diff = sub((rp as! Vector), (pp as! Vector))
        let prod1 = Double(dot((diff as! Vector), (pn as! Vector)))
        let prod2 = Double(dot((rv as! Vector), (pn as! Vector)))
        let prod3 = (prod1 / prod2)
        return (sub((rp as! Vector), (mul((rv as! Vector), Double(prod3)) as! Vector)) as! Vector)
    }
    func main() {
        let rv = Vector(x: 0.0, y: -1.0, z: -1.0)
        let rp = Vector(x: 0.0, y: 0.0, z: 10.0)
        let pn = Vector(x: 0.0, y: 0.0, z: 1.0)
        let pp = Vector(x: 0.0, y: 0.0, z: 5.0)
        let ip = intersectPoint((rv as! Vector), (rp as! Vector), (pn as! Vector), (pp as! Vector))
        print(_p((((((("The ray intersects the plane at (" + _p(ip.x)) + ", ") + _p(ip.y)) + ", ") + _p(ip.z)) + ")")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
