// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:00 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var creature: String = "shark"
var pointer: [String] = ([creature] as! [String])
print(_p(("creature = " + creature)))
print(_p("pointer = 0"))
print(_p(("*pointer = " + (pointer[0] as! String))))
pointer[0] = "jellyfish"
creature = (pointer[0] as! String)
print(_p(("*pointer = " + (pointer[0] as! String))))
print(_p(("creature = " + creature)))
