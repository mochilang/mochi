// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:12 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (((Int(((sep).count)) > 0) && ((i + Int(((sep).count))) <= Int(((s).count)))) && (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + Int(((sep).count))) as! Int)])) == sep)) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = ((i + Int(((sep).count))) as! Int)
            } else {
                cur = ((cur + String(Array(s)[i..<(i + 1)])) as! String)
                i = ((i + 1) as! Int)
            }
        }
        parts = (_append(parts, cur) as! [String])
        return (parts as! [String])
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + (xs[i] as! String)) as! String)
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func `repeat`(_ ch: String, _ n: Int) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < n) {
            out = ((out + ch) as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = (((n * 10) + (digits[String(Array(str)[i..<(i + 1)])] as! Any)) as! Int)
            i = ((i + 1) as! Int)
        }
        if neg {
            n = (-n as! Int)
        }
        return (n as! Int)
    }
    func toBinary(_ n: Int, _ bits: Int) -> String {
        var b: String = ""
        var val: Int = n
        var i: Int = 0
        while (i < bits) {
            b = ((_p((val % 2)) + b) as! String)
            val = ((val / 2) as! Int)
            i = ((i + 1) as! Int)
        }
        return (b as! String)
    }
    func binToInt(_ bits: String) -> Int {
        var n: Int = 0
        var i: Int = 0
        while (i < Int(((bits).count))) {
            n = (((n * 2) + Int(Int(String(describing: (String(Array(bits)[i..<(i + 1)]) as! String)))!)) as! Int)
            i = ((i + 1) as! Int)
        }
        return (n as! Int)
    }
    func padRight(_ s: String, _ width: Int) -> String {
        var out: String = s
        while (Int(((out).count)) < width) {
            out = ((out + " ") as! String)
        }
        return (out as! String)
    }
    func canonicalize(_ cidr: String) -> String {
        let parts: [String] = (split((cidr as! String), "/") as! [String])
        let dotted = (parts[0] as! String)
        let size = Int(Int(String(describing: (parts[1] as! String)))!)
        var binParts: [String] = ([] as! [String])
        for p in (split((dotted as! String), ".") as! [String]) {
            binParts = (_append(binParts, String(describing: toBinary(Int(Int(String(describing: (p as! String)))!), 8))) as! [String])
        }
        var binary: String = String(describing: join((binParts as! [String]), ""))
        binary = ((String(Array(binary)[0..<size]) + String(describing: _repeat("0", (32 - size)))) as! String)
        var canonParts: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((binary).count))) {
            canonParts = (_append(canonParts, _p(Int(binToInt((String(Array(binary)[i..<(i + 8)]) as! String))))) as! [String])
            i = ((i + 8) as! Int)
        }
        return (((String(describing: join((canonParts as! [String]), ".")) + "/") + (parts[1] as! String)) as! String)
    }
    let tests: [String] = ([("87.70.141.1/22" as! Any), ("36.18.154.103/12" as! Any), ("62.62.197.11/29" as! Any), ("67.137.119.181/4" as! Any), ("161.214.74.21/24" as! Any), ("184.232.176.184/18" as! Any)] as! [String])
    for t in tests {
        print(_p(((String(describing: padRight((t as! String), 18)) + " -> ") + String(describing: canonicalize((t as! String))))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
