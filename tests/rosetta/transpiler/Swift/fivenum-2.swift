// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:25 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func qsel(_ a: [Double], _ k: Int) -> Double {
        var k = k
        var arr: [Double] = a
        while (Int(((arr).count)) > 1) {
            var px: Int = (Int(_now()) % Int(((arr).count)))
            var pv: Double = Double(arr[px])
            let last = (Int(((arr).count)) - 1)
            let tmp = Double(arr[px])
            arr[px] = Double(arr[last])
            arr[last] = Double(tmp)
            px = 0
            var i: Int = 0
            while (i < last) {
                let v = Double(arr[i])
                if (v < pv) {
                    let t = Double(arr[px])
                    arr[px] = Double(arr[i])
                    arr[i] = Double(t)
                    px = ((px + 1) as! Int)
                }
                i = ((i + 1) as! Int)
            }
            arr[px] = Double(pv)
            if (px == k) {
                return Double(pv)
            }
            if (k < px) {
                arr = (Array(arr[0..<px]) as! [Double])
            } else {
                arr = (Array(arr[Int((px + 1))..<arr.count]) as! [Double])
                k = ((k - Int((px + 1))) as! Int)
            }
        }
        return Double(arr[0])
    }
    func fivenum(_ a: [Double]) -> [Double] {
        let last = (Int(((a).count)) - 1)
        let m = (last / 2)
        var n5: [Double] = ([] as! [Double])
        n5 = (_append(n5, Double(qsel((Array(a[0..<m]) as! [Double]), 0))) as! [Double])
        n5 = (_append(n5, Double(qsel((Array(a[0..<m]) as! [Double]), ((Int(((a).count)) / 4) as! Int)))) as! [Double])
        n5 = (_append(n5, Double(qsel((a as! [Double]), (m as! Int)))) as! [Double])
        var arr2: [Double] = (Array(a[m..<a.count]) as! [Double])
        let q3 = ((last - m) - (Int(((a).count)) / 4))
        n5 = (_append(n5, Double(qsel((arr2 as! [Double]), (q3 as! Int)))) as! [Double])
        arr2 = (Array(arr2[q3..<arr2.count]) as! [Double])
        n5 = (_append(n5, Double(qsel((arr2 as! [Double]), ((Int(((arr2).count)) - 1) as! Int)))) as! [Double])
        return (n5 as! [Double])
    }
    let x1: [Double] = ([36.0, 40.0, 7.0, 39.0, 41.0, 15.0] as! [Double])
    let x2: [Double] = ([15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0] as! [Double])
    let x3: [Double] = ([0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578] as! [Double])
    print(_p(_p((fivenum((x1 as! [Double])) as! [Double]))))
    print(_p(_p((fivenum((x2 as! [Double])) as! [Double]))))
    print(_p(_p((fivenum((x3 as! [Double])) as! [Double]))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
