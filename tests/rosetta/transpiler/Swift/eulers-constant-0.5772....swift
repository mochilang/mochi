// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:30 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ln(_ x: Double) -> Double {
        var k: Double = 0.0
        var v: Double = x
        while (v >= 2.0) {
            v = Double((v / 2.0))
            k = Double((k + 1.0))
        }
        while (v < 1.0) {
            v = Double((v * 2.0))
            k = Double((k - 1.0))
        }
        let z = (Double((v - 1.0)) / Double((v + 1.0)))
        var zpow: Double = z
        var sum: Double = z
        var i: Int = 3
        while (i <= 9) {
            zpow = Double(((zpow * z) * z))
            sum = Double((sum + (zpow / Double(i))))
            i = Int((i + 2))
        }
        let ln2 = 0.6931471805599453
        return Double((Double((k * ln2)) + (2.0 * sum)))
    }
    func harmonic(_ n: Int) -> Double {
        var sum: Double = 0.0
        var i: Int = 1
        while (i <= n) {
            sum = Double((sum + (1.0 / Double(i))))
            i = Int((i + 1))
        }
        return Double(sum)
    }
    func main() {
        let n = 100000
        let gamma = (Double(harmonic(Int(n))) - Double(ln(Double(n))))
        print(_p(_p(gamma)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
