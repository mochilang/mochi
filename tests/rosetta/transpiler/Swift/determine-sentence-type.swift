// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:12:21 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))])) == ch) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + (xs[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func sentenceType(_ s: String) -> String {
        if (Int(((s).count)) == 0) {
            return ""
        }
        var types: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))
            if (ch == "?") {
                types = (_append(types, "Q") as! [String])
            } else if (ch == "!") {
                types = (_append(types, "E") as! [String])
            } else if (ch == ".") {
                types = (_append(types, "S") as! [String])
            }
            
            
            i = Int((i &+ 1))
        }
        let last = String(describing: String(Array(String(describing: (s as! String)))[Int((Int(((s).count)) &- 1))..<Int(((s).count))]))
        if (Int((String(describing: "?!.").firstIndex(of: Character(String(describing: (last as! String))))?.utf16Offset(in: String(describing: "?!.") ) ?? -1)) == Int(-1)) {
            types = (_append(types, "N") as! [String])
        }
        return String(describing: join((types as! [String]), "|"))
    }
    func main() {
        var s: String = "hi there, how are you today? I'd like to present to you the washing machine 9001. You have been nominated to win one of these! Just make sure you don't break it"
        var result: String = String(describing: sentenceType((s as! String)))
        print(_p(result))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
