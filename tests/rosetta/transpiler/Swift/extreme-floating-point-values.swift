// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:53 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func makeInf() -> Double {
        var x: Double = 1.0
        var i: Int = 0
        while (i < 400) {
            x = Double((x * 10.0))
            i = Int((i + 1))
        }
        return Double(x)
    }
    func makeMax() -> Double {
        var x: Double = 1.0
        var i: Int = 0
        while (i < 308) {
            x = Double((x * 10.0))
            i = Int((i + 1))
        }
        return Double(x)
    }
    func isNaN(_ x: Double) -> Bool {
        return (x != x)
    }
    func validateNaN(_ n: Double, _ op: String) {
        if isNaN(Double(n)) {
            print(_p((op + " -> NaN")))
        } else {
            print(_p("!!! Expected NaN from"), _p(op), _p(" Found"), _p(n))
        }
    }
    func validateZero(_ n: Double, _ op: String) {
        if (n == 0) {
            print(_p((op + " -> 0")))
        } else {
            print(_p("!!! Expected 0 from"), _p(op), _p(" Found"), _p(n))
        }
    }
    func validateGT(_ a: Double, _ b: Double, _ op: String) {
        if (a > b) {
            print(_p(op))
        } else {
            print(_p("!!! Expected"), _p(op), _p(" Found not true."))
        }
    }
    func validateNE(_ a: Double, _ b: Double, _ op: String) {
        if (a == b) {
            print(_p("!!! Expected"), _p(op), _p(" Found not true."))
        } else {
            print(_p(op))
        }
    }
    func validateEQ(_ a: Double, _ b: Double, _ op: String) {
        if (a == b) {
            print(_p(op))
        } else {
            print(_p("!!! Expected"), _p(op), _p(" Found not true."))
        }
    }
    func main() {
        let negZero = -0.0
        let posInf = Double(makeInf())
        let negInf = -posInf
        let nan = (posInf / posInf)
        let maxVal = Double(makeMax())
        print(_p(negZero), _p(posInf), _p(negInf), _p(nan))
        print(_p(negZero), _p(posInf), _p(negInf), _p(nan))
        print(_p(""))
        _ = validateNaN(Double((negInf + posInf)), "-Inf + Inf")
        _ = validateNaN(Double((0.0 * posInf)), "0 * Inf")
        _ = validateNaN(Double((posInf / posInf)), "Inf / Inf")
        _ = validateNaN(Double((posInf.truncatingRemainder(dividingBy: 1.0))), "Inf % 1")
        _ = validateNaN(Double((1.0 + nan)), "1 + NaN")
        _ = validateZero(Double((1.0 / posInf)), "1 / Inf")
        _ = validateGT(Double(posInf), Double(maxVal), "Inf > max value")
        _ = validateGT(Double(-maxVal), Double(negInf), "-Inf < max neg value")
        _ = validateNE(Double(nan), Double(nan), "NaN != NaN")
        _ = validateEQ(Double(negZero), 0.0, "-0 == 0")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
