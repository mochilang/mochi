// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:41:48 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = (Int(_now()) % 2147483647)
    func randN(_ n: Int) -> Int {
        seed = Int((Int(((seed * 1664525) + 1013904223)) % 2147483647))
        return Int((seed % n))
    }
    func eqIndices(_ xs: [Int]) -> [Int] {
        var r: Int = 0
        var i: Int = 0
        while (i < Int(((xs).count))) {
            r = Int((r + (xs[i] as! Int)))
            i = Int((i + 1))
        }
        var l: Int = 0
        var eq: [Int] = ([] as! [Int])
        i = 0
        while (i < Int(((xs).count))) {
            r = Int((r - (xs[i] as! Int)))
            if (l == r) {
                eq = (_append(eq, i) as! [Int])
            }
            l = Int((l + (xs[i] as! Int)))
            i = Int((i + 1))
        }
        return (eq as! [Int])
    }
    func main() {
        print(_p("[" + (eqIndices(([-7, 1, 5, 2, -4, 3, 0] as! [Int])) as! [Int]).map{ String(describing: $0) }.joined(separator: ",") + "]"))
        var verylong: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < 10000) {
            seed = Int((Int(((seed * 1664525) + 1013904223)) % 2147483647))
            verylong = (_append(verylong, ((seed % 1001) - 500)) as! [Int])
            i = Int((i + 1))
        }
        print(_p("[" + (eqIndices((verylong as! [Int])) as! [Int]).map{ String(describing: $0) }.joined(separator: ",") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
