// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:59:35 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func randInt(_ s: Int, _ n: Int) -> [Int] {
        let next = (Int(((s * 1664525) + 1013904223)) % 2147483647)
        return ([next, (next % n)] as! [Int])
    }
    func padLeft(_ s: String, _ w: Int) -> String {
        var res: String = ""
        var n: Int = (w - Int(((s).count)))
        while (n > 0) {
            res = String((res + " "))
            n = Int((n - 1))
        }
        return String((res + s))
    }
    func makeSeq(_ s: Int, _ le: Int) -> [Any] {
        var s = s
        let bases = "ACGT"
        var out: String = ""
        var i: Int = 0
        while (i < le) {
            var r: [Int] = (randInt(Int(s), 4) as! [Int])
            s = (r[0] as! Int)
            let idx = (r[1] as! Int)
            out = String((out + String(describing: String(Array(String(describing: String(bases)))[Int(idx)..<Int((idx + 1))]))))
            i = Int((i + 1))
        }
        return ([s, out] as! [Any])
    }
    func mutate(_ s: Int, _ dna: String, _ w: [Int]) -> [Any] {
        var s = s
        let bases = "ACGT"
        let le = Int(((dna).count))
        var r: [Int] = (randInt(Int(s), Int(le)) as! [Int])
        s = (r[0] as! Int)
        let p = (r[1] as! Int)
        r = (randInt(Int(s), 300) as! [Int])
        s = (r[0] as! Int)
        let x = (r[1] as! Int)
        var arr: [String] = ([] as! [String])
        var i: Int = 0
        while (i < le) {
            arr = ((arr + [String(describing: String(Array(String(describing: String(dna)))[Int(i)..<Int((i + 1))]))]) as! [String])
            i = Int((i + 1))
        }
        if (x < (w[0] as! Int)) {
            r = (randInt(Int(s), 4) as! [Int])
            s = (r[0] as! Int)
            let idx = (r[1] as! Int)
            let b = String(describing: String(Array(String(describing: String(bases)))[Int(idx)..<Int((idx + 1))]))
            print(_p((((((("  Change @" + String(describing: padLeft(String(_p(p)), 3))) + " '") + (arr[p] as! String)) + "' to '") + b) + "'")))
            arr[p] = String(b)
        } else if (x < ((w[0] as! Int) + (w[1] as! Int))) {
            print(_p((((("  Delete @" + String(describing: padLeft(String(_p(p)), 3))) + " '") + (arr[p] as! String)) + "'")))
            var j: Int = p
            while (j < (Int(((arr).count)) - 1)) {
                arr[j] = (arr[(j + 1)] as! String)
                j = Int((j + 1))
            }
            arr = (Array(arr[0..<(Int(((arr).count)) - 1)]) as! [String])
        } else {
            r = (randInt(Int(s), 4) as! [Int])
            s = (r[0] as! Int)
            let idx2 = (r[1] as! Int)
            let b = String(describing: String(Array(String(describing: String(bases)))[Int(idx2)..<Int((idx2 + 1))]))
            arr = ((arr + [""]) as! [String])
            var j: Int = (Int(((arr).count)) - 1)
            while (j > p) {
                arr[j] = (arr[(j - 1)] as! String)
                j = Int((j - 1))
            }
            print(_p((((("  Insert @" + String(describing: padLeft(String(_p(p)), 3))) + " '") + b) + "'")))
            arr[p] = String(b)
        }
        
        var out: String = ""
        i = 0
        while (i < Int(((arr).count))) {
            out = String((out + (arr[i] as! String)))
            i = Int((i + 1))
        }
        return ([s, out] as! [Any])
    }
    func prettyPrint(_ dna: String, _ rowLen: Int) {
        print(_p("SEQUENCE:"))
        let le = Int(((dna).count))
        var i: Int = 0
        while (i < le) {
            var k: Int = (i + rowLen)
            if (k > le) {
                k = Int(le)
            }
            print(_p(((String(describing: padLeft(String(_p(i)), 5)) + ": ") + String(Array(dna)[i..<k]))))
            i = Int((i + rowLen))
        }
        var a: Int = 0
        var c: Int = 0
        var g: Int = 0
        var t: Int = 0
        var idx: Int = 0
        while (idx < le) {
            let ch = String(describing: String(Array(String(describing: String(dna)))[Int(idx)..<Int((idx + 1))]))
            if (ch == "A") {
                a = Int((a + 1))
            } else {
                if (ch == "C") {
                    c = Int((c + 1))
                } else {
                    if (ch == "G") {
                        g = Int((g + 1))
                    } else {
                        if (ch == "T") {
                            t = Int((t + 1))
                        }
                    }
                }
            }
            idx = Int((idx + 1))
        }
        print(_p(""))
        print(_p("BASE COUNT:"))
        print(_p(("    A: " + String(describing: padLeft(String(_p(a)), 3)))))
        print(_p(("    C: " + String(describing: padLeft(String(_p(c)), 3)))))
        print(_p(("    G: " + String(describing: padLeft(String(_p(g)), 3)))))
        print(_p(("    T: " + String(describing: padLeft(String(_p(t)), 3)))))
        print(_p("    ------"))
        print(_p(("    Î£: " + _p(le))))
        print(_p("    ======"))
    }
    func wstring(_ w: [Int]) -> String {
        return String((((((("  Change: " + _p((w[0] as! Int))) + "\n  Delete: ") + _p((w[1] as! Int))) + "\n  Insert: ") + _p((w[2] as! Int))) + "\n"))
    }
    func main() {
        var seed: Int = 1
        var res: [Any] = (makeSeq(Int(seed), 250) as! [Any])
        seed = ((res as! [Any])[0] as! Int)
        var dna: String = ((res as! [Any])[1] as! String)
        _ = prettyPrint(String(dna), 50)
        let muts = 10
        let w = ([100, 100, 100] as! [Int])
        print(_p("\nWEIGHTS (ex 300):"))
        print(_p(String(describing: wstring((w as! [Int])))))
        print(_p((("MUTATIONS (" + _p(muts)) + "):")))
        var i: Int = 0
        while (i < muts) {
            res = (mutate(Int(seed), String(dna), (w as! [Int])) as! [Any])
            seed = ((res as! [Any])[0] as! Int)
            dna = ((res as! [Any])[1] as! String)
            i = Int((i + 1))
        }
        print(_p(""))
        _ = prettyPrint(String(dna), 50)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
