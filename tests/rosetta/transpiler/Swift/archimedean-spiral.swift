// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:03:49 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func sinApprox(_ x: Double) -> Double {
        var term = x
        var sum = x
        var n = 1
        while (n <= 10) {
            let denom = ((Int((2 * n)) * Int(((2 * n) + 1))) as! Double)
            term = ((((-term * x) * x) / denom) as! Double)
            sum = ((sum + term) as! Double)
            n = ((n + 1) as! Int)
        }
        return (sum as! Double)
    }
    func cosApprox(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n <= 10) {
            let denom = ((Int(((2 * n) - 1)) * Int((2 * n))) as! Double)
            term = ((((-term * x) * x) / denom) as! Double)
            sum = ((sum + term) as! Double)
            n = ((n + 1) as! Int)
        }
        return (sum as! Double)
    }
    let degreesIncr = ((0.1 * PI) / 180.0)
    let turns = 2.0
    let stop = (((360.0 * turns) * 10.0) * degreesIncr)
    let width = 600.0
    let centre = (width / 2.0)
    let a = 1.0
    let b = 20.0
    var theta = 0.0
    var count = 0
    while (theta < stop) {
        let r = (a + (b * theta))
        let x = (r * Double(cosApprox((theta as! Double))))
        let y = (r * Double(sinApprox((theta as! Double))))
        if ((count % 100) == 0) {
            print(((String(describing: (centre + x)) + ",") + String(describing: (centre - y))))
        }
        theta = ((theta + degreesIncr) as! Double)
        count = ((count + 1) as! Int)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
