// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:23:27 GMT+7
import Foundation

let PI = 3.141592653589793
func sinApprox(_ x: Double) -> Double {
    var term = x
    var sum = x
    var n = 1
    while (n <= 10) {
        let denom = Double(((2 * n) * ((2 * n) + 1)))
        term = ((((-term * x) * x) / denom) as! Double)
        sum = ((sum + term) as! Double)
        n = ((n + 1) as! Int)
    }
    return (sum as! Double)
}
func cosApprox(_ x: Double) -> Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while (n <= 10) {
        let denom = Double((((2 * n) - 1) * (2 * n)))
        term = ((((-term * x) * x) / denom) as! Double)
        sum = ((sum + term) as! Double)
        n = ((n + 1) as! Int)
    }
    return (sum as! Double)
}
let degreesIncr = ((0.1 * PI) / 180.0)
let turns = 2.0
let stop = (((360.0 * turns) * 10.0) * degreesIncr)
let width = 600.0
let centre = (width / 2.0)
let a = 1.0
let b = 20.0
var theta = 0.0
var count = 0
while (theta < stop) {
    let r = (a + (b * theta))
    let x = (r * cosApprox((theta as! Double)))
    let y = (r * sinApprox((theta as! Double)))
    if ((count % 100) == 0) {
        print(((String(describing: (centre + x)) + ",") + String(describing: (centre - y))))
    }
    theta = ((theta + degreesIncr) as! Double)
    count = ((count + 1) as! Int)
}
