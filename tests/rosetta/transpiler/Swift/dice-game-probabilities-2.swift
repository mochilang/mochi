// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:32:18 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func roll(_ nDice: Int, _ nSides: Int) -> Int {
        var sum: Int = 0
        var i: Int = 0
        while (i < nDice) {
            sum = Int(((sum + Int((Int(_now()) % nSides))) + 1))
            i = Int((i + 1))
        }
        return Int(sum)
    }
    func beats(_ n1: Int, _ s1: Int, _ n2: Int, _ s2: Int, _ trials: Int) -> Double {
        var wins: Int = 0
        var i: Int = 0
        while (i < trials) {
            if (Int(roll(Int(n1), Int(s1))) > Int(roll(Int(n2), Int(s2)))) {
                wins = Int((wins + 1))
            }
            i = Int((i + 1))
        }
        return Double((Double(wins) / Double(trials)))
    }
    print(_p(_p(Double(beats(9, 4, 6, 6, 1000)))))
    print(_p(_p(Double(beats(5, 10, 7, 6, 1000)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
