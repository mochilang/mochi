// Generated by Mochi transpiler v0.10.38 on 2025-07-24 08:25:04 GMT+7
import Foundation

func bigTrim(_ a: [Int]) -> [Int] {
    var a = a
    var n = Int((((a as! [Int])).count))
    while ((Int(n) > 1) && (Int(a[(Int(n) - 1)]) == 0)) {
        a = (Array(a[0..<(Int(n) - 1)]) as! [Int])
        n = ((Int(n) - 1) as! Int)
    }
    return (a as! [Int])
}
func bigFromInt(_ x: Int) -> [Int] {
    var x = x
    if (Int(x) == 0) {
        return ([0] as! [Int])
    }
    var digits: [Int] = ([] as! [Int])
    var n = Int(x)
    while (Int(n) > 0) {
        digits = (((digits as! [Int]) + [(Int(n) % 10)]) as! [Int])
        n = ((Int(n) / 10) as! Int)
    }
    return (digits as! [Int])
}
func bigAdd(_ a: [Int], _ b: [Int]) -> [Int] {
    var a = a
    var b = b
    var res: [Int] = ([] as! [Int])
    var carry = 0
    var i = 0
    while (((Int(i) < Int((((a as! [Int])).count))) || (Int(i) < Int((((b as! [Int])).count)))) || (Int(carry) > 0)) {
        var av = 0
        if (Int(i) < Int((((a as! [Int])).count))) {
            av = Int(a[Int(i)])
        }
        var bv = 0
        if (Int(i) < Int((((b as! [Int])).count))) {
            bv = Int(b[Int(i)])
        }
        var s = (((Int(av) + Int(bv)) + Int(carry)) as! Int)
        res = (((res as! [Int]) + [(Int(s) % 10)]) as! [Int])
        carry = ((Int(s) / 10) as! Int)
        i = ((Int(i) + 1) as! Int)
    }
    return (bigTrim((res as! [Int])) as! [Int])
}
func bigSub(_ a: [Int], _ b: [Int]) -> [Int] {
    var a = a
    var b = b
    var res: [Int] = ([] as! [Int])
    var borrow = 0
    var i = 0
    while (Int(i) < Int((((a as! [Int])).count))) {
        var av = Int(a[Int(i)])
        var bv = 0
        if (Int(i) < Int((((b as! [Int])).count))) {
            bv = Int(b[Int(i)])
        }
        var diff = (((Int(av) - Int(bv)) - Int(borrow)) as! Int)
        if (Int(diff) < 0) {
            diff = ((Int(diff) + 10) as! Int)
            borrow = 1
        } else {
            borrow = 0
        }
        res = (((res as! [Int]) + [Int(diff)]) as! [Int])
        i = ((Int(i) + 1) as! Int)
    }
    return (bigTrim((res as! [Int])) as! [Int])
}
func bigToString(_ a: [Int]) -> String {
    var a = a
    var s = ""
    var i = ((Int((((a as! [Int])).count)) - 1) as! Int)
    while (Int(i) >= 0) {
        s = ((String(s) + String(String(describing: Int(a[Int(i)])))) as! String)
        i = ((Int(i) - 1) as! Int)
    }
    return String(s)
}
func minInt(_ a: Int, _ b: Int) -> Int {
    var a = a
    var b = b
    if (Int(a) < Int(b)) {
        return Int(a)
    } else {
        return Int(b)
    }
}
func cumu(_ n: Int) -> [[Int]] {
    var n = n
    var cache: [[[Int]]] = ([([(bigFromInt(1) as! [Int])] as! [[Int]])] as! [[[Int]]])
    var y = 1
    while (Int(y) <= Int(n)) {
        var row: [[Int]] = ([(bigFromInt(0) as! [Int])] as! [[Int]])
        var x = 1
        while (Int(x) <= Int(y)) {
            let val = (cache[(Int(y) - Int(x))][Int(minInt(Int(x), ((Int(y) - Int(x)) as! Int)))] as! [Int])
            row = (((row as! [[Int]]) + [(bigAdd((row[(Int((((row as! [[Int]])).count)) - 1)] as! [Int]), (val as! [Int])) as! [Int])]) as! [[Int]])
            x = ((Int(x) + 1) as! Int)
        }
        cache = (((cache as! [[[Int]]]) + [(row as! [[Int]])]) as! [[[Int]]])
        y = ((Int(y) + 1) as! Int)
    }
    return (cache[Int(n)] as! [[Int]])
}
func row(_ n: Int) -> [String] {
    var n = n
    let e = (cumu(Int(n)) as! [[Int]])
    var out: [String] = ([] as! [String])
    var i = 0
    while (Int(i) < Int(n)) {
        let diff = (bigSub((e[(Int(i) + 1)] as! [Int]), (e[Int(i)] as! [Int])) as! [Int])
        out = (((out as! [String]) + [String(bigToString((diff as! [Int])))]) as! [String])
        i = ((Int(i) + 1) as! Int)
    }
    return (out as! [String])
}
print("rows:")
var x = 1
while (Int(x) < 11) {
    let r = (row(Int(x)) as! [String])
    var line = ""
    var i = 0
    while (Int(i) < Int((((r as! [String])).count))) {
        line = ((((String(line) + " ") + String(r[Int(i)])) + " ") as! String)
        i = ((Int(i) + 1) as! Int)
    }
    print(String(line))
    x = ((Int(x) + 1) as! Int)
}
print("")
print("sums:")
for num in ([23, 123, 1234] as! [Int]) {
    let r = (cumu((num as! Int)) as! [[Int]])
    print(((String(String(describing: num)) + " ") + String(bigToString((r[(Int((((r as! [[Int]])).count)) - 1)] as! [Int])))))
}
