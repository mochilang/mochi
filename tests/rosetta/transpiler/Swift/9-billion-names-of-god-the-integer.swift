// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:15:52 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bigTrim(_ a: inout [Int]) -> [Int] {
        var n: Int = Int(((a).count))
        while ((n > 1) && (Int(a[(n &- 1)]) == 0)) {
            a = (Array(a[0..<(n &- 1)]) as! [Int])
            n = Int((n &- 1))
        }
        return a
    }
    func bigFromInt(_ x: Int) -> [Int] {
        if (x == 0) {
            return ([0] as! [Int])
        }
        var digits: [Int] = ([] as! [Int])
        var n: Int = x
        while (n > 0) {
            digits = (_append(digits, (n % 10)) as! [Int])
            n = Int((n / 10))
        }
        return digits
    }
    func bigAdd(_ a: [Int], _ b: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var carry: Int = 0
        var i: Int = 0
        while (((i < Int(((a).count))) || (i < Int(((b).count)))) || (carry > 0)) {
            var av: Int = 0
            if (i < Int(((a).count))) {
                av = Int(a[i])
            }
            var bv: Int = 0
            if (i < Int(((b).count))) {
                bv = Int(b[i])
            }
            var s: Int = ((av &+ bv) &+ carry)
            res = (_append(res, (s % 10)) as! [Int])
            carry = Int((s / 10))
            i = Int((i &+ 1))
        }
        return (bigTrim(&res) as! [Int])
    }
    func bigSub(_ a: [Int], _ b: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var borrow: Int = 0
        var i: Int = 0
        while (i < Int(((a).count))) {
            var av: Int = Int(a[i])
            var bv: Int = 0
            if (i < Int(((b).count))) {
                bv = Int(b[i])
            }
            var diff: Int = ((av &- bv) &- borrow)
            if (diff < 0) {
                diff = Int((diff &+ 10))
                borrow = 1
            } else {
                borrow = 0
            }
            res = (_append(res, diff) as! [Int])
            i = Int((i &+ 1))
        }
        return (bigTrim(&res) as! [Int])
    }
    func bigToString(_ a: [Int]) -> String {
        var s: String = ""
        var i: Int = (Int(((a).count)) &- 1)
        while (i >= 0) {
            s = ((s + String(describing: Int(a[i]))) as! String)
            i = Int((i &- 1))
        }
        return s
    }
    func minInt(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return a
        } else {
            return b
        }
    }
    func cumu(_ n: Int) -> [[Int]] {
        var cache: [[[Int]]] = ([([(bigFromInt(1) as! [Int])] as! [[Int]])] as! [[[Int]]])
        var y: Int = 1
        while (y <= n) {
            var row: [[Int]] = ([(bigFromInt(0) as! [Int])] as! [[Int]])
            var x: Int = 1
            while (x <= y) {
                let val: [Int] = (cache[(y &- x)][Int(minInt(Int(x), Int((y &- x))))] as! [Int])
                row = (_append(row, (bigAdd((row[(Int(((row).count)) &- 1)] as! [Int]), (val as! [Int])) as! [Int])) as! [[Int]])
                x = Int((x &+ 1))
            }
            cache = (_append(cache, row) as! [[[Int]]])
            y = Int((y &+ 1))
        }
        return (cache[n] as! [[Int]])
    }
    func row(_ n: Int) -> [String] {
        let e: [[Int]] = (cumu(Int(n)) as! [[Int]])
        var out: [String] = ([] as! [String])
        var i: Int = 0
        while (i < n) {
            let diff: [Int] = (bigSub((e[(i &+ 1)] as! [Int]), (e[i] as! [Int])) as! [Int])
            out = (_append(out, String(describing: bigToString((diff as! [Int])))) as! [String])
            i = Int((i &+ 1))
        }
        return out
    }
    print(_p("rows:"))
    var x: Int = 1
    while (x < 11) {
        let r: [String] = (row(Int(x)) as! [String])
        var line: String = ""
        var i: Int = 0
        while (i < Int(((r).count))) {
            line = ((((line + " ") + (r[i] as! String)) + " ") as! String)
            i = Int((i &+ 1))
        }
        print(_p(line))
        x = Int((x &+ 1))
    }
    print(_p(""))
    print(_p("sums:"))
    for num in ([23, 123, 1234] as! [Int]) {
        let r: [[Int]] = (cumu(Int(num)) as! [[Int]])
        print(_p(((String(describing: num) + " ") + String(describing: bigToString((r[(Int(((r).count)) &- 1)] as! [Int]))))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
