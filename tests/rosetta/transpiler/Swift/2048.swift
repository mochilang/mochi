// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:13:30 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
let SIZE = 4
struct Board {
    var cells: [[Int]]
}
struct SpawnResult {
    var board: Board
    var full: Bool
}
struct SlideResult {
    var row: [Int]
    var gain: Int
}
struct MoveResult {
    var board: Board
    var score: Int
    var moved: Bool
}
func newBoard() -> Board {
    var b: [[Int]] = ([] as! [[Int]])
    var y = 0
    while (y < SIZE) {
        var row: [Int] = ([] as! [Int])
        var x = 0
        while (x < SIZE) {
            row = ((row + [0]) as! [Int])
            x = ((x + 1) as! Int)
        }
        b = ((b + [row]) as! [[Int]])
        y = ((y + 1) as! Int)
    }
    return (Board(cells: b) as! Board)
}
func spawnTile(_ b: Board) -> SpawnResult {
    var grid = (b.cells as! [[Int]])
    var empty: [[Int]] = ([] as! [[Int]])
    var y = 0
    while (y < SIZE) {
        var x = 0
        while (x < SIZE) {
            if (Int(grid[y][x]) == 0) {
                empty = ((empty + [([x, y] as! [Int])]) as! [[Int]])
            }
            x = ((x + 1) as! Int)
        }
        y = ((y + 1) as! Int)
    }
    if (Int(((empty).count)) == 0) {
        return (SpawnResult(board: b, full: true) as! SpawnResult)
    }
    var idx = ((Int(_now()) % Int(((empty).count))) as! Int)
    let cell = (empty[idx] as! [Int])
    var val = 4
    if ((Int(_now()) % 10) < 9) {
        val = 2
    }
    grid[Int(cell[1])][Int(cell[0])] = (val as! Int)
    return (SpawnResult(board: Board(cells: grid), full: (Int(((empty).count)) == 1)) as! SpawnResult)
}
func pad(_ n: Int) -> String {
    var s = String(String(describing: n))!
    var pad = ((4 - Int(((s).count))) as! Int)
    var i = 0
    var out = ""
    while (i < pad) {
        out = ((out + " ") as! String)
        i = ((i + 1) as! Int)
    }
    return ((out + s) as! String)
}
func draw(_ b: Board, _ score: Int) {
    print(("Score: " + String(describing: score)))
    var y = 0
    while (y < SIZE) {
        print("+----+----+----+----+")
        var line = "|"
        var x = 0
        while (x < SIZE) {
            var v = Int(b.cells[y][x])
            if (v == 0) {
                line = ((line + "    |") as! String)
            } else {
                line = (((line + String(describing: pad((v as! Int)))) + "|") as! String)
            }
            x = ((x + 1) as! Int)
        }
        print(line)
        y = ((y + 1) as! Int)
    }
    print("+----+----+----+----+")
    print("W=Up S=Down A=Left D=Right Q=Quit")
}
func reverseRow(_ r: [Int]) -> [Int] {
    var out: [Int] = ([] as! [Int])
    var i = ((Int(((r).count)) - 1) as! Int)
    while (i >= 0) {
        out = ((out + [Int(r[i])]) as! [Int])
        i = ((i - 1) as! Int)
    }
    return (out as! [Int])
}
func slideLeft(_ row: [Int]) -> SlideResult {
    var xs: [Int] = ([] as! [Int])
    var i = 0
    while (i < Int(((row).count))) {
        if (Int(row[i]) != 0) {
            xs = ((xs + [Int(row[i])]) as! [Int])
        }
        i = ((i + 1) as! Int)
    }
    var res: [Int] = ([] as! [Int])
    var gain = 0
    i = 0
    while (i < Int(((xs).count))) {
        if (((i + 1) < Int(((xs).count))) && (Int(xs[i]) == Int(xs[(i + 1)]))) {
            let v = (Int(xs[i]) * 2)
            gain = ((gain + v) as! Int)
            res = ((res + [v]) as! [Int])
            i = ((i + 2) as! Int)
        } else {
            res = ((res + [Int(xs[i])]) as! [Int])
            i = ((i + 1) as! Int)
        }
    }
    while (Int(((res).count)) < SIZE) {
        res = ((res + [0]) as! [Int])
    }
    return (SlideResult(row: res, gain: gain) as! SlideResult)
}
func moveLeft(_ b: Board, _ score: Int) -> MoveResult {
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var y = 0
    while (y < SIZE) {
        let r = slideLeft((grid[y] as! [Int]))
        let new = r.row
        score = ((score + r.gain) as! Int)
        var x = 0
        while (x < SIZE) {
            if (Int(grid[y][x]) != Int(new[x])) {
                moved = true
            }
            grid[y][x] = Int(new[x])
            x = ((x + 1) as! Int)
        }
        y = ((y + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: grid), score: score, moved: moved) as! MoveResult)
}
func moveRight(_ b: Board, _ score: Int) -> MoveResult {
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var y = 0
    while (y < SIZE) {
        var rev = (reverseRow((grid[y] as! [Int])) as! [Int])
        let r = slideLeft((rev as! [Int]))
        rev = (r.row as! [Int])
        score = ((score + r.gain) as! Int)
        rev = (reverseRow((rev as! [Int])) as! [Int])
        var x = 0
        while (x < SIZE) {
            if (Int(grid[y][x]) != Int(rev[x])) {
                moved = true
            }
            grid[y][x] = Int(rev[x])
            x = ((x + 1) as! Int)
        }
        y = ((y + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: grid), score: score, moved: moved) as! MoveResult)
}
func getCol(_ b: Board, _ x: Int) -> [Int] {
    var col: [Int] = ([] as! [Int])
    var y = 0
    while (y < SIZE) {
        col = ((col + [Int(b.cells[y][x])]) as! [Int])
        y = ((y + 1) as! Int)
    }
    return (col as! [Int])
}
func setCol(_ b: inout Board, _ x: Int, _ col: [Int]) {
    var rows = (b.cells as! [[Int]])
    var y = 0
    while (y < SIZE) {
        var row = (rows[y] as! [Int])
        row[x] = Int(col[y])
        rows[y] = (row as! [Int])
        y = ((y + 1) as! Int)
    }
    b.cells = (rows as! [[Int]])
}
func moveUp(_ b: Board, _ score: Int) -> MoveResult {
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var x = 0
    while (x < SIZE) {
        var col = (getCol((b as! Board), (x as! Int)) as! [Int])
        let r = slideLeft((col as! [Int]))
        let new = r.row
        score = ((score + r.gain) as! Int)
        var y = 0
        while (y < SIZE) {
            if (Int(grid[y][x]) != Int(new[y])) {
                moved = true
            }
            grid[y][x] = Int(new[y])
            y = ((y + 1) as! Int)
        }
        x = ((x + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: grid), score: score, moved: moved) as! MoveResult)
}
func moveDown(_ b: Board, _ score: Int) -> MoveResult {
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var x = 0
    while (x < SIZE) {
        var col = (reverseRow((getCol((b as! Board), (x as! Int)) as! [Int])) as! [Int])
        let r = slideLeft((col as! [Int]))
        col = (r.row as! [Int])
        score = ((score + r.gain) as! Int)
        col = (reverseRow((col as! [Int])) as! [Int])
        var y = 0
        while (y < SIZE) {
            if (Int(grid[y][x]) != Int(col[y])) {
                moved = true
            }
            grid[y][x] = Int(col[y])
            y = ((y + 1) as! Int)
        }
        x = ((x + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: grid), score: score, moved: moved) as! MoveResult)
}
func hasMoves(_ b: Board) -> Bool {
    var y = 0
    while (y < SIZE) {
        var x = 0
        while (x < SIZE) {
            if (Int(b.cells[y][x]) == 0) {
                return true
            }
            if (((x + 1) < SIZE) && (Int(b.cells[y][x]) == Int(b.cells[y][(x + 1)]))) {
                return true
            }
            if (((y + 1) < SIZE) && (Int(b.cells[y][x]) == Int(b.cells[(y + 1)][x]))) {
                return true
            }
            x = ((x + 1) as! Int)
        }
        y = ((y + 1) as! Int)
    }
    return false
}
func has2048(_ b: Board) -> Bool {
    var y = 0
    while (y < SIZE) {
        var x = 0
        while (x < SIZE) {
            if (Int(b.cells[y][x]) >= 2048) {
                return true
            }
            x = ((x + 1) as! Int)
        }
        y = ((y + 1) as! Int)
    }
    return false
}
var board: Board = (newBoard() as! Board)
var r = (spawnTile((board as! Board)) as! SpawnResult)
board = (r.board as! Board)
var full = (r.full as! Bool)
r = (spawnTile((board as! Board)) as! SpawnResult)
board = (r.board as! Board)
full = (r.full as! Bool)
var score = 0
_ = draw((board as! Board), (score as! Int))
while true {
    print("Move: ")
    let cmd = (readLine() ?? "")
    var moved = false
    if ((cmd == "a") || (cmd == "A")) {
        let m = moveLeft((board as! Board), (score as! Int))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((cmd == "d") || (cmd == "D")) {
        let m = moveRight((board as! Board), (score as! Int))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((cmd == "w") || (cmd == "W")) {
        let m = moveUp((board as! Board), (score as! Int))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((cmd == "s") || (cmd == "S")) {
        let m = moveDown((board as! Board), (score as! Int))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((cmd == "q") || (cmd == "Q")) {
        break
    }
    if moved {
        let r2 = spawnTile((board as! Board))
        board = (r2.board as! Board)
        full = (r2.full as! Bool)
        if (full && ((!Bool(hasMoves((board as! Board)))) as! Bool)) {
            _ = draw((board as! Board), (score as! Int))
            print("Game Over")
            break
        }
    }
    _ = draw((board as! Board), (score as! Int))
    if Bool(has2048((board as! Board))) {
        print("You win!")
        break
    }
    if (!Bool(hasMoves((board as! Board)))) {
        print("Game Over")
        break
    }
}
