// Generated by Mochi transpiler v0.10.37 on 2025-07-23 10:30:36 GMT+7
import Foundation

let SIZE = 4
func newBoard() -> [[Int]] {
    var b: [[Int]] = []
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var row: [Int] = []
        var x = 0
        while (Int(x) < Int(SIZE)) {
            row = (((row as! [Int]) + [0]) as! [Int])
            x = (Int(x) + 1)
        }
        b = (((b as! [[Int]]) + [(row as! [Int])]) as! [[Int]])
        y = (Int(y) + 1)
    }
    return (b as! [[Int]])
}
func spawnTile(_ b: [[Int]]) -> [String: Any] {
    var b = b
    var empty: [[Int]] = []
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) == 0) {
                empty = (((empty as! [[Int]]) + [([Int(x), Int(y)] as! [Int])]) as! [[Int]])
            }
            x = (Int(x) + 1)
        }
        y = (Int(y) + 1)
    }
    if (Int((((empty as! [[Int]])).count)) == 0) {
        return ["board": (b as! [[Int]]), "full": true]
    }
    var idx = (Int(Int.random(in: 0..<Int.max)) % Int((((empty as! [[Int]])).count)))
    let cell = (empty[Int(idx)] as! [Int])
    var val = 4
    if ((Int(Int.random(in: 0..<Int.max)) % 10) < 9) {
        val = 2
    }
    b[Int(cell[1])][Int(cell[0])] = Int(val)
    return ["board": (b as! [[Int]]), "full": (Int((((empty as! [[Int]])).count)) == 1)]
}
func pad(_ n: Int) -> String {
    var n = n
    var s = String(String(Int(n)))
    var pad = (4 - Int(((String(s)).count)))
    var i = 0
    var out = ""
    while (Int(i) < Int(pad)) {
        out = (String(out) + " ")
        i = (Int(i) + 1)
    }
    return (String(out) + String(s))
}
func draw(_ b: [[Int]], _ score: Int) {
    var b = b
    var score = score
    print(("Score: " + String(String(Int(score)))))
    var y = 0
    while (Int(y) < Int(SIZE)) {
        print("+----+----+----+----+")
        var line = "|"
        var x = 0
        while (Int(x) < Int(SIZE)) {
            var v = Int(b[Int(y)][Int(x)])
            if (Int(v) == 0) {
                line = (String(line) + "    |")
            } else {
                line = ((String(line) + String(pad(Int(v)))) + "|")
            }
            x = (Int(x) + 1)
        }
        print(String(line))
        y = (Int(y) + 1)
    }
    print("+----+----+----+----+")
    print("W=Up S=Down A=Left D=Right Q=Quit")
}
func reverseRow(_ r: [Int]) -> [Int] {
    var r = r
    var out: [Int] = []
    var i = (Int((((r as! [Int])).count)) - 1)
    while (Int(i) >= 0) {
        out = (((out as! [Int]) + [Int(r[Int(i)])]) as! [Int])
        i = (Int(i) - 1)
    }
    return (out as! [Int])
}
func slideLeft(_ row: [Int]) -> [String: Any] {
    var row = row
    var xs: [Int] = []
    var i = 0
    while (Int(i) < Int((((row as! [Int])).count))) {
        if (Int(row[Int(i)]) != 0) {
            xs = (((xs as! [Int]) + [Int(row[Int(i)])]) as! [Int])
        }
        i = (Int(i) + 1)
    }
    var res: [Int] = []
    var gain = 0
    i = 0
    while (Int(i) < Int((((xs as! [Int])).count))) {
        if (((Int(i) + 1) < Int((((xs as! [Int])).count))) && (Int(xs[Int(i)]) == Int(xs[(Int(i) + 1)]))) {
            let v = (Int(xs[Int(i)]) * 2)
            gain = (Int(gain) + Int(v))
            res = (((res as! [Int]) + [Int(v)]) as! [Int])
            i = (Int(i) + 2)
        } else {
            res = (((res as! [Int]) + [Int(xs[Int(i)])]) as! [Int])
            i = (Int(i) + 1)
        }
    }
    while (Int((((res as! [Int])).count)) < Int(SIZE)) {
        res = (((res as! [Int]) + [0]) as! [Int])
    }
    return ["row": (res as! [Int]), "gain": Int(gain)]
}
func moveLeft(_ b: [[Int]], _ score: Int) -> [String: Any] {
    var b = b
    var score = score
    var moved = false
    var y = 0
    while (Int(y) < Int(SIZE)) {
        let r = (slideLeft((b[Int(y)] as! [Int])) as! [String: Any])
        let new = r["row"]!
        score = ((Int(score) + Int(r["gain"]!)) as! Int)
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) != Int(new[Int(x)])) {
                moved = true
            }
            b[Int(y)][Int(x)] = new[Int(x)]
            x = (Int(x) + 1)
        }
        y = (Int(y) + 1)
    }
    return ["board": (b as! [[Int]]), "score": Int(score), "moved": Bool(moved)]
}
func moveRight(_ b: [[Int]], _ score: Int) -> [String: Any] {
    var b = b
    var score = score
    var moved = false
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var rev = (reverseRow((b[Int(y)] as! [Int])) as! [Int])
        let r = (slideLeft((rev as! [Int])) as! [String: Any])
        rev = (r["row"]! as! [Int])
        score = ((Int(score) + Int(r["gain"]!)) as! Int)
        rev = (reverseRow((rev as! [Int])) as! [Int])
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) != Int(rev[Int(x)])) {
                moved = true
            }
            b[Int(y)][Int(x)] = Int(rev[Int(x)])
            x = (Int(x) + 1)
        }
        y = (Int(y) + 1)
    }
    return ["board": (b as! [[Int]]), "score": Int(score), "moved": Bool(moved)]
}
func getCol(_ b: [[Int]], _ x: Int) -> [Int] {
    var b = b
    var x = x
    var col: [Int] = []
    var y = 0
    while (Int(y) < Int(SIZE)) {
        col = (((col as! [Int]) + [Int(b[Int(y)][Int(x)])]) as! [Int])
        y = (Int(y) + 1)
    }
    return (col as! [Int])
}
func setCol(_ b: [[Int]], _ x: Int, _ col: [Int]) {
    var b = b
    var x = x
    var col = col
    var y = 0
    while (Int(y) < Int(SIZE)) {
        b[Int(y)][Int(x)] = Int(col[Int(y)])
        y = (Int(y) + 1)
    }
}
func moveUp(_ b: [[Int]], _ score: Int) -> [String: Any] {
    var b = b
    var score = score
    var moved = false
    var x = 0
    while (Int(x) < Int(SIZE)) {
        var col = (getCol((b as! [[Int]]), Int(x)) as! [Int])
        let r = (slideLeft((col as! [Int])) as! [String: Any])
        let new = r["row"]!
        score = ((Int(score) + Int(r["gain"]!)) as! Int)
        var y = 0
        while (Int(y) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) != Int(new[Int(y)])) {
                moved = true
            }
            b[Int(y)][Int(x)] = new[Int(y)]
            y = (Int(y) + 1)
        }
        x = (Int(x) + 1)
    }
    return ["board": (b as! [[Int]]), "score": Int(score), "moved": Bool(moved)]
}
func moveDown(_ b: [[Int]], _ score: Int) -> [String: Any] {
    var b = b
    var score = score
    var moved = false
    var x = 0
    while (Int(x) < Int(SIZE)) {
        var col = (reverseRow((getCol((b as! [[Int]]), Int(x)) as! [Int])) as! [Int])
        let r = (slideLeft((col as! [Int])) as! [String: Any])
        col = (r["row"]! as! [Int])
        score = ((Int(score) + Int(r["gain"]!)) as! Int)
        col = (reverseRow((col as! [Int])) as! [Int])
        var y = 0
        while (Int(y) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) != Int(col[Int(y)])) {
                moved = true
            }
            b[Int(y)][Int(x)] = Int(col[Int(y)])
            y = (Int(y) + 1)
        }
        x = (Int(x) + 1)
    }
    return ["board": (b as! [[Int]]), "score": Int(score), "moved": Bool(moved)]
}
func hasMoves(_ b: [[Int]]) -> Bool {
    var b = b
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) == 0) {
                return true
            }
            if (((Int(x) + 1) < Int(SIZE)) && (Int(b[Int(y)][Int(x)]) == Int(b[Int(y)][(Int(x) + 1)]))) {
                return true
            }
            if (((Int(y) + 1) < Int(SIZE)) && (Int(b[Int(y)][Int(x)]) == Int(b[(Int(y) + 1)][Int(x)]))) {
                return true
            }
            x = (Int(x) + 1)
        }
        y = (Int(y) + 1)
    }
    return false
}
func has2048(_ b: [[Int]]) -> Bool {
    var b = b
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b[Int(y)][Int(x)]) >= 2048) {
                return true
            }
            x = (Int(x) + 1)
        }
        y = (Int(y) + 1)
    }
    return false
}
var board = (newBoard() as! [[Int]])
var r = (spawnTile((board as! [[Int]])) as! [String: Any])
board = (r["board"]! as! [[Int]])
var full = r["full"]!
r = (spawnTile((board as! [[Int]])) as! [String: Any])
board = (r["board"]! as! [[Int]])
full = r["full"]!
var score = 0
draw((board as! [[Int]]), Int(score))
while true {
    print("Move: ")
    let cmd = String((readLine() ?? ""))
    var moved = false
    if ((String(cmd) == "a") || (String(cmd) == "A")) {
        let m = (moveLeft((board as! [[Int]]), Int(score)) as! [String: Any])
        board = (m["board"]! as! [[Int]])
        score = (m["score"]! as! Int)
        moved = (m["moved"]! as! Bool)
    }
    if ((String(cmd) == "d") || (String(cmd) == "D")) {
        let m = (moveRight((board as! [[Int]]), Int(score)) as! [String: Any])
        board = (m["board"]! as! [[Int]])
        score = (m["score"]! as! Int)
        moved = (m["moved"]! as! Bool)
    }
    if ((String(cmd) == "w") || (String(cmd) == "W")) {
        let m = (moveUp((board as! [[Int]]), Int(score)) as! [String: Any])
        board = (m["board"]! as! [[Int]])
        score = (m["score"]! as! Int)
        moved = (m["moved"]! as! Bool)
    }
    if ((String(cmd) == "s") || (String(cmd) == "S")) {
        let m = (moveDown((board as! [[Int]]), Int(score)) as! [String: Any])
        board = (m["board"]! as! [[Int]])
        score = (m["score"]! as! Int)
        moved = (m["moved"]! as! Bool)
    }
    if ((String(cmd) == "q") || (String(cmd) == "Q")) {
        break
    }
    if Bool(moved) {
        let r2 = (spawnTile((board as! [[Int]])) as! [String: Any])
        board = (r2["board"]! as! [[Int]])
        full = r2["full"]!
        if ((full && Bool((!Bool(hasMoves((board as! [[Int]])))))) as! Bool) {
            draw((board as! [[Int]]), Int(score))
            print("Game Over")
            break
        }
    }
    draw((board as! [[Int]]), Int(score))
    if Bool(has2048((board as! [[Int]]))) {
        print("You win!")
        break
    }
    if (!Bool(hasMoves((board as! [[Int]])))) {
        print("Game Over")
        break
    }
}
