// Generated by Mochi transpiler v0.10.38 on 2025-07-24 01:03:16 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
let SIZE = 4
struct Board {
    var cells: [[Int]]
}
struct SpawnResult {
    var board: Board
    var full: Bool
}
struct SlideResult {
    var row: [Int]
    var gain: Int
}
struct MoveResult {
    var board: Board
    var score: Int
    var moved: Bool
}
func newBoard() -> Board {
    var b: [[Int]] = ([] as! [[Int]])
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var row: [Int] = ([] as! [Int])
        var x = 0
        while (Int(x) < Int(SIZE)) {
            row = (((row as! [Int]) + [0]) as! [Int])
            x = ((Int(x) + 1) as! Int)
        }
        b = (((b as! [[Int]]) + [(row as! [Int])]) as! [[Int]])
        y = ((Int(y) + 1) as! Int)
    }
    return (Board(cells: (b as! [[Int]])) as! Board)
}
func spawnTile(_ b: Board) -> SpawnResult {
    var b = b
    var grid = (b.cells as! [[Int]])
    var empty: [[Int]] = ([] as! [[Int]])
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(grid[Int(y)][Int(x)]) == 0) {
                empty = (((empty as! [[Int]]) + [([Int(x), Int(y)] as! [Int])]) as! [[Int]])
            }
            x = ((Int(x) + 1) as! Int)
        }
        y = ((Int(y) + 1) as! Int)
    }
    if (Int((((empty as! [[Int]])).count)) == 0) {
        return (SpawnResult(board: b, full: true) as! SpawnResult)
    }
    var idx = ((Int(_now()) % Int((((empty as! [[Int]])).count))) as! Int)
    let cell = (empty[Int(idx)] as! [Int])
    var val = 4
    if ((Int(_now()) % 10) < 9) {
        val = 2
    }
    grid[Int(cell[1])][Int(cell[0])] = Int(val)
    return (SpawnResult(board: Board(cells: (grid as! [[Int]])), full: (Int((((empty as! [[Int]])).count)) == 1)) as! SpawnResult)
}
func pad(_ n: Int) -> String {
    var n = n
    var s = String(String(describing: Int(n)))
    var pad = ((4 - Int(((String(s)).count))) as! Int)
    var i = 0
    var out = ""
    while (Int(i) < Int(pad)) {
        out = ((String(out) + " ") as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return ((String(out) + String(s)) as! String)
}
func draw(_ b: Board, _ score: Int) {
    var b = b
    var score = score
    print(("Score: " + String(String(describing: Int(score)))))
    var y = 0
    while (Int(y) < Int(SIZE)) {
        print("+----+----+----+----+")
        var line = "|"
        var x = 0
        while (Int(x) < Int(SIZE)) {
            var v = Int(b.cells[Int(y)][Int(x)])
            if (Int(v) == 0) {
                line = ((String(line) + "    |") as! String)
            } else {
                line = (((String(line) + String(pad(Int(v)))) + "|") as! String)
            }
            x = ((Int(x) + 1) as! Int)
        }
        print(String(line))
        y = ((Int(y) + 1) as! Int)
    }
    print("+----+----+----+----+")
    print("W=Up S=Down A=Left D=Right Q=Quit")
}
func reverseRow(_ r: [Int]) -> [Int] {
    var r = r
    var out: [Int] = ([] as! [Int])
    var i = ((Int((((r as! [Int])).count)) - 1) as! Int)
    while (Int(i) >= 0) {
        out = (((out as! [Int]) + [Int(r[Int(i)])]) as! [Int])
        i = ((Int(i) - 1) as! Int)
    }
    return (out as! [Int])
}
func slideLeft(_ row: [Int]) -> SlideResult {
    var row = row
    var xs: [Int] = ([] as! [Int])
    var i = 0
    while (Int(i) < Int((((row as! [Int])).count))) {
        if (Int(row[Int(i)]) != 0) {
            xs = (((xs as! [Int]) + [Int(row[Int(i)])]) as! [Int])
        }
        i = ((Int(i) + 1) as! Int)
    }
    var res: [Int] = ([] as! [Int])
    var gain = 0
    i = 0
    while (Int(i) < Int((((xs as! [Int])).count))) {
        if (((Int(i) + 1) < Int((((xs as! [Int])).count))) && (Int(xs[Int(i)]) == Int(xs[(Int(i) + 1)]))) {
            let v = (Int(xs[Int(i)]) * 2)
            gain = ((Int(gain) + Int(v)) as! Int)
            res = (((res as! [Int]) + [Int(v)]) as! [Int])
            i = ((Int(i) + 2) as! Int)
        } else {
            res = (((res as! [Int]) + [Int(xs[Int(i)])]) as! [Int])
            i = ((Int(i) + 1) as! Int)
        }
    }
    while (Int((((res as! [Int])).count)) < Int(SIZE)) {
        res = (((res as! [Int]) + [0]) as! [Int])
    }
    return (SlideResult(row: (res as! [Int]), gain: Int(gain)) as! SlideResult)
}
func moveLeft(_ b: Board, _ score: Int) -> MoveResult {
    var b = b
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var y = 0
    while (Int(y) < Int(SIZE)) {
        let r = slideLeft((grid[Int(y)] as! [Int]))
        let new = r.row
        score = ((Int(score) + r.gain) as! Int)
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(grid[Int(y)][Int(x)]) != Int(new[Int(x)])) {
                moved = true
            }
            grid[Int(y)][Int(x)] = Int(new[Int(x)])
            x = ((Int(x) + 1) as! Int)
        }
        y = ((Int(y) + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: (grid as! [[Int]])), score: Int(score), moved: (moved as! Bool)) as! MoveResult)
}
func moveRight(_ b: Board, _ score: Int) -> MoveResult {
    var b = b
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var rev = (reverseRow((grid[Int(y)] as! [Int])) as! [Int])
        let r = slideLeft((rev as! [Int]))
        rev = (r.row as! [Int])
        score = ((Int(score) + r.gain) as! Int)
        rev = (reverseRow((rev as! [Int])) as! [Int])
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(grid[Int(y)][Int(x)]) != Int(rev[Int(x)])) {
                moved = true
            }
            grid[Int(y)][Int(x)] = Int(rev[Int(x)])
            x = ((Int(x) + 1) as! Int)
        }
        y = ((Int(y) + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: (grid as! [[Int]])), score: Int(score), moved: (moved as! Bool)) as! MoveResult)
}
func getCol(_ b: Board, _ x: Int) -> [Int] {
    var b = b
    var x = x
    var col: [Int] = ([] as! [Int])
    var y = 0
    while (Int(y) < Int(SIZE)) {
        col = (((col as! [Int]) + [Int(b.cells[Int(y)][Int(x)])]) as! [Int])
        y = ((Int(y) + 1) as! Int)
    }
    return (col as! [Int])
}
func setCol(_ b: Board, _ x: Int, _ col: [Int]) {
    var b = b
    var x = x
    var col = col
    var rows = (b.cells as! [[Int]])
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var row = (rows[Int(y)] as! [Int])
        row[Int(x)] = Int(col[Int(y)])
        rows[Int(y)] = (row as! [Int])
        y = ((Int(y) + 1) as! Int)
    }
    b.cells = (rows as! [[Int]])
}
func moveUp(_ b: Board, _ score: Int) -> MoveResult {
    var b = b
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var x = 0
    while (Int(x) < Int(SIZE)) {
        var col = (getCol((b as! Board), Int(x)) as! [Int])
        let r = slideLeft((col as! [Int]))
        let new = r.row
        score = ((Int(score) + r.gain) as! Int)
        var y = 0
        while (Int(y) < Int(SIZE)) {
            if (Int(grid[Int(y)][Int(x)]) != Int(new[Int(y)])) {
                moved = true
            }
            grid[Int(y)][Int(x)] = Int(new[Int(y)])
            y = ((Int(y) + 1) as! Int)
        }
        x = ((Int(x) + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: (grid as! [[Int]])), score: Int(score), moved: (moved as! Bool)) as! MoveResult)
}
func moveDown(_ b: Board, _ score: Int) -> MoveResult {
    var b = b
    var score = score
    var grid = (b.cells as! [[Int]])
    var moved = false
    var x = 0
    while (Int(x) < Int(SIZE)) {
        var col = (reverseRow((getCol((b as! Board), Int(x)) as! [Int])) as! [Int])
        let r = slideLeft((col as! [Int]))
        col = (r.row as! [Int])
        score = ((Int(score) + r.gain) as! Int)
        col = (reverseRow((col as! [Int])) as! [Int])
        var y = 0
        while (Int(y) < Int(SIZE)) {
            if (Int(grid[Int(y)][Int(x)]) != Int(col[Int(y)])) {
                moved = true
            }
            grid[Int(y)][Int(x)] = Int(col[Int(y)])
            y = ((Int(y) + 1) as! Int)
        }
        x = ((Int(x) + 1) as! Int)
    }
    return (MoveResult(board: Board(cells: (grid as! [[Int]])), score: Int(score), moved: (moved as! Bool)) as! MoveResult)
}
func hasMoves(_ b: Board) -> Bool {
    var b = b
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b.cells[Int(y)][Int(x)]) == 0) {
                return true
            }
            if (((Int(x) + 1) < Int(SIZE)) && (Int(b.cells[Int(y)][Int(x)]) == Int(b.cells[Int(y)][(Int(x) + 1)]))) {
                return true
            }
            if (((Int(y) + 1) < Int(SIZE)) && (Int(b.cells[Int(y)][Int(x)]) == Int(b.cells[(Int(y) + 1)][Int(x)]))) {
                return true
            }
            x = ((Int(x) + 1) as! Int)
        }
        y = ((Int(y) + 1) as! Int)
    }
    return false
}
func has2048(_ b: Board) -> Bool {
    var b = b
    var y = 0
    while (Int(y) < Int(SIZE)) {
        var x = 0
        while (Int(x) < Int(SIZE)) {
            if (Int(b.cells[Int(y)][Int(x)]) >= 2048) {
                return true
            }
            x = ((Int(x) + 1) as! Int)
        }
        y = ((Int(y) + 1) as! Int)
    }
    return false
}
var board: Board = (newBoard() as! Board)
var r = (spawnTile((board as! Board)) as! SpawnResult)
board = (r.board as! Board)
var full = (r.full as! Bool)
r = (spawnTile((board as! Board)) as! SpawnResult)
board = (r.board as! Board)
full = (r.full as! Bool)
var score = 0
draw((board as! Board), Int(score))
while true {
    print("Move: ")
    let cmd = String((readLine() ?? ""))
    var moved = false
    if ((String(cmd) == "a") || (String(cmd) == "A")) {
        let m = moveLeft((board as! Board), Int(score))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((String(cmd) == "d") || (String(cmd) == "D")) {
        let m = moveRight((board as! Board), Int(score))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((String(cmd) == "w") || (String(cmd) == "W")) {
        let m = moveUp((board as! Board), Int(score))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((String(cmd) == "s") || (String(cmd) == "S")) {
        let m = moveDown((board as! Board), Int(score))
        board = (m.board as! Board)
        score = (m.score as! Int)
        moved = (m.moved as! Bool)
    }
    if ((String(cmd) == "q") || (String(cmd) == "Q")) {
        break
    }
    if (moved as! Bool) {
        let r2 = spawnTile((board as! Board))
        board = (r2.board as! Board)
        full = (r2.full as! Bool)
        if ((full as! Bool) && ((!(hasMoves((board as! Board)) as! Bool)) as! Bool)) {
            draw((board as! Board), Int(score))
            print("Game Over")
            break
        }
    }
    draw((board as! Board), Int(score))
    if (has2048((board as! Board)) as! Bool) {
        print("You win!")
        break
    }
    if (!(hasMoves((board as! Board)) as! Bool)) {
        print("Game Over")
        break
    }
}
