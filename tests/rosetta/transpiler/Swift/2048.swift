// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:01:16 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Board: Codable {
    var cells: [[Int]]
}
struct SpawnResult: Codable {
    var board: Board
    var full: Bool
}
struct SlideResult: Codable {
    var row: [Int]
    var gain: Int
}
struct MoveResult: Codable {
    var board: Board
    var score: Int
    var moved: Bool
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let SIZE = 4
    func newBoard() -> Board {
        var b: [[Int]] = ([] as! [[Int]])
        var y: Int = 0
        while (y < SIZE) {
            var row: [Int] = ([] as! [Int])
            var x: Int = 0
            while (x < SIZE) {
                row = (_append(row, 0) as! [Int])
                x = Int((x &+ 1))
            }
            b = (_append(b, row) as! [[Int]])
            y = Int((y &+ 1))
        }
        return Board(cells: b)
    }
    func spawnTile(_ b: Board) -> SpawnResult {
        var grid: [[Int]] = b.cells
        var empty: [[Int]] = ([] as! [[Int]])
        var y: Int = 0
        while (y < SIZE) {
            var x: Int = 0
            while (x < SIZE) {
                if (Int(grid[y][x]) == 0) {
                    empty = (_append(empty, ([x, y] as! [Int])) as! [[Int]])
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        if (Int(((empty).count)) == 0) {
            return SpawnResult(board: b, full: true)
        }
        var idx: Int = (Int(_now()) % Int(((empty).count)))
        let cell: [Int] = (empty[idx] as! [Int])
        var val: Int = 4
        if ((Int(_now()) % 10) < 9) {
            val = 2
        }
        grid[Int(cell[1])][Int(cell[0])] = Int(val)
        return SpawnResult(board: Board(cells: grid), full: (Int(((empty).count)) == 1))
    }
    func pad(_ n: Int) -> String {
        var s: String = String(describing: n)
        var pad: Int = (4 &- Int(((s).count)))
        var i: Int = 0
        var out: String = ""
        while (i < pad) {
            out = ((out + " ") as! String)
            i = Int((i &+ 1))
        }
        return (out + s)
    }
    func draw(_ b: Board, _ score: Int) {
        print(_p(("Score: " + String(describing: score))))
        var y: Int = 0
        while (y < SIZE) {
            print(_p("+----+----+----+----+"))
            var line: String = "|"
            var x: Int = 0
            while (x < SIZE) {
                var v: Int = Int(b.cells[y][x])
                if (v == 0) {
                    line = ((line + "    |") as! String)
                } else {
                    line = (((line + String(describing: pad(Int(v)))) + "|") as! String)
                }
                x = Int((x &+ 1))
            }
            print(_p(line))
            y = Int((y &+ 1))
        }
        print(_p("+----+----+----+----+"))
        print(_p("W=Up S=Down A=Left D=Right Q=Quit"))
    }
    func reverseRow(_ r: [Int]) -> [Int] {
        var out: [Int] = ([] as! [Int])
        var i: Int = (Int(((r).count)) &- 1)
        while (i >= 0) {
            out = (_append(out, Int(r[i])) as! [Int])
            i = Int((i &- 1))
        }
        return out
    }
    func slideLeft(_ row: [Int]) -> SlideResult {
        var xs: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((row).count))) {
            if (Int(row[i]) != 0) {
                xs = (_append(xs, Int(row[i])) as! [Int])
            }
            i = Int((i &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        var gain: Int = 0
        i = 0
        while (i < Int(((xs).count))) {
            if (((i &+ 1) < Int(((xs).count))) && (Int(xs[i]) == Int(xs[(i &+ 1)]))) {
                let v = (Int(xs[i]) &* 2)
                gain = Int((gain &+ v))
                res = (_append(res, v) as! [Int])
                i = Int((i &+ 2))
            } else {
                res = (_append(res, Int(xs[i])) as! [Int])
                i = Int((i &+ 1))
            }
        }
        while (Int(((res).count)) < SIZE) {
            res = (_append(res, 0) as! [Int])
        }
        return SlideResult(row: res, gain: gain)
    }
    func moveLeft(_ b: Board, _ score: Int) -> MoveResult {
        var score = score
        var grid: [[Int]] = b.cells
        var moved: Bool = false
        var y: Int = 0
        while (y < SIZE) {
            let r = slideLeft((grid[y] as! [Int]))
            let new: [Int] = r.row
            score = Int((score &+ r.gain))
            var x: Int = 0
            while (x < SIZE) {
                if (Int(grid[y][x]) != Int(new[x])) {
                    moved = true
                }
                grid[y][x] = Int(new[x])
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return MoveResult(board: Board(cells: grid), score: score, moved: moved)
    }
    func moveRight(_ b: Board, _ score: Int) -> MoveResult {
        var score = score
        var grid: [[Int]] = b.cells
        var moved: Bool = false
        var y: Int = 0
        while (y < SIZE) {
            var rev: [Int] = (reverseRow((grid[y] as! [Int])) as! [Int])
            let r = slideLeft((rev as! [Int]))
            rev = (r.row as! [Int])
            score = Int((score &+ r.gain))
            rev = (reverseRow((rev as! [Int])) as! [Int])
            var x: Int = 0
            while (x < SIZE) {
                if (Int(grid[y][x]) != Int(rev[x])) {
                    moved = true
                }
                grid[y][x] = Int(rev[x])
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return MoveResult(board: Board(cells: grid), score: score, moved: moved)
    }
    func getCol(_ b: Board, _ x: Int) -> [Int] {
        var col: [Int] = ([] as! [Int])
        var y: Int = 0
        while (y < SIZE) {
            col = (_append(col, Int(b.cells[y][x])) as! [Int])
            y = Int((y &+ 1))
        }
        return col
    }
    func setCol(_ b: inout Board, _ x: Int, _ col: [Int]) {
        var rows: [[Int]] = b.cells
        var y: Int = 0
        while (y < SIZE) {
            var row: [Int] = (rows[y] as! [Int])
            row[x] = Int(col[y])
            rows[y] = (row as! [Int])
            y = Int((y &+ 1))
        }
        b.cells = (rows as! [[Int]])
    }
    func moveUp(_ b: Board, _ score: Int) -> MoveResult {
        var score = score
        var grid: [[Int]] = b.cells
        var moved: Bool = false
        var x: Int = 0
        while (x < SIZE) {
            var col: [Int] = (getCol((b as! Board), Int(x)) as! [Int])
            let r = slideLeft((col as! [Int]))
            let new: [Int] = r.row
            score = Int((score &+ r.gain))
            var y: Int = 0
            while (y < SIZE) {
                if (Int(grid[y][x]) != Int(new[y])) {
                    moved = true
                }
                grid[y][x] = Int(new[y])
                y = Int((y &+ 1))
            }
            x = Int((x &+ 1))
        }
        return MoveResult(board: Board(cells: grid), score: score, moved: moved)
    }
    func moveDown(_ b: Board, _ score: Int) -> MoveResult {
        var score = score
        var grid: [[Int]] = b.cells
        var moved: Bool = false
        var x: Int = 0
        while (x < SIZE) {
            var col: [Int] = (reverseRow((getCol((b as! Board), Int(x)) as! [Int])) as! [Int])
            let r = slideLeft((col as! [Int]))
            col = (r.row as! [Int])
            score = Int((score &+ r.gain))
            col = (reverseRow((col as! [Int])) as! [Int])
            var y: Int = 0
            while (y < SIZE) {
                if (Int(grid[y][x]) != Int(col[y])) {
                    moved = true
                }
                grid[y][x] = Int(col[y])
                y = Int((y &+ 1))
            }
            x = Int((x &+ 1))
        }
        return MoveResult(board: Board(cells: grid), score: score, moved: moved)
    }
    func hasMoves(_ b: Board) -> Bool {
        var y: Int = 0
        while (y < SIZE) {
            var x: Int = 0
            while (x < SIZE) {
                if (Int(b.cells[y][x]) == 0) {
                    return true
                }
                if (((x &+ 1) < SIZE) && (Int(b.cells[y][x]) == Int(b.cells[y][(x &+ 1)]))) {
                    return true
                }
                if (((y &+ 1) < SIZE) && (Int(b.cells[y][x]) == Int(b.cells[(y &+ 1)][x]))) {
                    return true
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return false
    }
    func has2048(_ b: Board) -> Bool {
        var y: Int = 0
        while (y < SIZE) {
            var x: Int = 0
            while (x < SIZE) {
                if (Int(b.cells[y][x]) >= 2048) {
                    return true
                }
                x = Int((x &+ 1))
            }
            y = Int((y &+ 1))
        }
        return false
    }
    var board: Board = newBoard()
    var r: SpawnResult = spawnTile((board as! Board))
    board = (r.board as! Board)
    var full: Bool = r.full
    r = (spawnTile((board as! Board)) as! SpawnResult)
    board = (r.board as! Board)
    full = (r.full as! Bool)
    var score: Int = 0
    _ = draw((board as! Board), Int(score))
    while true {
        print(_p("Move: "))
        let cmd = (readLine() ?? "")
        var moved: Bool = false
        if ((cmd == "a") || (cmd == "A")) {
            let m = moveLeft((board as! Board), Int(score))
            board = (m.board as! Board)
            score = Int(m.score)
            moved = (m.moved as! Bool)
        }
        if ((cmd == "d") || (cmd == "D")) {
            let m = moveRight((board as! Board), Int(score))
            board = (m.board as! Board)
            score = Int(m.score)
            moved = (m.moved as! Bool)
        }
        if ((cmd == "w") || (cmd == "W")) {
            let m = moveUp((board as! Board), Int(score))
            board = (m.board as! Board)
            score = Int(m.score)
            moved = (m.moved as! Bool)
        }
        if ((cmd == "s") || (cmd == "S")) {
            let m = moveDown((board as! Board), Int(score))
            board = (m.board as! Board)
            score = Int(m.score)
            moved = (m.moved as! Bool)
        }
        if ((cmd == "q") || (cmd == "Q")) {
            break
        }
        if moved {
            let r2 = spawnTile((board as! Board))
            board = (r2.board as! Board)
            full = (r2.full as! Bool)
            if (full && ((!hasMoves((board as! Board))) as! Bool)) {
                _ = draw((board as! Board), Int(score))
                print(_p("Game Over"))
                break
            }
        }
        _ = draw((board as! Board), Int(score))
        if has2048((board as! Board)) {
            print(_p("You win!"))
            break
        }
        if (!hasMoves((board as! Board))) {
            print(_p("Game Over"))
            break
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
