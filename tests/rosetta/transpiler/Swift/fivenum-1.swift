// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:22 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sortFloat(_ xs: [Double]) -> [Double] {
        var arr: [Double] = xs
        var n: Int = Int(((arr).count))
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n - 1)) {
                if (Double(arr[j]) > Double(arr[(j + 1)])) {
                    let t = Double(arr[j])
                    arr[j] = Double(arr[(j + 1)])
                    arr[(j + 1)] = Double(t)
                }
                j = ((j + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (arr as! [Double])
    }
    func median(_ s: [Double]) -> Double {
        let n = Int(((s).count))
        if ((n % 2) == 1) {
            return Double(s[(n / 2)])
        }
        return Double((Double((Double(s[((n / 2) - 1)]) + Double(s[(n / 2)]))) / 2.0))
    }
    func fivenum(_ xs: [Double]) -> [Double] {
        var s: [Double] = (sortFloat((xs as! [Double])) as! [Double])
        let n = Int(((s).count))
        let q1 = Double(s[(Int((n - 1)) / 4)])
        let med = Double(median((s as! [Double])))
        let q3 = Double(s[(Int((3 * Int((n - 1)))) / 4)])
        return ([Double(s[0]), q1, med, q3, Double(s[(n - 1)])] as! [Double])
    }
    let x1: [Double] = ([36.0, 40.0, 7.0, 39.0, 41.0, 15.0] as! [Double])
    let x2: [Double] = ([15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0] as! [Double])
    let x3: [Double] = ([0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578] as! [Double])
    print(_p(_p((fivenum((x1 as! [Double])) as! [Double]))))
    print(_p(_p((fivenum((x2 as! [Double])) as! [Double]))))
    print(_p(_p((fivenum((x3 as! [Double])) as! [Double]))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
