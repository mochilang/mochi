// Generated by Mochi transpiler v0.10.41 on 2025-07-26 21:48:58 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func floorf(_ x: Double) -> Double {
    let y = Int(x)
    return Double(y)
}
func indexOf(_ s: String, _ ch: String) -> Int {
    var i: Int = 0
    while (i < Int(((s).count))) {
        if (String(describing: String(Array(String(s))[Int(i)..<Int((i + 1))])) == ch) {
            return Int(i)
        }
        i = Int((i + 1))
    }
    return Int(-1)
}
func fmtF3(_ x: Double) -> String {
    var y: Double = (Double(floorf(Double(((x * 1000.0) + 0.5)))) / 1000.0)
    var s: String = _p(y)
    var dot: Int = Int(indexOf(String(s), "."))
    if (dot == (0 - 1)) {
        s = String((s + ".000"))
    } else {
        var decs: Int = ((Int(((s).count)) - dot) - 1)
        if (decs > 3) {
            s = String(describing: String(Array(String(s))[0..<Int((dot + 4))]))
        } else {
            while (decs < 3) {
                s = String((s + "0"))
                decs = Int((decs + 1))
            }
        }
    }
    return String(s)
}
func padFloat3(_ x: Double, _ width: Int) -> String {
    var s: String = String(describing: fmtF3(Double(x)))
    while (Int(((s).count)) < width) {
        s = String((" " + s))
    }
    return String(s)
}
func fib1000() -> [Double] {
    var a: Double = 0.0
    var b: Double = 1.0
    var res: [Double] = ([] as! [Double])
    var i: Int = 0
    while (i < 1000) {
        res = ((res + [b]) as! [Double])
        var t: Double = b
        b = Double((b + a))
        a = Double(t)
        i = Int((i + 1))
    }
    return (res as! [Double])
}
func leadingDigit(_ x: Double) -> Int {
    var x = x
    if (x < 0.0) {
        x = Double(-x)
    }
    while (x >= 10.0) {
        x = Double((x / 10.0))
    }
    while ((x > 0.0) && (x < 1.0)) {
        x = Double((x * 10.0))
    }
    return Int(x)
}
func show(_ nums: [Double], _ title: String) {
    var counts: [Int] = ([0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int])
    for n in nums {
        let d = Int(leadingDigit(Double(n)))
        if ((d >= 1) && (d <= 9)) {
            counts[(d - 1)] = Int(((counts[(d - 1)] as! Int) + 1))
        }
    }
    let preds = ([0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046] as! [Double])
    let total = Int(((nums).count))
    print(_p(title))
    print(_p("Digit  Observed  Predicted"))
    var i: Int = 0
    while (i < 9) {
        let obs = (Double(counts[i]) / Double(total))
        var line: String = ((((("  " + _p((i + 1))) + "  ") + String(describing: padFloat3(Double(obs), 9))) + "  ") + String(describing: padFloat3(Double(preds[i]), 8)))
        print(_p(line))
        i = Int((i + 1))
    }
}
func main() {
    _ = show((fib1000() as! [Double]), "First 1000 Fibonacci numbers")
}
_ = main()
