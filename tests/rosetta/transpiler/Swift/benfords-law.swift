// Generated by Mochi transpiler v0.10.41 on 2025-07-27 16:12:56 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floorf(_ x: Double) -> Double {
        let y = Int(x)
        return Double(y)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func fmtF3(_ x: Double) -> String {
        var y: Double = (Double(floorf(Double(((x * 1000.0) + 0.5)))) / 1000.0)
        var s: String = _p(y)
        var dot: Int = Int((String(describing: String(s)).firstIndex(of: Character(String(describing: ".")))?.utf16Offset(in: String(describing: String(s)) ) ?? -1))
        if (dot == (0 - 1)) {
            s = String((s + ".000"))
        } else {
            var decs: Int = ((Int(((s).count)) - dot) - 1)
            if (decs > 3) {
                s = String(describing: String(Array(String(describing: String(s)))[0..<Int((dot + 4))]))
            } else {
                while (decs < 3) {
                    s = String((s + "0"))
                    decs = Int((decs + 1))
                }
            }
        }
        return String(s)
    }
    func padFloat3(_ x: Double, _ width: Int) -> String {
        var s: String = String(describing: fmtF3(Double(x)))
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func fib1000() -> [Double] {
        var a: Double = 0.0
        var b: Double = 1.0
        var res: [Double] = ([] as! [Double])
        var i: Int = 0
        while (i < 1000) {
            res = ((res + [b]) as! [Double])
            var t: Double = b
            b = Double((b + a))
            a = Double(t)
            i = Int((i + 1))
        }
        return (res as! [Double])
    }
    func leadingDigit(_ x: Double) -> Int {
        var x = x
        if (x < 0.0) {
            x = Double(-x)
        }
        while (x >= 10.0) {
            x = Double((x / 10.0))
        }
        while ((x > 0.0) && (x < 1.0)) {
            x = Double((x * 10.0))
        }
        return Int(x)
    }
    func show(_ nums: [Double], _ title: String) {
        var counts: [Int] = ([0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int])
        for n in nums {
            let d = Int(leadingDigit(Double(n)))
            if ((d >= 1) && (d <= 9)) {
                counts[(d - 1)] = Int(((counts[(d - 1)] as! Int) + 1))
            }
        }
        let preds = ([0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046] as! [Double])
        let total = Int(((nums).count))
        print(_p(title))
        print(_p("Digit  Observed  Predicted"))
        var i: Int = 0
        while (i < 9) {
            let obs = (Double(counts[i]) / Double(total))
            var line: String = ((((("  " + _p((i + 1))) + "  ") + String(describing: padFloat3(Double(obs), 9))) + "  ") + String(describing: padFloat3(Double(preds[i]), 8)))
            print(_p(line))
            i = Int((i + 1))
        }
    }
    func main() {
        _ = show((fib1000() as! [Double]), "First 1000 Fibonacci numbers")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
