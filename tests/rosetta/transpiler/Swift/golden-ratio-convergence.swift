// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:16:44 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var g: Double = x
        var i: Int = 0
        while (i < 20) {
            g = Double((Double((g + (x / g))) / 2.0))
            i = Int((i &+ 1))
        }
        return g
    }
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return -x
        }
        return x
    }
    func main() {
        var oldPhi: Double = 1.0
        var phi: Double = 0.0
        var iters: Int = 0
        let limit = 0.00001
        while true {
            phi = Double((1.0 + (1.0 / oldPhi)))
            iters = Int((iters &+ 1))
            if (Double(abs(Double((phi - oldPhi)))) <= limit) {
                break
            }
            oldPhi = Double(phi)
        }
        let actual = (Double((1.0 + Double(sqrtApprox(5.0)))) / 2.0)
        print(_p(("Final value of phi : " + String(describing: phi))))
        print(_p(("Number of iterations : " + String(describing: iters))))
        print(_p(("Error (approx) : " + String(describing: (phi - actual)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
