// Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:59:14 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func sqrtApprox(_ x: Double) -> Double {
    if (x <= 0.0) {
        return 0.0
    }
    var g: Double = x
    var i: Int = 0
    while (i < 20) {
        g = Double((Double((g + (x / g))) / 2.0))
        i = Int((i &+ 1))
    }
    return g
}
func abs(_ x: Double) -> Double {
    if (x < 0.0) {
        return -x
    }
    return x
}
func main() {
    var oldPhi: Double = 1.0
    var phi: Double = 0.0
    var iters: Int = 0
    let limit = 0.00001
    while true {
        phi = Double((1.0 + (1.0 / oldPhi)))
        iters = Int((iters &+ 1))
        if (Double(abs(Double((phi - oldPhi)))) <= limit) {
            break
        }
        oldPhi = Double(phi)
    }
    let actual = (Double((1.0 + Double(sqrtApprox(5.0)))) / 2.0)
    print(_p(("Final value of phi : " + String(describing: phi))))
    print(_p(("Number of iterations : " + String(describing: iters))))
    print(_p(("Error (approx) : " + String(describing: (phi - actual)))))
}
_ = main()
