// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:09 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func show(_ n: Int) {
    if (n == 1) {
        print(_p("1: 1"))
        return
    }
    var out: String = (String(describing: n) + ": ")
    var x: String = ""
    var m: Int = n
    var f: Int = 2
    while (m != 1) {
        if ((m % f) == 0) {
            out = (((out + x) + String(describing: f)) as! String)
            x = "Ã—"
            m = Int((m / f))
        } else {
            f = Int((f &+ 1))
        }
    }
    print(_p(out))
}
_ = show(1)
for i in 2..<10 {
    _ = show((i as! Int))
}
print(_p("..."))
for i in 2144..<2155 {
    _ = show((i as! Int))
}
print(_p("..."))
for i in 9987..<10000 {
    _ = show((i as! Int))
}
