// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:26:06 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let INF = 1000000
    struct FWResult {
        var dist: [[Int]]
        var next: [[Int]]
    }
    func floydWarshall(_ graph: [[Int]]) -> FWResult {
        let n = Int(((graph).count))
        var dist: [[Int]] = ([] as! [[Int]])
        var next: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var drow: [Int] = ([] as! [Int])
            var nrow: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                drow = (_append(drow, (graph[i][j] as! Int)) as! [Int])
                if (((graph[i][j] as! Int) < INF) && (i != j)) {
                    nrow = (_append(nrow, j) as! [Int])
                } else {
                    nrow = (_append(nrow, -1) as! [Int])
                }
                j = ((j + 1) as! Int)
            }
            dist = (_append(dist, drow) as! [[Int]])
            next = (_append(next, nrow) as! [[Int]])
            i = ((i + 1) as! Int)
        }
        var k: Int = 0
        while (k < n) {
            var i: Int = 0
            while (i < n) {
                var j: Int = 0
                while (j < n) {
                    if (((dist[i][k] as! Int) < INF) && ((dist[k][j] as! Int) < INF)) {
                        let alt = ((dist[i][k] as! Int) + (dist[k][j] as! Int))
                        if (alt < (dist[i][j] as! Int)) {
                            dist[i][j] = (alt as! Int)
                            next[i][j] = (next[i][k] as! Int)
                        }
                    }
                    j = ((j + 1) as! Int)
                }
                i = ((i + 1) as! Int)
            }
            k = ((k + 1) as! Int)
        }
        return (FWResult(dist: dist, next: next) as! FWResult)
    }
    func path(_ u: Int, _ v: Int, _ next: [[Int]]) -> [Int] {
        if ((next[u][v] as! Int) < 0) {
            return ([] as! [Int])
        }
        var p: [Int] = ([u] as! [Int])
        var x: Int = u
        while (x != v) {
            x = (next[x][v] as! Int)
            p = (_append(p, x) as! [Int])
        }
        return (p as! [Int])
    }
    func pathStr(_ p: [Int]) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < Int(((p).count))) {
            s = ((s + _p(((p[i] as! Int) + 1))) as! String)
            if (i < (Int(((p).count)) - 1)) {
                s = ((s + " -> ") as! String)
            }
            i = ((i + 1) as! Int)
        }
        return (s as! String)
    }
    let n = 4
    var g: [[Int]] = ([] as! [[Int]])
    for i in 0..<n {
        var row: [Int] = ([] as! [Int])
        for j in 0..<n {
            if (i == j) {
                row = (_append(row, 0) as! [Int])
            } else {
                row = (_append(row, INF) as! [Int])
            }
        }
        g = (_append(g, row) as! [[Int]])
    }
    g[0][2] = (-2 as! Int)
    g[2][3] = 2
    g[3][1] = (-1 as! Int)
    g[1][0] = 4
    g[1][2] = 3
    let res = floydWarshall((g as! [[Int]]))
    print(_p("pair\tdist\tpath"))
    var i: Int = 0
    while (i < n) {
        var j: Int = 0
        while (j < n) {
            if (i != j) {
                let p: [Int] = (path((i as! Int), (j as! Int), (res.next as! [[Int]])) as! [Int])
                print(_p(((((((_p((i + 1)) + " -> ") + _p((j + 1))) + "\t") + _p((res.dist[i][j] as! Int))) + "\t") + String(describing: pathStr((p as! [Int]))))))
            }
            j = ((j + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
