// Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:03:13 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _padStart(_ s: String, _ w: Int, _ p: String) -> String {
    var out = s
    while out.count < w { out = p + out }
    return out
}
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _rat_num(_ v: Double) -> Int {
    if v.isNaN { return 0 }
    if v > Double(Int.max) { return Int.max }
    if v < Double(Int.min) { return Int.min }
    return Int(v)
}
func _rat_denom(_ v: Double) -> Int { 1 }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() { res = res * 1000000000 + Int64(d) }
        if res > Int64(Int.max) { return Int.max }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() / rhs.toInt())
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() % rhs.toInt())
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bigrat(_ a: Int, _ b: Int) -> Double {
        return Double((Double(a) / Double(b)))
    }
    func calkinWilf(_ n: Int) -> [Double] {
        var seq: [Double] = ([] as! [Double])
        seq = (_append(seq, Double(bigrat(1, 1))) as! [Double])
        var i: Int = 1
        while (i < n) {
            var prev: Double = Double(seq[(i - 1)])
            let a = _rat_num(prev)
            let b = _rat_denom(prev)
            let f = (a / b)
            var t: Double = Double(bigrat((f as! Int), 1))
            t = Double((t * 2))
            t = Double((t - prev))
            t = Double((t + 1))
            t = Double((1 / t))
            seq = (_append(seq, t) as! [Double])
            i = ((i + 1) as! Int)
        }
        return (seq as! [Double])
    }
    func toContinued(_ r: Double) -> [Int] {
        var a: BigInt = BigInt(_rat_num(r))
        var b: BigInt = BigInt(_rat_denom(r))
        var res: [Int] = ([] as! [Int])
        while true {
            res = (_append(res, ((a / b) as! Int)) as! [Int])
            let t = (a % b)
            a = BigInt(b)
            b = BigInt(t)
            if (Int(a) == 1) {
                break
            }
        }
        if ((Int(((res).count)) % 2) == 0) {
            res[(Int(((res).count)) - 1)] = (((res[(Int(((res).count)) - 1)] as! Int) - 1) as! Int)
            res = (_append(res, 1) as! [Int])
        }
        return (res as! [Int])
    }
    func termNumber(_ cf: [Int]) -> Int {
        var b: String = ""
        var d: String = "1"
        for n in cf {
            b = ((String(describing: _repeat(d, n)) + b) as! String)
            if (d == "1") {
                d = "0"
            } else {
                d = "1"
            }
        }
        return Int(Int(String(describing: (b as! String)), radix: 2)!)
    }
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var out: String = ""
        var i: Int = 0
        var cnt: Int = 0
        var neg: Bool = false
        if (String(Array(s)[0..<1]) == "-") {
            neg = true
            s = (String(Array(s)[1..<Array(s).count]) as! String)
        }
        i = ((Int(((s).count)) - 1) as! Int)
        while (i >= 0) {
            out = ((String(Array(s)[i..<(i + 1)]) + out) as! String)
            cnt = ((cnt + 1) as! Int)
            if ((cnt == 3) && (i != 0)) {
                out = (("," + out) as! String)
                cnt = 0
            }
            i = ((i - 1) as! Int)
        }
        if neg {
            out = (("-" + out) as! String)
        }
        return (out as! String)
    }
    func main() {
        let cw: [Double] = (calkinWilf(20) as! [Double])
        print(_p("The first 20 terms of the Calkin-Wilf sequnence are:"))
        var i: Int = 0
        while (i < 20) {
            let r = Double(cw[i])
            var s = _p(_rat_num(r))
            if (Int(_rat_denom(r)) != 1) {
                s = (((s + "/") + _p(_rat_denom(r))) as! String)
            }
            print(_p(((String(describing: _padStart(_p((i + 1)), 2, " ")) + ": ") + s)))
            i = ((i + 1) as! Int)
        }
        let r = Double(bigrat(83116, 51639))
        let cf: [Int] = (toContinued(Double(r)) as! [Int])
        let tn = Int(termNumber((cf as! [Int])))
        print(_p((((((("" + _p(_rat_num(r))) + "/") + _p(_rat_denom(r))) + " is the ") + String(describing: commatize((tn as! Int)))) + "th term of the sequence.")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
