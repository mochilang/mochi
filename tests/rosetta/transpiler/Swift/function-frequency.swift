// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:50:11 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var res: String = ""
    var i: Int = 0
    while (i < Int(((xs).count))) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + (xs[i] as! String)) as! String)
        i = Int((i &+ 1))
    }
    return res
}
func sortPairs(_ xs: [[String: Any?]]) -> [[String: Any?]] {
    var arr: [[String: Any?]] = xs
    var i: Int = 1
    while (i < Int(((arr).count))) {
        var j: Int = i
        while ((j > 0) && ((arr[(j &- 1)]["count"] as! Int) < (arr[j]["count"] as! Int))) {
            let tmp: [String: Any?] = (arr[(j &- 1)] as! [String: Any?])
            arr[(j &- 1)] = (arr[j] as! [String: Any?])
            arr[j] = (tmp as! [String: Any?])
            j = Int((j &- 1))
        }
        i = Int((i &+ 1))
    }
    return arr
}
func isAlphaNumDot(_ ch: String) -> Bool {
    return ((((((ch >= "A") && (ch <= "Z")) || ((ch >= "a") && (ch <= "z"))) || ((ch >= "0") && (ch <= "9"))) || (ch == "_")) || (ch == "."))
}
func main() {
    let srcLines: [String] = (["package main", "", "import (", "    \"fmt\"", "    \"go/ast\"", "    \"go/parser\"", "    \"go/token\"", "    \"io/ioutil\"", "    \"os\"", "    \"sort\"", ")", "", "func main() {", "    if len(os.Args) != 2 {", "        fmt.Println(\"usage ff <go source filename>\")", "        return", "    }", "    src, err := ioutil.ReadFile(os.Args[1])", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    fs := token.NewFileSet()", "    a, err := parser.ParseFile(fs, os.Args[1], src, 0)", "    if err != nil {", "        fmt.Println(err)", "        return", "    }", "    f := fs.File(a.Pos())", "    m := make(map[string]int)", "    ast.Inspect(a, func(n ast.Node) bool {", "        if ce, ok := n.(*ast.CallExpr); ok {", "            start := f.Offset(ce.Pos())", "            end := f.Offset(ce.Lparen)", "            m[string(src[start:end])]++", "        }", "        return true", "    })", "    cs := make(calls, 0, len(m))", "    for k, v := range m {", "        cs = append(cs, &call{k, v})", "    }", "    sort.Sort(cs)", "    for i, c := range cs {", "        fmt.Printf(\"%-20s %4d\\n\", c.expr, c.count)", "        if i == 9 {", "            break", "        }", "    }", "}", "", "type call struct {", "    expr  string", "    count int", "}", "type calls []*call", "", "func (c calls) Len() int           { return len(c) }", "func (c calls) Swap(i, j int)      { c[i], c[j] = c[j], c[i] }", "func (c calls) Less(i, j int) bool { return c[i].count > c[j].count }"] as! [String])
    let src = String(describing: join((srcLines as! [String]), "\n"))
    var freq: [String: Int] = ([:] as! [String: Int])
    var i: Int = 0
    var order: [String] = ([] as! [String])
    while (i < Int(((src).count))) {
        let ch = String(describing: String(Array(String(describing: (src as! String)))[(i as! Int)..<Int((i &+ 1))]))
        if ((((ch >= "A") && (ch <= "Z")) || ((ch >= "a") && (ch <= "z"))) || (ch == "_")) {
            var j: Int = (i &+ 1)
            while ((j < Int(((src).count))) && isAlphaNumDot(String(describing: String(Array(String(describing: (src as! String)))[(j as! Int)..<Int((j &+ 1))])))) {
                j = Int((j &+ 1))
            }
            let token = String(describing: String(Array(String(describing: (src as! String)))[(i as! Int)..<(j as! Int)]))
            var k: Int = j
            while (k < Int(((src).count))) {
                let cc = String(describing: String(Array(String(describing: (src as! String)))[(k as! Int)..<Int((k &+ 1))]))
                if ((((cc == " ") || (cc == "\t")) || (cc == "\n")) || (cc == "\r")) {
                    k = Int((k &+ 1))
                } else {
                    break
                }
            }
            if ((k < Int(((src).count))) && (String(describing: String(Array(String(describing: (src as! String)))[(k as! Int)..<Int((k &+ 1))])) == "(")) {
                var p: Int = (i &- 1)
                while ((p >= 0) && ((String(describing: String(Array(String(describing: (src as! String)))[(p as! Int)..<Int((p &+ 1))])) == " ") || (String(describing: String(Array(String(describing: (src as! String)))[(p as! Int)..<Int((p &+ 1))])) == "\t"))) {
                    p = Int((p &- 1))
                }
                var skip: Bool = false
                if (p >= 3) {
                    let before = String(describing: String(Array(String(describing: (src as! String)))[Int((p &- 3))..<Int((p &+ 1))]))
                    if (before == "func") {
                        skip = true
                    }
                }
                if (!skip) {
                    if (freq[token] != nil) {
                        freq[String(String(describing: token))] = Int(((freq[String(String(describing: token))] as! Int) &+ 1))
                    } else {
                        freq[String(String(describing: token))] = 1
                        order = (_append(order, token) as! [String])
                    }
                }
            }
            i = (j as! Int)
        } else {
            i = Int((i &+ 1))
        }
    }
    var pairs: [[String: Any?]] = ([] as! [[String: Any?]])
    for t in order {
        pairs = ((_append(pairs, ["expr": t, "count": (freq[String(String(describing: t))] as! Int)]) as! [Any?]) as! [[String: Any?]])
    }
    pairs = (sortPairs((pairs as! [[String: Any?]])) as! [[String: Any?]])
    var idx: Int = 0
    while ((idx < Int(((pairs).count))) && (idx < 10)) {
        let p: [String: Any?] = (pairs[idx] as! [String: Any?])
        print(_p(((String(describing: p[String("expr")]) + " ") + String(describing: p[String("count")]))))
        idx = Int((idx &+ 1))
    }
}
_ = main()
