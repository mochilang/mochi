exit status 1
/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:140:1: warning: using '_' to ignore the result of a Void-returning function is redundant
138 |     print(((((String(String(describing: Int(big))) + ": ") + String(padRight(String((r as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((r as! [String: Any])["seq"]! as! [Int])))))
139 | }
140 | _ = main()
    | `- warning: using '_' to ignore the result of a Void-returning function is redundant
141 | 

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:7:31: warning: forced cast of '[Int]' to same type has no effect
  5 | func indexOf(_ xs: [Int], _ value: Int) -> Int {
  6 |     var i = 0
  7 |     while (Int(i) < Int((((xs as! [Int])).count))) {
    |                               `- warning: forced cast of '[Int]' to same type has no effect
  8 |         if (Int(xs[Int(i)]) == Int(value)) {
  9 |             return Int(i)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:11:27: warning: forced cast of 'Int' to same type has no effect
  9 |             return Int(i)
 10 |         }
 11 |         i = ((Int(i) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
 12 |     }
 13 |     return ((0 - 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:13:21: warning: forced cast of 'Int' to same type has no effect
 11 |         i = ((Int(i) + 1) as! Int)
 12 |     }
 13 |     return ((0 - 1) as! Int)
    |                     `- warning: forced cast of 'Int' to same type has no effect
 14 | }
 15 | func contains(_ xs: [Int], _ value: Int) -> Bool {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:16:30: warning: forced cast of '[Int]' to same type has no effect
 14 | }
 15 | func contains(_ xs: [Int], _ value: Int) -> Bool {
 16 |     return ((Int(indexOf((xs as! [Int]), Int(value))) != (0 - 1)) as! Bool)
    |                              `- warning: forced cast of '[Int]' to same type has no effect
 17 | }
 18 | func maxOf(_ a: Int, _ b: Int) -> Int {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:16:67: warning: forced cast of 'Bool' to same type has no effect
 14 | }
 15 | func contains(_ xs: [Int], _ value: Int) -> Bool {
 16 |     return ((Int(indexOf((xs as! [Int]), Int(value))) != (0 - 1)) as! Bool)
    |                                                                   `- warning: forced cast of 'Bool' to same type has no effect
 17 | }
 18 | func maxOf(_ a: Int, _ b: Int) -> Int {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:30:38: warning: forced cast of 'Int' to same type has no effect
 28 |     }
 29 |     var x = Int(n)
 30 |     var y = ((Int((Int(x) + 1)) / 2) as! Int)
    |                                      `- warning: forced cast of 'Int' to same type has no effect
 31 |     while (Int(y) < Int(x)) {
 32 |         x = Int(y)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:33:54: warning: forced cast of 'Int' to same type has no effect
 31 |     while (Int(y) < Int(x)) {
 32 |         x = Int(y)
 33 |         y = ((Int((Int(x) + (Int(n) / Int(x)))) / 2) as! Int)
    |                                                      `- warning: forced cast of 'Int' to same type has no effect
 34 |     }
 35 |     return Int(x)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:46:62: warning: forced cast of 'Int' to same type has no effect
 44 |     while (Int(i) <= Int(sqrt)) {
 45 |         if ((Int(n) % Int(i)) == 0) {
 46 |             sum = (((Int(sum) + Int(i)) + (Int(n) / Int(i))) as! Int)
    |                                                              `- warning: forced cast of 'Int' to same type has no effect
 47 |         }
 48 |         i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:48:27: warning: forced cast of 'Int' to same type has no effect
 46 |             sum = (((Int(sum) + Int(i)) + (Int(n) / Int(i))) as! Int)
 47 |         }
 48 |         i = ((Int(i) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
 49 |     }
 50 |     if ((Int(sqrt) * Int(sqrt)) == Int(n)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:51:39: warning: forced cast of 'Int' to same type has no effect
 49 |     }
 50 |     if ((Int(sqrt) * Int(sqrt)) == Int(n)) {
 51 |         sum = ((Int(sum) - Int(sqrt)) as! Int)
    |                                       `- warning: forced cast of 'Int' to same type has no effect
 52 |     }
 53 |     return Int(sum)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:60:22: warning: forced cast of '[Int]' to same type has no effect
 58 |     while true {
 59 |         last = Int(sumProperDivisors(Int(last)))
 60 |         seq = (((seq as! [Int]) + [Int(last)]) as! [Int])
    |                      `- warning: forced cast of '[Int]' to same type has no effect
 61 |         let n = Int((((seq as! [Int])).count))
 62 |         var aliquot = ""

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:61:28: warning: forced cast of '[Int]' to same type has no effect
 59 |         last = Int(sumProperDivisors(Int(last)))
 60 |         seq = (((seq as! [Int]) + [Int(last)]) as! [Int])
 61 |         let n = Int((((seq as! [Int])).count))
    |                            `- warning: forced cast of '[Int]' to same type has no effect
 62 |         var aliquot = ""
 63 |         if (Int(last) == 0) {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:70:89: warning: forced cast of 'String' to same type has no effect
 68 |             aliquot = "Amicable"
 69 |         } else if ((Int(n) >= 4) && (Int(last) == Int(k))) {
 70 |             aliquot = ((("Sociable[" + String(String(describing: (Int(n) - 1)))) + "]") as! String)
    |                                                                                         `- warning: forced cast of 'String' to same type has no effect
 71 |         } else if (Int(last) == Int(seq[(Int(n) - 2)])) {
 72 |             aliquot = "Aspiring"

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:73:75: warning: forced cast of 'Int' to same type has no effect
 71 |         } else if (Int(last) == Int(seq[(Int(n) - 2)])) {
 72 |             aliquot = "Aspiring"
 73 |         } else if Bool(contains((Array(seq[1..<Int(maxOf(1, ((Int(n) - 2) as! Int)))]) as! [Int]), Int(last))) {
    |                                                                           `- warning: forced cast of 'Int' to same type has no effect
 74 |             let idx = Int(indexOf((seq as! [Int]), Int(last)))
 75 |             aliquot = ((("Cyclic[" + String(String(describing: ((Int(n) - 1) - Int(idx))))) + "]") as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:74:40: warning: forced cast of '[Int]' to same type has no effect
 72 |             aliquot = "Aspiring"
 73 |         } else if Bool(contains((Array(seq[1..<Int(maxOf(1, ((Int(n) - 2) as! Int)))]) as! [Int]), Int(last))) {
 74 |             let idx = Int(indexOf((seq as! [Int]), Int(last)))
    |                                        `- warning: forced cast of '[Int]' to same type has no effect
 75 |             aliquot = ((("Cyclic[" + String(String(describing: ((Int(n) - 1) - Int(idx))))) + "]") as! String)
 76 |         } else if ((Int(n) == 16) || (Int(last) > Int(THRESHOLD))) {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:75:100: warning: forced cast of 'String' to same type has no effect
 73 |         } else if Bool(contains((Array(seq[1..<Int(maxOf(1, ((Int(n) - 2) as! Int)))]) as! [Int]), Int(last))) {
 74 |             let idx = Int(indexOf((seq as! [Int]), Int(last)))
 75 |             aliquot = ((("Cyclic[" + String(String(describing: ((Int(n) - 1) - Int(idx))))) + "]") as! String)
    |                                                                                                    `- warning: forced cast of 'String' to same type has no effect
 76 |         } else if ((Int(n) == 16) || (Int(last) > Int(THRESHOLD))) {
 77 |             aliquot = "Non-Terminating"

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:86:34: warning: forced cast of '[Int]' to same type has no effect
 84 |         
 85 |         if (String(aliquot) != "") {
 86 |             return (["seq": (seq as! [Int]), "aliquot": String(aliquot)] as [String: Any] as! [String: Any])
    |                                  `- warning: forced cast of '[Int]' to same type has no effect
 87 |         }
 88 |     }

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:86:91: warning: forced cast of '[String : Any]' to same type has no effect
 84 |         
 85 |         if (String(aliquot) != "") {
 86 |             return (["seq": (seq as! [Int]), "aliquot": String(aliquot)] as [String: Any] as! [String: Any])
    |                                                                                           `- warning: forced cast of '[String : Any]' to same type has no effect
 87 |         }
 88 |     }

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:89:26: warning: forced cast of '[Int]' to same type has no effect
 87 |         }
 88 |     }
 89 |     return (["seq": (seq as! [Int]), "aliquot": ""] as [String: Any] as! [String: Any])
    |                          `- warning: forced cast of '[Int]' to same type has no effect
 90 | }
 91 | func padLeft(_ n: Int, _ w: Int) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:89:70: warning: forced cast of '[String : Any]' to same type has no effect
 87 |         }
 88 |     }
 89 |     return (["seq": (seq as! [Int]), "aliquot": ""] as [String: Any] as! [String: Any])
    |                                                                      `- warning: forced cast of '[String : Any]' to same type has no effect
 90 | }
 91 | func padLeft(_ n: Int, _ w: Int) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:94:32: warning: forced cast of 'String' to same type has no effect
 92 |     var s = String(String(describing: Int(n)))
 93 |     while (Int(((String(s)).count)) < Int(w)) {
 94 |         s = ((" " + String(s)) as! String)
    |                                `- warning: forced cast of 'String' to same type has no effect
 95 |     }
 96 |     return String(s)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:101:32: warning: forced cast of 'String' to same type has no effect
 99 |     var r = String(s)
100 |     while (Int(((String(r)).count)) < Int(w)) {
101 |         r = ((String(r) + " ") as! String)
    |                                `- warning: forced cast of 'String' to same type has no effect
102 |     }
103 |     return String(r)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:108:32: warning: forced cast of '[Int]' to same type has no effect
106 |     var s = "["
107 |     var i = 0
108 |     while (Int(i) < Int((((seq as! [Int])).count))) {
    |                                `- warning: forced cast of '[Int]' to same type has no effect
109 |         s = ((String(s) + String(String(describing: Int(seq[Int(i)])))) as! String)
110 |         if (Int(i) < (Int((((seq as! [Int])).count)) - 1)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:109:73: warning: forced cast of 'String' to same type has no effect
107 |     var i = 0
108 |     while (Int(i) < Int((((seq as! [Int])).count))) {
109 |         s = ((String(s) + String(String(describing: Int(seq[Int(i)])))) as! String)
    |                                                                         `- warning: forced cast of 'String' to same type has no effect
110 |         if (Int(i) < (Int((((seq as! [Int])).count)) - 1)) {
111 |             s = ((String(s) + ", ") as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:110:34: warning: forced cast of '[Int]' to same type has no effect
108 |     while (Int(i) < Int((((seq as! [Int])).count))) {
109 |         s = ((String(s) + String(String(describing: Int(seq[Int(i)])))) as! String)
110 |         if (Int(i) < (Int((((seq as! [Int])).count)) - 1)) {
    |                                  `- warning: forced cast of '[Int]' to same type has no effect
111 |             s = ((String(s) + ", ") as! String)
112 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:111:37: warning: forced cast of 'String' to same type has no effect
109 |         s = ((String(s) + String(String(describing: Int(seq[Int(i)])))) as! String)
110 |         if (Int(i) < (Int((((seq as! [Int])).count)) - 1)) {
111 |             s = ((String(s) + ", ") as! String)
    |                                     `- warning: forced cast of 'String' to same type has no effect
112 |         }
113 |         i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:113:27: warning: forced cast of 'Int' to same type has no effect
111 |             s = ((String(s) + ", ") as! String)
112 |         }
113 |         i = ((Int(i) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
114 |     }
115 |     s = ((String(s) + "]") as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:115:28: warning: forced cast of 'String' to same type has no effect
113 |         i = ((Int(i) + 1) as! Int)
114 |     }
115 |     s = ((String(s) + "]") as! String)
    |                            `- warning: forced cast of 'String' to same type has no effect
116 |     return String(s)
117 | }

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:122:45: warning: forced cast of '[String : Any]' to same type has no effect
120 |     var k = 1
121 |     while (Int(k) <= 10) {
122 |         let res = (classifySequence(Int(k)) as! [String: Any])
    |                                             `- warning: forced cast of '[String : Any]' to same type has no effect
123 |         print(((((String(padLeft(Int(k), 2)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
124 |         k = ((Int(k) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:123:72: error: no exact matches in call to initializer 
121 |     while (Int(k) <= 10) {
122 |         let res = (classifySequence(Int(k)) as! [String: Any])
123 |         print(((((String(padLeft(Int(k), 2)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
    |                                                                        `- error: no exact matches in call to initializer 
124 |         k = ((Int(k) + 1) as! Int)
125 |     }

Swift.String.init:2:19: note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
1 | struct String {
2 | @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible}
  |                   `- note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
1 | struct String {
2 | public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger}
  |        `- note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:124:27: warning: forced cast of 'Int' to same type has no effect
122 |         let res = (classifySequence(Int(k)) as! [String: Any])
123 |         print(((((String(padLeft(Int(k), 2)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
124 |         k = ((Int(k) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
125 |     }
126 |     print("")

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:129:30: warning: forced cast of '[Int]' to same type has no effect
127 |     let s = ([11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488] as! [Int])
128 |     var i = 0
129 |     while (Int(i) < Int((((s as! [Int])).count))) {
    |                              `- warning: forced cast of '[Int]' to same type has no effect
130 |         let val = Int(s[Int(i)])
131 |         let res = (classifySequence(Int(val)) as! [String: Any])

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:131:47: warning: forced cast of '[String : Any]' to same type has no effect
129 |     while (Int(i) < Int((((s as! [Int])).count))) {
130 |         let val = Int(s[Int(i)])
131 |         let res = (classifySequence(Int(val)) as! [String: Any])
    |                                               `- warning: forced cast of '[String : Any]' to same type has no effect
132 |         print(((((String(padLeft(Int(val), 7)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
133 |         i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:132:74: error: no exact matches in call to initializer 
130 |         let val = Int(s[Int(i)])
131 |         let res = (classifySequence(Int(val)) as! [String: Any])
132 |         print(((((String(padLeft(Int(val), 7)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
    |                                                                          `- error: no exact matches in call to initializer 
133 |         i = ((Int(i) + 1) as! Int)
134 |     }

Swift.String.init:2:19: note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
1 | struct String {
2 | @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible}
  |                   `- note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
1 | struct String {
2 | public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger}
  |        `- note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:133:27: warning: forced cast of 'Int' to same type has no effect
131 |         let res = (classifySequence(Int(val)) as! [String: Any])
132 |         print(((((String(padLeft(Int(val), 7)) + ": ") + String(padRight(String((res as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
133 |         i = ((Int(i) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
134 |     }
135 |     print("")

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:137:41: warning: forced cast of '[String : Any]' to same type has no effect
135 |     print("")
136 |     let big = 15355717786080
137 |     let r = (classifySequence(Int(big)) as! [String: Any])
    |                                         `- warning: forced cast of '[String : Any]' to same type has no effect
138 |     print(((((String(String(describing: Int(big))) + ": ") + String(padRight(String((r as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((r as! [String: Any])["seq"]! as! [Int])))))
139 | }

/tmp/TestSwiftTranspiler_Rosetta_Golden2164813173/001/main.swift:138:78: error: no exact matches in call to initializer 
136 |     let big = 15355717786080
137 |     let r = (classifySequence(Int(big)) as! [String: Any])
138 |     print(((((String(String(describing: Int(big))) + ": ") + String(padRight(String((r as! [String: Any])["aliquot"]!), 15))) + " ") + String(joinWithCommas(((r as! [String: Any])["seq"]! as! [Int])))))
    |                                                                              `- error: no exact matches in call to initializer 
139 | }
140 | _ = main()

Swift.String.init:2:19: note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
1 | struct String {
2 | @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible}
  |                   `- note: candidate requires that 'Any' conform to 'LosslessStringConvertible' (requirement specified as 'T' : 'LosslessStringConvertible')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
1 | struct String {
2 | public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger}
  |        `- note: candidate requires that 'Any' conform to 'BinaryInteger' (requirement specified as 'T' : 'BinaryInteger')
3 | 

Swift.String.init:2:8: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that 'Any' conform to 'Sequence' (requirement specified as 'S' : 'Sequence')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 
