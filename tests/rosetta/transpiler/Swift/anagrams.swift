// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:10:08 GMT+7
import Foundation

func sortRunes(_ s: String) -> String {
    var arr: [String] = ([] as! [String])
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        arr = (((arr as! [String]) + [String(String(Array(s)[Int(i)..<(Int(i) + 1)]))]) as! [String])
        i = ((Int(i) + 1) as! Int)
    }
    var n = Int((((arr as! [String])).count))
    var m = 0
    while (Int(m) < Int(n)) {
        var j = 0
        while (Int(j) < (Int(n) - 1)) {
            if (String(arr[Int(j)]) > String(arr[(Int(j) + 1)])) {
                let tmp = String(arr[Int(j)])
                arr[Int(j)] = String(arr[(Int(j) + 1)])
                arr[(Int(j) + 1)] = String(tmp)
            }
            j = ((Int(j) + 1) as! Int)
        }
        m = ((Int(m) + 1) as! Int)
    }
    var out = ""
    i = 0
    while (Int(i) < Int(n)) {
        out = ((String(out) + String(arr[Int(i)])) as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(out)
}
func sortStrings(_ xs: [String]) -> [String] {
    var res: [String] = ([] as! [String])
    var tmp = (xs as! [String])
    while (Int((((tmp as! [String])).count)) > 0) {
        var min = String(tmp[0])
        var idx = 0
        var i = 1
        while (Int(i) < Int((((tmp as! [String])).count))) {
            if (String(tmp[Int(i)]) < String(min)) {
                min = String(tmp[Int(i)])
                idx = Int(i)
            }
            i = ((Int(i) + 1) as! Int)
        }
        res = (((res as! [String]) + [String(min)]) as! [String])
        var out: [String] = ([] as! [String])
        var j = 0
        while (Int(j) < Int((((tmp as! [String])).count))) {
            if (Int(j) != Int(idx)) {
                out = (((out as! [String]) + [String(tmp[Int(j)])]) as! [String])
            }
            j = ((Int(j) + 1) as! Int)
        }
        tmp = (out as! [String])
    }
    return (res as! [String])
}
func main() {
    let words = (["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"] as! [String])
    var groups: [String: [String]] = ([:] as! [String: [String]])
    var maxLen = 0
    for w in (words as! [String]) {
        let k = String(sortRunes((w as! String)))
        if (!(((groups as! [String: [String]])[String(k)] != nil) as! Bool)) {
            groups[String(k)] = (([w] as! [Any]) as! [String])
        } else {
            groups[String(k)] = (((((groups[String(k)]! as! [String]) + [w]) as! [String]) as! [Any]) as! [String])
        }
        if (Int((((groups[String(k)]! as! [String])).count)) > Int(maxLen)) {
            maxLen = Int((((groups[String(k)]! as! [String])).count))
        }
    }
    var printed: [String: Bool] = ([:] as! [String: Bool])
    for w in (words as! [String]) {
        let k = String(sortRunes((w as! String)))
        if (Int((((groups[String(k)]! as! [String])).count)) == Int(maxLen)) {
            if (!(((printed as! [String: Bool])[String(k)] != nil) as! Bool)) {
                var g = (sortStrings((groups[String(k)]! as! [String])) as! [String])
                var line = (("[" + String(g[0])) as! String)
                var i = 1
                while (Int(i) < Int((((g as! [String])).count))) {
                    line = (((String(line) + " ") + String(g[Int(i)])) as! String)
                    i = ((Int(i) + 1) as! Int)
                }
                line = ((String(line) + "]") as! String)
                print(String(line))
                printed[String(k)] = true
            }
        }
    }
}
_ = main()
