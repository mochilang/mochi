// Generated by Mochi transpiler v0.10.40 on 2025-07-26 00:35:51 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sortRunes(_ s: String) -> String {
        var arr: [String] = ([] as! [String])
        var i = 0
        while (i < Int(((s).count))) {
            arr = ((arr + [String(Array(s)[i..<(i + 1)])]) as! [String])
            i = ((i + 1) as! Int)
        }
        var n = Int(((arr).count))
        var m = 0
        while (m < n) {
            var j = 0
            while (j < (n - 1)) {
                if (String(describing: arr[j]) > String(describing: arr[(j + 1)])) {
                    let tmp = String(describing: arr[j])
                    arr[j] = String(describing: arr[(j + 1)])
                    arr[(j + 1)] = (tmp as! String)
                }
                j = ((j + 1) as! Int)
            }
            m = ((m + 1) as! Int)
        }
        var out = ""
        i = 0
        while (i < n) {
            out = ((out + String(describing: arr[i])) as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func sortStrings(_ xs: [String]) -> [String] {
        var res: [String] = ([] as! [String])
        var tmp = (xs as! [String])
        while (Int(((tmp).count)) > 0) {
            var min = String(describing: tmp[0])
            var idx = 0
            var i = 1
            while (i < Int(((tmp).count))) {
                if (String(describing: tmp[i]) < min) {
                    min = String(describing: tmp[i])
                    idx = (i as! Int)
                }
                i = ((i + 1) as! Int)
            }
            res = ((res + [min]) as! [String])
            var out: [String] = ([] as! [String])
            var j = 0
            while (j < Int(((tmp).count))) {
                if (j != idx) {
                    out = ((out + [String(describing: tmp[j])]) as! [String])
                }
                j = ((j + 1) as! Int)
            }
            tmp = (out as! [String])
        }
        return (res as! [String])
    }
    func main() {
        let words = (["abel", "able", "bale", "bela", "elba", "alger", "glare", "lager", "large", "regal", "angel", "angle", "galen", "glean", "lange", "caret", "carte", "cater", "crate", "trace", "elan", "lane", "lean", "lena", "neal", "evil", "levi", "live", "veil", "vile"] as! [String])
        var groups: [String: [String]] = ([:] as! [String: [String]])
        var maxLen = 0
        for w in words {
            let k = String(describing: sortRunes((w as! String)))
            if (!((groups[k] != nil) as! Bool)) {
                groups[k] = ([w] as! [String])
            } else {
                groups[k] = (((groups[k]! as! [String]) + [w]) as! [String])
            }
            if (Int((((groups[k]! as! [String])).count)) > maxLen) {
                maxLen = Int((((groups[k]! as! [String])).count))
            }
        }
        var printed: [String: Bool] = ([:] as! [String: Bool])
        for w in words {
            let k = String(describing: sortRunes((w as! String)))
            if (Int((((groups[k]! as! [String])).count)) == maxLen) {
                if (!((printed[k] != nil) as! Bool)) {
                    var g = (sortStrings((groups[k]! as! [String])) as! [String])
                    var line = (("[" + String(describing: g[0])) as! String)
                    var i = 1
                    while (i < Int(((g).count))) {
                        line = (((line + " ") + String(describing: g[i])) as! String)
                        i = ((i + 1) as! Int)
                    }
                    line = ((line + "]") as! String)
                    print(line)
                    printed[k] = true
                }
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
