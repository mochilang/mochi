// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:34:51 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func powf(_ base: Double, _ exp: Int) -> Double {
        var result = 1.0
        var i = 0
        while (i < exp) {
            result = Double((result * base))
            i = Int((i + 1))
        }
        return Double(result)
    }
    func nthRoot(_ x: Double, _ n: Int) -> Double {
        var low = 0.0
        var high = x
        var i = 0
        while (i < 60) {
            let mid = (Double((low + high)) / 2.0)
            if (Double(powf(Double(mid), Int(n))) > x) {
                high = Double(mid)
            } else {
                low = Double(mid)
            }
            i = Int((i + 1))
        }
        return Double(low)
    }
    func main() {
        var sum = 0.0
        var sumRecip = 0.0
        var prod = 1.0
        var n = 1
        while (n <= 10) {
            let f = Double(n)
            sum = Double((sum + f))
            sumRecip = Double((sumRecip + (1.0 / f)))
            prod = Double((prod * f))
            n = Int((n + 1))
        }
        let count = 10.0
        let a = (sum / count)
        let g = Double(nthRoot(Double(prod), 10))
        let h = (count / sumRecip)
        print(_p(((((("A: " + _p(a)) + " G: ") + _p(g)) + " H: ") + _p(h))))
        print(_p(("A >= G >= H: " + _p(((a >= g) && (g >= h))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
