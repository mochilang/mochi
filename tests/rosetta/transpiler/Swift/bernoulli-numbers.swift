// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:00:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _padStart(_ s: String, _ w: Int, _ p: String) -> String {
    var out = s
    while out.count < w { out = p + out }
    return out
}
func bernoulli(_ n: Int) -> Double {
    var a: [Double] = ([] as! [Double])
    var m: Int = 0
    while (m <= n) {
        a = ((((a + [(1 / Double((m + 1)))]) as! [Double]) as! [Any]) as! [Double])
        var j: Int = m
        while (j >= 1) {
            a[(j - 1)] = Double((Double(j) * Double((Double(a[(j - 1)]) - Double(a[j])))))
            j = Int((j - 1))
        }
        m = Int((m + 1))
    }
    return Double(a[0])
}
func padStart(_ s: String, _ width: Int, _ pad: String) -> String {
    var out: String = s
    while (Int(((out).count)) < width) {
        out = String((pad + out))
    }
    return String(out)
}
for i in 0..<61 {
    let b = Double(bernoulli(Int(i)))
    if (num(b) != 0) {
        let numStr = _p(num(b))
        let denStr = _p(denom(b))
        print(_p(((((("B(" + String(describing: _padStart(_p(i), 2, " "))) + ") =") + String(describing: _padStart(numStr, 45, " "))) + "/") + denStr)))
    }
}
