// Generated by Mochi transpiler v0.10.41 on 2025-07-27 16:17:41 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _padStart(_ s: String, _ w: Int, _ p: String) -> String {
    var out = s
    while out.count < w { out = p + out }
    return out
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _rat_num(_ v: Double) -> Int {
    if v.isNaN { return 0 }
    if v > Double(Int.max) { return Int.max }
    if v < Double(Int.min) { return Int.min }
    return Int(v)
}
func _rat_denom(_ v: Double) -> Int { 1 }
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bernoulli(_ n: Int) -> Double {
        var a: [Double] = ([] as! [Double])
        var m: Int = 0
        while (m <= n) {
            a = ((((a + [(1 / Double((m + 1)))]) as! [Double]) as! [Any]) as! [Double])
            var j: Int = m
            while (j >= 1) {
                a[(j - 1)] = Double((Double(j) * Double((Double(a[(j - 1)]) - Double(a[j])))))
                j = Int((j - 1))
            }
            m = Int((m + 1))
        }
        return Double(a[0])
    }
    func padStart(_ s: String, _ width: Int, _ pad: String) -> String {
        var out: String = s
        while (Int(((out).count)) < width) {
            out = String((pad + out))
        }
        return String(out)
    }
    for i in 0..<61 {
        let b = Double(bernoulli(Int(i)))
        if (_rat_num(b) != 0) {
            let numStr = _p(_rat_num(b))
            let denStr = _p(_rat_denom(b))
            print(_p(((((("B(" + String(describing: _padStart(_p(i), 2, " "))) + ") =") + String(describing: _padStart(numStr, 45, " "))) + "/") + denStr)))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
