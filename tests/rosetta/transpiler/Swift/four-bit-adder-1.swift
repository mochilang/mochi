// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:24:44 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

struct SumCarry {
    var s: Bool
    var c: Bool
}
struct Add4Result {
    var v: Bool
    var s3: Bool
    var s2: Bool
    var s1: Bool
    var s0: Bool
}
func xor(_ a: Bool, _ b: Bool) -> Bool {
    return ((a && ((!b) as! Bool)) || (((!a) as! Bool) && b))
}
func ha(_ a: Bool, _ b: Bool) -> SumCarry {
    return (SumCarry(s: xor((a as! Bool), (b as! Bool)), c: (a && b)) as! SumCarry)
}
func fa(_ a: Bool, _ b: Bool, _ c0: Bool) -> SumCarry {
    let r1 = ha((a as! Bool), (c0 as! Bool))
    let r2 = ha((r1.s as! Bool), (b as! Bool))
    return (SumCarry(s: r2.s, c: (r1.c || r2.c)) as! SumCarry)
}
func add4(_ a3: Bool, _ a2: Bool, _ a1: Bool, _ a0: Bool, _ b3: Bool, _ b2: Bool, _ b1: Bool, _ b0: Bool) -> Add4Result {
    let r0 = fa((a0 as! Bool), (b0 as! Bool), false)
    let r1 = fa((a1 as! Bool), (b1 as! Bool), (r0.c as! Bool))
    let r2 = fa((a2 as! Bool), (b2 as! Bool), (r1.c as! Bool))
    let r3 = fa((a3 as! Bool), (b3 as! Bool), (r2.c as! Bool))
    return (Add4Result(v: r3.c, s3: r3.s, s2: r2.s, s1: r1.s, s0: r0.s) as! Add4Result)
}
func b2i(_ b: Bool) -> Int {
    if b {
        return 1
    }
    return 0
}
func main() {
    let r = add4(true, false, true, false, true, false, false, true)
    print(_p(((((((((_p(Int(b2i((r.v as! Bool)))) + " ") + _p(Int(b2i((r.s3 as! Bool))))) + " ") + _p(Int(b2i((r.s2 as! Bool))))) + " ") + _p(Int(b2i((r.s1 as! Bool))))) + " ") + _p(Int(b2i((r.s0 as! Bool)))))))
}
_ = main()
