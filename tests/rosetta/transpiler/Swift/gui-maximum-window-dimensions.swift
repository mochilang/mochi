// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:15:36 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct Screen {
    var w: Int
    var h: Int
}
struct Window {
    var x: Int
    var y: Int
    var w: Int
    var h: Int
    var maximized: Bool
}
func maximize(_ s: Screen, _ win: inout Window) -> Window {
    win.w = (s.w as! Int)
    win.h = (s.h as! Int)
    win.maximized = true
    return win
}
func main() {
    let screen = Screen(w: 1920, h: 1080)
    print(_p(((("Screen size: " + String(describing: screen.w)) + " x ") + String(describing: screen.h))))
    var win: Window = Window(x: 50, y: 50, w: 800, h: 600, maximized: false)
    win = (maximize((screen as! Screen), &win) as! Window)
    print(_p(((("Max usable : " + String(describing: win.w)) + " x ") + String(describing: win.h))))
}
_ = main()
