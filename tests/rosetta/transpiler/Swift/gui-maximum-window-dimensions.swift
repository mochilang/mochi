// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:17:08 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct Screen: Codable {
    var w: Int
    var h: Int
    init() {
        self.w = 0
        self.h = 0
    }
    init(w: Int, h: Int) {
        self.w = w
        self.h = h
    }
}
struct Window: Codable {
    var x: Int
    var y: Int
    var w: Int
    var h: Int
    var maximized: Bool
    init() {
        self.x = 0
        self.y = 0
        self.w = 0
        self.h = 0
        self.maximized = false
    }
    init(x: Int, y: Int, w: Int, h: Int, maximized: Bool) {
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.maximized = maximized
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func maximize(_ s: Screen, _ win: inout Window) -> Window {
        win.w = Int(s.w)
        win.h = Int(s.h)
        win.maximized = true
        return win
    }
    func main() {
        let screen = Screen(w: 1920, h: 1080)
        print(_p(((("Screen size: " + String(describing: screen.w)) + " x ") + String(describing: screen.h))))
        var win: Window = Window(x: 50, y: 50, w: 800, h: 600, maximized: false)
        win = (maximize((screen as! Screen), &win) as! Window)
        print(_p(((("Max usable : " + String(describing: win.w)) + " x ") + String(describing: win.h))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
