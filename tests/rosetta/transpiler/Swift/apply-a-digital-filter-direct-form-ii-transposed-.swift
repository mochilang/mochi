// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:53:05 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func applyFilter(_ input: [Double], _ a: [Double], _ b: [Double]) -> [Double] {
        var out: [Double] = ([] as! [Double])
        let scale = (1.0 / Double(a[0]))
        var i = 0
        while (i < Int(((input).count))) {
            var tmp = 0.0
            var j = 0
            while ((j <= i) && (j < Int(((b).count)))) {
                tmp = Double((tmp + (Double(b[j]) * Double(input[(i - j)]))))
                j = Int((j + 1))
            }
            j = 0
            while ((j < i) && ((j + 1) < Int(((a).count)))) {
                tmp = Double((tmp - (Double(a[(j + 1)]) * Double(out[((i - j) - 1)]))))
                j = Int((j + 1))
            }
            out = ((out + [(tmp * scale)]) as! [Double])
            i = Int((i + 1))
        }
        return (out as! [Double])
    }
    let a = ([1.0, -0.00000000000000027756, 0.33333333, -0.0000000000000000185] as! [Double])
    let b = ([0.16666667, 0.5, 0.5, 0.16666667] as! [Double])
    let sig = ([-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589] as! [Double])
    let res = (applyFilter((sig as! [Double]), (a as! [Double]), (b as! [Double])) as! [Double])
    var k = 0
    while (k < Int(((res).count))) {
        print(Double(res[k]))
        k = Int((k + 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
