// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:47:01 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) == ch) {
                return (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (-1 as! Int)
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx: Int = Int((String(describing: (upper as! String)).firstIndex(of: Character(String(describing: (ch as! String))))?.utf16Offset(in: String(describing: (upper as! String)) ) ?? -1))
        if (idx >= 0) {
            return ((65 + idx) as! Int)
        }
        idx = Int((String(describing: (lower as! String)).firstIndex(of: Character(String(describing: (ch as! String))))?.utf16Offset(in: String(describing: (lower as! String)) ) ?? -1))
        if (idx >= 0) {
            return ((97 + idx) as! Int)
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return (String(Array(upper)[(n - 65)..<(n - 64)]) as! String)
        }
        if ((n >= 97) && (n < 123)) {
            return (String(Array(lower)[(n - 97)..<(n - 96)]) as! String)
        }
        return "?"
    }
    func shiftRune(_ r: String, _ k: Int) -> String {
        if ((r >= "a") && (r <= "z")) {
            return String(describing: chr(((Int((Int(((Int(ord((r as! String))) - 97) + k)) % 26)) + 97) as! Int)))
        }
        if ((r >= "A") && (r <= "Z")) {
            return String(describing: chr(((Int((Int(((Int(ord((r as! String))) - 65) + k)) % 26)) + 65) as! Int)))
        }
        return (r as! String)
    }
    func encipher(_ s: String, _ k: Int) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            out = ((out + String(describing: shiftRune((String(Array(s)[i..<(i + 1)]) as! String), (k as! Int)))) as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func decipher(_ s: String, _ k: Int) -> String {
        return String(describing: encipher((s as! String), ((Int((26 - (k % 26))) % 26) as! Int)))
    }
    func main() {
        let pt = "The five boxing wizards jump quickly"
        print(_p(("Plaintext: " + pt)))
        for key in ([0, 1, 7, 25, 26] as! [Int]) {
            if ((key < 1) || (key > 25)) {
                print(_p((("Key " + _p(key)) + " invalid")))
                continue
            }
            let ct = String(describing: encipher((pt as! String), (key as! Int)))
            print(_p(("Key " + _p(key))))
            print(_p(("  Enciphered: " + ct)))
            print(_p(("  Deciphered: " + String(describing: decipher((ct as! String), (key as! Int))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
