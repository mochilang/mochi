// Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:50:33 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var doors: [Any] = ([] as! [Any])
    for i in 0..<100 {
        doors = ((((doors + [false]) as! [Any]) as! [Bool]) as! [Any])
    }
    for pass in 1..<101 {
        var idx = ((pass - 1) as! Int)
        while (idx < 100) {
            doors[idx] = (!((doors as! [Any])[idx] as! Bool))
            idx = ((idx + pass) as! Int)
        }
    }
    for row in 0..<10 {
        var line = ""
        for col in 0..<10 {
            let idx = ((row * 10) + col)
            if ((doors as! [Any])[idx] as! Bool) {
                line = ((line + "1") as! String)
            } else {
                line = ((line + "0") as! String)
            }
            if (col < 9) {
                line = ((line + " ") as! String)
            }
        }
        print(line)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
