// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:09:42 GMT+7
import Foundation

let PI = 3.141592653589793
func sinApprox(_ x: Double) -> Double {
    var term = Double(x)
    var sum = Double(x)
    var n = 1
    while (Int(n) <= 12) {
        let denom = Double((Int((2 * Int(n))) * Int(((2 * Int(n)) + 1))))
        term = ((((-Double(term) * Double(x)) * Double(x)) / Double(denom)) as! Double)
        sum = ((Double(sum) + Double(term)) as! Double)
        n = ((Int(n) + 1) as! Int)
    }
    return Double(sum)
}
let dt = 0.01
var s = 0.0
var t1 = 0.0
var k1 = Double(sinApprox(0.0))
var i = 1
while (Int(i) <= 200) {
    let t2 = (Double(i) * Double(dt))
    let k2 = Double(sinApprox(((Double(t2) * Double(PI)) as! Double)))
    s = ((Double(s) + ((Double((Double(k1) + Double(k2))) * 0.5) * Double((Double(t2) - Double(t1))))) as! Double)
    t1 = Double(t2)
    k1 = Double(k2)
    i = ((Int(i) + 1) as! Int)
}
var i2 = 1
while (Int(i2) <= 50) {
    let t2 = (2.0 + (Double(i2) * Double(dt)))
    let k2 = 0.0
    s = ((Double(s) + ((Double((Double(k1) + Double(k2))) * 0.5) * Double((Double(t2) - Double(t1))))) as! Double)
    t1 = Double(t2)
    k1 = Double(k2)
    i2 = ((Int(i2) + 1) as! Int)
}
print(Double(s))
