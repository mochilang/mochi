// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:46 GMT+7
import Foundation

let PI = 3.141592653589793
func sinApprox(_ x: Double) -> Double {
    var term = (x as! Double)
    var sum = (x as! Double)
    var n = 1
    while (n <= 12) {
        let denom = Double((Int((2 * n)) * Int(((2 * n) + 1))))
        term = ((((-term * x) * x) / denom) as! Double)
        sum = ((sum + term) as! Double)
        n = ((n + 1) as! Int)
    }
    return (sum as! Double)
}
let dt = 0.01
var s = 0.0
var t1 = 0.0
var k1 = Double(sinApprox(0.0))
var i = 1
while (i <= 200) {
    let t2 = (Double(i) * dt)
    let k2 = Double(sinApprox(((t2 * PI) as! Double)))
    s = ((s + ((Double((k1 + k2)) * 0.5) * Double((t2 - t1)))) as! Double)
    t1 = (t2 as! Double)
    k1 = (k2 as! Double)
    i = ((i + 1) as! Int)
}
var i2 = 1
while (i2 <= 50) {
    let t2 = (2.0 + (Double(i2) * dt))
    let k2 = 0.0
    s = ((s + ((Double((k1 + k2)) * 0.5) * Double((t2 - t1)))) as! Double)
    t1 = (t2 as! Double)
    k1 = (k2 as! Double)
    i2 = ((i2 + 1) as! Int)
}
print(s)
