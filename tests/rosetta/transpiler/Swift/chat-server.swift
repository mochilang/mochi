// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:45 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func removeName(_ names: [String], _ name: String) -> [String] {
        var out: [String] = ([] as! [String])
        for n in names {
            if (n != name) {
                out = (_append(out, n) as! [String])
            }
        }
        return (out as! [String])
    }
    func main() {
        var clients: [String] = ([] as! [String])
        func broadcast(_ msg: String) {
            print(_p(msg))
        }
        func add(_ name: String) {
            clients = (_append(clients, name) as! [String])
            _ = broadcast(((("+++ \"" + name) + "\" connected +++\n") as! String))
        }
        func send(_ name: String, _ msg: String) {
            _ = broadcast(((((name + "> ") + msg) + "\n") as! String))
        }
        func remove(_ name: String) {
            clients = (removeName((clients as! [String]), (name as! String)) as! [String])
            _ = broadcast(((("--- \"" + name) + "\" disconnected ---\n") as! String))
        }
        _ = add("Alice")
        _ = add("Bob")
        _ = send("Alice", "Hello Bob!")
        _ = send("Bob", "Hi Alice!")
        _ = remove("Bob")
        _ = remove("Alice")
        _ = broadcast("Server stopping!\n")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
