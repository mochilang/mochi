// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:31 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    struct Complex {
        var re: Double
        var im: Double
    }
    func sinApprox(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var n: Int = 1
        while (n <= 10) {
            let denom = Double((Int((2 * n)) * Int(((2 * n) + 1))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func cosApprox(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n <= 10) {
            let denom = Double((Int(((2 * n) - 1)) * Int((2 * n))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func cis(_ x: Double) -> Complex {
        return (Complex(re: Double(cosApprox(Double(x))), im: Double(sinApprox(Double(x)))) as! Complex)
    }
    func add(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: (a.re + b.re), im: (a.im + b.im)) as! Complex)
    }
    func cstr(_ a: Complex) -> String {
        var s: String = ("(" + _p(a.re))
        if (a.im >= 0) {
            s = String(describing: (((s + "+") + _p(a.im)) + "i)"))
        } else {
            s = String(describing: ((s + _p(a.im)) + "i)"))
        }
        return String(describing: s)
    }
    func main() {
        let result = add((cis(Double(PI)) as! Complex), (Complex(re: 1.0, im: 0.0) as! Complex))
        print(_p(String(describing: cstr((result as! Complex)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
