// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:28:04 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return Bool((n == 2))
        }
        if ((n % 3) == 0) {
            return Bool((n == 3))
        }
        var d = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 2))
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 4))
        }
        return true
    }
    func countPrimeFactors(_ n: Int) -> Int {
        var n = n
        if (n == 1) {
            return 0
        }
        if Bool(isPrime(Int(n))) {
            return 1
        }
        var count = 0
        var f = 2
        while true {
            if ((n % f) == 0) {
                count = Int((count + 1))
                n = Int((n / f))
                if (n == 1) {
                    return Int(count)
                }
                if Bool(isPrime(Int(n))) {
                    f = Int(n)
                }
            } else if (f >= 3) {
                f = Int((f + 2))
            } else {
                f = 3
            }
            
        }
        return Int(count)
    }
    func pad4(_ n: Int) -> String {
        var s = _p(n)
        while (Int(((s).count)) < 4) {
            s = String((" " + s))
        }
        return String(s)
    }
    func main() {
        let max = 120
        print(_p((("The attractive numbers up to and including " + _p(max)) + " are:")))
        var count = 0
        var line = ""
        var lineCount = 0
        var i = 1
        while (i <= max) {
            let c = Int(countPrimeFactors(Int(i)))
            if Bool(isPrime(Int(c))) {
                line = String((line + String(describing: pad4(Int(i)))))
                count = Int((count + 1))
                lineCount = Int((lineCount + 1))
                if (lineCount == 20) {
                    print(_p(line))
                    line = ""
                    lineCount = 0
                }
            }
            i = Int((i + 1))
        }
        if (lineCount > 0) {
            print(_p(line))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
