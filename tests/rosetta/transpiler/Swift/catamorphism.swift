// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:31 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func add(_ a: Int, _ b: Int) -> Int {
        return ((a + b) as! Int)
    }
    func sub(_ a: Int, _ b: Int) -> Int {
        return ((a - b) as! Int)
    }
    func mul(_ a: Int, _ b: Int) -> Int {
        return ((a * b) as! Int)
    }
    func fold(_ f: (Int, Int) -> Int, _ xs: [Int]) -> Int {
        var r: Int = (xs[0] as! Int)
        var i: Int = 1
        while (i < Int(((xs).count))) {
            r = Int(f((r as! Int), (xs[i] as! Int)))
            i = ((i + 1) as! Int)
        }
        return (r as! Int)
    }
    let n: [Int] = ([(1 as! Any), (2 as! Any), (3 as! Any), (4 as! Any), (5 as! Any)] as! [Int])
    print(_p(Int(fold({ (a: Int, b: Int) -> Int in Int(add((a as! Int), (b as! Int))) }, (n as! [Int])))))
    print(_p(Int(fold({ (a: Int, b: Int) -> Int in Int(sub((a as! Int), (b as! Int))) }, (n as! [Int])))))
    print(_p(Int(fold({ (a: Int, b: Int) -> Int in Int(mul((a as! Int), (b as! Int))) }, (n as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
