// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:22 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func toOct(_ n: Int) -> String {
    if (n == 0) {
        return "0"
    }
    let digits = "01234567"
    var out: String = ""
    var v: Int = n
    while (v > 0) {
        let d = (v % 8)
        out = ((String(Array(digits)[d..<(d &+ 1)]) + out) as! String)
        v = Int((v / 8))
    }
    return out
}
func main() {
    for i in 0..<16 {
        print(_p(String(describing: toOct((i as! Int)))))
    }
}
_ = main()
