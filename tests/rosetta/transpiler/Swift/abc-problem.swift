// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:52:55 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fields(_ s: String) -> [String] {
        var res: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(Array(s)[i..<(i &+ 1)])
            if (c == " ") {
                if (Int(((cur).count)) > 0) {
                    res = (_append(res, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + c) as! String)
            }
            i = Int((i &+ 1))
        }
        if (Int(((cur).count)) > 0) {
            res = (_append(res, cur) as! [String])
        }
        return res
    }
    func canSpell(_ word: String, _ blks: [String]) -> Bool {
        if (Int(((word).count)) == 0) {
            return true
        }
        let c = String(describing: (String(Array(word)[0..<1]).lowercased()))
        var i: Int = 0
        while (i < Int(((blks).count))) {
            let b = (blks[i] as! String)
            if ((c == String(describing: (String(Array(b)[0..<1]).lowercased()))) || (c == String(describing: (String(Array(b)[1..<2]).lowercased())))) {
                var rest: [String] = ([] as! [String])
                var j: Int = 0
                while (j < Int(((blks).count))) {
                    if (j != i) {
                        rest = (_append(rest, (blks[j] as! String)) as! [String])
                    }
                    j = Int((j &+ 1))
                }
                if canSpell((String(Array(word)[1..<Array(word).count]) as! String), (rest as! [String])) {
                    return true
                }
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func newSpeller(_ blocks: String) -> (String) -> Bool {
        let bl: [String] = (fields((blocks as! String)) as! [String])
        return { (w: String) -> Bool in canSpell((w as! String), (bl as! [String])) }
    }
    func main() {
        let sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
        for word in (["A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"] as! [String]) {
            print(_p(((word + " ") + String(describing: sp((word as! String))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
