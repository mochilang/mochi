// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:19:40 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var s = s
    var res: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (i < ((s).count)) {
        let c = String(Array(s)[i..<(i + 1)])
        if (c == " ") {
            if (((cur).count) > 0) {
                res = ((res + [cur]) as! [String])
                cur = ""
            }
        } else {
            cur = ((cur + c) as! String)
        }
        i = ((i + 1) as! Int)
    }
    if (((cur).count) > 0) {
        res = ((res + [cur]) as! [String])
    }
    return (res as! [String])
}
func canSpell(_ word: String, _ blks: [String]) -> Bool {
    var word = word
    var blks = blks
    if (((word).count) == 0) {
        return true
    }
    let c = (String(Array(word)[0..<1]).lowercased())
    var i = 0
    while (i < ((blks).count)) {
        let b = blks[i]
        if ((c == (String(Array(b)[0..<1]).lowercased())) || (c == (String(Array(b)[1..<2]).lowercased()))) {
            var rest: [String] = ([] as! [String])
            var j = 0
            while (j < ((blks).count)) {
                if (j != i) {
                    rest = ((rest + [blks[j]]) as! [String])
                }
                j = ((j + 1) as! Int)
            }
            if canSpell(String(Array(word)[1..<Array(word).count]), rest) {
                return true
            }
        }
        i = ((i + 1) as! Int)
    }
    return false
}
func newSpeller(_ blocks: String) -> (String) -> Bool {
    var blocks = blocks
    let bl = fields(blocks)
    return { (w: String) -> Bool in canSpell((w as! String), bl) }
}
func main() {
    let sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
    for word in ["A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"] {
        print(((String(word) + " ") + String(describing: sp((word as! String)))))
    }
}
main()
