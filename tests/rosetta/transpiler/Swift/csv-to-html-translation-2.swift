// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:14:08 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _split(_ s: String, _ sep: String) -> [String] {
    let d = sep.isEmpty ? " " : sep
    return s.components(separatedBy: d)
}
let c = ((((("Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n") + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n") + "The multitude,Who are you?\n") + "Brians mother,I'm his mother; that's who!\n") + "The multitude,Behold his mother! Behold his mother!")
var rows: [[String]] = ([] as! [[String]])
for line in (_split(c, "\n") as! [String]) {
    rows = (_append(rows, (_split(line, ",") as! [String])) as! [[String]])
}
let headings = true
print(_p("<table>"))
if headings {
    if (Int(((rows).count)) > 0) {
        var th: String = ""
        for h in (rows[0] as! [String]) {
            th = ((((th + "<th>") + h) + "</th>") as! String)
        }
        print(_p("   <thead>"))
        print(_p((("      <tr>" + th) + "</tr>")))
        print(_p("   </thead>"))
        print(_p("   <tbody>"))
        var i: Int = 1
        while (i < Int(((rows).count))) {
            var cells: String = ""
            for cell in (rows[i] as! [String]) {
                cells = ((((cells + "<td>") + cell) + "</td>") as! String)
            }
            print(_p((("      <tr>" + cells) + "</tr>")))
            i = Int((i &+ 1))
        }
        print(_p("   </tbody>"))
    }
} else {
    for row in rows {
        var cells: String = ""
        for cell in row {
            cells = ((((cells + "<td>") + cell) + "</td>") as! String)
        }
        print(_p((("    <tr>" + cells) + "</tr>")))
    }
}
print(_p("</table>"))
