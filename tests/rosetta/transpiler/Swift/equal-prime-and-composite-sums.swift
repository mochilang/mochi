// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:21:33 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _padStart(_ s: String, _ w: Int, _ p: String) -> String {
    var out = s
    while out.count < w { out = p + out }
    return out
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var i: Int = (Int(((s).count)) &- 3)
        while (i >= 1) {
            s = (((String(Array(s)[0..<i]) + ",") + String(Array(s)[i..<Int(((s).count))])) as! String)
            i = Int((i &- 3))
        }
        return s
    }
    func primeSieve(_ n: Int) -> [Bool] {
        var sieve: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i <= n) {
            sieve = (_append(sieve, false) as! [Bool])
            i = Int((i &+ 1))
        }
        sieve[0] = true
        sieve[1] = true
        var p: Int = 2
        while ((p &* p) <= n) {
            if (!(sieve[p] as! Bool)) {
                var m: Int = (p &* p)
                while (m <= n) {
                    sieve[m] = true
                    m = Int((m &+ p))
                }
            }
            p = Int((p &+ 1))
        }
        return sieve
    }
    func search(_ xs: [Int], _ target: Int) -> Int {
        var low: Int = 0
        var high: Int = Int(((xs).count))
        while (low < high) {
            var mid: Int = (Int((low &+ high)) / 2)
            if ((xs[mid] as! Int) < target) {
                low = Int((mid &+ 1))
            } else {
                high = (mid as! Int)
            }
        }
        return low
    }
    func main() {
        let limit = 45000
        let compMap: [Bool] = (primeSieve((limit as! Int)) as! [Bool])
        var compSums: [Int] = ([] as! [Int])
        var primeSums: [Int] = ([] as! [Int])
        var csum: Int = 0
        var psum: Int = 0
        var i: Int = 2
        while (i <= limit) {
            if (compMap[i] as! Bool) {
                csum = Int((csum &+ i))
                compSums = (_append(compSums, csum) as! [Int])
            } else {
                psum = Int((psum &+ i))
                primeSums = (_append(primeSums, psum) as! [Int])
            }
            i = Int((i &+ 1))
        }
        print(_p("Sum        | Prime Index | Composite Index"))
        print(_p("------------------------------------------"))
        var idx: Int = 0
        while (idx < Int(((primeSums).count))) {
            let s = (primeSums[idx] as! Int)
            let j = Int(search((compSums as! [Int]), (s as! Int)))
            if ((j < Int(((compSums).count))) && ((compSums[j] as! Int) == s)) {
                let sumStr = _padStart(_p(commatize((s as! Int))), 10, " ")
                let piStr = _padStart(_p(commatize(Int((idx &+ 1)))), 11, " ")
                let ciStr = _padStart(_p(commatize(Int((j &+ 1)))), 15, " ")
                print(_p(((((String(describing: sumStr) + " | ") + String(describing: piStr)) + " | ") + String(describing: ciStr))))
            }
            idx = Int((idx &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
