// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:29 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func countChange(_ amount: Int) -> Int {
    var ways: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i <= amount) {
        ways = (_append(ways, 0) as! [Int])
        i = Int((i &+ 1))
    }
    ways[0] = 1
    var coins: [Int] = ([1, 5, 10, 25] as! [Int])
    var idx: Int = 0
    while (idx < Int(((coins).count))) {
        let coin = (coins[idx] as! Int)
        var j: Int = coin
        while (j <= amount) {
            ways[j] = Int(((ways[j] as! Int) &+ (ways[(j &- coin)] as! Int)))
            j = Int((j &+ 1))
        }
        idx = Int((idx &+ 1))
    }
    return (ways[amount] as! Int)
}
let amount = 10
print(_p(((("amount, ways to make change: " + String(describing: amount)) + " ") + String(describing: Int(countChange((amount as! Int)))))))
