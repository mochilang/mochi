// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:11:58 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func countChange(_ amount: Int) -> Int {
    var ways: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i <= amount) {
        ways = (_append(ways, 0) as! [Int])
        i = ((i + 1) as! Int)
    }
    ways[0] = 1
    var coins: [Int] = ([(1 as! Any), (5 as! Any), (10 as! Any), (25 as! Any)] as! [Int])
    var idx: Int = 0
    while (idx < Int(((coins).count))) {
        let coin = (coins[idx] as! Int)
        var j: Int = coin
        while (j <= amount) {
            ways[j] = (((ways[j] as! Int) + (ways[(j - coin)] as! Int)) as! Int)
            j = ((j + 1) as! Int)
        }
        idx = ((idx + 1) as! Int)
    }
    return (ways[amount] as! Int)
}
let amount = 10
print(_p(((("amount, ways to make change: " + _p(amount)) + " ") + _p(Int(countChange((amount as! Int)))))))
