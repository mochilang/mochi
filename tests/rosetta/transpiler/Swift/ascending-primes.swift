// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:00:07 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return Bool((n == 2))
        }
        if ((n % 3) == 0) {
            return Bool((n == 3))
        }
        var d = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 2))
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 4))
        }
        return true
    }
    var asc: [Int] = ([] as! [Int])
    func gen(_ first: Int, _ cand: Int, _ digits: Int) {
        if (digits == 0) {
            if Bool(isPrime(Int(cand))) {
                asc = ((asc + ([cand] as! [Int])) as! [Int])
            }
            return
        }
        var i = first
        while (i < 10) {
            _ = gen(Int((i + 1)), Int(((cand * 10) + i)), Int((digits - 1)))
            i = Int((i + 1))
        }
    }
    func pad(_ n: Int, _ width: Int) -> String {
        var s = String(describing: n)
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func main() {
        var digits = 1
        while (digits < 10) {
            _ = gen(1, 0, Int(digits))
            digits = Int((digits + 1))
        }
        print((("There are " + String(describing: Int(((asc).count)))) + " ascending primes, namely:"))
        var i = 0
        var line = ""
        while (i < Int(((asc).count))) {
            line = String(((line + String(describing: pad(Int(asc[i]), 8))) + " "))
            if ((Int((i + 1)) % 10) == 0) {
                print(String(describing: String(Array(String(line))[0..<Int((Int(((line).count)) - 1))])))
                line = ""
            }
            i = Int((i + 1))
        }
        if (Int(((line).count)) > 0) {
            print(String(describing: String(Array(String(line))[0..<Int((Int(((line).count)) - 1))])))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
