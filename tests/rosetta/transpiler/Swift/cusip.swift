// Generated by Mochi transpiler v0.10.52 on 2025-08-02 01:28:35 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

func ord(_ ch: String) -> Int {
    let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if ((ch >= "0") && (ch <= "9")) {
        return (Int(Int(String(describing: (ch as! String)), radix: 10)!) &+ 48)
    }
    var idx: Int = Int((String(describing: (upper as! String)).firstIndex(of: Character(String(describing: (ch as! String))))?.utf16Offset(in: String(describing: (upper as! String)) ) ?? -1))
    if (idx >= 0) {
        return (65 &+ idx)
    }
    return 0
}
func isCusip(_ s: String) -> Bool {
    if (Int(((s).count)) != 9) {
        return false
    }
    var sum: Int = 0
    var i: Int = 0
    while (i < 8) {
        let c = String(Array(s)[i..<(i &+ 1)])
        var v: Int = 0
        if ((c >= "0") && (c <= "9")) {
            v = Int(Int(String(describing: (c as! String)), radix: 10)!)
        } else if ((c >= "A") && (c <= "Z")) {
            v = ((Int(ord((c as! String))) &- 55) as! Int)
        } else if (c == "*") {
            v = 36
        } else if (c == "@") {
            v = 37
        } else if (c == "#") {
            v = 38
        } else {
            return false
        }
        
        
        
        
        if ((i % 2) == 1) {
            v = ((v &* 2) as! Int)
        }
        sum = (((sum &+ (v / 10)) &+ (v % 10)) as! Int)
        i = ((i &+ 1) as! Int)
    }
    return (Int(Int(String(describing: (String(Array(s)[8..<9]) as! String)), radix: 10)!) == (Int((10 &- Int((sum % 10)))) % 10))
}
let candidates: [String] = (["037833100", "17275R102", "38259P508", "594918104", "68389X106", "68389X105"] as! [String])
for cand in candidates {
    var b: String = "incorrect"
    if isCusip((cand as! String)) {
        b = "correct"
    }
    print(_p(((cand + " -> ") + b)))
}
