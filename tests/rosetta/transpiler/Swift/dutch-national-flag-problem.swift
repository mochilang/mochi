// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:20 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func listStr(_ xs: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = String(describing: (s + _p((xs[i] as! Int))))
            if (i < (Int(((xs).count)) - 1)) {
                s = String(describing: (s + " "))
            }
            i = Int((i + 1))
        }
        s = String(describing: (s + "]"))
        return String(describing: s)
    }
    func ordered(_ xs: [Int]) -> Bool {
        if (Int(((xs).count)) == 0) {
            return true
        }
        var prev: Int = (xs[0] as! Int)
        var i: Int = 1
        while (i < Int(((xs).count))) {
            if ((xs[i] as! Int) < prev) {
                return false
            }
            prev = (xs[i] as! Int)
            i = Int((i + 1))
        }
        return true
    }
    func outOfOrder(_ n: Int) -> [Int] {
        if (n < 2) {
            return ([] as! [Int])
        }
        var r: [Int] = ([] as! [Int])
        while true {
            r = ([] as! [Int])
            var i: Int = 0
            while (i < n) {
                r = (_append(r, (Int(_now()) % 3)) as! [Int])
                i = Int((i + 1))
            }
            if (!ordered((r as! [Int]))) {
                break
            }
        }
        return (r as! [Int])
    }
    func sort3(_ a: inout [Int]) -> [Int] {
        var lo: Int = 0
        var mid: Int = 0
        var hi: Int = (Int(((a).count)) - 1)
        while (mid <= hi) {
            let v = (a[mid] as! Int)
            if (v == 0) {
                let tmp = (a[lo] as! Int)
                a[lo] = (a[mid] as! Int)
                a[mid] = Int(tmp)
                lo = Int((lo + 1))
                mid = Int((mid + 1))
            } else if (v == 1) {
                mid = Int((mid + 1))
            } else {
                let tmp = (a[mid] as! Int)
                a[mid] = (a[hi] as! Int)
                a[hi] = Int(tmp)
                hi = Int((hi - 1))
            }
            
        }
        return (a as! [Int])
    }
    func main() {
        var f: [Int] = (outOfOrder(12) as! [Int])
        print(_p(String(describing: listStr((f as! [Int])))))
        f = (sort3(&f) as! [Int])
        print(_p(String(describing: listStr((f as! [Int])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
