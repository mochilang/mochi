// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:11:21 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
let nPts = 100
let rMin = 10
let rMax = 15
let span = ((rMax + 1) + rMax)
var rows: [[String]] = ([] as! [[String]])
var r: Int = 0
while (r < span) {
    var row: [String] = ([] as! [String])
    var c: Int = 0
    while (c < (span * 2)) {
        row = (_append(row, " ") as! [String])
        c = ((c + 1) as! Int)
    }
    rows = (_append(rows, row) as! [[String]])
    r = ((r + 1) as! Int)
}
var u: Int = 0
var seen: [String: Bool] = ([:] as! [String: Bool])
let min2 = (rMin * rMin)
let max2 = (rMax * rMax)
var n: Int = 0
while (n < nPts) {
    var x: Int = ((Int(_now()) % span) - rMax)
    var y: Int = ((Int(_now()) % span) - rMax)
    let rs = ((x * x) + (y * y))
    if ((rs < min2) || (rs > max2)) {
        continue
    }
    n = ((n + 1) as! Int)
    let row = (y + rMax)
    let col = (Int((x + rMax)) * 2)
    rows[row][col] = "*"
    let key = ((_p(row) + ",") + _p(col))
    if (!seen[key]!) {
        seen[key] = true
        u = ((u + 1) as! Int)
    }
}
var i: Int = 0
while (i < span) {
    var line: String = ""
    var j: Int = 0
    while (j < (span * 2)) {
        line = ((line + (rows[i][j] as! String)) as! String)
        j = ((j + 1) as! Int)
    }
    print(_p(line))
    i = ((i + 1) as! Int)
}
print(_p((_p(u) + " unique points")))
