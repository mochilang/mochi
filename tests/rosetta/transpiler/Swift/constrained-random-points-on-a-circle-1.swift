// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:45:56 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let nPts = 100
    let rMin = 10
    let rMax = 15
    let span = ((rMax &+ 1) &+ rMax)
    var rows: [[String]] = ([] as! [[String]])
    var r: Int = 0
    while (r < span) {
        var row: [String] = ([] as! [String])
        var c: Int = 0
        while (c < (span &* 2)) {
            row = (_append(row, " ") as! [String])
            c = Int((c &+ 1))
        }
        rows = (_append(rows, row) as! [[String]])
        r = Int((r &+ 1))
    }
    var u: Int = 0
    var seen: [String: Bool] = ([:] as! [String: Bool])
    let min2 = (rMin &* rMin)
    let max2 = (rMax &* rMax)
    var n: Int = 0
    while (n < nPts) {
        var x: Int = ((Int(_now()) % span) &- rMax)
        var y: Int = ((Int(_now()) % span) &- rMax)
        let rs = ((x &* x) &+ (y &* y))
        if ((rs < min2) || (rs > max2)) {
            continue
        }
        n = Int((n &+ 1))
        let row = (y &+ rMax)
        let col = (Int((x &+ rMax)) &* 2)
        rows[row][col] = "*"
        let key = ((_p(row) + ",") + _p(col))
        if (!seen[String(String(describing: key))]!) {
            seen[String(String(describing: key))] = true
            u = Int((u &+ 1))
        }
    }
    var i: Int = 0
    while (i < span) {
        var line: String = ""
        var j: Int = 0
        while (j < (span &* 2)) {
            line = ((line + (rows[i][j] as! String)) as! String)
            j = Int((j &+ 1))
        }
        print(_p(line))
        i = Int((i &+ 1))
    }
    print(_p((_p(u) + " unique points")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
