// Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:28:55 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() { res = res * 1000000000 + Int64(d) }
        if res > Int64(Int.max) { return Int.max }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() / rhs.toInt())
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() % rhs.toInt())
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
struct MDRResult {
    var mp: Int
    var mdr: Int
}
func pad(_ s: String, _ width: Int) -> String {
    var out = s
    while (Int(((out).count)) < width) {
        out = String((" " + out))
    }
    return String(out)
}
func mult(_ n: BigInt, _ base: Int) -> BigInt {
    var m: BigInt = BigInt(BigInt(1))
    var x: BigInt = BigInt(n)
    let b: BigInt = BigInt(BigInt(base))
    while (x > BigInt(0)) {
        m = BigInt((m * (x % b)))
        x = BigInt((x / b))
    }
    return BigInt(m)
}
func multDigitalRoot(_ n: BigInt, _ base: Int) -> MDRResult {
    var m: BigInt = BigInt(n)
    var mp = 0
    let b: BigInt = BigInt(BigInt(base))
    while (m >= b) {
        m = BigInt(mult(BigInt(m), Int(base)))
        mp = Int((mp + 1))
    }
    return (MDRResult(mp: mp, mdr: Int(m)) as! MDRResult)
}
func main() {
    let base = 10
    let size = 5
    print(_p(((((String(describing: pad("Number", 20)) + " ") + String(describing: pad("MDR", 3))) + " ") + String(describing: pad("MP", 3)))))
    let nums: [BigInt] = ([BigInt(123321), BigInt(7739), BigInt(893), BigInt(899998), BigInt(3778888999), BigInt(277777788888899)] as! [BigInt])
    var i = 0
    while (i < Int(((nums).count))) {
        let n = (nums[i] as! BigInt)
        let r = multDigitalRoot(BigInt(n), Int(base))
        print(_p(((((String(describing: pad(String(_p(n)), 20)) + " ") + String(describing: pad(String(_p(r.mdr)), 3))) + " ") + String(describing: pad(String(_p(r.mp)), 3)))))
        i = Int((i + 1))
    }
    print(_p(""))
    var list: [[Int]] = ([] as! [[Int]])
    var idx = 0
    while (idx < base) {
        list = ((((list + [[]]) as! [[Int]]) as! [Any]) as! [[Int]])
        idx = Int((idx + 1))
    }
    var cnt = (size * base)
    var n: BigInt = BigInt(BigInt(0))
    let b: BigInt = BigInt(BigInt(base))
    while (cnt > 0) {
        let r = multDigitalRoot(BigInt(n), Int(base))
        let mdr = r.mdr
        if (Int((((list[mdr] as! [Int])).count)) < size) {
            list[mdr] = (((list[mdr] as! [Int]) + [Int(n)]) as! [Int])
            cnt = Int((cnt - 1))
        }
        n = BigInt((n + BigInt(1)))
    }
    print(_p("MDR: First"))
    var j = 0
    while (j < base) {
        print(_p(((String(describing: pad(String(_p(j)), 3)) + ": ") + _p((list[j] as! [Int])))))
        j = Int((j + 1))
    }
}
_ = main()
