// Generated by Mochi transpiler v0.10.56 on 2025-08-03 17:09:04 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
let gregorianStr: [String] = (["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] as! [String])
var gregorian: [Int] = ([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] as! [Int])
let republicanStr: [String] = (["Vendemiaire", "Brumaire", "Frimaire", "Nivose", "Pluviose", "Ventose", "Germinal", "Floreal", "Prairial", "Messidor", "Thermidor", "Fructidor"] as! [String])
let sansculotidesStr: [String] = (["Fete de la vertu", "Fete du genie", "Fete du travail", "Fete de l'opinion", "Fete des recompenses", "Fete de la Revolution"] as! [String])
func greLeap(_ year: Int) -> Bool {
    let a = Int((year % 4))
    let b = Int((year % 100))
    let c = Int((year % 400))
    return ((a == 0) && ((b != 0) || (c == 0)))
}
func repLeap(_ year: Int) -> Bool {
    let a = Int((Int((year &+ 1)) % 4))
    let b = Int((Int((year &+ 1)) % 100))
    let c = Int((Int((year &+ 1)) % 400))
    return ((a == 0) && ((b != 0) || (c == 0)))
}
func greToDay(_ d: Int, _ m: Int, _ y: Int) -> Int {
    var yy: Int = y
    var mm: Int = m
    if (mm < 3) {
        yy = Int((yy &- 1))
        mm = Int((mm &+ 12))
    }
    return (((((((yy &* 36525) / 100) &- (yy / 100)) &+ (yy / 400)) &+ ((306 &* Int((mm &+ 1))) / 10)) &+ d) &- 654842)
}
func repToDay(_ d: Int, _ m: Int, _ y: Int) -> Int {
    var dd: Int = d
    var mm: Int = m
    if (mm == 13) {
        mm = Int((mm &- 1))
        dd = Int((dd &+ 30))
    }
    if repLeap((y as! Int)) {
        dd = Int((dd &- 1))
    }
    return (((((((365 &* y) &+ (Int((y &+ 1)) / 4)) &- (Int((y &+ 1)) / 100)) &+ (Int((y &+ 1)) / 400)) &+ (30 &* mm)) &+ dd) &- 395)
}
func dayToGre(_ day: Int) -> [Int] {
    var y: Int = ((day &* 100) / 36525)
    var d: Int = ((day &- ((y &* 36525) / 100)) &+ 21)
    y = Int((y &+ 1792))
    d = Int((((d &+ (y / 100)) &- (y / 400)) &- 13))
    var m: Int = 8
    while (d > (gregorian[m] as! Int)) {
        d = Int((d &- (gregorian[m] as! Int)))
        m = Int((m &+ 1))
        if (m == 12) {
            m = 0
            y = Int((y &+ 1))
            if greLeap((y as! Int)) {
                gregorian[1] = 29
            } else {
                gregorian[1] = 28
            }
        }
    }
    m = Int((m &+ 1))
    return ([d, m, y] as! [Int])
}
func dayToRep(_ day: Int) -> [Int] {
    var y: Int = ((Int((day &- 1)) &* 100) / 36525)
    if repLeap((y as! Int)) {
        y = Int((y &- 1))
    }
    var d: Int = ((((day &- ((Int((y &+ 1)) &* 36525) / 100)) &+ 365) &+ (Int((y &+ 1)) / 100)) &- (Int((y &+ 1)) / 400))
    y = Int((y &+ 1))
    var m: Int = 1
    var sc: Int = 5
    if repLeap((y as! Int)) {
        sc = 6
    }
    while (d > 30) {
        d = Int((d &- 30))
        m = Int((m &+ 1))
        if (m == 13) {
            if (d > sc) {
                d = Int((d &- sc))
                m = 1
                y = Int((y &+ 1))
                sc = 5
                if repLeap((y as! Int)) {
                    sc = 6
                }
            }
        }
    }
    return ([d, m, y] as! [Int])
}
func formatRep(_ d: Int, _ m: Int, _ y: Int) -> String {
    if (m == 13) {
        return (((sansculotidesStr[(d &- 1)] as! String) + " ") + String(describing: y))
    }
    return ((((String(describing: d) + " ") + (republicanStr[(m &- 1)] as! String)) + " ") + String(describing: y))
}
func formatGre(_ d: Int, _ m: Int, _ y: Int) -> String {
    return ((((String(describing: d) + " ") + (gregorianStr[(m &- 1)] as! String)) + " ") + String(describing: y))
}
let rep: [Int] = (dayToRep(Int(greToDay(20, 5, 1795))) as! [Int])
print(_p(String(describing: formatRep((rep[0] as! Int), (rep[1] as! Int), (rep[2] as! Int)))))
let gre: [Int] = (dayToGre(Int(repToDay(1, 9, 3))) as! [Int])
print(_p(String(describing: formatGre((gre[0] as! Int), (gre[1] as! Int), (gre[2] as! Int)))))
