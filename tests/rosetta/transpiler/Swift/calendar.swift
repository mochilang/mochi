// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:48:17 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let daysInMonth: [Int] = ([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] as! [Int])
    let start: [Int] = ([3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1] as! [Int])
    let months: [String] = ([" January ", " February", "  March  ", "  April  ", "   May   ", "   June  ", "   July  ", "  August ", "September", " October ", " November", " December"] as! [String])
    let days: [String] = (["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"] as! [String])
    print(_p("                                [SNOOPY]\n"))
    print(_p("                                  1969\n"))
    var qtr: Int = 0
    while (qtr < 4) {
        var mi: Int = 0
        while (mi < 3) {
            print(_p((("      " + (months[((qtr * 3) + mi)] as! String)) + "           ")), _p(false))
            mi = ((mi + 1) as! Int)
        }
        print(_p(""))
        mi = 0
        while (mi < 3) {
            var d: Int = 0
            while (d < 7) {
                print(_p((" " + (days[d] as! String))), _p(false))
                d = ((d + 1) as! Int)
            }
            print(_p("     "), _p(false))
            mi = ((mi + 1) as! Int)
        }
        print(_p(""))
        var week: Int = 0
        while (week < 6) {
            mi = 0
            while (mi < 3) {
                var day: Int = 0
                while (day < 7) {
                    let m = ((qtr * 3) + mi)
                    let val = ((((week * 7) + day) - (start[m] as! Int)) + 1)
                    if ((val >= 1) && (val <= (daysInMonth[m] as! Int))) {
                        var s: String = _p(val)
                        if (Int(((s).count)) == 1) {
                            s = ((" " + s) as! String)
                        }
                        print(_p((" " + s)), _p(false))
                    } else {
                        print(_p("   "), _p(false))
                    }
                    day = ((day + 1) as! Int)
                }
                print(_p("     "), _p(false))
                mi = ((mi + 1) as! Int)
            }
            print(_p(""))
            week = ((week + 1) as! Int)
        }
        print(_p(""))
        qtr = ((qtr + 1) as! Int)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
