// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:16:26 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
            i = Int((i &+ 1))
        }
        if neg {
            n = Int(-n)
        }
        return n
    }
    func main() {
        var total: Int = 0
        var computer: Bool = ((Int(_now()) % 2) == 0)
        print(_p("Enter q to quit at any time\n"))
        if computer {
            print(_p("The computer will choose first"))
        } else {
            print(_p("You will choose first"))
        }
        print(_p("\n\nRunning total is now 0\n\n"))
        var round: Int = 1
        var done: Bool = false
        while (!done) {
            print(_p((("ROUND " + String(describing: round)) + ":\n\n")))
            var i: Int = 0
            while ((i < 2) && ((!done) as! Bool)) {
                if computer {
                    var choice: Int = 0
                    if (total < 18) {
                        choice = Int(((Int(_now()) % 3) &+ 1))
                    } else {
                        choice = Int((21 &- total))
                    }
                    total = Int((total &+ choice))
                    print(_p(("The computer chooses " + String(describing: choice))))
                    print(_p(("Running total is now " + String(describing: total))))
                    if (total == 21) {
                        print(_p("\nSo, commiserations, the computer has won!"))
                        done = true
                    }
                } else {
                    while true {
                        print(_p("Your choice 1 to 3 : "))
                        let line = (readLine() ?? "")
                        if ((line == "q") || (line == "Q")) {
                            print(_p("OK, quitting the game"))
                            done = true
                            break
                        }
                        var num: Int = Int(Int(String(describing: (line as! String)))!)
                        if ((num < 1) || (num > 3)) {
                            if ((total &+ num) > 21) {
                                print(_p("Too big, try again"))
                            } else {
                                print(_p("Out of range, try again"))
                            }
                            continue
                        }
                        if ((total &+ num) > 21) {
                            print(_p("Too big, try again"))
                            continue
                        }
                        total = Int((total &+ num))
                        print(_p(("Running total is now " + String(describing: total))))
                        break
                    }
                    if (total == 21) {
                        print(_p("\nSo, congratulations, you've won!"))
                        done = true
                    }
                }
                print(_p("\n"))
                computer = ((!computer) as! Bool)
                i = Int((i &+ 1))
            }
            round = Int((round &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
