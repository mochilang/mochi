// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:37:51 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func listStr(_ xs: [Int]) -> String {
    var s: String = "["
    var i: Int = 0
    while (i < Int(((xs).count))) {
        s = String(describing: (s + _p((xs[i] as! Int))))
        if (i < (Int(((xs).count)) - 1)) {
            s = String(describing: (s + " "))
        }
        i = Int((i + 1))
    }
    s = String(describing: (s + "]"))
    return String(describing: s)
}
func pointerDemo() {
    print(_p("Pointer:"))
    var i: Int = 0
    print(_p("Before:"))
    print(_p(((("\t<address>: " + _p(i)) + ", ") + _p(i))))
    i = 3
    print(_p("After:"))
    print(_p(((("\t<address>: " + _p(i)) + ", ") + _p(i))))
}
func sliceDemo() {
    print(_p("Slice:"))
    var a: [Any] = []
    for _ in 0..<10 {
        a = ((_append(a, 0) as! [Int]) as! [Any])
    }
    var s: [Any] = a
    print(_p("Before:"))
    print(_p(("\ts: " + String(describing: listStr((s as! [Int]))))))
    print(_p(("\ta: " + String(describing: listStr((a as! [Int]))))))
    var data: [Int] = ([65, 32, 115, 116, 114, 105, 110, 103, 46] as! [Int])
    var idx: Int = 0
    while (idx < Int(((data).count))) {
        s[idx] = (data[idx] as! Int)
        idx = Int((idx + 1))
    }
    print(_p("After:"))
    print(_p(("\ts: " + String(describing: listStr((s as! [Int]))))))
    print(_p(("\ta: " + String(describing: listStr((a as! [Int]))))))
}
_ = pointerDemo()
print(_p(""))
_ = sliceDemo()
