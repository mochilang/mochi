// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:58:29 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func listStr(_ xs: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = ((s + _p((xs[i] as! Int))) as! String)
            if (i < (Int(((xs).count)) - 1)) {
                s = ((s + " ") as! String)
            }
            i = ((i + 1) as! Int)
        }
        s = ((s + "]") as! String)
        return s
    }
    func pointerDemo() {
        print(_p("Pointer:"))
        var i: Int = 0
        print(_p("Before:"))
        print(_p(((("\t<address>: " + _p(i)) + ", ") + _p(i))))
        i = 3
        print(_p("After:"))
        print(_p(((("\t<address>: " + _p(i)) + ", ") + _p(i))))
    }
    func sliceDemo() {
        print(_p("Slice:"))
        var a: [Any?] = []
        for _ in 0..<10 {
            a = ((_append(a, 0) as! [Int]) as! [Any?])
        }
        var s: [Any?] = a
        print(_p("Before:"))
        print(_p(("\ts: " + String(describing: listStr((s as! [Int]))))))
        print(_p(("\ta: " + String(describing: listStr((a as! [Int]))))))
        var data: [Int] = ([(65 as! Any), (32 as! Any), (115 as! Any), (116 as! Any), (114 as! Any), (105 as! Any), (110 as! Any), (103 as! Any), (46 as! Any)] as! [Int])
        var idx: Int = 0
        while (idx < Int(((data).count))) {
            s[idx] = ((data[idx] as! Int) as! Any?)
            idx = ((idx + 1) as! Int)
        }
        print(_p("After:"))
        print(_p(("\ts: " + String(describing: listStr((s as! [Int]))))))
        print(_p(("\ta: " + String(describing: listStr((a as! [Int]))))))
    }
    _ = pointerDemo()
    print(_p(""))
    _ = sliceDemo()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
