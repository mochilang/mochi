// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:55:34 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

typealias Fn = () -> String
struct Delegator {
    var delegate: [String: () -> String]
}
func operation(_ d: Delegator) -> String {
    if (d.delegate["thing"] != nil) {
        return String(describing: d.delegate["thing"]!())
    }
    return "default implementation"
}
func newDelegate() -> [String: Fn] {
    var m: [String: Fn] = ([:] as! [String: () -> String])
    m[String("thing")] = ({ () -> String in
    return "delegate implementation"
} as! () -> String)
return m
}
var a: Delegator = Delegator(delegate: [:])
print(_p(String(describing: operation((a as! Delegator)))))
a.delegate = ([:] as! [String: () -> String])
print(_p(String(describing: operation((a as! Delegator)))))
a.delegate = (newDelegate() as! [String: () -> String])
print(_p(String(describing: operation((a as! Delegator)))))
