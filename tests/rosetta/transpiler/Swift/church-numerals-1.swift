// Generated by Mochi transpiler v0.10.52 on 2025-08-01 20:13:57 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

typealias Fn = (Any?) -> Any?
typealias Church = (@escaping Fn) -> Fn
func zero(_ f: @escaping Fn) -> Fn {
    return { (x: Any?) -> Any? in
    return x
}
}
func succ(_ c: @escaping Church) -> Church {
    return { (f: @escaping Fn) -> Fn in
    return { (x: Any?) -> Any? in
    return f((c((f as! (Any?) -> Any?))(x) as! Any?))
}
}
}
func add(_ c: @escaping Church, _ d: @escaping Church) -> Church {
    return { (f: @escaping Fn) -> Fn in
    return { (x: Any?) -> Any? in
    return c((f as! (Any?) -> Any?))(d((f as! (Any?) -> Any?))(x))
}
}
}
func mul(_ c: @escaping Church, _ d: @escaping Church) -> Church {
    return { (f: @escaping Fn) -> Fn in
    return { (x: Any?) -> Any? in
    return c((d((f as! (Any?) -> Any?)) as! (Any?) -> Any?))(x)
}
}
}
func pow(_ c: @escaping Church, _ d: @escaping Church) -> Church {
    var di: Int = Int(toInt((d as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))
    var prod: (@escaping (Any?) -> Any?) -> (Any?) -> Any? = c
    var i: Int = 1
    while (i < di) {
        prod = (mul((prod as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?), (c as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)
        i = ((i + 1) as! Int)
    }
    return prod
}
func incr(_ i: Any?) -> Any? {
    return (((i as! Int) + 1) as! Any?)
}
func toInt(_ c: @escaping Church) -> Int {
    return (c((incr as! (Any?) -> Any?))(0) as! Int)
}
func intToChurch(_ i: Int) -> Church {
    if (i == 0) {
        return zero
    }
    return succ((intToChurch(((i - 1) as! Int)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?))
}
let z: Church = zero
let three = succ((succ((succ((z as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?))
let four = succ((three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?))
print(_p(("three        -> " + _p(Int(toInt((three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("four         -> " + _p(Int(toInt((four as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("three + four -> " + _p(Int(toInt((add((three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?), (four as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("three * four -> " + _p(Int(toInt((mul((three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?), (four as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("three ^ four -> " + _p(Int(toInt((pow((three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?), (four as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("four ^ three -> " + _p(Int(toInt((pow((four as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?), (three as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
print(_p(("5 -> five    -> " + _p(Int(toInt((intToChurch(5) as! (@escaping (Any?) -> Any?) -> (Any?) -> Any?)))))))
