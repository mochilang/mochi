// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:24:13 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fd(_ a: inout [Int], _ ord: Int) -> [Int] {
        var i: Int = 0
        while (i < ord) {
            var j: Int = 0
            while (j < ((Int(((a).count)) - i) - 1)) {
                a[j] = (((a[(j + 1)] as! Int) - (a[j] as! Int)) as! Int)
                j = ((j + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (Array(a[0..<(Int(((a).count)) - ord)]) as! [Int])
    }
    var a: [Int] = ([(90 as! Any), (47 as! Any), (58 as! Any), (29 as! Any), (22 as! Any), (32 as! Any), (55 as! Any), (5 as! Any), (55 as! Any), (73 as! Any)] as! [Int])
    print(_p(_p(a)))
    print(_p(_p((fd(&a, 9) as! [Int]))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
