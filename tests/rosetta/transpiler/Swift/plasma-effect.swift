// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:22:52 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
let PI = 3.141592653589793
func floorf(_ x: Double) -> Double {
    var i: Int = Int(x)
    if (Double(i) > x) {
        i = Int((i &- 1))
    }
    return Double(i)
}
func frac(_ x: Double) -> Double {
    return (x - Double(floorf(Double(x))))
}
func sinApprox(_ x: Double) -> Double {
    var term: Double = x
    var sum: Double = x
    var n: Int = 1
    while (n <= 10) {
        let denom = Double((Int((2 &* n)) &* Int(((2 &* n) &+ 1))))
        term = Double((((-term * x) * x) / denom))
        sum = Double((sum + term))
        n = Int((n &+ 1))
    }
    return sum
}
func sqrtApprox(_ x: Double) -> Double {
    if (x <= 0) {
        return 0.0
    }
    var guess: Double = x
    var i: Int = 0
    while (i < 10) {
        guess = Double((Double((guess + (x / guess))) / 2.0))
        i = Int((i &+ 1))
    }
    return guess
}
let nframes = 10
let w = 32
let h = 32
var total: Int = 0
var f: Int = 1
while (f <= nframes) {
    var y: Int = 0
    while (y < h) {
        var x: Int = 0
        while (x < w) {
            let fx = Double(x)
            let fy = Double(y)
            var value: Double = Double(sinApprox(Double((fx / 16.0))))
            value = Double((value + Double(sinApprox(Double((fy / 8.0))))))
            value = Double((value + Double(sinApprox(Double((Double((fx + fy)) / 16.0))))))
            value = Double((value + Double(sinApprox(Double((Double(sqrtApprox(Double(((fx * fx) + (fy * fy))))) / 8.0))))))
            value = Double((value + 4.0))
            value = Double((value / 8.0))
            let rem = Double(frac(Double((value + (Double(f) / Double(nframes))))))
            let ci = (Int((Double(nframes) * rem)) &+ 1)
            total = Int((total &+ ci))
            x = Int((x &+ 1))
        }
        y = Int((y &+ 1))
    }
    f = Int((f &+ 1))
}
print(_p(total))
