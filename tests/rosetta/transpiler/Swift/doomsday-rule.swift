// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:19:00 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
            i = Int((i &+ 1))
        }
        if neg {
            n = Int(-n)
        }
        return n
    }
    let days: [String] = (["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] as! [String])
    func anchorDay(_ y: Int) -> Int {
        return (Int((((2 &+ (5 &* Int((y % 4)))) &+ (4 &* Int((y % 100)))) &+ (6 &* Int((y % 400))))) % 7)
    }
    func isLeapYear(_ y: Int) -> Bool {
        return (((y % 4) == 0) && (((y % 100) != 0) || ((y % 400) == 0)))
    }
    let firstDaysCommon: [Int] = ([3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5] as! [Int])
    let firstDaysLeap: [Int] = ([4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5] as! [Int])
    func main() {
        let dates: [String] = (["1800-01-06", "1875-03-29", "1915-12-07", "1970-12-23", "2043-05-14", "2077-02-12", "2101-04-02"] as! [String])
        print(_p("Days of week given by Doomsday rule:"))
        for date in dates {
            let y = Int(Int(String(describing: (String(Array(date)[0..<4]) as! String)))!)
            let m = (Int(Int(String(describing: (String(Array(date)[5..<7]) as! String)))!) &- 1)
            let d = Int(Int(String(describing: (String(Array(date)[8..<10]) as! String)))!)
            let a = Int(anchorDay((y as! Int)))
            var f: Int = (firstDaysCommon[m] as! Int)
            if isLeapYear((y as! Int)) {
                f = (firstDaysLeap[m] as! Int)
            }
            var w: Int = (d &- f)
            if (w < 0) {
                w = Int((7 &+ w))
            }
            let dow = (Int((a &+ w)) % 7)
            print(_p(((date + " -> ") + (days[dow] as! String))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
