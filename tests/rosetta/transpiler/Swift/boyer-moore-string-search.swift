// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:19:43 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOfStr(_ h: String, _ n: String) -> Int {
        let hlen = Int(((h).count))
        let nlen = Int(((n).count))
        if (nlen == 0) {
            return 0
        }
        var i: Int = 0
        while (i <= (hlen - nlen)) {
            if (String(describing: String(Array(String(describing: String(h)))[Int(i)..<Int((i + nlen))])) == n) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func stringSearchSingle(_ h: String, _ n: String) -> Int {
        return Int(indexOfStr(String(h), String(n)))
    }
    func stringSearch(_ h: String, _ n: String) -> [Int] {
        var result: [Int] = ([] as! [Int])
        var start: Int = 0
        let hlen = Int(((h).count))
        let nlen = Int(((n).count))
        while (start < hlen) {
            let idx = Int(indexOfStr(String(describing: String(Array(String(describing: String(h)))[Int(start)..<Int(hlen)])), String(n)))
            if (idx >= 0) {
                result = ((result + [(start + idx)]) as! [Int])
                start = Int(((start + idx) + nlen))
            } else {
                break
            }
        }
        return (result as! [Int])
    }
    func display(_ nums: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((nums).count))) {
            if (i > 0) {
                s = String((s + ", "))
            }
            s = String((s + _p((nums[i] as! Int))))
            i = Int((i + 1))
        }
        s = String((s + "]"))
        return String(s)
    }
    func main() {
        let texts = (["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."] as! [String])
        let patterns = (["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"] as! [String])
        var i: Int = 0
        while (i < Int(((texts).count))) {
            print(_p(((("text" + _p((i + 1))) + " = ") + (texts[i] as! String))))
            i = Int((i + 1))
        }
        print(_p(""))
        var j: Int = 0
        while (j < Int(((texts).count))) {
            let idxs = (stringSearch((texts[j] as! String), (patterns[j] as! String)) as! [Int])
            print(_p(((((("Found \"" + (patterns[j] as! String)) + "\" in 'text") + _p((j + 1))) + "' at indexes ") + String(describing: display((idxs as! [Int]))))))
            j = Int((j + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
