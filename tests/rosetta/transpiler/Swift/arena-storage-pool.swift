// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:23:37 GMT+7
import Foundation

func poolPut(_ p: [Int], _ x: Int) -> [Int] {
    return ((p + [x]) as! [Int])
}
func poolGet(_ p: inout [Int]) -> [String: Any] {
    if (((p).count) == 0) {
        print("pool empty")
        return (["pool": p, "val": 0] as [String: Any] as! [String: Any])
    }
    let idx = (((p).count) - 1)
    let v = Int(p[idx])
    p = (Array(p[0..<idx]) as! [Int])
    return (["pool": p, "val": v] as [String: Any] as! [String: Any])
}
func clearPool(_ p: [Int]) -> [Int] {
    return ([] as! [Int])
}
func main() {
    var pool: [Int] = ([] as! [Int])
    var i = 1
    var j = 2
    print(String(describing: (i + j)))
    pool = (poolPut((pool as! [Int]), (i as! Int)) as! [Int])
    pool = (poolPut((pool as! [Int]), (j as! Int)) as! [Int])
    i = 0
    j = 0
    let res1 = poolGet(&pool)
    pool = ((res1 as! [String: Any])["pool"]! as! [Int])
    i = ((res1 as! [String: Any])["val"]! as! Int)
    let res2 = poolGet(&pool)
    pool = ((res2 as! [String: Any])["pool"]! as! [Int])
    j = ((res2 as! [String: Any])["val"]! as! Int)
    i = 4
    j = 5
    print(String(describing: (i + j)))
    pool = (poolPut((pool as! [Int]), (i as! Int)) as! [Int])
    pool = (poolPut((pool as! [Int]), (j as! Int)) as! [Int])
    i = 0
    j = 0
    pool = (clearPool((pool as! [Int])) as! [Int])
    let res3 = poolGet(&pool)
    pool = ((res3 as! [String: Any])["pool"]! as! [Int])
    i = ((res3 as! [String: Any])["val"]! as! Int)
    let res4 = poolGet(&pool)
    pool = ((res4 as! [String: Any])["pool"]! as! [Int])
    j = ((res4 as! [String: Any])["val"]! as! Int)
    i = 7
    j = 8
    print(String(describing: (i + j)))
}
_ = main()
