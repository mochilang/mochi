// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:23:29 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func poolPut(_ p: [Int], _ x: Int) -> [Int] {
        return ((p + [x]) as! [Int])
    }
    func poolGet(_ p: inout [Int]) -> [String: Any] {
        if (Int(((p).count)) == 0) {
            print("pool empty")
            return (["pool": p, "val": 0] as [String: Any] as! [String: Any])
        }
        let idx = (Int(((p).count)) - 1)
        let v = Int(p[idx])
        p = (Array(p[0..<idx]) as! [Int])
        return (["pool": p, "val": v] as [String: Any] as! [String: Any])
    }
    func clearPool(_ p: [Int]) -> [Int] {
        return ([] as! [Int])
    }
    func main() {
        var pool: [Int] = ([] as! [Int])
        var i = 1
        var j = 2
        print(String(describing: (i + j)))
        pool = (poolPut((pool as! [Int]), Int(i)) as! [Int])
        pool = (poolPut((pool as! [Int]), Int(j)) as! [Int])
        i = 0
        j = 0
        let res1 = (poolGet(&pool) as! [String: Any])
        pool = ((res1 as! [String: Any])["pool"]! as! [Int])
        i = ((res1 as! [String: Any])["val"]! as! Int)
        let res2 = (poolGet(&pool) as! [String: Any])
        pool = ((res2 as! [String: Any])["pool"]! as! [Int])
        j = ((res2 as! [String: Any])["val"]! as! Int)
        i = 4
        j = 5
        print(String(describing: (i + j)))
        pool = (poolPut((pool as! [Int]), Int(i)) as! [Int])
        pool = (poolPut((pool as! [Int]), Int(j)) as! [Int])
        i = 0
        j = 0
        pool = (clearPool((pool as! [Int])) as! [Int])
        let res3 = (poolGet(&pool) as! [String: Any])
        pool = ((res3 as! [String: Any])["pool"]! as! [Int])
        i = ((res3 as! [String: Any])["val"]! as! Int)
        let res4 = (poolGet(&pool) as! [String: Any])
        pool = ((res4 as! [String: Any])["pool"]! as! [Int])
        j = ((res4 as! [String: Any])["val"]! as! Int)
        i = 7
        j = 8
        print(String(describing: (i + j)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
