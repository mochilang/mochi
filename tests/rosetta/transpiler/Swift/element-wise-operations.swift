// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:39 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ n: Int) -> Double {
        var r: Double = 1.0
        var i: Int = 0
        while (i < n) {
            r = Double((r * 10.0))
            i = Int((i + 1))
        }
        return Double(r)
    }
    func powf(_ base: Double, _ exp: Double) -> Double {
        if (exp == 0.5) {
            var guess: Double = base
            var i: Int = 0
            while (i < 20) {
                guess = Double((Double((guess + (base / guess))) / 2.0))
                i = Int((i + 1))
            }
            return Double(guess)
        }
        var result: Double = 1.0
        var n: Int = Int(_int(exp))
        var i: Int = 0
        while (i < n) {
            result = Double((result * base))
            i = Int((i + 1))
        }
        return Double(result)
    }
    func formatFloat(_ f: Double, _ prec: Int) -> String {
        let scale = Double(pow10(Int(prec)))
        let scaled = (Double((f * scale)) + 0.5)
        var n: Int = Int(scaled)
        var digits: String = _p(n)
        while (Int(((digits).count)) <= prec) {
            digits = String(describing: ("0" + digits))
        }
        let intPart = String(describing: String(Array(String(describing: String(describing: digits)))[0..<Int((Int(((digits).count)) - prec))]))
        let fracPart = String(describing: String(Array(String(describing: String(describing: digits)))[Int((Int(((digits).count)) - prec))..<Int(((digits).count))]))
        return String(describing: ((intPart + ".") + fracPart))
    }
    func padLeft(_ s: String, _ w: Int) -> String {
        var res: String = ""
        var n: Int = (w - Int(((s).count)))
        while (n > 0) {
            res = String(describing: (res + " "))
            n = Int((n - 1))
        }
        return String(describing: (res + s))
    }
    func rowString(_ row: [Double]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((row).count))) {
            s = String(describing: (s + String(describing: padLeft(String(describing: formatFloat(Double(row[i]), 3)), 6))))
            if (i < (Int(((row).count)) - 1)) {
                s = String(describing: (s + " "))
            }
            i = Int((i + 1))
        }
        return String(describing: (s + "] "))
    }
    func printMatrix(_ heading: String, _ m: [[Double]]) {
        print(_p(heading))
        var i: Int = 0
        while (i < Int(((m).count))) {
            print(_p(String(describing: rowString((m[i] as! [Double])))))
            i = Int((i + 1))
        }
    }
    func elementWiseMM(_ m1: [[Double]], _ m2: [[Double]], _ f: (Double, Double) -> Double) -> [[Double]] {
        var z: [[Double]] = ([] as! [[Double]])
        var r: Int = 0
        while (r < Int(((m1).count))) {
            var row: [Double] = ([] as! [Double])
            var c: Int = 0
            while (c < Int((((m1[r] as! [Double])).count))) {
                row = (_append(row, Double(f(Double(m1[r][c]), Double(m2[r][c])))) as! [Double])
                c = Int((c + 1))
            }
            z = (_append(z, row) as! [[Double]])
            r = Int((r + 1))
        }
        return (z as! [[Double]])
    }
    func elementWiseMS(_ m: [[Double]], _ s: Double, _ f: (Double, Double) -> Double) -> [[Double]] {
        var z: [[Double]] = ([] as! [[Double]])
        var r: Int = 0
        while (r < Int(((m).count))) {
            var row: [Double] = ([] as! [Double])
            var c: Int = 0
            while (c < Int((((m[r] as! [Double])).count))) {
                row = (_append(row, Double(f(Double(m[r][c]), Double(s)))) as! [Double])
                c = Int((c + 1))
            }
            z = (_append(z, row) as! [[Double]])
            r = Int((r + 1))
        }
        return (z as! [[Double]])
    }
    func add(_ a: Double, _ b: Double) -> Double {
        return Double((a + b))
    }
    func sub(_ a: Double, _ b: Double) -> Double {
        return Double((a - b))
    }
    func mul(_ a: Double, _ b: Double) -> Double {
        return Double((a * b))
    }
    func div(_ a: Double, _ b: Double) -> Double {
        return Double((a / b))
    }
    func exp(_ a: Double, _ b: Double) -> Double {
        return Double(powf(Double(a), Double(b)))
    }
    func main() {
        let m1 = ([([3.0, 1.0, 4.0] as! [Double]), ([1.0, 5.0, 9.0] as! [Double])] as! [[Double]])
        let m2 = ([([2.0, 7.0, 1.0] as! [Double]), ([8.0, 2.0, 8.0] as! [Double])] as! [[Double]])
        _ = printMatrix("m1:", (m1 as! [[Double]]))
        _ = printMatrix("m2:", (m2 as! [[Double]]))
        print(_p(""))
        _ = printMatrix("m1 + m2:", (elementWiseMM((m1 as! [[Double]]), (m2 as! [[Double]]), add) as! [[Double]]))
        _ = printMatrix("m1 - m2:", (elementWiseMM((m1 as! [[Double]]), (m2 as! [[Double]]), sub) as! [[Double]]))
        _ = printMatrix("m1 * m2:", (elementWiseMM((m1 as! [[Double]]), (m2 as! [[Double]]), mul) as! [[Double]]))
        _ = printMatrix("m1 / m2:", (elementWiseMM((m1 as! [[Double]]), (m2 as! [[Double]]), div) as! [[Double]]))
        _ = printMatrix("m1 ^ m2:", (elementWiseMM((m1 as! [[Double]]), (m2 as! [[Double]]), exp) as! [[Double]]))
        print(_p(""))
        let s = 0.5
        print(_p(("s: " + _p(s))))
        _ = printMatrix("m1 + s:", (elementWiseMS((m1 as! [[Double]]), Double(s), add) as! [[Double]]))
        _ = printMatrix("m1 - s:", (elementWiseMS((m1 as! [[Double]]), Double(s), sub) as! [[Double]]))
        _ = printMatrix("m1 * s:", (elementWiseMS((m1 as! [[Double]]), Double(s), mul) as! [[Double]]))
        _ = printMatrix("m1 / s:", (elementWiseMS((m1 as! [[Double]]), Double(s), div) as! [[Double]]))
        _ = printMatrix("m1 ^ s:", (elementWiseMS((m1 as! [[Double]]), Double(s), exp) as! [[Double]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
