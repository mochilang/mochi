// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:23:50 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func endsWith(_ s: String, _ suf: String) -> Bool {
        if (Int(((s).count)) < Int(((suf).count))) {
            return false
        }
        return (String(describing: String(Array(String(describing: (s as! String)))[((Int(((s).count)) - Int(((suf).count))) as! Int)..<Int(((s).count))])) == suf)
    }
    func lastIndexOf(_ s: String, _ sub: String) -> Int {
        var idx: Int = (0 - 1)
        var i: Int = 0
        while (i <= (Int(((s).count)) - Int(((sub).count)))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + Int(((sub).count))) as! Int)])) == sub) {
                idx = (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (idx as! Int)
    }
    let extensions: [String] = (["zip", "rar", "7z", "gz", "archive", "A##", "tar.bz2"] as! [String])
    func fileExtInList(_ filename: String) -> [Any?] {
        let fl = String(describing: (filename.lowercased()))
        for ext in extensions {
            let ext2 = ("." + String(describing: (ext.lowercased())))
            if endsWith((fl as! String), (ext2 as! String)) {
                return ([true, ext] as! [Any])
            }
        }
        let idx = Int(lastIndexOf((filename as! String), "."))
        if (idx != (0 - 1)) {
            let t = String(describing: String(Array(String(describing: (filename as! String)))[((idx + 1) as! Int)..<Int(((filename).count))]))
            if (t != "") {
                return ([false, t] as! [Any])
            }
            return ([false, "<empty>"] as! [Any])
        }
        return ([false, "<none>"] as! [Any])
    }
    func pad(_ s: String, _ w: Int) -> String {
        var t: String = s
        while (Int(((t).count)) < w) {
            t = ((t + " ") as! String)
        }
        return (t as! String)
    }
    func main() {
        print(_p("The listed extensions are:"))
        print(_p("[" + extensions.map{ String(describing: $0) }.joined(separator: ",") + "]"))
        let tests: [String] = (["MyData.a##", "MyData.tar.Gz", "MyData.gzip", "MyData.7z.backup", "MyData...", "MyData", "MyData_v1.0.tar.bz2", "MyData_v1.0.bz2"] as! [String])
        for t in tests {
            let res: [Any] = (fileExtInList((t as! String)) as! [Any])
            let ok = (res[0] as! Bool)
            let ext = (res[1] as! String)
            print(_p((((((String(describing: pad((t as! String), 20)) + " => ") + _p(ok)) + "  (extension = ") + ext) + ")")))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
