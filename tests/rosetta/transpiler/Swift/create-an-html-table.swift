// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:55 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func main() {
    var rows: [[Int]] = ([] as! [[Int]])
    for i in 0..<4 {
        rows = (_append(rows, ([(i &* 3), ((i &* 3) &+ 1), ((i &* 3) &+ 2)] as! [Int])) as! [[Int]])
    }
    print(_p("<table>"))
    print(_p("    <tr><th></th><th>X</th><th>Y</th><th>Z</th></tr>"))
    var idx: Int = 0
    for row in rows {
        print(_p((((((((("    <tr><td>" + String(describing: idx)) + "</td><td>") + String(describing: (row[0] as! Int))) + "</td><td>") + String(describing: (row[1] as! Int))) + "</td><td>") + String(describing: (row[2] as! Int))) + "</td></tr>")))
        idx = Int((idx &+ 1))
    }
    print(_p("</table>"))
}
_ = main()
