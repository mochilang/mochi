// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:41:49 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let maxNumber = 100000000
    var dsum: [Int] = ([] as! [Int])
    var dcount: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i <= maxNumber) {
        dsum = (_append(dsum, 1) as! [Int])
        dcount = (_append(dcount, 1) as! [Int])
        i = Int((i + 1))
    }
    func pad8(_ n: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < 8) {
            s = String(describing: (" " + s))
        }
        return String(describing: s)
    }
    i = 2
    while (i <= maxNumber) {
        var j: Int = (i + i)
        while (j <= maxNumber) {
            if ((dsum[j] as! Int) == j) {
                print(_p((((String(describing: pad8(Int(j))) + " equals the sum of its first ") + _p((dcount[j] as! Int))) + " divisors")))
            }
            dsum[j] = Int(((dsum[j] as! Int) + i))
            dcount[j] = Int(((dcount[j] as! Int) + 1))
            j = Int((j + i))
        }
        i = Int((i + 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
