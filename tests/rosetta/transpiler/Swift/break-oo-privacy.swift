// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:19:56 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Foobar {
        var Exported: Int
        var unexported: Int
    }
    func examineAndModify(_ f: inout Foobar) -> Foobar {
        print(_p(((((((((" v: {" + _p(f.Exported)) + " ") + _p(f.unexported)) + "} = {") + _p(f.Exported)) + " ") + _p(f.unexported)) + "}")))
        print(_p("    Idx Name       Type CanSet"))
        print(_p("     0: Exported   int  true"))
        print(_p("     1: unexported int  false"))
        f.Exported = 16
        f.unexported = 44
        print(_p("  modified unexported field via unsafe"))
        return (f as! Foobar)
    }
    func anotherExample() {
        print(_p("bufio.ReadByte returned error: unsafely injected error value into bufio inner workings"))
    }
    var obj: Foobar = Foobar(Exported: 12, unexported: 42)
    print(_p((((("obj: {" + _p(obj.Exported)) + " ") + _p(obj.unexported)) + "}")))
    obj = (examineAndModify(&obj) as! Foobar)
    print(_p((((("obj: {" + _p(obj.Exported)) + " ") + _p(obj.unexported)) + "}")))
    _ = anotherExample()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
