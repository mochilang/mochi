// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:12 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var g2lMap: [String: String] = (["♜": "R", "♞": "N", "♝": "B", "♛": "Q", "♚": "K", "♖": "R", "♘": "N", "♗": "B", "♕": "Q", "♔": "K"] as! [String: String])
    var names: [String: String] = (["R": "rook", "N": "knight", "B": "bishop", "Q": "queen", "K": "king"] as! [String: String])
    var ntable: [String: Int] = (["01": 0, "02": 1, "03": 2, "04": 3, "12": 4, "13": 5, "14": 6, "23": 7, "24": 8, "34": 9] as! [String: Int])
    func indexOf(_ s: String, _ sub: String) -> Int {
        var i: Int = 0
        while (i <= (Int(((s).count)) - Int(((sub).count)))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + Int(((sub).count))) as! Int)])) == sub) {
                return (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (-1 as! Int)
    }
    func removeChar(_ s: String, _ ch: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)]))
            if (c != ch) {
                res = ((res + c) as! String)
            }
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func g2l(_ pieces: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((pieces).count))) {
            let ch = String(describing: String(Array(String(describing: (pieces as! String)))[(i as! Int)..<((i + 1) as! Int)]))
            res = ((res + g2lMap[ch]!) as! String)
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func countChar(_ s: String, _ ch: String) -> Int {
        var c: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) == ch) {
                c = ((c + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (c as! Int)
    }
    func spid(_ pieces: String) -> Int {
        var pieces = pieces
        pieces = String(describing: g2l((pieces as! String)))
        if (Int(((pieces).count)) != 8) {
            return (-1 as! Int)
        }
        for one in (["K", "Q"] as! [String]) {
            if (Int(countChar((pieces as! String), (one as! String))) != 1) {
                return (-1 as! Int)
            }
        }
        for two in (["R", "N", "B"] as! [String]) {
            if (Int(countChar((pieces as! String), (two as! String))) != 2) {
                return (-1 as! Int)
            }
        }
        let r1 = Int((String(describing: (pieces as! String)).firstIndex(of: Character(String(describing: "R")))?.utf16Offset(in: String(describing: (pieces as! String)) ) ?? -1))
        let r2 = ((Int((String(describing: String(describing: String(Array(String(describing: (pieces as! String)))[((r1 + 1) as! Int)..<Int(((pieces).count))]))).firstIndex(of: Character(String(describing: "R")))?.utf16Offset(in: String(describing: String(describing: String(Array(String(describing: (pieces as! String)))[((r1 + 1) as! Int)..<Int(((pieces).count))]))) ) ?? -1)) + r1) + 1)
        let k = Int((String(describing: (pieces as! String)).firstIndex(of: Character(String(describing: "K")))?.utf16Offset(in: String(describing: (pieces as! String)) ) ?? -1))
        if ((k < r1) || (k > r2)) {
            return (-1 as! Int)
        }
        let b1 = Int((String(describing: (pieces as! String)).firstIndex(of: Character(String(describing: "B")))?.utf16Offset(in: String(describing: (pieces as! String)) ) ?? -1))
        let b2 = ((Int((String(describing: String(describing: String(Array(String(describing: (pieces as! String)))[((b1 + 1) as! Int)..<Int(((pieces).count))]))).firstIndex(of: Character(String(describing: "B")))?.utf16Offset(in: String(describing: String(describing: String(Array(String(describing: (pieces as! String)))[((b1 + 1) as! Int)..<Int(((pieces).count))]))) ) ?? -1)) + b1) + 1)
        if ((Int((b2 - b1)) % 2) == 0) {
            return (-1 as! Int)
        }
        var piecesN: String = String(describing: removeChar(String(describing: removeChar((pieces as! String), "Q")), "B"))
        let n1 = Int((String(describing: (piecesN as! String)).firstIndex(of: Character(String(describing: "N")))?.utf16Offset(in: String(describing: (piecesN as! String)) ) ?? -1))
        let n2 = ((Int((String(describing: String(describing: String(Array(String(describing: (piecesN as! String)))[((n1 + 1) as! Int)..<Int(((piecesN).count))]))).firstIndex(of: Character(String(describing: "N")))?.utf16Offset(in: String(describing: String(describing: String(Array(String(describing: (piecesN as! String)))[((n1 + 1) as! Int)..<Int(((piecesN).count))]))) ) ?? -1)) + n1) + 1)
        let N = ntable[(_p(n1) + _p(n2))]!
        var piecesQ: String = String(describing: removeChar((pieces as! String), "B"))
        let Q = Int((String(describing: (piecesQ as! String)).firstIndex(of: Character(String(describing: "Q")))?.utf16Offset(in: String(describing: (piecesQ as! String)) ) ?? -1))
        var D: Int = Int((String(describing: "0246").firstIndex(of: Character(String(describing: (_p(b1) as! String))))?.utf16Offset(in: String(describing: "0246") ) ?? -1))
        var L: Int = Int((String(describing: "1357").firstIndex(of: Character(String(describing: (_p(b2) as! String))))?.utf16Offset(in: String(describing: "1357") ) ?? -1))
        if (D == Int((0 - 1))) {
            D = Int((String(describing: "0246").firstIndex(of: Character(String(describing: (_p(b2) as! String))))?.utf16Offset(in: String(describing: "0246") ) ?? -1))
            L = Int((String(describing: "1357").firstIndex(of: Character(String(describing: (_p(b1) as! String))))?.utf16Offset(in: String(describing: "1357") ) ?? -1))
        }
        return (((((96 * N) + (16 * Q)) + (4 * D)) + L) as! Int)
    }
    func main() {
        for pieces in (["♕♘♖♗♗♘♔♖", "♖♘♗♕♔♗♘♖", "♖♕♘♗♗♔♖♘", "♖♘♕♗♗♔♖♘"] as! [String]) {
            print(_p(((((pieces + " or ") + String(describing: g2l((pieces as! String)))) + " has SP-ID of ") + _p(Int(spid((pieces as! String)))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
