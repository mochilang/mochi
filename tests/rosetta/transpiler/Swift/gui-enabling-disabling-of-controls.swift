// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:01:52 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct State {
    var entry: Bool
    var inc: Bool
    var dec: Bool
}
func state(_ v: Int) -> State {
    return State(entry: (v == 0), inc: (v < 10), dec: (v > 0))
}
func printState(_ v: Int) {
    let s = state((v as! Int))
    print(_p(((((((("value=" + String(describing: v)) + " entry=") + String(describing: s.entry)) + " inc=") + String(describing: s.inc)) + " dec=") + String(describing: s.dec))))
}
func main() {
    var v: Int = 0
    _ = printState((v as! Int))
    while true {
        let s = state((v as! Int))
        if (!s.inc) {
            break
        }
        v = Int((v &+ 1))
        _ = printState((v as! Int))
    }
    while true {
        let s = state((v as! Int))
        if (!s.dec) {
            break
        }
        v = Int((v &- 1))
        _ = printState((v as! Int))
    }
}
_ = main()
