// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:44 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let n = 64
    func pow2(_ k: Int) -> Int {
        var v: Int = 1
        var i: Int = 0
        while (i < k) {
            v = Int((v * 2))
            i = Int((i + 1))
        }
        return Int(v)
    }
    func ruleBit(_ ruleNum: Int, _ idx: Int) -> Int {
        var r: Int = ruleNum
        var i: Int = 0
        while (i < idx) {
            r = Int((r / 2))
            i = Int((i + 1))
        }
        return Int((r % 2))
    }
    func evolve(_ state: inout [Int], _ ruleNum: Int) -> [Int] {
        var out: [Int] = ([] as! [Int])
        var p: Int = 0
        while (p < 10) {
            var b: Int = 0
            var q: Int = 7
            while (q >= 0) {
                let st = state
                b = Int((b + ((st[0] as! Int) * Int(pow2(Int(q))))))
                var next: [Int] = ([] as! [Int])
                var i: Int = 0
                while (i < n) {
                    var lidx: Int = (i - 1)
                    if (lidx < 0) {
                        lidx = Int((n - 1))
                    }
                    let left = (st[lidx] as! Int)
                    let center = (st[i] as! Int)
                    var ridx = (i + 1)
                    if (ridx >= n) {
                        ridx = 0
                    }
                    let right = (st[ridx] as! Int)
                    let index = (((left * 4) + (center * 2)) + right)
                    next = (_append(next, Int(ruleBit(Int(ruleNum), Int(index)))) as! [Int])
                    i = Int((i + 1))
                }
                state = (next as! [Int])
                q = Int((q - 1))
            }
            out = (_append(out, b) as! [Int])
            p = Int((p + 1))
        }
        return (out as! [Int])
    }
    var `init`: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < n) {
        `init` = (_append(`init`, 0) as! [Int])
        i = Int((i + 1))
    }
    `init`[0] = 1
    let bytes = (evolve(&`init`, 30) as! [Int])
    print(_p(_p(bytes)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
