// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:47 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bottles(_ n: Int) -> String {
        if (n == 0) {
            return "No more bottles"
        }
        if (n == 1) {
            return "1 bottle"
        }
        return String(describing: (_p(n) + " bottles"))
    }
    func sing99() {
        var i: Int = 99
        while (i > 0) {
            print(_p((String(describing: bottles(Int(i))) + " of beer on the wall")))
            print(_p((String(describing: bottles(Int(i))) + " of beer")))
            print(_p("Take one down, pass it around"))
            print(_p((String(describing: bottles(Int((i - 1)))) + " of beer on the wall")))
            i = Int((i - 1))
        }
    }
    func run(_ code: String) {
        var acc: Int = 0
        var i: Int = 0
        while (i < Int(((code).count))) {
            let ch = String(describing: String(Array(String(describing: String(describing: code)))[Int(i)..<Int((i + 1))]))
            if (ch == "H") {
                print(_p("Hello, World!"))
            } else if (ch == "Q") {
                print(_p(code))
            } else if (ch == "9") {
                _ = sing99()
            } else if (ch == "+") {
                acc = Int((acc + 1))
            }
            
            
            
            i = Int((i + 1))
        }
    }
    func main() {
        let code = (readLine() ?? "")
        _ = run(String(describing: code))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
