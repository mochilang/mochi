// Generated by Mochi transpiler v0.10.57 on 2025-08-04 17:02:58 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
let PI: Double = 3.141592653589793
func _mod(_ x: Double, _ m: Double) -> Double {
    return (x - (Double(Int((x / m))) * m))
}
func _sin(_ x: Double) -> Double {
    let y = (Double(_mod(Double((x + PI)), Double((2.0 * PI)))) - PI)
    let y2 = (y * y)
    let y3 = (y2 * y)
    let y5 = (y3 * y2)
    let y7 = (y5 * y2)
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
}
func _cos(_ x: Double) -> Double {
    let y = (Double(_mod(Double((x + PI)), Double((2.0 * PI)))) - PI)
    let y2 = (y * y)
    let y4 = (y2 * y2)
    let y6 = (y4 * y2)
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
}
var width = 80
var height = 40
let depth = 6
let angle = 12.0
let length = 12.0
let frac = 0.8
func clearGrid() -> [[String]] {
    var g: [[String]] = ([] as! [[String]])
    var y: Int = 0
    while (y < height) {
        var row: [String] = ([] as! [String])
        var x: Int = 0
        while (x < width) {
            row = (_append(row, " ") as! [String])
            x = Int((x &+ 1))
        }
        g = (_append(g, row) as! [[String]])
        y = Int((y &+ 1))
    }
    return g
}
func drawPoint(_ g: inout [[String]], _ x: Int, _ y: Int) {
    if ((((x >= 0) && (x < width)) && (y >= 0)) && (y < height)) {
        var row: [String] = (g[y] as! [String])
        row[x] = "#"
        g[y] = (row as! [String])
    }
}
func bresenham(_ x0: Int, _ y0: Int, _ x1: Int, _ y1: Int, _ g: inout [[String]]) {
    var x0 = x0
    var y0 = y0
    var dx: Int = (x1 &- x0)
    if (dx < 0) {
        dx = Int(-dx)
    }
    var dy: Int = (y1 &- y0)
    if (dy < 0) {
        dy = Int(-dy)
    }
    var sx: Int = -1
    if (x0 < x1) {
        sx = 1
    }
    var sy: Int = -1
    if (y0 < y1) {
        sy = 1
    }
    var err: Int = (dx &- dy)
    while true {
        _ = drawPoint(&g, x0, y0)
        if ((x0 == x1) && (y0 == y1)) {
            break
        }
        var e2: Int = (2 &* err)
        if (e2 > Int(-dy)) {
            err = Int((err &- dy))
            x0 = Int((x0 &+ sx))
        }
        if (e2 < dx) {
            err = Int((err &+ dx))
            y0 = Int((y0 &+ sy))
        }
    }
}
func ftree(_ g: inout [[String]], _ x: Double, _ y: Double, _ dist: Double, _ dir: Double, _ d: Int) {
    var x = x
    var y = y
    let rad = ((dir * PI) / 180.0)
    var x2 = (x + (dist * Double(_sin(Double(rad)))))
    var y2 = (y - (dist * Double(_cos(Double(rad)))))
    _ = bresenham(Int(x), Int(y), Int(x2), Int(y2), &g)
    if (d > 0) {
        _ = ftree(&g, Double(x2), Double(y2), Double((dist * frac)), Double((dir - angle)), (d &- 1))
        _ = ftree(&g, Double(x2), Double(y2), Double((dist * frac)), Double((dir + angle)), (d &- 1))
    }
}
func render(_ g: [[String]]) -> String {
    var out: String = ""
    var y: Int = 0
    while (y < height) {
        var line: String = ""
        var x: Int = 0
        while (x < width) {
            line = ((line + (g[y][x] as! String)) as! String)
            x = Int((x &+ 1))
        }
        out = ((out + line) as! String)
        if (y < (height &- 1)) {
            out = ((out + "\n") as! String)
        }
        y = Int((y &+ 1))
    }
    return out
}
func main() {
    var grid: [[String]] = (clearGrid() as! [[String]])
    _ = ftree(&grid, Double((width / 2)), Double((height &- 1)), Double(length), 0.0, depth)
    print(_p(String(describing: render((grid as! [[String]])))))
}
_ = main()
