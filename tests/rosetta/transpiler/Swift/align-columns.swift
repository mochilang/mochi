// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:15:01 GMT+7
import Foundation

func split(_ s: String, _ sep: String) -> [String] {
    var parts: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (i < Int(((s).count))) {
        if (((Int(((sep).count)) > 0) && ((i + Int(((sep).count))) <= Int(((s).count)))) && (String(describing: String(Array((s as! String))[(i as! Int)..<((i + Int(((sep).count))) as! Int)])) == sep)) {
            parts = ((parts + [cur]) as! [String])
            cur = ""
            i = ((i + Int(((sep).count))) as! Int)
        } else {
            cur = ((cur + String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))) as! String)
            i = ((i + 1) as! Int)
        }
    }
    parts = ((parts + [cur]) as! [String])
    return (parts as! [String])
}
func rstripEmpty(_ words: [String]) -> [String] {
    var n = Int(((words).count))
    while ((n > 0) && (String(describing: words[(n - 1)]) == "")) {
        n = ((n - 1) as! Int)
    }
    return (Array(words[0..<n]) as! [String])
}
func spaces(_ n: Int) -> String {
    var out = ""
    var i = 0
    while (i < n) {
        out = ((out + " ") as! String)
        i = ((i + 1) as! Int)
    }
    return (out as! String)
}
func pad(_ word: String, _ width: Int, _ align: Int) -> String {
    let diff = (width - Int(((word).count)))
    if (align == 0) {
        return ((word + String(describing: spaces((diff as! Int)))) as! String)
    }
    if (align == 2) {
        return ((String(describing: spaces((diff as! Int))) + word) as! String)
    }
    var left = Int((diff / 2))
    var right = ((diff - left) as! Int)
    return (((String(describing: spaces((left as! Int))) + word) + String(describing: spaces((right as! Int)))) as! String)
}
func newFormatter(_ text: String) -> [String: Any] {
    var lines = (split((text as! String), "\n") as! [String])
    var fmtLines: [[String]] = ([] as! [[String]])
    var width: [Int] = ([] as! [Int])
    var i = 0
    while (i < Int(((lines).count))) {
        if (Int(((String(describing: lines[i])).count)) == 0) {
            i = ((i + 1) as! Int)
            continue
        }
        var words = (rstripEmpty((split(String(describing: lines[i]), "$") as! [String])) as! [String])
        fmtLines = ((fmtLines + [words]) as! [[String]])
        var j = 0
        while (j < Int(((words).count))) {
            let wlen = Int(((String(describing: words[j])).count))
            if (j == Int(((width).count))) {
                width = ((width + [wlen]) as! [Int])
            } else if (wlen > Int(width[j])) {
                width[j] = (wlen as! Int)
            }
            
            j = ((j + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return (["text": fmtLines, "width": width] as [String: Any] as! [String: Any])
}
func printFmt(_ f: [String: Any], _ align: Int) {
    let lines = ((f as! [String: Any])["text"]! as! [[String]])
    let width = ((f as! [String: Any])["width"]! as! [Int])
    var i = 0
    while (i < Int(((lines).count))) {
        let words = (lines[i] as! [String])
        var line = ""
        var j = 0
        while (j < Int(((words).count))) {
            line = (((line + String(describing: pad(String(describing: words[j]), Int(width[j]), (align as! Int)))) + " ") as! String)
            j = ((j + 1) as! Int)
        }
        print(line)
        i = ((i + 1) as! Int)
    }
    print("")
}
let text = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.")
let f = (newFormatter((text as! String)) as! [String: Any])
_ = printFmt((f as! [String: Any]), 0)
_ = printFmt((f as! [String: Any]), 1)
_ = printFmt((f as! [String: Any]), 2)
