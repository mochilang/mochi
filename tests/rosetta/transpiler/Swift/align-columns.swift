// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:09:53 GMT+7
import Foundation

func split(_ s: String, _ sep: String) -> [String] {
    var parts: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        if (((Int(((String(sep)).count)) > 0) && ((Int(i) + Int(((String(sep)).count))) <= Int(((String(s)).count)))) && (String(String(Array(String(s))[Int(i)..<((Int(i) + Int(((String(sep)).count))) as! Int)])) == String(sep))) {
            parts = (((parts as! [String]) + [String(cur)]) as! [String])
            cur = ""
            i = ((Int(i) + Int(((String(sep)).count))) as! Int)
        } else {
            cur = ((String(cur) + String(String(Array(String(s))[Int(i)..<((Int(i) + 1) as! Int)]))) as! String)
            i = ((Int(i) + 1) as! Int)
        }
    }
    parts = (((parts as! [String]) + [String(cur)]) as! [String])
    return (parts as! [String])
}
func rstripEmpty(_ words: [String]) -> [String] {
    var n = Int((((words as! [String])).count))
    while ((Int(n) > 0) && (String(words[(Int(n) - 1)]) == "")) {
        n = ((Int(n) - 1) as! Int)
    }
    return (Array(words[0..<Int(n)]) as! [String])
}
func spaces(_ n: Int) -> String {
    var out = ""
    var i = 0
    while (Int(i) < Int(n)) {
        out = ((String(out) + " ") as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(out)
}
func pad(_ word: String, _ width: Int, _ align: Int) -> String {
    let diff = (Int(width) - Int(((String(word)).count)))
    if (Int(align) == 0) {
        return ((String(word) + String(spaces(Int(diff)))) as! String)
    }
    if (Int(align) == 2) {
        return ((String(spaces(Int(diff))) + String(word)) as! String)
    }
    var left = Int((Int(diff) / 2))
    var right = ((Int(diff) - Int(left)) as! Int)
    return (((String(spaces(Int(left))) + String(word)) + String(spaces(Int(right)))) as! String)
}
func newFormatter(_ text: String) -> [String: Any] {
    var lines = (split(String(text), "\n") as! [String])
    var fmtLines: [[String]] = ([] as! [[String]])
    var width: [Int] = ([] as! [Int])
    var i = 0
    while (Int(i) < Int((((lines as! [String])).count))) {
        if (Int(((String(lines[Int(i)])).count)) == 0) {
            i = ((Int(i) + 1) as! Int)
            continue
        }
        var words = (rstripEmpty((split(String(lines[Int(i)]), "$") as! [String])) as! [String])
        fmtLines = (((fmtLines as! [[String]]) + [(words as! [String])]) as! [[String]])
        var j = 0
        while (Int(j) < Int((((words as! [String])).count))) {
            let wlen = Int(((String(words[Int(j)])).count))
            if (Int(j) == Int((((width as! [Int])).count))) {
                width = (((width as! [Int]) + [Int(wlen)]) as! [Int])
            } else if (Int(wlen) > Int(width[Int(j)])) {
                width[Int(j)] = Int(wlen)
            }
            
            j = ((Int(j) + 1) as! Int)
        }
        i = ((Int(i) + 1) as! Int)
    }
    return (["text": (fmtLines as! [[String]]), "width": (width as! [Int])] as [String: Any] as! [String: Any])
}
func printFmt(_ f: [String: Any], _ align: Int) {
    let lines = ((f as! [String: Any])["text"]! as! [[String]])
    let width = ((f as! [String: Any])["width"]! as! [Int])
    var i = 0
    while (Int(i) < Int((((lines as! [[String]])).count))) {
        let words = (lines[Int(i)] as! [String])
        var line = ""
        var j = 0
        while (Int(j) < Int((((words as! [String])).count))) {
            line = (((String(line) + String(pad(String(words[Int(j)]), Int(width[Int(j)]), Int(align)))) + " ") as! String)
            j = ((Int(j) + 1) as! Int)
        }
        print(String(line))
        i = ((Int(i) + 1) as! Int)
    }
    print("")
}
let text = ((((("Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n") + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n") + "column$are$separated$by$at$least$one$space.\n") + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n") + "justified,$right$justified,$or$center$justified$within$its$column.")
let f = (newFormatter(String(text)) as! [String: Any])
_ = printFmt((f as! [String: Any]), 0)
_ = printFmt((f as! [String: Any]), 1)
_ = printFmt((f as! [String: Any]), 2)
