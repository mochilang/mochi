// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:53 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
var adfgvx = "ADFGVX"
var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
func shuffleStr(_ s: String) -> String {
    var arr: [String] = ([] as! [String])
    var i = 0
    while (i < Int(((s).count))) {
        arr = ((arr + [String(Array(s)[i..<(i + 1)])]) as! [String])
        i = ((i + 1) as! Int)
    }
    var j = ((Int(((arr).count)) - 1) as! Int)
    while (j > 0) {
        let k = (Int(_now()) % Int((j + 1)))
        let tmp = String(describing: arr[j])
        arr[j] = String(describing: arr[k])
        arr[k] = (tmp as! String)
        j = ((j - 1) as! Int)
    }
    var out = ""
    i = 0
    while (i < Int(((arr).count))) {
        out = ((out + String(describing: arr[i])) as! String)
        i = ((i + 1) as! Int)
    }
    return (out as! String)
}
func createPolybius() -> [String] {
    let shuffled = String(describing: shuffleStr((alphabet as! String)))
    var labels: [String] = ([] as! [String])
    var li = 0
    while (li < Int(((adfgvx).count))) {
        labels = ((labels + [String(Array(adfgvx)[li..<(li + 1)])]) as! [String])
        li = ((li + 1) as! Int)
    }
    print("6 x 6 Polybius square:\n")
    print("  | A D F G V X")
    print("---------------")
    var p: [String] = ([] as! [String])
    var i = 0
    while (i < 6) {
        var row = (String(Array(shuffled)[(i * 6)..<(Int((i + 1)) * 6)]) as! String)
        p = ((p + [row]) as! [String])
        var line = ((String(describing: labels[i]) + " | ") as! String)
        var j = 0
        while (j < 6) {
            line = (((line + String(Array(row)[j..<(j + 1)])) + " ") as! String)
            j = ((j + 1) as! Int)
        }
        print(line)
        i = ((i + 1) as! Int)
    }
    return (p as! [String])
}
func createKey(_ n: Int) -> String {
    if ((n < 7) || (n > 12)) {
        print("Key should be within 7 and 12 letters long.")
    }
    var pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    var key = ""
    var i = 0
    while (i < n) {
        let idx = (Int(_now()) % Int(((pool).count)))
        key = ((key + String(describing: String(Array(pool)[idx]))) as! String)
        pool = ((String(Array(pool)[0..<idx]) + String(Array(pool)[(idx + 1)..<Int(((pool).count))])) as! String)
        i = ((i + 1) as! Int)
    }
    print(("\nThe key is " + key))
    return (key as! String)
}
func orderKey(_ key: String) -> [Int] {
    var pairs: [Any] = ([] as! [Any])
    var i = 0
    while (i < Int(((key).count))) {
        pairs = ((((pairs + [[String(Array(key)[i..<(i + 1)]), i]]) as! [Any]) as! [[Any]]) as! [Any])
        i = ((i + 1) as! Int)
    }
    var n = Int(((pairs).count))
    var m = 0
    while (m < n) {
        var j = 0
        while (j < (n - 1)) {
            if (String(describing: ((pairs as! [Any])[j] as! [Any])[0])
            > String(describing: ((pairs as! [Any])[(j + 1)] as! [Any])[0])
            ) {
                let tmp = (pairs as! [Any])[j]
                pairs[j] = (pairs as! [Any])[(j + 1)]
                pairs[(j + 1)] = tmp
            }
            j = ((j + 1) as! Int)
        }
        m = ((m + 1) as! Int)
    }
    var res: [Any] = ([] as! [Any])
    i = 0
    while (i < n) {
        res = ((((res + [Int(((pairs as! [Any])[i] as! [Any])[1])]) as! [Any]) as! [Int]) as! [Any])
        i = ((i + 1) as! Int)
    }
    return (res as! [Int])
}
func encrypt(_ polybius: [String], _ key: String, _ plainText: String) -> String {
    var labels: [String] = ([] as! [String])
    var li = 0
    while (li < Int(((adfgvx).count))) {
        labels = ((labels + [String(Array(adfgvx)[li..<(li + 1)])]) as! [String])
        li = ((li + 1) as! Int)
    }
    var temp = ""
    var i = 0
    while (i < Int(((plainText).count))) {
        var r = 0
        while (r < 6) {
            var c = 0
            while (c < 6) {
                if (String(describing: Array(polybius[r][c..<(c + 1)])) == String(Array(plainText)[i..<(i + 1)])) {
                    temp = (((temp + Array(labels[r..<(r + 1)])) + Array(labels[c..<(c + 1)])) as! String)
                }
                c = ((c + 1) as! Int)
            }
            r = ((r + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    var colLen = ((Int(((temp).count)) / Int(((key).count))) as! Int)
    if ((Int(((temp).count)) % Int(((key).count))) > 0) {
        colLen = ((colLen + 1) as! Int)
    }
    var table: [[String]] = ([] as! [[String]])
    var rIdx = 0
    while (rIdx < colLen) {
        var row: [String] = ([] as! [String])
        var j = 0
        while (j < Int(((key).count))) {
            row = ((row + [""]) as! [String])
            j = ((j + 1) as! Int)
        }
        table = ((table + [row]) as! [[String]])
        rIdx = ((rIdx + 1) as! Int)
    }
    var idx = 0
    while (idx < Int(((temp).count))) {
        let row = (idx / Int(((key).count)))
        let col = (idx % Int(((key).count)))
        table[row][col] = (String(Array(temp)[idx..<(idx + 1)]) as! String)
        idx = ((idx + 1) as! Int)
    }
    let order = (orderKey((key as! String)) as! [Int])
    var cols: [String] = ([] as! [String])
    var ci = 0
    while (ci < Int(((key).count))) {
        var colStr = ""
        var ri = 0
        while (ri < colLen) {
            colStr = ((colStr + String(describing: String(Array(table[ri])[Int(order[ci])]))) as! String)
            ri = ((ri + 1) as! Int)
        }
        cols = ((cols + [colStr]) as! [String])
        ci = ((ci + 1) as! Int)
    }
    var result = ""
    ci = 0
    while (ci < Int(((cols).count))) {
        result = ((result + String(describing: cols[ci])) as! String)
        if (ci < (Int(((cols).count)) - 1)) {
            result = ((result + " ") as! String)
        }
        ci = ((ci + 1) as! Int)
    }
    return (result as! String)
}
func indexOf(_ s: String, _ ch: String) -> Int {
    var i = 0
    while (i < Int(((s).count))) {
        if (String(Array(s)[i..<(i + 1)]) == ch) {
            return (i as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return (-1 as! Int)
}
func decrypt(_ polybius: [String], _ key: String, _ cipherText: String) -> String {
    var colStrs: [String] = ([] as! [String])
    var start = 0
    var i = 0
    while (i <= Int(((cipherText).count))) {
        if ((i == Int(((cipherText).count))) || (String(describing: String(Array(cipherText)[i])) == " ")) {
            colStrs = ((colStrs + [String(Array(cipherText)[start..<i])]) as! [String])
            start = ((i + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    var maxColLen = 0
    i = 0
    while (i < Int(((colStrs).count))) {
        if (Int(((String(describing: colStrs[i])).count)) > maxColLen) {
            maxColLen = Int(((String(describing: colStrs[i])).count))
        }
        i = ((i + 1) as! Int)
    }
    var cols: [[String]] = ([] as! [[String]])
    i = 0
    while (i < Int(((colStrs).count))) {
        var s = String(describing: colStrs[i])
        var ls: [String] = ([] as! [String])
        var j = 0
        while (j < Int(((s).count))) {
            ls = ((ls + [String(Array(s)[j..<(j + 1)])]) as! [String])
            j = ((j + 1) as! Int)
        }
        if (Int(((s).count)) < maxColLen) {
            var pad: [String] = ([] as! [String])
            var k = 0
            while (k < maxColLen) {
                if (k < Int(((ls).count))) {
                    pad = ((pad + [String(describing: ls[k])]) as! [String])
                } else {
                    pad = ((pad + [""]) as! [String])
                }
                k = ((k + 1) as! Int)
            }
            cols = ((cols + [pad]) as! [[String]])
        } else {
            cols = ((cols + [ls]) as! [[String]])
        }
        i = ((i + 1) as! Int)
    }
    var table: [[String]] = ([] as! [[String]])
    var r = 0
    while (r < maxColLen) {
        var row: [String] = ([] as! [String])
        var c = 0
        while (c < Int(((key).count))) {
            row = ((row + [""]) as! [String])
            c = ((c + 1) as! Int)
        }
        table = ((table + [row]) as! [[String]])
        r = ((r + 1) as! Int)
    }
    let order = (orderKey((key as! String)) as! [Int])
    r = 0
    while (r < maxColLen) {
        var c = 0
        while (c < Int(((key).count))) {
            table[r][Int(order[c])] = String(describing: String(Array(cols[c])[r]))
            c = ((c + 1) as! Int)
        }
        r = ((r + 1) as! Int)
    }
    var temp = ""
    r = 0
    while (r < Int(((table).count))) {
        var j = 0
        while (j < Int((((table[r] as! [String])).count))) {
            temp = ((temp + String(describing: String(Array(table[r])[j]))) as! String)
            j = ((j + 1) as! Int)
        }
        r = ((r + 1) as! Int)
    }
    var plainText = ""
    var idx = 0
    while (idx < Int(((temp).count))) {
        let rIdx = Int(indexOf((adfgvx as! String), (String(Array(temp)[idx..<(idx + 1)]) as! String)))
        let cIdx = Int(indexOf((adfgvx as! String), (String(Array(temp)[(idx + 1)..<(idx + 2)]) as! String)))
        plainText = ((plainText + String(describing: (polybius[rIdx] as! [Any])[cIdx])) as! String)
        idx = ((idx + 2) as! Int)
    }
    return (plainText as! String)
}
func main() {
    let plainText = "ATTACKAT1200AM"
    let polybius = (createPolybius() as! [String])
    let key = String(describing: createKey(9))
    print(("\nPlaintext : " + plainText))
    let cipherText = String(describing: encrypt((polybius as! [String]), (key as! String), (plainText as! String)))
    print(("\nEncrypted : " + cipherText))
    let plainText2 = String(describing: decrypt((polybius as! [String]), (key as! String), (cipherText as! String)))
    print(("\nDecrypted : " + plainText2))
}
_ = main()
