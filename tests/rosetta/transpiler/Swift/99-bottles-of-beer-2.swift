// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:34:08 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fields(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var cur = ""
        var i = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))
            if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
                if (Int(((cur).count)) > 0) {
                    words = ((words + [cur]) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + ch) as! String)
            }
            i = ((i + 1) as! Int)
        }
        if (Int(((cur).count)) > 0) {
            words = ((words + [cur]) as! [String])
        }
        return (words as! [String])
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res = ""
        var i = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + String(describing: xs[i])) as! String)
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func numberName(_ n: Int) -> String {
        let small = (["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"] as! [String])
        let tens = (["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"] as! [String])
        if (n < 0) {
            return ""
        }
        if (n < 20) {
            return String(describing: small[n])
        }
        if (n < 100) {
            var t = String(describing: tens[Int((n / 10))])
            var s = ((n % 10) as! Int)
            if (s > 0) {
                t = (((t + " ") + String(describing: small[s])) as! String)
            }
            return (t as! String)
        }
        return ""
    }
    func pluralizeFirst(_ s: String, _ n: Int) -> String {
        if (n == 1) {
            return (s as! String)
        }
        var w = (fields((s as! String)) as! [String])
        if (Int(((w).count)) > 0) {
            w[0] = ((String(describing: w[0]) + "s") as! String)
        }
        return String(describing: join((w as! [String]), " "))
    }
    func randInt(_ seed: Int, _ n: Int) -> Int {
        let next = (Int(((seed * 1664525) + 1013904223)) % 2147483647)
        return ((next % n) as! Int)
    }
    func slur(_ p: String, _ d: Int) -> String {
        if (Int(((p).count)) <= 2) {
            return (p as! String)
        }
        var a: [String] = ([] as! [String])
        var i = 1
        while (i < (Int(((p).count)) - 1)) {
            a = ((a + [String(describing: String(Array((p as! String))[(i as! Int)..<((i + 1) as! Int)]))]) as! [String])
            i = ((i + 1) as! Int)
        }
        var idx = ((Int(((a).count)) - 1) as! Int)
        var seed = (d as! Int)
        while (idx >= 1) {
            seed = ((Int(((seed * 1664525) + 1013904223)) % 2147483647) as! Int)
            if ((seed % 100) >= d) {
                let j = (seed % Int((idx + 1)))
                let tmp = String(describing: a[idx])
                a[idx] = String(describing: a[j])
                a[j] = (tmp as! String)
            }
            idx = ((idx - 1) as! Int)
        }
        var s = String(describing: String(Array((p as! String))[0..<1]))
        var k = 0
        while (k < Int(((a).count))) {
            s = ((s + String(describing: a[k])) as! String)
            k = ((k + 1) as! Int)
        }
        s = ((s + String(describing: String(Array((p as! String))[((Int(((p).count)) - 1) as! Int)..<Int(((p).count))]))) as! String)
        let w = (fields((s as! String)) as! [String])
        return String(describing: join((w as! [String]), " "))
    }
    func main() {
        var i = 99
        while (i > 0) {
            print(((((String(describing: slur(String(describing: numberName((i as! Int))), (i as! Int))) + " ") + String(describing: pluralizeFirst(String(describing: slur("bottle of", (i as! Int))), (i as! Int)))) + " ") + String(describing: slur("beer on the wall", (i as! Int)))))
            print(((((String(describing: slur(String(describing: numberName((i as! Int))), (i as! Int))) + " ") + String(describing: pluralizeFirst(String(describing: slur("bottle of", (i as! Int))), (i as! Int)))) + " ") + String(describing: slur("beer", (i as! Int)))))
            print(((((String(describing: slur("take one", (i as! Int))) + " ") + String(describing: slur("down", (i as! Int)))) + " ") + String(describing: slur("pass it around", (i as! Int)))))
            print(((((String(describing: slur(String(describing: numberName(((i - 1) as! Int))), (i as! Int))) + " ") + String(describing: pluralizeFirst(String(describing: slur("bottle of", (i as! Int))), ((i - 1) as! Int)))) + " ") + String(describing: slur("beer on the wall", (i as! Int)))))
            i = ((i - 1) as! Int)
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
