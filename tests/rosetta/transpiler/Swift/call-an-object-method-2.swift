// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func newFactory() -> [() -> Any] {
        var sn: Int = 0
        func New() -> Box {
            sn = ((sn + 1) as! Int)
            var b: Box = Box(secret: sn)
            if (sn == 1) {
                b.Contents = "rabbit"
            } else if (sn == 2) {
                b.Contents = "rock"
            }
            
            return (b as! Box)
        }
        func Count() -> Int {
            return (sn as! Int)
        }
        return ([(New as! Any), (Count as! Any)] as! [Any])
    }
    let funcs: [Any] = (newFactory() as! [Any])
    let New = (funcs[0] as! Any)
    let Count = (funcs[1] as! Any)
    struct Box {
        var Contents: String
        var secret: Int
    }
    func Box_TellSecret(_ self: Box) -> Int {
        return (secret as! Int)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
