// Generated by Mochi transpiler v0.10.52 on 2025-08-02 10:50:15 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func dbRec(_ k: Int, _ n: Int, _ t: Int, _ p: Int, _ a: inout [Int], _ seq: inout [Int]) -> [Int] {
        if (t > n) {
            if ((n % p) == 0) {
                var j: Int = 1
                while (j <= p) {
                    seq = (_append(seq, (a[j] as! Int)) as! [Int])
                    j = ((j &+ 1) as! Int)
                }
            }
        } else {
            a[t] = (a[(t &- p)] as! Int)
            seq = (dbRec((k as! Int), (n as! Int), ((t &+ 1) as! Int), (p as! Int), &a, &seq) as! [Int])
            var j: Int = ((a[(t &- p)] as! Int) &+ 1)
            while (j < k) {
                a[t] = (j as! Int)
                seq = (dbRec((k as! Int), (n as! Int), ((t &+ 1) as! Int), (t as! Int), &a, &seq) as! [Int])
                j = ((j &+ 1) as! Int)
            }
        }
        return seq
    }
    func deBruijn(_ k: Int, _ n: Int) -> String {
        let digits = "0123456789"
        var alphabet: String = digits
        if (k < 10) {
            alphabet = (String(Array(digits)[0..<k]) as! String)
        }
        var a: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < (k &* n)) {
            a = (_append(a, 0) as! [Int])
            i = ((i &+ 1) as! Int)
        }
        var seq: [Int] = ([] as! [Int])
        seq = (dbRec((k as! Int), (n as! Int), 1, 1, &a, &seq) as! [Int])
        var b: String = ""
        var idx: Int = 0
        while (idx < Int(((seq).count))) {
            b = ((b + (String(Array(alphabet)[(seq[idx] as! Int)]) as! String)) as! String)
            idx = ((idx &+ 1) as! Int)
        }
        b = ((b + String(Array(b)[0..<(n &- 1)])) as! String)
        return b
    }
    func allDigits(_ s: String) -> Bool {
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(Array(s)[i..<(i &+ 1)])
            if ((ch < "0") || (ch > "9")) {
                return false
            }
            i = ((i &+ 1) as! Int)
        }
        return true
    }
    func parseIntStr(_ str: String) -> Int {
        var n: Int = 0
        var i: Int = 0
        while (i < Int(((str).count))) {
            n = (((n &* 10) &+ Int(String(Array(str)[i..<(i &+ 1)]))!) as! Int)
            i = ((i &+ 1) as! Int)
        }
        return n
    }
    func validate(_ db: String) {
        let le = Int(((db).count))
        var found: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < 10000) {
            found = (_append(found, 0) as! [Int])
            i = ((i &+ 1) as! Int)
        }
        var j: Int = 0
        while (j < (le &- 3)) {
            let s = String(Array(db)[j..<(j &+ 4)])
            if allDigits((s as! String)) {
                let n = Int(Int(String(describing: (s as! String)))!)
                found[n] = (((found[n] as! Int) &+ 1) as! Int)
            }
            j = ((j &+ 1) as! Int)
        }
        var errs: [String] = ([] as! [String])
        var k: Int = 0
        while (k < 10000) {
            if ((found[k] as! Int) == 0) {
                errs = (_append(errs, (("    PIN number " + String(describing: padLeft((k as! Int), 4))) + " missing")) as! [String])
            } else if ((found[k] as! Int) > 1) {
                errs = (_append(errs, (((("    PIN number " + String(describing: padLeft((k as! Int), 4))) + " occurs ") + _p((found[k] as! Int))) + " times")) as! [String])
            }
            
            k = ((k &+ 1) as! Int)
        }
        let lerr = Int(((errs).count))
        if (lerr == 0) {
            print(_p("  No errors found"))
        } else {
            var pl: String = "s"
            if (lerr == 1) {
                pl = ""
            }
            print(_p((((("  " + _p(lerr)) + " error") + pl) + " found:")))
            let msg = String(describing: joinStr((errs as! [String]), "\n"))
            print(_p(msg))
        }
    }
    func padLeft(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = (("0" + s) as! String)
        }
        return s
    }
    func joinStr(_ xs: [String], _ sep: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + (xs[i] as! String)) as! String)
            i = ((i &+ 1) as! Int)
        }
        return res
    }
    func reverse(_ s: String) -> String {
        var out: String = ""
        var i: Int = (Int(((s).count)) &- 1)
        while (i >= 0) {
            out = ((out + String(Array(s)[i..<(i &+ 1)])) as! String)
            i = ((i &- 1) as! Int)
        }
        return out
    }
    func main() {
        var db: String = String(describing: deBruijn(10, 4))
        let le = Int(((db).count))
        print(_p(("The length of the de Bruijn sequence is " + _p(le))))
        print(_p("\nThe first 130 digits of the de Bruijn sequence are:"))
        print(_p(String(Array(db)[0..<130])))
        print(_p("\nThe last 130 digits of the de Bruijn sequence are:"))
        print(_p(String(Array(db)[(le &- 130)..<Array(db).count])))
        print(_p("\nValidating the de Bruijn sequence:"))
        _ = validate((db as! String))
        print(_p("\nValidating the reversed de Bruijn sequence:"))
        let dbr = String(describing: reverse((db as! String)))
        _ = validate((dbr as! String))
        db = (((String(Array(db)[0..<4443]) + ".") + String(Array(db)[4444..<Int(((db).count))])) as! String)
        print(_p("\nValidating the overlaid de Bruijn sequence:"))
        _ = validate((db as! String))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
