// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:12:05 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func padLeft(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = ((" " + s) as! String)
        }
        return s
    }
    func squeeze(_ s: String, _ ch: String) -> String {
        var out: String = ""
        var prev: Bool = false
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))
            if (c == ch) {
                if (!prev) {
                    out = ((out + c) as! String)
                    prev = true
                }
            } else {
                out = ((out + c) as! String)
                prev = false
            }
            i = Int((i &+ 1))
        }
        return out
    }
    let strings: [String] = (["", "\"If I were two-faced, would I be wearing this one?\" --- Abraham Lincoln ", "..1111111111111111111111111111111111111111111111111111111111111117777888", "I never give 'em hell, I just tell the truth, and they think it's hell. ", "                                                   ---  Harry S Truman  ", "The better the 4-wheel drive, the further you'll be from help when ya get stuck!", "headmistressship", "aardvark", "😍😀🙌💃😍😍😍🙌"] as! [String])
    let chars: [[String]] = ([([" "] as! [String]), (["-"] as! [String]), (["7"] as! [String]), (["."] as! [String]), ([" ", "-", "r"] as! [String]), (["e"] as! [String]), (["s"] as! [String]), (["a"] as! [String]), (["😍"] as! [String])] as! [[String]])
    var i: Int = 0
    while (i < Int(((strings).count))) {
        var j: Int = 0
        let s = (strings[i] as! String)
        while (j < Int((((chars[i] as! [String])).count))) {
            let c = (chars[i][j] as! String)
            let ss = String(describing: squeeze((s as! String), (c as! String)))
            print(_p((("specified character = '" + c) + "'")))
            print(_p((((("original : length = " + String(describing: padLeft(Int(((s).count)), 2))) + ", string = «««") + s) + "»»»")))
            print(_p((((("squeezed : length = " + String(describing: padLeft(Int(((ss).count)), 2))) + ", string = «««") + ss) + "»»»")))
            print(_p(""))
            j = Int((j &+ 1))
        }
        i = Int((i &+ 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
