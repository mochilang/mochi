// Generated by Mochi transpiler v0.10.41 on 2025-07-26 20:38:39 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let xMin = -2.182
    let xMax = 2.6558
    let yMin = 0.0
    let yMax = 9.9983
    let width = 60
    let nIter = 10000
    let dx = (xMax - xMin)
    let dy = (yMax - yMin)
    let height = Int(((Double(width) * dy) / dx))
    var grid: [[String]] = ([] as! [[String]])
    var row: Int = 0
    while (row < height) {
        var line: [String] = ([] as! [String])
        var col: Int = 0
        while (col < width) {
            line = ((line + [" "]) as! [String])
            col = Int((col + 1))
        }
        grid = ((grid + [line]) as! [[String]])
        row = Int((row + 1))
    }
    var seed: Int = 1
    func randInt(_ s: Int, _ n: Int) -> [Int] {
        let next = (Int(((s * 1664525) + 1013904223)) % 2147483647)
        return ([next, (next % n)] as! [Int])
    }
    var x: Double = 0.0
    var y: Double = 0.0
    var ix: Int = Int(((Double(width) * Double((x - xMin))) / dx))
    var iy: Int = Int(((Double(height) * Double((yMax - y))) / dy))
    if ((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height)) {
        grid[iy][ix] = "*"
    }
    var i: Int = 0
    while (i < nIter) {
        var res: [Int] = (randInt(Int(seed), 100) as! [Int])
        seed = (res[0] as! Int)
        let r = (res[1] as! Int)
        if (r < 85) {
            let nx = ((0.85 * x) + (0.04 * y))
            let ny = (((-0.04 * x) + (0.85 * y)) + 1.6)
            x = Double(nx)
            y = Double(ny)
        } else if (r < 92) {
            let nx = ((0.2 * x) - (0.26 * y))
            let ny = (((0.23 * x) + (0.22 * y)) + 1.6)
            x = Double(nx)
            y = Double(ny)
        } else if (r < 99) {
            let nx = ((-0.15 * x) + (0.28 * y))
            let ny = (((0.26 * x) + (0.24 * y)) + 0.44)
            x = Double(nx)
            y = Double(ny)
        } else {
            x = 0.0
            y = Double((0.16 * y))
        }
        
        
        ix = Int(((Double(width) * Double((x - xMin))) / dx))
        iy = Int(((Double(height) * Double((yMax - y))) / dy))
        if ((((ix >= 0) && (ix < width)) && (iy >= 0)) && (iy < height)) {
            grid[iy][ix] = "*"
        }
        i = Int((i + 1))
    }
    row = 0
    while (row < height) {
        var line: String = ""
        var col: Int = 0
        while (col < width) {
            line = String((line + (String(Array(grid[row])[col]) as! String)))
            col = Int((col + 1))
        }
        print(_p(line))
        row = Int((row + 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
