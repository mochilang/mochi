// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:26:03 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func main() {
        let INF = 1000000000
        let n = 4
        var dist: [[Int]] = ([] as! [[Int]])
        var next: [[Int]] = ([] as! [[Int]])
        var i: Int = 0
        while (i < n) {
            var row: [Int] = ([] as! [Int])
            var nrow: [Int] = ([] as! [Int])
            var j: Int = 0
            while (j < n) {
                if (i == j) {
                    row = (_append(row, 0) as! [Int])
                } else {
                    row = (_append(row, INF) as! [Int])
                }
                nrow = (_append(nrow, (0 - 1)) as! [Int])
                j = ((j + 1) as! Int)
            }
            dist = (_append(dist, row) as! [[Int]])
            next = (_append(next, nrow) as! [[Int]])
            i = ((i + 1) as! Int)
        }
        dist[0][2] = (-2 as! Int)
        next[0][2] = 2
        dist[2][3] = 2
        next[2][3] = 3
        dist[3][1] = (-1 as! Int)
        next[3][1] = 1
        dist[1][0] = 4
        next[1][0] = 0
        dist[1][2] = 3
        next[1][2] = 2
        var k: Int = 0
        while (k < n) {
            var i: Int = 0
            while (i < n) {
                var j: Int = 0
                while (j < n) {
                    if (((dist[i][k] as! Int) < INF) && ((dist[k][j] as! Int) < INF)) {
                        let alt = ((dist[i][k] as! Int) + (dist[k][j] as! Int))
                        if (alt < (dist[i][j] as! Int)) {
                            dist[i][j] = (alt as! Int)
                            next[i][j] = (next[i][k] as! Int)
                        }
                    }
                    j = ((j + 1) as! Int)
                }
                i = ((i + 1) as! Int)
            }
            k = ((k + 1) as! Int)
        }
        func path(_ u: Int, _ v: Int) -> [Int] {
            var ui: Int = (u - 1)
            var vi: Int = (v - 1)
            if ((next[ui][vi] as! Int) == (0 - 1)) {
                return ([] as! [Int])
            }
            var p: [Int] = ([u] as! [Int])
            var cur: Int = ui
            while (cur != vi) {
                cur = (next[cur][vi] as! Int)
                p = (_append(p, (cur + 1)) as! [Int])
            }
            return (p as! [Int])
        }
        func pathStr(_ p: [Int]) -> String {
            var s: String = ""
            var first: Bool = true
            var idx: Int = 0
            while (idx < Int(((p).count))) {
                let x = (p[idx] as! Int)
                if (!first) {
                    s = ((s + " -> ") as! String)
                }
                s = ((s + _p(x)) as! String)
                first = false
                idx = ((idx + 1) as! Int)
            }
            return (s as! String)
        }
        print(_p("pair\tdist\tpath"))
        var a: Int = 0
        while (a < n) {
            var b: Int = 0
            while (b < n) {
                if (a != b) {
                    print(_p(((((((_p((a + 1)) + " -> ") + _p((b + 1))) + "\t") + _p((dist[a][b] as! Int))) + "\t") + String(describing: pathStr((path(((a + 1) as! Int), ((b + 1) as! Int)) as! [Int]))))))
                }
                b = ((b + 1) as! Int)
            }
            a = ((a + 1) as! Int)
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
