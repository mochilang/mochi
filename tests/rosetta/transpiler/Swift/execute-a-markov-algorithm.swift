// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:41 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (((Int(((sep).count)) > 0) && ((i + Int(((sep).count))) <= Int(((s).count)))) && (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + Int(((sep).count))))])) == sep)) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = Int((i + Int(((sep).count))))
            } else {
                cur = String(describing: (cur + String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))))
                i = Int((i + 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return (parts as! [String])
    }
    func trimSpace(_ s: String) -> String {
        var start: Int = 0
        while ((start < Int(((s).count))) && ((String(Array(s)[start..<(start + 1)]) == " ") || (String(Array(s)[start..<(start + 1)]) == "\t"))) {
            start = Int((start + 1))
        }
        var end: Int = Int(((s).count))
        while ((end > start) && ((String(Array(s)[(end - 1)..<end]) == " ") || (String(Array(s)[(end - 1)..<end]) == "\t"))) {
            end = Int((end - 1))
        }
        return String(describing: String(Array(s)[start..<end]))
    }
    func indexOfSub(_ s: String, _ sub: String) -> Int {
        if (Int(((sub).count)) == 0) {
            return 0
        }
        var i: Int = 0
        while ((i + Int(((sub).count))) <= Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + Int(((sub).count))))])) == sub) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int((0 - 1))
    }
    func parseRules(_ rs: String) -> [String: Any] {
        var rules: [[String: Any]] = ([] as! [[String: Any]])
        for line in (split(String(describing: rs), "\n") as! [String]) {
            var ln: String = line
            let hash = Int(indexOfSub(String(describing: ln), "#"))
            if (hash >= 0) {
                ln = String(describing: String(Array(ln)[0..<hash]))
            }
            ln = String(describing: trimSpace(String(describing: ln)))
            if (Int(((ln).count)) == 0) {
                continue
            }
            var arrow: Int = (0 - 1)
            var j: Int = 0
            while ((j + 2) <= Int(((ln).count))) {
                if (String(describing: String(Array(String(describing: String(describing: ln)))[Int(j)..<Int((j + 2))])) == "->") {
                    var pre: Bool = ((j > 0) && ((String(Array(ln)[(j - 1)..<j]) == " ") || (String(Array(ln)[(j - 1)..<j]) == "\t")))
                    var post: Bool = (((j + 2) < Int(((ln).count))) && ((String(Array(ln)[(j + 2)..<(j + 3)]) == " ") || (String(Array(ln)[(j + 2)..<(j + 3)]) == "\t")))
                    if (pre && post) {
                        arrow = Int(j)
                        break
                    }
                }
                j = Int((j + 1))
            }
            if (arrow < 0) {
                arrow = Int(indexOfSub(String(describing: ln), "->"))
            }
            if (arrow < 0) {
                return (["ok": false] as! [String: Any])
            }
            var pat: String = String(describing: trimSpace(String(describing: String(Array(ln)[0..<arrow]))))
            var rest: String = String(describing: trimSpace(String(describing: String(Array(ln)[(arrow + 2)..<Int(((ln).count))]))))
            var term: Bool = false
            if ((Int(((rest).count)) > 0) && (String(Array(rest)[0..<1]) == ".")) {
                term = true
                rest = String(describing: String(Array(rest)[1..<Int(((rest).count))]))
            }
            var rep: String = rest
            rules = ((_append(rules, ["pat": pat, "rep": rep, "term": term]) as! [Any]) as! [[String: Any]])
        }
        return (["ok": true, "rules": rules] as! [String: Any])
    }
    func runRules(_ rules: [[String: Any]], _ s: String) -> String {
        var s = s
        var changed: Bool = true
        while changed {
            changed = false
            var i: Int = 0
            while (i < Int(((rules).count))) {
                let r = (rules[i] as! [String: Any])
                let pat = r["pat"]!
                let rep = r["rep"]!
                let term = r["term"]!
                let idx = Int(indexOfSub(String(describing: s), String(describing: pat)))
                if (idx >= 0) {
                    s = String(describing: ((String(Array(s)[0..<idx]) + String(describing: rep)) + String(Array(s)[(idx + Int((String(describing: pat).count)))..<Array(s).count])))
                    changed = true
                    if (term as! Bool) {
                        return String(describing: s)
                    }
                    break
                }
                i = Int((i + 1))
            }
        }
        return String(describing: s)
    }
    func interpret(_ ruleset: String, _ input: String) -> [String: Any] {
        var input = input
        let p = (parseRules(String(describing: ruleset)) as! [String: Any])
        if (!(p["ok"]! as! Bool)) {
            return (["ok": false, "out": ""] as! [String: Any])
        }
        let out = String(describing: runRules((p["rules"]! as! [[String: Any]]), String(describing: input)))
        return (["ok": true, "out": out] as! [String: Any])
    }
    var testSet: [Any] = ([["ruleSet": "# This rules file is extracted from Wikipedia:\n# http://en.wikipedia.org/wiki/Markov_Algorithm\nA -> apple\nB -> bag\nS -> shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", "sample": "I bought a B of As from T S.", "output": "I bought a bag of apples from my brother."], ["ruleSet": "# Slightly modified from the rules on Wikipedia\nA -> apple\nB -> bag\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", "sample": "I bought a B of As from T S.", "output": "I bought a bag of apples from T shop."], ["ruleSet": "# BNF Syntax testing rules\nA -> apple\nWWWW -> with\nBgage -> ->.*\nB -> bag\n->.* -> money\nW -> WW\nS -> .shop\nT -> the\nthe shop -> my brother\na never used -> .terminating rule\n", "sample": "I bought a B of As W my Bgage from T S.", "output": "I bought a bag of apples with my money from T shop."], ["ruleSet": "### Unary Multiplication Engine, for testing Markov Algorithm implementations\n### By Donal Fellows.\n# Unary addition engine\n_+1 -> _1+\n1+1 -> 11+\n# Pass for converting from the splitting of multiplication into ordinary\n# addition\n1! -> !1\n,! -> !+\n_! -> _\n# Unary multiplication by duplicating left side, right side times\n1*1 -> x,@y\n1x -> xX\nX, -> 1,1\nX1 -> 1X\n_x -> _X\n,x -> ,X\ny1 -> 1y\ny_ -> _\n# Next phase of applying\n1@1 -> x,@y\n1@_ -> @_\n,@_ -> !_\n++ -> +\n# Termination cleanup for addition\n_1 -> 1\n1+_ -> 1\n_+_ ->\n", "sample": "_1111*11111_", "output": "11111111111111111111"], ["ruleSet": "# Turing machine: three-state busy beaver\n#\n# state A, symbol 0 => write 1, move right, new state B\nA0 -> 1B\n# state A, symbol 1 => write 1, move left, new state C\n0A1 -> C01\n1A1 -> C11\n# state B, symbol 0 => write 1, move left, new state A\n0B0 -> A01\n1B0 -> A11\n# state B, symbol 1 => write 1, move right, new state B\nB1 -> 1B\n# state C, symbol 0 => write 1, move left, new state B\n0C0 -> B01\n1C0 -> B11\n# state C, symbol 1 => write 1, move left, halt\n0C1 -> H01\n1C1 -> H11\n", "sample": "000000A000000", "output": "00011H1111000"]] as! [Any])
    func main() {
        print(_p((("validating " + _p(Int(((testSet).count)))) + " test cases")))
        var failures: Bool = false
        var i: Int = 0
        while (i < Int(((testSet).count))) {
            var tc = (testSet[i] as! Any)
            let res = (interpret(String(describing: (tc as! [String: Any])["ruleSet"]), String(describing: (tc as! [String: Any])["sample"])) as! [String: Any])
            if (!(res["ok"]! as! Bool)) {
                print(_p((("test " + _p((i + 1))) + " invalid ruleset")))
                failures = true
            } else if (String(describing: res["out"]!) != String(describing: (tc as! [String: Any])["output"])) {
                print(_p(((((("test " + _p((i + 1))) + ": got ") + String(describing: res["out"]!)) + ", want ") + String(describing: (tc as! [String: Any])["output"]))))
                failures = true
            }
            
            i = Int((i + 1))
        }
        if (!failures) {
            print(_p("no failures"))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
