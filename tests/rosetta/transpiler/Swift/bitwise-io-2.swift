// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:20:44 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ n: Int) -> Int {
        var v: Int = 1
        var i: Int = 0
        while (i < n) {
            v = Int((v * 2))
            i = Int((i + 1))
        }
        return Int(v)
    }
    func lshift(_ x: Int, _ n: Int) -> Int {
        return Int((x * Int(pow2(Int(n)))))
    }
    func rshift(_ x: Int, _ n: Int) -> Int {
        return Int((x / Int(pow2(Int(n)))))
    }
    struct Writer {
        var order: String
        var bits: Int
        var nbits: Int
        var data: [Int]
    }
    func NewWriter(_ order: String) -> Writer {
        return (Writer(order: order, bits: 0, nbits: 0, data: []) as! Writer)
    }
    func writeBitsLSB(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        w.bits = Int((w.bits + Int(lshift(Int(c), Int(w.nbits)))))
        w.nbits = Int((w.nbits + width))
        while (w.nbits >= 8) {
            let b = (w.bits % 256)
            w.data = ((w.data + [b]) as! [Int])
            w.bits = Int(rshift(Int(w.bits), 8))
            w.nbits = Int((w.nbits - 8))
        }
        return (w as! Writer)
    }
    func writeBitsMSB(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        w.bits = Int((w.bits + Int(lshift(Int(c), Int(((32 - width) - w.nbits))))))
        w.nbits = Int((w.nbits + width))
        while (w.nbits >= 8) {
            let b = (Int(rshift(Int(w.bits), 24)) % 256)
            w.data = ((w.data + [b]) as! [Int])
            w.bits = Int((Int((w.bits % Int(pow2(24)))) * 256))
            w.nbits = Int((w.nbits - 8))
        }
        return (w as! Writer)
    }
    func WriteBits(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        if (w.order == "LSB") {
            return (writeBitsLSB(&w, Int(c), Int(width)) as! Writer)
        }
        return (writeBitsMSB(&w, Int(c), Int(width)) as! Writer)
    }
    func CloseWriter(_ w: inout Writer) -> Writer {
        if (w.nbits > 0) {
            if (w.order == "MSB") {
                w.bits = Int(rshift(Int(w.bits), 24))
            }
            w.data = ((w.data + [(w.bits % 256)]) as! [Int])
        }
        w.bits = 0
        w.nbits = 0
        return (w as! Writer)
    }
    struct Reader {
        var order: String
        var data: [Int]
        var idx: Int
        var bits: Int
        var nbits: Int
    }
    func NewReader(_ data: [Int], _ order: String) -> Reader {
        return (Reader(order: order, data: data, idx: 0, bits: 0, nbits: 0) as! Reader)
    }
    func readBitsLSB(_ r: inout Reader, _ width: Int) -> [String: Any] {
        while (r.nbits < width) {
            if (r.idx >= Int(((r.data).count))) {
                return (["val": 0, "eof": true] as! [String: Any])
            }
            let b = (r.data[r.idx] as! Int)
            r.idx = Int((r.idx + 1))
            r.bits = Int((r.bits + Int(lshift(Int(b), Int(r.nbits)))))
            r.nbits = Int((r.nbits + 8))
        }
        let mask = (Int(pow2(Int(width))) - 1)
        let out = (r.bits % Int((mask + 1)))
        r.bits = Int(rshift(Int(r.bits), Int(width)))
        r.nbits = Int((r.nbits - width))
        return (["val": out, "eof": false] as! [String: Any])
    }
    func readBitsMSB(_ r: inout Reader, _ width: Int) -> [String: Any] {
        while (r.nbits < width) {
            if (r.idx >= Int(((r.data).count))) {
                return (["val": 0, "eof": true] as! [String: Any])
            }
            let b = (r.data[r.idx] as! Int)
            r.idx = Int((r.idx + 1))
            r.bits = Int((r.bits + Int(lshift(Int(b), Int((24 - r.nbits))))))
            r.nbits = Int((r.nbits + 8))
        }
        let out = Int(rshift(Int(r.bits), Int((32 - width))))
        r.bits = Int((Int((r.bits * Int(pow2(Int(width))))) % Int(pow2(32))))
        r.nbits = Int((r.nbits - width))
        return (["val": out, "eof": false] as! [String: Any])
    }
    func ReadBits(_ r: inout Reader, _ width: Int) -> [String: Any] {
        if (r.order == "LSB") {
            return (readBitsLSB(&r, Int(width)) as! [String: Any])
        }
        return (readBitsMSB(&r, Int(width)) as! [String: Any])
    }
    func toBinary(_ n: Int, _ bits: Int) -> String {
        var b: String = ""
        var val: Int = n
        var i: Int = 0
        while (i < bits) {
            b = String((_p((val % 2)) + b))
            val = Int((val / 2))
            i = Int((i + 1))
        }
        return String(b)
    }
    func bytesToBits(_ bs: [Int]) -> String {
        var out: String = "["
        var i: Int = 0
        while (i < Int(((bs).count))) {
            out = String((out + String(describing: toBinary((bs[i] as! Int), 8))))
            if ((i + 1) < Int(((bs).count))) {
                out = String((out + " "))
            }
            i = Int((i + 1))
        }
        out = String((out + "]"))
        return String(out)
    }
    func bytesToHex(_ bs: [Int]) -> String {
        let digits = "0123456789ABCDEF"
        var out: String = ""
        var i: Int = 0
        while (i < Int(((bs).count))) {
            let b = (bs[i] as! Int)
            let hi = (b / 16)
            let lo = (b % 16)
            out = String(((out + String(Array(digits)[hi..<(hi + 1)])) + String(Array(digits)[lo..<(lo + 1)])))
            if ((i + 1) < Int(((bs).count))) {
                out = String((out + " "))
            }
            i = Int((i + 1))
        }
        return String(out)
    }
    func ord(_ ch: String) -> Int {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        var idx: Int = Int((String(describing: String(upper)).firstIndex(of: Character(String(describing: String(ch))))?.utf16Offset(in: String(describing: String(upper)) ) ?? -1))
        if (idx >= 0) {
            return Int((65 + idx))
        }
        idx = Int((String(describing: String(lower)).firstIndex(of: Character(String(describing: String(ch))))?.utf16Offset(in: String(describing: String(lower)) ) ?? -1))
        if (idx >= 0) {
            return Int((97 + idx))
        }
        if ((ch >= "0") && (ch <= "9")) {
            return Int((48 + Int(String(describing: String(ch)))!))
        }
        if (ch == " ") {
            return 32
        }
        if (ch == ".") {
            return 46
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) && (n < 91)) {
            return String(String(Array(upper)[(n - 65)..<(n - 64)]))
        }
        if ((n >= 97) && (n < 123)) {
            return String(String(Array(lower)[(n - 97)..<(n - 96)]))
        }
        if ((n >= 48) && (n < 58)) {
            let digits = "0123456789"
            return String(String(Array(digits)[(n - 48)..<(n - 47)]))
        }
        if (n == 32) {
            return " "
        }
        if (n == 46) {
            return "."
        }
        return "?"
    }
    func bytesOfStr(_ s: String) -> [Int] {
        var bs: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((s).count))) {
            bs = ((bs + [Int(ord(String(String(Array(s)[i..<(i + 1)]))))]) as! [Int])
            i = Int((i + 1))
        }
        return (bs as! [Int])
    }
    func bytesToDec(_ bs: [Int]) -> String {
        var out: String = ""
        var i: Int = 0
        while (i < Int(((bs).count))) {
            out = String((out + _p((bs[i] as! Int))))
            if ((i + 1) < Int(((bs).count))) {
                out = String((out + " "))
            }
            i = Int((i + 1))
        }
        return String(out)
    }
    func Example() {
        let message = "This is a test."
        let msgBytes = (bytesOfStr(String(message)) as! [Int])
        print(_p(((("\"" + message) + "\" as bytes: ") + String(describing: bytesToDec((msgBytes as! [Int]))))))
        print(_p(("    original bits: " + String(describing: bytesToBits((msgBytes as! [Int]))))))
        var bw: Writer = NewWriter("MSB")
        var i: Int = 0
        while (i < Int(((msgBytes).count))) {
            bw = (WriteBits(&bw, (msgBytes[i] as! Int), 7) as! Writer)
            i = Int((i + 1))
        }
        bw = (CloseWriter(&bw) as! Writer)
        print(_p(("Written bitstream: " + String(describing: bytesToBits((bw.data as! [Int]))))))
        print(_p(("Written bytes: " + String(describing: bytesToHex((bw.data as! [Int]))))))
        var br: Reader = NewReader((bw.data as! [Int]), "MSB")
        var result: String = ""
        while true {
            let r = (ReadBits(&br, 7) as! [String: Any])
            if (r["eof"]! as! Bool) {
                break
            }
            let v = (r["val"]! as! Int)
            if (v != 0) {
                result = String((result + String(describing: chr(Int(v)))))
            }
        }
        print(_p((("Read back as \"" + result) + "\"")))
    }
    _ = Example()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
