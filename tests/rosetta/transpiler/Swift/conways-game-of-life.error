exit status 1
/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:174:24: error: invalid escape sequence in literal
172 |         while (i < 300) {
173 |             _ = step(&l)
174 |             print(_p("\f"))
    |                        `- error: invalid escape sequence in literal
175 |             print(_p(String(describing: lifeString((l as! Life)))))
176 |             i = Int((i &+ 1))

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:95:36: warning: forced cast of '[Bool]' to same type has no effect
 93 |     func setCell(_ f: inout Field, _ x: Int, _ y: Int, _ b: Bool) {
 94 |         var rows: [[Bool]] = f.s
 95 |         var row: [Bool] = (rows[y] as! [Bool])
    |                                    `- warning: forced cast of '[Bool]' to same type has no effect
 96 |         row[x] = (b as! Bool)
 97 |         rows[y] = (row as! [Bool])

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:96:21: warning: forced cast of 'Bool' to same type has no effect
 94 |         var rows: [[Bool]] = f.s
 95 |         var row: [Bool] = (rows[y] as! [Bool])
 96 |         row[x] = (b as! Bool)
    |                     `- warning: forced cast of 'Bool' to same type has no effect
 97 |         rows[y] = (row as! [Bool])
 98 |         f.s = (rows as! [[Bool]])

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:97:24: warning: forced cast of '[Bool]' to same type has no effect
 95 |         var row: [Bool] = (rows[y] as! [Bool])
 96 |         row[x] = (b as! Bool)
 97 |         rows[y] = (row as! [Bool])
    |                        `- warning: forced cast of '[Bool]' to same type has no effect
 98 |         f.s = (rows as! [[Bool]])
 99 |     }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:98:21: warning: forced cast of '[[Bool]]' to same type has no effect
 96 |         row[x] = (b as! Bool)
 97 |         rows[y] = (row as! [Bool])
 98 |         f.s = (rows as! [[Bool]])
    |                     `- warning: forced cast of '[[Bool]]' to same type has no effect
 99 |     }
100 |     func state(_ f: Field, _ x: Int, _ y: Int) -> Bool {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:109:43: warning: forced cast of 'Bool' to same type has no effect
107 |             x = Int((x &+ f.w))
108 |         }
109 |         return (f.s[(y % f.h)][(x % f.w)] as! Bool)
    |                                           `- warning: forced cast of 'Bool' to same type has no effect
110 |     }
111 |     func nextState(_ f: Field, _ x: Int, _ y: Int) -> Bool {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:119:61: warning: forced cast of 'Field' to same type has no effect
117 |             var dx: Int = -1
118 |             while (dx <= 1) {
119 |                 if ((!((dx == 0) && (dy == 0))) && state((f as! Field), Int((x &+ dx)), Int((y &+ dy)))) {
    |                                                             `- warning: forced cast of 'Field' to same type has no effect
120 |                     count = Int((count &+ 1))
121 |                 }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:126:59: warning: forced cast of 'Field' to same type has no effect
124 |             dy = Int((dy &+ 1))
125 |         }
126 |         return ((count == 3) || ((count == 2) && state((f as! Field), (x as! Int), (y as! Int))))
    |                                                           `- warning: forced cast of 'Field' to same type has no effect
127 |     }
128 |     func newLife(_ w: Int, _ h: Int) -> Life {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:126:74: warning: forced cast of 'Int' to same type has no effect
124 |             dy = Int((dy &+ 1))
125 |         }
126 |         return ((count == 3) || ((count == 2) && state((f as! Field), (x as! Int), (y as! Int))))
    |                                                                          `- warning: forced cast of 'Int' to same type has no effect
127 |     }
128 |     func newLife(_ w: Int, _ h: Int) -> Life {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:126:87: warning: forced cast of 'Int' to same type has no effect
124 |             dy = Int((dy &+ 1))
125 |         }
126 |         return ((count == 3) || ((count == 2) && state((f as! Field), (x as! Int), (y as! Int))))
    |                                                                                       `- warning: forced cast of 'Int' to same type has no effect
127 |     }
128 |     func newLife(_ w: Int, _ h: Int) -> Life {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:129:36: warning: forced cast of 'Int' to same type has no effect
127 |     }
128 |     func newLife(_ w: Int, _ h: Int) -> Life {
129 |         var a: Field = newField((w as! Int), (h as! Int))
    |                                    `- warning: forced cast of 'Int' to same type has no effect
130 |         var i: Int = 0
131 |         while (i < Int(((w &* h) / 2))) {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:129:49: warning: forced cast of 'Int' to same type has no effect
127 |     }
128 |     func newLife(_ w: Int, _ h: Int) -> Life {
129 |         var a: Field = newField((w as! Int), (h as! Int))
    |                                                 `- warning: forced cast of 'Int' to same type has no effect
130 |         var i: Int = 0
131 |         while (i < Int(((w &* h) / 2))) {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:132:42: warning: forced cast of 'Int' to same type has no effect
130 |         var i: Int = 0
131 |         while (i < Int(((w &* h) / 2))) {
132 |             _ = setCell(&a, Int(randN((w as! Int))), Int(randN((h as! Int))), true)
    |                                          `- warning: forced cast of 'Int' to same type has no effect
133 |             i = Int((i &+ 1))
134 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:132:67: warning: forced cast of 'Int' to same type has no effect
130 |         var i: Int = 0
131 |         while (i < Int(((w &* h) / 2))) {
132 |             _ = setCell(&a, Int(randN((w as! Int))), Int(randN((h as! Int))), true)
    |                                                                   `- warning: forced cast of 'Int' to same type has no effect
133 |             i = Int((i &+ 1))
134 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:132:13: warning: using '_' to ignore the result of a Void-returning function is redundant
130 |         var i: Int = 0
131 |         while (i < Int(((w &* h) / 2))) {
132 |             _ = setCell(&a, Int(randN((w as! Int))), Int(randN((h as! Int))), true)
    |             `- warning: using '_' to ignore the result of a Void-returning function is redundant
133 |             i = Int((i &+ 1))
134 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:135:42: warning: forced cast of 'Int' to same type has no effect
133 |             i = Int((i &+ 1))
134 |         }
135 |         return Life(a: a, b: newField((w as! Int), (h as! Int)), w: w, h: h)
    |                                          `- warning: forced cast of 'Int' to same type has no effect
136 |     }
137 |     func step(_ l: inout Life) {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:135:55: warning: forced cast of 'Int' to same type has no effect
133 |             i = Int((i &+ 1))
134 |         }
135 |         return Life(a: a, b: newField((w as! Int), (h as! Int)), w: w, h: h)
    |                                                       `- warning: forced cast of 'Int' to same type has no effect
136 |     }
137 |     func step(_ l: inout Life) {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:38: warning: forced cast of 'Int' to same type has no effect
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                                      `- warning: forced cast of 'Int' to same type has no effect
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:51: warning: forced cast of 'Int' to same type has no effect
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                                                   `- warning: forced cast of 'Int' to same type has no effect
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:76: warning: forced cast of 'Field' to same type has no effect
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                                                                            `- warning: forced cast of 'Field' to same type has no effect
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:91: warning: forced cast of 'Int' to same type has no effect
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                                                                                           `- warning: forced cast of 'Int' to same type has no effect
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:104: warning: forced cast of 'Int' to same type has no effect
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                                                                                                        `- warning: forced cast of 'Int' to same type has no effect
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:142:17: warning: using '_' to ignore the result of a Void-returning function is redundant
140 |             var x: Int = 0
141 |             while (x < l.w) {
142 |                 _ = setCell(&l.b, (x as! Int), (y as! Int), nextState((l.a as! Field), (x as! Int), (y as! Int)))
    |                 `- warning: using '_' to ignore the result of a Void-returning function is redundant
143 |                 x = Int((x &+ 1))
144 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:148:20: warning: forced cast of 'Field' to same type has no effect
146 |         }
147 |         var tmp: Field = l.a
148 |         l.a = (l.b as! Field)
    |                    `- warning: forced cast of 'Field' to same type has no effect
149 |         l.b = (tmp as! Field)
150 |     }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:149:20: warning: forced cast of 'Field' to same type has no effect
147 |         var tmp: Field = l.a
148 |         l.a = (l.b as! Field)
149 |         l.b = (tmp as! Field)
    |                    `- warning: forced cast of 'Field' to same type has no effect
150 |     }
151 |     func lifeString(_ l: Life) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:157:31: warning: forced cast of 'Field' to same type has no effect
155 |             var x: Int = 0
156 |             while (x < l.w) {
157 |                 if state((l.a as! Field), (x as! Int), (y as! Int)) {
    |                               `- warning: forced cast of 'Field' to same type has no effect
158 |                     out = ((out + "*") as! String)
159 |                 } else {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:157:46: warning: forced cast of 'Int' to same type has no effect
155 |             var x: Int = 0
156 |             while (x < l.w) {
157 |                 if state((l.a as! Field), (x as! Int), (y as! Int)) {
    |                                              `- warning: forced cast of 'Int' to same type has no effect
158 |                     out = ((out + "*") as! String)
159 |                 } else {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:157:59: warning: forced cast of 'Int' to same type has no effect
155 |             var x: Int = 0
156 |             while (x < l.w) {
157 |                 if state((l.a as! Field), (x as! Int), (y as! Int)) {
    |                                                           `- warning: forced cast of 'Int' to same type has no effect
158 |                     out = ((out + "*") as! String)
159 |                 } else {

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:158:40: warning: forced cast of 'String' to same type has no effect
156 |             while (x < l.w) {
157 |                 if state((l.a as! Field), (x as! Int), (y as! Int)) {
158 |                     out = ((out + "*") as! String)
    |                                        `- warning: forced cast of 'String' to same type has no effect
159 |                 } else {
160 |                     out = ((out + " ") as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:160:40: warning: forced cast of 'String' to same type has no effect
158 |                     out = ((out + "*") as! String)
159 |                 } else {
160 |                     out = ((out + " ") as! String)
    |                                        `- warning: forced cast of 'String' to same type has no effect
161 |                 }
162 |                 x = Int((x &+ 1))

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:164:33: warning: forced cast of 'String' to same type has no effect
162 |                 x = Int((x &+ 1))
163 |             }
164 |             out = ((out + "\n") as! String)
    |                                 `- warning: forced cast of 'String' to same type has no effect
165 |             y = Int((y &+ 1))
166 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:173:13: warning: using '_' to ignore the result of a Void-returning function is redundant
171 |         var i: Int = 0
172 |         while (i < 300) {
173 |             _ = step(&l)
    |             `- warning: using '_' to ignore the result of a Void-returning function is redundant
174 |             print(_p("\f"))
175 |             print(_p(String(describing: lifeString((l as! Life)))))

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:174:26: error: missing argument for parameter #1 in call
 11 | }
 12 | 
 13 | func _p(_ v: Any?) -> String {
    |      `- note: '_p' declared here
 14 |     if let val = v {
 15 |         if let d = val as? Double {
    :
172 |         while (i < 300) {
173 |             _ = step(&l)
174 |             print(_p("\f"))
    |                          `- error: missing argument for parameter #1 in call
175 |             print(_p(String(describing: lifeString((l as! Life)))))
176 |             i = Int((i &+ 1))

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:175:55: warning: forced cast of 'Life' to same type has no effect
173 |             _ = step(&l)
174 |             print(_p("\f"))
175 |             print(_p(String(describing: lifeString((l as! Life)))))
    |                                                       `- warning: forced cast of 'Life' to same type has no effect
176 |             i = Int((i &+ 1))
177 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden603721494/001/main.swift:179:5: warning: using '_' to ignore the result of a Void-returning function is redundant
177 |         }
178 |     }
179 |     _ = main()
    |     `- warning: using '_' to ignore the result of a Void-returning function is redundant
180 |     let _benchEnd = _now()
181 |     let _benchMemEnd = _mem()
