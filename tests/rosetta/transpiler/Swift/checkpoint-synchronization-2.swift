// Generated by Mochi transpiler v0.10.50 on 2025-07-31 07:58:48 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func lower(_ ch: String) -> String {
    let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower = "abcdefghijklmnopqrstuvwxyz"
    var i: Int = 0
    while (i < Int(((upper).count))) {
        if (ch == String(describing: String(Array(String(describing: (upper as! String)))[(i as! Int)..<((i + 1) as! Int)]))) {
            return String(describing: String(Array(String(describing: (lower as! String)))[(i as! Int)..<((i + 1) as! Int)]))
        }
        i = ((i + 1) as! Int)
    }
    return (ch as! String)
}
var partList: [String] = (["A", "B", "C", "D"] as! [String])
var nAssemblies: Int = 3
for cycle in 1..<Int((nAssemblies + 1)) {
    print(_p(("begin assembly cycle " + _p(cycle))))
    var a: String = ""
    for p in partList {
        print(_p((p + " worker begins part")))
        print(_p(((p + " worker completed ") + String(describing: ((p as! String).lowercased())))))
        a = ((a + String(describing: ((p as! String).lowercased()))) as! String)
    }
    print(_p((((a + " assembled.  cycle ") + _p(cycle)) + " complete")))
}
