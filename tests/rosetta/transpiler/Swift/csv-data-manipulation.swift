// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:14:01 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var res: String = ""
    var i: Int = 0
    while (i < Int(((xs).count))) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + (xs[i] as! String)) as! String)
        i = Int((i &+ 1))
    }
    return res
}
func parseIntStr(_ str: String) -> Int {
    var i: Int = 0
    var neg: Bool = false
    if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
        neg = true
        i = 1
    }
    var n: Int = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while (i < Int(((str).count))) {
        n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
        i = Int((i &+ 1))
    }
    if neg {
        n = Int(-n)
    }
    return n
}
var rows: [[String]] = ([(["A", "B", "C"] as! [String]), (["1", "2", "3"] as! [String]), (["4", "5", "6"] as! [String]), (["7", "8", "9"] as! [String])] as! [[String]])
rows[0] = (_append((rows[0] as! [String]), "SUM") as! [String])
var i: Int = 1
while (i < Int(((rows).count))) {
    var sum: Int = 0
    for s in (rows[i] as! [String]) {
        sum = Int((sum &+ Int(Int(String(describing: (s as! String)))!)))
    }
    rows[i] = (_append((rows[i] as! [String]), String(describing: sum)) as! [String])
    i = Int((i &+ 1))
}
for r in rows {
    print(_p(String(describing: join((r as! [String]), ","))))
}
