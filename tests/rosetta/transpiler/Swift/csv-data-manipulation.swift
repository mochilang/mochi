// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:35:44 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func join(_ xs: [String], _ sep: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = String(describing: (res + sep))
            }
            res = String(describing: (res + String(describing: xs[i])))
            i = Int((i + 1))
        }
        return String(describing: res)
    }
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n * 10) + (digits[String(Array(str)[i..<(i + 1)])] as! Any)))
            i = Int((i + 1))
        }
        if neg {
            n = Int(-n)
        }
        return Int(n)
    }
    var rows: [[String]] = ([(["A", "B", "C"] as! [String]), (["1", "2", "3"] as! [String]), (["4", "5", "6"] as! [String]), (["7", "8", "9"] as! [String])] as! [[String]])
    rows[0] = (_append((rows[0] as! [String]), "SUM") as! [String])
    var i: Int = 1
    while (i < Int(((rows).count))) {
        var sum: Int = 0
        for s in (rows[i] as! [String]) {
            sum = Int((sum + Int(Int(String(describing: String(describing: s)))!)))
        }
        rows[i] = (_append((rows[i] as! [String]), _p(sum)) as! [String])
        i = Int((i + 1))
    }
    for r in rows {
        print(_p(String(describing: join((r as! [String]), ","))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
