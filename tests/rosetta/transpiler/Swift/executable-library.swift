// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:38 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func hailstone(_ n: Int) -> [Int] {
        var seq: [Int] = ([] as! [Int])
        var x: Int = n
        seq = (_append(seq, x) as! [Int])
        while (x > 1) {
            if ((x % 2) == 0) {
                x = Int((x / 2))
            } else {
                x = Int(((3 * x) + 1))
            }
            seq = (_append(seq, x) as! [Int])
        }
        return (seq as! [Int])
    }
    func listString(_ xs: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = String(describing: (s + _p((xs[i] as! Int))))
            if (i < (Int(((xs).count)) - 1)) {
                s = String(describing: (s + " "))
            }
            i = Int((i + 1))
        }
        s = String(describing: (s + "]"))
        return String(describing: s)
    }
    func libMain() {
        let seq = (hailstone(27) as! [Int])
        print(_p(""))
        print(_p("Hailstone sequence for the number 27:"))
        print(_p((("  has " + _p(Int(((seq).count)))) + " elements")))
        print(_p(("  starts with " + String(describing: listString((Array(seq[0..<4]) as! [Int]))))))
        print(_p(("  ends with " + String(describing: listString((Array(seq[(Int(((seq).count)) - 4)..<Int(((seq).count))]) as! [Int]))))))
        var longest: Int = 0
        var length: Int = 0
        var i: Int = 1
        while (i < 100000) {
            let l = Int((((hailstone(Int(i)) as! [Int])).count))
            if (l > length) {
                longest = Int(i)
                length = Int(l)
            }
            i = Int((i + 1))
        }
        print(_p(""))
        print(_p((((_p(longest) + " has the longest Hailstone sequence, its length being ") + _p(length)) + ".")))
    }
    _ = libMain()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
