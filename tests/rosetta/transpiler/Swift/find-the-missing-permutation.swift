// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:08 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var given: [String] = (["ABCD", "CABD", "ACDB", "DACB", "BCDA", "ACBD", "ADCB", "CDAB", "DABC", "BCAD", "CADB", "CDBA", "CBAD", "ABDC", "ADBC", "BDCA", "DCBA", "BACD", "BADC", "BDAC", "CBDA", "DBCA", "DCAB"] as! [String])
    func idx(_ ch: String) -> Int {
        if (ch == "A") {
            return 0
        }
        if (ch == "B") {
            return 1
        }
        if (ch == "C") {
            return 2
        }
        return 3
    }
    func main() {
        var res: String = ""
        var i: Int = 0
        while (i < Int((((given[0] as! String)).count))) {
            var counts: [Int] = ([0, 0, 0, 0] as! [Int])
            for p in given {
                let ch = String(describing: String(Array(String(describing: (p as! String)))[(i as! Int)..<((i + 1) as! Int)]))
                let j = Int(idx((ch as! String)))
                counts[j] = (((counts[j] as! Int) + 1) as! Int)
            }
            var j: Int = 0
            while (j < 4) {
                if (((counts[j] as! Int) % 2) == 1) {
                    if (j == 0) {
                        res = ((res + "A") as! String)
                    } else if (j == 1) {
                        res = ((res + "B") as! String)
                    } else if (j == 2) {
                        res = ((res + "C") as! String)
                    } else {
                        res = ((res + "D") as! String)
                    }
                    
                    
                }
                j = ((j + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        print(_p(res))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
