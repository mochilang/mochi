// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:42 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ n: Int) -> Int {
        var p: Int = 1
        var i: Int = 0
        while (i < n) {
            p = Int((p * 2))
            i = Int((i + 1))
        }
        return Int(p)
    }
    func btoi(_ b: Bool) -> Int {
        if b {
            return 1
        }
        return 0
    }
    func addNoCells(_ cells: String) -> String {
        var cells = cells
        var l: String = "O"
        var r: String = "O"
        if (String(describing: String(Array(String(describing: String(describing: cells)))[0..<1])) == "O") {
            l = "."
        }
        if (String(describing: String(Array(String(describing: String(describing: cells)))[Int((Int(((cells).count)) - 1))..<Int(((cells).count))])) == "O") {
            r = "."
        }
        cells = String(describing: ((l + cells) + r))
        cells = String(describing: ((l + cells) + r))
        return String(describing: cells)
    }
    func step(_ cells: String, _ ruleVal: Int) -> String {
        var newCells: String = ""
        var i: Int = 0
        while (i < (Int(((cells).count)) - 2)) {
            var bin: Int = 0
            var b: Int = 2
            var n: Int = i
            while (n < (i + 3)) {
                bin = Int((bin + (Int(btoi((String(describing: String(Array(String(describing: String(describing: cells)))[Int(n)..<Int((n + 1))])) == "O"))) * Int(pow2(Int(b))))))
                b = Int((b - 1))
                n = Int((n + 1))
            }
            var a: String = "."
            if ((Int((ruleVal / Int(pow2(Int(bin))))) % 2) == 1) {
                a = "O"
            }
            newCells = String(describing: (newCells + a))
            i = Int((i + 1))
        }
        return String(describing: newCells)
    }
    func `repeat`(_ ch: String, _ n: Int) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < n) {
            s = String(describing: (s + ch))
            i = Int((i + 1))
        }
        return String(describing: s)
    }
    func evolve(_ l: Int, _ ruleVal: Int) {
        print(_p(((" Rule #" + _p(ruleVal)) + ":")))
        var cells: String = "O"
        var x: Int = 0
        while (x < l) {
            cells = String(describing: addNoCells(String(describing: cells)))
            var width: Int = (40 + Int((Int(((cells).count)) / 2)))
            var spaces: String = String(describing: `repeat`(" ", Int((width - Int(((cells).count))))))
            print(_p((spaces + cells)))
            cells = String(describing: step(String(describing: cells), Int(ruleVal)))
            x = Int((x + 1))
        }
    }
    func main() {
        for r in ([90, 30] as! [Int]) {
            _ = evolve(25, Int(r))
            print(_p(""))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
