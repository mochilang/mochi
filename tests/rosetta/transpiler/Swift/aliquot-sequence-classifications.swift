// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:15:03 GMT+7
import Foundation

let THRESHOLD = 140737488355328
func indexOf(_ xs: [Int], _ value: Int) -> Int {
    var i = 0
    while (i < Int(((xs).count))) {
        if (Int(xs[i]) == value) {
            return (i as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return ((0 - 1) as! Int)
}
func contains(_ xs: [Int], _ value: Int) -> Bool {
    return ((Int(indexOf((xs as! [Int]), (value as! Int))) != (0 - 1)) as! Bool)
}
func maxOf(_ a: Int, _ b: Int) -> Int {
    if (a > b) {
        return (a as! Int)
    } else {
        return (b as! Int)
    }
}
func intSqrt(_ n: Int) -> Int {
    if (n == 0) {
        return 0
    }
    var x = (n as! Int)
    var y = ((Int((x + 1)) / 2) as! Int)
    while (y < x) {
        x = (y as! Int)
        y = ((Int((x + (n / x))) / 2) as! Int)
    }
    return (x as! Int)
}
func sumProperDivisors(_ n: Int) -> Int {
    if (n < 2) {
        return 0
    }
    let sqrt = Int(intSqrt((n as! Int)))
    var sum = 1
    var i = 2
    while (i <= sqrt) {
        if ((n % i) == 0) {
            sum = (((sum + i) + (n / i)) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    if ((sqrt * sqrt) == n) {
        sum = ((sum - sqrt) as! Int)
    }
    return (sum as! Int)
}
func classifySequence(_ k: Int) -> [String: Any] {
    var last = (k as! Int)
    var seq: [Int] = ([k] as! [Int])
    while true {
        last = Int(sumProperDivisors((last as! Int)))
        seq = ((seq + [last]) as! [Int])
        let n = Int(((seq).count))
        var aliquot = ""
        if (last == 0) {
            aliquot = "Terminating"
        } else if ((n == 2) && (last == k)) {
            aliquot = "Perfect"
        } else if ((n == 3) && (last == k)) {
            aliquot = "Amicable"
        } else if ((n >= 4) && (last == k)) {
            aliquot = ((("Sociable[" + String(describing: (n - 1))) + "]") as! String)
        } else if (last == Int(seq[(n - 2)])) {
            aliquot = "Aspiring"
        } else if Bool(contains((Array(seq[1..<Int(maxOf(1, ((n - 2) as! Int)))]) as! [Int]), (last as! Int))) {
            let idx = Int(indexOf((seq as! [Int]), (last as! Int)))
            aliquot = ((("Cyclic[" + String(describing: ((n - 1) - idx))) + "]") as! String)
        } else if ((n == 16) || (last > THRESHOLD)) {
            aliquot = "Non-Terminating"
        }
        
        
        
        
        
        
        if (aliquot != "") {
            return (["seq": seq, "aliquot": aliquot] as [String: Any] as! [String: Any])
        }
    }
    return (["seq": seq, "aliquot": ""] as [String: Any] as! [String: Any])
}
func padLeft(_ n: Int, _ w: Int) -> String {
    var s = String(String(describing: n))!
    while (Int(((s).count)) < w) {
        s = ((" " + s) as! String)
    }
    return (s as! String)
}
func padRight(_ s: String, _ w: Int) -> String {
    var r = (s as! String)
    while (Int(((r).count)) < w) {
        r = ((r + " ") as! String)
    }
    return (r as! String)
}
func joinWithCommas(_ seq: [Int]) -> String {
    var s = "["
    var i = 0
    while (i < Int(((seq).count))) {
        s = ((s + String(describing: Int(seq[i]))) as! String)
        if (i < (Int(((seq).count)) - 1)) {
            s = ((s + ", ") as! String)
        }
        i = ((i + 1) as! Int)
    }
    s = ((s + "]") as! String)
    return (s as! String)
}
func main() {
    print("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
    var k = 1
    while (k <= 10) {
        let res = (classifySequence((k as! Int)) as! [String: Any])
        print(((((String(describing: padLeft((k as! Int), 2)) + ": ") + String(describing: padRight(String(describing: (res as! [String: Any])["aliquot"]!), 15))) + " ") + String(describing: joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
        k = ((k + 1) as! Int)
    }
    print("")
    let s = ([11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488] as! [Int])
    var i = 0
    while (i < Int(((s).count))) {
        let val = Int(s[i])
        let res = (classifySequence((val as! Int)) as! [String: Any])
        print(((((String(describing: padLeft((val as! Int), 7)) + ": ") + String(describing: padRight(String(describing: (res as! [String: Any])["aliquot"]!), 15))) + " ") + String(describing: joinWithCommas(((res as! [String: Any])["seq"]! as! [Int])))))
        i = ((i + 1) as! Int)
    }
    print("")
    let big = 15355717786080
    let r = (classifySequence((big as! Int)) as! [String: Any])
    print(((((String(describing: big) + ": ") + String(describing: padRight(String(describing: (r as! [String: Any])["aliquot"]!), 15))) + " ") + String(describing: joinWithCommas(((r as! [String: Any])["seq"]! as! [Int])))))
}
_ = main()
