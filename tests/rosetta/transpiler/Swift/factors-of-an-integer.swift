// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:43:01 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func printFactors(_ n: Int) {
        if (n < 1) {
            print(_p((("\nFactors of " + _p(n)) + " not computed")))
            return
        }
        print(_p((("\nFactors of " + _p(n)) + ": ")))
        var fs: [Int] = ([1] as! [Int])
        func apf(_ p: Int, _ e: Int) {
            var orig: Int = Int(((fs).count))
            var pp: Int = p
            var i: Int = 0
            while (i < e) {
                var j: Int = 0
                while (j < orig) {
                    fs = (_append(fs, ((fs[j] as! Int) * pp)) as! [Int])
                    j = Int((j + 1))
                }
                i = Int((i + 1))
                pp = Int((pp * p))
            }
        }
        var e: Int = 0
        var m: Int = n
        while ((m % 2) == 0) {
            m = Int((m / 2))
            e = Int((e + 1))
        }
        _ = apf(2, Int(e))
        var d: Int = 3
        while (m > 1) {
            if ((d * d) > m) {
                d = Int(m)
            }
            e = 0
            while ((m % d) == 0) {
                m = Int((m / d))
                e = Int((e + 1))
            }
            if (e > 0) {
                _ = apf(Int(d), Int(e))
            }
            d = Int((d + 2))
        }
        print(_p(_p(fs)))
        print(_p(("Number of factors = " + _p(Int(((fs).count))))))
    }
    _ = printFactors(Int(-1))
    _ = printFactors(0)
    _ = printFactors(1)
    _ = printFactors(2)
    _ = printFactors(3)
    _ = printFactors(53)
    _ = printFactors(45)
    _ = printFactors(64)
    _ = printFactors(600851475143)
    _ = printFactors(999999999999999989)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
