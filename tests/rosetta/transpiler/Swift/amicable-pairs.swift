// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:49 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pfacSum(_ i: Int) -> Int {
        var sum = 0
        var p = 1
        while (p <= (i / 2)) {
            if ((i % p) == 0) {
                sum = Int((sum + p))
            }
            p = Int((p + 1))
        }
        return Int(sum)
    }
    func pad(_ n: Int, _ width: Int) -> String {
        var s = String(describing: n)
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func main() {
        var sums: [Int] = ([] as! [Int])
        var i = 0
        while (i < 20000) {
            sums = ((sums + [0]) as! [Int])
            i = Int((i + 1))
        }
        i = 1
        while (i < 20000) {
            sums[i] = Int(pfacSum(Int(i)))
            i = Int((i + 1))
        }
        print("The amicable pairs below 20,000 are:")
        var n = 2
        while (n < 19999) {
            let m = Int(sums[n])
            if (((m > n) && (m < 20000)) && (n == Int(sums[m]))) {
                print(((("  " + String(describing: pad(Int(n), 5))) + " and ") + String(describing: pad(Int(m), 5))))
            }
            n = Int((n + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
