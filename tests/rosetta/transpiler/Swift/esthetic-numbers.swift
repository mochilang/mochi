// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:24 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let digits = "0123456789abcdef"
    func toBase(_ n: Int, _ b: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var v: Int = n
        var out: String = ""
        while (v > 0) {
            let d = (v % b)
            out = String(describing: (String(Array(digits)[d..<(d + 1)]) + out))
            v = Int((v / b))
        }
        return String(describing: out)
    }
    func uabs(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return Int((a - b))
        }
        return Int((b - a))
    }
    func isEsthetic(_ n: Int, _ b: Int) -> Bool {
        var n = n
        if (n == 0) {
            return false
        }
        var i: Int = (n % b)
        n = Int((n / b))
        while (n > 0) {
            let j = (n % b)
            if (Int(uabs(Int(i), Int(j))) != 1) {
                return false
            }
            n = Int((n / b))
            i = Int(j)
        }
        return true
    }
    var esths: [Int] = ([] as! [Int])
    func dfs(_ n: Int, _ m: Int, _ i: Int) {
        if ((i >= n) && (i <= m)) {
            esths = (_append(esths, i) as! [Int])
        }
        if ((i == 0) || (i > m)) {
            return
        }
        let d = (i % 10)
        let i1 = (((i * 10) + d) - 1)
        let i2 = (i1 + 2)
        if (d == 0) {
            _ = dfs(Int(n), Int(m), Int(i2))
        } else if (d == 9) {
            _ = dfs(Int(n), Int(m), Int(i1))
        } else {
            _ = dfs(Int(n), Int(m), Int(i1))
            _ = dfs(Int(n), Int(m), Int(i2))
        }
        
    }
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var i: Int = (Int(((s).count)) - 3)
        while (i >= 1) {
            s = String(describing: ((String(Array(s)[0..<i]) + ",") + String(Array(s)[i..<Int(((s).count))])))
            i = Int((i - 3))
        }
        return String(describing: s)
    }
    func listEsths(_ n: Int, _ n2: Int, _ m: Int, _ m2: Int, _ perLine: Int, _ showAll: Bool) {
        esths = ([] as! [Int])
        var i: Int = 0
        while (i < 10) {
            _ = dfs(Int(n2), Int(m2), Int(i))
            i = Int((i + 1))
        }
        let le = Int(((esths).count))
        print(_p((((((("Base 10: " + String(describing: commatize(Int(le)))) + " esthetic numbers between ") + String(describing: commatize(Int(n)))) + " and ") + String(describing: commatize(Int(m)))) + ":")))
        if showAll {
            var c: Int = 0
            var line: String = ""
            for v in esths {
                if (Int(((line).count)) > 0) {
                    line = String(describing: (line + " "))
                }
                line = String(describing: (line + _p(v)))
                c = Int((c + 1))
                if ((c % perLine) == 0) {
                    print(_p(line))
                    line = ""
                }
            }
            if (Int(((line).count)) > 0) {
                print(_p(line))
            }
        } else {
            var line: String = ""
            var idx: Int = 0
            while (idx < perLine) {
                if (Int(((line).count)) > 0) {
                    line = String(describing: (line + " "))
                }
                line = String(describing: (line + _p((esths[idx] as! Int))))
                idx = Int((idx + 1))
            }
            print(_p(line))
            print(_p("............"))
            line = ""
            idx = Int((le - perLine))
            while (idx < le) {
                if (Int(((line).count)) > 0) {
                    line = String(describing: (line + " "))
                }
                line = String(describing: (line + _p((esths[idx] as! Int))))
                idx = Int((idx + 1))
            }
            print(_p(line))
        }
        print(_p(""))
    }
    func main() {
        var b: Int = 2
        while (b <= 16) {
            let start = (4 * b)
            let stop = (6 * b)
            print(_p((((((("Base " + _p(b)) + ": ") + _p(start)) + "th to ") + _p(stop)) + "th esthetic numbers:")))
            var n: Int = 1
            var c: Int = 0
            var line: String = ""
            while (c < stop) {
                if isEsthetic(Int(n), Int(b)) {
                    c = Int((c + 1))
                    if (c >= start) {
                        if (Int(((line).count)) > 0) {
                            line = String(describing: (line + " "))
                        }
                        line = String(describing: (line + String(describing: toBase(Int(n), Int(b)))))
                    }
                }
                n = Int((n + 1))
            }
            print(_p(line))
            print(_p(""))
            b = Int((b + 1))
        }
        _ = listEsths(1000, 1010, 9999, 9898, 16, true)
        _ = listEsths(100000000, 101010101, 130000000, 123456789, 9, true)
        _ = listEsths(100000000000, 101010101010, 130000000000, 123456789898, 7, false)
        _ = listEsths(100000000000000, 101010101010101, 130000000000000, 123456789898989, 5, false)
        _ = listEsths(100000000000000000, 101010101010101010, 130000000000000000, 123456789898989898, 4, false)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
