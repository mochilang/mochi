// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:22:23 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct testpkg {
    static func Add(_ a: Int, _ b: Int) -> Int { return a + b }
    static let Pi = 3.14
    static let Answer = 42
    static func FifteenPuzzleExample() -> String { return "Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd" }
    static func ECDSAExample() -> (D: Any?, X: Any?, Y: Any?, Hash: Any?, R: Any?, S: Any?, Valid: Any?) { return (nil, nil, nil, nil, nil, nil, nil) }
}
for pair in ([(["d41d8cd98f00b204e9800998ecf8427e", ""] as! [String]), (["0cc175b9c0f1b6a831c399e269772661", "a"] as! [String]), (["900150983cd24fb0d6963f7d28e17f72", "abc"] as! [String]), (["f96b697d7cb7938d525a2f31aaf161d0", "message digest"] as! [String]), (["c3fcd3d76192e4007dfb496cca67e13b", "abcdefghijklmnopqrstuvwxyz"] as! [String]), (["d174ab98d277d9f5a5611c2c9f419d9f", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"] as! [String]), (["57edf4a22be3c955ac49da2e2107b67a", ("12345678901234567890" + "123456789012345678901234567890123456789012345678901234567890")] as! [String]), (["e38ca1d920c4b8b8d3946b2c72f01680", "The quick brown fox jumped over the lazy dog's back"] as! [String])] as! [[String]]) {
    let sum = testpkg.MD5Hex((pair[1] as! String))
    if (String(describing: sum) != (pair[0] as! String)) {
        print(_p("MD5 fail"))
        print(_p("  for string,"), _p((pair[1] as! String)))
        print(_p("  expected:  "), _p((pair[0] as! String)))
        print(_p("  got:       "), _p(sum))
    }
}
