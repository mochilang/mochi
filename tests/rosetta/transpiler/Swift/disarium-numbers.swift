// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:32:33 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow(_ base: Int, _ exp: Int) -> Int {
        var result: Int = 1
        var i: Int = 0
        while (i < exp) {
            result = Int((result * base))
            i = Int((i + 1))
        }
        return Int(result)
    }
    func isDisarium(_ n: Int) -> Bool {
        var digits: [Int] = ([] as! [Int])
        var x: Int = n
        if (x == 0) {
            digits = (_append(digits, 0) as! [Int])
        }
        while (x > 0) {
            digits = (_append(digits, (x % 10)) as! [Int])
            x = Int((x / 10))
        }
        var sum: Int = 0
        var pos: Int = 1
        var i: Int = (Int(((digits).count)) - 1)
        while (i >= 0) {
            sum = Int((sum + Int(pow((digits[i] as! Int), Int(pos)))))
            pos = Int((pos + 1))
            i = Int((i - 1))
        }
        return (sum == n)
    }
    func main() {
        var count: Int = 0
        var n: Int = 0
        while ((count < 19) && (n < 3000000)) {
            if isDisarium(Int(n)) {
                print(_p(_p(n)))
                count = Int((count + 1))
            }
            n = Int((n + 1))
        }
        print(_p((("\nFound the first " + _p(count)) + " Disarium numbers.")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
