// Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:32:42 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func pow(_ base: Int, _ exp: Int) -> Int {
    var result = 1
    var i = 0
    while (i < exp) {
        result = Int((result * base))
        i = Int((i + 1))
    }
    return Int(result)
}
func isDisarium(_ n: Int) -> Bool {
    var digits: [Int] = ([] as! [Int])
    var x = n
    if (x == 0) {
        digits = ((digits + [0]) as! [Int])
    }
    while (x > 0) {
        digits = ((digits + [(x % 10)]) as! [Int])
        x = Int((x / 10))
    }
    var sum = 0
    var pos = 1
    var i = (Int(((digits).count)) - 1)
    while (i >= 0) {
        sum = Int((sum + Int(pow((digits[i] as! Int), Int(pos)))))
        pos = Int((pos + 1))
        i = Int((i - 1))
    }
    return Bool((sum == n))
}
func main() {
    var count = 0
    var n = 0
    while ((count < 19) && (n < 30000000)) {
        if Bool(isDisarium(Int(n))) {
            print(_p(_p(n)))
            count = Int((count + 1))
        }
        n = Int((n + 1))
    }
    print(_p((("\nFound the first " + _p(count)) + " Disarium numbers.")))
}
_ = main()
