// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:57:17 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

func isPrime(_ n: Int) -> Bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    var d: Int = 3
    while ((d &* d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = Int((d &+ 2))
    }
    return true
}
let digits: [Int] = ([9, 8, 7, 6, 5, 4, 3, 2, 1] as! [Int])
func gen(_ idx: Int, _ cur: Int, _ used: Bool) -> [Int] {
    if (idx == Int(((digits).count))) {
        if (used && isPrime(Int(cur))) {
            return ([cur] as! [Int])
        }
        return ([] as! [Int])
    }
    let with: [Int] = (gen(Int((idx &+ 1)), Int(((cur &* 10) &+ Int(digits[idx]))), true) as! [Int])
    let without: [Int] = (gen(Int((idx &+ 1)), Int(cur), (used as! Bool)) as! [Int])
    return (with + without)
}
var primes: [Int] = (gen(0, 0, false) as! [Int])
func pad(_ n: Int, _ width: Int) -> String {
    var s: String = _p(n)
    while (Int(((s).count)) < width) {
        s = ((" " + s) as! String)
    }
    return s
}
print(_p((("There are " + _p(Int(((primes).count)))) + " descending primes, namely:")))
var i: Int = 0
var line: String = ""
while (i < Int(((primes).count))) {
    line = (((line + String(describing: pad(Int(primes[i]), 8))) + " ") as! String)
    if ((Int((i &+ 1)) % 10) == 0) {
        print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
        line = ""
    }
    i = Int((i &+ 1))
}
if (Int(((line).count)) > 0) {
    print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
}
