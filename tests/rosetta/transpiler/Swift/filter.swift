// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:09 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func randPerm(_ n: Int) -> [Int] {
        var arr: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < n) {
            arr = (_append(arr, i) as! [Int])
            i = ((i + 1) as! Int)
        }
        var idx: Int = (n - 1)
        while (idx > 0) {
            let j = (Int(_now()) % Int((idx + 1)))
            let tmp = (arr[idx] as! Int)
            arr[idx] = (arr[j] as! Int)
            arr[j] = (tmp as! Int)
            idx = ((idx - 1) as! Int)
        }
        return (arr as! [Int])
    }
    func even(_ xs: [Int]) -> [Int] {
        var r: [Int] = ([] as! [Int])
        for x in xs {
            if ((x % 2) == 0) {
                r = (_append(r, x) as! [Int])
            }
        }
        return (r as! [Int])
    }
    func reduceToEven(_ xs: [Int]) -> [Int] {
        var arr: [Int] = xs
        var last: Int = 0
        var i: Int = 0
        while (i < Int(((arr).count))) {
            let e = (arr[i] as! Int)
            if ((e % 2) == 0) {
                arr[last] = (e as! Int)
                last = ((last + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (Array(arr[0..<last]) as! [Int])
    }
    func listStr(_ xs: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = ((s + _p((xs[i] as! Int))) as! String)
            if ((i + 1) < Int(((xs).count))) {
                s = ((s + " ") as! String)
            }
            i = ((i + 1) as! Int)
        }
        s = ((s + "]") as! String)
        return (s as! String)
    }
    func main() {
        var a: [Int] = (randPerm(20) as! [Int])
        var cap_a: Int = 20
        print(_p(String(describing: listStr((a as! [Int])))))
        print(_p(String(describing: listStr((even((a as! [Int])) as! [Int])))))
        print(_p(String(describing: listStr((a as! [Int])))))
        a = (reduceToEven((a as! [Int])) as! [Int])
        print(_p(String(describing: listStr((a as! [Int])))))
        print(_p(((("a len: " + _p(Int(((a).count)))) + " cap: ") + _p(cap_a))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
