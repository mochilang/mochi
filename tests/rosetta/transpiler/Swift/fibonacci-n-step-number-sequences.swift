// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:22:34 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func show(_ xs: [Int]) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = ((s + _p((xs[i] as! Int))) as! String)
            if (i < (Int(((xs).count)) - 1)) {
                s = ((s + " ") as! String)
            }
            i = ((i + 1) as! Int)
        }
        return (s as! String)
    }
    func gen(_ `init`: [Int], _ n: Int) -> [Int] {
        var b: [Int] = `init`
        var res: [Int] = ([] as! [Int])
        var sum: Int = 0
        for x in b {
            res = (_append(res, x) as! [Int])
            sum = ((sum + x) as! Int)
        }
        while (Int(((res).count)) < n) {
            var next: Int = sum
            res = (_append(res, next) as! [Int])
            sum = (((sum + next) - (b[0] as! Int)) as! Int)
            b = ((_append(Array(b[1..<Int(((b).count))]), next) as! [Any]) as! [Int])
        }
        return (res as! [Int])
    }
    func main() {
        let n = 10
        print(_p((" Fibonacci: " + String(describing: show((gen(([1, 1] as! [Int]), (n as! Int)) as! [Int]))))))
        print(_p(("Tribonacci: " + String(describing: show((gen(([1, 1, 2] as! [Int]), (n as! Int)) as! [Int]))))))
        print(_p(("Tetranacci: " + String(describing: show((gen(([1, 1, 2, 4] as! [Int]), (n as! Int)) as! [Int]))))))
        print(_p(("     Lucas: " + String(describing: show((gen(([2, 1] as! [Int]), (n as! Int)) as! [Int]))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
