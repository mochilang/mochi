exit status 1
/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:87:1: warning: using '_' to ignore the result of a Void-returning function is redundant
85 |     _ = Int(abundantOdd(1000000001, 0, 1, true))
86 | }
87 | _ = main()
   | `- warning: using '_' to ignore the result of a Void-returning function is redundant
88 | 

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:16:22: warning: forced cast of 'Int' to same type has no effect
14 |             }
15 |         }
16 |         i = ((i + 1) as! Int)
   |                      `- warning: forced cast of 'Int' to same type has no effect
17 |     }
18 |     var j = ((Int(((divs2).count)) - 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:18:41: warning: forced cast of 'Int' to same type has no effect
16 |         i = ((i + 1) as! Int)
17 |     }
18 |     var j = ((Int(((divs2).count)) - 1) as! Int)
   |                                         `- warning: forced cast of 'Int' to same type has no effect
19 |     while (j >= 0) {
20 |         divs = ((divs + [Int(divs2[j])]) as! [Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:21:22: warning: forced cast of 'Int' to same type has no effect
19 |     while (j >= 0) {
20 |         divs = ((divs + [Int(divs2[j])]) as! [Int])
21 |         j = ((j - 1) as! Int)
   |                      `- warning: forced cast of 'Int' to same type has no effect
22 |     }
23 |     return (divs as! [Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:23:18: warning: forced cast of '[Int]' to same type has no effect
21 |         j = ((j - 1) as! Int)
22 |     }
23 |     return (divs as! [Int])
   |                  `- warning: forced cast of '[Int]' to same type has no effect
24 | }
25 | func sum(_ xs: [Int]) -> Int {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:28:26: warning: forced cast of 'Int' to same type has no effect
26 |     var tot = 0
27 |     for v in xs {
28 |         tot = ((tot + (v as! Int)) as! Int)
   |                          `- warning: forced cast of 'Int' to same type has no effect
29 |     }
30 |     return (tot as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:28:36: warning: forced cast of 'Int' to same type has no effect
26 |     var tot = 0
27 |     for v in xs {
28 |         tot = ((tot + (v as! Int)) as! Int)
   |                                    `- warning: forced cast of 'Int' to same type has no effect
29 |     }
30 |     return (tot as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:30:17: warning: forced cast of 'Int' to same type has no effect
28 |         tot = ((tot + (v as! Int)) as! Int)
29 |     }
30 |     return (tot as! Int)
   |                 `- warning: forced cast of 'Int' to same type has no effect
31 | }
32 | func sumStr(_ xs: [Int]) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:36:61: warning: forced cast of 'String' to same type has no effect
34 |     var i = 0
35 |     while (i < Int(((xs).count))) {
36 |         s = (((s + String(describing: Int(xs[i]))) + " + ") as! String)
   |                                                             `- warning: forced cast of 'String' to same type has no effect
37 |         i = ((i + 1) as! Int)
38 |     }

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:37:22: warning: forced cast of 'Int' to same type has no effect
35 |     while (i < Int(((xs).count))) {
36 |         s = (((s + String(describing: Int(xs[i]))) + " + ") as! String)
37 |         i = ((i + 1) as! Int)
   |                      `- warning: forced cast of 'Int' to same type has no effect
38 |     }
39 |     return String(describing: String(Array((s as! String))[0..<((Int(((s).count)) - 3) as! Int)]))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:39:47: warning: forced cast of 'String' to same type has no effect
37 |         i = ((i + 1) as! Int)
38 |     }
39 |     return String(describing: String(Array((s as! String))[0..<((Int(((s).count)) - 3) as! Int)]))
   |                                               `- warning: forced cast of 'String' to same type has no effect
40 | }
41 | func pad2(_ n: Int) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:39:88: warning: forced cast of 'Int' to same type has no effect
37 |         i = ((i + 1) as! Int)
38 |     }
39 |     return String(describing: String(Array((s as! String))[0..<((Int(((s).count)) - 3) as! Int)]))
   |                                                                                        `- warning: forced cast of 'Int' to same type has no effect
40 | }
41 | func pad2(_ n: Int) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:44:27: warning: forced cast of 'String' to same type has no effect
42 |     let s = String(describing: n)
43 |     if (Int(((s).count)) < 2) {
44 |         return ((" " + s) as! String)
   |                           `- warning: forced cast of 'String' to same type has no effect
45 |     }
46 |     return (s as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:46:15: warning: forced cast of 'String' to same type has no effect
44 |         return ((" " + s) as! String)
45 |     }
46 |     return (s as! String)
   |               `- warning: forced cast of 'String' to same type has no effect
47 | }
48 | func pad5(_ n: Int) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:49:13: error: no exact matches in call to initializer 
47 | }
48 | func pad5(_ n: Int) -> String {
49 |     var s = String(String(describing: n))!
   |             |- error: no exact matches in call to initializer 
   |             `- note: found candidate with type '(String) -> String'
50 |     while (Int(((s).count)) < 5) {
51 |         s = ((" " + s) as! String)

Swift.String.init:3:21: note: incorrect labels for candidate (have: '(_:)', expected: '(validatingCString:)')
1 | struct String {
2 | @available(*, deprecated, message: "Use a copy of the String argument")
3 |   @inlinable public init?(validatingCString nullTerminatedUTF8: String)}
  |                     `- note: incorrect labels for candidate (have: '(_:)', expected: '(validatingCString:)')
4 | 

Swift.String.init:3:21: note: incorrect labels for candidate (have: '(_:)', expected: '(validatingUTF8:)')
1 | struct String {
2 | @available(*, deprecated, message: "Use a copy of the String argument")
3 |   @inlinable public init?(validatingUTF8 cString: String)}
  |                     `- note: incorrect labels for candidate (have: '(_:)', expected: '(validatingUTF8:)')
4 | 

Foundation.String.init:3:10: note: incorrect labels for candidate (have: '(_:)', expected: '(utf8String:)')
1 | struct String {
2 | @available(*, deprecated, message: "Use a copy of the String argument")
3 |   public init?(utf8String bytes: String)}
  |          `- note: incorrect labels for candidate (have: '(_:)', expected: '(utf8String:)')
4 | 

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:51:24: warning: forced cast of 'String' to same type has no effect
49 |     var s = String(String(describing: n))!
50 |     while (Int(((s).count)) < 5) {
51 |         s = ((" " + s) as! String)
   |                        `- warning: forced cast of 'String' to same type has no effect
52 |     }
53 |     return (s as! String)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:56:28: warning: forced cast of 'Int' to same type has no effect
54 | }
55 | func abundantOdd(_ searchFrom: Int, _ countFrom: Int, _ countTo: Int, _ printOne: Bool) -> Int {
56 |     var count = (countFrom as! Int)
   |                            `- warning: forced cast of 'Int' to same type has no effect
57 |     var n = (searchFrom as! Int)
58 |     while (count < countTo) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:57:25: warning: forced cast of 'Int' to same type has no effect
55 | func abundantOdd(_ searchFrom: Int, _ countFrom: Int, _ countTo: Int, _ printOne: Bool) -> Int {
56 |     var count = (countFrom as! Int)
57 |     var n = (searchFrom as! Int)
   |                         `- warning: forced cast of 'Int' to same type has no effect
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:59:33: warning: forced cast of 'Int' to same type has no effect
57 |     var n = (searchFrom as! Int)
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])
   |                                 `- warning: forced cast of 'Int' to same type has no effect
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
61 |         if (tot > n) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:59:43: warning: forced cast of '[Int]' to same type has no effect
57 |     var n = (searchFrom as! Int)
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])
   |                                           `- warning: forced cast of '[Int]' to same type has no effect
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
61 |         if (tot > n) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:60:31: warning: forced cast of '[Int]' to same type has no effect
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
   |                               `- warning: forced cast of '[Int]' to same type has no effect
61 |         if (tot > n) {
62 |             count = ((count + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:60:71: warning: cast from 'Int' to unrelated type 'Double' always fails
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
   |                                                                       `- warning: cast from 'Int' to unrelated type 'Double' always fails
61 |         if (tot > n) {
62 |             count = ((count + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:60:95: warning: conditional cast from 'Int' to 'Int' always succeeds
58 |     while (count < countTo) {
59 |         let divs = (divisors((n as! Int)) as! [Int])
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
   |                                                                                               `- warning: conditional cast from 'Int' to 'Int' always succeeds
61 |         if (tot > n) {
62 |             count = ((count + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:62:34: warning: forced cast of 'Int' to same type has no effect
60 |         let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
61 |         if (tot > n) {
62 |             count = ((count + 1) as! Int)
   |                                  `- warning: forced cast of 'Int' to same type has no effect
63 |             if (printOne && (count < countTo)) {
64 |                 n = ((n + 2) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:64:30: warning: forced cast of 'Int' to same type has no effect
62 |             count = ((count + 1) as! Int)
63 |             if (printOne && (count < countTo)) {
64 |                 n = ((n + 2) as! Int)
   |                              `- warning: forced cast of 'Int' to same type has no effect
65 |                 continue
66 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:67:53: warning: forced cast of '[Int]' to same type has no effect
65 |                 continue
66 |             }
67 |             let s = String(describing: sumStr((divs as! [Int])))
   |                                                     `- warning: forced cast of '[Int]' to same type has no effect
68 |             if (!printOne) {
69 |                 print(((((((String(describing: pad2((count as! Int))) + ". ") + String(describing: pad5((n as! Int)))) + " < ") + s) + " = ") + String(describing: tot)))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:69:60: warning: forced cast of 'Int' to same type has no effect
67 |             let s = String(describing: sumStr((divs as! [Int])))
68 |             if (!printOne) {
69 |                 print(((((((String(describing: pad2((count as! Int))) + ". ") + String(describing: pad5((n as! Int)))) + " < ") + s) + " = ") + String(describing: tot)))
   |                                                            `- warning: forced cast of 'Int' to same type has no effect
70 |             } else {
71 |                 print(((((String(describing: n) + " < ") + s) + " = ") + String(describing: tot)))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:69:108: warning: forced cast of 'Int' to same type has no effect
67 |             let s = String(describing: sumStr((divs as! [Int])))
68 |             if (!printOne) {
69 |                 print(((((((String(describing: pad2((count as! Int))) + ". ") + String(describing: pad5((n as! Int)))) + " < ") + s) + " = ") + String(describing: tot)))
   |                                                                                                            `- warning: forced cast of 'Int' to same type has no effect
70 |             } else {
71 |                 print(((((String(describing: n) + " < ") + s) + " = ") + String(describing: tot)))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:74:22: warning: forced cast of 'Int' to same type has no effect
72 |             }
73 |         }
74 |         n = ((n + 2) as! Int)
   |                      `- warning: forced cast of 'Int' to same type has no effect
75 |     }
76 |     return (n as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:76:15: warning: forced cast of 'Int' to same type has no effect
74 |         n = ((n + 2) as! Int)
75 |     }
76 |     return (n as! Int)
   |               `- warning: forced cast of 'Int' to same type has no effect
77 | }
78 | func main() {

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:81:40: warning: forced cast of 'Int' to same type has no effect
79 |     let max = 25
80 |     print((("The first " + String(describing: max)) + " abundant odd numbers are:"))
81 |     let n = Int(abundantOdd(1, 0, (max as! Int), false))
   |                                        `- warning: forced cast of 'Int' to same type has no effect
82 |     print("\nThe one thousandth abundant odd number is:")
83 |     _ = Int(abundantOdd((n as! Int), (max as! Int), 1000, true))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:83:28: warning: forced cast of 'Int' to same type has no effect
81 |     let n = Int(abundantOdd(1, 0, (max as! Int), false))
82 |     print("\nThe one thousandth abundant odd number is:")
83 |     _ = Int(abundantOdd((n as! Int), (max as! Int), 1000, true))
   |                            `- warning: forced cast of 'Int' to same type has no effect
84 |     print("\nThe first abundant odd number above one billion is:")
85 |     _ = Int(abundantOdd(1000000001, 0, 1, true))

/tmp/TestSwiftTranspiler_Rosetta_Golden3398094339/001/main.swift:83:43: warning: forced cast of 'Int' to same type has no effect
81 |     let n = Int(abundantOdd(1, 0, (max as! Int), false))
82 |     print("\nThe one thousandth abundant odd number is:")
83 |     _ = Int(abundantOdd((n as! Int), (max as! Int), 1000, true))
   |                                           `- warning: forced cast of 'Int' to same type has no effect
84 |     print("\nThe first abundant odd number above one billion is:")
85 |     _ = Int(abundantOdd(1000000001, 0, 1, true))
