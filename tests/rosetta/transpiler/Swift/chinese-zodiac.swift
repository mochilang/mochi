// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:47:16 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

let animal = (["Rat", "Ox", "Tiger", "Rabbit", "Dragon", "Snake", "Horse", "Goat", "Monkey", "Rooster", "Dog", "Pig"] as! [String])
let yinYang = (["Yang", "Yin"] as! [String])
let element = (["Wood", "Fire", "Earth", "Metal", "Water"] as! [String])
let stemChArr = (["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"] as! [String])
let branchChArr = (["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"] as! [String])
struct Info {
    var animal: String
    var yinYang: String
    var element: String
    var stemBranch: String
    var cycle: Int
}
func cz(_ yr: Int, _ animal: [String], _ yinYang: [String], _ element: [String], _ sc: [String], _ bc: [String]) -> Info {
    var y: Int = (yr - 4)
    let stem = (y % 10)
    let branch = (y % 12)
    let sb = (String(describing: sc[stem]) + String(describing: bc[branch]))
    return (Info(animal: String(describing: animal[branch]), yinYang: String(describing: yinYang[(stem % 2)]), element: String(describing: element[Int((stem / 2))]), stemBranch: sb, cycle: ((y % 60) + 1)) as! Info)
}
for yr in ([1935, 1938, 1968, 1972, 1976] as! [Int]) {
    let r = cz(Int(yr), (animal as! [String]), (yinYang as! [String]), (element as! [String]), (stemChArr as! [String]), (branchChArr as! [String]))
    print(_p(((((((((((_p(yr) + ": ") + r.element) + " ") + r.animal) + ", ") + r.yinYang) + ", Cycle year ") + _p(r.cycle)) + " ") + r.stemBranch)))
}
