// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:54 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Edge {
        var a: Int
        var b: Int
    }
    func contains(_ xs: [Int], _ v: Int) -> Bool {
        for x in xs {
            if (x == v) {
                return true
            }
        }
        return false
    }
    func copyInts(_ xs: [Int]) -> [Int] {
        var out: [Int] = ([] as! [Int])
        for x in xs {
            out = (_append(out, x) as! [Int])
        }
        return (out as! [Int])
    }
    func sliceEqual(_ a: [Int], _ b: [Int]) -> Bool {
        var i: Int = 0
        while (i < Int(((a).count))) {
            if ((a[i] as! Int) != (b[i] as! Int)) {
                return false
            }
            i = Int((i + 1))
        }
        return true
    }
    func reverse(_ xs: inout [Int]) {
        var i: Int = 0
        var j: Int = (Int(((xs).count)) - 1)
        while (i < j) {
            let t = (xs[i] as! Int)
            xs[i] = (xs[j] as! Int)
            xs[j] = Int(t)
            i = Int((i + 1))
            j = Int((j - 1))
        }
    }
    func perimEqual(_ p1: [Int], _ p2: [Int]) -> Bool {
        if (Int(((p1).count)) != Int(((p2).count))) {
            return false
        }
        for v in p1 {
            if (!((p2 as! [Int]).contains(Int(v)))) {
                return false
            }
        }
        var c: [Int] = (copyInts((p1 as! [Int])) as! [Int])
        var r: Int = 0
        while (r < 2) {
            var i: Int = 0
            while (i < Int(((c).count))) {
                if sliceEqual((c as! [Int]), (p2 as! [Int])) {
                    return true
                }
                let t = (c[(Int(((c).count)) - 1)] as! Int)
                var j: Int = (Int(((c).count)) - 1)
                while (j > 0) {
                    c[j] = (c[(j - 1)] as! Int)
                    j = Int((j - 1))
                }
                c[0] = Int(t)
                i = Int((i + 1))
            }
            _ = reverse(&c)
            r = Int((r + 1))
        }
        return false
    }
    func sortEdges(_ es: [Edge]) -> [Edge] {
        var arr: [Edge] = es
        var n: Int = Int(((arr).count))
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n - 1)) {
                let a = (arr[j] as! Edge)
                let b = (arr[(j + 1)] as! Edge)
                if ((a.a > b.a) || ((a.a == b.a) && (a.b > b.b))) {
                    arr[j] = (b as! Edge)
                    arr[(j + 1)] = (a as! Edge)
                }
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        return (arr as! [Edge])
    }
    func concat(_ a: [Edge], _ b: [Edge]) -> [Edge] {
        var out: [Edge] = ([] as! [Edge])
        for x in a {
            out = (_append(out, x) as! [Edge])
        }
        for x in b {
            out = (_append(out, x) as! [Edge])
        }
        return (out as! [Edge])
    }
    func faceToPerim(_ face: [Edge]) -> Any {
        var le: Int = Int(((face).count))
        if (le == 0) {
            return nil
        }
        var edges: [Edge] = ([] as! [Edge])
        var i: Int = 0
        while (i < le) {
            let e = (face[i] as! Edge)
            if (e.b <= e.a) {
                return nil
            }
            edges = (_append(edges, e) as! [Edge])
            i = Int((i + 1))
        }
        edges = (sortEdges((edges as! [Edge])) as! [Edge])
        var firstEdge: Edge = (edges[0] as! Edge)
        var perim: [Int] = ([firstEdge.a, firstEdge.b] as! [Int])
        var first: Int = firstEdge.a
        var last: Int = firstEdge.b
        edges = (Array(edges[1..<Int(((edges).count))]) as! [Edge])
        le = Int(((edges).count))
        var done: Bool = false
        while ((le > 0) && ((!done) as! Bool)) {
            var idx: Int = 0
            var found: Bool = false
            while (idx < le) {
                let e = (edges[idx] as! Edge)
                if (e.a == last) {
                    perim = (_append(perim, e.b) as! [Int])
                    last = Int(e.b)
                    found = true
                } else if (e.b == last) {
                    perim = (_append(perim, e.a) as! [Int])
                    last = Int(e.a)
                    found = true
                }
                
                if found {
                    edges = (concat((Array(edges[0..<idx]) as! [Edge]), (Array(edges[(idx + 1)..<Int(((edges).count))]) as! [Edge])) as! [Edge])
                    le = Int((le - 1))
                    if (last == first) {
                        if (le == 0) {
                            done = true
                        } else {
                            return nil
                        }
                    }
                    break
                }
                idx = Int((idx + 1))
            }
            if (!found) {
                return nil
            }
        }
        return (Array(perim[0..<(Int(((perim).count)) - 1)]) as! [Int])
    }
    func listStr(_ xs: [Int]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = String(describing: (s + _p((xs[i] as! Int))))
            if (i < (Int(((xs).count)) - 1)) {
                s = String(describing: (s + " "))
            }
            i = Int((i + 1))
        }
        s = String(describing: (s + "]"))
        return String(describing: s)
    }
    func main() {
        print(_p("Perimeter format equality checks:"))
        print(_p(("  Q == R is " + _p(perimEqual(([8, 1, 3] as! [Int]), ([1, 3, 8] as! [Int]))))))
        print(_p(("  U == V is " + _p(perimEqual(([18, 8, 14, 10, 12, 17, 19] as! [Int]), ([8, 14, 10, 12, 17, 19, 18] as! [Int]))))))
        let e = ([Edge(a: 7, b: 11), Edge(a: 1, b: 11), Edge(a: 1, b: 7)] as! [Edge])
        let f = ([Edge(a: 11, b: 23), Edge(a: 1, b: 17), Edge(a: 17, b: 23), Edge(a: 1, b: 11)] as! [Edge])
        let g = ([Edge(a: 8, b: 14), Edge(a: 17, b: 19), Edge(a: 10, b: 12), Edge(a: 10, b: 14), Edge(a: 12, b: 17), Edge(a: 8, b: 18), Edge(a: 18, b: 19)] as! [Edge])
        let h = ([Edge(a: 1, b: 3), Edge(a: 9, b: 11), Edge(a: 3, b: 11), Edge(a: 1, b: 11)] as! [Edge])
        print(_p("\nEdge to perimeter format translations:"))
        var faces: [[Edge]] = ([e, f, g, h] as! [[Edge]])
        var names: [String] = (["E", "F", "G", "H"] as! [String])
        var idx: Int = 0
        while (idx < Int(((faces).count))) {
            let per = faceToPerim((faces[idx] as! [Edge]))
            if (String(describing: per)
            == String(describing: nil as Any?)
            ) {
                print(_p((("  " + String(describing: names[idx])) + " => Invalid edge format")))
            } else {
                print(_p(((("  " + String(describing: names[idx])) + " => ") + String(describing: listStr((per as! [Int]))))))
            }
            idx = Int((idx + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
