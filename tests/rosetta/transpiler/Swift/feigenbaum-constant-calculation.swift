// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:22:09 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floorf(_ x: Double) -> Double {
        let y = Int(x)
        return Double(y)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) == ch) {
                return (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return ((0 - 1) as! Int)
    }
    func fmt8(_ x: Double) -> String {
        var y: Double = (Double(floorf(Double(((x * 100000000.0) + 0.5)))) / 100000000.0)
        var s: String = _p(y)
        var dot: Int = Int((String(describing: (s as! String)).firstIndex(of: Character(String(describing: ".")))?.utf16Offset(in: String(describing: (s as! String)) ) ?? -1))
        if (dot == (0 - 1)) {
            s = ((s + ".00000000") as! String)
        } else {
            var decs: Int = ((Int(((s).count)) - dot) - 1)
            while (decs < 8) {
                s = ((s + "0") as! String)
                decs = ((decs + 1) as! Int)
            }
        }
        return (s as! String)
    }
    func pad2(_ x: Int) -> String {
        var s: String = _p(x)
        if (Int(((s).count)) < 2) {
            s = ((" " + s) as! String)
        }
        return (s as! String)
    }
    func main() {
        let maxIt = 13
        let maxItJ = 10
        var a1: Double = 1.0
        var a2: Double = 0.0
        var d1: Double = 3.2
        print(_p(" i       d"))
        var i: Int = 2
        while (i <= maxIt) {
            var a: Double = (a1 + (Double((a1 - a2)) / d1))
            var j: Int = 1
            while (j <= maxItJ) {
                var x: Double = 0.0
                var y: Double = 0.0
                var k: Int = 1
                let limit = Int(pow_int(2, (i as! Int)))
                while (k <= limit) {
                    y = Double((1.0 - ((2.0 * y) * x)))
                    x = Double((a - (x * x)))
                    k = ((k + 1) as! Int)
                }
                a = Double((a - (x / y)))
                j = ((j + 1) as! Int)
            }
            var d: Double = (Double((a1 - a2)) / Double((a - a1)))
            print(_p(((String(describing: pad2((i as! Int))) + "    ") + String(describing: fmt8(Double(d))))))
            d1 = Double(d)
            a2 = Double(a1)
            a1 = Double(a)
            i = ((i + 1) as! Int)
        }
    }
    func pow_int(_ base: Int, _ exp: Int) -> Int {
        var r: Int = 1
        var b: Int = base
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                r = ((r * b) as! Int)
            }
            b = ((b * b) as! Int)
            e = ((e / 2) as! Int)
        }
        return (r as! Int)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
