// Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:32:30 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

let INF = 1000000000
var graph: [String: [String: Int]] = ([:] as! [String: [String: Int]])
func addEdge(_ u: String, _ v: String, _ w: Int) {
    if (!Bool((graph[u] != nil))) {
        graph[u] = ([:] as! [String: Int])
    }
    graph[u]![v] = Int(w)
    if (!Bool((graph[v] != nil))) {
        graph[v] = ([:] as! [String: Int])
    }
}
func removeAt(_ xs: [String], _ idx: Int) -> [String] {
    var out: [String] = ([] as! [String])
    var i = 0
    for x in xs {
        if (i != idx) {
            out = ((out + [x]) as! [String])
        }
        i = Int((i + 1))
    }
    return (out as! [String])
}
func dijkstra(_ source: String) -> [String: Any] {
    var dist: [String: Int] = ([:] as! [String: Int])
    var prev: [String: String] = ([:] as! [String: String])
    for v in graph.keys.sorted() {
        dist[v] = Int(INF)
        prev[v] = ""
    }
    dist[source] = 0
    var q: [String] = ([] as! [String])
    for v in graph.keys.sorted() {
        q = ((q + [v]) as! [String])
    }
    while (Int(((q).count)) > 0) {
        var bestIdx = 0
        var u = (q[0] as! String)
        var i = 1
        while (i < Int(((q).count))) {
            let v = (q[i] as! String)
            if (dist[v]! < dist[u]!) {
                u = String(v)
                bestIdx = Int(i)
            }
            i = Int((i + 1))
        }
        q = (removeAt((q as! [String]), Int(bestIdx)) as! [String])
        for v in graph[u]!.keys.sorted() {
            let alt = (dist[u]! + graph[u]![v]!)
            if (alt < dist[v]!) {
                dist[v] = Int(alt)
                prev[v] = String(u)
            }
        }
    }
    return (["dist": dist, "prev": prev] as! [String: Any])
}
func path(_ prev: [String: String], _ v: String) -> String {
    var s = v
    var cur = v
    while (prev[cur]! != "") {
        cur = (prev[cur]! as! String)
        s = String((cur + s))
    }
    return String(s)
}
func main() {
    _ = addEdge("a", "b", 7)
    _ = addEdge("a", "c", 9)
    _ = addEdge("a", "f", 14)
    _ = addEdge("b", "c", 10)
    _ = addEdge("b", "d", 15)
    _ = addEdge("c", "d", 11)
    _ = addEdge("c", "f", 2)
    _ = addEdge("d", "e", 6)
    _ = addEdge("e", "f", 9)
    let res = (dijkstra("a") as! [String: Any])
    let dist = (res["dist"]! as! [String: Int])
    let prev = (res["prev"]! as! [String: String])
    print(_p(((("Distance to e: " + _p(dist["e"]!)) + ", Path: ") + String(describing: path((prev as! [String: String]), "e")))))
    print(_p(((("Distance to f: " + _p(dist["f"]!)) + ", Path: ") + String(describing: path((prev as! [String: String]), "f")))))
}
_ = main()
