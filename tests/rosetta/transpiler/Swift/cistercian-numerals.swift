// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:07:06 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
var n: [[String]] = ([] as! [[String]])
func initN() {
    var i: Int = 0
    while (i < 15) {
        var row: [String] = ([] as! [String])
        var j: Int = 0
        while (j < 11) {
            row = (_append(row, " ") as! [String])
            j = ((j + 1) as! Int)
        }
        row[5] = "x"
        n = (_append(n, row) as! [[String]])
        i = ((i + 1) as! Int)
    }
}
func horiz(_ c1: Int, _ c2: Int, _ r: Int) {
    var c: Int = c1
    while (c <= c2) {
        n[r][c] = "x"
        c = ((c + 1) as! Int)
    }
}
func verti(_ r1: Int, _ r2: Int, _ c: Int) {
    var r: Int = r1
    while (r <= r2) {
        n[r][c] = "x"
        r = ((r + 1) as! Int)
    }
}
func diagd(_ c1: Int, _ c2: Int, _ r: Int) {
    var c: Int = c1
    while (c <= c2) {
        n[((r + c) - c1)][c] = "x"
        c = ((c + 1) as! Int)
    }
}
func diagu(_ c1: Int, _ c2: Int, _ r: Int) {
    var c: Int = c1
    while (c <= c2) {
        n[((r - c) + c1)][c] = "x"
        c = ((c + 1) as! Int)
    }
}
var draw: [Int: () -> Any] = ([:] as! [Int: () -> Any])
func initDraw() {
    draw[1] = ({ () in
    _ = horiz(6, 10, 0)
} as! () -> Any)
draw[2] = ({ () in
_ = horiz(6, 10, 4)
} as! () -> Any)
draw[3] = ({ () in
_ = diagd(6, 10, 0)
} as! () -> Any)
draw[4] = ({ () in
_ = diagu(6, 10, 4)
} as! () -> Any)
draw[5] = ({ () in
_ = draw[1]!()
_ = draw[4]!()
} as! () -> Any)
draw[6] = ({ () in
_ = verti(0, 4, 10)
} as! () -> Any)
draw[7] = ({ () in
_ = draw[1]!()
_ = draw[6]!()
} as! () -> Any)
draw[8] = ({ () in
_ = draw[2]!()
_ = draw[6]!()
} as! () -> Any)
draw[9] = ({ () in
_ = draw[1]!()
_ = draw[8]!()
} as! () -> Any)
draw[10] = ({ () in
_ = horiz(0, 4, 0)
} as! () -> Any)
draw[20] = ({ () in
_ = horiz(0, 4, 4)
} as! () -> Any)
draw[30] = ({ () in
_ = diagu(0, 4, 4)
} as! () -> Any)
draw[40] = ({ () in
_ = diagd(0, 4, 0)
} as! () -> Any)
draw[50] = ({ () in
_ = draw[10]!()
_ = draw[40]!()
} as! () -> Any)
draw[60] = ({ () in
_ = verti(0, 4, 0)
} as! () -> Any)
draw[70] = ({ () in
_ = draw[10]!()
_ = draw[60]!()
} as! () -> Any)
draw[80] = ({ () in
_ = draw[20]!()
_ = draw[60]!()
} as! () -> Any)
draw[90] = ({ () in
_ = draw[10]!()
_ = draw[80]!()
} as! () -> Any)
draw[100] = ({ () in
_ = horiz(6, 10, 14)
} as! () -> Any)
draw[200] = ({ () in
_ = horiz(6, 10, 10)
} as! () -> Any)
draw[300] = ({ () in
_ = diagu(6, 10, 14)
} as! () -> Any)
draw[400] = ({ () in
_ = diagd(6, 10, 10)
} as! () -> Any)
draw[500] = ({ () in
_ = draw[100]!()
_ = draw[400]!()
} as! () -> Any)
draw[600] = ({ () in
_ = verti(10, 14, 10)
} as! () -> Any)
draw[700] = ({ () in
_ = draw[100]!()
_ = draw[600]!()
} as! () -> Any)
draw[800] = ({ () in
_ = draw[200]!()
_ = draw[600]!()
} as! () -> Any)
draw[900] = ({ () in
_ = draw[100]!()
_ = draw[800]!()
} as! () -> Any)
draw[1000] = ({ () in
_ = horiz(0, 4, 14)
} as! () -> Any)
draw[2000] = ({ () in
_ = horiz(0, 4, 10)
} as! () -> Any)
draw[3000] = ({ () in
_ = diagd(0, 4, 10)
} as! () -> Any)
draw[4000] = ({ () in
_ = diagu(0, 4, 14)
} as! () -> Any)
draw[5000] = ({ () in
_ = draw[1000]!()
_ = draw[4000]!()
} as! () -> Any)
draw[6000] = ({ () in
_ = verti(10, 14, 0)
} as! () -> Any)
draw[7000] = ({ () in
_ = draw[1000]!()
_ = draw[6000]!()
} as! () -> Any)
draw[8000] = ({ () in
_ = draw[2000]!()
_ = draw[6000]!()
} as! () -> Any)
draw[9000] = ({ () in
_ = draw[1000]!()
_ = draw[8000]!()
} as! () -> Any)
}
func printNumeral() {
    var i: Int = 0
    while (i < 15) {
        var line: String = ""
        var j: Int = 0
        while (j < 11) {
            line = (((line + (n[i][j] as! String)) + " ") as! String)
            j = ((j + 1) as! Int)
        }
        print(_p(line))
        i = ((i + 1) as! Int)
    }
    print(_p(""))
}
_ = initDraw()
let numbers: [Int] = ([(0 as! Any), (1 as! Any), (20 as! Any), (300 as! Any), (4000 as! Any), (5555 as! Any), (6789 as! Any), (9999 as! Any)] as! [Int])
for number in numbers {
    _ = initN()
    print(_p((_p(number) + ":")))
    var num: Int = number
    let thousands = (num / 1000)
    num = ((num % 1000) as! Int)
    let hundreds = (num / 100)
    num = ((num % 100) as! Int)
    let tens = (num / 10)
    let ones = (num % 10)
    if (thousands > 0) {
        _ = draw[(thousands * 1000)]!()
    }
    if (hundreds > 0) {
        _ = draw[(hundreds * 100)]!()
    }
    if (tens > 0) {
        _ = draw[(tens * 10)]!()
    }
    if (ones > 0) {
        _ = draw[ones]!()
    }
    _ = printNumeral()
}
