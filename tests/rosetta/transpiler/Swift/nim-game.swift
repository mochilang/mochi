// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:22:36 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func parseIntStr(_ str: String) -> Int {
    var i: Int = 0
    var neg: Bool = false
    if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
        neg = true
        i = 1
    }
    var n: Int = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while (i < Int(((str).count))) {
        n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
        i = Int((i &+ 1))
    }
    if neg {
        n = Int(-n)
    }
    return n
}
func showTokens(_ tokens: Int) {
    print(_p(("Tokens remaining " + String(describing: tokens))))
}
func main() {
    var tokens: Int = 12
    var done: Bool = false
    while (!done) {
        _ = showTokens((tokens as! Int))
        print(_p(""))
        print(_p("How many tokens 1, 2 or 3?"))
        let line = (readLine() ?? "")
        var t: Int = 0
        if (Int(((line).count)) > 0) {
            t = Int(Int(String(describing: (line as! String)))!)
        }
        if ((t < 1) || (t > 3)) {
            print(_p("\nMust be a number between 1 and 3, try again.\n"))
        } else {
            var ct: Int = (4 &- t)
            var s: String = "s"
            if (ct == 1) {
                s = ""
            }
            print(_p((((("  Computer takes " + String(describing: ct)) + " token") + s) + "\n\n")))
            tokens = Int((tokens &- 4))
        }
        if (tokens == 0) {
            _ = showTokens(0)
            print(_p("  Computer wins!"))
            done = true
        }
    }
}
_ = main()
