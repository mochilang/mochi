// Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:02:10 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func fields(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))
            if (((ch == " ") || (ch == "\t")) || (ch == "\n")) {
                if (Int(((cur).count)) > 0) {
                    words = (_append(words, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = String(describing: (cur + ch))
            }
            i = Int((i + 1))
        }
        if (Int(((cur).count)) > 0) {
            words = (_append(words, cur) as! [String])
        }
        return (words as! [String])
    }
    func makePatterns() -> [String] {
        let digits = (["1", "2", "3", "4", "5", "6", "7", "8", "9"] as! [String])
        var pats: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((digits).count))) {
            var j: Int = 0
            while (j < Int(((digits).count))) {
                if (j != i) {
                    var k: Int = 0
                    while (k < Int(((digits).count))) {
                        if ((k != i) && (k != j)) {
                            var l: Int = 0
                            while (l < Int(((digits).count))) {
                                if (((l != i) && (l != j)) && (l != k)) {
                                    pats = (_append(pats, (((String(describing: digits[i]) + String(describing: digits[j])) + String(describing: digits[k])) + String(describing: digits[l]))) as! [String])
                                }
                                l = Int((l + 1))
                            }
                        }
                        k = Int((k + 1))
                    }
                }
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        return (pats as! [String])
    }
    func main() {
        print(_p(((((("Cows and bulls/player\n" + "You think of four digit number of unique digits in the range 1 to 9.\n") + "I guess.  You score my guess:\n") + "    A correct digit but not in the correct place is a cow.\n") + "    A correct digit in the correct place is a bull.\n") + "You give my score as two numbers separated with a space.")))
        var patterns: [String] = (makePatterns() as! [String])
        while true {
            if (Int(((patterns).count)) == 0) {
                print(_p("Oops, check scoring."))
                return
            }
            let guess = String(describing: patterns[0])
            patterns = (Array(patterns[1..<patterns.count]) as! [String])
            var cows: Int = 0
            var bulls: Int = 0
            while true {
                print(_p((("My guess: " + guess) + ".  Score? (c b) ")))
                let line = (readLine() ?? "")
                let toks = (fields(String(describing: line)) as! [String])
                if (Int(((toks).count)) == 2) {
                    let c = Int(_int(String(describing: toks[0])))
                    let b = Int(_int(String(describing: toks[1])))
                    if (((((c >= 0) && (c <= 4)) && (b >= 0)) && (b <= 4)) && ((c + b) <= 4)) {
                        cows = Int(c)
                        bulls = Int(b)
                        break
                    }
                }
                print(_p("Score guess as two numbers: cows bulls"))
            }
            if (bulls == 4) {
                print(_p("I did it. :)"))
                return
            }
            var next: [String] = ([] as! [String])
            var idx: Int = 0
            while (idx < Int(((patterns).count))) {
                let pat = String(describing: patterns[idx])
                var c: Int = 0
                var b: Int = 0
                var i: Int = 0
                while (i < 4) {
                    let cg = String(describing: String(Array(String(describing: String(describing: guess)))[Int(i)..<Int((i + 1))]))
                    let cp = String(describing: String(Array(String(describing: String(describing: pat)))[Int(i)..<Int((i + 1))]))
                    if (cg == cp) {
                        b = Int((b + 1))
                    } else if (Int((String(describing: String(describing: pat)).firstIndex(of: Character(String(describing: String(describing: cg))))?.utf16Offset(in: String(describing: String(describing: pat)) ) ?? -1)) >= 0) {
                        c = Int((c + 1))
                    }
                    
                    i = Int((i + 1))
                }
                if ((c == cows) && (b == bulls)) {
                    next = (_append(next, pat) as! [String])
                }
                idx = Int((idx + 1))
            }
            patterns = (next as! [String])
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
