// Generated by Mochi transpiler v0.10.40 on 2025-07-25 23:55:20 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct SomeStruct {
        var runtimeFields: [String: String]
    }
    func main() {
        var ss = (SomeStruct(runtimeFields: [:]) as! SomeStruct)
        print("Create two fields at runtime: \n")
        var i = 1
        while (i <= 2) {
            print((("  Field #" + String(describing: i)) + ":\n"))
            print("       Enter name  : ")
            let name = (readLine() ?? "")
            print("       Enter value : ")
            let value = (readLine() ?? "")
            var fields = (ss.runtimeFields as! [String: String])
            fields[name] = (value as! String)
            ss.runtimeFields = (fields as! [String: String])
            print("\n")
            i = ((i + 1) as! Int)
        }
        while true {
            print("Which field do you want to inspect ? ")
            let name = (readLine() ?? "")
            if (ss.runtimeFields[name] != nil) {
                let value = String(describing: ss.runtimeFields[name]!)
                print((("Its value is '" + value) + "'"))
                return
            } else {
                print("There is no field of that name, try again\n")
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
