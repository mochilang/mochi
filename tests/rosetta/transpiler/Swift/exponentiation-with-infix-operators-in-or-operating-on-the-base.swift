// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:51 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func p(_ x: Double, _ e: Double) -> Double {
        var r: Double = 1.0
        var i: Int = 0
        while (i < Int(e)) {
            r = Double((r * x))
            i = Int((i + 1))
        }
        return Double(r)
    }
    var ops: [String] = (["-x.p(e)", "-(x).p(e)", "(-x).p(e)", "-(x.p(e))"] as! [String])
    for x in ([-5.0, 5.0] as! [Double]) {
        for e in ([2.0, 3.0] as! [Double]) {
            let a = -Double(p(Double(x), Double(e)))
            let b = -Double(p(Double(x), Double(e)))
            let c = Double(p(Double(-x), Double(e)))
            let d = -Double(p(Double(x), Double(e)))
            print(_p((((((((((((((((((((("x = " + String(describing: ((x < 0) ? "" : " "))) + _p(Int(x))) + " e = ") + _p(Int(e))) + " | ") + String(describing: ops[0])) + " = ") + String(describing: padInt(Double(a)))) + " | ") + String(describing: ops[1])) + " = ") + String(describing: padInt(Double(b)))) + " | ") + String(describing: ops[2])) + " = ") + String(describing: padInt(Double(c)))) + " | ") + String(describing: ops[3])) + " = ") + String(describing: padInt(Double(d))))))
        }
    }
    func padInt(_ f: Double) -> String {
        let s = _p(Int(f))
        if (f >= 0) {
            return String(describing: (" " + s))
        }
        return String(describing: s)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
