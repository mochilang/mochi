// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:37:15 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func xor(_ a: Int, _ b: Int) -> Int {
    var res: Int = 0
    var bit: Int = 1
    var x: Int = a
    var y: Int = b
    while ((x > 0) || (y > 0)) {
        let abit = (x % 2)
        let bbit = (y % 2)
        if (abit != bbit) {
            res = Int((res + bit))
        }
        x = Int((x / 2))
        y = Int((y / 2))
        bit = Int((bit * 2))
    }
    return Int(res)
}
func rshift(_ x: Int, _ n: Int) -> Int {
    var v: Int = x
    var i: Int = 0
    while (i < n) {
        v = Int((v / 2))
        i = Int((i + 1))
    }
    return Int(v)
}
func ord(_ ch: String) -> Int {
    let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower = "abcdefghijklmnopqrstuvwxyz"
    var idx: Int = Int((String(describing: String(describing: upper)).firstIndex(of: Character(String(describing: String(describing: ch))))?.utf16Offset(in: String(describing: String(describing: upper)) ) ?? -1))
    if (idx >= 0) {
        return Int((65 + idx))
    }
    idx = Int((String(describing: String(describing: lower)).firstIndex(of: Character(String(describing: String(describing: ch))))?.utf16Offset(in: String(describing: String(describing: lower)) ) ?? -1))
    if (idx >= 0) {
        return Int((97 + idx))
    }
    if (ch == " ") {
        return 32
    }
    return 0
}
func toHex(_ n: Int) -> String {
    let digits = "0123456789ABCDEF"
    if (n == 0) {
        return "0"
    }
    var v: Int = n
    var out: String = ""
    while (v > 0) {
        let d = (v % 16)
        out = String(describing: (String(Array(digits)[d..<(d + 1)]) + out))
        v = Int((v / 16))
    }
    return String(describing: out)
}
func crc32Table() -> [Int] {
    var table: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < 256) {
        var word: Int = i
        var j: Int = 0
        while (j < 8) {
            if ((word % 2) == 1) {
                word = Int(xor(Int(rshift(Int(word), 1)), 3988292384))
            } else {
                word = Int(rshift(Int(word), 1))
            }
            j = Int((j + 1))
        }
        table = (_append(table, word) as! [Int])
        i = Int((i + 1))
    }
    return (table as! [Int])
}
var table = (crc32Table() as! [Int])
func crc32(_ s: String) -> Int {
    var crc: Int = 4294967295
    var i: Int = 0
    while (i < Int(((s).count))) {
        let c = Int(ord(String(describing: String(Array(s)[i..<(i + 1)]))))
        let idx = Int(xor(Int((crc % 256)), Int(c)))
        crc = Int(xor((table[idx] as! Int), Int(rshift(Int(crc), 8))))
        i = Int((i + 1))
    }
    return Int((4294967295 - crc))
}
func main() {
    let s = "The quick brown fox jumps over the lazy dog"
    let result = Int(crc32(String(describing: s)))
    let hex = String(describing: toHex(Int(result)))
    print(_p(hex))
}
_ = main()
