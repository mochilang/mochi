// Generated by Mochi transpiler v0.10.56 on 2025-08-04 11:12:50 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Rational: Codable {
    var num: Int
    var denom: Int
    init() {
        self.num = 0
        self.denom = 0
    }
    init(num: Int, denom: Int) {
        self.num = num
        self.denom = denom
    }
}
struct Node: Codable {
    var val: Rational
    var txt: String
    init() {
        self.val = Rational()
        self.txt = ""
    }
    init(val: Rational, txt: String) {
        self.val = val
        self.txt = txt
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let OP_ADD = 1
    let OP_SUB = 2
    let OP_MUL = 3
    let OP_DIV = 4
    func makeNode(_ n: Int) -> Node {
        return Node(val: Rational(num: n, denom: 1), txt: String(describing: n))
    }
    func combine(_ op: Int, _ l: Node, _ r: Node) -> Node {
        var res: Rational = Rational()
        if (op == OP_ADD) {
            res = (Rational(num: ((l.val.num &* r.val.denom) &+ (l.val.denom &* r.val.num)), denom: (l.val.denom &* r.val.denom)) as! Rational)
        } else if (op == OP_SUB) {
            res = (Rational(num: ((l.val.num &* r.val.denom) &- (l.val.denom &* r.val.num)), denom: (l.val.denom &* r.val.denom)) as! Rational)
        } else if (op == OP_MUL) {
            res = (Rational(num: (l.val.num &* r.val.num), denom: (l.val.denom &* r.val.denom)) as! Rational)
        } else {
            res = (Rational(num: (l.val.num &* r.val.denom), denom: (l.val.denom &* r.val.num)) as! Rational)
        }
        
        
        var opstr: String = ""
        if (op == OP_ADD) {
            opstr = " + "
        } else if (op == OP_SUB) {
            opstr = " - "
        } else if (op == OP_MUL) {
            opstr = " * "
        } else {
            opstr = " / "
        }
        
        
        return Node(val: res, txt: (((("(" + l.txt) + opstr) + r.txt) + ")"))
    }
    func exprEval(_ x: Node) -> Rational {
        return x.val
    }
    func exprString(_ x: Node) -> String {
        return x.txt
    }
    let n_cards = 4
    let goal = 24
    let digit_range = 9
    func solve(_ xs: [Node]) -> Bool {
        if (Int(((xs).count)) == 1) {
            let f = exprEval((xs[0] as! Node))
            if ((f.denom != 0) && (f.num == (f.denom &* goal))) {
                print(_p(String(describing: exprString((xs[0] as! Node)))))
                return true
            }
            return false
        }
        var i: Int = 0
        while (i < Int(((xs).count))) {
            var j: Int = (i &+ 1)
            while (j < Int(((xs).count))) {
                var rest: [Node] = ([] as! [Node])
                var k: Int = 0
                while (k < Int(((xs).count))) {
                    if ((k != i) && (k != j)) {
                        rest = (_append(rest, (xs[k] as! Node)) as! [Node])
                    }
                    k = Int((k &+ 1))
                }
                let a = (xs[i] as! Node)
                let b = (xs[j] as! Node)
                var node: Node = Node()
                for op in ([OP_ADD, OP_SUB, OP_MUL, OP_DIV] as! [Int]) {
                    node = (combine(Int(op), (a as! Node), (b as! Node)) as! Node)
                    if solve((_append(rest, node) as! [Node])) {
                        return true
                    }
                }
                node = (combine(Int(OP_SUB), (b as! Node), (a as! Node)) as! Node)
                if solve((_append(rest, node) as! [Node])) {
                    return true
                }
                node = (combine(Int(OP_DIV), (b as! Node), (a as! Node)) as! Node)
                if solve((_append(rest, node) as! [Node])) {
                    return true
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return false
    }
    func main() {
        var iter: Int = 0
        while (iter < 10) {
            var cards: [Node] = ([] as! [Node])
            var i: Int = 0
            while (i < n_cards) {
                let n = (Int((Int(_now()) % Int((digit_range &- 1)))) &+ 1)
                cards = (_append(cards, makeNode(Int(n))) as! [Node])
                print(_p((" " + String(describing: n))))
                i = Int((i &+ 1))
            }
            print(_p(":  "))
            if (!solve((cards as! [Node]))) {
                print(_p("No solution"))
            }
            iter = Int((iter &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
