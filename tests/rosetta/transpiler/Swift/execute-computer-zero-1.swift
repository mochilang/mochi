// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:44 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Instruction {
        var Label: String
        var Opcode: String
        var Arg: String
    }
    func trim(_ s: String) -> String {
        var start: Int = 0
        while ((start < Int(((s).count))) && ((String(Array(s)[start..<(start + 1)]) == " ") || (String(Array(s)[start..<(start + 1)]) == "\t"))) {
            start = Int((start + 1))
        }
        var end: Int = Int(((s).count))
        while ((end > start) && ((String(Array(s)[(end - 1)..<end]) == " ") || (String(Array(s)[(end - 1)..<end]) == "\t"))) {
            end = Int((end - 1))
        }
        return String(describing: String(Array(String(describing: String(describing: s)))[Int(start)..<Int(end)]))
    }
    func split(_ s: String, _ sep: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (((Int(((sep).count)) > 0) && ((i + Int(((sep).count))) <= Int(((s).count)))) && (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + Int(((sep).count))))])) == sep)) {
                parts = (_append(parts, cur) as! [String])
                cur = ""
                i = Int((i + Int(((sep).count))))
            } else {
                cur = String(describing: (cur + String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))))
                i = Int((i + 1))
            }
        }
        parts = (_append(parts, cur) as! [String])
        return (parts as! [String])
    }
    func splitWS(_ s: String) -> [String] {
        var out: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))
            if ((ch == " ") || (ch == "\t")) {
                if (Int(((cur).count)) > 0) {
                    out = (_append(out, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = String(describing: (cur + ch))
            }
            i = Int((i + 1))
        }
        if (Int(((cur).count)) > 0) {
            out = (_append(out, cur) as! [String])
        }
        return (out as! [String])
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits: [String: Any] = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n * 10) + ((digits as! [String: Any])[String(Array(str)[i..<(i + 1)])] as! Any)))
            i = Int((i + 1))
        }
        if neg {
            n = Int(-n)
        }
        return Int(n)
    }
    func parseAsm(_ asm: String) -> [String: Any] {
        let lines = (split(String(describing: asm), "\n") as! [String])
        var instrs: [Instruction] = ([] as! [Instruction])
        var labels: [String: Int] = ([:] as! [String: Int])
        var lineNum: Int = 0
        var i: Int = 0
        while (i < Int(((lines).count))) {
            var line: String = String(describing: lines[i])
            if (Int((String(describing: String(describing: line)).firstIndex(of: Character(String(describing: ";")))?.utf16Offset(in: String(describing: String(describing: line)) ) ?? -1)) != Int(-1)) {
                line = String(describing: String(Array(String(describing: String(describing: line)))[0..<Int((String(describing: String(describing: line)).firstIndex(of: Character(String(describing: ";")))?.utf16Offset(in: String(describing: String(describing: line)) ) ?? -1))]))
            }
            line = String(describing: trim(String(describing: line)))
            var label: String = ""
            if (Int((String(describing: String(describing: line)).firstIndex(of: Character(String(describing: ":")))?.utf16Offset(in: String(describing: String(describing: line)) ) ?? -1)) != Int(-1)) {
                let idx = Int((String(describing: String(describing: line)).firstIndex(of: Character(String(describing: ":")))?.utf16Offset(in: String(describing: String(describing: line)) ) ?? -1))
                label = String(describing: trim(String(describing: String(Array(String(describing: String(describing: line)))[0..<Int(idx)]))))
                line = String(describing: trim(String(describing: String(Array(String(describing: String(describing: line)))[Int((idx + 1))..<Int(((line).count))]))))
            }
            var opcode: String = ""
            var arg: String = ""
            if (Int(((line).count)) > 0) {
                let parts = (splitWS(String(describing: line)) as! [String])
                if (Int(((parts).count)) > 0) {
                    opcode = String(describing: parts[0])
                }
                if (Int(((parts).count)) > 1) {
                    arg = String(describing: parts[1])
                } else {
                    let ops: [String: Any] = ["NOP": 0, "LDA": 1, "STA": 2, "ADD": 3, "SUB": 4, "BRZ": 5, "JMP": 6, "STP": 7]
                    if (!(ops.contains(opcode))) {
                        arg = String(describing: opcode)
                        opcode = ""
                    }
                }
            }
            if (label != "") {
                labels[label] = Int(lineNum)
            }
            instrs = (_append(instrs, Instruction(Label: label, Opcode: opcode, Arg: arg)) as! [Instruction])
            lineNum = Int((lineNum + 1))
            i = Int((i + 1))
        }
        return (["instructions": instrs, "labels": labels] as! [String: Any])
    }
    func compile(_ p: [String: Any]) -> [Int] {
        let instrs = (p["instructions"]! as! [Instruction])
        let labels = (p["labels"]! as! [String: Int])
        var bytecode: [Int] = ([] as! [Int])
        var i: Int = 0
        let opcodes: [String: Any] = ["NOP": 0, "LDA": 1, "STA": 2, "ADD": 3, "SUB": 4, "BRZ": 5, "JMP": 6, "STP": 7]
        while (i < Int(((instrs).count))) {
            let ins = (instrs[i] as! Instruction)
            var arg: Int = 0
            if (ins.Arg != "") {
                if (labels[ins.Arg] != nil) {
                    arg = (labels[ins.Arg]! as! Int)
                } else {
                    arg = Int(Int(String(describing: String(describing: ins.Arg)))!)
                }
            }
            var code: Int = 0
            if (ins.Opcode != "") {
                code = ((opcodes as! [String: Any])[ins.Opcode] as! Int)
            }
            bytecode = (_append(bytecode, ((code * 32) + arg)) as! [Int])
            i = Int((i + 1))
        }
        while (Int(((bytecode).count)) < 32) {
            bytecode = (_append(bytecode, 0) as! [Int])
        }
        return (bytecode as! [Int])
    }
    func floorMod(_ a: Int, _ b: Int) -> Int {
        var r: Int = (a % b)
        if (r < 0) {
            r = Int((r + b))
        }
        return Int(r)
    }
    func run(_ bytecode: [Int]) -> Int {
        var acc: Int = 0
        var pc: Int = 0
        var mem: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((bytecode).count))) {
            mem = (_append(mem, (bytecode[i] as! Int)) as! [Int])
            i = Int((i + 1))
        }
        while (pc < 32) {
            let op = ((mem[pc] as! Int) / 32)
            let arg = ((mem[pc] as! Int) % 32)
            pc = Int((pc + 1))
            if (op == 0) {
                continue
            } else if (op == 1) {
                acc = (mem[arg] as! Int)
            } else if (op == 2) {
                mem[arg] = Int(acc)
            } else if (op == 3) {
                acc = Int(floorMod(Int((acc + (mem[arg] as! Int))), 256))
            } else if (op == 4) {
                acc = Int(floorMod(Int((acc - (mem[arg] as! Int))), 256))
            } else if (op == 5) {
                if (acc == 0) {
                    pc = Int(arg)
                }
            } else if (op == 6) {
                pc = Int(arg)
            } else if (op == 7) {
                break
            } else {
                break
            }
            
            
            
            
            
            
            
        }
        return Int(acc)
    }
    func execute(_ asm: String) -> Int {
        let parsed = (parseAsm(String(describing: asm)) as! [String: Any])
        let bc = (compile((parsed as! [String: Any])) as! [Int])
        return Int(run((bc as! [Int])))
    }
    func main() {
        let examples = ([(((("LDA   x\n" + "ADD   y       ; accumulator = x + y\n") + "STP\n") + "x:            2\n") + "y:            2"), ((((((((((((("loop:   LDA   prodt\n" + "        ADD   x\n") + "        STA   prodt\n") + "        LDA   y\n") + "        SUB   one\n") + "        STA   y\n") + "        BRZ   done\n") + "        JMP   loop\n") + "done:   LDA   prodt   ; to display it\n") + "        STP\n") + "x:            8\n") + "y:            7\n") + "prodt:        0\n") + "one:          1"), ((((((((((((((((("loop:   LDA   n\n" + "        STA   temp\n") + "        ADD   m\n") + "        STA   n\n") + "        LDA   temp\n") + "        STA   m\n") + "        LDA   count\n") + "        SUB   one\n") + "        BRZ   done\n") + "        STA   count\n") + "        JMP   loop\n") + "done:   LDA   n       ; to display it\n") + "        STP\n") + "m:            1\n") + "n:            1\n") + "temp:         0\n") + "count:        8       ; valid range: 1-11\n") + "one:          1"), ((((((((((((((((((((((((((((((("start:  LDA   load\n" + "ADD   car     ; head of list\n") + "STA   ldcar\n") + "ADD   one\n") + "STA   ldcdr   ; next CONS cell\n") + "ldcar:  NOP\n") + "STA   value\n") + "ldcdr:  NOP\n") + "BRZ   done    ; 0 stands for NIL\n") + "STA   car\n") + "JMP   start\n") + "done:   LDA   value   ; CAR of last CONS\n") + "STP\n") + "load:   LDA   0\n") + "value:        0\n") + "car:          28\n") + "one:          1\n") + "                        ; order of CONS cells\n") + "                        ; in memory\n") + "                        ; does not matter\n") + "        6\n") + "        0       ; 0 stands for NIL\n") + "        2       ; (CADR ls)\n") + "        26      ; (CDDR ls) -- etc.\n") + "        5\n") + "        20\n") + "        3\n") + "        30\n") + "        1       ; value of (CAR ls)\n") + "        22      ; points to (CDR ls)\n") + "        4\n") + "        24"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "         0\n") + "         255"), (((("LDA  3\n" + "SUB  4\n") + "STP  0\n") + "                0\n") + "                1"), (((("LDA  3\n" + "ADD  4\n") + "STP  0\n") + "                1\n") + "                255")] as! [String])
        var i: Int = 0
        while (i < Int(((examples).count))) {
            let res = Int(execute(String(describing: examples[i])))
            print(_p(_p(res)))
            i = Int((i + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
