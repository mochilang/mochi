// Generated by Mochi transpiler v0.10.41 on 2025-07-27 16:23:51 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func padLeft(_ s: String, _ w: Int) -> String {
        var res: String = ""
        var n: Int = (w - Int(((s).count)))
        while (n > 0) {
            res = String(describing: (res + " "))
            n = Int((n - 1))
        }
        return String(describing: (res + s))
    }
    let dna = (((((((((("" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT")
    print(_p("SEQUENCE:"))
    let le = Int(((dna).count))
    var i: Int = 0
    while (i < le) {
        var k: Int = (i + 50)
        if (k > le) {
            k = Int(le)
        }
        print(_p(((String(describing: padLeft(String(describing: _p(i)), 5)) + ": ") + String(Array(dna)[i..<k]))))
        i = Int((i + 50))
    }
    var a: Int = 0
    var c: Int = 0
    var g: Int = 0
    var t: Int = 0
    var idx: Int = 0
    while (idx < le) {
        let ch = String(describing: String(Array(String(describing: String(describing: dna)))[Int(idx)..<Int((idx + 1))]))
        if (ch == "A") {
            a = Int((a + 1))
        } else {
            if (ch == "C") {
                c = Int((c + 1))
            } else {
                if (ch == "G") {
                    g = Int((g + 1))
                } else {
                    if (ch == "T") {
                        t = Int((t + 1))
                    }
                }
            }
        }
        idx = Int((idx + 1))
    }
    print(_p(""))
    print(_p("BASE COUNT:"))
    print(_p(("    A: " + String(describing: padLeft(String(describing: _p(a)), 3)))))
    print(_p(("    C: " + String(describing: padLeft(String(describing: _p(c)), 3)))))
    print(_p(("    G: " + String(describing: padLeft(String(describing: _p(g)), 3)))))
    print(_p(("    T: " + String(describing: padLeft(String(describing: _p(t)), 3)))))
    print(_p("    ------"))
    print(_p(("    Î£: " + _p(le))))
    print(_p("    ======"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
