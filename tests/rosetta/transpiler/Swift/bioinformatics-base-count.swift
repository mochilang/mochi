// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:55 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func padLeft(_ s: String, _ w: Int) -> String {
    var res: String = ""
    var n: Int = (w - Int(((s).count)))
    while (n > 0) {
        res = String((res + " "))
        n = Int((n - 1))
    }
    return String((res + s))
}
let dna = (((((((((("" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG") + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG") + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT") + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT") + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG") + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA") + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT") + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG") + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC") + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT")
print(_p("SEQUENCE:"))
let le = Int(((dna).count))
var i: Int = 0
while (i < le) {
    var k: Int = (i + 50)
    if (k > le) {
        k = Int(le)
    }
    print(_p(((String(describing: padLeft(String(_p(i)), 5)) + ": ") + String(Array(dna)[i..<k]))))
    i = Int((i + 50))
}
var a: Int = 0
var c: Int = 0
var g: Int = 0
var t: Int = 0
var idx: Int = 0
while (idx < le) {
    let ch = String(describing: String(Array(String(describing: String(dna)))[Int(idx)..<Int((idx + 1))]))
    if (ch == "A") {
        a = Int((a + 1))
    } else {
        if (ch == "C") {
            c = Int((c + 1))
        } else {
            if (ch == "G") {
                g = Int((g + 1))
            } else {
                if (ch == "T") {
                    t = Int((t + 1))
                }
            }
        }
    }
    idx = Int((idx + 1))
}
print(_p(""))
print(_p("BASE COUNT:"))
print(_p(("    A: " + String(describing: padLeft(String(_p(a)), 3)))))
print(_p(("    C: " + String(describing: padLeft(String(_p(c)), 3)))))
print(_p(("    G: " + String(describing: padLeft(String(_p(g)), 3)))))
print(_p(("    T: " + String(describing: padLeft(String(_p(t)), 3)))))
print(_p("    ------"))
print(_p(("    Î£: " + _p(le))))
print(_p("    ======"))
