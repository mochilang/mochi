// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:41 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func bsearch(_ arr: [Int], _ x: Int) -> Int {
    var low: Int = 0
    var high: Int = (Int(((arr).count)) - 1)
    while (low <= high) {
        let mid = (Int((low + high)) / 2)
        if ((arr[mid] as! Int) > x) {
            high = Int((mid - 1))
        } else if ((arr[mid] as! Int) < x) {
            low = Int((mid + 1))
        } else {
            return Int(mid)
        }
        
    }
    return Int(-1)
}
func bsearchRec(_ arr: [Int], _ x: Int, _ low: Int, _ high: Int) -> Int {
    if (high < low) {
        return Int(-1)
    }
    let mid = (Int((low + high)) / 2)
    if ((arr[mid] as! Int) > x) {
        return Int(bsearchRec((arr as! [Int]), Int(x), Int(low), Int((mid - 1))))
    } else if ((arr[mid] as! Int) < x) {
        return Int(bsearchRec((arr as! [Int]), Int(x), Int((mid + 1)), Int(high)))
    }
    
    return Int(mid)
}
func main() {
    let nums = ([-31, 0, 1, 2, 2, 4, 65, 83, 99, 782] as! [Int])
    var x: Int = 2
    var idx: Int = Int(bsearch((nums as! [Int]), Int(x)))
    if (idx >= 0) {
        print(_p((((_p(x) + " is at index ") + _p(idx)) + ".")))
    } else {
        print(_p((_p(x) + " is not found.")))
    }
    x = 5
    idx = Int(bsearchRec((nums as! [Int]), Int(x), 0, Int((Int(((nums).count)) - 1))))
    if (idx >= 0) {
        print(_p((((_p(x) + " is at index ") + _p(idx)) + ".")))
    } else {
        print(_p((_p(x) + " is not found.")))
    }
}
_ = main()
