// Generated by Mochi transpiler v0.10.41 on 2025-07-27 16:22:45 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bsearch(_ arr: [Int], _ x: Int) -> Int {
        var low: Int = 0
        var high: Int = (Int(((arr).count)) - 1)
        while (low <= high) {
            let mid = (Int((low + high)) / 2)
            if ((arr[mid] as! Int) > x) {
                high = Int((mid - 1))
            } else if ((arr[mid] as! Int) < x) {
                low = Int((mid + 1))
            } else {
                return Int(mid)
            }
            
        }
        return Int(-1)
    }
    func bsearchRec(_ arr: [Int], _ x: Int, _ low: Int, _ high: Int) -> Int {
        if (high < low) {
            return Int(-1)
        }
        let mid = (Int((low + high)) / 2)
        if ((arr[mid] as! Int) > x) {
            return Int(bsearchRec((arr as! [Int]), Int(x), Int(low), Int((mid - 1))))
        } else if ((arr[mid] as! Int) < x) {
            return Int(bsearchRec((arr as! [Int]), Int(x), Int((mid + 1)), Int(high)))
        }
        
        return Int(mid)
    }
    func main() {
        let nums = ([-31, 0, 1, 2, 2, 4, 65, 83, 99, 782] as! [Int])
        var x: Int = 2
        var idx: Int = Int(bsearch((nums as! [Int]), Int(x)))
        if (idx >= 0) {
            print(_p((((_p(x) + " is at index ") + _p(idx)) + ".")))
        } else {
            print(_p((_p(x) + " is not found.")))
        }
        x = 5
        idx = Int(bsearchRec((nums as! [Int]), Int(x), 0, Int((Int(((nums).count)) - 1))))
        if (idx >= 0) {
            print(_p((((_p(x) + " is at index ") + _p(idx)) + ".")))
        } else {
            print(_p((_p(x) + " is not found.")))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
