// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:29 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() { res = res * 1000000000 + Int64(d) }
        if res > Int64(Int.max) { return Int.max }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() / rhs.toInt())
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() % rhs.toInt())
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var zero: BigInt = BigInt(BigInt(0))
    var one: BigInt = BigInt(BigInt(1))
    var two: BigInt = BigInt(BigInt(2))
    var three: BigInt = BigInt(BigInt(3))
    var four: BigInt = BigInt(BigInt(4))
    var five: BigInt = BigInt(BigInt(5))
    var six: BigInt = BigInt(BigInt(6))
    var ten: BigInt = BigInt(BigInt(10))
    var k100: BigInt = BigInt(BigInt(100000))
    func gcd(_ a: BigInt, _ b: BigInt) -> BigInt {
        var x: BigInt = BigInt(a)
        var y: BigInt = BigInt(b)
        while (y != zero) {
            var t: BigInt = BigInt((x % y))
            x = BigInt(y)
            y = BigInt(t)
        }
        return BigInt(x)
    }
    func absBig(_ x: BigInt) -> BigInt {
        if (x < zero) {
            return BigInt((zero - x))
        }
        return BigInt(x)
    }
    func pollardRho(_ n: BigInt, _ c: BigInt) -> BigInt {
        func g(_ x: BigInt, _ y: BigInt) -> BigInt {
            var x2: BigInt = BigInt((x * x))
            x2 = BigInt((x2 + c))
            return BigInt((x2 % y))
        }
        var x: BigInt = BigInt(BigInt(2))
        var y: BigInt = BigInt(BigInt(2))
        var z: BigInt = BigInt(BigInt(1))
        var d: BigInt = BigInt(BigInt(0))
        var count: Int = 0
        while true {
            x = BigInt(g(BigInt(x), BigInt(n)))
            y = BigInt(g(BigInt(g(BigInt(y), BigInt(n))), BigInt(n)))
            d = BigInt(absBig(BigInt((x - y))))
            d = BigInt((d % n))
            z = BigInt((z * d))
            count = Int((count + 1))
            if (count == 100) {
                d = BigInt(gcd(BigInt(z), BigInt(n)))
                if (d != one) {
                    break
                }
                z = BigInt(one)
                count = 0
            }
        }
        if (d == n) {
            return BigInt(zero)
        }
        return BigInt(d)
    }
    func smallestPrimeFactorWheel(_ n: BigInt, _ max: BigInt) -> BigInt {
        if ((n % two) == zero) {
            return BigInt(two)
        }
        if ((n % three) == zero) {
            return BigInt(three)
        }
        if ((n % five) == zero) {
            return BigInt(five)
        }
        var k: BigInt = BigInt(BigInt(7))
        let inc: [BigInt] = ([four, two, four, two, four, six, two, six] as! [BigInt])
        var i: Int = 0
        while ((k * k) <= n) {
            if ((n % k) == zero) {
                return BigInt(k)
            }
            k = BigInt((k + (inc[i] as! BigInt)))
            if (k > max) {
                break
            }
            i = Int((Int((i + 1)) % 8))
        }
        return BigInt(zero)
    }
    func smallestPrimeFactor(_ n: BigInt) -> BigInt {
        var s: BigInt = BigInt(smallestPrimeFactorWheel(BigInt(n), BigInt(k100)))
        if (s != zero) {
            return BigInt(s)
        }
        var c: BigInt = BigInt(BigInt(1))
        while true {
            let d = pollardRho(BigInt(n), BigInt(c))
            if (d == zero) {
                if (c == ten) {
                    return BigInt(n)
                }
                c = BigInt((c + one))
            } else {
                let factor = smallestPrimeFactorWheel(BigInt(d), BigInt(d))
                let s2 = smallestPrimeFactorWheel(BigInt((n / d)), BigInt(factor))
                if (s2 != zero) {
                    if (s2 < factor) {
                        return BigInt(s2)
                    } else {
                        return BigInt(factor)
                    }
                }
                return BigInt(factor)
            }
        }
    }
    func main() {
        let k = 19
        print(_p((("First " + _p(k)) + " terms of the Euclidâ€“Mullin sequence:")))
        print(_p(2))
        var prod: BigInt = BigInt(BigInt(2))
        var count: Int = 1
        while (count < k) {
            let z: BigInt = BigInt((prod + one))
            let t: BigInt = BigInt(smallestPrimeFactor(BigInt(z)))
            print(_p(t))
            prod = BigInt((prod * t))
            count = Int((count + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
