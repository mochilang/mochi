// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:34 GMT+7
import Foundation

func _keys<K,V>(_ m: [K: V]) -> [K] {
    Array(m.keys)
}
func pow10(_ exp: Int) -> Int {
    var n = 1
    var i = 0
    while (i < exp) {
        n = ((n * 10) as! Int)
        i = ((i + 1) as! Int)
    }
    return (n as! Int)
}
func totient(_ n: Int) -> Int {
    var tot = (n as! Int)
    var nn = (n as! Int)
    var i = 2
    while ((i * i) <= nn) {
        if ((nn % i) == 0) {
            while ((nn % i) == 0) {
                nn = ((nn / i) as! Int)
            }
            tot = ((tot - (tot / i)) as! Int)
        }
        if (i == 2) {
            i = 1
        }
        i = ((i + 2) as! Int)
    }
    if (nn > 1) {
        tot = ((tot - (tot / nn)) as! Int)
    }
    return (tot as! Int)
}
var pps: [Int: Bool] = ([:] as! [Int: Bool])
func getPerfectPowers(_ maxExp: Int) {
    let upper = Int(pow10((maxExp as! Int)))
    var i = 2
    while ((i * i) < upper) {
        var p = (i as! Int)
        while true {
            p = ((p * i) as! Int)
            if (p >= upper) {
                break
            }
            pps[p] = true
        }
        i = ((i + 1) as! Int)
    }
}
func getAchilles(_ minExp: Int, _ maxExp: Int) -> [Int: Bool] {
    let lower = Int(pow10((minExp as! Int)))
    let upper = Int(pow10((maxExp as! Int)))
    var achilles: [Int: Bool] = ([:] as! [Int: Bool])
    var b = 1
    while (((b * b) * b) < upper) {
        let b3 = ((b * b) * b)
        var a = 1
        while true {
            let p = ((b3 * a) * a)
            if (p >= upper) {
                break
            }
            if (p >= lower) {
                if (!((pps[p] != nil) as! Bool)) {
                    achilles[p] = true
                }
            }
            a = ((a + 1) as! Int)
        }
        b = ((b + 1) as! Int)
    }
    return (achilles as! [Int: Bool])
}
func sortInts(_ xs: [Int]) -> [Int] {
    var res: [Int] = ([] as! [Int])
    var tmp = (xs as! [Int])
    while (Int(((tmp).count)) > 0) {
        var min = Int(tmp[0])
        var idx = 0
        var i = 1
        while (i < Int(((tmp).count))) {
            if (Int(tmp[i]) < min) {
                min = Int(tmp[i])
                idx = (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        res = ((res + ([min] as! [Int])) as! [Int])
        var out: [Int] = ([] as! [Int])
        var j = 0
        while (j < Int(((tmp).count))) {
            if (j != idx) {
                out = ((out + ([Int(tmp[j])] as! [Int])) as! [Int])
            }
            j = ((j + 1) as! Int)
        }
        tmp = (out as! [Int])
    }
    return (res as! [Int])
}
func pad(_ n: Int, _ width: Int) -> String {
    var s = String(String(describing: n))!
    while (Int(((s).count)) < width) {
        s = ((" " + s) as! String)
    }
    return (s as! String)
}
func main() {
    let maxDigits = 15
    _ = getPerfectPowers(5)
    let achSet = (getAchilles(1, 5) as! [Int: Bool])
    var ach: [Int] = ([] as! [Int])
    for k in _keys(achSet) {
        ach = ((ach + [k]) as! [Int])
    }
    ach = (sortInts((ach as! [Int])) as! [Int])
    print("First 50 Achilles numbers:")
    var i = 0
    while (i < 50) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = ((line + String(describing: pad(Int(ach[i]), 4))) as! String)
            if (j < 9) {
                line = ((line + " ") as! String)
            }
            i = ((i + 1) as! Int)
            j = ((j + 1) as! Int)
        }
        print(line)
    }
    print("\nFirst 30 strong Achilles numbers:")
    var strong: [Int] = ([] as! [Int])
    var count = 0
    var idx = 0
    while (count < 30) {
        let tot = Int(totient(Int(ach[idx])))
        if (achSet[tot] != nil) {
            strong = ((strong + ([Int(ach[idx])] as! [Int])) as! [Int])
            count = ((count + 1) as! Int)
        }
        idx = ((idx + 1) as! Int)
    }
    i = 0
    while (i < 30) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = ((line + String(describing: pad(Int(strong[i]), 5))) as! String)
            if (j < 9) {
                line = ((line + " ") as! String)
            }
            i = ((i + 1) as! Int)
            j = ((j + 1) as! Int)
        }
        print(line)
    }
    print("\nNumber of Achilles numbers with:")
    let counts = ([1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383] as! [Int])
    var d = 2
    while (d <= maxDigits) {
        let c = Int(counts[(d - 2)])
        print(((String(describing: pad((d as! Int), 2)) + " digits: ") + String(describing: c)))
        d = ((d + 1) as! Int)
    }
}
_ = main()
