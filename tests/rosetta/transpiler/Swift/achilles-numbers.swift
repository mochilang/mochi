// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:09:03 GMT+7
import Foundation

func _keys<K,V>(_ m: [K: V]) -> [K] {
    Array(m.keys)
}
func pow10(_ exp: Int) -> Int {
    var n = 1
    var i = 0
    while (Int(i) < Int(exp)) {
        n = ((Int(n) * 10) as! Int)
        i = ((Int(i) + 1) as! Int)
    }
    return Int(n)
}
func totient(_ n: Int) -> Int {
    var tot = Int(n)
    var nn = Int(n)
    var i = 2
    while ((Int(i) * Int(i)) <= Int(nn)) {
        if ((Int(nn) % Int(i)) == 0) {
            while ((Int(nn) % Int(i)) == 0) {
                nn = ((Int(nn) / Int(i)) as! Int)
            }
            tot = ((Int(tot) - (Int(tot) / Int(i))) as! Int)
        }
        if (Int(i) == 2) {
            i = 1
        }
        i = ((Int(i) + 2) as! Int)
    }
    if (Int(nn) > 1) {
        tot = ((Int(tot) - (Int(tot) / Int(nn))) as! Int)
    }
    return Int(tot)
}
var pps: [Int: Bool] = ([:] as! [Int: Bool])
func getPerfectPowers(_ maxExp: Int) {
    let upper = Int(pow10(Int(maxExp)))
    var i = 2
    while ((Int(i) * Int(i)) < Int(upper)) {
        var p = Int(i)
        while true {
            p = ((Int(p) * Int(i)) as! Int)
            if (Int(p) >= Int(upper)) {
                break
            }
            pps[Int(p)] = true
        }
        i = ((Int(i) + 1) as! Int)
    }
}
func getAchilles(_ minExp: Int, _ maxExp: Int) -> [Int: Bool] {
    let lower = Int(pow10(Int(minExp)))
    let upper = Int(pow10(Int(maxExp)))
    var achilles: [Int: Bool] = ([:] as! [Int: Bool])
    var b = 1
    while (((Int(b) * Int(b)) * Int(b)) < Int(upper)) {
        let b3 = ((Int(b) * Int(b)) * Int(b))
        var a = 1
        while true {
            let p = ((Int(b3) * Int(a)) * Int(a))
            if (Int(p) >= Int(upper)) {
                break
            }
            if (Int(p) >= Int(lower)) {
                if (!(((pps as! [Int: Bool])[Int(p)] != nil) as! Bool)) {
                    achilles[Int(p)] = true
                }
            }
            a = ((Int(a) + 1) as! Int)
        }
        b = ((Int(b) + 1) as! Int)
    }
    return (achilles as! [Int: Bool])
}
func sortInts(_ xs: [Int]) -> [Int] {
    var res: [Int] = ([] as! [Int])
    var tmp = (xs as! [Int])
    while (Int((((tmp as! [Int])).count)) > 0) {
        var min = Int(tmp[0])
        var idx = 0
        var i = 1
        while (Int(i) < Int((((tmp as! [Int])).count))) {
            if (Int(tmp[Int(i)]) < Int(min)) {
                min = Int(tmp[Int(i)])
                idx = Int(i)
            }
            i = ((Int(i) + 1) as! Int)
        }
        res = (((res as! [Int]) + ([Int(min)] as! [Int])) as! [Int])
        var out: [Int] = ([] as! [Int])
        var j = 0
        while (Int(j) < Int((((tmp as! [Int])).count))) {
            if (Int(j) != Int(idx)) {
                out = (((out as! [Int]) + ([Int(tmp[Int(j)])] as! [Int])) as! [Int])
            }
            j = ((Int(j) + 1) as! Int)
        }
        tmp = (out as! [Int])
    }
    return (res as! [Int])
}
func pad(_ n: Int, _ width: Int) -> String {
    var s = String(String(describing: Int(n)))
    while (Int(((String(s)).count)) < Int(width)) {
        s = ((" " + String(s)) as! String)
    }
    return String(s)
}
func main() {
    let maxDigits = 15
    _ = getPerfectPowers(5)
    let achSet = (getAchilles(1, 5) as! [Int: Bool])
    var ach: [Int] = ([] as! [Int])
    for k in _keys(achSet) {
        ach = (((ach as! [Int]) + ([k] as! [Any])) as! [Int])
    }
    ach = (sortInts((ach as! [Int])) as! [Int])
    print("First 50 Achilles numbers:")
    var i = 0
    while (Int(i) < 50) {
        var line = ""
        var j = 0
        while (Int(j) < 10) {
            line = ((String(line) + String(pad(Int(ach[Int(i)]), 4))) as! String)
            if (Int(j) < 9) {
                line = ((String(line) + " ") as! String)
            }
            i = ((Int(i) + 1) as! Int)
            j = ((Int(j) + 1) as! Int)
        }
        print(String(line))
    }
    print("\nFirst 30 strong Achilles numbers:")
    var strong: [Int] = ([] as! [Int])
    var count = 0
    var idx = 0
    while (Int(count) < 30) {
        let tot = Int(totient(Int(ach[Int(idx)])))
        if ((achSet as! [Int: Bool])[Int(tot)] != nil) {
            strong = (((strong as! [Int]) + ([Int(ach[Int(idx)])] as! [Int])) as! [Int])
            count = ((Int(count) + 1) as! Int)
        }
        idx = ((Int(idx) + 1) as! Int)
    }
    i = 0
    while (Int(i) < 30) {
        var line = ""
        var j = 0
        while (Int(j) < 10) {
            line = ((String(line) + String(pad(Int(strong[Int(i)]), 5))) as! String)
            if (Int(j) < 9) {
                line = ((String(line) + " ") as! String)
            }
            i = ((Int(i) + 1) as! Int)
            j = ((Int(j) + 1) as! Int)
        }
        print(String(line))
    }
    print("\nNumber of Achilles numbers with:")
    let counts = ([1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383] as! [Int])
    var d = 2
    while (Int(d) <= Int(maxDigits)) {
        let c = Int(counts[(Int(d) - 2)])
        print(((String(pad(Int(d), 2)) + " digits: ") + String(String(describing: Int(c)))))
        d = ((Int(d) + 1) as! Int)
    }
}
_ = main()
