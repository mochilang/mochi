// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:50 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sortRunes(_ s: String) -> String {
        var arr: [String] = ([] as! [String])
        var i = 0
        while (i < Int(((s).count))) {
            arr = ((arr + [String(Array(s)[i..<(i + 1)])]) as! [String])
            i = Int((i + 1))
        }
        var n = Int(((arr).count))
        var m = 0
        while (m < n) {
            var j = 0
            while (j < (n - 1)) {
                if (String(describing: arr[j]) > String(describing: arr[(j + 1)])) {
                    let tmp = String(describing: arr[j])
                    arr[j] = String(describing: arr[(j + 1)])
                    arr[(j + 1)] = String(tmp)
                }
                j = Int((j + 1))
            }
            m = Int((m + 1))
        }
        var out = ""
        i = 0
        while (i < n) {
            out = String((out + String(describing: arr[i])))
            i = Int((i + 1))
        }
        return String(out)
    }
    func deranged(_ a: String, _ b: String) -> Bool {
        if (Int(((a).count)) != Int(((b).count))) {
            return false
        }
        var i = 0
        while (i < Int(((a).count))) {
            if (String(Array(a)[i..<(i + 1)]) == String(Array(b)[i..<(i + 1)])) {
                return false
            }
            i = Int((i + 1))
        }
        return true
    }
    func main() {
        let words = (["constitutionalism", "misconstitutional"] as! [String])
        var m: [String: [String]] = ([:] as! [String: [String]])
        var bestLen = 0
        var w1 = ""
        var w2 = ""
        for w in words {
            if (Int(((w).count)) <= bestLen) {
                continue
            }
            let k = String(describing: sortRunes(String(w)))
            if (!Bool((m[k] != nil))) {
                m[k] = ([w] as! [String])
                continue
            }
            for c in (m[k]! as! [String]) {
                if Bool(deranged(String(w), String(c))) {
                    bestLen = Int(((w).count))
                    w1 = String(c)
                    w2 = String(w)
                    break
                }
            }
            m[k] = (((m[k]! as! [String]) + [w]) as! [String])
        }
        print(((((w1 + " ") + w2) + " : Length ") + String(describing: bestLen)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
