// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:10:06 GMT+7
import Foundation

func sortRunes(_ s: String) -> String {
    var arr: [String] = ([] as! [String])
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        arr = (((arr as! [String]) + [String(String(Array(s)[Int(i)..<(Int(i) + 1)]))]) as! [String])
        i = ((Int(i) + 1) as! Int)
    }
    var n = Int((((arr as! [String])).count))
    var m = 0
    while (Int(m) < Int(n)) {
        var j = 0
        while (Int(j) < (Int(n) - 1)) {
            if (String(arr[Int(j)]) > String(arr[(Int(j) + 1)])) {
                let tmp = String(arr[Int(j)])
                arr[Int(j)] = String(arr[(Int(j) + 1)])
                arr[(Int(j) + 1)] = String(tmp)
            }
            j = ((Int(j) + 1) as! Int)
        }
        m = ((Int(m) + 1) as! Int)
    }
    var out = ""
    i = 0
    while (Int(i) < Int(n)) {
        out = ((String(out) + String(arr[Int(i)])) as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(out)
}
func deranged(_ a: String, _ b: String) -> Bool {
    if (Int(((String(a)).count)) != Int(((String(b)).count))) {
        return false
    }
    var i = 0
    while (Int(i) < Int(((String(a)).count))) {
        if (String(String(Array(a)[Int(i)..<(Int(i) + 1)])) == String(String(Array(b)[Int(i)..<(Int(i) + 1)]))) {
            return false
        }
        i = ((Int(i) + 1) as! Int)
    }
    return true
}
func main() {
    let words = (["constitutionalism", "misconstitutional"] as! [String])
    var m: [String: [String]] = ([:] as! [String: [String]])
    var bestLen = 0
    var w1 = ""
    var w2 = ""
    for w in (words as! [String]) {
        if (Int(((w).count)) <= Int(bestLen)) {
            continue
        }
        let k = String(sortRunes((w as! String)))
        if (!(((m as! [String: [String]])[String(k)] != nil) as! Bool)) {
            m[String(k)] = (([w] as! [Any]) as! [String])
            continue
        }
        for c in (m[String(k)]! as! [String]) {
            if Bool(deranged((w as! String), (c as! String))) {
                bestLen = Int(((w).count))
                w1 = (c as! String)
                w2 = (w as! String)
                break
            }
        }
        m[String(k)] = (((((m[String(k)]! as! [String]) + [w]) as! [String]) as! [Any]) as! [String])
    }
    print(((((String(w1) + " ") + String(w2)) + " : Length ") + String(String(describing: Int(bestLen)))))
}
_ = main()
