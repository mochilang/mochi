// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:15:13 GMT+7
import Foundation

func sortRunes(_ s: String) -> String {
    var arr: [String] = ([] as! [String])
    var i = 0
    while (i < Int(((s).count))) {
        arr = ((arr + [String(Array(s)[i..<(i + 1)])]) as! [String])
        i = ((i + 1) as! Int)
    }
    var n = Int(((arr).count))
    var m = 0
    while (m < n) {
        var j = 0
        while (j < (n - 1)) {
            if (String(describing: arr[j]) > String(describing: arr[(j + 1)])) {
                let tmp = String(describing: arr[j])
                arr[j] = String(describing: arr[(j + 1)])
                arr[(j + 1)] = (tmp as! String)
            }
            j = ((j + 1) as! Int)
        }
        m = ((m + 1) as! Int)
    }
    var out = ""
    i = 0
    while (i < n) {
        out = ((out + String(describing: arr[i])) as! String)
        i = ((i + 1) as! Int)
    }
    return (out as! String)
}
func deranged(_ a: String, _ b: String) -> Bool {
    if (Int(((a).count)) != Int(((b).count))) {
        return false
    }
    var i = 0
    while (i < Int(((a).count))) {
        if (String(Array(a)[i..<(i + 1)]) == String(Array(b)[i..<(i + 1)])) {
            return false
        }
        i = ((i + 1) as! Int)
    }
    return true
}
func main() {
    let words = (["constitutionalism", "misconstitutional"] as! [String])
    var m: [String: [String]] = ([:] as! [String: [String]])
    var bestLen = 0
    var w1 = ""
    var w2 = ""
    for w in words {
        if (Int(((w).count)) <= bestLen) {
            continue
        }
        let k = String(describing: sortRunes((w as! String)))
        if (!((m[k] != nil) as! Bool)) {
            m[k] = ([w] as! [String])
            continue
        }
        for c in (m[k]! as! [String]) {
            if Bool(deranged((w as! String), (c as! String))) {
                bestLen = Int(((w).count))
                w1 = (c as! String)
                w2 = (w as! String)
                break
            }
        }
        m[k] = (((((m[k]! as! [String]) + [w]) as! [String]) as! [Any]) as! [String])
    }
    print(((((w1 + " ") + w2) + " : Length ") + String(describing: bestLen)))
}
_ = main()
