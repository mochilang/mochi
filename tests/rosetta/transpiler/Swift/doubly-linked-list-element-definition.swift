// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:02 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func Node(_ value: String, _ next: Any, _ prev: Any) -> [String: Any] {
        return (["value": value, "next": next, "prev": prev] as! [String: Any])
    }
    func main() {
        var a: [String: Any] = (Node("A", nil, nil) as! [String: Any])
        var b: [String: Any] = (Node("B", nil, a) as! [String: Any])
        a["next"] = b
        var c: [String: Any] = (Node("C", nil, b) as! [String: Any])
        b["next"] = c
        var p: [String: Any] = a
        var line: String = ""
        while (p != nil) {
            line = String(describing: (line + String(describing: p["value"]!)))
            p = (p["next"]! as! [String: Any])
            if (p != nil) {
                line = String(describing: (line + " "))
            }
        }
        print(_p(line))
        p = (c as! [String: Any])
        line = ""
        while (p != nil) {
            line = String(describing: (line + String(describing: p["value"]!)))
            p = (p["prev"]! as! [String: Any])
            if (p != nil) {
                line = String(describing: (line + " "))
            }
        }
        print(_p(line))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
