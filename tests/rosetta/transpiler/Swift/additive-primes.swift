// Generated by Mochi transpiler v0.10.40 on 2025-07-25 23:55:22 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return ((n == 2) as! Bool)
        }
        if ((n % 3) == 0) {
            return ((n == 3) as! Bool)
        }
        var d = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 2) as! Int)
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 4) as! Int)
        }
        return true
    }
    func sumDigits(_ n: Int) -> Int {
        var s = 0
        var x = (n as! Int)
        while (x > 0) {
            s = ((s + (x % 10)) as! Int)
            x = Int((x / 10))
        }
        return (s as! Int)
    }
    func pad(_ n: Int) -> String {
        if (n < 10) {
            return (("  " + String(describing: n)) as! String)
        }
        if (n < 100) {
            return ((" " + String(describing: n)) as! String)
        }
        return String(describing: n)
    }
    func main() {
        print("Additive primes less than 500:")
        var count = 0
        var line = ""
        var lineCount = 0
        var i = 2
        while (i < 500) {
            if (Bool(isPrime((i as! Int))) && Bool(isPrime(Int(sumDigits((i as! Int)))))) {
                count = ((count + 1) as! Int)
                line = (((line + String(describing: pad((i as! Int)))) + "  ") as! String)
                lineCount = ((lineCount + 1) as! Int)
                if (lineCount == 10) {
                    print(String(describing: String(Array((line as! String))[0..<((Int(((line).count)) - 2) as! Int)])))
                    line = ""
                    lineCount = 0
                }
            }
            if (i > 2) {
                i = ((i + 2) as! Int)
            } else {
                i = ((i + 1) as! Int)
            }
        }
        if (lineCount > 0) {
            print(String(describing: String(Array((line as! String))[0..<((Int(((line).count)) - 2) as! Int)])))
        }
        print((String(describing: count) + " additive primes found."))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
