// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:13 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let width = 320
    let height = 240
    var img: [[String]] = ([] as! [[String]])
    var y: Int = 0
    while (y < height) {
        var row: [String] = ([] as! [String])
        var x: Int = 0
        while (x < width) {
            row = (_append(row, "green") as! [String])
            x = Int((x + 1))
        }
        img = (_append(img, row) as! [[String]])
        y = Int((y + 1))
    }
    img[100][100] = "red"
    print(_p((("The color of the pixel at (  0,   0) is " + String(describing: img[0][0])) + ".")))
    print(_p((("The color of the pixel at (100, 100) is " + String(describing: img[100][100])) + ".")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
