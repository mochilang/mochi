// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:40 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func ord(_ ch: String) -> Int {
        if (ch == "a") {
            return 97
        }
        if (ch == "π") {
            return 960
        }
        if (ch == "A") {
            return 65
        }
        return 0
    }
    func chr(_ n: Int) -> String {
        if (n == 97) {
            return "a"
        }
        if (n == 960) {
            return "π"
        }
        if (n == 65) {
            return "A"
        }
        return "?"
    }
    var b: Int = Int(ord("a"))
    var r: Int = Int(ord("π"))
    var s: String = "aπ"
    print(_p(((((_p(b) + " ") + _p(r)) + " ") + s)))
    print(_p((((("string cast to []rune: [" + _p(b)) + " ") + _p(r)) + "]")))
    print(_p(((("    string range loop: " + _p(b)) + " ") + _p(r))))
    print(_p("         string bytes: 0x61 0xcf 0x80"))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
