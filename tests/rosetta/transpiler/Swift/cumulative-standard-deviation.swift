// Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:37:51 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func sqrtApprox(_ x: Double) -> Double {
    if (x <= 0.0) {
        return 0.0
    }
    var g: Double = x
    var i: Int = 0
    while (i < 20) {
        g = Double((Double((g + (x / g))) / 2.0))
        i = ((i + 1) as! Int)
    }
    return g
}
struct Rsdv {
    var n: Double
    var a: Double
    var q: Double
}
func newRsdv() -> Rsdv {
    return Rsdv(n: 0.0, a: 0.0, q: 0.0)
}
func add(_ r: Rsdv, _ x: Double) -> Rsdv {
    let n1 = (r.n + 1.0)
    let a1 = (r.a + (Double((x - r.a)) / n1))
    let q1 = (r.q + (Double((x - r.a)) * Double((x - a1))))
    return Rsdv(n: n1, a: a1, q: q1)
}
func sd(_ r: Rsdv) -> Double {
    return Double(sqrtApprox(Double((r.q / r.n))))
}
func main() {
    var r: Rsdv = newRsdv()
    for x in ([2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0] as! [Double]) {
        r = (add((r as! Rsdv), (x as! Double)) as! Rsdv)
        print(_p(_p(Double(sd((r as! Rsdv))))))
    }
}
_ = main()
