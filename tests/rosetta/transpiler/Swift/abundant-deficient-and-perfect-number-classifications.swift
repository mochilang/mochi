// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:09:30 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pfacSum(_ i: Int) -> Int {
        var sum = 0
        var p = 1
        while (p <= (i / 2)) {
            if ((i % p) == 0) {
                sum = ((sum + p) as! Int)
            }
            p = ((p + 1) as! Int)
        }
        return (sum as! Int)
    }
    func main() {
        var d = 0
        var a = 0
        var pnum = 0
        var i = 1
        while (i <= 20000) {
            let j = Int(pfacSum((i as! Int)))
            if (j < i) {
                d = ((d + 1) as! Int)
            }
            if (j == i) {
                pnum = ((pnum + 1) as! Int)
            }
            if (j > i) {
                a = ((a + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        print((("There are " + String(describing: d)) + " deficient numbers between 1 and 20000"))
        print((("There are " + String(describing: a)) + " abundant numbers  between 1 and 20000"))
        print((("There are " + String(describing: pnum)) + " perfect numbers between 1 and 20000"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
