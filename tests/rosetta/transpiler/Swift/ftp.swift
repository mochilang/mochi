// Generated by Mochi transpiler v0.10.57 on 2025-08-04 19:44:53 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func _len(_ v: Any) -> Int {
    if let s = v as? String { return Array(s).count }
    if let a = v as? [Any] { return a.count }
    if let a = v as? [Double] { return a.count }
    if let a = v as? [Int] { return a.count }
    if let m = v as? [AnyHashable: Any] { return m.count }
    return 0
}
struct FileInfo: Codable {
    var name: String
    var size: Int
    var kind: String
    init() {
        self.name = ""
        self.size = 0
        self.kind = ""
    }
    init(name: String, size: Int, kind: String) {
        self.name = name
        self.size = size
        self.kind = kind
    }
}
struct FTPConn: Codable {
    var dir: String
    init() {
        self.dir = ""
    }
    init(dir: String) {
        self.dir = dir
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let serverData = ["pub": ["somefile.bin": "This is a file from the FTP server.", "readme.txt": "Hello from ftp."]]
    let serverNames = ["pub": (["somefile.bin", "readme.txt"] as! [String])]
    func connect(_ hostport: String) -> FTPConn {
        print(_p(("Connected to " + hostport)))
        return FTPConn(dir: "/")
    }
    func login(_ conn: FTPConn, _ user: String, _ pass: String) {
        print(_p(("Logged in as " + user)))
    }
    func changeDir(_ conn: inout FTPConn, _ dir: String) {
        conn.dir = (dir as! String)
    }
    func list(_ conn: FTPConn) -> [FileInfo] {
        let names = serverNames[conn.dir]!
        let dataDir = serverData[conn.dir]!
        var out: [FileInfo] = ([] as! [FileInfo])
        for name in names {
            let content = dataDir[name]!
            out = (_append(out, FileInfo(name: name, size: Int(_len(content)), kind: "file")) as! [FileInfo])
        }
        return out
    }
    func retrieve(_ conn: FTPConn, _ name: String) -> String {
        return (serverData[conn.dir]![name] as! String)
    }
    func main() {
        var conn = connect("localhost:21")
        _ = login((conn as! FTPConn), "anonymous", "anonymous")
        _ = changeDir(&conn, "pub")
        print(_p(conn.dir))
        let files: [FileInfo] = (list((conn as! FTPConn)) as! [FileInfo])
        for f in files {
            print(_p(((f.name + " ") + String(describing: f.size))))
        }
        let data = String(describing: retrieve((conn as! FTPConn), "somefile.bin"))
        print(_p((("Wrote " + String(describing: Int(((data).count)))) + " bytes to somefile.bin")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
