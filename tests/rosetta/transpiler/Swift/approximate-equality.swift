// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:53:06 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return Double(-x)
        }
        return Double(x)
    }
    func maxf(_ a: Double, _ b: Double) -> Double {
        if (a > b) {
            return Double(a)
        }
        return Double(b)
    }
    func isClose(_ a: Double, _ b: Double) -> Bool {
        let relTol = 0.000000001
        let t = Double(abs(Double((a - b))))
        let u = (relTol * Double(maxf(Double(abs(Double(a))), Double(abs(Double(b))))))
        return Bool((t <= u))
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = Double(x)
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i + 1))
        }
        return Double(guess)
    }
    func main() {
        let root2 = Double(sqrtApprox(2.0))
        let pairs = ([([100000000000000.02, 100000000000000.02] as! [Double]), ([100.01, 100.011] as! [Double]), ([(10000000000000.002 / 10000.0), 1000000000.0000001] as! [Double]), ([0.001, 0.0010000001] as! [Double]), ([0.000000000000000000000101, 0.0] as! [Double]), ([(root2 * root2), 2.0] as! [Double]), ([(Double(-root2) * root2), -2.0] as! [Double]), ([100000000000000000.0, 100000000000000000.0] as! [Double]), ([3.141592653589793, 3.141592653589793] as! [Double])] as! [[Double]])
        for pair in pairs {
            let a = Double(pair[0])
            let b = Double(pair[1])
            let s = String(describing: (Bool(isClose(Double(a), Double(b))) ? "≈" : "≉"))
            print(((((String(describing: a) + " ") + s) + " ") + String(describing: b)))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
