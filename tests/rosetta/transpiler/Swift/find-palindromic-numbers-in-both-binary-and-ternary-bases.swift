// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:31 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func toBase(_ n: Int, _ b: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var s: String = ""
        var x: Int = n
        while (x > 0) {
            s = ((_p((x % b)) + s) as! String)
            x = ((x / b) as! Int)
        }
        return (s as! String)
    }
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && ((String(Array(str)[0]) as! String) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        while (i < Int(((str).count))) {
            n = ((((n * 10) + Int(String(Array(str)[i..<(i + 1)]))) - "0") as! Int)
            i = ((i + 1) as! Int)
        }
        if neg {
            n = (-n as! Int)
        }
        return (n as! Int)
    }
    func parseIntBase(_ s: String, _ b: Int) -> Int {
        var n: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            n = (((n * b) + Int(Int(String(describing: (String(Array(s)[i..<(i + 1)]) as! String)))!)) as! Int)
            i = ((i + 1) as! Int)
        }
        return (n as! Int)
    }
    func reverseStr(_ s: String) -> String {
        var out: String = ""
        var i: Int = (Int(((s).count)) - 1)
        while (i >= 0) {
            out = ((out + String(Array(s)[i..<(i + 1)])) as! String)
            i = ((i - 1) as! Int)
        }
        return (out as! String)
    }
    func isPalindrome(_ s: String) -> Bool {
        return (s == String(describing: reverseStr((s as! String))))
    }
    func isPalindromeBin(_ n: Int) -> Bool {
        let b = String(describing: toBase((n as! Int), 2))
        return isPalindrome((b as! String))
    }
    func myMin(_ a: Int, _ b: Int) -> Int {
        if (a < b) {
            return (a as! Int)
        }
        return (b as! Int)
    }
    func myMax(_ a: Int, _ b: Int) -> Int {
        if (a > b) {
            return (a as! Int)
        }
        return (b as! Int)
    }
    func reverse3(_ n: Int) -> Int {
        var x: Int = 0
        var y: Int = n
        while (y != 0) {
            x = (((x * 3) + Int((y % 3))) as! Int)
            y = ((y / 3) as! Int)
        }
        return (x as! Int)
    }
    func show(_ n: Int) {
        print(_p(("Decimal : " + _p(n))))
        print(_p(("Binary  : " + String(describing: toBase((n as! Int), 2)))))
        print(_p(("Ternary : " + String(describing: toBase((n as! Int), 3)))))
        print(_p(""))
    }
    func main() {
        print(_p("The first 6 numbers which are palindromic in both binary and ternary are :\n"))
        _ = show(0)
        var count: Int = 1
        var lo: Int = 0
        var hi: Int = 1
        var pow2: Int = 1
        var pow3: Int = 1
        while true {
            var i: Int = lo
            while (i < hi) {
                var n: Int = ((Int(((i * 3) + 1)) * pow3) + Int(reverse3((i as! Int))))
                if isPalindromeBin((n as! Int)) {
                    _ = show((n as! Int))
                    count = ((count + 1) as! Int)
                    if (count >= 6) {
                        return
                    }
                }
                i = ((i + 1) as! Int)
            }
            if (i == pow3) {
                pow3 = ((pow3 * 3) as! Int)
            } else {
                pow2 = ((pow2 * 4) as! Int)
            }
            while true {
                while (pow2 <= pow3) {
                    pow2 = ((pow2 * 4) as! Int)
                }
                var lo2: Int = ((Int(((pow2 / pow3) - 1)) / 3) as! Int)
                var hi2: Int = (((Int((((pow2 * 2) / pow3) - 1)) / 3) as! Int) + 1)
                var lo3: Int = ((pow3 / 3) as! Int)
                var hi3: Int = pow3
                if (lo2 >= hi3) {
                    pow3 = ((pow3 * 3) as! Int)
                } else if (lo3 >= hi2) {
                    pow2 = ((pow2 * 4) as! Int)
                } else {
                    lo = Int(myMax((lo2 as! Int), (lo3 as! Int)))
                    hi = Int(myMin((hi2 as! Int), (hi3 as! Int)))
                    break
                }
                
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
