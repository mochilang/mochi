// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:32:50 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sortFloat(_ xs: [Double]) -> [Double] {
        var arr = xs
        var n = Int(((arr).count))
        var i = 0
        while (i < n) {
            var j = 0
            while (j < (n - 1)) {
                if (arr[j] > arr[(j + 1)]) {
                    let tmp = arr[j]
                    arr[j] = arr[(j + 1)]
                    arr[(j + 1)] = Double(tmp)
                }
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        return (arr as! [Double])
    }
    func median(_ a: [Double]) -> Double {
        var arr = (sortFloat((a as! [Double])) as! [Double])
        let half = Int((Int(((arr).count)) / 2))
        var m = arr[half]
        if ((Int(((arr).count)) % 2) == 0) {
            m = Double((Double((m + arr[(half - 1)])) / 2.0))
        }
        return Double(m)
    }
    print(_p(_p(Double(median(([3.0, 1.0, 4.0, 1.0] as! [Double]))))))
    print(_p(_p(Double(median(([3.0, 1.0, 4.0, 1.0, 5.0] as! [Double]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
