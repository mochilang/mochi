// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:57 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func factorial(_ n: Int) -> Int {
        var result: Int = 1
        var i: Int = 2
        while (i <= n) {
            result = Int((result * i))
            i = Int((i + 1))
        }
        return Int(result)
    }
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return (n == 2)
        }
        var d: Int = 3
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 2))
        }
        return true
    }
    func padLeft(_ s: String, _ w: Int) -> String {
        var out: String = s
        while (Int(((out).count)) < w) {
            out = String(describing: (" " + out))
        }
        return String(describing: out)
    }
    func main() {
        var n: Int = 0
        var count: Int = 0
        while (count < 10) {
            n = Int((n + 1))
            let f = Int(factorial(Int(n)))
            if isPrime(Int((f - 1))) {
                count = Int((count + 1))
                print(_p(((((String(describing: padLeft(String(describing: _p(count)), 2)) + ": ") + String(describing: padLeft(String(describing: _p(n)), 2))) + "! - 1 = ") + _p((f - 1)))))
            }
            if ((count < 10) && isPrime(Int((f + 1)))) {
                count = Int((count + 1))
                print(_p(((((String(describing: padLeft(String(describing: _p(count)), 2)) + ": ") + String(describing: padLeft(String(describing: _p(n)), 2))) + "! + 1 = ") + _p((f + 1)))))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
