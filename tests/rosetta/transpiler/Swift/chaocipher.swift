// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:34 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(Array(s)[i..<(i + 1)]) == ch) {
                return (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return (-1 as! Int)
    }
    func rotate(_ s: String, _ n: Int) -> String {
        return ((String(Array(s)[n..<Array(s).count]) + String(Array(s)[0..<n])) as! String)
    }
    func scrambleLeft(_ s: String) -> String {
        return ((((String(Array(s)[0..<1]) + String(Array(s)[2..<14])) + String(Array(s)[1..<2])) + String(Array(s)[14..<Array(s).count])) as! String)
    }
    func scrambleRight(_ s: String) -> String {
        return (((((String(Array(s)[1..<3]) + String(Array(s)[4..<15])) + String(Array(s)[3..<4])) + String(Array(s)[15..<Array(s).count])) + String(Array(s)[0..<1])) as! String)
    }
    func chao(_ text: String, _ encode: Bool) -> String {
        var left: String = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
        var right: String = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
        var out: String = ""
        var i: Int = 0
        while (i < Int(((text).count))) {
            let ch = String(Array(text)[i..<(i + 1)])
            var idx: Int = 0
            if encode {
                idx = Int((String(describing: (right as! String)).firstIndex(of: Character(String(describing: (ch as! String))))?.utf16Offset(in: String(describing: (right as! String)) ) ?? -1))
                out = ((out + String(Array(left)[idx..<(idx + 1)])) as! String)
            } else {
                idx = Int((String(describing: (left as! String)).firstIndex(of: Character(String(describing: (ch as! String))))?.utf16Offset(in: String(describing: (left as! String)) ) ?? -1))
                out = ((out + String(Array(right)[idx..<(idx + 1)])) as! String)
            }
            left = String(describing: rotate((left as! String), (idx as! Int)))
            right = String(describing: rotate((right as! String), (idx as! Int)))
            left = String(describing: scrambleLeft((left as! String)))
            right = String(describing: scrambleRight((right as! String)))
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func main() {
        let plain = "WELLDONEISBETTERTHANWELLSAID"
        let cipher = String(describing: chao((plain as! String), true))
        print(_p(plain))
        print(_p(cipher))
        print(_p(String(describing: chao((cipher as! String), false))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
