// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:26 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        var i: Int = 2
        while ((i * i) <= n) {
            if ((n % i) == 0) {
                return false
            }
            i = ((i + 1) as! Int)
        }
        return true
    }
    func search(_ base: Int, _ prefix: Int, _ depth: Int, _ limit: Int, _ best: Int) -> Int {
        var b: Int = best
        var d: Int = 1
        while (d < base) {
            let val = ((prefix * base) + d)
            if isPrime((val as! Int)) {
                if (val > b) {
                    b = (val as! Int)
                }
                if ((depth + 1) < limit) {
                    b = Int(search((base as! Int), (val as! Int), ((depth + 1) as! Int), (limit as! Int), (b as! Int)))
                }
            }
            d = ((d + 1) as! Int)
        }
        return (b as! Int)
    }
    func largest(_ base: Int) -> Int {
        return Int(search((base as! Int), 0, 0, 6, 0))
    }
    func main() {
        var b: Int = 3
        while (b <= 17) {
            print(_p(((_p(b) + ": ") + _p(Int(largest((b as! Int)))))))
            b = ((b + 1) as! Int)
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
