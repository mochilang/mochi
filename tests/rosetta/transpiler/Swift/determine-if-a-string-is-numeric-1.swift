// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:11:55 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isNumeric(_ s: String) -> Bool {
        if (s == "NaN") {
            return true
        }
        var i: Int = 0
        if (Int(((s).count)) == 0) {
            return false
        }
        if (((String(Array(s)[0]) as! String) == "+") || ((String(Array(s)[0]) as! String) == "-")) {
            if (Int(((s).count)) == 1) {
                return false
            }
            i = 1
        }
        var digits: Bool = false
        var dot: Bool = false
        while (i < Int(((s).count))) {
            let ch = (String(Array(s)[i]) as! String)
            if ((ch >= "0") && (ch <= "9")) {
                digits = true
                i = Int((i &+ 1))
            } else if ((ch == ".") && (dot == false)) {
                dot = true
                i = Int((i &+ 1))
            } else if (((ch == "e") || (ch == "E")) && digits) {
                i = Int((i &+ 1))
                if ((i < Int(((s).count))) && (((String(Array(s)[i]) as! String) == "+") || ((String(Array(s)[i]) as! String) == "-"))) {
                    i = Int((i &+ 1))
                }
                var ed: Bool = false
                while (((i < Int(((s).count))) && ((String(Array(s)[i]) as! String) >= "0")) && ((String(Array(s)[i]) as! String) <= "9")) {
                    ed = true
                    i = Int((i &+ 1))
                }
                return (ed && (i == Int(((s).count))))
            } else {
                return false
            }
            
            
        }
        return digits
    }
    func main() {
        print(_p("Are these strings numeric?"))
        let strs: [String] = (["1", "3.14", "-100", "1e2", "NaN", "rose"] as! [String])
        for s in strs {
            print(_p(((("  " + s) + " -> ") + _p(isNumeric((s as! String))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
