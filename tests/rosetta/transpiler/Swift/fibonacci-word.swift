// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:22:53 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _keys<K,V>(_ m: [K: V]) -> [K] {
    Array(m.keys)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct math {}
    extension math { static func log(_ x: Double) -> Double { Foundation.log(x) } }
    func entropy(_ s: String) -> Double {
        var counts: [String: Int] = ([:] as! [String: Int])
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)]))
            if (counts[ch] != nil) {
                counts[ch] = ((counts[ch]! + 1) as! Int)
            } else {
                counts[ch] = 1
            }
            i = ((i + 1) as! Int)
        }
        var hm: Double = 0.0
        for k in (_keys(counts) as! [String]) {
            let c = Double(counts[k]!)
            hm = Double((hm + (c * Double((Double(math.log(Double(c))) / Double(math.log(2.0)))))))
        }
        let l = Double(((s).count))
        return Double((Double((Double(math.log(Double(l))) / Double(math.log(2.0)))) - (hm / l)))
    }
    func fibonacciWord(_ n: Int) -> String {
        var a: String = "1"
        var b: String = "0"
        var i: Int = 1
        while (i < n) {
            let tmp = b
            b = ((b + a) as! String)
            a = (tmp as! String)
            i = ((i + 1) as! Int)
        }
        return (a as! String)
    }
    func main() {
        print(_p(((String(describing: pad("N", 3)) + String(describing: pad("Length", 9))) + "  Entropy      Word")))
        var n: Int = 1
        while (n < 10) {
            let s = String(describing: fibonacciWord((n as! Int)))
            print(_p((((((String(describing: pad((_p(n) as! String), 3)) + String(describing: pad((_p(Int(((s).count))) as! String), 9))) + "  ") + String(describing: fmt(Double(entropy((s as! String)))))) + "  ") + s)))
            n = ((n + 1) as! Int)
        }
        while (n <= 37) {
            let s = String(describing: fibonacciWord((n as! Int)))
            print(_p((((String(describing: pad((_p(n) as! String), 3)) + String(describing: pad((_p(Int(((s).count))) as! String), 9))) + "  ") + String(describing: fmt(Double(entropy((s as! String))))))))
            n = ((n + 1) as! Int)
        }
    }
    func pad(_ s: String, _ w: Int) -> String {
        var t: String = s
        while (Int(((t).count)) < w) {
            t = ((" " + t) as! String)
        }
        return (t as! String)
    }
    func fmt(_ x: Double) -> String {
        var y: Double = (Double(floorf(Double(((x * 100000000.0) + 0.5)))) / 100000000.0)
        var s: String = _p(y)
        var dot: Int = Int((String(describing: (s as! String)).firstIndex(of: Character(String(describing: ".")))?.utf16Offset(in: String(describing: (s as! String)) ) ?? -1))
        if (dot == (0 - 1)) {
            s = ((s + ".00000000") as! String)
        } else {
            var d: Int = ((Int(((s).count)) - dot) - 1)
            while (d < 8) {
                s = ((s + "0") as! String)
                d = ((d + 1) as! Int)
            }
        }
        return (s as! String)
    }
    func floorf(_ x: Double) -> Double {
        let y = Int(x)
        return Double(y)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) == ch) {
                return (i as! Int)
            }
            i = ((i + 1) as! Int)
        }
        return ((0 - 1) as! Int)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
