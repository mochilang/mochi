// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:14 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let width = 81
    let height = 5
    var lines: [String] = ([] as! [String])
    for i in 0..<height {
        var row: String = ""
        var j: Int = 0
        while (j < width) {
            row = ((row + "*") as! String)
            j = ((j + 1) as! Int)
        }
        lines = (_append(lines, row) as! [String])
    }
    func setChar(_ s: String, _ idx: Int, _ ch: String) -> String {
        return (((String(describing: String(Array(String(describing: (s as! String)))[0..<(idx as! Int)])) + ch) + String(describing: String(Array(String(describing: (s as! String)))[((idx + 1) as! Int)..<Int(((s).count))]))) as! String)
    }
    var stack: [[String: Int]] = (([(["start": 0, "len": width, "index": 1] as! Any)] as! [Any]) as! [[String: Int]])
    while (Int(((stack).count)) > 0) {
        var frame: [String: Int] = (stack[(Int(((stack).count)) - 1)] as! [String: Int])
        stack = (Array(stack[0..<(Int(((stack).count)) - 1)]) as! [[String: Int]])
        let start = frame["start"]!
        let lenSeg = frame["len"]!
        let index = frame["index"]!
        let seg = ((lenSeg / 3) as! Int)
        if (seg == 0) {
            continue
        }
        var i: Int = index
        while (i < height) {
            var j: Int = (start + seg)
            while (j < (start + (2 * seg))) {
                lines[i] = String(describing: setChar((lines[i] as! String), (j as! Int), " "))
                j = ((j + 1) as! Int)
            }
            i = ((i + 1) as! Int)
        }
        stack = ((_append(stack, ["start": start, "len": seg, "index": (index + 1)]) as! [Any]) as! [[String: Int]])
        stack = ((_append(stack, ["start": (start + (seg * 2)), "len": seg, "index": (index + 1)]) as! [Any]) as! [[String: Int]])
    }
    for line in lines {
        print(_p(line))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
