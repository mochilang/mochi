// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:19:40 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return ((n == 2) as! Bool)
        }
        if ((n % 3) == 0) {
            return ((n == 3) as! Bool)
        }
        var d: Int = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 2))
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 4))
        }
        return true
    }
    func firstPrimeFactor(_ n: Int) -> Int {
        if (n == 1) {
            return 1
        }
        if ((n % 3) == 0) {
            return 3
        }
        if ((n % 5) == 0) {
            return 5
        }
        var inc: [Int] = ([4, 2, 4, 2, 4, 6, 2, 6] as! [Int])
        var k: Int = 7
        var i: Int = 0
        while ((k * k) <= n) {
            if ((n % k) == 0) {
                return Int(k)
            }
            k = Int((k + (inc[i] as! Int)))
            i = Int((Int((i + 1)) % Int(((inc).count))))
        }
        return Int(n)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func padLeft(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func formatFloat(_ f: Double, _ prec: Int) -> String {
        let s = _p(f)
        let idx = Int(indexOf(String(s), "."))
        if (idx < 0) {
            return String(s)
        }
        let need = ((idx + 1) + prec)
        if (Int(((s).count)) > need) {
            return String(describing: String(Array(String(describing: String(s)))[0..<Int(need)]))
        }
        return String(s)
    }
    func main() {
        var blum: [Int] = ([] as! [Int])
        var counts: [Int] = ([0, 0, 0, 0] as! [Int])
        var digits: [Int] = ([1, 3, 7, 9] as! [Int])
        var i: Int = 1
        var bc: Int = 0
        while true {
            let p = Int(firstPrimeFactor(Int(i)))
            if ((p % 4) == 3) {
                let q = Int((i / p))
                if (((q != p) && ((q % 4) == 3)) && (isPrime(Int(q)) as! Bool)) {
                    if (bc < 50) {
                        blum = ((blum + [i]) as! [Int])
                    }
                    let d = (i % 10)
                    if (d == 1) {
                        counts[0] = Int(((counts[0] as! Int) + 1))
                    } else if (d == 3) {
                        counts[1] = Int(((counts[1] as! Int) + 1))
                    } else if (d == 7) {
                        counts[2] = Int(((counts[2] as! Int) + 1))
                    } else if (d == 9) {
                        counts[3] = Int(((counts[3] as! Int) + 1))
                    }
                    
                    
                    
                    bc = Int((bc + 1))
                    if (bc == 50) {
                        print(_p("First 50 Blum integers:"))
                        var idx: Int = 0
                        while (idx < 50) {
                            var line: String = ""
                            var j: Int = 0
                            while (j < 10) {
                                line = String(((line + String(describing: padLeft((blum[idx] as! Int), 3))) + " "))
                                idx = Int((idx + 1))
                                j = Int((j + 1))
                            }
                            print(_p(String(describing: String(Array(String(describing: String(line)))[0..<Int((Int(((line).count)) - 1))]))))
                        }
                        break
                    }
                }
            }
            if ((i % 5) == 3) {
                i = Int((i + 4))
            } else {
                i = Int((i + 2))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
