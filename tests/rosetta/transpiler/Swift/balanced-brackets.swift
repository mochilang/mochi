// Generated by Mochi transpiler v0.10.41 on 2025-07-26 20:37:10 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var seed: Int = 1
    func prng(_ max: Int) -> Int {
        seed = Int((Int(((seed * 1103515245) + 12345)) % 2147483648))
        return Int((seed % max))
    }
    func gen(_ n: Int) -> String {
        var arr: [String] = ([] as! [String])
        var i: Int = 0
        while (i < n) {
            arr = ((arr + ["["]) as! [String])
            arr = ((arr + ["]"]) as! [String])
            i = Int((i + 1))
        }
        var j: Int = (Int(((arr).count)) - 1)
        while (j > 0) {
            let k = Int(prng(Int((j + 1))))
            let tmp = (arr[j] as! String)
            arr[j] = (arr[k] as! String)
            arr[k] = String(tmp)
            j = Int((j - 1))
        }
        var out: String = ""
        for ch in arr {
            out = String((out + ch))
        }
        return String(out)
    }
    func testBalanced(_ s: String) {
        var open: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(Array(s)[i..<(i + 1)])
            if (c == "[") {
                open = Int((open + 1))
            } else if (c == "]") {
                if (open == 0) {
                    print(_p((s + ": not ok")))
                    return
                }
                open = Int((open - 1))
            } else {
                print(_p((s + ": not ok")))
                return
            }
            
            i = Int((i + 1))
        }
        if (open == 0) {
            print(_p((s + ": ok")))
        } else {
            print(_p((s + ": not ok")))
        }
    }
    func main() {
        var i: Int = 0
        while (i < 10) {
            _ = testBalanced(String(describing: gen(Int(i))))
            i = Int((i + 1))
        }
        _ = testBalanced("()")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
