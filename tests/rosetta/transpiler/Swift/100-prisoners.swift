// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:13:24 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func shuffle(_ xs: [Int]) -> [Int] {
    var arr = (xs as! [Int])
    var i = 99
    while (i > 0) {
        let j = (Int(_now()) % Int((i + 1)))
        let tmp = Int(arr[i])
        arr[i] = Int(arr[j])
        arr[j] = (tmp as! Int)
        i = ((i - 1) as! Int)
    }
    return (arr as! [Int])
}
func doTrials(_ trials: Int, _ np: Int, _ strategy: String) {
    var pardoned = 0
    var t = 0
    while (t < trials) {
        var drawers: [Int] = ([] as! [Int])
        var i = 0
        while (i < 100) {
            drawers = ((drawers + [i]) as! [Int])
            i = ((i + 1) as! Int)
        }
        drawers = (shuffle((drawers as! [Int])) as! [Int])
        var p = 0
        var success = true
        while (p < np) {
            var found = false
            if (strategy == "optimal") {
                var prev = (p as! Int)
                var d = 0
                while (d < 50) {
                    let this = Int(drawers[prev])
                    if (this == p) {
                        found = true
                        break
                    }
                    prev = (this as! Int)
                    d = ((d + 1) as! Int)
                }
            } else {
                var opened: [Bool] = ([] as! [Bool])
                var k = 0
                while (k < 100) {
                    opened = ((opened + [false]) as! [Bool])
                    k = ((k + 1) as! Int)
                }
                var d = 0
                while (d < 50) {
                    var n = ((Int(_now()) % 100) as! Int)
                    while (opened[n] as! Bool) {
                        n = ((Int(_now()) % 100) as! Int)
                    }
                    opened[n] = true
                    if (Int(drawers[n]) == p) {
                        found = true
                        break
                    }
                    d = ((d + 1) as! Int)
                }
            }
            if (!found) {
                success = false
                break
            }
            p = ((p + 1) as! Int)
        }
        if success {
            pardoned = ((pardoned + 1) as! Int)
        }
        t = ((t + 1) as! Int)
    }
    let rf = ((Double(pardoned) / Double(trials)) * 100.0)
    print((((((("  strategy = " + strategy) + "  pardoned = ") + String(describing: pardoned)) + " relative frequency = ") + String(describing: rf)) + "%"))
}
func main() {
    let trials = 1000
    for np in ([10, 100] as! [Int]) {
        print((((("Results from " + String(describing: trials)) + " trials with ") + String(describing: np)) + " prisoners:\n"))
        for strat in (["random", "optimal"] as! [String]) {
            _ = doTrials((trials as! Int), (np as! Int), (strat as! String))
        }
    }
}
_ = main()
