// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:21:26 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
        } else {
            _nowSeed = Int(Date().timeIntervalSince1970 * 1_000_000) % 2147483647
        }
        _nowSeeded = true
    }
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    return _nowSeed
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func shuffle(_ xs: [Int]) -> [Int] {
        var arr: [Int] = xs
        var i: Int = 99
        while (i > 0) {
            let j = (Int(_now()) % Int((i &+ 1)))
            let tmp = Int(arr[i])
            arr[i] = Int(arr[j])
            arr[j] = Int(tmp)
            i = Int((i &- 1))
        }
        return arr
    }
    func doTrials(_ trials: Int, _ np: Int, _ strategy: String) {
        var pardoned: Int = 0
        var t: Int = 0
        while (t < trials) {
            var drawers: [Int] = ([] as! [Int])
            var i: Int = 0
            while (i < 100) {
                drawers = (_append(drawers, i) as! [Int])
                i = Int((i &+ 1))
            }
            drawers = (shuffle((drawers as! [Int])) as! [Int])
            var p: Int = 0
            var success: Bool = true
            while (p < np) {
                var found: Bool = false
                if (strategy == "optimal") {
                    var prev: Int = p
                    var d: Int = 0
                    while (d < 50) {
                        let this = Int(drawers[prev])
                        if (this == p) {
                            found = true
                            break
                        }
                        prev = Int(this)
                        d = Int((d &+ 1))
                    }
                } else {
                    var opened: [Bool] = ([] as! [Bool])
                    var k: Int = 0
                    while (k < 100) {
                        opened = (_append(opened, false) as! [Bool])
                        k = Int((k &+ 1))
                    }
                    var d: Int = 0
                    while (d < 50) {
                        var n: Int = (Int(_now()) % 100)
                        while (opened[n] as! Bool) {
                            n = Int((Int(_now()) % 100))
                        }
                        opened[n] = true
                        if (Int(drawers[n]) == p) {
                            found = true
                            break
                        }
                        d = Int((d &+ 1))
                    }
                }
                if (!found) {
                    success = false
                    break
                }
                p = Int((p &+ 1))
            }
            if success {
                pardoned = Int((pardoned &+ 1))
            }
            t = Int((t &+ 1))
        }
        let rf = ((Double(pardoned) / Double(trials)) * 100.0)
        print(_p((((((("  strategy = " + strategy) + "  pardoned = ") + String(describing: pardoned)) + " relative frequency = ") + String(describing: rf)) + "%")))
    }
    func main() {
        let trials = 1000
        for np in ([10, 100] as! [Int]) {
            print(_p((((("Results from " + String(describing: trials)) + " trials with ") + String(describing: np)) + " prisoners:\n")))
            for strat in (["random", "optimal"] as! [String]) {
                _ = doTrials(Int(trials), Int(np), (strat as! String))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
