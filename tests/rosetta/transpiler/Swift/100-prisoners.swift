// Generated by Mochi transpiler v0.10.37 on 2025-07-23 00:29:55 GMT+7
import Foundation

func shuffle(_ xs: [Int]) -> [Int] {
    var xs = xs
    var arr = (xs as! [Int])
    var i = 99
    while (Int(i) > 0) {
        let j = (Int(Int.random(in: 0..<Int.max)) % Int((Int(i) + 1)))
        let tmp = Int(arr[Int(i)])
        arr[Int(i)] = Int(arr[Int(j)])
        arr[Int(j)] = Int(tmp)
        i = (Int(i) - 1)
    }
    return (arr as! [Int])
}
func doTrials(_ trials: Int, _ np: Int, _ strategy: String) {
    var trials = trials
    var np = np
    var strategy = strategy
    var pardoned = 0
    var t = 0
    while (Int(t) < Int(trials)) {
        var drawers: [Int] = []
        var i = 0
        while (Int(i) < 100) {
            drawers = ((((drawers as! [Int]) + [Int(i)]) as! [Int]) as! [Int])
            i = (Int(i) + 1)
        }
        drawers = (shuffle((drawers as! [Int])) as! [Int])
        var p = 0
        var success = true
        while (Int(p) < Int(np)) {
            var found = false
            if (String(strategy) == "optimal") {
                var prev = Int(p)
                var d = 0
                while (Int(d) < 50) {
                    let this = Int(drawers[Int(prev)])
                    if (Int(this) == Int(p)) {
                        found = true
                        break
                    }
                    prev = Int(this)
                    d = (Int(d) + 1)
                }
            } else {
                var opened: [Bool] = []
                var k = 0
                while (Int(k) < 100) {
                    opened = ((((opened as! [Bool]) + [false]) as! [Bool]) as! [Bool])
                    k = (Int(k) + 1)
                }
                var d = 0
                while (Int(d) < 50) {
                    var n = (Int(Int.random(in: 0..<Int.max)) % 100)
                    while Bool(opened[Int(n)]) {
                        n = (Int(Int.random(in: 0..<Int.max)) % 100)
                    }
                    opened[Int(n)] = true
                    if (Int(drawers[Int(n)]) == Int(p)) {
                        found = true
                        break
                    }
                    d = (Int(d) + 1)
                }
            }
            if (!Bool(found)) {
                success = false
                break
            }
            p = (Int(p) + 1)
        }
        if Bool(success) {
            pardoned = (Int(pardoned) + 1)
        }
        t = (Int(t) + 1)
    }
    let rf = ((Double(Double(Double(pardoned))) / Double(Double(Double(trials)))) * 100.0)
    print((((((("  strategy = " + String(strategy)) + "  pardoned = ") + String(String(Int(pardoned)))) + " relative frequency = ") + String(String(Double(rf)))) + "%"))
}
func main() {
    let trials = 1000
    for np in ([10, 100] as! [Int]) {
        print((((("Results from " + String(String(Int(trials)))) + " trials with ") + String(String(np))) + " prisoners:\n"))
        for strat in (["random", "optimal"] as! [String]) {
            doTrials(Int(trials), np, strat)
        }
    }
}
main()
