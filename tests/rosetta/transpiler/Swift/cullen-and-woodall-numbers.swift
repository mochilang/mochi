// Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:37:43 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() { res = res * 1000000000 + Int64(d) }
        if res > Int64(Int.max) { return Int.max }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() / rhs.toInt())
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        return BigInt(lhs.toInt() % rhs.toInt())
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
func pow_big(_ base: BigInt, _ exp: Int) -> BigInt {
    var result: BigInt = BigInt(BigInt(1))
    var b: BigInt = BigInt(base)
    var e: Int = exp
    while (e > 0) {
        if ((e % 2) == 1) {
            result = BigInt((result * b))
        }
        b = BigInt((b * b))
        e = ((e / 2) as! Int)
    }
    return result
}
func cullen(_ n: Int) -> BigInt {
    let two_n = pow_big(BigInt(2), (n as! Int))
    return ((two_n * BigInt(n)) + BigInt(1))
}
func woodall(_ n: Int) -> BigInt {
    return (cullen((n as! Int)) - BigInt(2))
}
func show_list(_ xs: [BigInt]) -> String {
    var line: String = ""
    var i: Int = 0
    while (i < Int(((xs).count))) {
        line = ((line + _p(BigInt(xs[i]))) as! String)
        if (i < (Int(((xs).count)) - 1)) {
            line = ((line + " ") as! String)
        }
        i = ((i + 1) as! Int)
    }
    return line
}
func main() {
    var cnums: [BigInt] = ([] as! [BigInt])
    var i: Int = 1
    while (i <= 20) {
        cnums = (_append(cnums, cullen((i as! Int))) as! [BigInt])
        i = ((i + 1) as! Int)
    }
    print(_p("First 20 Cullen numbers (n * 2^n + 1):"))
    print(_p(String(describing: show_list((cnums as! [BigInt])))))
    var wnums: [BigInt] = ([] as! [BigInt])
    i = 1
    while (i <= 20) {
        wnums = (_append(wnums, woodall((i as! Int))) as! [BigInt])
        i = ((i + 1) as! Int)
    }
    print(_p("\nFirst 20 Woodall numbers (n * 2^n - 1):"))
    print(_p(String(describing: show_list((wnums as! [BigInt])))))
    let cprimes: [BigInt] = ([BigInt(1), BigInt(141), BigInt(4713), BigInt(5795), BigInt(6611)] as! [BigInt])
    print(_p("\nFirst 5 Cullen primes (in terms of n):"))
    print(_p(String(describing: show_list((cprimes as! [BigInt])))))
    let wprimes: [BigInt] = ([BigInt(2), BigInt(3), BigInt(6), BigInt(30), BigInt(75), BigInt(81), BigInt(115), BigInt(123), BigInt(249), BigInt(362), BigInt(384), BigInt(462)] as! [BigInt])
    print(_p("\nFirst 12 Woodall primes (in terms of n):"))
    print(_p(String(describing: show_list((wprimes as! [BigInt])))))
}
_ = main()
