// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:35 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let target = "METHINKS IT IS LIKE A WEASEL"
    let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ "
    var seed: Int = 1
    func randInt(_ s: Int, _ n: Int) -> [Int] {
        let next = (Int(((s * 1664525) + 1013904223)) % 2147483647)
        return ([next, (next % n)] as! [Int])
    }
    func randChar() -> String {
        var r: [Int] = (randInt(Int(seed), Int(((chars).count))) as! [Int])
        seed = (r[0] as! Int)
        let idx = (r[1] as! Int)
        return String(describing: String(Array(String(describing: String(describing: chars)))[Int(idx)..<Int((idx + 1))]))
    }
    func randomString(_ n: Int) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < n) {
            s = String(describing: (s + String(describing: randChar())))
            i = Int((i + 1))
        }
        return String(describing: s)
    }
    func fitness(_ s: String) -> Int {
        var h: Int = 0
        var i: Int = 0
        while (i < Int(((target).count))) {
            if (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))])) != String(describing: String(Array(String(describing: String(describing: target)))[Int(i)..<Int((i + 1))]))) {
                h = Int((h + 1))
            }
            i = Int((i + 1))
        }
        return Int(h)
    }
    func mutate(_ p: String) -> String {
        var m: String = ""
        var i: Int = 0
        while (i < Int(((p).count))) {
            var r: [Int] = (randInt(Int(seed), 20) as! [Int])
            seed = (r[0] as! Int)
            if ((r[1] as! Int) == 0) {
                m = String(describing: (m + String(describing: randChar())))
            } else {
                m = String(describing: (m + String(describing: String(Array(String(describing: String(describing: p)))[Int(i)..<Int((i + 1))]))))
            }
            i = Int((i + 1))
        }
        return String(describing: m)
    }
    func main() {
        var parent: String = String(describing: randomString(Int(((target).count))))
        print(_p(parent))
        var best: Int = Int(fitness(String(describing: parent)))
        var done: Bool = false
        while (!done) {
            var i: Int = 0
            while (i < 20) {
                let child = String(describing: mutate(String(describing: parent)))
                let f = Int(fitness(String(describing: child)))
                if (f < best) {
                    best = Int(f)
                    parent = String(describing: child)
                    print(_p(parent))
                    if (best == 0) {
                        done = true
                        break
                    }
                }
                i = Int((i + 1))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
