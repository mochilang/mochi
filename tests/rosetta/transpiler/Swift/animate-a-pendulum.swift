// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:10:23 GMT+7
import Foundation

let PI = 3.141592653589793
func sinApprox(_ x: Double) -> Double {
    var term = Double(x)
    var sum = Double(x)
    var n = 1
    while (Int(n) <= 10) {
        let denom = Double((Int((2 * Int(n))) * Int(((2 * Int(n)) + 1))))
        term = ((((-Double(term) * Double(x)) * Double(x)) / Double(denom)) as! Double)
        sum = ((Double(sum) + Double(term)) as! Double)
        n = ((Int(n) + 1) as! Int)
    }
    return Double(sum)
}
func cosApprox(_ x: Double) -> Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while (Int(n) <= 10) {
        let denom = Double((Int(((2 * Int(n)) - 1)) * Int((2 * Int(n)))))
        term = ((((-Double(term) * Double(x)) * Double(x)) / Double(denom)) as! Double)
        sum = ((Double(sum) + Double(term)) as! Double)
        n = ((Int(n) + 1) as! Int)
    }
    return Double(sum)
}
func sqrtApprox(_ x: Double) -> Double {
    var guess = Double(x)
    var i = 0
    while (Int(i) < 10) {
        guess = ((Double((Double(guess) + (Double(x) / Double(guess)))) / 2.0) as! Double)
        i = ((Int(i) + 1) as! Int)
    }
    return Double(guess)
}
let L = 10.0
let G = 9.81
let dt = 0.2
let phi0 = (Double(PI) / 4.0)
let omega = Double(sqrtApprox(((Double(G) / Double(L)) as! Double)))
var t = 0.0
for step in 0..<10 {
    let phi = (Double(phi0) * Double(cosApprox(((Double(omega) * Double(t)) as! Double))))
    let pos = Int(((10.0 * Double(sinApprox(Double(phi)))) + 0.5))
    print(String(String(describing: Int(pos))))
    t = ((Double(t) + Double(dt)) as! Double)
}
