// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:55 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func sinApprox(_ x: Double) -> Double {
        var term = Double(x)
        var sum = Double(x)
        var n = 1
        while (n <= 10) {
            let denom = Double((Int((2 * n)) * Int(((2 * n) + 1))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func cosApprox(_ x: Double) -> Double {
        var term = 1.0
        var sum = 1.0
        var n = 1
        while (n <= 10) {
            let denom = Double((Int(((2 * n) - 1)) * Int((2 * n))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = Double(x)
        var i = 0
        while (i < 10) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i + 1))
        }
        return Double(guess)
    }
    let L = 10.0
    let G = 9.81
    let dt = 0.2
    let phi0 = (PI / 4.0)
    let omega = Double(sqrtApprox(Double((G / L))))
    var t = 0.0
    for step in 0..<10 {
        let phi = (phi0 * Double(cosApprox(Double((omega * t)))))
        let pos = Int(((10.0 * Double(sinApprox(Double(phi)))) + 0.5))
        print(String(describing: pos))
        t = Double((t + dt))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
