// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:32:39 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let dayNames = (["Sweetmorn", "Boomtime", "Pungenday", "Prickle-Prickle", "Setting Orange"] as! [String])
    let seasons = (["Chaos", "Discord", "Confusion", "Bureaucracy", "The Aftermath"] as! [String])
    let holydays = ([(["Mungday", "Chaoflux"] as! [String]), (["Mojoday", "Discoflux"] as! [String]), (["Syaday", "Confuflux"] as! [String]), (["Zaraday", "Bureflux"] as! [String]), (["Maladay", "Afflux"] as! [String])] as! [[String]])
    func isLeap(_ y: Int) -> Bool {
        if ((y % 400) == 0) {
            return true
        }
        if ((y % 100) == 0) {
            return false
        }
        return ((y % 4) == 0)
    }
    let daysBefore = ([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334] as! [Int])
    func dayOfYear(_ y: Int, _ m: Int, _ d: Int) -> Int {
        var doy: Int = ((daysBefore[(m - 1)] as! Int) + d)
        if ((m > 2) && isLeap(Int(y))) {
            doy = Int((doy + 1))
        }
        return Int(doy)
    }
    func ordinal(_ n: Int) -> String {
        var suff: String = "th"
        let mod100 = (n % 100)
        if ((mod100 < 11) || (mod100 > 13)) {
            let r = (n % 10)
            if (r == 1) {
                suff = "st"
            } else if (r == 2) {
                suff = "nd"
            } else if (r == 3) {
                suff = "rd"
            }
            
            
        }
        return String(describing: (_p(n) + suff))
    }
    func discordian(_ y: Int, _ m: Int, _ d: Int) -> String {
        if ((isLeap(Int(y)) && (m == 2)) && (d == 29)) {
            return String(describing: ("St. Tib's Day, YOLD " + _p((y + 1166))))
        }
        var doy: Int = Int(dayOfYear(Int(y), Int(m), Int(d)))
        if (isLeap(Int(y)) && (doy > 60)) {
            doy = Int((doy - 1))
        }
        var idx: Int = (doy - 1)
        let season = (idx / 73)
        let day = (idx % 73)
        var res: String = ((((((String(describing: dayNames[(idx % 5)]) + ", the ") + String(describing: ordinal(Int((day + 1))))) + " day of ") + String(describing: seasons[season])) + " in the YOLD ") + _p((y + 1166)))
        if (day == 4) {
            res = String(describing: (((res + ". Celebrate ") + String(describing: holydays[season][0])) + "!"))
        }
        if (day == 49) {
            res = String(describing: (((res + ". Celebrate ") + String(describing: holydays[season][1])) + "!"))
        }
        return String(describing: res)
    }
    func main() {
        let dates = ([([2010, 7, 22] as! [Int]), ([2012, 2, 28] as! [Int]), ([2012, 2, 29] as! [Int]), ([2012, 3, 1] as! [Int]), ([2012, 12, 31] as! [Int]), ([2013, 1, 1] as! [Int]), ([2100, 12, 31] as! [Int]), ([2015, 10, 19] as! [Int]), ([2010, 1, 5] as! [Int]), ([2011, 5, 3] as! [Int]), ([2000, 3, 13] as! [Int])] as! [[Int]])
        var i: Int = 0
        while (i < Int(((dates).count))) {
            let dt = (dates[i] as! [Int])
            print(_p(String(describing: discordian((dt[0] as! Int), (dt[1] as! Int), (dt[2] as! Int)))))
            i = Int((i + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
