// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:17:35 GMT+7
import Foundation

func d2d(_ d: Double) -> Double {
    return ((d.truncatingRemainder(dividingBy: 360.0)) as! Double)
}
func g2g(_ g: Double) -> Double {
    return ((g.truncatingRemainder(dividingBy: 400.0)) as! Double)
}
func m2m(_ m: Double) -> Double {
    return ((m.truncatingRemainder(dividingBy: 6400.0)) as! Double)
}
func r2r(_ r: Double) -> Double {
    return ((r.truncatingRemainder(dividingBy: Double((2.0 * 3.141592653589793)))) as! Double)
}
func d2g(_ d: Double) -> Double {
    return (((Double(d2d((d as! Double))) * 400.0) / 360.0) as! Double)
}
func d2m(_ d: Double) -> Double {
    return (((Double(d2d((d as! Double))) * 6400.0) / 360.0) as! Double)
}
func d2r(_ d: Double) -> Double {
    return (((Double(d2d((d as! Double))) * 3.141592653589793) / 180.0) as! Double)
}
func g2d(_ g: Double) -> Double {
    return (((Double(g2g((g as! Double))) * 360.0) / 400.0) as! Double)
}
func g2m(_ g: Double) -> Double {
    return (((Double(g2g((g as! Double))) * 6400.0) / 400.0) as! Double)
}
func g2r(_ g: Double) -> Double {
    return (((Double(g2g((g as! Double))) * 3.141592653589793) / 200.0) as! Double)
}
func m2d(_ m: Double) -> Double {
    return (((Double(m2m((m as! Double))) * 360.0) / 6400.0) as! Double)
}
func m2g(_ m: Double) -> Double {
    return (((Double(m2m((m as! Double))) * 400.0) / 6400.0) as! Double)
}
func m2r(_ m: Double) -> Double {
    return (((Double(m2m((m as! Double))) * 3.141592653589793) / 3200.0) as! Double)
}
func r2d(_ r: Double) -> Double {
    return (((Double(r2r((r as! Double))) * 180.0) / 3.141592653589793) as! Double)
}
func r2g(_ r: Double) -> Double {
    return (((Double(r2r((r as! Double))) * 200.0) / 3.141592653589793) as! Double)
}
func r2m(_ r: Double) -> Double {
    return (((Double(r2r((r as! Double))) * 3200.0) / 3.141592653589793) as! Double)
}
func main() {
    let angles = ([-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0] as! [Double])
    print("degrees normalized_degs gradians mils radians")
    for a in angles {
        print(((((((((String(describing: a) + " ") + String(describing: Double(d2d((a as! Double))))) + " ") + String(describing: Double(d2g((a as! Double))))) + " ") + String(describing: Double(d2m((a as! Double))))) + " ") + String(describing: Double(d2r((a as! Double))))))
    }
    print("\ngradians normalized_grds degrees mils radians")
    for a in angles {
        print(((((((((String(describing: a) + " ") + String(describing: Double(g2g((a as! Double))))) + " ") + String(describing: Double(g2d((a as! Double))))) + " ") + String(describing: Double(g2m((a as! Double))))) + " ") + String(describing: Double(g2r((a as! Double))))))
    }
    print("\nmils normalized_mils degrees gradians radians")
    for a in angles {
        print(((((((((String(describing: a) + " ") + String(describing: Double(m2m((a as! Double))))) + " ") + String(describing: Double(m2d((a as! Double))))) + " ") + String(describing: Double(m2g((a as! Double))))) + " ") + String(describing: Double(m2r((a as! Double))))))
    }
    print("\nradians normalized_rads degrees gradians mils")
    for a in angles {
        print(((((((((String(describing: a) + " ") + String(describing: Double(r2r((a as! Double))))) + " ") + String(describing: Double(r2d((a as! Double))))) + " ") + String(describing: Double(r2g((a as! Double))))) + " ") + String(describing: Double(r2m((a as! Double))))))
    }
}
_ = main()
