// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:51 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func main() {
    let row = 3
    let col = 4
    var a: [[Int]] = ([] as! [[Int]])
    var i: Int = 0
    while (i < row) {
        var rowArr: [Int] = ([] as! [Int])
        var j: Int = 0
        while (j < col) {
            rowArr = (_append(rowArr, 0) as! [Int])
            j = Int((j &+ 1))
        }
        a = (_append(a, rowArr) as! [[Int]])
        i = Int((i &+ 1))
    }
    print(_p(("a[0][0] = " + String(describing: (a[0][0] as! Int)))))
    a[Int((row &- 1))][Int((col &- 1))] = 7
    print(_p(((((("a[" + String(describing: (row &- 1))) + "][") + String(describing: (col &- 1))) + "] = ") + String(describing: (a[Int((row &- 1))][Int((col &- 1))] as! Int)))))
    a = []
}
_ = main()
