// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:19:42 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func padLeft(_ s: String, _ w: Int) -> String {
        var res: String = ""
        var n: Int = (w - Int(((s).count)))
        while (n > 0) {
            res = String((res + " "))
            n = Int((n - 1))
        }
        return String((res + s))
    }
    func padRight(_ s: String, _ w: Int) -> String {
        var out: String = s
        var i: Int = Int(((s).count))
        while (i < w) {
            out = String((out + " "))
            i = Int((i + 1))
        }
        return String(out)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func format2(_ f: Double) -> String {
        var s: String = _p(f)
        let idx = Int(indexOf(String(s), "."))
        if (idx < 0) {
            s = String((s + ".00"))
        } else {
            var need: Int = (idx + 3)
            if (Int(((s).count)) > need) {
                s = String(describing: String(Array(String(describing: String(s)))[0..<Int(need)]))
            } else {
                while (Int(((s).count)) < need) {
                    s = String((s + "0"))
                }
            }
        }
        return String(s)
    }
    func cpx(_ h: Double) -> Int {
        var x: Int = Int((Double((h / 11.25)) + 0.5))
        x = Int((x % 32))
        if (x < 0) {
            x = Int((x + 32))
        }
        return Int(x)
    }
    let compassPoint = (["North", "North by east", "North-northeast", "Northeast by north", "Northeast", "Northeast by east", "East-northeast", "East by north", "East", "East by south", "East-southeast", "Southeast by east", "Southeast", "Southeast by south", "South-southeast", "South by east", "South", "South by west", "South-southwest", "Southwest by south", "Southwest", "Southwest by west", "West-southwest", "West by south", "West", "West by north", "West-northwest", "Northwest by west", "Northwest", "Northwest by north", "North-northwest", "North by west"] as! [String])
    func degrees2compasspoint(_ h: Double) -> String {
        return (compassPoint[Int(cpx(Double(h)))] as! String)
    }
    let headings = ([0.0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135.0, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270.0, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38] as! [Double])
    print(_p("Index  Compass point         Degree"))
    var i: Int = 0
    while (i < Int(((headings).count))) {
        let h = Double(headings[i])
        let idx = ((i % 32) + 1)
        let cp = String(describing: degrees2compasspoint(Double(h)))
        print(_p((((((String(describing: padLeft(String(_p(idx)), 4)) + "   ") + String(describing: padRight(String(cp), 19))) + " ") + String(describing: format2(Double(h)))) + "Â°")))
        i = Int((i + 1))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
