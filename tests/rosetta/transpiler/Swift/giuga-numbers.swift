// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:16:27 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func primeFactors(_ n: Int) -> [Int] {
        var factors: [Int] = ([] as! [Int])
        var last: Int = 0
        var x: Int = n
        while ((x % 2) == 0) {
            if (last == 2) {
                return ([] as! [Int])
            }
            factors = (_append(factors, 2) as! [Int])
            last = 2
            x = Int((x / 2))
        }
        var p: Int = 3
        while ((p &* p) <= x) {
            while ((x % p) == 0) {
                if (last == p) {
                    return ([] as! [Int])
                }
                factors = (_append(factors, p) as! [Int])
                last = Int(p)
                x = Int((x / p))
            }
            p = Int((p &+ 2))
        }
        if (x > 1) {
            if (last == x) {
                return ([] as! [Int])
            }
            factors = (_append(factors, x) as! [Int])
        }
        return factors
    }
    func isGiuga(_ n: Int) -> Bool {
        let facs: [Int] = (primeFactors(n) as! [Int])
        if (Int(((facs).count)) <= 2) {
            return false
        }
        for f in facs {
            if (Int((Int(((n / f) &- 1)) % f)) != 0) {
                return false
            }
        }
        return true
    }
    func main() {
        var known: [Int] = ([30, 858, 1722, 66198] as! [Int])
        var nums: [Int] = ([] as! [Int])
        for n in known {
            if isGiuga(n) {
                nums = (_append(nums, n) as! [Int])
            }
        }
        print(_p("The first 4 Giuga numbers are:"))
        print(_p("[" + nums.map{ String(describing: $0) }.joined(separator: ",") + "]"))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
