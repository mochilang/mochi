// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:24:20 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func splitPath(_ p: String) -> [String] {
        var parts: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((p).count))) {
            if (String(describing: String(Array(String(describing: (p as! String)))[(i as! Int)..<((i + 1) as! Int)])) == "/") {
                if (cur != "") {
                    parts = (_append(parts, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + String(describing: String(Array(String(describing: (p as! String)))[(i as! Int)..<((i + 1) as! Int)]))) as! String)
            }
            i = ((i + 1) as! Int)
        }
        if (cur != "") {
            parts = (_append(parts, cur) as! [String])
        }
        return (parts as! [String])
    }
    func joinPath(_ parts: [String]) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < Int(((parts).count))) {
            s = (((s + "/") + (parts[i] as! String)) as! String)
            i = ((i + 1) as! Int)
        }
        return (s as! String)
    }
    func commonPrefix(_ paths: [String]) -> String {
        if (Int(((paths).count)) == 0) {
            return ""
        }
        var base: [String] = (splitPath((paths[0] as! String)) as! [String])
        var i: Int = 0
        var prefix: [String] = ([] as! [String])
        while (i < Int(((base).count))) {
            let comp = (base[i] as! String)
            var ok: Bool = true
            for p in paths {
                let parts: [String] = (splitPath((p as! String)) as! [String])
                if ((i >= Int(((parts).count))) || ((parts[i] as! String) != comp)) {
                    ok = false
                    break
                }
            }
            if ok {
                prefix = (_append(prefix, comp) as! [String])
            } else {
                break
            }
            i = ((i + 1) as! Int)
        }
        return String(describing: joinPath((prefix as! [String])))
    }
    func main() {
        let paths: [String] = (["/home/user1/tmp/coverage/test", "/home/user1/tmp/covert/operator", "/home/user1/tmp/coven/members", "/home//user1/tmp/coventry", "/home/user1/././tmp/covertly/foo", "/home/bob/../user1/tmp/coved/bar"] as! [String])
        let c = String(describing: commonPrefix((paths as! [String])))
        if (c == "") {
            print(_p("No common path"))
        } else {
            print(_p(("Common path: " + c)))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
