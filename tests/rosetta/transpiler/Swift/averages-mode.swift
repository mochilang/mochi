// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:34:43 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var arr1 = ([2, 7, 1, 8, 2] as! [Int])
    var counts1: [Int: Int] = ([:] as! [Int: Int])
    var keys1: [Int] = ([] as! [Int])
    var i = 0
    while (i < Int(((arr1).count))) {
        let v = (arr1[i] as! Int)
        if (counts1[v] != nil) {
            counts1[v] = Int(((counts1[v] as! Int) + 1))
        } else {
            counts1[v] = 1
            keys1 = ((keys1 + [v]) as! [Int])
        }
        i = Int((i + 1))
    }
    var max1 = 0
    i = 0
    while (i < Int(((keys1).count))) {
        let k = (keys1[i] as! Int)
        let c = (counts1[k] as! Int)
        if (c > max1) {
            max1 = Int(c)
        }
        i = Int((i + 1))
    }
    var modes1: [Int] = ([] as! [Int])
    i = 0
    while (i < Int(((keys1).count))) {
        let k = (keys1[i] as! Int)
        if ((counts1[k] as! Int) == max1) {
            modes1 = ((modes1 + [k]) as! [Int])
        }
        i = Int((i + 1))
    }
    print(_p(_p(modes1)))
    var arr2 = ([2, 7, 1, 8, 2, 8] as! [Int])
    var counts2: [Int: Int] = ([:] as! [Int: Int])
    var keys2: [Int] = ([] as! [Int])
    i = 0
    while (i < Int(((arr2).count))) {
        let v = (arr2[i] as! Int)
        if (counts2[v] != nil) {
            counts2[v] = Int(((counts2[v] as! Int) + 1))
        } else {
            counts2[v] = 1
            keys2 = ((keys2 + [v]) as! [Int])
        }
        i = Int((i + 1))
    }
    var max2 = 0
    i = 0
    while (i < Int(((keys2).count))) {
        let k = (keys2[i] as! Int)
        let c = (counts2[k] as! Int)
        if (c > max2) {
            max2 = Int(c)
        }
        i = Int((i + 1))
    }
    var modes2: [Int] = ([] as! [Int])
    i = 0
    while (i < Int(((keys2).count))) {
        let k = (keys2[i] as! Int)
        if ((counts2[k] as! Int) == max2) {
            modes2 = ((modes2 + [k]) as! [Int])
        }
        i = Int((i + 1))
    }
    print(_p(_p(modes2)))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
