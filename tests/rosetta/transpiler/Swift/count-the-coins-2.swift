// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:37:07 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func countChange(_ amount: Int) -> Int {
    var ways: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i <= amount) {
        ways = (_append(ways, 0) as! [Int])
        i = Int((i + 1))
    }
    ways[0] = 1
    for coin in ([100, 50, 25, 10, 5, 1] as! [Int]) {
        var j: Int = coin
        while (j <= amount) {
            ways[j] = Int(((ways[j] as! Int) + (ways[(j - coin)] as! Int)))
            j = Int((j + 1))
        }
    }
    return (ways[amount] as! Int)
}
let amount = 1000
print(_p(((("amount, ways to make change: " + _p(amount)) + " ") + _p(Int(countChange(Int(amount)))))))
