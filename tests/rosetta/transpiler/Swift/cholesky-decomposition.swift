// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:43:53 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func sqrtApprox(_ x: Double) -> Double {
    var guess: Double = x
    var i: Int = 0
    while (i < 20) {
        guess = Double((Double((guess + (x / guess))) / 2.0))
        i = ((i + 1) as! Int)
    }
    return (guess as! Double)
}
func cholesky(_ a: [[Double]]) -> [[Double]] {
    let n = Int(((a).count))
    var l: [[Double]] = ([] as! [[Double]])
    var i: Int = 0
    while (i < n) {
        var row: [Double] = ([] as! [Double])
        var j: Int = 0
        while (j < n) {
            row = (_append(row, 0.0) as! [Double])
            j = ((j + 1) as! Int)
        }
        l = (_append(l, row) as! [[Double]])
        i = ((i + 1) as! Int)
    }
    i = 0
    while (i < n) {
        var j: Int = 0
        while (j <= i) {
            var sum: Double = (a[i][j] as! Double)
            var k: Int = 0
            while (k < j) {
                sum = Double((sum - ((l[i][k] as! Double) * (l[j][k] as! Double))))
                k = ((k + 1) as! Int)
            }
            if (i == j) {
                l[i][j] = Double(sqrtApprox((sum as! Double)))
            } else {
                l[i][j] = Double((sum / (l[j][j] as! Double)))
            }
            j = ((j + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return (l as! [[Double]])
}
func printMat(_ m: [[Double]]) {
    var i: Int = 0
    while (i < Int(((m).count))) {
        var line: String = ""
        var j: Int = 0
        while (j < Int((((m[i] as! [Double])).count))) {
            line = ((line + _p((m[i][j] as! Double))) as! String)
            if (j < (Int((((m[i] as! [Double])).count)) - 1)) {
                line = ((line + " ") as! String)
            }
            j = ((j + 1) as! Int)
        }
        print(_p(line))
        i = ((i + 1) as! Int)
    }
}
func demo(_ a: [[Double]]) {
    print(_p("A:"))
    _ = printMat((a as! [[Double]]))
    let l: [[Double]] = (cholesky((a as! [[Double]])) as! [[Double]])
    print(_p("L:"))
    _ = printMat((l as! [[Double]]))
}
_ = demo(([(([(25.0 as! Any), (15.0 as! Any), (-5.0 as! Any)] as! [Double]) as! Any), (([(15.0 as! Any), (18.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(-5.0 as! Any), (0.0 as! Any), (11.0 as! Any)] as! [Double]) as! Any)] as! [[Double]]))
_ = demo(([(([(18.0 as! Any), (22.0 as! Any), (54.0 as! Any), (42.0 as! Any)] as! [Double]) as! Any), (([(22.0 as! Any), (70.0 as! Any), (86.0 as! Any), (62.0 as! Any)] as! [Double]) as! Any), (([(54.0 as! Any), (86.0 as! Any), (174.0 as! Any), (134.0 as! Any)] as! [Double]) as! Any), (([(42.0 as! Any), (62.0 as! Any), (134.0 as! Any), (106.0 as! Any)] as! [Double]) as! Any)] as! [[Double]]))
