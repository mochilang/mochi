// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:25 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var i: Int = (Int(((s).count)) - 3)
        while (i > 0) {
            s = String(describing: ((String(Array(s)[0..<i]) + ",") + String(Array(s)[i..<Int(((s).count))])))
            i = Int((i - 3))
        }
        return String(describing: s)
    }
    func main() {
        let data = ([["pm": 10, "g1": 4, "s1": 7, "g2": 6, "s2": 23, "d": 16], ["pm": 100, "g1": 14, "s1": 113, "g2": 16, "s2": 1831, "d": 1718], ["pm": 1000, "g1": 14, "s1": 113, "g2": 16, "s2": 1831, "d": 1718], ["pm": 10000, "g1": 36, "s1": 9551, "g2": 38, "s2": 30593, "d": 21042], ["pm": 100000, "g1": 70, "s1": 173359, "g2": 72, "s2": 31397, "d": 141962], ["pm": 1000000, "g1": 100, "s1": 396733, "g2": 102, "s2": 1444309, "d": 1047576], ["pm": 10000000, "g1": 148, "s1": 2010733, "g2": 150, "s2": 13626257, "d": 11615524], ["pm": 100000000, "g1": 198, "s1": 46006769, "g2": 200, "s2": 378043979, "d": 332037210], ["pm": 1000000000, "g1": 276, "s1": 649580171, "g2": 278, "s2": 4260928601, "d": 3611348430], ["pm": 10000000000, "g1": 332, "s1": 5893180121, "g2": 334, "s2": 30827138509, "d": 24933958388], ["pm": 100000000000, "g1": 386, "s1": 35238645587, "g2": 388, "s2": 156798792223, "d": 121560146636]] as! [Any])
        for entry in data {
            let pm = String(describing: commatize(((entry as! [String: Any])["pm"] as! Int)))
            let line1 = (("Earliest difference > " + pm) + " between adjacent prime gap starting primes:")
            print(_p(line1))
            let line2 = (((((((((("Gap " + _p(((entry as! [String: Any])["g1"] as! Int))) + " starts at ") + String(describing: commatize(((entry as! [String: Any])["s1"] as! Int)))) + ", gap ") + _p(((entry as! [String: Any])["g2"] as! Int))) + " starts at ") + String(describing: commatize(((entry as! [String: Any])["s2"] as! Int)))) + ", difference is ") + String(describing: commatize(((entry as! [String: Any])["d"] as! Int)))) + ".")
            print(_p(line2))
            print(_p(""))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
