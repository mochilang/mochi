// Generated by Mochi transpiler v0.10.52 on 2025-08-02 00:36:09 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func modPow(_ base: Int, _ exp: Int, _ m: Int) -> Int {
    var result: Int = (1 % m)
    var b: Int = (base % m)
    var e: Int = exp
    while (e > 0) {
        if ((e % 2) == 1) {
            result = ((Int((result * b)) % m) as! Int)
        }
        b = ((Int((b * b)) % m) as! Int)
        e = ((e / 2) as! Int)
    }
    return result
}
func isPrime(_ n: Int) -> Bool {
    if (n < 2) {
        return false
    }
    for p in ([2, 3, 5, 7, 11, 13, 17, 19, 23, 29] as! [Int]) {
        if ((n % p) == 0) {
            return (n == p)
        }
    }
    var d: Int = (n - 1)
    var s: Int = 0
    while ((d % 2) == 0) {
        d = ((d / 2) as! Int)
        s = ((s + 1) as! Int)
    }
    for a in ([2, 325, 9375, 28178, 450775, 9780504, 1795265022] as! [Int]) {
        if ((a % n) == 0) {
            return true
        }
        var x: Int = Int(modPow((a as! Int), (d as! Int), (n as! Int)))
        if ((x == 1) || (x == (n - 1))) {
            continue
        }
        var r: Int = 1
        var passed: Bool = false
        while (r < s) {
            x = ((Int((x * x)) % n) as! Int)
            if (x == (n - 1)) {
                passed = true
                break
            }
            r = ((r + 1) as! Int)
        }
        if (!passed) {
            return false
        }
    }
    return true
}
func commatize(_ n: Int) -> String {
    var s: String = _p(n)
    var i: Int = (Int(((s).count)) - 3)
    while (i > 0) {
        s = (((String(describing: String(Array(String(describing: (s as! String)))[0..<(i as! Int)])) + ",") + String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int(((s).count))]))) as! String)
        i = ((i - 3) as! Int)
    }
    return s
}
func pad(_ s: String, _ width: Int) -> String {
    var out: String = s
    while (Int(((out).count)) < width) {
        out = ((" " + out) as! String)
    }
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var res: String = ""
    var i: Int = 0
    while (i < Int(((xs).count))) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + (xs[i] as! String)) as! String)
        i = ((i + 1) as! Int)
    }
    return res
}
func formatRow(_ row: [String]) -> String {
    var padded: [String] = ([] as! [String])
    var i: Int = 0
    while (i < Int(((row).count))) {
        padded = (_append(padded, String(describing: pad((row[i] as! String), 9))) as! [String])
        i = ((i + 1) as! Int)
    }
    return (("[" + String(describing: join((padded as! [String]), " "))) + "]")
}
func main() {
    var cubans: [String] = ([] as! [String])
    var cube1: Int = 1
    var count: Int = 0
    var cube100k: Int = 0
    var i: Int = 1
    while true {
        var j: Int = (i + 1)
        var cube2: Int = ((j * j) * j)
        var diff: Int = (cube2 - cube1)
        if isPrime((diff as! Int)) {
            if (count < 200) {
                cubans = (_append(cubans, String(describing: commatize((diff as! Int)))) as! [String])
            }
            count = ((count + 1) as! Int)
            if (count == 100000) {
                cube100k = (diff as! Int)
                break
            }
        }
        cube1 = (cube2 as! Int)
        i = ((i + 1) as! Int)
    }
    print(_p("The first 200 cuban primes are:-"))
    var row: Int = 0
    while (row < 20) {
        var slice: [String] = ([] as! [String])
        var k: Int = 0
        while (k < 10) {
            slice = (_append(slice, (cubans[((row * 10) + k)] as! String)) as! [String])
            k = ((k + 1) as! Int)
        }
        print(_p(String(describing: formatRow((slice as! [String])))))
        row = ((row + 1) as! Int)
    }
    print(_p(("\nThe 100,000th cuban prime is " + String(describing: commatize((cube100k as! Int))))))
}
_ = main()
