// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:45:28 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func primesUpTo(_ n: Int) -> [Int] {
        var sieve: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i <= n) {
            sieve = (_append(sieve, true) as! [Bool])
            i = Int((i &+ 1))
        }
        var p: Int = 2
        while ((p &* p) <= n) {
            if (sieve[p] as! Bool) {
                var m: Int = (p &* p)
                while (m <= n) {
                    sieve[m] = false
                    m = Int((m &+ p))
                }
            }
            p = Int((p &+ 1))
        }
        var res: [Int] = ([] as! [Int])
        var x: Int = 2
        while (x <= n) {
            if (sieve[x] as! Bool) {
                res = (_append(res, x) as! [Int])
            }
            x = Int((x &+ 1))
        }
        return res
    }
    let LIMIT = 999999
    let primes: [Int] = (primesUpTo((LIMIT as! Int)) as! [Int])
    func longestSeq(_ dir: String) {
        var pd: Int = 0
        var longSeqs: [[Int]] = ([([2] as! [Int])] as! [[Int]])
        var currSeq: [Int] = ([2] as! [Int])
        var i: Int = 1
        while (i < Int(((primes).count))) {
            let d = ((primes[i] as! Int) &- (primes[(i &- 1)] as! Int))
            if (((dir == "ascending") && (d <= pd)) || ((dir == "descending") && (d >= pd))) {
                if (Int(((currSeq).count)) > Int((((longSeqs[0] as! [Int])).count))) {
                    longSeqs = ([currSeq] as! [[Int]])
                } else if (Int(((currSeq).count)) == Int((((longSeqs[0] as! [Int])).count))) {
                    longSeqs = (_append(longSeqs, currSeq) as! [[Int]])
                }
                
                currSeq = ([(primes[(i &- 1)] as! Int), (primes[i] as! Int)] as! [Int])
            } else {
                currSeq = (_append(currSeq, (primes[i] as! Int)) as! [Int])
            }
            pd = (d as! Int)
            i = Int((i &+ 1))
        }
        if (Int(((currSeq).count)) > Int((((longSeqs[0] as! [Int])).count))) {
            longSeqs = ([currSeq] as! [[Int]])
        } else if (Int(((currSeq).count)) == Int((((longSeqs[0] as! [Int])).count))) {
            longSeqs = (_append(longSeqs, currSeq) as! [[Int]])
        }
        
        print(_p((((("Longest run(s) of primes with " + dir) + " differences is ") + _p(Int((((longSeqs[0] as! [Int])).count)))) + " :")))
        for ls in longSeqs {
            var diffs: [Int] = ([] as! [Int])
            var j: Int = 1
            while (j < Int(((ls).count))) {
                diffs = (_append(diffs, ((ls[j] as! Int) &- (ls[(j &- 1)] as! Int))) as! [Int])
                j = Int((j &+ 1))
            }
            var k: Int = 0
            while (k < (Int(((ls).count)) &- 1)) {
                print(_p((((_p((ls[k] as! Int)) + " (") + _p((diffs[k] as! Int))) + ") ")), _p(false))
                k = Int((k &+ 1))
            }
            print(_p(_p((ls[(Int(((ls).count)) &- 1)] as! Int))))
        }
        print(_p(""))
    }
    func main() {
        print(_p("For primes < 1 million:\n"))
        for dir in (["ascending", "descending"] as! [String]) {
            _ = longestSeq((dir as! String))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
