// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:33 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let EVEN_ROOT = 0
    let ODD_ROOT = 1
    func newNode(_ len: Int) -> [String: Any] {
        return (["length": len, "edges": [:], "suffix": 0] as! [String: Any])
    }
    func eertree(_ s: String) -> [[String: Any]] {
        var tree: [[String: Any]] = ([] as! [[String: Any]])
        tree = ((_append(tree, ["length": 0, "suffix": ODD_ROOT, "edges": [:]]) as! [Any]) as! [[String: Any]])
        tree = ((_append(tree, ["length": -1, "suffix": ODD_ROOT, "edges": [:]]) as! [Any]) as! [[String: Any]])
        var suffix: Int = ODD_ROOT
        var i: Int = 0
        while (i < Int(((s).count))) {
            let c = String(Array(s)[i..<(i + 1)])
            var n: Int = suffix
            var k: Int = 0
            while true {
                k = ((tree[n] as! [String: Any])["length"] as! Int)
                let b = ((i - k) - 1)
                if ((b >= 0) && (String(Array(s)[b..<(b + 1)]) == c)) {
                    break
                }
                n = ((tree[n] as! [String: Any])["suffix"] as! Int)
            }
            var edges: [String: Int] = ((tree[n] as! [String: Any])["edges"] as! [String: Int])
            if (edges[c] != nil) {
                suffix = (edges[c]! as! Int)
                i = Int((i + 1))
                continue
            }
            suffix = Int(((tree).count))
            tree = (_append(tree, (newNode(Int((k + 2))) as! [String: Any])) as! [[String: Any]])
            edges[c] = Int(suffix)
            tree[n]["edges"] = edges
            if (((tree[suffix] as! [String: Any])["length"] as! Int) == 1) {
                tree[suffix]["suffix"] = 0
                i = Int((i + 1))
                continue
            }
            while true {
                n = ((tree[n] as! [String: Any])["suffix"] as! Int)
                let b = ((i - ((tree[n] as! [String: Any])["length"] as! Int)) - 1)
                if ((b >= 0) && (String(Array(s)[b..<(b + 1)]) == c)) {
                    break
                }
            }
            var en: [String: Int] = ((tree[n] as! [String: Any])["edges"] as! [String: Int])
            tree[suffix]["suffix"] = en[c]!
            i = Int((i + 1))
        }
        return (tree as! [[String: Any]])
    }
    func child(_ tree: [[String: Any]], _ idx: Int, _ p: String, _ acc: inout [String]) -> [String] {
        var edges: [String: Int] = ((tree[idx] as! [String: Any])["edges"] as! [String: Int])
        for ch in edges.keys.sorted() {
            let nxt = edges[ch]!
            let pal = ((ch + p) + ch)
            acc = (_append(acc, pal) as! [String])
            acc = (child((tree as! [[String: Any]]), Int(nxt), String(describing: pal), &acc) as! [String])
        }
        return (acc as! [String])
    }
    func subPalindromes(_ tree: [[String: Any]]) -> [String] {
        var res: [String] = ([] as! [String])
        res = (child((tree as! [[String: Any]]), Int(EVEN_ROOT), "", &res) as! [String])
        var oEdges: [String: Int] = ((tree[ODD_ROOT] as! [String: Any])["edges"] as! [String: Int])
        for ch in oEdges.keys.sorted() {
            res = (_append(res, ch) as! [String])
            res = (child((tree as! [[String: Any]]), (oEdges[ch]! as! Int), String(describing: ch), &res) as! [String])
        }
        return (res as! [String])
    }
    func main() {
        let tree = (eertree("eertree") as! [[String: Any]])
        let subs = (subPalindromes((tree as! [[String: Any]])) as! [String])
        print(_p(_p(subs)))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
