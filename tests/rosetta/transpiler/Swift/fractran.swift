// Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:23:46 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() {
            if res > (Int64.max - Int64(d)) / 1000000000 {
                return Int.max
            }
            res = res * 1000000000 + Int64(d)
        }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func >(lhs: BigInt, rhs: BigInt) -> Bool { return rhs < lhs }
    static func <=(lhs: BigInt, rhs: BigInt) -> Bool { return !(rhs < lhs) }
    static func >=(lhs: BigInt, rhs: BigInt) -> Bool { return !(lhs < rhs) }
    static func /(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var result: [UInt32] = Array(repeating: 0, count: lhs.digits.count)
        var rem: Int64 = 0
        for i in stride(from: lhs.digits.count - 1, through: 0, by: -1) {
            let cur = rem * 1000000000 + Int64(lhs.digits[i])
            result[i] = UInt32(cur / Int64(divisor))
            rem = cur % Int64(divisor)
        }
        var r = BigInt(); r.digits = result
        while r.digits.last == 0 { r.digits.removeLast(); if r.digits.isEmpty { break } }
        return r
    }
    static func %(lhs: BigInt, rhs: BigInt) -> BigInt {
        let divisor = rhs.toInt()
        if divisor == 0 { return BigInt() }
        var rem: Int64 = 0
        for d in lhs.digits.reversed() {
            rem = (rem * 1000000000 + Int64(d)) % Int64(divisor)
        }
        return BigInt(Int(rem))
    }
    static func +(lhs: BigInt, rhs: Int) -> BigInt { return lhs + BigInt(rhs) }
    static func +(lhs: Int, rhs: BigInt) -> BigInt { return BigInt(lhs) + rhs }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
extension Int { init(_ b: BigInt) { self = b.toInt() } }
extension Double { init(_ b: BigInt) { self = Double(b.toInt()) } }
struct StepResult {
    var n: BigInt
    var ok: Bool
}
func step(_ n: BigInt, _ program: [[BigInt]]) -> StepResult {
    var n = n
    var i: Int = 0
    while (i < Int(((program).count))) {
        let num = BigInt(program[i][0])
        let den = BigInt(program[i][1])
        if ((n % den) == BigInt(0)) {
            n = BigInt(((n / den) * num))
            return StepResult(n: n, ok: true)
        }
        i = Int((i &+ 1))
    }
    return StepResult(n: n, ok: false)
}
func main() {
    let program: [[BigInt]] = ([([BigInt(17), BigInt(91)] as! [BigInt]), ([BigInt(78), BigInt(85)] as! [BigInt]), ([BigInt(19), BigInt(51)] as! [BigInt]), ([BigInt(23), BigInt(38)] as! [BigInt]), ([BigInt(29), BigInt(33)] as! [BigInt]), ([BigInt(77), BigInt(29)] as! [BigInt]), ([BigInt(95), BigInt(23)] as! [BigInt]), ([BigInt(77), BigInt(19)] as! [BigInt]), ([BigInt(1), BigInt(17)] as! [BigInt]), ([BigInt(11), BigInt(13)] as! [BigInt]), ([BigInt(13), BigInt(11)] as! [BigInt]), ([BigInt(15), BigInt(14)] as! [BigInt]), ([BigInt(15), BigInt(2)] as! [BigInt]), ([BigInt(55), BigInt(1)] as! [BigInt])] as! [[BigInt]])
    var n: BigInt = BigInt(BigInt(2))
    var primes: Int = 0
    var count: Int = 0
    let limit = 1000000
    let two: BigInt = BigInt(BigInt(2))
    var line: String = ""
    while ((primes < 20) && (count < limit)) {
        let res = step(BigInt(n), (program as! [[BigInt]]))
        n = BigInt(res.n)
        if (!res.ok) {
            break
        }
        var m: BigInt = BigInt(n)
        var pow: Int = 0
        while ((m % two) == BigInt(0)) {
            m = BigInt((m / two))
            pow = Int((pow &+ 1))
        }
        if ((m == BigInt(1)) && (pow > 1)) {
            line = (((line + String(describing: pow)) + " ") as! String)
            primes = Int((primes &+ 1))
        }
        count = Int((count &+ 1))
    }
    if (Int(((line).count)) > 0) {
        print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
    } else {
        print(_p(""))
    }
}
_ = main()
