// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:01:00 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func main() {
        print("Diagram after trimming whitespace and removal of blank lines:\n")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|                      ID                       |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|                    QDCOUNT                    |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|                    ANCOUNT                    |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|                    NSCOUNT                    |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("|                    ARCOUNT                    |")
        print("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")
        print("\nDecoded:\n")
        print("Name     Bits  Start  End")
        print("=======  ====  =====  ===")
        print("ID        16      0    15")
        print("QR         1     16    16")
        print("Opcode     4     17    20")
        print("AA         1     21    21")
        print("TC         1     22    22")
        print("RD         1     23    23")
        print("RA         1     24    24")
        print("Z          3     25    27")
        print("RCODE      4     28    31")
        print("QDCOUNT   16     32    47")
        print("ANCOUNT   16     48    63")
        print("NSCOUNT   16     64    79")
        print("ARCOUNT   16     80    95")
        print("\nTest string in hex:")
        print("78477bbf5496e12e1bf169a4")
        print("\nTest string in binary:")
        print("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100")
        print("\nUnpacked:\n")
        print("Name     Size  Bit pattern")
        print("=======  ====  ================")
        print("ID        16   0111100001000111")
        print("QR         1   0")
        print("Opcode     4   1111")
        print("AA         1   0")
        print("TC         1   1")
        print("RD         1   1")
        print("RA         1   1")
        print("Z          3   011")
        print("RCODE      4   1111")
        print("QDCOUNT   16   0101010010010110")
        print("ANCOUNT   16   1110000100101110")
        print("NSCOUNT   16   0001101111110001")
        print("ARCOUNT   16   0110100110100100")
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
