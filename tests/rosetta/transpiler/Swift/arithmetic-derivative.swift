// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:24:08 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func primeFactors(_ n: Int) -> [Int] {
        var factors: [Int] = ([] as! [Int])
        var x = n
        while ((x % 2) == 0) {
            factors = ((factors + [2]) as! [Int])
            x = Int((x / 2))
        }
        var p = 3
        while ((p * p) <= x) {
            while ((x % p) == 0) {
                factors = ((factors + [p]) as! [Int])
                x = Int((x / p))
            }
            p = Int((p + 2))
        }
        if (x > 1) {
            factors = ((factors + [x]) as! [Int])
        }
        return (factors as! [Int])
    }
    func `repeat`(_ ch: String, _ n: Int) -> String {
        var s = ""
        var i = 0
        while (i < n) {
            s = String((s + ch))
            i = Int((i + 1))
        }
        return String(s)
    }
    func D(_ n: Double) -> Double {
        if (n < 0.0) {
            return Double(-Double(D(Double(-n))))
        }
        if (n < 2.0) {
            return 0.0
        }
        var factors: [Int] = ([] as! [Int])
        if (n < 10000000000000000000.0) {
            factors = (primeFactors(Int(n)) as! [Int])
        } else {
            let g = Int((n / 100.0))
            factors = (primeFactors(Int(g)) as! [Int])
            factors = ((factors + [2]) as! [Int])
            factors = ((factors + [2]) as! [Int])
            factors = ((factors + [5]) as! [Int])
            factors = ((factors + [5]) as! [Int])
        }
        let c = Int(((factors).count))
        if (c == 1) {
            return 1.0
        }
        if (c == 2) {
            return Double((Int(factors[0]) + Int(factors[1])))
        }
        let d = (n / Double(factors[0]))
        return Double(((Double(D(Double(d))) * Double(factors[0])) + d))
    }
    func pad(_ n: Int) -> String {
        var s = String(describing: n)
        while (Int(((s).count)) < 4) {
            s = String((" " + s))
        }
        return String(s)
    }
    func main() {
        var vals: [Int] = ([] as! [Int])
        var n = -99
        while (n < 101) {
            vals = ((vals + [Int(Double(D(Double(n))))]) as! [Int])
            n = Int((n + 1))
        }
        var i = 0
        while (i < Int(((vals).count))) {
            var line = ""
            var j = 0
            while (j < 10) {
                line = String((line + String(describing: pad(Int(vals[(i + j)])))))
                if (j < 9) {
                    line = String((line + " "))
                }
                j = Int((j + 1))
            }
            print(line)
            i = Int((i + 10))
        }
        var pow = 1.0
        var m = 1
        while (m < 21) {
            pow = Double((pow * 10.0))
            var exp = String(describing: m)
            if (Int(((exp).count)) < 2) {
                exp = String((exp + " "))
            }
            var res = (String(describing: m) + String(describing: `repeat`("0", Int((m - 1)))))
            print(((("D(10^" + exp) + ") / 7 = ") + res))
            m = Int((m + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
