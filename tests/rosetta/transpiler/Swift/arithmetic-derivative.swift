// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:28:15 GMT+7
import Foundation

func primeFactors(_ n: Int) -> [Int] {
    var factors: [Int] = ([] as! [Int])
    var x = n
    while ((x % 2) == 0) {
        factors = ((factors + [2]) as! [Int])
        x = Int((x / 2))
    }
    var p = 3
    while ((p * p) <= x) {
        while ((x % p) == 0) {
            factors = ((factors + [p]) as! [Int])
            x = Int((x / p))
        }
        p = ((p + 2) as! Int)
    }
    if (x > 1) {
        factors = ((factors + [x]) as! [Int])
    }
    return (factors as! [Int])
}
func `repeat`(_ ch: String, _ n: Int) -> String {
    var s = ""
    var i = 0
    while (i < n) {
        s = ((s + ch) as! String)
        i = ((i + 1) as! Int)
    }
    return (s as! String)
}
func D(_ n: Double) -> Double {
    if (n < 0.0) {
        return (-D((-n as! Double)) as! Double)
    }
    if (n < 2.0) {
        return 0.0
    }
    var factors: [Int] = ([] as! [Int])
    if (n < 10000000000000000000.0) {
        factors = (primeFactors(Int(n)) as! [Int])
    } else {
        let g = Int((n / 100.0))
        factors = (primeFactors((g as! Int)) as! [Int])
        factors = ((factors + [2]) as! [Int])
        factors = ((factors + [2]) as! [Int])
        factors = ((factors + [5]) as! [Int])
        factors = ((factors + [5]) as! [Int])
    }
    let c = ((factors).count)
    if (c == 1) {
        return 1.0
    }
    if (c == 2) {
        return Double((factors[0] + factors[1]))
    }
    let d = (n / Double(factors[0]))
    return (((D((d as! Double)) * Double(factors[0])) + d) as! Double)
}
func pad(_ n: Int) -> String {
    var s = String(describing: n)
    while (((s).count) < 4) {
        s = ((" " + s) as! String)
    }
    return (s as! String)
}
func main() {
    var vals: [Int] = ([] as! [Int])
    var n = -99
    while (n < 101) {
        vals = ((vals + [Int(D(Double(n)))]) as! [Int])
        n = ((n + 1) as! Int)
    }
    var i = 0
    while (i < ((vals).count)) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = ((line + pad((vals[(i + j)] as! Int))) as! String)
            if (j < 9) {
                line = ((line + " ") as! String)
            }
            j = ((j + 1) as! Int)
        }
        print(line)
        i = ((i + 10) as! Int)
    }
    var pow = 1.0
    var m = 1
    while (m < 21) {
        pow = ((pow * 10.0) as! Double)
        var exp = String(describing: m)
        if (((exp).count) < 2) {
            exp = ((exp + " ") as! String)
        }
        var res = (String(describing: m) + `repeat`("0", ((m - 1) as! Int)))
        print(((("D(10^" + exp) + ") / 7 = ") + res))
        m = ((m + 1) as! Int)
    }
}
_ = main()
