// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:47 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func bitAt(_ x: Int, _ idx: Int) -> Int {
        var v: Int = x
        var i: Int = 0
        while (i < idx) {
            v = Int((v / 2))
            i = Int((i + 1))
        }
        return Int((v % 2))
    }
    func outputState(_ state: String) {
        var line: String = ""
        var i: Int = 0
        while (i < Int(((state).count))) {
            if (String(Array(state)[i..<(i + 1)]) == "1") {
                line = String(describing: (line + "#"))
            } else {
                line = String(describing: (line + " "))
            }
            i = Int((i + 1))
        }
        print(_p(line))
    }
    func step(_ state: String, _ r: Int) -> String {
        let cells = Int(((state).count))
        var out: String = ""
        var i: Int = 0
        while (i < cells) {
            let l = String(Array(state)[(Int(((i - 1) + cells)) % cells)..<((Int(((i - 1) + cells)) % cells) + 1)])
            let c = String(Array(state)[i..<(i + 1)])
            let rt = String(Array(state)[(Int((i + 1)) % cells)..<((Int((i + 1)) % cells) + 1)])
            var idx: Int = 0
            if (l == "1") {
                idx = Int((idx + 4))
            }
            if (c == "1") {
                idx = Int((idx + 2))
            }
            if (rt == "1") {
                idx = Int((idx + 1))
            }
            if (Int(bitAt(Int(r), Int(idx))) == 1) {
                out = String(describing: (out + "1"))
            } else {
                out = String(describing: (out + "0"))
            }
            i = Int((i + 1))
        }
        return String(describing: out)
    }
    func elem(_ r: Int, _ cells: Int, _ generations: Int, _ state: String) {
        _ = outputState(String(describing: state))
        var g: Int = 0
        var s: String = state
        while (g < generations) {
            s = String(describing: step(String(describing: s), Int(r)))
            _ = outputState(String(describing: s))
            g = Int((g + 1))
        }
    }
    func randInit(_ cells: Int, _ seed: Int) -> String {
        var s: String = ""
        var val: Int = seed
        var i: Int = 0
        while (i < cells) {
            val = Int((Int(((val * 1664525) + 1013904223)) % 2147483647))
            if ((val % 2) == 0) {
                s = String(describing: (s + "0"))
            } else {
                s = String(describing: (s + "1"))
            }
            i = Int((i + 1))
        }
        return String(describing: s)
    }
    func singleInit(_ cells: Int) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < cells) {
            if (i == (cells / 2)) {
                s = String(describing: (s + "1"))
            } else {
                s = String(describing: (s + "0"))
            }
            i = Int((i + 1))
        }
        return String(describing: s)
    }
    func main() {
        let cells = 20
        let generations = 9
        print(_p("Single 1, rule 90:"))
        var state: String = String(describing: singleInit(Int(cells)))
        _ = elem(90, Int(cells), Int(generations), String(describing: state))
        print(_p("Random intial state, rule 30:"))
        state = String(describing: randInit(Int(cells), 3))
        _ = elem(30, Int(cells), Int(generations), String(describing: state))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
