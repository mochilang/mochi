// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func leapYear(_ y: Int) -> Bool {
        return ((((y % 4) == 0) && ((y % 100) != 0)) || ((y % 400) == 0))
    }
    func monthDays(_ y: Int, _ m: Int) -> Int {
        var days: [Int] = ([0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] as! [Int])
        if ((m == 2) && leapYear((y as! Int))) {
            return 29
        }
        return (days[m] as! Int)
    }
    func zeller(_ y: Int, _ m: Int, _ d: Int) -> Int {
        var mm: Int = m
        var yy: Int = y
        if (mm < 3) {
            mm = ((mm + 12) as! Int)
            yy = ((yy - 1) as! Int)
        }
        let K = (yy % 100)
        let J = (yy / 100)
        let h = (Int((((((d + (Int((13 * Int((mm + 1)))) / 5)) + K) + (K / 4)) + (J / 4)) + (5 * J))) % 7)
        return ((Int((h + 6)) % 7) as! Int)
    }
    func lastSunday(_ y: Int, _ m: Int) -> Int {
        var day: Int = Int(monthDays((y as! Int), (m as! Int)))
        while ((day > 0) && (Int(zeller((y as! Int), (m as! Int), (day as! Int))) != 0)) {
            day = ((day - 1) as! Int)
        }
        return (day as! Int)
    }
    func monthName(_ m: Int) -> String {
        var names: [String] = (["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] as! [String])
        return (names[m] as! String)
    }
    func main() {
        let year = Int(_int((readLine() ?? "")))
        print(_p(("Last Sundays of each month of " + _p(year))))
        print(_p("=================================="))
        var m: Int = 1
        while (m <= 12) {
            let day = Int(lastSunday((year as! Int), (m as! Int)))
            print(_p(((String(describing: monthName((m as! Int))) + ": ") + _p(day))))
            m = ((m + 1) as! Int)
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
