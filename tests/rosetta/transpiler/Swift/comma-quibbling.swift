// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:07:09 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func quibble(_ items: [String]) -> String {
    let n = Int(((items).count))
    if (n == 0) {
        return "{}"
    } else if (n == 1) {
        return (("{" + (items[0] as! String)) + "}")
    } else if (n == 2) {
        return (((("{" + (items[0] as! String)) + " and ") + (items[1] as! String)) + "}")
    } else {
        var prefix: String = ""
        for i in 0..<(n - 1) {
            if (i == (n - 1)) {
                break
            }
            if (i > 0) {
                prefix = ((prefix + ", ") as! String)
            }
            prefix = ((prefix + (items[i] as! String)) as! String)
        }
        return (((("{" + prefix) + " and ") + (items[(n - 1)] as! String)) + "}")
    }
    
    
}
func main() {
    print(_p(String(describing: quibble(([] as! [String])))))
    print(_p(String(describing: quibble(([("ABC" as! Any)] as! [String])))))
    print(_p(String(describing: quibble(([("ABC" as! Any), ("DEF" as! Any)] as! [String])))))
    print(_p(String(describing: quibble(([("ABC" as! Any), ("DEF" as! Any), ("G" as! Any), ("H" as! Any)] as! [String])))))
}
_ = main()
