// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:32:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func powInt(_ base: Int, _ exp: Int) -> Int {
        var r: Int = 1
        var b: Int = base
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                r = Int((r * b))
            }
            b = Int((b * b))
            e = Int((e / 2))
        }
        return Int(r)
    }
    func minInt(_ x: Int, _ y: Int) -> Int {
        if (x < y) {
            return Int(x)
        }
        return Int(y)
    }
    func throwDie(_ nSides: Int, _ nDice: Int, _ s: Int, _ counts: inout [Int]) {
        if (nDice == 0) {
            counts[s] = Int(((counts[s] as! Int) + 1))
            return
        }
        var i: Int = 1
        while (i <= nSides) {
            _ = throwDie(Int(nSides), Int((nDice - 1)), Int((s + i)), &counts)
            i = Int((i + 1))
        }
    }
    func beatingProbability(_ nSides1: Int, _ nDice1: Int, _ nSides2: Int, _ nDice2: Int) -> Double {
        let len1 = (Int((nSides1 + 1)) * nDice1)
        var c1: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < len1) {
            c1 = (_append(c1, 0) as! [Int])
            i = Int((i + 1))
        }
        _ = throwDie(Int(nSides1), Int(nDice1), 0, &c1)
        let len2 = (Int((nSides2 + 1)) * nDice2)
        var c2: [Int] = ([] as! [Int])
        var j: Int = 0
        while (j < len2) {
            c2 = (_append(c2, 0) as! [Int])
            j = Int((j + 1))
        }
        _ = throwDie(Int(nSides2), Int(nDice2), 0, &c2)
        let p12 = (Double(powInt(Int(nSides1), Int(nDice1))) * Double(powInt(Int(nSides2), Int(nDice2))))
        var tot: Double = 0.0
        i = 0
        while (i < len1) {
            j = 0
            let m = Int(minInt(Int(i), Int(len2)))
            while (j < m) {
                tot = Double((tot + (Double((Double((c1[i] as! Int)) * Double(c2[j]))) / p12)))
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        return Double(tot)
    }
    print(_p(_p(Double(beatingProbability(4, 9, 6, 6)))))
    print(_p(_p(Double(beatingProbability(10, 5, 7, 6)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
