// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:26:12 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let rows = 20
    let cols = 30
    let p = 0.01
    let f = 0.001
    func `repeat`(_ ch: String, _ n: Int) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < n) {
            s = ((s + ch) as! String)
            i = ((i + 1) as! Int)
        }
        return (s as! String)
    }
    func chance(_ prob: Double) -> Bool {
        let threshold = Int(_int((prob * 1000.0)))
        return ((Int(_now()) % 1000) < threshold)
    }
    func newBoard() -> [[String]] {
        var b: [[String]] = ([] as! [[String]])
        var r: Int = 0
        while (r < rows) {
            var row: [String] = ([] as! [String])
            var c: Int = 0
            while (c < cols) {
                if ((Int(_now()) % 2) == 0) {
                    row = (_append(row, "T") as! [String])
                } else {
                    row = (_append(row, " ") as! [String])
                }
                c = ((c + 1) as! Int)
            }
            b = (_append(b, row) as! [[String]])
            r = ((r + 1) as! Int)
        }
        return (b as! [[String]])
    }
    func step(_ src: [[String]]) -> [[String]] {
        var dst: [[String]] = ([] as! [[String]])
        var r: Int = 0
        while (r < rows) {
            var row: [String] = ([] as! [String])
            var c: Int = 0
            while (c < cols) {
                var cell: String = (src[r][c] as! String)
                var next: String = cell
                if (cell == "#") {
                    next = " "
                } else if (cell == "T") {
                    var burning: Bool = false
                    var dr: Int = -1
                    while (dr <= 1) {
                        var dc: Int = -1
                        while (dc <= 1) {
                            if ((dr != 0) || (dc != 0)) {
                                let rr = (r + dr)
                                let cc = (c + dc)
                                if ((((rr >= 0) && (rr < rows)) && (cc >= 0)) && (cc < cols)) {
                                    if ((src[rr][cc] as! String) == "#") {
                                        burning = true
                                    }
                                }
                            }
                            dc = ((dc + 1) as! Int)
                        }
                        dr = ((dr + 1) as! Int)
                    }
                    if (burning || chance(Double(f))) {
                        next = "#"
                    }
                } else {
                    if chance(Double(p)) {
                        next = "T"
                    }
                }
                
                row = (_append(row, next) as! [String])
                c = ((c + 1) as! Int)
            }
            dst = (_append(dst, row) as! [[String]])
            r = ((r + 1) as! Int)
        }
        return (dst as! [[String]])
    }
    func printBoard(_ b: [[String]]) {
        print(_p((String(describing: `repeat`("__", (cols as! Int))) + "\n\n")))
        var r: Int = 0
        while (r < rows) {
            var line: String = ""
            var c: Int = 0
            while (c < cols) {
                let cell = (b[r][c] as! String)
                if (cell == " ") {
                    line = ((line + "  ") as! String)
                } else {
                    line = (((line + " ") + cell) as! String)
                }
                c = ((c + 1) as! Int)
            }
            print(_p((line + "\n")))
            r = ((r + 1) as! Int)
        }
    }
    var board: [[String]] = (newBoard() as! [[String]])
    _ = printBoard((board as! [[String]]))
    board = (step((board as! [[String]])) as! [[String]])
    _ = printBoard((board as! [[String]]))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
