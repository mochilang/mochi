// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:32:49 GMT+7
import Foundation

func _int(_ v: Any) -> Int {
    if let s = v as? String {
        if s.count == 1 { return Int(s.unicodeScalars.first!.value) }
        return Int(s) ?? 0
    }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func sieve(_ limit: Int) -> [Int] {
    var spf: [Int] = ([] as! [Int])
    var i = 0
    while (i <= limit) {
        spf = ((spf + [0]) as! [Int])
        i = ((i + 1) as! Int)
    }
    i = 2
    while (i <= limit) {
        if (spf[i] == 0) {
            spf[i] = (i as! Int)
            if ((i * i) <= limit) {
                var j = (i * i)
                while (j <= limit) {
                    if (spf[j] == 0) {
                        spf[j] = (i as! Int)
                    }
                    j = ((j + i) as! Int)
                }
            }
        }
        i = ((i + 1) as! Int)
    }
    return (spf as! [Int])
}
func primesFrom(_ spf: [Int], _ limit: Int) -> [Int] {
    var primes: [Int] = ([] as! [Int])
    var i = 3
    while (i <= limit) {
        if (spf[i] == i) {
            primes = ((primes + [i]) as! [Int])
        }
        i = ((i + 1) as! Int)
    }
    return (primes as! [Int])
}
func pad3(_ n: Int) -> String {
    var s = String(describing: n)
    while (((s).count) < 3) {
        s = ((" " + s) as! String)
    }
    return (s as! String)
}
func commatize(_ n: Int) -> String {
    var s = String(describing: n)
    var out = ""
    var i = (((s).count) - 1)
    var c = 0
    while (i >= 0) {
        out = ((String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]) + out) as! String)
        c = ((c + 1) as! Int)
        if (((c % 3) == 0) && (i > 0)) {
            out = (("," + out) as! String)
        }
        i = ((i - 1) as! Int)
    }
    return (out as! String)
}
func primeCount(_ primes: [Int], _ last: Int, _ spf: [Int]) -> Int {
    var lo = 0
    var hi = ((primes).count)
    while (lo < hi) {
        var mid = _int(((lo + hi) / 2))
        if (primes[mid] < last) {
            lo = ((mid + 1) as! Int)
        } else {
            hi = (mid as! Int)
        }
    }
    var count = (lo + 1)
    if (spf[last] != last) {
        count = ((count - 1) as! Int)
    }
    return (count as! Int)
}
func arithmeticNumbers(_ limit: Int, _ spf: [Int]) -> [Int] {
    var arr: [Int] = [1]
    var n = 3
    while (((arr).count) < limit) {
        if (spf[n] == n) {
            arr = ((arr + [n]) as! [Int])
        } else {
            var x = n
            var sigma = 1
            var tau = 1
            while (x > 1) {
                var p = spf[x]
                if (p == 0) {
                    p = (x as! Int)
                }
                var cnt = 0
                var power = p
                var sum = 1
                while ((x % p) == 0) {
                    x = ((x / p) as! Int)
                    cnt = ((cnt + 1) as! Int)
                    sum = ((sum + power) as! Int)
                    power = ((power * p) as! Int)
                }
                sigma = ((sigma * sum) as! Int)
                tau = ((tau * (cnt + 1)) as! Int)
            }
            if ((sigma % tau) == 0) {
                arr = ((arr + [n]) as! [Int])
            }
        }
        n = ((n + 1) as! Int)
    }
    return (arr as! [Int])
}
func main() {
    let limit = 1228663
    let spf = sieve((limit as! Int))
    let primes = primesFrom((spf as! [Int]), (limit as! Int))
    let arr = arithmeticNumbers(1000000, (spf as! [Int]))
    print("The first 100 arithmetic numbers are:")
    var i = 0
    while (i < 100) {
        var line = ""
        var j = 0
        while (j < 10) {
            line = ((line + pad3((arr[(i + j)] as! Int))) as! String)
            if (j < 9) {
                line = ((line + " ") as! String)
            }
            j = ((j + 1) as! Int)
        }
        print(line)
        i = ((i + 10) as! Int)
    }
    for x in [1000, 10000, 100000, 1000000] {
        let last = arr[(x - 1)]
        let lastc = commatize((last as! Int))
        print(((("\nThe " + commatize((x as! Int))) + "th arithmetic number is: ") + lastc))
        let pc = primeCount((primes as! [Int]), (last as! Int), (spf as! [Int]))
        let comp = ((x - pc) - 1)
        print((((("The count of such numbers <= " + lastc) + " which are composite is ") + commatize((comp as! Int))) + "."))
    }
}
_ = main()
