// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:09:40 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func divisors(_ n: Int) -> [Int] {
        var divs: [Int] = ([1] as! [Int])
        var divs2: [Int] = ([] as! [Int])
        var i = 2
        while ((i * i) <= n) {
            if ((n % i) == 0) {
                let j = Int((n / i))
                divs = ((divs + [i]) as! [Int])
                if (i != j) {
                    divs2 = ((divs2 + [j]) as! [Int])
                }
            }
            i = ((i + 1) as! Int)
        }
        var j = ((Int(((divs2).count)) - 1) as! Int)
        while (j >= 0) {
            divs = ((divs + [Int(divs2[j])]) as! [Int])
            j = ((j - 1) as! Int)
        }
        return (divs as! [Int])
    }
    func sum(_ xs: [Int]) -> Int {
        var tot = 0
        for v in xs {
            tot = ((tot + v) as! Int)
        }
        return (tot as! Int)
    }
    func sumStr(_ xs: [Int]) -> String {
        var s = ""
        var i = 0
        while (i < Int(((xs).count))) {
            s = (((s + String(describing: Int(xs[i]))) + " + ") as! String)
            i = ((i + 1) as! Int)
        }
        return String(describing: String(Array((s as! String))[0..<((Int(((s).count)) - 3) as! Int)]))
    }
    func pad2(_ n: Int) -> String {
        let s = String(describing: n)
        if (Int(((s).count)) < 2) {
            return ((" " + s) as! String)
        }
        return (s as! String)
    }
    func pad5(_ n: Int) -> String {
        var s = String(describing: n)
        while (Int(((s).count)) < 5) {
            s = ((" " + s) as! String)
        }
        return (s as! String)
    }
    func abundantOdd(_ searchFrom: Int, _ countFrom: Int, _ countTo: Int, _ printOne: Bool) -> Int {
        var count = (countFrom as! Int)
        var n = (searchFrom as! Int)
        while (count < countTo) {
            let divs = (divisors((n as! Int)) as! [Int])
            let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
            if (tot > n) {
                count = ((count + 1) as! Int)
                if (printOne && (count < countTo)) {
                    n = ((n + 2) as! Int)
                    continue
                }
                let s = String(describing: sumStr((divs as! [Int])))
                if (!printOne) {
                    print(((((((String(describing: pad2((count as! Int))) + ". ") + String(describing: pad5((n as! Int)))) + " < ") + s) + " = ") + String(describing: tot)))
                } else {
                    print(((((String(describing: n) + " < ") + s) + " = ") + String(describing: tot)))
                }
            }
            n = ((n + 2) as! Int)
        }
        return (n as! Int)
    }
    func main() {
        let max = 25
        print((("The first " + String(describing: max)) + " abundant odd numbers are:"))
        let n = Int(abundantOdd(1, 0, (max as! Int), false))
        print("\nThe one thousandth abundant odd number is:")
        _ = Int(abundantOdd((n as! Int), (max as! Int), 1000, true))
        print("\nThe first abundant odd number above one billion is:")
        _ = Int(abundantOdd(1000000001, 0, 1, true))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
