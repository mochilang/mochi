// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:53:11 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func divisors(_ n: Int) -> [Int] {
        var divs: [Int] = ([1] as! [Int])
        var divs2: [Int] = ([] as! [Int])
        var i: Int = 2
        while ((i &* i) <= n) {
            if ((n % i) == 0) {
                let j = Int((n / i))
                divs = (_append(divs, i) as! [Int])
                if (i != j) {
                    divs2 = (_append(divs2, j) as! [Int])
                }
            }
            i = Int((i &+ 1))
        }
        var j: Int = (Int(((divs2).count)) &- 1)
        while (j >= 0) {
            divs = (_append(divs, Int(divs2[j])) as! [Int])
            j = Int((j &- 1))
        }
        return divs
    }
    func sum(_ xs: [Int]) -> Int {
        var tot: Int = 0
        for v in xs {
            tot = Int((tot &+ v))
        }
        return tot
    }
    func sumStr(_ xs: [Int]) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            s = (((s + String(describing: Int(xs[i]))) + " + ") as! String)
            i = Int((i &+ 1))
        }
        return String(describing: String(Array(String(describing: (s as! String)))[0..<Int((Int(((s).count)) &- 3))]))
    }
    func pad2(_ n: Int) -> String {
        let s = String(describing: n)
        if (Int(((s).count)) < 2) {
            return (" " + s)
        }
        return s
    }
    func pad5(_ n: Int) -> String {
        var s: String = String(describing: n)
        while (Int(((s).count)) < 5) {
            s = ((" " + s) as! String)
        }
        return s
    }
    func abundantOdd(_ searchFrom: Int, _ countFrom: Int, _ countTo: Int, _ printOne: Bool) -> Int {
        var count: Int = countFrom
        var n: Int = searchFrom
        while (count < countTo) {
            let divs: [Int] = (divisors(Int(n)) as! [Int])
            let tot = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
            if (tot > n) {
                count = Int((count &+ 1))
                if (printOne && (count < countTo)) {
                    n = Int((n &+ 2))
                    continue
                }
                let s = String(describing: sumStr((divs as! [Int])))
                if (!printOne) {
                    print(_p(((((((String(describing: pad2(Int(count))) + ". ") + String(describing: pad5(Int(n)))) + " < ") + s) + " = ") + String(describing: tot))))
                } else {
                    print(_p(((((String(describing: n) + " < ") + s) + " = ") + String(describing: tot))))
                }
            }
            n = Int((n &+ 2))
        }
        return n
    }
    func main() {
        let max = 25
        print(_p((("The first " + String(describing: max)) + " abundant odd numbers are:")))
        let n = Int(abundantOdd(1, 0, Int(max), false))
        print(_p("\nThe one thousandth abundant odd number is:"))
        _ = Int(abundantOdd(Int(n), Int(max), 1000, true))
        print(_p("\nThe first abundant odd number above one billion is:"))
        _ = Int(abundantOdd(1000000001, 0, 1, true))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
