// Generated by Mochi transpiler v0.10.56 on 2025-08-04 10:42:45 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
var board: [Int] = ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0] as! [Int])
let solved: [Int] = ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0] as! [Int])
var empty: Int = 15
var moves: Int = 0
var quit: Bool = false
func randMove() -> Int {
    return (Int(_now()) % 4)
}
func isSolved() -> Bool {
    var i: Int = 0
    while (i < 16) {
        if (Int(board[i]) != Int(solved[i])) {
            return false
        }
        i = Int((i &+ 1))
    }
    return true
}
struct MoveResult: Codable {
    var idx: Int
    var ok: Bool
}
func isValidMove(_ m: Int) -> MoveResult {
    if (m == 0) {
        return MoveResult(idx: (empty &- 4), ok: ((empty / 4) > 0))
    }
    if (m == 1) {
        return MoveResult(idx: (empty &+ 4), ok: ((empty / 4) < 3))
    }
    if (m == 2) {
        return MoveResult(idx: (empty &+ 1), ok: ((empty % 4) < 3))
    }
    if (m == 3) {
        return MoveResult(idx: (empty &- 1), ok: ((empty % 4) > 0))
    }
    return MoveResult(idx: 0, ok: false)
}
func doMove(_ m: Int) -> Bool {
    let r = isValidMove(Int(m))
    if (!r.ok) {
        return false
    }
    let i = empty
    let j = r.idx
    let tmp = Int(board[i])
    board[i] = Int(board[j])
    board[j] = Int(tmp)
    empty = Int(j)
    moves = Int((moves &+ 1))
    return true
}
func shuffle(_ n: Int) {
    var i: Int = 0
    while ((i < n) || isSolved()) {
        if doMove(Int(randMove())) {
            i = Int((i &+ 1))
        }
    }
}
func printBoard() {
    var line: String = ""
    var i: Int = 0
    while (i < 16) {
        let val = Int(board[i])
        if (val == 0) {
            line = ((line + "  .") as! String)
        } else {
            let s = String(describing: val)
            if (val < 10) {
                line = (((line + "  ") + s) as! String)
            } else {
                line = (((line + " ") + s) as! String)
            }
        }
        if ((i % 4) == 3) {
            print(_p(line))
            line = ""
        }
        i = Int((i &+ 1))
    }
}
func playOneMove() {
    while true {
        print(_p((("Enter move #" + String(describing: (moves &+ 1))) + " (U, D, L, R, or Q): ")))
        let s = (readLine() ?? "")
        if (s == "") {
            continue
        }
        let c = String(Array(s)[0..<1])
        var m: Int = 0
        if ((c == "U") || (c == "u")) {
            m = 0
        } else if ((c == "D") || (c == "d")) {
            m = 1
        } else if ((c == "R") || (c == "r")) {
            m = 2
        } else if ((c == "L") || (c == "l")) {
            m = 3
        } else if ((c == "Q") || (c == "q")) {
            print(_p((("Quiting after " + String(describing: moves)) + " moves.")))
            quit = true
            return
        } else {
            print(_p(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like).")))
            continue
        }
        
        
        
        
        if (!doMove(Int(m))) {
            print(_p("That is not a valid move at the moment."))
            continue
        }
        return
    }
}
func play() {
    print(_p("Starting board:"))
    while ((!quit) && (isSolved() == false)) {
        print(_p(""))
        _ = printBoard()
        _ = playOneMove()
    }
    if isSolved() {
        print(_p((("You solved the puzzle in " + String(describing: moves)) + " moves.")))
    }
}
func main() {
    _ = shuffle(50)
    _ = play()
}
_ = main()
