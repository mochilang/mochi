// Generated by Mochi transpiler v0.10.37 on 2025-07-23 09:25:01 GMT+7
import Foundation

var board = ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0] as! [Int])
let solved = ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0] as! [Int])
var empty = 15
var moves = 0
var quit = false
func randMove() -> Int {
    return (Int(Int.random(in: 0..<Int.max)) % 4)
}
func isSolved() -> Bool {
    var i = 0
    while (Int(i) < 16) {
        if (Int(board[Int(i)]) != Int(solved[Int(i)])) {
            return false
        }
        i = (Int(i) + 1)
    }
    return true
}
func isValidMove(_ m: Int) -> [String: Any] {
    var m = m
    if (Int(m) == 0) {
        return ["idx": (Int(empty) - 4), "ok": ((Int(empty) / 4) > 0)]
    }
    if (Int(m) == 1) {
        return ["idx": (Int(empty) + 4), "ok": ((Int(empty) / 4) < 3)]
    }
    if (Int(m) == 2) {
        return ["idx": (Int(empty) + 1), "ok": ((Int(empty) % 4) < 3)]
    }
    if (Int(m) == 3) {
        return ["idx": (Int(empty) - 1), "ok": ((Int(empty) % 4) > 0)]
    }
    return ["idx": 0, "ok": false]
}
func doMove(_ m: Int) -> Bool {
    var m = m
    let r = (isValidMove(Int(m)) as! [String: Any])
    if (!(r["ok"]! as! Bool)) {
        return false
    }
    let i = Int(empty)
    let j = (r["idx"]! as! Int)
    let tmp = Int(board[Int(i)])
    board[Int(i)] = Int(board[Int(j)])
    board[Int(j)] = Int(tmp)
    empty = Int(j)
    moves = (Int(moves) + 1)
    return true
}
func shuffle(_ n: Int) {
    var n = n
    var i = 0
    while ((Int(i) < Int(n)) || Bool(isSolved())) {
        if Bool(doMove(Int(randMove()))) {
            i = (Int(i) + 1)
        }
    }
}
func printBoard() {
    var line = ""
    var i = 0
    while (Int(i) < 16) {
        let val = Int(board[Int(i)])
        if (Int(val) == 0) {
            line = (String(line) + "  .")
        } else {
            let s = String(String(Int(val)))
            if (Int(val) < 10) {
                line = ((String(line) + "  ") + String(s))
            } else {
                line = ((String(line) + " ") + String(s))
            }
        }
        if ((Int(i) % 4) == 3) {
            print(String(line))
            line = ""
        }
        i = (Int(i) + 1)
    }
}
func playOneMove() {
    while true {
        print((("Enter move #" + String(String((Int(moves) + 1)))) + " (U, D, L, R, or Q): "))
        let s = String((readLine() ?? ""))
        if (String(s) == "") {
            continue
        }
        let c = String(String(Array(s)[0..<1]))
        var m = 0
        if ((String(c) == "U") || (String(c) == "u")) {
            m = 0
        } else if ((String(c) == "D") || (String(c) == "d")) {
            m = 1
        } else if ((String(c) == "R") || (String(c) == "r")) {
            m = 2
        } else if ((String(c) == "L") || (String(c) == "l")) {
            m = 3
        } else if ((String(c) == "Q") || (String(c) == "q")) {
            print((("Quiting after " + String(String(Int(moves)))) + " moves."))
            quit = true
            return
        } else {
            print(((("Please enter \"U\", \"D\", \"L\", or \"R\" to move the empty cell\n" + "up, down, left, or right. You can also enter \"Q\" to quit.\n") + "Upper or lowercase is accepted and only the first non-blank\n") + "character is important (i.e. you may enter \"up\" if you like)."))
            continue
        }
        
        
        
        
        if (!Bool(doMove(Int(m)))) {
            print("That is not a valid move at the moment.")
            continue
        }
        return
    }
}
func play() {
    print("Starting board:")
    while ((!Bool(quit)) && (Bool(isSolved()) == false)) {
        print("")
        printBoard()
        playOneMove()
    }
    if Bool(isSolved()) {
        print((("You solved the puzzle in " + String(String(Int(moves)))) + " moves."))
    }
}
func main() {
    shuffle(50)
    play()
}
main()
