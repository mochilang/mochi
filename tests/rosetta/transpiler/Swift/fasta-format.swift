// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:14:03 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let FASTA = (((((">Rosetta_Example_1\n" + "THERECANBENOSPACE\n") + ">Rosetta_Example_2\n") + "THERECANBESEVERAL\n") + "LINESBUTTHEYALLMUST\n") + "BECONCATENATED")
    func splitLines(_ s: String) -> [String] {
        var lines: [String] = ([] as! [String])
        var start: Int = 0
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) == "\n") {
                lines = (_append(lines, String(describing: String(Array(String(describing: (s as! String)))[(start as! Int)..<(i as! Int)]))) as! [String])
                i = ((i + 1) as! Int)
                start = (i as! Int)
            } else {
                i = ((i + 1) as! Int)
            }
        }
        lines = (_append(lines, String(describing: String(Array(String(describing: (s as! String)))[(start as! Int)..<Int(((s).count))]))) as! [String])
        return (lines as! [String])
    }
    func parseFasta(_ text: String) -> [String] {
        var key: String = ""
        var val: String = ""
        var out: [String] = ([] as! [String])
        for line in (splitLines((text as! String)) as! [String]) {
            if (line == "") {
                continue
            }
            if (String(describing: String(Array(String(describing: (line as! String)))[0..<1])) == ">") {
                if (key != "") {
                    out = (_append(out, ((key + ": ") + val)) as! [String])
                }
                var hdr: String = String(describing: String(Array(String(describing: (line as! String)))[1..<Int(((line).count))]))
                var idx: Int = 0
                while ((idx < Int(((hdr).count))) && (String(describing: String(Array(String(describing: (hdr as! String)))[(idx as! Int)..<((idx + 1) as! Int)])) != " ")) {
                    idx = ((idx + 1) as! Int)
                }
                key = String(describing: String(Array(String(describing: (hdr as! String)))[0..<(idx as! Int)]))
                val = ""
            } else {
                if (key == "") {
                    print(_p("missing header"))
                    return ([] as! [String])
                }
                val = ((val + line) as! String)
            }
        }
        if (key != "") {
            out = (_append(out, ((key + ": ") + val)) as! [String])
        }
        return (out as! [String])
    }
    func main() {
        let res: [String] = (parseFasta((FASTA as! String)) as! [String])
        for line in res {
            print(_p(line))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
