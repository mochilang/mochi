// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:35 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct DivResult {
        var q: Int
        var r: Int
    }
    func egyptianDivide(_ dividend: Int, _ divisor: Int) -> DivResult {
        if ((dividend < 0) || (divisor <= 0)) {
            _ = panic("Invalid argument(s)")
        }
        if (dividend < divisor) {
            return (DivResult(q: 0, r: dividend) as! DivResult)
        }
        var powers: [Int] = ([1] as! [Int])
        var doublings: [Int] = ([divisor] as! [Int])
        var doubling: Int = (divisor * 2)
        while (doubling <= dividend) {
            powers = (_append(powers, ((powers[(Int(((powers).count)) - 1)] as! Int) * 2)) as! [Int])
            doublings = (_append(doublings, doubling) as! [Int])
            doubling = Int((doubling * 2))
        }
        var ans: Int = 0
        var accum: Int = 0
        var i: Int = (Int(((doublings).count)) - 1)
        while (i >= 0) {
            if ((accum + (doublings[i] as! Int)) <= dividend) {
                accum = Int((accum + (doublings[i] as! Int)))
                ans = Int((ans + (powers[i] as! Int)))
                if (accum == dividend) {
                    break
                }
            }
            i = Int((i - 1))
        }
        return (DivResult(q: ans, r: (dividend - accum)) as! DivResult)
    }
    func main() {
        let dividend = 580
        let divisor = 34
        let res = egyptianDivide(Int(dividend), Int(divisor))
        print(_p(((((((_p(dividend) + " divided by ") + _p(divisor)) + " is ") + _p(res.q)) + " with remainder ") + _p(res.r))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
