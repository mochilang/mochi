// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:49:46 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func indexOf(_ s: String, _ ch: String) -> Int {
    var i: Int = 0
    while (i < Int(((s).count))) {
        if (String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))])) == ch) {
            return i
        }
        i = Int((i &+ 1))
    }
    return -1
}
func fmt1(_ x: Double) -> String {
    var y: Double = (Double(Int((Double((x * 10.0)) + 0.5))) / 10.0)
    var s: String = _p(y)
    let dot = Int((String(describing: (s as! String)).firstIndex(of: Character(String(describing: ".")))?.utf16Offset(in: String(describing: (s as! String)) ) ?? -1))
    if (dot < 0) {
        s = ((s + ".0") as! String)
    }
    return s
}
func printColumnMatrix(_ xs: [Double]) {
    if (Int(((xs).count)) == 0) {
        return
    }
    print(_p((("⎡" + String(describing: fmt1((xs[0] as! Double)))) + "⎤")))
    var i: Int = 1
    while (i < (Int(((xs).count)) &- 1)) {
        print(_p((("⎢" + String(describing: fmt1((xs[i] as! Double)))) + "⎥")))
        i = Int((i &+ 1))
    }
    print(_p((("⎣ " + String(describing: fmt1((xs[(Int(((xs).count)) &- 1)] as! Double)))) + "⎦")))
}
func deconv(_ g: [Double], _ f: [Double]) -> [Double] {
    var h: [Double] = ([] as! [Double])
    var n: Int = 0
    let hn = ((Int(((g).count)) &- Int(((f).count))) &+ 1)
    while (n < hn) {
        var v: Double = (g[n] as! Double)
        var lower: Int = 0
        if (n >= Int(((f).count))) {
            lower = Int(((n &- Int(((f).count))) &+ 1))
        }
        var i: Int = lower
        while (i < n) {
            v = Double((v - ((h[i] as! Double) * (f[(n &- i)] as! Double))))
            i = Int((i &+ 1))
        }
        v = Double((v / (f[0] as! Double)))
        h = (_append(h, v) as! [Double])
        n = Int((n &+ 1))
    }
    return h
}
func main() {
    let h: [Double] = ([-8.0, -9.0, -3.0, -1.0, -6.0, 7.0] as! [Double])
    let f: [Double] = ([-3.0, -6.0, -1.0, 8.0, -6.0, 3.0, -1.0, -9.0, -9.0, 3.0, -2.0, 5.0, 2.0, -2.0, -7.0, -1.0] as! [Double])
    let g: [Double] = ([24.0, 75.0, 71.0, -34.0, 3.0, 22.0, -45.0, 23.0, 245.0, 25.0, 52.0, 25.0, -67.0, -96.0, 96.0, 31.0, 55.0, 36.0, 29.0, -43.0, -7.0] as! [Double])
    print(_p("deconv(g, f) ="))
    _ = printColumnMatrix((deconv((g as! [Double]), (f as! [Double])) as! [Double]))
    print(_p(""))
    print(_p("deconv(g, h) ="))
    _ = printColumnMatrix((deconv((g as! [Double]), (h as! [Double])) as! [Double]))
}
_ = main()
