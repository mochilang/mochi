// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:15 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mod(_ n: Int, _ m: Int) -> Int {
        return ((Int((Int((n % m)) + m)) % m) as! Int)
    }
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return (n == 2)
        }
        if ((n % 3) == 0) {
            return (n == 3)
        }
        var d: Int = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 2) as! Int)
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 4) as! Int)
        }
        return true
    }
    func pad(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = ((" " + s) as! String)
        }
        return (s as! String)
    }
    func carmichael(_ p1: Int) {
        for h3 in 2..<p1 {
            for d in 1..<Int((h3 + p1)) {
                if (((Int((Int((h3 + p1)) * Int((p1 - 1)))) % d) == 0) && (Int(mod(((-p1 * p1) as! Int), (h3 as! Int))) == (d % h3))) {
                    let p2 = (1 + Int(((Int((p1 - 1)) * Int((h3 + p1))) / d)))
                    if (!isPrime((p2 as! Int))) {
                        continue
                    }
                    let p3 = (1 + Int(((p1 * p2) / h3)))
                    if (!isPrime((p3 as! Int))) {
                        continue
                    }
                    if ((Int((p2 * p3)) % Int((p1 - 1))) != 1) {
                        continue
                    }
                    let c = ((p1 * p2) * p3)
                    print(_p(((((((String(describing: pad((p1 as! Int), 2)) + "   ") + String(describing: pad((p2 as! Int), 4))) + "   ") + String(describing: pad((p3 as! Int), 5))) + "     ") + _p(c))))
                }
            }
        }
    }
    print(_p("The following are Carmichael munbers for p1 <= 61:\n"))
    print(_p("p1     p2      p3     product"))
    print(_p("==     ==      ==     ======="))
    for p1 in 2..<62 {
        if isPrime((p1 as! Int)) {
            _ = carmichael((p1 as! Int))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
