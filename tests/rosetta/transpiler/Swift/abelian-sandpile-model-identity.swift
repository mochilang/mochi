// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:09:09 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func neighborsList() -> [[Int]] {
        return ([([1, 3] as! [Int]), ([0, 2, 4] as! [Int]), ([1, 5] as! [Int]), ([0, 4, 6] as! [Int]), ([1, 3, 5, 7] as! [Int]), ([2, 4, 8] as! [Int]), ([3, 7] as! [Int]), ([4, 6, 8] as! [Int]), ([5, 7] as! [Int])] as! [[Int]])
    }
    func plus(_ a: [Int], _ b: [Int]) -> [Int] {
        var res: [Int] = ([] as! [Int])
        var i = 0
        while (i < Int(((a).count))) {
            res = ((res + [(Int(a[i]) + Int(b[i]))]) as! [Int])
            i = ((i + 1) as! Int)
        }
        return (res as! [Int])
    }
    func isStable(_ p: [Int]) -> Bool {
        for v in p {
            if (v > 3) {
                return false
            }
        }
        return true
    }
    func topple(_ p: inout [Int]) -> Int {
        let neighbors = (neighborsList() as! [[Int]])
        var i = 0
        while (i < Int(((p).count))) {
            if (Int(p[i]) > 3) {
                p[i] = ((Int(p[i]) - 4) as! Int)
                let nbs = (neighbors[i] as! [Int])
                for j in nbs {
                    p[j] = ((Int(p[j]) + 1) as! Int)
                }
                return 0
            }
            i = ((i + 1) as! Int)
        }
        return 0
    }
    func pileString(_ p: [Int]) -> String {
        var s = ""
        var r = 0
        while (r < 3) {
            var c = 0
            while (c < 3) {
                s = (((s + String(describing: Int(p[((3 * r) + c)]))) + " ") as! String)
                c = ((c + 1) as! Int)
            }
            s = ((s + "\n") as! String)
            r = ((r + 1) as! Int)
        }
        return (s as! String)
    }
    print("Avalanche of topplings:\n")
    var s4 = ([4, 3, 3, 3, 1, 2, 0, 2, 3] as! [Int])
    print(String(describing: pileString((s4 as! [Int]))))
    while (!Bool(isStable((s4 as! [Int])))) {
        _ = Int(topple(&s4))
        print(String(describing: pileString((s4 as! [Int]))))
    }
    print("Commutative additions:\n")
    var s1 = ([1, 2, 0, 2, 1, 1, 0, 1, 3] as! [Int])
    var s2 = ([2, 1, 3, 1, 0, 1, 0, 1, 0] as! [Int])
    var s3_a = (plus((s1 as! [Int]), (s2 as! [Int])) as! [Int])
    while (!Bool(isStable((s3_a as! [Int])))) {
        _ = Int(topple(&s3_a))
    }
    var s3_b = (plus((s2 as! [Int]), (s1 as! [Int])) as! [Int])
    while (!Bool(isStable((s3_b as! [Int])))) {
        _ = Int(topple(&s3_b))
    }
    print(((((String(describing: pileString((s1 as! [Int]))) + "\nplus\n\n") + String(describing: pileString((s2 as! [Int])))) + "\nequals\n\n") + String(describing: pileString((s3_a as! [Int])))))
    print(((((("and\n\n" + String(describing: pileString((s2 as! [Int])))) + "\nplus\n\n") + String(describing: pileString((s1 as! [Int])))) + "\nalso equals\n\n") + String(describing: pileString((s3_b as! [Int])))))
    print("Addition of identity sandpile:\n")
    var s3 = ([3, 3, 3, 3, 3, 3, 3, 3, 3] as! [Int])
    var s3_id = ([2, 1, 2, 1, 0, 1, 2, 1, 2] as! [Int])
    var s4b = (plus((s3 as! [Int]), (s3_id as! [Int])) as! [Int])
    while (!Bool(isStable((s4b as! [Int])))) {
        _ = Int(topple(&s4b))
    }
    print(((((String(describing: pileString((s3 as! [Int]))) + "\nplus\n\n") + String(describing: pileString((s3_id as! [Int])))) + "\nequals\n\n") + String(describing: pileString((s4b as! [Int])))))
    print("Addition of identities:\n")
    var s5 = (plus((s3_id as! [Int]), (s3_id as! [Int])) as! [Int])
    while (!Bool(isStable((s5 as! [Int])))) {
        _ = Int(topple(&s5))
    }
    print(((((String(describing: pileString((s3_id as! [Int]))) + "\nplus\n\n") + String(describing: pileString((s3_id as! [Int])))) + "\nequals\n\n") + String(describing: pileString((s5 as! [Int])))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
