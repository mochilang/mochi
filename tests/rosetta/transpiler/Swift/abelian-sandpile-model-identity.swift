// Generated by Mochi transpiler v0.10.39 on 2025-07-24 13:16:41 GMT+7
import Foundation

func neighborsList() -> [[Int]] {
    return ([([1, 3] as! [Int]), ([0, 2, 4] as! [Int]), ([1, 5] as! [Int]), ([0, 4, 6] as! [Int]), ([1, 3, 5, 7] as! [Int]), ([2, 4, 8] as! [Int]), ([3, 7] as! [Int]), ([4, 6, 8] as! [Int]), ([5, 7] as! [Int])] as! [[Int]])
}
func plus(_ a: [Int], _ b: [Int]) -> [Int] {
    var a = a
    var b = b
    var res: [Int] = ([] as! [Int])
    var i = 0
    while (Int(i) < Int((((a as! [Int])).count))) {
        res = (((res as! [Int]) + [(Int(a[Int(i)]) + Int(b[Int(i)]))]) as! [Int])
        i = ((Int(i) + 1) as! Int)
    }
    return (res as! [Int])
}
func isStable(_ p: [Int]) -> Bool {
    var p = p
    for v in (p as! [Int]) {
        if ((v as! Int) > 3) {
            return false
        }
    }
    return true
}
func topple(_ p: [Int]) -> Int {
    var p = p
    let neighbors = (neighborsList() as! [[Int]])
    var i = 0
    while (Int(i) < Int((((p as! [Int])).count))) {
        if (Int(p[Int(i)]) > 3) {
            p[Int(i)] = ((Int(p[Int(i)]) - 4) as! Int)
            let nbs = (neighbors[Int(i)] as! [Int])
            for j in (nbs as! [Int]) {
                p[j] = ((Int(p[j]) + 1) as! Int)
            }
            return 0
        }
        i = ((Int(i) + 1) as! Int)
    }
    return 0
}
func pileString(_ p: [Int]) -> String {
    var p = p
    var s = ""
    var r = 0
    while (Int(r) < 3) {
        var c = 0
        while (Int(c) < 3) {
            s = (((String(s) + String(String(describing: Int(p[((3 * Int(r)) + Int(c))])))) + " ") as! String)
            c = ((Int(c) + 1) as! Int)
        }
        s = ((String(s) + "\n") as! String)
        r = ((Int(r) + 1) as! Int)
    }
    return String(s)
}
print("Avalanche of topplings:\n")
var s4 = ([4, 3, 3, 3, 1, 2, 0, 2, 3] as! [Int])
print(String(pileString((s4 as! [Int]))))
while (!(isStable((s4 as! [Int])) as! Bool)) {
    Int(topple((s4 as! [Int])))
    print(String(pileString((s4 as! [Int]))))
}
print("Commutative additions:\n")
var s1 = ([1, 2, 0, 2, 1, 1, 0, 1, 3] as! [Int])
var s2 = ([2, 1, 3, 1, 0, 1, 0, 1, 0] as! [Int])
var s3_a = (plus((s1 as! [Int]), (s2 as! [Int])) as! [Int])
while (!(isStable((s3_a as! [Int])) as! Bool)) {
    Int(topple((s3_a as! [Int])))
}
var s3_b = (plus((s2 as! [Int]), (s1 as! [Int])) as! [Int])
while (!(isStable((s3_b as! [Int])) as! Bool)) {
    Int(topple((s3_b as! [Int])))
}
print(((((String(pileString((s1 as! [Int]))) + "\nplus\n\n") + String(pileString((s2 as! [Int])))) + "\nequals\n\n") + String(pileString((s3_a as! [Int])))))
print(((((("and\n\n" + String(pileString((s2 as! [Int])))) + "\nplus\n\n") + String(pileString((s1 as! [Int])))) + "\nalso equals\n\n") + String(pileString((s3_b as! [Int])))))
print("Addition of identity sandpile:\n")
var s3 = ([3, 3, 3, 3, 3, 3, 3, 3, 3] as! [Int])
var s3_id = ([2, 1, 2, 1, 0, 1, 2, 1, 2] as! [Int])
var s4b = (plus((s3 as! [Int]), (s3_id as! [Int])) as! [Int])
while (!(isStable((s4b as! [Int])) as! Bool)) {
    Int(topple((s4b as! [Int])))
}
print(((((String(pileString((s3 as! [Int]))) + "\nplus\n\n") + String(pileString((s3_id as! [Int])))) + "\nequals\n\n") + String(pileString((s4b as! [Int])))))
print("Addition of identities:\n")
var s5 = (plus((s3_id as! [Int]), (s3_id as! [Int])) as! [Int])
while (!(isStable((s5 as! [Int])) as! Bool)) {
    Int(topple((s5 as! [Int])))
}
print(((((String(pileString((s3_id as! [Int]))) + "\nplus\n\n") + String(pileString((s3_id as! [Int])))) + "\nequals\n\n") + String(pileString((s5 as! [Int])))))
