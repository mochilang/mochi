// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:14:43 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct testpkg {
    static func Add(_ a: Int, _ b: Int) -> Int { return a + b }
    static let Pi = 3.14
    static let Answer = 42
    static func FifteenPuzzleExample() -> String { return "Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd" }
    static func ECDSAExample() -> (D: Any?, X: Any?, Y: Any?, Hash: Any?, R: Any?, S: Any?, Valid: Any?) { return (nil, nil, nil, nil, nil, nil, nil) }
}
let res = testpkg.ECDSAExample()
print(_p(("Private key:\nD: " + String(describing: res.D))))
print(_p("\nPublic key:"))
print(_p(("X: " + String(describing: res.X))))
print(_p(("Y: " + String(describing: res.Y))))
print(_p("\nMessage: Rosetta Code"))
print(_p(("Hash   : " + String(describing: res.Hash))))
print(_p("\nSignature:"))
print(_p(("R: " + String(describing: res.R))))
print(_p(("S: " + String(describing: res.S))))
print(_p(("\nSignature verified: " + _p(res.Valid))))
