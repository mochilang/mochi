// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:46 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func floorMod(_ a: Int, _ b: Int) -> Int {
        var r: Int = (a % b)
        if (r < 0) {
            r = Int((r + b))
        }
        return Int(r)
    }
    func run(_ bc: inout [Int]) -> Int {
        var acc: Int = 0
        var pc: Int = 0
        while (pc < 32) {
            let op = ((bc[pc] as! Int) / 32)
            let arg = ((bc[pc] as! Int) % 32)
            pc = Int((pc + 1))
            if (op == 0) {
            } else if (op == 1) {
                acc = (bc[arg] as! Int)
            } else if (op == 2) {
                bc[arg] = Int(acc)
            } else if (op == 3) {
                acc = Int(floorMod(Int((acc + (bc[arg] as! Int))), 256))
            } else if (op == 4) {
                acc = Int(floorMod(Int((acc - (bc[arg] as! Int))), 256))
            } else if (op == 5) {
                if (acc == 0) {
                    pc = Int(arg)
                }
            } else if (op == 6) {
                pc = Int(arg)
            } else if (op == 7) {
                break
            } else {
                break
            }
            
            
            
            
            
            
            
        }
        return Int(acc)
    }
    func main() {
        var programs: [[Int]] = ([([35, 100, 224, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([44, 106, 76, 43, 141, 75, 168, 192, 44, 224, 8, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([46, 79, 109, 78, 47, 77, 48, 145, 171, 80, 192, 46, 224, 1, 1, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([45, 111, 69, 112, 71, 0, 78, 0, 171, 79, 192, 46, 224, 32, 0, 28, 1, 0, 0, 0, 6, 0, 2, 26, 5, 20, 3, 30, 1, 22, 4, 24] as! [Int]), ([35, 132, 224, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([35, 132, 224, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int]), ([35, 100, 224, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] as! [Int])] as! [[Int]])
        var i: Int = 0
        while (i < Int(((programs).count))) {
            let res = Int(run(&programs[i]))
            print(_p(_p(res)))
            i = Int((i + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
