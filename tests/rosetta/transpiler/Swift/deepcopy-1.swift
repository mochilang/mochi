// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:50:10 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct cds {
    var i: Int
    var s: String
    var b: [Int]
    var m: [Int: Bool]
}
func copyList(_ src: [Int]) -> [Int] {
    var out: [Int] = ([] as! [Int])
    for v in src {
        out = (_append(out, v) as! [Int])
    }
    return out
}
func copyMap(_ src: [Int: Bool]) -> [Int: Bool] {
    var out: [Int: Bool] = ([:] as! [Int: Bool])
    for k in src.keys.sorted() {
        out[k] = (src[k]! as! Bool)
    }
    return out
}
func deepcopy(_ c: cds) -> cds {
    return cds(i: c.i, s: c.s, b: (copyList((c.b as! [Int])) as! [Int]), m: (copyMap((c.m as! [Int: Bool])) as! [Int: Bool]))
}
func cdsStr(_ c: cds) -> String {
    var bs: String = "["
    var i: Int = 0
    while (i < Int(((c.b).count))) {
        bs = ((bs + _p(Int(c.b[i]))) as! String)
        if (i < (Int(((c.b).count)) &- 1)) {
            bs = ((bs + " ") as! String)
        }
        i = Int((i &+ 1))
    }
    bs = ((bs + "]") as! String)
    var ms: String = "map["
    var first: Bool = true
    for k in c.m.keys.sorted() {
        if (!first) {
            ms = ((ms + " ") as! String)
        }
        ms = ((((ms + _p(k)) + ":") + _p(c.m[k]!)) as! String)
        first = false
    }
    ms = ((ms + "]") as! String)
    return (((((((("{" + _p(c.i)) + " ") + c.s) + " ") + bs) + " ") + ms) + "}")
}
var c1: cds = cds(i: 1, s: "one", b: ([117, 110, 105, 116] as! [Int]), m: ([1: true] as! [Int: Bool]))
var c2: cds = deepcopy((c1 as! cds))
print(_p(String(describing: cdsStr((c1 as! cds)))))
print(_p(String(describing: cdsStr((c2 as! cds)))))
c1 = (cds(i: 0, s: "nil", b: ([122, 101, 114, 111] as! [Int]), m: ([1: false] as! [Int: Bool])) as! cds)
print(_p(String(describing: cdsStr((c1 as! cds)))))
print(_p(String(describing: cdsStr((c2 as! cds)))))
