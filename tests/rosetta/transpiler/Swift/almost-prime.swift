// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:47 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func kPrime(_ n: Int, _ k: Int) -> Bool {
        var n = n
        var nf = 0
        var i = 2
        while (i <= n) {
            while ((n % i) == 0) {
                if (nf == k) {
                    return false
                }
                nf = Int((nf + 1))
                n = Int((n / i))
            }
            i = Int((i + 1))
        }
        return Bool((nf == k))
    }
    func gen(_ k: Int, _ count: Int) -> [Int] {
        var r: [Int] = ([] as! [Int])
        var n = 2
        while (Int(((r).count)) < count) {
            if Bool(kPrime(Int(n), Int(k))) {
                r = ((r + [n]) as! [Int])
            }
            n = Int((n + 1))
        }
        return (r as! [Int])
    }
    func main() {
        var k = 1
        while (k <= 5) {
            print(((String(describing: k) + " ") + String(describing: (gen(Int(k), 10) as! [Int]))))
            k = Int((k + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
