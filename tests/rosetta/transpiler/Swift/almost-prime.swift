// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:10:00 GMT+7
import Foundation

func kPrime(_ n: Int, _ k: Int) -> Bool {
    var n = n
    var nf = 0
    var i = 2
    while (Int(i) <= Int(n)) {
        while ((Int(n) % Int(i)) == 0) {
            if (Int(nf) == Int(k)) {
                return false
            }
            nf = ((Int(nf) + 1) as! Int)
            n = ((Int(n) / Int(i)) as! Int)
        }
        i = ((Int(i) + 1) as! Int)
    }
    return ((Int(nf) == Int(k)) as! Bool)
}
func gen(_ k: Int, _ count: Int) -> [Int] {
    var r: [Int] = ([] as! [Int])
    var n = 2
    while (Int((((r as! [Int])).count)) < Int(count)) {
        if Bool(kPrime(&Int(n), Int(k))) {
            r = (((r as! [Int]) + [Int(n)]) as! [Int])
        }
        n = ((Int(n) + 1) as! Int)
    }
    return (r as! [Int])
}
func main() {
    var k = 1
    while (Int(k) <= 5) {
        print(((String(String(describing: Int(k))) + " ") + String(String(describing: (gen(Int(k), 10) as! [Int])))))
        k = ((Int(k) + 1) as! Int)
    }
}
_ = main()
