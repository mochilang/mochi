// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:47 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func amb(_ wordsets: [[String]], _ res: inout [String], _ idx: Int) -> Bool {
        if (idx == Int(((wordsets).count))) {
            return true
        }
        var prev = ""
        if (idx > 0) {
            prev = String(describing: res[(idx - 1)])
        }
        var i = 0
        while (i < Int((((wordsets[idx] as! [String])).count))) {
            let w = String(describing: String(Array(wordsets[idx])[i]))
            if ((idx == 0) || (String(describing: String(Array(String(prev))[Int((Int(((prev).count)) - 1))..<Int(((prev).count))])) == String(describing: String(Array(String(w))[0..<1])))) {
                res[idx] = String(w)
                if Bool(amb((wordsets as! [[String]]), &res, Int((idx + 1)))) {
                    return true
                }
            }
            i = Int((i + 1))
        }
        return false
    }
    func main() {
        let wordset = ([(["the", "that", "a"] as! [String]), (["frog", "elephant", "thing"] as! [String]), (["walked", "treaded", "grows"] as! [String]), (["slowly", "quickly"] as! [String])] as! [[String]])
        var res: [String] = ([] as! [String])
        var i = 0
        while (i < Int(((wordset).count))) {
            res = ((res + [""]) as! [String])
            i = Int((i + 1))
        }
        if Bool(amb((wordset as! [[String]]), &res, 0)) {
            var out = String(("[" + String(describing: res[0])))
            var j = 1
            while (j < Int(((res).count))) {
                out = String(((out + " ") + String(describing: res[j])))
                j = Int((j + 1))
            }
            out = String((out + "]"))
            print(out)
        } else {
            print("No amb found")
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
