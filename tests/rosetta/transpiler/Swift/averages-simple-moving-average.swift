// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:35:12 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(s))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func fmt3(_ x: Double) -> String {
        var y = (Double(Int((Double((x * 1000.0)) + 0.5))) / 1000.0)
        var s = _p(y)
        var dot = Int(indexOf(String(s), "."))
        if (dot == (0 - 1)) {
            s = String((s + ".000"))
        } else {
            var decs = ((Int(((s).count)) - dot) - 1)
            if (decs > 3) {
                s = String(describing: String(Array(String(s))[0..<Int((dot + 4))]))
            } else {
                while (decs < 3) {
                    s = String((s + "0"))
                    decs = Int((decs + 1))
                }
            }
        }
        return String(s)
    }
    func pad(_ s: String, _ width: Int) -> String {
        var out = s
        while (Int(((out).count)) < width) {
            out = String((" " + out))
        }
        return String(out)
    }
    func smaSeries(_ xs: [Double], _ period: Int) -> [Double] {
        var res: [Double] = ([] as! [Double])
        var sum = 0.0
        var i = 0
        while (i < Int(((xs).count))) {
            sum = Double((sum + (xs[i] as! Double)))
            if (i >= period) {
                sum = Double((sum - (xs[(i - period)] as! Double)))
            }
            var denom = (i + 1)
            if (denom > period) {
                denom = Int(period)
            }
            res = ((res + [(sum / Double(denom))]) as! [Double])
            i = Int((i + 1))
        }
        return (res as! [Double])
    }
    func main() {
        var xs = ([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0] as! [Double])
        var sma3 = (smaSeries((xs as! [Double]), 3) as! [Double])
        var sma5 = (smaSeries((xs as! [Double]), 5) as! [Double])
        print(_p("x       sma3   sma5"))
        var i = 0
        while (i < Int(((xs).count))) {
            let line = ((((String(describing: pad(String(describing: fmt3((xs[i] as! Double))), 5)) + "  ") + String(describing: pad(String(describing: fmt3((sma3[i] as! Double))), 5))) + "  ") + String(describing: pad(String(describing: fmt3((sma5[i] as! Double))), 5)))
            print(_p(line))
            i = Int((i + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
