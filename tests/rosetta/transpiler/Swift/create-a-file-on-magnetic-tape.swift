// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:37:26 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func gzipWriter(_ w: Any) -> Any {
    return w
}
func tarWriter(_ w: Any) -> Any {
    return w
}
func tarWriteHeader(_ w: Any, _ hdr: [String: Any]) {
}
func tarWrite(_ w: Any, _ data: String) {
}
func main() {
    let filename = "TAPE.FILE"
    let data = ""
    let outfile = ""
    let gzipFlag = false
    var w: Any? = nil
    if (outfile != "") {
        w = nil
    }
    if gzipFlag {
        w = gzipWriter(w)
    }
    w = tarWriter(w)
    var hdr: [String: Any] = (["Name": filename, "Mode": 432, "Size": Int(((data).count)), "ModTime": Int(_now()), "Typeflag": 0, "Uname": "guest", "Gname": "guest"] as! [String: Any])
    _ = tarWriteHeader(w, (hdr as! [String: Any]))
    _ = tarWrite(w, String(describing: data))
}
_ = main()
