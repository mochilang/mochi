// Generated by Mochi transpiler v0.10.40 on 2025-07-26 05:23:45 GMT+7
import Foundation

struct Complex {
    var re: Double
    var im: Double
}
func add(_ a: Complex, _ b: Complex) -> Complex {
    return (Complex(re: (a.re + b.re), im: (a.im + b.im)) as! Complex)
}
func mul(_ a: Complex, _ b: Complex) -> Complex {
    return (Complex(re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))) as! Complex)
}
func neg(_ a: Complex) -> Complex {
    return (Complex(re: -a.re, im: -a.im) as! Complex)
}
func inv(_ a: Complex) -> Complex {
    let denom = ((a.re * a.re) + (a.im * a.im))
    return (Complex(re: (a.re / denom), im: (-a.im / denom)) as! Complex)
}
func conj(_ a: Complex) -> Complex {
    return (Complex(re: a.re, im: -a.im) as! Complex)
}
func cstr(_ a: Complex) -> String {
    var s = ("(" + String(describing: a.re))
    if (a.im >= 0) {
        s = ((((s + "+") + String(describing: a.im)) + "i)") as! String)
    } else {
        s = (((s + String(describing: a.im)) + "i)") as! String)
    }
    return (s as! String)
}
let a = Complex(re: 1.0, im: 1.0)
let b = Complex(re: 3.14159, im: 1.25)
print(("a:       " + cstr((a as! Complex))))
print(("b:       " + cstr((b as! Complex))))
print(("a + b:   " + cstr((add((a as! Complex), (b as! Complex)) as! Complex))))
print(("a * b:   " + cstr((mul((a as! Complex), (b as! Complex)) as! Complex))))
print(("-a:      " + cstr((neg((a as! Complex)) as! Complex))))
print(("1 / a:   " + cstr((inv((a as! Complex)) as! Complex))))
print(("aÌ…:       " + cstr((conj((a as! Complex)) as! Complex))))
