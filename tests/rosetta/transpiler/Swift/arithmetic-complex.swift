// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:34:06 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Complex {
        var re: Double
        var im: Double
    }
    func add(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: (a.re + b.re), im: (a.im + b.im)) as! Complex)
    }
    func mul(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))) as! Complex)
    }
    func neg(_ a: Complex) -> Complex {
        return (Complex(re: -a.re, im: -a.im) as! Complex)
    }
    func inv(_ a: Complex) -> Complex {
        let denom = ((a.re * a.re) + (a.im * a.im))
        return (Complex(re: (a.re / denom), im: (-a.im / denom)) as! Complex)
    }
    func conj(_ a: Complex) -> Complex {
        return (Complex(re: a.re, im: -a.im) as! Complex)
    }
    func cstr(_ a: Complex) -> String {
        var s = ("(" + String(describing: a.re))
        if (a.im >= 0) {
            s = String((((s + "+") + String(describing: a.im)) + "i)"))
        } else {
            s = String(((s + String(describing: a.im)) + "i)"))
        }
        return String(s)
    }
    let a = Complex(re: 1.0, im: 1.0)
    let b = Complex(re: 3.14159, im: 1.25)
    print(("a:       " + String(describing: cstr((a as! Complex)))))
    print(("b:       " + String(describing: cstr((b as! Complex)))))
    print(("a + b:   " + String(describing: cstr((add((a as! Complex), (b as! Complex)) as! Complex)))))
    print(("a * b:   " + String(describing: cstr((mul((a as! Complex), (b as! Complex)) as! Complex)))))
    print(("-a:      " + String(describing: cstr((neg((a as! Complex)) as! Complex)))))
    print(("1 / a:   " + String(describing: cstr((inv((a as! Complex)) as! Complex)))))
    print(("aÌ…:       " + String(describing: cstr((conj((a as! Complex)) as! Complex)))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
