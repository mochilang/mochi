// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:37 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var bazCall: Int = 0
    func baz() -> String {
        bazCall = Int((bazCall + 1))
        print(_p("baz: start"))
        if (bazCall == 1) {
            print(_p("baz: raising U0"))
            return "U0"
        }
        if (bazCall == 2) {
            print(_p("baz: raising U1"))
            return "U1"
        }
        print(_p("baz: end"))
        return ""
    }
    func bar() -> String {
        print(_p("bar: start"))
        let err = String(describing: baz())
        if (Int(((err).count)) > 0) {
            return String(describing: err)
        }
        print(_p("bar: end"))
        return ""
    }
    func foo() -> String {
        print(_p("foo: start"))
        var err: String = String(describing: bar())
        if (err == "U0") {
            print(_p("foo: caught U0"))
        } else if (Int(((err).count)) > 0) {
            return String(describing: err)
        }
        
        err = String(describing: bar())
        if (err == "U0") {
            print(_p("foo: caught U0"))
        } else if (Int(((err).count)) > 0) {
            return String(describing: err)
        }
        
        print(_p("foo: end"))
        return ""
    }
    func main() {
        print(_p("main: start"))
        let err = String(describing: foo())
        if (Int(((err).count)) > 0) {
            print(_p(("main: unhandled " + err)))
        } else {
            print(_p("main: success"))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
