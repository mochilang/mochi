// Generated by Mochi transpiler v0.10.52 on 2025-08-02 01:10:16 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func parseIntDigits(_ s: String) -> Int {
    var n: Int = 0
    var i: Int = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while (i < Int(((s).count))) {
        let ch = String(Array(s)[i..<(i + 1)])
        if (!(digits[ch] != nil)) {
            return 0
        }
        n = (((n * 10) + (digits[ch]! as! Int)) as! Int)
        i = ((i + 1) as! Int)
    }
    return n
}
func parseDC(_ s: String) -> Int {
    var s = s
    var neg: Bool = false
    if ((Int(((s).count)) > 0) && (String(Array(s)[0..<1]) == "-")) {
        neg = true
        s = String(describing: String(Array(String(describing: (s as! String)))[1..<Int(((s).count))]))
    }
    var dollars: Int = 0
    var cents: Int = 0
    var i: Int = 0
    var seenDot: Bool = false
    var centDigits: Int = 0
    while (i < Int(((s).count))) {
        let ch = String(Array(s)[i..<(i + 1)])
        if (ch == ".") {
            seenDot = true
            i = ((i + 1) as! Int)
            continue
        }
        let d = Int(parseIntDigits((ch as! String)))
        if seenDot {
            if (centDigits < 2) {
                cents = (((cents * 10) + d) as! Int)
                centDigits = ((centDigits + 1) as! Int)
            }
        } else {
            dollars = (((dollars * 10) + d) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    if (centDigits == 1) {
        cents = ((cents * 10) as! Int)
    }
    var val: Int = ((dollars * 100) + cents)
    if neg {
        val = (-val as! Int)
    }
    return val
}
func parseRate(_ s: String) -> Int {
    var s = s
    var neg: Bool = false
    if ((Int(((s).count)) > 0) && (String(Array(s)[0..<1]) == "-")) {
        neg = true
        s = String(describing: String(Array(String(describing: (s as! String)))[1..<Int(((s).count))]))
    }
    var whole: Int = 0
    var frac: Int = 0
    var digits: Int = 0
    var seenDot: Bool = false
    var i: Int = 0
    while (i < Int(((s).count))) {
        let ch = String(Array(s)[i..<(i + 1)])
        if (ch == ".") {
            seenDot = true
            i = ((i + 1) as! Int)
            continue
        }
        let d = Int(parseIntDigits((ch as! String)))
        if seenDot {
            if (digits < 4) {
                frac = (((frac * 10) + d) as! Int)
                digits = ((digits + 1) as! Int)
            }
        } else {
            whole = (((whole * 10) + d) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    while (digits < 4) {
        frac = ((frac * 10) as! Int)
        digits = ((digits + 1) as! Int)
    }
    var val: Int = ((whole * 10000) + frac)
    if neg {
        val = (-val as! Int)
    }
    return val
}
func dcString(_ dc: Int) -> String {
    var d: Int = (dc / 100)
    var n: Int = dc
    if (n < 0) {
        n = (-n as! Int)
    }
    var c: Int = (n % 100)
    var cstr: String = _p(c)
    if (Int(((cstr).count)) == 1) {
        cstr = (("0" + cstr) as! String)
    }
    return ((_p(d) + ".") + cstr)
}
func extend(_ dc: Int, _ n: Int) -> Int {
    return (dc * n)
}
func tax(_ total: Int, _ rate: Int) -> Int {
    return ((Int(((total * rate) + 5000)) / 10000) as! Int)
}
func padLeft(_ s: String, _ n: Int) -> String {
    var out: String = s
    while (Int(((out).count)) < n) {
        out = ((" " + out) as! String)
    }
    return out
}
func main() {
    let hp = Int(parseDC("5.50"))
    let mp = Int(parseDC("2.86"))
    let rate = Int(parseRate("0.0765"))
    let totalBeforeTax = (Int(extend((hp as! Int), 4000000000000000)) + Int(extend((mp as! Int), 2)))
    let t = Int(tax((totalBeforeTax as! Int), (rate as! Int)))
    let total = (totalBeforeTax + t)
    print(_p(("Total before tax: " + String(describing: padLeft(String(describing: dcString((totalBeforeTax as! Int))), 22)))))
    print(_p(("             Tax: " + String(describing: padLeft(String(describing: dcString((t as! Int))), 22)))))
    print(_p(("           Total: " + String(describing: padLeft(String(describing: dcString((total as! Int))), 22)))))
}
_ = main()
