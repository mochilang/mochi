// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:43:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Frac {
        var num: Int
        var den: Int
    }
    func fracStr(_ f: Frac) -> String {
        return String(describing: ((_p(f.num) + "/") + _p(f.den)))
    }
    func gen(_ l: Frac, _ r: Frac, _ n: Int, _ acc: inout [Frac]) -> [Frac] {
        let m = Frac(num: (l.num + r.num), den: (l.den + r.den))
        if (m.den <= n) {
            acc = (gen((l as! Frac), (m as! Frac), Int(n), &acc) as! [Frac])
            acc = (_append(acc, m) as! [Frac])
            acc = (gen((m as! Frac), (r as! Frac), Int(n), &acc) as! [Frac])
        }
        return (acc as! [Frac])
    }
    func totient(_ n: Int) -> Int {
        var tot: Int = n
        var nn: Int = n
        var p: Int = 2
        while ((p * p) <= nn) {
            if ((nn % p) == 0) {
                while ((nn % p) == 0) {
                    nn = Int((nn / p))
                }
                tot = Int((tot - (tot / p)))
            }
            if (p == 2) {
                p = 1
            }
            p = Int((p + 2))
        }
        if (nn > 1) {
            tot = Int((tot - (tot / nn)))
        }
        return Int(tot)
    }
    func main() {
        var n: Int = 1
        while (n <= 11) {
            let l = Frac(num: 0, den: 1)
            let r = Frac(num: 1, den: 1)
            var seq: [Frac] = ({ () -> Any in
            var _tmp3 = []
            return gen((l as! Frac), (r as! Frac), Int(n), &_tmp3)
        }() as! [Frac])
        var line: String = ((("F(" + _p(n)) + "): ") + String(describing: fracStr((l as! Frac))))
        for f in seq {
            line = String(describing: ((line + " ") + String(describing: fracStr((f as! Frac)))))
        }
        line = String(describing: ((line + " ") + String(describing: fracStr((r as! Frac)))))
        print(_p(line))
        n = Int((n + 1))
    }
    var sum: Int = 1
    var i: Int = 1
    var next: Int = 100
    while (i <= 1000) {
        sum = Int((sum + Int(totient(Int(i)))))
        if (i == next) {
            print(_p(((("|F(" + _p(i)) + ")|: ") + _p(sum))))
            next = Int((next + 100))
        }
        i = Int((i + 1))
    }
}
_ = main()
let _benchEnd = _now()
let _benchMemEnd = _mem()
print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
