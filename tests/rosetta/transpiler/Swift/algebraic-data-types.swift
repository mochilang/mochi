// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:59 GMT+7
import Foundation

func node(_ cl: String, _ le: Any, _ aa: Int, _ ri: Any) -> [String: Any] {
    return (["cl": cl, "le": le, "aa": aa, "ri": ri] as [String: Any] as! [String: Any])
}
func treeString(_ t: Any) -> String {
    if (String(describing: t)
    == String(describing: nil as Any?)
    ) {
        return "E"
    }
    let m = (t as! [String: Any])
    return ((((((((("T(" + String(describing: (m as! [String: Any])["cl"]!)) + ", ") + String(describing: treeString((m as! [String: Any])["le"]!))) + ", ") + String(describing: (m as! [String: Any])["aa"]!)) + ", ") + String(describing: treeString((m as! [String: Any])["ri"]!))) + ")") as! String)
}
func balance(_ t: Any) -> Any {
    if (String(describing: t)
    == String(describing: nil as Any?)
    ) {
        return t
    }
    let m = (t as! [String: Any])
    if (String(describing: (m as! [String: Any])["cl"]!) != "B") {
        return t
    }
    let le = (m as! [String: Any])["le"]!
    let ri = (m as! [String: Any])["ri"]!
    if (String(describing: le)
    != String(describing: nil as Any?)
    ) {
        let leMap = (le as! [String: Any])
        if (String(describing: (leMap as! [String: Any])["cl"]!) == "R") {
            let lele = (leMap as! [String: Any])["le"]!
            if (String(describing: lele)
            != String(describing: nil as Any?)
            ) {
                let leleMap = (lele as! [String: Any])
                if (String(describing: (leleMap as! [String: Any])["cl"]!) == "R") {
                    return (node("R", (node("B", (leleMap as! [String: Any])["le"]!, ((leleMap as! [String: Any])["aa"]! as! Int), (leleMap as! [String: Any])["ri"]!) as! [String: Any]), ((leMap as! [String: Any])["aa"]! as! Int), (node("B", (leMap as! [String: Any])["ri"]!, ((m as! [String: Any])["aa"]! as! Int), ri) as! [String: Any])) as! [String: Any])
                }
            }
            let leri = (leMap as! [String: Any])["ri"]!
            if (String(describing: leri)
            != String(describing: nil as Any?)
            ) {
                let leriMap = (leri as! [String: Any])
                if (String(describing: (leriMap as! [String: Any])["cl"]!) == "R") {
                    return (node("R", (node("B", (leMap as! [String: Any])["le"]!, ((leMap as! [String: Any])["aa"]! as! Int), (leriMap as! [String: Any])["le"]!) as! [String: Any]), ((leriMap as! [String: Any])["aa"]! as! Int), (node("B", (leriMap as! [String: Any])["ri"]!, ((m as! [String: Any])["aa"]! as! Int), ri) as! [String: Any])) as! [String: Any])
                }
            }
        }
    }
    if (String(describing: ri)
    != String(describing: nil as Any?)
    ) {
        let riMap = (ri as! [String: Any])
        if (String(describing: (riMap as! [String: Any])["cl"]!) == "R") {
            let rile = (riMap as! [String: Any])["le"]!
            if (String(describing: rile)
            != String(describing: nil as Any?)
            ) {
                let rileMap = (rile as! [String: Any])
                if (String(describing: (rileMap as! [String: Any])["cl"]!) == "R") {
                    return (node("R", (node("B", (m as! [String: Any])["le"]!, ((m as! [String: Any])["aa"]! as! Int), (rileMap as! [String: Any])["le"]!) as! [String: Any]), ((rileMap as! [String: Any])["aa"]! as! Int), (node("B", (rileMap as! [String: Any])["ri"]!, ((riMap as! [String: Any])["aa"]! as! Int), (riMap as! [String: Any])["ri"]!) as! [String: Any])) as! [String: Any])
                }
            }
            let riri = (riMap as! [String: Any])["ri"]!
            if (String(describing: riri)
            != String(describing: nil as Any?)
            ) {
                let ririMap = (riri as! [String: Any])
                if (String(describing: (ririMap as! [String: Any])["cl"]!) == "R") {
                    return (node("R", (node("B", (m as! [String: Any])["le"]!, ((m as! [String: Any])["aa"]! as! Int), (riMap as! [String: Any])["le"]!) as! [String: Any]), ((riMap as! [String: Any])["aa"]! as! Int), (node("B", (ririMap as! [String: Any])["le"]!, ((ririMap as! [String: Any])["aa"]! as! Int), (ririMap as! [String: Any])["ri"]!) as! [String: Any])) as! [String: Any])
                }
            }
        }
    }
    return t
}
func ins(_ tr: Any, _ x: Int) -> Any {
    if (String(describing: tr)
    == String(describing: nil as Any?)
    ) {
        return (node("R", nil, (x as! Int), nil) as! [String: Any])
    }
    if (x < ((tr as! [String: Any])["aa"] as! Int)) {
        return balance((node(((tr as! [String: Any])["cl"] as! String), ins((tr as! [String: Any])["le"], (x as! Int)), ((tr as! [String: Any])["aa"] as! Int), (tr as! [String: Any])["ri"]) as! [String: Any]))
    }
    if (x > ((tr as! [String: Any])["aa"] as! Int)) {
        return balance((node(((tr as! [String: Any])["cl"] as! String), (tr as! [String: Any])["le"], ((tr as! [String: Any])["aa"] as! Int), ins((tr as! [String: Any])["ri"], (x as! Int))) as! [String: Any]))
    }
    return tr
}
func insert(_ tr: Any, _ x: Int) -> Any {
    let t = ins(tr, (x as! Int))
    if (String(describing: t)
    == String(describing: nil as Any?)
    ) {
        return nil
    }
    let m = (t as! [String: Any])
    return (node("B", (m as! [String: Any])["le"]!, ((m as! [String: Any])["aa"]! as! Int), (m as! [String: Any])["ri"]!) as! [String: Any])
}
var tr: Any = nil
var i = 1
while (i <= 16) {
    tr = insert(tr, (i as! Int))
    i = ((i + 1) as! Int)
}
print(String(describing: treeString(tr)))
