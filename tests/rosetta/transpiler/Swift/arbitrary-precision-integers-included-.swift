// Generated by Mochi transpiler v0.10.40 on 2025-07-25 10:53:38 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow_int(_ base: Int, _ exp: Int) -> Int {
        var result = 1
        var b = (base as! Int)
        var e = (exp as! Int)
        while (e > 0) {
            if ((e % 2) == 1) {
                result = ((result * b) as! Int)
            }
            b = ((b * b) as! Int)
            e = Int((e / 2))
        }
        return (result as! Int)
    }
    func pow_big(_ base: bigint, _ exp: Int) -> bigint {
        var result: bigint = 1
        var b: bigint = base
        var e = (exp as! Int)
        while (e > 0) {
            if ((e % 2) == 1) {
                result = (result * b)
            }
            b = (b * b)
            e = Int((e / 2))
        }
        return result
    }
    var e1 = Int(pow_int(3, 2))
    var e2 = Int(pow_int(4, (e1 as! Int)))
    var base: bigint = 5
    var x: bigint = pow_big(base, (e2 as! Int))
    var s = String(describing: x)
    print("5^(4^(3^2)) has", Int(((s).count)), "digits:", String(describing: String(Array((s as! String))[0..<20])), "...", String(describing: String(Array((s as! String))[((Int(((s).count)) - 20) as! Int)..<Int(((s).count))])))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
