// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:30 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let n = 15
    var t: [Int] = ([] as! [Int])
    for _ in 0..<Int((n + 2)) {
        t = (_append(t, 0) as! [Int])
    }
    t[1] = 1
    for i in 1..<Int((n + 1)) {
        var j: Int = i
        while (j > 1) {
            t[j] = (((t[j] as! Int) + (t[(j - 1)] as! Int)) as! Int)
            j = ((j - 1) as! Int)
        }
        t[((i + 1) as! Int)] = (t[i] as! Int)
        j = ((i + 1) as! Int)
        while (j > 1) {
            t[j] = (((t[j] as! Int) + (t[(j - 1)] as! Int)) as! Int)
            j = ((j - 1) as! Int)
        }
        let cat = ((t[(i + 1)] as! Int) - (t[i] as! Int))
        if (i < 10) {
            print(_p((((" " + _p(i)) + " : ") + _p(cat))))
        } else {
            print(_p(((_p(i) + " : ") + _p(cat))))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
