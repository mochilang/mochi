// Generated by Mochi transpiler v0.10.40 on 2025-07-26 00:36:11 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func angleDiff(_ b1: Double, _ b2: Double) -> Double {
        let d = (b2 - b1)
        if (d < (0 - 180.0)) {
            return ((d + 360.0) as! Double)
        }
        if (d > 180.0) {
            return ((d - 360.0) as! Double)
        }
        return (d as! Double)
    }
    var testCases = ([([20.0, 45.0] as! [Double]), ([(0 - 45.0), 45.0] as! [Double]), ([(0 - 85.0), 90.0] as! [Double]), ([(0 - 95.0), 90.0] as! [Double]), ([(0 - 45.0), 125.0] as! [Double]), ([(0 - 45.0), 145.0] as! [Double]), ([29.4803, (0 - 88.6381)] as! [Double]), ([(0 - 78.3251), (0 - 159.036)] as! [Double])] as! [[Double]])
    for tc in testCases {
        print(Double(angleDiff(Double(tc[0]), Double(tc[1]))))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
