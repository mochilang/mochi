// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:52 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func nextPrime(_ primes: [Int], _ start: Int) -> Int {
        var n: Int = start
        while true {
            var isP: Bool = true
            var i: Int = 0
            while (i < Int(((primes).count))) {
                let p = (primes[i] as! Int)
                if ((p * p) > n) {
                    break
                }
                if ((n % p) == 0) {
                    isP = false
                    break
                }
                i = Int((i + 1))
            }
            if isP {
                return Int(n)
            }
            n = Int((n + 2))
        }
    }
    func main() {
        var primes: [Int] = ([2] as! [Int])
        var cand: Int = 3
        while (Int(((primes).count)) < 10000) {
            cand = Int(nextPrime((primes as! [Int]), Int(cand)))
            primes = (_append(primes, cand) as! [Int])
            cand = Int((cand + 2))
        }
        var line: String = "First twenty:"
        var i: Int = 0
        while (i < 20) {
            line = String(describing: ((line + " ") + _p((primes[i] as! Int))))
            i = Int((i + 1))
        }
        print(_p(line))
        var idx: Int = 0
        while ((primes[idx] as! Int) <= 100) {
            idx = Int((idx + 1))
        }
        line = String(describing: ("Between 100 and 150: " + _p((primes[idx] as! Int))))
        idx = Int((idx + 1))
        while ((primes[idx] as! Int) < 150) {
            line = String(describing: ((line + " ") + _p((primes[idx] as! Int))))
            idx = Int((idx + 1))
        }
        print(_p(line))
        while ((primes[idx] as! Int) <= 7700) {
            idx = Int((idx + 1))
        }
        var count: Int = 0
        while ((primes[idx] as! Int) < 8000) {
            count = Int((count + 1))
            idx = Int((idx + 1))
        }
        print(_p(("Number beween 7,700 and 8,000: " + _p(count))))
        print(_p(("10,000th prime: " + _p((primes[9999] as! Int)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
