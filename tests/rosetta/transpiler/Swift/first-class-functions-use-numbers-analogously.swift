// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:13 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func multiplier(_ n1: Double, _ n2: Double) -> (Double) -> Double {
        let n1n2 = (n1 * n2)
        return { (m: Double) -> Double in (n1n2 * m) }
    }
    func main() {
        let x = 2.0
        let xi = 0.5
        let y = 4.0
        let yi = 0.25
        let z = (x + y)
        let zi = (1.0 / Double((x + y)))
        let numbers: [Double] = ([x, y, z] as! [Double])
        let inverses: [Double] = ([xi, yi, zi] as! [Double])
        var mfs: [(Double) -> Double] = []
        var i: Int = 0
        while (i < Int(((numbers).count))) {
            mfs = (_append(mfs, multiplier(Double(numbers[i]), Double(inverses[i]))) as! [Any])
            i = ((i + 1) as! Int)
        }
        for mf in mfs {
            print(_p(_p(Double(mf(1.0)))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
