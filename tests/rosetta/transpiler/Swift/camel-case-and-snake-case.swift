// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:09 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func trimSpace(_ s: String) -> String {
        var start: Int = 0
        while ((start < Int(((s).count))) && (String(Array(s)[start..<(start + 1)]) == " ")) {
            start = ((start + 1) as! Int)
        }
        var end: Int = Int(((s).count))
        while ((end > start) && (String(Array(s)[(end - 1)..<end]) == " ")) {
            end = ((end - 1) as! Int)
        }
        return (String(Array(s)[start..<end]) as! String)
    }
    func isUpper(_ ch: String) -> Bool {
        return ((ch >= "A") && (ch <= "Z"))
    }
    func padLeft(_ s: String, _ w: Int) -> String {
        var res: String = ""
        var n: Int = (w - Int(((s).count)))
        while (n > 0) {
            res = ((res + " ") as! String)
            n = ((n - 1) as! Int)
        }
        return ((res + s) as! String)
    }
    func snakeToCamel(_ s: String) -> String {
        var s = s
        s = String(describing: trimSpace((s as! String)))
        var out: String = ""
        var up: Bool = false
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(Array(s)[i..<(i + 1)])
            if ((((ch == "_") || (ch == "-")) || (ch == " ")) || (ch == ".")) {
                up = true
                i = ((i + 1) as! Int)
                continue
            }
            if (i == 0) {
                out = ((out + String(describing: (ch.lowercased()))) as! String)
                up = false
                i = ((i + 1) as! Int)
                continue
            }
            if up {
                out = ((out + String(describing: ((ch as! String).uppercased()))) as! String)
                up = false
            } else {
                out = ((out + ch) as! String)
            }
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func camelToSnake(_ s: String) -> String {
        var s = s
        s = String(describing: trimSpace((s as! String)))
        var out: String = ""
        var prevUnd: Bool = false
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(Array(s)[i..<(i + 1)])
            if (((ch == " ") || (ch == "-")) || (ch == ".")) {
                if ((!prevUnd) && (Int(((out).count)) > 0)) {
                    out = ((out + "_") as! String)
                    prevUnd = true
                }
                i = ((i + 1) as! Int)
                continue
            }
            if (ch == "_") {
                if ((!prevUnd) && (Int(((out).count)) > 0)) {
                    out = ((out + "_") as! String)
                    prevUnd = true
                }
                i = ((i + 1) as! Int)
                continue
            }
            if isUpper((ch as! String)) {
                if ((i > 0) && ((!prevUnd) as! Bool)) {
                    out = ((out + "_") as! String)
                }
                out = ((out + String(describing: (ch.lowercased()))) as! String)
                prevUnd = false
            } else {
                out = ((out + String(describing: (ch.lowercased()))) as! String)
                prevUnd = false
            }
            i = ((i + 1) as! Int)
        }
        var start: Int = 0
        while ((start < Int(((out).count))) && (String(Array(out)[start..<(start + 1)]) == "_")) {
            start = ((start + 1) as! Int)
        }
        var end: Int = Int(((out).count))
        while ((end > start) && (String(Array(out)[(end - 1)..<end]) == "_")) {
            end = ((end - 1) as! Int)
        }
        out = (String(Array(out)[start..<end]) as! String)
        var res: String = ""
        var j: Int = 0
        var lastUnd: Bool = false
        while (j < Int(((out).count))) {
            let c = String(Array(out)[j..<(j + 1)])
            if (c == "_") {
                if (!lastUnd) {
                    res = ((res + c) as! String)
                }
                lastUnd = true
            } else {
                res = ((res + c) as! String)
                lastUnd = false
            }
            j = ((j + 1) as! Int)
        }
        return (res as! String)
    }
    func main() {
        let samples: [String] = ([("snakeCase" as! Any), ("snake_case" as! Any), ("snake-case" as! Any), ("snake case" as! Any), ("snake CASE" as! Any), ("snake.case" as! Any), ("variable_10_case" as! Any), ("variable10Case" as! Any), ("É›rgo rE tHis" as! Any), ("hurry-up-joe!" as! Any), ("c://my-docs/happy_Flag-Day/12.doc" as! Any), (" spaces " as! Any)] as! [String])
        print(_p("=== To snake_case ==="))
        for s in samples {
            print(_p(((String(describing: padLeft((s as! String), 34)) + " => ") + String(describing: camelToSnake((s as! String))))))
        }
        print(_p(""))
        print(_p("=== To camelCase ==="))
        for s in samples {
            print(_p(((String(describing: padLeft((s as! String), 34)) + " => ") + String(describing: snakeToCamel((s as! String))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
