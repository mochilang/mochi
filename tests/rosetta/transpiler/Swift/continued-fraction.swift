// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:46:07 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func newTerm(_ a: Int, _ b: Int) -> [String: Int] {
        return (["a": a, "b": b] as! [String: Int])
    }
    func cfSqrt2(_ nTerms: Int) -> [[String: Int]] {
        var f: [[String: Int]] = ([] as! [[String: Int]])
        var n: Int = 0
        while (n < nTerms) {
            f = (_append(f, (newTerm(2, 1) as! [String: Int])) as! [[String: Int]])
            n = Int((n &+ 1))
        }
        if (nTerms > 0) {
            f[0][String("a")] = 1
        }
        return f
    }
    func cfNap(_ nTerms: Int) -> [[String: Int]] {
        var f: [[String: Int]] = ([] as! [[String: Int]])
        var n: Int = 0
        while (n < nTerms) {
            f = (_append(f, (newTerm((n as! Int), Int((n &- 1))) as! [String: Int])) as! [[String: Int]])
            n = Int((n &+ 1))
        }
        if (nTerms > 0) {
            f[0][String("a")] = 2
        }
        if (nTerms > 1) {
            f[1][String("b")] = 1
        }
        return f
    }
    func cfPi(_ nTerms: Int) -> [[String: Int]] {
        var f: [[String: Int]] = ([] as! [[String: Int]])
        var n: Int = 0
        while (n < nTerms) {
            let g = ((2 &* n) &- 1)
            f = (_append(f, (newTerm(6, Int((g &* g))) as! [String: Int])) as! [[String: Int]])
            n = Int((n &+ 1))
        }
        if (nTerms > 0) {
            f[0][String("a")] = 3
        }
        return f
    }
    func real(_ f: [[String: Int]]) -> Double {
        var r: Double = 0.0
        var i: Int = (Int(((f).count)) &- 1)
        while (i > 0) {
            r = Double((Double(f[i]["b"]) / Double((Double(f[i]["a"]) + r))))
            i = Int((i &- 1))
        }
        if (Int(((f).count)) > 0) {
            r = Double((r + Double(f[0]["a"])))
        }
        return r
    }
    func main() {
        print(_p(("sqrt2: " + _p(Double(real((cfSqrt2(20) as! [[String: Int]])))))))
        print(_p(("nap:   " + _p(Double(real((cfNap(20) as! [[String: Int]])))))))
        print(_p(("pi:    " + _p(Double(real((cfPi(20) as! [[String: Int]])))))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
