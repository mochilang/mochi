// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:12:37 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func newTerm(_ a: Int, _ b: Int) -> [String: Int] {
    return (["a": a, "b": b] as! [String: Int])
}
func cfSqrt2(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        f = (_append(f, (newTerm(2, 1) as! [String: Int])) as! [[String: Int]])
        n = Int((n &+ 1))
    }
    if (nTerms > 0) {
        f[0][String("a")] = 1
    }
    return f
}
func cfNap(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        f = (_append(f, (newTerm((n as! Int), Int((n &- 1))) as! [String: Int])) as! [[String: Int]])
        n = Int((n &+ 1))
    }
    if (nTerms > 0) {
        f[0][String("a")] = 2
    }
    if (nTerms > 1) {
        f[1][String("b")] = 1
    }
    return f
}
func cfPi(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        let g = ((2 &* n) &- 1)
        f = (_append(f, (newTerm(6, Int((g &* g))) as! [String: Int])) as! [[String: Int]])
        n = Int((n &+ 1))
    }
    if (nTerms > 0) {
        f[0][String("a")] = 3
    }
    return f
}
func real(_ f: [[String: Int]]) -> Double {
    var r: Double = 0.0
    var i: Int = (Int(((f).count)) &- 1)
    while (i > 0) {
        r = Double((Double(f[i]["b"]) / Double((Double(f[i]["a"]) + r))))
        i = Int((i &- 1))
    }
    if (Int(((f).count)) > 0) {
        r = Double((r + Double(f[0]["a"])))
    }
    return r
}
func main() {
    print(_p(("sqrt2: " + String(describing: Double(real((cfSqrt2(20) as! [[String: Int]])))))))
    print(_p(("nap:   " + String(describing: Double(real((cfNap(20) as! [[String: Int]])))))))
    print(_p(("pi:    " + String(describing: Double(real((cfPi(20) as! [[String: Int]])))))))
}
_ = main()
