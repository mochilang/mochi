// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:11:26 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func newTerm(_ a: Int, _ b: Int) -> [String: Int] {
    return (["a": a, "b": b] as! [String: Int])
}
func cfSqrt2(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        f = (_append(f, (newTerm(2, 1) as! [String: Int])) as! [[String: Int]])
        n = ((n + 1) as! Int)
    }
    if (nTerms > 0) {
        f[0]["a"] = 1
    }
    return f
}
func cfNap(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        f = (_append(f, (newTerm((n as! Int), ((n - 1) as! Int)) as! [String: Int])) as! [[String: Int]])
        n = ((n + 1) as! Int)
    }
    if (nTerms > 0) {
        f[0]["a"] = 2
    }
    if (nTerms > 1) {
        f[1]["b"] = 1
    }
    return f
}
func cfPi(_ nTerms: Int) -> [[String: Int]] {
    var f: [[String: Int]] = ([] as! [[String: Int]])
    var n: Int = 0
    while (n < nTerms) {
        let g = ((2 * n) - 1)
        f = (_append(f, (newTerm(6, ((g * g) as! Int)) as! [String: Int])) as! [[String: Int]])
        n = ((n + 1) as! Int)
    }
    if (nTerms > 0) {
        f[0]["a"] = 3
    }
    return f
}
func real(_ f: [[String: Int]]) -> Double {
    var r: Double = 0.0
    var i: Int = (Int(((f).count)) - 1)
    while (i > 0) {
        r = Double(((f[i]["b"] as! Double) / Double(((f[i]["a"] as! Double) + r))))
        i = ((i - 1) as! Int)
    }
    if (Int(((f).count)) > 0) {
        r = Double((r + (f[0]["a"] as! Double)))
    }
    return r
}
func main() {
    print(_p(("sqrt2: " + _p(Double(real((cfSqrt2(20) as! [[String: Int]])))))))
    print(_p(("nap:   " + _p(Double(real((cfNap(20) as! [[String: Int]])))))))
    print(_p(("pi:    " + _p(Double(real((cfPi(20) as! [[String: Int]])))))))
}
_ = main()
