// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:32 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func getBins(_ limits: [Int], _ data: [Int]) -> [Int] {
    var n: Int = Int(((limits).count))
    var bins: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < (n + 1)) {
        bins = ((bins + [0]) as! [Int])
        i = Int((i + 1))
    }
    var j: Int = 0
    while (j < Int(((data).count))) {
        let d = (data[j] as! Int)
        var index: Int = 0
        while (index < Int(((limits).count))) {
            if (d < (limits[index] as! Int)) {
                break
            }
            if (d == (limits[index] as! Int)) {
                index = Int((index + 1))
                break
            }
            index = Int((index + 1))
        }
        bins[index] = Int(((bins[index] as! Int) + 1))
        j = Int((j + 1))
    }
    return (bins as! [Int])
}
func padLeft(_ n: Int, _ width: Int) -> String {
    var s: String = _p(n)
    var pad: Int = (width - Int(((s).count)))
    var out: String = ""
    var i: Int = 0
    while (i < pad) {
        out = String((out + " "))
        i = Int((i + 1))
    }
    return String((out + s))
}
func printBins(_ limits: [Int], _ bins: [Int]) {
    var n: Int = Int(((limits).count))
    print(_p(((("           < " + String(describing: padLeft((limits[0] as! Int), 3))) + " = ") + String(describing: padLeft((bins[0] as! Int), 2)))))
    var i: Int = 1
    while (i < n) {
        print(_p((((((">= " + String(describing: padLeft((limits[(i - 1)] as! Int), 3))) + " and < ") + String(describing: padLeft((limits[i] as! Int), 3))) + " = ") + String(describing: padLeft((bins[i] as! Int), 2)))))
        i = Int((i + 1))
    }
    print(_p((((">= " + String(describing: padLeft((limits[(n - 1)] as! Int), 3))) + "           = ") + String(describing: padLeft((bins[n] as! Int), 2)))))
    print(_p(""))
}
func main() {
    let limitsList = ([([23, 37, 43, 53, 67, 83] as! [Int]), ([14, 18, 249, 312, 389, 392, 513, 591, 634, 720] as! [Int])] as! [[Int]])
    let dataList = ([([95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55] as! [Int]), ([445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749] as! [Int])] as! [[Int]])
    var i: Int = 0
    while (i < Int(((limitsList).count))) {
        print(_p((("Example " + _p((i + 1))) + "\n")))
        let bins = (getBins((limitsList[i] as! [Int]), (dataList[i] as! [Int])) as! [Int])
        _ = printBins((limitsList[i] as! [Int]), (bins as! [Int]))
        i = Int((i + 1))
    }
}
_ = main()
