// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:27 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let vals = ([0, 2, 4, 6, 30, 32, 34, 36, 40, 42, 44, 46, 50, 52, 54, 56, 60, 62, 64, 66] as! [Int])
    let billions = ([0, 2, 4, 6] as! [Int])
    func ebanNumbers(_ start: Int, _ stop: Int) -> [Int] {
        var nums: [Int] = ([] as! [Int])
        for b in billions {
            for m in vals {
                for t in vals {
                    for r in vals {
                        let n = ((((b * 1000000000) + (m * 1000000)) + (t * 1000)) + r)
                        if ((n >= start) && (n <= stop)) {
                            nums = (_append(nums, n) as! [Int])
                        }
                    }
                }
            }
        }
        return (nums as! [Int])
    }
    func countEban(_ start: Int, _ stop: Int) -> Int {
        var count: Int = 0
        for b in billions {
            for m in vals {
                for t in vals {
                    for r in vals {
                        let n = ((((b * 1000000000) + (m * 1000000)) + (t * 1000)) + r)
                        if ((n >= start) && (n <= stop)) {
                            count = Int((count + 1))
                        }
                    }
                }
            }
        }
        return Int(count)
    }
    func main() {
        let ranges = ([[2, 1000, true], [1000, 4000, true], [2, 10000, false], [2, 100000, false], [2, 1000000, false], [2, 10000000, false], [2, 100000000, false], [2, 1000000000, false]] as! [[Any]])
        for rg in ranges {
            let start = ((rg as! [Any])[0] as! Int)
            let stop = ((rg as! [Any])[1] as! Int)
            let show = ((rg as! [Any])[2] as! Bool)
            if (start == 2) {
                print(_p((("eban numbers up to and including " + _p(stop)) + ":")))
            } else {
                print(_p((((("eban numbers between " + _p(start)) + " and ") + _p(stop)) + " (inclusive):")))
            }
            if show {
                let nums = (ebanNumbers(Int(start), Int(stop)) as! [Int])
                var line: String = ""
                var i: Int = 0
                while (i < Int(((nums).count))) {
                    line = String(describing: ((line + _p((nums[i] as! Int))) + " "))
                    i = Int((i + 1))
                }
                if (Int(((line).count)) > 0) {
                    print(_p(String(describing: String(Array(String(describing: String(describing: line)))[0..<Int((Int(((line).count)) - 1))]))))
                }
            }
            let c = Int(countEban(Int(start), Int(stop)))
            print(_p((("count = " + _p(c)) + "\n")))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
