// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:27 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func binom(_ n: Int, _ k: Int) -> Int {
        if ((k < 0) || (k > n)) {
            return 0
        }
        var kk: Int = k
        if (kk > (n - kk)) {
            kk = ((n - kk) as! Int)
        }
        var res: Int = 1
        var i: Int = 0
        while (i < kk) {
            res = Int((res * Int((n - i))))
            i = ((i + 1) as! Int)
            res = ((res / i) as! Int)
        }
        return (res as! Int)
    }
    func catalan(_ n: Int) -> Int {
        return ((Int(binom(((2 * n) as! Int), (n as! Int))) / Int((n + 1))) as! Int)
    }
    func main() {
        for i in 0..<15 {
            print(_p(_p(Int(catalan((i as! Int))))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
