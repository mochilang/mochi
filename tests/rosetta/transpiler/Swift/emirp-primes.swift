// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:53 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return (n == 2)
        }
        var d: Int = 3
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = Int((d + 2))
        }
        return true
    }
    func revInt(_ n: Int) -> Int {
        var r: Int = 0
        var t: Int = n
        while (t > 0) {
            r = Int(((r * 10) + (t % 10)))
            t = Int((t / 10))
        }
        return Int(r)
    }
    func main() {
        var emirps: [Int] = ([] as! [Int])
        var n: Int = 2
        while (Int(((emirps).count)) < 10000) {
            if isPrime(Int(n)) {
                let r = Int(revInt(Int(n)))
                if ((r != n) && isPrime(Int(r))) {
                    emirps = (_append(emirps, n) as! [Int])
                }
            }
            n = Int((n + 1))
        }
        var line: String = "   ["
        var i: Int = 0
        while (i < 20) {
            line = String(describing: (line + _p((emirps[i] as! Int))))
            if (i < 19) {
                line = String(describing: (line + ", "))
            }
            i = Int((i + 1))
        }
        line = String(describing: (line + "]"))
        print(_p("First 20:"))
        print(_p(line))
        line = "  ["
        for e in emirps {
            if (e >= 8000) {
                break
            }
            if (e >= 7700) {
                line = String(describing: ((line + _p(e)) + ", "))
            }
        }
        line = String(describing: (line + "]"))
        print(_p("Between 7700 and 8000:"))
        print(_p(line))
        print(_p("10000th:"))
        print(_p((("   [" + _p((emirps[9999] as! Int))) + "]")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
