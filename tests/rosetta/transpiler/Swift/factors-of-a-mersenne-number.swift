// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:43:00 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let qlimit = 50000
    func powf(_ base: Double, _ exp: Int) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        while (i < exp) {
            result = Double((result * base))
            i = Int((i + 1))
        }
        return Double(result)
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var g: Double = x
        var i: Int = 0
        while (i < 20) {
            g = Double((Double((g + (x / g))) / 2.0))
            i = Int((i + 1))
        }
        return Double(g)
    }
    func modPow(_ base: Int, _ exp: Int, _ mod: Int) -> Int {
        var result: Int = (1 % mod)
        var b: Int = (base % mod)
        var e: Int = exp
        while (e > 0) {
            if ((e % 2) == 1) {
                result = Int((Int((result * b)) % mod))
            }
            b = Int((Int((b * b)) % mod))
            e = Int((e / 2))
        }
        return Int(result)
    }
    func mtest(_ m: Int) {
        if (m < 4) {
            print(_p((((_p(m) + " < 4.  M") + _p(m)) + " not tested.")))
            return
        }
        let flimit = Double(sqrtApprox(Double((Double(powf(2.0, Int(m))) - 1.0))))
        var qlast: Int = 0
        if (flimit < Double(qlimit)) {
            qlast = Int(flimit)
        } else {
            qlast = Int(qlimit)
        }
        var composite: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i <= qlast) {
            composite = (_append(composite, false) as! [Bool])
            i = Int((i + 1))
        }
        let sq = Int(sqrtApprox(Double(qlast)))
        var q: Int = 3
        while true {
            if (q <= sq) {
                var j: Int = (q * q)
                while (j <= qlast) {
                    composite[j] = true
                    j = Int((j + q))
                }
            }
            let q8 = (q % 8)
            if (((q8 == 1) || (q8 == 7)) && (Int(modPow(2, Int(m), Int(q))) == 1)) {
                print(_p(((("M" + _p(m)) + " has factor ") + _p(q))))
                return
            }
            while true {
                q = Int((q + 2))
                if (q > qlast) {
                    print(_p((("No factors of M" + _p(m)) + " found.")))
                    return
                }
                if (!(composite[q] as! Bool)) {
                    break
                }
            }
        }
    }
    func main() {
        _ = mtest(31)
        _ = mtest(67)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
