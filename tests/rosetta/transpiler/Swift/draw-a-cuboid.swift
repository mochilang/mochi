// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:11 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func `repeat`(_ ch: String, _ n: Int) -> String {
        var s: String = ""
        var i: Int = 0
        while (i < n) {
            s = String(describing: (s + ch))
            i = Int((i + 1))
        }
        return String(describing: s)
    }
    func cubLine(_ n: Int, _ dx: Int, _ dy: Int, _ cde: String) {
        var line: String = (String(describing: `repeat`(" ", Int((n + 1)))) + String(Array(cde)[0..<1]))
        var d: Int = ((9 * dx) - 1)
        while (d > 0) {
            line = String(describing: (line + String(Array(cde)[1..<2])))
            d = Int((d - 1))
        }
        line = String(describing: (line + String(Array(cde)[0..<1])))
        line = String(describing: ((line + String(describing: `repeat`(" ", Int(dy)))) + String(Array(cde)[2..<Array(cde).count])))
        print(_p(line))
    }
    func cuboid(_ dx: Int, _ dy: Int, _ dz: Int) {
        print(_p((((((("cuboid " + _p(dx)) + " ") + _p(dy)) + " ") + _p(dz)) + ":")))
        _ = cubLine(Int((dy + 1)), Int(dx), 0, "+-")
        var i: Int = 1
        while (i <= dy) {
            _ = cubLine(Int(((dy - i) + 1)), Int(dx), Int((i - 1)), "/ |")
            i = Int((i + 1))
        }
        _ = cubLine(0, Int(dx), Int(dy), "+-|")
        var j: Int = (((4 * dz) - dy) - 2)
        while (j > 0) {
            _ = cubLine(0, Int(dx), Int(dy), "| |")
            j = Int((j - 1))
        }
        _ = cubLine(0, Int(dx), Int(dy), "| +")
        i = 1
        while (i <= dy) {
            _ = cubLine(0, Int(dx), Int((dy - i)), "| /")
            i = Int((i + 1))
        }
        _ = cubLine(0, Int(dx), 0, "+-\n")
    }
    _ = cuboid(2, 3, 4)
    print(_p(""))
    _ = cuboid(1, 1, 1)
    print(_p(""))
    _ = cuboid(6, 2, 1)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
