// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:19 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func weekday(_ y: Int, _ m: Int, _ d: Int) -> Int {
        var yy: Int = y
        var mm: Int = m
        if (mm < 3) {
            mm = ((mm + 12) as! Int)
            yy = ((yy - 1) as! Int)
        }
        let k = (yy % 100)
        let j = ((yy / 100) as! Int)
        let a = ((Int((13 * Int((mm + 1)))) / 5) as! Int)
        let b = ((k / 4) as! Int)
        let c = ((j / 4) as! Int)
        return ((Int((((((d + a) + k) + b) + c) + (5 * j))) % 7) as! Int)
    }
    func main() {
        let months31: [Int] = ([1, 3, 5, 7, 8, 10, 12] as! [Int])
        let names: [String] = (["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] as! [String])
        var count: Int = 0
        var firstY: Int = 0
        var firstM: Int = 0
        var lastY: Int = 0
        var lastM: Int = 0
        var haveNone: [Int] = ([] as! [Int])
        print(_p("Months with five weekends:"))
        for year in 1900..<2101 {
            var hasOne: Bool = false
            for m in months31 {
                if (Int(weekday((year as! Int), (m as! Int), 1)) == 6) {
                    print(_p(((("  " + _p(year)) + " ") + (names[(m - 1)] as! String))))
                    count = ((count + 1) as! Int)
                    hasOne = true
                    lastY = (year as! Int)
                    lastM = (m as! Int)
                    if (firstY == 0) {
                        firstY = (year as! Int)
                        firstM = (m as! Int)
                    }
                }
            }
            if (!hasOne) {
                haveNone = (_append(haveNone, year) as! [Int])
            }
        }
        print(_p((_p(count) + " total")))
        print(_p(""))
        print(_p("First five dates of weekends:"))
        for i in 0..<5 {
            let day = (1 + (7 * i))
            print(_p(((((("  Friday, " + (names[(firstM - 1)] as! String)) + " ") + _p(day)) + ", ") + _p(firstY))))
        }
        print(_p("Last five dates of weekends:"))
        for i in 0..<5 {
            let day = (1 + (7 * i))
            print(_p(((((("  Friday, " + (names[(lastM - 1)] as! String)) + " ") + _p(day)) + ", ") + _p(lastY))))
        }
        print(_p(""))
        print(_p("Years with no months with five weekends:"))
        for y in haveNone {
            print(_p(("  " + _p(y))))
        }
        print(_p((_p(Int(((haveNone).count))) + " total")))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
