// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:43:05 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    struct Complex {
        var re: Double
        var im: Double
    }
    func sinApprox(_ x: Double) -> Double {
        var term: Double = x
        var sum: Double = x
        var n: Int = 1
        while (n <= 10) {
            let denom = Double((Int((2 * n)) * Int(((2 * n) + 1))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func cosApprox(_ x: Double) -> Double {
        var term: Double = 1.0
        var sum: Double = 1.0
        var n: Int = 1
        while (n <= 10) {
            let denom = Double((Int(((2 * n) - 1)) * Int((2 * n))))
            term = Double((((-term * x) * x) / denom))
            sum = Double((sum + term))
            n = Int((n + 1))
        }
        return Double(sum)
    }
    func cis(_ x: Double) -> Complex {
        return (Complex(re: Double(cosApprox(Double(x))), im: Double(sinApprox(Double(x)))) as! Complex)
    }
    func add(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: (a.re + b.re), im: (a.im + b.im)) as! Complex)
    }
    func sub(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: (a.re - b.re), im: (a.im - b.im)) as! Complex)
    }
    func mul(_ a: Complex, _ b: Complex) -> Complex {
        return (Complex(re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))) as! Complex)
    }
    func ditfft2Rec(_ x: [Double], _ y: inout [Complex], _ offX: Int, _ offY: Int, _ n: Int, _ s: Int) {
        if (n == 1) {
            y[offY] = (Complex(re: Double(x[offX]), im: 0.0) as! Complex)
            return
        }
        _ = ditfft2Rec((x as! [Double]), &y, Int(offX), Int(offY), Int((n / 2)), Int((2 * s)))
        _ = ditfft2Rec((x as! [Double]), &y, Int((offX + s)), Int((offY + (n / 2))), Int((n / 2)), Int((2 * s)))
        var k: Int = 0
        while (k < (n / 2)) {
            let angle = (((-2.0 * PI) * Double(k)) / Double(n))
            let tf = mul((cis(Double(angle)) as! Complex), (y[((offY + k) + (n / 2))] as! Complex))
            let a = add((y[(offY + k)] as! Complex), (tf as! Complex))
            let b = sub((y[(offY + k)] as! Complex), (tf as! Complex))
            y[(offY + k)] = (a as! Complex)
            y[((offY + k) + (n / 2))] = (b as! Complex)
            k = Int((k + 1))
        }
    }
    func ditfft2(_ x: [Double], _ y: inout [Complex], _ n: Int, _ s: Int) {
        _ = ditfft2Rec((x as! [Double]), &y, 0, 0, Int(n), Int(s))
    }
    func main() {
        let x: [Double] = ([1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0] as! [Double])
        var y: [Complex] = ([] as! [Complex])
        var i: Int = 0
        while (i < Int(((x).count))) {
            y = (_append(y, Complex(re: 0.0, im: 0.0)) as! [Complex])
            i = Int((i + 1))
        }
        _ = ditfft2((x as! [Double]), &y, Int(((x).count)), 1)
        for c in y {
            var line: String = String(describing: pad(String(describing: fmt(Double(c.re))), 8))
            if (c.im >= 0) {
                line = String(describing: ((line + "+") + String(describing: fmt(Double(c.im)))))
            } else {
                line = String(describing: (line + String(describing: fmt(Double(c.im)))))
            }
            print(_p(line))
        }
    }
    func pad(_ s: String, _ w: Int) -> String {
        var t: String = s
        while (Int(((t).count)) < w) {
            t = String(describing: (" " + t))
        }
        return String(describing: t)
    }
    func fmt(_ x: Double) -> String {
        var y: Double = (Double(floorf(Double(((x * 10000.0) + 0.5)))) / 10000.0)
        var s: String = _p(y)
        var dot: Int = Int((String(describing: String(describing: s)).firstIndex(of: Character(String(describing: ".")))?.utf16Offset(in: String(describing: String(describing: s)) ) ?? -1))
        if (dot == (0 - 1)) {
            s = String(describing: (s + ".0000"))
        } else {
            var d: Int = ((Int(((s).count)) - dot) - 1)
            while (d < 4) {
                s = String(describing: (s + "0"))
                d = Int((d + 1))
            }
        }
        return String(describing: s)
    }
    func floorf(_ x: Double) -> Double {
        let y = Int(x)
        return Double(y)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i: Int = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int((0 - 1))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
