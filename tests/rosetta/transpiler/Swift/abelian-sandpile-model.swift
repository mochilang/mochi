// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:01:25 GMT+7
import Foundation

let dim = 16
func newPile(_ d: Int) -> [[Int]] {
    var b: [[Int]] = ([] as! [[Int]])
    var y = 0
    while (Int(y) < Int(d)) {
        var row: [Int] = ([] as! [Int])
        var x = 0
        while (Int(x) < Int(d)) {
            row = (((row as! [Int]) + [0]) as! [Int])
            x = ((Int(x) + 1) as! Int)
        }
        b = (((b as! [[Int]]) + [(row as! [Int])]) as! [[Int]])
        y = ((Int(y) + 1) as! Int)
    }
    return (b as! [[Int]])
}
func handlePile(_ pile: inout [[Int]], _ x: Int, _ y: Int) -> [[Int]] {
    if (Int(pile[Int(y)][Int(x)]) >= 4) {
        pile[Int(y)][Int(x)] = ((Int(pile[Int(y)][Int(x)]) - 4) as! Int)
        if (Int(y) > 0) {
            pile[(Int(y) - 1)][Int(x)] = ((Int(pile[(Int(y) - 1)][Int(x)]) + 1) as! Int)
            if (Int(pile[(Int(y) - 1)][Int(x)]) >= 4) {
                pile = (handlePile(&pile, Int(x), ((Int(y) - 1) as! Int)) as! [[Int]])
            }
        }
        if (Int(x) > 0) {
            pile[Int(y)][(Int(x) - 1)] = ((Int(pile[Int(y)][(Int(x) - 1)]) + 1) as! Int)
            if (Int(pile[Int(y)][(Int(x) - 1)]) >= 4) {
                pile = (handlePile(&pile, ((Int(x) - 1) as! Int), Int(y)) as! [[Int]])
            }
        }
        if (Int(y) < (Int(dim) - 1)) {
            pile[(Int(y) + 1)][Int(x)] = ((Int(pile[(Int(y) + 1)][Int(x)]) + 1) as! Int)
            if (Int(pile[(Int(y) + 1)][Int(x)]) >= 4) {
                pile = (handlePile(&pile, Int(x), ((Int(y) + 1) as! Int)) as! [[Int]])
            }
        }
        if (Int(x) < (Int(dim) - 1)) {
            pile[Int(y)][(Int(x) + 1)] = ((Int(pile[Int(y)][(Int(x) + 1)]) + 1) as! Int)
            if (Int(pile[Int(y)][(Int(x) + 1)]) >= 4) {
                pile = (handlePile(&pile, ((Int(x) + 1) as! Int), Int(y)) as! [[Int]])
            }
        }
        pile = (handlePile(&pile, Int(x), Int(y)) as! [[Int]])
    }
    return (pile as! [[Int]])
}
func drawPile(_ pile: [[Int]], _ d: Int) {
    let chars = ([" ", "░", "▓", "█"] as! [String])
    var row = 0
    while (Int(row) < Int(d)) {
        var line = ""
        var col = 0
        while (Int(col) < Int(d)) {
            var v = Int(pile[Int(row)][Int(col)])
            if (Int(v) > 3) {
                v = 3
            }
            line = ((String(line) + String(chars[Int(v)])) as! String)
            col = ((Int(col) + 1) as! Int)
        }
        print(String(line))
        row = ((Int(row) + 1) as! Int)
    }
}
func main() {
    var pile = (newPile(16) as! [[Int]])
    let hdim = 7
    pile[Int(hdim)][Int(hdim)] = 16
    pile = (handlePile(&pile, Int(hdim), Int(hdim)) as! [[Int]])
    _ = drawPile((pile as! [[Int]]), 16)
}
_ = main()
