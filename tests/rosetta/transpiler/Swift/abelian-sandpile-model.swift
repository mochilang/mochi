// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:09:16 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let dim = 16
    func newPile(_ d: Int) -> [[Int]] {
        var b: [[Int]] = ([] as! [[Int]])
        var y = 0
        while (y < d) {
            var row: [Int] = ([] as! [Int])
            var x = 0
            while (x < d) {
                row = ((row + [0]) as! [Int])
                x = ((x + 1) as! Int)
            }
            b = ((b + [row]) as! [[Int]])
            y = ((y + 1) as! Int)
        }
        return (b as! [[Int]])
    }
    func handlePile(_ pile: inout [[Int]], _ x: Int, _ y: Int) -> [[Int]] {
        if (Int(pile[y][x]) >= 4) {
            pile[y][x] = ((Int(pile[y][x]) - 4) as! Int)
            if (y > 0) {
                pile[(y - 1)][x] = ((Int(pile[(y - 1)][x]) + 1) as! Int)
                if (Int(pile[(y - 1)][x]) >= 4) {
                    pile = (handlePile(&pile, (x as! Int), ((y - 1) as! Int)) as! [[Int]])
                }
            }
            if (x > 0) {
                pile[y][(x - 1)] = ((Int(pile[y][(x - 1)]) + 1) as! Int)
                if (Int(pile[y][(x - 1)]) >= 4) {
                    pile = (handlePile(&pile, ((x - 1) as! Int), (y as! Int)) as! [[Int]])
                }
            }
            if (y < (dim - 1)) {
                pile[(y + 1)][x] = ((Int(pile[(y + 1)][x]) + 1) as! Int)
                if (Int(pile[(y + 1)][x]) >= 4) {
                    pile = (handlePile(&pile, (x as! Int), ((y + 1) as! Int)) as! [[Int]])
                }
            }
            if (x < (dim - 1)) {
                pile[y][(x + 1)] = ((Int(pile[y][(x + 1)]) + 1) as! Int)
                if (Int(pile[y][(x + 1)]) >= 4) {
                    pile = (handlePile(&pile, ((x + 1) as! Int), (y as! Int)) as! [[Int]])
                }
            }
            pile = (handlePile(&pile, (x as! Int), (y as! Int)) as! [[Int]])
        }
        return (pile as! [[Int]])
    }
    func drawPile(_ pile: [[Int]], _ d: Int) {
        let chars = ([" ", "░", "▓", "█"] as! [String])
        var row = 0
        while (row < d) {
            var line = ""
            var col = 0
            while (col < d) {
                var v = Int(pile[row][col])
                if (v > 3) {
                    v = 3
                }
                line = ((line + String(describing: chars[v])) as! String)
                col = ((col + 1) as! Int)
            }
            print(line)
            row = ((row + 1) as! Int)
        }
    }
    func main() {
        var pile = (newPile(16) as! [[Int]])
        let hdim = 7
        pile[hdim][hdim] = 16
        pile = (handlePile(&pile, (hdim as! Int), (hdim as! Int)) as! [[Int]])
        _ = drawPile((pile as! [[Int]]), 16)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
