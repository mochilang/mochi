// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:52:58 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let dim = 16
    func newPile(_ d: Int) -> [[Int]] {
        var b: [[Int]] = ([] as! [[Int]])
        var y: Int = 0
        while (y < d) {
            var row: [Int] = ([] as! [Int])
            var x: Int = 0
            while (x < d) {
                row = (_append(row, 0) as! [Int])
                x = Int((x &+ 1))
            }
            b = (_append(b, row) as! [[Int]])
            y = Int((y &+ 1))
        }
        return b
    }
    func handlePile(_ pile: inout [[Int]], _ x: Int, _ y: Int) -> [[Int]] {
        if (Int(pile[y][x]) >= 4) {
            pile[y][x] = Int((Int(pile[y][x]) &- 4))
            if (y > 0) {
                pile[(y &- 1)][x] = Int((Int(pile[(y &- 1)][x]) &+ 1))
                if (Int(pile[(y &- 1)][x]) >= 4) {
                    pile = (handlePile(&pile, Int(x), Int((y &- 1))) as! [[Int]])
                }
            }
            if (x > 0) {
                pile[y][(x &- 1)] = Int((Int(pile[y][(x &- 1)]) &+ 1))
                if (Int(pile[y][(x &- 1)]) >= 4) {
                    pile = (handlePile(&pile, Int((x &- 1)), Int(y)) as! [[Int]])
                }
            }
            if (y < (dim &- 1)) {
                pile[(y &+ 1)][x] = Int((Int(pile[(y &+ 1)][x]) &+ 1))
                if (Int(pile[(y &+ 1)][x]) >= 4) {
                    pile = (handlePile(&pile, Int(x), Int((y &+ 1))) as! [[Int]])
                }
            }
            if (x < (dim &- 1)) {
                pile[y][(x &+ 1)] = Int((Int(pile[y][(x &+ 1)]) &+ 1))
                if (Int(pile[y][(x &+ 1)]) >= 4) {
                    pile = (handlePile(&pile, Int((x &+ 1)), Int(y)) as! [[Int]])
                }
            }
            pile = (handlePile(&pile, Int(x), Int(y)) as! [[Int]])
        }
        return pile
    }
    func drawPile(_ pile: [[Int]], _ d: Int) {
        let chars: [String] = ([" ", "░", "▓", "█"] as! [String])
        var row: Int = 0
        while (row < d) {
            var line: String = ""
            var col: Int = 0
            while (col < d) {
                var v: Int = Int(pile[row][col])
                if (v > 3) {
                    v = 3
                }
                line = ((line + (chars[v] as! String)) as! String)
                col = Int((col &+ 1))
            }
            print(_p(line))
            row = Int((row &+ 1))
        }
    }
    func main() {
        var pile: [[Int]] = (newPile(16) as! [[Int]])
        let hdim = 7
        pile[hdim][hdim] = 16
        pile = (handlePile(&pile, Int(hdim), Int(hdim)) as! [[Int]])
        _ = drawPile((pile as! [[Int]]), 16)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
