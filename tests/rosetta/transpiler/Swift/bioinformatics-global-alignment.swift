// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:58 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func padLeft(_ s: String, _ w: Int) -> String {
    var res: String = ""
    var n: Int = (w - Int(((s).count)))
    while (n > 0) {
        res = String((res + " "))
        n = Int((n - 1))
    }
    return String((res + s))
}
func indexOfFrom(_ s: String, _ ch: String, _ start: Int) -> Int {
    var i: Int = start
    while (i < Int(((s).count))) {
        if (String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))])) == ch) {
            return Int(i)
        }
        i = Int((i + 1))
    }
    return Int(-1)
}
func containsStr(_ s: String, _ sub: String) -> Bool {
    var i: Int = 0
    let sl = Int(((s).count))
    let subl = Int(((sub).count))
    while (i <= (sl - subl)) {
        if (String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + subl))])) == sub) {
            return true
        }
        i = Int((i + 1))
    }
    return false
}
func distinct(_ slist: [String]) -> [String] {
    var res: [String] = ([] as! [String])
    for s in slist {
        var found: Bool = false
        for r in res {
            if (r == s) {
                found = true
                break
            }
        }
        if (!found) {
            res = ((res + [s]) as! [String])
        }
    }
    return (res as! [String])
}
func permutations(_ xs: [String]) -> [[String]] {
    if (Int(((xs).count)) <= 1) {
        return ([xs] as! [[String]])
    }
    var res: [[String]] = ([] as! [[String]])
    var i: Int = 0
    while (i < Int(((xs).count))) {
        var rest: [String] = ([] as! [String])
        var j: Int = 0
        while (j < Int(((xs).count))) {
            if (j != i) {
                rest = ((rest + [(xs[j] as! String)]) as! [String])
            }
            j = Int((j + 1))
        }
        let subs = (permutations((rest as! [String])) as! [[String]])
        for p in subs {
            var perm: [String] = ([(xs[i] as! String)] as! [String])
            var k: Int = 0
            while (k < Int(((p).count))) {
                perm = ((perm + [(p[k] as! String)]) as! [String])
                k = Int((k + 1))
            }
            res = ((res + [perm]) as! [[String]])
        }
        i = Int((i + 1))
    }
    return (res as! [[String]])
}
func headTailOverlap(_ s1: String, _ s2: String) -> Int {
    var start: Int = 0
    while true {
        let ix = Int(indexOfFrom(String(s1), String(String(Array(s2)[0..<1])), Int(start)))
        if (ix == (0 - 1)) {
            return 0
        }
        start = Int(ix)
        var sublen = (Int(((s1).count)) - start)
        if (sublen > Int(((s2).count))) {
            sublen = Int(((s2).count))
        }
        if (String(describing: String(Array(String(describing: String(s2)))[0..<Int(sublen)])) == String(describing: String(Array(String(describing: String(s1)))[Int(start)..<Int((start + sublen))]))) {
            return Int(sublen)
        }
        start = Int((start + 1))
    }
}
func deduplicate(_ slist: [String]) -> [String] {
    let arr = (distinct((slist as! [String])) as! [String])
    var filtered: [String] = ([] as! [String])
    var i: Int = 0
    while (i < Int(((arr).count))) {
        let s1 = (arr[i] as! String)
        var within: Bool = false
        var j: Int = 0
        while (j < Int(((arr).count))) {
            if ((j != i) && (containsStr((arr[j] as! String), String(s1)) as! Bool)) {
                within = true
                break
            }
            j = Int((j + 1))
        }
        if (!within) {
            filtered = ((filtered + [s1]) as! [String])
        }
        i = Int((i + 1))
    }
    return (filtered as! [String])
}
func joinAll(_ ss: [String]) -> String {
    var out: String = ""
    for s in ss {
        out = String((out + s))
    }
    return String(out)
}
func shortestCommonSuperstring(_ slist: [String]) -> String {
    let ss = (deduplicate((slist as! [String])) as! [String])
    var shortest: String = String(describing: joinAll((ss as! [String])))
    let perms = (permutations((ss as! [String])) as! [[String]])
    var idx: Int = 0
    while (idx < Int(((perms).count))) {
        let perm = (perms[idx] as! [String])
        var sup: String = (perm[0] as! String)
        var i: Int = 0
        while (i < (Int(((ss).count)) - 1)) {
            let ov = Int(headTailOverlap((perm[i] as! String), (perm[(i + 1)] as! String)))
            sup = String((sup + String(describing: String(Array(String(describing: (perm[(i + 1)] as! String)))[Int(ov)..<Int((((perm[(i + 1)] as! String)).count))]))))
            i = Int((i + 1))
        }
        if (Int(((sup).count)) < Int(((shortest).count))) {
            shortest = String(sup)
        }
        idx = Int((idx + 1))
    }
    return String(shortest)
}
func printCounts(_ seq: String) {
    var a: Int = 0
    var c: Int = 0
    var g: Int = 0
    var t: Int = 0
    var i: Int = 0
    while (i < Int(((seq).count))) {
        let ch = String(describing: String(Array(String(describing: String(seq)))[Int(i)..<Int((i + 1))]))
        if (ch == "A") {
            a = Int((a + 1))
        } else {
            if (ch == "C") {
                c = Int((c + 1))
            } else {
                if (ch == "G") {
                    g = Int((g + 1))
                } else {
                    if (ch == "T") {
                        t = Int((t + 1))
                    }
                }
            }
        }
        i = Int((i + 1))
    }
    let total = Int(((seq).count))
    print(_p((("\nNucleotide counts for " + seq) + ":\n")))
    print(_p((String(describing: padLeft("A", 10)) + String(describing: padLeft(String(_p(a)), 12)))))
    print(_p((String(describing: padLeft("C", 10)) + String(describing: padLeft(String(_p(c)), 12)))))
    print(_p((String(describing: padLeft("G", 10)) + String(describing: padLeft(String(_p(g)), 12)))))
    print(_p((String(describing: padLeft("T", 10)) + String(describing: padLeft(String(_p(t)), 12)))))
    print(_p((String(describing: padLeft("Other", 10)) + String(describing: padLeft(String(_p((total - Int((((a + c) + g) + t))))), 12)))))
    print(_p("  ____________________"))
    print(_p((String(describing: padLeft("Total length", 14)) + String(describing: padLeft(String(_p(total)), 8)))))
}
func main() {
    let tests: [[String]] = ([(["TA", "AAG", "TA", "GAA", "TA"] as! [String]), (["CATTAGGG", "ATTAG", "GGG", "TA"] as! [String]), (["AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"] as! [String]), (["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"] as! [String])] as! [[String]])
    for seqs in tests {
        let scs = String(describing: shortestCommonSuperstring((seqs as! [String])))
        _ = printCounts(String(scs))
    }
}
_ = main()
