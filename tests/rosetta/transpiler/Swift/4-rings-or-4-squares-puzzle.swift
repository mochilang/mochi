// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:13:38 GMT+7
import Foundation

func _num(_ v: Any) -> Double {
    if let d = v as? Double { return d }
    if let i = v as? Int { return Double(i) }
    if let i = v as? Int64 { return Double(i) }
    return 0
}
func validComb(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int, _ g: Int) -> Bool {
    let square1 = (a + b)
    let square2 = ((b + c) + d)
    let square3 = ((d + e) + f)
    let square4 = (f + g)
    return ((((square1 == square2) && (square2 == square3)) && (square3 == square4)) as! Bool)
}
func isUnique(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int, _ g: Int) -> Bool {
    var nums = ([a, b, c, d, e, f, g] as! [Int])
    var i = 0
    while (i < Int(((nums).count))) {
        var j = ((i + 1) as! Int)
        while (j < Int(((nums).count))) {
            if (Int(nums[i]) == Int(nums[j])) {
                return false
            }
            j = ((j + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return true
}
func getCombs(_ low: Int, _ high: Int, _ unique: Bool) -> [String: Any] {
    var valid: [Any] = ([] as! [Any])
    var count = 0
    for b in low..<Int((high + 1)) {
        for c in low..<Int((high + 1)) {
            for d in low..<Int((high + 1)) {
                let s = ((_num(b) + _num(c)) + (d as! Double))
                for e in low..<Int((high + 1)) {
                    for f in low..<Int((high + 1)) {
                        let a = (_num(s) - _num(b))
                        let g = (_num(s) - _num(f))
                        if (((a as! Int) < low) || ((a as! Int) > high)) {
                            continue
                        }
                        if (((g as! Int) < low) || ((g as! Int) > high)) {
                            continue
                        }
                        if (((_num(d) + _num(e)) + (f as! Double)) != (s as! Double)) {
                            continue
                        }
                        if ((_num(f) + _num(g)) != (s as! Double)) {
                            continue
                        }
                        if ((!unique) || Bool(isUnique((a as! Int), (b as! Int), (c as! Int), (d as! Int), (e as! Int), (f as! Int), (g as! Int)))) {
                            valid = ((((valid + [[a, b, c, d, e, f, g]]) as! [Any]) as! [[Any]]) as! [Any])
                            count = ((count + 1) as! Int)
                        }
                    }
                }
            }
        }
    }
    return (["count": count, "list": valid] as [String: Any] as! [String: Any])
}
let r1 = (getCombs(1, 7, true) as! [String: Any])
print((String(describing: (r1 as! [String: Any])["count"]!) + " unique solutions in 1 to 7"))
print((r1 as! [String: Any])["list"]!)
let r2 = (getCombs(3, 9, true) as! [String: Any])
print((String(describing: (r2 as! [String: Any])["count"]!) + " unique solutions in 3 to 9"))
print((r2 as! [String: Any])["list"]!)
let r3 = (getCombs(0, 9, false) as! [String: Any])
print((String(describing: (r3 as! [String: Any])["count"]!) + " non-unique solutions in 0 to 9"))
