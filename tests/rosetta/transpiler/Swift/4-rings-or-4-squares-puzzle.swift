// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:00:52 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func validComb(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int, _ g: Int) -> Bool {
        let square1 = (a &+ b)
        let square2 = ((b &+ c) &+ d)
        let square3 = ((d &+ e) &+ f)
        let square4 = (f &+ g)
        return (((square1 == square2) && (square2 == square3)) && (square3 == square4))
    }
    func isUnique(_ a: Int, _ b: Int, _ c: Int, _ d: Int, _ e: Int, _ f: Int, _ g: Int) -> Bool {
        var nums: [Int] = ([a, b, c, d, e, f, g] as! [Int])
        var i: Int = 0
        while (i < Int(((nums).count))) {
            var j: Int = (i &+ 1)
            while (j < Int(((nums).count))) {
                if (Int(nums[i]) == Int(nums[j])) {
                    return false
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func getCombs(_ low: Int, _ high: Int, _ unique: Bool) -> [String: Any?] {
        var valid: [Any?] = []
        var count: Int = 0
        for b in low..<Int((high &+ 1)) {
            for c in low..<Int((high &+ 1)) {
                for d in low..<Int((high &+ 1)) {
                    let s = ((b &+ c) &+ d)
                    for e in low..<Int((high &+ 1)) {
                        for f in low..<Int((high &+ 1)) {
                            let a = (s &- b)
                            let g = (s &- f)
                            if ((a < low) || (a > high)) {
                                continue
                            }
                            if ((g < low) || (g > high)) {
                                continue
                            }
                            if (((d &+ e) &+ f) != s) {
                                continue
                            }
                            if ((f &+ g) != s) {
                                continue
                            }
                            if ((!unique) || isUnique(Int(a), Int(b), Int(c), Int(d), Int(e), Int(f), Int(g))) {
                                valid = ((_append(valid, ([a, b, c, d, e, f, g] as! [Int])) as! [[Int]]) as! [Any?])
                                count = Int((count &+ 1))
                            }
                        }
                    }
                }
            }
        }
        return (["count": count, "list": valid] as! [String: Any?])
    }
    let r1: [String: Any?] = (getCombs(1, 7, true) as! [String: Any?])
    print(_p((String(describing: r1[String("count")]) + " unique solutions in 1 to 7")))
    print(_p(r1[String("list")]))
    let r2: [String: Any?] = (getCombs(3, 9, true) as! [String: Any?])
    print(_p((String(describing: r2[String("count")]) + " unique solutions in 3 to 9")))
    print(_p(r2[String("list")]))
    let r3: [String: Any?] = (getCombs(0, 9, false) as! [String: Any?])
    print(_p((String(describing: r3[String("count")]) + " non-unique solutions in 0 to 9")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
