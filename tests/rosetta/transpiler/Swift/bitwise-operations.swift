// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:23:02 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func toUnsigned16(_ n: Int) -> Int {
        var u: Int = n
        if (u < 0) {
            u = Int((u + 65536))
        }
        return Int((u % 65536))
    }
    func bin16(_ n: Int) -> String {
        var u: Int = Int(toUnsigned16(Int(n)))
        var bits: String = ""
        var mask: Int = 32768
        for i in 0..<16 {
            if (u >= mask) {
                bits = String((bits + "1"))
                u = Int((u - mask))
            } else {
                bits = String((bits + "0"))
            }
            mask = Int((mask / 2))
        }
        return String(bits)
    }
    func bit_and(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        var ub: Int = Int(toUnsigned16(Int(b)))
        var res: Int = 0
        var bit: Int = 1
        for i in 0..<16 {
            if (((ua % 2) == 1) && ((ub % 2) == 1)) {
                res = Int((res + bit))
            }
            ua = Int((ua / 2))
            ub = Int((ub / 2))
            bit = Int((bit * 2))
        }
        return Int(res)
    }
    func bit_or(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        var ub: Int = Int(toUnsigned16(Int(b)))
        var res: Int = 0
        var bit: Int = 1
        for i in 0..<16 {
            if (((ua % 2) == 1) || ((ub % 2) == 1)) {
                res = Int((res + bit))
            }
            ua = Int((ua / 2))
            ub = Int((ub / 2))
            bit = Int((bit * 2))
        }
        return Int(res)
    }
    func bit_xor(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        var ub: Int = Int(toUnsigned16(Int(b)))
        var res: Int = 0
        var bit: Int = 1
        for i in 0..<16 {
            let abit = (ua % 2)
            let bbit = (ub % 2)
            if ((((abit == 1) && (bbit == 0)) as! Bool) || (((abit == 0) && (bbit == 1)) as! Bool)) {
                res = Int((res + bit))
            }
            ua = Int((ua / 2))
            ub = Int((ub / 2))
            bit = Int((bit * 2))
        }
        return Int(res)
    }
    func bit_not(_ a: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        return Int((65535 - ua))
    }
    func shl(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        var i: Int = 0
        while (i < b) {
            ua = Int((Int((ua * 2)) % 65536))
            i = Int((i + 1))
        }
        return Int(ua)
    }
    func shr(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        var i: Int = 0
        while (i < b) {
            ua = Int((ua / 2))
            i = Int((i + 1))
        }
        return Int(ua)
    }
    func las(_ a: Int, _ b: Int) -> Int {
        return Int(shl(Int(a), Int(b)))
    }
    func ras(_ a: Int, _ b: Int) -> Int {
        var val: Int = a
        var i: Int = 0
        while (i < b) {
            if (val >= 0) {
                val = Int((val / 2))
            } else {
                val = Int((Int((val - 1)) / 2))
            }
            i = Int((i + 1))
        }
        return Int(toUnsigned16(Int(val)))
    }
    func rol(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        let left = Int(shl(Int(ua), Int(b)))
        let right = Int(shr(Int(ua), Int((16 - b))))
        return Int(toUnsigned16(Int((left + right))))
    }
    func ror(_ a: Int, _ b: Int) -> Int {
        var ua: Int = Int(toUnsigned16(Int(a)))
        let right = Int(shr(Int(ua), Int(b)))
        let left = Int(shl(Int(ua), Int((16 - b))))
        return Int(toUnsigned16(Int((left + right))))
    }
    func bitwise(_ a: Int, _ b: Int) {
        print(_p(("a:   " + String(describing: bin16(Int(a))))))
        print(_p(("b:   " + String(describing: bin16(Int(b))))))
        print(_p(("and: " + String(describing: bin16(Int(bit_and(Int(a), Int(b))))))))
        print(_p(("or:  " + String(describing: bin16(Int(bit_or(Int(a), Int(b))))))))
        print(_p(("xor: " + String(describing: bin16(Int(bit_xor(Int(a), Int(b))))))))
        print(_p(("not: " + String(describing: bin16(Int(bit_not(Int(a))))))))
        if (b < 0) {
            print(_p("Right operand is negative, but all shifts require an unsigned right operand (shift distance)."))
            return
        }
        print(_p(("shl: " + String(describing: bin16(Int(shl(Int(a), Int(b))))))))
        print(_p(("shr: " + String(describing: bin16(Int(shr(Int(a), Int(b))))))))
        print(_p(("las: " + String(describing: bin16(Int(las(Int(a), Int(b))))))))
        print(_p(("ras: " + String(describing: bin16(Int(ras(Int(a), Int(b))))))))
        print(_p(("rol: " + String(describing: bin16(Int(rol(Int(a), Int(b))))))))
        print(_p(("ror: " + String(describing: bin16(Int(ror(Int(a), Int(b))))))))
    }
    _ = bitwise(Int(-460), 6)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
