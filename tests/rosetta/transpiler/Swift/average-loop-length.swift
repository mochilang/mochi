// Generated by Mochi transpiler v0.10.40 on 2025-07-26 10:30:07 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func absf(_ x: Double) -> Double {
        if (x < 0.0) {
            return Double(-x)
        }
        return Double(x)
    }
    func floorf(_ x: Double) -> Double {
        let y = Int(x)
        return Double(y)
    }
    func indexOf(_ s: String, _ ch: String) -> Int {
        var i = 0
        while (i < Int(((s).count))) {
            if (String(describing: String(Array(String(s))[Int(i)..<Int((i + 1))])) == ch) {
                return Int(i)
            }
            i = Int((i + 1))
        }
        return Int(-1)
    }
    func fmtF(_ x: Double) -> String {
        var y = (Double(floorf(Double(((x * 10000.0) + 0.5)))) / 10000.0)
        var s = _p(y)
        var dot = Int(indexOf(String(s), "."))
        if (dot == (0 - 1)) {
            s = String((s + ".0000"))
        } else {
            var decs = ((Int(((s).count)) - dot) - 1)
            if (decs > 4) {
                s = String(describing: String(Array(String(s))[0..<Int((dot + 5))]))
            } else {
                while (decs < 4) {
                    s = String((s + "0"))
                    decs = Int((decs + 1))
                }
            }
        }
        return String(s)
    }
    func padInt(_ n: Int, _ width: Int) -> String {
        var s = _p(n)
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func padFloat(_ x: Double, _ width: Int) -> String {
        var s = String(describing: fmtF(Double(x)))
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func avgLen(_ n: Int) -> Double {
        let tests = 10000
        var sum = 0
        var seed = 1
        var t = 0
        while (t < tests) {
            var visited: [Bool] = ([] as! [Bool])
            var i = 0
            while (i < n) {
                visited = ((visited + [false]) as! [Bool])
                i = Int((i + 1))
            }
            var x = 0
            while (!visited[x]) {
                visited[x] = true
                sum = Int((sum + 1))
                seed = Int((Int(((seed * 1664525) + 1013904223)) % 2147483647))
                x = Int((seed % n))
            }
            t = Int((t + 1))
        }
        return Double((Double(sum) / Double(tests)))
    }
    func ana(_ n: Int) -> Double {
        var nn = Double(n)
        var term = 1.0
        var sum = 1.0
        var i = (nn - 1.0)
        while (i >= 1.0) {
            term = Double((term * Double((i / nn))))
            sum = Double((sum + term))
            i = Double((i - 1.0))
        }
        return Double(sum)
    }
    func main() {
        let nmax = 20
        print(_p(" N    average    analytical    (error)"))
        print(_p("===  =========  ============  ========="))
        var n = 1
        while (n <= nmax) {
            let a = Double(avgLen(Int(n)))
            let b = Double(ana(Int(n)))
            let err = ((Double(absf(Double((a - b)))) / b) * 100.0)
            var line = (((((((String(describing: padInt(Int(n), 3)) + "  ") + String(describing: padFloat(Double(a), 9))) + "  ") + String(describing: padFloat(Double(b), 12))) + "  (") + String(describing: padFloat(Double(err), 6))) + "%)")
            print(_p(line))
            n = Int((n + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
