// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:52:56 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let msg = "Hello World! "
    var shift = 0
    var inc = 1
    var clicks = 0
    var frames = 0
    while (clicks < 5) {
        var line = ""
        var i = 0
        while (i < Int(((msg).count))) {
            let idx = (Int((shift + i)) % Int(((msg).count)))
            line = String((line + String(Array(msg)[idx..<(idx + 1)])))
            i = Int((i + 1))
        }
        print(line)
        shift = Int((Int((shift + inc)) % Int(((msg).count))))
        frames = Int((frames + 1))
        if ((frames % Int(((msg).count))) == 0) {
            inc = Int((Int(((msg).count)) - inc))
            clicks = Int((clicks + 1))
        }
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
