// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:00 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func newList() -> [String: Any] {
        return (["nodes": [:], "head": 0, "tail": 0, "nextID": 1] as! [String: Any])
    }
    func newNode(_ l: inout [String: Any], _ v: Any) -> [String: Any] {
        let id = (l["nextID"]! as! Int)
        l["nextID"] = (id + 1)
        var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        let n: [String: Any] = ["id": id, "value": v, "next": 0, "prev": 0]
        nodes[id] = (n as! [String: Any])
        l["nodes"] = nodes
        return (n as! [String: Any])
    }
    func pushFront(_ l: inout [String: Any], _ v: Any) -> [String: Any] {
        var n: [String: Any] = (newNode(&l, v) as! [String: Any])
        n["next"] = l["head"]!
        if ((l["head"]! as! Int) != 0) {
            var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
            var h: [String: Any] = nodes[(l["head"]! as! Int)]!
            h["prev"] = n["id"]!
            nodes[(h["id"]! as! Int)] = (h as! [String: Any])
            l["nodes"] = nodes
        } else {
            l["tail"] = n["id"]!
        }
        l["head"] = n["id"]!
        var nodes2: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        nodes2[(n["id"]! as! Int)] = (n as! [String: Any])
        l["nodes"] = nodes2
        return (n as! [String: Any])
    }
    func pushBack(_ l: inout [String: Any], _ v: Any) -> [String: Any] {
        var n: [String: Any] = (newNode(&l, v) as! [String: Any])
        n["prev"] = l["tail"]!
        if ((l["tail"]! as! Int) != 0) {
            var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
            var t: [String: Any] = nodes[(l["tail"]! as! Int)]!
            t["next"] = n["id"]!
            nodes[(t["id"]! as! Int)] = (t as! [String: Any])
            l["nodes"] = nodes
        } else {
            l["head"] = n["id"]!
        }
        l["tail"] = n["id"]!
        var nodes2: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        nodes2[(n["id"]! as! Int)] = (n as! [String: Any])
        l["nodes"] = nodes2
        return (n as! [String: Any])
    }
    func insertBefore(_ l: inout [String: Any], _ refID: Int, _ v: Any) -> [String: Any] {
        if (refID == 0) {
            return (pushFront(&l, v) as! [String: Any])
        }
        var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        var ref: [String: Any] = nodes[refID]!
        var n: [String: Any] = (newNode(&l, v) as! [String: Any])
        n["prev"] = ref["prev"]!
        n["next"] = ref["id"]!
        if ((ref["prev"]! as! Int) != 0) {
            var p: [String: Any] = nodes[(ref["prev"]! as! Int)]!
            p["next"] = n["id"]!
            nodes[(p["id"]! as! Int)] = (p as! [String: Any])
        } else {
            l["head"] = n["id"]!
        }
        ref["prev"] = n["id"]!
        nodes[refID] = (ref as! [String: Any])
        nodes[(n["id"]! as! Int)] = (n as! [String: Any])
        l["nodes"] = nodes
        return (n as! [String: Any])
    }
    func insertAfter(_ l: inout [String: Any], _ refID: Int, _ v: Any) -> [String: Any] {
        if (refID == 0) {
            return (pushBack(&l, v) as! [String: Any])
        }
        var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        var ref: [String: Any] = nodes[refID]!
        var n: [String: Any] = (newNode(&l, v) as! [String: Any])
        n["next"] = ref["next"]!
        n["prev"] = ref["id"]!
        if ((ref["next"]! as! Int) != 0) {
            var nx: [String: Any] = nodes[(ref["next"]! as! Int)]!
            nx["prev"] = n["id"]!
            nodes[(nx["id"]! as! Int)] = (nx as! [String: Any])
        } else {
            l["tail"] = n["id"]!
        }
        ref["next"] = n["id"]!
        nodes[refID] = (ref as! [String: Any])
        nodes[(n["id"]! as! Int)] = (n as! [String: Any])
        l["nodes"] = nodes
        return (n as! [String: Any])
    }
    func main() {
        var l: [String: Any] = (newList() as! [String: Any])
        var e4: [String: Any] = (pushBack(&l, 4) as! [String: Any])
        var e1: [String: Any] = (pushFront(&l, 1) as! [String: Any])
        _ = (insertBefore(&l, (e4["id"]! as! Int), 3) as! [String: Any])
        _ = (insertAfter(&l, (e1["id"]! as! Int), "two") as! [String: Any])
        var id: Int = (l["head"]! as! Int)
        var nodes: [Int: [String: Any]] = (l["nodes"]! as! [Int: [String: Any]])
        while (id != 0) {
            let node = nodes[id]!
            print(_p(_p(node["value"]!)))
            id = (node["next"]! as! Int)
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
