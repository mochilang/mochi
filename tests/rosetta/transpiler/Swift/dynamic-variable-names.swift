// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:19:59 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
            i = Int((i &+ 1))
        }
        if neg {
            n = Int(-n)
        }
        return n
    }
    func main() {
        var n: Int = 0
        while ((n < 1) || (n > 5)) {
            print(_p("How many integer variables do you want to create (max 5) : "))
            let line = (readLine() ?? "")
            if (Int(((line).count)) > 0) {
                n = Int(Int(String(describing: (line as! String)))!)
            }
        }
        var vars: [String: Int] = ([:] as! [String: Int])
        print(_p("OK, enter the variable names and their values, below\n"))
        var i: Int = 1
        while (i <= n) {
            print(_p((("\n  Variable " + _p(i)) + "\n")))
            print(_p("    Name  : "))
            let name = (readLine() ?? "")
            if (vars[name] != nil) {
                print(_p("  Sorry, you've already created a variable of that name, try again"))
                continue
            }
            var value: Int = 0
            while true {
                print(_p("    Value : "))
                let valstr = (readLine() ?? "")
                if (Int(((valstr).count)) == 0) {
                    print(_p("  Not a valid integer, try again"))
                    continue
                }
                var ok: Bool = true
                var j: Int = 0
                var neg: Bool = false
                if (String(Array(valstr)[0..<1]) == "-") {
                    neg = true
                    j = 1
                }
                while (j < Int(((valstr).count))) {
                    let ch = String(Array(valstr)[j..<(j &+ 1)])
                    if ((ch < "0") || (ch > "9")) {
                        ok = false
                        break
                    }
                    j = Int((j &+ 1))
                }
                if (!ok) {
                    print(_p("  Not a valid integer, try again"))
                    continue
                }
                value = Int(Int(String(describing: (valstr as! String)))!)
                break
            }
            vars[String(String(describing: name))] = (value as! Int)
            i = Int((i &+ 1))
        }
        print(_p("\nEnter q to quit"))
        while true {
            print(_p("\nWhich variable do you want to inspect : "))
            let name = (readLine() ?? "")
            if (String(describing: (name.lowercased())) == "q") {
                return
            }
            if (vars[name] != nil) {
                print(_p(("It's value is " + _p(vars[String(String(describing: name))]!))))
            } else {
                print(_p("Sorry there's no variable of that name, try again"))
            }
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
