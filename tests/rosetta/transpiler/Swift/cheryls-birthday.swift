// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:57 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Birthday {
        var month: Int
        var day: Int
    }
    func monthUnique(_ b: Birthday, _ list: [Birthday]) -> Bool {
        var c: Int = 0
        for x in list {
            if (x.month == b.month) {
                c = ((c + 1) as! Int)
            }
        }
        return (c == 1)
    }
    func dayUnique(_ b: Birthday, _ list: [Birthday]) -> Bool {
        var c: Int = 0
        for x in list {
            if (x.day == b.day) {
                c = ((c + 1) as! Int)
            }
        }
        return (c == 1)
    }
    func monthWithUniqueDay(_ b: Birthday, _ list: [Birthday]) -> Bool {
        for x in list {
            if ((x.month == b.month) && dayUnique((x as! Birthday), (list as! [Birthday]))) {
                return true
            }
        }
        return false
    }
    func bstr(_ b: Birthday) -> String {
        let months: [String] = ([("" as! Any), ("January" as! Any), ("February" as! Any), ("March" as! Any), ("April" as! Any), ("May" as! Any), ("June" as! Any), ("July" as! Any), ("August" as! Any), ("September" as! Any), ("October" as! Any), ("November" as! Any), ("December" as! Any)] as! [String])
        return ((((months[b.month] as! String) + " ") + _p(b.day)) as! String)
    }
    var choices: [Birthday] = ([(Birthday(month: 5, day: 15) as! Any), (Birthday(month: 5, day: 16) as! Any), (Birthday(month: 5, day: 19) as! Any), (Birthday(month: 6, day: 17) as! Any), (Birthday(month: 6, day: 18) as! Any), (Birthday(month: 7, day: 14) as! Any), (Birthday(month: 7, day: 16) as! Any), (Birthday(month: 8, day: 14) as! Any), (Birthday(month: 8, day: 15) as! Any), (Birthday(month: 8, day: 17) as! Any)] as! [Birthday])
    var filtered: [Birthday] = ([] as! [Birthday])
    for bd in choices {
        if (!monthUnique((bd as! Birthday), (choices as! [Birthday]))) {
            filtered = (_append(filtered, bd) as! [Birthday])
        }
    }
    var filtered2: [Birthday] = ([] as! [Birthday])
    for bd in filtered {
        if (!monthWithUniqueDay((bd as! Birthday), (filtered as! [Birthday]))) {
            filtered2 = (_append(filtered2, bd) as! [Birthday])
        }
    }
    var filtered3: [Birthday] = ([] as! [Birthday])
    for bd in filtered2 {
        if dayUnique((bd as! Birthday), (filtered2 as! [Birthday])) {
            filtered3 = (_append(filtered3, bd) as! [Birthday])
        }
    }
    var filtered4: [Birthday] = ([] as! [Birthday])
    for bd in filtered3 {
        if monthUnique((bd as! Birthday), (filtered3 as! [Birthday])) {
            filtered4 = (_append(filtered4, bd) as! [Birthday])
        }
    }
    if (Int(((filtered4).count)) == 1) {
        print(_p(("Cheryl's birthday is " + String(describing: bstr((filtered4[0] as! Birthday))))))
    } else {
        print(_p("Something went wrong!"))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
