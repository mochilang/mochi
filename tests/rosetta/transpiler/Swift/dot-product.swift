// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:32:56 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct DotResult {
        var value: Int
        var ok: Bool
    }
    func dot(_ x: [Int], _ y: [Int]) -> DotResult {
        if (Int(((x).count)) != Int(((y).count))) {
            return (DotResult(value: 0, ok: false) as! DotResult)
        }
        var sum: Int = 0
        var i: Int = 0
        while (i < Int(((x).count))) {
            sum = Int((sum + ((x[i] as! Int) * (y[i] as! Int))))
            i = Int((i + 1))
        }
        return (DotResult(value: sum, ok: true) as! DotResult)
    }
    func main() {
        let r = dot(([1, 3, -5] as! [Int]), ([4, -2, -1] as! [Int]))
        if (!r.ok) {
            print(_p("incompatible lengths"))
        } else {
            print(_p(_p(r.value)))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
