// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:05:19 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func mkAdd(_ a: Int) -> (Int) -> Int {
        return { (b: Int) -> Int in (a + b) }
    }
    func mysum(_ x: Int, _ y: Int) -> Int {
        return ((x + y) as! Int)
    }
    func partialSum(_ x: Int) -> (Int) -> Int {
        return { (y: Int) -> Int in Int(mysum((x as! Int), (y as! Int))) }
    }
    func main() {
        let add2 = mkAdd(2)
        let add3 = mkAdd(3)
        print(_p(((_p(Int(add2(5))) + " ") + _p(Int(add3(6))))))
        let partial = partialSum(13)
        print(_p(_p(Int(partial(5)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
