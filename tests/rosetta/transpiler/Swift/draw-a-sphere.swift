// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:18 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct V3 {
        var x: Double
        var y: Double
        var z: Double
    }
    func sqrtApprox(_ x: Double) -> Double {
        if (x <= 0.0) {
            return 0.0
        }
        var guess: Double = x
        var i: Int = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i + 1))
        }
        return Double(guess)
    }
    func powf(_ base: Double, _ exp: Int) -> Double {
        var result: Double = 1.0
        var i: Int = 0
        while (i < exp) {
            result = Double((result * base))
            i = Int((i + 1))
        }
        return Double(result)
    }
    func normalize(_ v: V3) -> V3 {
        let len = Double(sqrtApprox(Double((((v.x * v.x) + (v.y * v.y)) + (v.z * v.z)))))
        return (V3(x: (v.x / len), y: (v.y / len), z: (v.z / len)) as! V3)
    }
    func dot(_ a: V3, _ b: V3) -> Double {
        let d = (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z))
        if (d < 0.0) {
            return Double(-d)
        }
        return 0.0
    }
    func drawSphere(_ r: Int, _ k: Int, _ ambient: Double, _ light: V3, _ shades: String) {
        var i: Int = -r
        while (i <= r) {
            let x = (Double(i) + 0.5)
            var line: String = ""
            var j: Int = -Int((2 * r))
            while (j <= (2 * r)) {
                let y = ((Double(j) / 2.0) + 0.5)
                if (((x * x) + (y * y)) <= (Double(r) * Double(r))) {
                    var zsq: Double = (((Double(r) * Double(r)) - (x * x)) - (y * y))
                    var vec: V3 = normalize((V3(x: x, y: y, z: Double(sqrtApprox(Double(zsq)))) as! V3))
                    var b: Double = (Double(powf(Double(dot((light as! V3), (vec as! V3))), Int(k))) + ambient)
                    var intensity: Int = Int((Double((1.0 - b)) * Double((Double(((shades).count)) - 1.0))))
                    if (intensity < 0) {
                        intensity = 0
                    }
                    if (intensity >= Int(((shades).count))) {
                        intensity = Int((Int(((shades).count)) - 1))
                    }
                    line = String(describing: (line + String(describing: String(Array(String(describing: String(describing: shades)))[Int(intensity)..<Int((intensity + 1))]))))
                } else {
                    line = String(describing: (line + " "))
                }
                j = Int((j + 1))
            }
            print(_p(line))
            i = Int((i + 1))
        }
    }
    func main() {
        let shades = ".:!*oe&#%@"
        var light: V3 = normalize((V3(x: 30.0, y: 30.0, z: -50.0) as! V3))
        _ = drawSphere(20, 4, 0.1, (light as! V3), String(describing: shades))
        _ = drawSphere(10, 2, 0.4, (light as! V3), String(describing: shades))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
