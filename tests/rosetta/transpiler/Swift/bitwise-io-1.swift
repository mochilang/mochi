// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:19:37 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ n: Int) -> Int {
        var v: Int = 1
        var i: Int = 0
        while (i < n) {
            v = Int((v * 2))
            i = Int((i + 1))
        }
        return Int(v)
    }
    func lshift(_ x: Int, _ n: Int) -> Int {
        return Int((x * Int(pow2(Int(n)))))
    }
    func rshift(_ x: Int, _ n: Int) -> Int {
        return Int((x / Int(pow2(Int(n)))))
    }
    struct Writer {
        var order: String
        var bits: Int
        var nbits: Int
        var data: [Int]
    }
    func NewWriter(_ order: String) -> Writer {
        return (Writer(order: order, bits: 0, nbits: 0, data: []) as! Writer)
    }
    func writeBitsLSB(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        w.bits = Int((w.bits + Int(lshift(Int(c), Int(w.nbits)))))
        w.nbits = Int((w.nbits + width))
        while (w.nbits >= 8) {
            let b = (w.bits % 256)
            w.data = ((w.data + [b]) as! [Int])
            w.bits = Int(rshift(Int(w.bits), 8))
            w.nbits = Int((w.nbits - 8))
        }
        return (w as! Writer)
    }
    func writeBitsMSB(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        w.bits = Int((w.bits + Int(lshift(Int(c), Int(((32 - width) - w.nbits))))))
        w.nbits = Int((w.nbits + width))
        while (w.nbits >= 8) {
            let b = (Int(rshift(Int(w.bits), 24)) % 256)
            w.data = ((w.data + [b]) as! [Int])
            w.bits = Int((Int((w.bits % Int(pow2(24)))) * 256))
            w.nbits = Int((w.nbits - 8))
        }
        return (w as! Writer)
    }
    func WriteBits(_ w: inout Writer, _ c: Int, _ width: Int) -> Writer {
        if (w.order == "LSB") {
            return (writeBitsLSB(&w, Int(c), Int(width)) as! Writer)
        }
        return (writeBitsMSB(&w, Int(c), Int(width)) as! Writer)
    }
    func CloseWriter(_ w: inout Writer) -> Writer {
        if (w.nbits > 0) {
            if (w.order == "MSB") {
                w.bits = Int(rshift(Int(w.bits), 24))
            }
            w.data = ((w.data + [(w.bits % 256)]) as! [Int])
        }
        w.bits = 0
        w.nbits = 0
        return (w as! Writer)
    }
    func toBinary(_ n: Int, _ bits: Int) -> String {
        var b: String = ""
        var val: Int = n
        var i: Int = 0
        while (i < bits) {
            b = String((_p((val % 2)) + b))
            val = Int((val / 2))
            i = Int((i + 1))
        }
        return String(b)
    }
    func bytesToBits(_ bs: [Int]) -> String {
        var out: String = "["
        var i: Int = 0
        while (i < Int(((bs).count))) {
            out = String((out + String(describing: toBinary((bs[i] as! Int), 8))))
            if ((i + 1) < Int(((bs).count))) {
                out = String((out + " "))
            }
            i = Int((i + 1))
        }
        out = String((out + "]"))
        return String(out)
    }
    func ExampleWriter_WriteBits() {
        var bw: Writer = NewWriter("MSB")
        bw = (WriteBits(&bw, 15, 4) as! Writer)
        bw = (WriteBits(&bw, 0, 1) as! Writer)
        bw = (WriteBits(&bw, 19, 5) as! Writer)
        bw = (CloseWriter(&bw) as! Writer)
        print(_p(String(describing: bytesToBits((bw.data as! [Int])))))
    }
    _ = ExampleWriter_WriteBits()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
