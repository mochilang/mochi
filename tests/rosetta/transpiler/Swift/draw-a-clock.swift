// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:08 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow2(_ exp: Int) -> Int {
        var r: Int = 1
        var i: Int = 0
        while (i < exp) {
            r = Int((r * 2))
            i = Int((i + 1))
        }
        return Int(r)
    }
    func bin(_ n: Int, _ digits: Int) -> String {
        var n = n
        var s: String = ""
        var i: Int = (digits - 1)
        while (i >= 0) {
            let p = Int(pow2(Int(i)))
            if (n >= p) {
                s = String(describing: (s + "x"))
                n = Int((n - p))
            } else {
                s = String(describing: (s + " "))
            }
            if (i > 0) {
                s = String(describing: (s + "|"))
            }
            i = Int((i - 1))
        }
        return String(describing: s)
    }
    let t = (Int(_now()) / 1000000000)
    let sec = (t % 60)
    let mins = (t / 60)
    let min = (mins % 60)
    let hour = (Int((mins / 60)) % 24)
    print(_p(String(describing: bin(Int(hour), 8))))
    print(_p(""))
    print(_p(String(describing: bin(Int(min), 8))))
    print(_p(""))
    var xs: String = ""
    var i: Int = 0
    while (i < sec) {
        xs = String(describing: (xs + "x"))
        i = Int((i + 1))
    }
    var out: String = ""
    var j: Int = 0
    while (j < Int(((xs).count))) {
        out = String(describing: (out + String(describing: String(Array(String(describing: String(describing: xs)))[Int(j)..<Int((j + 1))]))))
        if (((Int((j + 1)) % 5) == 0) && ((j + 1) < Int(((xs).count)))) {
            out = String(describing: (out + "|"))
        }
        j = Int((j + 1))
    }
    print(_p(out))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
