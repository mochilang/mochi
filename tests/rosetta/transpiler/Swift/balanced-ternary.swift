// Generated by Mochi transpiler v0.10.41 on 2025-07-26 20:38:24 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func trimLeftZeros(_ s: String) -> String {
        var i: Int = 0
        while ((i < Int(((s).count))) && (String(describing: String(Array(String(s))[Int(i)..<Int((i + 1))])) == "0")) {
            i = Int((i + 1))
        }
        return String(describing: String(Array(String(s))[Int(i)..<Int(((s).count))]))
    }
    func btString(_ s: String) -> [String: Any] {
        var s = s
        s = String(describing: trimLeftZeros(String(s)))
        var b: [Int] = ([] as! [Int])
        var i: Int = (Int(((s).count)) - 1)
        while (i >= 0) {
            let ch = String(describing: String(Array(String(s))[Int(i)..<Int((i + 1))]))
            if (ch == "+") {
                b = ((b + [1]) as! [Int])
            } else {
                if (ch == "0") {
                    b = ((b + [0]) as! [Int])
                } else {
                    if (ch == "-") {
                        b = ((b + [(0 - 1)]) as! [Int])
                    } else {
                        return (["bt": [] as [Any], "ok": false] as! [String: Any])
                    }
                }
            }
            i = Int((i - 1))
        }
        return (["bt": b, "ok": true] as! [String: Any])
    }
    func btToString(_ b: [Int]) -> String {
        if (Int(((b).count)) == 0) {
            return "0"
        }
        var r: String = ""
        var i: Int = (Int(((b).count)) - 1)
        while (i >= 0) {
            let d = (b[i] as! Int)
            if (d == (0 - 1)) {
                r = String((r + "-"))
            } else {
                if (d == 0) {
                    r = String((r + "0"))
                } else {
                    r = String((r + "+"))
                }
            }
            i = Int((i - 1))
        }
        return String(r)
    }
    func btInt(_ i: Int) -> [Int] {
        if (i == 0) {
            return ([] as! [Int])
        }
        var n: Int = i
        var b: [Int] = ([] as! [Int])
        while (n != 0) {
            var m: Int = (n % 3)
            n = Int((n / 3))
            if (m == 2) {
                m = Int((0 - 1))
                n = Int((n + 1))
            } else {
                if (m == (0 - 2)) {
                    m = 1
                    n = Int((n - 1))
                }
            }
            b = ((b + [m]) as! [Int])
        }
        return (b as! [Int])
    }
    func btToInt(_ b: [Int]) -> Int {
        var r: Int = 0
        var pt: Int = 1
        var i: Int = 0
        while (i < Int(((b).count))) {
            r = Int((r + ((b[i] as! Int) * pt)))
            pt = Int((pt * 3))
            i = Int((i + 1))
        }
        return Int(r)
    }
    func btNeg(_ b: [Int]) -> [Int] {
        var r: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((b).count))) {
            r = ((r + [-(b[i] as! Int)]) as! [Int])
            i = Int((i + 1))
        }
        return (r as! [Int])
    }
    func btAdd(_ a: [Int], _ b: [Int]) -> [Int] {
        return (btInt(Int((Int(btToInt((a as! [Int]))) + Int(btToInt((b as! [Int])))))) as! [Int])
    }
    func btMul(_ a: [Int], _ b: [Int]) -> [Int] {
        return (btInt(Int((Int(btToInt((a as! [Int]))) * Int(btToInt((b as! [Int])))))) as! [Int])
    }
    func padLeft(_ s: String, _ w: Int) -> String {
        var r: String = s
        while (Int(((r).count)) < w) {
            r = String((" " + r))
        }
        return String(r)
    }
    func show(_ label: String, _ b: [Int]) {
        let l = String(describing: padLeft(String(label), 7))
        let bs = String(describing: padLeft(String(describing: btToString((b as! [Int]))), 12))
        let `is` = String(describing: padLeft(String(_p(Int(btToInt((b as! [Int]))))), 7))
        print(_p(((((l + " ") + bs) + " ") + `is`)))
    }
    func main() {
        let ares = (btString("+-0++0+") as! [String: Any])
        let a = ares["bt"]!
        let b = (btInt(Int(-436)) as! [Int])
        let cres = (btString("+-++-") as! [String: Any])
        let c = cres["bt"]!
        _ = show("a:", (a as! [Int]))
        _ = show("b:", (b as! [Int]))
        _ = show("c:", (c as! [Int]))
        _ = show("a(b-c):", (btMul((a as! [Int]), (btAdd((b as! [Int]), (btNeg((c as! [Int])) as! [Int])) as! [Int])) as! [Int]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
