// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:23:10 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow10(_ n: Int) -> Double {
        var r: Double = 1.0
        var i: Int = 0
        while (i < n) {
            r = Double((r * 10.0))
            i = ((i + 1) as! Int)
        }
        return (r as! Double)
    }
    func formatFloat(_ f: Double, _ prec: Int) -> String {
        let scale = Double(pow10((prec as! Int)))
        let scaled = (Double((f * scale)) + 0.5)
        var n: Int = Int(scaled)
        var digits: String = _p(n)
        while (Int(((digits).count)) <= prec) {
            digits = (("0" + digits) as! String)
        }
        let intPart = String(describing: String(Array(String(describing: (digits as! String)))[0..<((Int(((digits).count)) - prec) as! Int)]))
        let fracPart = String(describing: String(Array(String(describing: (digits as! String)))[((Int(((digits).count)) - prec) as! Int)..<Int(((digits).count))]))
        return (((intPart + ".") + fracPart) as! String)
    }
    func padLeftZeros(_ s: String, _ width: Int) -> String {
        var out: String = s
        while (Int(((out).count)) < width) {
            out = (("0" + out) as! String)
        }
        return (out as! String)
    }
    print(_p(String(describing: padLeftZeros(String(describing: formatFloat(7.125, 3)), 9))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
