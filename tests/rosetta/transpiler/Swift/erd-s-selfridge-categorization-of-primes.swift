// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:21 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func generatePrimes(_ n: Int) -> [Int] {
        var primes: [Int] = ([2] as! [Int])
        var cand: Int = 3
        while (Int(((primes).count)) < n) {
            var isP: Bool = true
            var i: Int = 0
            while (i < Int(((primes).count))) {
                let p = (primes[i] as! Int)
                if ((p * p) > cand) {
                    break
                }
                if ((cand % p) == 0) {
                    isP = false
                    break
                }
                i = Int((i + 1))
            }
            if isP {
                primes = (_append(primes, cand) as! [Int])
            }
            cand = Int((cand + 2))
        }
        return (primes as! [Int])
    }
    func primeFactors(_ n: Int, _ primes: [Int]) -> [Int] {
        var factors: [Int] = ([] as! [Int])
        var num: Int = n
        var i: Int = 0
        while ((i < Int(((primes).count))) && (((primes[i] as! Int) * (primes[i] as! Int)) <= num)) {
            let p = (primes[i] as! Int)
            while ((num % p) == 0) {
                factors = (_append(factors, p) as! [Int])
                num = Int((num / p))
            }
            i = Int((i + 1))
        }
        if (num > 1) {
            factors = (_append(factors, num) as! [Int])
        }
        return (factors as! [Int])
    }
    var prevCats: [Int: Int] = ([:] as! [Int: Int])
    func cat(_ p: Int, _ primes: [Int]) -> Int {
        if (String(describing: prevCats).contains(String(describing: p))) {
            return (prevCats[p]! as! Int)
        }
        var pf: [Int] = (primeFactors(Int((p + 1)), (primes as! [Int])) as! [Int])
        var all23: Bool = true
        for f in pf {
            if ((f != 2) && (f != 3)) {
                all23 = false
                break
            }
        }
        if all23 {
            prevCats[p] = 1
            return 1
        }
        if (p > 2) {
            var unique: [Int] = ([] as! [Int])
            var last: Int = -1
            for f in pf {
                if (f != last) {
                    unique = (_append(unique, f) as! [Int])
                    last = Int(f)
                }
            }
            pf = (unique as! [Int])
        }
        var c: Int = 2
        while (c <= 11) {
            var ok: Bool = true
            for f in pf {
                if (Int(cat(Int(f), (primes as! [Int]))) >= c) {
                    ok = false
                    break
                }
            }
            if ok {
                prevCats[p] = Int(c)
                return Int(c)
            }
            c = Int((c + 1))
        }
        prevCats[p] = 12
        return 12
    }
    func padLeft(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = String(describing: (" " + s))
        }
        return String(describing: s)
    }
    func main() {
        let primes = (generatePrimes(1000) as! [Int])
        var es: [[Int]] = ([] as! [[Int]])
        for _ in 0..<12 {
            es = ((_append(es, []) as! [Any]) as! [[Int]])
        }
        print(_p("First 200 primes:\n"))
        var idx: Int = 0
        while (idx < 200) {
            let p = (primes[idx] as! Int)
            let c = Int(cat(Int(p), (primes as! [Int])))
            es[(c - 1)] = (_append((es[(c - 1)] as! [Int]), p) as! [Int])
            idx = Int((idx + 1))
        }
        var c: Int = 1
        while (c <= 6) {
            if (Int((((es[(c - 1)] as! [Int])).count)) > 0) {
                print(_p((("Category " + _p(c)) + ":")))
                print(_p(_p((es[(c - 1)] as! [Int]))))
                print(_p(""))
            }
            c = Int((c + 1))
        }
        print(_p("First thousand primes:\n"))
        while (idx < 1000) {
            let p = (primes[idx] as! Int)
            let cv = Int(cat(Int(p), (primes as! [Int])))
            es[(cv - 1)] = (_append((es[(cv - 1)] as! [Int]), p) as! [Int])
            idx = Int((idx + 1))
        }
        c = 1
        while (c <= 12) {
            let e = (es[(c - 1)] as! [Int])
            if (Int(((e).count)) > 0) {
                let line = ((((((("Category " + String(describing: padLeft(Int(c), 2))) + ": First = ") + String(describing: padLeft((e[0] as! Int), 7))) + "  Last = ") + String(describing: padLeft((e[(Int(((e).count)) - 1)] as! Int), 8))) + "  Count = ") + String(describing: padLeft(Int(((e).count)), 6)))
                print(_p(line))
            }
            c = Int((c + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
