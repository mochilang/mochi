// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:23 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func square_to_maps(_ square: [[String]]) -> [String: Any] {
    var emap: [String: [Int]] = ([:] as! [String: [Int]])
    var dmap: [String: String] = ([:] as! [String: String])
    var x: Int = 0
    while (x < Int(((square).count))) {
        let row = (square[x] as! [String])
        var y: Int = 0
        while (y < Int(((row).count))) {
            let ch = (row[y] as! String)
            emap[ch] = ([x, y] as! [Int])
            dmap[((_p(x) + ",") + _p(y))] = String(ch)
            y = Int((y + 1))
        }
        x = Int((x + 1))
    }
    return (["e": emap, "d": dmap] as! [String: Any])
}
func remove_space(_ text: String, _ emap: [String: [Int]]) -> String {
    let s = String(describing: (String(text).uppercased()))
    var out: String = ""
    var i: Int = 0
    while (i < Int(((s).count))) {
        let ch = String(Array(s)[i..<(i + 1)])
        if ((ch != " ") && ((emap[ch] != nil) as! Bool)) {
            out = String((out + ch))
        }
        i = Int((i + 1))
    }
    return String(out)
}
func encrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
    var text = text
    text = String(describing: remove_space(String(text), (emap as! [String: [Int]])))
    var row0: [Int] = ([] as! [Int])
    var row1: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < Int(((text).count))) {
        let ch = String(Array(text)[i..<(i + 1)])
        let xy = emap[ch]!
        row0 = ((row0 + [(xy[0] as! Int)]) as! [Int])
        row1 = ((row1 + [(xy[1] as! Int)]) as! [Int])
        i = Int((i + 1))
    }
    for v in row1 {
        row0 = ((row0 + [v]) as! [Int])
    }
    var res: String = ""
    var j: Int = 0
    while (j < Int(((row0).count))) {
        let key = ((_p((row0[j] as! Int)) + ",") + _p((row0[(j + 1)] as! Int)))
        res = String((res + dmap[key]!))
        j = Int((j + 2))
    }
    return String(res)
}
func decrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
    var text = text
    text = String(describing: remove_space(String(text), (emap as! [String: [Int]])))
    var coords: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < Int(((text).count))) {
        let ch = String(Array(text)[i..<(i + 1)])
        let xy = emap[ch]!
        coords = ((coords + [(xy[0] as! Int)]) as! [Int])
        coords = ((coords + [(xy[1] as! Int)]) as! [Int])
        i = Int((i + 1))
    }
    var half: Int = (Int(((coords).count)) / 2)
    var k1: [Int] = ([] as! [Int])
    var k2: [Int] = ([] as! [Int])
    var idx: Int = 0
    while (idx < half) {
        k1 = ((k1 + [(coords[idx] as! Int)]) as! [Int])
        idx = Int((idx + 1))
    }
    while (idx < Int(((coords).count))) {
        k2 = ((k2 + [(coords[idx] as! Int)]) as! [Int])
        idx = Int((idx + 1))
    }
    var res: String = ""
    var j: Int = 0
    while (j < half) {
        let key = ((_p((k1[j] as! Int)) + ",") + _p((k2[j] as! Int)))
        res = String((res + dmap[key]!))
        j = Int((j + 1))
    }
    return String(res)
}
func main() {
    let squareRosetta = ([(["A", "B", "C", "D", "E"] as! [String]), (["F", "G", "H", "I", "K"] as! [String]), (["L", "M", "N", "O", "P"] as! [String]), (["Q", "R", "S", "T", "U"] as! [String]), (["V", "W", "X", "Y", "Z"] as! [String]), (["J", "1", "2", "3", "4"] as! [String])] as! [[String]])
    let squareWikipedia = ([(["B", "G", "W", "K", "Z"] as! [String]), (["Q", "P", "N", "D", "S"] as! [String]), (["I", "O", "A", "X", "E"] as! [String]), (["F", "C", "L", "U", "M"] as! [String]), (["T", "H", "Y", "V", "R"] as! [String]), (["J", "1", "2", "3", "4"] as! [String])] as! [[String]])
    let textRosetta = "0ATTACKATDAWN"
    let textWikipedia = "FLEEATONCE"
    let textTest = "The invasion will start on the first of January"
    var maps: [String: Any] = (square_to_maps((squareRosetta as! [[String]])) as! [String: Any])
    var emap: Any = maps["e"]!
    var dmap: Any = maps["d"]!
    print(_p("from Rosettacode"))
    print(_p(("original:\t " + textRosetta)))
    var s: String = String(describing: encrypt(String(textRosetta), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("codiert:\t " + s)))
    s = String(describing: decrypt(String(s), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("and back:\t " + s)))
    maps = (square_to_maps((squareWikipedia as! [[String]])) as! [String: Any])
    emap = maps["e"]!
    dmap = maps["d"]!
    print(_p("from Wikipedia"))
    print(_p(("original:\t " + textWikipedia)))
    s = String(describing: encrypt(String(textWikipedia), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("codiert:\t " + s)))
    s = String(describing: decrypt(String(s), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("and back:\t " + s)))
    maps = (square_to_maps((squareWikipedia as! [[String]])) as! [String: Any])
    emap = maps["e"]!
    dmap = maps["d"]!
    print(_p("from Rosettacode long part"))
    print(_p(("original:\t " + textTest)))
    s = String(describing: encrypt(String(textTest), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("codiert:\t " + s)))
    s = String(describing: decrypt(String(s), (emap as! [String: [Int]]), (dmap as! [String: String])))
    print(_p(("and back:\t " + s)))
}
_ = main()
