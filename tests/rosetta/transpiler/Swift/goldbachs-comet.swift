// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:16:38 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func sieve(_ limit: Int) -> [Bool] {
        var primes: [Bool] = ([] as! [Bool])
        var i: Int = 0
        while (i < limit) {
            primes = (_append(primes, true) as! [Bool])
            i = Int((i &+ 1))
        }
        primes[0] = false
        primes[1] = false
        var p: Int = 2
        while ((p &* p) < limit) {
            if (primes[p] as! Bool) {
                var k: Int = (p &* p)
                while (k < limit) {
                    primes[k] = false
                    k = Int((k &+ p))
                }
            }
            p = Int((p &+ 1))
        }
        return primes
    }
    func goldbachCount(_ primes: [Bool], _ n: Int) -> Int {
        var c: Int = 0
        var i: Int = 1
        while (i <= (n / 2)) {
            if ((primes[i] as! Bool) && (primes[(n &- i)] as! Bool)) {
                c = Int((c &+ 1))
            }
            i = Int((i &+ 1))
        }
        return c
    }
    func pad(_ n: Int) -> String {
        if (n < 10) {
            return ("  " + String(describing: n))
        }
        if (n < 100) {
            return (" " + String(describing: n))
        }
        return String(describing: n)
    }
    func main() {
        var primes: [Bool] = (sieve(1000) as! [Bool])
        print(_p("The first 100 Goldbach numbers:"))
        var line: String = ""
        var n: Int = 2
        var count: Int = 0
        while (count < 100) {
            let v = Int(goldbachCount((primes as! [Bool]), (2 &* n)))
            line = (((line + String(describing: pad(v))) + " ") as! String)
            count = Int((count &+ 1))
            n = Int((n &+ 1))
            if ((count % 10) == 0) {
                print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<(Int(((line).count)) &- 1)]))))
                line = ""
            }
        }
        let val = Int(goldbachCount((primes as! [Bool]), 1000))
        print(_p(("\nThe 1,000th Goldbach number = " + String(describing: val))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
