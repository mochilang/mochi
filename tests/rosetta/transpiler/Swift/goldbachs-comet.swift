// Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:58:58 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func sieve(_ limit: Int) -> [Bool] {
    var primes: [Bool] = ([] as! [Bool])
    var i: Int = 0
    while (i < limit) {
        primes = (_append(primes, true) as! [Bool])
        i = Int((i &+ 1))
    }
    primes[0] = false
    primes[1] = false
    var p: Int = 2
    while ((p &* p) < limit) {
        if (primes[p] as! Bool) {
            var k: Int = (p &* p)
            while (k < limit) {
                primes[k] = false
                k = Int((k &+ p))
            }
        }
        p = Int((p &+ 1))
    }
    return primes
}
func goldbachCount(_ primes: [Bool], _ n: Int) -> Int {
    var c: Int = 0
    var i: Int = 1
    while (i <= (n / 2)) {
        if ((primes[i] as! Bool) && (primes[(n &- i)] as! Bool)) {
            c = Int((c &+ 1))
        }
        i = Int((i &+ 1))
    }
    return c
}
func pad(_ n: Int) -> String {
    if (n < 10) {
        return ("  " + String(describing: n))
    }
    if (n < 100) {
        return (" " + String(describing: n))
    }
    return String(describing: n)
}
func main() {
    var primes: [Bool] = (sieve(1000) as! [Bool])
    print(_p("The first 100 Goldbach numbers:"))
    var line: String = ""
    var n: Int = 2
    var count: Int = 0
    while (count < 100) {
        let v = Int(goldbachCount((primes as! [Bool]), Int((2 &* n))))
        line = (((line + String(describing: pad((v as! Int)))) + " ") as! String)
        count = Int((count &+ 1))
        n = Int((n &+ 1))
        if ((count % 10) == 0) {
            print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
            line = ""
        }
    }
    let val = Int(goldbachCount((primes as! [Bool]), 1000))
    print(_p(("\nThe 1,000th Goldbach number = " + String(describing: val))))
}
_ = main()
