// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:13:25 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func countOccurrences(_ s: String, _ sub: String) -> Int {
    if (Int(((sub).count)) == 0) {
        return (Int(((s).count)) &+ 1)
    }
    var cnt: Int = 0
    var i: Int = 0
    var step: Int = Int(((sub).count))
    while ((i &+ step) <= Int(((s).count))) {
        if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int((i &+ step))])) == sub) {
            cnt = Int((cnt &+ 1))
            i = Int((i &+ step))
        } else {
            i = Int((i &+ 1))
        }
    }
    return cnt
}
func main() {
    print(_p(String(describing: Int(countOccurrences("the three truths", "th")))))
    print(_p(String(describing: Int(countOccurrences("ababababab", "abab")))))
}
_ = main()
