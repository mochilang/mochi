// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:07:13 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func primeFactors(_ n: Int) -> [Int] {
    var factors: [Int] = ([] as! [Int])
    var x: Int = n
    while ((x % 2) == 0) {
        factors = (_append(factors, 2) as! [Int])
        x = ((x / 2) as! Int)
    }
    var p: Int = 3
    while ((p * p) <= x) {
        while ((x % p) == 0) {
            factors = (_append(factors, p) as! [Int])
            x = ((x / p) as! Int)
        }
        p = ((p + 2) as! Int)
    }
    if (x > 1) {
        factors = (_append(factors, x) as! [Int])
    }
    return factors
}
func commatize(_ n: Int) -> String {
    var s: String = _p(n)
    var out: String = ""
    var i: Int = (Int(((s).count)) - 1)
    var c: Int = 0
    while (i >= 0) {
        out = ((String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)])) + out) as! String)
        c = ((c + 1) as! Int)
        if (((c % 3) == 0) && (i > 0)) {
            out = (("," + out) as! String)
        }
        i = ((i - 1) as! Int)
    }
    return out
}
func indexOf(_ s: String, _ sub: String) -> Int {
    var i: Int = 0
    while ((i + Int(((sub).count))) <= Int(((s).count))) {
        if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + Int(((sub).count))) as! Int)])) == sub) {
            return i
        }
        i = ((i + 1) as! Int)
    }
    return -1
}
func pad10(_ s: String) -> String {
    var str: String = s
    while (Int(((str).count)) < 10) {
        str = ((" " + str) as! String)
    }
    return str
}
func trimRightStr(_ s: String) -> String {
    var end: Int = Int(((s).count))
    while ((end > 0) && (String(describing: String(Array(String(describing: (s as! String)))[((end - 1) as! Int)..<(end as! Int)])) == " ")) {
        end = ((end - 1) as! Int)
    }
    return String(describing: String(Array(String(describing: (s as! String)))[0..<(end as! Int)]))
}
func main() {
    var res: [Int] = ([] as! [Int])
    var count: Int = 0
    var k: Int = (11 * 11)
    while (count < 20) {
        if ((((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0)) {
            k = ((k + 2) as! Int)
            continue
        }
        let factors: [Int] = (primeFactors((k as! Int)) as! [Int])
        if (Int(((factors).count)) > 1) {
            let s = _p(k)
            var includesAll: Bool = true
            var prev: Int = -1
            for f in factors {
                if (f == prev) {
                    continue
                }
                let fs = _p(f)
                if (Int((String(describing: (s as! String)).firstIndex(of: Character(String(describing: (fs as! String))))?.utf16Offset(in: String(describing: (s as! String)) ) ?? -1)) == Int(-1)) {
                    includesAll = false
                    break
                }
                prev = (f as! Int)
            }
            if includesAll {
                res = (_append(res, k) as! [Int])
                count = ((count + 1) as! Int)
            }
        }
        k = ((k + 2) as! Int)
    }
    var line: String = ""
    for e in (Array(res[0..<10]) as! [Int]) {
        line = (((line + String(describing: pad10(String(describing: commatize((e as! Int)))))) + " ") as! String)
    }
    print(_p(String(describing: trimRightStr((line as! String)))))
    line = ""
    for e in (Array(res[10..<20]) as! [Int]) {
        line = (((line + String(describing: pad10(String(describing: commatize((e as! Int)))))) + " ") as! String)
    }
    print(_p(String(describing: trimRightStr((line as! String)))))
}
_ = main()
