// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:51:56 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func primeFactors(_ n: Int) -> [Int] {
        var factors: [Int] = ([] as! [Int])
        var x: Int = n
        while ((x % 2) == 0) {
            factors = (_append(factors, 2) as! [Int])
            x = Int((x / 2))
        }
        var p: Int = 3
        while ((p &* p) <= x) {
            while ((x % p) == 0) {
                factors = (_append(factors, p) as! [Int])
                x = Int((x / p))
            }
            p = Int((p &+ 2))
        }
        if (x > 1) {
            factors = (_append(factors, x) as! [Int])
        }
        return factors
    }
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var out: String = ""
        var i: Int = (Int(((s).count)) &- 1)
        var c: Int = 0
        while (i >= 0) {
            out = ((String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int((i &+ 1))])) + out) as! String)
            c = Int((c &+ 1))
            if (((c % 3) == 0) && (i > 0)) {
                out = (("," + out) as! String)
            }
            i = Int((i &- 1))
        }
        return out
    }
    func indexOf(_ s: String, _ sub: String) -> Int {
        var i: Int = 0
        while ((i &+ Int(((sub).count))) <= Int(((s).count))) {
            if (String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int((i &+ Int(((sub).count))))])) == sub) {
                return i
            }
            i = Int((i &+ 1))
        }
        return -1
    }
    func pad10(_ s: String) -> String {
        var str: String = s
        while (Int(((str).count)) < 10) {
            str = ((" " + str) as! String)
        }
        return str
    }
    func trimRightStr(_ s: String) -> String {
        var end: Int = Int(((s).count))
        while ((end > 0) && (String(describing: String(Array(String(describing: (s as! String)))[Int((end &- 1))..<(end as! Int)])) == " ")) {
            end = Int((end &- 1))
        }
        return String(describing: String(Array(String(describing: (s as! String)))[0..<(end as! Int)]))
    }
    func main() {
        var res: [Int] = ([] as! [Int])
        var count: Int = 0
        var k: Int = (11 &* 11)
        while (count < 20) {
            if ((((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0)) {
                k = Int((k &+ 2))
                continue
            }
            let factors: [Int] = (primeFactors((k as! Int)) as! [Int])
            if (Int(((factors).count)) > 1) {
                let s = _p(k)
                var includesAll: Bool = true
                var prev: Int = -1
                for f in factors {
                    if (f == prev) {
                        continue
                    }
                    let fs = _p(f)
                    if (Int((String(describing: (s as! String)).range(of: String(describing: (fs as! String)))?.lowerBound.utf16Offset(in: String(describing: (s as! String))) ?? -1)) == Int(-1)) {
                        includesAll = false
                        break
                    }
                    prev = (f as! Int)
                }
                if includesAll {
                    res = (_append(res, k) as! [Int])
                    count = Int((count &+ 1))
                }
            }
            k = Int((k &+ 2))
        }
        var line: String = ""
        for e in (Array(res[0..<10]) as! [Int]) {
            line = (((line + String(describing: pad10(String(describing: commatize((e as! Int)))))) + " ") as! String)
        }
        print(_p(String(describing: trimRightStr((line as! String)))))
        line = ""
        for e in (Array(res[10..<20]) as! [Int]) {
            line = (((line + String(describing: pad10(String(describing: commatize((e as! Int)))))) + " ") as! String)
        }
        print(_p(String(describing: trimRightStr((line as! String)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
