// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:59 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var facts: [Int] = ([1] as! [Int])
    var n: Int = 1
    while (n < 12) {
        facts = (_append(facts, ((facts[(n - 1)] as! Int) * n)) as! [Int])
        n = Int((n + 1))
    }
    for b in 9..<13 {
        print(_p((("The factorions for base " + _p(b)) + " are:")))
        var line: String = ""
        var i: Int = 1
        while (i < 1500000) {
            var m: Int = i
            var sum: Int = 0
            while (m > 0) {
                let d = (m % b)
                sum = Int((sum + (facts[d] as! Int)))
                m = Int((m / b))
            }
            if (sum == i) {
                line = String(describing: ((line + _p(i)) + " "))
            }
            i = Int((i + 1))
        }
        print(_p(line))
        print(_p(""))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
