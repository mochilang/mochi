// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:23:49 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func getDivisors(_ n: Int) -> [Int] {
    var divs: [Int] = ([1, n] as! [Int])
    var i: Int = 2
    while ((i &* i) <= n) {
        if ((n % i) == 0) {
            let j = Int((n / i))
            divs = (_append(divs, i) as! [Int])
            if (i != j) {
                divs = (_append(divs, j) as! [Int])
            }
        }
        i = Int((i &+ 1))
    }
    return divs
}
func sum(_ xs: [Int]) -> Int {
    var s: Int = 0
    for x in xs {
        s = Int((s &+ x))
    }
    return s
}
func isPartSum(_ divs: [Int], _ target: Int) -> Bool {
    var possible: [Bool] = ([] as! [Bool])
    var i: Int = 0
    while (i <= target) {
        possible = (_append(possible, false) as! [Bool])
        i = Int((i &+ 1))
    }
    possible[0] = true
    for v in divs {
        var s: Int = target
        while (s >= v) {
            if (possible[(s &- v)] as! Bool) {
                possible[s] = true
            }
            s = Int((s &- 1))
        }
    }
    return (possible[target] as! Bool)
}
func isZumkeller(_ n: Int) -> Bool {
    let divs: [Int] = (getDivisors((n as! Int)) as! [Int])
    let s = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
    if ((s % 2) == 1) {
        return false
    }
    if ((n % 2) == 1) {
        let abundance = (s &- (2 &* n))
        return ((abundance > 0) && ((abundance % 2) == 0))
    }
    return isPartSum((divs as! [Int]), Int((s / 2)))
}
func pad(_ n: Int, _ width: Int) -> String {
    var s: String = String(describing: n)
    while (Int(((s).count)) < width) {
        s = ((" " + s) as! String)
    }
    return s
}
func main() {
    print(_p("The first 220 Zumkeller numbers are:"))
    var count: Int = 0
    var line: String = ""
    var i: Int = 2
    while (count < 220) {
        if isZumkeller((i as! Int)) {
            line = (((line + String(describing: pad((i as! Int), 3))) + " ") as! String)
            count = Int((count &+ 1))
            if ((count % 20) == 0) {
                print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
                line = ""
            }
        }
        i = Int((i &+ 1))
    }
    print(_p("\nThe first 40 odd Zumkeller numbers are:"))
    count = 0
    line = ""
    i = 3
    while (count < 40) {
        if isZumkeller((i as! Int)) {
            line = (((line + String(describing: pad((i as! Int), 5))) + " ") as! String)
            count = Int((count &+ 1))
            if ((count % 10) == 0) {
                print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
                line = ""
            }
        }
        i = Int((i &+ 2))
    }
    print(_p("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:"))
    count = 0
    line = ""
    i = 3
    while (count < 40) {
        if (((i % 10) != 5) && isZumkeller((i as! Int))) {
            line = (((line + String(describing: pad((i as! Int), 7))) + " ") as! String)
            count = Int((count &+ 1))
            if ((count % 8) == 0) {
                print(_p(String(describing: String(Array(String(describing: (line as! String)))[0..<Int((Int(((line).count)) &- 1))]))))
                line = ""
            }
        }
        i = Int((i &+ 2))
    }
}
_ = main()
