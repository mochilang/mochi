// Generated by Mochi transpiler v0.10.55 on 2025-08-02 21:12:33 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
let nPts = 100
let rMin = 10
let rMax = 15
let span = ((rMax &+ 1) &+ rMax)
var poss: [[Int]] = ([] as! [[Int]])
let min2 = (rMin &* rMin)
let max2 = (rMax &* rMax)
var y: Int = -rMax
while (y <= rMax) {
    var x: Int = -rMax
    while (x <= rMax) {
        let r2 = ((x &* x) &+ (y &* y))
        if ((r2 >= min2) && (r2 <= max2)) {
            poss = (_append(poss, ([x, y] as! [Int])) as! [[Int]])
        }
        x = Int((x &+ 1))
    }
    y = Int((y &+ 1))
}
print(_p((String(describing: Int(((poss).count))) + " possible points")))
var rows: [[String]] = ([] as! [[String]])
var r: Int = 0
while (r < span) {
    var row: [String] = ([] as! [String])
    var c: Int = 0
    while (c < (span &* 2)) {
        row = (_append(row, " ") as! [String])
        c = Int((c &+ 1))
    }
    rows = (_append(rows, row) as! [[String]])
    r = Int((r &+ 1))
}
var u: Int = 0
var seen: [String: Bool] = ([:] as! [String: Bool])
var n: Int = 0
while (n < nPts) {
    var i: Int = (Int(_now()) % Int(((poss).count)))
    let x = (poss[i][0] as! Int)
    let yy = (poss[i][1] as! Int)
    let row = (yy &+ rMax)
    let col = (Int((x &+ rMax)) &* 2)
    rows[row][col] = "*"
    let key = ((String(describing: row) + ",") + String(describing: col))
    if !(seen[String(String(describing: key))] ?? false) {
        seen[String(String(describing: key))] = true
        u = Int((u &+ 1))
    }
    n = Int((n &+ 1))
}
var i2: Int = 0
while (i2 < span) {
    var line: String = ""
    var j: Int = 0
    while (j < (span &* 2)) {
        line = ((line + (rows[i2][j] as! String)) as! String)
        j = Int((j &+ 1))
    }
    print(_p(line))
    i2 = Int((i2 &+ 1))
}
print(_p((String(describing: u) + " unique points")))
