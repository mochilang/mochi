// Generated by Mochi transpiler v0.10.56 on 2025-08-04 08:23:20 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
struct Window: Codable {
    var x: Int
    var y: Int
    var w: Int
    var h: Int
    var maximized: Bool
    var iconified: Bool
    var visible: Bool
    var shifted: Bool
}
func showState(_ w: Window, _ label: String) {
    print(_p(((((((((((((((label + ": pos=(") + String(describing: w.x)) + ",") + String(describing: w.y)) + ") size=(") + String(describing: w.w)) + "x") + String(describing: w.h)) + ") max=") + String(describing: w.maximized)) + " icon=") + String(describing: w.iconified)) + " visible=") + String(describing: w.visible))))
}
func maximize(_ w: inout Window) -> Window {
    w.maximized = true
    w.w = 800
    w.h = 600
    return w
}
func unmaximize(_ w: inout Window) -> Window {
    w.maximized = false
    w.w = 640
    w.h = 480
    return w
}
func iconify(_ w: inout Window) -> Window {
    w.iconified = true
    w.visible = false
    return w
}
func deiconify(_ w: inout Window) -> Window {
    w.iconified = false
    w.visible = true
    return w
}
func hide(_ w: inout Window) -> Window {
    w.visible = false
    return w
}
func showWindow(_ w: inout Window) -> Window {
    w.visible = true
    return w
}
func move(_ w: inout Window) -> Window {
    if w.shifted {
        w.x = Int((w.x &- 10))
        w.y = Int((w.y &- 10))
    } else {
        w.x = Int((w.x &+ 10))
        w.y = Int((w.y &+ 10))
    }
    w.shifted = ((!w.shifted) as! Bool)
    return w
}
func main() {
    var win: Window = Window(x: 100, y: 100, w: 640, h: 480, maximized: false, iconified: false, visible: true, shifted: false)
    _ = showState((win as! Window), "Start")
    win = (maximize(&win) as! Window)
    _ = showState((win as! Window), "Maximize")
    win = (unmaximize(&win) as! Window)
    _ = showState((win as! Window), "Unmaximize")
    win = (iconify(&win) as! Window)
    _ = showState((win as! Window), "Iconify")
    win = (deiconify(&win) as! Window)
    _ = showState((win as! Window), "Deiconify")
    win = (hide(&win) as! Window)
    _ = showState((win as! Window), "Hide")
    win = (showWindow(&win) as! Window)
    _ = showState((win as! Window), "Show")
    win = (move(&win) as! Window)
    _ = showState((win as! Window), "Move")
}
_ = main()
