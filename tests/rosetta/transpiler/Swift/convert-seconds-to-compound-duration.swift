// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:46:18 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func timeStr(_ sec: Int) -> String {
        var sec = sec
        var wks: Int = (sec / 604800)
        sec = Int((sec % 604800))
        var ds: Int = (sec / 86400)
        sec = Int((sec % 86400))
        var hrs: Int = (sec / 3600)
        sec = Int((sec % 3600))
        var mins: Int = (sec / 60)
        sec = Int((sec % 60))
        var res: String = ""
        var comma: Bool = false
        if (wks != 0) {
            res = (((res + _p(wks)) + " wk") as! String)
            comma = true
        }
        if (ds != 0) {
            if comma {
                res = ((res + ", ") as! String)
            }
            res = (((res + _p(ds)) + " d") as! String)
            comma = true
        }
        if (hrs != 0) {
            if comma {
                res = ((res + ", ") as! String)
            }
            res = (((res + _p(hrs)) + " hr") as! String)
            comma = true
        }
        if (mins != 0) {
            if comma {
                res = ((res + ", ") as! String)
            }
            res = (((res + _p(mins)) + " min") as! String)
            comma = true
        }
        if (sec != 0) {
            if comma {
                res = ((res + ", ") as! String)
            }
            res = (((res + _p(sec)) + " sec") as! String)
        }
        return res
    }
    print(_p(String(describing: timeStr(7259))))
    print(_p(String(describing: timeStr(86400))))
    print(_p(String(describing: timeStr(6000000))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
