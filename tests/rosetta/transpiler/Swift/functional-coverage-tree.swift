// Generated by Mochi transpiler v0.10.56 on 2025-08-03 22:52:12 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _repeat(_ s: String, _ n: Int) -> String {
    if n <= 0 { return "" }
    return String(repeating: s, count: n)
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func pow10(_ n: Int) -> Double {
    var r: Double = 1.0
    var i: Int = 0
    while (i < n) {
        r = Double((r * 10.0))
        i = Int((i &+ 1))
    }
    return r
}
func formatFloat(_ f: Double, _ prec: Int) -> String {
    let scale = Double(pow10((prec as! Int)))
    let scaled = (Double((f * scale)) + 0.5)
    var n: Int = Int(scaled)
    var digits: String = String(describing: n)
    while (Int(((digits).count)) <= prec) {
        digits = (("0" + digits) as! String)
    }
    let intPart = String(describing: String(Array(String(describing: (digits as! String)))[0..<Int((Int(((digits).count)) &- prec))]))
    let fracPart = String(describing: String(Array(String(describing: (digits as! String)))[Int((Int(((digits).count)) &- prec))..<Int(((digits).count))]))
    return ((intPart + ".") + fracPart)
}
func padLeft(_ s: String, _ w: Int) -> String {
    var res: String = ""
    var n: Int = (w &- Int(((s).count)))
    while (n > 0) {
        res = ((res + " ") as! String)
        n = Int((n &- 1))
    }
    return (res + s)
}
func `repeat`(_ ch: String, _ n: Int) -> String {
    var s: String = ""
    var i: Int = 0
    while (i < n) {
        s = ((s + ch) as! String)
        i = Int((i &+ 1))
    }
    return s
}
func toFloat(_ i: Int) -> Double {
    return Double(i)
}
func newNode(_ name: String, _ weight: Int, _ coverage: Double) -> [String: Any?] {
    return (["name": name, "weight": weight, "coverage": coverage, "children": [] as [Any]] as! [String: Any?])
}
func addChildren(_ n: inout [String: Any?], _ nodes: [[String: Any?]]) {
    var cs: [Any?] = (n[String("children")] as! [Any?])
    for _item in nodes as! [[String: Any]] {
        let node = _item as! [String: Any]
        cs = ((_append(cs, node) as! [[String: Any?]]) as! [Any?])
    }
    n[String("children")] = cs
}
func setCoverage(_ n: inout [String: Any?], _ value: Double) {
    n[String("coverage")] = value
}
func computeCoverage(_ n: [String: Any?]) -> Double {
    var cs: [Any?] = (n[String("children")] as! [Any?])
    if (Int(((cs).count)) == 0) {
        return Double(n[String("coverage")])
    }
    var v1: Double = 0.0
    var v2: Int = 0
    for node in cs {
        let m: [String: Any?] = (node as! [String: Any?])
        let c = Double(computeCoverage((m as! [String: Any?])))
        v1 = Double((v1 + (Double(toFloat((m[String("weight")] as! Int))) * c)))
        v2 = Int((v2 &+ (m[String("weight")] as! Int)))
    }
    return (v1 / Double(toFloat((v2 as! Int))))
}
func spaces(_ n: Int) -> String {
    return String(describing: _repeat(" ", n))
}
func show(_ n: [String: Any?], _ level: Int) {
    var indent: Int = (level &* 4)
    let name = (n[String("name")] as! String)
    var nl: Int = (Int(((name).count)) &+ indent)
    var line: String = (String(describing: spaces((indent as! Int))) + name)
    line = (((line + String(describing: spaces(Int((32 &- nl))))) + "|  ") as! String)
    line = (((line + String(describing: padLeft(String(describing: (n[String("weight")] as! Int)), 3))) + "   | ") as! String)
    line = (((line + String(describing: formatFloat(Double(computeCoverage((n as! [String: Any?]))), 6))) + " |") as! String)
    print(_p(line))
    let cs: [Any?] = (n[String("children")] as! [Any?])
    for child in cs {
        _ = show((child as! [String: Any?]), Int((level &+ 1)))
    }
}
var house1: [String: Any?] = (newNode("house1", 40, 0.0) as! [String: Any?])
var house2: [String: Any?] = (newNode("house2", 60, 0.0) as! [String: Any?])
var h1_bedrooms: [String: Any?] = (newNode("bedrooms", 1, 0.25) as! [String: Any?])
var h1_bathrooms: [String: Any?] = (newNode("bathrooms", 1, 0.0) as! [String: Any?])
var h1_attic: [String: Any?] = (newNode("attic", 1, 0.75) as! [String: Any?])
var h1_kitchen: [String: Any?] = (newNode("kitchen", 1, 0.1) as! [String: Any?])
var h1_living_rooms: [String: Any?] = (newNode("living_rooms", 1, 0.0) as! [String: Any?])
var h1_basement: [String: Any?] = (newNode("basement", 1, 0.0) as! [String: Any?])
var h1_garage: [String: Any?] = (newNode("garage", 1, 0.0) as! [String: Any?])
var h1_garden: [String: Any?] = (newNode("garden", 1, 0.8) as! [String: Any?])
var h2_upstairs: [String: Any?] = (newNode("upstairs", 1, 0.0) as! [String: Any?])
var h2_groundfloor: [String: Any?] = (newNode("groundfloor", 1, 0.0) as! [String: Any?])
var h2_basement: [String: Any?] = (newNode("basement", 1, 0.0) as! [String: Any?])
var h1_bathroom1: [String: Any?] = (newNode("bathroom1", 1, 0.5) as! [String: Any?])
var h1_bathroom2: [String: Any?] = (newNode("bathroom2", 1, 0.0) as! [String: Any?])
var h1_outside: [String: Any?] = (newNode("outside_lavatory", 1, 1.0) as! [String: Any?])
var h1_lounge: [String: Any?] = (newNode("lounge", 1, 0.0) as! [String: Any?])
var h1_dining: [String: Any?] = (newNode("dining_room", 1, 0.0) as! [String: Any?])
var h1_conservatory: [String: Any?] = (newNode("conservatory", 1, 0.0) as! [String: Any?])
var h1_playroom: [String: Any?] = (newNode("playroom", 1, 1.0) as! [String: Any?])
var h2_bedrooms: [String: Any?] = (newNode("bedrooms", 1, 0.0) as! [String: Any?])
var h2_bathroom: [String: Any?] = (newNode("bathroom", 1, 0.0) as! [String: Any?])
var h2_toilet: [String: Any?] = (newNode("toilet", 1, 0.0) as! [String: Any?])
var h2_attics: [String: Any?] = (newNode("attics", 1, 0.6) as! [String: Any?])
var h2_kitchen: [String: Any?] = (newNode("kitchen", 1, 0.0) as! [String: Any?])
var h2_living_rooms: [String: Any?] = (newNode("living_rooms", 1, 0.0) as! [String: Any?])
var h2_wet_room: [String: Any?] = (newNode("wet_room_&_toilet", 1, 0.0) as! [String: Any?])
var h2_garage: [String: Any?] = (newNode("garage", 1, 0.0) as! [String: Any?])
var h2_garden: [String: Any?] = (newNode("garden", 1, 0.9) as! [String: Any?])
var h2_hot_tub: [String: Any?] = (newNode("hot_tub_suite", 1, 1.0) as! [String: Any?])
var h2_cellars: [String: Any?] = (newNode("cellars", 1, 1.0) as! [String: Any?])
var h2_wine_cellar: [String: Any?] = (newNode("wine_cellar", 1, 1.0) as! [String: Any?])
var h2_cinema: [String: Any?] = (newNode("cinema", 1, 0.75) as! [String: Any?])
var h2_suite1: [String: Any?] = (newNode("suite_1", 1, 0.0) as! [String: Any?])
var h2_suite2: [String: Any?] = (newNode("suite_2", 1, 0.0) as! [String: Any?])
var h2_bedroom3: [String: Any?] = (newNode("bedroom_3", 1, 0.0) as! [String: Any?])
var h2_bedroom4: [String: Any?] = (newNode("bedroom_4", 1, 0.0) as! [String: Any?])
var h2_lounge: [String: Any?] = (newNode("lounge", 1, 0.0) as! [String: Any?])
var h2_dining: [String: Any?] = (newNode("dining_room", 1, 0.0) as! [String: Any?])
var h2_conservatory: [String: Any?] = (newNode("conservatory", 1, 0.0) as! [String: Any?])
var h2_playroom: [String: Any?] = (newNode("playroom", 1, 0.0) as! [String: Any?])
func main() {
    var cleaning: [String: Any?] = (newNode("cleaning", 1, 0.0) as! [String: Any?])
    _ = addChildren(&h1_bathrooms, ([h1_bathroom1, h1_bathroom2, h1_outside] as! [[String: Any?]]))
    _ = addChildren(&h1_living_rooms, ([h1_lounge, h1_dining, h1_conservatory, h1_playroom] as! [[String: Any?]]))
    _ = addChildren(&house1, ([h1_bedrooms, h1_bathrooms, h1_attic, h1_kitchen, h1_living_rooms, h1_basement, h1_garage, h1_garden] as! [[String: Any?]]))
    _ = addChildren(&h2_bedrooms, ([h2_suite1, h2_suite2, h2_bedroom3, h2_bedroom4] as! [[String: Any?]]))
    _ = addChildren(&h2_upstairs, ([h2_bedrooms, h2_bathroom, h2_toilet, h2_attics] as! [[String: Any?]]))
    _ = addChildren(&h2_living_rooms, ([h2_lounge, h2_dining, h2_conservatory, h2_playroom] as! [[String: Any?]]))
    _ = addChildren(&h2_groundfloor, ([h2_kitchen, h2_living_rooms, h2_wet_room, h2_garage, h2_garden, h2_hot_tub] as! [[String: Any?]]))
    _ = addChildren(&h2_basement, ([h2_cellars, h2_wine_cellar, h2_cinema] as! [[String: Any?]]))
    _ = addChildren(&house2, ([h2_upstairs, h2_groundfloor, h2_basement] as! [[String: Any?]]))
    _ = addChildren(&cleaning, ([house1, house2] as! [[String: Any?]]))
    let topCoverage = Double(computeCoverage((cleaning as! [String: Any?])))
    print(_p(("TOP COVERAGE = " + String(describing: formatFloat(Double(topCoverage), 6)))))
    print(_p(""))
    print(_p("NAME HIERARCHY                 | WEIGHT | COVERAGE |"))
    _ = show((cleaning as! [String: Any?]), 0)
    _ = setCoverage(&h2_cinema, 1.0)
    let diff = (Double(computeCoverage((cleaning as! [String: Any?]))) - topCoverage)
    print(_p(""))
    print(_p("If the coverage of the Cinema node were increased from 0.75 to 1"))
    print(_p(((("the top level coverage would increase by " + String(describing: formatFloat(Double(diff), 6))) + " to ") + String(describing: formatFloat(Double((topCoverage + diff)), 6)))))
    _ = setCoverage(&h2_cinema, 0.75)
}
_ = main()
