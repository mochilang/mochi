// Generated by Mochi transpiler v0.10.41 on 2025-07-27 00:58:52 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Colour {
        var R: Int
        var G: Int
        var B: Int
    }
    struct Bitmap {
        var width: Int
        var height: Int
        var pixels: [[Colour]]
    }
    func newBitmap(_ w: Int, _ h: Int, _ c: Colour) -> Bitmap {
        var rows: [[Colour]] = ([] as! [[Colour]])
        var y: Int = 0
        while (y < h) {
            var row: [Colour] = ([] as! [Colour])
            var x: Int = 0
            while (x < w) {
                row = ((row + [c]) as! [Colour])
                x = Int((x + 1))
            }
            rows = ((rows + [row]) as! [[Colour]])
            y = Int((y + 1))
        }
        return (Bitmap(width: w, height: h, pixels: rows) as! Bitmap)
    }
    func setPixel(_ b: inout Bitmap, _ x: Int, _ y: Int, _ c: Colour) {
        var rows: [[Colour]] = b.pixels
        var row: [Colour] = (rows[y] as! [Colour])
        row[x] = (c as! Colour)
        rows[y] = (row as! [Colour])
        b.pixels = (rows as! [[Colour]])
    }
    func fillRect(_ b: inout Bitmap, _ x: Int, _ y: Int, _ w: Int, _ h: Int, _ c: Colour) {
        var yy: Int = y
        while (yy < (y + h)) {
            var xx: Int = x
            while (xx < (x + w)) {
                _ = setPixel(&b, Int(xx), Int(yy), (c as! Colour))
                xx = Int((xx + 1))
            }
            yy = Int((yy + 1))
        }
    }
    func pad(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = String((" " + s))
        }
        return String(s)
    }
    func writePPMP3(_ b: Bitmap) -> String {
        var maxv: Int = 0
        var y: Int = 0
        while (y < b.height) {
            var x: Int = 0
            while (x < b.width) {
                let p = (b.pixels[y][x] as! Colour)
                if (p.R > maxv) {
                    maxv = Int(p.R)
                }
                if (p.G > maxv) {
                    maxv = Int(p.G)
                }
                if (p.B > maxv) {
                    maxv = Int(p.B)
                }
                x = Int((x + 1))
            }
            y = Int((y + 1))
        }
        var out: String = (((((("P3\n# generated from Bitmap.writeppmp3\n" + _p(b.width)) + " ") + _p(b.height)) + "\n") + _p(maxv)) + "\n")
        var numsize: Int = Int(((_p(maxv)).count))
        y = Int((b.height - 1))
        while (y >= 0) {
            var line: String = ""
            var x: Int = 0
            while (x < b.width) {
                let p = (b.pixels[y][x] as! Colour)
                line = String(((((((line + "   ") + String(describing: pad(Int(p.R), Int(numsize)))) + " ") + String(describing: pad(Int(p.G), Int(numsize)))) + " ") + String(describing: pad(Int(p.B), Int(numsize)))))
                x = Int((x + 1))
            }
            out = String((out + line))
            if (y > 0) {
                out = String((out + "\n"))
            } else {
                out = String((out + "\n"))
            }
            y = Int((y - 1))
        }
        return String(out)
    }
    func main() {
        let black = Colour(R: 0, G: 0, B: 0)
        let white = Colour(R: 255, G: 255, B: 255)
        var bm: Bitmap = newBitmap(4, 4, (black as! Colour))
        _ = fillRect(&bm, 1, 0, 1, 2, (white as! Colour))
        _ = setPixel(&bm, 3, 3, (Colour(R: 127, G: 0, B: 63) as! Colour))
        let ppm = String(describing: writePPMP3((bm as! Bitmap)))
        print(_p(ppm))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
