// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:11:28 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func gcd(_ a: Int, _ b: Int) -> Int {
    var x: Int = a
    if (x < 0) {
        x = (-x as! Int)
    }
    var y: Int = b
    if (y < 0) {
        y = (-y as! Int)
    }
    while (y != 0) {
        let t = (x % y)
        x = (y as! Int)
        y = (t as! Int)
    }
    return x
}
func parseRational(_ s: String) -> [String: Int] {
    var intPart: Int = 0
    var fracPart: Int = 0
    var denom: Int = 1
    var afterDot: Bool = false
    var i: Int = 0
    while (i < Int(((s).count))) {
        let ch = String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 1) as! Int)]))
        if (ch == ".") {
            afterDot = true
        } else {
            let d = (Int(_int(ch)) - Int(_int("0")))
            if (!afterDot) {
                intPart = (((intPart * 10) + d) as! Int)
            } else {
                fracPart = (((fracPart * 10) + d) as! Int)
                denom = ((denom * 10) as! Int)
            }
        }
        i = ((i + 1) as! Int)
    }
    var num: Int = ((intPart * denom) + fracPart)
    let g = Int(gcd((num as! Int), (denom as! Int)))
    return (["num": ((num / g) as! Int), "den": ((denom / g) as! Int)] as! [String: Int])
}
func main() {
    let inputs: [String] = ([("0.9054054" as! Any), ("0.518518" as! Any), ("0.75" as! Any)] as! [String])
    for s in inputs {
        let r: [String: Int] = (parseRational((s as! String)) as! [String: Int])
        print(_p(((((s + " = ") + _p(r["num"]!)) + "/") + _p(r["den"]!))))
    }
}
_ = main()
