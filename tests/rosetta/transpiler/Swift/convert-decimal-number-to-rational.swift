// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:46:12 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        if (x < 0) {
            x = Int(-x)
        }
        var y: Int = b
        if (y < 0) {
            y = Int(-y)
        }
        while (y != 0) {
            let t = (x % y)
            x = (y as! Int)
            y = (t as! Int)
        }
        return x
    }
    func parseRational(_ s: String) -> [String: Int] {
        var intPart: Int = 0
        var fracPart: Int = 0
        var denom: Int = 1
        var afterDot: Bool = false
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int((i &+ 1))]))
            if (ch == ".") {
                afterDot = true
            } else {
                let d = (Int(_int(ch)) &- Int(_int("0")))
                if (!afterDot) {
                    intPart = Int(((intPart &* 10) &+ d))
                } else {
                    fracPart = Int(((fracPart &* 10) &+ d))
                    denom = Int((denom &* 10))
                }
            }
            i = Int((i &+ 1))
        }
        var num: Int = ((intPart &* denom) &+ fracPart)
        let g = Int(gcd((num as! Int), (denom as! Int)))
        return (["num": Int((num / g)), "den": Int((denom / g))] as! [String: Int])
    }
    func main() {
        let inputs: [String] = (["0.9054054", "0.518518", "0.75"] as! [String])
        for s in inputs {
            let r: [String: Int] = (parseRational((s as! String)) as! [String: Int])
            print(_p(((((s + " = ") + _p(r[String("num")]!)) + "/") + _p(r[String("den")]!))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
