// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:10 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let PI = 3.141592653589793
    func conv2d(_ img: [[Double]], _ k: [[Double]]) -> [[Double]] {
        let h = Int(((img).count))
        let w = Int((((img[0] as! [Double])).count))
        let n = Int(((k).count))
        let half = (n / 2)
        var out: [[Double]] = ([] as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var row: [Double] = ([] as! [Double])
            var x: Int = 0
            while (x < w) {
                var sum: Double = 0.0
                var j: Int = 0
                while (j < n) {
                    var i: Int = 0
                    while (i < n) {
                        var yy: Int = ((y + j) - half)
                        if (yy < 0) {
                            yy = 0
                        }
                        if (yy >= h) {
                            yy = ((h - 1) as! Int)
                        }
                        var xx: Int = ((x + i) - half)
                        if (xx < 0) {
                            xx = 0
                        }
                        if (xx >= w) {
                            xx = ((w - 1) as! Int)
                        }
                        sum = Double((sum + ((img[yy][xx] as! Double) * (k[j][i] as! Double))))
                        i = ((i + 1) as! Int)
                    }
                    j = ((j + 1) as! Int)
                }
                row = (_append(row, sum) as! [Double])
                x = ((x + 1) as! Int)
            }
            out = (_append(out, row) as! [[Double]])
            y = ((y + 1) as! Int)
        }
        return (out as! [[Double]])
    }
    func gradient(_ img: [[Double]]) -> [[Double]] {
        let hx: [[Double]] = ([(([(-1.0 as! Any), (0.0 as! Any), (1.0 as! Any)] as! [Double]) as! Any), (([(-2.0 as! Any), (0.0 as! Any), (2.0 as! Any)] as! [Double]) as! Any), (([(-1.0 as! Any), (0.0 as! Any), (1.0 as! Any)] as! [Double]) as! Any)] as! [[Double]])
        let hy: [[Double]] = ([(([(1.0 as! Any), (2.0 as! Any), (1.0 as! Any)] as! [Double]) as! Any), (([(0.0 as! Any), (0.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(-1.0 as! Any), (-2.0 as! Any), (-1.0 as! Any)] as! [Double]) as! Any)] as! [[Double]])
        var gx: [[Double]] = (conv2d((img as! [[Double]]), (hx as! [[Double]])) as! [[Double]])
        var gy: [[Double]] = (conv2d((img as! [[Double]]), (hy as! [[Double]])) as! [[Double]])
        var h: Int = Int(((img).count))
        var w: Int = Int((((img[0] as! [Double])).count))
        var out: [[Double]] = ([] as! [[Double]])
        var y: Int = 0
        while (y < h) {
            var row: [Double] = ([] as! [Double])
            var x: Int = 0
            while (x < w) {
                let g = (((gx[y][x] as! Double) * (gx[y][x] as! Double)) + ((gy[y][x] as! Double) * (gy[y][x] as! Double)))
                row = (_append(row, g) as! [Double])
                x = ((x + 1) as! Int)
            }
            out = (_append(out, row) as! [[Double]])
            y = ((y + 1) as! Int)
        }
        return (out as! [[Double]])
    }
    func threshold(_ g: [[Double]], _ t: Double) -> [[Int]] {
        var h: Int = Int(((g).count))
        var w: Int = Int((((g[0] as! [Double])).count))
        var out: [[Int]] = ([] as! [[Int]])
        var y: Int = 0
        while (y < h) {
            var row: [Int] = ([] as! [Int])
            var x: Int = 0
            while (x < w) {
                if ((g[y][x] as! Double) >= t) {
                    row = (_append(row, 1) as! [Int])
                } else {
                    row = (_append(row, 0) as! [Int])
                }
                x = ((x + 1) as! Int)
            }
            out = (_append(out, row) as! [[Int]])
            y = ((y + 1) as! Int)
        }
        return (out as! [[Int]])
    }
    func printMatrix(_ m: [[Int]]) {
        var y: Int = 0
        while (y < Int(((m).count))) {
            var line: String = ""
            var x: Int = 0
            while (x < Int((((m[0] as! [Int])).count))) {
                line = ((line + _p((m[y][x] as! Int))) as! String)
                if (x < (Int((((m[0] as! [Int])).count)) - 1)) {
                    line = ((line + " ") as! String)
                }
                x = ((x + 1) as! Int)
            }
            print(_p(line))
            y = ((y + 1) as! Int)
        }
    }
    func main() {
        let img: [[Double]] = ([(([(0.0 as! Any), (0.0 as! Any), (0.0 as! Any), (0.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(0.0 as! Any), (255.0 as! Any), (255.0 as! Any), (255.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(0.0 as! Any), (255.0 as! Any), (255.0 as! Any), (255.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(0.0 as! Any), (255.0 as! Any), (255.0 as! Any), (255.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any), (([(0.0 as! Any), (0.0 as! Any), (0.0 as! Any), (0.0 as! Any), (0.0 as! Any)] as! [Double]) as! Any)] as! [[Double]])
        let g: [[Double]] = (gradient((img as! [[Double]])) as! [[Double]])
        let edges: [[Int]] = (threshold((g as! [[Double]]), Double((1020.0 * 1020.0))) as! [[Int]])
        _ = printMatrix((edges as! [[Int]]))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
