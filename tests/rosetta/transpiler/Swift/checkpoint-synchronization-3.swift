// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:52 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func lower(_ ch: String) -> String {
        let up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let low = "abcdefghijklmnopqrstuvwxyz"
        var i: Int = 0
        while (i < Int(((up).count))) {
            if (ch == String(describing: String(Array(String(describing: (up as! String)))[(i as! Int)..<((i + 1) as! Int)]))) {
                return String(describing: String(Array(String(describing: (low as! String)))[(i as! Int)..<((i + 1) as! Int)]))
            }
            i = ((i + 1) as! Int)
        }
        return (ch as! String)
    }
    var partList: [String] = ([("A" as! Any), ("B" as! Any), ("C" as! Any), ("D" as! Any)] as! [String])
    var nAssemblies: Int = 3
    for p in partList {
        print(_p((p + " worker running")))
    }
    for cycle in 1..<Int((nAssemblies + 1)) {
        print(_p(("begin assembly cycle " + _p(cycle))))
        var a: String = ""
        for p in partList {
            print(_p((p + " worker begins part")))
            print(_p(((p + " worker completed ") + String(describing: ((p as! String).lowercased())))))
            a = ((a + String(describing: ((p as! String).lowercased()))) as! String)
        }
        print(_p((((a + " assembled.  cycle ") + _p(cycle)) + " complete")))
    }
    for p in partList {
        print(_p((p + " worker stopped")))
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
