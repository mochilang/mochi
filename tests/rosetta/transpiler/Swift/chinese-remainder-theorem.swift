// Generated by Mochi transpiler v0.10.47 on 2025-07-28 11:46:04 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func egcd(_ a: Int, _ b: Int) -> [Int] {
        if (a == 0) {
            return ([b, 0, 1] as! [Int])
        }
        let res = (egcd(Int((b % a)), Int(a)) as! [Int])
        let g = (res[0] as! Int)
        let x1 = (res[1] as! Int)
        let y1 = (res[2] as! Int)
        return ([g, (y1 - (Int((b / a)) * x1)), x1] as! [Int])
    }
    func modInv(_ a: Int, _ m: Int) -> Int {
        let r = (egcd(Int(a), Int(m)) as! [Int])
        if ((r[0] as! Int) != 1) {
            return 0
        }
        let x = (r[1] as! Int)
        if (x < 0) {
            return Int((x + m))
        }
        return Int(x)
    }
    func crt(_ a: [Int], _ n: [Int]) -> Int {
        var prod: Int = 1
        var i: Int = 0
        while (i < Int(((n).count))) {
            prod = Int((prod * (n[i] as! Int)))
            i = Int((i + 1))
        }
        var x: Int = 0
        i = 0
        while (i < Int(((n).count))) {
            let ni = (n[i] as! Int)
            let ai = (a[i] as! Int)
            let p = (prod / ni)
            let inv = Int(modInv(Int((p % ni)), Int(ni)))
            x = Int((x + ((ai * inv) * p)))
            i = Int((i + 1))
        }
        return Int((x % prod))
    }
    let n = ([3, 5, 7] as! [Int])
    let a = ([2, 3, 2] as! [Int])
    let res = Int(crt((a as! [Int]), (n as! [Int])))
    print(_p((_p(res) + " <nil>")))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
