// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:57:22 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func concatInts(_ a: [Int], _ b: [Int]) -> [Int] {
        var out: [Int] = ([] as! [Int])
        for v in a {
            out = ((out + [v]) as! [Int])
        }
        for v in b {
            out = ((out + [v]) as! [Int])
        }
        return (out as! [Int])
    }
    func concatAny(_ a: [Any], _ b: [Any]) -> [Any] {
        var out: [Any] = []
        for v in a {
            out = ((out + [v]) as! [Any])
        }
        for v in b {
            out = ((out + [v]) as! [Any])
        }
        return (out as! [Any])
    }
    var a = ([1, 2, 3] as! [Int])
    var b = ([7, 12, 60] as! [Int])
    print(String(describing: (concatInts((a as! [Int]), (b as! [Int])) as! [Int])))
    var i: [Any] = (([1, 2, 3] as! [Int]) as! [Any])
    var j: [Any] = ((["Crosby", "Stills", "Nash", "Young"] as! [String]) as! [Any])
    print(String(describing: (concatAny((i as! [Any]), (j as! [Any])) as! [Any])))
    var l = ([1, 2, 3] as! [Int])
    var m = ([7, 12, 60] as! [Int])
    print(String(describing: (concatInts((l as! [Int]), (m as! [Int])) as! [Int])))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
