// Generated by Mochi transpiler v0.10.40 on 2025-07-26 09:40:22 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func abs(_ x: Double) -> Double {
        if (x < 0.0) {
            return Double(-x)
        }
        return Double(x)
    }
    func sqrtApprox(_ x: Double) -> Double {
        var guess = x
        var i = 0
        while (i < 20) {
            guess = Double((Double((guess + (x / guess))) / 2.0))
            i = Int((i + 1))
        }
        return Double(guess)
    }
    func agmPi() -> Double {
        var a = 1.0
        var g = (1.0 / Double(sqrtApprox(2.0)))
        var sum = 0.0
        var pow = 2.0
        while (Double(abs(Double((a - g)))) > 0.000000000000001) {
            var t = (Double((a + g)) / 2.0)
            var u = Double(sqrtApprox(Double((a * g))))
            a = Double(t)
            g = Double(u)
            pow = Double((pow * 2.0))
            var diff = ((a * a) - (g * g))
            sum = Double((sum + (diff * pow)))
        }
        var pi = (((4.0 * a) * a) / Double((1.0 - sum)))
        return Double(pi)
    }
    func main() {
        print(String(describing: Double(agmPi())))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
