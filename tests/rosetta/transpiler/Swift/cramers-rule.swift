// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:37:10 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func det(_ m: [[Double]]) -> Double {
    let n = Int(((m).count))
    if (n == 1) {
        return Double(m[0][0])
    }
    var total: Double = 0.0
    var sign: Double = 1.0
    var c: Int = 0
    while (c < n) {
        var sub: [[Double]] = ([] as! [[Double]])
        var r: Int = 1
        while (r < n) {
            var row: [Double] = ([] as! [Double])
            var cc: Int = 0
            while (cc < n) {
                if (cc != c) {
                    row = (_append(row, Double(m[r][cc])) as! [Double])
                }
                cc = Int((cc + 1))
            }
            sub = (_append(sub, row) as! [[Double]])
            r = Int((r + 1))
        }
        total = Double((total + ((sign * Double(m[0][c])) * Double(det((sub as! [[Double]]))))))
        sign = Double((sign * Double(-1.0)))
        c = Int((c + 1))
    }
    return Double(total)
}
func replaceCol(_ m: [[Double]], _ col: Int, _ v: [Double]) -> [[Double]] {
    var res: [[Double]] = ([] as! [[Double]])
    var r: Int = 0
    while (r < Int(((m).count))) {
        var row: [Double] = ([] as! [Double])
        var c: Int = 0
        while (c < Int((((m[r] as! [Double])).count))) {
            if (c == col) {
                row = (_append(row, Double(v[r])) as! [Double])
            } else {
                row = (_append(row, Double(m[r][c])) as! [Double])
            }
            c = Int((c + 1))
        }
        res = (_append(res, row) as! [[Double]])
        r = Int((r + 1))
    }
    return (res as! [[Double]])
}
let m = ([([2.0, -1.0, 5.0, 1.0] as! [Double]), ([3.0, 2.0, 2.0, -6.0] as! [Double]), ([1.0, 3.0, 3.0, -1.0] as! [Double]), ([5.0, -2.0, -3.0, 3.0] as! [Double])] as! [[Double]])
let v = ([-3.0, -32.0, -47.0, 49.0] as! [Double])
let d = Double(det((m as! [[Double]])))
var x: [Double] = ([] as! [Double])
var i: Int = 0
while (i < Int(((v).count))) {
    let mc = (replaceCol((m as! [[Double]]), Int(i), (v as! [Double])) as! [[Double]])
    x = (_append(x, (Double(det((mc as! [[Double]]))) / d)) as! [Double])
    i = Int((i + 1))
}
var s: String = "["
var j: Int = 0
while (j < Int(((x).count))) {
    s = String(describing: (s + _p(Double(x[j]))))
    if (j < (Int(((x).count)) - 1)) {
        s = String(describing: (s + " "))
    }
    j = Int((j + 1))
}
s = String(describing: (s + "]"))
print(_p(s))
