// Generated by Mochi transpiler v0.10.38 on 2025-07-24 13:11:12 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var s = s
    var words: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        let ch = String(String(Array(String(s))[Int(i)..<((Int(i) + 1) as! Int)]))
        if (((String(ch) == " ") || (String(ch) == "\n")) || (String(ch) == "\t")) {
            if (Int(((String(cur)).count)) > 0) {
                words = (((words as! [String]) + [String(cur)]) as! [String])
                cur = ""
            }
        } else {
            cur = ((String(cur) + String(ch)) as! String)
        }
        i = ((Int(i) + 1) as! Int)
    }
    if (Int(((String(cur)).count)) > 0) {
        words = (((words as! [String]) + [String(cur)]) as! [String])
    }
    return (words as! [String])
}
func padRight(_ s: String, _ width: Int) -> String {
    var s = s
    var width = width
    var out = String(s)
    var i = Int(((String(s)).count))
    while (Int(i) < Int(width)) {
        out = ((String(out) + " ") as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(out)
}
func join(_ xs: [String], _ sep: String) -> String {
    var xs = xs
    var sep = sep
    var res = ""
    var i = 0
    while (Int(i) < Int((((xs as! [String])).count))) {
        if (Int(i) > 0) {
            res = ((String(res) + String(sep)) as! String)
        }
        res = ((String(res) + String(xs[Int(i)])) as! String)
        i = ((Int(i) + 1) as! Int)
    }
    return String(res)
}
func parseIntStr(_ str: String) -> Int {
    var str = str
    var i = 0
    var neg = false
    if ((Int(((String(str)).count)) > 0) && (String(String(Array(str)[0..<1])) == "-")) {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9] as [String: Any]
    while (Int(i) < Int(((String(str)).count))) {
        n = (((Int(n) * 10) + (digits[String(String(Array(str)[Int(i)..<(Int(i) + 1)]))] as! Int)) as! Int)
        i = ((Int(i) + 1) as! Int)
    }
    if (neg as! Bool) {
        n = (-Int(n) as! Int)
    }
    return Int(n)
}
func isDigits(_ s: String) -> Bool {
    var s = s
    if (Int(((String(s)).count)) == 0) {
        return false
    }
    var i = 0
    while (Int(i) < Int(((String(s)).count))) {
        let ch = String(String(Array(String(s))[Int(i)..<((Int(i) + 1) as! Int)]))
        if ((String(ch) < "0") || (String(ch) > "9")) {
            return false
        }
        i = ((Int(i) + 1) as! Int)
    }
    return true
}
func readTable(_ table: String) -> [String: Any] {
    var table = table
    let toks = (fields(String(table)) as! [String])
    var cmds: [String] = ([] as! [String])
    var mins: [Int] = ([] as! [Int])
    var i = 0
    while (Int(i) < Int((((toks as! [String])).count))) {
        let cmd = String(toks[Int(i)])
        var minlen = Int(((String(cmd)).count))
        i = ((Int(i) + 1) as! Int)
        if ((Int(i) < Int((((toks as! [String])).count))) && Bool(isDigits(String(toks[Int(i)])))) {
            let num = Int(parseIntStr(String(toks[Int(i)])))
            if ((Int(num) >= 1) && (Int(num) < Int(((String(cmd)).count)))) {
                minlen = Int(num)
                i = ((Int(i) + 1) as! Int)
            }
        }
        cmds = (((cmds as! [String]) + [String(cmd)]) as! [String])
        mins = (((mins as! [Int]) + [Int(minlen)]) as! [Int])
    }
    return (["commands": (cmds as! [String]), "mins": (mins as! [Int])] as [String: Any] as! [String: Any])
}
func validate(_ commands: [String], _ mins: [Int], _ words: [String]) -> [String] {
    var commands = commands
    var mins = mins
    var words = words
    var results: [String] = ([] as! [String])
    var wi = 0
    while (Int(wi) < Int((((words as! [String])).count))) {
        let w = String(words[Int(wi)])
        var found = false
        let wlen = Int(((String(w)).count))
        var ci = 0
        while (Int(ci) < Int((((commands as! [String])).count))) {
            let cmd = String(commands[Int(ci)])
            if (((Int(mins[Int(ci)]) != 0) && (Int(wlen) >= Int(mins[Int(ci)]))) && (Int(wlen) <= Int(((String(cmd)).count)))) {
                let c = String((String(cmd).uppercased()))
                let ww = String((String(w).uppercased()))
                if (String(String(Array(String(c))[0..<Int(wlen)])) == String(ww)) {
                    results = (((results as! [String]) + [String(c)]) as! [String])
                    found = true
                    break
                }
            }
            ci = ((Int(ci) + 1) as! Int)
        }
        if (!(found as! Bool)) {
            results = (((results as! [String]) + ["*error*"]) as! [String])
        }
        wi = ((Int(wi) + 1) as! Int)
    }
    return (results as! [String])
}
func main() {
    let table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    let tbl = (readTable(String(table)) as! [String: Any])
    let commands = ((tbl as! [String: Any])["commands"]! as! [String])
    let mins = ((tbl as! [String: Any])["mins"]! as! [Int])
    let words = (fields(String(sentence)) as! [String])
    let results = (validate((commands as! [String]), (mins as! [Int]), (words as! [String])) as! [String])
    var out1 = "user words:"
    var k = 0
    while (Int(k) < Int((((words as! [String])).count))) {
        out1 = ((String(out1) + " ") as! String)
        if (Int(k) < (Int((((words as! [String])).count)) - 1)) {
            out1 = ((String(out1) + String(padRight(String(words[Int(k)]), Int(((String(results[Int(k)])).count))))) as! String)
        } else {
            out1 = ((String(out1) + String(words[Int(k)])) as! String)
        }
        k = ((Int(k) + 1) as! Int)
    }
    print(String(out1))
    print(("full words: " + String(join((results as! [String]), " "))))
}
main()
