// Generated by Mochi transpiler v0.10.39 on 2025-07-24 15:19:36 GMT+7
import Foundation

func fields(_ s: String) -> [String] {
    var s = s
    var words: [String] = ([] as! [String])
    var cur = ""
    var i = 0
    while (i < ((s).count)) {
        let ch = String(Array(s)[i..<(i + 1)])
        if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
            if (((cur).count) > 0) {
                words = ((words + [cur]) as! [String])
                cur = ""
            }
        } else {
            cur = ((cur + ch) as! String)
        }
        i = ((i + 1) as! Int)
    }
    if (((cur).count) > 0) {
        words = ((words + [cur]) as! [String])
    }
    return (words as! [String])
}
func padRight(_ s: String, _ width: Int) -> String {
    var s = s
    var width = width
    var out = s
    var i = ((s).count)
    while (i < width) {
        out = ((out + " ") as! String)
        i = ((i + 1) as! Int)
    }
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var xs = xs
    var sep = sep
    var res = ""
    var i = 0
    while (i < ((xs).count)) {
        if (i > 0) {
            res = ((res + sep) as! String)
        }
        res = ((res + xs[i]) as! String)
        i = ((i + 1) as! Int)
    }
    return res
}
func parseIntStr(_ str: String) -> Int {
    var str = str
    var i = 0
    var neg = false
    if ((((str).count) > 0) && (String(Array(str)[0..<1]) == "-")) {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9] as [String: Any]
    while (i < ((str).count)) {
        n = (((n * 10) + (digits[String(Array(str)[i..<(i + 1)])] as! Int)) as! Int)
        i = ((i + 1) as! Int)
    }
    if neg {
        n = (-n as! Int)
    }
    return (n as! Int)
}
func isDigits(_ s: String) -> Bool {
    var s = s
    if (((s).count) == 0) {
        return false
    }
    var i = 0
    while (i < ((s).count)) {
        let ch = String(Array(s)[i..<(i + 1)])
        if ((ch < "0") || (ch > "9")) {
            return false
        }
        i = ((i + 1) as! Int)
    }
    return true
}
func readTable(_ table: String) -> [String: Any] {
    var table = table
    let toks = fields(table)
    var cmds: [String] = ([] as! [String])
    var mins: [Int] = ([] as! [Int])
    var i = 0
    while (i < ((toks).count)) {
        let cmd = toks[i]
        var minlen = ((cmd).count)
        i = ((i + 1) as! Int)
        if ((i < ((toks).count)) && isDigits(toks[i])) {
            let num = parseIntStr(toks[i])
            if ((num >= 1) && (num < ((cmd).count))) {
                minlen = (num as! Int)
                i = ((i + 1) as! Int)
            }
        }
        cmds = ((cmds + [cmd]) as! [String])
        mins = ((mins + [minlen]) as! [Int])
    }
    return (["commands": cmds, "mins": mins] as [String: Any] as! [String: Any])
}
func validate(_ commands: [String], _ mins: [Int], _ words: [String]) -> [String] {
    var commands = commands
    var mins = mins
    var words = words
    var results: [String] = ([] as! [String])
    var wi = 0
    while (wi < ((words).count)) {
        let w = words[wi]
        var found = false
        let wlen = ((w).count)
        var ci = 0
        while (ci < ((commands).count)) {
            let cmd = commands[ci]
            if (((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= ((cmd).count))) {
                let c = (cmd.uppercased())
                let ww = (w.uppercased())
                if (String(Array(c)[0..<wlen]) == ww) {
                    results = ((results + [c]) as! [String])
                    found = true
                    break
                }
            }
            ci = ((ci + 1) as! Int)
        }
        if (!found) {
            results = ((results + ["*error*"]) as! [String])
        }
        wi = ((wi + 1) as! Int)
    }
    return (results as! [String])
}
func main() {
    let table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    let tbl = readTable(table)
    let commands = ((tbl as! [String: Any])["commands"]! as! [String])
    let mins = ((tbl as! [String: Any])["mins"]! as! [Int])
    let words = fields(sentence)
    let results = validate(commands, mins, words)
    var out1 = "user words:"
    var k = 0
    while (k < ((words).count)) {
        out1 = ((out1 + " ") as! String)
        if (k < (((words).count) - 1)) {
            out1 = ((out1 + padRight(words[k], ((results[k]).count))) as! String)
        } else {
            out1 = ((out1 + words[k]) as! String)
        }
        k = ((k + 1) as! Int)
    }
    print(out1)
    print(("full words: " + join(results, " ")))
}
main()
