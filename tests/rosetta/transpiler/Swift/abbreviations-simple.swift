// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:52:52 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fields(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var cur: String = ""
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))
            if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
                if (Int(((cur).count)) > 0) {
                    words = (_append(words, cur) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + ch) as! String)
            }
            i = Int((i &+ 1))
        }
        if (Int(((cur).count)) > 0) {
            words = (_append(words, cur) as! [String])
        }
        return words
    }
    func padRight(_ s: String, _ width: Int) -> String {
        var out: String = s
        var i: Int = Int(((s).count))
        while (i < width) {
            out = ((out + " ") as! String)
            i = Int((i &+ 1))
        }
        return out
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res: String = ""
        var i: Int = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + (xs[i] as! String)) as! String)
            i = Int((i &+ 1))
        }
        return res
    }
    func parseIntStr(_ str: String) -> Int {
        var i: Int = 0
        var neg: Bool = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n: Int = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
        while (i < Int(((str).count))) {
            n = Int(((n &* 10) + digits[String(Array(str)[i..<(i &+ 1)])]!))
            i = Int((i &+ 1))
        }
        if neg {
            n = Int(-n)
        }
        return n
    }
    func isDigits(_ s: String) -> Bool {
        if (Int(((s).count)) == 0) {
            return false
        }
        var i: Int = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array(String(describing: (s as! String)))[Int(i)..<Int((i &+ 1))]))
            if ((ch < "0") || (ch > "9")) {
                return false
            }
            i = Int((i &+ 1))
        }
        return true
    }
    func readTable(_ table: String) -> [String: Any?] {
        let toks: [String] = (fields((table as! String)) as! [String])
        var cmds: [String] = ([] as! [String])
        var mins: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < Int(((toks).count))) {
            let cmd = (toks[i] as! String)
            var minlen: Int = Int(((cmd).count))
            i = Int((i &+ 1))
            if ((i < Int(((toks).count))) && isDigits((toks[i] as! String))) {
                let num = Int(Int(String(describing: (toks[i] as! String)))!)
                if ((num >= 1) && (num < Int(((cmd).count)))) {
                    minlen = Int(num)
                    i = Int((i &+ 1))
                }
            }
            cmds = (_append(cmds, cmd) as! [String])
            mins = (_append(mins, minlen) as! [Int])
        }
        return (["commands": cmds, "mins": mins] as! [String: Any?])
    }
    func validate(_ commands: [String], _ mins: [Int], _ words: [String]) -> [String] {
        var results: [String] = ([] as! [String])
        var wi: Int = 0
        while (wi < Int(((words).count))) {
            let w = (words[wi] as! String)
            var found: Bool = false
            let wlen = Int(((w).count))
            var ci: Int = 0
            while (ci < Int(((commands).count))) {
                let cmd = (commands[ci] as! String)
                if (((Int(mins[ci]) != 0) && (wlen >= Int(mins[ci]))) && (wlen <= Int(((cmd).count)))) {
                    let c = String(describing: ((cmd as! String).uppercased()))
                    let ww = String(describing: ((w as! String).uppercased()))
                    if (String(describing: String(Array(String(describing: (c as! String)))[0..<Int(wlen)])) == ww) {
                        results = (_append(results, c) as! [String])
                        found = true
                        break
                    }
                }
                ci = Int((ci &+ 1))
            }
            if (!found) {
                results = (_append(results, "*error*") as! [String])
            }
            wi = Int((wi &+ 1))
        }
        return results
    }
    func main() {
        let table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
        let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
        let tbl: [String: Any?] = (readTable((table as! String)) as! [String: Any?])
        let commands: [String] = (tbl[String("commands")] as! [String])
        let mins: [Int] = (tbl[String("mins")] as! [Int])
        let words: [String] = (fields((sentence as! String)) as! [String])
        let results: [String] = (validate((commands as! [String]), (mins as! [Int]), (words as! [String])) as! [String])
        var out1: String = "user words:"
        var k: Int = 0
        while (k < Int(((words).count))) {
            out1 = ((out1 + " ") as! String)
            if (k < (Int(((words).count)) &- 1)) {
                out1 = ((out1 + String(describing: padRight((words[k] as! String), Int((((results[k] as! String)).count))))) as! String)
            } else {
                out1 = ((out1 + (words[k] as! String)) as! String)
            }
            k = Int((k &+ 1))
        }
        print(_p(out1))
        print(_p(("full words: " + String(describing: join((results as! [String]), " ")))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
