// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:08:56 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func fields(_ s: String) -> [String] {
        var words: [String] = ([] as! [String])
        var cur = ""
        var i = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))
            if (((ch == " ") || (ch == "\n")) || (ch == "\t")) {
                if (Int(((cur).count)) > 0) {
                    words = ((words + [cur]) as! [String])
                    cur = ""
                }
            } else {
                cur = ((cur + ch) as! String)
            }
            i = ((i + 1) as! Int)
        }
        if (Int(((cur).count)) > 0) {
            words = ((words + [cur]) as! [String])
        }
        return (words as! [String])
    }
    func padRight(_ s: String, _ width: Int) -> String {
        var out = (s as! String)
        var i = Int(((s).count))
        while (i < width) {
            out = ((out + " ") as! String)
            i = ((i + 1) as! Int)
        }
        return (out as! String)
    }
    func join(_ xs: [String], _ sep: String) -> String {
        var res = ""
        var i = 0
        while (i < Int(((xs).count))) {
            if (i > 0) {
                res = ((res + sep) as! String)
            }
            res = ((res + String(describing: xs[i])) as! String)
            i = ((i + 1) as! Int)
        }
        return (res as! String)
    }
    func parseIntStr(_ str: String) -> Int {
        var i = 0
        var neg = false
        if ((Int(((str).count)) > 0) && (String(Array(str)[0..<1]) == "-")) {
            neg = true
            i = 1
        }
        var n = 0
        let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9] as [String: Any]
        while (i < Int(((str).count))) {
            n = (((n * 10) + (digits[String(Array(str)[i..<(i + 1)])] as! Int)) as! Int)
            i = ((i + 1) as! Int)
        }
        if neg {
            n = (-n as! Int)
        }
        return (n as! Int)
    }
    func isDigits(_ s: String) -> Bool {
        if (Int(((s).count)) == 0) {
            return false
        }
        var i = 0
        while (i < Int(((s).count))) {
            let ch = String(describing: String(Array((s as! String))[(i as! Int)..<((i + 1) as! Int)]))
            if ((ch < "0") || (ch > "9")) {
                return false
            }
            i = ((i + 1) as! Int)
        }
        return true
    }
    func readTable(_ table: String) -> [String: Any] {
        let toks = (fields((table as! String)) as! [String])
        var cmds: [String] = ([] as! [String])
        var mins: [Int] = ([] as! [Int])
        var i = 0
        while (i < Int(((toks).count))) {
            let cmd = String(describing: toks[i])
            var minlen = Int(((cmd).count))
            i = ((i + 1) as! Int)
            if ((i < Int(((toks).count))) && Bool(isDigits(String(describing: toks[i])))) {
                let num = Int(parseIntStr(String(describing: toks[i])))
                if ((num >= 1) && (num < Int(((cmd).count)))) {
                    minlen = (num as! Int)
                    i = ((i + 1) as! Int)
                }
            }
            cmds = ((cmds + [cmd]) as! [String])
            mins = ((mins + [minlen]) as! [Int])
        }
        return (["commands": cmds, "mins": mins] as [String: Any] as! [String: Any])
    }
    func validate(_ commands: [String], _ mins: [Int], _ words: [String]) -> [String] {
        var results: [String] = ([] as! [String])
        var wi = 0
        while (wi < Int(((words).count))) {
            let w = String(describing: words[wi])
            var found = false
            let wlen = Int(((w).count))
            var ci = 0
            while (ci < Int(((commands).count))) {
                let cmd = String(describing: commands[ci])
                if (((Int(mins[ci]) != 0) && (wlen >= Int(mins[ci]))) && (wlen <= Int(((cmd).count)))) {
                    let c = String(describing: ((cmd as! String).uppercased()))
                    let ww = String(describing: ((w as! String).uppercased()))
                    if (String(describing: String(Array((c as! String))[0..<(wlen as! Int)])) == ww) {
                        results = ((results + [c]) as! [String])
                        found = true
                        break
                    }
                }
                ci = ((ci + 1) as! Int)
            }
            if (!found) {
                results = ((results + ["*error*"]) as! [String])
            }
            wi = ((wi + 1) as! Int)
        }
        return (results as! [String])
    }
    func main() {
        let table = (((((((("" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ") + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ") + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ") + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ") + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ") + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ") + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ") + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ")
        let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
        let tbl = (readTable((table as! String)) as! [String: Any])
        let commands = ((tbl as! [String: Any])["commands"]! as! [String])
        let mins = ((tbl as! [String: Any])["mins"]! as! [Int])
        let words = (fields((sentence as! String)) as! [String])
        let results = (validate((commands as! [String]), (mins as! [Int]), (words as! [String])) as! [String])
        var out1 = "user words:"
        var k = 0
        while (k < Int(((words).count))) {
            out1 = ((out1 + " ") as! String)
            if (k < (Int(((words).count)) - 1)) {
                out1 = ((out1 + String(describing: padRight(String(describing: words[k]), Int(((String(describing: results[k])).count))))) as! String)
            } else {
                out1 = ((out1 + String(describing: words[k])) as! String)
            }
            k = ((k + 1) as! Int)
        }
        print(out1)
        print(("full words: " + String(describing: join((results as! [String]), " "))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
