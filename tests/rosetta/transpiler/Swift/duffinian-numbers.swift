// Generated by Mochi transpiler v0.10.54 on 2025-08-02 12:19:45 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func gcd(_ a: Int, _ b: Int) -> Int {
        var x: Int = a
        if (x < 0) {
            x = Int(-x)
        }
        var y: Int = b
        if (y < 0) {
            y = Int(-y)
        }
        while (y != 0) {
            let t = (x % y)
            x = (y as! Int)
            y = (t as! Int)
        }
        return x
    }
    func divisors(_ n: Int) -> [Int] {
        var divs: [Int] = ([] as! [Int])
        var i: Int = 1
        while ((i &* i) <= n) {
            if ((n % i) == 0) {
                divs = (_append(divs, i) as! [Int])
                let j = Int((n / i))
                if (i != j) {
                    divs = (_append(divs, j) as! [Int])
                }
            }
            i = Int((i &+ 1))
        }
        return divs
    }
    func sum(_ xs: [Int]) -> Int {
        var s: Int = 0
        for v in xs {
            s = Int((s &+ v))
        }
        return s
    }
    func isDuffinian(_ n: Int) -> Bool {
        let divs: [Int] = (divisors((n as! Int)) as! [Int])
        if (Int(((divs).count)) <= 2) {
            return false
        }
        let sigma = Int((((divs as! [Int])).reduce(0) { s, v in s + ((v as? Double) ?? Double(v as? Int ?? 0)) }))
        return (Int(gcd((sigma as! Int), (n as! Int))) == 1)
    }
    func pad(_ n: Int, _ width: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < width) {
            s = ((" " + s) as! String)
        }
        return s
    }
    func printTable(_ nums: [Int], _ perRow: Int, _ width: Int) {
        var i: Int = 0
        var line: String = ""
        while (i < Int(((nums).count))) {
            line = (((line + " ") + String(describing: pad((nums[i] as! Int), (width as! Int)))) as! String)
            if ((Int((i &+ 1)) % perRow) == 0) {
                print(_p(String(describing: String(Array(String(describing: (line as! String)))[1..<Int(((line).count))]))))
                line = ""
            }
            i = Int((i &+ 1))
        }
        if (Int(((line).count)) > 0) {
            print(_p(String(describing: String(Array(String(describing: (line as! String)))[1..<Int(((line).count))]))))
        }
    }
    func main() {
        var duff: [Int] = ([] as! [Int])
        var n: Int = 1
        while (Int(((duff).count)) < 50) {
            if isDuffinian((n as! Int)) {
                duff = (_append(duff, n) as! [Int])
            }
            n = Int((n &+ 1))
        }
        print(_p("First 50 Duffinian numbers:"))
        _ = printTable((duff as! [Int]), 10, 3)
        var triplets: [String] = ([] as! [String])
        n = 1
        while (Int(((triplets).count)) < 20) {
            if ((isDuffinian((n as! Int)) && isDuffinian(Int((n &+ 1)))) && isDuffinian(Int((n &+ 2)))) {
                triplets = (_append(triplets, (((((("(" + _p(n)) + ",") + _p((n &+ 1))) + ",") + _p((n &+ 2))) + ")")) as! [String])
                n = Int((n &+ 3))
            }
            n = Int((n &+ 1))
        }
        print(_p("\nFirst 20 Duffinian triplets:"))
        var i: Int = 0
        while (i < Int(((triplets).count))) {
            var line: String = ""
            var j: Int = 0
            while ((j < 4) && (i < Int(((triplets).count)))) {
                line = ((line + String(describing: padStr((triplets[i] as! String), 16))) as! String)
                j = Int((j &+ 1))
                i = Int((i &+ 1))
            }
            print(_p(line))
        }
    }
    func padStr(_ s: String, _ width: Int) -> String {
        var res: String = s
        while (Int(((res).count)) < width) {
            res = ((res + " ") as! String)
        }
        return res
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
