// Generated by Mochi transpiler v0.10.52 on 2025-08-01 18:24:57 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func capitalize(_ s: String) -> String {
        if (Int(((s).count)) == 0) {
            return (s as! String)
        }
        return ((String(describing: (String(describing: String(Array(String(describing: (s as! String)))[0..<1])).uppercased())) + String(describing: String(Array(String(describing: (s as! String)))[1..<Int(((s).count))]))) as! String)
    }
    var small: [String] = ([("zero" as! Any), ("one" as! Any), ("two" as! Any), ("three" as! Any), ("four" as! Any), ("five" as! Any), ("six" as! Any), ("seven" as! Any), ("eight" as! Any), ("nine" as! Any), ("ten" as! Any), ("eleven" as! Any), ("twelve" as! Any), ("thirteen" as! Any), ("fourteen" as! Any), ("fifteen" as! Any), ("sixteen" as! Any), ("seventeen" as! Any), ("eighteen" as! Any), ("nineteen" as! Any)] as! [String])
    var tens: [String] = ([("" as! Any), ("" as! Any), ("twenty" as! Any), ("thirty" as! Any), ("forty" as! Any), ("fifty" as! Any), ("sixty" as! Any), ("seventy" as! Any), ("eighty" as! Any), ("ninety" as! Any)] as! [String])
    var illions: [String] = ([("" as! Any), (" thousand" as! Any), (" million" as! Any), (" billion" as! Any), (" trillion" as! Any), (" quadrillion" as! Any), (" quintillion" as! Any)] as! [String])
    func say(_ n: Int) -> String {
        var n = n
        var t: String = ""
        if (n < 0) {
            t = "negative "
            n = (-n as! Int)
        }
        if (n < 20) {
            return ((t + (small[n] as! String)) as! String)
        } else if (n < 100) {
            t = (tens[(n / 10)] as! String)
            let s = (n % 10)
            if (s > 0) {
                t = (((t + "-") + (small[s] as! String)) as! String)
            }
            return (t as! String)
        } else if (n < 1000) {
            t = (((small[(n / 100)] as! String) + " hundred") as! String)
            let s = (n % 100)
            if (s > 0) {
                t = (((t + " ") + String(describing: say((s as! Int)))) as! String)
            }
            return (t as! String)
        }
        
        
        var sx: String = ""
        var i: Int = 0
        var nn: Int = n
        while (nn > 0) {
            var p = (nn % 1000)
            nn = ((nn / 1000) as! Int)
            if (p > 0) {
                var ix: String = (String(describing: say((p as! Int))) + (illions[i] as! String))
                if (sx != "") {
                    ix = (((ix + " ") + sx) as! String)
                }
                sx = (ix as! String)
            }
            i = ((i + 1) as! Int)
        }
        return ((t + sx) as! String)
    }
    func fourIsMagic(_ n: Int) -> String {
        var n = n
        var s: String = String(describing: say((n as! Int)))
        s = String(describing: capitalize((s as! String)))
        var t: String = s
        while (n != 4) {
            n = Int(((s).count))
            s = String(describing: say((n as! Int)))
            t = (((((t + " is ") + s) + ", ") + s) as! String)
        }
        t = ((t + " is magic.") as! String)
        return (t as! String)
    }
    func main() {
        let nums: [Int] = ([(0 as! Any), (4 as! Any), (6 as! Any), (11 as! Any), (13 as! Any), (75 as! Any), (100 as! Any), (337 as! Any), (-164 as! Any), (9223372036854775807 as! Any)] as! [Int])
        for n in nums {
            print(_p(String(describing: fourIsMagic((n as! Int)))))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
