// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:07:00 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

typealias Church = ((@escaping (Any?) -> Any?) -> (Any?) -> Any?) -> (@escaping (Any?) -> Any?) -> (Any?) -> Any?
func id(_ x: Any?) -> Any? {
    return x
}
func compose(_ f: @escaping (Any?) -> Any?, _ g: @escaping (Any?) -> Any?) -> (Any?) -> Any? {
    return { (x: Any?) -> Any? in
    return f((g((x as! Any?)) as! Any?))
}
}
func zero() -> Church {
    return ({ (f: @escaping Church) -> Church in
    return id
} as! (Any?) -> Any?)
}
func one() -> Church {
    return id
}
func succ(_ n: @escaping Church) -> Church {
    return ({ (f: @escaping Church) -> Church in
    return compose((f as! (Any?) -> Any?), (n((f as! Any?)) as! (Any?) -> Any?))
} as! (Any?) -> Any?)
}
func plus(_ m: @escaping Church, _ n: @escaping Church) -> Church {
    return ({ (f: @escaping Church) -> Church in
    return compose((m((f as! Any?)) as! (Any?) -> Any?), (n((f as! Any?)) as! (Any?) -> Any?))
} as! (Any?) -> Any?)
}
func mult(_ m: @escaping Church, _ n: @escaping Church) -> Church {
    return compose((m as! (Any?) -> Any?), (n as! (Any?) -> Any?))
}
func exp(_ m: @escaping Church, _ n: @escaping Church) -> Church {
    return (n((m as! Any?)) as! (Any?) -> Any?)
}
func toInt(_ x: @escaping Church) -> Int {
    var counter: Int = 0
    func fCounter(_ f: @escaping Church) -> Church {
        counter = ((counter + 1) as! Int)
        return f
    }
    _ = x((fCounter as! Any?))(id)
    return counter
}
func toStr(_ x: @escaping Church) -> String {
    var s: String = ""
    func fCounter(_ f: @escaping Church) -> Church {
        s = ((s + "|") as! String)
        return f
    }
    _ = x((fCounter as! Any?))(id)
    return s
}
func main() {
    print(_p(("zero = " + _p(Int(toInt((zero() as! (Any?) -> Any?)))))))
    let onev = one()
    print(_p(("one = " + _p(Int(toInt((onev as! (Any?) -> Any?)))))))
    let two = succ((succ((zero() as! (Any?) -> Any?)) as! (Any?) -> Any?))
    print(_p(("two = " + _p(Int(toInt((two as! (Any?) -> Any?)))))))
    let three = plus((onev as! (Any?) -> Any?), (two as! (Any?) -> Any?))
    print(_p(("three = " + _p(Int(toInt((three as! (Any?) -> Any?)))))))
    let four = mult((two as! (Any?) -> Any?), (two as! (Any?) -> Any?))
    print(_p(("four = " + _p(Int(toInt((four as! (Any?) -> Any?)))))))
    let eight = exp((two as! (Any?) -> Any?), (three as! (Any?) -> Any?))
    print(_p(("eight = " + _p(Int(toInt((eight as! (Any?) -> Any?)))))))
    print(_p(("toStr(four) = " + String(describing: toStr((four as! (Any?) -> Any?))))))
}
