// Generated by Mochi transpiler v0.10.41 on 2025-07-27 16:20:21 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func nextRand(_ seed: Int) -> Int {
        return Int((Int(((seed * 1664525) + 1013904223)) % 2147483647))
    }
    func shuffleChars(_ s: String, _ seed: Int) -> [Any] {
        var chars: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int(((s).count))) {
            chars = ((chars + [String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))]) as! [String])
            i = Int((i + 1))
        }
        var sd: Int = seed
        var idx: Int = (Int(((chars).count)) - 1)
        while (idx > 0) {
            sd = Int(nextRand(Int(sd)))
            var j: Int = (sd % Int((idx + 1)))
            let tmp = String(describing: chars[idx])
            chars[idx] = String(describing: chars[j])
            chars[j] = String(describing: tmp)
            idx = Int((idx - 1))
        }
        var res: String = ""
        i = 0
        while (i < Int(((chars).count))) {
            res = String(describing: (res + String(describing: chars[i])))
            i = Int((i + 1))
        }
        return ([res, sd] as! [Any])
    }
    func bestShuffle(_ s: String, _ seed: Int) -> [Any] {
        let r = (shuffleChars(String(describing: s), Int(seed)) as! [Any])
        var t: Any = ((r as! [Any])[0] as! Any)
        var sd: Any = ((r as! [Any])[1] as! Any)
        var arr: [String] = ([] as! [String])
        var i: Int = 0
        while (i < Int((String(describing: t).count))) {
            arr = ((arr + [String(describing: String(Array(String(describing: String(describing: t)))[Int(i)..<Int((i + 1))]))]) as! [String])
            i = Int((i + 1))
        }
        i = 0
        while (i < Int(((arr).count))) {
            var j: Int = 0
            while (j < Int(((arr).count))) {
                if (((i != j) && (String(describing: arr[i]) != String(describing: String(Array(String(describing: String(describing: s)))[Int(j)..<Int((j + 1))])))) && (String(describing: arr[j]) != String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))])))) {
                    let tmp = String(describing: arr[i])
                    arr[i] = String(describing: arr[j])
                    arr[j] = String(describing: tmp)
                    break
                }
                j = Int((j + 1))
            }
            i = Int((i + 1))
        }
        var count: Int = 0
        i = 0
        while (i < Int(((arr).count))) {
            if (String(describing: arr[i]) == String(describing: String(Array(String(describing: String(describing: s)))[Int(i)..<Int((i + 1))]))) {
                count = Int((count + 1))
            }
            i = Int((i + 1))
        }
        var out: String = ""
        i = 0
        while (i < Int(((arr).count))) {
            out = String(describing: (out + String(describing: arr[i])))
            i = Int((i + 1))
        }
        return ([out, sd, count] as! [Any])
    }
    func main() {
        let ts = (["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"] as! [String])
        var seed: Int = 1
        var i: Int = 0
        while (i < Int(((ts).count))) {
            let r = (bestShuffle(String(describing: ts[i]), Int(seed)) as! [Any])
            let shuf = ((r as! [Any])[0] as! Any)
            seed = ((r as! [Any])[1] as! Int)
            let cnt = ((r as! [Any])[2] as! Any)
            print(_p((((((String(describing: ts[i]) + " -> ") + String(describing: shuf)) + " (") + _p(cnt)) + ")")))
            i = Int((i + 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
