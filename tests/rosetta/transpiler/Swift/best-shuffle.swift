// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:11:01 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func nextRand(_ seed: Int) -> Int {
    return Int((Int(((seed * 1664525) + 1013904223)) % 2147483647))
}
func shuffleChars(_ s: String, _ seed: Int) -> [Any] {
    var chars: [String] = ([] as! [String])
    var i: Int = 0
    while (i < Int(((s).count))) {
        chars = ((chars + [String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))]))]) as! [String])
        i = Int((i + 1))
    }
    var sd: Int = seed
    var idx: Int = (Int(((chars).count)) - 1)
    while (idx > 0) {
        sd = Int(nextRand(Int(sd)))
        var j: Int = (sd % Int((idx + 1)))
        let tmp = (chars[idx] as! String)
        chars[idx] = (chars[j] as! String)
        chars[j] = String(tmp)
        idx = Int((idx - 1))
    }
    var res: String = ""
    i = 0
    while (i < Int(((chars).count))) {
        res = String((res + (chars[i] as! String)))
        i = Int((i + 1))
    }
    return ([res, sd] as! [Any])
}
func bestShuffle(_ s: String, _ seed: Int) -> [Any] {
    let r = (shuffleChars(String(s), Int(seed)) as! [Any])
    var t: Any = ((r as! [Any])[0] as! Any)
    var sd: Any = ((r as! [Any])[1] as! Any)
    var arr: [String] = ([] as! [String])
    var i: Int = 0
    while (i < Int((String(describing: t).count))) {
        arr = ((arr + [String(describing: String(Array(String(describing: String(t)))[Int(i)..<Int((i + 1))]))]) as! [String])
        i = Int((i + 1))
    }
    i = 0
    while (i < Int(((arr).count))) {
        var j: Int = 0
        while (j < Int(((arr).count))) {
            if (((i != j) && ((arr[i] as! String) != String(describing: String(Array(String(describing: String(s)))[Int(j)..<Int((j + 1))])))) && ((arr[j] as! String) != String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))])))) {
                let tmp = (arr[i] as! String)
                arr[i] = (arr[j] as! String)
                arr[j] = String(tmp)
                break
            }
            j = Int((j + 1))
        }
        i = Int((i + 1))
    }
    var count: Int = 0
    i = 0
    while (i < Int(((arr).count))) {
        if ((arr[i] as! String) == String(describing: String(Array(String(describing: String(s)))[Int(i)..<Int((i + 1))]))) {
            count = Int((count + 1))
        }
        i = Int((i + 1))
    }
    var out: String = ""
    i = 0
    while (i < Int(((arr).count))) {
        out = String((out + (arr[i] as! String)))
        i = Int((i + 1))
    }
    return ([out, sd, count] as! [Any])
}
func main() {
    let ts = (["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"] as! [String])
    var seed: Int = 1
    var i: Int = 0
    while (i < Int(((ts).count))) {
        let r = (bestShuffle((ts[i] as! String), Int(seed)) as! [Any])
        let shuf = ((r as! [Any])[0] as! Any)
        seed = Int(((r as! [Any])[1] as! Any))
        let cnt = ((r as! [Any])[2] as! Any)
        print(_p(((((((ts[i] as! String) + " -> ") + String(describing: shuf)) + " (") + _p(cnt)) + ")")))
        i = Int((i + 1))
    }
}
_ = main()
