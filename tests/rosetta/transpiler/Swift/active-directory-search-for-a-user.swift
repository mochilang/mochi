// Generated by Mochi transpiler v0.10.40 on 2025-07-25 23:55:12 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func search_user(_ directory: [String: [String]], _ username: String) -> [String] {
        return (directory[username]! as! [String])
    }
    func main() {
        let client = ["Base": "dc=example,dc=com", "Host": "ldap.example.com", "Port": 389, "GroupFilter": "(memberUid=%s)"] as [String: Any]
        let directory = ["username": (["admins", "users"] as! [String]), "john": (["users"] as! [String])] as [String: Any]
        let groups = (search_user((directory as! [String: [String]]), "username") as! [String])
        if (Int(((groups).count)) > 0) {
            var out = "Groups: ["
            var i = 0
            while (i < Int(((groups).count))) {
                out = ((((out + "\"") + String(describing: groups[i])) + "\"") as! String)
                if (i < (Int(((groups).count)) - 1)) {
                    out = ((out + ", ") as! String)
                }
                i = ((i + 1) as! Int)
            }
            out = ((out + "]") as! String)
            print(out)
        } else {
            print("User not found")
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
