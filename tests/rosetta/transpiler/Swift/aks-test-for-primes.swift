// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:09:50 GMT+7
import Foundation

func poly(_ p: Int) -> String {
    var s: String = ""
    var coef: Int = 1
    var i = Int(p)
    if (Int(coef) != 1) {
        s = ((String(s) + String(String(describing: Int(coef)))) as! String)
    }
    while (Int(i) > 0) {
        s = ((String(s) + "x") as! String)
        if (Int(i) != 1) {
            s = (((String(s) + "^") + String(String(describing: Int(i)))) as! String)
        }
        coef = Int(((Int(coef) * Int(i)) / Int(((Int(p) - Int(i)) + 1))))
        var d = Int(coef)
        if ((Int((Int(p) - Int((Int(i) - 1)))) % 2) == 1) {
            d = (-Int(d) as! Int)
        }
        if (Int(d) < 0) {
            s = (((String(s) + " - ") + String(String(describing: -Int(d)))) as! String)
        } else {
            s = (((String(s) + " + ") + String(String(describing: Int(d)))) as! String)
        }
        i = ((Int(i) - 1) as! Int)
    }
    if (String(s) == "") {
        s = "1"
    }
    return String(s)
}
func aks(_ n: Int) -> Bool {
    if (Int(n) < 2) {
        return false
    }
    var c: Int = Int(n)
    var i = 1
    while (Int(i) < Int(n)) {
        if ((Int(c) % Int(n)) != 0) {
            return false
        }
        c = Int(((Int(c) * Int((Int(n) - Int(i)))) / Int((Int(i) + 1))))
        i = ((Int(i) + 1) as! Int)
    }
    return true
}
func main() {
    var p = 0
    while (Int(p) <= 7) {
        print(((String(String(describing: Int(p))) + ":  ") + String(poly(Int(p)))))
        p = ((Int(p) + 1) as! Int)
    }
    var first = true
    p = 2
    var line: String = ""
    while (Int(p) < 50) {
        if Bool(aks(Int(p))) {
            if (first as! Bool) {
                line = ((String(line) + String(String(describing: Int(p)))) as! String)
                first = false
            } else {
                line = (((String(line) + " ") + String(String(describing: Int(p)))) as! String)
            }
        }
        p = ((Int(p) + 1) as! Int)
    }
    print(String(line))
}
_ = main()
