// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:11 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    let jobs = 12
    func pad(_ n: Int) -> String {
        var s: String = _p(n)
        while (Int(((s).count)) < 4) {
            s = ((" " + s) as! String)
        }
        return (s as! String)
    }
    struct HailResult {
        var seq: Int
        var cnt: Int
        var out: String
    }
    func hail(_ seq: Int, _ cnt: Int) -> HailResult {
        var seq = seq
        var cnt = cnt
        var out: String = String(describing: pad((seq as! Int)))
        if (seq != 1) {
            cnt = ((cnt + 1) as! Int)
            if ((seq % 2) != 0) {
                seq = (((3 * seq) + 1) as! Int)
            } else {
                seq = ((seq / 2) as! Int)
            }
        }
        return (HailResult(seq: seq, cnt: cnt, out: out) as! HailResult)
    }
    func main() {
        var seqs: [Int] = ([] as! [Int])
        var cnts: [Int] = ([] as! [Int])
        for i in 0..<jobs {
            seqs = (_append(seqs, (i + 1)) as! [Int])
            cnts = (_append(cnts, 0) as! [Int])
        }
        while true {
            var line: String = ""
            var i: Int = 0
            while (i < jobs) {
                let res = hail((seqs[i] as! Int), (cnts[i] as! Int))
                seqs[i] = (res.seq as! Int)
                cnts[i] = (res.cnt as! Int)
                line = ((line + res.out) as! String)
                i = ((i + 1) as! Int)
            }
            print(_p(line))
            var done: Bool = true
            var j: Int = 0
            while (j < jobs) {
                if ((seqs[j] as! Int) != 1) {
                    done = false
                }
                j = ((j + 1) as! Int)
            }
            if done {
                break
            }
        }
        print(_p(""))
        print(_p("COUNTS:"))
        var counts: String = ""
        var k: Int = 0
        while (k < jobs) {
            counts = ((counts + String(describing: pad((cnts[k] as! Int)))) as! String)
            k = ((k + 1) as! Int)
        }
        print(_p(counts))
        print(_p(""))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
