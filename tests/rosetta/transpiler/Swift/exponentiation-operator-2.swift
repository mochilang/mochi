// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:49 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func expI(_ b: Int, _ p: Int) -> Int {
        var r: Int = 1
        var i: Int = 0
        while (i < p) {
            r = Int((r * b))
            i = Int((i + 1))
        }
        return Int(r)
    }
    func expF(_ b: Double, _ p: Int) -> Double {
        var r: Double = 1.0
        var pow: Double = b
        var n: Int = p
        var neg: Bool = false
        if (p < 0) {
            n = Int(-p)
            neg = true
        }
        while (n > 0) {
            if ((n % 2) == 1) {
                r = Double((r * pow))
            }
            pow = Double((pow * pow))
            n = Int((n / 2))
        }
        if neg {
            r = Double((1.0 / r))
        }
        return Double(r)
    }
    func printExpF(_ b: Double, _ p: Int) {
        if ((b == 0.0) && (p < 0)) {
            print(_p((((_p(b) + "^") + _p(p)) + ": +Inf")))
        } else {
            print(_p(((((_p(b) + "^") + _p(p)) + ": ") + _p(Double(expF(Double(b), Int(p)))))))
        }
    }
    func main() {
        print(_p("expI tests"))
        for pair in ([([2, 10] as! [Int]), ([2, -10] as! [Int]), ([-2, 10] as! [Int]), ([-2, 11] as! [Int]), ([11, 0] as! [Int])] as! [[Int]]) {
            if ((pair[1] as! Int) < 0) {
                print(_p((((_p((pair[0] as! Int)) + "^") + _p((pair[1] as! Int))) + ": negative power not allowed")))
            } else {
                print(_p(((((_p((pair[0] as! Int)) + "^") + _p((pair[1] as! Int))) + ": ") + _p(Int(expI((pair[0] as! Int), (pair[1] as! Int)))))))
            }
        }
        print(_p("overflow undetected"))
        print(_p(("10^10: " + _p(Int(expI(10, 10))))))
        print(_p("\nexpF tests:"))
        for pair in ([[2.0, 10], [2.0, -10], [-2.0, 10], [-2.0, 11], [11.0, 0]] as! [[Any]]) {
            _ = printExpF(Double(((pair as! [Any])[0] as! Any)), ((pair as! [Any])[1] as! Int))
        }
        print(_p("disallowed in expI, allowed here"))
        _ = printExpF(0.0, Int(-1))
        print(_p("other interesting cases for 32 bit float type"))
        _ = printExpF(10.0, 39)
        _ = printExpF(10.0, Int(-39))
        _ = printExpF(Double(-10.0), 39)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
