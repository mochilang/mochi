// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:23:19 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

struct Pixel {
    var R: Int
    var G: Int
    var B: Int
}
func pixelFromRgb(_ c: Int) -> Pixel {
    let r = (Int((c / 65536)) % 256)
    let g = (Int((c / 256)) % 256)
    let b = (c % 256)
    return (Pixel(R: r, G: g, B: b) as! Pixel)
}
func rgbFromPixel(_ p: Pixel) -> Int {
    return Int((((p.R * 65536) + (p.G * 256)) + p.B))
}
struct Bitmap {
    var cols: Int
    var rows: Int
    var px: [[Pixel]]
}
func NewBitmap(_ x: Int, _ y: Int) -> Bitmap {
    var data: [[Pixel]] = ([] as! [[Pixel]])
    var row: Int = 0
    while (row < y) {
        var r: [Pixel] = ([] as! [Pixel])
        var col: Int = 0
        while (col < x) {
            r = ((r + [Pixel(R: 0, G: 0, B: 0)]) as! [Pixel])
            col = Int((col + 1))
        }
        data = ((data + [r]) as! [[Pixel]])
        row = Int((row + 1))
    }
    return (Bitmap(cols: x, rows: y, px: data) as! Bitmap)
}
func Extent(_ b: Bitmap) -> [String: Int] {
    return (["cols": b.cols, "rows": b.rows] as! [String: Int])
}
func Fill(_ b: inout Bitmap, _ p: Pixel) {
    var y: Int = 0
    while (y < b.rows) {
        var x: Int = 0
        while (x < b.cols) {
            var px: [[Pixel]] = b.px
            var row: [Pixel] = (px[y] as! [Pixel])
            row[x] = (p as! Pixel)
            px[y] = (row as! [Pixel])
            b.px = (px as! [[Pixel]])
            x = Int((x + 1))
        }
        y = Int((y + 1))
    }
}
func FillRgb(_ b: inout Bitmap, _ c: Int) {
    _ = Fill(&b, (pixelFromRgb(Int(c)) as! Pixel))
}
func SetPx(_ b: inout Bitmap, _ x: Int, _ y: Int, _ p: Pixel) -> Bool {
    if ((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows)) {
        return false
    }
    var px: [[Pixel]] = b.px
    var row: [Pixel] = (px[y] as! [Pixel])
    row[x] = (p as! Pixel)
    px[y] = (row as! [Pixel])
    b.px = (px as! [[Pixel]])
    return true
}
func SetPxRgb(_ b: inout Bitmap, _ x: Int, _ y: Int, _ c: Int) -> Bool {
    return (SetPx(&b, Int(x), Int(y), (pixelFromRgb(Int(c)) as! Pixel)) as! Bool)
}
func GetPx(_ b: Bitmap, _ x: Int, _ y: Int) -> [String: Any] {
    if ((((x < 0) || (x >= b.cols)) || (y < 0)) || (y >= b.rows)) {
        return (["ok": false] as! [String: Any])
    }
    let row = (b.px[y] as! [Pixel])
    return (["ok": true, "pixel": (row[x] as! Pixel)] as! [String: Any])
}
func GetPxRgb(_ b: Bitmap, _ x: Int, _ y: Int) -> [String: Any] {
    let r = (GetPx((b as! Bitmap), Int(x), Int(y)) as! [String: Any])
    if (!(r["ok"]! as! Bool)) {
        return (["ok": false] as! [String: Any])
    }
    return (["ok": true, "rgb": Int(rgbFromPixel((r["pixel"]! as! Pixel)))] as! [String: Any])
}
func ppmSize(_ b: Bitmap) -> Int {
    let header = (((("P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + _p(b.cols)) + " ") + _p(b.rows)) + "\n255\n")
    return Int((Int(((header).count)) + ((3 * b.cols) * b.rows)))
}
func pixelStr(_ p: Pixel) -> String {
    return String((((((("{" + _p(p.R)) + " ") + _p(p.G)) + " ") + _p(p.B)) + "}"))
}
func main() {
    var bm: Bitmap = NewBitmap(300, 240)
    _ = FillRgb(&bm, 16711680)
    _ = (SetPxRgb(&bm, 10, 20, 255) as! Bool)
    _ = (SetPxRgb(&bm, 20, 30, 0) as! Bool)
    _ = (SetPxRgb(&bm, 30, 40, 1056816) as! Bool)
    let c1 = (GetPx((bm as! Bitmap), 0, 0) as! [String: Any])
    let c2 = (GetPx((bm as! Bitmap), 10, 20) as! [String: Any])
    let c3 = (GetPx((bm as! Bitmap), 30, 40) as! [String: Any])
    print(_p(((("Image size: " + _p(bm.cols)) + " Ã— ") + _p(bm.rows))))
    print(_p((_p(Int(ppmSize((bm as! Bitmap)))) + " bytes when encoded as PPM.")))
    if (c1["ok"]! as! Bool) {
        print(_p(("Pixel at (0,0) is " + String(describing: pixelStr((c1["pixel"]! as! Pixel))))))
    }
    if (c2["ok"]! as! Bool) {
        print(_p(("Pixel at (10,20) is " + String(describing: pixelStr((c2["pixel"]! as! Pixel))))))
    }
    if (c3["ok"]! as! Bool) {
        let p = c3["pixel"]!
        var r16: Any = (Int((p as! Pixel).R) * 257)
        var g16: Any = (Int((p as! Pixel).G) * 257)
        var b16: Any = (Int((p as! Pixel).B) * 257)
        print(_p(((((("Pixel at (30,40) has R=" + _p(r16)) + ", G=") + _p(g16)) + ", B=") + _p(b16))))
    }
}
_ = main()
