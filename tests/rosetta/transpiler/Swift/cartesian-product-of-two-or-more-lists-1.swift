// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:17 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func cart2(_ a: [Int], _ b: [Int]) -> [[Int]] {
        var p: [[Int]] = ([] as! [[Int]])
        for x in a {
            for y in b {
                p = (_append(p, ([(x as! Any), (y as! Any)] as! [Int])) as! [[Int]])
            }
        }
        return (p as! [[Int]])
    }
    func llStr(_ lst: [[Int]]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((lst).count))) {
            var row: [Int] = (lst[i] as! [Int])
            s = ((s + "[") as! String)
            var j: Int = 0
            while (j < Int(((row).count))) {
                s = ((s + _p((row[j] as! Int))) as! String)
                if (j < (Int(((row).count)) - 1)) {
                    s = ((s + " ") as! String)
                }
                j = ((j + 1) as! Int)
            }
            s = ((s + "]") as! String)
            if (i < (Int(((lst).count)) - 1)) {
                s = ((s + " ") as! String)
            }
            i = ((i + 1) as! Int)
        }
        s = ((s + "]") as! String)
        return (s as! String)
    }
    func main() {
        print(_p(String(describing: llStr((cart2(([(1 as! Any), (2 as! Any)] as! [Int]), ([(3 as! Any), (4 as! Any)] as! [Int])) as! [[Int]])))))
        print(_p(String(describing: llStr((cart2(([(3 as! Any), (4 as! Any)] as! [Int]), ([(1 as! Any), (2 as! Any)] as! [Int])) as! [[Int]])))))
        print(_p(String(describing: llStr((cart2(([(1 as! Any), (2 as! Any)] as! [Int]), ([] as! [Int])) as! [[Int]])))))
        print(_p(String(describing: llStr((cart2(([] as! [Int]), ([(1 as! Any), (2 as! Any)] as! [Int])) as! [[Int]])))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
