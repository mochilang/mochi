// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:25:16 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func commatize(_ n: Int) -> String {
        var s: String = _p(n)
        var i: Int = (Int(((s).count)) % 3)
        if (i == 0) {
            i = 3
        }
        var out: String = String(describing: String(Array(String(describing: (s as! String)))[0..<(i as! Int)]))
        while (i < Int(((s).count))) {
            out = (((out + ",") + String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<((i + 3) as! Int)]))) as! String)
            i = ((i + 3) as! Int)
        }
        return (out as! String)
    }
    func p(_ L: Int, _ n: Int) -> Int {
        let Ls = _p(L)
        var digits: Int = 1
        var d: Int = 1
        while (d <= (18 - Int(((Ls).count)))) {
            digits = ((digits * 10) as! Int)
            d = ((d + 1) as! Int)
        }
        let ten18 = 1000000000000000000
        var count: Int = 0
        var i: Int = 0
        var probe: Int = 1
        while true {
            probe = ((probe * 2) as! Int)
            i = ((i + 1) as! Int)
            if (probe >= ten18) {
                while true {
                    if (probe >= ten18) {
                        probe = ((probe / 10) as! Int)
                    }
                    if ((probe / digits) == L) {
                        count = ((count + 1) as! Int)
                        if (count >= n) {
                            count = ((count - 1) as! Int)
                            break
                        }
                    }
                    probe = ((probe * 2) as! Int)
                    i = ((i + 1) as! Int)
                }
            }
            var ps: String = _p(probe)
            var le: Int = Int(((Ls).count))
            if (le > Int(((ps).count))) {
                le = Int(((ps).count))
            }
            if (String(describing: String(Array(String(describing: (ps as! String)))[0..<(le as! Int)])) == Ls) {
                count = ((count + 1) as! Int)
                if (count >= n) {
                    break
                }
            }
        }
        return (i as! Int)
    }
    var params: [[Int]] = ([([12, 1] as! [Int]), ([12, 2] as! [Int]), ([123, 45] as! [Int])] as! [[Int]])
    var idx: Int = 0
    while (idx < Int(((params).count))) {
        let L = (params[idx][0] as! Int)
        let m = (params[idx][1] as! Int)
        print(_p(((((("p(" + _p(L)) + ", ") + _p(m)) + ") = ") + String(describing: commatize(Int(p((L as! Int), (m as! Int))))))))
        idx = ((idx + 1) as! Int)
    }
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
