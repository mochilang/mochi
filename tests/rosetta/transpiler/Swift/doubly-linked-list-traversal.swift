// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:33:04 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    var nodes: [Int: [String: Any]] = ([:] as! [Int: [String: Any]])
    var head: Int = (0 - 1)
    var tail: Int = (0 - 1)
    func listString() -> String {
        if (head == (0 - 1)) {
            return "<nil>"
        }
        var r: Any = ("[" + String(describing: nodes[head]!["value"]!))
        var id: Int = (nodes[head]!["next"]! as! Int)
        while (id != (0 - 1)) {
            r = ((String(describing: r) + " ") + String(describing: nodes[id]!["value"]!))
            id = (nodes[id]!["next"]! as! Int)
        }
        r = (String(describing: r) + "]")
        return String(describing: r)
    }
    print(_p(String(describing: listString())))
    nodes[0] = (["value": "A", "next": (0 - 1), "prev": (0 - 1)] as! [String: Any])
    head = 0
    tail = 0
    nodes[1] = (["value": "B", "next": (0 - 1), "prev": 0] as! [String: Any])
    nodes[0]!["next"] = 1
    tail = 1
    print(_p(String(describing: listString())))
    nodes[2] = (["value": "C", "next": 1, "prev": 0] as! [String: Any])
    nodes[1]!["prev"] = 2
    nodes[0]!["next"] = 2
    print(_p(String(describing: listString())))
    var out: String = "From tail:"
    var id: Int = tail
    while (id != (0 - 1)) {
        out = String(describing: ((out + " ") + String(describing: nodes[id]!["value"]!)))
        id = (nodes[id]!["prev"]! as! Int)
    }
    print(_p(out))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
