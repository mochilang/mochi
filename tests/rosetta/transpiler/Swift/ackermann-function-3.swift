// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:09:16 GMT+7
import Foundation

func pow_big(_ base: bigint, _ exp: Int) -> bigint {
    var result: bigint = 1
    var b: bigint = base
    var e = Int(exp)
    while (Int(e) > 0) {
        if ((Int(e) % 2) == 1) {
            result = (result * b)
        }
        b = (b * b)
        e = Int((Int(e) / 2))
    }
    return result
}
func bit_len(_ x: bigint) -> Int {
    var n: bigint = x
    var c = 0
    while (n > 0) {
        n = (n / 2)
        c = ((Int(c) + 1) as! Int)
    }
    return Int(c)
}
var err = ""
func ackermann2(_ m: bigint, _ n: bigint) -> bigint {
    if (String(err) != "") {
        return 0
    }
    if (m <= 3) {
        let mi = (m as! Int)
        if (Int(mi) == 0) {
            return (n + 1)
        }
        if (Int(mi) == 1) {
            return (n + 2)
        }
        if (Int(mi) == 2) {
            return ((2 * n) + 3)
        }
        if (Int(mi) == 3) {
            let nb = Int(bit_len(n))
            if (Int(nb) > 64) {
                err = ((("A(m,n) had n of " + String(String(describing: Int(nb)))) + " bits; too large") as! String)
                return 0
            }
            let r = pow_big(2, (n as! Int))
            return ((8 * r) - 3)
        }
    }
    if (Int(bit_len(n)) == 0) {
        return ackermann2((m - 1), 1)
    }
    return ackermann2((m - 1), ackermann2(m, (n - 1)))
}
func show(_ m: Int, _ n: Int) {
    err = ""
    let res = ackermann2((m as! bigint), (n as! bigint))
    if (String(err) != "") {
        print(((((("A(" + String(String(describing: Int(m)))) + ", ") + String(String(describing: Int(n)))) + ") = Error: ") + String(err)))
        return
    }
    if (Int(bit_len(res)) <= 256) {
        print(((((("A(" + String(String(describing: Int(m)))) + ", ") + String(String(describing: Int(n)))) + ") = ") + String(String(describing: res))))
    } else {
        let s = String(String(describing: res))
        let pre = String(String(Array(String(s))[0..<20]))
        let suf = String(String(Array(String(s))[((Int(((String(s)).count)) - 20) as! Int)..<Int(((String(s)).count))]))
        print(((((((((("A(" + String(String(describing: Int(m)))) + ", ") + String(String(describing: Int(n)))) + ") = ") + String(String(describing: Int(((String(s)).count))))) + " digits starting/ending with: ") + String(pre)) + "...") + String(suf)))
    }
}
func main() {
    _ = show(0, 0)
    _ = show(1, 2)
    _ = show(2, 4)
    _ = show(3, 100)
    _ = show(3, 1000000)
    _ = show(4, 1)
    _ = show(4, 2)
    _ = show(4, 3)
}
_ = main()
