// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:33:31 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _int(_ v: Any) -> Int {
    if let s = v as? String { return Int(s) ?? 0 }
    if let i = v as? Int { return i }
    if let i = v as? Int64 { return Int(i) }
    if let d = v as? Double { return Int(d) }
    if let b = v as? BigInt { return b.toInt() }
    return 0
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
struct BigInt: Comparable, CustomStringConvertible {
    private var digits: [UInt32] = []
    init() {}
    init(_ v: Int) {
        var n = v
        while n > 0 { digits.append(UInt32(n % 1000000000)); n /= 1000000000 }
    }
    init(_ other: BigInt) { digits = other.digits }
    func toInt() -> Int {
        var res: Int64 = 0
        for d in digits.reversed() { res = res * 1000000000 + Int64(d) }
        if res > Int64(Int.max) { return Int.max }
        return Int(res)
    }
    static func +(lhs: BigInt, rhs: BigInt) -> BigInt {
        var carry: UInt64 = 0
        var result: [UInt32] = []
        let maxLen = max(lhs.digits.count, rhs.digits.count)
        for i in 0..<maxLen {
            let a = i < lhs.digits.count ? UInt64(lhs.digits[i]) : 0
            let b = i < rhs.digits.count ? UInt64(rhs.digits[i]) : 0
            let sum = a + b + carry
            result.append(UInt32(sum % 1000000000))
            carry = sum / 1000000000
        }
        if carry > 0 { result.append(UInt32(carry)) }
        var r = BigInt(); r.digits = result; return r
    }
    static func -(lhs: BigInt, rhs: BigInt) -> BigInt {
        var borrow: Int64 = 0
        var result: [UInt32] = []
        for i in 0..<lhs.digits.count {
            var a = Int64(lhs.digits[i]) - borrow
            let b = i < rhs.digits.count ? Int64(rhs.digits[i]) : 0
            var diff = a - b
            if diff < 0 { diff += 1000000000; borrow = 1 } else { borrow = 0 }
            result.append(UInt32(diff))
        }
        while result.last == 0 { result.removeLast(); if result.isEmpty { break } }
        var r = BigInt(); r.digits = result; return r
    }
    static func *(lhs: BigInt, rhs: BigInt) -> BigInt {
        if lhs.digits.isEmpty || rhs.digits.isEmpty { return BigInt() }
        var result = Array(repeating: UInt64(0), count: lhs.digits.count + rhs.digits.count)
        for i in 0..<lhs.digits.count {
            var carry: UInt64 = 0
            for j in 0..<rhs.digits.count {
                let idx = i + j
                let prod = UInt64(lhs.digits[i]) * UInt64(rhs.digits[j]) + result[idx] + carry
                result[idx] = prod % 1000000000
                carry = prod / 1000000000
            }
            if carry > 0 { result[i + rhs.digits.count] += carry }
        }
        var resDigits: [UInt32] = result.map { UInt32($0) }
        while resDigits.last == 0 { resDigits.removeLast(); if resDigits.isEmpty { break } }
        var r = BigInt(); r.digits = resDigits; return r
    }
    func bitLength() -> Int {
        if digits.isEmpty { return 0 }
        var v = digits.last!
        var bits = 0
        while v > 0 { v >>= 1; bits += 1 }
        return bits + (digits.count - 1) * 30
    }
    static func <(lhs: BigInt, rhs: BigInt) -> Bool {
        if lhs.digits.count != rhs.digits.count { return lhs.digits.count < rhs.digits.count }
        for i in stride(from: lhs.digits.count-1, through: 0, by: -1) {
            if lhs.digits[i] != rhs.digits[i] { return lhs.digits[i] < rhs.digits[i] }
        }
        return false
    }
    static func ==(lhs: BigInt, rhs: BigInt) -> Bool { lhs.digits == rhs.digits }
    var description: String {
        if digits.isEmpty { return "0" }
        var s = String(digits.last!)
        for d in digits.dropLast().reversed() { s += String(format: "%09d", d) }
        return s
    }
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow_big(_ base: BigInt, _ exp: Int) -> BigInt {
        var result: BigInt = BigInt(1)
        var b: BigInt = BigInt((base as! BigInt))
        var e = (exp as! Int)
        while (e > 0) {
            if ((e % 2) == 1) {
                result = ((result * b) as! BigInt)
            }
            b = ((b * b) as! BigInt)
            e = Int((e / 2))
        }
        return (result as! BigInt)
    }
    func bit_len(_ x: BigInt) -> Int {
        var n: BigInt = BigInt((x as! BigInt))
        var c = 0
        while (n > 0) {
            n = ((n / 2) as! BigInt)
            c = ((c + 1) as! Int)
        }
        return (c as! Int)
    }
    var err = ""
    func ackermann2(_ m: BigInt, _ n: BigInt) -> BigInt {
        if (err != "") {
            return 0
        }
        if (m <= 3) {
            let mi = Int(_int(m))
            if (mi == 0) {
                return ((n + 1) as! BigInt)
            }
            if (mi == 1) {
                return ((n + 2) as! BigInt)
            }
            if (mi == 2) {
                return (((2 * n) + 3) as! BigInt)
            }
            if (mi == 3) {
                let nb = Int(bit_len((n as! BigInt)))
                if (nb > 64) {
                    err = ((("A(m,n) had n of " + String(describing: nb)) + " bits; too large") as! String)
                    return 0
                }
                let r = pow_big(2, Int(_int(n)))
                return (((8 * r) - 3) as! BigInt)
            }
        }
        if (Int(bit_len((n as! BigInt))) == 0) {
            return BigInt(ackermann2(((m - 1) as! BigInt), 1))
        }
        return BigInt(ackermann2(((m - 1) as! BigInt), BigInt(ackermann2((m as! BigInt), ((n - 1) as! BigInt)))))
    }
    func show(_ m: Int, _ n: Int) {
        err = ""
        let res = ackermann2(BigInt(m), BigInt(n))
        if (err != "") {
            print(((((("A(" + String(describing: m)) + ", ") + String(describing: n)) + ") = Error: ") + err))
            return
        }
        if (Int(bit_len((res as! BigInt))) <= 256) {
            print(((((("A(" + String(describing: m)) + ", ") + String(describing: n)) + ") = ") + String(describing: res)))
        } else {
            let s = String(describing: res)
            let pre = String(describing: String(Array((s as! String))[0..<20]))
            let suf = String(describing: String(Array((s as! String))[((Int(((s).count)) - 20) as! Int)..<Int(((s).count))]))
            print(((((((((("A(" + String(describing: m)) + ", ") + String(describing: n)) + ") = ") + String(describing: Int(((s).count)))) + " digits starting/ending with: ") + pre) + "...") + suf))
        }
    }
    func main() {
        _ = show(0, 0)
        _ = show(1, 2)
        _ = show(2, 4)
        _ = show(3, 100)
        _ = show(3, 1000000)
        _ = show(4, 1)
        _ = show(4, 2)
        _ = show(4, 3)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
