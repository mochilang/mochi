// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:07:04 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func isPrime(_ n: Int) -> Bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    var d: Int = 5
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = ((d + 2) as! Int)
        if ((n % d) == 0) {
            return false
        }
        d = ((d + 4) as! Int)
    }
    return true
}
var circs: [Int] = ([] as! [Int])
func isCircular(_ n: Int) -> Bool {
    var nn: Int = n
    var pow: Int = 1
    while (nn > 0) {
        pow = ((pow * 10) as! Int)
        nn = ((nn / 10) as! Int)
    }
    nn = (n as! Int)
    while true {
        nn = ((nn * 10) as! Int)
        let f = (nn / pow)
        nn = ((nn + (f * Int((1 - pow)))) as! Int)
        if (nn == n) {
            break
        }
        if (!isPrime((nn as! Int))) {
            return false
        }
    }
    return true
}
print(_p("The first 19 circular primes are:"))
var digits: [Int] = ([(1 as! Any), (3 as! Any), (7 as! Any), (9 as! Any)] as! [Int])
var q: [Int] = ([(1 as! Any), (2 as! Any), (3 as! Any), (5 as! Any), (7 as! Any), (9 as! Any)] as! [Int])
var fq: [Int] = ([(1 as! Any), (2 as! Any), (3 as! Any), (5 as! Any), (7 as! Any), (9 as! Any)] as! [Int])
var count: Int = 0
while true {
    let f = (q[0] as! Int)
    let fd = (fq[0] as! Int)
    if (isPrime((f as! Int)) && isCircular((f as! Int))) {
        circs = (_append(circs, f) as! [Int])
        count = ((count + 1) as! Int)
        if (count == 19) {
            break
        }
    }
    q = (Array(q[1..<q.count]) as! [Int])
    fq = (Array(fq[1..<fq.count]) as! [Int])
    if ((f != 2) && (f != 5)) {
        for d in digits {
            q = (_append(q, ((f * 10) + d)) as! [Int])
            fq = (_append(fq, fd) as! [Int])
        }
    }
}
func showList(_ xs: [Int]) -> String {
    var out: String = "["
    var i: Int = 0
    while (i < Int(((xs).count))) {
        out = ((out + _p((xs[i] as! Int))) as! String)
        if (i < (Int(((xs).count)) - 1)) {
            out = ((out + ", ") as! String)
        }
        i = ((i + 1) as! Int)
    }
    return (out + "]")
}
print(_p(String(describing: showList((circs as! [Int])))))
print(_p("\nThe next 4 circular primes, in repunit format, are:"))
print(_p("[R(19) R(23) R(317) R(1031)]"))
print(_p("\nThe following repunits are probably circular primes:"))
for i in ([(5003 as! Any), (9887 as! Any), (15073 as! Any), (25031 as! Any), (35317 as! Any), (49081 as! Any)] as! [Int]) {
    print(_p((("R(" + _p(i)) + ") : true")))
}
