// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:53:02 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func countDivisors(_ n: Int) -> Int {
        if (n < 2) {
            return 1
        }
        var count = 2
        var i = 2
        while (i <= (n / 2)) {
            if ((n % i) == 0) {
                count = Int((count + 1))
            }
            i = Int((i + 1))
        }
        return Int(count)
    }
    func main() {
        print("The first 20 anti-primes are:")
        var maxDiv = 0
        var count = 0
        var n = 1
        var line = ""
        while (count < 20) {
            let d = Int(countDivisors(Int(n)))
            if (d > maxDiv) {
                line = String(((line + String(describing: n)) + " "))
                maxDiv = Int(d)
                count = Int((count + 1))
            }
            n = Int((n + 1))
        }
        line = String(describing: String(Array(String(line))[0..<Int((Int(((line).count)) - 1))]))
        print(line)
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
