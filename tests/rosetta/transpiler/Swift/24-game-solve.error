exit status 1
/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:10:9: warning: variable 'n' was never mutated; consider changing to 'let' constant
  8 | let OP_DIV = 4
  9 | func newNum(_ n: Int) -> [String: Any] {
 10 |     var n = n
    |         `- warning: variable 'n' was never mutated; consider changing to 'let' constant
 11 |     return (["op": Int(OP_NUM), "value": ["num": Int(n), "denom": 1]] as! [String: Any])
 12 | }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:18:32: error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 16 |         return (x["value"]! as! [String: Int])
 17 |     }
 18 |     let l = (exprEval(x["left"]!) as! [String: Int])
    |                                `- error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 19 |     let r = (exprEval(x["right"]!) as! [String: Int])
 20 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:18:35: warning: forced cast of '[String : Int]' to same type has no effect
 16 |         return (x["value"]! as! [String: Int])
 17 |     }
 18 |     let l = (exprEval(x["left"]!) as! [String: Int])
    |                                   `- warning: forced cast of '[String : Int]' to same type has no effect
 19 |     let r = (exprEval(x["right"]!) as! [String: Int])
 20 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:19:33: error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 17 |     }
 18 |     let l = (exprEval(x["left"]!) as! [String: Int])
 19 |     let r = (exprEval(x["right"]!) as! [String: Int])
    |                                 `- error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 20 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {
 21 |         return (["num": ((Int(l["num"]!) * Int(r["denom"]!)) + (Int(l["denom"]!) * Int(r["num"]!))), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:19:36: warning: forced cast of '[String : Int]' to same type has no effect
 17 |     }
 18 |     let l = (exprEval(x["left"]!) as! [String: Int])
 19 |     let r = (exprEval(x["right"]!) as! [String: Int])
    |                                    `- warning: forced cast of '[String : Int]' to same type has no effect
 20 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {
 21 |         return (["num": ((Int(l["num"]!) * Int(r["denom"]!)) + (Int(l["denom"]!) * Int(r["num"]!))), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:21:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 19 |     let r = (exprEval(x["right"]!) as! [String: Int])
 20 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {
 21 |         return (["num": ((Int(l["num"]!) * Int(r["denom"]!)) + (Int(l["denom"]!) * Int(r["num"]!))), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])
    |                `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 22 |     }
 23 |     if ((x["op"]! as! Int) == Int(OP_SUB)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:24:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 22 |     }
 23 |     if ((x["op"]! as! Int) == Int(OP_SUB)) {
 24 |         return (["num": ((Int(l["num"]!) * Int(r["denom"]!)) - (Int(l["denom"]!) * Int(r["num"]!))), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])
    |                `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 25 |     }
 26 |     if ((x["op"]! as! Int) == Int(OP_MUL)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:27:16: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 25 |     }
 26 |     if ((x["op"]! as! Int) == Int(OP_MUL)) {
 27 |         return (["num": (Int(l["num"]!) * Int(r["num"]!)), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])
    |                `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 28 |     }
 29 |     return (["num": (Int(l["num"]!) * Int(r["denom"]!)), "denom": (Int(l["denom"]!) * Int(r["num"]!))] as! [String: Int])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:29:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 27 |         return (["num": (Int(l["num"]!) * Int(r["num"]!)), "denom": (Int(l["denom"]!) * Int(r["denom"]!))] as! [String: Int])
 28 |     }
 29 |     return (["num": (Int(l["num"]!) * Int(r["denom"]!)), "denom": (Int(l["denom"]!) * Int(r["num"]!))] as! [String: Int])
    |            `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
 30 | }
 31 | func exprString(_ x: [String: Any]) -> String {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:34:41: error: value of type 'Any' has no subscripts
 32 |     var x = x
 33 |     if ((x["op"]! as! Int) == Int(OP_NUM)) {
 34 |         return String(String(x["value"]!["num"]!))
    |                                         `- error: value of type 'Any' has no subscripts
 35 |     }
 36 |     let ls = String(exprString(x["left"]!))

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:36:41: error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 34 |         return String(String(x["value"]!["num"]!))
 35 |     }
 36 |     let ls = String(exprString(x["left"]!))
    |                                         `- error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 37 |     let rs = String(exprString(x["right"]!))
 38 |     var opstr = ""

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:37:42: error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 35 |     }
 36 |     let ls = String(exprString(x["left"]!))
 37 |     let rs = String(exprString(x["right"]!))
    |                                          `- error: cannot convert value of type 'Any' to expected argument type '[String : Any]'
 38 |     var opstr = ""
 39 |     if ((x["op"]! as! Int) == Int(OP_ADD)) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:57:19: warning: forced cast of '[[String : Any]]' to same type has no effect
 55 | func solve(_ xs: [[String: Any]]) -> Bool {
 56 |     var xs = xs
 57 |     if (Int((((xs as! [[String: Any]])).count)) == 1) {
    |                   `- warning: forced cast of '[[String : Any]]' to same type has no effect
 58 |         let f = (exprEval((xs[0] as! [String: Any])) as! [String: Int])
 59 |         if ((Int(f["denom"]!) != 0) && (Int(f["num"]!) == (Int(f["denom"]!) * Int(goal)))) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:58:34: warning: forced cast of '[String : Any]' to same type has no effect
 56 |     var xs = xs
 57 |     if (Int((((xs as! [[String: Any]])).count)) == 1) {
 58 |         let f = (exprEval((xs[0] as! [String: Any])) as! [String: Int])
    |                                  `- warning: forced cast of '[String : Any]' to same type has no effect
 59 |         if ((Int(f["denom"]!) != 0) && (Int(f["num"]!) == (Int(f["denom"]!) * Int(goal)))) {
 60 |             print(String(exprString((xs[0] as! [String: Any]))))

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:58:54: warning: forced cast of '[String : Int]' to same type has no effect
 56 |     var xs = xs
 57 |     if (Int((((xs as! [[String: Any]])).count)) == 1) {
 58 |         let f = (exprEval((xs[0] as! [String: Any])) as! [String: Int])
    |                                                      `- warning: forced cast of '[String : Int]' to same type has no effect
 59 |         if ((Int(f["denom"]!) != 0) && (Int(f["num"]!) == (Int(f["denom"]!) * Int(goal)))) {
 60 |             print(String(exprString((xs[0] as! [String: Any]))))

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:60:44: warning: forced cast of '[String : Any]' to same type has no effect
 58 |         let f = (exprEval((xs[0] as! [String: Any])) as! [String: Int])
 59 |         if ((Int(f["denom"]!) != 0) && (Int(f["num"]!) == (Int(f["denom"]!) * Int(goal)))) {
 60 |             print(String(exprString((xs[0] as! [String: Any]))))
    |                                            `- warning: forced cast of '[String : Any]' to same type has no effect
 61 |             return true
 62 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:66:31: warning: forced cast of '[[String : Any]]' to same type has no effect
 64 |     }
 65 |     var i = 0
 66 |     while (Int(i) < Int((((xs as! [[String: Any]])).count))) {
    |                               `- warning: forced cast of '[[String : Any]]' to same type has no effect
 67 |         var j = ((Int(i) + 1) as! Int)
 68 |         while (Int(j) < Int((((xs as! [[String: Any]])).count))) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:67:31: warning: forced cast of 'Int' to same type has no effect
 65 |     var i = 0
 66 |     while (Int(i) < Int((((xs as! [[String: Any]])).count))) {
 67 |         var j = ((Int(i) + 1) as! Int)
    |                               `- warning: forced cast of 'Int' to same type has no effect
 68 |         while (Int(j) < Int((((xs as! [[String: Any]])).count))) {
 69 |             var rest: [[String: Any]] = ([] as! [[String: Any]])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:68:35: warning: forced cast of '[[String : Any]]' to same type has no effect
 66 |     while (Int(i) < Int((((xs as! [[String: Any]])).count))) {
 67 |         var j = ((Int(i) + 1) as! Int)
 68 |         while (Int(j) < Int((((xs as! [[String: Any]])).count))) {
    |                                   `- warning: forced cast of '[[String : Any]]' to same type has no effect
 69 |             var rest: [[String: Any]] = ([] as! [[String: Any]])
 70 |             var k = 0

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:71:39: warning: forced cast of '[[String : Any]]' to same type has no effect
 69 |             var rest: [[String: Any]] = ([] as! [[String: Any]])
 70 |             var k = 0
 71 |             while (Int(k) < Int((((xs as! [[String: Any]])).count))) {
    |                                       `- warning: forced cast of '[[String : Any]]' to same type has no effect
 72 |                 if ((Int(k) != Int(i)) && (Int(k) != Int(j))) {
 73 |                     rest = (((rest as! [[String: Any]]) + [(xs[Int(k)] as! [String: Any])]) as! [[String: Any]])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:73:36: warning: forced cast of '[[String : Any]]' to same type has no effect
 71 |             while (Int(k) < Int((((xs as! [[String: Any]])).count))) {
 72 |                 if ((Int(k) != Int(i)) && (Int(k) != Int(j))) {
 73 |                     rest = (((rest as! [[String: Any]]) + [(xs[Int(k)] as! [String: Any])]) as! [[String: Any]])
    |                                    `- warning: forced cast of '[[String : Any]]' to same type has no effect
 74 |                 }
 75 |                 k = ((Int(k) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:73:72: warning: forced cast of '[String : Any]' to same type has no effect
 71 |             while (Int(k) < Int((((xs as! [[String: Any]])).count))) {
 72 |                 if ((Int(k) != Int(i)) && (Int(k) != Int(j))) {
 73 |                     rest = (((rest as! [[String: Any]]) + [(xs[Int(k)] as! [String: Any])]) as! [[String: Any]])
    |                                                                        `- warning: forced cast of '[String : Any]' to same type has no effect
 74 |                 }
 75 |                 k = ((Int(k) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:75:35: warning: forced cast of 'Int' to same type has no effect
 73 |                     rest = (((rest as! [[String: Any]]) + [(xs[Int(k)] as! [String: Any])]) as! [[String: Any]])
 74 |                 }
 75 |                 k = ((Int(k) + 1) as! Int)
    |                                   `- warning: forced cast of 'Int' to same type has no effect
 76 |             }
 77 |             let a = (xs[Int(i)] as! [String: Any])

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:77:33: warning: forced cast of '[String : Any]' to same type has no effect
 75 |                 k = ((Int(k) + 1) as! Int)
 76 |             }
 77 |             let a = (xs[Int(i)] as! [String: Any])
    |                                 `- warning: forced cast of '[String : Any]' to same type has no effect
 78 |             let b = (xs[Int(j)] as! [String: Any])
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:78:33: warning: forced cast of '[String : Any]' to same type has no effect
 76 |             }
 77 |             let a = (xs[Int(i)] as! [String: Any])
 78 |             let b = (xs[Int(j)] as! [String: Any])
    |                                 `- warning: forced cast of '[String : Any]' to same type has no effect
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:80:50: warning: forced cast of '[String : Any]' to same type has no effect
 78 |             let b = (xs[Int(j)] as! [String: Any])
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
    |                                                  `- warning: forced cast of '[String : Any]' to same type has no effect
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 82 |                     return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:80:82: warning: forced cast of '[String : Any]' to same type has no effect
 78 |             let b = (xs[Int(j)] as! [String: Any])
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
    |                                                                                  `- warning: forced cast of '[String : Any]' to same type has no effect
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 82 |                     return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:80:28: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 78 |             let b = (xs[Int(j)] as! [String: Any])
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
    |                            `- error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 82 |                     return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:81:88: error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                        |- error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
    |                                                                                        `- note: arguments to generic parameter 'Element' ('Any' and '[String : Any]') are expected to be equal
 82 |                     return true
 83 |                 }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:81:36: warning: forced cast of '[[String : Any]]' to same type has no effect
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                    `- warning: forced cast of '[[String : Any]]' to same type has no effect
 82 |                     return true
 83 |                 }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:81:88: warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                        `- warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 82 |                     return true
 83 |                 }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:81:100: warning: forced cast of 'Bool' to same type has no effect
 79 |             for op in ([Int(OP_ADD), Int(OP_SUB), Int(OP_MUL), Int(OP_DIV)] as! [Int]) {
 80 |                 var node = ["op": op, "left": (a as! [String: Any]), "right": (b as! [String: Any])]
 81 |                 if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                                    `- warning: forced cast of 'Bool' to same type has no effect
 82 |                     return true
 83 |                 }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:85:55: warning: forced cast of '[String : Any]' to same type has no effect
 83 |                 }
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
    |                                                       `- warning: forced cast of '[String : Any]' to same type has no effect
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 87 |                 return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:85:87: warning: forced cast of '[String : Any]' to same type has no effect
 83 |                 }
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
    |                                                                                       `- warning: forced cast of '[String : Any]' to same type has no effect
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 87 |                 return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:85:24: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 83 |                 }
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
    |                        `- error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 87 |                 return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:86:84: error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                    |- error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
    |                                                                                    `- note: arguments to generic parameter 'Element' ('Any' and '[String : Any]') are expected to be equal
 87 |                 return true
 88 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:86:32: warning: forced cast of '[[String : Any]]' to same type has no effect
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                `- warning: forced cast of '[[String : Any]]' to same type has no effect
 87 |                 return true
 88 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:86:84: warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                    `- warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 87 |                 return true
 88 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:86:96: warning: forced cast of 'Bool' to same type has no effect
 84 |             }
 85 |             var node = ["op": Int(OP_SUB), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 86 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                                `- warning: forced cast of 'Bool' to same type has no effect
 87 |                 return true
 88 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:89:51: warning: forced cast of '[String : Any]' to same type has no effect
 87 |                 return true
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
    |                                                   `- warning: forced cast of '[String : Any]' to same type has no effect
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 91 |                 return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:89:83: warning: forced cast of '[String : Any]' to same type has no effect
 87 |                 return true
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
    |                                                                                   `- warning: forced cast of '[String : Any]' to same type has no effect
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
 91 |                 return true

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:90:84: error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                    |- error: cannot convert value of type '[Any]' to expected argument type '[[String : Any]]'
    |                                                                                    `- note: arguments to generic parameter 'Element' ('Any' and '[String : Any]') are expected to be equal
 91 |                 return true
 92 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:90:32: warning: forced cast of '[[String : Any]]' to same type has no effect
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                `- warning: forced cast of '[[String : Any]]' to same type has no effect
 91 |                 return true
 92 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:90:84: warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                    `- warning: forced cast from '[[String : Any]]' to '[Any]' always succeeds; did you mean to use 'as'?
 91 |                 return true
 92 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:90:96: warning: forced cast of 'Bool' to same type has no effect
 88 |             }
 89 |             node = ["op": Int(OP_DIV), "left": (b as! [String: Any]), "right": (a as! [String: Any])]
 90 |             if (solve(((((rest as! [[String: Any]]) + [node]) as! [[String: Any]]) as! [Any])) as! Bool) {
    |                                                                                                `- warning: forced cast of 'Bool' to same type has no effect
 91 |                 return true
 92 |             }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:93:31: warning: forced cast of 'Int' to same type has no effect
 91 |                 return true
 92 |             }
 93 |             j = ((Int(j) + 1) as! Int)
    |                               `- warning: forced cast of 'Int' to same type has no effect
 94 |         }
 95 |         i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:95:27: warning: forced cast of 'Int' to same type has no effect
 93 |             j = ((Int(j) + 1) as! Int)
 94 |         }
 95 |         i = ((Int(i) + 1) as! Int)
    |                           `- warning: forced cast of 'Int' to same type has no effect
 96 |     }
 97 |     return false

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:106:30: warning: forced cast of '[[String : Any]]' to same type has no effect
104 |         while (Int(i) < Int(n_cards)) {
105 |             let n = (Int((Int(Int.random(in: 0..<Int.max)) % Int((Int(digit_range) - 1)))) + 1)
106 |             cards = (((cards as! [[String: Any]]) + [(newNum(Int(n)) as! [String: Any])]) as! [[String: Any]])
    |                              `- warning: forced cast of '[[String : Any]]' to same type has no effect
107 |             print((" " + String(String(Int(n)))))
108 |             i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:106:70: warning: forced cast of '[String : Any]' to same type has no effect
104 |         while (Int(i) < Int(n_cards)) {
105 |             let n = (Int((Int(Int.random(in: 0..<Int.max)) % Int((Int(digit_range) - 1)))) + 1)
106 |             cards = (((cards as! [[String: Any]]) + [(newNum(Int(n)) as! [String: Any])]) as! [[String: Any]])
    |                                                                      `- warning: forced cast of '[String : Any]' to same type has no effect
107 |             print((" " + String(String(Int(n)))))
108 |             i = ((Int(i) + 1) as! Int)

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:108:31: warning: forced cast of 'Int' to same type has no effect
106 |             cards = (((cards as! [[String: Any]]) + [(newNum(Int(n)) as! [String: Any])]) as! [[String: Any]])
107 |             print((" " + String(String(Int(n)))))
108 |             i = ((Int(i) + 1) as! Int)
    |                               `- warning: forced cast of 'Int' to same type has no effect
109 |         }
110 |         print(":  ")

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:111:28: warning: forced cast of '[[String : Any]]' to same type has no effect
109 |         }
110 |         print(":  ")
111 |         if (!(solve((cards as! [[String: Any]])) as! Bool)) {
    |                            `- warning: forced cast of '[[String : Any]]' to same type has no effect
112 |             print("No solution")
113 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:111:50: warning: forced cast of 'Bool' to same type has no effect
109 |         }
110 |         print(":  ")
111 |         if (!(solve((cards as! [[String: Any]])) as! Bool)) {
    |                                                  `- warning: forced cast of 'Bool' to same type has no effect
112 |             print("No solution")
113 |         }

/tmp/TestSwiftTranspiler_Rosetta_Golden3793344279/001/main.swift:114:33: warning: forced cast of 'Int' to same type has no effect
112 |             print("No solution")
113 |         }
114 |         iter = ((Int(iter) + 1) as! Int)
    |                                 `- warning: forced cast of 'Int' to same type has no effect
115 |     }
116 | }
