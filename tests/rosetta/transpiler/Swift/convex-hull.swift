// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:46:23 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    struct Point {
        var x: Int
        var y: Int
    }
    func ccw(_ a: Point, _ b: Point, _ c: Point) -> Bool {
        let lhs = (Int((b.x &- a.x)) &* Int((c.y &- a.y)))
        let rhs = (Int((b.y &- a.y)) &* Int((c.x &- a.x)))
        return (lhs > rhs)
    }
    func sortPoints(_ ps: [Point]) -> [Point] {
        var arr: [Point] = ps
        var n: Int = Int(((arr).count))
        var i: Int = 0
        while (i < n) {
            var j: Int = 0
            while (j < (n &- 1)) {
                let p = (arr[j] as! Point)
                let q = (arr[(j &+ 1)] as! Point)
                if ((p.x > q.x) || ((p.x == q.x) && (p.y > q.y))) {
                    arr[j] = (q as! Point)
                    arr[(j &+ 1)] = (p as! Point)
                }
                j = Int((j &+ 1))
            }
            i = Int((i &+ 1))
        }
        return arr
    }
    func convexHull(_ ps: inout [Point]) -> [Point] {
        ps = (sortPoints((ps as! [Point])) as! [Point])
        var h: [Point] = ([] as! [Point])
        for pt in ps {
            while ((Int(((h).count)) >= 2) && (ccw((h[(Int(((h).count)) &- 2)] as! Point), (h[(Int(((h).count)) &- 1)] as! Point), (pt as! Point)) == false)) {
                h = (Array(h[0..<(Int(((h).count)) &- 1)]) as! [Point])
            }
            h = (_append(h, pt) as! [Point])
        }
        var i: Int = (Int(((ps).count)) &- 2)
        let t = (Int(((h).count)) &+ 1)
        while (i >= 0) {
            let pt = (ps[i] as! Point)
            while ((Int(((h).count)) >= t) && (ccw((h[(Int(((h).count)) &- 2)] as! Point), (h[(Int(((h).count)) &- 1)] as! Point), (pt as! Point)) == false)) {
                h = (Array(h[0..<(Int(((h).count)) &- 1)]) as! [Point])
            }
            h = (_append(h, pt) as! [Point])
            i = Int((i &- 1))
        }
        return (Array(h[0..<(Int(((h).count)) &- 1)]) as! [Point])
    }
    func pointStr(_ p: Point) -> String {
        return (((("(" + _p(p.x)) + ",") + _p(p.y)) + ")")
    }
    func hullStr(_ h: [Point]) -> String {
        var s: String = "["
        var i: Int = 0
        while (i < Int(((h).count))) {
            s = ((s + String(describing: pointStr((h[i] as! Point)))) as! String)
            if (i < (Int(((h).count)) &- 1)) {
                s = ((s + " ") as! String)
            }
            i = Int((i &+ 1))
        }
        s = ((s + "]") as! String)
        return s
    }
    let pts: [Point] = ([Point(x: 16, y: 3), Point(x: 12, y: 17), Point(x: 0, y: 6), Point(x: -4, y: -6), Point(x: 16, y: 6), Point(x: 16, y: -7), Point(x: 16, y: -3), Point(x: 17, y: -4), Point(x: 5, y: 19), Point(x: 19, y: -8), Point(x: 3, y: 16), Point(x: 12, y: 13), Point(x: 3, y: -4), Point(x: 17, y: 5), Point(x: -3, y: 15), Point(x: -3, y: -9), Point(x: 0, y: 11), Point(x: -9, y: -3), Point(x: -4, y: -2), Point(x: 12, y: 10)] as! [Point])
    let hull: [Point] = (convexHull(&pts) as! [Point])
    print(_p(("Convex Hull: " + String(describing: hullStr((hull as! [Point]))))))
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
