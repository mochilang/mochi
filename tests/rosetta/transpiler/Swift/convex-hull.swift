// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:11:33 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
struct Point {
    var x: Int
    var y: Int
}
func ccw(_ a: Point, _ b: Point, _ c: Point) -> Bool {
    let lhs = (Int((b.x - a.x)) * Int((c.y - a.y)))
    let rhs = (Int((b.y - a.y)) * Int((c.x - a.x)))
    return (lhs > rhs)
}
func sortPoints(_ ps: [Point]) -> [Point] {
    var arr: [Point] = ps
    var n: Int = Int(((arr).count))
    var i: Int = 0
    while (i < n) {
        var j: Int = 0
        while (j < (n - 1)) {
            let p = (arr[j] as! Point)
            let q = (arr[(j + 1)] as! Point)
            if ((p.x > q.x) || ((p.x == q.x) && (p.y > q.y))) {
                arr[j] = (q as! Point)
                arr[(j + 1)] = (p as! Point)
            }
            j = ((j + 1) as! Int)
        }
        i = ((i + 1) as! Int)
    }
    return arr
}
func convexHull(_ ps: inout [Point]) -> [Point] {
    ps = (sortPoints((ps as! [Point])) as! [Point])
    var h: [Point] = ([] as! [Point])
    for pt in ps {
        while ((Int(((h).count)) >= 2) && (ccw((h[(Int(((h).count)) - 2)] as! Point), (h[(Int(((h).count)) - 1)] as! Point), (pt as! Point)) == false)) {
            h = (Array(h[0..<(Int(((h).count)) - 1)]) as! [Point])
        }
        h = (_append(h, pt) as! [Point])
    }
    var i: Int = (Int(((ps).count)) - 2)
    let t = (Int(((h).count)) + 1)
    while (i >= 0) {
        let pt = (ps[i] as! Point)
        while ((Int(((h).count)) >= t) && (ccw((h[(Int(((h).count)) - 2)] as! Point), (h[(Int(((h).count)) - 1)] as! Point), (pt as! Point)) == false)) {
            h = (Array(h[0..<(Int(((h).count)) - 1)]) as! [Point])
        }
        h = (_append(h, pt) as! [Point])
        i = ((i - 1) as! Int)
    }
    return (Array(h[0..<(Int(((h).count)) - 1)]) as! [Point])
}
func pointStr(_ p: Point) -> String {
    return (((("(" + _p(p.x)) + ",") + _p(p.y)) + ")")
}
func hullStr(_ h: [Point]) -> String {
    var s: String = "["
    var i: Int = 0
    while (i < Int(((h).count))) {
        s = ((s + String(describing: pointStr((h[i] as! Point)))) as! String)
        if (i < (Int(((h).count)) - 1)) {
            s = ((s + " ") as! String)
        }
        i = ((i + 1) as! Int)
    }
    s = ((s + "]") as! String)
    return s
}
let pts: [Point] = ([(Point(x: 16, y: 3) as! Any), (Point(x: 12, y: 17) as! Any), (Point(x: 0, y: 6) as! Any), (Point(x: -4, y: -6) as! Any), (Point(x: 16, y: 6) as! Any), (Point(x: 16, y: -7) as! Any), (Point(x: 16, y: -3) as! Any), (Point(x: 17, y: -4) as! Any), (Point(x: 5, y: 19) as! Any), (Point(x: 19, y: -8) as! Any), (Point(x: 3, y: 16) as! Any), (Point(x: 12, y: 13) as! Any), (Point(x: 3, y: -4) as! Any), (Point(x: 17, y: 5) as! Any), (Point(x: -3, y: 15) as! Any), (Point(x: -3, y: -9) as! Any), (Point(x: 0, y: 11) as! Any), (Point(x: -9, y: -3) as! Any), (Point(x: -4, y: -2) as! Any), (Point(x: 12, y: 10) as! Any)] as! [Point])
let hull: [Point] = (convexHull(&pts) as! [Point])
print(_p(("Convex Hull: " + String(describing: hullStr((hull as! [Point]))))))
