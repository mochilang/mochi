// Generated by Mochi transpiler v0.10.56 on 2025-08-03 23:08:32 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
func fuscVal(_ n: Int) -> Int {
    var a: Int = 1
    var b: Int = 0
    var x: Int = n
    while (x > 0) {
        if ((x % 2) == 0) {
            x = Int((x / 2))
            a = Int((a &+ b))
        } else {
            x = Int((Int((x &- 1)) / 2))
            b = Int((a &+ b))
        }
    }
    if (n == 0) {
        return 0
    }
    return b
}
func firstFusc(_ n: Int) -> [Int] {
    var arr: [Int] = ([] as! [Int])
    var i: Int = 0
    while (i < n) {
        arr = (_append(arr, Int(fuscVal((i as! Int)))) as! [Int])
        i = Int((i &+ 1))
    }
    return arr
}
func commatize(_ n: Int) -> String {
    var s: String = String(describing: n)
    var neg: Bool = false
    if (n < 0) {
        neg = true
        s = String(describing: String(Array(String(describing: (s as! String)))[1..<Int(((s).count))]))
    }
    var i: Int = (Int(((s).count)) &- 3)
    while (i >= 1) {
        s = (((String(describing: String(Array(String(describing: (s as! String)))[0..<(i as! Int)])) + ",") + String(describing: String(Array(String(describing: (s as! String)))[(i as! Int)..<Int(((s).count))]))) as! String)
        i = Int((i &- 3))
    }
    if neg {
        return ("-" + s)
    }
    return s
}
func padLeft(_ s: String, _ w: Int) -> String {
    var out: String = s
    while (Int(((out).count)) < w) {
        out = ((" " + out) as! String)
    }
    return out
}
func main() {
    print(_p("The first 61 fusc numbers are:"))
    print(_p(String(describing: (firstFusc(61) as! [Int]))))
    print(_p("\nThe fusc numbers whose length > any previous fusc number length are:"))
    let idxs: [Int] = ([0, 37, 1173, 35499, 699051, 19573419] as! [Int])
    var i: Int = 0
    while (i < Int(((idxs).count))) {
        let idx = (idxs[i] as! Int)
        let val = Int(fuscVal((idx as! Int)))
        let numStr = String(describing: padLeft(String(describing: commatize((val as! Int))), 7))
        let idxStr = String(describing: padLeft(String(describing: commatize((idx as! Int))), 10))
        print(_p((((numStr + " (index ") + idxStr) + ")")))
        i = Int((i &+ 1))
    }
}
_ = main()
