// Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:59:42 GMT+7
import Foundation

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func xor(_ a: Int, _ b: Int) -> Int {
    var res: Int = 0
    var bit: Int = 1
    var x: Int = a
    var y: Int = b
    while ((x > 0) || (y > 0)) {
        if ((Int(((x % 2) &+ (y % 2))) % 2) == 1) {
            res = Int((res &+ bit))
        }
        x = Int((x / 2))
        y = Int((y / 2))
        bit = Int((bit &* 2))
    }
    return res
}
func enc(_ b: Int) -> Int {
    return Int(xor((b as! Int), Int((b / 2))))
}
func dec(_ g: Int) -> Int {
    var b: Int = 0
    var x: Int = g
    while (x > 0) {
        b = Int(xor((b as! Int), (x as! Int)))
        x = Int((x / 2))
    }
    return b
}
func binary(_ n: Int) -> String {
    if (n == 0) {
        return "0"
    }
    var s: String = ""
    var x: Int = n
    while (x > 0) {
        if ((x % 2) == 1) {
            s = (("1" + s) as! String)
        } else {
            s = (("0" + s) as! String)
        }
        x = Int((x / 2))
    }
    return s
}
func pad5(_ s: String) -> String {
    var p: String = s
    while (Int(((p).count)) < 5) {
        p = (("0" + p) as! String)
    }
    return p
}
func main() {
    print(_p("decimal  binary   gray    decoded"))
    var b: Int = 0
    while (b < 32) {
        let g = Int(enc((b as! Int)))
        let d = Int(dec((g as! Int)))
        print(_p(((((((("  " + String(describing: pad5(String(describing: binary((b as! Int)))))) + "   ") + String(describing: pad5(String(describing: binary((g as! Int)))))) + "   ") + String(describing: pad5(String(describing: binary((d as! Int)))))) + "  ") + String(describing: d))))
        b = Int((b &+ 1))
    }
}
_ = main()
