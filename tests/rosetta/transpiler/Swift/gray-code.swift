// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:16:55 GMT+7
import Foundation
import Dispatch

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(DispatchTime.now().uptimeNanoseconds)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func xor(_ a: Int, _ b: Int) -> Int {
        var res: Int = 0
        var bit: Int = 1
        var x: Int = a
        var y: Int = b
        while ((x > 0) || (y > 0)) {
            if ((Int(((x % 2) &+ (y % 2))) % 2) == 1) {
                res = Int((res &+ bit))
            }
            x = Int((x / 2))
            y = Int((y / 2))
            bit = Int((bit &* 2))
        }
        return res
    }
    func enc(_ b: Int) -> Int {
        return Int(xor(b, (b / 2)))
    }
    func dec(_ g: Int) -> Int {
        var b: Int = 0
        var x: Int = g
        while (x > 0) {
            b = Int(xor(b, x))
            x = Int((x / 2))
        }
        return b
    }
    func binary(_ n: Int) -> String {
        if (n == 0) {
            return "0"
        }
        var s: String = ""
        var x: Int = n
        while (x > 0) {
            if ((x % 2) == 1) {
                s = (("1" + s) as! String)
            } else {
                s = (("0" + s) as! String)
            }
            x = Int((x / 2))
        }
        return s
    }
    func pad5(_ s: String) -> String {
        var p: String = s
        while (Int(((p).count)) < 5) {
            p = (("0" + p) as! String)
        }
        return p
    }
    func main() {
        print(_p("decimal  binary   gray    decoded"))
        var b: Int = 0
        while (b < 32) {
            let g = Int(enc(b))
            let d = Int(dec(g))
            print(_p(((((((("  " + String(describing: pad5(String(describing: binary(b))))) + "   ") + String(describing: pad5(String(describing: binary(g))))) + "   ") + String(describing: pad5(String(describing: binary(d))))) + "  ") + String(describing: d))))
            b = Int((b &+ 1))
        }
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
