// Generated by Mochi transpiler v0.10.50 on 2025-07-31 08:16:55 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func isPrime(_ n: Int) -> Bool {
        if (n < 2) {
            return false
        }
        if ((n % 2) == 0) {
            return (n == 2)
        }
        if ((n % 3) == 0) {
            return (n == 3)
        }
        var d: Int = 5
        while ((d * d) <= n) {
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 2) as! Int)
            if ((n % d) == 0) {
                return false
            }
            d = ((d + 4) as! Int)
        }
        return true
    }
    func bigTrim(_ a: inout [Int]) -> [Int] {
        var n: Int = Int(((a).count))
        while ((n > 1) && ((a[(n - 1)] as! Int) == 0)) {
            a = (Array(a[0..<(n - 1)]) as! [Int])
            n = ((n - 1) as! Int)
        }
        return (a as! [Int])
    }
    func bigFromInt(_ x: Int) -> [Int] {
        if (x == 0) {
            return ([(0 as! Any)] as! [Int])
        }
        var digits: [Int] = ([] as! [Int])
        var n: Int = x
        while (n > 0) {
            digits = (_append(digits, (n % 10)) as! [Int])
            n = ((n / 10) as! Int)
        }
        return (digits as! [Int])
    }
    func bigMulSmall(_ a: [Int], _ m: Int) -> [Int] {
        if (m == 0) {
            return ([(0 as! Any)] as! [Int])
        }
        var res: [Int] = ([] as! [Int])
        var carry: Int = 0
        var i: Int = 0
        while (i < Int(((a).count))) {
            var prod: Int = (((a[i] as! Int) * m) + carry)
            res = (_append(res, (prod % 10)) as! [Int])
            carry = ((prod / 10) as! Int)
            i = ((i + 1) as! Int)
        }
        while (carry > 0) {
            res = (_append(res, (carry % 10)) as! [Int])
            carry = ((carry / 10) as! Int)
        }
        return (bigTrim(&res) as! [Int])
    }
    func bigToString(_ a: [Int]) -> String {
        var s: String = ""
        var i: Int = (Int(((a).count)) - 1)
        while (i >= 0) {
            s = ((s + _p((a[i] as! Int))) as! String)
            i = ((i - 1) as! Int)
        }
        return (s as! String)
    }
    func pow2(_ k: Int) -> Int {
        var r: Int = 1
        var i: Int = 0
        while (i < k) {
            r = ((r * 2) as! Int)
            i = ((i + 1) as! Int)
        }
        return (r as! Int)
    }
    func ccFactors(_ n: Int, _ m: Int) -> [Int] {
        var p: Int = ((6 * m) + 1)
        if (!isPrime((p as! Int))) {
            return ([] as! [Int])
        }
        var prod: [Int] = (bigFromInt((p as! Int)) as! [Int])
        p = (((12 * m) + 1) as! Int)
        if (!isPrime((p as! Int))) {
            return ([] as! [Int])
        }
        prod = (bigMulSmall((prod as! [Int]), (p as! Int)) as! [Int])
        var i: Int = 1
        while (i <= (n - 2)) {
            p = ((Int(((Int(pow2((i as! Int))) * 9) * m)) + 1) as! Int)
            if (!isPrime((p as! Int))) {
                return ([] as! [Int])
            }
            prod = (bigMulSmall((prod as! [Int]), (p as! Int)) as! [Int])
            i = ((i + 1) as! Int)
        }
        return (prod as! [Int])
    }
    func ccNumbers(_ start: Int, _ end: Int) {
        var n: Int = start
        while (n <= end) {
            var m: Int = 1
            if (n > 4) {
                m = Int(pow2(((n - 4) as! Int)))
            }
            while true {
                let num: [Int] = (ccFactors((n as! Int), (m as! Int)) as! [Int])
                if (Int(((num).count)) > 0) {
                    print(_p(((("a(" + _p(n)) + ") = ") + String(describing: bigToString((num as! [Int]))))))
                    break
                }
                if (n <= 4) {
                    m = ((m + 1) as! Int)
                } else {
                    m = ((m + Int(pow2(((n - 4) as! Int)))) as! Int)
                }
            }
            n = ((n + 1) as! Int)
        }
    }
    _ = ccNumbers(3, 9)
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
