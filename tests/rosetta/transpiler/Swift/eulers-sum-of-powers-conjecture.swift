// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:42:32 GMT+7
import Foundation

func _p(_ v: Any?) -> String {
    if let val = v { return String(describing: val) }
    return "<nil>"
}

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
func _append<T>(_ xs: [T], _ v: T) -> [T] {
    var out = xs
    out.append(v)
    return out
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func eulerSum() -> [Int] {
        var pow5: [Int] = ([] as! [Int])
        var i: Int = 0
        while (i < 250) {
            pow5 = (_append(pow5, ((((i * i) * i) * i) * i)) as! [Int])
            i = Int((i + 1))
        }
        var sums: [Int: [Int]] = ([:] as! [Int: [Int]])
        var x2: Int = 2
        while (x2 < 250) {
            var x3: Int = 1
            while (x3 < x2) {
                let s = ((pow5[x2] as! Int) + (pow5[x3] as! Int))
                if (!(sums[s] != nil)) {
                    sums[s] = ([x2, x3] as! [Int])
                }
                x3 = Int((x3 + 1))
            }
            x2 = Int((x2 + 1))
        }
        var x0: Int = 4
        while (x0 < 250) {
            var x1: Int = 3
            while (x1 < x0) {
                var y: Int = (x0 + 1)
                while (y < 250) {
                    let rem = (((pow5[y] as! Int) - (pow5[x0] as! Int)) - (pow5[x1] as! Int))
                    if (sums[rem] != nil) {
                        let pair = sums[rem]!
                        let a = (pair[0] as! Int)
                        let b = (pair[1] as! Int)
                        if ((x1 > a) && (a > b)) {
                            return ([x0, x1, a, b, y] as! [Int])
                        }
                    }
                    y = Int((y + 1))
                }
                x1 = Int((x1 + 1))
            }
            x0 = Int((x0 + 1))
        }
        return ([0, 0, 0, 0, 0] as! [Int])
    }
    func main() {
        let r = (eulerSum() as! [Int])
        print(_p(((((((((_p((r[0] as! Int)) + " ") + _p((r[1] as! Int))) + " ") + _p((r[2] as! Int))) + " ") + _p((r[3] as! Int))) + " ") + _p((r[4] as! Int)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
