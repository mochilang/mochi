// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:18:44 GMT+7
import Foundation
import Dispatch
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

let stdout = FileHandle.standardOutput
extension FileHandle {
    func write(_ string: String) {
        if let data = string.data(using: .utf8) {
            self.write(data)
        }
    }
}

func _p(_ v: Any?) -> String {
    if let val = v {
        if let d = val as? Double {
            if d.rounded(.towardZero) == d {
                return String(Int64(d))
            }
        }
        return String(describing: val)
    }
    return "<nil>"
}

extension Double { init(_ v: Any) { if let d = v as? Double { self = d } else if let i = v as? Int { self = Double(i) } else if let i = v as? Int64 { self = Double(i) } else if let s = v as? String { self = Double(s) ?? 0 } else { self = 0 } } }
func _fetch(_ url: String) -> Any {
    let u = URL(string: url)!
    let data = try! Data(contentsOf: u)
    let obj = try! JSONSerialization.jsonObject(with: data, options: [])
    return obj
}
func _fetch_Todo(_ url: String) -> Todo {
    let u = URL(string: url)!
    let data = try! Data(contentsOf: u)
    return try! JSONDecoder().decode(Todo.self, from: data)
}
struct Todo: Codable {
    var userId: Int
    var id: Int
    var title: String
    var completed: Bool
    init() {
        self.userId = 0
        self.id = 0
        self.title = ""
        self.completed = false
    }
    init(userId: Int, id: Int, title: String, completed: Bool) {
        self.userId = userId
        self.id = id
        self.title = title
        self.completed = completed
    }
}
func main() {
    let todo: Todo = (_fetch_Todo("https://jsonplaceholder.typicode.com/todos/1") as! Todo)
    print(_p(todo.title))
}
_ = main()
