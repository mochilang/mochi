// Generated by Mochi transpiler v0.10.40 on 2025-07-25 21:10:12 GMT+7
import Foundation

var _nowSeed = 0
var _nowSeeded = false
func _now() -> Int {
    if !_nowSeeded {
        if let s = ProcessInfo.processInfo.environment["MOCHI_NOW_SEED"], let v = Int(s) {
            _nowSeed = v
            _nowSeeded = true
        }
    }
    if _nowSeeded {
        _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
        return _nowSeed
    }
    return Int(Date().timeIntervalSince1970 * 1_000_000_000)
}
func _mem() -> Int {
    if let status = try? String(contentsOfFile: "/proc/self/status") {
        for line in status.split(separator: "\n") {
            if line.hasPrefix("VmRSS:") {
                let parts = line.split(whereSeparator: { $0 == " " || $0 == "\t" })
                if parts.count >= 2, let kb = Int(parts[1]) {
                    return kb * 1024
                }
            }
        }
    }
    return 0
}
do {
    let _benchMemStart = _mem()
    let _benchStart = _now()
    func pow(_ base: Int, _ exp: Int) -> Int {
        var result = 1
        var i = 0
        while (i < exp) {
            result = ((result * base) as! Int)
            i = ((i + 1) as! Int)
        }
        return (result as! Int)
    }
    func ackermann2(_ m: Int, _ n: Int) -> Int {
        if (m == 0) {
            return ((n + 1) as! Int)
        }
        if (m == 1) {
            return ((n + 2) as! Int)
        }
        if (m == 2) {
            return (((2 * n) + 3) as! Int)
        }
        if (m == 3) {
            return (((8 * Int(pow(2, (n as! Int)))) - 3) as! Int)
        }
        if (n == 0) {
            return Int(ackermann2(((m - 1) as! Int), 1))
        }
        return Int(ackermann2(((m - 1) as! Int), Int(ackermann2((m as! Int), ((n - 1) as! Int)))))
    }
    func main() {
        print(("A(0, 0) = " + String(describing: Int(ackermann2(0, 0)))))
        print(("A(1, 2) = " + String(describing: Int(ackermann2(1, 2)))))
        print(("A(2, 4) = " + String(describing: Int(ackermann2(2, 4)))))
        print(("A(3, 4) = " + String(describing: Int(ackermann2(3, 4)))))
    }
    _ = main()
    let _benchEnd = _now()
    let _benchMemEnd = _mem()
    print("{\n  \"duration_us\": \((_benchEnd - _benchStart) / 1000),\n  \"memory_bytes\": \(_benchMemEnd - _benchMemStart),\n  \"name\": \"main\"\n}")
}
