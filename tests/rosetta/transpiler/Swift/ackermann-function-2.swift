// Generated by Mochi transpiler v0.10.39 on 2025-07-25 09:14:36 GMT+7
import Foundation

func pow(_ base: Int, _ exp: Int) -> Int {
    var result = 1
    var i = 0
    while (i < exp) {
        result = ((result * base) as! Int)
        i = ((i + 1) as! Int)
    }
    return (result as! Int)
}
func ackermann2(_ m: Int, _ n: Int) -> Int {
    if (m == 0) {
        return ((n + 1) as! Int)
    }
    if (m == 1) {
        return ((n + 2) as! Int)
    }
    if (m == 2) {
        return (((2 * n) + 3) as! Int)
    }
    if (m == 3) {
        return (((8 * Int(pow(2, (n as! Int)))) - 3) as! Int)
    }
    if (n == 0) {
        return Int(ackermann2(((m - 1) as! Int), 1))
    }
    return Int(ackermann2(((m - 1) as! Int), Int(ackermann2((m as! Int), ((n - 1) as! Int)))))
}
func main() {
    print(("A(0, 0) = " + String(describing: Int(ackermann2(0, 0)))))
    print(("A(1, 2) = " + String(describing: Int(ackermann2(1, 2)))))
    print(("A(2, 4) = " + String(describing: Int(ackermann2(2, 4)))))
    print(("A(3, 4) = " + String(describing: Int(ackermann2(3, 4)))))
}
_ = main()
