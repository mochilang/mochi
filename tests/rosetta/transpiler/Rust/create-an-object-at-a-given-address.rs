// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn listStr(mut xs: Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if (i < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn pointerDemo() {
    println!("{}", "Pointer:");
    let mut i: i64 = 0;
    println!("{}", "Before:");
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "\t<address>: ", i.to_string()), ", "), i.to_string()));
    i = 3;
    println!("{}", "After:");
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "\t<address>: ", i.to_string()), ", "), i.to_string()));
};
    fn sliceDemo() {
    println!("{}", "Slice:");
    let mut a: Vec<i64> = vec![];
    for _ in 0..10 {
        a = { let mut _v = a.clone(); _v.push(0); _v };
    }
    let mut s: Vec<i64> = a;
    println!("{}", "Before:");
    println!("{}", format!("{}{}", "\ts: ", listStr(s.clone())));
    println!("{}", format!("{}{}", "\ta: ", listStr(a.clone())));
    let mut data: Vec<i64> = vec![65, 32, 115, 116, 114, 105, 110, 103, 46];
    let mut idx: i64 = 0;
    while (idx < (data.len() as i64)) {
        s[idx as usize] = data[idx as usize];
        idx = (idx + 1);
    }
    println!("{}", "After:");
    println!("{}", format!("{}{}", "\ts: ", listStr(s.clone())));
    println!("{}", format!("{}{}", "\ta: ", listStr(a.clone())));
};
    pointerDemo();
    println!("{}", "");
    sliceDemo();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
