// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
};
    fn pow_big(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
};
    fn parseBigInt(str: &str) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && ({ let tmp = &str; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    while (i < (str.len() as i64)) {
        let mut ch: String = { let tmp = &str; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        let mut d = { let n: i64 = ch.parse().unwrap(); n };
        n = ((n * 10) + d);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
    fn fermat(mut n: i64) -> i64 {
    let mut p: i64 = pow_int(2, n);
    return (pow_big(2, p) + 1)
};
    fn primeFactorsBig(mut n: i64) -> Vec<i64> {
    let mut factors: Vec<i64> = vec![];
    let mut m: i64 = n;
    let mut d: i64 = 2;
    while ((m % d) == 0) {
        factors = { let mut _v = factors.clone(); _v.push(d); _v };
        m = (m / d);
    }
    d = 3;
    while ((d * d) <= m) {
        while ((m % d) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(d); _v };
            m = (m / d);
        }
        d = (d + 2);
    }
    if (m > 1) {
        factors = { let mut _v = factors.clone(); _v.push(m); _v };
    }
    return factors
};
    fn show_list(mut xs: Vec<i64>) -> String {
    let mut line = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        line = format!("{}{}", line, xs[i as usize].to_string());
        if (i < ((xs.len() as i64) - 1)) {
            line = format!("{}{}", line, " ");
        }
        i = (i + 1);
    }
    return line.clone()
};
    fn mochi_main() {
    let mut nums: Vec<i64> = vec![];
    for i in 0..8 {
        nums = { let mut _v = nums.clone(); _v.push(fermat(i)); _v };
    }
    println!("{}", "First 8 Fermat numbers:");
    for n in nums.clone() {
        println!("{}", n.to_string());
    }
    let mut extra: HashMap<i64, Vec<i64>> = HashMap::from([(6, vec![274177, 67280421310721]), (7, vec![parseBigInt(&"59649589127497217"), parseBigInt(&"5704689200685129054721")])]);
    println!("{}", "\nFactors:");
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut facs: Vec<i64> = vec![];
        if (i <= 5) {
            facs = primeFactorsBig(nums[i as usize]);
        } else {
            facs = extra[&i].clone();
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "F", i.to_string()), " = "), show_list(facs.clone())));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
