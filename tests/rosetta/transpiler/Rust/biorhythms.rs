// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_TWO_PI: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_TWO_PI = 6.283185307179586;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_PI: f64 = 0.0;;
        static mut g_TWO_PI: f64 = 0.0;;
        unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 8) {
        let denom: f64 = (((2 * n) * ((2 * n) + 1)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn floor(mut x: f64) -> f64 {
    let mut i: i64 = (x as i64);
    if ((i as f64) > x) {
        i = (i - 1);
    }
    return (i as f64)
};
        unsafe fn absFloat(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
        unsafe fn absInt(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
        unsafe fn parseIntStr(mut str: String) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string().as_str()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
        unsafe fn parseDate(mut s: String) -> Vec<i64> {
    let y: i64 = parseIntStr(s[0 as usize..4 as usize].to_string());
    let m: i64 = parseIntStr(s[5 as usize..7 as usize].to_string());
    let d: i64 = parseIntStr(s[8 as usize..10 as usize].to_string());
    return vec![y, m, d]
};
        unsafe fn leap(mut y: i64) -> bool {
    if ((y % 400) == 0) {
        return true
    }
    if ((y % 100) == 0) {
        return false
    }
    return ((y % 4) == 0)
};
        unsafe fn daysInMonth(mut y: i64, mut m: i64) -> i64 {
    let feb: i64 = if leap(y) { 29 } else { 28 };
    let mut lengths: Vec<i64> = vec![31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return lengths[(m - 1) as usize]
};
        unsafe fn addDays(mut y: i64, mut m: i64, mut d: i64, mut n: i64) -> Vec<i64> {
    let mut yy: i64 = y;
    let mut mm: i64 = m;
    let mut dd: i64 = d;
    if (n >= 0) {
        let mut i: i64 = 0;
        while (i < n) {
            dd = (dd + 1);
            if (dd > daysInMonth(yy, mm)) {
                dd = 1;
                mm = (mm + 1);
                if (mm > 12) {
                    mm = 1;
                    yy = (yy + 1);
                }
            }
            i = (i + 1);
        }
    } else {
        let mut i: i64 = 0;
        while (i > n) {
            dd = (dd - 1);
            if (dd < 1) {
                mm = (mm - 1);
                if (mm < 1) {
                    mm = 12;
                    yy = (yy - 1);
                }
                dd = daysInMonth(yy, mm);
            }
            i = (i - 1);
        }
    }
    return vec![yy, mm, dd]
};
        unsafe fn pad2(mut n: i64) -> String {
    if (n < 10) {
        return format!("{}{}", "0", n.to_string())
    }
    return n.to_string().to_string().clone()
};
        unsafe fn dateString(mut y: i64, mut m: i64, mut d: i64) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", y.to_string(), "-"), pad2(m)), "-"), pad2(d)).to_string().clone()
};
        unsafe fn day(mut y: i64, mut m: i64, mut d: i64) -> i64 {
    let part1: i64 = (367 * y);
    let part2: i64 = ((7 * (y + ((m + 9) / 12))) / 4);
    let part3: i64 = ((275 * m) / 9);
    return ((((part1 - part2) + part3) + d) - 730530)
};
        unsafe fn biorhythms(mut birth: String, mut target: String) {
    let mut bparts: Vec<i64> = parseDate(birth);
    let by: i64 = bparts[0 as usize];
    let bm: i64 = bparts[1 as usize];
    let bd: i64 = bparts[2 as usize];
    let mut tparts: Vec<i64> = parseDate(target);
    let ty: i64 = tparts[0 as usize];
    let tm: i64 = tparts[1 as usize];
    let td: i64 = tparts[2 as usize];
    let diff: i64 = absInt((day(ty, tm, td) - day(by, bm, bd)));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Born ", birth), ", Target "), target));
    println!("{}", format!("{}{}", "Day ", diff.to_string()));
    let mut cycles: Vec<String> = vec![String::from("Physical day "), String::from("Emotional day"), String::from("Mental day   ")];
    let mut lengths: Vec<i64> = vec![23, 28, 33];
    let mut quadrants: Vec<Vec<String>> = vec![vec![String::from("up and rising"), String::from("peak")], vec![String::from("up but falling"), String::from("transition")], vec![String::from("down and falling"), String::from("valley")], vec![String::from("down but rising"), String::from("transition")]];
    let mut i: i64 = 0;
    while (i < 3) {
        let length: i64 = lengths[i as usize];
        let cycle: String = cycles[i as usize].clone().clone();
        let position: i64 = (diff % length);
        let quadrant: i64 = ((position * 4) / length);
        let mut percent: f64 = sinApprox((((2.0 * g_PI) * (position as f64)) / (length as f64)));
        percent = (floor((percent * 1000.0)) / 10.0);
        let mut description = String::from("");
        if (percent > 95.0) {
            description = String::from(" peak");
        } else if (percent < -95.0) {
            description = String::from(" valley");
        } else if (absFloat(percent) < 5.0) {
            description = String::from(" critical transition");
        } else {
            let daysToAdd: i64 = ((((quadrant + 1) * length) / 4) - position);
            let mut res: Vec<i64> = addDays(ty, tm, td, daysToAdd);
            let ny: i64 = res[0 as usize];
            let nm: i64 = res[1 as usize];
            let nd: i64 = res[2 as usize];
            let transition: String = dateString(ny, nm, nd).clone();
            let trend: String = quadrants[quadrant as usize].clone()[0 as usize].clone().clone();
            let next: String = quadrants[quadrant as usize].clone()[1 as usize].clone().clone();
            let mut pct = percent.to_string();
            if !contains(pct, ".") {
                pct = format!("{}{}", pct, ".0");
            }
            description = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", " ", pct), "% ("), trend), ", next "), next), " "), transition), ")");
        }
        let mut posStr = position.to_string();
        if (position < 10) {
            posStr = format!("{}{}", " ", posStr);
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", cycle, posStr), " : "), description));
        i = (i + 1);
    }
    println!("{}", "");
};
        unsafe fn mochi_main() {
    let mut pairs: Vec<Vec<String>> = vec![vec![String::from("1943-03-09"), String::from("1972-07-11")], vec![String::from("1809-01-12"), String::from("1863-11-19")], vec![String::from("1809-02-12"), String::from("1863-11-19")]];
    let mut idx: i64 = 0;
    while (idx < (pairs.len() as i64)) {
        let mut p: Vec<String> = pairs[idx as usize].clone();
        biorhythms(p[0 as usize].clone(), p[1 as usize].clone());
        idx = (idx + 1);
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
