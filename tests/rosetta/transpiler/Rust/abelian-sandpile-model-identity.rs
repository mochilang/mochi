// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_s4: Vec<i64> = Vec::new();
static mut g_s1: Vec<i64> = Vec::new();
static mut g_s2: Vec<i64> = Vec::new();
static mut g_s3_a: Vec<i64> = Vec::new();
static mut g_s3_b: Vec<i64> = Vec::new();
static mut g_s3: Vec<i64> = Vec::new();
static mut g_s3_id: Vec<i64> = Vec::new();
static mut g_s4b: Vec<i64> = Vec::new();
static mut g_s5: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_s4 = vec![4, 3, 3, 3, 1, 2, 0, 2, 3];
        g_s1 = vec![1, 2, 0, 2, 1, 1, 0, 1, 3];
        g_s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
        g_s3_a = plus(g_s1.clone().clone(), g_s2.clone().clone());
        g_s3_b = plus(g_s2.clone().clone(), g_s1.clone().clone());
        g_s3 = vec![3, 3, 3, 3, 3, 3, 3, 3, 3];
        g_s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
        g_s4b = plus(g_s3.clone().clone(), g_s3_id.clone().clone());
        g_s5 = plus(g_s3_id.clone().clone(), g_s3_id.clone().clone());
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn neighborsList() -> Vec<Vec<i64>> {
    return vec![vec![1, 3], vec![0, 2, 4], vec![1, 5], vec![0, 4, 6], vec![1, 3, 5, 7], vec![2, 4, 8], vec![3, 7], vec![4, 6, 8], vec![5, 7]]
};
        unsafe fn plus(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        res = { let mut _v = res.clone(); _v.push((a[i as usize] + b[i as usize])); _v };
        i = (i + 1);
    }
    return res
};
        unsafe fn isStable(mut p: Vec<i64>) -> bool {
    for v in p.clone() {
        if (v > 3) {
            return false
        }
    }
    return true
};
        unsafe fn topple(p: &mut Vec<i64>) -> i64 {
    let mut neighbors: Vec<Vec<i64>> = neighborsList();
    let mut i: i64 = 0;
    while (i < (p.len() as i64)) {
        if (p[i as usize] > 3) {
            (*p)[i as usize] = (p[i as usize] - 4);
            let mut nbs: Vec<i64> = neighbors[i as usize].clone();
            for j in nbs.clone() {
                (*p)[j as usize] = (p[j as usize] + 1);
            }
            return 0
        }
        i = (i + 1);
    }
    return 0
};
        unsafe fn pileString(mut p: Vec<i64>) -> String {
    let mut s: String = String::from("").clone();
    let mut r: i64 = 0;
    while (r < 3) {
        let mut c: i64 = 0;
        while (c < 3) {
            s = format!("{}{}", format!("{}{}", s, p[((3 * r) + c) as usize].to_string()), " ");
            c = (c + 1);
        }
        s = format!("{}{}", s, "\n");
        r = (r + 1);
    }
    return s.clone()
};
        println!("{}", "Avalanche of topplings:\n");
        static mut g_s4: Vec<i64> = Vec::new();;
        println!("{}", pileString(g_s4.clone().clone()));
        while !isStable(g_s4.clone().clone()) {
            topple(&mut g_s4);
            println!("{}", pileString(g_s4.clone().clone()));
        }
        println!("{}", "Commutative additions:\n");
        static mut g_s1: Vec<i64> = Vec::new();;
        static mut g_s2: Vec<i64> = Vec::new();;
        static mut g_s3_a: Vec<i64> = Vec::new();;
        while !isStable(g_s3_a.clone().clone()) {
            topple(&mut g_s3_a);
        }
        static mut g_s3_b: Vec<i64> = Vec::new();;
        while !isStable(g_s3_b.clone().clone()) {
            topple(&mut g_s3_b);
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(g_s1.clone().clone()), "\nplus\n\n"), pileString(g_s2.clone().clone())), "\nequals\n\n"), pileString(g_s3_a.clone().clone())));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "and\n\n", pileString(g_s2.clone().clone())), "\nplus\n\n"), pileString(g_s1.clone().clone())), "\nalso equals\n\n"), pileString(g_s3_b.clone().clone())));
        println!("{}", "Addition of identity sandpile:\n");
        static mut g_s3: Vec<i64> = Vec::new();;
        static mut g_s3_id: Vec<i64> = Vec::new();;
        static mut g_s4b: Vec<i64> = Vec::new();;
        while !isStable(g_s4b.clone().clone()) {
            topple(&mut g_s4b);
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(g_s3.clone().clone()), "\nplus\n\n"), pileString(g_s3_id.clone().clone())), "\nequals\n\n"), pileString(g_s4b.clone().clone())));
        println!("{}", "Addition of identities:\n");
        static mut g_s5: Vec<i64> = Vec::new();;
        while !isStable(g_s5.clone().clone()) {
            topple(&mut g_s5);
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(g_s3_id.clone().clone()), "\nplus\n\n"), pileString(g_s3_id.clone().clone())), "\nequals\n\n"), pileString(g_s5.clone().clone())));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
