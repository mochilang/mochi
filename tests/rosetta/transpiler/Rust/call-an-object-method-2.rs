// Generated by Mochi transpiler v0.10.57 on 2025-08-04 20:58 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Box {
    Contents: String,
    secret: i64,
}
impl std::fmt::Display for Box {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"Contents\": \"{}\"", self.Contents)?;
        write!(f, ", ")?;
        write!(f, "\"secret\": {}", self.secret)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn newFactory() -> Vec<i64> {
    let mut sn: i64 = 0;
    let New = move || -> Box {
    sn = (sn + 1);
    let mut b: Box = Box {Contents: Default::default(), secret: sn};
    if (sn == 1) {
        b.Contents = String::from("rabbit");
    } else if (sn == 2) {
        b.Contents = String::from("rock");
    }
    return b
};
    let Count = move || -> i64 {
    return sn
};
    return vec![0, 0]
};
    let mut funcs: Vec<i64> = newFactory();
    let mut New: i64 = funcs[0 as usize];
    let mut Count: i64 = funcs[1 as usize];
    fn Box_TellSecret(mut self_: Box) -> i64 {
    return self_.secret
};
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
