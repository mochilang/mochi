// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:40 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn xor(mut a: i64, mut b: i64) -> i64 {
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    let mut x: i64 = a;
    let mut y: i64 = b;
    while ((x > 0) || (y > 0)) {
        if ((((x % 2) + (y % 2)) % 2) == 1) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return res
};
    fn enc(mut b: i64) -> i64 {
    return xor(b, (b / 2))
};
    fn dec(mut g: i64) -> i64 {
    let mut b: i64 = 0;
    let mut x: i64 = g;
    while (x > 0) {
        b = xor(b, x);
        x = (x / 2);
    }
    return b
};
    fn binary(mut n: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut s: String = String::from("").clone();
    let mut x: i64 = n;
    while (x > 0) {
        if ((x % 2) == 1) {
            s = format!("{}{}", "1", s);
        } else {
            s = format!("{}{}", "0", s);
        }
        x = (x / 2);
    }
    return s.clone()
};
    fn pad5(s: &str) -> String {
    let mut p: String = s.to_string().clone();
    while ((p.len() as i64) < 5) {
        p = format!("{}{}", "0", p);
    }
    return p.clone()
};
    fn mochi_main() {
    println!("{}", "decimal  binary   gray    decoded");
    let mut b: i64 = 0;
    while (b < 32) {
        let mut g: i64 = enc(b);
        let mut d: i64 = dec(g);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  ", pad5(&binary(b))), "   "), pad5(&binary(g))), "   "), pad5(&binary(d))), "  "), d.to_string()));
        b = (b + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
