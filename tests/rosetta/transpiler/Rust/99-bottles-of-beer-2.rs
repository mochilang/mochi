// Generated by Mochi transpiler v0.10.40 on 2025-07-26 00:08 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn fields(mut s: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut cur = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
            if ((cur.len() as i64) > 0) {
                words = { let mut v = words.clone(); v.push(String::from(cur)); v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        words = { let mut v = words.clone(); v.push(String::from(cur)); v };
    }
    return words
};
    fn join(mut xs: Vec<String>, mut sep: String) -> String {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, sep);
        }
        res = format!("{}{}", res, xs[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
    fn numberName(mut n: i64) -> String {
    let mut small: Vec<String> = vec![String::from("no"), String::from("one"), String::from("two"), String::from("three"), String::from("four"), String::from("five"), String::from("six"), String::from("seven"), String::from("eight"), String::from("nine"), String::from("ten"), String::from("eleven"), String::from("twelve"), String::from("thirteen"), String::from("fourteen"), String::from("fifteen"), String::from("sixteen"), String::from("seventeen"), String::from("eighteen"), String::from("nineteen")];
    let mut tens: Vec<String> = vec![String::from("ones"), String::from("ten"), String::from("twenty"), String::from("thirty"), String::from("forty"), String::from("fifty"), String::from("sixty"), String::from("seventy"), String::from("eighty"), String::from("ninety")];
    if (n < 0) {
        return String::from("")
    }
    if (n < 20) {
        return small[n as usize].clone()
    }
    if (n < 100) {
        let mut t: String = tens[(n / 10) as usize].clone().clone();
        let mut s: i64 = (n % 10);
        if (s > 0) {
            t = format!("{}{}", format!("{}{}", t, " "), small[s as usize].clone());
        }
        return t
    }
    return String::from("").clone()
};
    fn pluralizeFirst(mut s: String, mut n: i64) -> String {
    if (n == 1) {
        return s
    }
    let mut w: Vec<String> = fields(s);
    if ((w.len() as i64) > 0) {
        w[0 as usize] = format!("{}{}", w[0 as usize].clone(), "s");
    }
    return join(w.clone(), String::from(" ")).clone()
};
    fn randInt(mut seed: i64, mut n: i64) -> i64 {
    let next: i64 = (((seed * 1664525) + 1013904223) % 2147483647);
    return (next % n)
};
    fn slur(mut p: String, mut d: i64) -> String {
    if ((p.len() as i64) <= 2) {
        return p
    }
    let mut a: Vec<String> = vec![];
    let mut i: i64 = 1;
    while (i < ((p.len() as i64) - 1)) {
        a = { let mut v = a.clone(); v.push(String::from({ let tmp = &p; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() })); v };
        i = (i + 1);
    }
    let mut idx = ((a.len() as i64) - 1);
    let mut seed: i64 = d;
    while (idx >= 1) {
        seed = (((seed * 1664525) + 1013904223) % 2147483647);
        if ((seed % 100) >= d) {
            let j: i64 = (seed % (idx + 1));
            let tmp: String = a[idx as usize].clone().clone();
            a[idx as usize] = a[j as usize].clone();
            a[j as usize] = tmp;
        }
        idx = (idx - 1);
    }
    let mut s: String = { let tmp = &p; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.clone();
    let mut k: i64 = 0;
    while (k < (a.len() as i64)) {
        s = format!("{}{}", s, a[k as usize].clone());
        k = (k + 1);
    }
    s = format!("{}{}", s, { let tmp = &p; tmp.chars().skip(((p.len() as i64) - 1) as usize).take(((p.len() as i64) - ((p.len() as i64) - 1)) as usize).collect::<String>() });
    let mut w: Vec<String> = fields(s);
    return join(w.clone(), String::from(" ")).clone()
};
    fn mochi_main() {
    let mut i: i64 = 99;
    while (i > 0) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), i)), " "), slur(String::from("beer on the wall"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), i)), " "), slur(String::from("beer"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(String::from("take one"), i), " "), slur(String::from("down"), i)), " "), slur(String::from("pass it around"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName((i - 1)), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), (i - 1))), " "), slur(String::from("beer on the wall"), i)));
        i = (i - 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _end_mem;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
