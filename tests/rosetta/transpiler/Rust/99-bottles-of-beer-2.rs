// Generated by Mochi transpiler v0.10.39 on 2025-07-24 20:52 +0700
fn fields(mut s: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut cur = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = String::from(&s[i as usize .. (i + 1) as usize]).clone();
        if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
            if ((cur.len() as i64) > 0) {
                words = { let mut v = words.clone(); v.push(cur); v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        words = { let mut v = words.clone(); v.push(cur); v };
    }
    return words
}

fn join(mut xs: Vec<String>, mut sep: String) -> String {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, sep);
        }
        res = format!("{}{}", res, xs[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
}

fn numberName(mut n: i64) -> String {
    let mut small: Vec<String> = vec![String::from("no"), String::from("one"), String::from("two"), String::from("three"), String::from("four"), String::from("five"), String::from("six"), String::from("seven"), String::from("eight"), String::from("nine"), String::from("ten"), String::from("eleven"), String::from("twelve"), String::from("thirteen"), String::from("fourteen"), String::from("fifteen"), String::from("sixteen"), String::from("seventeen"), String::from("eighteen"), String::from("nineteen")];
    let mut tens: Vec<String> = vec![String::from("ones"), String::from("ten"), String::from("twenty"), String::from("thirty"), String::from("forty"), String::from("fifty"), String::from("sixty"), String::from("seventy"), String::from("eighty"), String::from("ninety")];
    if (n < 0) {
        return String::from("")
    }
    if (n < 20) {
        return small[n as usize].clone()
    }
    if (n < 100) {
        let mut t: String = tens[(n / 10) as usize].clone().clone();
        let mut s: i64 = (n % 10);
        if (s > 0) {
            t = format!("{}{}", format!("{}{}", t, " "), small[s as usize].clone());
        }
        return t
    }
    return String::from("").to_string()
}

fn pluralizeFirst(mut s: String, mut n: i64) -> String {
    if (n == 1) {
        return s
    }
    let mut w: Vec<String> = fields(s);
    if ((w.len() as i64) > 0) {
        w[0 as usize] = format!("{}{}", w[0 as usize].clone(), "s");
    }
    return join(w, String::from(" ")).clone()
}

fn randInt(mut seed: i64, mut n: i64) -> i64 {
    let next: i64 = (((seed * 1664525) + 1013904223) % 2147483647);
    return (next % n)
}

fn slur(mut p: String, mut d: i64) -> String {
    if ((p.len() as i64) <= 2) {
        return p
    }
    let mut a: Vec<String> = vec![];
    let mut i: i64 = 1;
    while (i < ((p.len() as i64) - 1)) {
        a = { let mut v = a.clone(); v.push(String::from(&p[i as usize .. (i + 1) as usize])); v };
        i = (i + 1);
    }
    let mut idx = ((a.len() as i64) - 1);
    let mut seed: i64 = d;
    while (idx >= 1) {
        seed = (((seed * 1664525) + 1013904223) % 2147483647);
        if ((seed % 100) >= d) {
            let j: i64 = (seed % (idx + 1));
            let tmp: String = a[idx as usize].clone().clone();
            a[idx as usize] = a[j as usize].clone();
            a[j as usize] = tmp;
        }
        idx = (idx - 1);
    }
    let mut s: String = String::from(&p[0 as usize .. 1 as usize]).clone();
    let mut k: i64 = 0;
    while (k < (a.len() as i64)) {
        s = format!("{}{}", s, a[k as usize].clone());
        k = (k + 1);
    }
    s = format!("{}{}", s, String::from(&p[((p.len() as i64) - 1) as usize .. (p.len() as i64) as usize]));
    let mut w: Vec<String> = fields(s);
    return join(w, String::from(" ")).clone()
}

fn mochi_main() {
    let mut i: i64 = 99;
    while (i > 0) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), i)), " "), slur(String::from("beer on the wall"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), i)), " "), slur(String::from("beer"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(String::from("take one"), i), " "), slur(String::from("down"), i)), " "), slur(String::from("pass it around"), i)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName((i - 1)), i), " "), pluralizeFirst(slur(String::from("bottle of"), i), (i - 1))), " "), slur(String::from("beer on the wall"), i)));
        i = (i - 1);
    }
}

fn main() {
    mochi_main();
}
