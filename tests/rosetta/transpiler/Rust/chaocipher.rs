// Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:01 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn indexOf(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s[i as usize..(i + 1) as usize].to_string() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn rotate(s: &str, mut n: i64) -> String {
    return format!("{}{}", s[n as usize..].to_string(), s[0..n as usize].to_string()).clone()
};
    fn scrambleLeft(s: &str) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", s[0 as usize..1 as usize].to_string(), s[2 as usize..14 as usize].to_string()), s[1 as usize..2 as usize].to_string()), s[14 as usize..].to_string()).clone()
};
    fn scrambleRight(s: &str) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s[1 as usize..3 as usize].to_string(), s[4 as usize..15 as usize].to_string()), s[3 as usize..4 as usize].to_string()), s[15 as usize..].to_string()), s[0 as usize..1 as usize].to_string()).clone()
};
    fn chao(text: &str, mut encode: bool) -> String {
    let mut left: String = String::from("HXUCZVAMDSLKPEFJRIGTWOBNYQ").clone();
    let mut right: String = String::from("PTLNBQDEOYSFAVZKGJRIHWXUMC").clone();
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (text.len() as i64)) {
        let mut ch: String = text[i as usize..(i + 1) as usize].to_string().clone();
        let mut idx: i64 = 0;
        if encode {
            idx = indexOf(&right, &ch);
            out = format!("{}{}", out, left[idx as usize..(idx + 1) as usize].to_string());
        } else {
            idx = indexOf(&left, &ch);
            out = format!("{}{}", out, right[idx as usize..(idx + 1) as usize].to_string());
        }
        left = rotate(&left, idx);
        right = rotate(&right, idx);
        left = scrambleLeft(&left);
        right = scrambleRight(&right);
        i = (i + 1);
    }
    return out.clone()
};
    fn mochi_main() {
    let mut plain: String = String::from("WELLDONEISBETTERTHANWELLSAID").clone();
    let mut cipher: String = chao(&plain, true).clone();
    println!("{}", plain);
    println!("{}", cipher);
    println!("{}", chao(&cipher, false));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
