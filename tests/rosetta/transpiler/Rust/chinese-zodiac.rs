// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:37 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Info {
    animal: String,
    yinYang: String,
    element: String,
    stemBranch: String,
    cycle: i64,
}
impl std::fmt::Display for Info {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"animal\": \"{}\"", self.animal)?;
        write!(f, ", ")?;
        write!(f, "\"yinYang\": \"{}\"", self.yinYang)?;
        write!(f, ", ")?;
        write!(f, "\"element\": \"{}\"", self.element)?;
        write!(f, ", ")?;
        write!(f, "\"stemBranch\": \"{}\"", self.stemBranch)?;
        write!(f, ", ")?;
        write!(f, "\"cycle\": {}", self.cycle)?;
        write!(f, "}}")
    }
}

static mut g_animal: Vec<String> = Vec::new();
static mut g_yinYang: Vec<String> = Vec::new();
static mut g_element: Vec<String> = Vec::new();
static mut g_stemChArr: Vec<String> = Vec::new();
static mut g_branchChArr: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_animal = vec![String::from("Rat"), String::from("Ox"), String::from("Tiger"), String::from("Rabbit"), String::from("Dragon"), String::from("Snake"), String::from("Horse"), String::from("Goat"), String::from("Monkey"), String::from("Rooster"), String::from("Dog"), String::from("Pig")];
        g_yinYang = vec![String::from("Yang"), String::from("Yin")];
        g_element = vec![String::from("Wood"), String::from("Fire"), String::from("Earth"), String::from("Metal"), String::from("Water")];
        g_stemChArr = vec![String::from("甲"), String::from("乙"), String::from("丙"), String::from("丁"), String::from("戊"), String::from("己"), String::from("庚"), String::from("辛"), String::from("壬"), String::from("癸")];
        g_branchChArr = vec![String::from("子"), String::from("丑"), String::from("寅"), String::from("卯"), String::from("辰"), String::from("巳"), String::from("午"), String::from("未"), String::from("申"), String::from("酉"), String::from("戌"), String::from("亥")];
                let _start: i64 = _now();
        unsafe fn cz(mut yr: i64, mut animal: Vec<String>, mut yinYang: Vec<String>, mut element: Vec<String>, mut sc: Vec<String>, mut bc: Vec<String>) -> Info {
    let mut y: i64 = (yr - 4);
    let mut stem: i64 = (y % 10);
    let mut branch: i64 = (y % 12);
    let mut sb: String = format!("{}{}", sc[stem as usize].clone(), bc[branch as usize].clone()).clone();
    return Info {animal: animal[branch as usize].clone().clone().clone(), yinYang: yinYang[(stem % 2) as usize].clone().clone().clone(), element: element[(stem / 2) as usize].clone().clone().clone(), stemBranch: sb.clone(), cycle: ((y % 60) + 1)}
};
        for yr in vec![1935, 1938, 1968, 1972, 1976].iter().cloned() {
            let mut r: Info = cz(yr, g_animal.clone().clone(), g_yinYang.clone().clone(), g_element.clone().clone(), g_stemChArr.clone().clone(), g_branchChArr.clone().clone());
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", yr.to_string(), ": "), r.element), " "), r.animal), ", "), r.yinYang), ", Cycle year "), r.cycle.to_string()), " "), r.stemBranch));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
