// Generated by Mochi transpiler v0.10.42 on 2025-07-27 22:19 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn padLeft(s: &str, mut w: i64) -> String {
    let mut res = String::from("");
    let mut n: i64 = (w - (s.len() as i64));
    while (n > 0) {
        res = format!("{}{}", res, " ");
        n = (n - 1);
    }
    return format!("{}{}", res, s).clone()
};
    fn indexOfFrom(s: &str, ch: &str, mut start: i64) -> i64 {
    let mut i: i64 = start;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn containsStr(s: &str, sub: &str) -> bool {
    let mut i: i64 = 0;
    let mut sl = (s.len() as i64);
    let mut subl = (sub.len() as i64);
    while (i <= (sl - subl)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + subl) - i) as usize).collect::<String>() } == sub) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn distinct(mut slist: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    for s in slist.clone() {
        let mut found: bool = false;
        for r in res.clone() {
            if (r.as_str() == s.as_str()) {
                found = true;
                break
            }
        }
        if !found {
            res = { let mut _v = res.clone(); _v.push(s.to_string()); _v };
        }
    }
    return res
};
    fn permutations(mut xs: Vec<String>) -> Vec<Vec<String>> {
    if ((xs.len() as i64) <= 1) {
        return vec![xs]
    }
    let mut res: Vec<Vec<String>> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut rest: Vec<String> = vec![];
        let mut j: i64 = 0;
        while (j < (xs.len() as i64)) {
            if (j != i) {
                rest = { let mut _v = rest.clone(); _v.push(xs[j as usize].clone().to_string()); _v };
            }
            j = (j + 1);
        }
        let mut subs: Vec<Vec<String>> = permutations(rest.clone());
        for p in &subs {
            let mut perm: Vec<String> = vec![xs[i as usize].clone()];
            let mut k: i64 = 0;
            while (k < (p.len() as i64)) {
                perm = { let mut _v = perm.clone(); _v.push(p[k as usize].to_string()); _v };
                k = (k + 1);
            }
            res = { let mut _v = res.clone(); _v.push(perm.clone()); _v };
        }
        i = (i + 1);
    }
    return res
};
    fn headTailOverlap(s1: &str, s2: &str) -> i64 {
    let mut start: i64 = 0;
    loop {
        let mut ix: i64 = indexOfFrom(s1, &s2[0 as usize..1 as usize].to_string(), start);
        if (ix == (0 - 1)) {
            return 0
        }
        start = ix;
        let mut sublen = ((s1.len() as i64) - start);
        if (sublen > (s2.len() as i64)) {
            sublen = (s2.len() as i64);
        }
        if ({ let tmp = &s2; tmp.chars().skip(0 as usize).take((sublen - 0) as usize).collect::<String>() }.as_str() == { let tmp = &s1; tmp.chars().skip(start as usize).take(((start + sublen) - start) as usize).collect::<String>() }.as_str()) {
            return sublen
        }
        start = (start + 1);
    }
};
    fn deduplicate(mut slist: Vec<String>) -> Vec<String> {
    let mut arr: Vec<String> = distinct(slist.clone());
    let mut filtered: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut s1: String = arr[i as usize].clone().clone();
        let mut within: bool = false;
        let mut j: i64 = 0;
        while (j < (arr.len() as i64)) {
            if ((j != i) && containsStr(&arr[j as usize].clone(), &s1)) {
                within = true;
                break
            }
            j = (j + 1);
        }
        if !within {
            filtered = { let mut _v = filtered.clone(); _v.push(s1.to_string()); _v };
        }
        i = (i + 1);
    }
    return filtered
};
    fn joinAll(mut ss: Vec<String>) -> String {
    let mut out = String::from("");
    for s in ss.clone() {
        out = format!("{}{}", out, s);
    }
    return out.clone()
};
    fn shortestCommonSuperstring(mut slist: Vec<String>) -> String {
    let mut ss: Vec<String> = deduplicate(slist.clone());
    let mut shortest: String = joinAll(ss.clone()).clone();
    let mut perms: Vec<Vec<String>> = permutations(ss.clone());
    let mut idx: i64 = 0;
    while (idx < (perms.len() as i64)) {
        let mut perm: Vec<String> = perms[idx as usize].clone();
        let mut sup: String = perm[0 as usize].clone().clone();
        let mut i: i64 = 0;
        while (i < ((ss.len() as i64) - 1)) {
            let mut ov: i64 = headTailOverlap(&perm[i as usize].clone(), &perm[(i + 1) as usize].clone());
            sup = format!("{}{}", sup, { let tmp = &perm[(i + 1) as usize].clone(); tmp.chars().skip(ov as usize).take(((perm[(i + 1) as usize].clone().len() as i64) - ov) as usize).collect::<String>() });
            i = (i + 1);
        }
        if ((sup.len() as i64) < (shortest.len() as i64)) {
            shortest = sup.clone();
        }
        idx = (idx + 1);
    }
    return shortest.clone()
};
    fn printCounts(seq: &str) {
    let mut a: i64 = 0;
    let mut c: i64 = 0;
    let mut g: i64 = 0;
    let mut t: i64 = 0;
    let mut i: i64 = 0;
    while (i < (seq.len() as i64)) {
        let mut ch: String = { let tmp = &seq; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == "A") {
            a = (a + 1);
        } else {
            if (ch.as_str() == "C") {
                c = (c + 1);
            } else {
                if (ch.as_str() == "G") {
                    g = (g + 1);
                } else {
                    if (ch.as_str() == "T") {
                        t = (t + 1);
                    }
                }
            }
        }
        i = (i + 1);
    }
    let mut total = (seq.len() as i64);
    println!("{}", format!("{}{}", format!("{}{}", "\nNucleotide counts for ", seq), ":\n"));
    println!("{}", format!("{}{}", padLeft(&"A", 10), padLeft(&a.to_string(), 12)));
    println!("{}", format!("{}{}", padLeft(&"C", 10), padLeft(&c.to_string(), 12)));
    println!("{}", format!("{}{}", padLeft(&"G", 10), padLeft(&g.to_string(), 12)));
    println!("{}", format!("{}{}", padLeft(&"T", 10), padLeft(&t.to_string(), 12)));
    println!("{}", format!("{}{}", padLeft(&"Other", 10), padLeft(&(total - (((a + c) + g) + t)).to_string(), 12)));
    println!("{}", "  ____________________");
    println!("{}", format!("{}{}", padLeft(&"Total length", 14), padLeft(&total.to_string(), 8)));
};
    fn mochi_main() {
    let mut tests: Vec<Vec<String>> = vec![vec![String::from("TA"), String::from("AAG"), String::from("TA"), String::from("GAA"), String::from("TA")], vec![String::from("CATTAGGG"), String::from("ATTAG"), String::from("GGG"), String::from("TA")], vec![String::from("AAGAUGGA"), String::from("GGAGCGCAUC"), String::from("AUCGCAAUAAGGA")], vec![String::from("ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT"), String::from("GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT"), String::from("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), String::from("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), String::from("AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), String::from("GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC"), String::from("CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT"), String::from("TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), String::from("CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC"), String::from("GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT"), String::from("TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC"), String::from("CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), String::from("TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA")]];
    for seqs in &tests {
        let mut scs: String = shortestCommonSuperstring(seqs.clone()).clone();
        printCounts(&scs);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
