// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn listStr(mut xs: Vec<i64>) -> String {
    let mut s = String::from("[");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if (i < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn ordered(mut xs: Vec<i64>) -> bool {
    if ((xs.len() as i64) == 0) {
        return true
    }
    let mut prev: i64 = xs[0 as usize];
    let mut i: i64 = 1;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] < prev) {
            return false
        }
        prev = xs[i as usize];
        i = (i + 1);
    }
    return true
};
    fn outOfOrder(mut n: i64) -> Vec<i64> {
    if (n < 2) {
        return vec![]
    }
    let mut r: Vec<i64> = vec![];
    loop {
        r = vec![];
        let mut i: i64 = 0;
        while (i < n) {
            r = { let mut _v = r.clone(); _v.push((_now() % 3)); _v };
            i = (i + 1);
        }
        if !ordered(r.clone()) {
            break
        }
    }
    return r
};
    fn sort3(mut a: Vec<i64>) -> Vec<i64> {
    let mut lo: i64 = 0;
    let mut mid: i64 = 0;
    let mut hi = ((a.len() as i64) - 1);
    while (mid <= hi) {
        let mut v: i64 = a[mid as usize];
        if (v == 0) {
            let mut tmp: i64 = a[lo as usize];
            a[lo as usize] = a[mid as usize];
            a[mid as usize] = tmp;
            lo = (lo + 1);
            mid = (mid + 1);
        } else if (v == 1) {
            mid = (mid + 1);
        } else {
            let mut tmp: i64 = a[mid as usize];
            a[mid as usize] = a[hi as usize];
            a[hi as usize] = tmp;
            hi = (hi - 1);
        }
    }
    return a
};
    fn mochi_main() {
    let mut f: Vec<i64> = outOfOrder(12);
    println!("{}", listStr(f.clone()));
    f = sort3(f.clone());
    println!("{}", listStr(f.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
