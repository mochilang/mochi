// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct HailResult {
    seq: i64,
    cnt: i64,
    out: String,
}
impl std::fmt::Display for HailResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"seq\": {}", self.seq)?;
        write!(f, ", ")?;
        write!(f, "\"cnt\": {}", self.cnt)?;
        write!(f, ", ")?;
        write!(f, "\"out\": \"{}\"", self.out)?;
        write!(f, "}}")
    }
}

static mut g_jobs: i64 = 0;
fn main() {
    unsafe {
        g_jobs = 12;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_jobs: i64 = 0;;
        unsafe fn pad(mut n: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < 4) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
        unsafe fn hail(mut seq: i64, mut cnt: i64) -> HailResult {
    let mut out: String = pad(seq).clone();
    if (seq != 1) {
        cnt = (cnt + 1);
        if ((seq % 2) != 0) {
            seq = ((3 * seq) + 1);
        } else {
            seq = (seq / 2);
        }
    }
    return HailResult {seq: seq, cnt: cnt, out: out.clone()}
};
        unsafe fn mochi_main() {
    let mut seqs: Vec<i64> = vec![];
    let mut cnts: Vec<i64> = vec![];
    for i in 0..g_jobs {
        seqs = { let mut _v = seqs.clone(); _v.push((i + 1)); _v };
        cnts = { let mut _v = cnts.clone(); _v.push(0); _v };
    }
    loop {
        let mut line = String::from("");
        let mut i: i64 = 0;
        while (i < g_jobs) {
            let mut res: HailResult = hail(seqs[i as usize], cnts[i as usize]);
            seqs[i as usize] = res.seq;
            cnts[i as usize] = res.cnt;
            line = format!("{}{}", line, res.out);
            i = (i + 1);
        }
        println!("{}", line);
        let mut done: bool = true;
        let mut j: i64 = 0;
        while (j < g_jobs) {
            if (seqs[j as usize] != 1) {
                done = false;
            }
            j = (j + 1);
        }
        if done {
            break
        }
    }
    println!("{}", "");
    println!("{}", "COUNTS:");
    let mut counts = String::from("");
    let mut k: i64 = 0;
    while (k < g_jobs) {
        counts = format!("{}{}", counts, pad(cnts[k as usize]));
        k = (k + 1);
    }
    println!("{}", counts);
    println!("{}", "");
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
