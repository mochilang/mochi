// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn gzipWriter(mut w: String) -> String {
    return w.clone()
};
    fn tarWriter(mut w: String) -> String {
    return w.clone()
};
    fn tarWriteHeader(mut w: String, hdr: &HashMap<String, String>) {
};
    fn tarWrite(mut w: String, data: &str) {
};
    fn mochi_main() {
    let mut filename: String = String::from("TAPE.FILE").clone();
    let mut data: String = String::from("").clone();
    let mut outfile: String = String::from("").clone();
    let mut gzipFlag: bool = false;
    let mut w: String = String::new();
    if (outfile.as_str() != "") {
        w = String::new();
    }
    if gzipFlag {
        w = gzipWriter(w.clone());
    }
    w = tarWriter(w.clone());
    let mut hdr: HashMap<String, String> = HashMap::from([(String::from("Name"), String::from(filename.clone())), (String::from("Mode"), format!("{}", 432)), (String::from("Size"), format!("{}", (data.len() as i64))), (String::from("ModTime"), format!("{}", _now())), (String::from("Typeflag"), format!("{}", 0)), (String::from("Uname"), String::from("guest")), (String::from("Gname"), String::from("guest"))]);
    tarWriteHeader(w.clone(), &hdr);
    tarWrite(w.clone(), &data);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
