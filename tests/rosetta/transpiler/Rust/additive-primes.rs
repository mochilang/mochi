// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
    fn sumDigits(mut n: i64) -> i64 {
    let mut s: i64 = 0;
    let mut x: i64 = n;
    while (x > 0) {
        s = (s + (x % 10));
        x = (x / 10);
    }
    return s
};
    fn pad(mut n: i64) -> String {
    if (n < 10) {
        return format!("{}{}", "  ", n.to_string())
    }
    if (n < 100) {
        return format!("{}{}", " ", n.to_string())
    }
    return n.to_string().to_string().clone()
};
    fn mochi_main() {
    println!("{}", "Additive primes less than 500:");
    let mut count: i64 = 0;
    let mut line: String = String::from("").clone();
    let mut lineCount: i64 = 0;
    let mut i: i64 = 2;
    while (i < 500) {
        if (isPrime(i) && isPrime(sumDigits(i))) {
            count = (count + 1);
            line = format!("{}{}", format!("{}{}", line, pad(i)), "  ");
            lineCount = (lineCount + 1);
            if (lineCount == 10) {
                println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 2) - 0) as usize).collect::<String>() });
                line = String::from("");
                lineCount = 0;
            }
        }
        if (i > 2) {
            i = (i + 2);
        } else {
            i = (i + 1);
        }
    }
    if (lineCount > 0) {
        println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 2) - 0) as usize).collect::<String>() });
    }
    println!("{}", format!("{}{}", count.to_string(), " additive primes found."));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
