// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:55 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_list: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_list = vec![31, 41, 59, 26, 53, 58, 97, 93, 23, 84];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn bubbleSort(mut a: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = a;
    let mut itemCount = ((arr.len() as i64) - 1);
    loop {
        let mut hasChanged: bool = false;
        let mut index: i64 = 0;
        while (index < itemCount) {
            if (arr[index as usize] > arr[(index + 1) as usize]) {
                let mut tmp: i64 = arr[index as usize];
                arr[index as usize] = arr[(index + 1) as usize];
                arr[(index + 1) as usize] = tmp;
                hasChanged = true;
            }
            index = (index + 1);
        }
        if !hasChanged {
            break
        }
        itemCount = (itemCount - 1);
    }
    return arr
};
        static mut g_list: Vec<i64> = Vec::new();;
        println!("{}", format!("{}{}", "unsorted: ", format!("{:?}", g_list.clone())));
        g_list = bubbleSort(g_list.clone().clone());
        println!("{}", format!("{}{}", "sorted!  ", format!("{:?}", g_list.clone())));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
