// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn repeat(ch: &str, mut n: i64) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
};
    fn cubLine(mut n: i64, mut dx: i64, mut dy: i64, cde: &str) {
    let mut line: String = format!("{}{}", repeat(&" ", (n + 1)), cde[0 as usize..1 as usize].to_string()).clone();
    let mut d: i64 = ((9 * dx) - 1);
    while (d > 0) {
        line = format!("{}{}", line, cde[1 as usize..2 as usize].to_string());
        d = (d - 1);
    }
    line = format!("{}{}", line, cde[0 as usize..1 as usize].to_string());
    line = format!("{}{}", format!("{}{}", line, repeat(&" ", dy)), cde[2 as usize..].to_string());
    println!("{}", line);
};
    fn cuboid(mut dx: i64, mut dy: i64, mut dz: i64) {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "cuboid ", dx.to_string()), " "), dy.to_string()), " "), dz.to_string()), ":"));
    cubLine((dy + 1), dx, 0, &"+-");
    let mut i: i64 = 1;
    while (i <= dy) {
        cubLine(((dy - i) + 1), dx, (i - 1), &"/ |");
        i = (i + 1);
    }
    cubLine(0, dx, dy, &"+-|");
    let mut j: i64 = (((4 * dz) - dy) - 2);
    while (j > 0) {
        cubLine(0, dx, dy, &"| |");
        j = (j - 1);
    }
    cubLine(0, dx, dy, &"| +");
    i = 1;
    while (i <= dy) {
        cubLine(0, dx, (dy - i), &"| /");
        i = (i + 1);
    }
    cubLine(0, dx, 0, &"+-\n");
};
    cuboid(2, 3, 4);
    println!("{}", "");
    cuboid(1, 1, 1);
    println!("{}", "");
    cuboid(6, 2, 1);
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
