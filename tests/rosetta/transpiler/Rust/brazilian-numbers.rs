// Generated by Mochi transpiler v0.10.56 on 2025-08-04 06:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn sameDigits(mut n: i64, mut b: i64) -> bool {
    let mut f: i64 = (n % b);
    n = (n / b);
    while (n > 0) {
        if ((n % b) != f) {
            return false
        }
        n = (n / b);
    }
    return true
};
    fn isBrazilian(mut n: i64) -> bool {
    if (n < 7) {
        return false
    }
    if (((n % 2) == 0) && (n >= 8)) {
        return true
    }
    let mut b: i64 = 2;
    while (b < (n - 1)) {
        if sameDigits(n, b) {
            return true
        }
        b = (b + 1);
    }
    return false
};
    fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
    fn mochi_main() {
    let mut kinds: Vec<String> = vec![String::from(" "), String::from(" odd "), String::from(" prime ")];
    for kind in kinds.iter().cloned() {
        println!("{}", format!("{}{}", format!("{}{}", "First 20", kind), "Brazilian numbers:"));
        let mut c: i64 = 0;
        let mut n: i64 = 7;
        loop {
            if isBrazilian(n) {
                println!("{}", format!("{}{}", n.to_string(), " "));
                c = (c + 1);
                if (c == 20) {
                    println!("{}", "\n");
                    break
                }
            }
            if (kind.as_str() == " ") {
                n = (n + 1);
            } else if (kind.as_str() == " odd ") {
                n = (n + 2);
            } else {
                loop {
                    n = (n + 2);
                    if isPrime(n) {
                        break
                    }
                }
            }
        }
    }
    let mut n: i64 = 7;
    let mut c: i64 = 0;
    while (c < 100000) {
        if isBrazilian(n) {
            c = (c + 1);
        }
        n = (n + 1);
    }
    println!("{}", format!("{}{}", "The 100,000th Brazilian number: ", (n - 1).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
