// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:43 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn sortRunes(mut s: String) -> String {
    let mut arr: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        arr = { let mut v = arr.clone(); v.push(String::from(s[i as usize..(i + 1) as usize].to_string())); v };
        i = (i + 1);
    }
    let mut n = (arr.len() as i64);
    let mut m: i64 = 0;
    while (m < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize].clone().as_str() > arr[(j + 1) as usize].clone()) {
                let tmp: String = arr[j as usize].clone().clone();
                arr[j as usize] = arr[(j + 1) as usize].clone();
                arr[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        m = (m + 1);
    }
    let mut out = String::from("");
    i = 0;
    while (i < n) {
        out = format!("{}{}", out, arr[i as usize].clone());
        i = (i + 1);
    }
    return out.clone()
};
    fn deranged(mut a: String, mut b: String) -> bool {
    if ((a.len() as i64) != (b.len() as i64)) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize..(i + 1) as usize].to_string().as_str() == b[i as usize..(i + 1) as usize].to_string()) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn mochi_main() {
    let mut words: Vec<String> = vec![String::from("constitutionalism"), String::from("misconstitutional")];
    let mut m: HashMap<String, Vec<String>> = HashMap::from([]);
    let mut bestLen: i64 = 0;
    let mut w1 = String::from("");
    let mut w2 = String::from("");
    for w in words {
        if ((w.len() as i64) <= bestLen) {
            continue
        }
        let k: String = sortRunes(w.clone()).clone();
        if !m.contains_key(&k) {
            m.insert(k.clone(), vec![w]);
            continue
        }
        for c in m[k.as_str()].clone() {
            if deranged(w.clone(), c.clone()) {
                bestLen = (w.len() as i64);
                w1 = c;
                w2 = w;
                break
            }
        }
        m.insert(k.clone(), { let mut v = m[k.as_str()].clone(); v.push(String::from(w)); v });
    }
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", w1, " "), w2), " : Length "), bestLen.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
