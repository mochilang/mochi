// Generated by Mochi transpiler v0.10.55 on 2025-08-02 22:00 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn merge(base: &HashMap<String, String>, update: &HashMap<String, String>) -> HashMap<String, String> {
    let mut result: HashMap<String, String> = HashMap::new();
    for k in base.keys() {
        result.insert(k.clone(), base.get(k.as_str()).cloned().unwrap_or_default());
    }
    for k in update.keys() {
        result.insert(k.clone(), update.get(k.as_str()).cloned().unwrap_or_default());
    }
    return result
};
    fn mochi_main() {
    let mut base: HashMap<String, String> = HashMap::from([(String::from("name"), String::from("Rocket Skates")), (String::from("price"), format!("{}", 12.75)), (String::from("color"), String::from("yellow"))]);
    let mut update: HashMap<String, String> = HashMap::from([(String::from("price"), format!("{}", 15.25)), (String::from("color"), String::from("red")), (String::from("year"), format!("{}", 1974))]);
    let mut result: HashMap<String, String> = merge(&base, &update);
    println!("{:?}", result);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
