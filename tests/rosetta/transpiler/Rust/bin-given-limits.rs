// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn getBins(mut limits: Vec<i64>, mut data: Vec<i64>) -> Vec<i64> {
    let mut n = (limits.len() as i64);
    let mut bins: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (n + 1)) {
        bins = { let mut _v = bins.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (data.len() as i64)) {
        let d: i64 = data[j as usize];
        let mut index: i64 = 0;
        while (index < (limits.len() as i64)) {
            if (d < limits[index as usize]) {
                break
            }
            if (d == limits[index as usize]) {
                index = (index + 1);
                break
            }
            index = (index + 1);
        }
        bins[index as usize] = (bins[index as usize] + 1);
        j = (j + 1);
    }
    return bins
};
    fn padLeft(mut n: i64, mut width: i64) -> String {
    let mut s = n.to_string();
    let mut pad: i64 = (width - (s.len() as i64));
    let mut out = String::from("");
    let mut i: i64 = 0;
    while (i < pad) {
        out = format!("{}{}", out, " ");
        i = (i + 1);
    }
    return format!("{}{}", out, s).clone()
};
    fn printBins(mut limits: Vec<i64>, mut bins: Vec<i64>) {
    let mut n = (limits.len() as i64);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "           < ", padLeft(limits[0 as usize], 3)), " = "), padLeft(bins[0 as usize], 2)));
    let mut i: i64 = 1;
    while (i < n) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", ">= ", padLeft(limits[(i - 1) as usize], 3)), " and < "), padLeft(limits[i as usize], 3)), " = "), padLeft(bins[i as usize], 2)));
        i = (i + 1);
    }
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", ">= ", padLeft(limits[(n - 1) as usize], 3)), "           = "), padLeft(bins[n as usize], 2)));
    println!("{}", "");
};
    fn mochi_main() {
    let mut limitsList: Vec<Vec<i64>> = vec![vec![23, 37, 43, 53, 67, 83], vec![14, 18, 249, 312, 389, 392, 513, 591, 634, 720]];
    let mut dataList: Vec<Vec<i64>> = vec![vec![95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], vec![445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]];
    let mut i: i64 = 0;
    while (i < (limitsList.len() as i64)) {
        println!("{}", format!("{}{}", format!("{}{}", "Example ", (i + 1).to_string()), "\n"));
        let mut bins: Vec<i64> = getBins(limitsList[i as usize].clone(), dataList[i as usize].clone());
        printBins(limitsList[i as usize].clone(), bins.clone());
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
