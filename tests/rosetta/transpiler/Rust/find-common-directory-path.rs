// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn splitPath(p: &str) -> Vec<String> {
    let mut parts: Vec<String> = vec![];
    let mut cur = String::from("");
    let mut i: i64 = 0;
    while (i < (p.len() as i64)) {
        if ({ let tmp = &p; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == "/") {
            if (cur.as_str() != "") {
                parts = { let mut _v = parts.clone(); _v.push(cur.to_string()); _v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, { let tmp = &p; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() });
        }
        i = (i + 1);
    }
    if (cur.as_str() != "") {
        parts = { let mut _v = parts.clone(); _v.push(cur.to_string()); _v };
    }
    return parts
};
    fn joinPath(mut parts: Vec<String>) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < (parts.len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, "/"), parts[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
};
    fn commonPrefix(mut paths: Vec<String>) -> String {
    if ((paths.len() as i64) == 0) {
        return String::from("")
    }
    let mut base: Vec<String> = splitPath(&paths[0 as usize].clone());
    let mut i: i64 = 0;
    let mut prefix: Vec<String> = vec![];
    while (i < (base.len() as i64)) {
        let mut comp: String = base[i as usize].clone().clone();
        let mut ok: bool = true;
        for p in paths.clone() {
            let mut parts: Vec<String> = splitPath(&p);
            if ((i >= (parts.len() as i64)) || (parts[i as usize].clone().as_str() != comp.as_str())) {
                ok = false;
                break
            }
        }
        if ok {
            prefix = { let mut _v = prefix.clone(); _v.push(comp.to_string()); _v };
        } else {
            break
        }
        i = (i + 1);
    }
    return joinPath(prefix.clone()).clone()
};
    fn mochi_main() {
    let mut paths: Vec<String> = vec![String::from("/home/user1/tmp/coverage/test"), String::from("/home/user1/tmp/covert/operator"), String::from("/home/user1/tmp/coven/members"), String::from("/home//user1/tmp/coventry"), String::from("/home/user1/././tmp/covertly/foo"), String::from("/home/bob/../user1/tmp/coved/bar")];
    let mut c: String = commonPrefix(paths.clone()).clone();
    if (c.as_str() == "") {
        println!("{}", "No common path");
    } else {
        println!("{}", format!("{}{}", "Common path: ", c));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
