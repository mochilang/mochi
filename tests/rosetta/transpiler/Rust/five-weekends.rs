// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn weekday(mut y: i64, mut m: i64, mut d: i64) -> i64 {
    let mut yy: i64 = y;
    let mut mm: i64 = m;
    if (mm < 3) {
        mm = (mm + 12);
        yy = (yy - 1);
    }
    let mut k: i64 = (yy % 100);
    let mut j: i64 = (yy / 100);
    let mut a: i64 = ((13 * (mm + 1)) / 5);
    let mut b: i64 = (k / 4);
    let mut c: i64 = (j / 4);
    return ((((((d + a) + k) + b) + c) + (5 * j)) % 7)
};
    fn mochi_main() {
    let mut months31: Vec<i64> = vec![1, 3, 5, 7, 8, 10, 12];
    let mut names: Vec<String> = vec![String::from("January"), String::from("February"), String::from("March"), String::from("April"), String::from("May"), String::from("June"), String::from("July"), String::from("August"), String::from("September"), String::from("October"), String::from("November"), String::from("December")];
    let mut count: i64 = 0;
    let mut firstY: i64 = 0;
    let mut firstM: i64 = 0;
    let mut lastY: i64 = 0;
    let mut lastM: i64 = 0;
    let mut haveNone: Vec<i64> = vec![];
    println!("{}", "Months with five weekends:");
    for year in 1900..2101 {
        let mut hasOne: bool = false;
        for m in months31.clone() {
            if (weekday(year, m, 1) == 6) {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "  ", year.to_string()), " "), names[(m - 1) as usize].clone()));
                count = (count + 1);
                hasOne = true;
                lastY = year;
                lastM = m;
                if (firstY == 0) {
                    firstY = year;
                    firstM = m;
                }
            }
        }
        if !hasOne {
            haveNone = { let mut _v = haveNone.clone(); _v.push(year); _v };
        }
    }
    println!("{}", format!("{}{}", count.to_string(), " total"));
    println!("{}", "");
    println!("{}", "First five dates of weekends:");
    for i in 0..5 {
        let mut day: i64 = (1 + (7 * i));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  Friday, ", names[(firstM - 1) as usize].clone()), " "), day.to_string()), ", "), firstY.to_string()));
    }
    println!("{}", "Last five dates of weekends:");
    for i in 0..5 {
        let mut day: i64 = (1 + (7 * i));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  Friday, ", names[(lastM - 1) as usize].clone()), " "), day.to_string()), ", "), lastY.to_string()));
    }
    println!("{}", "");
    println!("{}", "Years with no months with five weekends:");
    for y in haveNone.clone() {
        println!("{}", format!("{}{}", "  ", y.to_string()));
    }
    println!("{}", format!("{}{}", (haveNone.len() as i64).to_string(), " total"));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
