// Generated by Mochi transpiler v0.10.41 on 2025-07-27 10:59 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_a: Vec<i64> = Vec::new();
static mut g_s: Vec<i64> = Vec::new();
static mut g_cap_s: i64 = 0;
fn main() {
    unsafe {
        g_a = vec![0, 0, 0, 0, 0];
        g_s = g_a.clone()[0 as usize..4 as usize].to_vec();
        g_cap_s = 5;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn listStr(mut xs: Vec<i64>) -> String {
    let mut s = String::from("[");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if ((i + 1) < (xs.len() as i64)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
        static mut g_a: Vec<i64> = Vec::new();;
        println!("{}", format!("{}{}", "len(a) = ", (g_a.clone().len() as i64).to_string()));
        println!("{}", format!("{}{}", "a = ", listStr(g_a.clone().clone())));
        g_a[0 as usize] = 3;
        println!("{}", format!("{}{}", "a = ", listStr(g_a.clone().clone())));
        println!("{}", format!("{}{}", "a[0] = ", g_a.clone()[0 as usize].to_string()));
        static mut g_s: Vec<i64> = Vec::new();;
        static mut g_cap_s: i64 = 0;;
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", (g_s.clone().len() as i64).to_string()), "  cap(s) = "), g_cap_s.to_string()));
        g_s = g_a.clone()[0 as usize..5 as usize].to_vec();
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        g_a[0 as usize] = 22;
        g_s[0 as usize] = 22;
        println!("{}", format!("{}{}", "a = ", listStr(g_a.clone().clone())));
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        g_s = { let mut _v = g_s.clone().clone(); _v.push(4); _v };
        g_s = { let mut _v = g_s.clone().clone(); _v.push(5); _v };
        g_s = { let mut _v = g_s.clone().clone(); _v.push(6); _v };
        g_cap_s = 10;
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", (g_s.clone().len() as i64).to_string()), "  cap(s) = "), g_cap_s.to_string()));
        g_a[4 as usize] = -1;
        println!("{}", format!("{}{}", "a = ", listStr(g_a.clone().clone())));
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        g_s = vec![];
        for i in 0..8 {
            g_s = { let mut _v = g_s.clone().clone(); _v.push(0); _v };
        }
        g_cap_s = 8;
        println!("{}", format!("{}{}", "s = ", listStr(g_s.clone().clone())));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", (g_s.clone().len() as i64).to_string()), "  cap(s) = "), g_cap_s.to_string()));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
