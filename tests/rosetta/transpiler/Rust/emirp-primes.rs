// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    let mut d: i64 = 3;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
    }
    return true
};
    fn revInt(mut n: i64) -> i64 {
    let mut r: i64 = 0;
    let mut t: i64 = n;
    while (t > 0) {
        r = ((r * 10) + (t % 10));
        t = (t / 10);
    }
    return r
};
    fn mochi_main() {
    let mut emirps: Vec<i64> = vec![];
    let mut n: i64 = 2;
    while ((emirps.len() as i64) < 10000) {
        if isPrime(n) {
            let mut r: i64 = revInt(n);
            if ((r != n) && isPrime(r)) {
                emirps = { let mut _v = emirps.clone(); _v.push(n); _v };
            }
        }
        n = (n + 1);
    }
    let mut line = String::from("   [");
    let mut i: i64 = 0;
    while (i < 20) {
        line = format!("{}{}", line, emirps[i as usize].to_string());
        if (i < 19) {
            line = format!("{}{}", line, ", ");
        }
        i = (i + 1);
    }
    line = format!("{}{}", line, "]");
    println!("{}", "First 20:");
    println!("{}", line);
    line = String::from("  [");
    for e in emirps.clone() {
        if (e >= 8000) {
            break
        }
        if (e >= 7700) {
            line = format!("{}{}", format!("{}{}", line, e.to_string()), ", ");
        }
    }
    line = format!("{}{}", line, "]");
    println!("{}", "Between 7700 and 8000:");
    println!("{}", line);
    println!("{}", "10000th:");
    println!("{}", format!("{}{}", format!("{}{}", "   [", emirps[9999 as usize].to_string()), "]"));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
