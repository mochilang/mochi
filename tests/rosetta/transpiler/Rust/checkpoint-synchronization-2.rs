// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_partList: Vec<String> = Vec::new();
static mut g_nAssemblies: i64 = 0;
fn main() {
    unsafe {
        g_partList = vec![String::from("A"), String::from("B"), String::from("C"), String::from("D")];
        g_nAssemblies = 3;
                let _start: i64 = _now();
        unsafe fn lower(ch: &str) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut i: i64 = 0;
    while (i < (upper.len() as i64)) {
        if (ch == { let tmp = &upper; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }) {
            return { let tmp = &lower; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }
        }
        i = (i + 1);
    }
    return ch.to_string().clone()
};
        static mut g_partList: Vec<String> = Vec::new();;
        static mut g_nAssemblies: i64 = 0;;
        for cycle in 1..(g_nAssemblies + 1) {
            println!("{}", format!("{}{}", "begin assembly cycle ", cycle.to_string()));
            let mut a: String = String::from("").clone();
            for p in g_partList.clone().iter().cloned() {
                println!("{}", format!("{}{}", p, " worker begins part"));
                println!("{}", format!("{}{}", format!("{}{}", p, " worker completed "), (p.to_lowercase())));
                a = format!("{}{}", a, (p.to_lowercase()));
            }
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", a, " assembled.  cycle "), cycle.to_string()), " complete"));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
