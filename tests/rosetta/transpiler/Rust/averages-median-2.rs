// Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:50 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn sel(list: &mut Vec<f64>, mut k: i64) -> f64 {
    let mut i: i64 = 0;
    while (i <= k) {
        let mut minIndex: i64 = i;
        let mut j: i64 = (i + 1);
        while (j < (list.len() as i64)) {
            if (list[j as usize] < list[minIndex as usize]) {
                minIndex = j;
            }
            j = (j + 1);
        }
        let tmp: f64 = list[i as usize];
        list[i as usize] = list[minIndex as usize];
        list[minIndex as usize] = tmp;
        i = (i + 1);
    }
    return list[k as usize]
};
    fn median(mut a: Vec<f64>) -> f64 {
    let mut arr: Vec<f64> = a;
    let half: i64 = (((arr.len() as i64) / 2) as i64);
    let med: f64 = sel(&mut arr, half);
    if (((arr.len() as i64) % 2) == 0) {
        return ((med + arr[(half - 1) as usize]) / 2.0)
    }
    return med
};
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0]).to_string());
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0, 5.0]).to_string());
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
