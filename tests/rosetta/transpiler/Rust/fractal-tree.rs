// Generated by Mochi transpiler v0.10.52 on 2025-08-01 20:19 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_width: i64 = 0;
static mut g_height: i64 = 0;
static mut g_depth: i64 = 0;
static mut g_angle: f64 = 0.0;
static mut g_length: f64 = 0.0;
static mut g_frac: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_width = 80;
        g_height = 40;
        g_depth = 6;
        g_angle = 12.0;
        g_length = 12.0;
        g_frac = 0.8;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_PI: f64 = 0.0;;
        unsafe fn _mod(mut x: f64, mut m: f64) -> f64 {
    return (x - ((((x / m) as i64) as f64) * m))
};
        unsafe fn _sin(mut x: f64) -> f64 {
    let mut y: f64 = (_mod((x + g_PI), (2.0 * g_PI)) - g_PI);
    let mut y2: f64 = (y * y);
    let mut y3: f64 = (y2 * y);
    let mut y5: f64 = (y3 * y2);
    let mut y7: f64 = (y5 * y2);
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
};
        unsafe fn _cos(mut x: f64) -> f64 {
    let mut y: f64 = (_mod((x + g_PI), (2.0 * g_PI)) - g_PI);
    let mut y2: f64 = (y * y);
    let mut y4: f64 = (y2 * y2);
    let mut y6: f64 = (y4 * y2);
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
};
        static mut g_width: i64 = 0;;
        static mut g_height: i64 = 0;;
        static mut g_depth: i64 = 0;;
        static mut g_angle: f64 = 0.0;;
        static mut g_length: f64 = 0.0;;
        static mut g_frac: f64 = 0.0;;
        unsafe fn clearGrid() -> Vec<Vec<String>> {
    let mut g: Vec<Vec<String>> = vec![];
    let mut y: i64 = 0;
    while (y < g_height) {
        let mut row: Vec<String> = vec![];
        let mut x: i64 = 0;
        while (x < g_width) {
            row = { let mut _v = row.clone(); _v.push(" ".to_string()); _v };
            x = (x + 1);
        }
        g = { let mut _v = g.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return g
};
        unsafe fn drawPoint(g: &mut Vec<Vec<String>>, mut x: i64, mut y: i64) {
    if ((((x >= 0) && (x < g_width)) && (y >= 0)) && (y < g_height)) {
        let mut row: Vec<String> = g[y as usize].clone();
        row[x as usize] = String::from("#");
        g[y as usize] = row;
    }
};
        unsafe fn bresenham(mut x0: i64, mut y0: i64, mut x1: i64, mut y1: i64, g: &mut Vec<Vec<String>>) {
    let mut dx: i64 = (x1 - x0);
    if (dx < 0) {
        dx = -dx;
    }
    let mut dy: i64 = (y1 - y0);
    if (dy < 0) {
        dy = -dy;
    }
    let mut sx: i64 = -1;
    if (x0 < x1) {
        sx = 1;
    }
    let mut sy: i64 = -1;
    if (y0 < y1) {
        sy = 1;
    }
    let mut err: i64 = (dx - dy);
    loop {
        drawPoint(g, x0, y0);
        if ((x0 == x1) && (y0 == y1)) {
            break
        }
        let mut e2: i64 = (2 * err);
        if (e2 > -dy) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if (e2 < dx) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
};
        unsafe fn ftree(g: &mut Vec<Vec<String>>, mut x: f64, mut y: f64, mut dist: f64, mut dir: f64, mut d: i64) {
    let mut rad: f64 = ((dir * g_PI) / 180.0);
    let mut x2: f64 = (x + (dist * _sin(rad)));
    let mut y2: f64 = (y - (dist * _cos(rad)));
    bresenham((x as i64), (y as i64), (x2 as i64), (y2 as i64), g);
    if (d > 0) {
        ftree(g, x2, y2, (dist * g_frac), (dir - g_angle), (d - 1));
        ftree(g, x2, y2, (dist * g_frac), (dir + g_angle), (d - 1));
    }
};
        unsafe fn render(mut g: Vec<Vec<String>>) -> String {
    let mut out: String = String::from("").clone();
    let mut y: i64 = 0;
    while (y < g_height) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < g_width) {
            line = format!("{}{}", line, g[y as usize].clone()[x as usize].clone());
            x = (x + 1);
        }
        out = format!("{}{}", out, line);
        if (y < (g_height - 1)) {
            out = format!("{}{}", out, "\n");
        }
        y = (y + 1);
    }
    return out.clone()
};
        unsafe fn mochi_main() {
    let mut grid: Vec<Vec<String>> = clearGrid();
    ftree(&mut grid, ((g_width / 2) as f64), ((g_height - 1) as f64), g_length, 0.0, g_depth);
    println!("{}", render(grid.clone()));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
