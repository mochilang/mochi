// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn findDuplicates(fs: &HashMap<String, String>, mut paths: Vec<String>) -> Vec<Vec<String>> {
    let mut seen: HashMap<String, String> = HashMap::from([]);
    let mut dups: Vec<Vec<String>> = vec![];
    for path in paths.clone() {
        let mut content: String = fs[path.as_str()].clone().clone();
        if seen.contains_key(&content) {
            dups = { let mut _v = dups.clone(); _v.push(vec![seen[content.as_str()].clone(), path]); _v };
        } else {
            seen.insert(content.clone(), path);
        }
    }
    return dups
};
    fn mochi_main() {
    let mut fs: HashMap<String, String> = HashMap::from([(String::from("a.txt"), "hello"), (String::from("b.txt"), "world"), (String::from("c.txt"), "hello"), (String::from("d.txt"), "foo"), (String::from("e.txt"), "world")]);
    let mut paths: Vec<String> = vec![String::from("a.txt"), String::from("b.txt"), String::from("c.txt"), String::from("d.txt"), String::from("e.txt")];
    let mut dups: Vec<Vec<String>> = findDuplicates(&fs, paths.clone());
    for pair in &dups {
        println!("{}", format!("{}{}", format!("{}{}", pair[0 as usize], " <==> "), pair[1 as usize]));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
