// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn log10floor(mut n: i64) -> i64 {
    let mut p: i64 = 0;
    let mut v: i64 = n;
    while (v >= 10) {
        v = (v / 10);
        p = (p + 1);
    }
    return p
};
    fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ((i > 0) && ((((s.len() as i64) - i) % 3) == 0)) {
            res = format!("{}{}", res, ",");
        }
        res = format!("{}{}", res, { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() });
        i = (i + 1);
    }
    return res.clone()
};
    fn showDistribution(mut sizes: Vec<i64>) {
    let mut bins: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 12) {
        bins = { let mut _v = bins.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut total: i64 = 0;
    for sz in sizes.clone() {
        total = (total + sz);
        let mut idx: i64 = 0;
        if (sz > 0) {
            idx = (log10floor(sz) + 1);
        }
        bins[idx as usize] = (bins[idx as usize] + 1);
    }
    println!("{}", "File size distribution:\n");
    i = 0;
    while (i < (bins.len() as i64)) {
        let mut prefix = String::from("  ");
        if (i > 0) {
            prefix = String::from("+ ");
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", prefix, "Files less than 10 ^ "), i.to_string()), " bytes : "), bins[i as usize].to_string()));
        i = (i + 1);
    }
    println!("{}", "                                  -----");
    println!("{}", format!("{}{}", "= Total number of files         : ", (sizes.len() as i64).to_string()));
    println!("{}", format!("{}{}", format!("{}{}", "  Total size of files           : ", commatize(total)), " bytes"));
};
    fn mochi_main() {
    let mut sizes: Vec<i64> = vec![0, 1, 9, 10, 99, 100, 1234, 50000, 730000, 8200000];
    showDistribution(sizes.clone());
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
