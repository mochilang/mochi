warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:49:2
   |
49 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:61:2
   |
61 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:80:2
   |
80 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:100:2
    |
100 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:122:2
    |
122 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:141:2
    |
141 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:170:2
    |
170 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:178:2
    |
178 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:191:2
    |
191 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:200:2
    |
200 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:209:2
    |
209 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:236:2
    |
236 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:264:2
    |
264 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:280:2
    |
280 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:301:2
    |
301 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:330:2
    |
330 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:346:2
    |
346 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:352:2
    |
352 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:416:2
    |
416 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:43:17
   |
43 |     let mut n = (a.len() as i64);
   |                 ^              ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
43 -     let mut n = (a.len() as i64);
43 +     let mut n = a.len() as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:44:11
   |
44 |     while ((n > 1) && (a[(n - 1) as usize] == 0)) {
   |           ^                                     ^
   |
help: remove these parentheses
   |
44 -     while ((n > 1) && (a[(n - 1) as usize] == 0)) {
44 +     while (n > 1) && (a[(n - 1) as usize] == 0) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:46:13
   |
46 |         n = (n - 1);
   |             ^     ^
   |
help: remove these parentheses
   |
46 -         n = (n - 1);
46 +         n = n - 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:51:8
   |
51 |     if (x == 0) {
   |        ^      ^
   |
help: remove these parentheses
   |
51 -     if (x == 0) {
51 +     if x == 0 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:56:11
   |
56 |     while (n > 0) {
   |           ^     ^
   |
help: remove these parentheses
   |
56 -     while (n > 0) {
56 +     while n > 0 {
   |

warning: unnecessary parentheses around method argument
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:57:55
   |
57 |         digits = { let mut v = digits.clone(); v.push((n % 10)); v };
   |                                                       ^      ^
   |
help: remove these parentheses
   |
57 -         digits = { let mut v = digits.clone(); v.push((n % 10)); v };
57 +         digits = { let mut v = digits.clone(); v.push(n % 10); v };
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:58:13
   |
58 |         n = (n / 10);
   |             ^      ^
   |
help: remove these parentheses
   |
58 -         n = (n / 10);
58 +         n = n / 10;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:63:8
   |
63 |     if ((a.len() as i64) > (b.len() as i64)) {
   |        ^                                   ^
   |
help: remove these parentheses
   |
63 -     if ((a.len() as i64) > (b.len() as i64)) {
63 +     if (a.len() as i64) > (b.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:66:8
   |
66 |     if ((a.len() as i64) < (b.len() as i64)) {
   |        ^                                   ^
   |
help: remove these parentheses
   |
66 -     if ((a.len() as i64) < (b.len() as i64)) {
66 +     if (a.len() as i64) < (b.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:69:17
   |
69 |     let mut i = ((a.len() as i64) - 1);
   |                 ^                    ^
   |
help: remove these parentheses
   |
69 -     let mut i = ((a.len() as i64) - 1);
69 +     let mut i = (a.len() as i64) - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:70:11
   |
70 |     while (i >= 0) {
   |           ^      ^
   |
help: remove these parentheses
   |
70 -     while (i >= 0) {
70 +     while i >= 0 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:71:12
   |
71 |         if (a[i as usize] > b[i as usize]) {
   |            ^                             ^
   |
help: remove these parentheses
   |
71 -         if (a[i as usize] > b[i as usize]) {
71 +         if a[i as usize] > b[i as usize] {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:74:12
   |
74 |         if (a[i as usize] < b[i as usize]) {
   |            ^                             ^
   |
help: remove these parentheses
   |
74 -         if (a[i as usize] < b[i as usize]) {
74 +         if a[i as usize] < b[i as usize] {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:77:13
   |
77 |         i = (i - 1);
   |             ^     ^
   |
help: remove these parentheses
   |
77 -         i = (i - 1);
77 +         i = i - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:85:11
   |
85 |     while (((i < (a.len() as i64)) || (i < (b.len() as i64))) || (carry > 0)) {
   |           ^                                                                 ^
   |
help: remove these parentheses
   |
85 -     while (((i < (a.len() as i64)) || (i < (b.len() as i64))) || (carry > 0)) {
85 +     while ((i < (a.len() as i64)) || (i < (b.len() as i64))) || (carry > 0) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:87:12
   |
87 |         if (i < (a.len() as i64)) {
   |            ^                    ^
   |
help: remove these parentheses
   |
87 -         if (i < (a.len() as i64)) {
87 +         if i < (a.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:91:12
   |
91 |         if (i < (b.len() as i64)) {
   |            ^                    ^
   |
help: remove these parentheses
   |
91 -         if (i < (b.len() as i64)) {
91 +         if i < (b.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:94:26
   |
94 |         let mut s: i64 = ((av + bv) + carry);
   |                          ^                 ^
   |
help: remove these parentheses
   |
94 -         let mut s: i64 = ((av + bv) + carry);
94 +         let mut s: i64 = (av + bv) + carry;
   |

warning: unnecessary parentheses around method argument
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:95:49
   |
95 |         res = { let mut v = res.clone(); v.push((s % 10)); v };
   |                                                 ^      ^
   |
help: remove these parentheses
   |
95 -         res = { let mut v = res.clone(); v.push((s % 10)); v };
95 +         res = { let mut v = res.clone(); v.push(s % 10); v };
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:96:17
   |
96 |         carry = (s / 10);
   |                 ^      ^
   |
help: remove these parentheses
   |
96 -         carry = (s / 10);
96 +         carry = s / 10;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:97:13
   |
97 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
97 -         i = (i + 1);
97 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:105:11
    |
105 |     while (i < (a.len() as i64)) {
    |           ^                    ^
    |
help: remove these parentheses
    |
105 -     while (i < (a.len() as i64)) {
105 +     while i < (a.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:108:12
    |
108 |         if (i < (b.len() as i64)) {
    |            ^                    ^
    |
help: remove these parentheses
    |
108 -         if (i < (b.len() as i64)) {
108 +         if i < (b.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:111:29
    |
111 |         let mut diff: i64 = ((av - bv) - borrow);
    |                             ^                  ^
    |
help: remove these parentheses
    |
111 -         let mut diff: i64 = ((av - bv) - borrow);
111 +         let mut diff: i64 = (av - bv) - borrow;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:112:12
    |
112 |         if (diff < 0) {
    |            ^        ^
    |
help: remove these parentheses
    |
112 -         if (diff < 0) {
112 +         if diff < 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:113:20
    |
113 |             diff = (diff + 10);
    |                    ^         ^
    |
help: remove these parentheses
    |
113 -             diff = (diff + 10);
113 +             diff = diff + 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:119:13
    |
119 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
119 -         i = (i + 1);
119 +         i = i + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:124:8
    |
124 |     if (m == 0) {
    |        ^      ^
    |
help: remove these parentheses
    |
124 -     if (m == 0) {
124 +     if m == 0 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:130:11
    |
130 |     while (i < (a.len() as i64)) {
    |           ^                    ^
    |
help: remove these parentheses
    |
130 -     while (i < (a.len() as i64)) {
130 +     while i < (a.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:131:29
    |
131 |         let mut prod: i64 = ((a[i as usize] * m) + carry);
    |                             ^                           ^
    |
help: remove these parentheses
    |
131 -         let mut prod: i64 = ((a[i as usize] * m) + carry);
131 +         let mut prod: i64 = (a[i as usize] * m) + carry;
    |

warning: unnecessary parentheses around method argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:132:49
    |
132 |         res = { let mut v = res.clone(); v.push((prod % 10)); v };
    |                                                 ^         ^
    |
help: remove these parentheses
    |
132 -         res = { let mut v = res.clone(); v.push((prod % 10)); v };
132 +         res = { let mut v = res.clone(); v.push(prod % 10); v };
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:133:17
    |
133 |         carry = (prod / 10);
    |                 ^         ^
    |
help: remove these parentheses
    |
133 -         carry = (prod / 10);
133 +         carry = prod / 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:134:13
    |
134 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
134 -         i = (i + 1);
134 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:136:11
    |
136 |     while (carry > 0) {
    |           ^         ^
    |
help: remove these parentheses
    |
136 -     while (carry > 0) {
136 +     while carry > 0 {
    |

warning: unnecessary parentheses around method argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:137:49
    |
137 |         res = { let mut v = res.clone(); v.push((carry % 10)); v };
    |                                                 ^          ^
    |
help: remove these parentheses
    |
137 -         res = { let mut v = res.clone(); v.push((carry % 10)); v };
137 +         res = { let mut v = res.clone(); v.push(carry % 10); v };
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:138:17
    |
138 |         carry = (carry / 10);
    |                 ^          ^
    |
help: remove these parentheses
    |
138 -         carry = (carry / 10);
138 +         carry = carry / 10;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:145:11
    |
145 |     while (i < ((a.len() as i64) + (b.len() as i64))) {
    |           ^                                         ^
    |
help: remove these parentheses
    |
145 -     while (i < ((a.len() as i64) + (b.len() as i64))) {
145 +     while i < ((a.len() as i64) + (b.len() as i64)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:147:13
    |
147 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
147 -         i = (i + 1);
147 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:150:11
    |
150 |     while (i < (a.len() as i64)) {
    |           ^                    ^
    |
help: remove these parentheses
    |
150 -     while (i < (a.len() as i64)) {
150 +     while i < (a.len() as i64) {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:153:15
    |
153 |         while (j < (b.len() as i64)) {
    |               ^                    ^
    |
help: remove these parentheses
    |
153 -         while (j < (b.len() as i64)) {
153 +         while j < (b.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:154:32
    |
154 |             let mut idx: i64 = (i + j);
    |                                ^     ^
    |
help: remove these parentheses
    |
154 -             let mut idx: i64 = (i + j);
154 +             let mut idx: i64 = i + j;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:155:33
    |
155 |             let mut prod: i64 = ((res[idx as usize] + (a[i as usize] * b[j as usize])) + carry);
    |                                 ^                                                             ^
    |
help: remove these parentheses
    |
155 -             let mut prod: i64 = ((res[idx as usize] + (a[i as usize] * b[j as usize])) + carry);
155 +             let mut prod: i64 = (res[idx as usize] + (a[i as usize] * b[j as usize])) + carry;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:156:33
    |
156 |             res[idx as usize] = (prod % 10);
    |                                 ^         ^
    |
help: remove these parentheses
    |
156 -             res[idx as usize] = (prod % 10);
156 +             res[idx as usize] = prod % 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:157:21
    |
157 |             carry = (prod / 10);
    |                     ^         ^
    |
help: remove these parentheses
    |
157 -             carry = (prod / 10);
157 +             carry = prod / 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:158:17
    |
158 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
158 -             j = (j + 1);
158 +             j = j + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:160:28
    |
160 |         let mut idx: i64 = (i + (b.len() as i64));
    |                            ^                    ^
    |
help: remove these parentheses
    |
160 -         let mut idx: i64 = (i + (b.len() as i64));
160 +         let mut idx: i64 = i + (b.len() as i64);
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:161:15
    |
161 |         while (carry > 0) {
    |               ^         ^
    |
help: remove these parentheses
    |
161 -         while (carry > 0) {
161 +         while carry > 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:162:33
    |
162 |             let mut prod: i64 = (res[idx as usize] + carry);
    |                                 ^                         ^
    |
help: remove these parentheses
    |
162 -             let mut prod: i64 = (res[idx as usize] + carry);
162 +             let mut prod: i64 = res[idx as usize] + carry;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:163:33
    |
163 |             res[idx as usize] = (prod % 10);
    |                                 ^         ^
    |
help: remove these parentheses
    |
163 -             res[idx as usize] = (prod % 10);
163 +             res[idx as usize] = prod % 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:164:21
    |
164 |             carry = (prod / 10);
    |                     ^         ^
    |
help: remove these parentheses
    |
164 -             carry = (prod / 10);
164 +             carry = prod / 10;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:165:19
    |
165 |             idx = (idx + 1);
    |                   ^       ^
    |
help: remove these parentheses
    |
165 -             idx = (idx + 1);
165 +             idx = idx + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:167:13
    |
167 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
167 -         i = (i + 1);
167 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:173:11
    |
173 |     while (i < k) {
    |           ^     ^
    |
help: remove these parentheses
    |
173 -     while (i < k) {
173 +     while i < k {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:175:13
    |
175 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
175 -         i = (i + 1);
175 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:182:17
    |
182 |     let mut i = ((a.len() as i64) - 1);
    |                 ^                    ^
    |
help: remove these parentheses
    |
182 -     let mut i = ((a.len() as i64) - 1);
182 +     let mut i = (a.len() as i64) - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:183:11
    |
183 |     while (i >= 0) {
    |           ^      ^
    |
help: remove these parentheses
    |
183 -     while (i >= 0) {
183 +     while i >= 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:184:28
    |
184 |         let mut cur: i64 = ((rem * 10) + a[i as usize]);
    |                            ^                          ^
    |
help: remove these parentheses
    |
184 -         let mut cur: i64 = ((rem * 10) + a[i as usize]);
184 +         let mut cur: i64 = (rem * 10) + a[i as usize];
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:185:26
    |
185 |         let mut q: i64 = (cur / m);
    |                          ^       ^
    |
help: remove these parentheses
    |
185 -         let mut q: i64 = (cur / m);
185 +         let mut q: i64 = cur / m;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:186:15
    |
186 |         rem = (cur % m);
    |               ^       ^
    |
help: remove these parentheses
    |
186 -         rem = (cur % m);
186 +         rem = cur % m;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:188:13
    |
188 |         i = (i - 1);
    |             ^     ^
    |
help: remove these parentheses
    |
188 -         i = (i - 1);
188 +         i = i - 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:194:17
    |
194 |     let mut i = ((a.len() as i64) - 1);
    |                 ^                    ^
    |
help: remove these parentheses
    |
194 -     let mut i = ((a.len() as i64) - 1);
194 +     let mut i = (a.len() as i64) - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:195:11
    |
195 |     while (i >= 0) {
    |           ^      ^
    |
help: remove these parentheses
    |
195 -     while (i >= 0) {
195 +     while i >= 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:197:13
    |
197 |         i = (i - 1);
    |             ^     ^
    |
help: remove these parentheses
    |
197 -         i = (i - 1);
197 +         i = i - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:204:11
    |
204 |     while (i < n) {
    |           ^     ^
    |
help: remove these parentheses
    |
204 -     while (i < n) {
204 +     while i < n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:206:13
    |
206 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
206 -         i = (i + 1);
206 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:213:11
    |
213 |     while ((tmp.len() as i64) > 0) {
    |           ^                      ^
    |
help: remove these parentheses
    |
213 -     while ((tmp.len() as i64) > 0) {
213 +     while (tmp.len() as i64) > 0 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:217:15
    |
217 |         while (i < (tmp.len() as i64)) {
    |               ^                      ^
    |
help: remove these parentheses
    |
217 -         while (i < (tmp.len() as i64)) {
217 +         while i < (tmp.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:218:16
    |
218 |             if (tmp[i as usize] < min) {
    |                ^                     ^
    |
help: remove these parentheses
    |
218 -             if (tmp[i as usize] < min) {
218 +             if tmp[i as usize] < min {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:222:17
    |
222 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
222 -             i = (i + 1);
222 +             i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:227:15
    |
227 |         while (j < (tmp.len() as i64)) {
    |               ^                      ^
    |
help: remove these parentheses
    |
227 -         while (j < (tmp.len() as i64)) {
227 +         while j < (tmp.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:228:16
    |
228 |             if (j != idx) {
    |                ^        ^
    |
help: remove these parentheses
    |
228 -             if (j != idx) {
228 +             if j != idx {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:231:17
    |
231 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
231 -             j = (j + 1);
231 +             j = j + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:240:11
    |
240 |     while (i <= n) {
    |           ^      ^
    |
help: remove these parentheses
    |
240 -     while (i <= n) {
240 +     while i <= n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:242:13
    |
242 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
242 -         i = (i + 1);
242 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:245:11
    |
245 |     while ((p * p) <= n) {
    |           ^            ^
    |
help: remove these parentheses
    |
245 -     while ((p * p) <= n) {
245 +     while (p * p) <= n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:247:30
    |
247 |             let mut m: i64 = (p * p);
    |                              ^     ^
    |
help: remove these parentheses
    |
247 -             let mut m: i64 = (p * p);
247 +             let mut m: i64 = p * p;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:248:19
    |
248 |             while (m <= n) {
    |                   ^      ^
    |
help: remove these parentheses
    |
248 -             while (m <= n) {
248 +             while m <= n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:250:21
    |
250 |                 m = (m + p);
    |                     ^     ^
    |
help: remove these parentheses
    |
250 -                 m = (m + p);
250 +                 m = m + p;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:253:13
    |
253 |         p = (p + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
253 -         p = (p + 1);
253 +         p = p + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:257:11
    |
257 |     while (x <= n) {
    |           ^      ^
    |
help: remove these parentheses
    |
257 -     while (x <= n) {
257 +     while x <= n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:261:13
    |
261 |         x = (x + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
261 -         x = (x + 1);
261 +         x = x + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:268:12
    |
268 |         if (p > n) {
    |            ^     ^
    |
help: remove these parentheses
    |
268 -         if (p > n) {
268 +         if p > n {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:273:15
    |
273 |         while (t > 0) {
    |               ^     ^
    |
help: remove these parentheses
    |
273 -         while (t > 0) {
273 +         while t > 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:274:17
    |
274 |             t = (t / p);
    |                 ^     ^
    |
help: remove these parentheses
    |
274 -             t = (t / p);
274 +             t = t / p;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:275:17
    |
275 |             e = (e + t);
    |                 ^     ^
    |
help: remove these parentheses
    |
275 -             e = (e + t);
275 +             e = e + t;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:285:12
    |
285 |         if ((p * p) > n) {
    |            ^           ^
    |
help: remove these parentheses
    |
285 -         if ((p * p) > n) {
285 +         if (p * p) > n {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:289:15
    |
289 |         while ((n % p) == 0) {
    |               ^            ^
    |
help: remove these parentheses
    |
289 -         while ((n % p) == 0) {
289 +         while (n % p) == 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:290:17
    |
290 |             c = (c + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
290 -             c = (c + 1);
290 +             c = c + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:291:17
    |
291 |             n = (n / p);
    |                 ^     ^
    |
help: remove these parentheses
    |
291 -             n = (n / p);
291 +             n = n / p;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:293:12
    |
293 |         if (c > 0) {
    |            ^     ^
    |
help: remove these parentheses
    |
293 -         if (c > 0) {
293 +         if c > 0 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:297:8
    |
297 |     if (n > 1) {
    |        ^     ^
    |
help: remove these parentheses
    |
297 -     if (n > 1) {
297 +     if n > 1 {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:303:55
    |
303 |     let mut exps: HashMap<String, i64> = factorialExp((6 * n), primes.clone());
    |                                                       ^     ^
    |
help: remove these parentheses
    |
303 -     let mut exps: HashMap<String, i64> = factorialExp((6 * n), primes.clone());
303 +     let mut exps: HashMap<String, i64> = factorialExp(6 * n, primes.clone());
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:309:19
    |
309 |     let t2: i64 = ((((532 * n) * n) + (126 * n)) + 9);
    |                   ^                                 ^
    |
help: remove these parentheses
    |
309 -     let t2: i64 = ((((532 * n) * n) + (126 * n)) + 9);
309 +     let t2: i64 = (((532 * n) * n) + (126 * n)) + 9;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:324:15
    |
324 |         while (i < e) {
    |               ^     ^
    |
help: remove these parentheses
    |
324 -         while (i < e) {
324 +         while i < e {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:326:17
    |
326 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
326 -             i = (i + 1);
326 +             i = i + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:333:8
    |
333 |     if (pw >= (s.len() as i64)) {
    |        ^                      ^
    |
help: remove these parentheses
    |
333 -     if (pw >= (s.len() as i64)) {
333 +     if pw >= (s.len() as i64) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:334:74
    |
334 |         let mut frac: String = format!("{}{}", repeat(String::from("0"), (pw - (s.len() as i64))), s).clone();
    |                                                                          ^                     ^
    |
help: remove these parentheses
    |
334 -         let mut frac: String = format!("{}{}", repeat(String::from("0"), (pw - (s.len() as i64))), s).clone();
334 +         let mut frac: String = format!("{}{}", repeat(String::from("0"), pw - (s.len() as i64)), s).clone();
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:335:12
    |
335 |         if ((frac.len() as i64) < 33) {
    |            ^                        ^
    |
help: remove these parentheses
    |
335 -         if ((frac.len() as i64) < 33) {
335 +         if (frac.len() as i64) < 33 {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:336:68
    |
336 |             frac = format!("{}{}", frac, repeat(String::from("0"), (33 - (frac.len() as i64))));
    |                                                                    ^                        ^
    |
help: remove these parentheses
    |
336 -             frac = format!("{}{}", frac, repeat(String::from("0"), (33 - (frac.len() as i64))));
336 +             frac = format!("{}{}", frac, repeat(String::from("0"), 33 - (frac.len() as i64)));
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:342:8
    |
342 |     if ((frac.len() as i64) < 33) {
    |        ^                        ^
    |
help: remove these parentheses
    |
342 -     if ((frac.len() as i64) < 33) {
342 +     if (frac.len() as i64) < 33 {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:343:64
    |
343 |         frac = format!("{}{}", frac, repeat(String::from("0"), (33 - (frac.len() as i64))));
    |                                                                ^                        ^
    |
help: remove these parentheses
    |
343 -         frac = format!("{}{}", frac, repeat(String::from("0"), (33 - (frac.len() as i64))));
343 +         frac = format!("{}{}", frac, repeat(String::from("0"), 33 - (frac.len() as i64)));
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:348:8
    |
348 |     if (bigCmp(a.clone(), b.clone()) >= 0) {
    |        ^                                 ^
    |
help: remove these parentheses
    |
348 -     if (bigCmp(a.clone(), b.clone()) >= 0) {
348 +     if bigCmp(a.clone(), b.clone()) >= 0 {
    |

warning: denote infinite loops with `loop { ... }`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:362:5
    |
362 |     while true {
    |     ^^^^^^^^^^ help: use `loop`
    |
    = note: `#[warn(while_true)]` on by default

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:364:23
    |
364 |         let pw: i64 = ((6 * n) + 3);
    |                       ^           ^
    |
help: remove these parentheses
    |
364 -         let pw: i64 = ((6 * n) + 3);
364 +         let pw: i64 = (6 * n) + 3;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:365:12
    |
365 |         if (pw > denomPow) {
    |            ^             ^
    |
help: remove these parentheses
    |
365 -         if (pw > denomPow) {
365 +         if pw > denomPow {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:366:44
    |
366 |             sum = bigMulPow10(sum.clone(), (pw - denomPow));
    |                                            ^             ^
    |
help: remove these parentheses
    |
366 -             sum = bigMulPow10(sum.clone(), (pw - denomPow));
366 +             sum = bigMulPow10(sum.clone(), pw - denomPow);
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:367:46
    |
367 |             prev = bigMulPow10(prev.clone(), (pw - denomPow));
    |                                              ^             ^
    |
help: remove these parentheses
    |
367 -             prev = bigMulPow10(prev.clone(), (pw - denomPow));
367 +             prev = bigMulPow10(prev.clone(), pw - denomPow);
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:370:12
    |
370 |         if (n < 10) {
    |            ^      ^
    |
help: remove these parentheses
    |
370 -         if (n < 10) {
370 +         if n < 10 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:373:19
    |
373 |             while ((ipStr.len() as i64) < 44) {
    |                   ^                         ^
    |
help: remove these parentheses
    |
373 -             while ((ipStr.len() as i64) < 44) {
373 +             while (ipStr.len() as i64) < 44 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:377:19
    |
377 |             while ((pwStr.len() as i64) < 3) {
    |                   ^                        ^
    |
help: remove these parentheses
    |
377 -             while ((pwStr.len() as i64) < 3) {
377 +             while (pwStr.len() as i64) < 3 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:381:19
    |
381 |             while ((padTerm.len() as i64) < 35) {
    |                   ^                           ^
    |
help: remove these parentheses
    |
381 -             while ((padTerm.len() as i64) < 35) {
381 +             while (padTerm.len() as i64) < 35 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:388:12
    |
388 |         if ((denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0)) {
    |            ^                                                                                           ^
    |
help: remove these parentheses
    |
388 -         if ((denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0)) {
388 +         if (denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:388:82
    |
388 |         if ((denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0)) {
    |                                                                                  ^             ^
    |
help: remove these parentheses
    |
388 -         if ((denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), (denomPow - 70))) < 0)) {
388 +         if ((denomPow >= 70) && (bigCmp(diff.clone(), bigMulPow10(bigFromInt(1), denomPow - 70)) < 0)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:392:13
    |
392 |         n = (n + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
392 -         n = (n + 1);
392 +         n = n + 1;
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:395:59
    |
395 |     let mut target: Vec<i64> = bigMulPow10(bigFromInt(1), (denomPow + (2 * precision)));
    |                                                           ^                          ^
    |
help: remove these parentheses
    |
395 -     let mut target: Vec<i64> = bigMulPow10(bigFromInt(1), (denomPow + (2 * precision)));
395 +     let mut target: Vec<i64> = bigMulPow10(bigFromInt(1), denomPow + (2 * precision));
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:397:57
    |
397 |     let mut high: Vec<i64> = bigMulPow10(bigFromInt(1), (precision + 1));
    |                                                         ^             ^
    |
help: remove these parentheses
    |
397 -     let mut high: Vec<i64> = bigMulPow10(bigFromInt(1), (precision + 1));
397 +     let mut high: Vec<i64> = bigMulPow10(bigFromInt(1), precision + 1);
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:398:11
    |
398 |     while (bigCmp(low.clone(), bigSub(high.clone(), bigFromInt(1))) < 0) {
    |           ^                                                            ^
    |
help: remove these parentheses
    |
398 -     while (bigCmp(low.clone(), bigSub(high.clone(), bigFromInt(1))) < 0) {
398 +     while bigCmp(low.clone(), bigSub(high.clone(), bigFromInt(1))) < 0 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:401:12
    |
401 |         if (bigCmp(prod.clone(), target.clone()) <= 0) {
    |            ^                                         ^
    |
help: remove these parentheses
    |
401 -         if (bigCmp(prod.clone(), target.clone()) <= 0) {
401 +         if bigCmp(prod.clone(), target.clone()) <= 0 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:409:8
    |
409 |     if ((piStr.len() as i64) <= precision) {
    |        ^                                 ^
    |
help: remove these parentheses
    |
409 -     if ((piStr.len() as i64) <= precision) {
409 +     if (piStr.len() as i64) <= precision {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:410:59
    |
410 |         piStr = format!("{}{}", repeat(String::from("0"), ((precision - (piStr.len() as i64)) + 1)), piStr);
    |                                                           ^                                      ^
    |
help: remove these parentheses
    |
410 -         piStr = format!("{}{}", repeat(String::from("0"), ((precision - (piStr.len() as i64)) + 1)), piStr);
410 +         piStr = format!("{}{}", repeat(String::from("0"), (precision - (piStr.len() as i64)) + 1), piStr);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:420:28
    |
420 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
420 -     let duration_us: i64 = ((_end - _start) / 1000);
420 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:421:29
    |
421 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
421 -     let memory_bytes: i64 = (_end_mem - _start_mem);
421 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:308:46
    |
308 |     exps.insert("2".clone(), ({ exps.get("2".as_str()).cloned().unwrap_or(0) } + 5));
    |                                              ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:308:17
    |
308 |     exps.insert("2".clone(), ({ exps.get("2".as_str()).cloned().unwrap_or(0) } + 5));
    |          ------ ^^^^-----^^
    |          |      |   |
    |          |      |   help: try using a conversion method: `to_string`
    |          |      expected `String`, found `&str`
    |          arguments to this method are incorrect
    |
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:314:46
    |
314 |     exps.insert("3".clone(), ({ exps.get("3".as_str()).cloned().unwrap_or(0) } - 1));
    |                                              ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:314:17
    |
314 |     exps.insert("3".clone(), ({ exps.get("3".as_str()).cloned().unwrap_or(0) } - 1));
    |          ------ ^^^^-----^^
    |          |      |   |
    |          |      |   help: try using a conversion method: `to_string`
    |          |      expected `String`, found `&str`
    |          arguments to this method are incorrect
    |
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:50:19
   |
50 |     fn bigFromInt(mut x: i64) -> Vec<i64> {
   |                   ----^
   |                   |
   |                   help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:62:15
   |
62 |     fn bigCmp(mut a: Vec<i64>, mut b: Vec<i64>) -> i64 {
   |               ----^
   |               |
   |               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:62:32
   |
62 |     fn bigCmp(mut a: Vec<i64>, mut b: Vec<i64>) -> i64 {
   |                                ----^
   |                                |
   |                                help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:81:15
   |
81 |     fn bigAdd(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
   |               ----^
   |               |
   |               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:81:32
   |
81 |     fn bigAdd(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
   |                                ----^
   |                                |
   |                                help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:94:13
   |
94 |         let mut s: i64 = ((av + bv) + carry);
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:101:15
    |
101 |     fn bigSub(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |               ----^
    |               |
    |               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:101:32
    |
101 |     fn bigSub(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |                                ----^
    |                                |
    |                                help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:106:13
    |
106 |         let mut av: i64 = a[i as usize];
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:123:20
    |
123 |     fn bigMulSmall(mut a: Vec<i64>, mut m: i64) -> Vec<i64> {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:123:37
    |
123 |     fn bigMulSmall(mut a: Vec<i64>, mut m: i64) -> Vec<i64> {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:131:13
    |
131 |         let mut prod: i64 = ((a[i as usize] * m) + carry);
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:142:18
    |
142 |     fn bigMulBig(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |                  ----^
    |                  |
    |                  help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:142:35
    |
142 |     fn bigMulBig(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |                                   ----^
    |                                   |
    |                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:154:17
    |
154 |             let mut idx: i64 = (i + j);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:155:17
    |
155 |             let mut prod: i64 = ((res[idx as usize] + (a[i as usize] * b[j as usize])) + carry);
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:162:17
    |
162 |             let mut prod: i64 = (res[idx as usize] + carry);
    |                 ----^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:171:37
    |
171 |     fn bigMulPow10(mut a: Vec<i64>, mut k: i64) -> Vec<i64> {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:179:20
    |
179 |     fn bigDivSmall(mut a: Vec<i64>, mut m: i64) -> Vec<i64> {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:179:37
    |
179 |     fn bigDivSmall(mut a: Vec<i64>, mut m: i64) -> Vec<i64> {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:184:13
    |
184 |         let mut cur: i64 = ((rem * 10) + a[i as usize]);
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:185:13
    |
185 |         let mut q: i64 = (cur / m);
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:192:20
    |
192 |     fn bigToString(mut a: Vec<i64>) -> String {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:201:15
    |
201 |     fn repeat(mut ch: String, mut n: i64) -> String {
    |               ----^^
    |               |
    |               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:201:31
    |
201 |     fn repeat(mut ch: String, mut n: i64) -> String {
    |                               ----^
    |                               |
    |                               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:210:17
    |
210 |     fn sortInts(mut xs: Vec<i64>) -> Vec<i64> {
    |                 ----^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:237:19
    |
237 |     fn primesUpTo(mut n: i64) -> Vec<i64> {
    |                   ----^
    |                   |
    |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:265:21
    |
265 |     fn factorialExp(mut n: i64, mut primes: Vec<i64>) -> HashMap<String, i64> {
    |                     ----^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:265:33
    |
265 |     fn factorialExp(mut n: i64, mut primes: Vec<i64>) -> HashMap<String, i64> {
    |                                 ----^^^^^^
    |                                 |
    |                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:281:20
    |
281 |     fn factorSmall(mut x: i64, mut primes: Vec<i64>) -> HashMap<String, i64> {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:281:32
    |
281 |     fn factorSmall(mut x: i64, mut primes: Vec<i64>) -> HashMap<String, i64> {
    |                                ----^^^^^^
    |                                |
    |                                help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:331:19
    |
331 |     fn formatTerm(mut ip: Vec<i64>, mut pw: i64) -> String {
    |                   ----^^
    |                   |
    |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:331:37
    |
331 |     fn formatTerm(mut ip: Vec<i64>, mut pw: i64) -> String {
    |                                     ----^^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:332:9
    |
332 |     let mut s: String = bigToString(ip.clone()).clone();
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:340:9
    |
340 |     let mut intpart: String = { let tmp = &s; tmp.chars().skip(0 as usize).take((((s.len() as i64) - pw) - 0) as usize).collect::<String>...
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:347:19
    |
347 |     fn bigAbsDiff(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |                   ----^
    |                   |
    |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:347:36
    |
347 |     fn bigAbsDiff(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    |                                    ----^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:354:9
    |
354 |     let mut primes: Vec<i64> = primesUpTo(2000);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:363:13
    |
363 |         let mut ip: Vec<i64> = computeIP(n, primes.clone());
    |             ----^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:387:13
    |
387 |         let mut diff: Vec<i64> = bigAbsDiff(sum.clone(), prev.clone());
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:395:9
    |
395 |     let mut target: Vec<i64> = bigMulPow10(bigFromInt(1), (denomPow + (2 * precision)));
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:399:13
    |
399 |         let mut mid: Vec<i64> = bigDivSmall(bigAdd(low.clone(), high.clone()), 2);
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:400:13
    |
400 |         let mut prod: Vec<i64> = bigMulBig(bigMulBig(mid.clone(), mid.clone()), sum.clone());
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:407:9
    |
407 |     let mut piInt: Vec<i64> = low;
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:412:9
    |
412 |     let mut out: String = format!("{}{}", format!("{}{}", { let tmp = &piStr; tmp.chars().skip(0 as usize).take((((piStr.len() as i64) - ...
    |         ----^^^
    |         |
    |         help: remove this `mut`

error[E0382]: borrow of moved value: `sum`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/almkvist-giullera-formula-for-pi.rs:366:31
    |
358 |     let mut sum: Vec<i64> = bigFromInt(0);
    |         ------- move occurs because `sum` has type `Vec<i64>`, which does not implement the `Copy` trait
...
362 |     while true {
    |     ---------- inside of this loop
...
366 |             sum = bigMulPow10(sum.clone(), (pw - denomPow));
    |                               ^^^ value borrowed here after move
...
391 |         prev = sum;
    |                --- value moved here, in previous iteration of loop
    |
help: consider cloning the value if the performance cost is acceptable
    |
391 |         prev = sum.clone();
    |                   ++++++++

error: aborting due to 5 previous errors; 186 warnings emitted

Some errors have detailed explanations: E0308, E0382, E0658.
For more information about an error, try `rustc --explain E0308`.
