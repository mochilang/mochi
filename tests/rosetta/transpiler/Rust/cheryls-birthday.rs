// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:27 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Birthday {
    month: i64,
    day: i64,
}
impl std::fmt::Display for Birthday {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"month\": {}", self.month)?;
        write!(f, ", ")?;
        write!(f, "\"day\": {}", self.day)?;
        write!(f, "}}")
    }
}

static mut g_choices: Vec<Birthday> = Vec::new();
static mut g_filtered: Vec<Birthday> = Vec::new();
static mut g_filtered2: Vec<Birthday> = Vec::new();
static mut g_filtered3: Vec<Birthday> = Vec::new();
static mut g_filtered4: Vec<Birthday> = Vec::new();
fn main() {
    unsafe {
        g_choices = vec![Birthday {month: 5, day: 15}, Birthday {month: 5, day: 16}, Birthday {month: 5, day: 19}, Birthday {month: 6, day: 17}, Birthday {month: 6, day: 18}, Birthday {month: 7, day: 14}, Birthday {month: 7, day: 16}, Birthday {month: 8, day: 14}, Birthday {month: 8, day: 15}, Birthday {month: 8, day: 17}];
        g_filtered = vec![];
        g_filtered2 = vec![];
        g_filtered3 = vec![];
        g_filtered4 = vec![];
                let _start: i64 = _now();
        unsafe fn monthUnique(b: &Birthday, mut list: Vec<Birthday>) -> bool {
    let mut c: i64 = 0;
    for x in list.iter().cloned() {
        if (x.month == b.month) {
            c = (c + 1);
        }
    }
    return (c == 1)
};
        unsafe fn dayUnique(b: &Birthday, mut list: Vec<Birthday>) -> bool {
    let mut c: i64 = 0;
    for x in list.iter().cloned() {
        if (x.day == b.day) {
            c = (c + 1);
        }
    }
    return (c == 1)
};
        unsafe fn monthWithUniqueDay(b: &Birthday, list: &mut Vec<Birthday>) -> bool {
    for x in list.iter().cloned() {
        if ((x.month == b.month) && dayUnique(&x, list.clone())) {
            return true
        }
    }
    return false
};
        unsafe fn bstr(b: &Birthday) -> String {
    let mut months: Vec<String> = vec![String::from(""), String::from("January"), String::from("February"), String::from("March"), String::from("April"), String::from("May"), String::from("June"), String::from("July"), String::from("August"), String::from("September"), String::from("October"), String::from("November"), String::from("December")];
    return format!("{}{}", format!("{}{}", months[b.month as usize].clone(), " "), b.day.to_string()).clone()
};
        for bd in g_choices.clone().iter().cloned() {
            if !monthUnique(&bd, g_choices.clone().clone()) {
                g_filtered = { let mut _v = g_filtered.clone().clone(); _v.push(bd.clone()); _v };
            }
        }
        for bd in g_filtered.clone().iter().cloned() {
            if !monthWithUniqueDay(&bd, &mut g_filtered) {
                g_filtered2 = { let mut _v = g_filtered2.clone().clone(); _v.push(bd.clone()); _v };
            }
        }
        for bd in g_filtered2.clone().iter().cloned() {
            if dayUnique(&bd, g_filtered2.clone().clone()) {
                g_filtered3 = { let mut _v = g_filtered3.clone().clone(); _v.push(bd.clone()); _v };
            }
        }
        for bd in g_filtered3.clone().iter().cloned() {
            if monthUnique(&bd, g_filtered3.clone().clone()) {
                g_filtered4 = { let mut _v = g_filtered4.clone().clone(); _v.push(bd.clone()); _v };
            }
        }
        if ((g_filtered4.clone().len() as i64) == 1) {
            println!("{}", format!("{}{}", "Cheryl's birthday is ", bstr(&g_filtered4[0 as usize].clone())));
        } else {
            println!("{}", "Something went wrong!");
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
