// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct DataItem {
    pm: i64,
    g1: i64,
    s1: i64,
    g2: i64,
    s2: i64,
    d: i64,
}
impl std::fmt::Display for DataItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"pm\": {}", self.pm)?;
        write!(f, ", ")?;
        write!(f, "\"g1\": {}", self.g1)?;
        write!(f, ", ")?;
        write!(f, "\"s1\": {}", self.s1)?;
        write!(f, ", ")?;
        write!(f, "\"g2\": {}", self.g2)?;
        write!(f, ", ")?;
        write!(f, "\"s2\": {}", self.s2)?;
        write!(f, ", ")?;
        write!(f, "\"d\": {}", self.d)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut i = ((s.len() as i64) - 3);
    while (i > 0) {
        s = format!("{}{}", format!("{}{}", s[0..i].to_vec(), ","), s[i..(s.len() as i64)].to_vec());
        i = (i - 3);
    }
    return s.to_string().clone()
};
    fn mochi_main() {
    let mut data: Vec<HashMap<&str, i64>> = vec![HashMap::from([(String::from("pm"), 10), (String::from("g1"), 4), (String::from("s1"), 7), (String::from("g2"), 6), (String::from("s2"), 23), (String::from("d"), 16)]), HashMap::from([(String::from("pm"), 100), (String::from("g1"), 14), (String::from("s1"), 113), (String::from("g2"), 16), (String::from("s2"), 1831), (String::from("d"), 1718)]), HashMap::from([(String::from("pm"), 1000), (String::from("g1"), 14), (String::from("s1"), 113), (String::from("g2"), 16), (String::from("s2"), 1831), (String::from("d"), 1718)]), HashMap::from([(String::from("pm"), 10000), (String::from("g1"), 36), (String::from("s1"), 9551), (String::from("g2"), 38), (String::from("s2"), 30593), (String::from("d"), 21042)]), HashMap::from([(String::from("pm"), 100000), (String::from("g1"), 70), (String::from("s1"), 173359), (String::from("g2"), 72), (String::from("s2"), 31397), (String::from("d"), 141962)]), HashMap::from([(String::from("pm"), 1000000), (String::from("g1"), 100), (String::from("s1"), 396733), (String::from("g2"), 102), (String::from("s2"), 1444309), (String::from("d"), 1047576)]), HashMap::from([(String::from("pm"), 10000000), (String::from("g1"), 148), (String::from("s1"), 2010733), (String::from("g2"), 150), (String::from("s2"), 13626257), (String::from("d"), 11615524)]), HashMap::from([(String::from("pm"), 100000000), (String::from("g1"), 198), (String::from("s1"), 46006769), (String::from("g2"), 200), (String::from("s2"), 378043979), (String::from("d"), 332037210)]), HashMap::from([(String::from("pm"), 1000000000), (String::from("g1"), 276), (String::from("s1"), 649580171), (String::from("g2"), 278), (String::from("s2"), 4260928601), (String::from("d"), 3611348430)]), HashMap::from([(String::from("pm"), 10000000000), (String::from("g1"), 332), (String::from("s1"), 5893180121), (String::from("g2"), 334), (String::from("s2"), 30827138509), (String::from("d"), 24933958388)]), HashMap::from([(String::from("pm"), 100000000000), (String::from("g1"), 386), (String::from("s1"), 35238645587), (String::from("g2"), 388), (String::from("s2"), 156798792223), (String::from("d"), 121560146636)])];
    for entry in &data {
        let mut pm: String = commatize(entry["pm".as_str()]).clone();
        let mut line1: String = format!("{}{}", format!("{}{}", "Earliest difference > ", pm), " between adjacent prime gap starting primes:").clone();
        println!("{}", line1);
        let mut line2: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Gap ", entry["g1".as_str()].to_string()), " starts at "), commatize(entry["s1".as_str()])), ", gap "), entry["g2".as_str()].to_string()), " starts at "), commatize(entry["s2".as_str()])), ", difference is "), commatize(entry["d".as_str()])), ".").clone();
        println!("{}", line2);
        println!("{}", "");
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
