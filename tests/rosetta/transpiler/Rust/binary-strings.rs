// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_b: Vec<i64> = Vec::new();
static mut g_c: Vec<i64> = Vec::new();
static mut g_d: Vec<i64> = Vec::new();
static mut g_i: i64 = 0;
static mut g_z: Vec<i64> = Vec::new();
static mut g_sub: Vec<i64> = Vec::new();
static mut g_f: Vec<i64> = Vec::new();
static mut g_rem: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_b = vec![98, 105, 110, 97, 114, 121];
        g_c = g_b.clone();
        g_d = vec![];
        g_i = 0;
        g_z = { let mut _v = g_b.clone().clone(); _v.push(122); _v };
        g_sub = g_b.clone()[1 as usize..3 as usize].to_vec();
        g_f = vec![];
        g_rem = vec![];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn char(mut n: i64) -> String {
    let letters = String::from("abcdefghijklmnopqrstuvwxyz");
    let idx: i64 = (n - 97);
    if ((idx < 0) || (idx >= (letters.len() as i64))) {
        return String::from("?")
    }
    return { let tmp = &letters; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }.clone()
};
        unsafe fn fromBytes(mut bs: Vec<i64>) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < (bs.len() as i64)) {
        s = format!("{}{}", s, char(bs[i as usize]));
        i = (i + 1);
    }
    return s.clone()
};
        static mut g_b: Vec<i64> = Vec::new();;
        println!("{}", format!("{:?}", g_b.clone()));
        static mut g_c: Vec<i64> = Vec::new();;
        println!("{}", format!("{:?}", g_c.clone()));
        println!("{}", (g_b.clone() == g_c.clone()).to_string());
        static mut g_d: Vec<i64> = Vec::new();;
        static mut g_i: i64 = 0;;
        while (g_i < (g_b.clone().len() as i64)) {
            g_d = { let mut _v = g_d.clone().clone(); _v.push(g_b.clone()[g_i as usize]); _v };
            g_i = (g_i + 1);
        }
        g_d[1 as usize] = 97;
        g_d[4 as usize] = 110;
        println!("{}", fromBytes(g_b.clone().clone()));
        println!("{}", fromBytes(g_d.clone().clone()));
        println!("{}", ((g_b.clone().len() as i64) == 0).to_string());
        static mut g_z: Vec<i64> = Vec::new();;
        println!("{}", fromBytes(g_z.clone().clone()));
        static mut g_sub: Vec<i64> = Vec::new();;
        println!("{}", fromBytes(g_sub.clone().clone()));
        static mut g_f: Vec<i64> = Vec::new();;
        g_i = 0;
        while (g_i < (g_d.clone().len() as i64)) {
            let val: i64 = g_d.clone()[g_i as usize];
            if (val == 110) {
                g_f = { let mut _v = g_f.clone().clone(); _v.push(109); _v };
            } else {
                g_f = { let mut _v = g_f.clone().clone(); _v.push(val); _v };
            }
            g_i = (g_i + 1);
        }
        println!("{}", format!("{}{}", format!("{}{}", fromBytes(g_d.clone().clone()), " -> "), fromBytes(g_f.clone().clone())));
        static mut g_rem: Vec<i64> = Vec::new();;
        g_rem = { let mut _v = g_rem.clone().clone(); _v.push(g_b.clone()[0 as usize]); _v };
        g_i = 3;
        while (g_i < (g_b.clone().len() as i64)) {
            g_rem = { let mut _v = g_rem.clone().clone(); _v.push(g_b.clone()[g_i as usize]); _v };
            g_i = (g_i + 1);
        }
        println!("{}", fromBytes(g_rem.clone().clone()));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
