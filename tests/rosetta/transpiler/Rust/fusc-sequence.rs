// Generated by Mochi transpiler v0.10.52 on 2025-08-02 01:56 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn fuscVal(mut n: i64) -> i64 {
    let mut a: i64 = 1;
    let mut b: i64 = 0;
    let mut x: i64 = n;
    while (x > 0) {
        if ((x % 2) == 0) {
            x = (x / 2);
            a = (a + b);
        } else {
            x = ((x - 1) / 2);
            b = (a + b);
        }
    }
    if (n == 0) {
        return 0
    }
    return b
};
    fn firstFusc(mut n: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        arr = { let mut _v = arr.clone(); _v.push(fuscVal(i)); _v };
        i = (i + 1);
    }
    return arr
};
    fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut neg: bool = false;
    if (n < 0) {
        neg = true;
        s = { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() };
    }
    let mut i = ((s.len() as i64) - 3);
    while (i >= 1) {
        s = format!("{}{}", format!("{}{}", { let tmp = &s; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }, ","), { let tmp = &s; tmp.chars().skip(i as usize).take(((s.len() as i64) - i) as usize).collect::<String>() });
        i = (i - 3);
    }
    if neg {
        return format!("{}{}", "-", s)
    }
    return s.clone()
};
    fn padLeft(s: &str, mut w: i64) -> String {
    let mut out: String = s.to_string().clone();
    while ((out.len() as i64) < w) {
        out = format!("{}{}", " ", out);
    }
    return out.clone()
};
    fn mochi_main() {
    println!("{}", "The first 61 fusc numbers are:");
    println!("{}", format!("{:?}", firstFusc(61)));
    println!("{}", "\nThe fusc numbers whose length > any previous fusc number length are:");
    let mut idxs: Vec<i64> = vec![0, 37, 1173, 35499, 699051, 19573419];
    let mut i: i64 = 0;
    while (i < (idxs.len() as i64)) {
        let mut idx: i64 = idxs[i as usize];
        let mut val: i64 = fuscVal(idx);
        let mut numStr: String = padLeft(&commatize(val), 7).clone();
        let mut idxStr: String = padLeft(&commatize(idx), 10).clone();
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", numStr, " (index "), idxStr), ")"));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
