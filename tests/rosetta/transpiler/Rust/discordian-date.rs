// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_dayNames: Vec<String> = Vec::new();
static mut g_seasons: Vec<String> = Vec::new();
static mut g_holydays: Vec<Vec<String>> = Vec::new();
static mut g_daysBefore: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_dayNames = vec![String::from("Sweetmorn"), String::from("Boomtime"), String::from("Pungenday"), String::from("Prickle-Prickle"), String::from("Setting Orange")];
        g_seasons = vec![String::from("Chaos"), String::from("Discord"), String::from("Confusion"), String::from("Bureaucracy"), String::from("The Aftermath")];
        g_holydays = vec![vec![String::from("Mungday"), String::from("Chaoflux")], vec![String::from("Mojoday"), String::from("Discoflux")], vec![String::from("Syaday"), String::from("Confuflux")], vec![String::from("Zaraday"), String::from("Bureflux")], vec![String::from("Maladay"), String::from("Afflux")]];
        g_daysBefore = vec![0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_dayNames: Vec<String> = Vec::new();;
        static mut g_seasons: Vec<String> = Vec::new();;
        static mut g_holydays: Vec<Vec<String>> = Vec::new();;
        unsafe fn isLeap(mut y: i64) -> bool {
    if ((y % 400) == 0) {
        return true
    }
    if ((y % 100) == 0) {
        return false
    }
    return ((y % 4) == 0)
};
        static mut g_daysBefore: Vec<i64> = Vec::new();;
        unsafe fn dayOfYear(mut y: i64, mut m: i64, mut d: i64) -> i64 {
    let mut doy: i64 = (g_daysBefore.clone()[(m - 1) as usize] + d);
    if ((m > 2) && isLeap(y)) {
        doy = (doy + 1);
    }
    return doy
};
        unsafe fn ordinal(mut n: i64) -> String {
    let mut suff = String::from("th");
    let mut mod100: i64 = (n % 100);
    if ((mod100 < 11) || (mod100 > 13)) {
        let mut r: i64 = (n % 10);
        if (r == 1) {
            suff = String::from("st");
        } else if (r == 2) {
            suff = String::from("nd");
        } else if (r == 3) {
            suff = String::from("rd");
        }
    }
    return format!("{}{}", n.to_string(), suff).to_string().clone()
};
        unsafe fn discordian(mut y: i64, mut m: i64, mut d: i64) -> String {
    if ((isLeap(y) && (m == 2)) && (d == 29)) {
        return format!("{}{}", "St. Tib's Day, YOLD ", (y + 1166).to_string())
    }
    let mut doy: i64 = dayOfYear(y, m, d);
    if (isLeap(y) && (doy > 60)) {
        doy = (doy - 1);
    }
    let mut idx: i64 = (doy - 1);
    let mut season: i64 = (idx / 73);
    let mut day: i64 = (idx % 73);
    let mut res: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", g_dayNames.clone()[(idx % 5) as usize].clone(), ", the "), ordinal((day + 1))), " day of "), g_seasons.clone()[season as usize].clone()), " in the YOLD "), (y + 1166).to_string()).clone();
    if (day == 4) {
        res = format!("{}{}", format!("{}{}", format!("{}{}", res, ". Celebrate "), g_holydays.clone()[season as usize].clone()[0 as usize].clone()), "!");
    }
    if (day == 49) {
        res = format!("{}{}", format!("{}{}", format!("{}{}", res, ". Celebrate "), g_holydays.clone()[season as usize].clone()[1 as usize].clone()), "!");
    }
    return res.clone()
};
        unsafe fn mochi_main() {
    let mut dates: Vec<Vec<i64>> = vec![vec![2010, 7, 22], vec![2012, 2, 28], vec![2012, 2, 29], vec![2012, 3, 1], vec![2012, 12, 31], vec![2013, 1, 1], vec![2100, 12, 31], vec![2015, 10, 19], vec![2010, 1, 5], vec![2011, 5, 3], vec![2000, 3, 13]];
    let mut i: i64 = 0;
    while (i < (dates.len() as i64)) {
        let mut dt: Vec<i64> = dates[i as usize].clone();
        println!("{}", discordian(dt[0 as usize], dt[1 as usize], dt[2 as usize]));
        i = (i + 1);
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
