warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:49:2
   |
49 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:78:2
   |
78 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:82:2
   |
82 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:86:2
   |
86 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:104:2
    |
104 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:42:11
   |
42 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
42 -     while (i < (s.len() as i64)) {
42 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:43:12
   |
43 |         if (s[i as usize..(i + 1) as usize].to_string().as_str() == ch.as_str()) {
   |            ^                                                                   ^
   |
help: remove these parentheses
   |
43 -         if (s[i as usize..(i + 1) as usize].to_string().as_str() == ch.as_str()) {
43 +         if s[i as usize..(i + 1) as usize].to_string().as_str() == ch.as_str() {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:46:13
   |
46 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
46 -         i = (i + 1);
46 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:54:11
   |
54 |     while (i < 25) {
   |           ^      ^
   |
help: remove these parentheses
   |
54 -     while (i < 25) {
54 +     while i < 25 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:56:13
   |
56 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
56 -         i = (i + 1);
56 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:59:11
   |
59 |     while (idx < (addr.len() as i64)) {
   |           ^                         ^
   |
help: remove these parentheses
   |
59 -     while (idx < (addr.len() as i64)) {
59 +     while idx < (addr.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:62:12
   |
62 |         if (c < 0) {
   |            ^     ^
   |
help: remove these parentheses
   |
62 -         if (c < 0) {
62 +         if c < 0 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:66:15
   |
66 |         while (j >= 0) {
   |               ^      ^
   |
help: remove these parentheses
   |
66 -         while (j >= 0) {
66 +         while j >= 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:67:17
   |
67 |             c = (c + (58 * a[j as usize]));
   |                 ^                        ^
   |
help: remove these parentheses
   |
67 -             c = (c + (58 * a[j as usize]));
67 +             c = c + (58 * a[j as usize]);
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:68:29
   |
68 |             a[j as usize] = (c % 256);
   |                             ^       ^
   |
help: remove these parentheses
   |
68 -             a[j as usize] = (c % 256);
68 +             a[j as usize] = c % 256;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:69:17
   |
69 |             c = (c / 256);
   |                 ^       ^
   |
help: remove these parentheses
   |
69 -             c = (c / 256);
69 +             c = c / 256;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:70:17
   |
70 |             j = (j - 1);
   |                 ^     ^
   |
help: remove these parentheses
   |
70 -             j = (j - 1);
70 +             j = j - 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:72:12
   |
72 |         if (c > 0) {
   |            ^     ^
   |
help: remove these parentheses
   |
72 -         if (c > 0) {
72 +         if c > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:75:15
   |
75 |         idx = (idx + 1);
   |               ^       ^
   |
help: remove these parentheses
   |
75 -         idx = (idx + 1);
75 +         idx = idx + 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:89:8
   |
89 |     if ((a.len() as i64) != 25) {
   |        ^                      ^
   |
help: remove these parentheses
   |
89 -     if ((a.len() as i64) != 25) {
89 +     if (a.len() as i64) != 25 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:92:8
   |
92 |     if (a[0 as usize] != 0) {
   |        ^                  ^
   |
help: remove these parentheses
   |
92 -     if (a[0 as usize] != 0) {
92 +     if a[0 as usize] != 0 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:97:11
   |
97 |     while (i < 4) {
   |           ^     ^
   |
help: remove these parentheses
   |
97 -     while (i < 4) {
97 +     while i < 4 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:98:12
   |
98 |         if (a[(21 + i) as usize] != sum[i as usize]) {
   |            ^                                       ^
   |
help: remove these parentheses
   |
98 -         if (a[(21 + i) as usize] != sum[i as usize]) {
98 +         if a[(21 + i) as usize] != sum[i as usize] {
   |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:101:13
    |
101 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
101 -         i = (i + 1);
101 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:109:28
    |
109 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
109 -     let duration_us: i64 = ((_end - _start) / 1000);
109 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:110:29
    |
110 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
110 -     let memory_bytes: i64 = (_end_mem - _start_mem);
110 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0425]: cannot find function `sha256` in this scope
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:80:22
   |
80 |     let first: i64 = sha256(bs);
   |                      ^^^^^^ not found in this scope

error[E0425]: cannot find function `sha256` in this scope
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:81:12
   |
81 |     return sha256(first)
   |            ^^^^^^ not found in this scope

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:40:16
   |
40 |     fn indexOf(mut s: String, mut ch: String) -> i64 {
   |                ----^
   |                |
   |                help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:40:31
   |
40 |     fn indexOf(mut s: String, mut ch: String) -> i64 {
   |                               ----^^
   |                               |
   |                               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:50:14
   |
50 |     fn set58(mut addr: String) -> Vec<i64> {
   |              ----^^^^
   |              |
   |              help: remove this `mut`

error[E0382]: use of moved value: `tmpl`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:61:34
   |
51 |     let tmpl = String::from("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
   |         ---- move occurs because `tmpl` has type `String`, which does not implement the `Copy` trait
...
59 |     while (idx < (addr.len() as i64)) {
   |     --------------------------------- inside of this loop
60 |         let ch: String = addr[idx as usize..(idx + 1) as usize].to_string().clone();
61 |         let mut c: i64 = indexOf(tmpl, ch);
   |                                  ^^^^ value moved here, in previous iteration of loop
   |
note: consider changing this parameter type in function `indexOf` to borrow instead if owning the value isn't necessary
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:40:23
   |
40 |     fn indexOf(mut s: String, mut ch: String) -> i64 {
   |        -------        ^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider moving the expression out of the loop so it is only moved once
   |
59 ~     let mut value = indexOf(tmpl, ch);
60 ~     while (idx < (addr.len() as i64)) {
61 |         let ch: String = addr[idx as usize..(idx + 1) as usize].to_string().clone();
62 ~         let mut c: i64 = value;
   |
help: consider cloning the value if the performance cost is acceptable
   |
61 |         let mut c: i64 = indexOf(tmpl.clone(), ch);
   |                                      ++++++++

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:83:24
   |
83 |     fn computeChecksum(mut a: Vec<i64>) -> Vec<i64> {
   |                        ----^
   |                        |
   |                        help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:84:9
   |
84 |     let mut hash: Vec<i64> = doubleSHA256(a[0 as usize..21 as usize].to_vec());
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:87:17
   |
87 |     fn validA58(mut addr: String) -> bool {
   |                 ----^^^^
   |                 |
   |                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:88:9
   |
88 |     let mut a: Vec<i64> = set58(addr);
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bitcoin-address-validation.rs:95:9
   |
95 |     let mut sum: Vec<i64> = computeChecksum(a.clone());
   |         ----^^^
   |         |
   |         help: remove this `mut`

error: aborting due to 3 previous errors; 34 warnings emitted

Some errors have detailed explanations: E0382, E0425.
For more information about an error, try `rustc --explain E0382`.
