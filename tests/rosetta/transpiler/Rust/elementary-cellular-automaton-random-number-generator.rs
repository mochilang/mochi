// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_n: i64 = 0;
static mut g_init: Vec<i64> = Vec::new();
static mut g_i: i64 = 0;
static mut g_bytes: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_n = 64;
        g_init = vec![];
        g_i = 0;
        g_bytes = evolve(g_init.clone().clone(), 30);
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_n: i64 = 0;;
        unsafe fn pow2(mut k: i64) -> i64 {
    let mut v: i64 = 1;
    let mut i: i64 = 0;
    while (i < k) {
        v = (v * 2);
        i = (i + 1);
    }
    return v
};
        unsafe fn ruleBit(mut ruleNum: i64, mut idx: i64) -> i64 {
    let mut r: i64 = ruleNum;
    let mut i: i64 = 0;
    while (i < idx) {
        r = (r / 2);
        i = (i + 1);
    }
    return (r % 2)
};
        unsafe fn evolve(mut state: Vec<i64>, mut ruleNum: i64) -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    let mut p: i64 = 0;
    while (p < 10) {
        let mut b: i64 = 0;
        let mut q: i64 = 7;
        while (q >= 0) {
            let mut st: Vec<i64> = state;
            b = (b + (st[0 as usize] * pow2(q)));
            let mut next: Vec<i64> = vec![];
            let mut i: i64 = 0;
            while (i < g_n) {
                let mut lidx: i64 = (i - 1);
                if (lidx < 0) {
                    lidx = (g_n - 1);
                }
                let mut left: i64 = st[lidx as usize];
                let mut center: i64 = st[i as usize];
                let mut ridx: i64 = (i + 1);
                if (ridx >= g_n) {
                    ridx = 0;
                }
                let mut right: i64 = st[ridx as usize];
                let mut index: i64 = (((left * 4) + (center * 2)) + right);
                next = { let mut _v = next.clone(); _v.push(ruleBit(ruleNum, index)); _v };
                i = (i + 1);
            }
            state = next.clone();
            q = (q - 1);
        }
        out = { let mut _v = out.clone(); _v.push(b); _v };
        p = (p + 1);
    }
    return out
};
        static mut g_init: Vec<i64> = Vec::new();;
        static mut g_i: i64 = 0;;
        while (g_i < g_n) {
            g_init = { let mut _v = g_init.clone().clone(); _v.push(0); _v };
            g_i = (g_i + 1);
        }
        g_init[0 as usize] = 1;
        static mut g_bytes: Vec<i64> = Vec::new();;
        println!("{}", format!("{:?}", g_bytes.clone()));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
