// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_days: Vec<String> = Vec::new();
static mut g_firstDaysCommon: Vec<i64> = Vec::new();
static mut g_firstDaysLeap: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_days = vec![String::from("Sunday"), String::from("Monday"), String::from("Tuesday"), String::from("Wednesday"), String::from("Thursday"), String::from("Friday"), String::from("Saturday")];
        g_firstDaysCommon = vec![3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
        g_firstDaysLeap = vec![4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn parseIntStr(str: &str) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let mut digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string().as_str()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
        static mut g_days: Vec<String> = Vec::new();;
        unsafe fn anchorDay(mut y: i64) -> i64 {
    return ((((2 + (5 * (y % 4))) + (4 * (y % 100))) + (6 * (y % 400))) % 7)
};
        unsafe fn isLeapYear(mut y: i64) -> bool {
    return (((y % 4) == 0) && (((y % 100) != 0) || ((y % 400) == 0)))
};
        static mut g_firstDaysCommon: Vec<i64> = Vec::new();;
        static mut g_firstDaysLeap: Vec<i64> = Vec::new();;
        unsafe fn mochi_main() {
    let mut dates: Vec<String> = vec![String::from("1800-01-06"), String::from("1875-03-29"), String::from("1915-12-07"), String::from("1970-12-23"), String::from("2043-05-14"), String::from("2077-02-12"), String::from("2101-04-02")];
    println!("{}", "Days of week given by Doomsday rule:");
    for date in dates.clone() {
        let mut y: i64 = parseIntStr(&date[0 as usize..4 as usize].to_string());
        let mut m: i64 = (parseIntStr(&date[5 as usize..7 as usize].to_string()) - 1);
        let mut d: i64 = parseIntStr(&date[8 as usize..10 as usize].to_string());
        let mut a: i64 = anchorDay(y);
        let mut f: i64 = g_firstDaysCommon.clone()[m as usize];
        if isLeapYear(y) {
            f = g_firstDaysLeap.clone()[m as usize];
        }
        let mut w: i64 = (d - f);
        if (w < 0) {
            w = (7 + w);
        }
        let mut dow: i64 = ((a + w) % 7);
        println!("{}", format!("{}{}", format!("{}{}", date, " -> "), g_days.clone()[dow as usize].clone()));
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
