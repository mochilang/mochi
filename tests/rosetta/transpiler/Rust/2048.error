error: `<` is interpreted as a start of generic arguments for `i64`, not a comparison
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:205:29
    |
205 |     while (res.len() as i64 < g_SIZE) {
    |                             ^ ------- interpreted as generic arguments
    |                             |
    |                             not interpreted as comparison
    |
help: try comparing the cast value
    |
205 |     while ((res.len() as i64) < g_SIZE) {
    |            +                +

warning: unused imports: `Read` and `self`
 --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:4:15
  |
4 | use std::io::{self, Read};
  |               ^^^^  ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:97:11
   |
97 |     while (y < g_SIZE) {
   |           ^          ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
97 -     while (y < g_SIZE) {
97 +     while y < g_SIZE {
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:100:15
    |
100 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
100 -         while (x < g_SIZE) {
100 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:102:17
    |
102 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
102 -             x = (x + 1);
102 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:105:13
    |
105 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
105 -         y = (y + 1);
105 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:114:11
    |
114 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
114 -     while (y < g_SIZE) {
114 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:116:15
    |
116 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
116 -         while (x < g_SIZE) {
116 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:117:16
    |
117 |             if (grid[y as usize].clone()[x as usize] == 0) {
    |                ^                                         ^
    |
help: remove these parentheses
    |
117 -             if (grid[y as usize].clone()[x as usize] == 0) {
117 +             if grid[y as usize].clone()[x as usize] == 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:120:17
    |
120 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
120 -             x = (x + 1);
120 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:122:13
    |
122 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
122 -         y = (y + 1);
122 +         y = y + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:124:8
    |
124 |     if (empty.len() as i64 == 0) {
    |        ^                       ^
    |
help: remove these parentheses
    |
124 -     if (empty.len() as i64 == 0) {
124 +     if empty.len() as i64 == 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:127:19
    |
127 |     let mut idx = (_now() % empty.len() as i64);
    |                   ^                           ^
    |
help: remove these parentheses
    |
127 -     let mut idx = (_now() % empty.len() as i64);
127 +     let mut idx = _now() % empty.len() as i64;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:130:8
    |
130 |     if ((_now() % 10) < 9) {
    |        ^                 ^
    |
help: remove these parentheses
    |
130 -     if ((_now() % 10) < 9) {
130 +     if (_now() % 10) < 9 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:139:24
    |
139 |     let mut pad: i64 = (4 - s.len() as i64);
    |                        ^                  ^
    |
help: remove these parentheses
    |
139 -     let mut pad: i64 = (4 - s.len() as i64);
139 +     let mut pad: i64 = 4 - s.len() as i64;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:142:11
    |
142 |     while (i < pad) {
    |           ^       ^
    |
help: remove these parentheses
    |
142 -     while (i < pad) {
142 +     while i < pad {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:144:13
    |
144 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
144 -         i = (i + 1);
144 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:152:11
    |
152 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
152 -     while (y < g_SIZE) {
152 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:156:15
    |
156 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
156 -         while (x < g_SIZE) {
156 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:158:16
    |
158 |             if (v == 0) {
    |                ^      ^
    |
help: remove these parentheses
    |
158 -             if (v == 0) {
158 +             if v == 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:163:17
    |
163 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
163 -             x = (x + 1);
163 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:166:13
    |
166 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
166 -         y = (y + 1);
166 +         y = y + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:174:17
    |
174 |     let mut i = (r.len() as i64 - 1);
    |                 ^                  ^
    |
help: remove these parentheses
    |
174 -     let mut i = (r.len() as i64 - 1);
174 +     let mut i = r.len() as i64 - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:175:11
    |
175 |     while (i >= 0) {
    |           ^      ^
    |
help: remove these parentheses
    |
175 -     while (i >= 0) {
175 +     while i >= 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:177:13
    |
177 |         i = (i - 1);
    |             ^     ^
    |
help: remove these parentheses
    |
177 -         i = (i - 1);
177 +         i = i - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:185:11
    |
185 |     while (i < row.len() as i64) {
    |           ^                    ^
    |
help: remove these parentheses
    |
185 -     while (i < row.len() as i64) {
185 +     while i < row.len() as i64 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:186:12
    |
186 |         if (row[i as usize] != 0) {
    |            ^                    ^
    |
help: remove these parentheses
    |
186 -         if (row[i as usize] != 0) {
186 +         if row[i as usize] != 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:189:13
    |
189 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
189 -         i = (i + 1);
189 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:194:11
    |
194 |     while (i < xs.len() as i64) {
    |           ^                   ^
    |
help: remove these parentheses
    |
194 -     while (i < xs.len() as i64) {
194 +     while i < xs.len() as i64 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:195:12
    |
195 |         if (((i + 1) < xs.len() as i64) && (xs[i as usize] == xs[(i + 1) as usize])) {
    |            ^                                                                       ^
    |
help: remove these parentheses
    |
195 -         if (((i + 1) < xs.len() as i64) && (xs[i as usize] == xs[(i + 1) as usize])) {
195 +         if ((i + 1) < xs.len() as i64) && (xs[i as usize] == xs[(i + 1) as usize]) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:196:26
    |
196 |             let v: i64 = (xs[i as usize] * 2);
    |                          ^                  ^
    |
help: remove these parentheses
    |
196 -             let v: i64 = (xs[i as usize] * 2);
196 +             let v: i64 = xs[i as usize] * 2;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:197:20
    |
197 |             gain = (gain + v);
    |                    ^        ^
    |
help: remove these parentheses
    |
197 -             gain = (gain + v);
197 +             gain = gain + v;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:199:17
    |
199 |             i = (i + 2);
    |                 ^     ^
    |
help: remove these parentheses
    |
199 -             i = (i + 2);
199 +             i = i + 2;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:202:17
    |
202 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
202 -             i = (i + 1);
202 +             i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:205:11
    |
205 |     while (res.len() as i64 < g_SIZE) {
    |           ^                         ^
    |
help: remove these parentheses
    |
205 -     while (res.len() as i64 < g_SIZE) {
205 +     while res.len() as i64 < g_SIZE {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:215:11
    |
215 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
215 -     while (y < g_SIZE) {
215 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:218:17
    |
218 |         score = (score + r.gain);
    |                 ^              ^
    |
help: remove these parentheses
    |
218 -         score = (score + r.gain);
218 +         score = score + r.gain;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:220:15
    |
220 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
220 -         while (x < g_SIZE) {
220 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:221:16
    |
221 |             if (grid[y as usize].clone()[x as usize] != new[x as usize]) {
    |                ^                                                       ^
    |
help: remove these parentheses
    |
221 -             if (grid[y as usize].clone()[x as usize] != new[x as usize]) {
221 +             if grid[y as usize].clone()[x as usize] != new[x as usize] {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:225:17
    |
225 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
225 -             x = (x + 1);
225 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:227:13
    |
227 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
227 -         y = (y + 1);
227 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:236:11
    |
236 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
236 -     while (y < g_SIZE) {
236 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:240:17
    |
240 |         score = (score + r.gain);
    |                 ^              ^
    |
help: remove these parentheses
    |
240 -         score = (score + r.gain);
240 +         score = score + r.gain;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:243:15
    |
243 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
243 -         while (x < g_SIZE) {
243 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:244:16
    |
244 |             if (grid[y as usize].clone()[x as usize] != rev[x as usize]) {
    |                ^                                                       ^
    |
help: remove these parentheses
    |
244 -             if (grid[y as usize].clone()[x as usize] != rev[x as usize]) {
244 +             if grid[y as usize].clone()[x as usize] != rev[x as usize] {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:248:17
    |
248 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
248 -             x = (x + 1);
248 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:250:13
    |
250 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
250 -         y = (y + 1);
250 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:258:11
    |
258 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
258 -     while (y < g_SIZE) {
258 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:260:13
    |
260 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
260 -         y = (y + 1);
260 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:268:11
    |
268 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
268 -     while (y < g_SIZE) {
268 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:272:13
    |
272 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
272 -         y = (y + 1);
272 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:281:11
    |
281 |     while (x < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
281 -     while (x < g_SIZE) {
281 +     while x < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:285:17
    |
285 |         score = (score + r.gain);
    |                 ^              ^
    |
help: remove these parentheses
    |
285 -         score = (score + r.gain);
285 +         score = score + r.gain;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:287:15
    |
287 |         while (y < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
287 -         while (y < g_SIZE) {
287 +         while y < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:288:16
    |
288 |             if (grid[y as usize].clone()[x as usize] != new[y as usize]) {
    |                ^                                                       ^
    |
help: remove these parentheses
    |
288 -             if (grid[y as usize].clone()[x as usize] != new[y as usize]) {
288 +             if grid[y as usize].clone()[x as usize] != new[y as usize] {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:292:17
    |
292 |             y = (y + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
292 -             y = (y + 1);
292 +             y = y + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:294:13
    |
294 |         x = (x + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
294 -         x = (x + 1);
294 +         x = x + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:303:11
    |
303 |     while (x < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
303 -     while (x < g_SIZE) {
303 +     while x < g_SIZE {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:307:17
    |
307 |         score = (score + r.gain);
    |                 ^              ^
    |
help: remove these parentheses
    |
307 -         score = (score + r.gain);
307 +         score = score + r.gain;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:310:15
    |
310 |         while (y < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
310 -         while (y < g_SIZE) {
310 +         while y < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:311:16
    |
311 |             if (grid[y as usize].clone()[x as usize] != col[y as usize]) {
    |                ^                                                       ^
    |
help: remove these parentheses
    |
311 -             if (grid[y as usize].clone()[x as usize] != col[y as usize]) {
311 +             if grid[y as usize].clone()[x as usize] != col[y as usize] {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:315:17
    |
315 |             y = (y + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
315 -             y = (y + 1);
315 +             y = y + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:317:13
    |
317 |         x = (x + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
317 -         x = (x + 1);
317 +         x = x + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:324:11
    |
324 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
324 -     while (y < g_SIZE) {
324 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:326:15
    |
326 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
326 -         while (x < g_SIZE) {
326 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:327:16
    |
327 |             if (b.cells[y as usize].clone()[x as usize] == 0) {
    |                ^                                            ^
    |
help: remove these parentheses
    |
327 -             if (b.cells[y as usize].clone()[x as usize] == 0) {
327 +             if b.cells[y as usize].clone()[x as usize] == 0 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:330:16
    |
330 |             if (((x + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[y as usize].clone()[(x + 1) as usize])) {
    |                ^                                                                                                                ^
    |
help: remove these parentheses
    |
330 -             if (((x + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[y as usize].clone()[(x + 1) as usize])) {
330 +             if ((x + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[y as usize].clone()[(x + 1) as usize]) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:333:16
    |
333 |             if (((y + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[(y + 1) as usize].clone()[x as usize])) {
    |                ^                                                                                                                ^
    |
help: remove these parentheses
    |
333 -             if (((y + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[(y + 1) as usize].clone()[x as usize])) {
333 +             if ((y + 1) < g_SIZE) && (b.cells[y as usize].clone()[x as usize] == b.cells[(y + 1) as usize].clone()[x as usize]) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:336:17
    |
336 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
336 -             x = (x + 1);
336 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:338:13
    |
338 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
338 -         y = (y + 1);
338 +         y = y + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:345:11
    |
345 |     while (y < g_SIZE) {
    |           ^          ^
    |
help: remove these parentheses
    |
345 -     while (y < g_SIZE) {
345 +     while y < g_SIZE {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:347:15
    |
347 |         while (x < g_SIZE) {
    |               ^          ^
    |
help: remove these parentheses
    |
347 -         while (x < g_SIZE) {
347 +         while x < g_SIZE {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:348:16
    |
348 |             if (b.cells[y as usize].clone()[x as usize] >= 2048) {
    |                ^                                               ^
    |
help: remove these parentheses
    |
348 -             if (b.cells[y as usize].clone()[x as usize] >= 2048) {
348 +             if b.cells[y as usize].clone()[x as usize] >= 2048 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:351:17
    |
351 |             x = (x + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
351 -             x = (x + 1);
351 +             x = x + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:353:13
    |
353 |         y = (y + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
353 -         y = (y + 1);
353 +         y = y + 1;
    |

warning: denote infinite loops with `loop { ... }`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:370:9
    |
370 |         while true {
    |         ^^^^^^^^^^ help: use `loop`
    |
    = note: `#[warn(while_true)]` on by default

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:374:16
    |
374 |             if ((cmd == "a") || (cmd == "A")) {
    |                ^                            ^
    |
help: remove these parentheses
    |
374 -             if ((cmd == "a") || (cmd == "A")) {
374 +             if (cmd == "a") || (cmd == "A") {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:380:16
    |
380 |             if ((cmd == "d") || (cmd == "D")) {
    |                ^                            ^
    |
help: remove these parentheses
    |
380 -             if ((cmd == "d") || (cmd == "D")) {
380 +             if (cmd == "d") || (cmd == "D") {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:386:16
    |
386 |             if ((cmd == "w") || (cmd == "W")) {
    |                ^                            ^
    |
help: remove these parentheses
    |
386 -             if ((cmd == "w") || (cmd == "W")) {
386 +             if (cmd == "w") || (cmd == "W") {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:392:16
    |
392 |             if ((cmd == "s") || (cmd == "S")) {
    |                ^                            ^
    |
help: remove these parentheses
    |
392 -             if ((cmd == "s") || (cmd == "S")) {
392 +             if (cmd == "s") || (cmd == "S") {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:398:16
    |
398 |             if ((cmd == "q") || (cmd == "Q")) {
    |                ^                            ^
    |
help: remove these parentheses
    |
398 -             if ((cmd == "q") || (cmd == "Q")) {
398 +             if (cmd == "q") || (cmd == "Q") {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:405:20
    |
405 |                 if (g_full && !hasMoves(g_board.clone())) {
    |                    ^                                    ^
    |
help: remove these parentheses
    |
405 -                 if (g_full && !hasMoves(g_board.clone())) {
405 +                 if g_full && !hasMoves(g_board.clone()) {
    |

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:146:19
    |
146 |     return (out + s).to_string()
    |                   ^ expected `&str`, found `String`
    |
help: consider borrowing here
    |
146 |     return (out + &s).to_string()
    |                   +

error[E0277]: the type `[i64]` cannot be indexed by `i64`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:176:51
    |
176 |         out = { let mut v = out.clone(); v.push(r[i]); v };
    |                                                   ^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[i64]>` is not implemented for `i64`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i64`
    = note: required for `Vec<i64>` to implement `Index<i64>`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:198:53
    |
198 |             res = { let mut v = res.clone(); v.push(v); v };
    |                                                ---- ^ expected `i64`, found `Vec<i64>`
    |                                                |
    |                                                arguments to this method are incorrect
    |
    = note: expected type `i64`
             found struct `Vec<i64>`
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:274:9
    |
265 | unsafe fn setCol(mut b: Board, mut x: i64, mut col: Vec<i64>) {
    |                         ----- expected due to this parameter type
...
274 |     b = rows;
    |         ^^^^ expected `Board`, found `Vec<Vec<i64>>`
    |
    = note: expected struct `Board`
               found struct `Vec<Vec<i64>>`
help: try wrapping the expression in `Board`
    |
274 |     b = Board { cells: rows };
    |         ++++++++++++++      +

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:110:21
    |
110 | unsafe fn spawnTile(mut b: Board) -> SpawnResult {
    |                     ----^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:127:9
    |
127 |     let mut idx = (_now() % empty.len() as i64);
    |         ----^^^
    |         |
    |         help: remove this `mut`

error[E0382]: use of partially moved value: `b`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:125:36
    |
111 |     let mut grid: Vec<Vec<i64>> = b.cells;
    |                                   ------- value partially moved here
...
125 |         return SpawnResult {board: b, full: true}
    |                                    ^ value used here after partial move
    |
    = note: partial move occurs because `b.cells` has type `Vec<Vec<i64>>`, which does not implement the `Copy` trait

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:149:16
    |
149 | unsafe fn draw(mut b: Board, mut score: i64) {
    |                ----^
    |                |
    |                help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:149:30
    |
149 | unsafe fn draw(mut b: Board, mut score: i64) {
    |                              ----^^^^^
    |                              |
    |                              help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:157:17
    |
157 |             let mut v: i64 = b.cells[y as usize].clone()[x as usize];
    |                 ----^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:211:20
    |
211 | unsafe fn moveLeft(mut b: Board, mut score: i64) -> MoveResult {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:232:21
    |
232 | unsafe fn moveRight(mut b: Board, mut score: i64) -> MoveResult {
    |                     ----^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:255:18
    |
255 | unsafe fn getCol(mut b: Board, mut x: i64) -> Vec<i64> {
    |                  ----^
    |                  |
    |                  help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:255:32
    |
255 | unsafe fn getCol(mut b: Board, mut x: i64) -> Vec<i64> {
    |                                ----^
    |                                |
    |                                help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:277:18
    |
277 | unsafe fn moveUp(mut b: Board, mut score: i64) -> MoveResult {
    |                  ----^
    |                  |
    |                  help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:282:13
    |
282 |         let mut col: Vec<i64> = getCol(b, x);
    |             ----^^^
    |             |
    |             help: remove this `mut`

error[E0382]: use of moved value: `b`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:282:40
    |
277 | unsafe fn moveUp(mut b: Board, mut score: i64) -> MoveResult {
    |                  ----- move occurs because `b` has type `Board`, which does not implement the `Copy` trait
...
281 |     while (x < g_SIZE) {
    |     ------------------ inside of this loop
282 |         let mut col: Vec<i64> = getCol(b, x);
    |                                        ^ value moved here, in previous iteration of loop
    |
note: consider changing this parameter type in function `getCol` to borrow instead if owning the value isn't necessary
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:255:25
    |
255 | unsafe fn getCol(mut b: Board, mut x: i64) -> Vec<i64> {
    |           ------        ^^^^^ this parameter takes ownership of the value
    |           |
    |           in this function
help: consider moving the expression out of the loop so it is only moved once
    |
281 ~     let mut value = getCol(b, x);
282 ~     while (x < g_SIZE) {
283 ~         let mut col: Vec<i64> = value;
    |
help: consider cloning the value if the performance cost is acceptable
    |
282 |         let mut col: Vec<i64> = getCol(b.clone(), x);
    |                                         ++++++++

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:299:20
    |
299 | unsafe fn moveDown(mut b: Board, mut score: i64) -> MoveResult {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

error[E0382]: use of moved value: `b`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:304:51
    |
299 | unsafe fn moveDown(mut b: Board, mut score: i64) -> MoveResult {
    |                    ----- move occurs because `b` has type `Board`, which does not implement the `Copy` trait
...
303 |     while (x < g_SIZE) {
    |     ------------------ inside of this loop
304 |         let mut col: Vec<i64> = reverseRow(getCol(b, x));
    |                                                   ^ value moved here, in previous iteration of loop
    |
note: consider changing this parameter type in function `getCol` to borrow instead if owning the value isn't necessary
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:255:25
    |
255 | unsafe fn getCol(mut b: Board, mut x: i64) -> Vec<i64> {
    |           ------        ^^^^^ this parameter takes ownership of the value
    |           |
    |           in this function
help: consider moving the expression out of the loop so it is only moved once
    |
303 ~     let mut value = getCol(b, x);
304 ~     while (x < g_SIZE) {
305 ~         let mut col: Vec<i64> = reverseRow(value);
    |
help: consider cloning the value if the performance cost is acceptable
    |
304 |         let mut col: Vec<i64> = reverseRow(getCol(b.clone(), x));
    |                                                    ++++++++

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:322:20
    |
322 | unsafe fn hasMoves(mut b: Board) -> bool {
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:343:19
    |
343 | unsafe fn has2048(mut b: Board) -> bool {
    |                   ----^
    |                   |
    |                   help: remove this `mut`

warning: unnecessary `unsafe` block
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/2048.rs:369:9
    |
359 |     unsafe {
    |     ------ because it's nested under this `unsafe` block
...
369 |         unsafe { draw(g_board.clone(), g_score); }
    |         ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

error: aborting due to 8 previous errors; 96 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0382.
For more information about an error, try `rustc --explain E0277`.
