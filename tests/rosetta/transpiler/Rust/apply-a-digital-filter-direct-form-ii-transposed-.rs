// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:00 +0700
static mut g_a: Vec<f64> = Vec::new();
static mut g_b: Vec<f64> = Vec::new();
static mut g_sig: Vec<f64> = Vec::new();
static mut g_res: Vec<f64> = Vec::new();
static mut g_k: i64 = 0;
unsafe fn applyFilter(mut input: Vec<f64>, mut a: Vec<f64>, mut b: Vec<f64>) -> Vec<f64> {
    let mut out: Vec<f64> = vec![];
    let scale: f64 = (1.0 / a[0 as usize]);
    let mut i: i64 = 0;
    while (i < (input.len() as i64)) {
        let mut tmp: f64 = 0.0;
        let mut j: i64 = 0;
        while ((j <= i) && (j < (b.len() as i64))) {
            tmp = (tmp + (b[j as usize] * input[(i - j) as usize]));
            j = (j + 1);
        }
        j = 0;
        while ((j < i) && ((j + 1) < (a.len() as i64))) {
            tmp = (tmp - (a[(j + 1) as usize] * out[((i - j) - 1) as usize]));
            j = (j + 1);
        }
        out = { let mut v = out.clone(); v.push((tmp * scale)); v };
        i = (i + 1);
    }
    return out
}

fn main() {
    unsafe {
        g_a = vec![1.0, -0.00000000000000027756, 0.33333333, -0.0000000000000000185];
        g_b = vec![0.16666667, 0.5, 0.5, 0.16666667];
        g_sig = vec![-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589];
        g_res = applyFilter(g_sig.clone().clone(), g_a.clone().clone(), g_b.clone().clone());
        g_k = 0;
        while (g_k < (g_res.clone().len() as i64)) {
            println!("{}", format!("{:?}", g_res.clone()[g_k as usize]));
            g_k = (g_k + 1);
        }
    }
}
