// Generated by Mochi transpiler v0.10.52 on 2025-08-02 10:26 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn ln(mut x: f64) -> f64 {
    let mut k: f64 = 0.0;
    let mut v: f64 = x;
    while (v >= 2.0) {
        v = (v / 2.0);
        k = (k + 1.0);
    }
    while (v < 1.0) {
        v = (v * 2.0);
        k = (k - 1.0);
    }
    let mut z: f64 = ((v - 1.0) / (v + 1.0));
    let mut zpow: f64 = z;
    let mut sum: f64 = z;
    let mut i: i64 = 3;
    while (i <= 9) {
        zpow = ((zpow * z) * z);
        sum = (sum + (zpow / (i as f64)));
        i = (i + 2);
    }
    let mut ln2: f64 = 0.6931471805599453;
    return ((k * ln2) + (2.0 * sum))
};
    fn expf(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut i: i64 = 1;
    while (i < 20) {
        term = ((term * x) / (i as f64));
        sum = (sum + term);
        i = (i + 1);
    }
    return sum
};
    fn powf(mut base: f64, mut exp: f64) -> f64 {
    return expf((exp * ln(base)))
};
    fn lanczos7(mut z: f64) -> f64 {
    let mut t: f64 = (z + 6.5);
    let mut x: f64 = ((((((((0.9999999999998099 + (676.5203681218851 / z)) - (1259.1392167224028 / (z + 1.0))) + (771.3234287776531 / (z + 2.0))) - (176.6150291621406 / (z + 3.0))) + (12.507343278686905 / (z + 4.0))) - (0.13857109526572012 / (z + 5.0))) + (0.000009984369578019572 / (z + 6.0))) + (0.00000015056327351493116 / (z + 7.0)));
    return (((2.5066282746310002 * powf(t, (z - 0.5))) * powf(2.718281828459045, -t)) * x)
};
    let mut xs: Vec<f64> = vec![-0.5, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 10.0, 140.0, 170.0];
    for x in xs.clone() {
        println!("{}", format!("{}{}", format!("{}{}", x.to_string(), " "), lanczos7(x).to_string()));
    }
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
