// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:55 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
static mut g_value: i64 = 0;
static mut g_done: bool = false;
fn main() {
    unsafe {
        g_value = 0;
        g_done = false;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn parseInt(mut str: String) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let mut digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string().as_str()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
        unsafe fn rand10000() -> i64 {
    return (_now() % 10000)
};
        static mut g_value: i64 = 0;;
        println!("{}", format!("{} {}", "Value:", g_value).trim_end());
        static mut g_done: bool = false;;
        while !g_done {
            println!("{}", "i=increment, r=random, s num=set, q=quit:");
            let mut line: String = input().clone();
            if (line.as_str() == "i") {
                g_value = (g_value + 1);
                println!("{}", format!("{} {}", "Value:", g_value).trim_end());
            } else if (line.as_str() == "r") {
                println!("{}", "Set random value? (y/n)");
                let mut ans: String = input().clone();
                if (ans.as_str() == "y") {
                    g_value = rand10000();
                    println!("{}", format!("{} {}", "Value:", g_value).trim_end());
                }
            } else if (((line.len() as i64) > 2) && (line[0 as usize..2 as usize].to_string().as_str() == "s ")) {
                g_value = parseInt(line[2 as usize..(line.len() as i64) as usize].to_string());
                println!("{}", format!("{} {}", "Value:", g_value).trim_end());
            } else if (line.as_str() == "q") {
                g_done = true;
            } else {
                println!("{}", "Unknown command");
            }
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
