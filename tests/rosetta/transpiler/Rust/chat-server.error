warning: unnecessary parentheses around `if` condition
 --> /workspace/mochi/tests/rosetta/transpiler/Rust/chat-server.rs:5:12
  |
5 |         if (n != name) {
  |            ^         ^
  |
  = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
  |
5 -         if (n != name) {
5 +         if n != name {
  |

warning: variable does not need to be mutable
 --> /workspace/mochi/tests/rosetta/transpiler/Rust/chat-server.rs:2:15
  |
2 | fn removeName(mut names: Vec<String>, name: &str) -> Vec<String> {
  |               ----^^^^^
  |               |
  |               help: remove this `mut`
  |
  = note: `#[warn(unused_mut)]` on by default

error[E0596]: cannot borrow `add` as mutable, as it is not declared as mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/chat-server.rs:17:9
   |
17 |     let add = move |name: &str| {
   |         ^^^ not mutable
18 |     clients = { let mut _v = clients.clone(); _v.push(name.to_string()); _v };
   |     ------- calling `add` requires mutable binding due to possible mutation of `clients`
...
28 |     add(&"Alice");
   |     --- cannot borrow as mutable
29 |     add(&"Bob");
   |     --- cannot borrow as mutable
   |
help: consider changing this to be mutable
   |
17 |     let mut add = move |name: &str| {
   |         +++

error[E0596]: cannot borrow `remove` as mutable, as it is not declared as mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/chat-server.rs:24:9
   |
24 |     let remove = move |name: &str| {
   |         ^^^^^^ not mutable
25 |     clients = removeName(clients.clone(), name);
   |     ------- calling `remove` requires mutable binding due to possible mutation of `clients`
...
32 |     remove(&"Bob");
   |     ------ cannot borrow as mutable
33 |     remove(&"Alice");
   |     ------ cannot borrow as mutable
   |
help: consider changing this to be mutable
   |
24 |     let mut remove = move |name: &str| {
   |         +++

error[E0382]: use of moved value: `clients`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/chat-server.rs:24:18
   |
13 |     let mut clients: Vec<String> = vec![];
   |         ----------- move occurs because `clients` has type `Vec<String>`, which does not implement the `Copy` trait
...
17 |     let add = move |name: &str| {
   |               ----------------- value moved into closure here
18 |     clients = { let mut _v = clients.clone(); _v.push(name.to_string()); _v };
   |     ------- variable moved due to use in closure
...
24 |     let remove = move |name: &str| {
   |                  ^^^^^^^^^^^^^^^^^ value used here after move
25 |     clients = removeName(clients.clone(), name);
   |     ------- use occurs due to use in closure

error: aborting due to 3 previous errors; 2 warnings emitted

Some errors have detailed explanations: E0382, E0596.
For more information about an error, try `rustc --explain E0382`.
