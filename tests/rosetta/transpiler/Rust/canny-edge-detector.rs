// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:43 +0700
static mut g_PI: f64 = 0.0;
unsafe fn conv2d(mut img: Vec<Vec<f64>>, mut k: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut n = (k.len() as i64);
    let mut half: i64 = (n / 2);
    let mut out: Vec<Vec<f64>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<f64> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            let mut sum: f64 = 0.0;
            let mut j: i64 = 0;
            while (j < n) {
                let mut i: i64 = 0;
                while (i < n) {
                    let mut yy: i64 = ((y + j) - half);
                    if (yy < 0) {
                        yy = 0;
                    }
                    if (yy >= h) {
                        yy = (h - 1);
                    }
                    let mut xx: i64 = ((x + i) - half);
                    if (xx < 0) {
                        xx = 0;
                    }
                    if (xx >= w) {
                        xx = (w - 1);
                    }
                    sum = (sum + (img[yy as usize].clone()[xx as usize] * k[j as usize].clone()[i as usize]));
                    i = (i + 1);
                }
                j = (j + 1);
            }
            row = { let mut _v = row.clone(); _v.push(sum); _v };
            x = (x + 1);
        }
        out = { let mut _v = out.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return out
}

unsafe fn gradient(mut img: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut hx: Vec<Vec<f64>> = vec![vec![-1.0, 0.0, 1.0], vec![-2.0, 0.0, 2.0], vec![-1.0, 0.0, 1.0]];
    let mut hy: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 1.0], vec![0.0, 0.0, 0.0], vec![-1.0, -2.0, -1.0]];
    let mut gx: Vec<Vec<f64>> = conv2d(img.clone(), hx.clone());
    let mut gy: Vec<Vec<f64>> = conv2d(img.clone(), hy.clone());
    let mut h = (img.len() as i64);
    let mut w = (img[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<f64>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<f64> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            let mut g: f64 = ((gx[y as usize].clone()[x as usize] * gx[y as usize].clone()[x as usize]) + (gy[y as usize].clone()[x as usize] * gy[y as usize].clone()[x as usize]));
            row = { let mut _v = row.clone(); _v.push(g); _v };
            x = (x + 1);
        }
        out = { let mut _v = out.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return out
}

unsafe fn threshold(mut g: Vec<Vec<f64>>, mut t: f64) -> Vec<Vec<i64>> {
    let mut h = (g.len() as i64);
    let mut w = (g[0 as usize].clone().len() as i64);
    let mut out: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            if (g[y as usize].clone()[x as usize] >= t) {
                row = { let mut _v = row.clone(); _v.push(1); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            }
            x = (x + 1);
        }
        out = { let mut _v = out.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return out
}

unsafe fn printMatrix(m: &mut Vec<Vec<i64>>) {
    let mut y: i64 = 0;
    while (y < (m.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < (m[0 as usize].clone().len() as i64)) {
            line = format!("{}{}", line, m[y as usize].clone()[x as usize].to_string());
            if (x < ((m[0 as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
}

unsafe fn mochi_main() {
    let mut img: Vec<Vec<f64>> = vec![vec![0.0, 0.0, 0.0, 0.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 255.0, 255.0, 255.0, 0.0], vec![0.0, 0.0, 0.0, 0.0, 0.0]];
    let mut g: Vec<Vec<f64>> = gradient(img.clone());
    let mut edges: Vec<Vec<i64>> = threshold(g.clone(), (1020.0 * 1020.0));
    printMatrix(&mut edges);
}

fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        unsafe { mochi_main(); }
    }
}
