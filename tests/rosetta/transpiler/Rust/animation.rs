// Generated by Mochi transpiler v0.10.41 on 2025-07-27 05:49 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_msg: String = String::new();
static mut g_shift: i64 = 0;
static mut g_inc: i64 = 0;
static mut g_clicks: i64 = 0;
static mut g_frames: i64 = 0;
fn main() {
    unsafe {
        g_msg = String::from("Hello World! ");
        g_shift = 0;
        g_inc = 1;
        g_clicks = 0;
        g_frames = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_msg: String = String::new();;
        static mut g_shift: i64 = 0;;
        static mut g_inc: i64 = 0;;
        static mut g_clicks: i64 = 0;;
        static mut g_frames: i64 = 0;;
        while (g_clicks < 5) {
            let mut line = String::from("");
            let mut i: i64 = 0;
            while (i < (g_msg.len() as i64)) {
                let idx: i64 = ((g_shift + i) % (g_msg.len() as i64));
                line = format!("{}{}", line, g_msg[idx as usize..(idx + 1) as usize].to_string());
                i = (i + 1);
            }
            println!("{}", line);
            g_shift = ((g_shift + g_inc) % (g_msg.len() as i64));
            g_frames = (g_frames + 1);
            if ((g_frames % (g_msg.len() as i64)) == 0) {
                g_inc = ((g_msg.len() as i64) - g_inc);
                g_clicks = (g_clicks + 1);
            }
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
