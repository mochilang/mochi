// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:41 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Screen {
    w: i64,
    h: i64,
}
impl std::fmt::Display for Screen {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"w\": {}", self.w)?;
        write!(f, ", ")?;
        write!(f, "\"h\": {}", self.h)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Window {
    x: i64,
    y: i64,
    w: i64,
    h: i64,
    maximized: bool,
}
impl std::fmt::Display for Window {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"w\": {}", self.w)?;
        write!(f, ", ")?;
        write!(f, "\"h\": {}", self.h)?;
        write!(f, ", ")?;
        write!(f, "\"maximized\": {}", self.maximized)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn maximize(s: &Screen, mut win: Window) -> Window {
    win.w = s.w;
    win.h = s.h;
    win.maximized = true;
    return win
};
    fn mochi_main() {
    let mut screen: Screen = Screen {w: 1920, h: 1080};
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Screen size: ", screen.w.to_string()), " x "), screen.h.to_string()));
    let mut win: Window = Window {x: 50, y: 50, w: 800, h: 600, maximized: false};
    win = maximize(&screen, win);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Max usable : ", win.w.to_string()), " x "), win.h.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
