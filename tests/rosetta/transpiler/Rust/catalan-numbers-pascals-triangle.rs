// Generated by Mochi transpiler v0.10.50 on 2025-07-31 01:01 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_n: i64 = 0;
static mut g_t: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_n = 15;
        g_t = vec![];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_n: i64 = 0;;
        static mut g_t: Vec<i64> = Vec::new();;
        for _ in 0..(g_n + 2) {
            g_t = { let mut _v = g_t.clone().clone(); _v.push(0); _v };
        }
        g_t[1 as usize] = 1;
        for i in 1..(g_n + 1) {
            let mut j: i64 = i;
            while (j > 1) {
                g_t[j as usize] = (g_t.clone()[j as usize] + g_t.clone()[(j - 1) as usize]);
                j = (j - 1);
            }
            g_t[(i + 1) as usize] = g_t.clone()[i as usize];
            j = (i + 1);
            while (j > 1) {
                g_t[j as usize] = (g_t.clone()[j as usize] + g_t.clone()[(j - 1) as usize]);
                j = (j - 1);
            }
            let mut cat: i64 = (g_t.clone()[(i + 1) as usize] - g_t.clone()[i as usize]);
            if (i < 10) {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", " ", i.to_string()), " : "), cat.to_string()));
            } else {
                println!("{}", format!("{}{}", format!("{}{}", i.to_string(), " : "), cat.to_string()));
            }
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
