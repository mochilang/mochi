// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_rows: i64 = 0;
static mut g_cols: i64 = 0;
static mut g_p: f64 = 0.0;
static mut g_f: f64 = 0.0;
static mut g_board: Vec<Vec<String>> = Vec::new();
fn main() {
    unsafe {
        g_rows = 20;
        g_cols = 30;
        g_p = 0.01;
        g_f = 0.001;
        g_board = newBoard();
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_rows: i64 = 0;;
        static mut g_cols: i64 = 0;;
        static mut g_p: f64 = 0.0;;
        static mut g_f: f64 = 0.0;;
        unsafe fn repeat(ch: &str, mut n: i64) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
};
        unsafe fn chance(mut prob: f64) -> bool {
    let mut threshold: i64 = int((prob * 1000.0));
    return ((_now() % 1000) < threshold)
};
        unsafe fn newBoard() -> Vec<Vec<String>> {
    let mut b: Vec<Vec<String>> = vec![];
    let mut r: i64 = 0;
    while (r < g_rows) {
        let mut row: Vec<String> = vec![];
        let mut c: i64 = 0;
        while (c < g_cols) {
            if ((_now() % 2) == 0) {
                row = { let mut _v = row.clone(); _v.push("T".to_string()); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(" ".to_string()); _v };
            }
            c = (c + 1);
        }
        b = { let mut _v = b.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return b
};
        unsafe fn step(mut src: Vec<Vec<String>>) -> Vec<Vec<String>> {
    let mut dst: Vec<Vec<String>> = vec![];
    let mut r: i64 = 0;
    while (r < g_rows) {
        let mut row: Vec<String> = vec![];
        let mut c: i64 = 0;
        while (c < g_cols) {
            let mut cell: String = src[r as usize].clone()[c as usize].clone().clone();
            let mut next: String = cell.clone();
            if (cell.as_str() == "#") {
                next = String::from(" ");
            } else if (cell.as_str() == "T") {
                let mut burning: bool = false;
                let mut dr: i64 = -1;
                while (dr <= 1) {
                    let mut dc: i64 = -1;
                    while (dc <= 1) {
                        if ((dr != 0) || (dc != 0)) {
                            let mut rr: i64 = (r + dr);
                            let mut cc: i64 = (c + dc);
                            if ((((rr >= 0) && (rr < g_rows)) && (cc >= 0)) && (cc < g_cols)) {
                                if (src[rr as usize].clone()[cc as usize].clone().as_str() == "#") {
                                    burning = true;
                                }
                            }
                        }
                        dc = (dc + 1);
                    }
                    dr = (dr + 1);
                }
                if (burning || chance(g_f)) {
                    next = String::from("#");
                }
            } else {
                if chance(g_p) {
                    next = String::from("T");
                }
            }
            row = { let mut _v = row.clone(); _v.push(next.to_string()); _v };
            c = (c + 1);
        }
        dst = { let mut _v = dst.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return dst
};
        unsafe fn printBoard(mut b: Vec<Vec<String>>) {
    println!("{}", format!("{}{}", repeat(&"__", g_cols), "\n\n"));
    let mut r: i64 = 0;
    while (r < g_rows) {
        let mut line = String::from("");
        let mut c: i64 = 0;
        while (c < g_cols) {
            let mut cell: String = b[r as usize].clone()[c as usize].clone().clone();
            if (cell.as_str() == " ") {
                line = format!("{}{}", line, "  ");
            } else {
                line = format!("{}{}", format!("{}{}", line, " "), cell);
            }
            c = (c + 1);
        }
        println!("{}", format!("{}{}", line, "\n"));
        r = (r + 1);
    }
};
        static mut g_board: Vec<Vec<String>> = Vec::new();;
        printBoard(g_board.clone().clone());
        g_board = step(g_board.clone().clone());
        printBoard(g_board.clone().clone());
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
