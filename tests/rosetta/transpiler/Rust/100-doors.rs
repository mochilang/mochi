// Generated by Mochi transpiler v0.10.40 on 2025-07-25 19:38 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_doors: Vec<bool> = Vec::new();
fn main() {
    unsafe {
        g_doors = vec![];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_doors: Vec<bool> = Vec::new();;
        for i in 0..100 {
            g_doors = { let mut v = g_doors.clone().clone(); v.push(false); v };
        }
        for pass in 1..101 {
            let mut idx: i64 = (pass - 1);
            while (idx < 100) {
                g_doors.clone()[idx as usize] = !g_doors.clone()[idx as usize];
                idx = (idx + pass);
            }
        }
        for row in 0..10 {
            let mut line = String::from("");
            for col in 0..10 {
                let idx: i64 = ((row * 10) + col);
                if g_doors.clone()[idx as usize] {
                    line = format!("{}{}", line, "1");
                } else {
                    line = format!("{}{}", line, "0");
                }
                if (col < 9) {
                    line = format!("{}{}", line, " ");
                }
            }
            println!("{}", line);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _end_mem;
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
