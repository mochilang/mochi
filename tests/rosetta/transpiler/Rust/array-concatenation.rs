// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_a: Vec<i64> = Vec::new();
static mut g_b: Vec<i64> = Vec::new();
static mut g_i: Vec<String> = Vec::new();
static mut g_j: Vec<String> = Vec::new();
static mut g_l: Vec<i64> = Vec::new();
static mut g_m: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_a = vec![1, 2, 3];
        g_b = vec![7, 12, 60];
        g_i = vec![1, 2, 3];
        g_j = vec![String::from("Crosby"), String::from("Stills"), String::from("Nash"), String::from("Young")];
        g_l = vec![1, 2, 3];
        g_m = vec![7, 12, 60];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn concatInts(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    for v in a.clone() {
        out = { let mut _v = out.clone(); _v.push(v); _v };
    }
    for v in b.clone() {
        out = { let mut _v = out.clone(); _v.push(v); _v };
    }
    return out
};
        unsafe fn concatAny(mut a: Vec<String>, mut b: Vec<String>) -> Vec<String> {
    let mut out: Vec<String> = vec![];
    for v in a.clone() {
        out = { let mut _v = out.clone(); _v.push(v.clone()); _v };
    }
    for v in b.clone() {
        out = { let mut _v = out.clone(); _v.push(v.clone()); _v };
    }
    return out
};
        static mut g_a: Vec<i64> = Vec::new();;
        static mut g_b: Vec<i64> = Vec::new();;
        println!("{}", format!("{:?}", concatInts(g_a.clone().clone(), g_b.clone().clone())));
        static mut g_i: Vec<String> = Vec::new();;
        static mut g_j: Vec<String> = Vec::new();;
        println!("{}", format!("{:?}", concatAny(g_i.clone().clone(), g_j.clone().clone())));
        static mut g_l: Vec<i64> = Vec::new();;
        static mut g_m: Vec<i64> = Vec::new();;
        println!("{}", format!("{:?}", concatInts(g_l.clone().clone(), g_m.clone().clone())));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
