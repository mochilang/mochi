// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:06 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    seq: Vec<i64>,
    aliquot: String,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"seq\": {:?}", self.seq)?;
        write!(f, ", ")?;
        write!(f, "\"aliquot\": \"{}\"", self.aliquot)?;
        write!(f, "}}")
    }
}

static mut g_THRESHOLD: i64 = 0;
fn main() {
    unsafe {
        g_THRESHOLD = 140737488355328;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_THRESHOLD: i64 = 0;;
        unsafe fn indexOf(mut xs: Vec<i64>, mut value: i64) -> i64 {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == value) {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
        unsafe fn contains(mut xs: Vec<i64>, mut value: i64) -> bool {
    return (indexOf(xs.clone(), value) != (0 - 1))
};
        unsafe fn maxOf(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    } else {
        return b
    }
};
        unsafe fn intSqrt(mut n: i64) -> i64 {
    if (n == 0) {
        return 0
    }
    let mut x: i64 = n;
    let mut y: i64 = ((x + 1) / 2);
    while (y < x) {
        x = y;
        y = ((x + (n / x)) / 2);
    }
    return x
};
        unsafe fn sumProperDivisors(mut n: i64) -> i64 {
    if (n < 2) {
        return 0
    }
    let sqrt: i64 = intSqrt(n);
    let mut sum: i64 = 1;
    let mut i: i64 = 2;
    while (i <= sqrt) {
        if ((n % i) == 0) {
            sum = ((sum + i) + (n / i));
        }
        i = (i + 1);
    }
    if ((sqrt * sqrt) == n) {
        sum = (sum - sqrt);
    }
    return sum
};
        unsafe fn classifySequence(mut k: i64) -> Map {
    let mut last: i64 = k;
    let mut seq: Vec<i64> = vec![k];
    while true {
        last = sumProperDivisors(last);
        seq = { let mut v = seq.clone(); v.push(last); v };
        let n = (seq.len() as i64);
        let mut aliquot = String::from("");
        if (last == 0) {
            aliquot = String::from("Terminating");
        } else if ((n == 2) && (last == k)) {
            aliquot = String::from("Perfect");
        } else if ((n == 3) && (last == k)) {
            aliquot = String::from("Amicable");
        } else if ((n >= 4) && (last == k)) {
            aliquot = format!("{}{}", format!("{}{}", "Sociable[", (n - 1).to_string()), "]");
        } else if (last == seq[(n - 2) as usize]) {
            aliquot = String::from("Aspiring");
        } else if contains(seq[1 as usize..maxOf(1, (n - 2)) as usize].to_vec(), last) {
            let idx: i64 = indexOf(seq.clone(), last);
            aliquot = format!("{}{}", format!("{}{}", "Cyclic[", ((n - 1) - idx).to_string()), "]");
        } else if ((n == 16) || (last > g_THRESHOLD)) {
            aliquot = String::from("Non-Terminating");
        }
        if (aliquot.as_str() != "") {
            return Map {seq: seq, aliquot: aliquot}
        }
    }
    return Map {seq: seq, aliquot: String::from("")}
};
        unsafe fn padLeft(mut n: i64, mut w: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < w) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
        unsafe fn padRight(mut s: String, mut w: i64) -> String {
    let mut r: String = s.clone();
    while ((r.len() as i64) < w) {
        r = format!("{}{}", r, " ");
    }
    return r.clone()
};
        unsafe fn joinWithCommas(mut seq: Vec<i64>) -> String {
    let mut s = String::from("[");
    let mut i: i64 = 0;
    while (i < (seq.len() as i64)) {
        s = format!("{}{}", s, seq[i as usize].to_string());
        if (i < ((seq.len() as i64) - 1)) {
            s = format!("{}{}", s, ", ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
        unsafe fn mochi_main() {
    println!("{}", "Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n");
    let mut k: i64 = 1;
    while (k <= 10) {
        let res: Map = classifySequence(k);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", padLeft(k, 2), ": "), padRight(res.aliquot, 15)), " "), joinWithCommas(res.seq)));
        k = (k + 1);
    }
    println!("{}", "");
    let mut s: Vec<i64> = vec![11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let val: i64 = s[i as usize];
        let res: Map = classifySequence(val);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", padLeft(val, 7), ": "), padRight(res.aliquot, 15)), " "), joinWithCommas(res.seq)));
        i = (i + 1);
    }
    println!("{}", "");
    let big: i64 = 15355717786080;
    let r: Map = classifySequence(big);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", big.to_string(), ": "), padRight(r.aliquot, 15)), " "), joinWithCommas(r.seq)));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
