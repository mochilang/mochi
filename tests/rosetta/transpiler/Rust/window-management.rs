// Generated by Mochi transpiler v0.10.54 on 2025-08-02 13:50 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Window {
    x: i64,
    y: i64,
    w: i64,
    h: i64,
    maximized: bool,
    iconified: bool,
    visible: bool,
    shifted: bool,
}
impl std::fmt::Display for Window {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"w\": {}", self.w)?;
        write!(f, ", ")?;
        write!(f, "\"h\": {}", self.h)?;
        write!(f, ", ")?;
        write!(f, "\"maximized\": {}", self.maximized)?;
        write!(f, ", ")?;
        write!(f, "\"iconified\": {}", self.iconified)?;
        write!(f, ", ")?;
        write!(f, "\"visible\": {}", self.visible)?;
        write!(f, ", ")?;
        write!(f, "\"shifted\": {}", self.shifted)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn showState(w: &Window, label: &str) {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", label, ": pos=("), w.x.to_string()), ","), w.y.to_string()), ") size=("), w.w.to_string()), "x"), w.h.to_string()), ") max="), w.maximized.to_string()), " icon="), w.iconified.to_string()), " visible="), w.visible.to_string()));
};
    fn maximize(mut w: Window) -> Window {
    w.maximized = true;
    w.w = 800;
    w.h = 600;
    return w
};
    fn unmaximize(mut w: Window) -> Window {
    w.maximized = false;
    w.w = 640;
    w.h = 480;
    return w
};
    fn iconify(mut w: Window) -> Window {
    w.iconified = true;
    w.visible = false;
    return w
};
    fn deiconify(mut w: Window) -> Window {
    w.iconified = false;
    w.visible = true;
    return w
};
    fn hide(mut w: Window) -> Window {
    w.visible = false;
    return w
};
    fn showWindow(mut w: Window) -> Window {
    w.visible = true;
    return w
};
    fn r#move(mut w: Window) -> Window {
    if w.shifted {
        w.x = (w.x - 10);
        w.y = (w.y - 10);
    } else {
        w.x = (w.x + 10);
        w.y = (w.y + 10);
    }
    w.shifted = !w.shifted;
    return w
};
    fn mochi_main() {
    let mut win: Window = Window {x: 100, y: 100, w: 640, h: 480, maximized: false, iconified: false, visible: true, shifted: false};
    showState(&win, &"Start");
    win = maximize(win);
    showState(&win, &"Maximize");
    win = unmaximize(win);
    showState(&win, &"Unmaximize");
    win = iconify(win);
    showState(&win, &"Iconify");
    win = deiconify(win);
    showState(&win, &"Deiconify");
    win = hide(win);
    showState(&win, &"Hide");
    win = showWindow(win);
    showState(&win, &"Show");
    win = r#move(win);
    showState(&win, &"Move");
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
