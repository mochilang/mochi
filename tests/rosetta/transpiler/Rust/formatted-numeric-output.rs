// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn pow10(mut n: i64) -> f64 {
    let mut r: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        r = (r * 10.0);
        i = (i + 1);
    }
    return r
};
    fn formatFloat(mut f: f64, mut prec: i64) -> String {
    let mut scale: f64 = pow10(prec);
    let mut scaled: f64 = ((f * scale) + 0.5);
    let mut n: i64 = (scaled as i64);
    let mut digits = n.to_string();
    while ((digits.len() as i64) <= prec) {
        digits = format!("{}{}", "0", digits);
    }
    let mut intPart: String = { let tmp = &digits; tmp.chars().skip(0 as usize).take((((digits.len() as i64) - prec) - 0) as usize).collect::<String>() }.clone();
    let mut fracPart: String = { let tmp = &digits; tmp.chars().skip(((digits.len() as i64) - prec) as usize).take(((digits.len() as i64) - ((digits.len() as i64) - prec)) as usize).collect::<String>() }.clone();
    return format!("{}{}", format!("{}{}", intPart, "."), fracPart).clone()
};
    fn padLeftZeros(s: &str, mut width: i64) -> String {
    let mut out: String = s.to_string().clone();
    while ((out.len() as i64) < width) {
        out = format!("{}{}", "0", out);
    }
    return out.clone()
};
    println!("{}", padLeftZeros(&formatFloat(7.125, 3), 9));
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
