// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn pow10(mut n: i64) -> f64 {
    let mut r: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        r = (r * 10.0);
        i = (i + 1);
    }
    return r
};
    fn powf(mut base: f64, mut exp: f64) -> f64 {
    if (exp == 0.5) {
        let mut guess: f64 = base;
        let mut i: i64 = 0;
        while (i < 20) {
            guess = ((guess + (base / guess)) / 2.0);
            i = (i + 1);
        }
        return guess
    }
    let mut result: f64 = 1.0;
    let mut n: i64 = int(exp);
    let mut i: i64 = 0;
    while (i < n) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn formatFloat(mut f: f64, mut prec: i64) -> String {
    let mut scale: f64 = pow10(prec);
    let mut scaled: f64 = ((f * scale) + 0.5);
    let mut n: i64 = (scaled as i64);
    let mut digits = n.to_string();
    while ((digits.len() as i64) <= prec) {
        digits = format!("{}{}", "0", digits);
    }
    let mut intPart: String = { let tmp = &digits; tmp.chars().skip(0 as usize).take((((digits.len() as i64) - prec) - 0) as usize).collect::<String>() }.clone();
    let mut fracPart: String = { let tmp = &digits; tmp.chars().skip(((digits.len() as i64) - prec) as usize).take(((digits.len() as i64) - ((digits.len() as i64) - prec)) as usize).collect::<String>() }.clone();
    return format!("{}{}", format!("{}{}", intPart, "."), fracPart).clone()
};
    fn padLeft(s: &str, mut w: i64) -> String {
    let mut res = String::from("");
    let mut n: i64 = (w - (s.len() as i64));
    while (n > 0) {
        res = format!("{}{}", res, " ");
        n = (n - 1);
    }
    return format!("{}{}", res, s).clone()
};
    fn rowString(mut row: Vec<f64>) -> String {
    let mut s = String::from("[");
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        s = format!("{}{}", s, padLeft(&formatFloat(row[i as usize], 3), 6));
        if (i < ((row.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "] ").clone()
};
    fn printMatrix(heading: &str, mut m: Vec<Vec<f64>>) {
    println!("{}", heading);
    let mut i: i64 = 0;
    while (i < (m.len() as i64)) {
        println!("{}", rowString(m[i as usize].clone()));
        i = (i + 1);
    }
};
    fn elementWiseMM(mut m1: Vec<Vec<f64>>, mut m2: Vec<Vec<f64>>, f: &mut impl FnMut(f64, f64) -> f64) -> Vec<Vec<f64>> {
    let mut z: Vec<Vec<f64>> = vec![];
    let mut r: i64 = 0;
    while (r < (m1.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < (m1[r as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(f(m1[r as usize].clone()[c as usize], m2[r as usize].clone()[c as usize])); _v };
            c = (c + 1);
        }
        z = { let mut _v = z.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return z
};
    fn elementWiseMS(mut m: Vec<Vec<f64>>, mut s: f64, f: &mut impl FnMut(f64, f64) -> f64) -> Vec<Vec<f64>> {
    let mut z: Vec<Vec<f64>> = vec![];
    let mut r: i64 = 0;
    while (r < (m.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < (m[r as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(f(m[r as usize].clone()[c as usize], s)); _v };
            c = (c + 1);
        }
        z = { let mut _v = z.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return z
};
    fn add(mut a: f64, mut b: f64) -> f64 {
    return (a + b)
};
    fn sub(mut a: f64, mut b: f64) -> f64 {
    return (a - b)
};
    fn mul(mut a: f64, mut b: f64) -> f64 {
    return (a * b)
};
    fn div(mut a: f64, mut b: f64) -> f64 {
    return (a / b)
};
    fn exp(mut a: f64, mut b: f64) -> f64 {
    return powf(a, b)
};
    fn mochi_main() {
    let mut m1: Vec<Vec<f64>> = vec![vec![3.0, 1.0, 4.0], vec![1.0, 5.0, 9.0]];
    let mut m2: Vec<Vec<f64>> = vec![vec![2.0, 7.0, 1.0], vec![8.0, 2.0, 8.0]];
    printMatrix(&"m1:", m1.clone());
    printMatrix(&"m2:", m2.clone());
    println!("{}", "");
    printMatrix(&"m1 + m2:", elementWiseMM(m1.clone(), m2.clone(), &mut add));
    printMatrix(&"m1 - m2:", elementWiseMM(m1.clone(), m2.clone(), &mut sub));
    printMatrix(&"m1 * m2:", elementWiseMM(m1.clone(), m2.clone(), &mut mul));
    printMatrix(&"m1 / m2:", elementWiseMM(m1.clone(), m2.clone(), &mut div));
    printMatrix(&"m1 ^ m2:", elementWiseMM(m1.clone(), m2.clone(), &mut exp));
    println!("{}", "");
    let mut s: f64 = 0.5;
    println!("{}", format!("{}{}", "s: ", s.to_string()));
    printMatrix(&"m1 + s:", elementWiseMS(m1.clone(), s, &mut add));
    printMatrix(&"m1 - s:", elementWiseMS(m1.clone(), s, &mut sub));
    printMatrix(&"m1 * s:", elementWiseMS(m1.clone(), s, &mut mul));
    printMatrix(&"m1 / s:", elementWiseMS(m1.clone(), s, &mut div));
    printMatrix(&"m1 ^ s:", elementWiseMS(m1.clone(), s, &mut exp));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
