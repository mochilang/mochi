// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn bernoulli(mut n: i64) -> i64 {
    let mut a: Vec<i64> = vec![];
    let mut m: i64 = 0;
    while (m <= n) {
        a = { let mut _v = a.clone(); _v.push((1 / (m + 1))); _v };
        let mut j: i64 = m;
        while (j >= 1) {
            a[(j - 1) as usize] = (j * (a[(j - 1) as usize] - a[j as usize]));
            j = (j - 1);
        }
        m = (m + 1);
    }
    return a[0 as usize]
};
    fn binom(mut n: i64, mut k: i64) -> i64 {
    if ((k < 0) || (k > n)) {
        return 0
    }
    let mut kk: i64 = k;
    if (kk > (n - kk)) {
        kk = (n - kk);
    }
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < kk) {
        res = (res * (n - i));
        i = (i + 1);
        res = (res / i);
    }
    return res
};
    fn coeff(mut p: i64, mut j: i64) -> i64 {
    let mut base: i64 = (1 / (p + 1));
    let mut c: i64 = base;
    if ((j % 2) == 1) {
        c = -c;
    }
    c = (c * binom((p + 1), j));
    c = (c * bernoulli(j));
    return c
};
    fn mochi_main() {
    let mut p: i64 = 0;
    while (p < 10) {
        let mut line = format!("{}{}", p.to_string(), " :");
        let mut j: i64 = 0;
        while (j <= p) {
            let mut c: i64 = coeff(p, j);
            if (c.to_string() != "0/1") {
                line = format!("{}{}", format!("{}{}", format!("{}{}", line, " "), c.to_string()), "Ã—n");
                let mut exp: i64 = ((p + 1) - j);
                if (exp > 1) {
                    line = format!("{}{}", format!("{}{}", line, "^"), exp.to_string());
                }
            }
            j = (j + 1);
        }
        println!("{}", line);
        p = (p + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
