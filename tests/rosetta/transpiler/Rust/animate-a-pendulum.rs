// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_L: f64 = 0.0;
static mut g_G: f64 = 0.0;
static mut g_dt: f64 = 0.0;
static mut g_phi0: f64 = 0.0;
static mut g_omega: f64 = 0.0;
static mut g_t: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_L = 10.0;
        g_G = 9.81;
        g_dt = 0.2;
        g_phi0 = (g_PI / 4.0);
        g_omega = sqrtApprox((g_G / g_L));
        g_t = 0.0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_PI: f64 = 0.0;;
        unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 10) {
        let denom: i64 = ((2 * n) * ((2 * n) + 1));
        term = (((-term * x) * x) / (denom as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn cosApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n <= 10) {
        let denom: i64 = (((2 * n) - 1) * (2 * n));
        term = (((-term * x) * x) / (denom as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
        static mut g_L: f64 = 0.0;;
        static mut g_G: f64 = 0.0;;
        static mut g_dt: f64 = 0.0;;
        static mut g_phi0: f64 = 0.0;;
        static mut g_omega: f64 = 0.0;;
        static mut g_t: f64 = 0.0;;
        for step in 0..10 {
            let phi: f64 = (g_phi0 * cosApprox((g_omega * g_t)));
            let pos: f64 = ((10.0 * sinApprox(phi)) + 0.5);
            println!("{}", pos.to_string());
            g_t = (g_t + g_dt);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
