// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn parseIntStr(str: &str) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let mut digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string().as_str()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
    fn mochi_main() {
    let mut n: i64 = 0;
    while ((n < 1) || (n > 5)) {
        println!("{}", "How many integer variables do you want to create (max 5) : ");
        let mut line: String = input().clone();
        if ((line.len() as i64) > 0) {
            n = parseIntStr(&line);
        }
    }
    let mut vars: HashMap<String, i64> = HashMap::from([]);
    println!("{}", "OK, enter the variable names and their values, below\n");
    let mut i: i64 = 1;
    while (i <= n) {
        println!("{}", format!("{}{}", format!("{}{}", "\n  Variable ", i.to_string()), "\n"));
        println!("{}", "    Name  : ");
        let mut name: String = input().clone();
        if vars.contains_key(&name) {
            println!("{}", "  Sorry, you've already created a variable of that name, try again");
            continue
        }
        let mut value: i64 = 0;
        loop {
            println!("{}", "    Value : ");
            let mut valstr: String = input().clone();
            if ((valstr.len() as i64) == 0) {
                println!("{}", "  Not a valid integer, try again");
                continue
            }
            let mut ok: bool = true;
            let mut j: i64 = 0;
            let mut neg: bool = false;
            if (valstr[0 as usize..1 as usize].to_string().as_str() == "-") {
                neg = true;
                j = 1;
            }
            while (j < (valstr.len() as i64)) {
                let mut ch: String = valstr[j as usize..(j + 1) as usize].to_string().clone();
                if ((ch.as_str() < "0") || (ch.as_str() > "9")) {
                    ok = false;
                    break
                }
                j = (j + 1);
            }
            if !ok {
                println!("{}", "  Not a valid integer, try again");
                continue
            }
            value = parseIntStr(&valstr);
            break
        }
        vars.insert(name.clone(), value);
        i = (i + 1);
    }
    println!("{}", "\nEnter q to quit");
    loop {
        println!("{}", "\nWhich variable do you want to inspect : ");
        let mut name: String = input().clone();
        if ((name.to_lowercase()).as_str() == "q") {
            return
        }
        if vars.contains_key(&name) {
            println!("{}", format!("{}{}", "It's value is ", vars[name.as_str()].to_string()));
        } else {
            println!("{}", "Sorry there's no variable of that name, try again");
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
