// Generated by Mochi transpiler v0.10.41 on 2025-07-26 19:01 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
#[derive(Debug, Clone, Default)]
struct SomeStruct {
    runtimeFields: HashMap<String, String>,
}
impl std::fmt::Display for SomeStruct {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"runtimeFields\": {:?}", self.runtimeFields)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn mochi_main() {
    let mut ss: SomeStruct = SomeStruct {runtimeFields: HashMap::from([])};
    println!("{}", "Create two fields at runtime: \n");
    let mut i: i64 = 1;
    while (i <= 2) {
        println!("{}", format!("{}{}", format!("{}{}", "  Field #", i.to_string()), ":\n"));
        println!("{}", "       Enter name  : ");
        let name: String = input().clone();
        println!("{}", "       Enter value : ");
        let value: String = input().clone();
        let mut fields: HashMap<String, String> = ss.runtimeFields;
        fields.insert(name.clone(), value);
        ss.runtimeFields = fields;
        println!("{}", "\n");
        i = (i + 1);
    }
    while true {
        println!("{}", "Which field do you want to inspect ? ");
        let name: String = input().clone();
        if ss.runtimeFields.contains_key(&name) {
            let value: String = ss.runtimeFields[name.as_str()].clone().clone().clone();
            println!("{}", format!("{}{}", format!("{}{}", "Its value is '", value), "'"));
            return
        } else {
            println!("{}", "There is no field of that name, try again\n");
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
