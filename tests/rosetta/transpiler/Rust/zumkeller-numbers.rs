// Generated by Mochi transpiler v0.10.54 on 2025-08-02 13:50 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn getDivisors(mut n: i64) -> Vec<i64> {
    let mut divs: Vec<i64> = vec![1, n];
    let mut i: i64 = 2;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            let mut j: i64 = (n / i);
            divs = { let mut _v = divs.clone(); _v.push(i); _v };
            if (i != j) {
                divs = { let mut _v = divs.clone(); _v.push(j); _v };
            }
        }
        i = (i + 1);
    }
    return divs
};
    fn sum(mut xs: Vec<i64>) -> i64 {
    let mut s: i64 = 0;
    for x in xs.clone() {
        s = (s + x);
    }
    return s
};
    fn isPartSum(mut divs: Vec<i64>, mut target: i64) -> bool {
    let mut possible: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i <= target) {
        possible = { let mut _v = possible.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    possible[0 as usize] = true;
    for v in divs.clone() {
        let mut s: i64 = target;
        while (s >= v) {
            if possible[(s - v) as usize] {
                possible[s as usize] = true;
            }
            s = (s - 1);
        }
    }
    return possible[target as usize]
};
    fn isZumkeller(mut n: i64) -> bool {
    let mut divs: Vec<i64> = getDivisors(n);
    let mut s: i64 = sum(divs.clone());
    if ((s % 2) == 1) {
        return false
    }
    if ((n % 2) == 1) {
        let mut abundance: i64 = (s - (2 * n));
        return ((abundance > 0) && ((abundance % 2) == 0))
    }
    return isPartSum(divs.clone(), (s / 2))
};
    fn pad(mut n: i64, mut width: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < width) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn mochi_main() {
    println!("{}", "The first 220 Zumkeller numbers are:");
    let mut count: i64 = 0;
    let mut line: String = String::from("").clone();
    let mut i: i64 = 2;
    while (count < 220) {
        if isZumkeller(i) {
            line = format!("{}{}", format!("{}{}", line, pad(i, 3)), " ");
            count = (count + 1);
            if ((count % 20) == 0) {
                println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
                line = String::from("");
            }
        }
        i = (i + 1);
    }
    println!("{}", "\nThe first 40 odd Zumkeller numbers are:");
    count = 0;
    line = String::from("");
    i = 3;
    while (count < 40) {
        if isZumkeller(i) {
            line = format!("{}{}", format!("{}{}", line, pad(i, 5)), " ");
            count = (count + 1);
            if ((count % 10) == 0) {
                println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
                line = String::from("");
            }
        }
        i = (i + 2);
    }
    println!("{}", "\nThe first 40 odd Zumkeller numbers which don't end in 5 are:");
    count = 0;
    line = String::from("");
    i = 3;
    while (count < 40) {
        if (((i % 10) != 5) && isZumkeller(i)) {
            line = format!("{}{}", format!("{}{}", line, pad(i, 7)), " ");
            count = (count + 1);
            if ((count % 8) == 0) {
                println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
                line = String::from("");
            }
        }
        i = (i + 2);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
