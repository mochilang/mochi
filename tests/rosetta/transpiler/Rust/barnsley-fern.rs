// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_xMin: f64 = 0.0;
static mut g_xMax: f64 = 0.0;
static mut g_yMin: f64 = 0.0;
static mut g_yMax: f64 = 0.0;
static mut g_width: i64 = 0;
static mut g_nIter: i64 = 0;
static mut g_dx: f64 = 0.0;
static mut g_dy: f64 = 0.0;
static mut g_height: i64 = 0;
static mut g_grid: Vec<Vec<String>> = Vec::new();
static mut g_row: i64 = 0;
static mut g_seed: i64 = 0;
static mut g_x: f64 = 0.0;
static mut g_y: f64 = 0.0;
static mut g_ix: i64 = 0;
static mut g_iy: i64 = 0;
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_xMin = -2.182;
        g_xMax = 2.6558;
        g_yMin = 0.0;
        g_yMax = 9.9983;
        g_width = 60;
        g_nIter = 10000;
        g_dx = (g_xMax - g_xMin);
        g_dy = (g_yMax - g_yMin);
        g_height = ((((g_width as f64) * g_dy) as f64) / g_dx);
        g_grid = vec![];
        g_row = 0;
        g_seed = 1;
        g_x = 0.0;
        g_y = 0.0;
        g_ix = ((((g_width as f64) * (g_x - g_xMin)) / g_dx) as i64);
        g_iy = ((((g_height as f64) * (g_yMax - g_y)) / g_dy) as i64);
        g_i = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_xMin: f64 = 0.0;;
        static mut g_xMax: f64 = 0.0;;
        static mut g_yMin: f64 = 0.0;;
        static mut g_yMax: f64 = 0.0;;
        static mut g_width: i64 = 0;;
        static mut g_nIter: i64 = 0;;
        static mut g_dx: f64 = 0.0;;
        static mut g_dy: f64 = 0.0;;
        static mut g_height: i64 = 0;;
        static mut g_grid: Vec<Vec<String>> = Vec::new();;
        static mut g_row: i64 = 0;;
        while (g_row < g_height) {
            let mut line: Vec<String> = vec![];
            let mut col: i64 = 0;
            while (col < g_width) {
                line = { let mut _v = line.clone(); _v.push(" ".to_string()); _v };
                col = (col + 1);
            }
            g_grid = { let mut _v = g_grid.clone().clone(); _v.push(line.clone()); _v };
            g_row = (g_row + 1);
        }
        static mut g_seed: i64 = 0;;
        unsafe fn randInt(mut s: i64, mut n: i64) -> Vec<i64> {
    let next: i64 = (((s * 1664525) + 1013904223) % 2147483647);
    return vec![next, (next % n)]
};
        static mut g_x: f64 = 0.0;;
        static mut g_y: f64 = 0.0;;
        static mut g_ix: i64 = 0;;
        static mut g_iy: i64 = 0;;
        if ((((g_ix >= 0) && (g_ix < g_width)) && (g_iy >= 0)) && (g_iy < g_height)) {
            g_grid[g_iy as usize][g_ix as usize] = "*";
        }
        static mut g_i: i64 = 0;;
        while (g_i < g_nIter) {
            let mut res: Vec<i64> = randInt(g_seed, 100);
            g_seed = res[0 as usize];
            let r: i64 = res[1 as usize];
            if (r < 85) {
                let nx: f64 = ((0.85 * g_x) + (0.04 * g_y));
                let ny: f64 = (((-0.04 * g_x) + (0.85 * g_y)) + 1.6);
                g_x = nx;
                g_y = ny;
            } else if (r < 92) {
                let nx: f64 = ((0.2 * g_x) - (0.26 * g_y));
                let ny: f64 = (((0.23 * g_x) + (0.22 * g_y)) + 1.6);
                g_x = nx;
                g_y = ny;
            } else if (r < 99) {
                let nx: f64 = ((-0.15 * g_x) + (0.28 * g_y));
                let ny: f64 = (((0.26 * g_x) + (0.24 * g_y)) + 0.44);
                g_x = nx;
                g_y = ny;
            } else {
                g_x = 0.0;
                g_y = (0.16 * g_y);
            }
            g_ix = ((((g_width as f64) * (g_x - g_xMin)) / g_dx) as i64);
            g_iy = ((((g_height as f64) * (g_yMax - g_y)) / g_dy) as i64);
            if ((((g_ix >= 0) && (g_ix < g_width)) && (g_iy >= 0)) && (g_iy < g_height)) {
                g_grid[g_iy as usize][g_ix as usize] = "*";
            }
            g_i = (g_i + 1);
        }
        g_row = 0;
        while (g_row < g_height) {
            let mut line = String::from("");
            let mut col: i64 = 0;
            while (col < g_width) {
                line = format!("{}{}", line, g_grid.clone()[g_row as usize].clone()[col as usize].clone());
                col = (col + 1);
            }
            println!("{:?}", line);
            g_row = (g_row + 1);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
