// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700
fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
}

fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx = { let s = upper.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = { let s = lower.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (97 + idx)
    }
    return 0
}

fn chr(mut n: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    if ((n >= 65) && (n < 91)) {
        return upper[(n - 65) as usize..(n - 64) as usize].to_string()
    }
    if ((n >= 97) && (n < 123)) {
        return lower[(n - 97) as usize..(n - 96) as usize].to_string()
    }
    return String::from("?").clone()
}

fn shiftRune(mut r: String, mut k: i64) -> String {
    if ((r.as_str() >= "a") && (r.as_str() <= "z")) {
        return chr(((((ord(r.clone()) - 97) + k) % 26) + 97))
    }
    if ((r.as_str() >= "A") && (r.as_str() <= "Z")) {
        return chr(((((ord(r.clone()) - 65) + k) % 26) + 65))
    }
    return r.clone()
}

fn encipher(mut s: String, mut k: i64) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        out = format!("{}{}", out, shiftRune(s[i as usize..(i + 1) as usize].to_string(), k));
        i = (i + 1);
    }
    return out.clone()
}

fn decipher(mut s: String, mut k: i64) -> String {
    return encipher(s.clone(), ((26 - (k % 26)) % 26)).clone()
}

fn mochi_main() {
    let mut pt: String = String::from("The five boxing wizards jump quickly").clone();
    println!("{}", format!("{}{}", "Plaintext: ", pt));
    for key in vec![0, 1, 7, 25, 26].iter().cloned() {
        if ((key < 1) || (key > 25)) {
            println!("{}", format!("{}{}", format!("{}{}", "Key ", key.to_string()), " invalid"));
            continue
        }
        let mut ct: String = encipher(pt.clone(), key).clone();
        println!("{}", format!("{}{}", "Key ", key.to_string()));
        println!("{}", format!("{}{}", "  Enciphered: ", ct));
        println!("{}", format!("{}{}", "  Deciphered: ", decipher(ct.clone(), key)));
    }
}

fn main() {
    mochi_main();
}
