warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:22:11
   |
22 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
22 -     while (i < (s.len() as i64)) {
22 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:24:12
   |
24 |         if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
   |            ^                                                                        ^
   |
help: remove these parentheses
   |
24 -         if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
24 +         if ((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t") {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:25:16
   |
25 |             if ((cur.len() as i64) > 0) {
   |                ^                      ^
   |
help: remove these parentheses
   |
25 -             if ((cur.len() as i64) > 0) {
25 +             if (cur.len() as i64) > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:32:13
   |
32 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
32 -         i = (i + 1);
32 +         i = i + 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:34:8
   |
34 |     if ((cur.len() as i64) > 0) {
   |        ^                      ^
   |
help: remove these parentheses
   |
34 -     if ((cur.len() as i64) > 0) {
34 +     if (cur.len() as i64) > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:42:17
   |
42 |     let mut i = (s.len() as i64);
   |                 ^              ^
   |
help: remove these parentheses
   |
42 -     let mut i = (s.len() as i64);
42 +     let mut i = s.len() as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:43:11
   |
43 |     while (i < width) {
   |           ^         ^
   |
help: remove these parentheses
   |
43 -     while (i < width) {
43 +     while i < width {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:45:13
   |
45 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
45 -         i = (i + 1);
45 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:53:11
   |
53 |     while (i < (xs.len() as i64)) {
   |           ^                     ^
   |
help: remove these parentheses
   |
53 -     while (i < (xs.len() as i64)) {
53 +     while i < (xs.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:54:12
   |
54 |         if (i > 0) {
   |            ^     ^
   |
help: remove these parentheses
   |
54 -         if (i > 0) {
54 +         if i > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:58:13
   |
58 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
58 -         i = (i + 1);
58 +         i = i + 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:66:8
   |
66 |     if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
   |        ^                                                                                     ^
   |
help: remove these parentheses
   |
66 -     if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
66 +     if ((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-") {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:72:11
   |
72 |     while (i < (str.len() as i64)) {
   |           ^                      ^
   |
help: remove these parentheses
   |
72 -     while (i < (str.len() as i64)) {
72 +     while i < (str.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:73:13
   |
73 |         n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string()]);
   |             ^                                                                ^
   |
help: remove these parentheses
   |
73 -         n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string()]);
73 +         n = (n * 10) + digits[str[i as usize..(i + 1) as usize].to_string()];
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:74:13
   |
74 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
74 -         i = (i + 1);
74 +         i = i + 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:83:8
   |
83 |     if ((s.len() as i64) == 0) {
   |        ^                     ^
   |
help: remove these parentheses
   |
83 -     if ((s.len() as i64) == 0) {
83 +     if (s.len() as i64) == 0 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:87:11
   |
87 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
help: remove these parentheses
   |
87 -     while (i < (s.len() as i64)) {
87 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:89:12
   |
89 |         if ((ch.as_str() < "0") || (ch.as_str() > "9")) {
   |            ^                                          ^
   |
help: remove these parentheses
   |
89 -         if ((ch.as_str() < "0") || (ch.as_str() > "9")) {
89 +         if (ch.as_str() < "0") || (ch.as_str() > "9") {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:92:13
   |
92 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
92 -         i = (i + 1);
92 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:102:11
    |
102 |     while (i < (toks.len() as i64)) {
    |           ^                       ^
    |
help: remove these parentheses
    |
102 -     while (i < (toks.len() as i64)) {
102 +     while i < (toks.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:104:26
    |
104 |         let mut minlen = (cmd.len() as i64);
    |                          ^                ^
    |
help: remove these parentheses
    |
104 -         let mut minlen = (cmd.len() as i64);
104 +         let mut minlen = cmd.len() as i64;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:105:13
    |
105 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
105 -         i = (i + 1);
105 +         i = i + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:106:12
    |
106 |         if ((i < (toks.len() as i64)) && isDigits(toks[i as usize].clone())) {
    |            ^                                                               ^
    |
help: remove these parentheses
    |
106 -         if ((i < (toks.len() as i64)) && isDigits(toks[i as usize].clone())) {
106 +         if (i < (toks.len() as i64)) && isDigits(toks[i as usize].clone()) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:108:16
    |
108 |             if ((num >= 1) && (num < (cmd.len() as i64))) {
    |                ^                                        ^
    |
help: remove these parentheses
    |
108 -             if ((num >= 1) && (num < (cmd.len() as i64))) {
108 +             if (num >= 1) && (num < (cmd.len() as i64)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:110:21
    |
110 |                 i = (i + 1);
    |                     ^     ^
    |
help: remove these parentheses
    |
110 -                 i = (i + 1);
110 +                 i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:122:11
    |
122 |     while (wi < (words.len() as i64)) {
    |           ^                         ^
    |
help: remove these parentheses
    |
122 -     while (wi < (words.len() as i64)) {
122 +     while wi < (words.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:125:20
    |
125 |         let wlen = (w.len() as i64);
    |                    ^              ^
    |
help: remove these parentheses
    |
125 -         let wlen = (w.len() as i64);
125 +         let wlen = w.len() as i64;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:127:15
    |
127 |         while (ci < (commands.len() as i64)) {
    |               ^                            ^
    |
help: remove these parentheses
    |
127 -         while (ci < (commands.len() as i64)) {
127 +         while ci < (commands.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:129:16
    |
129 |             if (((mins[ci as usize] != 0) && (wlen >= mins[ci as usize])) && (wlen <= (cmd.len() as i64))) {
    |                ^                                                                                         ^
    |
help: remove these parentheses
    |
129 -             if (((mins[ci as usize] != 0) && (wlen >= mins[ci as usize])) && (wlen <= (cmd.len() as i64))) {
129 +             if ((mins[ci as usize] != 0) && (wlen >= mins[ci as usize])) && (wlen <= (cmd.len() as i64)) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:132:20
    |
132 |                 if ({ let tmp = &c; tmp.chars().skip(0 as usize).take((wlen - 0) as usize).collect::<String>() }.as_str() == ww) {
    |                    ^                                                                                                           ^
    |
help: remove these parentheses
    |
132 -                 if ({ let tmp = &c; tmp.chars().skip(0 as usize).take((wlen - 0) as usize).collect::<String>() }.as_str() == ww) {
132 +                 if { let tmp = &c; tmp.chars().skip(0 as usize).take((wlen - 0) as usize).collect::<String>() }.as_str() == ww {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:138:18
    |
138 |             ci = (ci + 1);
    |                  ^      ^
    |
help: remove these parentheses
    |
138 -             ci = (ci + 1);
138 +             ci = ci + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:143:14
    |
143 |         wi = (wi + 1);
    |              ^      ^
    |
help: remove these parentheses
    |
143 -         wi = (wi + 1);
143 +         wi = wi + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:158:11
    |
158 |     while (k < (words.len() as i64)) {
    |           ^                        ^
    |
help: remove these parentheses
    |
158 -     while (k < (words.len() as i64)) {
158 +     while k < (words.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:160:12
    |
160 |         if (k < ((words.len() as i64) - 1)) {
    |            ^                              ^
    |
help: remove these parentheses
    |
160 -         if (k < ((words.len() as i64) - 1)) {
160 +         if k < ((words.len() as i64) - 1) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:161:78
    |
161 |             out1 = format!("{}{}", out1, padRight(words[k as usize].clone(), (results[k as usize].clone().len() as i64)));
    |                                                                              ^                                        ^
    |
help: remove these parentheses
    |
161 -             out1 = format!("{}{}", out1, padRight(words[k as usize].clone(), (results[k as usize].clone().len() as i64)));
161 +             out1 = format!("{}{}", out1, padRight(words[k as usize].clone(), results[k as usize].clone().len() as i64));
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:165:13
    |
165 |         k = (k + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
165 -         k = (k + 1);
165 +         k = k + 1;
    |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:73:32
   |
73 |         n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string()]);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&_`, found `String`
   |
   = note: expected reference `&_`
                 found struct `String`
help: consider borrowing here
   |
73 |         n = ((n * 10) + digits[&str[i as usize..(i + 1) as usize].to_string()]);
   |                                +

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:18:11
   |
18 | fn fields(mut s: String) -> Vec<String> {
   |           ----^
   |           |
   |           help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:40:13
   |
40 | fn padRight(mut s: String, mut width: i64) -> String {
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:40:28
   |
40 | fn padRight(mut s: String, mut width: i64) -> String {
   |                            ----^^^^^
   |                            |
   |                            help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:50:9
   |
50 | fn join(mut xs: Vec<String>, mut sep: String) -> String {
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:50:30
   |
50 | fn join(mut xs: Vec<String>, mut sep: String) -> String {
   |                              ----^^^
   |                              |
   |                              help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:82:13
   |
82 | fn isDigits(mut s: String) -> bool {
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:97:14
   |
97 | fn readTable(mut table: String) -> Map {
   |              ----^^^^^
   |              |
   |              help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:98:9
   |
98 |     let mut toks: Vec<String> = fields(table);
   |         ----^^^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:119:13
    |
119 | fn validate(mut commands: Vec<String>, mut mins: Vec<i64>, mut words: Vec<String>) -> Vec<String> {
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:119:40
    |
119 | fn validate(mut commands: Vec<String>, mut mins: Vec<i64>, mut words: Vec<String>) -> Vec<String> {
    |                                        ----^^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:119:60
    |
119 | fn validate(mut commands: Vec<String>, mut mins: Vec<i64>, mut words: Vec<String>) -> Vec<String> {
    |                                                            ----^^^^^
    |                                                            |
    |                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:152:9
    |
152 |     let mut commands: Vec<String> = tbl.commands;
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:153:9
    |
153 |     let mut mins: Vec<i64> = tbl.mins;
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:154:9
    |
154 |     let mut words: Vec<String> = fields(sentence);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/abbreviations-simple.rs:155:9
    |
155 |     let mut results: Vec<String> = validate(commands.clone(), mins.clone(), words.clone());
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

error: aborting due to 1 previous error; 51 warnings emitted

For more information about this error, try `rustc --explain E0308`.
