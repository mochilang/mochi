// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn abs(mut x: f64) -> f64 {
    if (x < 0.0) {
        return -x
    }
    return x
};
    fn maxf(mut a: f64, mut b: f64) -> f64 {
    if (a > b) {
        return a
    }
    return b
};
    fn isClose(mut a: f64, mut b: f64) -> bool {
    let mut relTol: f64 = 0.000000001;
    let mut t: f64 = abs((a - b));
    let mut u: f64 = (relTol * maxf(abs(a), abs(b)));
    return (t <= u)
};
    fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 10) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn mochi_main() {
    let mut root2: f64 = sqrtApprox(2.0);
    let mut pairs: Vec<Vec<f64>> = vec![vec![100000000000000.02, 100000000000000.02], vec![100.01, 100.011], vec![(10000000000000.002 / 10000.0), 1000000000.0000001], vec![0.001, 0.0010000001], vec![0.000000000000000000000101, 0.0], vec![(root2 * root2), 2.0], vec![(-root2 * root2), -2.0], vec![100000000000000000.0, 100000000000000000.0], vec![3.141592653589793, 3.141592653589793]];
    for pair in &pairs {
        let mut a: f64 = pair[0 as usize];
        let mut b: f64 = pair[1 as usize];
        let mut s = if isClose(a, b) { "≈" } else { "≉" };
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), s), " "), b.to_string()));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
