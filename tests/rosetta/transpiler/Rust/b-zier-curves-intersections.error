error[E0106]: missing lifetime specifier
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:132:73
    |
132 | fn testIntersect(p: &QuadCurve, q: &QuadCurve, mut tol: f64) -> HashMap<&str, bool> {
    |                     ----------     ----------                           ^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `p` or `q`
help: consider introducing a named lifetime parameter
    |
132 | fn testIntersect<'a>(p: &'a QuadCurve, q: &'a QuadCurve, mut tol: f64) -> HashMap<&'a str, bool> {
    |                 ++++     ++                ++                                      ++

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:67:8
   |
67 |     if (x < 0.0) {
   |        ^       ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
67 -     if (x < 0.0) {
67 +     if x < 0.0 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:74:8
   |
74 |     if (a > b) {
   |        ^     ^
   |
help: remove these parentheses
   |
74 -     if (a > b) {
74 +     if a > b {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:81:8
   |
81 |     if (a < b) {
   |        ^     ^
   |
help: remove these parentheses
   |
81 -     if (a < b) {
81 +     if a < b {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:89:8
   |
89 |     if (b > m) {
   |        ^     ^
   |
help: remove these parentheses
   |
89 -     if (b > m) {
89 +     if b > m {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:92:8
   |
92 |     if (c > m) {
   |        ^     ^
   |
help: remove these parentheses
   |
92 -     if (c > m) {
92 +     if c > m {
   |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:100:8
    |
100 |     if (b < m) {
    |        ^     ^
    |
help: remove these parentheses
    |
100 -     if (b < m) {
100 +     if b < m {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:103:8
    |
103 |     if (c < m) {
    |        ^     ^
    |
help: remove these parentheses
    |
103 -     if (c < m) {
103 +     if c < m {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:110:18
    |
110 |     let s: f64 = (1.0 - t);
    |                  ^       ^
    |
help: remove these parentheses
    |
110 -     let s: f64 = (1.0 - t);
110 +     let s: f64 = 1.0 - t;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:113:12
    |
113 |     u.c1 = ((s * q.c0) + (t * q.c1));
    |            ^                       ^
    |
help: remove these parentheses
    |
113 -     u.c1 = ((s * q.c0) + (t * q.c1));
113 +     u.c1 = (s * q.c0) + (t * q.c1);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:114:12
    |
114 |     v.c1 = ((s * q.c1) + (t * q.c2));
    |            ^                       ^
    |
help: remove these parentheses
    |
114 -     v.c1 = ((s * q.c1) + (t * q.c2));
114 +     v.c1 = (s * q.c1) + (t * q.c2);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:115:12
    |
115 |     u.c2 = ((s * u.c1) + (t * v.c1));
    |            ^                       ^
    |
help: remove these parentheses
    |
115 -     u.c2 = ((s * u.c1) + (t * v.c1));
115 +     u.c2 = (s * u.c1) + (t * v.c1);
    |

warning: unnecessary parentheses around `return` value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:129:12
    |
129 |     return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1))
    |            ^                                                                ^
    |
help: remove these parentheses
    |
129 -     return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1))
129 +     return (((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1)
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:148:12
    |
148 |         if ((xmax - xmin) <= tol) {
    |            ^                    ^
    |
help: remove these parentheses
    |
148 -         if ((xmax - xmin) <= tol) {
148 +         if (xmax - xmin) <= tol {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:151:16
    |
151 |             if ((ymax - ymin) <= tol) {
    |                ^                    ^
    |
help: remove these parentheses
    |
151 -             if ((ymax - ymin) <= tol) {
151 +             if (ymax - ymin) <= tol {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:153:27
    |
153 |                 inter.x = (0.5 * (xmin + xmax));
    |                           ^                   ^
    |
help: remove these parentheses
    |
153 -                 inter.x = (0.5 * (xmin + xmax));
153 +                 inter.x = 0.5 * (xmin + xmax);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:154:27
    |
154 |                 inter.y = (0.5 * (ymin + ymax));
    |                           ^                   ^
    |
help: remove these parentheses
    |
154 -                 inter.y = (0.5 * (ymin + ymax));
154 +                 inter.y = 0.5 * (ymin + ymax);
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:163:11
    |
163 |     while (i < (pts.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
163 -     while (i < (pts.len() as i64)) {
163 +     while i < (pts.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:165:12
    |
165 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |            ^                                                                  ^
    |
help: remove these parentheses
    |
165 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
165 +         if (absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:165:19
    |
165 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |                   ^           ^
    |
help: remove these parentheses
    |
165 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
165 +         if ((absf(pt.x - xy.x) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:165:54
    |
165 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |                                                      ^           ^
    |
help: remove these parentheses
    |
165 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
165 +         if ((absf((pt.x - xy.x)) < spacing) && (absf(pt.y - xy.y) < spacing)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:168:13
    |
168 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
168 -         i = (i + 1);
168 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:176:11
    |
176 |     while ((workload.len() as i64) > 0) {
    |           ^                           ^
    |
help: remove these parentheses
    |
176 -     while ((workload.len() as i64) > 0) {
176 +     while (workload.len() as i64) > 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:177:19
    |
177 |         let idx = ((workload.len() as i64) - 1);
    |                   ^                           ^
    |
help: remove these parentheses
    |
177 -         let idx = ((workload.len() as i64) - 1);
177 +         let idx = (workload.len() as i64) - 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:208:24
    |
208 |     let spacing: f64 = (tol * 10.0);
    |                        ^          ^
    |
help: remove these parentheses
    |
208 -     let spacing: f64 = (tol * 10.0);
208 +     let spacing: f64 = tol * 10.0;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:211:11
    |
211 |     while (i < (inters.len() as i64)) {
    |           ^                         ^
    |
help: remove these parentheses
    |
211 -     while (i < (inters.len() as i64)) {
211 +     while i < (inters.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:214:13
    |
214 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
214 -         i = (i + 1);
214 +         i = i + 1;
    |

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:158:125
    |
158 |     return HashMap::from([(String::from("exclude"), exclude), (String::from("accept"), accept), (String::from("intersect"), inter)])
    |                                                                                                                             ^^^^^ expected `bool`, found `Point`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:175:62
    |
175 |     let mut workload: Vec<HashMap<String, QuadCurve>> = vec![HashMap::from([(String::from("p"), p), (String::from("q"), q)])];
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, QuadCurve>`, found `HashMap<String, &QuadCurve>`
    |
    = note: expected struct `HashMap<_, QuadCurve>`
               found struct `HashMap<_, &QuadCurve>`

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:180:68
    |
180 |         let mut res: HashMap<&str, bool> = testIntersect(&work["p".as_str()].clone(), &work["q".as_str()].clone(), tol);
    |                                                                    ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:180:97
    |
180 |         let mut res: HashMap<&str, bool> = testIntersect(&work["p".as_str()].clone(), &work["q".as_str()].clone(), tol);
    |                                                                                                 ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:181:40
    |
181 |         let excl: bool = res["exclude".as_str()];
    |                                        ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:182:38
    |
182 |         let acc: bool = res["accept".as_str()];
    |                                      ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:183:43
    |
183 |         let inter: bool = res["intersect".as_str()];
    |                                           ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:189:71
    |
189 |             let mut ps: Vec<QuadCurve> = subdivideQuadCurve(&work["p".as_str()].clone(), 0.5);
    |                                                                       ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:190:71
    |
190 |             let mut qs: Vec<QuadCurve> = subdivideQuadCurve(&work["q".as_str()].clone(), 0.5);
    |                                                                       ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:66:9
   |
66 | fn absf(mut x: f64) -> f64 {
   |         ----^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:73:9
   |
73 | fn maxf(mut a: f64, mut b: f64) -> f64 {
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:73:21
   |
73 | fn maxf(mut a: f64, mut b: f64) -> f64 {
   |                     ----^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:80:9
   |
80 | fn minf(mut a: f64, mut b: f64) -> f64 {
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:80:21
   |
80 | fn minf(mut a: f64, mut b: f64) -> f64 {
   |                     ----^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:87:9
   |
87 | fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:87:21
   |
87 | fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |                     ----^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:87:33
   |
87 | fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |                                 ----^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:98:9
   |
98 | fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:98:21
   |
98 | fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |                     ----^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:98:33
   |
98 | fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
   |                                 ----^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:109:40
    |
109 | fn subdivideQuadSpline(q: &QuadSpline, mut t: f64) -> Vec<QuadSpline> {
    |                                        ----^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:120:38
    |
120 | fn subdivideQuadCurve(q: &QuadCurve, mut t: f64) -> Vec<QuadCurve> {
    |                                      ----^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:121:9
    |
121 |     let mut xs: Vec<QuadSpline> = subdivideQuadSpline(&q.x, t);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:122:9
    |
122 |     let mut ys: Vec<QuadSpline> = subdivideQuadSpline(&q.y, t);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:123:9
    |
123 |     let mut u: QuadCurve = QuadCurve {x: xs[0 as usize].clone(), y: ys[0 as usize].clone()};
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:124:9
    |
124 |     let mut v: QuadCurve = QuadCurve {x: xs[1 as usize].clone(), y: ys[1 as usize].clone()};
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:17
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:31
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                               ----^^^
    |                               |
    |                               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:45
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                             ----^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:59
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                           ----^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:73
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                                         ----^^^
    |                                                                         |
    |                                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:87
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                                                       ----^^^
    |                                                                                       |
    |                                                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:101
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                                                                     ----^^^
    |                                                                                                     |
    |                                                                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:128:115
    |
128 | fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                                                                                   ----^^^
    |                                                                                                                   |
    |                                                                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:161:23
    |
161 | fn seemsToBeDuplicate(mut pts: Vec<Point>, xy: &Point, mut spacing: f64) -> bool {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:161:56
    |
161 | fn seemsToBeDuplicate(mut pts: Vec<Point>, xy: &Point, mut spacing: f64) -> bool {
    |                                                        ----^^^^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:209:9
    |
209 |     let mut inters: Vec<Point> = findIntersects(&p, &q, tol, spacing);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: aborting due to 10 previous errors; 54 warnings emitted

Some errors have detailed explanations: E0106, E0308, E0658.
For more information about an error, try `rustc --explain E0106`.
