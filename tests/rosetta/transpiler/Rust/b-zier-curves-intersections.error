error[E0106]: missing lifetime specifier
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:162:77
    |
162 |     fn testIntersect(p: &QuadCurve, q: &QuadCurve, mut tol: f64) -> HashMap<&str, bool> {
    |                         ----------     ----------                           ^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `p` or `q`
help: consider introducing a named lifetime parameter
    |
162 |     fn testIntersect<'a>(p: &'a QuadCurve, q: &'a QuadCurve, mut tol: f64) -> HashMap<&'a str, bool> {
    |                     ++++     ++                ++                                      ++

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:109:2
    |
109 | };
    |  ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:115:2
    |
115 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:121:2
    |
121 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:131:2
    |
131 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:141:2
    |
141 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:151:2
    |
151 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:158:2
    |
158 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:161:2
    |
161 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:189:2
    |
189 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:200:2
    |
200 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:230:2
    |
230 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:243:2
    |
243 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:105:8
    |
105 |     if (x < 0.0) {
    |        ^       ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
105 -     if (x < 0.0) {
105 +     if x < 0.0 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:111:8
    |
111 |     if (a > b) {
    |        ^     ^
    |
help: remove these parentheses
    |
111 -     if (a > b) {
111 +     if a > b {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:117:8
    |
117 |     if (a < b) {
    |        ^     ^
    |
help: remove these parentheses
    |
117 -     if (a < b) {
117 +     if a < b {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:124:8
    |
124 |     if (b > m) {
    |        ^     ^
    |
help: remove these parentheses
    |
124 -     if (b > m) {
124 +     if b > m {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:127:8
    |
127 |     if (c > m) {
    |        ^     ^
    |
help: remove these parentheses
    |
127 -     if (c > m) {
127 +     if c > m {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:134:8
    |
134 |     if (b < m) {
    |        ^     ^
    |
help: remove these parentheses
    |
134 -     if (b < m) {
134 +     if b < m {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:137:8
    |
137 |     if (c < m) {
    |        ^     ^
    |
help: remove these parentheses
    |
137 -     if (c < m) {
137 +     if c < m {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:143:18
    |
143 |     let s: f64 = (1.0 - t);
    |                  ^       ^
    |
help: remove these parentheses
    |
143 -     let s: f64 = (1.0 - t);
143 +     let s: f64 = 1.0 - t;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:146:12
    |
146 |     u.c1 = ((s * q.c0) + (t * q.c1));
    |            ^                       ^
    |
help: remove these parentheses
    |
146 -     u.c1 = ((s * q.c0) + (t * q.c1));
146 +     u.c1 = (s * q.c0) + (t * q.c1);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:147:12
    |
147 |     v.c1 = ((s * q.c1) + (t * q.c2));
    |            ^                       ^
    |
help: remove these parentheses
    |
147 -     v.c1 = ((s * q.c1) + (t * q.c2));
147 +     v.c1 = (s * q.c1) + (t * q.c2);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:148:12
    |
148 |     u.c2 = ((s * u.c1) + (t * v.c1));
    |            ^                       ^
    |
help: remove these parentheses
    |
148 -     u.c2 = ((s * u.c1) + (t * v.c1));
148 +     u.c2 = (s * u.c1) + (t * v.c1);
    |

warning: unnecessary parentheses around `return` value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:160:12
    |
160 |     return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1))
    |            ^                                                                ^
    |
help: remove these parentheses
    |
160 -     return ((((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1))
160 +     return (((xb0 <= xa1) && (xa0 <= xb1)) && (yb0 <= ya1)) && (ya0 <= yb1)
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:178:12
    |
178 |         if ((xmax - xmin) <= tol) {
    |            ^                    ^
    |
help: remove these parentheses
    |
178 -         if ((xmax - xmin) <= tol) {
178 +         if (xmax - xmin) <= tol {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:181:16
    |
181 |             if ((ymax - ymin) <= tol) {
    |                ^                    ^
    |
help: remove these parentheses
    |
181 -             if ((ymax - ymin) <= tol) {
181 +             if (ymax - ymin) <= tol {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:183:27
    |
183 |                 inter.x = (0.5 * (xmin + xmax));
    |                           ^                   ^
    |
help: remove these parentheses
    |
183 -                 inter.x = (0.5 * (xmin + xmax));
183 +                 inter.x = 0.5 * (xmin + xmax);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:184:27
    |
184 |                 inter.y = (0.5 * (ymin + ymax));
    |                           ^                   ^
    |
help: remove these parentheses
    |
184 -                 inter.y = (0.5 * (ymin + ymax));
184 +                 inter.y = 0.5 * (ymin + ymax);
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:192:11
    |
192 |     while (i < (pts.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
192 -     while (i < (pts.len() as i64)) {
192 +     while i < (pts.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:194:12
    |
194 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |            ^                                                                  ^
    |
help: remove these parentheses
    |
194 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
194 +         if (absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:194:19
    |
194 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |                   ^           ^
    |
help: remove these parentheses
    |
194 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
194 +         if ((absf(pt.x - xy.x) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:194:54
    |
194 |         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
    |                                                      ^           ^
    |
help: remove these parentheses
    |
194 -         if ((absf((pt.x - xy.x)) < spacing) && (absf((pt.y - xy.y)) < spacing)) {
194 +         if ((absf((pt.x - xy.x)) < spacing) && (absf(pt.y - xy.y) < spacing)) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:197:13
    |
197 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
197 -         i = (i + 1);
197 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:204:11
    |
204 |     while ((workload.len() as i64) > 0) {
    |           ^                           ^
    |
help: remove these parentheses
    |
204 -     while ((workload.len() as i64) > 0) {
204 +     while (workload.len() as i64) > 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:205:19
    |
205 |         let idx = ((workload.len() as i64) - 1);
    |                   ^                           ^
    |
help: remove these parentheses
    |
205 -         let idx = ((workload.len() as i64) - 1);
205 +         let idx = (workload.len() as i64) - 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:235:24
    |
235 |     let spacing: f64 = (tol * 10.0);
    |                        ^          ^
    |
help: remove these parentheses
    |
235 -     let spacing: f64 = (tol * 10.0);
235 +     let spacing: f64 = tol * 10.0;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:238:11
    |
238 |     while (i < (inters.len() as i64)) {
    |           ^                         ^
    |
help: remove these parentheses
    |
238 -     while (i < (inters.len() as i64)) {
238 +     while i < (inters.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:241:13
    |
241 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
241 -         i = (i + 1);
241 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:247:28
    |
247 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
247 -     let duration_us: i64 = ((_end - _start) / 1000);
247 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:248:29
    |
248 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
248 -     let memory_bytes: i64 = (_end_mem - _start_mem);
248 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:188:125
    |
188 |     return HashMap::from([(String::from("exclude"), exclude), (String::from("accept"), accept), (String::from("intersect"), inter)])
    |                                                                                                                             ^^^^^ expected `bool`, found `Point`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:203:62
    |
203 |     let mut workload: Vec<HashMap<String, QuadCurve>> = vec![HashMap::from([(String::from("p"), p), (String::from("q"), q)])];
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, QuadCurve>`, found `HashMap<String, &QuadCurve>`
    |
    = note: expected struct `HashMap<_, QuadCurve>`
               found struct `HashMap<_, &QuadCurve>`

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:208:68
    |
208 |         let mut res: HashMap<&str, bool> = testIntersect(&work["p".as_str()].clone(), &work["q".as_str()].clone(), tol);
    |                                                                    ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:208:97
    |
208 |         let mut res: HashMap<&str, bool> = testIntersect(&work["p".as_str()].clone(), &work["q".as_str()].clone(), tol);
    |                                                                                                 ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:209:40
    |
209 |         let excl: bool = res["exclude".as_str()];
    |                                        ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:210:38
    |
210 |         let acc: bool = res["accept".as_str()];
    |                                      ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:211:43
    |
211 |         let inter: bool = res["intersect".as_str()];
    |                                           ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:217:71
    |
217 |             let mut ps: Vec<QuadCurve> = subdivideQuadCurve(&work["p".as_str()].clone(), 0.5);
    |                                                                       ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:218:71
    |
218 |             let mut qs: Vec<QuadCurve> = subdivideQuadCurve(&work["q".as_str()].clone(), 0.5);
    |                                                                       ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:104:13
    |
104 |     fn absf(mut x: f64) -> f64 {
    |             ----^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:110:13
    |
110 |     fn maxf(mut a: f64, mut b: f64) -> f64 {
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:110:25
    |
110 |     fn maxf(mut a: f64, mut b: f64) -> f64 {
    |                         ----^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:116:13
    |
116 |     fn minf(mut a: f64, mut b: f64) -> f64 {
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:116:25
    |
116 |     fn minf(mut a: f64, mut b: f64) -> f64 {
    |                         ----^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:122:13
    |
122 |     fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:122:25
    |
122 |     fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |                         ----^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:122:37
    |
122 |     fn max3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:132:13
    |
132 |     fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:132:25
    |
132 |     fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |                         ----^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:132:37
    |
132 |     fn min3(mut a: f64, mut b: f64, mut c: f64) -> f64 {
    |                                     ----^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:142:44
    |
142 |     fn subdivideQuadSpline(q: &QuadSpline, mut t: f64) -> Vec<QuadSpline> {
    |                                            ----^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:152:42
    |
152 |     fn subdivideQuadCurve(q: &QuadCurve, mut t: f64) -> Vec<QuadCurve> {
    |                                          ----^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:153:9
    |
153 |     let mut xs: Vec<QuadSpline> = subdivideQuadSpline(&q.x, t);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:154:9
    |
154 |     let mut ys: Vec<QuadSpline> = subdivideQuadSpline(&q.y, t);
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:155:9
    |
155 |     let mut u: QuadCurve = QuadCurve {x: xs[0 as usize].clone(), y: ys[0 as usize].clone()};
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:156:9
    |
156 |     let mut v: QuadCurve = QuadCurve {x: xs[1 as usize].clone(), y: ys[1 as usize].clone()};
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:21
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                     ----^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:35
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                   ----^^^
    |                                   |
    |                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:49
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                                 ----^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:63
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                                               ----^^^
    |                                                               |
    |                                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:77
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                                                             ----^^^
    |                                                                             |
    |                                                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:91
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                                                                           ----^^^
    |                                                                                           |
    |                                                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:105
    |
159 |     fn rectsOverlap(mut xa0: f64, mut ya0: f64, mut xa1: f64, mut ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bo...
    |                                                                                                         ----^^^
    |                                                                                                         |
    |                                                                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:159:119
    |
159 | ... ya1: f64, mut xb0: f64, mut yb0: f64, mut xb1: f64, mut yb1: f64) -> bool {
    |                                                         ----^^^
    |                                                         |
    |                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:190:27
    |
190 |     fn seemsToBeDuplicate(mut pts: Vec<Point>, xy: &Point, mut spacing: f64) -> bool {
    |                           ----^^^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:190:60
    |
190 |     fn seemsToBeDuplicate(mut pts: Vec<Point>, xy: &Point, mut spacing: f64) -> bool {
    |                                                            ----^^^^^^^
    |                                                            |
    |                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/b-zier-curves-intersections.rs:236:9
    |
236 |     let mut inters: Vec<Point> = findIntersects(&p, &q, tol, spacing);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

error: aborting due to 10 previous errors; 68 warnings emitted

Some errors have detailed explanations: E0106, E0308, E0658.
For more information about an error, try `rustc --explain E0106`.
