// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:55 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::process::{Command, Stdio};
use std::io::Write;
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _md5_hex(s: &str) -> String {
    let mut child = Command::new("md5sum")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn().unwrap();
    {
        let mut stdin = child.stdin.take().unwrap();
        stdin.write_all(s.as_bytes()).unwrap();
    }
    let out = child.wait_with_output().unwrap();
    let hex = String::from_utf8_lossy(&out.stdout);
    hex.split_whitespace().next().unwrap_or("").to_string()
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    for pair in &vec![vec![String::from("d41d8cd98f00b204e9800998ecf8427e"), String::from("")], vec![String::from("0cc175b9c0f1b6a831c399e269772661"), String::from("a")], vec![String::from("900150983cd24fb0d6963f7d28e17f72"), String::from("abc")], vec![String::from("f96b697d7cb7938d525a2f31aaf161d0"), String::from("message digest")], vec![String::from("c3fcd3d76192e4007dfb496cca67e13b"), String::from("abcdefghijklmnopqrstuvwxyz")], vec![String::from("d174ab98d277d9f5a5611c2c9f419d9f"), String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")], vec![String::from("57edf4a22be3c955ac49da2e2107b67a"), format!("{}{}", "12345678901234567890", "123456789012345678901234567890123456789012345678901234567890")], vec![String::from("e38ca1d920c4b8b8d3946b2c72f01680"), String::from("The quick brown fox jumped over the lazy dog's back")]] {
        let mut sum: String = _md5_hex(pair[1 as usize].as_str()).clone();
        if (sum.as_str() != pair[0 as usize].as_str()) {
            println!("{}", "MD5 fail");
            println!("{}", format!("{} {}", "  for string,", pair[1 as usize]).trim_end());
            println!("{}", format!("{} {}", "  expected:  ", pair[0 as usize]).trim_end());
            println!("{}", format!("{} {}", "  got:       ", sum).trim_end());
        }
    }
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
