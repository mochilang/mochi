// Generated by Mochi transpiler v0.10.55 on 2025-08-02 23:08 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            let mut parts = s.split_whitespace();
            parts.next();
            if let Some(rss) = parts.next() {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn randOrder(mut seed: i64, mut n: i64) -> Vec<i64> {
    let mut next: i64 = (((seed * 1664525) + 1013904223) % 2147483647);
    return vec![next, (next % n)]
};
    fn randChaos(mut seed: i64, mut n: i64) -> Vec<i64> {
    let mut next: i64 = (((seed * 1103515245) + 12345) % 2147483647);
    return vec![next, (next % n)]
};
    fn mochi_main() {
    let mut nBuckets: i64 = 10;
    let mut initialSum: i64 = 1000;
    let mut buckets: Vec<i64> = vec![];
    for i in 0..nBuckets {
        buckets = { let mut _v = buckets.clone(); _v.push(0); _v };
    }
    let mut i: i64 = nBuckets;
    let mut dist: i64 = initialSum;
    while (i > 0) {
        let mut v: i64 = (dist / i);
        i = (i - 1);
        buckets[i as usize] = v;
        dist = (dist - v);
    }
    let mut tc0: i64 = 0;
    let mut tc1: i64 = 0;
    let mut total: i64 = 0;
    let mut nTicks: i64 = 0;
    let mut seedOrder: i64 = 1;
    let mut seedChaos: i64 = 2;
    println!("{}", "sum  ---updates---    mean  buckets");
    let mut t: i64 = 0;
    while (t < 5) {
        let mut r: Vec<i64> = randOrder(seedOrder, nBuckets);
        seedOrder = r[0 as usize];
        let mut b1: i64 = r[1 as usize];
        let mut b2: i64 = ((b1 + 1) % nBuckets);
        let mut v1: i64 = buckets[b1 as usize];
        let mut v2: i64 = buckets[b2 as usize];
        if (v1 > v2) {
            let mut a: i64 = ((v1 - v2) / 2);
            if (a > buckets[b1 as usize]) {
                a = buckets[b1 as usize];
            }
            buckets[b1 as usize] = (buckets[b1 as usize] - a);
            buckets[b2 as usize] = (buckets[b2 as usize] + a);
        } else {
            let mut a: i64 = ((v2 - v1) / 2);
            if (a > buckets[b2 as usize]) {
                a = buckets[b2 as usize];
            }
            buckets[b2 as usize] = (buckets[b2 as usize] - a);
            buckets[b1 as usize] = (buckets[b1 as usize] + a);
        }
        tc0 = (tc0 + 1);
        r = randChaos(seedChaos, nBuckets);
        seedChaos = r[0 as usize];
        b1 = r[1 as usize];
        b2 = ((b1 + 1) % nBuckets);
        r = randChaos(seedChaos, (buckets[b1 as usize] + 1));
        seedChaos = r[0 as usize];
        let mut amt: i64 = r[1 as usize];
        if (amt > buckets[b1 as usize]) {
            amt = buckets[b1 as usize];
        }
        buckets[b1 as usize] = (buckets[b1 as usize] - amt);
        buckets[b2 as usize] = (buckets[b2 as usize] + amt);
        tc1 = (tc1 + 1);
        let mut sum: i64 = 0;
        let mut idx: i64 = 0;
        while (idx < nBuckets) {
            sum = (sum + buckets[idx as usize]);
            idx = (idx + 1);
        }
        total = ((total + tc0) + tc1);
        nTicks = (nTicks + 1);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", sum.to_string(), " "), tc0.to_string()), " "), tc1.to_string()), " "), (total / nTicks).to_string()), "  "), format!("{:?}", buckets)));
        tc0 = 0;
        tc1 = 0;
        t = (t + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _end_mem;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
