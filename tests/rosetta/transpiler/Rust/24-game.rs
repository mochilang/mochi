// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn abs(x: f64) -> f64 { x.abs() }
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn randDigit() -> i64 {
    return ((_now() % 9) + 1)
};
    fn mochi_main() {
    let mut digits = vec![];
    for i in 0..4 {
        digits = { let mut _v = digits.clone(); _v.push(randDigit()); _v };
    }
    let mut numstr: String = String::from("").clone();
    for i in 0..4 {
        numstr = format!("{}{}", numstr, digits[i as usize].to_string());
    }
    println!("{}", format!("{}{}", format!("{}{}", "Your numbers: ", numstr), "\n"));
    println!("{}", "Enter RPN: ");
    let mut expr: String = input().clone();
    if ((expr.len() as i64) != 7) {
        println!("{}", "invalid. expression length must be 7. (4 numbers, 3 operators, no spaces)");
        return
    }
    let mut stack = vec![];
    let mut i: i64 = 0;
    let mut valid: bool = true;
    while (i < (expr.len() as i64)) {
        let mut ch: String = { let tmp = &expr; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if ((ch.as_str() >= "0") && (ch.as_str() <= "9")) {
            if ((digits.len() as i64) == 0) {
                println!("{}", "too many numbers.");
                return
            }
            let mut j: i64 = 0;
            while (digits[j as usize] != ({ let n: i64 = ch.parse().unwrap(); n } - { let n: i64 = "0".parse().unwrap(); n })) {
                j = (j + 1);
                if (j == (digits.len() as i64)) {
                    println!("{}", "wrong numbers.");
                    return
                }
            }
            digits = { let mut v = digits[0 as usize..j as usize].to_vec().clone(); v.extend(digits[(j + 1) as usize..].to_vec()); v };
            stack = { let mut _v = stack.clone(); _v.push((({ let n: i64 = ch.parse().unwrap(); n } - { let n: i64 = "0".parse().unwrap(); n }) as f64)); _v };
        } else {
            if ((stack.len() as i64) < 2) {
                println!("{}", "invalid expression syntax.");
                valid = false;
                break
            }
            let mut b: f64 = stack[((stack.len() as i64) - 1) as usize];
            let mut a: f64 = stack[((stack.len() as i64) - 2) as usize];
            if (ch.as_str() == "+") {
                { let _i = (stack.len() as i64) - 2; stack[_i as usize] = (a + b); };
            } else if (ch.as_str() == "-") {
                { let _i = (stack.len() as i64) - 2; stack[_i as usize] = (a - b); };
            } else if (ch.as_str() == "*") {
                { let _i = (stack.len() as i64) - 2; stack[_i as usize] = (a * b); };
            } else if (ch.as_str() == "/") {
                { let _i = (stack.len() as i64) - 2; stack[_i as usize] = (a / b); };
            } else {
                println!("{}", format!("{}{}", ch, " invalid."));
                valid = false;
                break
            }
            stack = stack[0 as usize..((stack.len() as i64) - 1) as usize].to_vec();
        }
        i = (i + 1);
    }
    if valid {
        if (abs((stack[0 as usize] - 24.0)) > 0.000001) {
            println!("{}", format!("{}{}", format!("{}{}", "incorrect. ", stack[0 as usize].to_string()), " != 24"));
        } else {
            println!("{}", "correct.");
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
