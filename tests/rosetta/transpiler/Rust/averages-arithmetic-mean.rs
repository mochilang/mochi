// Generated by Mochi transpiler v0.10.55 on 2025-08-02 23:36 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct Map {
    ok: bool,
    mean: f64,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, ", ")?;
        write!(f, "\"mean\": {}", self.mean)?;
        write!(f, "}}")
    }
}

fn mean(v: &mut Vec<f64>) -> Map {
    if ((v.len() as i64) == 0) {
        return Map {ok: false, mean: Default::default()}
    }
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        sum = (sum + v[i as usize]);
        i = (i + 1);
    }
    return Map {ok: true, mean: (sum / ((v.len() as i64) as f64))}
}

fn mochi_main() {
    let mut sets: Vec<Vec<f64>> = vec![vec![], vec![3.0, 1.0, 4.0, 1.0, 5.0, 9.0], vec![100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -100000000000000000000.0], vec![10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11], vec![10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0]];
    for v in sets.iter_mut() {
        println!("{}", format!("{}{}", "Vector: ", format!("{:?}", v)));
        let mut r: Map = mean(v);
        if r.ok {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Mean of ", (v.len() as i64).to_string()), " numbers is "), r.mean.to_string()));
        } else {
            println!("{}", "Mean undefined");
        }
        println!("{}", "");
    }
}

fn main() {
    mochi_main();
}
