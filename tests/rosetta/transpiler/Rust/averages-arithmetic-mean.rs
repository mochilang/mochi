// Generated by Mochi transpiler v0.10.55 on 2025-08-02 23:08 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            let mut parts = s.split_whitespace();
            parts.next();
            if let Some(rss) = parts.next() {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    ok: bool,
    mean: f64,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, ", ")?;
        write!(f, "\"mean\": {}", self.mean)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn mean(v: &mut Vec<f64>) -> Map {
    if ((v.len() as i64) == 0) {
        return Map {ok: false, mean: Default::default()}
    }
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (v.len() as i64)) {
        sum = (sum + v[i as usize]);
        i = (i + 1);
    }
    return Map {ok: true, mean: (sum / ((v.len() as i64) as f64))}
};
    fn mochi_main() {
    let mut sets: Vec<Vec<f64>> = vec![vec![], vec![3.0, 1.0, 4.0, 1.0, 5.0, 9.0], vec![100000000000000000000.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -100000000000000000000.0], vec![10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11], vec![10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0]];
    for v in sets.iter_mut() {
        println!("{}", format!("{}{}", "Vector: ", format!("{:?}", v)));
        let mut r: Map = mean(&mut v);
        if r.ok {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Mean of ", (v.len() as i64).to_string()), " numbers is "), r.mean.to_string()));
        } else {
            println!("{}", "Mean undefined");
        }
        println!("{}", "");
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _end_mem;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
