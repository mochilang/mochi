// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn padRight(s: &str, mut w: i64) -> String {
    let mut r: &str = s;
    while ((r.len() as i64) < w) {
        r = format!("{}{}", r, " ");
    }
    return r.to_string().clone()
};
    fn linearCombo(mut c: Vec<i64>) -> String {
    let mut out = String::from("");
    let mut i: i64 = 0;
    while (i < (c.len() as i64)) {
        let mut n: i64 = c[i as usize];
        if (n != 0) {
            let mut op = String::from("");
            if ((n < 0) && ((out.len() as i64) == 0)) {
                op = String::from("-");
            } else if (n < 0) {
                op = String::from(" - ");
            } else if ((n > 0) && ((out.len() as i64) == 0)) {
                op = String::from("");
            } else {
                op = String::from(" + ");
            }
            let mut av: i64 = n;
            if (av < 0) {
                av = -av;
            }
            let mut coeff = format!("{}{}", av.to_string(), "*");
            if (av == 1) {
                coeff = String::from("");
            }
            out = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", out, op), coeff), "e("), (i + 1).to_string()), ")");
        }
        i = (i + 1);
    }
    if ((out.len() as i64) == 0) {
        return String::from("0")
    }
    return out.clone()
};
    fn mochi_main() {
    let mut combos: Vec<Vec<i64>> = vec![vec![1, 2, 3], vec![0, 1, 2, 3], vec![1, 0, 3, 4], vec![1, 2, 0], vec![0, 0, 0], vec![0], vec![1, 1, 1], vec![-1, -1, -1], vec![-1, -2, 0, -3], vec![-1]];
    let mut idx: i64 = 0;
    while (idx < (combos.len() as i64)) {
        let mut c: Vec<i64> = combos[idx as usize].clone();
        let mut t = String::from("[");
        let mut j: i64 = 0;
        while (j < (c.len() as i64)) {
            t = format!("{}{}", t, c[j as usize].to_string());
            if (j < ((c.len() as i64) - 1)) {
                t = format!("{}{}", t, ", ");
            }
            j = (j + 1);
        }
        t = format!("{}{}", t, "]");
        let mut lc: String = linearCombo(c.clone()).clone();
        println!("{}", format!("{}{}", format!("{}{}", padRight(&t, 15), "  ->  "), lc));
        idx = (idx + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
