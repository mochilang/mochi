// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_x1: Vec<f64> = Vec::new();
static mut g_x2: Vec<f64> = Vec::new();
static mut g_x3: Vec<f64> = Vec::new();
fn main() {
    unsafe {
        g_x1 = vec![36.0, 40.0, 7.0, 39.0, 41.0, 15.0];
        g_x2 = vec![15.0, 6.0, 42.0, 41.0, 7.0, 36.0, 49.0, 40.0, 39.0, 47.0, 43.0];
        g_x3 = vec![0.14082834, 0.0974879, 1.73131507, 0.87636009, -1.95059594, 0.73438555, -0.03035726, 1.4667597, -0.74621349, -0.72588772, 0.6390516, 0.61501527, -0.9898378, -1.00447874, -0.62759469, 0.66206163, 1.04312009, -0.10305385, 0.75775634, 0.32566578];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn sortFloat(mut xs: Vec<f64>) -> Vec<f64> {
    let mut arr: Vec<f64> = xs;
    let mut n = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut t: f64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = t;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
        unsafe fn ceilf(mut x: f64) -> i64 {
    let mut i: i64 = int(x);
    if (x > (i as f64)) {
        return (i + 1)
    }
    return i
};
        unsafe fn fivenum(mut a: Vec<f64>) -> Vec<f64> {
    let mut arr: Vec<f64> = sortFloat(a.clone());
    let mut n = (arr.len() as i64);
    let mut half: i64 = ((n + 3) - ((n + 3) % 2));
    let mut n4: f64 = (((half / 2) as f64) / 2.0);
    let mut nf: f64 = (n as f64);
    let mut d: Vec<f64> = vec![1.0, n4, ((nf + 1.0) / 2.0), ((nf + 1.0) - n4), nf];
    let mut result: Vec<f64> = vec![];
    let mut idx: i64 = 0;
    while (idx < (d.len() as i64)) {
        let mut de: f64 = d[idx as usize];
        let mut fl: i64 = int((de - 1.0));
        let mut cl: i64 = ceilf((de - 1.0));
        result = { let mut _v = result.clone(); _v.push((0.5 * (arr[fl as usize] + arr[cl as usize]))); _v };
        idx = (idx + 1);
    }
    return result
};
        static mut g_x1: Vec<f64> = Vec::new();;
        static mut g_x2: Vec<f64> = Vec::new();;
        static mut g_x3: Vec<f64> = Vec::new();;
        println!("{}", format!("{:?}", fivenum(g_x1.clone().clone())));
        println!("{}", format!("{:?}", fivenum(g_x2.clone().clone())));
        println!("{}", format!("{:?}", fivenum(g_x3.clone().clone())));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
