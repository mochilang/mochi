// Generated by Mochi transpiler v0.10.52 on 2025-08-01 21:57 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_gregorianStr: Vec<String> = Vec::new();
static mut g_gregorian: Vec<i64> = Vec::new();
static mut g_republicanStr: Vec<String> = Vec::new();
static mut g_sansculotidesStr: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_gregorianStr = vec![String::from("January"), String::from("February"), String::from("March"), String::from("April"), String::from("May"), String::from("June"), String::from("July"), String::from("August"), String::from("September"), String::from("October"), String::from("November"), String::from("December")];
        g_gregorian = vec![31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        g_republicanStr = vec![String::from("Vendemiaire"), String::from("Brumaire"), String::from("Frimaire"), String::from("Nivose"), String::from("Pluviose"), String::from("Ventose"), String::from("Germinal"), String::from("Floreal"), String::from("Prairial"), String::from("Messidor"), String::from("Thermidor"), String::from("Fructidor")];
        g_sansculotidesStr = vec![String::from("Fete de la vertu"), String::from("Fete du genie"), String::from("Fete du travail"), String::from("Fete de l'opinion"), String::from("Fete des recompenses"), String::from("Fete de la Revolution")];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_gregorianStr: Vec<String> = Vec::new();;
        static mut g_gregorian: Vec<i64> = Vec::new();;
        static mut g_republicanStr: Vec<String> = Vec::new();;
        static mut g_sansculotidesStr: Vec<String> = Vec::new();;
        unsafe fn greLeap(mut year: i64) -> bool {
    let mut a: i64 = (year % 4);
    let mut b: i64 = (year % 100);
    let mut c: i64 = (year % 400);
    return ((a == 0) && ((b != 0) || (c == 0)))
};
        unsafe fn repLeap(mut year: i64) -> bool {
    let mut a: i64 = ((year + 1) % 4);
    let mut b: i64 = ((year + 1) % 100);
    let mut c: i64 = ((year + 1) % 400);
    return ((a == 0) && ((b != 0) || (c == 0)))
};
        unsafe fn greToDay(mut d: i64, mut m: i64, mut y: i64) -> i64 {
    let mut yy: i64 = y;
    let mut mm: i64 = m;
    if (mm < 3) {
        yy = (yy - 1);
        mm = (mm + 12);
    }
    return (((((((yy * 36525) / 100) - (yy / 100)) + (yy / 400)) + ((306 * (mm + 1)) / 10)) + d) - 654842)
};
        unsafe fn repToDay(mut d: i64, mut m: i64, mut y: i64) -> i64 {
    let mut dd: i64 = d;
    let mut mm: i64 = m;
    if (mm == 13) {
        mm = (mm - 1);
        dd = (dd + 30);
    }
    if repLeap(y) {
        dd = (dd - 1);
    }
    return (((((((365 * y) + ((y + 1) / 4)) - ((y + 1) / 100)) + ((y + 1) / 400)) + (30 * mm)) + dd) - 395)
};
        unsafe fn dayToGre(mut day: i64) -> Vec<i64> {
    let mut y: i64 = ((day * 100) / 36525);
    let mut d: i64 = ((day - ((y * 36525) / 100)) + 21);
    y = (y + 1792);
    d = (((d + (y / 100)) - (y / 400)) - 13);
    let mut m: i64 = 8;
    while (d > g_gregorian.clone()[m as usize]) {
        d = (d - g_gregorian.clone()[m as usize]);
        m = (m + 1);
        if (m == 12) {
            m = 0;
            y = (y + 1);
            if greLeap(y) {
                g_gregorian[1 as usize] = 29;
            } else {
                g_gregorian[1 as usize] = 28;
            }
        }
    }
    m = (m + 1);
    return vec![d, m, y]
};
        unsafe fn dayToRep(mut day: i64) -> Vec<i64> {
    let mut y: i64 = (((day - 1) * 100) / 36525);
    if repLeap(y) {
        y = (y - 1);
    }
    let mut d: i64 = ((((day - (((y + 1) * 36525) / 100)) + 365) + ((y + 1) / 100)) - ((y + 1) / 400));
    y = (y + 1);
    let mut m: i64 = 1;
    let mut sc: i64 = 5;
    if repLeap(y) {
        sc = 6;
    }
    while (d > 30) {
        d = (d - 30);
        m = (m + 1);
        if (m == 13) {
            if (d > sc) {
                d = (d - sc);
                m = 1;
                y = (y + 1);
                sc = 5;
                if repLeap(y) {
                    sc = 6;
                }
            }
        }
    }
    return vec![d, m, y]
};
        unsafe fn formatRep(mut d: i64, mut m: i64, mut y: i64) -> String {
    if (m == 13) {
        return format!("{}{}", format!("{}{}", g_sansculotidesStr.clone()[(d - 1) as usize].clone(), " "), y.to_string())
    }
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", d.to_string(), " "), g_republicanStr.clone()[(m - 1) as usize].clone()), " "), y.to_string()).to_string().clone()
};
        unsafe fn formatGre(mut d: i64, mut m: i64, mut y: i64) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", d.to_string(), " "), g_gregorianStr.clone()[(m - 1) as usize].clone()), " "), y.to_string()).to_string().clone()
};
        let mut rep: Vec<i64> = dayToRep(greToDay(20, 5, 1795));
        println!("{}", formatRep(rep[0 as usize], rep[1 as usize], rep[2 as usize]));
        let mut gre: Vec<i64> = dayToGre(repToDay(1, 9, 3));
        println!("{}", formatGre(gre[0 as usize], gre[1 as usize], gre[2 as usize]));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
