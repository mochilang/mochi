// Generated by Mochi transpiler v0.10.41 on 2025-07-27 10:59 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn mochi_main() {
    println!("{}", "Diagram after trimming whitespace and removal of blank lines:\n");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|                      ID                       |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|                    QDCOUNT                    |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|                    ANCOUNT                    |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|                    NSCOUNT                    |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "|                    ARCOUNT                    |");
    println!("{}", "+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
    println!("{}", "\nDecoded:\n");
    println!("{}", "Name     Bits  Start  End");
    println!("{}", "=======  ====  =====  ===");
    println!("{}", "ID        16      0    15");
    println!("{}", "QR         1     16    16");
    println!("{}", "Opcode     4     17    20");
    println!("{}", "AA         1     21    21");
    println!("{}", "TC         1     22    22");
    println!("{}", "RD         1     23    23");
    println!("{}", "RA         1     24    24");
    println!("{}", "Z          3     25    27");
    println!("{}", "RCODE      4     28    31");
    println!("{}", "QDCOUNT   16     32    47");
    println!("{}", "ANCOUNT   16     48    63");
    println!("{}", "NSCOUNT   16     64    79");
    println!("{}", "ARCOUNT   16     80    95");
    println!("{}", "\nTest string in hex:");
    println!("{}", "78477bbf5496e12e1bf169a4");
    println!("{}", "\nTest string in binary:");
    println!("{}", "011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100");
    println!("{}", "\nUnpacked:\n");
    println!("{}", "Name     Size  Bit pattern");
    println!("{}", "=======  ====  ================");
    println!("{}", "ID        16   0111100001000111");
    println!("{}", "QR         1   0");
    println!("{}", "Opcode     4   1111");
    println!("{}", "AA         1   0");
    println!("{}", "TC         1   1");
    println!("{}", "RD         1   1");
    println!("{}", "RA         1   1");
    println!("{}", "Z          3   011");
    println!("{}", "RCODE      4   1111");
    println!("{}", "QDCOUNT   16   0101010010010110");
    println!("{}", "ANCOUNT   16   1110000100101110");
    println!("{}", "NSCOUNT   16   0001101111110001");
    println!("{}", "ARCOUNT   16   0110100110100100");
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
