// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn newTerm(mut a: i64, mut b: i64) -> HashMap<String, i64> {
    return HashMap::from([(String::from("a"), a), (String::from("b"), b)])
};
    fn cfSqrt2(mut nTerms: i64) -> Vec<HashMap<String, i64>> {
    let mut f: Vec<HashMap<String, i64>> = vec![];
    let mut n: i64 = 0;
    while (n < nTerms) {
        f = { let mut _v = f.clone(); _v.push(newTerm(2, 1)); _v };
        n = (n + 1);
    }
    if (nTerms > 0) {
        f[0 as usize].insert(String::from("a"), 1);
    }
    return f
};
    fn cfNap(mut nTerms: i64) -> Vec<HashMap<String, i64>> {
    let mut f: Vec<HashMap<String, i64>> = vec![];
    let mut n: i64 = 0;
    while (n < nTerms) {
        f = { let mut _v = f.clone(); _v.push(newTerm(n, (n - 1))); _v };
        n = (n + 1);
    }
    if (nTerms > 0) {
        f[0 as usize].insert(String::from("a"), 2);
    }
    if (nTerms > 1) {
        f[1 as usize].insert(String::from("b"), 1);
    }
    return f
};
    fn cfPi(mut nTerms: i64) -> Vec<HashMap<String, i64>> {
    let mut f: Vec<HashMap<String, i64>> = vec![];
    let mut n: i64 = 0;
    while (n < nTerms) {
        let mut g: i64 = ((2 * n) - 1);
        f = { let mut _v = f.clone(); _v.push(newTerm(6, (g * g))); _v };
        n = (n + 1);
    }
    if (nTerms > 0) {
        f[0 as usize].insert(String::from("a"), 3);
    }
    return f
};
    fn real(mut f: Vec<HashMap<String, i64>>) -> f64 {
    let mut r: f64 = 0.0;
    let mut i = ((f.len() as i64) - 1);
    while (i > 0) {
        r = ((f[i as usize].clone()["b"] as f64) / ((f[i as usize].clone()["a"] as f64) + r));
        i = (i - 1);
    }
    if ((f.len() as i64) > 0) {
        r = (r + (f[0 as usize].clone()["a"] as f64));
    }
    return r
};
    fn mochi_main() {
    println!("{}", format!("{}{}", "sqrt2: ", real(cfSqrt2(20)).to_string()));
    println!("{}", format!("{}{}", "nap:   ", real(cfNap(20)).to_string()));
    println!("{}", format!("{}{}", "pi:    ", real(cfPi(20)).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
