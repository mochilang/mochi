// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Point {
    x: i64,
    y: i64,
}
impl std::fmt::Display for Point {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn absi(mut x: i64) -> i64 {
    if (x < 0) {
        return -x
    }
    return x
};
    fn bresenham(mut x0: i64, mut y0: i64, mut x1: i64, mut y1: i64) -> Vec<Point> {
    let mut dx: i64 = absi((x1 - x0));
    let mut dy: i64 = absi((y1 - y0));
    let mut sx: i64 = -1;
    if (x0 < x1) {
        sx = 1;
    }
    let mut sy: i64 = -1;
    if (y0 < y1) {
        sy = 1;
    }
    let mut err: i64 = (dx - dy);
    let mut pts: Vec<Point> = vec![];
    while true {
        pts = { let mut _v = pts.clone(); _v.push(Point {x: x0, y: y0}); _v };
        if ((x0 == x1) && (y0 == y1)) {
            break
        }
        let mut e2: i64 = (2 * err);
        if (e2 > -dy) {
            err = (err - dy);
            x0 = (x0 + sx);
        }
        if (e2 < dx) {
            err = (err + dx);
            y0 = (y0 + sy);
        }
    }
    return pts
};
    fn mochi_main() {
    let mut pts: Vec<Point> = bresenham(0, 0, 6, 4);
    let mut i: i64 = 0;
    while (i < (pts.len() as i64)) {
        let p: Point = pts[i as usize].clone();
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", p.x.to_string()), ","), p.y.to_string()), ")"));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
