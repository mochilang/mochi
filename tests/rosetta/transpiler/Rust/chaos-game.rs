// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_width: i64 = 0;
static mut g_iterations: i64 = 0;
static mut g_grid: Vec<Vec<String>> = Vec::new();
static mut g_y: i64 = 0;
static mut g_seed: i64 = 0;
static mut g_px: i64 = 0;
static mut g_py: i64 = 0;
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_width = 60;
        g_iterations = 5000;
        g_grid = vec![];
        g_y = 0;
        g_seed = 1;
        g_px = (g_width / 2);
        g_py = (height / 2);
        g_i = 0;
                let _start: i64 = _now();
        static mut g_width: i64 = 0;;
        let mut height: i64 = (((g_width as f64) * 0.86602540378) as i64);
        static mut g_iterations: i64 = 0;;
        static mut g_grid: Vec<Vec<String>> = Vec::new();;
        static mut g_y: i64 = 0;;
        while (g_y < height) {
            let mut line: Vec<String> = vec![];
            let mut x: i64 = 0;
            while (x < g_width) {
                line = { let mut _v = line.clone(); _v.push(" ".to_string()); _v };
                x = (x + 1);
            }
            g_grid = { let mut _v = g_grid.clone().clone(); _v.push(line.clone()); _v };
            g_y = (g_y + 1);
        }
        unsafe fn randInt(mut s: i64, mut n: i64) -> Vec<i64> {
    let mut next: i64 = (((s * 1664525) + 1013904223) % 2147483647);
    return vec![next, (next % n)]
};
        static mut g_seed: i64 = 0;;
        let mut vertices: Vec<Vec<i64>> = vec![vec![0, (height - 1)], vec![(g_width - 1), (height - 1)], vec![(g_width / 2), 0]];
        static mut g_px: i64 = 0;;
        static mut g_py: i64 = 0;;
        static mut g_i: i64 = 0;;
        while (g_i < g_iterations) {
            let mut r: Vec<i64> = randInt(g_seed, 3);
            g_seed = r[0 as usize];
            let mut idx: i64 = r[1 as usize];
            let mut v: Vec<i64> = vertices[idx as usize].clone();
            g_px = ((g_px + v[0 as usize]) / 2);
            g_py = ((g_py + v[1 as usize]) / 2);
            if ((((g_px >= 0) && (g_px < g_width)) && (g_py >= 0)) && (g_py < height)) {
                g_grid[g_py as usize][g_px as usize] = String::from("*");
            }
            g_i = (g_i + 1);
        }
        g_y = 0;
        while (g_y < height) {
            let mut line: String = String::from("").clone();
            let mut x: i64 = 0;
            while (x < g_width) {
                line = format!("{}{}", line, g_grid.clone()[g_y as usize].clone()[x as usize].clone());
                x = (x + 1);
            }
            println!("{}", line);
            g_y = (g_y + 1);
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
