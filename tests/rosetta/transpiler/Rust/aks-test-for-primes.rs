// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn poly(mut p: i64) -> String {
    let mut s: String = String::from("");
    let mut coef: i64 = 1;
    let mut i: i64 = p;
    if (coef != 1) {
        s = format!("{}{}", s, coef.to_string());
    }
    while (i > 0) {
        s = format!("{}{}", s, "x");
        if (i != 1) {
            s = format!("{}{}", format!("{}{}", s, "^"), i.to_string());
        }
        coef = ((coef * i) / ((p - i) + 1));
        let mut d: i64 = coef;
        if (((p - (i - 1)) % 2) == 1) {
            d = -d;
        }
        if (d < 0) {
            s = format!("{}{}", format!("{}{}", s, " - "), (-d).to_string());
        } else {
            s = format!("{}{}", format!("{}{}", s, " + "), d.to_string());
        }
        i = (i - 1);
    }
    if (s.as_str() == "") {
        s = String::from("1");
    }
    return s.clone()
};
    fn aks(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    let mut c: i64 = n;
    let mut i: i64 = 1;
    while (i < n) {
        if ((c % n) != 0) {
            return false
        }
        c = ((c * (n - i)) / (i + 1));
        i = (i + 1);
    }
    return true
};
    fn mochi_main() {
    let mut p: i64 = 0;
    while (p <= 7) {
        println!("{}", format!("{}{}", format!("{}{}", p.to_string(), ":  "), poly(p)));
        p = (p + 1);
    }
    let mut first: bool = true;
    p = 2;
    let mut line: String = String::from("");
    while (p < 50) {
        if aks(p) {
            if first {
                line = format!("{}{}", line, p.to_string());
                first = false;
            } else {
                line = format!("{}{}", format!("{}{}", line, " "), p.to_string());
            }
        }
        p = (p + 1);
    }
    println!("{}", line);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
