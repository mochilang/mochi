warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:153:2
    |
153 | };
    |  ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:165:2
    |
165 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:174:2
    |
174 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:183:2
    |
183 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:186:2
    |
186 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:189:2
    |
189 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:196:2
    |
196 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:199:2
    |
199 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:214:2
    |
214 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:217:2
    |
217 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:231:2
    |
231 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:232:112
    |
232 |         static mut g_house1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:233:112
    |
233 |         static mut g_house2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:234:117
    |
234 |         static mut g_h1_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:235:118
    |
235 |         static mut g_h1_bathrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                      ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:236:114
    |
236 |         static mut g_h1_attic: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:237:116
    |
237 |         static mut g_h1_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:238:121
    |
238 |         static mut g_h1_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                         ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:239:117
    |
239 |         static mut g_h1_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:240:115
    |
240 |         static mut g_h1_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:241:115
    |
241 |         static mut g_h1_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:242:117
    |
242 |         static mut g_h2_upstairs: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:243:120
    |
243 |         static mut g_h2_groundfloor: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                        ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:244:117
    |
244 |         static mut g_h2_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:245:118
    |
245 |         static mut g_h1_bathroom1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                      ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:246:118
    |
246 |         static mut g_h1_bathroom2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                      ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:247:116
    |
247 |         static mut g_h1_outside: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:248:115
    |
248 |         static mut g_h1_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:249:115
    |
249 |         static mut g_h1_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:250:121
    |
250 |         static mut g_h1_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                         ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:251:117
    |
251 |         static mut g_h1_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:252:117
    |
252 |         static mut g_h2_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:253:117
    |
253 |         static mut g_h2_bathroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:254:115
    |
254 |         static mut g_h2_toilet: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:255:115
    |
255 |         static mut g_h2_attics: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:256:116
    |
256 |         static mut g_h2_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:257:121
    |
257 |         static mut g_h2_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                         ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:258:117
    |
258 |         static mut g_h2_wet_room: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:259:115
    |
259 |         static mut g_h2_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:260:115
    |
260 |         static mut g_h2_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:261:116
    |
261 |         static mut g_h2_hot_tub: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:262:116
    |
262 |         static mut g_h2_cellars: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:263:120
    |
263 |         static mut g_h2_wine_cellar: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                        ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:264:115
    |
264 |         static mut g_h2_cinema: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:265:115
    |
265 |         static mut g_h2_suite1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:266:115
    |
266 |         static mut g_h2_suite2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:267:117
    |
267 |         static mut g_h2_bedroom3: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:268:117
    |
268 |         static mut g_h2_bedroom4: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:269:115
    |
269 |         static mut g_h2_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:270:115
    |
270 |         static mut g_h2_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                   ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:271:121
    |
271 |         static mut g_h2_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                         ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:272:117
    |
272 |         static mut g_h2_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
    |                                                                                                                     ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:296:2
    |
296 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:148:11
    |
148 |     while (i < n) {
    |           ^     ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
148 -     while (i < n) {
148 +     while i < n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:149:13
    |
149 |         r = (r * 10.0);
    |             ^        ^
    |
help: remove these parentheses
    |
149 -         r = (r * 10.0);
149 +         r = r * 10.0;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:150:13
    |
150 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
150 -         i = (i + 1);
150 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:156:27
    |
156 |     let mut scaled: f64 = ((f * scale) + 0.5);
    |                           ^                 ^
    |
help: remove these parentheses
    |
156 -     let mut scaled: f64 = ((f * scale) + 0.5);
156 +     let mut scaled: f64 = (f * scale) + 0.5;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:157:22
    |
157 |     let mut n: i64 = (scaled as i64);
    |                      ^             ^
    |
help: remove these parentheses
    |
157 -     let mut n: i64 = (scaled as i64);
157 +     let mut n: i64 = scaled as i64;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:159:11
    |
159 |     while ((digits.len() as i64) <= prec) {
    |           ^                             ^
    |
help: remove these parentheses
    |
159 -     while ((digits.len() as i64) <= prec) {
159 +     while (digits.len() as i64) <= prec {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:168:22
    |
168 |     let mut n: i64 = (w - (s.len() as i64));
    |                      ^                    ^
    |
help: remove these parentheses
    |
168 -     let mut n: i64 = (w - (s.len() as i64));
168 +     let mut n: i64 = w - (s.len() as i64);
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:169:11
    |
169 |     while (n > 0) {
    |           ^     ^
    |
help: remove these parentheses
    |
169 -     while (n > 0) {
169 +     while n > 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:171:13
    |
171 |         n = (n - 1);
    |             ^     ^
    |
help: remove these parentheses
    |
171 -         n = (n - 1);
171 +         n = n - 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:178:11
    |
178 |     while (i < n) {
    |           ^     ^
    |
help: remove these parentheses
    |
178 -     while (i < n) {
178 +     while i < n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:180:13
    |
180 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
180 -         i = (i + 1);
180 +         i = i + 1;
    |

warning: unnecessary parentheses around `return` value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:185:12
    |
185 |     return (i as f64)
    |            ^        ^
    |
help: remove these parentheses
    |
185 -     return (i as f64)
185 +     return i as f64
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:202:8
    |
202 |     if ((cs.len() as i64) == 0) {
    |        ^                      ^
    |
help: remove these parentheses
    |
202 -     if ((cs.len() as i64) == 0) {
202 +     if (cs.len() as i64) == 0 {
    |

warning: unnecessary parentheses around `return` value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:203:16
    |
203 |         return (n["coverage"].clone() as f64)
    |                ^                            ^
    |
help: remove these parentheses
    |
203 -         return (n["coverage"].clone() as f64)
203 +         return n["coverage"].clone() as f64
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:210:14
    |
210 |         v1 = (v1 + (toFloat(m["weight" as usize]) * c));
    |              ^                                        ^
    |
help: remove these parentheses
    |
210 -         v1 = (v1 + (toFloat(m["weight" as usize]) * c));
210 +         v1 = v1 + (toFloat(m["weight" as usize]) * c);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:211:14
    |
211 |         v2 = (v2 + m["weight" as usize]);
    |              ^                         ^
    |
help: remove these parentheses
    |
211 -         v2 = (v2 + m["weight" as usize]);
211 +         v2 = v2 + m["weight" as usize];
    |

warning: unnecessary parentheses around `return` value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:213:12
    |
213 |     return (v1 / toFloat(v2))
    |            ^                ^
    |
help: remove these parentheses
    |
213 -     return (v1 / toFloat(v2))
213 +     return v1 / toFloat(v2)
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:219:27
    |
219 |     let mut indent: i64 = (level * 4);
    |                           ^         ^
    |
help: remove these parentheses
    |
219 -     let mut indent: i64 = (level * 4);
219 +     let mut indent: i64 = level * 4;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:221:18
    |
221 |     let mut nl = ((name.len() as i64) + indent);
    |                  ^                            ^
    |
help: remove these parentheses
    |
221 -     let mut nl = ((name.len() as i64) + indent);
221 +     let mut nl = (name.len() as i64) + indent;
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:223:57
    |
223 |     line = format!("{}{}", format!("{}{}", line, spaces((32 - nl))), "|  ");
    |                                                         ^       ^
    |
help: remove these parentheses
    |
223 -     line = format!("{}{}", format!("{}{}", line, spaces((32 - nl))), "|  ");
223 +     line = format!("{}{}", format!("{}{}", line, spaces(32 - nl)), "|  ");
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:229:26
    |
229 |         show(&mut child, (level + 1));
    |                          ^         ^
    |
help: remove these parentheses
    |
229 -         show(&mut child, (level + 1));
229 +         show(&mut child, level + 1);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:291:25
    |
291 |     let mut diff: f64 = (computeCoverage(&cleaning) - topCoverage);
    |                         ^                                        ^
    |
help: remove these parentheses
    |
291 -     let mut diff: f64 = (computeCoverage(&cleaning) - topCoverage);
291 +     let mut diff: f64 = computeCoverage(&cleaning) - topCoverage;
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:294:157
    |
294 | ...crease by ", formatFloat(diff, 6)), " to "), formatFloat((topCoverage + diff), 6)));
    |                                                             ^                  ^
    |
help: remove these parentheses
    |
294 -     println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "the top level coverage would increase by ", formatFloat(diff, 6)), " to "), formatFloat((topCoverage + diff), 6)));
294 +     println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "the top level coverage would increase by ", formatFloat(diff, 6)), " to "), formatFloat(topCoverage + diff, 6)));
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:300:32
    |
300 |         let duration_us: i64 = ((_end - _start) / 1000);
    |                                ^                      ^
    |
help: remove these parentheses
    |
300 -         let duration_us: i64 = ((_end - _start) / 1000);
300 +         let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:301:33
    |
301 |         let memory_bytes: i64 = (_end_mem - _start_mem);
    |                                 ^                     ^
    |
help: remove these parentheses
    |
301 -         let memory_bytes: i64 = (_end_mem - _start_mem);
301 +         let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:193:49
    |
193 |         cs = { let mut _v = cs.clone(); _v.push(node); _v };
    |                                            ---- ^^^^ expected `char`, found `&HashMap<String, String>`
    |                                            |
    |                                            arguments to this method are incorrect
    |
    = note:   expected type `char`
            found reference `&HashMap<String, String>`
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/string.rs:1403:12
note: you might have meant to use method `push_str`
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/string.rs:1111:5

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:198:40
    |
198 |     n.insert(String::from("coverage"), value);
    |       ------                           ^^^^^- help: try using a conversion method: `.to_string()`
    |       |                                |
    |       |                                expected `String`, found `f64`
    |       arguments to this method are incorrect
    |
help: the return type of this call is `f64` due to the type of the argument passed
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:198:5
    |
198 |     n.insert(String::from("coverage"), value);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----^
    |                                        |
    |                                        this argument influences the return type of `insert`
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0277]: `String` is not an iterator
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:207:17
    |
207 |     for node in cs {
    |                 ^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`
    |
    = help: the trait `Iterator` is not implemented for `String`
    = note: required for `String` to implement `IntoIterator`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:209:42
    |
209 |         let mut c: f64 = computeCoverage(&m);
    |                          --------------- ^^ expected `&HashMap<String, String>`, found `&i64`
    |                          |
    |                          arguments to this function are incorrect
    |
    = note: expected reference `&HashMap<String, String>`
               found reference `&i64`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:200:19
    |
200 |         unsafe fn computeCoverage(n: &HashMap<String, String>) -> f64 {
    |                   ^^^^^^^^^^^^^^^ ---------------------------

error[E0608]: cannot index into a value of type `i64`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:210:30
    |
210 |         v1 = (v1 + (toFloat(m["weight" as usize]) * c));
    |                              ^^^^^^^^^^^^^^^^^^^

error[E0608]: cannot index into a value of type `i64`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:211:21
    |
211 |         v2 = (v2 + m["weight" as usize]);
    |                     ^^^^^^^^^^^^^^^^^^^

error[E0605]: non-primitive cast: `String` as `f64`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:203:16
    |
203 |         return (n["coverage"].clone() as f64)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object

error[E0606]: casting `&'static str` as `usize` is invalid
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:210:31
    |
210 |         v1 = (v1 + (toFloat(m["weight" as usize]) * c));
    |                               ^^^^^^^^^^^^^^^^^
    |
    = help: cast through a raw pointer first

error[E0606]: casting `&'static str` as `usize` is invalid
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:211:22
    |
211 |         v2 = (v2 + m["weight" as usize]);
    |                      ^^^^^^^^^^^^^^^^^
    |
    = help: cast through a raw pointer first

error[E0277]: `String` is not an iterator
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:228:18
    |
228 |     for child in cs {
    |                  ^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`
    |
    = help: the trait `Iterator` is not implemented for `String`
    = note: required for `String` to implement `IntoIterator`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:275:43
    |
275 |     addChildren(&mut g_h1_bathrooms, vec![g_h1_bathroom1.clone(), g_h1_bathroom2.clone(), g_h1_outside.clone()]);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:275:17
    |
275 |     addChildren(&mut g_h1_bathrooms, vec![g_h1_bathroom1.clone(), g_h1_bathroom2.clone(), g_h1_outside.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:276:46
    |
276 |     addChildren(&mut g_h1_living_rooms, vec![g_h1_lounge.clone(), g_h1_dining.clone(), g_h1_conservatory.clone(), g_h1_playroom.clone()]);
    |                                              ^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:276:17
    |
276 |     addChildren(&mut g_h1_living_rooms, vec![g_h1_lounge.clone(), g_h1_dining.clone(), g_h1_conservatory.clone(), g_h1_playroom.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:277:37
    |
277 |     addChildren(&mut g_house1, vec![g_h1_bedrooms.clone(), g_h1_bathrooms.clone(), g_h1_attic.clone(), g_h1_kitchen.clone(), g_h1_living_...
    |                                     ^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:277:17
    |
277 |     addChildren(&mut g_house1, vec![g_h1_bedrooms.clone(), g_h1_bathrooms.clone(), g_h1_attic.clone(), g_h1_kitchen.clone(), g_h1_living_...
    |     ----------- ^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:278:42
    |
278 |     addChildren(&mut g_h2_bedrooms, vec![g_h2_suite1.clone(), g_h2_suite2.clone(), g_h2_bedroom3.clone(), g_h2_bedroom4.clone()]);
    |                                          ^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:278:17
    |
278 |     addChildren(&mut g_h2_bedrooms, vec![g_h2_suite1.clone(), g_h2_suite2.clone(), g_h2_bedroom3.clone(), g_h2_bedroom4.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:279:42
    |
279 |     addChildren(&mut g_h2_upstairs, vec![g_h2_bedrooms.clone(), g_h2_bathroom.clone(), g_h2_toilet.clone(), g_h2_attics.clone()]);
    |                                          ^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:279:17
    |
279 |     addChildren(&mut g_h2_upstairs, vec![g_h2_bedrooms.clone(), g_h2_bathroom.clone(), g_h2_toilet.clone(), g_h2_attics.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:280:46
    |
280 |     addChildren(&mut g_h2_living_rooms, vec![g_h2_lounge.clone(), g_h2_dining.clone(), g_h2_conservatory.clone(), g_h2_playroom.clone()]);
    |                                              ^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:280:17
    |
280 |     addChildren(&mut g_h2_living_rooms, vec![g_h2_lounge.clone(), g_h2_dining.clone(), g_h2_conservatory.clone(), g_h2_playroom.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:281:45
    |
281 |     addChildren(&mut g_h2_groundfloor, vec![g_h2_kitchen.clone(), g_h2_living_rooms.clone(), g_h2_wet_room.clone(), g_h2_garage.clone(), ...
    |                                             ^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:281:17
    |
281 |     addChildren(&mut g_h2_groundfloor, vec![g_h2_kitchen.clone(), g_h2_living_rooms.clone(), g_h2_wet_room.clone(), g_h2_garage.clone(), ...
    |     ----------- ^^^^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:282:42
    |
282 |     addChildren(&mut g_h2_basement, vec![g_h2_cellars.clone(), g_h2_wine_cellar.clone(), g_h2_cinema.clone()]);
    |                                          ^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:282:17
    |
282 |     addChildren(&mut g_h2_basement, vec![g_h2_cellars.clone(), g_h2_wine_cellar.clone(), g_h2_cinema.clone()]);
    |     ----------- ^^^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:283:37
    |
283 |     addChildren(&mut g_house2, vec![g_h2_upstairs.clone(), g_h2_groundfloor.clone(), g_h2_basement.clone()]);
    |                                     ^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:283:17
    |
283 |     addChildren(&mut g_house2, vec![g_h2_upstairs.clone(), g_h2_groundfloor.clone(), g_h2_basement.clone()]);
    |     ----------- ^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:284:37
    |
284 |     addChildren(&mut cleaning, vec![g_house1.clone(), g_house2.clone()]);
    |                                     ^^^^^^^^^^^^^^^^ expected `HashMap<String, String>`, found `Map`
    |
    = note: expected struct `HashMap<String, String>`
               found struct `Map`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:284:17
    |
284 |     addChildren(&mut cleaning, vec![g_house1.clone(), g_house2.clone()]);
    |     ----------- ^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:190:19
    |
190 |         unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:285:48
    |
285 |     let mut topCoverage: f64 = computeCoverage(&cleaning);
    |                                --------------- ^^^^^^^^^ expected `&HashMap<String, String>`, found `&Map`
    |                                |
    |                                arguments to this function are incorrect
    |
    = note: expected reference `&HashMap<String, String>`
               found reference `&Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:200:19
    |
200 |         unsafe fn computeCoverage(n: &HashMap<String, String>) -> f64 {
    |                   ^^^^^^^^^^^^^^^ ---------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:289:10
    |
289 |     show(&mut cleaning, 0);
    |     ---- ^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:218:19
    |
218 |         unsafe fn show(n: &mut HashMap<String, String>, mut level: i64) {
    |                   ^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:290:17
    |
290 |     setCoverage(&mut g_h2_cinema, 1.0);
    |     ----------- ^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:197:19
    |
197 |         unsafe fn setCoverage(n: &mut HashMap<String, String>, mut value: f64) {
    |                   ^^^^^^^^^^^ -------------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:291:42
    |
291 |     let mut diff: f64 = (computeCoverage(&cleaning) - topCoverage);
    |                          --------------- ^^^^^^^^^ expected `&HashMap<String, String>`, found `&Map`
    |                          |
    |                          arguments to this function are incorrect
    |
    = note: expected reference `&HashMap<String, String>`
               found reference `&Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:200:19
    |
200 |         unsafe fn computeCoverage(n: &HashMap<String, String>) -> f64 {
    |                   ^^^^^^^^^^^^^^^ ---------------------------

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:295:17
    |
295 |     setCoverage(&mut g_h2_cinema, 0.75);
    |     ----------- ^^^^^^^^^^^^^^^^ expected `&mut HashMap<String, String>`, found `&mut Map`
    |     |
    |     arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut HashMap<String, String>`
               found mutable reference `&mut Map`
note: function defined here
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:197:19
    |
197 |         unsafe fn setCoverage(n: &mut HashMap<String, String>, mut value: f64) {
    |                   ^^^^^^^^^^^ -------------------------------

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:145:25
    |
145 |         unsafe fn pow10(mut n: i64) -> f64 {
    |                         ----^
    |                         |
    |                         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:154:31
    |
154 |         unsafe fn formatFloat(mut f: f64, mut prec: i64) -> String {
    |                               ----^
    |                               |
    |                               help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:154:43
    |
154 |         unsafe fn formatFloat(mut f: f64, mut prec: i64) -> String {
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:155:9
    |
155 |     let mut scale: f64 = pow10(prec);
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:156:9
    |
156 |     let mut scaled: f64 = ((f * scale) + 0.5);
    |         ----^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:157:9
    |
157 |     let mut n: i64 = (scaled as i64);
    |         ----^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:162:9
    |
162 |     let mut intPart: String = { let tmp = &digits; tmp.chars().skip(0 as usize).take((((digits.len() as i64) - prec) - 0) as usize).colle...
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:163:9
    |
163 |     let mut fracPart: String = { let tmp = &digits; tmp.chars().skip(((digits.len() as i64) - prec) as usize).take(((digits.len() as i64)...
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:166:36
    |
166 |         unsafe fn padLeft(s: &str, mut w: i64) -> String {
    |                                    ----^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:175:36
    |
175 |         unsafe fn repeat(ch: &str, mut n: i64) -> String {
    |                                    ----^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:184:27
    |
184 |         unsafe fn toFloat(mut i: i64) -> f64 {
    |                           ----^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:187:39
    |
187 |         unsafe fn newNode(name: &str, mut weight: i64, mut coverage: f64) -> Map {
    |                                       ----^^^^^^
    |                                       |
    |                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:187:56
    |
187 |         unsafe fn newNode(name: &str, mut weight: i64, mut coverage: f64) -> Map {
    |                                                        ----^^^^^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/functional-coverage-tree.rs:215:26
    |
215 |         unsafe fn spaces(mut n: i64) -> String {
    |                          ----^
    |                          |
    |                          help: remove this `mut`

error: aborting due to 35 previous errors; 92 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0605, E0606, E0608.
For more information about an error, try `rustc --explain E0277`.
