// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_testCases: Vec<Vec<f64>> = Vec::new();
fn main() {
    unsafe {
        g_testCases = vec![vec![20.0, 45.0], vec![((0 as f64) - 45.0), 45.0], vec![((0 as f64) - 85.0), 90.0], vec![((0 as f64) - 95.0), 90.0], vec![((0 as f64) - 45.0), 125.0], vec![((0 as f64) - 45.0), 145.0], vec![29.4803, ((0 as f64) - 88.6381)], vec![((0 as f64) - 78.3251), ((0 as f64) - 159.036)]];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn angleDiff(mut b1: f64, mut b2: f64) -> f64 {
    let d: f64 = (b2 - b1);
    if (d < (((0 as f64) - 180.0) as f64)) {
        return (d + 360.0)
    }
    if (d > 180.0) {
        return (d - 360.0)
    }
    return d
};
        static mut g_testCases: Vec<Vec<f64>> = Vec::new();;
        for tc in &g_testCases.clone() {
            println!("{}", format!("{:?}", angleDiff((tc[0] as f64), (tc[1] as f64))));
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
