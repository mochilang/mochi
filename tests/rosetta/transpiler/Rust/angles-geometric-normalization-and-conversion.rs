// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn d2d(mut d: f64) -> f64 {
    return (d % 360.0)
};
    fn g2g(mut g: f64) -> f64 {
    return (g % 400.0)
};
    fn m2m(mut m: f64) -> f64 {
    return (m % 6400.0)
};
    fn r2r(mut r: f64) -> f64 {
    return (r % (2.0 * 3.141592653589793))
};
    fn d2g(mut d: f64) -> f64 {
    return ((d2d(d) * 400.0) / 360.0)
};
    fn d2m(mut d: f64) -> f64 {
    return ((d2d(d) * 6400.0) / 360.0)
};
    fn d2r(mut d: f64) -> f64 {
    return ((d2d(d) * 3.141592653589793) / 180.0)
};
    fn g2d(mut g: f64) -> f64 {
    return ((g2g(g) * 360.0) / 400.0)
};
    fn g2m(mut g: f64) -> f64 {
    return ((g2g(g) * 6400.0) / 400.0)
};
    fn g2r(mut g: f64) -> f64 {
    return ((g2g(g) * 3.141592653589793) / 200.0)
};
    fn m2d(mut m: f64) -> f64 {
    return ((m2m(m) * 360.0) / 6400.0)
};
    fn m2g(mut m: f64) -> f64 {
    return ((m2m(m) * 400.0) / 6400.0)
};
    fn m2r(mut m: f64) -> f64 {
    return ((m2m(m) * 3.141592653589793) / 3200.0)
};
    fn r2d(mut r: f64) -> f64 {
    return ((r2r(r) * 180.0) / 3.141592653589793)
};
    fn r2g(mut r: f64) -> f64 {
    return ((r2r(r) * 200.0) / 3.141592653589793)
};
    fn r2m(mut r: f64) -> f64 {
    return ((r2r(r) * 3200.0) / 3.141592653589793)
};
    fn mochi_main() {
    let mut angles: Vec<f64> = vec![-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1000000.0];
    println!("{}", "degrees normalized_degs gradians mils radians");
    for a in angles {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), d2d(a).to_string()), " "), d2g(a).to_string()), " "), d2m(a).to_string()), " "), d2r(a).to_string()));
    }
    println!("{}", "\ngradians normalized_grds degrees mils radians");
    for a in angles {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), g2g(a).to_string()), " "), g2d(a).to_string()), " "), g2m(a).to_string()), " "), g2r(a).to_string()));
    }
    println!("{}", "\nmils normalized_mils degrees gradians radians");
    for a in angles {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), m2m(a).to_string()), " "), m2d(a).to_string()), " "), m2g(a).to_string()), " "), m2r(a).to_string()));
    }
    println!("{}", "\nradians normalized_rads degrees gradians mils");
    for a in angles {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), r2r(a).to_string()), " "), r2d(a).to_string()), " "), r2g(a).to_string()), " "), r2m(a).to_string()));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
