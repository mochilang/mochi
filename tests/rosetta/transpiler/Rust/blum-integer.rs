// Generated by Mochi transpiler v0.10.56 on 2025-08-04 06:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
    fn firstPrimeFactor(mut n: i64) -> i64 {
    if (n == 1) {
        return 1
    }
    if ((n % 3) == 0) {
        return 3
    }
    if ((n % 5) == 0) {
        return 5
    }
    let mut inc: Vec<i64> = vec![4, 2, 4, 2, 4, 6, 2, 6];
    let mut k: i64 = 7;
    let mut i: i64 = 0;
    while ((k * k) <= n) {
        if ((n % k) == 0) {
            return k
        }
        k = (k + inc[i as usize]);
        i = ((i + 1) % (inc.len() as i64));
    }
    return n
};
    fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn padLeft(mut n: i64, mut width: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < width) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn formatFloat(mut f: f64, mut prec: i64) -> String {
    let mut s = f.to_string();
    let mut idx = { let s = s.clone(); let p = ".".clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx < 0) {
        return s.to_string()
    }
    let mut need: i64 = ((idx + 1) + prec);
    if ((s.len() as i64) > need) {
        return { let tmp = &s; tmp.chars().skip(0 as usize).take((need - 0) as usize).collect::<String>() }
    }
    return s.to_string().clone()
};
    fn mochi_main() {
    let mut blum: Vec<i64> = vec![];
    let mut counts: Vec<i64> = vec![0, 0, 0, 0];
    let mut digits: Vec<i64> = vec![1, 3, 7, 9];
    let mut i: i64 = 1;
    let mut bc: i64 = 0;
    loop {
        let mut p: i64 = firstPrimeFactor(i);
        if ((p % 4) == 3) {
            let mut q: i64 = (i / p);
            if (((q != p) && ((q % 4) == 3)) && isPrime(q)) {
                if (bc < 50) {
                    blum = { let mut _v = blum.clone(); _v.push(i); _v };
                }
                let mut d: i64 = (i % 10);
                if (d == 1) {
                    counts[0 as usize] = (counts[0 as usize] + 1);
                } else if (d == 3) {
                    counts[1 as usize] = (counts[1 as usize] + 1);
                } else if (d == 7) {
                    counts[2 as usize] = (counts[2 as usize] + 1);
                } else if (d == 9) {
                    counts[3 as usize] = (counts[3 as usize] + 1);
                }
                bc = (bc + 1);
                if (bc == 50) {
                    println!("{}", "First 50 Blum integers:");
                    let mut idx: i64 = 0;
                    while (idx < 50) {
                        let mut line: String = String::from("").clone();
                        let mut j: i64 = 0;
                        while (j < 10) {
                            line = format!("{}{}", format!("{}{}", line, padLeft(blum[idx as usize], 3)), " ");
                            idx = (idx + 1);
                            j = (j + 1);
                        }
                        println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
                    }
                    break
                }
            }
        }
        if ((i % 5) == 3) {
            i = (i + 4);
        } else {
            i = (i + 2);
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
