error[E0106]: missing lifetime specifiers
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:70:90
   |
70 |     fn step(mut h: Vec<HashMap<String, i64>>, mut nv: i64, mut dir: Vec<i64>) -> HashMap<&str, &Vec<i64>> {
   |                                                                                          ^     ^ expected named lifetime parameter
   |                                                                                          |
   |                                                                                          expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`
   |
70 |     fn step(mut h: Vec<HashMap<String, i64>>, mut nv: i64, mut dir: Vec<i64>) -> HashMap<&'static str, &'static Vec<i64>> {
   |                                                                                           +++++++       +++++++

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:69:2
   |
69 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:120:2
    |
120 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:140:2
    |
140 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:147:2
    |
147 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:163:2
    |
163 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:61:17
   |
61 |     let mut i = ((h.len() as i64) - 1);
   |                 ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
61 -     let mut i = ((h.len() as i64) - 1);
61 +     let mut i = (h.len() as i64) - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:62:11
   |
62 |     while ((i > 0) && (h[(i - 1) as usize].clone()["s".as_str()] > h[i as usize].clone()["s".as_str()])) {
   |           ^                                                                                            ^
   |
help: remove these parentheses
   |
62 -     while ((i > 0) && (h[(i - 1) as usize].clone()["s".as_str()] > h[i as usize].clone()["s".as_str()])) {
62 +     while (i > 0) && (h[(i - 1) as usize].clone()["s".as_str()] > h[i as usize].clone()["s".as_str()]) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:66:13
   |
66 |         i = (i - 1);
   |             ^     ^
   |
help: remove these parentheses
   |
66 -         i = (i - 1);
66 +         i = i - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:71:11
   |
71 |     while (((h.len() as i64) == 0) || ((nv * nv) <= h[0 as usize].clone()["s".as_str()])) {
   |           ^                                                                             ^
   |
help: remove these parentheses
   |
71 -     while (((h.len() as i64) == 0) || ((nv * nv) <= h[0 as usize].clone()["s".as_str()])) {
71 +     while ((h.len() as i64) == 0) || ((nv * nv) <= h[0 as usize].clone()["s".as_str()]) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:73:14
   |
73 |         nv = (nv + 1);
   |              ^      ^
   |
help: remove these parentheses
   |
73 -         nv = (nv + 1);
73 +         nv = nv + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:77:11
   |
77 |     while (((h.len() as i64) > 0) && (h[0 as usize].clone()["s".as_str()] == s)) {
   |           ^                                                                    ^
   |
help: remove these parentheses
   |
77 -     while (((h.len() as i64) > 0) && (h[0 as usize].clone()["s".as_str()] == s)) {
77 +     while ((h.len() as i64) > 0) && (h[0 as usize].clone()["s".as_str()] == s) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:81:12
   |
81 |         if (it["a".as_str()] > it["b".as_str()]) {
   |            ^                                   ^
   |
help: remove these parentheses
   |
81 -         if (it["a".as_str()] > it["b".as_str()]) {
81 +         if it["a".as_str()] > it["b".as_str()] {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:91:12
   |
91 |         if (p[0] != p[1]) {
   |            ^            ^
   |
help: remove these parentheses
   |
91 -         if (p[0] != p[1]) {
91 +         if p[0] != p[1] {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:97:12
   |
97 |         if (p[1] != 0) {
   |            ^         ^
   |
help: remove these parentheses
   |
97 -         if (p[1] != 0) {
97 +         if p[1] != 0 {
   |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:103:12
    |
103 |         if (p[0] != 0) {
    |            ^         ^
    |
help: remove these parentheses
    |
103 -         if (p[0] != 0) {
103 +         if p[0] != 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:110:26
    |
110 |         let cross: i64 = ((p[0] * dir[1 as usize]) - (p[1] * dir[0 as usize]));
    |                          ^                                                   ^
    |
help: remove these parentheses
    |
110 -         let cross: i64 = ((p[0] * dir[1 as usize]) - (p[1] * dir[0 as usize]));
110 +         let cross: i64 = (p[0] * dir[1 as usize]) - (p[1] * dir[0 as usize]);
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:111:12
    |
111 |         if (cross >= 0) {
    |            ^          ^
    |
help: remove these parentheses
    |
111 -         if (cross >= 0) {
111 +         if cross >= 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:112:28
    |
112 |             let dot: i64 = ((p[0] * dir[0 as usize]) + (p[1] * dir[1 as usize]));
    |                            ^                                                   ^
    |
help: remove these parentheses
    |
112 -             let dot: i64 = ((p[0] * dir[0 as usize]) + (p[1] * dir[1 as usize]));
112 +             let dot: i64 = (p[0] * dir[0 as usize]) + (p[1] * dir[1 as usize]);
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:113:16
    |
113 |             if (dot > bestDot) {
    |                ^             ^
    |
help: remove these parentheses
    |
113 -             if (dot > bestDot) {
113 +             if dot > bestDot {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:129:11
    |
129 |     while (i < n) {
    |           ^     ^
    |
help: remove these parentheses
    |
129 -     while (i < n) {
129 +     while i < n {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:134:14
    |
134 |         nv = (st["n".as_str()].clone() as i64);
    |              ^                               ^
    |
help: remove these parentheses
    |
134 -         nv = (st["n".as_str()].clone() as i64);
134 +         nv = st["n".as_str()].clone() as i64;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:135:13
    |
135 |         x = (x + dir[0]);
    |             ^          ^
    |
help: remove these parentheses
    |
135 -         x = (x + dir[0]);
135 +         x = x + dir[0];
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:136:13
    |
136 |         y = (y + dir[1]);
    |             ^          ^
    |
help: remove these parentheses
    |
136 -         y = (y + dir[1]);
136 +         y = y + dir[1];
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:137:13
    |
137 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
137 -         i = (i + 1);
137 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:143:11
    |
143 |     while ((r.len() as i64) < w) {
    |           ^                    ^
    |
help: remove these parentheses
    |
143 -     while ((r.len() as i64) < w) {
143 +     while (r.len() as i64) < w {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:153:11
    |
153 |     while (i < (pts.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
153 -     while (i < (pts.len() as i64)) {
153 +     while i < (pts.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:157:12
    |
157 |         if (((i + 1) % 10) == 0) {
    |            ^                   ^
    |
help: remove these parentheses
    |
157 -         if (((i + 1) % 10) == 0) {
157 +         if ((i + 1) % 10) == 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:161:13
    |
161 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
161 -         i = (i + 1);
161 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:167:28
    |
167 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
167 -     let duration_us: i64 = ((_end - _start) / 1000);
167 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:168:29
    |
168 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
168 -     let memory_bytes: i64 = (_end_mem - _start_mem);
168 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:62:56
   |
62 |     while ((i > 0) && (h[(i - 1) as usize].clone()["s".as_str()] > h[i as usize].clone()["s".as_str()])) {
   |                                                        ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:62:94
   |
62 |     while ((i > 0) && (h[(i - 1) as usize].clone()["s".as_str()] > h[i as usize].clone()["s".as_str()])) {
   |                                                                                              ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:71:79
   |
71 |     while (((h.len() as i64) == 0) || ((nv * nv) <= h[0 as usize].clone()["s".as_str()])) {
   |                                                                               ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:72:29
   |
72 |         h = push(h.clone(), &Map {s: (nv * nv), a: nv, b: 0});
   |             ----            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&HashMap<String, i64>`, found `&Map`
   |             |
   |             arguments to this function are incorrect
   |
   = note: expected reference `&HashMap<String, i64>`
              found reference `&Map`
note: function defined here
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:59:8
   |
59 |     fn push(mut h: Vec<HashMap<String, i64>>, it: &HashMap<String, i64>) -> Vec<HashMap<String, i64>> {
   |        ^^^^                                   -------------------------

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:75:44
   |
75 |     let s: i64 = h[0 as usize].clone()["s".as_str()];
   |                                            ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:77:65
   |
77 |     while (((h.len() as i64) > 0) && (h[0 as usize].clone()["s".as_str()] == s)) {
   |                                                                 ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:80:59
   |
80 |         v = { let mut _v = v.clone(); _v.push(vec![it["a".as_str()], it["b".as_str()]]); _v };
   |                                                           ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:80:77
   |
80 |         v = { let mut _v = v.clone(); _v.push(vec![it["a".as_str()], it["b".as_str()]]); _v };
   |                                                                             ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:81:20
   |
81 |         if (it["a".as_str()] > it["b".as_str()]) {
   |                    ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:81:39
   |
81 |         if (it["a".as_str()] > it["b".as_str()]) {
   |                                       ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:78
   |
82 | ...   h = push(h.clone(), &HashMap::from([(String::from("s"), ((it["a".as_str()] * it["a".as_str()]) + ((it["b".as_str()] + 1) * (it["b"....
   |                                                                        ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:97
   |
82 | ...   h = push(h.clone(), &HashMap::from([(String::from("s"), ((it["a".as_str()] * it["a".as_str()]) + ((it["b".as_str()] + 1) * (it["b"....
   |                                                                                           ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:119
   |
82 | ...   h = push(h.clone(), &HashMap::from([(String::from("s"), ((it["a".as_str()] * it["a".as_str()]) + ((it["b".as_str()] + 1) * (it["b"....
   |                                                                                                                 ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:144
   |
82 | ..._str()] * it["a".as_str()]) + ((it["b".as_str()] + 1) * (it["b".as_str()] + 1)))), (String::from("a"), it["a".as_str()]), (String::fro...
   |                                                                    ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:190
   |
82 | ...)] + 1) * (it["b".as_str()] + 1)))), (String::from("a"), it["a".as_str()]), (String::from("b"), (it["b".as_str()] + 1))]));
   |                                                                    ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:82:230
   |
82 | ...ring::from("a"), it["a".as_str()]), (String::from("b"), (it["b".as_str()] + 1))]));
   |                                                                    ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:87:53
   |
87 |         list = { let mut _v = list.clone(); _v.push(p); _v };
   |                                                ---- ^- help: try using a conversion method: `.to_vec()`
   |                                                |    |
   |                                                |    expected `Vec<i64>`, found `&Vec<i64>`
   |                                                arguments to this method are incorrect
   |
   = note: expected struct `Vec<_>`
           found reference `&Vec<_>`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:115:24
    |
108 |     let mut best: Vec<i64> = dir;
    |                   -------- expected due to this type
...
115 |                 best = p;
    |                        ^- help: try using a conversion method: `.to_vec()`
    |                        |
    |                        expected `Vec<i64>`, found `&Vec<i64>`
    |
    = note: expected struct `Vec<_>`
            found reference `&Vec<_>`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:119:77
    |
119 |     return HashMap::from([(String::from("d"), best), (String::from("heap"), h), (String::from("n"), nv)])
    |                                                                             ^ expected `Vec<i64>`, found `Vec<HashMap<String, i64>>`
    |
    = note: expected struct `Vec<i64>`
               found struct `Vec<HashMap<String, i64>>`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:119:101
    |
119 |     return HashMap::from([(String::from("d"), best), (String::from("heap"), h), (String::from("n"), nv)])
    |                                                                                                     ^^ expected `Vec<i64>`, found `i64`
    |
    = note: expected struct `Vec<i64>`
                 found type `i64`

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:132:22
    |
132 |         dir = st["d".as_str()].clone();
    |                      ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:133:26
    |
133 |         heap = st["heap".as_str()].clone();
    |                          ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:134:22
    |
134 |         nv = (st["n".as_str()].clone() as i64);
    |                      ^^^^^^
    |
    = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:63:13
   |
63 |         let mut tmp: HashMap<String, i64> = h[(i - 1) as usize].clone();
   |             ----^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:141:12
    |
141 |     fn pad(mut s: String, mut w: i64) -> String {
    |            ----^
    |            |
    |            help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:141:27
    |
141 |     fn pad(mut s: String, mut w: i64) -> String {
    |                           ----^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:149:9
    |
149 |     let mut pts: Vec<Vec<i64>> = positions(40);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/babylonian-spiral.rs:154:13
    |
154 |         let mut p: Vec<i64> = pts[i as usize].clone();
    |             ----^
    |             |
    |             help: remove this `mut`

error: aborting due to 24 previous errors; 35 warnings emitted

Some errors have detailed explanations: E0106, E0308, E0658.
For more information about an error, try `rustc --explain E0106`.
