// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_nMech: i64 = 0;
static mut g_detailsPerMech: i64 = 0;
fn main() {
    unsafe {
        g_nMech = 5;
        g_detailsPerMech = 4;
                let _start: i64 = _now();
        static mut g_nMech: i64 = 0;;
        static mut g_detailsPerMech: i64 = 0;;
        for mech in 1..(g_nMech + 1) {
            let mut id: i64 = mech;
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "worker ", id.to_string()), " contracted to assemble "), g_detailsPerMech.to_string()), " details"));
            println!("{}", format!("{}{}", format!("{}{}", "worker ", id.to_string()), " enters shop"));
            let mut d: i64 = 0;
            while (d < g_detailsPerMech) {
                println!("{}", format!("{}{}", format!("{}{}", "worker ", id.to_string()), " assembling"));
                println!("{}", format!("{}{}", format!("{}{}", "worker ", id.to_string()), " completed detail"));
                d = (d + 1);
            }
            println!("{}", format!("{}{}", format!("{}{}", "worker ", id.to_string()), " leaves shop"));
            println!("{}", format!("{}{}", format!("{}{}", "mechanism ", mech.to_string()), " completed"));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
