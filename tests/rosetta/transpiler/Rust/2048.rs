// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
#[derive(Debug, Clone, Default)]
struct Board {
    cells: Vec<Vec<i64>>,
}
impl std::fmt::Display for Board {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"cells\": {:?}", self.cells)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SpawnResult {
    board: Board,
    full: bool,
}
impl std::fmt::Display for SpawnResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"board\": {}", self.board)?;
        write!(f, ", ")?;
        write!(f, "\"full\": {}", self.full)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct SlideResult {
    row: Vec<i64>,
    gain: i64,
}
impl std::fmt::Display for SlideResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"row\": {:?}", self.row)?;
        write!(f, ", ")?;
        write!(f, "\"gain\": {}", self.gain)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct MoveResult {
    board: Board,
    score: i64,
    moved: bool,
}
impl std::fmt::Display for MoveResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"board\": {}", self.board)?;
        write!(f, ", ")?;
        write!(f, "\"score\": {}", self.score)?;
        write!(f, ", ")?;
        write!(f, "\"moved\": {}", self.moved)?;
        write!(f, "}}")
    }
}

static mut g_SIZE: i64 = 0;
static mut g_board: Board = Board { cells: Vec::new() };
static mut g_r: SpawnResult = SpawnResult { board: Board { cells: Vec::new() }, full: false };
static mut g_full: bool = false;
static mut g_score: i64 = 0;
fn main() {
    unsafe {
        g_SIZE = 4;
        g_board = newBoard();
        g_r = spawnTile(&g_board);
        g_full = g_r.clone().full;
        g_score = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_SIZE: i64 = 0;;
        unsafe fn newBoard() -> Board {
    let mut b: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            x = (x + 1);
        }
        b = { let mut _v = b.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return Board {cells: b}
};
        unsafe fn spawnTile(b: &Board) -> SpawnResult {
    let mut grid: Vec<Vec<i64>> = b.cells.clone();
    let mut empty: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (grid[y as usize].clone()[x as usize] == 0) {
                empty = { let mut _v = empty.clone(); _v.push(vec![x, y]); _v };
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    if ((empty.len() as i64) == 0) {
        return SpawnResult {board: b.clone(), full: true}
    }
    let mut idx = (_now() % (empty.len() as i64));
    let mut cell: Vec<i64> = empty[idx as usize].clone();
    let mut val: i64 = 4;
    if ((_now() % 10) < 9) {
        val = 2;
    }
    grid[cell[1 as usize] as usize][cell[0 as usize] as usize] = val;
    return SpawnResult {board: Board {cells: grid}, full: ((empty.len() as i64) == 1)}
};
        unsafe fn pad(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut pad: i64 = (4 - (s.len() as i64));
    let mut i: i64 = 0;
    let mut out: String = String::from("").clone();
    while (i < pad) {
        out = format!("{}{}", out, " ");
        i = (i + 1);
    }
    return format!("{}{}", out, s).clone()
};
        unsafe fn draw(b: &Board, mut score: i64) {
    println!("{}", format!("{}{}", "Score: ", score.to_string()));
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        println!("{}", "+----+----+----+----+");
        let mut line: String = String::from("|").clone();
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            let mut v: i64 = b.cells.clone()[y as usize].clone()[x as usize];
            if (v == 0) {
                line = format!("{}{}", line, "    |");
            } else {
                line = format!("{}{}", format!("{}{}", line, pad(v)), "|");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
    println!("{}", "+----+----+----+----+");
    println!("{}", "W=Up S=Down A=Left D=Right Q=Quit");
};
        unsafe fn reverseRow(mut r: Vec<i64>) -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    let mut i = ((r.len() as i64) - 1);
    while (i >= 0) {
        out = { let mut _v = out.clone(); _v.push(r[i as usize]); _v };
        i = (i - 1);
    }
    return out
};
        unsafe fn slideLeft(row: &mut Vec<i64>) -> SlideResult {
    let mut xs: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (row.len() as i64)) {
        if (row[i as usize] != 0) {
            xs = { let mut _v = xs.clone(); _v.push(row[i as usize]); _v };
        }
        i = (i + 1);
    }
    let mut res: Vec<i64> = vec![];
    let mut gain: i64 = 0;
    i = 0;
    while (i < (xs.len() as i64)) {
        if (((i + 1) < (xs.len() as i64)) && (xs[i as usize] == xs[(i + 1) as usize])) {
            let mut v: i64 = (xs[i as usize] * 2);
            gain = (gain + v);
            res = { let mut _v = res.clone(); _v.push(v); _v };
            i = (i + 2);
        } else {
            res = { let mut _v = res.clone(); _v.push(xs[i as usize]); _v };
            i = (i + 1);
        }
    }
    while ((res.len() as i64) < g_SIZE) {
        res = { let mut _v = res.clone(); _v.push(0); _v };
    }
    return SlideResult {row: res, gain: gain}
};
        unsafe fn moveLeft(b: &Board, mut score: i64) -> MoveResult {
    let mut grid: Vec<Vec<i64>> = b.cells.clone();
    let mut moved: bool = false;
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut r: SlideResult = slideLeft(&mut grid[y as usize].clone());
        let mut new: Vec<i64> = r.row;
        score = (score + r.gain);
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (grid[y as usize].clone()[x as usize] != new[x as usize]) {
                moved = true;
            }
            grid[y as usize][x as usize] = new[x as usize];
            x = (x + 1);
        }
        y = (y + 1);
    }
    return MoveResult {board: Board {cells: grid}, score: score, moved: moved}
};
        unsafe fn moveRight(b: &Board, mut score: i64) -> MoveResult {
    let mut grid: Vec<Vec<i64>> = b.cells.clone();
    let mut moved: bool = false;
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut rev: Vec<i64> = reverseRow(grid[y as usize].clone());
        let mut r: SlideResult = slideLeft(&mut rev);
        rev = r.row;
        score = (score + r.gain);
        rev = reverseRow(rev.clone());
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (grid[y as usize].clone()[x as usize] != rev[x as usize]) {
                moved = true;
            }
            grid[y as usize][x as usize] = rev[x as usize];
            x = (x + 1);
        }
        y = (y + 1);
    }
    return MoveResult {board: Board {cells: grid}, score: score, moved: moved}
};
        unsafe fn getCol(b: &Board, mut x: i64) -> Vec<i64> {
    let mut col: Vec<i64> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        col = { let mut _v = col.clone(); _v.push(b.cells.clone()[y as usize].clone()[x as usize]); _v };
        y = (y + 1);
    }
    return col
};
        unsafe fn setCol(mut b: Board, mut x: i64, mut col: Vec<i64>) {
    let mut rows: Vec<Vec<i64>> = b.cells;
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut row: Vec<i64> = rows[y as usize].clone();
        row[x as usize] = col[y as usize];
        rows[y as usize] = row;
        y = (y + 1);
    }
    b.cells = rows;
};
        unsafe fn moveUp(b: &Board, mut score: i64) -> MoveResult {
    let mut grid: Vec<Vec<i64>> = b.cells.clone();
    let mut moved: bool = false;
    let mut x: i64 = 0;
    while (x < g_SIZE) {
        let mut col: Vec<i64> = getCol(b, x);
        let mut r: SlideResult = slideLeft(&mut col);
        let mut new: Vec<i64> = r.row;
        score = (score + r.gain);
        let mut y: i64 = 0;
        while (y < g_SIZE) {
            if (grid[y as usize].clone()[x as usize] != new[y as usize]) {
                moved = true;
            }
            grid[y as usize][x as usize] = new[y as usize];
            y = (y + 1);
        }
        x = (x + 1);
    }
    return MoveResult {board: Board {cells: grid}, score: score, moved: moved}
};
        unsafe fn moveDown(b: &Board, mut score: i64) -> MoveResult {
    let mut grid: Vec<Vec<i64>> = b.cells.clone();
    let mut moved: bool = false;
    let mut x: i64 = 0;
    while (x < g_SIZE) {
        let mut col: Vec<i64> = reverseRow(getCol(b, x));
        let mut r: SlideResult = slideLeft(&mut col);
        col = r.row;
        score = (score + r.gain);
        col = reverseRow(col.clone());
        let mut y: i64 = 0;
        while (y < g_SIZE) {
            if (grid[y as usize].clone()[x as usize] != col[y as usize]) {
                moved = true;
            }
            grid[y as usize][x as usize] = col[y as usize];
            y = (y + 1);
        }
        x = (x + 1);
    }
    return MoveResult {board: Board {cells: grid}, score: score, moved: moved}
};
        unsafe fn hasMoves(b: &Board) -> bool {
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b.cells.clone()[y as usize].clone()[x as usize] == 0) {
                return true
            }
            if (((x + 1) < g_SIZE) && (b.cells.clone()[y as usize].clone()[x as usize] == b.cells.clone()[y as usize].clone()[(x + 1) as usize])) {
                return true
            }
            if (((y + 1) < g_SIZE) && (b.cells.clone()[y as usize].clone()[x as usize] == b.cells.clone()[(y + 1) as usize].clone()[x as usize])) {
                return true
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return false
};
        unsafe fn has2048(b: &Board) -> bool {
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b.cells.clone()[y as usize].clone()[x as usize] >= 2048) {
                return true
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return false
};
        static mut g_board: Board = Board { cells: Vec::new() };;
        static mut g_r: SpawnResult = SpawnResult { board: Board { cells: Vec::new() }, full: false };;
        g_board = g_r.clone().board;
        static mut g_full: bool = false;;
        g_r = spawnTile(&g_board);
        g_board = g_r.clone().board;
        g_full = g_r.clone().full;
        static mut g_score: i64 = 0;;
        draw(&g_board, g_score);
        loop {
            println!("{}", "Move: ");
            let mut cmd: String = input().clone();
            let mut moved: bool = false;
            if ((cmd.as_str() == "a") || (cmd.as_str() == "A")) {
                let mut m: MoveResult = moveLeft(&g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd.as_str() == "d") || (cmd.as_str() == "D")) {
                let mut m: MoveResult = moveRight(&g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd.as_str() == "w") || (cmd.as_str() == "W")) {
                let mut m: MoveResult = moveUp(&g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd.as_str() == "s") || (cmd.as_str() == "S")) {
                let mut m: MoveResult = moveDown(&g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd.as_str() == "q") || (cmd.as_str() == "Q")) {
                break
            }
            if moved {
                let mut r2: SpawnResult = spawnTile(&g_board);
                g_board = r2.board;
                g_full = r2.full;
                if (g_full && !hasMoves(&g_board)) {
                    draw(&g_board, g_score);
                    println!("{}", "Game Over");
                    break
                }
            }
            draw(&g_board, g_score);
            if has2048(&g_board) {
                println!("{}", "You win!");
                break
            }
            if !hasMoves(&g_board) {
                println!("{}", "Game Over");
                break
            }
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
