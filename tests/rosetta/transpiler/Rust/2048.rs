// Generated by Mochi transpiler v0.10.37 on 2025-07-23 10:09 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
#[derive(Debug, Clone)]
struct Map {
    board: i64,
    full: bool,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"board\": {}", self.board)?;
        write!(f, ", ")?;
        write!(f, "\"full\": {}", self.full)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct Map1 {
    row: i64,
    gain: i64,
}
impl std::fmt::Display for Map1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"row\": {}", self.row)?;
        write!(f, ", ")?;
        write!(f, "\"gain\": {}", self.gain)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct Map2 {
    board: i64,
    score: i64,
    moved: i64,
}
impl std::fmt::Display for Map2 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"board\": {}", self.board)?;
        write!(f, ", ")?;
        write!(f, "\"score\": {}", self.score)?;
        write!(f, ", ")?;
        write!(f, "\"moved\": {}", self.moved)?;
        write!(f, "}}")
    }
}

static mut g_SIZE: i64 = 0;
static mut g_board: Vec<Vec<i64>> = Vec::new();
static mut g_r: Map = Default::default();
static mut g_full: i64 = 0;
static mut g_score: i64 = 0;
unsafe fn newBoard() -> Vec<Vec<i64>> {
    let mut b: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            row = { let mut v = row.clone(); v.push(0); v };
            x = (x + 1);
        }
        b = { let mut v = b.clone(); v.push(row); v };
        y = (y + 1);
    }
    return b
}

unsafe fn spawnTile(b: Vec<Vec<i64>>) -> Map {
    let mut empty: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b[y as usize][x as usize] == 0) {
                empty = { let mut v = empty.clone(); v.push(vec![x, y]); v };
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    if (empty.len() == 0) {
        return Map {board: b, full: true}
    }
    let mut idx = (_now() % empty.len());
    let cell: Vec<i64> = empty[idx as usize];
    let mut val: i64 = 4;
    if ((_now() % 10) < 9) {
        val = 2;
    }
    b[cell[1 as usize] as usize][cell[0 as usize] as usize] = val;
    return Map {board: b, full: (empty.len() == 1)}
}

unsafe fn pad(n: i64) -> String {
    let mut s = n.to_string();
    let mut pad: i64 = (4 - s.len());
    let mut i: i64 = 0;
    let mut out = String::from("");
    while (i < pad) {
        out = format!("{}{}", out, " ");
        i = (i + 1);
    }
    return (out + s).to_string()
}

unsafe fn draw(b: Vec<Vec<i64>>, score: i64) {
    println!("{}", format!("{}{}", "Score: ", g_score.to_string()));
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        println!("{}", "+----+----+----+----+");
        let mut line = String::from("|");
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            let mut v: i64 = b[y as usize][x as usize];
            if (v == 0) {
                line = format!("{}{}", line, "    |");
            } else {
                line = format!("{}{}", format!("{}{}", line, pad(v)), "|");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
    println!("{}", "+----+----+----+----+");
    println!("{}", "W=Up S=Down A=Left D=Right Q=Quit");
}

unsafe fn reverseRow(r: Vec<i64>) -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    let mut i = (g_r.len() - 1);
    while (i >= 0) {
        out = { let mut v = out.clone(); v.push(g_r[i]); v };
        i = (i - 1);
    }
    return out
}

unsafe fn slideLeft(row: Vec<i64>) -> Map1 {
    let mut xs: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < row.len()) {
        if (row[i as usize] != 0) {
            xs = { let mut v = xs.clone(); v.push(row[i as usize]); v };
        }
        i = (i + 1);
    }
    let mut res: Vec<i64> = vec![];
    let mut gain: i64 = 0;
    i = 0;
    while (i < xs.len()) {
        if (((i + 1) < xs.len()) && (xs[i as usize] == xs[(i + 1) as usize])) {
            let v: i64 = (xs[i as usize] * 2);
            gain = (gain + v);
            res = { let mut v = res.clone(); v.push(v); v };
            i = (i + 2);
        } else {
            res = { let mut v = res.clone(); v.push(xs[i as usize]); v };
            i = (i + 1);
        }
    }
    while (res.len() < g_SIZE) {
        res = { let mut v = res.clone(); v.push(0); v };
    }
    return Map1 {row: res, gain: gain}
}

unsafe fn moveLeft(b: Vec<Vec<i64>>, score: i64) -> Map2 {
    let mut moved: bool = false;
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let r: Map1 = slideLeft(b[y as usize]);
        let new: i64 = g_r["row"];
        g_score = (g_score + g_r["gain"]);
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b[y as usize][x as usize] != new[x]) {
                moved = true;
            }
            b[y as usize][x as usize] = new[x];
            x = (x + 1);
        }
        y = (y + 1);
    }
    return Map2 {board: b, score: g_score, moved: moved}
}

unsafe fn moveRight(b: Vec<Vec<i64>>, score: i64) -> Map2 {
    let mut moved: bool = false;
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut rev: Vec<i64> = reverseRow(b[y as usize]);
        let r: Map1 = slideLeft(rev);
        rev = g_r["row"];
        g_score = (g_score + g_r["gain"]);
        rev = reverseRow(rev);
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b[y as usize][x as usize] != rev[x as usize]) {
                moved = true;
            }
            b[y as usize][x as usize] = rev[x as usize];
            x = (x + 1);
        }
        y = (y + 1);
    }
    return Map2 {board: b, score: g_score, moved: moved}
}

unsafe fn getCol(b: Vec<Vec<i64>>, x: i64) -> Vec<i64> {
    let mut col: Vec<i64> = vec![];
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        col = { let mut v = col.clone(); v.push(b[y as usize][x as usize]); v };
        y = (y + 1);
    }
    return col
}

unsafe fn setCol(b: Vec<Vec<i64>>, x: i64, col: Vec<i64>) {
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        b[y as usize][x as usize] = col[y as usize];
        y = (y + 1);
    }
}

unsafe fn moveUp(b: Vec<Vec<i64>>, score: i64) -> Map2 {
    let mut moved: bool = false;
    let mut x: i64 = 0;
    while (x < g_SIZE) {
        let mut col: Vec<i64> = getCol(b, x);
        let r: Map1 = slideLeft(col);
        let new: i64 = g_r["row"];
        g_score = (g_score + g_r["gain"]);
        let mut y: i64 = 0;
        while (y < g_SIZE) {
            if (b[y as usize][x as usize] != new[y]) {
                moved = true;
            }
            b[y as usize][x as usize] = new[y];
            y = (y + 1);
        }
        x = (x + 1);
    }
    return Map2 {board: b, score: g_score, moved: moved}
}

unsafe fn moveDown(b: Vec<Vec<i64>>, score: i64) -> Map2 {
    let mut moved: bool = false;
    let mut x: i64 = 0;
    while (x < g_SIZE) {
        let mut col: Vec<i64> = reverseRow(getCol(b, x));
        let r: Map1 = slideLeft(col);
        col = g_r["row"];
        g_score = (g_score + g_r["gain"]);
        col = reverseRow(col);
        let mut y: i64 = 0;
        while (y < g_SIZE) {
            if (b[y as usize][x as usize] != col[y as usize]) {
                moved = true;
            }
            b[y as usize][x as usize] = col[y as usize];
            y = (y + 1);
        }
        x = (x + 1);
    }
    return Map2 {board: b, score: g_score, moved: moved}
}

unsafe fn hasMoves(b: Vec<Vec<i64>>) -> bool {
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b[y as usize][x as usize] == 0) {
                return true
            }
            if (((x + 1) < g_SIZE) && (b[y as usize][x as usize] == b[y as usize][(x + 1) as usize])) {
                return true
            }
            if (((y + 1) < g_SIZE) && (b[y as usize][x as usize] == b[(y + 1) as usize][x as usize])) {
                return true
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return false
}

unsafe fn has2048(b: Vec<Vec<i64>>) -> bool {
    let mut y: i64 = 0;
    while (y < g_SIZE) {
        let mut x: i64 = 0;
        while (x < g_SIZE) {
            if (b[y as usize][x as usize] >= 2048) {
                return true
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    return false
}

fn main() {
    unsafe {
        g_SIZE = 4;
        g_board = newBoard();
        g_r = spawnTile(g_board);
        g_full = g_r.full;
        g_score = 0;
        g_board = g_r.board;
        g_r = spawnTile(g_board);
        g_board = g_r.board;
        g_full = g_r.full;
        unsafe { draw(g_board, g_score); }
        while true {
            println!("{}", "Move: ");
            let cmd: String = input().clone();
            let mut moved: bool = false;
            if ((cmd == "a") || (cmd == "A")) {
                let m: Map2 = moveLeft(g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd == "d") || (cmd == "D")) {
                let m: Map2 = moveRight(g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd == "w") || (cmd == "W")) {
                let m: Map2 = moveUp(g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd == "s") || (cmd == "S")) {
                let m: Map2 = moveDown(g_board, g_score);
                g_board = m.board;
                g_score = m.score;
                moved = m.moved;
            }
            if ((cmd == "q") || (cmd == "Q")) {
                break
            }
            if moved.is_some() {
                let r2: Map = spawnTile(g_board);
                g_board = r2.board;
                g_full = r2.full;
                if (g_full && !hasMoves(g_board)) {
                    draw(g_board, g_score);
                    println!("{}", "Game Over");
                    break
                }
            }
            draw(g_board, g_score);
            if has2048(g_board) {
                println!("{}", "You win!");
                break
            }
            if !hasMoves(g_board) {
                println!("{}", "Game Over");
                break
            }
        }
    }
}
