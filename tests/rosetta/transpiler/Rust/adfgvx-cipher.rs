// Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_adfgvx: String = String::new();
static mut g_alphabet: String = String::new();
unsafe fn shuffleStr(mut s: String) -> String {
    let mut arr: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        arr = { let mut v = arr.clone(); v.push(String::from(s[i as usize..(i + 1) as usize].to_string())); v };
        i = (i + 1);
    }
    let mut j = ((arr.len() as i64) - 1);
    while (j > 0) {
        let k = (_now() % (j + 1));
        let tmp: String = arr[j as usize].clone().clone();
        arr[j as usize] = arr[k as usize].clone();
        arr[k as usize] = tmp;
        j = (j - 1);
    }
    let mut out = String::from("");
    i = 0;
    while (i < (arr.len() as i64)) {
        out = format!("{}{}", out, arr[i as usize].clone());
        i = (i + 1);
    }
    return out.clone()
}

unsafe fn createPolybius() -> Vec<String> {
    let shuffled: String = shuffleStr(g_alphabet).clone();
    let mut labels: Vec<String> = vec![];
    let mut li: i64 = 0;
    while (li < (g_adfgvx.len() as i64)) {
        labels = { let mut v = labels.clone(); v.push(String::from(g_adfgvx[li as usize..(li + 1) as usize].to_string())); v };
        li = (li + 1);
    }
    println!("{}", "6 x 6 Polybius square:\n");
    println!("{}", "  | A D F G V X");
    println!("{}", "---------------");
    let mut p: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < 6) {
        let mut row: String = shuffled[(i * 6) as usize..((i + 1) * 6) as usize].to_string().clone();
        p = { let mut v = p.clone(); v.push(String::from(row)); v };
        let mut line: String = format!("{}{}", labels[i as usize].clone(), " | ").clone();
        let mut j: i64 = 0;
        while (j < 6) {
            line = format!("{}{}", format!("{}{}", line, row[j as usize..(j + 1) as usize].to_string()), " ");
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
    return p
}

unsafe fn createKey(mut n: i64) -> String {
    if ((n < 7) || (n > 12)) {
        println!("{}", "Key should be within 7 and 12 letters long.");
    }
    let mut pool = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    let mut key = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        let idx = (_now() % (pool.len() as i64));
        key = format!("{}{}", key, pool.chars().nth(idx as usize).unwrap());
        pool = format!("{}{}", pool[0..idx as usize].to_string(), pool[(idx + 1) as usize..(pool.len() as i64) as usize].to_string());
        i = (i + 1);
    }
    println!("{}", format!("{}{}", "\nThe key is ", key));
    return key.clone()
}

unsafe fn orderKey(mut key: String) -> Vec<i64> {
    let mut pairs = vec![];
    let mut i: i64 = 0;
    while (i < (key.len() as i64)) {
        pairs = { let mut v = pairs.clone(); v.push(vec![key[i as usize..(i + 1) as usize].to_string(), i]); v };
        i = (i + 1);
    }
    let mut n = (pairs.len() as i64);
    let mut m: i64 = 0;
    while (m < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (pairs[j as usize].clone()[0 as usize].clone().as_str() > pairs[(j + 1) as usize].clone()[0 as usize].clone()) {
                let mut tmp: Vec<String> = pairs[j as usize].clone();
                pairs[j as usize] = pairs[(j + 1) as usize].clone();
                pairs[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        m = (m + 1);
    }
    let mut res = vec![];
    i = 0;
    while (i < n) {
        res = { let mut v = res.clone(); v.push(String::from(pairs[i as usize].clone()[1 as usize].clone())); v };
        i = (i + 1);
    }
    return res
}

unsafe fn encrypt(mut polybius: Vec<String>, mut key: String, mut plainText: String) -> String {
    let mut labels: Vec<String> = vec![];
    let mut li: i64 = 0;
    while (li < (g_adfgvx.len() as i64)) {
        labels = { let mut v = labels.clone(); v.push(String::from(g_adfgvx[li as usize..(li + 1) as usize].to_string())); v };
        li = (li + 1);
    }
    let mut temp = String::from("");
    let mut i: i64 = 0;
    while (i < (plainText.len() as i64)) {
        let mut r: i64 = 0;
        while (r < 6) {
            let mut c: i64 = 0;
            while (c < 6) {
                if (polybius[r as usize].clone()[c as usize..(c + 1) as usize].to_string().as_str() == plainText[i as usize..(i + 1) as usize].to_string()) {
                    temp = format!("{}{}", format!("{}{}", temp, labels[r as usize..(r + 1) as usize].to_vec()), labels[c as usize..(c + 1) as usize].to_vec());
                }
                c = (c + 1);
            }
            r = (r + 1);
        }
        i = (i + 1);
    }
    let mut colLen = ((temp.len() as i64) / (key.len() as i64));
    if (((temp.len() as i64) % (key.len() as i64)) > 0) {
        colLen = (colLen + 1);
    }
    let mut table: Vec<Vec<String>> = vec![];
    let mut rIdx: i64 = 0;
    while (rIdx < colLen) {
        let mut row: Vec<String> = vec![];
        let mut j: i64 = 0;
        while (j < (key.len() as i64)) {
            row = { let mut v = row.clone(); v.push(String::from("")); v };
            j = (j + 1);
        }
        table = { let mut v = table.clone(); v.push(row); v };
        rIdx = (rIdx + 1);
    }
    let mut idx: i64 = 0;
    while (idx < (temp.len() as i64)) {
        let row: i64 = (idx / (key.len() as i64));
        let col: i64 = (idx % (key.len() as i64));
        table[row as usize][col as usize] = temp[idx as usize..(idx + 1) as usize].to_string();
        idx = (idx + 1);
    }
    let mut order: Vec<i64> = orderKey(key);
    let mut cols: Vec<String> = vec![];
    let mut ci: i64 = 0;
    while (ci < (key.len() as i64)) {
        let mut colStr = String::from("");
        let mut ri: i64 = 0;
        while (ri < colLen) {
            colStr = format!("{}{}", colStr, table[ri as usize].clone()[order[ci as usize] as usize].clone());
            ri = (ri + 1);
        }
        cols = { let mut v = cols.clone(); v.push(String::from(colStr)); v };
        ci = (ci + 1);
    }
    let mut result = String::from("");
    ci = 0;
    while (ci < (cols.len() as i64)) {
        result = format!("{}{}", result, cols[ci as usize].clone());
        if (ci < ((cols.len() as i64) - 1)) {
            result = format!("{}{}", result, " ");
        }
        ci = (ci + 1);
    }
    return result.clone()
}

unsafe fn indexOf(mut s: String, mut ch: String) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s[i as usize..(i + 1) as usize].to_string().as_str() == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
}

unsafe fn decrypt(mut polybius: Vec<String>, mut key: String, mut cipherText: String) -> String {
    let mut colStrs: Vec<String> = vec![];
    let mut start: i64 = 0;
    let mut i: i64 = 0;
    while (i <= (cipherText.len() as i64)) {
        if ((i == (cipherText.len() as i64)) || (cipherText.chars().nth(i as usize).unwrap() == " ")) {
            colStrs = { let mut v = colStrs.clone(); v.push(String::from(cipherText[start as usize..i as usize].to_string())); v };
            start = (i + 1);
        }
        i = (i + 1);
    }
    let mut maxColLen: i64 = 0;
    i = 0;
    while (i < (colStrs.len() as i64)) {
        if ((colStrs[i as usize].clone().len() as i64) > maxColLen) {
            maxColLen = (colStrs[i as usize].clone().len() as i64);
        }
        i = (i + 1);
    }
    let mut cols: Vec<Vec<String>> = vec![];
    i = 0;
    while (i < (colStrs.len() as i64)) {
        let mut s: String = colStrs[i as usize].clone().clone();
        let mut ls: Vec<String> = vec![];
        let mut j: i64 = 0;
        while (j < (s.len() as i64)) {
            ls = { let mut v = ls.clone(); v.push(String::from(s[j as usize..(j + 1) as usize].to_string())); v };
            j = (j + 1);
        }
        if ((s.len() as i64) < maxColLen) {
            let mut pad: Vec<String> = vec![];
            let mut k: i64 = 0;
            while (k < maxColLen) {
                if (k < (ls.len() as i64)) {
                    pad = { let mut v = pad.clone(); v.push(String::from(ls[k as usize].clone())); v };
                } else {
                    pad = { let mut v = pad.clone(); v.push(String::from("")); v };
                }
                k = (k + 1);
            }
            cols = { let mut v = cols.clone(); v.push(pad); v };
        } else {
            cols = { let mut v = cols.clone(); v.push(ls); v };
        }
        i = (i + 1);
    }
    let mut table: Vec<Vec<String>> = vec![];
    let mut r: i64 = 0;
    while (r < maxColLen) {
        let mut row: Vec<String> = vec![];
        let mut c: i64 = 0;
        while (c < (key.len() as i64)) {
            row = { let mut v = row.clone(); v.push(String::from("")); v };
            c = (c + 1);
        }
        table = { let mut v = table.clone(); v.push(row); v };
        r = (r + 1);
    }
    let mut order: Vec<i64> = orderKey(key);
    r = 0;
    while (r < maxColLen) {
        let mut c: i64 = 0;
        while (c < (key.len() as i64)) {
            table[r as usize][order[c as usize] as usize] = cols[c as usize].clone()[r as usize].clone();
            c = (c + 1);
        }
        r = (r + 1);
    }
    let mut temp = String::from("");
    r = 0;
    while (r < (table.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (table[r as usize].clone().len() as i64)) {
            temp = format!("{}{}", temp, table[r as usize].clone()[j as usize].clone());
            j = (j + 1);
        }
        r = (r + 1);
    }
    let mut plainText = String::from("");
    let mut idx: i64 = 0;
    while (idx < (temp.len() as i64)) {
        let rIdx: i64 = indexOf(g_adfgvx, temp[idx as usize..(idx + 1) as usize].to_string());
        let cIdx: i64 = indexOf(g_adfgvx, temp[(idx + 1) as usize..(idx + 2) as usize].to_string());
        plainText = format!("{}{}", plainText, polybius[rIdx as usize].clone()[cIdx]);
        idx = (idx + 2);
    }
    return plainText.clone()
}

unsafe fn mochi_main() {
    let plainText = String::from("ATTACKAT1200AM");
    let mut polybius: Vec<String> = createPolybius();
    let key: String = createKey(9).clone();
    println!("{}", format!("{}{}", "\nPlaintext : ", plainText));
    let cipherText: String = encrypt(polybius.clone(), key, plainText).clone();
    println!("{}", format!("{}{}", "\nEncrypted : ", cipherText));
    let plainText2: String = decrypt(polybius.clone(), key, cipherText).clone();
    println!("{}", format!("{}{}", "\nDecrypted : ", plainText2));
}

fn main() {
    unsafe {
        g_adfgvx = String::from("ADFGVX");
        g_alphabet = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        unsafe { mochi_main(); }
    }
}
