warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:53:124
   |
53 |         static g_nodes: LazyLock<Mutex<HashMap<i64, HashMap<String, f64>>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
   |                                                                                                                            ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:54:36
   |
54 |         static mut g_head: i64 = 0;;
   |                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:55:36
   |
55 |         static mut g_tail: i64 = 0;;
   |                                    ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:68:2
   |
68 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:81:50
   |
81 |         static mut g_out: String = String::new();;
   |                                                  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:82:34
   |
82 |         static mut g_id: i64 = 0;;
   |                                  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:47:18
   |
47 |         g_head = (0 - 1);
   |                  ^     ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
47 -         g_head = (0 - 1);
47 +         g_head = 0 - 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:48:18
   |
48 |         g_tail = (0 - 1);
   |                  ^     ^
   |
help: remove these parentheses
   |
48 -         g_tail = (0 - 1);
48 +         g_tail = 0 - 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:57:8
   |
57 |     if (g_head == (0 - 1)) {
   |        ^                 ^
   |
help: remove these parentheses
   |
57 -     if (g_head == (0 - 1)) {
57 +     if g_head == (0 - 1) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:61:23
   |
61 |     let mut id: i64 = (g_nodes.lock().unwrap()[&g_head].clone()["next".as_str()] as i64);
   |                       ^                                                                ^
   |
help: remove these parentheses
   |
61 -     let mut id: i64 = (g_nodes.lock().unwrap()[&g_head].clone()["next".as_str()] as i64);
61 +     let mut id: i64 = g_nodes.lock().unwrap()[&g_head].clone()["next".as_str()] as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:62:11
   |
62 |     while (id != (0 - 1)) {
   |           ^             ^
   |
help: remove these parentheses
   |
62 -     while (id != (0 - 1)) {
62 +     while id != (0 - 1) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:64:14
   |
64 |         id = (g_nodes.lock().unwrap()[&id].clone()["next".as_str()] as i64);
   |              ^                                                            ^
   |
help: remove these parentheses
   |
64 -         id = (g_nodes.lock().unwrap()[&id].clone()["next".as_str()] as i64);
64 +         id = g_nodes.lock().unwrap()[&id].clone()["next".as_str()] as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:83:15
   |
83 |         while (g_id != (0 - 1)) {
   |               ^               ^
   |
help: remove these parentheses
   |
83 -         while (g_id != (0 - 1)) {
83 +         while g_id != (0 - 1) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:85:20
   |
85 |             g_id = (g_nodes.lock().unwrap()[&g_id].clone()["prev".as_str()] as i64);
   |                    ^                                                              ^
   |
help: remove these parentheses
   |
85 -             g_id = (g_nodes.lock().unwrap()[&g_id].clone()["prev".as_str()] as i64);
85 +             g_id = g_nodes.lock().unwrap()[&g_id].clone()["prev".as_str()] as i64;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:90:32
   |
90 |         let duration_us: i64 = ((_end - _start) / 1000);
   |                                ^                      ^
   |
help: remove these parentheses
   |
90 -         let duration_us: i64 = ((_end - _start) / 1000);
90 +         let duration_us: i64 = (_end - _start) / 1000;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:91:33
   |
91 |         let memory_bytes: i64 = (_end_mem - _start_mem);
   |                                 ^                     ^
   |
help: remove these parentheses
   |
91 -         let memory_bytes: i64 = (_end_mem - _start_mem);
91 +         let memory_bytes: i64 = _end_mem - _start_mem;
   |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:70:130
   |
70 | ...ng::from("value"), "A"), (String::from("next"), (0 - 1)), (String::from("prev"), (0 - 1))]); _map.insert(0.clone(), _val); };
   |                                                    ^^^^^^^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:70:163
   |
70 | ...:from("next"), (0 - 1)), (String::from("prev"), (0 - 1))]); _map.insert(0.clone(), _val); };
   |                                                    ^^^^^^^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:70:198
   |
70 | ...rev"), (0 - 1))]); _map.insert(0.clone(), _val); };
   |                            ------            ^^^^ expected `HashMap<String, f64>`, found `HashMap<String, &str>`
   |                            |
   |                            arguments to this method are incorrect
   |
   = note: expected struct `HashMap<_, f64>`
              found struct `HashMap<_, &str>`
help: the return type of this call is `HashMap<String, &str>` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:70:175
   |
70 | ...:from("prev"), (0 - 1))]); _map.insert(0.clone(), _val); };
   |                               ^^^^^^^^^^^^^^^^^^^^^^^----^
   |                                                      |
   |                                                      this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:73:130
   |
73 | ...ng::from("value"), "B"), (String::from("next"), (0 - 1)), (String::from("prev"), 0)]); _map.insert(1.clone(), _val); };
   |                                                    ^^^^^^^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:73:163
   |
73 | ...ng::from("next"), (0 - 1)), (String::from("prev"), 0)]); _map.insert(1.clone(), _val); };
   |                                                       ^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:73:192
   |
73 | ...rom("prev"), 0)]); _map.insert(1.clone(), _val); };
   |                            ------            ^^^^ expected `HashMap<String, f64>`, found `HashMap<String, &str>`
   |                            |
   |                            arguments to this method are incorrect
   |
   = note: expected struct `HashMap<_, f64>`
              found struct `HashMap<_, &str>`
help: the return type of this call is `HashMap<String, &str>` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:73:169
   |
73 | ...tring::from("prev"), 0)]); _map.insert(1.clone(), _val); };
   |                               ^^^^^^^^^^^^^^^^^^^^^^^----^
   |                                                      |
   |                                                      this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: arguments to this method are incorrect
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:74:37
   |
74 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 1);
   |                                     ^^^^^^ --------------  - expected `f64`, found integer
   |                                            |
   |                                            expected `String`, found `&str`
   |
help: the return type of this call is `{integer}` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:74:9
   |
74 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 1);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^
   |                                                            |
   |                                                            this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12
help: try using a conversion method
   |
74 -         g_nodes.lock().unwrap()[&0].insert("next".clone(), 1);
74 +         g_nodes.lock().unwrap()[&0].insert("next".to_string(), 1);
   |
help: use a float literal
   |
74 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 1.0);
   |                                                             ++

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:77:130
   |
77 | ...tring::from("value"), "C"), (String::from("next"), 1), (String::from("prev"), 0)]); _map.insert(2.clone(), _val); };
   |                                                       ^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:77:157
   |
77 | ... (String::from("next"), 1), (String::from("prev"), 0)]); _map.insert(2.clone(), _val); };
   |                                                       ^ expected `&str`, found integer

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:77:186
   |
77 | ...rom("prev"), 0)]); _map.insert(2.clone(), _val); };
   |                            ------            ^^^^ expected `HashMap<String, f64>`, found `HashMap<String, &str>`
   |                            |
   |                            arguments to this method are incorrect
   |
   = note: expected struct `HashMap<_, f64>`
              found struct `HashMap<_, &str>`
help: the return type of this call is `HashMap<String, &str>` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:77:163
   |
77 | ...tring::from("prev"), 0)]); _map.insert(2.clone(), _val); };
   |                               ^^^^^^^^^^^^^^^^^^^^^^^----^
   |                                                      |
   |                                                      this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: arguments to this method are incorrect
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:78:37
   |
78 |         g_nodes.lock().unwrap()[&1].insert("prev".clone(), 2);
   |                                     ^^^^^^ --------------  - expected `f64`, found integer
   |                                            |
   |                                            expected `String`, found `&str`
   |
help: the return type of this call is `{integer}` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:78:9
   |
78 |         g_nodes.lock().unwrap()[&1].insert("prev".clone(), 2);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^
   |                                                            |
   |                                                            this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12
help: try using a conversion method
   |
78 -         g_nodes.lock().unwrap()[&1].insert("prev".clone(), 2);
78 +         g_nodes.lock().unwrap()[&1].insert("prev".to_string(), 2);
   |
help: use a float literal
   |
78 |         g_nodes.lock().unwrap()[&1].insert("prev".clone(), 2.0);
   |                                                             ++

error[E0308]: arguments to this method are incorrect
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:79:37
   |
79 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 2);
   |                                     ^^^^^^ --------------  - expected `f64`, found integer
   |                                            |
   |                                            expected `String`, found `&str`
   |
help: the return type of this call is `{integer}` due to the type of the argument passed
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:79:9
   |
79 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 2);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^
   |                                                            |
   |                                                            this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12
help: try using a conversion method
   |
79 -         g_nodes.lock().unwrap()[&0].insert("next".clone(), 2);
79 +         g_nodes.lock().unwrap()[&0].insert("next".to_string(), 2);
   |
help: use a float literal
   |
79 |         g_nodes.lock().unwrap()[&0].insert("next".clone(), 2.0);
   |                                                             ++

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:84:113
   |
84 |             g_out = format!("{}{}", format!("{}{}", g_out, " "), g_nodes.lock().unwrap()[&g_id].clone()["value".as_str()]);
   |                                                                                                                 ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:85:67
   |
85 |             g_id = (g_nodes.lock().unwrap()[&g_id].clone()["prev".as_str()] as i64);
   |                                                                   ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:60:95
   |
60 |     let mut r: String = format!("{}{}", "[", g_nodes.lock().unwrap()[&g_head].clone()["value".as_str()]).clone();
   |                                                                                               ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:61:72
   |
61 |     let mut id: i64 = (g_nodes.lock().unwrap()[&g_head].clone()["next".as_str()] as i64);
   |                                                                        ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:63:99
   |
63 |         r = format!("{}{}", format!("{}{}", r, " "), g_nodes.lock().unwrap()[&id].clone()["value".as_str()]);
   |                                                                                                   ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error[E0658]: use of unstable library feature `str_as_str`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/doubly-linked-list-traversal.rs:64:59
   |
64 |         id = (g_nodes.lock().unwrap()[&id].clone()["next".as_str()] as i64);
   |                                                           ^^^^^^
   |
   = note: see issue #130366 <https://github.com/rust-lang/rust/issues/130366> for more information

error: aborting due to 18 previous errors; 16 warnings emitted

Some errors have detailed explanations: E0308, E0658.
For more information about an error, try `rustc --explain E0308`.
