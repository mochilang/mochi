// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:43 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct StackItem {
    start: i64,
    len: i64,
    index: i64,
}
impl std::fmt::Display for StackItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"start\": {}", self.start)?;
        write!(f, ", ")?;
        write!(f, "\"len\": {}", self.len)?;
        write!(f, ", ")?;
        write!(f, "\"index\": {}", self.index)?;
        write!(f, "}}")
    }
}

static mut g_width: i64 = 0;
static mut g_height: i64 = 0;
static mut g_lines: Vec<String> = Vec::new();
static mut g_stack: Vec<HashMap<String, i64>> = Vec::new();
unsafe fn setChar(mut s: String, mut idx: i64, ch: &str) -> String {
    return format!("{}{}", format!("{}{}", { let tmp = &s; tmp.chars().skip(0 as usize).take((idx - 0) as usize).collect::<String>() }, ch), { let tmp = &s; tmp.chars().skip((idx + 1) as usize).take(((s.len() as i64) - (idx + 1)) as usize).collect::<String>() }).clone()
}

fn main() {
    unsafe {
        g_width = 81;
        g_height = 5;
        g_lines = vec![];
        g_stack = vec![HashMap::from([(String::from("start"), 0), (String::from("len"), g_width), (String::from("index"), 1)])];
        for i in 0..g_height {
            let mut row: String = String::from("").clone();
            let mut j: i64 = 0;
            while (j < g_width) {
                row = format!("{}{}", row, "*");
                j = (j + 1);
            }
            g_lines = { let mut _v = g_lines.clone().clone(); _v.push(row.clone()); _v };
        }
        while ((g_stack.clone().len() as i64) > 0) {
            let mut frame: HashMap<String, i64> = g_stack.clone()[((g_stack.clone().len() as i64) - 1) as usize].clone();
            g_stack = g_stack.clone()[0 as usize..((g_stack.clone().len() as i64) - 1) as usize].to_vec();
            let mut start: i64 = frame.get("start").cloned().unwrap_or_default();
            let mut lenSeg: i64 = frame.get("len").cloned().unwrap_or_default();
            let mut index: i64 = frame.get("index").cloned().unwrap_or_default();
            let mut seg: i64 = (lenSeg / 3);
            if (seg == 0) {
                continue
            }
            let mut i: i64 = index;
            while (i < g_height) {
                let mut j: i64 = (start + seg);
                while (j < (start + (2 * seg))) {
                    g_lines[i as usize] = setChar(g_lines.clone()[i as usize].clone(), j, &" ");
                    j = (j + 1);
                }
                i = (i + 1);
            }
            g_stack = { let mut _v = g_stack.clone().clone(); _v.push(HashMap::from([(String::from("start"), start), (String::from("len"), seg), (String::from("index"), (index + 1))])); _v };
            g_stack = { let mut _v = g_stack.clone().clone(); _v.push(HashMap::from([(String::from("start"), (start + (seg * 2))), (String::from("len"), seg), (String::from("index"), (index + 1))])); _v };
        }
        for line in g_lines.clone().iter().cloned() {
            println!("{}", line);
        }
    }
}
