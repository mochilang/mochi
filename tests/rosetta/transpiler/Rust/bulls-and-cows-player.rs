// Generated by Mochi transpiler v0.10.56 on 2025-08-04 07:49 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn fields(mut s: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut cur: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (((ch.as_str() == " ") || (ch.as_str() == "\t")) || (ch.as_str() == "\n")) {
            if ((cur.len() as i64) > 0) {
                words = { let mut _v = words.clone(); _v.push(cur.clone()); _v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        words = { let mut _v = words.clone(); _v.push(cur.clone()); _v };
    }
    return words
};
    fn makePatterns() -> Vec<String> {
    let mut digits: Vec<String> = vec![String::from("1"), String::from("2"), String::from("3"), String::from("4"), String::from("5"), String::from("6"), String::from("7"), String::from("8"), String::from("9")];
    let mut pats: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (digits.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (digits.len() as i64)) {
            if (j != i) {
                let mut k: i64 = 0;
                while (k < (digits.len() as i64)) {
                    if ((k != i) && (k != j)) {
                        let mut l: i64 = 0;
                        while (l < (digits.len() as i64)) {
                            if (((l != i) && (l != j)) && (l != k)) {
                                pats = { let mut _v = pats.clone(); _v.push(format!("{}{}", format!("{}{}", format!("{}{}", digits[i as usize].clone(), digits[j as usize].clone()), digits[k as usize].clone()), digits[l as usize].clone())); _v };
                            }
                            l = (l + 1);
                        }
                    }
                    k = (k + 1);
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return pats
};
    fn mochi_main() {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Cows and bulls/player\n", "You think of four digit number of unique digits in the range 1 to 9.\n"), "I guess.  You score my guess:\n"), "    A correct digit but not in the correct place is a cow.\n"), "    A correct digit in the correct place is a bull.\n"), "You give my score as two numbers separated with a space."));
    let mut patterns: Vec<String> = makePatterns();
    loop {
        if ((patterns.len() as i64) == 0) {
            println!("{}", "Oops, check scoring.");
            return
        }
        let mut guess: String = patterns[0 as usize].clone().clone();
        patterns = patterns[1 as usize..].to_vec();
        let mut cows: i64 = 0;
        let mut bulls: i64 = 0;
        loop {
            println!("{}", format!("{}{}", format!("{}{}", "My guess: ", guess), ".  Score? (c b) "));
            let mut line: String = input().clone();
            let mut toks: Vec<String> = fields(line.clone());
            if ((toks.len() as i64) == 2) {
                let mut c = { let n: i64 = toks[0 as usize].clone().parse().unwrap(); n };
                let mut b = { let n: i64 = toks[1 as usize].clone().parse().unwrap(); n };
                if (((((c >= 0) && (c <= 4)) && (b >= 0)) && (b <= 4)) && ((c + b) <= 4)) {
                    cows = c;
                    bulls = b;
                    break
                }
            }
            println!("{}", "Score guess as two numbers: cows bulls");
        }
        if (bulls == 4) {
            println!("{}", "I did it. :)");
            return
        }
        let mut next: Vec<String> = vec![];
        let mut idx: i64 = 0;
        while (idx < (patterns.len() as i64)) {
            let mut pat: String = patterns[idx as usize].clone().clone();
            let mut c: i64 = 0;
            let mut b: i64 = 0;
            let mut i: i64 = 0;
            while (i < 4) {
                let mut cg: String = { let tmp = &guess; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
                let mut cp: String = { let tmp = &pat; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
                if (cg.as_str() == cp.as_str()) {
                    b = (b + 1);
                } else if ({ let s = pat.clone(); let p = cg.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } } >= 0) {
                    c = (c + 1);
                }
                i = (i + 1);
            }
            if ((c == cows) && (b == bulls)) {
                next = { let mut _v = next.clone(); _v.push(pat.clone()); _v };
            }
            idx = (idx + 1);
        }
        patterns = next.clone();
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
