// Generated by Mochi transpiler v0.10.56 on 2025-08-04 06:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Foobar {
    Exported: i64,
    unexported: i64,
}
impl std::fmt::Display for Foobar {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"Exported\": {}", self.Exported)?;
        write!(f, ", ")?;
        write!(f, "\"unexported\": {}", self.unexported)?;
        write!(f, "}}")
    }
}

static mut g_obj: Foobar = Foobar { Exported: 0, unexported: 0 };
fn main() {
    unsafe {
        g_obj = Foobar {Exported: 12, unexported: 42};
                let _start: i64 = _now();
        unsafe fn examineAndModify(mut f: Foobar) -> Foobar {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", " v: {", f.Exported.to_string()), " "), f.unexported.to_string()), "} = {"), f.Exported.to_string()), " "), f.unexported.to_string()), "}"));
    println!("{}", "    Idx Name       Type CanSet");
    println!("{}", "     0: Exported   int  true");
    println!("{}", "     1: unexported int  false");
    f.Exported = 16;
    f.unexported = 44;
    println!("{}", "  modified unexported field via unsafe");
    return f
};
        unsafe fn anotherExample() {
    println!("{}", "bufio.ReadByte returned error: unsafely injected error value into bufio inner workings");
};
        static mut g_obj: Foobar = Foobar { Exported: 0, unexported: 0 };;
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "obj: {", g_obj.clone().Exported.to_string()), " "), g_obj.clone().unexported.to_string()), "}"));
        g_obj = examineAndModify(g_obj.clone());
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "obj: {", g_obj.clone().Exported.to_string()), " "), g_obj.clone().unexported.to_string()), "}"));
        anotherExample();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
