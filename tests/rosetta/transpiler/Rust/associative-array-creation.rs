// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn removeKey(m: &HashMap<String, i64>, k: &str) -> HashMap<String, i64> {
    let mut out: HashMap<String, i64> = HashMap::new();
    for key in m.keys() {
        if (key != k) {
            out.insert(key.clone(), (*m)[key.as_str()]);
        }
    }
    return out
};
    fn mochi_main() {
    let mut x: HashMap<String, i64> = Default::default();
    x = HashMap::new();
    x.insert(String::from("foo"), 3);
    let mut y1: i64 = x.get("bar").cloned().unwrap_or_default();
    let mut ok: bool = x.contains_key("bar");
    println!("{}", y1);
    println!("{}", if ok { 1 } else { 0 });
    x = removeKey(&x, &"foo");
    x = HashMap::from([(String::from("foo"), 2), (String::from("bar"), 42), (String::from("baz"), -1)]);
    println!("{}", format!("{} {} {}", x.get("foo").cloned().unwrap_or_default(), x.get("bar").cloned().unwrap_or_default(), x.get("baz").cloned().unwrap_or_default()).trim_end());
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
