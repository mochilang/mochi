// Generated by Mochi transpiler v0.10.55 on 2025-08-02 17:26 +0700
use std::collections::HashMap;
fn removeKey(m: &HashMap<String, i64>, k: &str) -> HashMap<String, i64> {
    let mut out: HashMap<String, i64> = HashMap::new();
    for key in m.keys() {
        if (key != k) {
            out.insert(key.clone(), (*m)[key.as_str()]);
        }
    }
    return out
}

fn mochi_main() {
    let mut x: HashMap<String, i64> = Default::default();
    x = HashMap::new();
    x.insert(String::from("foo"), 3);
    let mut y1: i64 = x.get("bar").cloned().unwrap_or_default();
    let mut ok: bool = x.contains_key("bar");
    println!("{}", y1);
    println!("{}", if ok { 1 } else { 0 });
    x = removeKey(&x, &"foo");
    x = HashMap::from([(String::from("foo"), 2), (String::from("bar"), 42), (String::from("baz"), -1)]);
    println!("{}", format!("{} {} {}", x.get("foo").cloned().unwrap_or_default(), x.get("bar").cloned().unwrap_or_default(), x.get("baz").cloned().unwrap_or_default()).trim_end());
}

fn main() {
    mochi_main();
}
