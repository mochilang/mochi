// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn contains(mut xs: Vec<i64>, mut n: i64) -> bool {
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (xs[i as usize] == n) {
            return true
        }
        i = (i + 1);
    }
    return false
};
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    let mut y: i64 = b;
    while (y != 0) {
        let mut t: i64 = (x % y);
        x = y;
        y = t;
    }
    if (x < 0) {
        x = -x;
    }
    return x
};
    fn sortInts(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = xs;
    let mut n = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut tmp: i64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn areSame(mut s: Vec<i64>, mut t: Vec<i64>) -> bool {
    if ((s.len() as i64) != (t.len() as i64)) {
        return false
    }
    let mut a: Vec<i64> = sortInts(s.clone());
    let mut b: Vec<i64> = sortInts(t.clone());
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        if (a[i as usize] != b[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    fn printSlice(mut start: i64, mut seq: Vec<i64>) {
    let mut first: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 30) {
        first = { let mut _v = first.clone(); _v.push(seq[i as usize]); _v };
        i = (i + 1);
    }
    let mut pad = String::from("");
    if (start < 10) {
        pad = String::from(" ");
    }
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "EKG(", pad), start.to_string()), "): "), format!("{:?}", first)));
};
    fn mochi_main() {
    let mut limit: i64 = 100;
    let mut starts: Vec<i64> = vec![2, 5, 7, 9, 10];
    let mut ekg: Vec<Vec<i64>> = vec![];
    let mut s: i64 = 0;
    while (s < (starts.len() as i64)) {
        let mut seq: Vec<i64> = vec![1, starts[s as usize]];
        let mut n: i64 = 2;
        while (n < limit) {
            let mut i: i64 = 2;
            let mut done: bool = false;
            while !done {
                if (!seq.contains(i) && (gcd(seq[(n - 1) as usize], i) > 1)) {
                    seq = { let mut _v = seq.clone(); _v.push(i); _v };
                    done = true;
                }
                i = (i + 1);
            }
            n = (n + 1);
        }
        ekg = { let mut _v = ekg.clone(); _v.push(seq.clone()); _v };
        printSlice(starts[s as usize], seq.clone());
        s = (s + 1);
    }
    let mut i: i64 = 2;
    let mut found: bool = false;
    while (i < limit) {
        if ((ekg[1 as usize].clone()[i as usize] == ekg[2 as usize].clone()[i as usize]) && areSame(ekg[1 as usize].clone()[0..i as usize].to_vec(), ekg[2 as usize].clone()[0..i as usize].to_vec())) {
            println!("{}", format!("{}{}", "\nEKG(5) and EKG(7) converge at term ", (i + 1).to_string()));
            found = true;
            break
        }
        i = (i + 1);
    }
    if !found {
        println!("{}", format!("{}{}", format!("{}{}", "\nEKG5(5) and EKG(7) do not converge within ", limit.to_string()), " terms"));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
