// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:45 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_width: i64 = 0;
static mut g_height: i64 = 0;
static mut g_seed: i64 = 0;
static mut g_y: i64 = 0;
fn main() {
    unsafe {
        g_width = 320;
        g_height = 240;
        g_seed = (_now() % 2147483647);
        g_y = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_width: i64 = 0;;
        static mut g_height: i64 = 0;;
        static mut g_seed: i64 = 0;;
        unsafe fn nextRand() -> i64 {
    g_seed = (((g_seed * 1664525) + 1013904223) % 2147483647);
    return g_seed
};
        unsafe fn randBit() -> i64 {
    let mut r: i64 = nextRand();
    if ((r % 2) == 0) {
        return 0
    }
    return 255
};
        println!("{}", "P2");
        println!("{}", format!("{}{}", format!("{}{}", g_width.to_string(), " "), g_height.to_string()));
        println!("{}", "255");
        static mut g_y: i64 = 0;;
        while (g_y < g_height) {
            let mut line: String = String::from("").clone();
            let mut x: i64 = 0;
            while (x < g_width) {
                let mut val: i64 = randBit();
                line = format!("{}{}", line, val.to_string());
                if (x < (g_width - 1)) {
                    line = format!("{}{}", line, " ");
                }
                x = (x + 1);
            }
            println!("{}", line);
            g_y = (g_y + 1);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
