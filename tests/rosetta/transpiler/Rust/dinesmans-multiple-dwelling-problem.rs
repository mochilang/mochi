// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn absInt(mut n: i64) -> i64 {
    if (n < 0) {
        return -n
    }
    return n
};
    fn mochi_main() {
    let mut b: i64 = 1;
    while (b <= 5) {
        if (b != 5) {
            let mut c: i64 = 1;
            while (c <= 5) {
                if ((c != 1) && (c != b)) {
                    let mut f: i64 = 1;
                    while (f <= 5) {
                        if (((((f != 1) && (f != 5)) && (f != b)) && (f != c)) && (absInt((f - c)) > 1)) {
                            let mut m: i64 = 1;
                            while (m <= 5) {
                                if ((((m != b) && (m != c)) && (m != f)) && (m > c)) {
                                    let mut s: i64 = 1;
                                    while (s <= 5) {
                                        if (((((s != b) && (s != c)) && (s != f)) && (s != m)) && (absInt((s - f)) > 1)) {
                                            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Baker in ", b.to_string()), ", Cooper in "), c.to_string()), ", Fletcher in "), f.to_string()), ", Miller in "), m.to_string()), ", Smith in "), s.to_string()), "."));
                                            return
                                        }
                                        s = (s + 1);
                                    }
                                }
                                m = (m + 1);
                            }
                        }
                        f = (f + 1);
                    }
                }
                c = (c + 1);
            }
        }
        b = (b + 1);
    }
    println!("{}", "No solution found.");
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
