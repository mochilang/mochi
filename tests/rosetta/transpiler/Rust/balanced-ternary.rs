// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    bt: Vec<i64>,
    ok: bool,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"bt\": {:?}", self.bt)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Map1 {
    bt: Vec<i64>,
    ok: bool,
}
impl std::fmt::Display for Map1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"bt\": {:?}", self.bt)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn trimLeftZeros(mut s: String) -> String {
    let mut i: i64 = 0;
    while ((i < (s.len() as i64)) && ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == "0")) {
        i = (i + 1);
    }
    return { let tmp = &s; tmp.chars().skip(i as usize).take(((s.len() as i64) - i) as usize).collect::<String>() }.clone()
};
    fn btString(mut s: String) -> Map1 {
    s = trimLeftZeros(s);
    let mut b: Vec<i64> = vec![];
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == "+") {
            b = { let mut _v = b.clone(); _v.push(1); _v };
        } else {
            if (ch.as_str() == "0") {
                b = { let mut _v = b.clone(); _v.push(0); _v };
            } else {
                if (ch.as_str() == "-") {
                    b = { let mut _v = b.clone(); _v.push((0 - 1)); _v };
                } else {
                    return Map {bt: vec![], ok: false}
                }
            }
        }
        i = (i - 1);
    }
    return Map1 {bt: b, ok: true}
};
    fn btToString(mut b: Vec<i64>) -> String {
    if ((b.len() as i64) == 0) {
        return String::from("0")
    }
    let mut r = String::from("");
    let mut i = ((b.len() as i64) - 1);
    while (i >= 0) {
        let d: i64 = b[i as usize];
        if (d == (0 - 1)) {
            r = format!("{}{}", r, "-");
        } else {
            if (d == 0) {
                r = format!("{}{}", r, "0");
            } else {
                r = format!("{}{}", r, "+");
            }
        }
        i = (i - 1);
    }
    return r.clone()
};
    fn btInt(mut i: i64) -> Vec<i64> {
    if (i == 0) {
        return vec![]
    }
    let mut n: i64 = i;
    let mut b: Vec<i64> = vec![];
    while (n != 0) {
        let mut m: i64 = (n % 3);
        n = (n / 3);
        if (m == 2) {
            m = (0 - 1);
            n = (n + 1);
        } else {
            if (m == (0 - 2)) {
                m = 1;
                n = (n - 1);
            }
        }
        b = { let mut _v = b.clone(); _v.push(m); _v };
    }
    return b
};
    fn btToInt(mut b: Vec<i64>) -> i64 {
    let mut r: i64 = 0;
    let mut pt: i64 = 1;
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        r = (r + (b[i as usize] * pt));
        pt = (pt * 3);
        i = (i + 1);
    }
    return r
};
    fn btNeg(mut b: Vec<i64>) -> Vec<i64> {
    let mut r: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        r = { let mut _v = r.clone(); _v.push(-b[i as usize]); _v };
        i = (i + 1);
    }
    return r
};
    fn btAdd(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    return btInt((btToInt(a.clone()) + btToInt(b.clone())))
};
    fn btMul(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    return btInt((btToInt(a.clone()) * btToInt(b.clone())))
};
    fn padLeft(mut s: String, mut w: i64) -> String {
    let mut r: String = s.clone();
    while ((r.len() as i64) < w) {
        r = format!("{}{}", " ", r);
    }
    return r.clone()
};
    fn show(mut label: String, mut b: Vec<i64>) {
    let l: String = padLeft(label, 7).clone();
    let bs: String = padLeft(btToString(b.clone()), 12).clone();
    let is: String = padLeft(btToInt(b.clone()).to_string().to_string(), 7).clone();
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", l, " "), bs), " "), is));
};
    fn mochi_main() {
    let ares: Map1 = btString(String::from("+-0++0+"));
    let mut a: Vec<i64> = ares.bt;
    let mut b: Vec<i64> = btInt(-436);
    let cres: Map1 = btString(String::from("+-++-"));
    let mut c: Vec<i64> = cres.bt;
    show(String::from("a:"), a.clone());
    show(String::from("b:"), b.clone());
    show(String::from("c:"), c.clone());
    show(String::from("a(b-c):"), btMul(a.clone(), btAdd(b.clone(), btNeg(c.clone()))));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
