// Generated by Mochi transpiler v0.10.41 on 2025-07-26 23:43 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn sortRunes(mut s: String) -> String {
    let mut arr: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        arr = { let mut v = arr.clone(); v.push(String::from(s[i as usize..(i + 1) as usize].to_string())); v };
        i = (i + 1);
    }
    let mut n = (arr.len() as i64);
    let mut m: i64 = 0;
    while (m < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize].clone().as_str() > arr[(j + 1) as usize].clone()) {
                let tmp: String = arr[j as usize].clone().clone();
                arr[j as usize] = arr[(j + 1) as usize].clone();
                arr[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        m = (m + 1);
    }
    let mut out = String::from("");
    i = 0;
    while (i < n) {
        out = format!("{}{}", out, arr[i as usize].clone());
        i = (i + 1);
    }
    return out.clone()
};
    fn sortStrings(mut xs: Vec<String>) -> Vec<String> {
    let mut res: Vec<String> = vec![];
    let mut tmp: Vec<String> = xs;
    while ((tmp.len() as i64) > 0) {
        let mut min: String = tmp[0 as usize].clone().clone();
        let mut idx: i64 = 0;
        let mut i: i64 = 1;
        while (i < (tmp.len() as i64)) {
            if (tmp[i as usize].clone().as_str() < min) {
                min = tmp[i as usize].clone();
                idx = i;
            }
            i = (i + 1);
        }
        res = { let mut v = res.clone(); v.push(String::from(min)); v };
        let mut out: Vec<String> = vec![];
        let mut j: i64 = 0;
        while (j < (tmp.len() as i64)) {
            if (j != idx) {
                out = { let mut v = out.clone(); v.push(String::from(tmp[j as usize].clone())); v };
            }
            j = (j + 1);
        }
        tmp = out;
    }
    return res
};
    fn mochi_main() {
    let mut words: Vec<String> = vec![String::from("abel"), String::from("able"), String::from("bale"), String::from("bela"), String::from("elba"), String::from("alger"), String::from("glare"), String::from("lager"), String::from("large"), String::from("regal"), String::from("angel"), String::from("angle"), String::from("galen"), String::from("glean"), String::from("lange"), String::from("caret"), String::from("carte"), String::from("cater"), String::from("crate"), String::from("trace"), String::from("elan"), String::from("lane"), String::from("lean"), String::from("lena"), String::from("neal"), String::from("evil"), String::from("levi"), String::from("live"), String::from("veil"), String::from("vile")];
    let mut groups: HashMap<String, Vec<String>> = HashMap::from([]);
    let mut maxLen: i64 = 0;
    for w in words {
        let k: String = sortRunes(w.clone()).clone();
        if !groups.contains_key(&k) {
            groups.insert(k.clone(), vec![w]);
        } else {
            groups.insert(k.clone(), { let mut v = groups[k.as_str()].clone(); v.push(String::from(w)); v });
        }
        if ((groups[k.as_str()].clone().len() as i64) > maxLen) {
            maxLen = (groups[k.as_str()].clone().len() as i64);
        }
    }
    let mut printed: HashMap<String, bool> = HashMap::from([]);
    for w in words {
        let k: String = sortRunes(w).clone();
        if ((groups[k.as_str()].clone().len() as i64) == maxLen) {
            if !printed.contains_key(&k) {
                let mut g: Vec<String> = sortStrings(groups[k.as_str()].clone());
                let mut line: String = format!("{}{}", "[", g[0 as usize].clone()).clone();
                let mut i: i64 = 1;
                while (i < (g.len() as i64)) {
                    line = format!("{}{}", format!("{}{}", line, " "), g[i as usize].clone());
                    i = (i + 1);
                }
                line = format!("{}{}", line, "]");
                println!("{}", line);
                printed.insert(k.clone(), true);
            }
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
