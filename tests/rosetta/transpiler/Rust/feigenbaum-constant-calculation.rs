// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn floorf(mut x: f64) -> f64 {
    let mut y: i64 = (x as i64);
    return (y as f64)
};
    fn indexOf(s: &str, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return (0 - 1)
};
    fn fmt8(mut x: f64) -> String {
    let mut y: f64 = (floorf(((x * 100000000.0) + 0.5)) / 100000000.0);
    let mut s = y.to_string();
    let mut dot: i64 = indexOf(&s, &".");
    if (dot == (0 - 1)) {
        s = format!("{}{}", s, ".00000000");
    } else {
        let mut decs = (((s.len() as i64) - dot) - 1);
        while (decs < 8) {
            s = format!("{}{}", s, "0");
            decs = (decs + 1);
        }
    }
    return s.to_string().clone()
};
    fn pad2(mut x: i64) -> String {
    let mut s = x.to_string();
    if ((s.len() as i64) < 2) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn mochi_main() {
    let mut maxIt: i64 = 13;
    let mut maxItJ: i64 = 10;
    let mut a1: f64 = 1.0;
    let mut a2: f64 = 0.0;
    let mut d1: f64 = 3.2;
    println!("{}", " i       d");
    let mut i: i64 = 2;
    while (i <= maxIt) {
        let mut a: f64 = (a1 + ((a1 - a2) / d1));
        let mut j: i64 = 1;
        while (j <= maxItJ) {
            let mut x: f64 = 0.0;
            let mut y: f64 = 0.0;
            let mut k: i64 = 1;
            let mut limit = pow_int(2, i);
            while (k <= limit) {
                y = (1.0 - ((2.0 * y) * x));
                x = (a - (x * x));
                k = (k + 1);
            }
            a = (a - (x / y));
            j = (j + 1);
        }
        let mut d: f64 = ((a1 - a2) / (a - a1));
        println!("{}", format!("{}{}", format!("{}{}", pad2(i), "    "), fmt8(d)));
        d1 = d;
        a2 = a1;
        a1 = a;
        i = (i + 1);
    }
};
    fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut r: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            r = (r * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return r
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
