// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static g_g2lMap: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static g_names: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static g_ntable: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
fn main() {
    unsafe {
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static g_g2lMap: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        static g_names: LazyLock<Mutex<HashMap<String, String>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        static g_ntable: LazyLock<Mutex<HashMap<String, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        unsafe fn indexOf(s: &str, sub: &str) -> i64 {
    let mut i: i64 = 0;
    while (i <= ((s.len() as i64) - (sub.len() as i64))) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + (sub.len() as i64)) - i) as usize).collect::<String>() } == sub) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
        unsafe fn removeChar(s: &str, ch: &str) -> String {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (c != ch) {
            res = format!("{}{}", res, c);
        }
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn g2l(pieces: &str) -> String {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (pieces.len() as i64)) {
        let mut ch: String = { let tmp = &pieces; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        res = format!("{}{}", res, g_g2lMap.lock().unwrap()[ch.as_str()].clone());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn countChar(s: &str, ch: &str) -> i64 {
    let mut c: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            c = (c + 1);
        }
        i = (i + 1);
    }
    return c
};
        unsafe fn spid(mut pieces: String) -> i64 {
    pieces = g2l(&pieces);
    if ((pieces.len() as i64) != 8) {
        return -1
    }
    for one in vec![String::from("K"), String::from("Q")] {
        if (countChar(&pieces, &one) != 1) {
            return -1
        }
    }
    for two in vec![String::from("R"), String::from("N"), String::from("B")] {
        if (countChar(&pieces, &two) != 2) {
            return -1
        }
    }
    let mut r1: i64 = indexOf(&pieces, &"R");
    let mut r2: i64 = ((indexOf(&{ let tmp = &pieces; tmp.chars().skip((r1 + 1) as usize).take(((pieces.len() as i64) - (r1 + 1)) as usize).collect::<String>() }, &"R") + r1) + 1);
    let mut k: i64 = indexOf(&pieces, &"K");
    if ((k < r1) || (k > r2)) {
        return -1
    }
    let mut b1: i64 = indexOf(&pieces, &"B");
    let mut b2: i64 = ((indexOf(&{ let tmp = &pieces; tmp.chars().skip((b1 + 1) as usize).take(((pieces.len() as i64) - (b1 + 1)) as usize).collect::<String>() }, &"B") + b1) + 1);
    if (((b2 - b1) % 2) == 0) {
        return -1
    }
    let mut piecesN: String = removeChar(&removeChar(&pieces, &"Q"), &"B").clone();
    let mut n1: i64 = indexOf(&piecesN, &"N");
    let mut n2: i64 = ((indexOf(&{ let tmp = &piecesN; tmp.chars().skip((n1 + 1) as usize).take(((piecesN.len() as i64) - (n1 + 1)) as usize).collect::<String>() }, &"N") + n1) + 1);
    let mut N: i64 = g_ntable.lock().unwrap()[format!("{}{}", n1.to_string(), n2.to_string()).as_str()];
    let mut piecesQ: String = removeChar(&pieces, &"B").clone();
    let mut Q: i64 = indexOf(&piecesQ, &"Q");
    let mut D: i64 = indexOf(&"0246", &b1.to_string());
    let mut L: i64 = indexOf(&"1357", &b2.to_string());
    if (D == (0 - 1)) {
        D = indexOf(&"0246", &b2.to_string());
        L = indexOf(&"1357", &b1.to_string());
    }
    return ((((96 * N) + (16 * Q)) + (4 * D)) + L)
};
        unsafe fn mochi_main() {
    for pieces in vec![String::from("♕♘♖♗♗♘♔♖"), String::from("♖♘♗♕♔♗♘♖"), String::from("♖♕♘♗♗♔♖♘"), String::from("♖♘♕♗♗♔♖♘")] {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pieces, " or "), g2l(&pieces)), " has SP-ID of "), spid(pieces.clone()).to_string()));
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
