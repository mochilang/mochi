// Generated by Mochi transpiler v0.10.39 on 2025-07-24 18:38 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct Map {
    count: i64,
    list: Vec<Vec<i64>>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, ", ")?;
        write!(f, "\"list\": {:?}", self.list)?;
        write!(f, "}}")
    }
}

static mut g_r1: Map = Map { count: 0, list: Vec::new() };
static mut g_r2: Map = Map { count: 0, list: Vec::new() };
static mut g_r3: Map = Map { count: 0, list: Vec::new() };
unsafe fn validComb(mut a: i64, mut b: i64, mut c: i64, mut d: i64, mut e: i64, mut f: i64, mut g: i64) -> bool {
    let square1: i64 = (a + b);
    let square2: i64 = ((b + c) + d);
    let square3: i64 = ((d + e) + f);
    let square4: i64 = (f + g);
    return (((square1 == square2) && (square2 == square3)) && (square3 == square4))
}

unsafe fn isUnique(mut a: i64, mut b: i64, mut c: i64, mut d: i64, mut e: i64, mut f: i64, mut g: i64) -> bool {
    let mut nums: Vec<i64> = vec![a, b, c, d, e, f, g];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (nums.len() as i64)) {
            if (nums[i as usize] == nums[j as usize]) {
                return false
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return true
}

unsafe fn getCombs(mut low: i64, mut high: i64, mut unique: bool) -> Map {
    let mut valid = vec![];
    let mut count: i64 = 0;
    for b in low..(high + 1) {
        for c in low..(high + 1) {
            for d in low..(high + 1) {
                let s: i64 = ((b + c) + d);
                for e in low..(high + 1) {
                    for f in low..(high + 1) {
                        let a: i64 = (s - b);
                        let g: i64 = (s - f);
                        if ((a < low) || (a > high)) {
                            continue
                        }
                        if ((g < low) || (g > high)) {
                            continue
                        }
                        if (((d + e) + f) != s) {
                            continue
                        }
                        if ((f + g) != s) {
                            continue
                        }
                        if (!unique || isUnique(a, b, c, d, e, f, g)) {
                            valid = { let mut v = valid.clone(); v.push(vec![a, b, c, d, e, f, g]); v };
                            count = (count + 1);
                        }
                    }
                }
            }
        }
    }
    return Map {count: count, list: valid}
}

fn main() {
    unsafe {
        g_r1 = getCombs(1, 7, true);
        g_r2 = getCombs(3, 9, true);
        g_r3 = getCombs(0, 9, false);
        println!("{}", format!("{}{}", g_r1.clone().count.to_string(), " unique solutions in 1 to 7"));
        println!("{:?}", g_r1.clone().list);
        println!("{}", format!("{}{}", g_r2.clone().count.to_string(), " unique solutions in 3 to 9"));
        println!("{:?}", g_r2.clone().list);
        println!("{}", format!("{}{}", g_r3.clone().count.to_string(), " non-unique solutions in 0 to 9"));
    }
}
