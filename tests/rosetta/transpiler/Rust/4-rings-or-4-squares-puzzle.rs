// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    count: i64,
    list: Vec<Vec<i64>>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, ", ")?;
        write!(f, "\"list\": {:?}", self.list)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn validComb(mut a: i64, mut b: i64, mut c: i64, mut d: i64, mut e: i64, mut f: i64, mut g: i64) -> bool {
    let mut square1: i64 = (a + b);
    let mut square2: i64 = ((b + c) + d);
    let mut square3: i64 = ((d + e) + f);
    let mut square4: i64 = (f + g);
    return (((square1 == square2) && (square2 == square3)) && (square3 == square4))
};
    fn isUnique(mut a: i64, mut b: i64, mut c: i64, mut d: i64, mut e: i64, mut f: i64, mut g: i64) -> bool {
    let mut nums: Vec<i64> = vec![a, b, c, d, e, f, g];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (nums.len() as i64)) {
            if (nums[i as usize] == nums[j as usize]) {
                return false
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return true
};
    fn getCombs(mut low: i64, mut high: i64, mut unique: bool) -> Map {
    let mut valid = vec![];
    let mut count: i64 = 0;
    for b in low..(high + 1) {
        for c in low..(high + 1) {
            for d in low..(high + 1) {
                let mut s: i64 = ((b + c) + d);
                for e in low..(high + 1) {
                    for f in low..(high + 1) {
                        let mut a: i64 = (s - b);
                        let mut g: i64 = (s - f);
                        if ((a < low) || (a > high)) {
                            continue
                        }
                        if ((g < low) || (g > high)) {
                            continue
                        }
                        if (((d + e) + f) != s) {
                            continue
                        }
                        if ((f + g) != s) {
                            continue
                        }
                        if (!unique || isUnique(a, b, c, d, e, f, g)) {
                            valid = { let mut _v = valid.clone(); _v.push(vec![a, b, c, d, e, f, g]); _v };
                            count = (count + 1);
                        }
                    }
                }
            }
        }
    }
    return Map {count: count, list: valid}
};
    let mut r1: Map = getCombs(1, 7, true);
    println!("{}", format!("{}{}", r1.count.to_string(), " unique solutions in 1 to 7"));
    println!("{:?}", r1.list);
    let mut r2: Map = getCombs(3, 9, true);
    println!("{}", format!("{}{}", r2.count.to_string(), " unique solutions in 3 to 9"));
    println!("{:?}", r2.list);
    let mut r3: Map = getCombs(0, 9, false);
    println!("{}", format!("{}{}", r3.count.to_string(), " non-unique solutions in 0 to 9"));
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
