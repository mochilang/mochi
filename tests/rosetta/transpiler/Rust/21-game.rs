// Generated by Mochi transpiler v0.10.39 on 2025-07-24 13:03 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn parseIntStr(mut str: String) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if ((str.len() as i64 > 0) && (str[0 as usize..1 as usize].to_string() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < str.len() as i64) {
        n = ((n * 10) + digits[&str[i as usize..(i + 1) as usize].to_string()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
}

fn mochi_main() {
    let mut total: i64 = 0;
    let mut computer: bool = ((_now() % 2) == 0);
    println!("{}", "Enter q to quit at any time\n");
    if computer {
        println!("{}", "The computer will choose first");
    } else {
        println!("{}", "You will choose first");
    }
    println!("{}", "\n\nRunning total is now 0\n\n");
    let mut round: i64 = 1;
    let mut done: bool = false;
    while !done {
        println!("{}", format!("{}{}", format!("{}{}", "ROUND ", round.to_string()), ":\n\n"));
        let mut i: i64 = 0;
        while ((i < 2) && !done) {
            if computer {
                let mut choice: i64 = 0;
                if (total < 18) {
                    choice = ((_now() % 3) + 1);
                } else {
                    choice = (21 - total);
                }
                total = (total + choice);
                println!("{}", format!("{}{}", "The computer chooses ", choice.to_string()));
                println!("{}", format!("{}{}", "Running total is now ", total.to_string()));
                if (total == 21) {
                    println!("{}", "\nSo, commiserations, the computer has won!");
                    done = true;
                }
            } else {
                while true {
                    println!("{}", "Your choice 1 to 3 : ");
                    let line: String = input().clone();
                    if ((line == "q") || (line == "Q")) {
                        println!("{}", "OK, quitting the game");
                        done = true;
                        break
                    }
                    let mut num: i64 = parseIntStr(line);
                    if ((num < 1) || (num > 3)) {
                        if ((total + num) > 21) {
                            println!("{}", "Too big, try again");
                        } else {
                            println!("{}", "Out of range, try again");
                        }
                        continue
                    }
                    if ((total + num) > 21) {
                        println!("{}", "Too big, try again");
                        continue
                    }
                    total = (total + num);
                    println!("{}", format!("{}{}", "Running total is now ", total.to_string()));
                    break
                }
                if (total == 21) {
                    println!("{}", "\nSo, congratulations, you've won!");
                    done = true;
                }
            }
            println!("{}", "\n");
            computer = !computer;
            i = (i + 1);
        }
        round = (round + 1);
    }
}

fn main() {
    mochi_main();
}
