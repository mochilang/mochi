// Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct LDAPClient {
    Base: String,
    Host: String,
    Port: i64,
    UseSSL: bool,
    BindDN: String,
    BindPassword: String,
    UserFilter: String,
    GroupFilter: String,
    Attributes: Vec<String>,
}
impl std::fmt::Display for LDAPClient {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"Base\": \"{}\"", self.Base)?;
        write!(f, ", ")?;
        write!(f, "\"Host\": \"{}\"", self.Host)?;
        write!(f, ", ")?;
        write!(f, "\"Port\": {}", self.Port)?;
        write!(f, ", ")?;
        write!(f, "\"UseSSL\": {}", self.UseSSL)?;
        write!(f, ", ")?;
        write!(f, "\"BindDN\": \"{}\"", self.BindDN)?;
        write!(f, ", ")?;
        write!(f, "\"BindPassword\": \"{}\"", self.BindPassword)?;
        write!(f, ", ")?;
        write!(f, "\"UserFilter\": \"{}\"", self.UserFilter)?;
        write!(f, ", ")?;
        write!(f, "\"GroupFilter\": \"{}\"", self.GroupFilter)?;
        write!(f, ", ")?;
        write!(f, "\"Attributes\": {:?}", self.Attributes)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn connect(client: &LDAPClient) -> bool {
    return ((client.Host.as_str() != "") && (client.Port > 0))
};
    fn mochi_main() {
    let client: LDAPClient = LDAPClient {Base: String::from("dc=example,dc=com"), Host: String::from("ldap.example.com"), Port: 389, UseSSL: false, BindDN: String::from("uid=readonlyuser,ou=People,dc=example,dc=com"), BindPassword: String::from("readonlypassword"), UserFilter: String::from("(uid=%s)"), GroupFilter: String::from("(memberUid=%s)"), Attributes: vec![String::from("givenName"), String::from("sn"), String::from("mail"), String::from("uid")]};
    if connect(&client) {
        println!("{}", format!("{}{}", "Connected to ", client.Host));
    } else {
        println!("{}", "Failed to connect");
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
