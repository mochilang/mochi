// Generated by Mochi transpiler v0.10.56 on 2025-08-03 15:40 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn image() -> Vec<Vec<i64>> {
    return vec![vec![0, 0, 10000], vec![65535, 65535, 65535], vec![65535, 65535, 65535]]
};
    fn histogram(g: &mut Vec<Vec<i64>>, mut bins: i64) -> Vec<i64> {
    if (bins <= 0) {
        bins = (g[0 as usize].clone().len() as i64);
    }
    let mut h: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < bins) {
        h = { let mut _v = h.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut y: i64 = 0;
    while (y < (g.len() as i64)) {
        let mut row: Vec<i64> = g[y as usize].clone();
        let mut x: i64 = 0;
        while (x < (row.len() as i64)) {
            let mut p: i64 = row[x as usize];
            let mut idx: i64 = ((p * (bins - 1)) / 65535);
            h[idx as usize] = (h[idx as usize] + 1);
            x = (x + 1);
        }
        y = (y + 1);
    }
    return h
};
    fn medianThreshold(h: &mut Vec<i64>) -> i64 {
    let mut lb: i64 = 0;
    let mut ub = ((h.len() as i64) - 1);
    let mut lSum: i64 = 0;
    let mut uSum: i64 = 0;
    while (lb <= ub) {
        if ((lSum + h[lb as usize]) < (uSum + h[ub as usize])) {
            lSum = (lSum + h[lb as usize]);
            lb = (lb + 1);
        } else {
            uSum = (uSum + h[ub as usize]);
            ub = (ub - 1);
        }
    }
    return ((ub * 65535) / (h.len() as i64))
};
    fn threshold(mut g: Vec<Vec<i64>>, mut t: i64) -> Vec<Vec<i64>> {
    let mut out: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < (g.len() as i64)) {
        let mut row: Vec<i64> = g[y as usize].clone();
        let mut newRow: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < (row.len() as i64)) {
            if (row[x as usize] < t) {
                newRow = { let mut _v = newRow.clone(); _v.push(0); _v };
            } else {
                newRow = { let mut _v = newRow.clone(); _v.push(65535); _v };
            }
            x = (x + 1);
        }
        out = { let mut _v = out.clone(); _v.push(newRow.clone()); _v };
        y = (y + 1);
    }
    return out
};
    fn printImage(g: &mut Vec<Vec<i64>>) {
    let mut y: i64 = 0;
    while (y < (g.len() as i64)) {
        let mut row: Vec<i64> = g[y as usize].clone();
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < (row.len() as i64)) {
            if (row[x as usize] == 0) {
                line = format!("{}{}", line, "0");
            } else {
                line = format!("{}{}", line, "1");
            }
            x = (x + 1);
        }
        println!("{}", line);
        y = (y + 1);
    }
};
    fn mochi_main() {
    let mut img: Vec<Vec<i64>> = image();
    let mut h: Vec<i64> = histogram(&mut img, 0);
    println!("{}", format!("{}{}", "Histogram: ", format!("{:?}", h)));
    let mut t: i64 = medianThreshold(&mut h);
    println!("{}", format!("{}{}", "Threshold: ", t.to_string()));
    let mut bw: Vec<Vec<i64>> = threshold(img.clone(), t);
    printImage(&mut bw);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
