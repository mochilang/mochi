// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_x: Vec<f64> = Vec::new();
static mut g_i: i64 = 0;
static mut g_s: String = String::new();
static mut g_j: i64 = 0;
fn main() {
    unsafe {
        g_x = vec![];
        g_i = 0;
        g_s = String::from("[").clone();
        g_j = 0;
                let _start: i64 = _now();
        unsafe fn det(mut m: Vec<Vec<f64>>) -> f64 {
    let mut n = (m.len() as i64);
    if (n == 1) {
        return m[0 as usize].clone()[0 as usize]
    }
    let mut total: f64 = 0.0;
    let mut sign: f64 = 1.0;
    let mut c: i64 = 0;
    while (c < n) {
        let mut sub: Vec<Vec<f64>> = vec![];
        let mut r: i64 = 1;
        while (r < n) {
            let mut row: Vec<f64> = vec![];
            let mut cc: i64 = 0;
            while (cc < n) {
                if (cc != c) {
                    row = { let mut _v = row.clone(); _v.push(m[r as usize].clone()[cc as usize]); _v };
                }
                cc = (cc + 1);
            }
            sub = { let mut _v = sub.clone(); _v.push(row.clone()); _v };
            r = (r + 1);
        }
        total = (total + ((sign * m[0 as usize].clone()[c as usize]) * det(sub.clone())));
        sign = (sign * -1.0);
        c = (c + 1);
    }
    return total
};
        unsafe fn replaceCol(mut m: Vec<Vec<f64>>, mut col: i64, mut v: Vec<f64>) -> Vec<Vec<f64>> {
    let mut res: Vec<Vec<f64>> = vec![];
    let mut r: i64 = 0;
    while (r < (m.len() as i64)) {
        let mut row: Vec<f64> = vec![];
        let mut c: i64 = 0;
        while (c < (m[r as usize].clone().len() as i64)) {
            if (c == col) {
                row = { let mut _v = row.clone(); _v.push(v[r as usize]); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(m[r as usize].clone()[c as usize]); _v };
            }
            c = (c + 1);
        }
        res = { let mut _v = res.clone(); _v.push(row.clone()); _v };
        r = (r + 1);
    }
    return res
};
        let mut m: Vec<Vec<f64>> = vec![vec![2.0, -1.0, 5.0, 1.0], vec![3.0, 2.0, 2.0, -6.0], vec![1.0, 3.0, 3.0, -1.0], vec![5.0, -2.0, -3.0, 3.0]];
        let mut v: Vec<f64> = vec![-3.0, -32.0, -47.0, 49.0];
        let mut d: f64 = det(m.clone());
        while (g_i < (v.len() as i64)) {
            let mut mc: Vec<Vec<f64>> = replaceCol(m.clone(), g_i, v.clone());
            g_x = { let mut _v = g_x.clone().clone(); _v.push((det(mc.clone()) / d)); _v };
            g_i = (g_i + 1);
        }
        while (g_j < (g_x.clone().len() as i64)) {
            g_s = format!("{}{}", g_s, g_x.clone()[g_j as usize].to_string());
            if (g_j < ((g_x.clone().len() as i64) - 1)) {
                g_s = format!("{}{}", g_s, " ");
            }
            g_j = (g_j + 1);
        }
        g_s = format!("{}{}", g_s, "]");
        println!("{}", g_s);
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
