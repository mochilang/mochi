// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn pow2(mut n: i64) -> i64 {
    let mut p: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        p = (p * 2);
        i = (i + 1);
    }
    return p
};
    fn btoi(mut b: bool) -> i64 {
    if b {
        return 1
    }
    return 0
};
    fn addNoCells(mut cells: String) -> String {
    let mut l = String::from("O");
    let mut r = String::from("O");
    if ({ let tmp = &cells; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.as_str() == "O") {
        l = String::from(".");
    }
    if ({ let tmp = &cells; tmp.chars().skip(((cells.len() as i64) - 1) as usize).take(((cells.len() as i64) - ((cells.len() as i64) - 1)) as usize).collect::<String>() }.as_str() == "O") {
        r = String::from(".");
    }
    cells = format!("{}{}", format!("{}{}", l, cells), r);
    cells = format!("{}{}", format!("{}{}", l, cells), r);
    return cells.clone()
};
    fn step(cells: &str, mut ruleVal: i64) -> String {
    let mut newCells = String::from("");
    let mut i: i64 = 0;
    while (i < ((cells.len() as i64) - 2)) {
        let mut bin: i64 = 0;
        let mut b: i64 = 2;
        let mut n: i64 = i;
        while (n < (i + 3)) {
            bin = (bin + (btoi(({ let tmp = &cells; tmp.chars().skip(n as usize).take(((n + 1) - n) as usize).collect::<String>() }.as_str() == "O")) * pow2(b)));
            b = (b - 1);
            n = (n + 1);
        }
        let mut a = String::from(".");
        if (((ruleVal / pow2(bin)) % 2) == 1) {
            a = String::from("O");
        }
        newCells = format!("{}{}", newCells, a);
        i = (i + 1);
    }
    return newCells.clone()
};
    fn repeat(ch: &str, mut n: i64) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
};
    fn evolve(mut l: i64, mut ruleVal: i64) {
    println!("{}", format!("{}{}", format!("{}{}", " Rule #", ruleVal.to_string()), ":"));
    let mut cells = String::from("O");
    let mut x: i64 = 0;
    while (x < l) {
        cells = addNoCells(cells);
        let mut width: i64 = (40 + ((cells.len() as i64) / 2));
        let mut spaces: String = repeat(&" ", (width - (cells.len() as i64))).clone();
        println!("{}", format!("{}{}", spaces, cells));
        cells = step(&cells, ruleVal);
        x = (x + 1);
    }
};
    fn mochi_main() {
    for r in vec![90, 30] {
        evolve(25, r);
        println!("{}", "");
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
