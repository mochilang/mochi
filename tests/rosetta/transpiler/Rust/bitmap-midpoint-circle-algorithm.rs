// Generated by Mochi transpiler v0.10.56 on 2025-08-03 16:17 +0700
static mut g_g: Vec<Vec<String>> = Vec::new();
unsafe fn initGrid(mut size: i64) -> Vec<Vec<String>> {
    let mut g: Vec<Vec<String>> = vec![];
    let mut y: i64 = 0;
    while (y < size) {
        let mut row: Vec<String> = vec![];
        let mut x: i64 = 0;
        while (x < size) {
            row = { let mut _v = row.clone(); _v.push(" ".to_string()); _v };
            x = (x + 1);
        }
        g = { let mut _v = g.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return g
}

unsafe fn set(g: &mut Vec<Vec<String>>, mut x: i64, mut y: i64) {
    if ((((x >= 0) && (x < (g[0 as usize].clone().len() as i64))) && (y >= 0)) && (y < (g.len() as i64))) {
        (*g)[y as usize][x as usize] = String::from("#");
    }
}

unsafe fn circle(mut r: i64) -> Vec<Vec<String>> {
    let mut size: i64 = ((r * 2) + 1);
    let mut g: Vec<Vec<String>> = initGrid(size);
    let mut x: i64 = r;
    let mut y: i64 = 0;
    let mut err: i64 = (1 - r);
    while (y <= x) {
        set(&mut g, (r + x), (r + y));
        set(&mut g, (r + y), (r + x));
        set(&mut g, (r - x), (r + y));
        set(&mut g, (r - y), (r + x));
        set(&mut g, (r - x), (r - y));
        set(&mut g, (r - y), (r - x));
        set(&mut g, (r + x), (r - y));
        set(&mut g, (r + y), (r - x));
        y = (y + 1);
        if (err < 0) {
            err = ((err + (2 * y)) + 1);
        } else {
            x = (x - 1);
            err = ((err + (2 * (y - x))) + 1);
        }
    }
    return g
}

unsafe fn trimRight(mut row: Vec<String>) -> String {
    let mut end = (row.len() as i64);
    while ((end > 0) && (row[(end - 1) as usize].clone().as_str() == " ")) {
        end = (end - 1);
    }
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < end) {
        s = format!("{}{}", s, row[i as usize].clone());
        i = (i + 1);
    }
    return s.clone()
}

fn main() {
    unsafe {
        g_g = circle(10);
        for row in g_g.clone().iter() {
            println!("{}", trimRight(row.clone()));
        }
    }
}
