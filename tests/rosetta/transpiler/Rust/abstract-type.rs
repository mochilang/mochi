// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone)]
enum Beast {
    Dog { kind: String, name: String },
    Cat { kind: String, name: String },
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn beastKind(b: &Beast) -> String {
    return match b { Beast::Dog { kind: k, name: _ } => k, Beast::Cat { kind: k, name: _ } => k, }.to_string().clone()
};
    fn beastName(b: &Beast) -> String {
    return match b { Beast::Dog { kind: _, name: n } => n, Beast::Cat { kind: _, name: n } => n, }.to_string().clone()
};
    fn beastCry(b: &Beast) -> String {
    return match b { Beast::Dog { kind: _, name: _ } => String::from("Woof"), Beast::Cat { kind: _, name: _ } => String::from("Meow"), }.clone()
};
    fn bprint(b: &Beast) {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", beastName(&b), ", who's a "), beastKind(&b)), ", cries: \""), beastCry(&b)), "\"."));
};
    fn mochi_main() {
    let d: Beast = Beast::Dog { kind: String::from("labrador"), name: String::from("Max") };
    let c: Beast = Beast::Cat { kind: String::from("siamese"), name: String::from("Sammy") };
    bprint(&d);
    bprint(&c);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
