// Generated by Mochi transpiler v0.10.42 on 2025-07-28 11:14 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_c: String = String::new();
static mut g_rows: Vec<Vec<String>> = Vec::new();
fn main() {
    unsafe {
        g_c = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Character,Speech\n", "The multitude,The messiah! Show us the messiah!\n"), "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!").clone();
        g_rows = vec![];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_c: String = String::new();;
        static mut g_rows: Vec<Vec<String>> = Vec::new();;
        for line in g_c.split("\n").map(|x| x.to_string()).collect::<Vec<String>>() {
            g_rows = { let mut _v = g_rows.clone().clone(); _v.push(line.split(",").map(|x| x.to_string()).collect::<Vec<String>>()); _v };
        }
        println!("{}", "<table>");
        for row in &g_rows.clone() {
            let mut cells = String::from("");
            for cell in row {
                cells = format!("{}{}", format!("{}{}", format!("{}{}", cells, "<td>"), cell), "</td>");
            }
            println!("{}", format!("{}{}", format!("{}{}", "    <tr>", cells), "</tr>"));
        }
        println!("{}", "</table>");
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
