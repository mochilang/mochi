// Generated by Mochi transpiler v0.10.52 on 2025-08-01 15:22 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn mochi_main() {
    let mut INF: i64 = 1000000000;
    let mut n: i64 = 4;
    let mut dist: Vec<Vec<i64>> = vec![];
    let mut next: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut nrow: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            if (i == j) {
                row = { let mut _v = row.clone(); _v.push(0); _v };
            } else {
                row = { let mut _v = row.clone(); _v.push(INF); _v };
            }
            nrow = { let mut _v = nrow.clone(); _v.push((0 - 1)); _v };
            j = (j + 1);
        }
        dist = { let mut _v = dist.clone(); _v.push(row.clone()); _v };
        next = { let mut _v = next.clone(); _v.push(nrow.clone()); _v };
        i = (i + 1);
    }
    dist[0 as usize][2 as usize] = -2;
    next[0 as usize][2 as usize] = 2;
    dist[2 as usize][3 as usize] = 2;
    next[2 as usize][3 as usize] = 3;
    dist[3 as usize][1 as usize] = -1;
    next[3 as usize][1 as usize] = 1;
    dist[1 as usize][0 as usize] = 4;
    next[1 as usize][0 as usize] = 0;
    dist[1 as usize][2 as usize] = 3;
    next[1 as usize][2 as usize] = 2;
    let mut k: i64 = 0;
    while (k < n) {
        let mut i: i64 = 0;
        while (i < n) {
            let mut j: i64 = 0;
            while (j < n) {
                if ((dist[i as usize].clone()[k as usize] < INF) && (dist[k as usize].clone()[j as usize] < INF)) {
                    let mut alt: i64 = (dist[i as usize].clone()[k as usize] + dist[k as usize].clone()[j as usize]);
                    if (alt < dist[i as usize].clone()[j as usize]) {
                        dist[i as usize][j as usize] = alt;
                        next[i as usize][j as usize] = next[i as usize].clone()[k as usize];
                    }
                }
                j = (j + 1);
            }
            i = (i + 1);
        }
        k = (k + 1);
    }
    let path = move |u: i64, v: i64| -> Vec<i64> {
    let mut ui: i64 = (u - 1);
    let mut vi: i64 = (v - 1);
    if (next[ui as usize].clone()[vi as usize] == (0 - 1)) {
        return vec![]
    }
    let mut p: Vec<i64> = vec![u];
    let mut cur: i64 = ui;
    while (cur != vi) {
        cur = next[cur as usize].clone()[vi as usize];
        p = { let mut _v = p.clone(); _v.push((cur + 1)); _v };
    }
    return p
};
    let pathStr = move |p: Vec<i64>| -> String {
    let mut s: String = String::from("").clone();
    let mut first: bool = true;
    let mut idx: i64 = 0;
    while (idx < (p.len() as i64)) {
        let mut x: i64 = p[idx as usize];
        if !first {
            s = format!("{}{}", s, " -> ");
        }
        s = format!("{}{}", s, x.to_string());
        first = false;
        idx = (idx + 1);
    }
    return s.clone()
};
    println!("{}", "pair\tdist\tpath");
    let mut a: i64 = 0;
    while (a < n) {
        let mut b: i64 = 0;
        while (b < n) {
            if (a != b) {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", (a + 1).to_string(), " -> "), (b + 1).to_string()), "\t"), dist[a as usize].clone()[b as usize].to_string()), "\t"), pathStr(path((a + 1), (b + 1)))));
            }
            b = (b + 1);
        }
        a = (a + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
