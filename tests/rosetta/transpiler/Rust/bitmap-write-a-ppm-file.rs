// Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:49 +0700
#[derive(Debug, Clone, Default)]
struct Colour {
    R: i64,
    G: i64,
    B: i64,
}
impl std::fmt::Display for Colour {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"R\": {}", self.R)?;
        write!(f, ", ")?;
        write!(f, "\"G\": {}", self.G)?;
        write!(f, ", ")?;
        write!(f, "\"B\": {}", self.B)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Bitmap {
    width: i64,
    height: i64,
    pixels: Vec<Vec<Colour>>,
}
impl std::fmt::Display for Bitmap {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"width\": {}", self.width)?;
        write!(f, ", ")?;
        write!(f, "\"height\": {}", self.height)?;
        write!(f, ", ")?;
        write!(f, "\"pixels\": {:?}", self.pixels)?;
        write!(f, "}}")
    }
}

fn newBitmap(mut w: i64, mut h: i64, c: &mut Colour) -> Bitmap {
    let mut rows: Vec<Vec<Colour>> = vec![];
    let mut y: i64 = 0;
    while (y < h) {
        let mut row: Vec<Colour> = vec![];
        let mut x: i64 = 0;
        while (x < w) {
            row = { let mut _v = row.clone(); _v.push(c.clone()); _v };
            x = (x + 1);
        }
        rows = { let mut _v = rows.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return Bitmap {width: w, height: h, pixels: rows}
}

fn setPixel(b: &mut Bitmap, mut x: i64, mut y: i64, c: &Colour) {
    let mut rows: Vec<Vec<Colour>> = b.pixels.clone();
    let mut row: Vec<Colour> = rows[y as usize].clone();
    row[x as usize] = c.clone();
    rows[y as usize] = row.clone();
    (*b).pixels = rows.clone();
}

fn fillRect(b: &mut Bitmap, mut x: i64, mut y: i64, mut w: i64, mut h: i64, c: &mut Colour) {
    let mut yy: i64 = y;
    while (yy < (y + h)) {
        let mut xx: i64 = x;
        while (xx < (x + w)) {
            setPixel(b, xx, yy, c);
            xx = (xx + 1);
        }
        yy = (yy + 1);
    }
}

fn pad(mut n: i64, mut width: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < width) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
}

fn writePPMP3(b: &Bitmap) -> String {
    let mut maxv: i64 = 0;
    let mut y: i64 = 0;
    while (y < b.height) {
        let mut x: i64 = 0;
        while (x < b.width) {
            let mut p: Colour = b.pixels.clone()[y as usize].clone()[x as usize].clone();
            if (p.R > maxv) {
                maxv = p.R;
            }
            if (p.G > maxv) {
                maxv = p.G;
            }
            if (p.B > maxv) {
                maxv = p.B;
            }
            x = (x + 1);
        }
        y = (y + 1);
    }
    let mut out: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "P3\n# generated from Bitmap.writeppmp3\n", b.width.to_string()), " "), b.height.to_string()), "\n"), maxv.to_string()), "\n").clone();
    let mut numsize = (maxv.to_string().len() as i64);
    y = (b.height - 1);
    while (y >= 0) {
        let mut line: String = String::from("").clone();
        let mut x: i64 = 0;
        while (x < b.width) {
            let mut p: Colour = b.pixels.clone()[y as usize].clone()[x as usize].clone();
            line = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", line, "   "), pad(p.R, numsize)), " "), pad(p.G, numsize)), " "), pad(p.B, numsize));
            x = (x + 1);
        }
        out = format!("{}{}", out, line);
        if (y > 0) {
            out = format!("{}{}", out, "\n");
        } else {
            out = format!("{}{}", out, "\n");
        }
        y = (y - 1);
    }
    return out.clone()
}

fn mochi_main() {
    let mut black: Colour = Colour {R: 0, G: 0, B: 0};
    let mut white: Colour = Colour {R: 255, G: 255, B: 255};
    let mut bm: Bitmap = newBitmap(4, 4, &mut black);
    fillRect(&mut bm, 1, 0, 1, 2, &mut white);
    setPixel(&mut bm, 3, 3, &Colour {R: 127, G: 0, B: 63});
    let mut ppm: String = writePPMP3(&bm).clone();
    println!("{}", ppm);
}

fn main() {
    mochi_main();
}
