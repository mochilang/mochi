// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_b: i64 = 0;
static mut g_r: i64 = 0;
static mut g_s: String = String::new();
fn main() {
    unsafe {
        g_b = ord(&"a");
        g_r = ord(&"π");
        g_s = String::from("aπ").clone();
                let _start: i64 = _now();
        unsafe fn ord(ch: &str) -> i64 {
    if (ch == "a") {
        return 97
    }
    if (ch == "π") {
        return 960
    }
    if (ch == "A") {
        return 65
    }
    return 0
};
        unsafe fn chr(mut n: i64) -> String {
    if (n == 97) {
        return String::from("a")
    }
    if (n == 960) {
        return String::from("π")
    }
    if (n == 65) {
        return String::from("A")
    }
    return String::from("?").clone()
};
        static mut g_b: i64 = 0;;
        static mut g_r: i64 = 0;;
        static mut g_s: String = String::new();;
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", g_b.to_string(), " "), g_r.to_string()), " "), g_s));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "string cast to []rune: [", g_b.to_string()), " "), g_r.to_string()), "]"));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "    string range loop: ", g_b.to_string()), " "), g_r.to_string()));
        println!("{}", "         string bytes: 0x61 0xcf 0x80");
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
