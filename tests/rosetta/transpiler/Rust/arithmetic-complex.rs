// Generated by Mochi transpiler v0.10.41 on 2025-07-27 06:30 +0700
#[derive(Debug, Clone, Default)]
struct Complex {
    re: f64,
    im: f64,
}
impl std::fmt::Display for Complex {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"re\": {}", self.re)?;
        write!(f, ", ")?;
        write!(f, "\"im\": {}", self.im)?;
        write!(f, "}}")
    }
}

static mut g_a: Complex = Complex { re: 0.0, im: 0.0 };
static mut g_b: Complex = Complex { re: 0.0, im: 0.0 };
unsafe fn add(a: &Complex, b: &Complex) -> Complex {
    return Complex {re: (a.re + b.re), im: (a.im + b.im)}
}

unsafe fn mul(a: &Complex, b: &Complex) -> Complex {
    return Complex {re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))}
}

unsafe fn neg(a: &Complex) -> Complex {
    return Complex {re: -a.re, im: -a.im}
}

unsafe fn inv(a: &Complex) -> Complex {
    let denom: f64 = ((a.re * a.re) + (a.im * a.im));
    return Complex {re: (a.re / denom), im: (-a.im / denom)}
}

unsafe fn conj(a: &Complex) -> Complex {
    return Complex {re: a.re, im: -a.im}
}

unsafe fn cstr(a: &Complex) -> String {
    let mut s: String = format!("{}{}", "(", a.re.to_string()).clone();
    if (a.im >= (0 as f64)) {
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, "+"), a.im.to_string()), "i)");
    } else {
        s = format!("{}{}", format!("{}{}", s, a.im.to_string()), "i)");
    }
    return s.clone()
}

fn main() {
    unsafe {
        g_a = Complex {re: 1.0, im: 1.0};
        g_b = Complex {re: 3.14159, im: 1.25};
        println!("{}", format!("{}{}", "a:       ", cstr(&g_a)));
        println!("{}", format!("{}{}", "b:       ", cstr(&g_b)));
        println!("{}", format!("{}{}", "a + b:   ", cstr(&add(&g_a, &g_b))));
        println!("{}", format!("{}{}", "a * b:   ", cstr(&mul(&g_a, &g_b))));
        println!("{}", format!("{}{}", "-a:      ", cstr(&neg(&g_a))));
        println!("{}", format!("{}{}", "1 / a:   ", cstr(&inv(&g_a))));
        println!("{}", format!("{}{}", "aÌ…:       ", cstr(&conj(&g_a))));
    }
}
