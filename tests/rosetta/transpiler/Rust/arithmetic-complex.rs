// Generated by Mochi transpiler v0.10.41 on 2025-07-27 10:59 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Complex {
    re: f64,
    im: f64,
}
impl std::fmt::Display for Complex {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"re\": {}", self.re)?;
        write!(f, ", ")?;
        write!(f, "\"im\": {}", self.im)?;
        write!(f, "}}")
    }
}

static mut g_a: Complex = Complex { re: 0.0, im: 0.0 };
static mut g_b: Complex = Complex { re: 0.0, im: 0.0 };
fn main() {
    unsafe {
        g_a = Complex {re: 1.0, im: 1.0};
        g_b = Complex {re: 3.14159, im: 1.25};
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn add(a: &Complex, b: &Complex) -> Complex {
    return Complex {re: (a.re + b.re), im: (a.im + b.im)}
};
        unsafe fn mul(a: &Complex, b: &Complex) -> Complex {
    return Complex {re: ((a.re * b.re) - (a.im * b.im)), im: ((a.re * b.im) + (a.im * b.re))}
};
        unsafe fn neg(a: &Complex) -> Complex {
    return Complex {re: -a.re, im: -a.im}
};
        unsafe fn inv(a: &Complex) -> Complex {
    let denom: f64 = ((a.re * a.re) + (a.im * a.im));
    return Complex {re: (a.re / denom), im: (-a.im / denom)}
};
        unsafe fn conj(a: &Complex) -> Complex {
    return Complex {re: a.re, im: -a.im}
};
        unsafe fn cstr(a: &Complex) -> String {
    let mut s: String = format!("{}{}", "(", a.re.to_string()).clone();
    if (a.im >= (0 as f64)) {
        s = format!("{}{}", format!("{}{}", format!("{}{}", s, "+"), a.im.to_string()), "i)");
    } else {
        s = format!("{}{}", format!("{}{}", s, a.im.to_string()), "i)");
    }
    return s.clone()
};
        static mut g_a: Complex = Complex { re: 0.0, im: 0.0 };;
        static mut g_b: Complex = Complex { re: 0.0, im: 0.0 };;
        println!("{}", format!("{}{}", "a:       ", cstr(&g_a)));
        println!("{}", format!("{}{}", "b:       ", cstr(&g_b)));
        println!("{}", format!("{}{}", "a + b:   ", cstr(&add(&g_a, &g_b))));
        println!("{}", format!("{}{}", "a * b:   ", cstr(&mul(&g_a, &g_b))));
        println!("{}", format!("{}{}", "-a:      ", cstr(&neg(&g_a))));
        println!("{}", format!("{}{}", "1 / a:   ", cstr(&inv(&g_a))));
        println!("{}", format!("{}{}", "aÌ…:       ", cstr(&conj(&g_a))));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
