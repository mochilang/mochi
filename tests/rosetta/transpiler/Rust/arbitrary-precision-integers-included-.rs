// Generated by Mochi transpiler v0.10.41 on 2025-07-27 00:50 +0700
static mut g_e1: i64 = 0;
static mut g_e2: i64 = 0;
static mut g_base: i64 = 0;
static mut g_x: i64 = 0;
static mut g_s: i64 = 0;
unsafe fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
}

unsafe fn pow_big(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
}

fn main() {
    unsafe {
        g_e1 = pow_int(3, 2);
        g_e2 = pow_int(4, g_e1);
        g_base = 5;
        g_x = pow_big(g_base, g_e2);
        g_s = g_x.to_string();
        println!("{}", format!("{} {} {} {} {} {}", "5^(4^(3^2)) has", (g_s.len() as i64), "digits:", { let tmp = &g_s; tmp.chars().skip(0 as usize).take((20 - 0) as usize).collect::<String>() }, "...", { let tmp = &g_s; tmp.chars().skip(((g_s.len() as i64) - 20) as usize).take(((g_s.len() as i64) - ((g_s.len() as i64) - 20)) as usize).collect::<String>() }).trim_end());
    }
}
