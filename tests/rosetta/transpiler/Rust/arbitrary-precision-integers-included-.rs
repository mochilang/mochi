// Generated by Mochi transpiler v0.10.41 on 2025-07-27 06:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_e1: i64 = 0;
static mut g_e2: i64 = 0;
static mut g_base: i64 = 0;
static mut g_x: i64 = 0;
static mut g_s: i64 = 0;
fn main() {
    unsafe {
        g_e1 = pow_int(3, 2);
        g_e2 = pow_int(4, g_e1);
        g_base = 5;
        g_x = pow_big(g_base, g_e2);
        g_s = g_x.to_string();
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn pow_int(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
};
        unsafe fn pow_big(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
};
        static mut g_e1: i64 = 0;;
        static mut g_e2: i64 = 0;;
        static mut g_base: i64 = 0;;
        static mut g_x: i64 = 0;;
        static mut g_s: i64 = 0;;
        println!("{}", format!("{} {} {} {} {} {}", "5^(4^(3^2)) has", (g_s.len() as i64), "digits:", { let tmp = &g_s; tmp.chars().skip(0 as usize).take((20 - 0) as usize).collect::<String>() }, "...", { let tmp = &g_s; tmp.chars().skip(((g_s.len() as i64) - 20) as usize).take(((g_s.len() as i64) - ((g_s.len() as i64) - 20)) as usize).collect::<String>() }).trim_end());
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
