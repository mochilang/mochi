error: expected `;`, found keyword `let`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:50:21
   |
50 |     return s.clone()
   |                     ^ help: add `;` here
51 |     let parseIntStr = move |str: &str| -> i64 {
   |     --- unexpected token

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:68:2
   |
68 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:77:2
   |
77 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:86:2
   |
86 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:89:2
   |
89 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:93:2
   |
93 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:99:2
   |
99 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:105:2
    |
105 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:114:2
    |
114 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:120:2
    |
120 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:166:2
    |
166 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:41:8
   |
41 |     if (n == 0) {
   |        ^      ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
41 -     if (n == 0) {
41 +     if n == 0 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:46:11
   |
46 |     while (x > 0) {
   |           ^     ^
   |
help: remove these parentheses
   |
46 -     while (x > 0) {
46 +     while x > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:48:13
   |
48 |         x = (x / b);
   |             ^     ^
   |
help: remove these parentheses
   |
48 -         x = (x / b);
48 +         x = x / b;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:54:8
   |
54 |     if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-")) {
   |        ^                                                                         ^
   |
help: remove these parentheses
   |
54 -     if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-")) {
54 +     if ((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-") {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:59:11
   |
59 |     while (i < (str.len() as i64)) {
   |           ^                      ^
   |
help: remove these parentheses
   |
59 -     while (i < (str.len() as i64)) {
59 +     while i < (str.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:60:13
   |
60 | ... = (((n * 10) + { let n: i64 = str[i as usize..(i + 1) as usize].to_string().parse().unwrap(); n }) - { let n: i64 = "0".parse().unwrap(); n });
   |       ^                                                                                                                                          ^
   |
help: remove these parentheses
   |
60 -         n = (((n * 10) + { let n: i64 = str[i as usize..(i + 1) as usize].to_string().parse().unwrap(); n }) - { let n: i64 = "0".parse().unwrap(); n });
60 +         n = ((n * 10) + { let n: i64 = str[i as usize..(i + 1) as usize].to_string().parse().unwrap(); n }) - { let n: i64 = "0".parse().unwrap(); n };
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:61:13
   |
61 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
61 -         i = (i + 1);
61 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:72:11
   |
72 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
help: remove these parentheses
   |
72 -     while (i < (s.len() as i64)) {
72 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:73:13
   |
73 |         n = ((n * b) + parseIntStr(&s[i as usize..(i + 1) as usize].to_string()));
   |             ^                                                                   ^
   |
help: remove these parentheses
   |
73 -         n = ((n * b) + parseIntStr(&s[i as usize..(i + 1) as usize].to_string()));
73 +         n = (n * b) + parseIntStr(&s[i as usize..(i + 1) as usize].to_string());
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:74:13
   |
74 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
74 -         i = (i + 1);
74 +         i = i + 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:80:17
   |
80 |     let mut i = ((s.len() as i64) - 1);
   |                 ^                    ^
   |
help: remove these parentheses
   |
80 -     let mut i = ((s.len() as i64) - 1);
80 +     let mut i = (s.len() as i64) - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:81:11
   |
81 |     while (i >= 0) {
   |           ^      ^
   |
help: remove these parentheses
   |
81 -     while (i >= 0) {
81 +     while i >= 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:83:13
   |
83 |         i = (i - 1);
   |             ^     ^
   |
help: remove these parentheses
   |
83 -         i = (i - 1);
83 +         i = i - 1;
   |

warning: unnecessary parentheses around `return` value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:88:12
   |
88 |     return (s == reverseStr(s))
   |            ^                  ^
   |
help: remove these parentheses
   |
88 -     return (s == reverseStr(s))
88 +     return s == reverseStr(s)
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:95:8
   |
95 |     if (a < b) {
   |        ^     ^
   |
help: remove these parentheses
   |
95 -     if (a < b) {
95 +     if a < b {
   |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:101:8
    |
101 |     if (a > b) {
    |        ^     ^
    |
help: remove these parentheses
    |
101 -     if (a > b) {
101 +     if a > b {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:109:11
    |
109 |     while (y != 0) {
    |           ^      ^
    |
help: remove these parentheses
    |
109 -     while (y != 0) {
109 +     while y != 0 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:110:13
    |
110 |         x = ((x * 3) + (y % 3));
    |             ^                 ^
    |
help: remove these parentheses
    |
110 -         x = ((x * 3) + (y % 3));
110 +         x = (x * 3) + (y % 3);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:111:13
    |
111 |         y = (y / 3);
    |             ^     ^
    |
help: remove these parentheses
    |
111 -         y = (y / 3);
111 +         y = y / 3;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:131:15
    |
131 |         while (i < hi) {
    |               ^      ^
    |
help: remove these parentheses
    |
131 -         while (i < hi) {
131 +         while i < hi {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:132:30
    |
132 |             let mut n: i64 = ((((i * 3) + 1) * pow3) + reverse3(i));
    |                              ^                                    ^
    |
help: remove these parentheses
    |
132 -             let mut n: i64 = ((((i * 3) + 1) * pow3) + reverse3(i));
132 +             let mut n: i64 = (((i * 3) + 1) * pow3) + reverse3(i);
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:135:25
    |
135 |                 count = (count + 1);
    |                         ^         ^
    |
help: remove these parentheses
    |
135 -                 count = (count + 1);
135 +                 count = count + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:136:20
    |
136 |                 if (count >= 6) {
    |                    ^          ^
    |
help: remove these parentheses
    |
136 -                 if (count >= 6) {
136 +                 if count >= 6 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:140:17
    |
140 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
140 -             i = (i + 1);
140 +             i = i + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:142:12
    |
142 |         if (i == pow3) {
    |            ^         ^
    |
help: remove these parentheses
    |
142 -         if (i == pow3) {
142 +         if i == pow3 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:143:20
    |
143 |             pow3 = (pow3 * 3);
    |                    ^        ^
    |
help: remove these parentheses
    |
143 -             pow3 = (pow3 * 3);
143 +             pow3 = pow3 * 3;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:145:20
    |
145 |             pow2 = (pow2 * 4);
    |                    ^        ^
    |
help: remove these parentheses
    |
145 -             pow2 = (pow2 * 4);
145 +             pow2 = pow2 * 4;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:148:19
    |
148 |             while (pow2 <= pow3) {
    |                   ^            ^
    |
help: remove these parentheses
    |
148 -             while (pow2 <= pow3) {
148 +             while pow2 <= pow3 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:149:24
    |
149 |                 pow2 = (pow2 * 4);
    |                        ^        ^
    |
help: remove these parentheses
    |
149 -                 pow2 = (pow2 * 4);
149 +                 pow2 = pow2 * 4;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:151:32
    |
151 |             let mut lo2: i64 = (((pow2 / pow3) - 1) / 3);
    |                                ^                       ^
    |
help: remove these parentheses
    |
151 -             let mut lo2: i64 = (((pow2 / pow3) - 1) / 3);
151 +             let mut lo2: i64 = ((pow2 / pow3) - 1) / 3;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:152:32
    |
152 |             let mut hi2: i64 = (((((pow2 * 2) / pow3) - 1) / 3) + 1);
    |                                ^                                   ^
    |
help: remove these parentheses
    |
152 -             let mut hi2: i64 = (((((pow2 * 2) / pow3) - 1) / 3) + 1);
152 +             let mut hi2: i64 = ((((pow2 * 2) / pow3) - 1) / 3) + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:153:32
    |
153 |             let mut lo3: i64 = (pow3 / 3);
    |                                ^        ^
    |
help: remove these parentheses
    |
153 -             let mut lo3: i64 = (pow3 / 3);
153 +             let mut lo3: i64 = pow3 / 3;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:155:16
    |
155 |             if (lo2 >= hi3) {
    |                ^          ^
    |
help: remove these parentheses
    |
155 -             if (lo2 >= hi3) {
155 +             if lo2 >= hi3 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:156:24
    |
156 |                 pow3 = (pow3 * 3);
    |                        ^        ^
    |
help: remove these parentheses
    |
156 -                 pow3 = (pow3 * 3);
156 +                 pow3 = pow3 * 3;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:157:23
    |
157 |             } else if (lo3 >= hi2) {
    |                       ^          ^
    |
help: remove these parentheses
    |
157 -             } else if (lo3 >= hi2) {
157 +             } else if lo3 >= hi2 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:158:24
    |
158 |                 pow2 = (pow2 * 4);
    |                        ^        ^
    |
help: remove these parentheses
    |
158 -                 pow2 = (pow2 * 4);
158 +                 pow2 = pow2 * 4;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:170:28
    |
170 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
170 -     let duration_us: i64 = ((_end - _start) / 1000);
170 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:171:29
    |
171 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
171 -     let memory_bytes: i64 = (_end_mem - _start_mem);
171 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:54:78
   |
54 |     if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-")) {
   |                                      ------------------------------------    ^^^ expected `char`, found `&str`
   |                                      |
   |                                      expected because this is `char`
   |
help: if you meant to write a `char` literal, use single quotes
   |
54 -     if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-")) {
54 +     if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == '-')) {
   |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:40:42
   |
40 |     fn toBase(mut n: i64, mut b: i64) -> String {
   |        ------                            ^^^^^^ expected `String`, found `()`
   |        |
   |        implicitly returns `()` as its body has no tail or `return` expression
   |
help: consider returning the local binding `s`
   |
67 ~ };
68 +     s
   |

error[E0425]: cannot find function `parseIntStr` in this scope
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:73:24
   |
73 |         n = ((n * b) + parseIntStr(&s[i as usize..(i + 1) as usize].to_string()));
   |                        ^^^^^^^^^^^ not found in this scope

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:90:24
   |
90 |     fn isPalindromeBin(mut n: i64) -> bool {
   |                        ----^
   |                        |
   |                        help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:91:9
   |
91 |     let mut b: String = toBase(n, 2).clone();
   |         ----^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:94:14
   |
94 |     fn myMin(mut a: i64, mut b: i64) -> i64 {
   |              ----^
   |              |
   |              help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:94:26
   |
94 |     fn myMin(mut a: i64, mut b: i64) -> i64 {
   |                          ----^
   |                          |
   |                          help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:100:14
    |
100 |     fn myMax(mut a: i64, mut b: i64) -> i64 {
    |              ----^
    |              |
    |              help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:100:26
    |
100 |     fn myMax(mut a: i64, mut b: i64) -> i64 {
    |                          ----^
    |                          |
    |                          help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:106:17
    |
106 |     fn reverse3(mut n: i64) -> i64 {
    |                 ----^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:115:13
    |
115 |     fn show(mut n: i64) {
    |             ----^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:132:17
    |
132 |             let mut n: i64 = ((((i * 3) + 1) * pow3) + reverse3(i));
    |                 ----^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:151:17
    |
151 |             let mut lo2: i64 = (((pow2 / pow3) - 1) / 3);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:152:17
    |
152 |             let mut hi2: i64 = (((((pow2 * 2) / pow3) - 1) / 3) + 1);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:153:17
    |
153 |             let mut lo3: i64 = (pow3 / 3);
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/find-palindromic-numbers-in-both-binary-and-ternary-bases.rs:154:17
    |
154 |             let mut hi3: i64 = pow3;
    |                 ----^^^
    |                 |
    |                 help: remove this `mut`

error: aborting due to 4 previous errors; 61 warnings emitted

Some errors have detailed explanations: E0308, E0425.
For more information about an error, try `rustc --explain E0308`.
