// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn primeFactors(mut n: i64) -> Vec<i64> {
    let mut factors: Vec<i64> = vec![];
    let mut x: i64 = n;
    while ((x % 2) == 0) {
        factors = { let mut _v = factors.clone(); _v.push(2); _v };
        x = (x / 2);
    }
    let mut p: i64 = 3;
    while ((p * p) <= x) {
        while ((x % p) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(p); _v };
            x = (x / p);
        }
        p = (p + 2);
    }
    if (x > 1) {
        factors = { let mut _v = factors.clone(); _v.push(x); _v };
    }
    return factors
};
    fn repeat(ch: &str, mut n: i64) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
};
    fn D(mut n: f64) -> f64 {
    if (n < 0.0) {
        return -D(-n)
    }
    if (n < 2.0) {
        return 0.0
    }
    let mut factors: Vec<i64> = vec![];
    if (n < 10000000000000000000.0) {
        factors = primeFactors((n as i64));
    } else {
        let mut g: i64 = ((n / 100.0) as i64);
        factors = primeFactors(g);
        factors = { let mut _v = factors.clone(); _v.push(2); _v };
        factors = { let mut _v = factors.clone(); _v.push(2); _v };
        factors = { let mut _v = factors.clone(); _v.push(5); _v };
        factors = { let mut _v = factors.clone(); _v.push(5); _v };
    }
    let mut c = (factors.len() as i64);
    if (c == 1) {
        return 1.0
    }
    if (c == 2) {
        return ((factors[0 as usize] + factors[1 as usize]) as f64)
    }
    let mut d: f64 = (n / (factors[0 as usize] as f64));
    return ((D(d) * (factors[0 as usize] as f64)) + d)
};
    fn pad(mut n: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < 4) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn mochi_main() {
    let mut vals: Vec<i64> = vec![];
    let mut n: i64 = -99;
    while (n < 101) {
        vals = { let mut _v = vals.clone(); _v.push((D((n as f64)) as i64)); _v };
        n = (n + 1);
    }
    let mut i: i64 = 0;
    while (i < (vals.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut j: i64 = 0;
        while (j < 10) {
            line = format!("{}{}", line, pad(vals[(i + j) as usize]));
            if (j < 9) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 10);
    }
    let mut pow: f64 = 1.0;
    let mut m: i64 = 1;
    while (m < 21) {
        pow = (pow * 10.0);
        let mut exp = m.to_string();
        if ((exp.len() as i64) < 2) {
            exp = format!("{}{}", exp, " ");
        }
        let mut res = format!("{}{}", m.to_string(), repeat(&"0", (m - 1)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "D(10^", exp), ") / 7 = "), res));
        m = (m + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
