// Generated by Mochi transpiler v0.10.41 on 2025-07-27 06:30 +0700
fn primeFactors(mut n: i64) -> Vec<i64> {
    let mut factors: Vec<i64> = vec![];
    let mut x: i64 = n;
    while ((x % 2) == 0) {
        factors = { let mut v = factors.clone(); v.push(2); v };
        x = (x / 2);
    }
    let mut p: i64 = 3;
    while ((p * p) <= x) {
        while ((x % p) == 0) {
            factors = { let mut v = factors.clone(); v.push(p); v };
            x = (x / p);
        }
        p = (p + 2);
    }
    if (x > 1) {
        factors = { let mut v = factors.clone(); v.push(x); v };
    }
    return factors
}

fn repeat(mut ch: String, mut n: i64) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
}

fn D(mut n: f64) -> f64 {
    if (n < 0.0) {
        return -D(-n)
    }
    if (n < 2.0) {
        return 0.0
    }
    let mut factors: Vec<i64> = vec![];
    if (n < 10000000000000000000.0) {
        factors = primeFactors((n as i64));
    } else {
        let g: i64 = ((n / 100.0) as i64);
        factors = primeFactors(g);
        factors = { let mut v = factors.clone(); v.push(2); v };
        factors = { let mut v = factors.clone(); v.push(2); v };
        factors = { let mut v = factors.clone(); v.push(5); v };
        factors = { let mut v = factors.clone(); v.push(5); v };
    }
    let c = (factors.len() as i64);
    if (c == 1) {
        return 1.0
    }
    if (c == 2) {
        return ((factors[0 as usize] + factors[1 as usize]) as f64)
    }
    let d: f64 = (n / (factors[0 as usize] as f64));
    return ((D(d) * (factors[0 as usize] as f64)) + d)
}

fn pad(mut n: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < 4) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
}

fn mochi_main() {
    let mut vals: Vec<i64> = vec![];
    let mut n: i64 = -99;
    while (n < 101) {
        vals = { let mut v = vals.clone(); v.push((D((n as f64)) as i64)); v };
        n = (n + 1);
    }
    let mut i: i64 = 0;
    while (i < (vals.len() as i64)) {
        let mut line = String::from("");
        let mut j: i64 = 0;
        while (j < 10) {
            line = format!("{}{}", line, pad(vals[(i + j) as usize]));
            if (j < 9) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 10);
    }
    let mut pow: f64 = 1.0;
    let mut m: i64 = 1;
    while (m < 21) {
        pow = (pow * 10.0);
        let mut exp = m.to_string();
        if ((exp.len() as i64) < 2) {
            exp = format!("{}{}", exp, " ");
        }
        let mut res = format!("{}{}", m.to_string(), repeat(String::from("0"), (m - 1)));
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "D(10^", exp), ") / 7 = "), res));
        m = (m + 1);
    }
}

fn main() {
    mochi_main();
}
