warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:54:8
   |
54 |     if (op == g_OP_ADD) {
   |        ^              ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
54 -     if (op == g_OP_ADD) {
54 +     if op == g_OP_ADD {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:57:8
   |
57 |     if (op == g_OP_SUB) {
   |        ^              ^
   |
help: remove these parentheses
   |
57 -     if (op == g_OP_SUB) {
57 +     if op == g_OP_SUB {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:60:8
   |
60 |     if (op == g_OP_MUL) {
   |        ^              ^
   |
help: remove these parentheses
   |
60 -     if (op == g_OP_MUL) {
60 +     if op == g_OP_MUL {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:70:8
   |
70 |     if (op == g_OP_ADD) {
   |        ^              ^
   |
help: remove these parentheses
   |
70 -     if (op == g_OP_ADD) {
70 +     if op == g_OP_ADD {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:72:15
   |
72 |     } else if (op == g_OP_SUB) {
   |               ^              ^
   |
help: remove these parentheses
   |
72 -     } else if (op == g_OP_SUB) {
72 +     } else if op == g_OP_SUB {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:74:15
   |
74 |     } else if (op == g_OP_MUL) {
   |               ^              ^
   |
help: remove these parentheses
   |
74 -     } else if (op == g_OP_MUL) {
74 +     } else if op == g_OP_MUL {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:95:8
   |
95 |     if (xs.len() as i64 == 1) {
   |        ^                    ^
   |
help: remove these parentheses
   |
95 -     if (xs.len() as i64 == 1) {
95 +     if xs.len() as i64 == 1 {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:97:12
   |
97 |         if ((f.denom != 0) && (f.num == (f.denom * g_goal))) {
   |            ^                                               ^
   |
help: remove these parentheses
   |
97 -         if ((f.denom != 0) && (f.num == (f.denom * g_goal))) {
97 +         if (f.denom != 0) && (f.num == (f.denom * g_goal)) {
   |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:104:11
    |
104 |     while (i < xs.len() as i64) {
    |           ^                   ^
    |
help: remove these parentheses
    |
104 -     while (i < xs.len() as i64) {
104 +     while i < xs.len() as i64 {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:105:26
    |
105 |         let mut j: i64 = (i + 1);
    |                          ^     ^
    |
help: remove these parentheses
    |
105 -         let mut j: i64 = (i + 1);
105 +         let mut j: i64 = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:106:15
    |
106 |         while (j < xs.len() as i64) {
    |               ^                   ^
    |
help: remove these parentheses
    |
106 -         while (j < xs.len() as i64) {
106 +         while j < xs.len() as i64 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:109:19
    |
109 |             while (k < xs.len() as i64) {
    |                   ^                   ^
    |
help: remove these parentheses
    |
109 -             while (k < xs.len() as i64) {
109 +             while k < xs.len() as i64 {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:110:20
    |
110 |                 if ((k != i) && (k != j)) {
    |                    ^                    ^
    |
help: remove these parentheses
    |
110 -                 if ((k != i) && (k != j)) {
110 +                 if (k != i) && (k != j) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:113:21
    |
113 |                 k = (k + 1);
    |                     ^     ^
    |
help: remove these parentheses
    |
113 -                 k = (k + 1);
113 +                 k = k + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:132:17
    |
132 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
132 -             j = (j + 1);
132 +             j = j + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:134:13
    |
134 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
134 -         i = (i + 1);
134 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:141:11
    |
141 |     while (iter < 10) {
    |           ^         ^
    |
help: remove these parentheses
    |
141 -     while (iter < 10) {
141 +     while iter < 10 {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:144:15
    |
144 |         while (i < g_n_cards) {
    |               ^             ^
    |
help: remove these parentheses
    |
144 -         while (i < g_n_cards) {
144 +         while i < g_n_cards {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:145:21
    |
145 |             let n = ((_now() % (g_digit_range - 1)) + 1);
    |                     ^                                  ^
    |
help: remove these parentheses
    |
145 -             let n = ((_now() % (g_digit_range - 1)) + 1);
145 +             let n = (_now() % (g_digit_range - 1)) + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:148:17
    |
148 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
148 -             i = (i + 1);
148 +             i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:154:16
    |
154 |         iter = (iter + 1);
    |                ^        ^
    |
help: remove these parentheses
    |
154 -         iter = (iter + 1);
154 +         iter = iter + 1;
    |

error[E0308]: arguments to this function are incorrect
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:87:94
   |
87 |     return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, l, r), }
   |                                                                                              ^^^^^^^
   |
note: expected `Expr`, found `Box<Expr>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:87:106
   |
87 |     return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, l, r), }
   |                                                                                                          ^
   = note: expected enum `Expr`
            found struct `Box<Expr>`
note: expected `Expr`, found `Box<Expr>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:87:109
   |
87 |     return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, l, r), }
   |                                                                                                             ^
   = note: expected enum `Expr`
            found struct `Box<Expr>`
note: function defined here
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:51:11
   |
51 | unsafe fn binEval(mut op: i64, mut l: Expr, mut r: Expr) -> Rational {
   |           ^^^^^^^              -----------  -----------
help: consider unboxing the value
   |
87 |     return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, *l, r), }
   |                                                                                                          +
help: consider unboxing the value
   |
87 |     return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, l, *r), }
   |                                                                                                             +

error[E0308]: arguments to this function are incorrect
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:91:110
   |
91 |     return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, l, r), }.to_st...
   |                                                                                                              ^^^^^^^^^
   |
note: expected `Expr`, found `Box<Expr>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:91:124
   |
91 |     return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, l, r), }.to_st...
   |                                                                                                                            ^
   = note: expected enum `Expr`
            found struct `Box<Expr>`
note: expected `Expr`, found `Box<Expr>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:91:127
   |
91 |     return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, l, r), }.to_st...
   |                                                                                                                               ^
   = note: expected enum `Expr`
            found struct `Box<Expr>`
note: function defined here
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:66:11
   |
66 | unsafe fn binString(mut op: i64, mut l: Expr, mut r: Expr) -> String {
   |           ^^^^^^^^^              -----------  -----------
help: consider unboxing the value
   |
91 |     return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, *l, r), }.to_string()
   |                                                                                                                            +
help: consider unboxing the value
   |
91 |     return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, l, *r), }.to_string()
   |                                                                                                                               +

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:51:19
   |
51 | unsafe fn binEval(mut op: i64, mut l: Expr, mut r: Expr) -> Rational {
   |                   ----^^
   |                   |
   |                   help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:51:32
   |
51 | unsafe fn binEval(mut op: i64, mut l: Expr, mut r: Expr) -> Rational {
   |                                ----^
   |                                |
   |                                help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:51:45
   |
51 | unsafe fn binEval(mut op: i64, mut l: Expr, mut r: Expr) -> Rational {
   |                                             ----^
   |                                             |
   |                                             help: remove this `mut`

warning: value assigned to `opstr` is never read
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:69:13
   |
69 |     let mut opstr = String::from("");
   |             ^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:66:21
   |
66 | unsafe fn binString(mut op: i64, mut l: Expr, mut r: Expr) -> String {
   |                     ----^^
   |                     |
   |                     help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:66:34
   |
66 | unsafe fn binString(mut op: i64, mut l: Expr, mut r: Expr) -> String {
   |                                  ----^
   |                                  |
   |                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:66:47
   |
66 | unsafe fn binString(mut op: i64, mut l: Expr, mut r: Expr) -> String {
   |                                               ----^
   |                                               |
   |                                               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:82:18
   |
82 | unsafe fn newNum(mut n: i64) -> Expr {
   |                  ----^
   |                  |
   |                  help: remove this `mut`

warning: variable `node` is assigned to, but never used
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:117:21
    |
117 |             let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a), right: Box::new(b) };
    |                     ^^^^
    |
    = note: consider using `_node` instead
    = note: `#[warn(unused_variables)]` on by default

warning: value assigned to `node` is never read
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:119:17
    |
119 |                 node = Expr::Bin { op: op, left: Box::new(a), right: Box::new(b) };
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `node` is never read
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:124:13
    |
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a) };
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `node` is never read
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:128:13
    |
128 |             node = Expr::Bin { op: g_OP_DIV, left: Box::new(b), right: Box::new(a) };
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:94:17
   |
94 | unsafe fn solve(mut xs: Vec<Expr>) -> bool {
   |                 ----^^
   |                 |
   |                 help: remove this `mut`

error[E0382]: use of moved value: `b`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:124:61
    |
116 |             let b: Expr = xs[j as usize].clone();
    |                 - move occurs because `b` has type `Expr`, which does not implement the `Copy` trait
117 |             let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a), right: Box::new(b) };
    |                                                                                               - value moved here
...
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a) };
    |                                                             ^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
117 |             let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a), right: Box::new(b.clone()) };
    |                                                                                                ++++++++

error[E0382]: use of moved value: `a`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:124:81
    |
115 |             let a: Expr = xs[i as usize].clone();
    |                 - move occurs because `a` has type `Expr`, which does not implement the `Copy` trait
116 |             let b: Expr = xs[j as usize].clone();
117 |             let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a), right: Box::new(b) };
    |                                                                           - value moved here
...
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a) };
    |                                                                                 ^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
117 |             let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a.clone()), right: Box::new(b) };
    |                                                                            ++++++++

error[E0382]: use of moved value: `b`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:128:61
    |
116 |             let b: Expr = xs[j as usize].clone();
    |                 - move occurs because `b` has type `Expr`, which does not implement the `Copy` trait
...
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a) };
    |                                                             - value moved here
...
128 |             node = Expr::Bin { op: g_OP_DIV, left: Box::new(b), right: Box::new(a) };
    |                                                             ^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b.clone()), right: Box::new(a) };
    |                                                              ++++++++

error[E0382]: use of moved value: `a`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:128:81
    |
115 |             let a: Expr = xs[i as usize].clone();
    |                 - move occurs because `a` has type `Expr`, which does not implement the `Copy` trait
...
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a) };
    |                                                                                 - value moved here
...
128 |             node = Expr::Bin { op: g_OP_DIV, left: Box::new(b), right: Box::new(a) };
    |                                                                                 ^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
124 |             node = Expr::Bin { op: g_OP_SUB, left: Box::new(b), right: Box::new(a.clone()) };
    |                                                                                  ++++++++

warning: unnecessary `unsafe` block
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/24-game-solve.rs:167:9
    |
159 |     unsafe {
    |     ------ because it's nested under this `unsafe` block
...
167 |         unsafe { mochi_main(); }
    |         ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

error: aborting due to 6 previous errors; 35 warnings emitted

Some errors have detailed explanations: E0308, E0382.
For more information about an error, try `rustc --explain E0308`.
