// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn floyd(mut n: i64) {
    println!("{}", format!("{}{}", format!("{}{}", "Floyd ", n.to_string()), ":"));
    let mut lowerLeftCorner: i64 = (((n * (n - 1)) / 2) + 1);
    let mut lastInColumn: i64 = lowerLeftCorner;
    let mut lastInRow: i64 = 1;
    let mut i: i64 = 1;
    let mut row: i64 = 1;
    let mut line = String::from("");
    while (row <= n) {
        let mut w = (lastInColumn.to_string().len() as i64);
        if (i < lastInRow) {
            line = format!("{}{}", format!("{}{}", line, pad(i.to_string(), w)), " ");
            lastInColumn = (lastInColumn + 1);
        } else {
            line = format!("{}{}", line, pad(i.to_string(), w));
            println!("{}", line);
            line = String::from("");
            row = (row + 1);
            lastInRow = (lastInRow + row);
            lastInColumn = lowerLeftCorner;
        }
        i = (i + 1);
    }
};
    fn pad(s: &str, mut w: i64) -> String {
    let mut t: String = s.to_string().clone();
    while ((t.len() as i64) < w) {
        t = format!("{}{}", " ", t);
    }
    return t.clone()
};
    floyd(5);
    floyd(14);
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
