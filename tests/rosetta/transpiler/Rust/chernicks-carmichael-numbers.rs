// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
    fn bigTrim(mut a: Vec<i64>) -> Vec<i64> {
    let mut n = (a.len() as i64);
    while ((n > 1) && (a[(n - 1) as usize] == 0)) {
        a = a[0 as usize..(n - 1) as usize].to_vec();
        n = (n - 1);
    }
    return a
};
    fn bigFromInt(mut x: i64) -> Vec<i64> {
    if (x == 0) {
        return vec![0]
    }
    let mut digits: Vec<i64> = vec![];
    let mut n: i64 = x;
    while (n > 0) {
        digits = { let mut _v = digits.clone(); _v.push((n % 10)); _v };
        n = (n / 10);
    }
    return digits
};
    fn bigMulSmall(mut a: Vec<i64>, mut m: i64) -> Vec<i64> {
    if (m == 0) {
        return vec![0]
    }
    let mut res: Vec<i64> = vec![];
    let mut carry: i64 = 0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut prod: i64 = ((a[i as usize] * m) + carry);
        res = { let mut _v = res.clone(); _v.push((prod % 10)); _v };
        carry = (prod / 10);
        i = (i + 1);
    }
    while (carry > 0) {
        res = { let mut _v = res.clone(); _v.push((carry % 10)); _v };
        carry = (carry / 10);
    }
    return bigTrim(res.clone())
};
    fn bigToString(mut a: Vec<i64>) -> String {
    let mut s: String = String::from("").clone();
    let mut i = ((a.len() as i64) - 1);
    while (i >= 0) {
        s = format!("{}{}", s, a[i as usize].to_string());
        i = (i - 1);
    }
    return s.clone()
};
    fn pow2(mut k: i64) -> i64 {
    let mut r: i64 = 1;
    let mut i: i64 = 0;
    while (i < k) {
        r = (r * 2);
        i = (i + 1);
    }
    return r
};
    fn ccFactors(mut n: i64, mut m: i64) -> Vec<i64> {
    let mut p: i64 = ((6 * m) + 1);
    if !isPrime(p) {
        return vec![]
    }
    let mut prod: Vec<i64> = bigFromInt(p);
    p = ((12 * m) + 1);
    if !isPrime(p) {
        return vec![]
    }
    prod = bigMulSmall(prod.clone(), p);
    let mut i: i64 = 1;
    while (i <= (n - 2)) {
        p = (((pow2(i) * 9) * m) + 1);
        if !isPrime(p) {
            return vec![]
        }
        prod = bigMulSmall(prod.clone(), p);
        i = (i + 1);
    }
    return prod
};
    fn ccNumbers(mut start: i64, mut end: i64) {
    let mut n: i64 = start;
    while (n <= end) {
        let mut m: i64 = 1;
        if (n > 4) {
            m = pow2((n - 4));
        }
        loop {
            let mut num: Vec<i64> = ccFactors(n, m);
            if ((num.len() as i64) > 0) {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "a(", n.to_string()), ") = "), bigToString(num.clone())));
                break
            }
            if (n <= 4) {
                m = (m + 1);
            } else {
                m = (m + pow2((n - 4)));
            }
        }
        n = (n + 1);
    }
};
    ccNumbers(3, 9);
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
