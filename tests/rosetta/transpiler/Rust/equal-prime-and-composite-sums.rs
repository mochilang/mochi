// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:31 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut i = ((s.len() as i64) - 3);
    while (i >= 1) {
        s = format!("{}{}", format!("{}{}", s[0..i].to_vec(), ","), s[i..(s.len() as i64)].to_vec());
        i = (i - 3);
    }
    return s.to_string().clone()
};
    fn primeSieve(mut n: i64) -> Vec<bool> {
    let mut sieve: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i <= n) {
        sieve = { let mut _v = sieve.clone(); _v.push(false); _v };
        i = (i + 1);
    }
    sieve[0 as usize] = true;
    sieve[1 as usize] = true;
    let mut p: i64 = 2;
    while ((p * p) <= n) {
        if !sieve[p as usize] {
            let mut m: i64 = (p * p);
            while (m <= n) {
                sieve[m as usize] = true;
                m = (m + p);
            }
        }
        p = (p + 1);
    }
    return sieve
};
    fn search(mut xs: Vec<i64>, mut target: i64) -> i64 {
    let mut low: i64 = 0;
    let mut high = (xs.len() as i64);
    while (low < high) {
        let mut mid: i64 = ((low + high) / 2);
        if (xs[mid as usize] < target) {
            low = (mid + 1);
        } else {
            high = mid;
        }
    }
    return low
};
    fn mochi_main() {
    let mut limit: i64 = 45000;
    let mut compMap: Vec<bool> = primeSieve(limit);
    let mut compSums: Vec<i64> = vec![];
    let mut primeSums: Vec<i64> = vec![];
    let mut csum: i64 = 0;
    let mut psum: i64 = 0;
    let mut i: i64 = 2;
    while (i <= limit) {
        if compMap[i as usize] {
            csum = (csum + i);
            compSums = { let mut _v = compSums.clone(); _v.push(csum); _v };
        } else {
            psum = (psum + i);
            primeSums = { let mut _v = primeSums.clone(); _v.push(psum); _v };
        }
        i = (i + 1);
    }
    println!("{}", "Sum        | Prime Index | Composite Index");
    println!("{}", "------------------------------------------");
    let mut idx: i64 = 0;
    while (idx < (primeSums.len() as i64)) {
        let mut s: i64 = primeSums[idx as usize];
        let mut j: i64 = search(compSums.clone(), s);
        if ((j < (compSums.len() as i64)) && (compSums[j as usize] == s)) {
            let mut sumStr = commatize(s).padStart(10, " ");
            let mut piStr = commatize((idx + 1)).padStart(11, " ");
            let mut ciStr = commatize((j + 1)).padStart(15, " ");
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", sumStr, " | "), piStr), " | "), ciStr));
        }
        idx = (idx + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
