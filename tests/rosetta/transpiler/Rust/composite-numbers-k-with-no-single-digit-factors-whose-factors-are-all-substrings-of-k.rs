// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:38 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn primeFactors(mut n: i64) -> Vec<i64> {
    let mut factors: Vec<i64> = vec![];
    let mut x: i64 = n;
    while ((x % 2) == 0) {
        factors = { let mut _v = factors.clone(); _v.push(2); _v };
        x = (x / 2);
    }
    let mut p: i64 = 3;
    while ((p * p) <= x) {
        while ((x % p) == 0) {
            factors = { let mut _v = factors.clone(); _v.push(p); _v };
            x = (x / p);
        }
        p = (p + 2);
    }
    if (x > 1) {
        factors = { let mut _v = factors.clone(); _v.push(x); _v };
    }
    return factors
};
    fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut out: String = String::from("").clone();
    let mut i = ((s.len() as i64) - 1);
    let mut c: i64 = 0;
    while (i >= 0) {
        out = format!("{}{}", { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }, out);
        c = (c + 1);
        if (((c % 3) == 0) && (i > 0)) {
            out = format!("{}{}", ",", out);
        }
        i = (i - 1);
    }
    return out.clone()
};
    fn indexOf(mut s: String, sub: &str) -> i64 {
    let mut i: i64 = 0;
    while ((i + (sub.len() as i64)) <= (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + (sub.len() as i64)) - i) as usize).collect::<String>() } == sub) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn pad10(s: &str) -> String {
    let mut str: String = s.to_string().clone();
    while ((str.len() as i64) < 10) {
        str = format!("{}{}", " ", str);
    }
    return str.clone()
};
    fn trimRightStr(mut s: String) -> String {
    let mut end = (s.len() as i64);
    while ((end > 0) && ({ let tmp = &s; tmp.chars().skip((end - 1) as usize).take((end - (end - 1)) as usize).collect::<String>() }.as_str() == " ")) {
        end = (end - 1);
    }
    return { let tmp = &s; tmp.chars().skip(0 as usize).take((end - 0) as usize).collect::<String>() }.clone()
};
    fn mochi_main() {
    let mut res: Vec<i64> = vec![];
    let mut count: i64 = 0;
    let mut k: i64 = (11 * 11);
    while (count < 20) {
        if ((((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0)) {
            k = (k + 2);
            continue
        }
        let mut factors: Vec<i64> = primeFactors(k);
        if ((factors.len() as i64) > 1) {
            let mut s = k.to_string();
            let mut includesAll: bool = true;
            let mut prev: i64 = -1;
            for f in factors.iter().cloned() {
                if (f == prev) {
                    continue
                }
                let mut fs = f.to_string();
                if ({ let s = s.clone(); let p = fs.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } } == -1) {
                    includesAll = false;
                    break
                }
                prev = f;
            }
            if includesAll {
                res = { let mut _v = res.clone(); _v.push(k); _v };
                count = (count + 1);
            }
        }
        k = (k + 2);
    }
    let mut line: String = String::from("").clone();
    for e in res[0 as usize..10 as usize].to_vec().iter().cloned() {
        line = format!("{}{}", format!("{}{}", line, pad10(&commatize(e))), " ");
    }
    println!("{}", trimRightStr(line.clone()));
    line = String::from("");
    for e in res[10 as usize..20 as usize].to_vec().iter().cloned() {
        line = format!("{}{}", format!("{}{}", line, pad10(&commatize(e))), " ");
    }
    println!("{}", trimRightStr(line.clone()));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
