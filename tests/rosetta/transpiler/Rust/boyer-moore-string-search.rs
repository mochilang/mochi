// Generated by Mochi transpiler v0.10.56 on 2025-08-04 06:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn indexOfStr(mut h: String, n: &str) -> i64 {
    let mut hlen = (h.len() as i64);
    let mut nlen = (n.len() as i64);
    if (nlen == 0) {
        return 0
    }
    let mut i: i64 = 0;
    while (i <= (hlen - nlen)) {
        if ({ let tmp = &h; tmp.chars().skip(i as usize).take(((i + nlen) - i) as usize).collect::<String>() } == n) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn stringSearchSingle(mut h: String, mut n: String) -> i64 {
    return indexOfStr(h.clone(), &n)
};
    fn stringSearch(h: &str, n: &str) -> Vec<i64> {
    let mut result: Vec<i64> = vec![];
    let mut start: i64 = 0;
    let mut hlen = (h.len() as i64);
    let mut nlen = (n.len() as i64);
    while (start < hlen) {
        let mut idx: i64 = indexOfStr({ let tmp = &h; tmp.chars().skip(start as usize).take((hlen - start) as usize).collect::<String>() }, n);
        if (idx >= 0) {
            result = { let mut _v = result.clone(); _v.push((start + idx)); _v };
            start = ((start + idx) + nlen);
        } else {
            break
        }
    }
    return result
};
    fn display(nums: &mut Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        if (i > 0) {
            s = format!("{}{}", s, ", ");
        }
        s = format!("{}{}", s, nums[i as usize].to_string());
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn mochi_main() {
    let mut texts: Vec<String> = vec![String::from("GCTAGCTCTACGAGTCTA"), String::from("GGCTATAATGCGTA"), String::from("there would have been a time for such a word"), String::from("needle need noodle needle"), String::from("DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages"), String::from("Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk.")];
    let mut patterns: Vec<String> = vec![String::from("TCTA"), String::from("TAATAAA"), String::from("word"), String::from("needle"), String::from("and"), String::from("alfalfa")];
    let mut i: i64 = 0;
    while (i < (texts.len() as i64)) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "text", (i + 1).to_string()), " = "), texts[i as usize].clone()));
        i = (i + 1);
    }
    println!("{}", "");
    let mut j: i64 = 0;
    while (j < (texts.len() as i64)) {
        let mut idxs: Vec<i64> = stringSearch(&texts[j as usize].clone(), &patterns[j as usize].clone());
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Found \"", patterns[j as usize].clone()), "\" in 'text"), (j + 1).to_string()), "' at indexes "), display(&mut idxs)));
        j = (j + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
