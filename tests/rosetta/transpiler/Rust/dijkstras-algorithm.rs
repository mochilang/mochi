// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_INF: i64 = 0;
static g_graph: LazyLock<Mutex<HashMap<String, HashMap<String, i64>>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
fn main() {
    unsafe {
        g_INF = 1000000000;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_INF: i64 = 0;;
        static g_graph: LazyLock<Mutex<HashMap<String, HashMap<String, i64>>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        unsafe fn addEdge(u: &str, v: &str, mut w: i64) {
    if !g_graph.lock().unwrap().contains_key(&u) {
        { let mut _map = g_graph.lock().unwrap(); let _val = HashMap::from([]); _map.insert(u.clone(), _val); };
    }
    g_graph.lock().unwrap()[&u].insert(v.clone(), w);
    if !g_graph.lock().unwrap().contains_key(&v) {
        { let mut _map = g_graph.lock().unwrap(); let _val = HashMap::from([]); _map.insert(v.clone(), _val); };
    }
};
        unsafe fn removeAt(mut xs: Vec<String>, mut idx: i64) -> Vec<i64> {
    let mut out: Vec<String> = vec![];
    let mut i: i64 = 0;
    for x in xs.clone() {
        if (i != idx) {
            out = { let mut _v = out.clone(); _v.push(x.to_string()); _v };
        }
        i = (i + 1);
    }
    return out
};
        unsafe fn dijkstra(source: &str) -> HashMap<&str, HashMap<String, i64>> {
    let mut dist: HashMap<String, i64> = HashMap::from([]);
    let mut prev: HashMap<String, String> = HashMap::from([]);
    for v in g_graph.clone().keys() {
        dist.insert(v.clone(), g_INF);
        prev.insert(v.clone(), "");
    }
    dist.insert(source.clone(), 0);
    let mut q: Vec<String> = vec![];
    for v in g_graph.clone().keys() {
        q = { let mut _v = q.clone(); _v.push(v.to_string()); _v };
    }
    while ((q.len() as i64) > 0) {
        let mut bestIdx: i64 = 0;
        let mut u: String = q[0 as usize].clone().clone();
        let mut i: i64 = 1;
        while (i < (q.len() as i64)) {
            let mut v: String = q[i as usize].clone().clone();
            if (dist[v.as_str()] < dist[u.as_str()]) {
                u = v.clone();
                bestIdx = i;
            }
            i = (i + 1);
        }
        q = removeAt(q.clone(), bestIdx);
        for v in g_graph.lock().unwrap()[u.as_str()].clone().keys() {
            let mut alt: i64 = (dist[u.as_str()] + g_graph.lock().unwrap()[u.as_str()].clone()[v.as_str()]);
            if (alt < dist[v.as_str()]) {
                dist.insert(v.clone(), alt);
                prev.insert(v.clone(), u);
            }
        }
    }
    return HashMap::from([(String::from("dist"), dist), (String::from("prev"), prev)])
};
        unsafe fn path(prev: &HashMap<String, String>, v: &str) -> String {
    let mut s: String = v.to_string().clone();
    let mut cur: String = v.to_string().clone();
    while (prev[cur.as_str()].clone().as_str() != "") {
        cur = prev[cur.as_str()].clone();
        s = format!("{}{}", cur, s);
    }
    return s.clone()
};
        unsafe fn mochi_main() {
    addEdge(&"a", &"b", 7);
    addEdge(&"a", &"c", 9);
    addEdge(&"a", &"f", 14);
    addEdge(&"b", &"c", 10);
    addEdge(&"b", &"d", 15);
    addEdge(&"c", &"d", 11);
    addEdge(&"c", &"f", 2);
    addEdge(&"d", &"e", 6);
    addEdge(&"e", &"f", 9);
    let mut res: HashMap<&str, HashMap<String, i64>> = dijkstra(&"a");
    let mut dist: HashMap<String, i64> = res["dist".as_str()].clone();
    let mut prev: HashMap<String, i64> = res["prev".as_str()].clone();
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Distance to e: ", dist["e".as_str()].to_string()), ", Path: "), path(&prev, &"e")));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Distance to f: ", dist["f".as_str()].to_string()), ", Path: "), path(&prev, &"f")));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
