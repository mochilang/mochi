// Generated by Mochi transpiler v0.10.57 on 2025-08-05 00:34 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_testCases: Vec<Vec<HashMap<String, i64>>> = Vec::new();
fn main() {
    unsafe {
        g_testCases = vec![vec![HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 2)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 3)])], vec![HashMap::from([(String::from("a"), 2), (String::from("n"), 1), (String::from("d"), 3)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 7)])], vec![HashMap::from([(String::from("a"), 4), (String::from("n"), 1), (String::from("d"), 5)]), HashMap::from([(String::from("a"), -1), (String::from("n"), 1), (String::from("d"), 239)])], vec![HashMap::from([(String::from("a"), 5), (String::from("n"), 1), (String::from("d"), 7)]), HashMap::from([(String::from("a"), 2), (String::from("n"), 3), (String::from("d"), 79)])], vec![HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 2)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 5)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 8)])], vec![HashMap::from([(String::from("a"), 4), (String::from("n"), 1), (String::from("d"), 5)]), HashMap::from([(String::from("a"), -1), (String::from("n"), 1), (String::from("d"), 70)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 99)])], vec![HashMap::from([(String::from("a"), 5), (String::from("n"), 1), (String::from("d"), 7)]), HashMap::from([(String::from("a"), 4), (String::from("n"), 1), (String::from("d"), 53)]), HashMap::from([(String::from("a"), 2), (String::from("n"), 1), (String::from("d"), 4443)])], vec![HashMap::from([(String::from("a"), 6), (String::from("n"), 1), (String::from("d"), 8)]), HashMap::from([(String::from("a"), 2), (String::from("n"), 1), (String::from("d"), 57)]), HashMap::from([(String::from("a"), 1), (String::from("n"), 1), (String::from("d"), 239)])], vec![HashMap::from([(String::from("a"), 8), (String::from("n"), 1), (String::from("d"), 10)]), HashMap::from([(String::from("a"), -1), (String::from("n"), 1), (String::from("d"), 239)]), HashMap::from([(String::from("a"), -4), (String::from("n"), 1), (String::from("d"), 515)])], vec![HashMap::from([(String::from("a"), 12), (String::from("n"), 1), (String::from("d"), 18)]), HashMap::from([(String::from("a"), 8), (String::from("n"), 1), (String::from("d"), 57)]), HashMap::from([(String::from("a"), -5), (String::from("n"), 1), (String::from("d"), 239)])], vec![HashMap::from([(String::from("a"), 16), (String::from("n"), 1), (String::from("d"), 21)]), HashMap::from([(String::from("a"), 3), (String::from("n"), 1), (String::from("d"), 239)]), HashMap::from([(String::from("a"), 4), (String::from("n"), 3), (String::from("d"), 1042)])], vec![HashMap::from([(String::from("a"), 22), (String::from("n"), 1), (String::from("d"), 28)]), HashMap::from([(String::from("a"), 2), (String::from("n"), 1), (String::from("d"), 443)]), HashMap::from([(String::from("a"), -5), (String::from("n"), 1), (String::from("d"), 1393)]), HashMap::from([(String::from("a"), -10), (String::from("n"), 1), (String::from("d"), 11018)])], vec![HashMap::from([(String::from("a"), 22), (String::from("n"), 1), (String::from("d"), 38)]), HashMap::from([(String::from("a"), 17), (String::from("n"), 7), (String::from("d"), 601)]), HashMap::from([(String::from("a"), 10), (String::from("n"), 7), (String::from("d"), 8149)])], vec![HashMap::from([(String::from("a"), 44), (String::from("n"), 1), (String::from("d"), 57)]), HashMap::from([(String::from("a"), 7), (String::from("n"), 1), (String::from("d"), 239)]), HashMap::from([(String::from("a"), -12), (String::from("n"), 1), (String::from("d"), 682)]), HashMap::from([(String::from("a"), 24), (String::from("n"), 1), (String::from("d"), 12943)])], vec![HashMap::from([(String::from("a"), 88), (String::from("n"), 1), (String::from("d"), 172)]), HashMap::from([(String::from("a"), 51), (String::from("n"), 1), (String::from("d"), 239)]), HashMap::from([(String::from("a"), 32), (String::from("n"), 1), (String::from("d"), 682)]), HashMap::from([(String::from("a"), 44), (String::from("n"), 1), (String::from("d"), 5357)]), HashMap::from([(String::from("a"), 68), (String::from("n"), 1), (String::from("d"), 12943)])], vec![HashMap::from([(String::from("a"), 88), (String::from("n"), 1), (String::from("d"), 172)]), HashMap::from([(String::from("a"), 51), (String::from("n"), 1), (String::from("d"), 239)]), HashMap::from([(String::from("a"), 32), (String::from("n"), 1), (String::from("d"), 682)]), HashMap::from([(String::from("a"), 44), (String::from("n"), 1), (String::from("d"), 5357)]), HashMap::from([(String::from("a"), 68), (String::from("n"), 1), (String::from("d"), 12944)])]];
                let _start: i64 = _now();
        unsafe fn br(mut n: i64, mut d: i64) -> i64 {
    return (n / d)
};
        static mut g_testCases: Vec<Vec<HashMap<String, i64>>> = Vec::new();;
        unsafe fn format(mut ts: Vec<HashMap<String, i64>>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (ts.len() as i64)) {
        let mut t: HashMap<String, i64> = ts[i as usize].clone();
        s = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, "{"), t.get("a").cloned().unwrap_or_default().to_string()), " "), t.get("n").cloned().unwrap_or_default().to_string()), " "), t.get("d").cloned().unwrap_or_default().to_string()), "}");
        if (i < ((ts.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    return format!("{}{}", s, "]").clone()
};
        unsafe fn tanEval(mut coef: i64, mut f: i64) -> i64 {
    if (coef == 1) {
        return f
    }
    if (coef < 0) {
        return -tanEval(-coef, f)
    }
    let mut ca: i64 = (coef / 2);
    let mut cb: i64 = (coef - ca);
    let mut a: i64 = tanEval(ca, f);
    let mut b: i64 = tanEval(cb, f);
    return ((a + b) / (1 - (a * b)))
};
        unsafe fn tans(mut m: Vec<HashMap<String, i64>>) -> i64 {
    if ((m.len() as i64) == 1) {
        let mut t: HashMap<String, i64> = m[0 as usize].clone();
        return tanEval(t.get("a").cloned().unwrap_or_default(), br(t.get("n").cloned().unwrap_or_default(), t.get("d").cloned().unwrap_or_default()))
    }
    let mut half = ((m.len() as i64) / 2);
    let mut a: i64 = tans(m[0 as usize..half as usize].to_vec());
    let mut b: i64 = tans(m[half as usize..].to_vec());
    return ((a + b) / (1 - (a * b)))
};
        for ts in g_testCases.clone().iter() {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "tan ", format(ts.clone())), " = "), tans(ts.clone()).to_string()));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
