// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:23 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_tr: String = String::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_tr = Default::default().to_string();
        g_i = 1;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn node(cl: &str, mut le: String, mut aa: i64, mut ri: String) -> HashMap<&str, &str> {
    return HashMap::from([(String::from("cl"), cl), (String::from("le"), String::from(le.clone())), (String::from("aa"), aa), (String::from("ri"), String::from(ri.clone()))])
};
        unsafe fn treeString(mut t: String) -> String {
    if (t == Default::default()) {
        return String::from("E")
    }
    let mut m: String = t.clone();
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "T(", m.chars().nth("cl" as usize).unwrap()), ", "), treeString(m.chars().nth("le" as usize).unwrap().to_string())), ", "), m.chars().nth("aa" as usize).unwrap().to_string()), ", "), treeString(m.chars().nth("ri" as usize).unwrap().to_string())), ")").clone()
};
        unsafe fn balance(mut t: String) -> String {
    if (t == Default::default()) {
        return t
    }
    let mut m: String = t.clone();
    if (m.chars().nth("cl" as usize).unwrap() != "B") {
        return t
    }
    let mut le = m.chars().nth("le" as usize).unwrap();
    let mut ri = m.chars().nth("ri" as usize).unwrap();
    if (le != Default::default()) {
        let mut leMap: i64 = le;
        if (leMap["cl" as usize] == "R") {
            let mut lele: i64 = leMap["le" as usize];
            if (lele != Default::default()) {
                let mut leleMap: i64 = lele;
                if (leleMap["cl" as usize] == "R") {
                    return node(&"R", node(&"B", leleMap["le" as usize].to_string(), leleMap["aa" as usize], leleMap["ri" as usize].to_string()).to_string(), leMap["aa" as usize], node(&"B", leMap["ri" as usize].to_string(), m.chars().nth("aa" as usize).unwrap(), ri.to_string()).to_string()).to_string()
                }
            }
            let mut leri: i64 = leMap["ri" as usize];
            if (leri != Default::default()) {
                let mut leriMap: i64 = leri;
                if (leriMap["cl" as usize] == "R") {
                    return node(&"R", node(&"B", leMap["le" as usize].to_string(), leMap["aa" as usize], leriMap["le" as usize].to_string()).to_string(), leriMap["aa" as usize], node(&"B", leriMap["ri" as usize].to_string(), m.chars().nth("aa" as usize).unwrap(), ri.to_string()).to_string()).to_string()
                }
            }
        }
    }
    if (ri != Default::default()) {
        let mut riMap: i64 = ri;
        if (riMap["cl" as usize] == "R") {
            let mut rile: i64 = riMap["le" as usize];
            if (rile != Default::default()) {
                let mut rileMap: i64 = rile;
                if (rileMap["cl" as usize] == "R") {
                    return node(&"R", node(&"B", m.chars().nth("le" as usize).unwrap().to_string(), m.chars().nth("aa" as usize).unwrap(), rileMap["le" as usize].to_string()).to_string(), rileMap["aa" as usize], node(&"B", rileMap["ri" as usize].to_string(), riMap["aa" as usize], riMap["ri" as usize].to_string()).to_string()).to_string()
                }
            }
            let mut riri: i64 = riMap["ri" as usize];
            if (riri != Default::default()) {
                let mut ririMap: i64 = riri;
                if (ririMap["cl" as usize] == "R") {
                    return node(&"R", node(&"B", m.chars().nth("le" as usize).unwrap().to_string(), m.chars().nth("aa" as usize).unwrap(), riMap["le" as usize].to_string()).to_string(), riMap["aa" as usize], node(&"B", ririMap["le" as usize].to_string(), ririMap["aa" as usize], ririMap["ri" as usize].to_string()).to_string()).to_string()
                }
            }
        }
    }
    return t.clone()
};
        unsafe fn ins(mut tr: String, mut x: i64) -> String {
    if (tr == Default::default()) {
        return node(&"R", Default::default().to_string(), x, Default::default().to_string()).to_string()
    }
    if (x < tr.chars().nth("aa" as usize).unwrap()) {
        return balance(node(&tr.chars().nth("cl" as usize).unwrap(), ins(tr.chars().nth("le" as usize).unwrap().to_string(), x), tr.chars().nth("aa" as usize).unwrap(), tr.chars().nth("ri" as usize).unwrap().to_string()).to_string())
    }
    if (x > tr.chars().nth("aa" as usize).unwrap()) {
        return balance(node(&tr.chars().nth("cl" as usize).unwrap(), tr.chars().nth("le" as usize).unwrap().to_string(), tr.chars().nth("aa" as usize).unwrap(), ins(tr.chars().nth("ri" as usize).unwrap().to_string(), x)).to_string())
    }
    return tr.clone()
};
        unsafe fn insert(mut tr: String, mut x: i64) -> String {
    let mut t: String = ins(tr.clone(), x).clone();
    if (t == Default::default()) {
        return Default::default().to_string()
    }
    let mut m: String = t.clone();
    return node(&"B", m.chars().nth("le" as usize).unwrap().to_string(), m.chars().nth("aa" as usize).unwrap(), m.chars().nth("ri" as usize).unwrap().to_string()).to_string().clone()
};
        static mut g_tr: String = String::new();;
        static mut g_i: i64 = 0;;
        while (g_i <= 16) {
            g_tr = insert(g_tr.clone(), g_i);
            g_i = (g_i + 1);
        }
        println!("{}", treeString(g_tr.clone()));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
