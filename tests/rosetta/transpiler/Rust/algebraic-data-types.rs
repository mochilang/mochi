// Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 +0700
use std::collections::HashMap;
static mut g_tr: f64 = 0.0;
static mut g_i: i64 = 0;
unsafe fn node(mut cl: String, mut le: f64, mut aa: i64, mut ri: f64) -> HashMap<&str, String> {
    return HashMap::from([(String::from("cl"), cl), (String::from("le"), le), (String::from("aa"), aa), (String::from("ri"), ri)])
}

unsafe fn treeString(mut t: f64) -> String {
    if (t == Default::default()) {
        return String::from("E")
    }
    let m: f64 = t;
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "T(", m["cl".as_str()]), ", "), treeString((m["le".as_str()] as f64))), ", "), m["aa".as_str()].to_string()), ", "), treeString((m["ri".as_str()] as f64))), ")").clone()
}

unsafe fn balance(mut t: f64) -> f64 {
    if (t == Default::default()) {
        return t
    }
    let m: f64 = t;
    if (m["cl".as_str()] != "B") {
        return t
    }
    let le: i64 = m["le".as_str()];
    let ri: i64 = m["ri".as_str()];
    if (le != Default::default()) {
        let leMap: i64 = le;
        if (leMap["cl".as_str()] == "R") {
            let lele: i64 = leMap["le".as_str()];
            if (lele != Default::default()) {
                let leleMap: i64 = lele;
                if (leleMap["cl".as_str()] == "R") {
                    return node(String::from("R"), node(String::from("B"), (leleMap["le".as_str()] as f64), leleMap["aa".as_str()], (leleMap["ri".as_str()] as f64)), leMap["aa".as_str()], node(String::from("B"), (leMap["ri".as_str()] as f64), m["aa".as_str()], (ri as f64)))
                }
            }
            let leri: i64 = leMap["ri".as_str()];
            if (leri != Default::default()) {
                let leriMap: i64 = leri;
                if (leriMap["cl".as_str()] == "R") {
                    return node(String::from("R"), node(String::from("B"), (leMap["le".as_str()] as f64), leMap["aa".as_str()], (leriMap["le".as_str()] as f64)), leriMap["aa".as_str()], node(String::from("B"), (leriMap["ri".as_str()] as f64), m["aa".as_str()], (ri as f64)))
                }
            }
        }
    }
    if (ri != Default::default()) {
        let riMap: i64 = ri;
        if (riMap["cl".as_str()] == "R") {
            let rile: i64 = riMap["le".as_str()];
            if (rile != Default::default()) {
                let rileMap: i64 = rile;
                if (rileMap["cl".as_str()] == "R") {
                    return node(String::from("R"), node(String::from("B"), (m["le".as_str()] as f64), m["aa".as_str()], (rileMap["le".as_str()] as f64)), rileMap["aa".as_str()], node(String::from("B"), (rileMap["ri".as_str()] as f64), riMap["aa".as_str()], (riMap["ri".as_str()] as f64)))
                }
            }
            let riri: i64 = riMap["ri".as_str()];
            if (riri != Default::default()) {
                let ririMap: i64 = riri;
                if (ririMap["cl".as_str()] == "R") {
                    return node(String::from("R"), node(String::from("B"), (m["le".as_str()] as f64), m["aa".as_str()], (riMap["le".as_str()] as f64)), riMap["aa".as_str()], node(String::from("B"), (ririMap["le".as_str()] as f64), ririMap["aa".as_str()], (ririMap["ri".as_str()] as f64)))
                }
            }
        }
    }
    return t
}

unsafe fn ins(mut tr: f64, mut x: i64) -> f64 {
    if (tr == Default::default()) {
        return node(String::from("R"), Default::default(), x, Default::default())
    }
    if (x < tr["aa".as_str()]) {
        return balance(node(tr["cl".as_str()].to_string(), ins((tr["le".as_str()] as f64), x), tr["aa".as_str()], (tr["ri".as_str()] as f64)))
    }
    if (x > tr["aa".as_str()]) {
        return balance(node(tr["cl".as_str()].to_string(), (tr["le".as_str()] as f64), tr["aa".as_str()], ins((tr["ri".as_str()] as f64), x)))
    }
    return tr
}

unsafe fn insert(mut tr: f64, mut x: i64) -> f64 {
    let t: f64 = ins(tr, x);
    if (t == Default::default()) {
        return Default::default()
    }
    let m: f64 = t;
    return node(String::from("B"), (m["le".as_str()] as f64), m["aa".as_str()], (m["ri".as_str()] as f64))
}

fn main() {
    unsafe {
        g_tr = Default::default();
        g_i = 1;
        while (g_i <= 16) {
            g_tr = insert(g_tr, g_i);
            g_i = (g_i + 1);
        }
        println!("{}", treeString(g_tr));
    }
}
