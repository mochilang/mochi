warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:48:2
   |
48 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:58:2
   |
58 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:70:2
   |
70 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:86:2
   |
86 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:115:2
    |
115 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:133:2
    |
133 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:155:2
    |
155 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:162:2
    |
162 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:183:2
    |
183 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:218:2
    |
218 | };
    |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:225:2
    |
225 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:42:22
   |
42 |     let mut n: i64 = (w - (s.len() as i64));
   |                      ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
42 -     let mut n: i64 = (w - (s.len() as i64));
42 +     let mut n: i64 = w - (s.len() as i64);
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:43:11
   |
43 |     while (n > 0) {
   |           ^     ^
   |
help: remove these parentheses
   |
43 -     while (n > 0) {
43 +     while n > 0 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:45:13
   |
45 |         n = (n - 1);
   |             ^     ^
   |
help: remove these parentheses
   |
45 -         n = (n - 1);
45 +         n = n - 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:51:11
   |
51 |     while (i < (s.len() as i64)) {
   |           ^                    ^
   |
help: remove these parentheses
   |
51 -     while (i < (s.len() as i64)) {
51 +     while i < (s.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:52:12
   |
52 |         if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == ch.as_str()) {
   |            ^                                                                                                                       ^
   |
help: remove these parentheses
   |
52 -         if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == ch.as_str()) {
52 +         if { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == ch.as_str() {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:55:13
   |
55 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
55 -         i = (i + 1);
55 +         i = i + 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:61:14
   |
61 |     let sl = (s.len() as i64);
   |              ^              ^
   |
help: remove these parentheses
   |
61 -     let sl = (s.len() as i64);
61 +     let sl = s.len() as i64;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:62:16
   |
62 |     let subl = (sub.len() as i64);
   |                ^                ^
   |
help: remove these parentheses
   |
62 -     let subl = (sub.len() as i64);
62 +     let subl = sub.len() as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:63:11
   |
63 |     while (i <= (sl - subl)) {
   |           ^                ^
   |
help: remove these parentheses
   |
63 -     while (i <= (sl - subl)) {
63 +     while i <= (sl - subl) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:64:12
   |
64 |         if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + subl) - i) as usize).collect::<String>() }.as_str() == sub.as_str()) {
   |            ^                                                                                                                           ^
   |
help: remove these parentheses
   |
64 -         if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + subl) - i) as usize).collect::<String>() }.as_str() == sub.as_str()) {
64 +         if { let tmp = &s; tmp.chars().skip(i as usize).take(((i + subl) - i) as usize).collect::<String>() }.as_str() == sub.as_str() {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:67:13
   |
67 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
67 -         i = (i + 1);
67 +         i = i + 1;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:76:16
   |
76 |             if (r.as_str() == s.as_str()) {
   |                ^                        ^
   |
help: remove these parentheses
   |
76 -             if (r.as_str() == s.as_str()) {
76 +             if r.as_str() == s.as_str() {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:88:8
   |
88 |     if ((xs.len() as i64) <= 1) {
   |        ^                      ^
   |
help: remove these parentheses
   |
88 -     if ((xs.len() as i64) <= 1) {
88 +     if (xs.len() as i64) <= 1 {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:93:11
   |
93 |     while (i < (xs.len() as i64)) {
   |           ^                     ^
   |
help: remove these parentheses
   |
93 -     while (i < (xs.len() as i64)) {
93 +     while i < (xs.len() as i64) {
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:96:15
   |
96 |         while (j < (xs.len() as i64)) {
   |               ^                     ^
   |
help: remove these parentheses
   |
96 -         while (j < (xs.len() as i64)) {
96 +         while j < (xs.len() as i64) {
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:97:16
   |
97 |             if (j != i) {
   |                ^      ^
   |
help: remove these parentheses
   |
97 -             if (j != i) {
97 +             if j != i {
   |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:100:17
    |
100 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
100 -             j = (j + 1);
100 +             j = j + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:106:19
    |
106 |             while (k < (p.len() as i64)) {
    |                   ^                    ^
    |
help: remove these parentheses
    |
106 -             while (k < (p.len() as i64)) {
106 +             while k < (p.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:108:21
    |
108 |                 k = (k + 1);
    |                     ^     ^
    |
help: remove these parentheses
    |
108 -                 k = (k + 1);
108 +                 k = k + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:112:13
    |
112 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
112 -         i = (i + 1);
112 +         i = i + 1;
    |

warning: denote infinite loops with `loop { ... }`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:118:5
    |
118 |     while true {
    |     ^^^^^^^^^^ help: use `loop`
    |
    = note: `#[warn(while_true)]` on by default

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:120:12
    |
120 |         if (ix == (0 - 1)) {
    |            ^             ^
    |
help: remove these parentheses
    |
120 -         if (ix == (0 - 1)) {
120 +         if ix == (0 - 1) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:124:22
    |
124 |         let sublen = ((s1.len() as i64) - start);
    |                      ^                         ^
    |
help: remove these parentheses
    |
124 -         let sublen = ((s1.len() as i64) - start);
124 +         let sublen = (s1.len() as i64) - start;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:125:12
    |
125 |         if (sublen > (s2.len() as i64)) {
    |            ^                          ^
    |
help: remove these parentheses
    |
125 -         if (sublen > (s2.len() as i64)) {
125 +         if sublen > (s2.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:126:22
    |
126 |             sublen = (s2.len() as i64);
    |                      ^               ^
    |
help: remove these parentheses
    |
126 -             sublen = (s2.len() as i64);
126 +             sublen = s2.len() as i64;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:128:12
    |
128 | ...if ({ let tmp = &s2; tmp.chars().skip(0 as usize).take((sublen - 0) as usize).collect::<String>() }.as_str() == { let tmp = &s1; tmp.chars().skip(start as usize).take(((start + sublen) - start) as usize).collect::<String>() }.as_str()) {
    |       ^                                                                                                                                                                                                                                      ^
    |
help: remove these parentheses
    |
128 -         if ({ let tmp = &s2; tmp.chars().skip(0 as usize).take((sublen - 0) as usize).collect::<String>() }.as_str() == { let tmp = &s1; tmp.chars().skip(start as usize).take(((start + sublen) - start) as usize).collect::<String>() }.as_str()) {
128 +         if { let tmp = &s2; tmp.chars().skip(0 as usize).take((sublen - 0) as usize).collect::<String>() }.as_str() == { let tmp = &s1; tmp.chars().skip(start as usize).take(((start + sublen) - start) as usize).collect::<String>() }.as_str() {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:131:17
    |
131 |         start = (start + 1);
    |                 ^         ^
    |
help: remove these parentheses
    |
131 -         start = (start + 1);
131 +         start = start + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:138:11
    |
138 |     while (i < (arr.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
138 -     while (i < (arr.len() as i64)) {
138 +     while i < (arr.len() as i64) {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:142:15
    |
142 |         while (j < (arr.len() as i64)) {
    |               ^                      ^
    |
help: remove these parentheses
    |
142 -         while (j < (arr.len() as i64)) {
142 +         while j < (arr.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:143:16
    |
143 |             if ((j != i) && containsStr(arr[j as usize].clone(), s1)) {
    |                ^                                                    ^
    |
help: remove these parentheses
    |
143 -             if ((j != i) && containsStr(arr[j as usize].clone(), s1)) {
143 +             if (j != i) && containsStr(arr[j as usize].clone(), s1) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:147:17
    |
147 |             j = (j + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
147 -             j = (j + 1);
147 +             j = j + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:152:13
    |
152 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
152 -         i = (i + 1);
152 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:168:11
    |
168 |     while (idx < (perms.len() as i64)) {
    |           ^                          ^
    |
help: remove these parentheses
    |
168 -     while (idx < (perms.len() as i64)) {
168 +     while idx < (perms.len() as i64) {
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:172:15
    |
172 |         while (i < ((ss.len() as i64) - 1)) {
    |               ^                           ^
    |
help: remove these parentheses
    |
172 -         while (i < ((ss.len() as i64) - 1)) {
172 +         while i < ((ss.len() as i64) - 1) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:175:17
    |
175 |             i = (i + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
175 -             i = (i + 1);
175 +             i = i + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:177:12
    |
177 |         if ((sup.len() as i64) < (shortest.len() as i64)) {
    |            ^                                            ^
    |
help: remove these parentheses
    |
177 -         if ((sup.len() as i64) < (shortest.len() as i64)) {
177 +         if (sup.len() as i64) < (shortest.len() as i64) {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:180:15
    |
180 |         idx = (idx + 1);
    |               ^       ^
    |
help: remove these parentheses
    |
180 -         idx = (idx + 1);
180 +         idx = idx + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:190:11
    |
190 |     while (i < (seq.len() as i64)) {
    |           ^                      ^
    |
help: remove these parentheses
    |
190 -     while (i < (seq.len() as i64)) {
190 +     while i < (seq.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:192:12
    |
192 |         if (ch.as_str() == "A") {
    |            ^                  ^
    |
help: remove these parentheses
    |
192 -         if (ch.as_str() == "A") {
192 +         if ch.as_str() == "A" {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:193:17
    |
193 |             a = (a + 1);
    |                 ^     ^
    |
help: remove these parentheses
    |
193 -             a = (a + 1);
193 +             a = a + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:195:16
    |
195 |             if (ch.as_str() == "C") {
    |                ^                  ^
    |
help: remove these parentheses
    |
195 -             if (ch.as_str() == "C") {
195 +             if ch.as_str() == "C" {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:196:21
    |
196 |                 c = (c + 1);
    |                     ^     ^
    |
help: remove these parentheses
    |
196 -                 c = (c + 1);
196 +                 c = c + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:198:20
    |
198 |                 if (ch.as_str() == "G") {
    |                    ^                  ^
    |
help: remove these parentheses
    |
198 -                 if (ch.as_str() == "G") {
198 +                 if ch.as_str() == "G" {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:199:25
    |
199 |                     g = (g + 1);
    |                         ^     ^
    |
help: remove these parentheses
    |
199 -                     g = (g + 1);
199 +                     g = g + 1;
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:201:24
    |
201 |                     if (ch.as_str() == "T") {
    |                        ^                  ^
    |
help: remove these parentheses
    |
201 -                     if (ch.as_str() == "T") {
201 +                     if ch.as_str() == "T" {
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:202:29
    |
202 |                         t = (t + 1);
    |                             ^     ^
    |
help: remove these parentheses
    |
202 -                         t = (t + 1);
202 +                         t = t + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:207:13
    |
207 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
207 -         i = (i + 1);
207 +         i = i + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:209:17
    |
209 |     let total = (seq.len() as i64);
    |                 ^                ^
    |
help: remove these parentheses
    |
209 -     let total = (seq.len() as i64);
209 +     let total = seq.len() as i64;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:229:28
    |
229 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
229 -     let duration_us: i64 = ((_end - _start) / 1000);
229 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:230:29
    |
230 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
230 -     let memory_bytes: i64 = (_end_mem - _start_mem);
230 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0277]: the type `[String]` cannot be indexed by `i64`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:107:63
    |
107 |                 perm = { let mut _v = perm.clone(); _v.push(p[k].to_string()); _v };
    |                                                               ^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[String]>` is not implemented for `i64`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i64`
    = note: required for `Vec<String>` to implement `Index<i64>`

error[E0308]: mismatched types
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:118:5
    |
116 |       fn headTailOverlap(mut s1: String, mut s2: String) -> i64 {
    |                                                             --- expected `i64` because of return type
117 |       let mut start: i64 = 0;
118 | /     while true {
119 | |         let ix: i64 = indexOfFrom(s1, s2[0 as usize..1 as usize].to_string(), start);
120 | |         if (ix == (0 - 1)) {
121 | |             return 0
...   |
131 | |         start = (start + 1);
132 | |     }
    | |_____^ expected `i64`, found `()`
    |
    = note: `while` loops evaluate to unit type `()`
help: consider returning a value here
    |
132 ~     }
133 +     /* `i64` value */
    |

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:40:16
   |
40 |     fn padLeft(mut s: String, mut w: i64) -> String {
   |                ----^
   |                |
   |                help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:40:31
   |
40 |     fn padLeft(mut s: String, mut w: i64) -> String {
   |                               ----^
   |                               |
   |                               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:49:20
   |
49 |     fn indexOfFrom(mut s: String, mut ch: String, mut start: i64) -> i64 {
   |                    ----^
   |                    |
   |                    help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:49:35
   |
49 |     fn indexOfFrom(mut s: String, mut ch: String, mut start: i64) -> i64 {
   |                                   ----^^
   |                                   |
   |                                   help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:49:51
   |
49 |     fn indexOfFrom(mut s: String, mut ch: String, mut start: i64) -> i64 {
   |                                                   ----^^^^^
   |                                                   |
   |                                                   help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:59:20
   |
59 |     fn containsStr(mut s: String, mut sub: String) -> bool {
   |                    ----^
   |                    |
   |                    help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:59:35
   |
59 |     fn containsStr(mut s: String, mut sub: String) -> bool {
   |                                   ----^^^
   |                                   |
   |                                   help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:71:17
   |
71 |     fn distinct(mut slist: Vec<String>) -> Vec<String> {
   |                 ----^^^^^
   |                 |
   |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:134:20
    |
134 |     fn deduplicate(mut slist: Vec<String>) -> Vec<String> {
    |                    ----^^^^^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:135:9
    |
135 |     let mut arr: Vec<String> = distinct(slist.clone());
    |         ----^^^
    |         |
    |         help: remove this `mut`

error[E0382]: use of moved value: `s1`
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:143:66
    |
139 |         let s1: String = arr[i as usize].clone().clone();
    |             --           ------------------------------- this reinitialization might get skipped
    |             |
    |             move occurs because `s1` has type `String`, which does not implement the `Copy` trait
...
142 |         while (j < (arr.len() as i64)) {
    |         ------------------------------ inside of this loop
143 |             if ((j != i) && containsStr(arr[j as usize].clone(), s1)) {
    |                                                                  ^^ value moved here, in previous iteration of loop
    |
note: consider changing this parameter type in function `containsStr` to borrow instead if owning the value isn't necessary
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:59:44
    |
59  |     fn containsStr(mut s: String, mut sub: String) -> bool {
    |        ----------- in this function        ^^^^^^ this parameter takes ownership of the value
note: verify that your loop breaking logic is correct
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:145:17
    |
138 |     while (i < (arr.len() as i64)) {
    |     ------------------------------
...
142 |         while (j < (arr.len() as i64)) {
    |         ------------------------------
...
145 |                 break
    |                 ^^^^^ this `break` exits the loop at line 142
help: consider moving the expression out of the loop so it is only moved once
    |
142 ~         let mut value = containsStr(arr[j as usize].clone(), s1);
143 ~         while (j < (arr.len() as i64)) {
144 ~             if ((j != i) && value) {
    |
help: consider cloning the value if the performance cost is acceptable
    |
143 |             if ((j != i) && containsStr(arr[j as usize].clone(), s1.clone())) {
    |                                                                    ++++++++

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:156:16
    |
156 |     fn joinAll(mut ss: Vec<String>) -> String {
    |                ----^^
    |                |
    |                help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:163:34
    |
163 |     fn shortestCommonSuperstring(mut slist: Vec<String>) -> String {
    |                                  ----^^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:164:9
    |
164 |     let mut ss: Vec<String> = deduplicate(slist.clone());
    |         ----^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:166:9
    |
166 |     let mut perms: Vec<Vec<String>> = permutations(ss.clone());
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:169:13
    |
169 |         let mut perm: Vec<String> = perms[idx as usize].clone();
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:184:20
    |
184 |     fn printCounts(mut seq: String) {
    |                    ----^^^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/bioinformatics-global-alignment.rs:220:9
    |
220 |     let mut tests: Vec<Vec<String>> = vec![vec![String::from("TA"), String::from("AAG"), String::from("TA"), String::from("GAA"), String:...
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

error: aborting due to 3 previous errors; 78 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0382.
For more information about an error, try `rustc --explain E0277`.
