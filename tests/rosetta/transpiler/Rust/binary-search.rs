// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn bsearch(mut arr: Vec<i64>, mut x: i64) -> i64 {
    let mut low: i64 = 0;
    let mut high = ((arr.len() as i64) - 1);
    while (low <= high) {
        let mid: i64 = ((low + high) / 2);
        if (arr[mid as usize] > x) {
            high = (mid - 1);
        } else if (arr[mid as usize] < x) {
            low = (mid + 1);
        } else {
            return mid
        }
    }
    return -1
};
    fn bsearchRec(mut arr: Vec<i64>, mut x: i64, mut low: i64, mut high: i64) -> i64 {
    if (high < low) {
        return -1
    }
    let mid: i64 = ((low + high) / 2);
    if (arr[mid as usize] > x) {
        return bsearchRec(arr.clone(), x, low, (mid - 1))
    } else if (arr[mid as usize] < x) {
        return bsearchRec(arr.clone(), x, (mid + 1), high)
    }
    return mid
};
    fn mochi_main() {
    let mut nums: Vec<i64> = vec![-31, 0, 1, 2, 2, 4, 65, 83, 99, 782];
    let mut x: i64 = 2;
    let mut idx: i64 = bsearch(nums.clone(), x);
    if (idx >= 0) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", x.to_string(), " is at index "), idx.to_string()), "."));
    } else {
        println!("{}", format!("{}{}", x.to_string(), " is not found."));
    }
    x = 5;
    idx = bsearchRec(nums.clone(), x, 0, ((nums.len() as i64) - 1));
    if (idx >= 0) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", x.to_string(), " is at index "), idx.to_string()), "."));
    } else {
        println!("{}", format!("{}{}", x.to_string(), " is not found."));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
