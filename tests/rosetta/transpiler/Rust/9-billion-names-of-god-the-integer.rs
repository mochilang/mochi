// Generated by Mochi transpiler v0.10.39 on 2025-07-24 19:43 +0700
static mut g_x: i64 = 0;
unsafe fn bigTrim(mut a: Vec<i64>) -> Vec<i64> {
    let mut n = (a.len() as i64);
    while ((n > 1) && (a[(n - 1) as usize] == 0)) {
        a = a[0 as usize..(n - 1) as usize].to_vec();
        n = (n - 1);
    }
    return a
}

unsafe fn bigFromInt(mut x: i64) -> Vec<i64> {
    if (x == 0) {
        return vec![0]
    }
    let mut digits: Vec<i64> = vec![];
    let mut n: i64 = x;
    while (n > 0) {
        digits = { let mut v = digits.clone(); v.push((n % 10)); v };
        n = (n / 10);
    }
    return digits
}

unsafe fn bigAdd(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut carry: i64 = 0;
    let mut i: i64 = 0;
    while (((i < (a.len() as i64)) || (i < (b.len() as i64))) || (carry > 0)) {
        let mut av: i64 = 0;
        if (i < (a.len() as i64)) {
            av = a[i as usize];
        }
        let mut bv: i64 = 0;
        if (i < (b.len() as i64)) {
            bv = b[i as usize];
        }
        let mut s: i64 = ((av + bv) + carry);
        res = { let mut v = res.clone(); v.push((s % 10)); v };
        carry = (s / 10);
        i = (i + 1);
    }
    return bigTrim(res)
}

unsafe fn bigSub(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut borrow: i64 = 0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut av: i64 = a[i as usize];
        let mut bv: i64 = 0;
        if (i < (b.len() as i64)) {
            bv = b[i as usize];
        }
        let mut diff: i64 = ((av - bv) - borrow);
        if (diff < 0) {
            diff = (diff + 10);
            borrow = 1;
        } else {
            borrow = 0;
        }
        res = { let mut v = res.clone(); v.push(diff); v };
        i = (i + 1);
    }
    return bigTrim(res)
}

unsafe fn bigToString(mut a: Vec<i64>) -> String {
    let mut s = String::from("");
    let mut i = ((a.len() as i64) - 1);
    while (i >= 0) {
        s = format!("{}{}", s, a[i as usize].to_string());
        i = (i - 1);
    }
    return s.clone()
}

unsafe fn minInt(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
}

unsafe fn cumu(mut n: i64) -> Vec<Vec<i64>> {
    let mut cache: Vec<Vec<Vec<i64>>> = vec![vec![bigFromInt(1)]];
    let mut y: i64 = 1;
    while (y <= n) {
        let mut row: Vec<Vec<i64>> = vec![bigFromInt(0)];
        let mut x: i64 = 1;
        while (x <= y) {
            let val: Vec<i64> = cache[(y - x) as usize].clone()[minInt(x, (y - x)) as usize].clone();
            row = { let mut v = row.clone(); v.push(bigAdd(row[((row.len() as i64) - 1) as usize].clone(), val)); v };
            x = (x + 1);
        }
        cache = { let mut v = cache.clone(); v.push(row); v };
        y = (y + 1);
    }
    return cache[n as usize].clone()
}

unsafe fn row(mut n: i64) -> Vec<String> {
    let e: Vec<Vec<i64>> = cumu(n);
    let mut out: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let diff: Vec<i64> = bigSub(e[(i + 1) as usize].clone(), e[i as usize].clone());
        out = { let mut v = out.clone(); v.push(bigToString(diff)); v };
        i = (i + 1);
    }
    return out
}

fn main() {
    unsafe {
        g_x = 1;
        println!("{}", "rows:");
        while (g_x < 11) {
            let r: Vec<String> = row(g_x);
            let mut line = String::from("");
            let mut i: i64 = 0;
            while (i < (r.len() as i64)) {
                line = format!("{}{}", format!("{}{}", format!("{}{}", line, " "), r[i as usize]), " ");
                i = (i + 1);
            }
            println!("{}", line);
            g_x = (g_x + 1);
        }
        println!("{}", "");
        println!("{}", "sums:");
        for num in vec![23, 123, 1234] {
            let r: Vec<Vec<i64>> = cumu(num);
            println!("{}", format!("{}{}", format!("{}{}", num.to_string(), " "), bigToString(r[((r.len() as i64) - 1) as usize].clone())));
        }
    }
}
