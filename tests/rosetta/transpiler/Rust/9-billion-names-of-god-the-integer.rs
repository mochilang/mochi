// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_x: i64 = 0;
fn main() {
    unsafe {
        g_x = 1;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn bigTrim(mut a: Vec<i64>) -> Vec<i64> {
    let mut n = (a.len() as i64);
    while ((n > 1) && (a[(n - 1) as usize] == 0)) {
        a = a[0 as usize..(n - 1) as usize].to_vec();
        n = (n - 1);
    }
    return a
};
        unsafe fn bigFromInt(mut x: i64) -> Vec<i64> {
    if (x == 0) {
        return vec![0]
    }
    let mut digits: Vec<i64> = vec![];
    let mut n: i64 = x;
    while (n > 0) {
        digits = { let mut _v = digits.clone(); _v.push((n % 10)); _v };
        n = (n / 10);
    }
    return digits
};
        unsafe fn bigAdd(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut carry: i64 = 0;
    let mut i: i64 = 0;
    while (((i < (a.len() as i64)) || (i < (b.len() as i64))) || (carry > 0)) {
        let mut av: i64 = 0;
        if (i < (a.len() as i64)) {
            av = a[i as usize];
        }
        let mut bv: i64 = 0;
        if (i < (b.len() as i64)) {
            bv = b[i as usize];
        }
        let mut s: i64 = ((av + bv) + carry);
        res = { let mut _v = res.clone(); _v.push((s % 10)); _v };
        carry = (s / 10);
        i = (i + 1);
    }
    return bigTrim(res.clone())
};
        unsafe fn bigSub(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<i64> {
    let mut res: Vec<i64> = vec![];
    let mut borrow: i64 = 0;
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut av: i64 = a[i as usize];
        let mut bv: i64 = 0;
        if (i < (b.len() as i64)) {
            bv = b[i as usize];
        }
        let mut diff: i64 = ((av - bv) - borrow);
        if (diff < 0) {
            diff = (diff + 10);
            borrow = 1;
        } else {
            borrow = 0;
        }
        res = { let mut _v = res.clone(); _v.push(diff); _v };
        i = (i + 1);
    }
    return bigTrim(res.clone())
};
        unsafe fn bigToString(mut a: Vec<i64>) -> String {
    let mut s: String = String::from("").clone();
    let mut i = ((a.len() as i64) - 1);
    while (i >= 0) {
        s = format!("{}{}", s, a[i as usize].to_string());
        i = (i - 1);
    }
    return s.clone()
};
        unsafe fn minInt(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    } else {
        return b
    }
};
        unsafe fn cumu(mut n: i64) -> Vec<Vec<i64>> {
    let mut cache: Vec<Vec<Vec<i64>>> = vec![vec![bigFromInt(1)]];
    let mut y: i64 = 1;
    while (y <= n) {
        let mut row: Vec<Vec<i64>> = vec![bigFromInt(0)];
        let mut x: i64 = 1;
        while (x <= y) {
            let mut val: Vec<i64> = cache[(y - x) as usize].clone()[minInt(x, (y - x)) as usize].clone();
            row = { let mut _v = row.clone(); _v.push(bigAdd(row[((row.len() as i64) - 1) as usize].clone(), val.clone())); _v };
            x = (x + 1);
        }
        cache = { let mut _v = cache.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return cache[n as usize].clone()
};
        unsafe fn row(mut n: i64) -> Vec<String> {
    let mut e: Vec<Vec<i64>> = cumu(n);
    let mut out: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut diff: Vec<i64> = bigSub(e[(i + 1) as usize].clone(), e[i as usize].clone());
        out = { let mut _v = out.clone(); _v.push(bigToString(diff.clone())); _v };
        i = (i + 1);
    }
    return out
};
        println!("{}", "rows:");
        static mut g_x: i64 = 0;;
        while (g_x < 11) {
            let mut r: Vec<String> = row(g_x);
            let mut line: String = String::from("").clone();
            let mut i: i64 = 0;
            while (i < (r.len() as i64)) {
                line = format!("{}{}", format!("{}{}", format!("{}{}", line, " "), r[i as usize].clone()), " ");
                i = (i + 1);
            }
            println!("{}", line);
            g_x = (g_x + 1);
        }
        println!("{}", "");
        println!("{}", "sums:");
        for num in vec![23, 123, 1234] {
            let mut r: Vec<Vec<i64>> = cumu(num);
            println!("{}", format!("{}{}", format!("{}{}", num.to_string(), " "), bigToString(r[((r.len() as i64) - 1) as usize].clone())));
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
