// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:43 +0700
fn cart2(mut a: Vec<i64>, mut b: Vec<i64>) -> Vec<Vec<i64>> {
    let mut p: Vec<Vec<i64>> = vec![];
    for x in a.iter().cloned() {
        for y in b.iter().cloned() {
            p = { let mut _v = p.clone(); _v.push(vec![x, y]); _v };
        }
    }
    return p
}

fn llStr(lst: &mut Vec<Vec<i64>>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        let mut row: Vec<i64> = lst[i as usize].clone();
        s = format!("{}{}", s, "[");
        let mut j: i64 = 0;
        while (j < (row.len() as i64)) {
            s = format!("{}{}", s, row[j as usize].to_string());
            if (j < ((row.len() as i64) - 1)) {
                s = format!("{}{}", s, " ");
            }
            j = (j + 1);
        }
        s = format!("{}{}", s, "]");
        if (i < ((lst.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
}

fn mochi_main() {
    println!("{}", llStr(&mut cart2(vec![1, 2], vec![3, 4])));
    println!("{}", llStr(&mut cart2(vec![3, 4], vec![1, 2])));
    println!("{}", llStr(&mut cart2(vec![1, 2], vec![])));
    println!("{}", llStr(&mut cart2(vec![], vec![1, 2])));
}

fn main() {
    mochi_main();
}
