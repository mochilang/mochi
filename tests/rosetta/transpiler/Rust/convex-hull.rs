// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Point {
    x: i64,
    y: i64,
}
impl std::fmt::Display for Point {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn ccw(a: &Point, b: &Point, c: &Point) -> bool {
    let mut lhs: i64 = ((b.x - a.x) * (c.y - a.y));
    let mut rhs: i64 = ((b.y - a.y) * (c.x - a.x));
    return (lhs > rhs)
};
    fn sortPoints(mut ps: Vec<Point>) -> Vec<Point> {
    let mut arr: Vec<Point> = ps;
    let mut n = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            let mut p: Point = arr[j as usize].clone();
            let mut q: Point = arr[(j + 1) as usize].clone();
            if ((p.x > q.x) || ((p.x == q.x) && (p.y > q.y))) {
                arr[j as usize] = q.clone();
                arr[(j + 1) as usize] = p.clone();
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
    fn convexHull(mut ps: Vec<Point>) -> Vec<Point> {
    ps = sortPoints(ps.clone());
    let mut h: Vec<Point> = vec![];
    for pt in ps.iter().cloned() {
        while (((h.len() as i64) >= 2) && (ccw(&h[((h.len() as i64) - 2) as usize].clone(), &h[((h.len() as i64) - 1) as usize].clone(), &pt) == false)) {
            h = h[0 as usize..((h.len() as i64) - 1) as usize].to_vec();
        }
        h = { let mut _v = h.clone(); _v.push(pt.clone()); _v };
    }
    let mut i = ((ps.len() as i64) - 2);
    let mut t = ((h.len() as i64) + 1);
    while (i >= 0) {
        let mut pt: Point = ps[i as usize].clone();
        while (((h.len() as i64) >= t) && (ccw(&h[((h.len() as i64) - 2) as usize].clone(), &h[((h.len() as i64) - 1) as usize].clone(), &pt) == false)) {
            h = h[0 as usize..((h.len() as i64) - 1) as usize].to_vec();
        }
        h = { let mut _v = h.clone(); _v.push(pt.clone()); _v };
        i = (i - 1);
    }
    return h[0 as usize..((h.len() as i64) - 1) as usize].to_vec()
};
    fn pointStr(p: &Point) -> String {
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", p.x.to_string()), ","), p.y.to_string()), ")").clone()
};
    fn hullStr(mut h: Vec<Point>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (h.len() as i64)) {
        s = format!("{}{}", s, pointStr(&h[i as usize].clone()));
        if (i < ((h.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    let mut pts: Vec<Point> = vec![Point {x: 16, y: 3}, Point {x: 12, y: 17}, Point {x: 0, y: 6}, Point {x: -4, y: -6}, Point {x: 16, y: 6}, Point {x: 16, y: -7}, Point {x: 16, y: -3}, Point {x: 17, y: -4}, Point {x: 5, y: 19}, Point {x: 19, y: -8}, Point {x: 3, y: 16}, Point {x: 12, y: 13}, Point {x: 3, y: -4}, Point {x: 17, y: 5}, Point {x: -3, y: 15}, Point {x: -3, y: -9}, Point {x: 0, y: 11}, Point {x: -9, y: -3}, Point {x: -4, y: -2}, Point {x: 12, y: 10}];
    let mut hull: Vec<Point> = convexHull(pts.clone());
    println!("{}", format!("{}{}", "Convex Hull: ", hullStr(hull.clone())));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
