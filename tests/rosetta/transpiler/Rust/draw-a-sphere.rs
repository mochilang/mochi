// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct V3 {
    x: f64,
    y: f64,
    z: f64,
}
impl std::fmt::Display for V3 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn sqrtApprox(mut x: f64) -> f64 {
    if (x <= 0.0) {
        return 0.0
    }
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
};
    fn powf(mut base: f64, mut exp: i64) -> f64 {
    let mut result: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result
};
    fn normalize(v: &V3) -> V3 {
    let mut len: f64 = sqrtApprox((((v.x * v.x) + (v.y * v.y)) + (v.z * v.z)));
    return V3 {x: (v.x / len), y: (v.y / len), z: (v.z / len)}
};
    fn dot(a: &V3, b: &V3) -> f64 {
    let mut d: f64 = (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
    if (d < 0.0) {
        return -d
    }
    return 0.0
};
    fn drawSphere(mut r: i64, mut k: i64, mut ambient: f64, light: &V3, shades: &str) {
    let mut i: i64 = -r;
    while (i <= r) {
        let mut x: f64 = ((i as f64) + 0.5);
        let mut line = String::from("");
        let mut j: i64 = -(2 * r);
        while (j <= (2 * r)) {
            let mut y: f64 = (((j as f64) / 2.0) + 0.5);
            if (((x * x) + (y * y)) <= ((r as f64) * (r as f64))) {
                let mut zsq: f64 = ((((r as f64) * (r as f64)) - (x * x)) - (y * y));
                let mut vec: V3 = normalize(&V3 {x: x, y: y, z: sqrtApprox(zsq)});
                let mut b: f64 = (powf(dot(light, &vec), k) + ambient);
                let mut intensity: i64 = (((1.0 - b) * (((shades.len() as i64) as f64) - 1.0)) as i64);
                if (intensity < 0) {
                    intensity = 0;
                }
                if (intensity >= (shades.len() as i64)) {
                    intensity = ((shades.len() as i64) - 1);
                }
                line = format!("{}{}", line, { let tmp = &shades; tmp.chars().skip(intensity as usize).take(((intensity + 1) - intensity) as usize).collect::<String>() });
            } else {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    fn mochi_main() {
    let mut shades = String::from(".:!*oe&#%@");
    let mut light: V3 = normalize(&V3 {x: 30.0, y: 30.0, z: -50.0});
    drawSphere(20, 4, 0.1, &light, &shades);
    drawSphere(10, 2, 0.4, &light, &shades);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
