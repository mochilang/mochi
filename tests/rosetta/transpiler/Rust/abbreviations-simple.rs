// Generated by Mochi transpiler v0.10.39 on 2025-07-25 00:33 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct Map {
    commands: Vec<String>,
    mins: Vec<i64>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"commands\": {:?}", self.commands)?;
        write!(f, ", ")?;
        write!(f, "\"mins\": {:?}", self.mins)?;
        write!(f, "}}")
    }
}

fn fields(mut s: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut cur = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
            if ((cur.len() as i64) > 0) {
                words = { let mut v = words.clone(); v.push(String::from(cur)); v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        words = { let mut v = words.clone(); v.push(String::from(cur)); v };
    }
    return words
}

fn padRight(mut s: String, mut width: i64) -> String {
    let mut out: String = s.clone();
    let mut i = (s.len() as i64);
    while (i < width) {
        out = format!("{}{}", out, " ");
        i = (i + 1);
    }
    return out.clone()
}

fn join(mut xs: Vec<String>, mut sep: String) -> String {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, sep);
        }
        res = format!("{}{}", res, xs[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
}

fn parseIntStr(mut str: String) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits[str[i as usize..(i + 1) as usize].to_string()]);
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
}

fn isDigits(mut s: String) -> bool {
    if ((s.len() as i64) == 0) {
        return false
    }
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if ((ch.as_str() < "0") || (ch.as_str() > "9")) {
            return false
        }
        i = (i + 1);
    }
    return true
}

fn readTable(mut table: String) -> Map {
    let mut toks: Vec<String> = fields(table);
    let mut cmds: Vec<String> = vec![];
    let mut mins: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (toks.len() as i64)) {
        let cmd: String = toks[i as usize].clone().clone();
        let mut minlen = (cmd.len() as i64);
        i = (i + 1);
        if ((i < (toks.len() as i64)) && isDigits(toks[i as usize].clone())) {
            let num: i64 = parseIntStr(toks[i as usize].clone());
            if ((num >= 1) && (num < (cmd.len() as i64))) {
                minlen = num;
                i = (i + 1);
            }
        }
        cmds = { let mut v = cmds.clone(); v.push(String::from(cmd)); v };
        mins = { let mut v = mins.clone(); v.push(minlen); v };
    }
    return Map {commands: cmds, mins: mins}
}

fn validate(mut commands: Vec<String>, mut mins: Vec<i64>, mut words: Vec<String>) -> Vec<String> {
    let mut results: Vec<String> = vec![];
    let mut wi: i64 = 0;
    while (wi < (words.len() as i64)) {
        let w: String = words[wi as usize].clone().clone();
        let mut found: bool = false;
        let wlen = (w.len() as i64);
        let mut ci: i64 = 0;
        while (ci < (commands.len() as i64)) {
            let cmd: String = commands[ci as usize].clone().clone();
            if (((mins[ci as usize] != 0) && (wlen >= mins[ci as usize])) && (wlen <= (cmd.len() as i64))) {
                let c: String = (cmd.to_uppercase()).clone();
                let ww: String = (w.to_uppercase()).clone();
                if ({ let tmp = &c; tmp.chars().skip(0 as usize).take((wlen - 0) as usize).collect::<String>() }.as_str() == ww) {
                    results = { let mut v = results.clone(); v.push(String::from(c)); v };
                    found = true;
                    break
                }
            }
            ci = (ci + 1);
        }
        if !found {
            results = { let mut v = results.clone(); v.push(String::from("*error*")); v };
        }
        wi = (wi + 1);
    }
    return results
}

fn mochi_main() {
    let table: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "", "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "), "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "), "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "), "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "), "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "), "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "), "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "), "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ").clone();
    let sentence = String::from("riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin");
    let tbl: Map = readTable(table);
    let mut commands: Vec<String> = tbl.commands;
    let mut mins: Vec<i64> = tbl.mins;
    let mut words: Vec<String> = fields(sentence);
    let mut results: Vec<String> = validate(commands.clone(), mins.clone(), words.clone());
    let mut out1 = String::from("user words:");
    let mut k: i64 = 0;
    while (k < (words.len() as i64)) {
        out1 = format!("{}{}", out1, " ");
        if (k < ((words.len() as i64) - 1)) {
            out1 = format!("{}{}", out1, padRight(words[k as usize].clone(), (results[k as usize].clone().len() as i64)));
        } else {
            out1 = format!("{}{}", out1, words[k as usize].clone());
        }
        k = (k + 1);
    }
    println!("{}", out1);
    println!("{}", format!("{}{}", "full words: ", join(results.clone(), String::from(" "))));
}

fn main() {
    mochi_main();
}
