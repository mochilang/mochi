// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn timeStr(mut sec: i64) -> String {
    let mut wks: i64 = (sec / 604800);
    sec = (sec % 604800);
    let mut ds: i64 = (sec / 86400);
    sec = (sec % 86400);
    let mut hrs: i64 = (sec / 3600);
    sec = (sec % 3600);
    let mut mins: i64 = (sec / 60);
    sec = (sec % 60);
    let mut res: String = String::from("").clone();
    let mut comma: bool = false;
    if (wks != 0) {
        res = format!("{}{}", format!("{}{}", res, wks.to_string()), " wk");
        comma = true;
    }
    if (ds != 0) {
        if comma {
            res = format!("{}{}", res, ", ");
        }
        res = format!("{}{}", format!("{}{}", res, ds.to_string()), " d");
        comma = true;
    }
    if (hrs != 0) {
        if comma {
            res = format!("{}{}", res, ", ");
        }
        res = format!("{}{}", format!("{}{}", res, hrs.to_string()), " hr");
        comma = true;
    }
    if (mins != 0) {
        if comma {
            res = format!("{}{}", res, ", ");
        }
        res = format!("{}{}", format!("{}{}", res, mins.to_string()), " min");
        comma = true;
    }
    if (sec != 0) {
        if comma {
            res = format!("{}{}", res, ", ");
        }
        res = format!("{}{}", format!("{}{}", res, sec.to_string()), " sec");
    }
    return res.clone()
};
    println!("{}", timeStr(7259));
    println!("{}", timeStr(86400));
    println!("{}", timeStr(6000000));
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
