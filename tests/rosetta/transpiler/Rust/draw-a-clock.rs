// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_t: i64 = 0;
static mut g_sec: i64 = 0;
static mut g_mins: i64 = 0;
static mut g_min: i64 = 0;
static mut g_hour: i64 = 0;
static mut g_xs: String = String::new();
static mut g_i: i64 = 0;
static mut g_out: String = String::new();
static mut g_j: i64 = 0;
fn main() {
    unsafe {
        g_t = (_now() / 1000000000);
        g_sec = (g_t % 60);
        g_mins = (g_t / 60);
        g_min = (g_mins % 60);
        g_hour = ((g_mins / 60) % 24);
        g_xs = String::from("");
        g_i = 0;
        g_out = String::from("");
        g_j = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn pow2(mut exp: i64) -> i64 {
    let mut r: i64 = 1;
    let mut i: i64 = 0;
    while (i < exp) {
        r = (r * 2);
        i = (i + 1);
    }
    return r
};
        unsafe fn bin(mut n: i64, mut digits: i64) -> String {
    let mut s = String::from("");
    let mut i: i64 = (digits - 1);
    while (i >= 0) {
        let mut p: i64 = pow2(i);
        if (n >= p) {
            s = format!("{}{}", s, "x");
            n = (n - p);
        } else {
            s = format!("{}{}", s, " ");
        }
        if (i > 0) {
            s = format!("{}{}", s, "|");
        }
        i = (i - 1);
    }
    return s.clone()
};
        static mut g_t: i64 = 0;;
        static mut g_sec: i64 = 0;;
        static mut g_mins: i64 = 0;;
        static mut g_min: i64 = 0;;
        static mut g_hour: i64 = 0;;
        println!("{}", bin(g_hour, 8));
        println!("{}", "");
        println!("{}", bin(g_min, 8));
        println!("{}", "");
        static mut g_xs: String = String::new();;
        static mut g_i: i64 = 0;;
        while (g_i < g_sec) {
            g_xs = format!("{}{}", g_xs, "x");
            g_i = (g_i + 1);
        }
        static mut g_out: String = String::new();;
        static mut g_j: i64 = 0;;
        while (g_j < (g_xs.len() as i64)) {
            g_out = format!("{}{}", g_out, { let tmp = &g_xs; tmp.chars().skip(g_j as usize).take(((g_j + 1) - g_j) as usize).collect::<String>() });
            if ((((g_j + 1) % 5) == 0) && ((g_j + 1) < (g_xs.len() as i64))) {
                g_out = format!("{}{}", g_out, "|");
            }
            g_j = (g_j + 1);
        }
        println!("{}", g_out);
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
