// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn indexOf(mut s: String, mut ch: String) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if (s[i as usize..(i + 1) as usize].to_string().as_str() == ch.as_str()) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn set58(mut addr: String) -> Vec<i64> {
    let tmpl = String::from("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    let mut a: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 25) {
        a = { let mut _v = a.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut idx: i64 = 0;
    while (idx < (addr.len() as i64)) {
        let ch: String = addr[idx as usize..(idx + 1) as usize].to_string().clone();
        let mut c: i64 = indexOf(tmpl, ch);
        if (c < 0) {
            return vec![]
        }
        let mut j: i64 = 24;
        while (j >= 0) {
            c = (c + (58 * a[j as usize]));
            a[j as usize] = (c % 256);
            c = (c / 256);
            j = (j - 1);
        }
        if (c > 0) {
            return vec![]
        }
        idx = (idx + 1);
    }
    return a
};
    fn doubleSHA256(mut bs: Vec<i64>) -> Vec<i64> {
    let first: i64 = sha256(bs);
    return sha256(first)
};
    fn computeChecksum(mut a: Vec<i64>) -> Vec<i64> {
    let mut hash: Vec<i64> = doubleSHA256(a[0 as usize..21 as usize].to_vec());
    return hash[0 as usize..4 as usize].to_vec()
};
    fn validA58(mut addr: String) -> bool {
    let mut a: Vec<i64> = set58(addr);
    if ((a.len() as i64) != 25) {
        return false
    }
    if (a[0 as usize] != 0) {
        return false
    }
    let mut sum: Vec<i64> = computeChecksum(a.clone());
    let mut i: i64 = 0;
    while (i < 4) {
        if (a[(21 + i) as usize] != sum[i as usize]) {
            return false
        }
        i = (i + 1);
    }
    return true
};
    println!("{}", validA58(String::from("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i")).to_string());
    println!("{}", validA58(String::from("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j")).to_string());
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
