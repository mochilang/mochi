// Generated by Mochi transpiler v0.10.56 on 2025-08-04 00:25 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Writer {
    order: String,
    bits: i64,
    nbits: i64,
    data: Vec<i64>,
}
impl std::fmt::Display for Writer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"order\": \"{}\"", self.order)?;
        write!(f, ", ")?;
        write!(f, "\"bits\": {}", self.bits)?;
        write!(f, ", ")?;
        write!(f, "\"nbits\": {}", self.nbits)?;
        write!(f, ", ")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Reader {
    order: String,
    data: Vec<i64>,
    idx: i64,
    bits: i64,
    nbits: i64,
}
impl std::fmt::Display for Reader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"order\": \"{}\"", self.order)?;
        write!(f, ", ")?;
        write!(f, "\"data\": {:?}", self.data)?;
        write!(f, ", ")?;
        write!(f, "\"idx\": {}", self.idx)?;
        write!(f, ", ")?;
        write!(f, "\"bits\": {}", self.bits)?;
        write!(f, ", ")?;
        write!(f, "\"nbits\": {}", self.nbits)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Map {
    val: i64,
    eof: bool,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, ", ")?;
        write!(f, "\"eof\": {}", self.eof)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start: i64 = _now();
    fn pow2(mut n: i64) -> i64 {
    let mut v: i64 = 1;
    let mut i: i64 = 0;
    while (i < n) {
        v = (v * 2);
        i = (i + 1);
    }
    return v
};
    fn lshift(mut x: i64, mut n: i64) -> i64 {
    return (x * pow2(n))
};
    fn rshift(mut x: i64, mut n: i64) -> i64 {
    return (x / pow2(n))
};
    fn NewWriter(order: &str) -> Writer {
    return Writer {order: order.to_string(), bits: 0, nbits: 0, data: vec![]}
};
    fn writeBitsLSB(mut w: Writer, mut c: i64, mut width: i64) -> Writer {
    w.bits = (w.bits + lshift(c, w.nbits));
    w.nbits = (w.nbits + width);
    while (w.nbits >= 8) {
        let mut b: i64 = (w.bits % 256);
        w.data = { let mut _v = w.data.clone(); _v.push(b); _v };
        w.bits = rshift(w.bits, 8);
        w.nbits = (w.nbits - 8);
    }
    return w
};
    fn writeBitsMSB(mut w: Writer, mut c: i64, mut width: i64) -> Writer {
    w.bits = (w.bits + lshift(c, ((32 - width) - w.nbits)));
    w.nbits = (w.nbits + width);
    while (w.nbits >= 8) {
        let mut b: i64 = (rshift(w.bits, 24) % 256);
        w.data = { let mut _v = w.data.clone(); _v.push(b); _v };
        w.bits = ((w.bits % pow2(24)) * 256);
        w.nbits = (w.nbits - 8);
    }
    return w
};
    fn WriteBits(mut w: Writer, mut c: i64, mut width: i64) -> Writer {
    if (w.order.as_str() == "LSB") {
        return writeBitsLSB(w, c, width)
    }
    return writeBitsMSB(w, c, width)
};
    fn CloseWriter(mut w: Writer) -> Writer {
    if (w.nbits > 0) {
        if (w.order.as_str() == "MSB") {
            w.bits = rshift(w.bits, 24);
        }
        w.data = { let mut _v = w.data.clone(); _v.push((w.bits % 256)); _v };
    }
    w.bits = 0;
    w.nbits = 0;
    return w
};
    fn NewReader(mut data: Vec<i64>, order: &str) -> Reader {
    return Reader {order: order.to_string(), data: data, idx: 0, bits: 0, nbits: 0}
};
    fn readBitsLSB(r: &mut Reader, mut width: i64) -> Map {
    while (r.nbits < width) {
        if (r.idx >= (r.data.clone().len() as i64)) {
            return Map {val: 0, eof: true}
        }
        let mut b: i64 = r.data.clone()[r.idx as usize];
        (*r).idx = (r.idx + 1);
        (*r).bits = (r.bits + lshift(b, r.nbits));
        (*r).nbits = (r.nbits + 8);
    }
    let mut mask: i64 = (pow2(width) - 1);
    let mut out: i64 = (r.bits % (mask + 1));
    (*r).bits = rshift(r.bits, width);
    (*r).nbits = (r.nbits - width);
    return Map {val: out, eof: false}
};
    fn readBitsMSB(r: &mut Reader, mut width: i64) -> Map {
    while (r.nbits < width) {
        if (r.idx >= (r.data.clone().len() as i64)) {
            return Map {val: 0, eof: true}
        }
        let mut b: i64 = r.data.clone()[r.idx as usize];
        (*r).idx = (r.idx + 1);
        (*r).bits = (r.bits + lshift(b, (24 - r.nbits)));
        (*r).nbits = (r.nbits + 8);
    }
    let mut out: i64 = rshift(r.bits, (32 - width));
    (*r).bits = ((r.bits * pow2(width)) % pow2(32));
    (*r).nbits = (r.nbits - width);
    return Map {val: out, eof: false}
};
    fn ReadBits(r: &mut Reader, mut width: i64) -> Map {
    if (r.order.clone().as_str() == "LSB") {
        return readBitsLSB(r, width)
    }
    return readBitsMSB(r, width)
};
    fn toBinary(mut n: i64, mut bits: i64) -> String {
    let mut b: String = String::from("").clone();
    let mut val: i64 = n;
    let mut i: i64 = 0;
    while (i < bits) {
        b = format!("{}{}", (val % 2).to_string(), b).to_string();
        val = (val / 2);
        i = (i + 1);
    }
    return b.clone()
};
    fn bytesToBits(bs: &mut Vec<i64>) -> String {
    let mut out: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (bs.len() as i64)) {
        out = format!("{}{}", out, toBinary(bs[i as usize], 8));
        if ((i + 1) < (bs.len() as i64)) {
            out = format!("{}{}", out, " ");
        }
        i = (i + 1);
    }
    out = format!("{}{}", out, "]");
    return out.clone()
};
    fn bytesToHex(bs: &mut Vec<i64>) -> String {
    let mut digits: String = String::from("0123456789ABCDEF").clone();
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (bs.len() as i64)) {
        let mut b: i64 = bs[i as usize];
        let mut hi: i64 = (b / 16);
        let mut lo: i64 = (b % 16);
        out = format!("{}{}", format!("{}{}", out, digits[hi as usize..(hi + 1) as usize].to_string()), digits[lo as usize..(lo + 1) as usize].to_string());
        if ((i + 1) < (bs.len() as i64)) {
            out = format!("{}{}", out, " ");
        }
        i = (i + 1);
    }
    return out.clone()
};
    fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx = { let s = upper.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = { let s = lower.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (97 + idx)
    }
    if ((ch.as_str() >= "0") && (ch.as_str() <= "9")) {
        return (48 + { let s = ch; i64::from_str_radix(&s, 10 as u32).unwrap_or(0) })
    }
    if (ch.as_str() == " ") {
        return 32
    }
    if (ch.as_str() == ".") {
        return 46
    }
    return 0
};
    fn chr(mut n: i64) -> String {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    if ((n >= 65) && (n < 91)) {
        return upper[(n - 65) as usize..(n - 64) as usize].to_string()
    }
    if ((n >= 97) && (n < 123)) {
        return lower[(n - 97) as usize..(n - 96) as usize].to_string()
    }
    if ((n >= 48) && (n < 58)) {
        let mut digits: String = String::from("0123456789").clone();
        return digits[(n - 48) as usize..(n - 47) as usize].to_string()
    }
    if (n == 32) {
        return String::from(" ")
    }
    if (n == 46) {
        return String::from(".")
    }
    return String::from("?").clone()
};
    fn bytesOfStr(mut s: String) -> Vec<i64> {
    let mut bs: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        bs = { let mut _v = bs.clone(); _v.push(ord(s[i as usize..(i + 1) as usize].to_string())); _v };
        i = (i + 1);
    }
    return bs
};
    fn bytesToDec(bs: &mut Vec<i64>) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (bs.len() as i64)) {
        out = format!("{}{}", out, bs[i as usize].to_string());
        if ((i + 1) < (bs.len() as i64)) {
            out = format!("{}{}", out, " ");
        }
        i = (i + 1);
    }
    return out.clone()
};
    fn Example() {
    let mut message: String = String::from("This is a test.").clone();
    let mut msgBytes: Vec<i64> = bytesOfStr(message.clone());
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "\"", message), "\" as bytes: "), bytesToDec(&mut msgBytes)));
    println!("{}", format!("{}{}", "    original bits: ", bytesToBits(&mut msgBytes)));
    let mut bw: Writer = NewWriter(&"MSB");
    let mut i: i64 = 0;
    while (i < (msgBytes.len() as i64)) {
        bw = WriteBits(bw, msgBytes[i as usize], 7);
        i = (i + 1);
    }
    bw = CloseWriter(bw);
    println!("{}", format!("{}{}", "Written bitstream: ", bytesToBits(&mut bw.data)));
    println!("{}", format!("{}{}", "Written bytes: ", bytesToHex(&mut bw.data)));
    let mut br: Reader = NewReader(bw.data.clone(), &"MSB");
    let mut result: String = String::from("").clone();
    loop {
        let mut r: Map = ReadBits(&mut br, 7);
        if r.eof {
            break
        }
        let mut v: i64 = r.val;
        if (v != 0) {
            result = format!("{}{}", result, chr(v));
        }
    }
    println!("{}", format!("{}{}", format!("{}{}", "Read back as \"", result), "\""));
};
    Example();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
