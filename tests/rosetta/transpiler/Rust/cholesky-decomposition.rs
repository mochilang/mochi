// Generated by Mochi transpiler v0.10.50 on 2025-07-31 00:46 +0700
fn sqrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 20) {
        guess = ((guess + (x / guess)) / 2.0);
        i = (i + 1);
    }
    return guess
}

fn cholesky(mut a: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
    let mut n = (a.len() as i64);
    let mut l: Vec<Vec<f64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<f64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            row = { let mut _v = row.clone(); _v.push(0.0); _v };
            j = (j + 1);
        }
        l = { let mut _v = l.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j <= i) {
            let mut sum: f64 = a[i as usize].clone()[j as usize];
            let mut k: i64 = 0;
            while (k < j) {
                sum = (sum - (l[i as usize].clone()[k as usize] * l[j as usize].clone()[k as usize]));
                k = (k + 1);
            }
            if (i == j) {
                l[i as usize][j as usize] = sqrtApprox(sum);
            } else {
                l[i as usize][j as usize] = (sum / l[j as usize].clone()[j as usize]);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return l
}

fn printMat(mut m: Vec<Vec<f64>>) {
    let mut i: i64 = 0;
    while (i < (m.len() as i64)) {
        let mut line: String = String::from("").clone();
        let mut j: i64 = 0;
        while (j < (m[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, m[i as usize].clone()[j as usize].to_string());
            if (j < ((m[i as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
}

fn demo(mut a: Vec<Vec<f64>>) {
    println!("{}", "A:");
    printMat(a.clone());
    let mut l: Vec<Vec<f64>> = cholesky(a.clone());
    println!("{}", "L:");
    printMat(l.clone());
}

fn main() {
    demo(vec![vec![25.0, 15.0, -5.0], vec![15.0, 18.0, 0.0], vec![-5.0, 0.0, 11.0]]);
    demo(vec![vec![18.0, 22.0, 54.0, 42.0], vec![22.0, 70.0, 86.0, 62.0], vec![54.0, 86.0, 174.0, 134.0], vec![42.0, 62.0, 134.0, 106.0]]);
}
