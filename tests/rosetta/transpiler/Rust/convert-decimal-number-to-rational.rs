// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start: i64 = _now();
    fn gcd(mut a: i64, mut b: i64) -> i64 {
    let mut x: i64 = a;
    if (x < 0) {
        x = -x;
    }
    let mut y: i64 = b;
    if (y < 0) {
        y = -y;
    }
    while (y != 0) {
        let mut t: i64 = (x % y);
        x = y;
        y = t;
    }
    return x
};
    fn parseRational(s: &str) -> HashMap<String, i64> {
    let mut intPart: i64 = 0;
    let mut fracPart: i64 = 0;
    let mut denom: i64 = 1;
    let mut afterDot: bool = false;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == ".") {
            afterDot = true;
        } else {
            let mut d = ({ let n: i64 = ch.parse().unwrap(); n } - { let n: i64 = "0".parse().unwrap(); n });
            if !afterDot {
                intPart = ((intPart * 10) + d);
            } else {
                fracPart = ((fracPart * 10) + d);
                denom = (denom * 10);
            }
        }
        i = (i + 1);
    }
    let mut num: i64 = ((intPart * denom) + fracPart);
    let mut g: i64 = gcd(num, denom);
    return HashMap::from([(String::from("num"), (num / g)), (String::from("den"), (denom / g))])
};
    fn mochi_main() {
    let mut inputs: Vec<String> = vec![String::from("0.9054054"), String::from("0.518518"), String::from("0.75")];
    for s in inputs.iter().cloned() {
        let mut r: HashMap<String, i64> = parseRational(&s);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, " = "), r.get("num").cloned().unwrap_or_default().to_string()), "/"), r.get("den").cloned().unwrap_or_default().to_string()));
    }
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
