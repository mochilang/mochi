// Generated by Mochi transpiler v0.10.39 on 2025-07-24 18:38 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
#[derive(Debug, Clone, Default)]
struct Rational {
    num: i64,
    denom: i64,
}
impl std::fmt::Display for Rational {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"num\": {}", self.num)?;
        write!(f, ", ")?;
        write!(f, "\"denom\": {}", self.denom)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
enum Expr {
    Num { value: Rational },
    Bin { op: i64, left: Box<Expr>, right: Box<Expr> },
}

static mut g_OP_ADD: i64 = 0;
static mut g_OP_SUB: i64 = 0;
static mut g_OP_MUL: i64 = 0;
static mut g_OP_DIV: i64 = 0;
static mut g_n_cards: i64 = 0;
static mut g_goal: i64 = 0;
static mut g_digit_range: i64 = 0;
unsafe fn binEval(mut op: i64, mut l: Expr, mut r: Expr) -> Rational {
    let lv = exprEval(l);
    let rv = exprEval(r);
    if (op == g_OP_ADD) {
        return Rational {num: ((lv.num * rv.denom) + (lv.denom * rv.num)), denom: (lv.denom * rv.denom)}
    }
    if (op == g_OP_SUB) {
        return Rational {num: ((lv.num * rv.denom) - (lv.denom * rv.num)), denom: (lv.denom * rv.denom)}
    }
    if (op == g_OP_MUL) {
        return Rational {num: (lv.num * rv.num), denom: (lv.denom * rv.denom)}
    }
    return Rational {num: (lv.num * rv.denom), denom: (lv.denom * rv.num)}
}

unsafe fn binString(mut op: i64, mut l: Expr, mut r: Expr) -> String {
    let ls = exprString(l);
    let rs = exprString(r);
    let mut opstr = String::from("");
    if (op == g_OP_ADD) {
        opstr = String::from(" + ");
    } else if (op == g_OP_SUB) {
        opstr = String::from(" - ");
    } else if (op == g_OP_MUL) {
        opstr = String::from(" * ");
    } else {
        opstr = String::from(" / ");
    }
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", ls), opstr), rs), ")").clone()
}

unsafe fn newNum(mut n: i64) -> Expr {
    return Expr::Num { value: Rational {num: n, denom: 1} }
}

unsafe fn exprEval(mut x: Expr) -> Rational {
    return match x { Expr::Num { value: v } => v, Expr::Bin { op: op, left: l, right: r } => binEval(op, *l.clone(), *r.clone()), }
}

unsafe fn exprString(mut x: Expr) -> String {
    return match x { Expr::Num { value: v } => v.num.to_string(), Expr::Bin { op: op, left: l, right: r } => binString(op, *l.clone(), *r.clone()), }.to_string()
}

unsafe fn solve(mut xs: Vec<Expr>) -> bool {
    if ((xs.len() as i64) == 1) {
        let f: Rational = exprEval(xs[0 as usize].clone());
        if ((f.denom != 0) && (f.num == (f.denom * g_goal))) {
            println!("{}", exprString(xs[0 as usize].clone()));
            return true
        }
        return false
    }
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (xs.len() as i64)) {
            let mut rest: Vec<Expr> = vec![];
            let mut k: i64 = 0;
            while (k < (xs.len() as i64)) {
                if ((k != i) && (k != j)) {
                    rest = { let mut v = rest.clone(); v.push(xs[k as usize].clone()); v };
                }
                k = (k + 1);
            }
            let a: Expr = xs[i as usize].clone();
            let b: Expr = xs[j as usize].clone();
            let mut node: Expr = Expr::Bin { op: g_OP_ADD, left: Box::new(a.clone()), right: Box::new(b.clone()) };
            for op in vec![g_OP_ADD, g_OP_SUB, g_OP_MUL, g_OP_DIV] {
                node = Expr::Bin { op: op, left: Box::new(a.clone()), right: Box::new(b.clone()) };
                if solve({ let mut v = rest.clone(); v.push(node); v }) {
                    return true
                }
            }
            node = Expr::Bin { op: g_OP_SUB, left: Box::new(b.clone()), right: Box::new(a.clone()) };
            if solve({ let mut v = rest.clone(); v.push(node); v }) {
                return true
            }
            node = Expr::Bin { op: g_OP_DIV, left: Box::new(b.clone()), right: Box::new(a.clone()) };
            if solve({ let mut v = rest.clone(); v.push(node); v }) {
                return true
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return false
}

unsafe fn mochi_main() {
    let mut iter: i64 = 0;
    while (iter < 10) {
        let mut cards: Vec<Expr> = vec![];
        let mut i: i64 = 0;
        while (i < g_n_cards) {
            let n = ((_now() % (g_digit_range - 1)) + 1);
            cards = { let mut v = cards.clone(); v.push(newNum(n)); v };
            println!("{}", format!("{}{}", " ", n.to_string()));
            i = (i + 1);
        }
        println!("{}", ":  ");
        if !solve(cards) {
            println!("{}", "No solution");
        }
        iter = (iter + 1);
    }
}

fn main() {
    unsafe {
        g_OP_ADD = 1;
        g_OP_SUB = 2;
        g_OP_MUL = 3;
        g_OP_DIV = 4;
        g_n_cards = 4;
        g_goal = 24;
        g_digit_range = 9;
        unsafe { mochi_main(); }
    }
}
