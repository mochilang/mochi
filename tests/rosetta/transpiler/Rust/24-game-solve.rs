// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Rational {
    num: i64,
    denom: i64,
}
impl std::fmt::Display for Rational {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"num\": {}", self.num)?;
        write!(f, ", ")?;
        write!(f, "\"denom\": {}", self.denom)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Node {
    val: Rational,
    txt: String,
}
impl std::fmt::Display for Node {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, ", ")?;
        write!(f, "\"txt\": \"{}\"", self.txt)?;
        write!(f, "}}")
    }
}

static mut g_OP_ADD: i64 = 0;
static mut g_OP_SUB: i64 = 0;
static mut g_OP_MUL: i64 = 0;
static mut g_OP_DIV: i64 = 0;
static mut g_n_cards: i64 = 0;
static mut g_goal: i64 = 0;
static mut g_digit_range: i64 = 0;
fn main() {
    unsafe {
        g_OP_ADD = 1;
        g_OP_SUB = 2;
        g_OP_MUL = 3;
        g_OP_DIV = 4;
        g_n_cards = 4;
        g_goal = 24;
        g_digit_range = 9;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_OP_ADD: i64 = 0;;
        static mut g_OP_SUB: i64 = 0;;
        static mut g_OP_MUL: i64 = 0;;
        static mut g_OP_DIV: i64 = 0;;
        unsafe fn makeNode(mut n: i64) -> Node {
    return Node {val: Rational {num: n, denom: 1}, txt: n.to_string().to_string()}
};
        unsafe fn combine(mut op: i64, l: &Node, r: &Node) -> Node {
    let mut res: Rational = Default::default();
    if (op == g_OP_ADD) {
        res = Rational {num: ((l.val.clone().num * r.val.clone().denom) + (l.val.clone().denom * r.val.clone().num)), denom: (l.val.clone().denom * r.val.clone().denom)};
    } else if (op == g_OP_SUB) {
        res = Rational {num: ((l.val.clone().num * r.val.clone().denom) - (l.val.clone().denom * r.val.clone().num)), denom: (l.val.clone().denom * r.val.clone().denom)};
    } else if (op == g_OP_MUL) {
        res = Rational {num: (l.val.clone().num * r.val.clone().num), denom: (l.val.clone().denom * r.val.clone().denom)};
    } else {
        res = Rational {num: (l.val.clone().num * r.val.clone().denom), denom: (l.val.clone().denom * r.val.clone().num)};
    }
    let mut opstr: String = String::from("").clone();
    if (op == g_OP_ADD) {
        opstr = String::from(" + ");
    } else if (op == g_OP_SUB) {
        opstr = String::from(" - ");
    } else if (op == g_OP_MUL) {
        opstr = String::from(" * ");
    } else {
        opstr = String::from(" / ");
    }
    return Node {val: res, txt: format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "(", l.txt.clone()), opstr), r.txt.clone()), ")").clone()}
};
        unsafe fn exprEval(x: &Node) -> Rational {
    return x.val.clone()
};
        unsafe fn exprString(x: &Node) -> String {
    return x.txt.clone().clone()
};
        static mut g_n_cards: i64 = 0;;
        static mut g_goal: i64 = 0;;
        static mut g_digit_range: i64 = 0;;
        unsafe fn solve(xs: &mut Vec<Node>) -> bool {
    if ((xs.len() as i64) == 1) {
        let mut f: Rational = exprEval(&xs[0 as usize].clone());
        if ((f.denom != 0) && (f.num == (f.denom * g_goal))) {
            println!("{}", exprString(&xs[0 as usize].clone()));
            return true
        }
        return false
    }
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let mut j: i64 = (i + 1);
        while (j < (xs.len() as i64)) {
            let mut rest: Vec<Node> = vec![];
            let mut k: i64 = 0;
            while (k < (xs.len() as i64)) {
                if ((k != i) && (k != j)) {
                    rest = { let mut _v = rest.clone(); _v.push(xs[k as usize].clone()); _v };
                }
                k = (k + 1);
            }
            let mut a: Node = xs[i as usize].clone();
            let mut b: Node = xs[j as usize].clone();
            let mut node: Node = Default::default();
            for op in vec![g_OP_ADD, g_OP_SUB, g_OP_MUL, g_OP_DIV] {
                node = combine(op, &a, &b);
                if solve(&mut { let mut _v = rest.clone(); _v.push(node.clone()); _v }) {
                    return true
                }
            }
            node = combine(g_OP_SUB, &b, &a);
            if solve(&mut { let mut _v = rest.clone(); _v.push(node.clone()); _v }) {
                return true
            }
            node = combine(g_OP_DIV, &b, &a);
            if solve(&mut { let mut _v = rest.clone(); _v.push(node.clone()); _v }) {
                return true
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn mochi_main() {
    let mut iter: i64 = 0;
    while (iter < 10) {
        let mut cards: Vec<Node> = vec![];
        let mut i: i64 = 0;
        while (i < g_n_cards) {
            let mut n = ((_now() % (g_digit_range - 1)) + 1);
            cards = { let mut _v = cards.clone(); _v.push(makeNode(n)); _v };
            println!("{}", format!("{}{}", " ", n.to_string()));
            i = (i + 1);
        }
        println!("{}", ":  ");
        if !solve(&mut cards) {
            println!("{}", "No solution");
        }
        iter = (iter + 1);
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
