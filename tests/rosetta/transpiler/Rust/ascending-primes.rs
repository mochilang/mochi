// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_asc: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_asc = vec![];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
        static mut g_asc: Vec<i64> = Vec::new();;
        unsafe fn gen(mut first: i64, mut cand: i64, mut digits: i64) {
    if (digits == 0) {
        if isPrime(cand) {
            g_asc = { let mut v = g_asc.clone().clone(); v.extend(vec![cand]); v };
        }
        return
    }
    let mut i: i64 = first;
    while (i < 10) {
        gen((i + 1), ((cand * 10) + i), (digits - 1));
        i = (i + 1);
    }
};
        unsafe fn pad(mut n: i64, mut width: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < width) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
        unsafe fn mochi_main() {
    let mut digits: i64 = 1;
    while (digits < 10) {
        gen(1, 0, digits);
        digits = (digits + 1);
    }
    println!("{}", format!("{}{}", format!("{}{}", "There are ", (g_asc.clone().len() as i64).to_string()), " ascending primes, namely:"));
    let mut i: i64 = 0;
    let mut line: String = String::from("").clone();
    while (i < (g_asc.clone().len() as i64)) {
        line = format!("{}{}", format!("{}{}", line, pad(g_asc.clone()[i as usize], 8)), " ");
        if (((i + 1) % 10) == 0) {
            println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
            line = String::from("");
        }
        i = (i + 1);
    }
    if ((line.len() as i64) > 0) {
        println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
