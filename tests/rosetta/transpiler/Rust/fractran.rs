// Generated by Mochi transpiler v0.10.52 on 2025-08-01 22:42 +0700
#[derive(Debug, Clone, Default)]
struct StepResult {
    n: i64,
    ok: bool,
}
impl std::fmt::Display for StepResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"n\": {}", self.n)?;
        write!(f, ", ")?;
        write!(f, "\"ok\": {}", self.ok)?;
        write!(f, "}}")
    }
}

fn step(mut n: i64, program: &mut Vec<Vec<i64>>) -> StepResult {
    let mut i: i64 = 0;
    while (i < (program.len() as i64)) {
        let mut num: i64 = program[i as usize].clone()[0 as usize];
        let mut den: i64 = program[i as usize].clone()[1 as usize];
        if ((n % den) == 0) {
            n = ((n / den) * num);
            return StepResult {n: n, ok: true}
        }
        i = (i + 1);
    }
    return StepResult {n: n, ok: false}
}

fn mochi_main() {
    let mut program: Vec<Vec<i64>> = vec![vec![17, 91], vec![78, 85], vec![19, 51], vec![23, 38], vec![29, 33], vec![77, 29], vec![95, 23], vec![77, 19], vec![1, 17], vec![11, 13], vec![13, 11], vec![15, 14], vec![15, 2], vec![55, 1]];
    let mut n: i64 = 2;
    let mut primes: i64 = 0;
    let mut count: i64 = 0;
    let mut limit: i64 = 1000000;
    let mut two: i64 = 2;
    let mut line: String = String::from("").clone();
    while ((primes < 20) && (count < limit)) {
        let mut res: StepResult = step(n, &mut program);
        n = res.n;
        if !res.ok {
            break
        }
        let mut m: i64 = n;
        let mut pow: i64 = 0;
        while ((m % two) == 0) {
            m = (m / two);
            pow = (pow + 1);
        }
        if ((m == 1) && (pow > 1)) {
            line = format!("{}{}", format!("{}{}", line, pow.to_string()), " ");
            primes = (primes + 1);
        }
        count = (count + 1);
    }
    if ((line.len() as i64) > 0) {
        println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
    } else {
        println!("{}", "");
    }
}

fn main() {
    mochi_main();
}
