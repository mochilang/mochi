// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn toBase(mut n: i64, mut b: i64) -> String {
    if (n == 0) {
        return String::from("0")
    }
    let mut s = String::from("");
    let mut x: i64 = n;
    while (x > 0) {
        s = format!("{}{}", (x % b).to_string(), s);
        x = (x / b);
    }
    return s.clone()
    let parseIntStr = move |str: &str| -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str.chars().nth(0 as usize).unwrap() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    while (i < (str.len() as i64)) {
        n = (((n * 10) + { let n: i64 = str[i as usize..(i + 1) as usize].to_string().parse().unwrap(); n }) - { let n: i64 = "0".parse().unwrap(); n });
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
};
    fn parseIntBase(s: &str, mut b: i64) -> i64 {
    let mut n: i64 = 0;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        n = ((n * b) + parseIntStr(&s[i as usize..(i + 1) as usize].to_string()));
        i = (i + 1);
    }
    return n
};
    fn reverseStr(s: &str) -> String {
    let mut out = String::from("");
    let mut i = ((s.len() as i64) - 1);
    while (i >= 0) {
        out = format!("{}{}", out, s[i as usize..(i + 1) as usize].to_string());
        i = (i - 1);
    }
    return out.clone()
};
    fn isPalindrome(s: &str) -> bool {
    return (s == reverseStr(s))
};
    fn isPalindromeBin(mut n: i64) -> bool {
    let mut b: String = toBase(n, 2).clone();
    return isPalindrome(&b)
};
    fn myMin(mut a: i64, mut b: i64) -> i64 {
    if (a < b) {
        return a
    }
    return b
};
    fn myMax(mut a: i64, mut b: i64) -> i64 {
    if (a > b) {
        return a
    }
    return b
};
    fn reverse3(mut n: i64) -> i64 {
    let mut x: i64 = 0;
    let mut y: i64 = n;
    while (y != 0) {
        x = ((x * 3) + (y % 3));
        y = (y / 3);
    }
    return x
};
    fn show(mut n: i64) {
    println!("{}", format!("{}{}", "Decimal : ", n.to_string()));
    println!("{}", format!("{}{}", "Binary  : ", toBase(n, 2)));
    println!("{}", format!("{}{}", "Ternary : ", toBase(n, 3)));
    println!("{}", "");
};
    fn mochi_main() {
    println!("{}", "The first 6 numbers which are palindromic in both binary and ternary are :\n");
    show(0);
    let mut count: i64 = 1;
    let mut lo: i64 = 0;
    let mut hi: i64 = 1;
    let mut pow2: i64 = 1;
    let mut pow3: i64 = 1;
    loop {
        let mut i: i64 = lo;
        while (i < hi) {
            let mut n: i64 = ((((i * 3) + 1) * pow3) + reverse3(i));
            if isPalindromeBin(n) {
                show(n);
                count = (count + 1);
                if (count >= 6) {
                    return
                }
            }
            i = (i + 1);
        }
        if (i == pow3) {
            pow3 = (pow3 * 3);
        } else {
            pow2 = (pow2 * 4);
        }
        loop {
            while (pow2 <= pow3) {
                pow2 = (pow2 * 4);
            }
            let mut lo2: i64 = (((pow2 / pow3) - 1) / 3);
            let mut hi2: i64 = (((((pow2 * 2) / pow3) - 1) / 3) + 1);
            let mut lo3: i64 = (pow3 / 3);
            let mut hi3: i64 = pow3;
            if (lo2 >= hi3) {
                pow3 = (pow3 * 3);
            } else if (lo3 >= hi2) {
                pow2 = (pow2 * 4);
            } else {
                lo = myMax(lo2, lo3);
                hi = myMin(hi2, hi3);
                break
            }
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
