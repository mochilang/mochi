// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:03 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn powInt(mut base: i64, mut exp: i64) -> i64 {
    let mut r: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            r = (r * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return r
};
    fn minInt(mut x: i64, mut y: i64) -> i64 {
    if (x < y) {
        return x
    }
    return y
};
    fn throwDie(mut nSides: i64, mut nDice: i64, mut s: i64, counts: &mut Vec<i64>) {
    if (nDice == 0) {
        counts[s as usize] = (counts[s as usize] + 1);
        return
    }
    let mut i: i64 = 1;
    while (i <= nSides) {
        throwDie(nSides, (nDice - 1), (s + i), counts);
        i = (i + 1);
    }
};
    fn beatingProbability(mut nSides1: i64, mut nDice1: i64, mut nSides2: i64, mut nDice2: i64) -> f64 {
    let mut len1: i64 = ((nSides1 + 1) * nDice1);
    let mut c1: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < len1) {
        c1 = { let mut _v = c1.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    throwDie(nSides1, nDice1, 0, &mut c1);
    let mut len2: i64 = ((nSides2 + 1) * nDice2);
    let mut c2: Vec<i64> = vec![];
    let mut j: i64 = 0;
    while (j < len2) {
        c2 = { let mut _v = c2.clone(); _v.push(0); _v };
        j = (j + 1);
    }
    throwDie(nSides2, nDice2, 0, &mut c2);
    let mut p12: f64 = ((powInt(nSides1, nDice1) as f64) * (powInt(nSides2, nDice2) as f64));
    let mut tot: f64 = 0.0;
    i = 0;
    while (i < len1) {
        j = 0;
        let mut m: i64 = minInt(i, len2);
        while (j < m) {
            tot = (tot + (((((c1[i as usize] as f64) * (c2[j as usize] as f64)) as f64) / p12) as f64));
            j = (j + 1);
        }
        i = (i + 1);
    }
    return tot
};
    println!("{}", beatingProbability(4, 9, 6, 6).to_string());
    println!("{}", beatingProbability(10, 5, 7, 6).to_string());
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
