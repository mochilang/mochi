// Generated by Mochi transpiler v0.10.52 on 2025-08-02 10:39 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_max: i64 = 0;
static g_words: LazyLock<Mutex<HashMap<i64, String>>> = LazyLock::new(|| Mutex::new(HashMap::from([(3, String::from("Fizz")), (5, String::from("Buzz")), (7, String::from("Baxx"))])));
static mut g_keys: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_max = 20;
        g_keys = vec![3, 5, 7];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_max: i64 = 0;;
        static g_words: LazyLock<Mutex<HashMap<i64, String>>> = LazyLock::new(|| Mutex::new(HashMap::from([(3, String::from("Fizz")), (5, String::from("Buzz")), (7, String::from("Baxx"))])));;
        static mut g_keys: Vec<i64> = Vec::new();;
        for i in 1..(g_max + 1) {
            let mut text: String = String::from("").clone();
            for n in g_keys.clone().clone() {
                if ((i % n) == 0) {
                    text = format!("{}{}", text, g_words.lock().unwrap()[&n].clone());
                }
            }
            if (text.as_str() == "") {
                text = i.to_string().to_string();
            }
            println!("{}", text);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
