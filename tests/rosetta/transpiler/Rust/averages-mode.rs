// Generated by Mochi transpiler v0.10.55 on 2025-08-03 09:42 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_arr1: Vec<i64> = Vec::new();
static g_counts1: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static mut g_keys1: Vec<i64> = Vec::new();
static mut g_i: i64 = 0;
static mut g_max1: i64 = 0;
static mut g_modes1: Vec<i64> = Vec::new();
static mut g_arr2: Vec<i64> = Vec::new();
static g_counts2: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static mut g_keys2: Vec<i64> = Vec::new();
static mut g_max2: i64 = 0;
static mut g_modes2: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_arr1 = vec![2, 7, 1, 8, 2];
        g_keys1 = vec![];
        g_i = 0;
        g_max1 = 0;
        g_modes1 = vec![];
        g_arr2 = vec![2, 7, 1, 8, 2, 8];
        g_keys2 = vec![];
        g_max2 = 0;
        g_modes2 = vec![];
                let _start: i64 = _now();
        static mut g_arr1: Vec<i64> = Vec::new();;
        static g_counts1: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        static mut g_keys1: Vec<i64> = Vec::new();;
        static mut g_i: i64 = 0;;
        while (g_i < (g_arr1.clone().len() as i64)) {
            let mut v: i64 = g_arr1.clone()[g_i as usize];
            if g_counts1.lock().unwrap().contains_key(&v) {
                { let mut _map = g_counts1.lock().unwrap(); let _val = (_map.get(&v).cloned().unwrap_or_default() + 1); _map.insert(v.clone(), _val); };
            } else {
                { let mut _map = g_counts1.lock().unwrap(); let _val = 1; _map.insert(v.clone(), _val); };
                g_keys1 = { let mut _v = g_keys1.clone().clone(); _v.push(v); _v };
            }
            g_i = (g_i + 1);
        }
        static mut g_max1: i64 = 0;;
        g_i = 0;
        while (g_i < (g_keys1.clone().len() as i64)) {
            let mut k: i64 = g_keys1.clone()[g_i as usize];
            let mut c: i64 = g_counts1.lock().unwrap().get(&k).cloned().unwrap_or_default();
            if (c > g_max1) {
                g_max1 = c;
            }
            g_i = (g_i + 1);
        }
        static mut g_modes1: Vec<i64> = Vec::new();;
        g_i = 0;
        while (g_i < (g_keys1.clone().len() as i64)) {
            let mut k: i64 = g_keys1.clone()[g_i as usize];
            if (g_counts1.lock().unwrap().get(&k).cloned().unwrap_or_default() == g_max1) {
                g_modes1 = { let mut _v = g_modes1.clone().clone(); _v.push(k); _v };
            }
            g_i = (g_i + 1);
        }
        println!("{}", format!("{:?}", g_modes1.clone()));
        static mut g_arr2: Vec<i64> = Vec::new();;
        static g_counts2: LazyLock<Mutex<HashMap<i64, i64>>> = LazyLock::new(|| Mutex::new(HashMap::new()));;
        static mut g_keys2: Vec<i64> = Vec::new();;
        g_i = 0;
        while (g_i < (g_arr2.clone().len() as i64)) {
            let mut v: i64 = g_arr2.clone()[g_i as usize];
            if g_counts2.lock().unwrap().contains_key(&v) {
                { let mut _map = g_counts2.lock().unwrap(); let _val = (_map.get(&v).cloned().unwrap_or_default() + 1); _map.insert(v.clone(), _val); };
            } else {
                { let mut _map = g_counts2.lock().unwrap(); let _val = 1; _map.insert(v.clone(), _val); };
                g_keys2 = { let mut _v = g_keys2.clone().clone(); _v.push(v); _v };
            }
            g_i = (g_i + 1);
        }
        static mut g_max2: i64 = 0;;
        g_i = 0;
        while (g_i < (g_keys2.clone().len() as i64)) {
            let mut k: i64 = g_keys2.clone()[g_i as usize];
            let mut c: i64 = g_counts2.lock().unwrap().get(&k).cloned().unwrap_or_default();
            if (c > g_max2) {
                g_max2 = c;
            }
            g_i = (g_i + 1);
        }
        static mut g_modes2: Vec<i64> = Vec::new();;
        g_i = 0;
        while (g_i < (g_keys2.clone().len() as i64)) {
            let mut k: i64 = g_keys2.clone()[g_i as usize];
            if (g_counts2.lock().unwrap().get(&k).cloned().unwrap_or_default() == g_max2) {
                g_modes2 = { let mut _v = g_modes2.clone().clone(); _v.push(k); _v };
            }
            g_i = (g_i + 1);
        }
        println!("{}", format!("{:?}", g_modes2.clone()));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _end_mem;
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
