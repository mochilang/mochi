// Generated by Mochi transpiler v0.10.42 on 2025-07-27 16:50 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn indexOf(mut s: String, mut ch: String) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str() == ch.as_str()) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn fmt3(mut x: f64) -> String {
    let mut y: f64 = (((((x * 1000.0) + 0.5) as i64) as f64) / 1000.0);
    let mut s = y.to_string();
    let mut dot: i64 = indexOf(s.clone(), String::from("."));
    if (dot == (0 - 1)) {
        s = format!("{}{}", s, ".000");
    } else {
        let mut decs = (((s.len() as i64) - dot) - 1);
        if (decs > 3) {
            s = { let tmp = &s; tmp.chars().skip(0 as usize).take(((dot + 4) - 0) as usize).collect::<String>() };
        } else {
            while (decs < 3) {
                s = format!("{}{}", s, "0");
                decs = (decs + 1);
            }
        }
    }
    return s.clone()
};
    fn pad(mut s: String, mut width: i64) -> String {
    let mut out: String = s.clone();
    while ((out.len() as i64) < width) {
        out = format!("{}{}", " ", out);
    }
    return out.clone()
};
    fn smaSeries(mut xs: Vec<f64>, mut period: i64) -> Vec<f64> {
    let mut res: Vec<f64> = vec![];
    let mut sum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        sum = (sum + xs[i as usize]);
        if (i >= period) {
            sum = (sum - xs[(i - period) as usize]);
        }
        let mut denom: i64 = (i + 1);
        if (denom > period) {
            denom = period;
        }
        res = { let mut _v = res.clone(); _v.push((sum / (denom as f64))); _v };
        i = (i + 1);
    }
    return res
};
    fn mochi_main() {
    let mut xs: Vec<f64> = vec![1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
    let mut sma3: Vec<f64> = smaSeries(xs.clone(), 3);
    let mut sma5: Vec<f64> = smaSeries(xs.clone(), 5);
    println!("{}", "x       sma3   sma5");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let line: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad(fmt3(xs[i as usize]), 5), "  "), pad(fmt3(sma3[i as usize]), 5)), "  "), pad(fmt3(sma5[i as usize]), 5)).clone();
        println!("{}", line);
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
