// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_lines: Vec<String> = Vec::new();
static mut g_blocks: Vec<String> = Vec::new();
static mut g_outLines: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_lines = vec![String::from("alpha"), String::from("beta"), String::from("gamma")];
        g_blocks = text2block(g_lines.clone().clone());
        g_outLines = block2text(g_blocks.clone().clone());
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn repeat(s: &str, mut n: i64) -> String {
    let mut out = String::from("");
    let mut i: i64 = 0;
    while (i < n) {
        out = format!("{}{}", out, s);
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn trimRightSpace(s: &str) -> String {
    let mut i = ((s.len() as i64) - 1);
    while ((i >= 0) && (s[i as usize..(i + 1) as usize].to_string().as_str() == " ")) {
        i = (i - 1);
    }
    return s[0..(i + 1) as usize].to_string().clone()
};
        unsafe fn block2text(mut block: Vec<String>) -> Vec<String> {
    let mut out: Vec<String> = vec![];
    for b in block.clone() {
        out = { let mut _v = out.clone(); _v.push(trimRightSpace(&b).to_string()); _v };
    }
    return out
};
        unsafe fn text2block(mut lines: Vec<String>) -> Vec<String> {
    let mut out: Vec<String> = vec![];
    let mut count: i64 = 0;
    for line in lines.clone() {
        let mut s: i64 = line;
        let mut le = (s.len() as i64);
        if (le > 64) {
            s = s[0..64].to_vec();
        } else if (le < 64) {
            s = format!("{}{}", s, repeat(&" ", (64 - le)));
        }
        out = { let mut _v = out.clone(); _v.push(s.to_string()); _v };
        count = (count + 1);
    }
    if ((count % 16) != 0) {
        let mut pad: i64 = (16 - (count % 16));
        let mut i: i64 = 0;
        while (i < pad) {
            out = { let mut _v = out.clone(); _v.push(repeat(&" ", 64)); _v };
            i = (i + 1);
        }
    }
    return out
};
        static mut g_lines: Vec<String> = Vec::new();;
        static mut g_blocks: Vec<String> = Vec::new();;
        static mut g_outLines: Vec<String> = Vec::new();;
        for l in g_outLines.clone().clone() {
            if (l.as_str() != "") {
                println!("{}", l);
            }
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
