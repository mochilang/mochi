// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_rows: Vec<Vec<String>> = Vec::new();
static mut g_headings: bool = false;
fn main() {
    unsafe {
        g_rows = vec![];
        g_headings = true;
                let _start: i64 = _now();
        let mut c: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Character,Speech\n", "The multitude,The messiah! Show us the messiah!\n"), "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!").clone();
        for line in c.split("\n").map(|x| x.to_string()).collect::<Vec<String>>() {
            g_rows = { let mut _v = g_rows.clone().clone(); _v.push(line.split(",").map(|x| x.to_string()).collect::<Vec<String>>()); _v };
        }
        println!("{}", "<table>");
        if g_headings {
            if ((g_rows.clone().len() as i64) > 0) {
                let mut th: String = String::from("").clone();
                for h in g_rows.clone()[0 as usize].clone().iter().cloned() {
                    th = format!("{}{}", format!("{}{}", format!("{}{}", th, "<th>"), h), "</th>");
                }
                println!("{}", "   <thead>");
                println!("{}", format!("{}{}", format!("{}{}", "      <tr>", th), "</tr>"));
                println!("{}", "   </thead>");
                println!("{}", "   <tbody>");
                let mut i: i64 = 1;
                while (i < (g_rows.clone().len() as i64)) {
                    let mut cells: String = String::from("").clone();
                    for cell in g_rows.clone()[i as usize].clone().iter().cloned() {
                        cells = format!("{}{}", format!("{}{}", format!("{}{}", cells, "<td>"), cell), "</td>");
                    }
                    println!("{}", format!("{}{}", format!("{}{}", "      <tr>", cells), "</tr>"));
                    i = (i + 1);
                }
                println!("{}", "   </tbody>");
            }
        } else {
            for row in g_rows.clone().iter() {
                let mut cells: String = String::from("").clone();
                for cell in row {
                    cells = format!("{}{}", format!("{}{}", format!("{}{}", cells, "<td>"), cell), "</td>");
                }
                println!("{}", format!("{}{}", format!("{}{}", "    <tr>", cells), "</tr>"));
            }
        }
        println!("{}", "</table>");
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
