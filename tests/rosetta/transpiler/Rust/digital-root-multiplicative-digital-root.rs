// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct MDRResult {
    mp: i64,
    mdr: i64,
}
impl std::fmt::Display for MDRResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"mp\": {}", self.mp)?;
        write!(f, ", ")?;
        write!(f, "\"mdr\": {}", self.mdr)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn pad(s: &str, mut width: i64) -> String {
    let mut out: String = s.to_string().clone();
    while ((out.len() as i64) < width) {
        out = format!("{}{}", " ", out);
    }
    return out.clone()
};
    fn mult(mut n: i64, mut base: i64) -> i64 {
    let mut m: i64 = 1;
    let mut x: i64 = n;
    let mut b: i64 = base;
    while (x > 0) {
        m = (m * (x % b));
        x = (x / b);
    }
    return m
};
    fn multDigitalRoot(mut n: i64, mut base: i64) -> MDRResult {
    let mut m: i64 = n;
    let mut mp: i64 = 0;
    let mut b: i64 = base;
    while (m >= b) {
        m = mult(m, base);
        mp = (mp + 1);
    }
    return MDRResult {mp: mp, mdr: m}
};
    fn mochi_main() {
    let mut base: i64 = 10;
    let mut size: i64 = 5;
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad(&"Number", 20), " "), pad(&"MDR", 3)), " "), pad(&"MP", 3)));
    let mut nums: Vec<i64> = vec![123321, 7739, 893, 899998, 3778888999, 277777788888899];
    let mut i: i64 = 0;
    while (i < (nums.len() as i64)) {
        let mut n: i64 = nums[i as usize];
        let mut r: MDRResult = multDigitalRoot(n, base);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad(&n.to_string(), 20), " "), pad(&r.mdr.to_string(), 3)), " "), pad(&r.mp.to_string(), 3)));
        i = (i + 1);
    }
    println!("{}", "");
    let mut list: Vec<Vec<i64>> = vec![];
    let mut idx: i64 = 0;
    while (idx < base) {
        list = { let mut _v = list.clone(); _v.push(vec![]); _v };
        idx = (idx + 1);
    }
    let mut cnt: i64 = (size * base);
    let mut n: i64 = 0;
    let mut b: i64 = base;
    while (cnt > 0) {
        let mut r: MDRResult = multDigitalRoot(n, base);
        let mut mdr: i64 = r.mdr;
        if ((list[mdr as usize].clone().len() as i64) < size) {
            list[mdr as usize] = { let mut _v = list[mdr as usize].clone().clone(); _v.push(n); _v };
            cnt = (cnt - 1);
        }
        n = (n + 1);
    }
    println!("{}", "MDR: First");
    let mut j: i64 = 0;
    while (j < base) {
        println!("{}", format!("{}{}", format!("{}{}", pad(&j.to_string(), 3), ": "), format!("{:?}", list[j as usize].clone())));
        j = (j + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
