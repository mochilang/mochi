// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
use std::io::{self, Read};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn input() -> String {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).unwrap();
    s.trim_end().to_string()
}
fn int(x: i64) -> i64 { x }
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn leapYear(mut y: i64) -> bool {
    return ((((y % 4) == 0) && ((y % 100) != 0)) || ((y % 400) == 0))
};
    fn monthDays(mut y: i64, mut m: i64) -> i64 {
    let mut days: Vec<i64> = vec![0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if ((m == 2) && leapYear(y)) {
        return 29
    }
    return days[m as usize]
};
    fn zeller(mut y: i64, mut m: i64, mut d: i64) -> i64 {
    let mut mm: i64 = m;
    let mut yy: i64 = y;
    if (mm < 3) {
        mm = (mm + 12);
        yy = (yy - 1);
    }
    let mut K: i64 = (yy % 100);
    let mut J: i64 = (yy / 100);
    let mut h: i64 = ((((((d + ((13 * (mm + 1)) / 5)) + K) + (K / 4)) + (J / 4)) + (5 * J)) % 7);
    return ((h + 6) % 7)
};
    fn lastSunday(mut y: i64, mut m: i64) -> i64 {
    let mut day: i64 = monthDays(y, m);
    while ((day > 0) && (zeller(y, m, day) != 0)) {
        day = (day - 1);
    }
    return day
};
    fn monthName(mut m: i64) -> String {
    let mut names: Vec<String> = vec![String::from(""), String::from("January"), String::from("February"), String::from("March"), String::from("April"), String::from("May"), String::from("June"), String::from("July"), String::from("August"), String::from("September"), String::from("October"), String::from("November"), String::from("December")];
    return names[m as usize].clone().clone()
};
    fn mochi_main() {
    let mut year = { let n: i64 = input().parse().unwrap(); n };
    println!("{}", format!("{}{}", "Last Sundays of each month of ", year.to_string()));
    println!("{}", "==================================");
    let mut m: i64 = 1;
    while (m <= 12) {
        let mut day: i64 = lastSunday(year, m);
        println!("{}", format!("{}{}", format!("{}{}", monthName(m), ": "), day.to_string()));
        m = (m + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
