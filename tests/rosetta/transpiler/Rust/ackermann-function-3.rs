// Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn int(x: i64) -> i64 { x }
static mut g_err: String = String::new();
fn main() {
    unsafe {
        g_err = String::from("");
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn pow_big(mut base: i64, mut exp: i64) -> i64 {
    let mut result: i64 = 1;
    let mut b: i64 = base;
    let mut e: i64 = exp;
    while (e > 0) {
        if ((e % 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = (e / 2);
    }
    return result
};
        unsafe fn bit_len(mut x: i64) -> i64 {
    let mut n: i64 = x;
    let mut c: i64 = 0;
    while (n > 0) {
        n = (n / 2);
        c = (c + 1);
    }
    return c
};
        static mut g_err: String = String::new();;
        unsafe fn ackermann2(mut m: i64, mut n: i64) -> i64 {
    if (g_err.as_str() != "") {
        return 0
    }
    if (m <= 3) {
        let mi: i64 = int(m);
        if (mi == 0) {
            return (n + 1)
        }
        if (mi == 1) {
            return (n + 2)
        }
        if (mi == 2) {
            return ((2 * n) + 3)
        }
        if (mi == 3) {
            let nb: i64 = bit_len(n);
            if (nb > 64) {
                g_err = format!("{}{}", format!("{}{}", "A(m,n) had n of ", nb.to_string()), " bits; too large");
                return 0
            }
            let r: i64 = pow_big(2, int(n));
            return ((8 * r) - 3)
        }
    }
    if (bit_len(n) == 0) {
        return ackermann2((m - 1), 1)
    }
    return ackermann2((m - 1), ackermann2(m, (n - 1)))
};
        unsafe fn show(mut m: i64, mut n: i64) {
    g_err = String::from("");
    let res: i64 = ackermann2(m, n);
    if (g_err.as_str() != "") {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "A(", m.to_string()), ", "), n.to_string()), ") = Error: "), g_err));
        return
    }
    if (bit_len(res) <= 256) {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "A(", m.to_string()), ", "), n.to_string()), ") = "), res.to_string()));
    } else {
        let s = res.to_string();
        let pre: String = { let tmp = &s; tmp.chars().skip(0 as usize).take((20 - 0) as usize).collect::<String>() }.clone();
        let suf: String = { let tmp = &s; tmp.chars().skip(((s.len() as i64) - 20) as usize).take(((s.len() as i64) - ((s.len() as i64) - 20)) as usize).collect::<String>() }.clone();
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "A(", m.to_string()), ", "), n.to_string()), ") = "), (s.len() as i64).to_string()), " digits starting/ending with: "), pre), "..."), suf));
    }
};
        unsafe fn mochi_main() {
    show(0, 0);
    show(1, 2);
    show(2, 4);
    show(3, 100);
    show(3, 1000000);
    show(4, 1);
    show(4, 2);
    show(4, 3);
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
