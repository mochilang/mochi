// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:38 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn sieve(mut limit: i64) -> Vec<bool> {
    let mut primes: Vec<bool> = vec![];
    let mut i: i64 = 0;
    while (i < limit) {
        primes = { let mut _v = primes.clone(); _v.push(true); _v };
        i = (i + 1);
    }
    primes[0 as usize] = false;
    primes[1 as usize] = false;
    let mut p: i64 = 2;
    while ((p * p) < limit) {
        if primes[p as usize] {
            let mut k: i64 = (p * p);
            while (k < limit) {
                primes[k as usize] = false;
                k = (k + p);
            }
        }
        p = (p + 1);
    }
    return primes
};
    fn goldbachCount(mut primes: Vec<bool>, mut n: i64) -> i64 {
    let mut c: i64 = 0;
    let mut i: i64 = 1;
    while (i <= (n / 2)) {
        if (primes[i as usize] && primes[(n - i) as usize]) {
            c = (c + 1);
        }
        i = (i + 1);
    }
    return c
};
    fn pad(mut n: i64) -> String {
    if (n < 10) {
        return format!("{}{}", "  ", n.to_string())
    }
    if (n < 100) {
        return format!("{}{}", " ", n.to_string())
    }
    return n.to_string().to_string().clone()
};
    fn mochi_main() {
    let mut primes: Vec<bool> = sieve(1000);
    println!("{}", "The first 100 Goldbach numbers:");
    let mut line: String = String::from("").clone();
    let mut n: i64 = 2;
    let mut count: i64 = 0;
    while (count < 100) {
        let mut v: i64 = goldbachCount(primes.clone(), (2 * n));
        line = format!("{}{}", format!("{}{}", line, pad(v)), " ");
        count = (count + 1);
        n = (n + 1);
        if ((count % 10) == 0) {
            println!("{}", { let tmp = &line; tmp.chars().skip(0 as usize).take((((line.len() as i64) - 1) - 0) as usize).collect::<String>() });
            line = String::from("");
        }
    }
    let mut val: i64 = goldbachCount(primes.clone(), 1000);
    println!("{}", format!("{}{}", "\nThe 1,000th Goldbach number = ", val.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
