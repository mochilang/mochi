// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn intSqrt(mut x: i64) -> i64 {
    if (x < 2) {
        return x
    }
    let mut left: i64 = 1;
    let mut right: i64 = (x / 2);
    let mut ans: i64 = 0;
    while (left <= right) {
        let mut mid: i64 = (left + ((right - left) / 2));
        let mut sq: i64 = (mid * mid);
        if (sq == x) {
            return mid
        }
        if (sq < x) {
            left = (mid + 1);
            ans = mid;
        } else {
            right = (mid - 1);
        }
    }
    return ans
};
    fn sumRecip(mut n: i64) -> i64 {
    let mut s: i64 = 1;
    let mut limit: i64 = intSqrt(n);
    let mut f: i64 = 2;
    while (f <= limit) {
        if ((n % f) == 0) {
            s = (s + (n / f));
            let mut f2: i64 = (n / f);
            if (f2 != f) {
                s = (s + f);
            }
        }
        f = (f + 1);
    }
    return s
};
    fn mochi_main() {
    let mut nums: Vec<i64> = vec![6, 28, 120, 496, 672, 8128, 30240, 32760, 523776];
    for n in nums.clone() {
        let mut s: i64 = sumRecip(n);
        if ((s % n) == 0) {
            let mut val: i64 = (s / n);
            let mut perfect: String = String::from("").clone();
            if (val == 1) {
                perfect = String::from("perfect!");
            }
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Sum of recipr. factors of ", n.to_string()), " = "), val.to_string()), " exactly "), perfect));
        }
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
