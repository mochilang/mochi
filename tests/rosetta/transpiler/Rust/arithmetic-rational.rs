// Generated by Mochi transpiler v0.10.41 on 2025-07-27 06:30 +0700
fn intSqrt(mut x: i64) -> i64 {
    if (x < 2) {
        return x
    }
    let mut left: i64 = 1;
    let mut right: i64 = (x / 2);
    let mut ans: i64 = 0;
    while (left <= right) {
        let mid: i64 = (left + ((right - left) / 2));
        let sq: i64 = (mid * mid);
        if (sq == x) {
            return mid
        }
        if (sq < x) {
            left = (mid + 1);
            ans = mid;
        } else {
            right = (mid - 1);
        }
    }
    return ans
}

fn sumRecip(mut n: i64) -> i64 {
    let mut s: i64 = 1;
    let limit: i64 = intSqrt(n);
    let mut f: i64 = 2;
    while (f <= limit) {
        if ((n % f) == 0) {
            s = (s + (n / f));
            let f2: i64 = (n / f);
            if (f2 != f) {
                s = (s + f);
            }
        }
        f = (f + 1);
    }
    return s
}

fn mochi_main() {
    let mut nums: Vec<i64> = vec![6, 28, 120, 496, 672, 8128, 30240, 32760, 523776];
    for n in nums.clone() {
        let s: i64 = sumRecip(n);
        if ((s % n) == 0) {
            let val: i64 = (s / n);
            let mut perfect = String::from("");
            if (val == 1) {
                perfect = String::from("perfect!");
            }
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Sum of recipr. factors of ", n.to_string()), " = "), val.to_string()), " exactly "), perfect));
        }
    }
}

fn main() {
    mochi_main();
}
