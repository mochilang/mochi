// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_given: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_given = vec![String::from("ABCD"), String::from("CABD"), String::from("ACDB"), String::from("DACB"), String::from("BCDA"), String::from("ACBD"), String::from("ADCB"), String::from("CDAB"), String::from("DABC"), String::from("BCAD"), String::from("CADB"), String::from("CDBA"), String::from("CBAD"), String::from("ABDC"), String::from("ADBC"), String::from("BDCA"), String::from("DCBA"), String::from("BACD"), String::from("BADC"), String::from("BDAC"), String::from("CBDA"), String::from("DBCA"), String::from("DCAB")];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_given: Vec<String> = Vec::new();;
        unsafe fn idx(ch: &str) -> i64 {
    if (ch == "A") {
        return 0
    }
    if (ch == "B") {
        return 1
    }
    if (ch == "C") {
        return 2
    }
    return 3
};
        unsafe fn mochi_main() {
    let mut res = String::from("");
    let mut i: i64 = 0;
    while (i < (g_given.clone()[0 as usize].clone().len() as i64)) {
        let mut counts: Vec<i64> = vec![0, 0, 0, 0];
        for p in g_given.clone().clone() {
            let mut ch: String = { let tmp = &p; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
            let mut j: i64 = idx(&ch);
            counts[j as usize] = (counts[j as usize] + 1);
        }
        let mut j: i64 = 0;
        while (j < 4) {
            if ((counts[j as usize] % 2) == 1) {
                if (j == 0) {
                    res = format!("{}{}", res, "A");
                } else if (j == 1) {
                    res = format!("{}{}", res, "B");
                } else if (j == 2) {
                    res = format!("{}{}", res, "C");
                } else {
                    res = format!("{}{}", res, "D");
                }
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    println!("{}", res);
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
