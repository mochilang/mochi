// Generated by Mochi transpiler v0.10.57 on 2025-08-04 15:16 +0700
static mut g_daysInMonth: Vec<i64> = Vec::new();
static mut g_start: Vec<i64> = Vec::new();
static mut g_months: Vec<String> = Vec::new();
static mut g_days: Vec<String> = Vec::new();
static mut g_qtr: i64 = 0;
fn main() {
    unsafe {
        g_daysInMonth = vec![31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        g_start = vec![3, 6, 6, 2, 4, 0, 2, 5, 1, 3, 6, 1];
        g_months = vec![String::from(" January "), String::from(" February"), String::from("  March  "), String::from("  April  "), String::from("   May   "), String::from("   June  "), String::from("   July  "), String::from("  August "), String::from("September"), String::from(" October "), String::from(" November"), String::from(" December")];
        g_days = vec![String::from("Su"), String::from("Mo"), String::from("Tu"), String::from("We"), String::from("Th"), String::from("Fr"), String::from("Sa")];
        g_qtr = 0;
        println!("{}", "                                [SNOOPY]\n");
        println!("{}", "                                  1969\n");
        while (g_qtr < 4) {
            let mut mi: i64 = 0;
            while (mi < 3) {
                println!("{}", format!("{} {}", format!("{}{}", format!("{}{}", "      ", g_months.clone()[((g_qtr * 3) + mi) as usize].clone()), "           "), if false { 1 } else { 0 }).trim_end());
                mi = (mi + 1);
            }
            println!("{}", "");
            mi = 0;
            while (mi < 3) {
                let mut d: i64 = 0;
                while (d < 7) {
                    println!("{}", format!("{} {}", format!("{}{}", " ", g_days.clone()[d as usize].clone()), if false { 1 } else { 0 }).trim_end());
                    d = (d + 1);
                }
                println!("{}", format!("{} {}", "     ", if false { 1 } else { 0 }).trim_end());
                mi = (mi + 1);
            }
            println!("{}", "");
            let mut week: i64 = 0;
            while (week < 6) {
                mi = 0;
                while (mi < 3) {
                    let mut day: i64 = 0;
                    while (day < 7) {
                        let mut m: i64 = ((g_qtr * 3) + mi);
                        let mut val: i64 = ((((week * 7) + day) - g_start.clone()[m as usize]) + 1);
                        if ((val >= 1) && (val <= g_daysInMonth.clone()[m as usize])) {
                            let mut s = val.to_string();
                            if ((s.len() as i64) == 1) {
                                s = format!("{}{}", " ", s);
                            }
                            println!("{}", format!("{} {}", format!("{}{}", " ", s), if false { 1 } else { 0 }).trim_end());
                        } else {
                            println!("{}", format!("{} {}", "   ", if false { 1 } else { 0 }).trim_end());
                        }
                        day = (day + 1);
                    }
                    println!("{}", format!("{} {}", "     ", if false { 1 } else { 0 }).trim_end());
                    mi = (mi + 1);
                }
                println!("{}", "");
                week = (week + 1);
            }
            println!("{}", "");
            g_qtr = (g_qtr + 1);
        }
    }
}
