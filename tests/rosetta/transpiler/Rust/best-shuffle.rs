// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn nextRand(mut seed: i64) -> i64 {
    return (((seed * 1664525) + 1013904223) % 2147483647)
};
    fn shuffleChars(mut s: String, mut seed: i64) -> Vec<f64> {
    let mut chars: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        chars = { let mut _v = chars.clone(); _v.push({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.to_string()); _v };
        i = (i + 1);
    }
    let mut sd: i64 = seed;
    let mut idx = ((chars.len() as i64) - 1);
    while (idx > 0) {
        sd = nextRand(sd);
        let mut j: i64 = (sd % (idx + 1));
        let tmp: String = chars[idx as usize].clone().clone();
        chars[idx as usize] = chars[j as usize].clone();
        chars[j as usize] = tmp;
        idx = (idx - 1);
    }
    let mut res = String::from("");
    i = 0;
    while (i < (chars.len() as i64)) {
        res = format!("{}{}", res, chars[i as usize].clone());
        i = (i + 1);
    }
    return vec![res, sd]
};
    fn bestShuffle(mut s: String, mut seed: i64) -> Vec<f64> {
    let mut r: Vec<f64> = shuffleChars(s, seed);
    let mut t: f64 = r[0 as usize];
    let mut sd: f64 = r[1 as usize];
    let mut arr: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (t.len() as i64)) {
        arr = { let mut _v = arr.clone(); _v.push({ let tmp = &t; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.to_string()); _v };
        i = (i + 1);
    }
    i = 0;
    while (i < (arr.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (arr.len() as i64)) {
            if (((i != j) && (arr[i as usize].clone().as_str() != { let tmp = &s; tmp.chars().skip(j as usize).take(((j + 1) - j) as usize).collect::<String>() }.as_str())) && (arr[j as usize].clone().as_str() != { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str())) {
                let tmp: String = arr[i as usize].clone().clone();
                arr[i as usize] = arr[j as usize].clone();
                arr[j as usize] = tmp;
                break
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    let mut count: i64 = 0;
    i = 0;
    while (i < (arr.len() as i64)) {
        if (arr[i as usize].clone().as_str() == { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.as_str()) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    let mut out = String::from("");
    i = 0;
    while (i < (arr.len() as i64)) {
        out = format!("{}{}", out, arr[i as usize].clone());
        i = (i + 1);
    }
    return vec![out, sd, count]
};
    fn mochi_main() {
    let mut ts: Vec<String> = vec![String::from("abracadabra"), String::from("seesaw"), String::from("elk"), String::from("grrrrrr"), String::from("up"), String::from("a")];
    let mut seed: i64 = 1;
    let mut i: i64 = 0;
    while (i < (ts.len() as i64)) {
        let mut r: Vec<f64> = bestShuffle(ts[i as usize].clone(), seed);
        let shuf: f64 = r[0 as usize];
        seed = r[1 as usize];
        let cnt: f64 = r[2 as usize];
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", ts[i as usize].clone(), " -> "), shuf), " ("), cnt.to_string()), ")"));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
