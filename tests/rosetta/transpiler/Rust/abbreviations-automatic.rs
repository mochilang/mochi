// Generated by Mochi transpiler v0.10.40 on 2025-07-26 00:08 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn fields(mut s: String) -> Vec<String> {
    let mut words: Vec<String> = vec![];
    let mut cur = String::from("");
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) {
            if ((cur.len() as i64) > 0) {
                words = { let mut v = words.clone(); v.push(String::from(cur)); v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        words = { let mut v = words.clone(); v.push(String::from(cur)); v };
    }
    return words
};
    fn takeRunes(mut s: String, mut n: i64) -> String {
    let mut idx: i64 = 0;
    let mut count: i64 = 0;
    while (idx < (s.len() as i64)) {
        if (count == n) {
            return { let tmp = &s; tmp.chars().skip(0 as usize).take((idx - 0) as usize).collect::<String>() }
        }
        idx = (idx + 1);
        count = (count + 1);
    }
    return s.clone()
};
    fn distinct(mut xs: Vec<String>) -> Vec<String> {
    let mut m: HashMap<String, bool> = HashMap::from([]);
    let mut out: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        let x: String = xs[i as usize].clone().clone();
        if !m.contains_key(&x) {
            m.insert(x.clone(), true);
            out = { let mut v = out.clone(); v.push(String::from(x)); v };
        }
        i = (i + 1);
    }
    return out
};
    fn abbrevLen(mut words: Vec<String>) -> i64 {
    let size = (words.len() as i64);
    let mut l: i64 = 1;
    while true {
        let mut abbrs: Vec<String> = vec![];
        let mut i: i64 = 0;
        while (i < size) {
            abbrs = { let mut v = abbrs.clone(); v.push(String::from(takeRunes(words[i as usize].clone(), l))); v };
            i = (i + 1);
        }
        if ((distinct(abbrs.clone()).len() as i64) == size) {
            return l
        }
        l = (l + 1);
    }
    return 0
};
    fn pad2(mut n: i64) -> String {
    let s = n.to_string();
    if ((s.len() as i64) < 2) {
        return format!("{}{}", " ", s)
    }
    return s.to_string().clone()
};
    fn mochi_main() {
    let mut lines: Vec<String> = vec![String::from("Sunday Monday Tuesday Wednesday Thursday Friday Saturday"), String::from("Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag"), String::from("E_djelë E_hënë E_martë E_mërkurë E_enjte E_premte E_shtunë"), String::from("Ehud Segno Maksegno Erob Hamus Arbe Kedame"), String::from("Al_Ahad Al_Ithinin Al_Tholatha'a Al_Arbia'a Al_Kamis Al_Gomia'a Al_Sabit"), String::from("Guiragui Yergou_shapti Yerek_shapti Tchorek_shapti Hink_shapti Ourpat Shapat"), String::from("domingu llunes martes miércoles xueves vienres sábadu"), String::from("Bazar_gÜnÜ Birinci_gÜn Çkinci_gÜn ÜçÜncÜ_gÜn DÖrdÜncÜ_gÜn Bes,inci_gÜn Altòncò_gÜn"), String::from("Igande Astelehen Astearte Asteazken Ostegun Ostiral Larunbat"), String::from("Robi_bar Shom_bar Mongal_bar Budhh_bar BRihashpati_bar Shukro_bar Shoni_bar"), String::from("Nedjelja Ponedeljak Utorak Srijeda Cxetvrtak Petak Subota"), String::from("Disul Dilun Dimeurzh Dimerc'her Diriaou Digwener Disadorn"), String::from("nedelia ponedelnik vtornik sriada chetvartak petak sabota"), String::from("sing_kei_yaht sing_kei_yat sing_kei_yee sing_kei_saam sing_kei_sie sing_kei_ng sing_kei_luk"), String::from("Diumenge Dilluns Dimarts Dimecres Dijous Divendres Dissabte"), String::from("Dzeenkk-eh Dzeehn_kk-ehreh Dzeehn_kk-ehreh_nah_kay_dzeeneh Tah_neesee_dzeehn_neh Deehn_ghee_dzee-neh Tl-oowey_tts-el_dehlee Dzeentt-ahzee"), String::from("dy_Sul dy_Lun dy_Meurth dy_Mergher dy_You dy_Gwener dy_Sadorn"), String::from("Dimanch Lendi Madi Mèkredi Jedi Vandredi Samdi"), String::from("nedjelja ponedjeljak utorak srijeda cxetvrtak petak subota"), String::from("nede^le ponde^lí úterÿ str^eda c^tvrtek pátek sobota"), String::from("Sondee Mondee Tiisiday Walansedee TOOsedee Feraadee Satadee"), String::from("s0ndag mandag tirsdag onsdag torsdag fredag l0rdag"), String::from("zondag maandag dinsdag woensdag donderdag vrijdag zaterdag"), String::from("Diman^co Lundo Mardo Merkredo ^Jaùdo Vendredo Sabato"), String::from("pÜhapäev esmaspäev teisipäev kolmapäev neljapäev reede laupäev"), String::from("Diu_prima Diu_sequima Diu_tritima Diu_quartima Diu_quintima Diu_sextima Diu_sabbata"), String::from("sunnudagur mánadagur tÿsdaguy mikudagur hósdagur friggjadagur leygardagur"), String::from("Yek_Sham'beh Do_Sham'beh Seh_Sham'beh Cha'har_Sham'beh Panj_Sham'beh Jom'eh Sham'beh"), String::from("sunnuntai maanantai tiistai keskiviiko torsktai perjantai lauantai"), String::from("dimanche lundi mardi mercredi jeudi vendredi samedi"), String::from("Snein Moandei Tiisdei Woansdei Tonersdei Freed Sneon"), String::from("Domingo Segunda_feira Martes Mércores Joves Venres Sábado"), String::from("k'vira orshabati samshabati otkhshabati khutshabati p'arask'evi shabati"), String::from("Sonntag Montag Dienstag Mittwoch Donnerstag Freitag Samstag"), String::from("Kiriaki' Defte'ra Tri'ti Teta'rti Pe'mpti Paraskebi' Sa'bato"), String::from("ravivaar somvaar mangalvaar budhvaar guruvaar shukravaar shanivaar"), String::from("pópule pó`akahi pó`alua pó`akolu pó`ahá pó`alima pó`aono"), String::from("Yom_rishon Yom_sheni Yom_shlishi Yom_revi'i Yom_chamishi Yom_shishi Shabat"), String::from("ravivara somavar mangalavar budhavara brahaspativar shukravara shanivar"), String::from("vasárnap hétfö kedd szerda csütörtök péntek szombat"), String::from("Sunnudagur Mánudagur ╞riδjudagur Miδvikudagar Fimmtudagur FÖstudagur Laugardagur"), String::from("sundio lundio mardio merkurdio jovdio venerdio saturdio"), String::from("Minggu Senin Selasa Rabu Kamis Jumat Sabtu"), String::from("Dominica Lunedi Martedi Mercuridi Jovedi Venerdi Sabbato"), String::from("Dé_Domhnaigh Dé_Luain Dé_Máirt Dé_Ceadaoin Dé_ardaoin Dé_hAoine Dé_Sathairn"), String::from("domenica lunedí martedí mercoledí giovedí venerdí sabato"), String::from("Nichiyou_bi Getzuyou_bi Kayou_bi Suiyou_bi Mokuyou_bi Kin'you_bi Doyou_bi"), String::from("Il-yo-il Wol-yo-il Hwa-yo-il Su-yo-il Mok-yo-il Kum-yo-il To-yo-il"), String::from("Dies_Dominica Dies_Lunæ Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Saturni"), String::from("sve-tdien pirmdien otrdien tresvdien ceturtdien piektdien sestdien"), String::from("Sekmadienis Pirmadienis Antradienis Trec^iadienis Ketvirtadienis Penktadienis S^es^tadienis"), String::from("Wangu Kazooba Walumbe Mukasa Kiwanuka Nnagawonye Wamunyi"), String::from("xing-_qi-_rì xing-_qi-_yi-. xing-_qi-_èr xing-_qi-_san-. xing-_qi-_sì xing-_qi-_wuv. xing-_qi-_liù"), String::from("Jedoonee Jelune Jemayrt Jecrean Jardaim Jeheiney Jesam"), String::from("Jabot Manre Juje Wonje Taije Balaire Jarere"), String::from("geminrongo minòmishi mártes mièrkoles misheushi bèrnashi mishábaro"), String::from("Ahad Isnin Selasa Rabu Khamis Jumaat Sabtu"), String::from("sφndag mandag tirsdag onsdag torsdag fredag lφrdag"), String::from("lo_dimenge lo_diluns lo_dimarç lo_dimèrcres lo_dijòus lo_divendres lo_dissabte"), String::from("djadomingo djaluna djamars djarason djaweps djabièrna djasabra"), String::from("Niedziela Poniedzial/ek Wtorek S,roda Czwartek Pia,tek Sobota"), String::from("Domingo segunda-feire terça-feire quarta-feire quinta-feire sexta-feira såbado"), String::from("Domingo Lunes martes Miercoles Jueves Viernes Sabado"), String::from("Duminicª Luni Mart'i Miercuri Joi Vineri Sâmbªtª"), String::from("voskresenie ponedelnik vtornik sreda chetverg pyatnitsa subbota"), String::from("Sunday Di-luain Di-màirt Di-ciadain Di-ardaoin Di-haoine Di-sathurne"), String::from("nedjelja ponedjeljak utorak sreda cxetvrtak petak subota"), String::from("Sontaha Mmantaha Labobedi Laboraro Labone Labohlano Moqebelo"), String::from("Iridha- Sandhudha- Anga.haruwa-dha- Badha-dha- Brahaspa.thindha- Sikura-dha- Sena.sura-dha-"), String::from("nedel^a pondelok utorok streda s^tvrtok piatok sobota"), String::from("Nedelja Ponedeljek Torek Sreda Cxetrtek Petek Sobota"), String::from("domingo lunes martes miércoles jueves viernes sábado"), String::from("sonde mundey tude-wroko dride-wroko fode-wroko freyda Saturday"), String::from("Jumapili Jumatatu Jumanne Jumatano Alhamisi Ijumaa Jumamosi"), String::from("söndag måndag tisdag onsdag torsdag fredag lordag"), String::from("Linggo Lunes Martes Miyerkoles Huwebes Biyernes Sabado"), String::from("Lé-pài-jít Pài-it Pài-jï Pài-sañ Pài-sì Pài-gÖ. Pài-lák"), String::from("wan-ar-tit wan-tjan wan-ang-kaan wan-phoet wan-pha-ru-hat-sa-boh-die wan-sook wan-sao"), String::from("Tshipi Mosupologo Labobedi Laboraro Labone Labotlhano Matlhatso"), String::from("Pazar Pazartesi Sali Çar,samba Per,sembe Cuma Cumartesi"), String::from("nedilya ponedilok vivtorok sereda chetver pyatnytsya subota"), String::from("Chu?_Nhâ.t Thú*_Hai Thú*_Ba Thú*_Tu* Thú*_Na'm Thú*_Sáu Thú*_Ba?y"), String::from("dydd_Sul dyds_Llun dydd_Mawrth dyds_Mercher dydd_Iau dydd_Gwener dyds_Sadwrn"), String::from("Dibeer Altine Talaata Allarba Al_xebes Aljuma Gaaw"), String::from("iCawa uMvulo uLwesibini uLwesithathu uLuwesine uLwesihlanu uMgqibelo"), String::from("zuntik montik dinstik mitvokh donershtik fraytik shabes"), String::from("iSonto uMsombuluko uLwesibili uLwesithathu uLwesine uLwesihlanu uMgqibelo"), String::from("Dies_Dominica Dies_Lunæ Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Saturni"), String::from("Bazar_gÜnÜ Bazar_ærtæsi Çærs,ænbæ_axs,amò Çærs,ænbæ_gÜnÜ CÜmæ_axs,amò CÜmæ_gÜnÜ CÜmæ_Senbæ"), String::from("Sun Moon Mars Mercury Jove Venus Saturn"), String::from("zondag maandag dinsdag woensdag donderdag vrijdag zaterdag"), String::from("KoseEraa GyoOraa BenEraa Kuoraa YOwaaraa FeEraa Memenaa"), String::from("Sonntag Montag Dienstag Mittwoch Donnerstag Freitag Sonnabend"), String::from("Domingo Luns Terza_feira Corta_feira Xoves Venres Sábado"), String::from("Dies_Solis Dies_Lunae Dies_Martis Dies_Mercurii Dies_Iovis Dies_Veneris Dies_Sabbatum"), String::from("xing-_qi-_tiàn xing-_qi-_yi-. xing-_qi-_èr xing-_qi-_san-. xing-_qi-_sì xing-_qi-_wuv. xing-_qi-_liù"), String::from("djadomingu djaluna djamars djarason djaweps djabièrnè djasabra"), String::from("Killachau Atichau Quoyllurchau Illapachau Chaskachau Kuychichau Intichau")];
    let mut i: i64 = 0;
    while (i < (lines.len() as i64)) {
        let mut words: Vec<String> = fields(lines[i as usize].clone());
        let l: i64 = abbrevLen(words.clone());
        println!("{}", format!("{}{}", format!("{}{}", pad2(l), "  "), lines[i as usize].clone()));
        i = (i + 1);
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _end_mem;
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
