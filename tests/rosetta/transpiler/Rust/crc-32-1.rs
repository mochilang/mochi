// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn xor(mut a: i64, mut b: i64) -> i64 {
    let mut res: i64 = 0;
    let mut bit: i64 = 1;
    let mut x: i64 = a;
    let mut y: i64 = b;
    while ((x > 0) || (y > 0)) {
        let mut abit: i64 = (x % 2);
        let mut bbit: i64 = (y % 2);
        if (abit != bbit) {
            res = (res + bit);
        }
        x = (x / 2);
        y = (y / 2);
        bit = (bit * 2);
    }
    return res
};
    fn rshift(mut x: i64, mut n: i64) -> i64 {
    let mut v: i64 = x;
    let mut i: i64 = 0;
    while (i < n) {
        v = (v / 2);
        i = (i + 1);
    }
    return v
};
    fn ord(mut ch: String) -> i64 {
    let mut upper: String = String::from("ABCDEFGHIJKLMNOPQRSTUVWXYZ").clone();
    let mut lower: String = String::from("abcdefghijklmnopqrstuvwxyz").clone();
    let mut idx = { let s = upper.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (65 + idx)
    }
    idx = { let s = lower.clone(); let p = ch.clone(); match s.find(&p) { Some(v) => v as i64, None => -1 } };
    if (idx >= 0) {
        return (97 + idx)
    }
    if (ch.as_str() == " ") {
        return 32
    }
    return 0
};
    fn toHex(mut n: i64) -> String {
    let mut digits: String = String::from("0123456789ABCDEF").clone();
    if (n == 0) {
        return String::from("0")
    }
    let mut v: i64 = n;
    let mut out: String = String::from("").clone();
    while (v > 0) {
        let mut d: i64 = (v % 16);
        out = format!("{}{}", digits.chars().skip(d as usize).take(((d + 1) - d) as usize).collect::<String>(), out);
        v = (v / 16);
    }
    return out.clone()
};
    fn crc32Table() -> Vec<i64> {
    let mut table: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < 256) {
        let mut word: i64 = i;
        let mut j: i64 = 0;
        while (j < 8) {
            if ((word % 2) == 1) {
                word = xor(rshift(word, 1), 3988292384);
            } else {
                word = rshift(word, 1);
            }
            j = (j + 1);
        }
        table = { let mut _v = table.clone(); _v.push(word); _v };
        i = (i + 1);
    }
    return table
};
    let mut table: Vec<i64> = crc32Table();
    let crc32 = move |s: &str| -> i64 {
    let mut crc: i64 = 4294967295;
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut c: i64 = ord(s[i as usize..(i + 1) as usize].to_string());
        let mut idx: i64 = xor((crc % 256), c);
        crc = xor(table[idx as usize], rshift(crc, 8));
        i = (i + 1);
    }
    return (4294967295 - crc)
};
    let mochi_main = move || {
    let mut s: String = String::from("The quick brown fox jumps over the lazy dog").clone();
    let mut result: i64 = crc32(&s);
    let mut hex: String = toHex(result).clone();
    println!("{}", hex);
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
