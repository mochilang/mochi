// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:37 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_n: Vec<i64> = Vec::new();
static mut g_a: Vec<i64> = Vec::new();
fn main() {
    unsafe {
        g_n = vec![3, 5, 7];
        g_a = vec![2, 3, 2];
                let _start: i64 = _now();
        unsafe fn egcd(mut a: i64, mut b: i64) -> Vec<i64> {
    if (a == 0) {
        return vec![b, 0, 1]
    }
    let mut res: Vec<i64> = egcd((b % a), a);
    let mut g: i64 = res[0 as usize];
    let mut x1: i64 = res[1 as usize];
    let mut y1: i64 = res[2 as usize];
    return vec![g, (y1 - ((b / a) * x1)), x1]
};
        unsafe fn modInv(mut a: i64, mut m: i64) -> i64 {
    let mut r: Vec<i64> = egcd(a, m);
    if (r[0 as usize] != 1) {
        return 0
    }
    let mut x: i64 = r[1 as usize];
    if (x < 0) {
        return (x + m)
    }
    return x
};
        unsafe fn crt(mut a: Vec<i64>, mut n: Vec<i64>) -> i64 {
    let mut prod: i64 = 1;
    let mut i: i64 = 0;
    while (i < (n.len() as i64)) {
        prod = (prod * n[i as usize]);
        i = (i + 1);
    }
    let mut x: i64 = 0;
    i = 0;
    while (i < (n.len() as i64)) {
        let mut ni: i64 = n[i as usize];
        let mut ai: i64 = a[i as usize];
        let mut p: i64 = (prod / ni);
        let mut inv: i64 = modInv((p % ni), ni);
        x = (x + ((ai * inv) * p));
        i = (i + 1);
    }
    return (x % prod)
};
        let mut res: i64 = crt(g_a.clone().clone(), g_n.clone().clone());
        println!("{}", format!("{}{}", res.to_string(), " <nil>"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
