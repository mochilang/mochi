// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_rows: Vec<Vec<String>> = Vec::new();
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_rows = vec![vec![String::from("A"), String::from("B"), String::from("C")], vec![String::from("1"), String::from("2"), String::from("3")], vec![String::from("4"), String::from("5"), String::from("6")], vec![String::from("7"), String::from("8"), String::from("9")]];
        g_i = 1;
                let _start: i64 = _now();
        unsafe fn join(mut xs: Vec<String>, sep: &str) -> String {
    let mut res: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        if (i > 0) {
            res = format!("{}{}", res, sep);
        }
        res = format!("{}{}", res, xs[i as usize].clone());
        i = (i + 1);
    }
    return res.clone()
};
        unsafe fn parseIntStr(str: &str) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let mut digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits.get(str[i as usize..(i + 1) as usize].to_string().as_str()).cloned().unwrap_or_default());
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
        g_rows[0 as usize] = { let mut _v = g_rows.clone()[0 as usize].clone().clone(); _v.push("SUM".to_string()); _v };
        while (g_i < (g_rows.clone().len() as i64)) {
            let mut sum: i64 = 0;
            for s in g_rows.clone()[g_i as usize].clone().iter().cloned() {
                sum = (sum + { let s = s; i64::from_str_radix(&s, 10 as u32).unwrap_or(0) });
            }
            g_rows[g_i as usize] = { let mut _v = g_rows.clone()[g_i as usize].clone().clone(); _v.push(sum.to_string().to_string()); _v };
            g_i = (g_i + 1);
        }
        for r in g_rows.clone().iter() {
            println!("{}", join(r.clone(), &","));
        }
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
