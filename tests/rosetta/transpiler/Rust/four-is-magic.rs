// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_small: Vec<String> = Vec::new();
static mut g_tens: Vec<String> = Vec::new();
static mut g_illions: Vec<String> = Vec::new();
fn main() {
    unsafe {
        g_small = vec![String::from("zero"), String::from("one"), String::from("two"), String::from("three"), String::from("four"), String::from("five"), String::from("six"), String::from("seven"), String::from("eight"), String::from("nine"), String::from("ten"), String::from("eleven"), String::from("twelve"), String::from("thirteen"), String::from("fourteen"), String::from("fifteen"), String::from("sixteen"), String::from("seventeen"), String::from("eighteen"), String::from("nineteen")];
        g_tens = vec![String::from(""), String::from(""), String::from("twenty"), String::from("thirty"), String::from("forty"), String::from("fifty"), String::from("sixty"), String::from("seventy"), String::from("eighty"), String::from("ninety")];
        g_illions = vec![String::from(""), String::from(" thousand"), String::from(" million"), String::from(" billion"), String::from(" trillion"), String::from(" quadrillion"), String::from(" quintillion")];
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn capitalize(s: &str) -> String {
    if ((s.len() as i64) == 0) {
        return s.to_string()
    }
    return format!("{}{}", ({ let tmp = &s; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() }.to_uppercase()), { let tmp = &s; tmp.chars().skip(1 as usize).take(((s.len() as i64) - 1) as usize).collect::<String>() }).clone()
};
        static mut g_small: Vec<String> = Vec::new();;
        static mut g_tens: Vec<String> = Vec::new();;
        static mut g_illions: Vec<String> = Vec::new();;
        unsafe fn say(mut n: i64) -> String {
    let mut t = String::from("");
    if (n < 0) {
        t = String::from("negative ");
        n = -n;
    }
    if (n < 20) {
        return format!("{}{}", t, g_small.clone()[n as usize].clone())
    } else if (n < 100) {
        t = g_tens.clone()[(n / 10) as usize].clone();
        let mut s: i64 = (n % 10);
        if (s > 0) {
            t = format!("{}{}", format!("{}{}", t, "-"), g_small.clone()[s as usize].clone());
        }
        return t
    } else if (n < 1000) {
        t = format!("{}{}", g_small.clone()[(n / 100) as usize].clone(), " hundred");
        let mut s: i64 = (n % 100);
        if (s > 0) {
            t = format!("{}{}", format!("{}{}", t, " "), say(s));
        }
        return t
    }
    let mut sx = String::from("");
    let mut i: i64 = 0;
    let mut nn: i64 = n;
    while (nn > 0) {
        let mut p: i64 = (nn % 1000);
        nn = (nn / 1000);
        if (p > 0) {
            let mut ix: String = format!("{}{}", say(p), g_illions.clone()[i as usize].clone()).clone();
            if (sx.as_str() != "") {
                ix = format!("{}{}", format!("{}{}", ix, " "), sx);
            }
            sx = ix.clone();
        }
        i = (i + 1);
    }
    return format!("{}{}", t, sx).clone()
};
        unsafe fn fourIsMagic(mut n: i64) -> String {
    let mut s: String = say(n).clone();
    s = capitalize(&s);
    let mut t: String = s.clone();
    while (n != 4) {
        n = (s.len() as i64);
        s = say(n);
        t = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", t, " is "), s), ", "), s);
    }
    t = format!("{}{}", t, " is magic.");
    return t.clone()
};
        unsafe fn mochi_main() {
    let mut nums: Vec<i64> = vec![0, 4, 6, 11, 13, 75, 100, 337, -164, 9223372036854775807];
    for n in nums.clone() {
        println!("{}", fourIsMagic(n));
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
