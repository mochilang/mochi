// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn mochi_main() {
    let mut row: i64 = 3;
    let mut col: i64 = 4;
    let mut a: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < row) {
        let mut rowArr: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < col) {
            rowArr = { let mut _v = rowArr.clone(); _v.push(0); _v };
            j = (j + 1);
        }
        a = { let mut _v = a.clone(); _v.push(rowArr.clone()); _v };
        i = (i + 1);
    }
    println!("{}", format!("{}{}", "a[0][0] = ", a[0 as usize].clone()[0 as usize].to_string()));
    a[(row - 1) as usize][(col - 1) as usize] = 7;
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "a[", (row - 1).to_string()), "]["), (col - 1).to_string()), "] = "), a[(row - 1) as usize].clone()[(col - 1) as usize].to_string()));
    a = Default::default();
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
