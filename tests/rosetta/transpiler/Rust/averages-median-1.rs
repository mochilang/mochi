// Generated by Mochi transpiler v0.10.55 on 2025-08-03 00:13 +0700
fn sortFloat(mut xs: Vec<f64>) -> Vec<f64> {
    let mut arr: Vec<f64> = xs;
    let mut n = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize] > arr[(j + 1) as usize]) {
                let mut tmp: f64 = arr[j as usize];
                arr[j as usize] = arr[(j + 1) as usize];
                arr[(j + 1) as usize] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
}

fn median(mut a: Vec<f64>) -> f64 {
    let mut arr: Vec<f64> = sortFloat(a.clone());
    let mut half: i64 = (((arr.len() as i64) / 2) as i64);
    let mut m: f64 = arr[half as usize];
    if (((arr.len() as i64) % 2) == 0) {
        m = ((m + arr[(half - 1) as usize]) / 2.0);
    }
    return m
}

fn main() {
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0]).to_string());
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0, 5.0]).to_string());
}
