// Generated by Mochi transpiler v0.10.41 on 2025-07-27 05:49 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn amb(mut wordsets: Vec<Vec<String>>, res: &mut Vec<String>, mut idx: i64) -> bool {
    if (idx == (wordsets.len() as i64)) {
        return true
    }
    let mut prev = String::from("");
    if (idx > 0) {
        prev = res[(idx - 1) as usize].clone();
    }
    let mut i: i64 = 0;
    while (i < (wordsets[idx as usize].clone().len() as i64)) {
        let w: String = wordsets[idx as usize].clone()[i as usize].clone().clone();
        if ((idx == 0) || ({ let tmp = &prev; tmp.chars().skip(((prev.len() as i64) - 1) as usize).take(((prev.len() as i64) - ((prev.len() as i64) - 1)) as usize).collect::<String>() }.as_str() == { let tmp = &w; tmp.chars().skip(0 as usize).take((1 - 0) as usize).collect::<String>() })) {
            res[idx as usize] = w;
            if amb(wordsets.clone(), res, (idx + 1)) {
                return true
            }
        }
        i = (i + 1);
    }
    return false
};
    fn mochi_main() {
    let mut wordset: Vec<Vec<String>> = vec![vec![String::from("the"), String::from("that"), String::from("a")], vec![String::from("frog"), String::from("elephant"), String::from("thing")], vec![String::from("walked"), String::from("treaded"), String::from("grows")], vec![String::from("slowly"), String::from("quickly")]];
    let mut res: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < (wordset.len() as i64)) {
        res = { let mut v = res.clone(); v.push(String::from("")); v };
        i = (i + 1);
    }
    if amb(wordset.clone(), &mut res, 0) {
        let mut out: String = format!("{}{}", "[", res[0 as usize].clone()).clone();
        let mut j: i64 = 1;
        while (j < (res.len() as i64)) {
            out = format!("{}{}", format!("{}{}", out, " "), res[j as usize].clone());
            j = (j + 1);
        }
        out = format!("{}{}", out, "]");
        println!("{}", out);
    } else {
        println!("{}", "No amb found");
    }
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
