// Generated by Mochi transpiler v0.10.52 on 2025-08-01 23:58 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    name: String,
    weight: i64,
    coverage: f64,
    children: Vec<i64>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"weight\": {}", self.weight)?;
        write!(f, ", ")?;
        write!(f, "\"coverage\": {}", self.coverage)?;
        write!(f, ", ")?;
        write!(f, "\"children\": {:?}", self.children)?;
        write!(f, "}}")
    }
}

static mut g_house1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_house2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_bathrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_attic: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_upstairs: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_groundfloor: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_bathroom1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_bathroom2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_outside: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h1_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_bathroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_toilet: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_attics: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_wet_room: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_hot_tub: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_cellars: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_wine_cellar: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_cinema: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_suite1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_suite2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_bedroom3: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_bedroom4: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
static mut g_h2_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };
fn main() {
    unsafe {
        g_house1 = newNode(&"house1", 40, 0.0);
        g_house2 = newNode(&"house2", 60, 0.0);
        g_h1_bedrooms = newNode(&"bedrooms", 1, 0.25);
        g_h1_bathrooms = newNode(&"bathrooms", 1, 0.0);
        g_h1_attic = newNode(&"attic", 1, 0.75);
        g_h1_kitchen = newNode(&"kitchen", 1, 0.1);
        g_h1_living_rooms = newNode(&"living_rooms", 1, 0.0);
        g_h1_basement = newNode(&"basement", 1, 0.0);
        g_h1_garage = newNode(&"garage", 1, 0.0);
        g_h1_garden = newNode(&"garden", 1, 0.8);
        g_h2_upstairs = newNode(&"upstairs", 1, 0.0);
        g_h2_groundfloor = newNode(&"groundfloor", 1, 0.0);
        g_h2_basement = newNode(&"basement", 1, 0.0);
        g_h1_bathroom1 = newNode(&"bathroom1", 1, 0.5);
        g_h1_bathroom2 = newNode(&"bathroom2", 1, 0.0);
        g_h1_outside = newNode(&"outside_lavatory", 1, 1.0);
        g_h1_lounge = newNode(&"lounge", 1, 0.0);
        g_h1_dining = newNode(&"dining_room", 1, 0.0);
        g_h1_conservatory = newNode(&"conservatory", 1, 0.0);
        g_h1_playroom = newNode(&"playroom", 1, 1.0);
        g_h2_bedrooms = newNode(&"bedrooms", 1, 0.0);
        g_h2_bathroom = newNode(&"bathroom", 1, 0.0);
        g_h2_toilet = newNode(&"toilet", 1, 0.0);
        g_h2_attics = newNode(&"attics", 1, 0.6);
        g_h2_kitchen = newNode(&"kitchen", 1, 0.0);
        g_h2_living_rooms = newNode(&"living_rooms", 1, 0.0);
        g_h2_wet_room = newNode(&"wet_room_&_toilet", 1, 0.0);
        g_h2_garage = newNode(&"garage", 1, 0.0);
        g_h2_garden = newNode(&"garden", 1, 0.9);
        g_h2_hot_tub = newNode(&"hot_tub_suite", 1, 1.0);
        g_h2_cellars = newNode(&"cellars", 1, 1.0);
        g_h2_wine_cellar = newNode(&"wine_cellar", 1, 1.0);
        g_h2_cinema = newNode(&"cinema", 1, 0.75);
        g_h2_suite1 = newNode(&"suite_1", 1, 0.0);
        g_h2_suite2 = newNode(&"suite_2", 1, 0.0);
        g_h2_bedroom3 = newNode(&"bedroom_3", 1, 0.0);
        g_h2_bedroom4 = newNode(&"bedroom_4", 1, 0.0);
        g_h2_lounge = newNode(&"lounge", 1, 0.0);
        g_h2_dining = newNode(&"dining_room", 1, 0.0);
        g_h2_conservatory = newNode(&"conservatory", 1, 0.0);
        g_h2_playroom = newNode(&"playroom", 1, 0.0);
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn pow10(mut n: i64) -> f64 {
    let mut r: f64 = 1.0;
    let mut i: i64 = 0;
    while (i < n) {
        r = (r * 10.0);
        i = (i + 1);
    }
    return r
};
        unsafe fn formatFloat(mut f: f64, mut prec: i64) -> String {
    let mut scale: f64 = pow10(prec);
    let mut scaled: f64 = ((f * scale) + 0.5);
    let mut n: i64 = (scaled as i64);
    let mut digits = n.to_string();
    while ((digits.len() as i64) <= prec) {
        digits = format!("{}{}", "0", digits);
    }
    let mut intPart: String = { let tmp = &digits; tmp.chars().skip(0 as usize).take((((digits.len() as i64) - prec) - 0) as usize).collect::<String>() }.clone();
    let mut fracPart: String = { let tmp = &digits; tmp.chars().skip(((digits.len() as i64) - prec) as usize).take(((digits.len() as i64) - ((digits.len() as i64) - prec)) as usize).collect::<String>() }.clone();
    return format!("{}{}", format!("{}{}", intPart, "."), fracPart).clone()
};
        unsafe fn padLeft(s: &str, mut w: i64) -> String {
    let mut res: String = String::from("").clone();
    let mut n: i64 = (w - (s.len() as i64));
    while (n > 0) {
        res = format!("{}{}", res, " ");
        n = (n - 1);
    }
    return format!("{}{}", res, s).clone()
};
        unsafe fn repeat(ch: &str, mut n: i64) -> String {
    let mut s: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < n) {
        s = format!("{}{}", s, ch);
        i = (i + 1);
    }
    return s.clone()
};
        unsafe fn toFloat(mut i: i64) -> f64 {
    return (i as f64)
};
        unsafe fn newNode(name: &str, mut weight: i64, mut coverage: f64) -> Map {
    return Map {name: name.to_string(), weight: weight, coverage: coverage, children: vec![]}
};
        unsafe fn addChildren(n: &mut HashMap<String, String>, mut nodes: Vec<HashMap<String, String>>) {
    let mut cs: String = n["children"].clone().clone();
    for node in &nodes {
        cs = { let mut _v = cs.clone(); _v.push(node); _v };
    }
    n.insert(String::from("children"), cs);
};
        unsafe fn setCoverage(n: &mut HashMap<String, String>, mut value: f64) {
    n.insert(String::from("coverage"), value);
};
        unsafe fn computeCoverage(n: &HashMap<String, String>) -> f64 {
    let mut cs: String = n["children"].clone().clone();
    if ((cs.len() as i64) == 0) {
        return (n["coverage"].clone() as f64)
    }
    let mut v1: f64 = 0.0;
    let mut v2: i64 = 0;
    for node in cs {
        let mut m: i64 = node;
        let mut c: f64 = computeCoverage(&m);
        v1 = (v1 + (toFloat(m["weight" as usize]) * c));
        v2 = (v2 + m["weight" as usize]);
    }
    return (v1 / toFloat(v2))
};
        unsafe fn spaces(mut n: i64) -> String {
    return repeat(&" ", n).clone()
};
        unsafe fn show(n: &mut HashMap<String, String>, mut level: i64) {
    let mut indent: i64 = (level * 4);
    let mut name: String = n["name"].clone().clone().clone();
    let mut nl = ((name.len() as i64) + indent);
    let mut line: String = format!("{}{}", spaces(indent), name).clone();
    line = format!("{}{}", format!("{}{}", line, spaces((32 - nl))), "|  ");
    line = format!("{}{}", format!("{}{}", line, padLeft(&{ let n: i64 = n["weight"].clone().parse().unwrap(); n }.to_string(), 3)), "   | ");
    line = format!("{}{}", format!("{}{}", line, formatFloat(computeCoverage(n), 6)), " |");
    println!("{}", line);
    let mut cs: String = n["children"].clone().clone();
    for child in cs {
        show(&mut child, (level + 1));
    }
};
        static mut g_house1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_house2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_bathrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_attic: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_upstairs: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_groundfloor: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_basement: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_bathroom1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_bathroom2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_outside: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h1_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_bedrooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_bathroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_toilet: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_attics: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_kitchen: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_living_rooms: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_wet_room: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_garage: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_garden: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_hot_tub: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_cellars: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_wine_cellar: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_cinema: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_suite1: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_suite2: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_bedroom3: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_bedroom4: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_lounge: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_dining: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_conservatory: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        static mut g_h2_playroom: Map = Map { name: String::new(), weight: 0, coverage: 0.0, children: Vec::new() };;
        unsafe fn mochi_main() {
    let mut cleaning: Map = newNode(&"cleaning", 1, 0.0);
    addChildren(&mut g_h1_bathrooms, vec![g_h1_bathroom1.clone(), g_h1_bathroom2.clone(), g_h1_outside.clone()]);
    addChildren(&mut g_h1_living_rooms, vec![g_h1_lounge.clone(), g_h1_dining.clone(), g_h1_conservatory.clone(), g_h1_playroom.clone()]);
    addChildren(&mut g_house1, vec![g_h1_bedrooms.clone(), g_h1_bathrooms.clone(), g_h1_attic.clone(), g_h1_kitchen.clone(), g_h1_living_rooms.clone(), g_h1_basement.clone(), g_h1_garage.clone(), g_h1_garden.clone()]);
    addChildren(&mut g_h2_bedrooms, vec![g_h2_suite1.clone(), g_h2_suite2.clone(), g_h2_bedroom3.clone(), g_h2_bedroom4.clone()]);
    addChildren(&mut g_h2_upstairs, vec![g_h2_bedrooms.clone(), g_h2_bathroom.clone(), g_h2_toilet.clone(), g_h2_attics.clone()]);
    addChildren(&mut g_h2_living_rooms, vec![g_h2_lounge.clone(), g_h2_dining.clone(), g_h2_conservatory.clone(), g_h2_playroom.clone()]);
    addChildren(&mut g_h2_groundfloor, vec![g_h2_kitchen.clone(), g_h2_living_rooms.clone(), g_h2_wet_room.clone(), g_h2_garage.clone(), g_h2_garden.clone(), g_h2_hot_tub.clone()]);
    addChildren(&mut g_h2_basement, vec![g_h2_cellars.clone(), g_h2_wine_cellar.clone(), g_h2_cinema.clone()]);
    addChildren(&mut g_house2, vec![g_h2_upstairs.clone(), g_h2_groundfloor.clone(), g_h2_basement.clone()]);
    addChildren(&mut cleaning, vec![g_house1.clone(), g_house2.clone()]);
    let mut topCoverage: f64 = computeCoverage(&cleaning);
    println!("{}", format!("{}{}", "TOP COVERAGE = ", formatFloat(topCoverage, 6)));
    println!("{}", "");
    println!("{}", "NAME HIERARCHY                 | WEIGHT | COVERAGE |");
    show(&mut cleaning, 0);
    setCoverage(&mut g_h2_cinema, 1.0);
    let mut diff: f64 = (computeCoverage(&cleaning) - topCoverage);
    println!("{}", "");
    println!("{}", "If the coverage of the Cinema node were increased from 0.75 to 1");
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "the top level coverage would increase by ", formatFloat(diff, 6)), " to "), formatFloat((topCoverage + diff), 6)));
    setCoverage(&mut g_h2_cinema, 0.75);
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
