// Generated by Mochi transpiler v0.10.41 on 2025-07-27 00:50 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct Map {
    pool: Vec<i64>,
    val: i64,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"pool\": {:?}", self.pool)?;
        write!(f, ", ")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, "}}")
    }
}

fn poolPut(mut p: Vec<i64>, mut x: i64) -> Vec<i64> {
    return { let mut v = p.clone(); v.push(x); v }
}

fn poolGet(mut p: Vec<i64>) -> HashMap<&str, Vec<i64>> {
    if ((p.len() as i64) == 0) {
        println!("{}", "pool empty");
        return Map {pool: p, val: 0}
    }
    let idx = ((p.len() as i64) - 1);
    let v: i64 = p[idx as usize];
    p = p[0 as usize..idx as usize].to_vec();
    return HashMap::from([(String::from("pool"), p), (String::from("val"), v)])
}

fn clearPool(mut p: Vec<i64>) -> Vec<i64> {
    return vec![]
}

fn mochi_main() {
    let mut pool: Vec<i64> = vec![];
    let mut i: i64 = 1;
    let mut j: i64 = 2;
    println!("{}", (i + j).to_string());
    pool = poolPut(pool.clone(), i);
    pool = poolPut(pool.clone(), j);
    i = 0;
    j = 0;
    let mut res1: HashMap<&str, Vec<i64>> = poolGet(pool.clone());
    pool = res1["pool".as_str()].clone();
    i = res1["val".as_str()].clone();
    let mut res2: HashMap<&str, Vec<i64>> = poolGet(pool.clone());
    pool = res2["pool".as_str()].clone();
    j = res2["val".as_str()].clone();
    i = 4;
    j = 5;
    println!("{}", (i + j).to_string());
    pool = poolPut(pool.clone(), i);
    pool = poolPut(pool.clone(), j);
    i = 0;
    j = 0;
    pool = clearPool(pool.clone());
    let mut res3: HashMap<&str, Vec<i64>> = poolGet(pool.clone());
    pool = res3["pool".as_str()].clone();
    i = res3["val".as_str()].clone();
    let mut res4: HashMap<&str, Vec<i64>> = poolGet(pool.clone());
    pool = res4["pool".as_str()].clone();
    j = res4["val".as_str()].clone();
    i = 7;
    j = 8;
    println!("{}", (i + j).to_string());
}

fn main() {
    mochi_main();
}
