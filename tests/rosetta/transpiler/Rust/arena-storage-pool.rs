// Generated by Mochi transpiler v0.10.41 on 2025-07-27 06:30 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    pool: Vec<i64>,
    val: i64,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"pool\": {:?}", self.pool)?;
        write!(f, ", ")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn poolPut(mut p: Vec<i64>, mut x: i64) -> Vec<i64> {
    return { let mut v = p.clone(); v.push(x); v }
};
    fn poolGet(mut p: Vec<i64>) -> Map {
    if ((p.len() as i64) == 0) {
        println!("{}", "pool empty");
        return Map {pool: p, val: 0}
    }
    let idx = ((p.len() as i64) - 1);
    let v: i64 = p[idx as usize];
    p = p[0 as usize..idx as usize].to_vec();
    return Map {pool: p, val: v}
};
    fn clearPool(mut p: Vec<i64>) -> Vec<i64> {
    return vec![]
};
    fn mochi_main() {
    let mut pool: Vec<i64> = vec![];
    let mut i: i64 = 1;
    let mut j: i64 = 2;
    println!("{}", (i + j).to_string());
    pool = poolPut(pool.clone(), i);
    pool = poolPut(pool.clone(), j);
    i = 0;
    j = 0;
    let res1: Map = poolGet(pool.clone());
    pool = (res1.pool as i64);
    i = res1.val;
    let res2: Map = poolGet(pool.clone());
    pool = (res2.pool as i64);
    j = res2.val;
    i = 4;
    j = 5;
    println!("{}", (i + j).to_string());
    pool = poolPut(pool.clone(), i);
    pool = poolPut(pool.clone(), j);
    i = 0;
    j = 0;
    pool = clearPool(pool.clone());
    let res3: Map = poolGet(pool.clone());
    pool = (res3.pool as i64);
    i = res3.val;
    let res4: Map = poolGet(pool.clone());
    pool = (res4.pool as i64);
    j = res4.val;
    i = 7;
    j = 8;
    println!("{}", (i + j).to_string());
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
