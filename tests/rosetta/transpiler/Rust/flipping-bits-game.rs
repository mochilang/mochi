// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Ret {
    f0: Vec<Vec<i64>>,
    f1: i64,
}
impl std::fmt::Display for Ret {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"f0\": {:?}", self.f0)?;
        write!(f, ", ")?;
        write!(f, "\"f1\": {}", self.f1)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn randInt(mut seed: i64, mut n: i64) -> Vec<i64> {
    let mut next: i64 = (((seed * 1664525) + 1013904223) % 2147483647);
    return vec![next, (next % n)]
};
    fn newBoard(mut n: i64, mut seed: i64) -> Ret {
    let mut board: Vec<Vec<i64>> = vec![];
    let mut s: i64 = seed;
    let mut i: i64 = 0;
    while (i < n) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            let mut r: Vec<i64> = randInt(s, 2);
            s = r[0 as usize];
            row = { let mut _v = row.clone(); _v.push(r[1 as usize]); _v };
            j = (j + 1);
        }
        board = { let mut _v = board.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return Ret {f0: board, f1: s}
};
    fn copyBoard(mut b: Vec<Vec<i64>>) -> Vec<Vec<i64>> {
    let mut nb: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        let mut row: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < (b[i as usize].clone().len() as i64)) {
            row = { let mut _v = row.clone(); _v.push(b[i as usize].clone()[j as usize]); _v };
            j = (j + 1);
        }
        nb = { let mut _v = nb.clone(); _v.push(row.clone()); _v };
        i = (i + 1);
    }
    return nb
};
    fn flipRow(mut b: Vec<Vec<i64>>, mut r: i64) -> Vec<Vec<i64>> {
    let mut j: i64 = 0;
    while (j < (b[r as usize].clone().len() as i64)) {
        b[r as usize][j as usize] = (1 - b[r as usize].clone()[j as usize]);
        j = (j + 1);
    }
    return b
};
    fn flipCol(mut b: Vec<Vec<i64>>, mut c: i64) -> Vec<Vec<i64>> {
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        b[i as usize][c as usize] = (1 - b[i as usize].clone()[c as usize]);
        i = (i + 1);
    }
    return b
};
    fn boardsEqual(mut a: Vec<Vec<i64>>, mut b: Vec<Vec<i64>>) -> bool {
    let mut i: i64 = 0;
    while (i < (a.len() as i64)) {
        let mut j: i64 = 0;
        while (j < (a[i as usize].clone().len() as i64)) {
            if (a[i as usize].clone()[j as usize] != b[i as usize].clone()[j as usize]) {
                return false
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return true
};
    fn shuffleBoard(mut b: Vec<Vec<i64>>, mut seed: i64) -> Ret {
    let mut s: i64 = seed;
    let mut n = (b.len() as i64);
    let mut k: i64 = 0;
    while (k < (2 * n)) {
        let mut r: Vec<i64> = randInt(s, n);
        s = r[0 as usize];
        let mut idx: i64 = r[1 as usize];
        if ((k % 2) == 0) {
            b = flipRow(b.clone(), idx);
        } else {
            b = flipCol(b.clone(), idx);
        }
        k = (k + 1);
    }
    return Ret {f0: b, f1: s}
};
    fn solve(mut board: Vec<Vec<i64>>, mut target: Vec<Vec<i64>>) -> HashMap<&str, Vec<i64>> {
    let mut n = (board.len() as i64);
    let mut row: Vec<i64> = vec![];
    let mut col: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut diff: i64 = if (board[i as usize].clone()[0 as usize] != target[i as usize].clone()[0 as usize]) { 1 } else { 0 };
        row = { let mut _v = row.clone(); _v.push(diff); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < n) {
        let mut diff: i64 = if (board[0 as usize].clone()[j as usize] != target[0 as usize].clone()[j as usize]) { 1 } else { 0 };
        let mut val: i64 = ((diff + row[0 as usize]) % 2);
        col = { let mut _v = col.clone(); _v.push(val); _v };
        j = (j + 1);
    }
    return HashMap::from([(String::from("row"), row), (String::from("col"), col)])
};
    fn applySolution(mut b: Vec<Vec<i64>>, sol: &HashMap<String, Vec<i64>>) -> Ret {
    let mut board: Vec<Vec<i64>> = b;
    let mut moves: i64 = 0;
    let mut i: i64 = 0;
    while (i < (sol["row".as_str()].clone().len() as i64)) {
        if (sol["row".as_str()].clone()[i as usize] == 1) {
            board = flipRow(board.clone(), i);
            moves = (moves + 1);
        }
        i = (i + 1);
    }
    let mut j: i64 = 0;
    while (j < (sol["col".as_str()].clone().len() as i64)) {
        if (sol["col".as_str()].clone()[j as usize] == 1) {
            board = flipCol(board.clone(), j);
            moves = (moves + 1);
        }
        j = (j + 1);
    }
    return Ret {f0: board, f1: moves}
};
    fn printBoard(mut b: Vec<Vec<i64>>) {
    let mut i: i64 = 0;
    while (i < (b.len() as i64)) {
        let mut line = String::from("");
        let mut j: i64 = 0;
        while (j < (b[i as usize].clone().len() as i64)) {
            line = format!("{}{}", line, b[i as usize].clone()[j as usize].to_string());
            if (j < ((b[i as usize].clone().len() as i64) - 1)) {
                line = format!("{}{}", line, " ");
            }
            j = (j + 1);
        }
        println!("{}", line);
        i = (i + 1);
    }
};
    fn mochi_main() {
    let mut n: i64 = 3;
    let mut seed: i64 = 1;
    let mut res: Ret = newBoard(n, seed);
    let mut target: i64 = res.f0.clone();
    seed = res.f1;
    let mut board: Vec<Vec<i64>> = copyBoard(target.clone());
    loop {
        let mut sres: Ret = shuffleBoard(copyBoard(board.clone()), seed);
        board = sres.f0.clone();
        seed = sres.f1;
        if !boardsEqual(board.clone(), target.clone()) {
            break
        }
    }
    println!("{}", "Target:");
    printBoard(target.clone());
    println!("{}", "Board:");
    printBoard(board.clone());
    let mut sol: HashMap<&str, Vec<i64>> = solve(board.clone(), target.clone());
    let mut ares: Ret = applySolution(board.clone(), &sol);
    board = ares.f0.clone();
    let mut moves: i64 = ares.f1;
    println!("{}", "Solved:");
    printBoard(board.clone());
    println!("{}", format!("{}{}", "Moves: ", moves.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
