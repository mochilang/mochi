// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn Node(value: &str, mut next: f64, mut prev: f64) -> HashMap<&str, &str> {
    return HashMap::from([(String::from("value"), value), (String::from("next"), next), (String::from("prev"), prev)])
};
    fn mochi_main() {
    let mut a: HashMap<&str, &str> = Node(&"A", Default::default(), Default::default());
    let mut b: HashMap<&str, &str> = Node(&"B", Default::default(), a);
    a.insert("next".clone(), b);
    let mut c: HashMap<&str, &str> = Node(&"C", Default::default(), b);
    b.insert("next".clone(), c);
    let mut p: HashMap<&str, &str> = a;
    let mut line = String::from("");
    while (p != Default::default()) {
        line = format!("{}{}", line, p["value".as_str()].clone().to_string());
        p = p["next".as_str()].clone();
        if (p != Default::default()) {
            line = format!("{}{}", line, " ");
        }
    }
    println!("{}", line);
    p = c.clone();
    line = String::from("");
    while (p != Default::default()) {
        line = format!("{}{}", line, p["value".as_str()].clone().to_string());
        p = p["prev".as_str()].clone();
        if (p != Default::default()) {
            line = format!("{}{}", line, " ");
        }
    }
    println!("{}", line);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
