// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct FWResult {
    dist: Vec<Vec<i64>>,
    next: Vec<Vec<i64>>,
}
impl std::fmt::Display for FWResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"dist\": {:?}", self.dist)?;
        write!(f, ", ")?;
        write!(f, "\"next\": {:?}", self.next)?;
        write!(f, "}}")
    }
}

static mut g_INF: i64 = 0;
static mut g_n: i64 = 0;
static mut g_g: Vec<Vec<i64>> = Vec::new();
static mut g_res: FWResult = FWResult { dist: Vec::new(), next: Vec::new() };
static mut g_i: i64 = 0;
fn main() {
    unsafe {
        g_INF = 1000000;
        g_n = 4;
        g_g = vec![];
        g_res = floydWarshall(g_g.clone().clone());
        g_i = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_INF: i64 = 0;;
        unsafe fn floydWarshall(mut graph: Vec<Vec<i64>>) -> FWResult {
    let mut n: i64 = (graph.len() as i64);
    let mut dist: Vec<Vec<i64>> = vec![];
    let mut next: Vec<Vec<i64>> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        let mut drow: Vec<i64> = vec![];
        let mut nrow: Vec<i64> = vec![];
        let mut j: i64 = 0;
        while (j < n) {
            drow = { let mut _v = drow.clone(); _v.push(graph[i as usize].clone()[j as usize]); _v };
            if ((graph[i as usize].clone()[j as usize] < g_INF) && (i != j)) {
                nrow = { let mut _v = nrow.clone(); _v.push(j); _v };
            } else {
                nrow = { let mut _v = nrow.clone(); _v.push(-1); _v };
            }
            j = (j + 1);
        }
        dist = { let mut _v = dist.clone(); _v.push(drow.clone()); _v };
        next = { let mut _v = next.clone(); _v.push(nrow.clone()); _v };
        i = (i + 1);
    }
    let mut k: i64 = 0;
    while (k < n) {
        let mut i: i64 = 0;
        while (i < n) {
            let mut j: i64 = 0;
            while (j < n) {
                if ((dist[i as usize].clone()[k as usize] < g_INF) && (dist[k as usize].clone()[j as usize] < g_INF)) {
                    let mut alt: i64 = (dist[i as usize].clone()[k as usize] + dist[k as usize].clone()[j as usize]);
                    if (alt < dist[i as usize].clone()[j as usize]) {
                        dist[i as usize][j as usize] = alt;
                        next[i as usize][j as usize] = next[i as usize].clone()[k as usize];
                    }
                }
                j = (j + 1);
            }
            i = (i + 1);
        }
        k = (k + 1);
    }
    return FWResult {dist: dist, next: next}
};
        unsafe fn path(mut u: i64, mut v: i64, mut next: Vec<Vec<i64>>) -> Vec<i64> {
    if (next[u as usize].clone()[v as usize] < 0) {
        return vec![]
    }
    let mut p: Vec<i64> = vec![u];
    let mut x: i64 = u;
    while (x != v) {
        x = next[x as usize].clone()[v as usize];
        p = { let mut _v = p.clone(); _v.push(x); _v };
    }
    return p
};
        unsafe fn pathStr(mut p: Vec<i64>) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < (p.len() as i64)) {
        s = format!("{}{}", s, (p[i as usize] + 1).to_string());
        if (i < ((p.len() as i64) - 1)) {
            s = format!("{}{}", s, " -> ");
        }
        i = (i + 1);
    }
    return s.clone()
};
        static mut g_n: i64 = 0;;
        static mut g_g: Vec<Vec<i64>> = Vec::new();;
        for i in 0..g_n {
            let mut row: Vec<i64> = vec![];
            for j in 0..g_n {
                if (g_i == j) {
                    row = { let mut _v = row.clone(); _v.push(0); _v };
                } else {
                    row = { let mut _v = row.clone(); _v.push(g_INF); _v };
                }
            }
            g_g = { let mut _v = g_g.clone().clone(); _v.push(row.clone()); _v };
        }
        g_g[0 as usize][2 as usize] = -2;
        g_g[2 as usize][3 as usize] = 2;
        g_g[3 as usize][1 as usize] = -1;
        g_g[1 as usize][0 as usize] = 4;
        g_g[1 as usize][2 as usize] = 3;
        static mut g_res: FWResult = FWResult { dist: Vec::new(), next: Vec::new() };;
        println!("{}", "pair\tdist\tpath");
        static mut g_i: i64 = 0;;
        while (g_i < g_n) {
            let mut j: i64 = 0;
            while (j < g_n) {
                if (g_i != j) {
                    let mut p: Vec<i64> = path(g_i, j, g_res.clone().next);
                    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", (g_i + 1).to_string(), " -> "), (j + 1).to_string()), "\t"), g_res.clone().dist[g_i as usize].clone()[j as usize].to_string()), "\t"), pathStr(p.clone())));
                }
                j = (j + 1);
            }
            g_i = (g_i + 1);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
