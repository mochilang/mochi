// Generated by Mochi transpiler v0.10.54 on 2025-08-02 11:55 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_limit: i64 = 0;
fn main() {
    unsafe {
        g_limit = 42;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn isPrime(mut n: i64) -> bool {
    if (n < 2) {
        return false
    }
    if ((n % 2) == 0) {
        return (n == 2)
    }
    if ((n % 3) == 0) {
        return (n == 3)
    }
    let mut d: i64 = 5;
    while ((d * d) <= n) {
        if ((n % d) == 0) {
            return false
        }
        d = (d + 2);
        if ((n % d) == 0) {
            return false
        }
        d = (d + 4);
    }
    return true
};
        unsafe fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut i = ((s.len() as i64) - 3);
    while (i >= 1) {
        s = format!("{}{}", format!("{}{}", s[0 as usize..i as usize].to_string(), ","), s[i as usize..(s.len() as i64) as usize].to_string());
        i = (i - 3);
    }
    return s.to_string().clone()
};
        unsafe fn padLeft(s: &str, mut w: i64) -> String {
    let mut out: String = s.to_string().clone();
    while ((out.len() as i64) < w) {
        out = format!("{}{}", " ", out);
    }
    return out.clone()
};
        unsafe fn padRight(s: &str, mut w: i64) -> String {
    let mut out: String = s.to_string().clone();
    while ((out.len() as i64) < w) {
        out = format!("{}{}", out, " ");
    }
    return out.clone()
};
        static mut g_limit: i64 = 0;;
        unsafe fn mochi_main() {
    let mut i: i64 = g_limit;
    let mut n: i64 = 0;
    while (n < g_limit) {
        if isPrime(i) {
            n = (n + 1);
            let mut nStr: String = padRight(&n.to_string(), 2).clone();
            let mut pStr: String = padLeft(&commatize(i), 19).clone();
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "n = ", nStr), "  "), pStr));
            i = ((i + i) - 1);
        }
        i = (i + 1);
    }
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
