// Generated by Mochi transpiler v0.10.52 on 2025-08-01 21:57 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct FileInfo {
    name: String,
    size: i64,
    kind: String,
}
impl std::fmt::Display for FileInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"size\": {}", self.size)?;
        write!(f, ", ")?;
        write!(f, "\"kind\": \"{}\"", self.kind)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct FTPConn {
    dir: String,
}
impl std::fmt::Display for FTPConn {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"dir\": \"{}\"", self.dir)?;
        write!(f, "}}")
    }
}

static g_serverData: LazyLock<Mutex<HashMap<String, HashMap<String, String>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("pub"), HashMap::from([(String::from("somefile.bin"), String::from("This is a file from the FTP server.")), (String::from("readme.txt"), String::from("Hello from ftp."))]))])));
static g_serverNames: LazyLock<Mutex<HashMap<String, Vec<String>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("pub"), vec![String::from("somefile.bin"), String::from("readme.txt")])])));
fn main() {
    unsafe {
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static g_serverData: LazyLock<Mutex<HashMap<String, HashMap<String, String>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("pub"), HashMap::from([(String::from("somefile.bin"), String::from("This is a file from the FTP server.")), (String::from("readme.txt"), String::from("Hello from ftp."))]))])));;
        static g_serverNames: LazyLock<Mutex<HashMap<String, Vec<String>>>> = LazyLock::new(|| Mutex::new(HashMap::from([(String::from("pub"), vec![String::from("somefile.bin"), String::from("readme.txt")])])));;
        unsafe fn connect(hostport: &str) -> FTPConn {
    println!("{}", format!("{}{}", "Connected to ", hostport));
    return FTPConn {dir: String::from("/")}
};
        unsafe fn login(conn: &FTPConn, user: &str, pass: &str) {
    println!("{}", format!("{}{}", "Logged in as ", user));
};
        unsafe fn changeDir(conn: &mut FTPConn, dir: &str) {
    conn.dir = dir.to_string();
};
        unsafe fn list(conn: &FTPConn) -> Vec<FileInfo> {
    let mut names: Vec<String> = g_serverNames.lock().unwrap()[conn.dir.as_str()].clone();
    let mut dataDir: HashMap<String, String> = g_serverData.lock().unwrap()[conn.dir.as_str()].clone();
    let mut out: Vec<FileInfo> = vec![];
    for name in names.clone() {
        let mut content: String = dataDir[name.as_str()].clone().clone();
        out = { let mut _v = out.clone(); _v.push(FileInfo {name: name.clone(), size: (content.len() as i64), kind: String::from("file")}); _v };
    }
    return out
};
        unsafe fn retrieve(conn: &FTPConn, name: &str) -> String {
    return g_serverData.lock().unwrap()[conn.dir.as_str()].clone()[name].clone().clone().clone()
};
        unsafe fn mochi_main() {
    let mut conn: FTPConn = connect(&"localhost:21");
    login(&conn, &"anonymous", &"anonymous");
    changeDir(&mut conn, &"pub");
    println!("{}", conn.dir);
    let mut files: Vec<FileInfo> = list(&conn);
    for f in &files {
        println!("{}", format!("{}{}", format!("{}{}", f.name, " "), f.size.to_string()));
    }
    let mut data: String = retrieve(&conn, &"somefile.bin").clone();
    println!("{}", format!("{}{}", format!("{}{}", "Wrote ", (data.len() as i64).to_string()), " bytes to somefile.bin"));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
