// Generated by Mochi transpiler v0.10.55 on 2025-08-02 20:52 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
static mut g_turns: f64 = 0.0;
static mut g_width: f64 = 0.0;
static mut g_a: f64 = 0.0;
static mut g_b: f64 = 0.0;
static mut g_theta: f64 = 0.0;
static mut g_count: i64 = 0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_turns = 2.0;
        g_width = 600.0;
        g_a = 1.0;
        g_b = 20.0;
        g_theta = 0.0;
        g_count = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_PI: f64 = 0.0;;
        unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 10) {
        let mut denom: f64 = (((2 * n) * ((2 * n) + 1)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn cosApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n <= 10) {
        let mut denom: f64 = ((((2 * n) - 1) * (2 * n)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        let mut degreesIncr: f64 = ((0.1 * g_PI) / 180.0);
        static mut g_turns: f64 = 0.0;;
        let mut stop: f64 = (((360.0 * g_turns) * 10.0) * degreesIncr);
        static mut g_width: f64 = 0.0;;
        let mut centre: f64 = (g_width / 2.0);
        static mut g_a: f64 = 0.0;;
        static mut g_b: f64 = 0.0;;
        static mut g_theta: f64 = 0.0;;
        static mut g_count: i64 = 0;;
        while (g_theta < stop) {
            let mut r: f64 = (g_a + (g_b * g_theta));
            let mut x: f64 = (r * cosApprox(g_theta));
            let mut y: f64 = (r * sinApprox(g_theta));
            if ((g_count % 100) == 0) {
                println!("{}", format!("{}{}", format!("{}{}", (centre + x).to_string(), ","), (centre - y).to_string()));
            }
            g_theta = (g_theta + degreesIncr);
            g_count = (g_count + 1);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
