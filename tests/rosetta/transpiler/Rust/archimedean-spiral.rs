// Generated by Mochi transpiler v0.10.41 on 2025-07-27 01:00 +0700
static mut g_PI: f64 = 0.0;
static mut g_degreesIncr: f64 = 0.0;
static mut g_turns: f64 = 0.0;
static mut g_stop: f64 = 0.0;
static mut g_width: f64 = 0.0;
static mut g_centre: f64 = 0.0;
static mut g_a: f64 = 0.0;
static mut g_b: f64 = 0.0;
static mut g_theta: f64 = 0.0;
static mut g_count: i64 = 0;
unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 10) {
        let denom: i64 = ((2 * n) * ((2 * n) + 1));
        term = (((-term * x) * x) / (denom as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
}

unsafe fn cosApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n <= 10) {
        let denom: i64 = (((2 * n) - 1) * (2 * n));
        term = (((-term * x) * x) / (denom as f64));
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
}

fn main() {
    unsafe {
        g_PI = 3.141592653589793;
        g_degreesIncr = ((0.1 * g_PI) / 180.0);
        g_turns = 2.0;
        g_stop = (((360.0 * g_turns) * 10.0) * g_degreesIncr);
        g_width = 600.0;
        g_centre = (g_width / 2.0);
        g_a = 1.0;
        g_b = 20.0;
        g_theta = 0.0;
        g_count = 0;
        while (g_theta < g_stop) {
            let r: f64 = (g_a + (g_b * g_theta));
            let x: f64 = (r * cosApprox(g_theta));
            let y: f64 = (r * sinApprox(g_theta));
            if ((g_count % 100) == 0) {
                println!("{}", format!("{}{}", format!("{}{}", (g_centre + x).to_string(), ","), (g_centre - y).to_string()));
            }
            g_theta = (g_theta + g_degreesIncr);
            g_count = (g_count + 1);
        }
    }
}
