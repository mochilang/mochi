// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn _pad_start(mut s: String, w: i64, p: String) -> String {
    while s.len() < w as usize { s = p.clone() + &s; }
    s
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn bernoulli(mut n: i64) -> i64 {
    let mut a: Vec<i64> = vec![];
    let mut m: i64 = 0;
    while (m <= n) {
        a = { let mut _v = a.clone(); _v.push((1 / (m + 1))); _v };
        let mut j: i64 = m;
        while (j >= 1) {
            a[(j - 1) as usize] = (j * (a[(j - 1) as usize] - a[j as usize]));
            j = (j - 1);
        }
        m = (m + 1);
    }
    if (n != 1) {
        return a[0 as usize]
    }
    return -a[0 as usize]
};
    fn binom(mut n: i64, mut k: i64) -> i64 {
    if ((k < 0) || (k > n)) {
        return 0
    }
    let mut kk: i64 = k;
    if (kk > (n - kk)) {
        kk = (n - kk);
    }
    let mut res: i64 = 1;
    let mut i: i64 = 0;
    while (i < kk) {
        res = (res * (n - i));
        i = (i + 1);
        res = (res / i);
    }
    return res
};
    fn faulhaberRow(mut p: i64) -> Vec<i64> {
    let mut coeffs: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i <= p) {
        coeffs = { let mut _v = coeffs.clone(); _v.push(0); _v };
        i = (i + 1);
    }
    let mut j: i64 = 0;
    let mut sign: i64 = -1;
    while (j <= p) {
        sign = -sign;
        let mut c: i64 = (1 / (p + 1));
        if (sign < 0) {
            c = -c;
        }
        c = (c * binom((p + 1), j));
        c = (c * bernoulli(j));
        coeffs[(p - j) as usize] = c;
        j = (j + 1);
    }
    return coeffs
};
    fn ratStr(mut r: i64) -> String {
    let mut s = r.to_string();
    if true {
        return { let tmp = &s; tmp.chars().skip(0 as usize).take((((s.len() as i64) - 2) - 0) as usize).collect::<String>() }
    }
    return s.to_string().clone()
};
    fn endsWith(s: &str, suf: &str) -> bool {
    if ((s.len() as i64) < (suf.len() as i64)) {
        return false
    }
    return ({ let tmp = &s; tmp.chars().skip(((s.len() as i64) - (suf.len() as i64)) as usize).take(((s.len() as i64) - ((s.len() as i64) - (suf.len() as i64))) as usize).collect::<String>() } == suf)
};
    fn mochi_main() {
    let mut p: i64 = 0;
    while (p < 10) {
        let mut row: Vec<i64> = faulhaberRow(p);
        let mut line = String::from("");
        let mut idx: i64 = 0;
        while (idx < (row.len() as i64)) {
            line = format!("{}{}", line, { let mut out = ratStr(row[idx as usize]).clone(); while out.len() < (5 as usize) { out = String::from(" ") + &out; } out });
            if (idx < ((row.len() as i64) - 1)) {
                line = format!("{}{}", line, "  ");
            }
            idx = (idx + 1);
        }
        println!("{}", line);
        p = (p + 1);
    }
    println!("{}", "");
    let mut k: i64 = 17;
    let mut coeffs: Vec<i64> = faulhaberRow(k);
    let mut nn: i64 = 1000;
    let mut np: i64 = 1;
    let mut sum: i64 = 0;
    let mut i: i64 = 0;
    while (i < (coeffs.len() as i64)) {
        np = (np * nn);
        sum = (sum + (coeffs[i as usize] * np));
        i = (i + 1);
    }
    println!("{}", ratStr(sum));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
