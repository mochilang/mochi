// Generated by Mochi transpiler v0.10.56 on 2025-08-03 21:08 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    magic: String,
    w: i64,
    h: i64,
    max: i64,
    px: Vec<i64>,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"magic\": \"{}\"", self.magic)?;
        write!(f, ", ")?;
        write!(f, "\"w\": {}", self.w)?;
        write!(f, ", ")?;
        write!(f, "\"h\": {}", self.h)?;
        write!(f, ", ")?;
        write!(f, "\"max\": {}", self.max)?;
        write!(f, ", ")?;
        write!(f, "\"px\": {:?}", self.px)?;
        write!(f, "}}")
    }
}

static mut g_ppmData: String = String::new();
fn main() {
    unsafe {
        g_ppmData = String::from("P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n").clone();
                let _start: i64 = _now();
        unsafe fn parseIntStr(mut str: String) -> i64 {
    let mut i: i64 = 0;
    let mut neg: bool = false;
    if (((str.len() as i64) > 0) && (str[0 as usize..1 as usize].to_string().as_str() == "-")) {
        neg = true;
        i = 1;
    }
    let mut n: i64 = 0;
    let mut digits = HashMap::from([(String::from("0"), 0), (String::from("1"), 1), (String::from("2"), 2), (String::from("3"), 3), (String::from("4"), 4), (String::from("5"), 5), (String::from("6"), 6), (String::from("7"), 7), (String::from("8"), 8), (String::from("9"), 9)]);
    while (i < (str.len() as i64)) {
        n = ((n * 10) + digits.get(str[i as usize..(i + 1) as usize].to_string().as_str()).cloned().unwrap_or_default());
        i = (i + 1);
    }
    if neg {
        n = -n;
    }
    return n
};
        unsafe fn splitWs(mut s: String) -> Vec<String> {
    let mut parts: Vec<String> = vec![];
    let mut cur: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if ((((ch.as_str() == " ") || (ch.as_str() == "\n")) || (ch.as_str() == "\t")) || (ch.as_str() == "\r")) {
            if ((cur.len() as i64) > 0) {
                parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
                cur = String::from("");
            }
        } else {
            cur = format!("{}{}", cur, ch);
        }
        i = (i + 1);
    }
    if ((cur.len() as i64) > 0) {
        parts = { let mut _v = parts.clone(); _v.push(cur.clone()); _v };
    }
    return parts
};
        unsafe fn parsePpm(data: &str) -> Map {
    let mut toks: Vec<String> = splitWs(data.to_string());
    if ((toks.len() as i64) < 4) {
        return Map {magic: Default::default(), w: Default::default(), h: Default::default(), max: Default::default(), px: Default::default()}
    }
    let mut magic: String = toks[0 as usize].clone().clone();
    let mut w: i64 = parseIntStr(toks[1 as usize].clone());
    let mut h: i64 = parseIntStr(toks[2 as usize].clone());
    let mut maxv: i64 = parseIntStr(toks[3 as usize].clone());
    let mut px: Vec<i64> = vec![];
    let mut i: i64 = 4;
    while (i < (toks.len() as i64)) {
        px = { let mut _v = px.clone(); _v.push(parseIntStr(toks[i as usize].clone())); _v };
        i = (i + 1);
    }
    return Map {magic: magic.clone(), w: w, h: h, max: maxv, px: px}
};
        static mut g_ppmData: String = String::new();;
        let mut img: Map = parsePpm(&g_ppmData);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "width=", img.w.to_string()), " height="), img.h.to_string()));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
