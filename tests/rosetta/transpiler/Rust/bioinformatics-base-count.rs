// Generated by Mochi transpiler v0.10.42 on 2025-07-27 17:23 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_dna: String = String::new();
static mut g_le: i64 = 0;
static mut g_i: i64 = 0;
static mut g_a: i64 = 0;
static mut g_c: i64 = 0;
static mut g_g: i64 = 0;
static mut g_t: i64 = 0;
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_dna = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG"), "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG"), "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT"), "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG"), "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT"), "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG"), "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC"), "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT").clone();
        g_le = (g_dna.len() as i64);
        g_i = 0;
        g_a = 0;
        g_c = 0;
        g_g = 0;
        g_t = 0;
        g_idx = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn padLeft(mut s: String, mut w: i64) -> String {
    let mut res = String::from("");
    let mut n: i64 = (w - (s.len() as i64));
    while (n > 0) {
        res = format!("{}{}", res, " ");
        n = (n - 1);
    }
    return format!("{}{}", res, s).clone()
};
        static mut g_dna: String = String::new();;
        println!("{}", "SEQUENCE:");
        static mut g_le: i64 = 0;;
        static mut g_i: i64 = 0;;
        while (g_i < g_le) {
            let mut k: i64 = (g_i + 50);
            if (k > g_le) {
                k = g_le;
            }
            println!("{}", format!("{}{}", format!("{}{}", padLeft(g_i.to_string().to_string(), 5), ": "), g_dna[g_i as usize..k as usize].to_string()));
            g_i = (g_i + 50);
        }
        static mut g_a: i64 = 0;;
        static mut g_c: i64 = 0;;
        static mut g_g: i64 = 0;;
        static mut g_t: i64 = 0;;
        static mut g_idx: i64 = 0;;
        while (g_idx < g_le) {
            let ch: String = { let tmp = &g_dna; tmp.chars().skip(g_idx as usize).take(((g_idx + 1) - g_idx) as usize).collect::<String>() }.clone();
            if (ch.as_str() == "A") {
                g_a = (g_a + 1);
            } else {
                if (ch.as_str() == "C") {
                    g_c = (g_c + 1);
                } else {
                    if (ch.as_str() == "G") {
                        g_g = (g_g + 1);
                    } else {
                        if (ch.as_str() == "T") {
                            g_t = (g_t + 1);
                        }
                    }
                }
            }
            g_idx = (g_idx + 1);
        }
        println!("{}", "");
        println!("{}", "BASE COUNT:");
        println!("{}", format!("{}{}", "    A: ", padLeft(g_a.to_string().to_string(), 3)));
        println!("{}", format!("{}{}", "    C: ", padLeft(g_c.to_string().to_string(), 3)));
        println!("{}", format!("{}{}", "    G: ", padLeft(g_g.to_string().to_string(), 3)));
        println!("{}", format!("{}{}", "    T: ", padLeft(g_t.to_string().to_string(), 3)));
        println!("{}", "    ------");
        println!("{}", format!("{}{}", "    Î£: ", g_le.to_string()));
        println!("{}", "    ======");
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
