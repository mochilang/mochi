// Generated by Mochi transpiler v0.10.54 on 2025-08-02 14:06 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_dim: i64 = 0;
fn main() {
    unsafe {
        g_dim = 16;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_dim: i64 = 0;;
        unsafe fn newPile(mut d: i64) -> Vec<Vec<i64>> {
    let mut b: Vec<Vec<i64>> = vec![];
    let mut y: i64 = 0;
    while (y < d) {
        let mut row: Vec<i64> = vec![];
        let mut x: i64 = 0;
        while (x < d) {
            row = { let mut _v = row.clone(); _v.push(0); _v };
            x = (x + 1);
        }
        b = { let mut _v = b.clone(); _v.push(row.clone()); _v };
        y = (y + 1);
    }
    return b
};
        unsafe fn handlePile(mut pile: Vec<Vec<i64>>, mut x: i64, mut y: i64) -> Vec<Vec<i64>> {
    if (pile[y as usize].clone()[x as usize] >= 4) {
        pile[y as usize][x as usize] = (pile[y as usize].clone()[x as usize] - 4);
        if (y > 0) {
            pile[(y - 1) as usize][x as usize] = (pile[(y - 1) as usize].clone()[x as usize] + 1);
            if (pile[(y - 1) as usize].clone()[x as usize] >= 4) {
                pile = handlePile(pile.clone(), x, (y - 1));
            }
        }
        if (x > 0) {
            pile[y as usize][(x - 1) as usize] = (pile[y as usize].clone()[(x - 1) as usize] + 1);
            if (pile[y as usize].clone()[(x - 1) as usize] >= 4) {
                pile = handlePile(pile.clone(), (x - 1), y);
            }
        }
        if (y < (g_dim - 1)) {
            pile[(y + 1) as usize][x as usize] = (pile[(y + 1) as usize].clone()[x as usize] + 1);
            if (pile[(y + 1) as usize].clone()[x as usize] >= 4) {
                pile = handlePile(pile.clone(), x, (y + 1));
            }
        }
        if (x < (g_dim - 1)) {
            pile[y as usize][(x + 1) as usize] = (pile[y as usize].clone()[(x + 1) as usize] + 1);
            if (pile[y as usize].clone()[(x + 1) as usize] >= 4) {
                pile = handlePile(pile.clone(), (x + 1), y);
            }
        }
        pile = handlePile(pile.clone(), x, y);
    }
    return pile
};
        unsafe fn drawPile(mut pile: Vec<Vec<i64>>, mut d: i64) {
    let mut chars: Vec<String> = vec![String::from(" "), String::from("░"), String::from("▓"), String::from("█")];
    let mut row: i64 = 0;
    while (row < d) {
        let mut line: String = String::from("").clone();
        let mut col: i64 = 0;
        while (col < d) {
            let mut v: i64 = pile[row as usize].clone()[col as usize];
            if (v > 3) {
                v = 3;
            }
            line = format!("{}{}", line, chars[v as usize].clone());
            col = (col + 1);
        }
        println!("{}", line);
        row = (row + 1);
    }
};
        unsafe fn mochi_main() {
    let mut pile: Vec<Vec<i64>> = newPile(16);
    let mut hdim: i64 = 7;
    pile[hdim as usize][hdim as usize] = 16;
    pile = handlePile(pile.clone(), hdim, hdim);
    drawPile(pile.clone(), 16);
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
