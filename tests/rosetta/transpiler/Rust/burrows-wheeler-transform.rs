// Generated by Mochi transpiler v0.10.56 on 2025-08-04 09:18 +0700
use std::collections::HashMap;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Map {
    err: bool,
    res: String,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"err\": {}", self.err)?;
        write!(f, ", ")?;
        write!(f, "\"res\": \"{}\"", self.res)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Map1 {
    err: bool,
    res: String,
}
impl std::fmt::Display for Map1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"err\": {}", self.err)?;
        write!(f, ", ")?;
        write!(f, "\"res\": \"{}\"", self.res)?;
        write!(f, "}}")
    }
}

static mut g_stx: String = String::new();
static mut g_etx: String = String::new();
fn main() {
    unsafe {
        g_stx = String::from("\x02").clone();
        g_etx = String::from("\x03").clone();
                let _start: i64 = _now();
        static mut g_stx: String = String::new();;
        static mut g_etx: String = String::new();;
        unsafe fn contains(mut s: String, ch: &str) -> bool {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return true
        }
        i = (i + 1);
    }
    return false
};
        unsafe fn sortStrings(mut xs: Vec<String>) -> Vec<String> {
    let mut arr: Vec<String> = xs;
    let mut n = (arr.len() as i64);
    let mut i: i64 = 0;
    while (i < n) {
        let mut j: i64 = 0;
        while (j < (n - 1)) {
            if (arr[j as usize].clone().as_str() > arr[(j + 1) as usize].clone().as_str()) {
                let mut tmp: String = arr[j as usize].clone().clone();
                arr[j as usize] = arr[(j + 1) as usize].clone();
                arr[(j + 1) as usize] = tmp.clone();
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr
};
        unsafe fn bwt(mut s: String) -> Map1 {
    if (s.contains(g_stx.as_str()) || s.contains(g_etx.as_str())) {
        return Map1 {err: true, res: String::from("")}
    }
    s = format!("{}{}", format!("{}{}", g_stx, s), g_etx);
    let mut le = (s.len() as i64);
    let mut table: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < le) {
        let mut rot: String = format!("{}{}", { let tmp = &s; tmp.chars().skip(i as usize).take((le - i) as usize).collect::<String>() }, { let tmp = &s; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }).clone();
        table = { let mut _v = table.clone(); _v.push(rot.clone()); _v };
        i = (i + 1);
    }
    table = sortStrings(table.clone());
    let mut last: String = String::from("").clone();
    i = 0;
    while (i < le) {
        last = format!("{}{}", last, { let tmp = &table[i as usize].clone(); tmp.chars().skip((le - 1) as usize).take((le - (le - 1)) as usize).collect::<String>() });
        i = (i + 1);
    }
    return Map1 {err: false, res: last.clone()}
};
        unsafe fn ibwt(mut r: String) -> String {
    let mut le = (r.len() as i64);
    let mut table: Vec<String> = vec![];
    let mut i: i64 = 0;
    while (i < le) {
        table = { let mut _v = table.clone(); _v.push("".to_string()); _v };
        i = (i + 1);
    }
    let mut n: i64 = 0;
    while (n < le) {
        i = 0;
        while (i < le) {
            table[i as usize] = format!("{}{}", { let tmp = &r; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }, table[i as usize].clone());
            i = (i + 1);
        }
        table = sortStrings(table.clone());
        n = (n + 1);
    }
    i = 0;
    while (i < le) {
        if ({ let tmp = &table[i as usize].clone(); tmp.chars().skip((le - 1) as usize).take((le - (le - 1)) as usize).collect::<String>() }.as_str() == g_etx.as_str()) {
            return { let tmp = &table[i as usize].clone(); tmp.chars().skip(1 as usize).take(((le - 1) - 1) as usize).collect::<String>() }
        }
        i = (i + 1);
    }
    return String::from("").clone()
};
        unsafe fn makePrintable(mut s: String) -> String {
    let mut out: String = String::from("").clone();
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        let mut ch: String = { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() }.clone();
        if (ch.as_str() == g_stx.as_str()) {
            out = format!("{}{}", out, "^");
        } else if (ch.as_str() == g_etx.as_str()) {
            out = format!("{}{}", out, "|");
        } else {
            out = format!("{}{}", out, ch);
        }
        i = (i + 1);
    }
    return out.clone()
};
        unsafe fn mochi_main() {
    let mut examples: Vec<String> = vec![String::from("banana"), String::from("appellee"), String::from("dogwood"), String::from("TO BE OR NOT TO BE OR WANT TO BE OR NOT?"), String::from("SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES"), String::from("\x02ABC\x03")];
    for t in examples.iter().cloned() {
        println!("{}", makePrintable(t.clone()));
        let mut res: Map1 = bwt(t.clone());
        if res.err {
            println!("{}", " --> ERROR: String can't contain STX or ETX");
            println!("{}", " -->");
        } else {
            let mut enc: String = res.res.clone().clone();
            println!("{}", format!("{}{}", " --> ", makePrintable(enc.clone())));
            let mut r: String = ibwt(enc.clone()).clone();
            println!("{}", format!("{}{}", " --> ", r));
        }
        println!("{}", "");
    }
};
        mochi_main();
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
