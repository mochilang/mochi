// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Pt {
    x: f64,
    y: f64,
    inf: bool,
}
impl std::fmt::Display for Pt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"inf\": {}", self.inf)?;
        write!(f, "}}")
    }
}

static mut g_bCoeff: f64 = 0.0;
fn main() {
    unsafe {
        g_bCoeff = 7.0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_bCoeff: f64 = 0.0;;
        unsafe fn zero() -> Pt {
    return Pt {x: 0.0, y: 0.0, inf: true}
};
        unsafe fn isZero(p: &Pt) -> bool {
    return p.inf
};
        unsafe fn neg(p: &Pt) -> Pt {
    return Pt {x: p.x, y: -p.y, inf: p.inf}
};
        unsafe fn dbl(p: &Pt) -> Pt {
    if isZero(p) {
        return p
    }
    let mut L: f64 = (((3.0 * p.x) * p.x) / (2.0 * p.y));
    let mut x: f64 = ((L * L) - (2.0 * p.x));
    return Pt {x: x, y: ((L * (p.x - x)) - p.y), inf: false}
};
        unsafe fn add(p: &Pt, q: &Pt) -> Pt {
    if isZero(p) {
        return q
    }
    if isZero(q) {
        return p
    }
    if (p.x == q.x) {
        if (p.y == q.y) {
            return dbl(p)
        }
        return zero()
    }
    let mut L: f64 = ((q.y - p.y) / (q.x - p.x));
    let mut x: f64 = (((L * L) - p.x) - q.x);
    return Pt {x: x, y: ((L * (p.x - x)) - p.y), inf: false}
};
        unsafe fn mul(p: &Pt, mut n: i64) -> Pt {
    let mut r: Pt = zero();
    let mut q: Pt = p;
    let mut k: i64 = n;
    while (k > 0) {
        if ((k % 2) == 1) {
            r = add(&r, &q);
        }
        q = dbl(&q);
        k = (k / 2);
    }
    return r
};
        unsafe fn cbrtApprox(mut x: f64) -> f64 {
    let mut guess: f64 = x;
    let mut i: i64 = 0;
    while (i < 40) {
        guess = (((2.0 * guess) + (x / (guess * guess))) / 3.0);
        i = (i + 1);
    }
    return guess
};
        unsafe fn fromY(mut y: f64) -> Pt {
    return Pt {x: cbrtApprox(((y * y) - g_bCoeff)), y: y, inf: false}
};
        unsafe fn show(s: &str, p: &Pt) {
    if isZero(p) {
        println!("{}", format!("{}{}", s, "Zero"));
    } else {
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", s, "("), p.x.to_string()), ", "), p.y.to_string()), ")"));
    }
};
        unsafe fn mochi_main() {
    let mut a: Pt = fromY(1.0);
    let mut b: Pt = fromY(2.0);
    show(&"a = ", &a);
    show(&"b = ", &b);
    let mut c: Pt = add(&a, &b);
    show(&"c = a + b = ", &c);
    let mut d: Pt = neg(&c);
    show(&"d = -c = ", &d);
    show(&"c + d = ", &add(&c, &d));
    show(&"a + b + d = ", &add(&a, &add(&b, &d)));
    show(&"a * 12345 = ", &mul(&a, 12345));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
