// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn listStr(xs: &mut Vec<i64>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if (i < ((xs.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn llStr(lst: &mut Vec<Vec<i64>>) -> String {
    let mut s: String = String::from("[").clone();
    let mut i: i64 = 0;
    while (i < (lst.len() as i64)) {
        s = format!("{}{}", s, listStr(&mut lst[i as usize].clone()));
        if (i < ((lst.len() as i64) - 1)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn copy(mut xs: Vec<i64>) -> Vec<i64> {
    let mut out: Vec<i64> = vec![];
    for v in xs.iter().cloned() {
        out = { let mut _v = out.clone(); _v.push(v); _v };
    }
    return out
};
    fn cartN(mut lists: String) -> Vec<Vec<i64>> {
    if (lists == Default::default()) {
        return vec![]
    }
    let mut a: String = lists.clone();
    if ((a.len() as i64) == 0) {
        return vec![vec![]]
    }
    let mut out: Vec<Vec<i64>> = vec![];
    let mut last = ((a.len() as i64) - 1);
    let mut left: Vec<Vec<i64>> = cartN(a.chars().skip(0 as usize).take(last as usize).collect::<String>());
    for p in left.iter() {
        for x in a.chars().nth(last as usize).unwrap() {
            let mut row: Vec<i64> = copy(p.clone());
            row = { let mut _v = row.clone(); _v.push(x); _v };
            out = { let mut _v = out.clone(); _v.push(row.clone()); _v };
        }
    }
    return out
};
    fn mochi_main() {
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![1, 2], vec![3, 4]]))));
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![3, 4], vec![1, 2]]))));
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![1, 2], vec![]]))));
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![], vec![1, 2]]))));
    println!("{}", "");
    println!("{}", "[");
    for p in cartN(format!("{:?}", vec![vec![1776, 1789], vec![7, 12], vec![4, 14, 23], vec![0, 1]])).iter() {
        println!("{}", format!("{}{}", " ", listStr(p)));
    }
    println!("{}", "]");
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![1, 2, 3], vec![30], vec![500, 100]]))));
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![vec![1, 2, 3], vec![], vec![500, 100]]))));
    println!("{}", "");
    println!("{}", llStr(&mut cartN(String::new())));
    println!("{}", llStr(&mut cartN(format!("{:?}", vec![]))));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
