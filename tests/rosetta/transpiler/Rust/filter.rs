// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn randPerm(mut n: i64) -> Vec<i64> {
    let mut arr: Vec<i64> = vec![];
    let mut i: i64 = 0;
    while (i < n) {
        arr = { let mut _v = arr.clone(); _v.push(i); _v };
        i = (i + 1);
    }
    let mut idx: i64 = (n - 1);
    while (idx > 0) {
        let mut j = (_now() % (idx + 1));
        let mut tmp: i64 = arr[idx as usize];
        arr[idx as usize] = arr[j as usize];
        arr[j as usize] = tmp;
        idx = (idx - 1);
    }
    return arr
};
    fn even(mut xs: Vec<i64>) -> Vec<i64> {
    let mut r: Vec<i64> = vec![];
    for x in xs.clone() {
        if ((x % 2) == 0) {
            r = { let mut _v = r.clone(); _v.push(x); _v };
        }
    }
    return r
};
    fn reduceToEven(mut xs: Vec<i64>) -> Vec<i64> {
    let mut arr: Vec<i64> = xs;
    let mut last: i64 = 0;
    let mut i: i64 = 0;
    while (i < (arr.len() as i64)) {
        let mut e: i64 = arr[i as usize];
        if ((e % 2) == 0) {
            arr[last as usize] = e;
            last = (last + 1);
        }
        i = (i + 1);
    }
    return arr[0..last as usize].to_vec()
};
    fn listStr(mut xs: Vec<i64>) -> String {
    let mut s = String::from("[");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", s, xs[i as usize].to_string());
        if ((i + 1) < (xs.len() as i64)) {
            s = format!("{}{}", s, " ");
        }
        i = (i + 1);
    }
    s = format!("{}{}", s, "]");
    return s.clone()
};
    fn mochi_main() {
    let mut a: Vec<i64> = randPerm(20);
    let mut cap_a: i64 = 20;
    println!("{}", listStr(a.clone()));
    println!("{}", listStr(even(a.clone())));
    println!("{}", listStr(a.clone()));
    a = reduceToEven(a.clone());
    println!("{}", listStr(a.clone()));
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "a len: ", (a.len() as i64).to_string()), " cap: "), cap_a.to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
