// Generated by Mochi transpiler v0.10.41 on 2025-07-26 17:25 +0700
use std::collections::HashMap;
#[derive(Debug, Clone, Default)]
struct Map {
    Base: String,
    Host: String,
    Port: i64,
    GroupFilter: String,
}
impl std::fmt::Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"Base\": \"{}\"", self.Base)?;
        write!(f, ", ")?;
        write!(f, "\"Host\": \"{}\"", self.Host)?;
        write!(f, ", ")?;
        write!(f, "\"Port\": {}", self.Port)?;
        write!(f, ", ")?;
        write!(f, "\"GroupFilter\": \"{}\"", self.GroupFilter)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Map1 {
    username: Vec<String>,
    john: Vec<String>,
}
impl std::fmt::Display for Map1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"username\": {:?}", self.username)?;
        write!(f, ", ")?;
        write!(f, "\"john\": {:?}", self.john)?;
        write!(f, "}}")
    }
}

fn search_user(directory: &HashMap<String, Vec<String>>, mut username: String) -> Vec<String> {
    return directory[username.as_str()]
}

fn mochi_main() {
    let client: Map = Map {Base: String::from("dc=example,dc=com"), Host: String::from("ldap.example.com"), Port: 389, GroupFilter: String::from("(memberUid=%s)")};
    let directory: Map1 = Map1 {username: vec![String::from("admins"), String::from("users")], john: vec![String::from("users")]};
    let mut groups: Vec<String> = search_user(&directory, String::from("username"));
    if ((groups.len() as i64) > 0) {
        let mut out = String::from("Groups: [");
        let mut i: i64 = 0;
        while (i < (groups.len() as i64)) {
            out = format!("{}{}", format!("{}{}", format!("{}{}", out, "\""), groups[i as usize].clone()), "\"");
            if (i < ((groups.len() as i64) - 1)) {
                out = format!("{}{}", out, ", ");
            }
            i = (i + 1);
        }
        out = format!("{}{}", out, "]");
        println!("{}", out);
    } else {
        println!("{}", "User not found");
    }
}

fn main() {
    mochi_main();
}
