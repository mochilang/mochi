// Generated by Mochi transpiler v0.10.40 on 2025-07-26 04:43 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn divisors(mut n: i64) -> Vec<i64> {
    let mut divs: Vec<i64> = vec![1];
    let mut divs2: Vec<i64> = vec![];
    let mut i: i64 = 2;
    while ((i * i) <= n) {
        if ((n % i) == 0) {
            let j: i64 = (n / i);
            divs = { let mut v = divs.clone(); v.push(i); v };
            if (i != j) {
                divs2 = { let mut v = divs2.clone(); v.push(j); v };
            }
        }
        i = (i + 1);
    }
    let mut j = ((divs2.len() as i64) - 1);
    while (j >= 0) {
        divs = { let mut v = divs.clone(); v.push(divs2[j as usize]); v };
        j = (j - 1);
    }
    return divs
};
    fn sum(mut xs: Vec<i64>) -> i64 {
    let mut tot: i64 = 0;
    for v in xs {
        tot = (tot + v);
    }
    return tot
};
    fn sumStr(mut xs: Vec<i64>) -> String {
    let mut s = String::from("");
    let mut i: i64 = 0;
    while (i < (xs.len() as i64)) {
        s = format!("{}{}", format!("{}{}", s, xs[i as usize].to_string()), " + ");
        i = (i + 1);
    }
    return { let tmp = &s; tmp.chars().skip(0 as usize).take((((s.len() as i64) - 3) - 0) as usize).collect::<String>() }.clone()
};
    fn pad2(mut n: i64) -> String {
    let s = n.to_string();
    if ((s.len() as i64) < 2) {
        return format!("{}{}", " ", s)
    }
    return s.to_string().clone()
};
    fn pad5(mut n: i64) -> String {
    let mut s = n.to_string();
    while ((s.len() as i64) < 5) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn abundantOdd(mut searchFrom: i64, mut countFrom: i64, mut countTo: i64, mut printOne: bool) -> i64 {
    let mut count: i64 = countFrom;
    let mut n: i64 = searchFrom;
    while (count < countTo) {
        let mut divs: Vec<i64> = divisors(n);
        let tot: f64 = divs.iter().map(|x| *x as f64).sum::<f64>();
        if (tot > (n as f64)) {
            count = (count + 1);
            if (printOne && (count < countTo)) {
                n = (n + 2);
                continue
            }
            let s: String = sumStr(divs.clone()).clone();
            if !printOne {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad2(count), ". "), pad5(n)), " < "), s), " = "), tot.to_string()));
            } else {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", n.to_string(), " < "), s), " = "), tot.to_string()));
            }
        }
        n = (n + 2);
    }
    return n
};
    fn mochi_main() {
    let max: i64 = 25;
    println!("{}", format!("{}{}", format!("{}{}", "The first ", max.to_string()), " abundant odd numbers are:"));
    let n: i64 = abundantOdd(1, 0, max, false);
    println!("{}", "\nThe one thousandth abundant odd number is:");
    abundantOdd(n, max, 1000, true);
    println!("{}", "\nThe first abundant odd number above one billion is:");
    abundantOdd(1000000001, 0, 1, true);
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
