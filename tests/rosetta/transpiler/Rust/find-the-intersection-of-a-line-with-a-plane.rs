// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct Vector {
    x: f64,
    y: f64,
    z: f64,
}
impl std::fmt::Display for Vector {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"x\": {}", self.x)?;
        write!(f, ", ")?;
        write!(f, "\"y\": {}", self.y)?;
        write!(f, ", ")?;
        write!(f, "\"z\": {}", self.z)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn add(a: &Vector, b: &Vector) -> Vector {
    return Vector {x: (a.x + b.x), y: (a.y + b.y), z: (a.z + b.z)}
};
    fn sub(a: &Vector, b: &Vector) -> Vector {
    return Vector {x: (a.x - b.x), y: (a.y - b.y), z: (a.z - b.z)}
};
    fn mul(v: &Vector, mut s: f64) -> Vector {
    return Vector {x: (v.x * s), y: (v.y * s), z: (v.z * s)}
};
    fn dot(a: &Vector, b: &Vector) -> f64 {
    return (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z))
};
    fn intersectPoint(rv: &Vector, rp: &Vector, pn: &Vector, pp: &Vector) -> Vector {
    let mut diff: Vector = sub(rp, pp);
    let mut prod1: f64 = dot(&diff, pn);
    let mut prod2: f64 = dot(rv, pn);
    let mut prod3: f64 = (prod1 / prod2);
    return sub(rp, &mul(rv, prod3))
};
    fn mochi_main() {
    let mut rv: Vector = Vector {x: 0.0, y: -1.0, z: -1.0};
    let mut rp: Vector = Vector {x: 0.0, y: 0.0, z: 10.0};
    let mut pn: Vector = Vector {x: 0.0, y: 0.0, z: 1.0};
    let mut pp: Vector = Vector {x: 0.0, y: 0.0, z: 5.0};
    let mut ip: Vector = intersectPoint(&rv, &rp, &pn, &pp);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "The ray intersects the plane at (", ip.x.to_string()), ", "), ip.y.to_string()), ", "), ip.z.to_string()), ")"));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
