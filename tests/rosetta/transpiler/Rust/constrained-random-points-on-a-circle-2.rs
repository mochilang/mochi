// Generated by Mochi transpiler v0.10.57 on 2025-08-05 01:46 +0700
use std::collections::HashMap;
use std::sync::LazyLock;
use std::sync::Mutex;
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_nPts: i64 = 0;
static mut g_rMin: i64 = 0;
static mut g_rMax: i64 = 0;
static mut g_poss: Vec<Vec<i64>> = Vec::new();
static mut g_y: i64 = 0;
static mut g_rows: Vec<Vec<String>> = Vec::new();
static mut g_r: i64 = 0;
static mut g_u: i64 = 0;
static g_seen: LazyLock<Mutex<HashMap<String, bool>>> = LazyLock::new(|| Mutex::new(HashMap::new()));
static mut g_n: i64 = 0;
static mut g_i2: i64 = 0;
fn main() {
    unsafe {
        g_nPts = 100;
        g_rMin = 10;
        g_rMax = 15;
        g_poss = vec![];
        g_y = -g_rMax;
        g_rows = vec![];
        g_r = 0;
        g_u = 0;
        g_n = 0;
        g_i2 = 0;
                let _start: i64 = _now();
        let mut span: i64 = ((g_rMax + 1) + g_rMax);
        let mut min2: i64 = (g_rMin * g_rMin);
        let mut max2: i64 = (g_rMax * g_rMax);
        while (g_y <= g_rMax) {
            let mut x: i64 = -g_rMax;
            while (x <= g_rMax) {
                let mut r2: i64 = ((x * x) + (g_y * g_y));
                if ((r2 >= min2) && (r2 <= max2)) {
                    g_poss = { let mut _v = g_poss.clone().clone(); _v.push(vec![x, g_y]); _v };
                }
                x = (x + 1);
            }
            g_y = (g_y + 1);
        }
        println!("{}", format!("{}{}", (g_poss.clone().len() as i64).to_string(), " possible points"));
        while (g_r < span) {
            let mut row: Vec<String> = vec![];
            let mut c: i64 = 0;
            while (c < (span * 2)) {
                row = { let mut _v = row.clone(); _v.push(" ".to_string()); _v };
                c = (c + 1);
            }
            g_rows = { let mut _v = g_rows.clone().clone(); _v.push(row.clone()); _v };
            g_r = (g_r + 1);
        }
        while (g_n < g_nPts) {
            let mut i = (_now() % (g_poss.clone().len() as i64));
            let mut x: i64 = g_poss.clone()[i as usize].clone()[0 as usize];
            let mut yy: i64 = g_poss.clone()[i as usize].clone()[1 as usize];
            let mut row: i64 = (yy + g_rMax);
            let mut col: i64 = ((x + g_rMax) * 2);
            g_rows[row as usize][col as usize] = String::from("*");
            let mut key = format!("{}{}", format!("{}{}", row.to_string(), ","), col.to_string());
            if !g_seen.lock().unwrap().get(&key).cloned().unwrap_or_default() {
                { let mut _map = g_seen.lock().unwrap(); let _val = true; _map.insert(key.clone(), _val); };
                g_u = (g_u + 1);
            }
            g_n = (g_n + 1);
        }
        while (g_i2 < span) {
            let mut line: String = String::from("").clone();
            let mut j: i64 = 0;
            while (j < (span * 2)) {
                line = format!("{}{}", line, g_rows.clone()[g_i2 as usize].clone()[j as usize].clone());
                j = (j + 1);
            }
            println!("{}", line);
            g_i2 = (g_i2 + 1);
        }
        println!("{}", format!("{}{}", g_u.to_string(), " unique points"));
        let _end: i64 = _now();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = _mem();
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
