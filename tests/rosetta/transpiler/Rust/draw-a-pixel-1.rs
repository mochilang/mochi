// Generated by Mochi transpiler v0.10.42 on 2025-07-28 10:12 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_width: i64 = 0;
static mut g_height: i64 = 0;
static mut g_img: Vec<Vec<String>> = Vec::new();
static mut g_y: i64 = 0;
fn main() {
    unsafe {
        g_width = 320;
        g_height = 240;
        g_img = vec![];
        g_y = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_width: i64 = 0;;
        static mut g_height: i64 = 0;;
        static mut g_img: Vec<Vec<String>> = Vec::new();;
        static mut g_y: i64 = 0;;
        while (g_y < g_height) {
            let mut row: Vec<String> = vec![];
            let mut x: i64 = 0;
            while (x < g_width) {
                row = { let mut _v = row.clone(); _v.push("green".to_string()); _v };
                x = (x + 1);
            }
            g_img = { let mut _v = g_img.clone().clone(); _v.push(row.clone()); _v };
            g_y = (g_y + 1);
        }
        g_img[100 as usize][100 as usize] = "red";
        println!("{}", format!("{}{}", format!("{}{}", "The color of the pixel at (  0,   0) is ", g_img.clone()[0 as usize].clone()[0 as usize].clone()), "."));
        println!("{}", format!("{}{}", format!("{}{}", "The color of the pixel at (100, 100) is ", g_img.clone()[100 as usize].clone()[100 as usize].clone()), "."));
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
