// Generated by Mochi transpiler v0.10.55 on 2025-08-02 23:45 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            let mut parts = s.split_whitespace();
            parts.next();
            if let Some(rss) = parts.next() {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_PI: f64 = 0.0;
fn main() {
    unsafe {
        g_PI = 3.141592653589793;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        static mut g_PI: f64 = 0.0;;
        unsafe fn sinApprox(mut x: f64) -> f64 {
    let mut term: f64 = x;
    let mut sum: f64 = x;
    let mut n: i64 = 1;
    while (n <= 8) {
        let mut denom: f64 = (((2 * n) * ((2 * n) + 1)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn cosApprox(mut x: f64) -> f64 {
    let mut term: f64 = 1.0;
    let mut sum: f64 = 1.0;
    let mut n: i64 = 1;
    while (n <= 8) {
        let mut denom: f64 = ((((2 * n) - 1) * (2 * n)) as f64);
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum
};
        unsafe fn atanApprox(mut x: f64) -> f64 {
    if (x > 1.0) {
        return ((g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    if (x < -1.0) {
        return ((-g_PI / 2.0) - (x / ((x * x) + 0.28)))
    }
    return (x / (1.0 + ((0.28 * x) * x)))
};
        unsafe fn atan2Approx(mut y: f64, mut x: f64) -> f64 {
    if (x > 0.0) {
        return atanApprox((y / x))
    }
    if (x < 0.0) {
        if (y >= 0.0) {
            return (atanApprox((y / x)) + g_PI)
        }
        return (atanApprox((y / x)) - g_PI)
    }
    if (y > 0.0) {
        return (g_PI / 2.0)
    }
    if (y < 0.0) {
        return (-g_PI / 2.0)
    }
    return 0.0
};
        unsafe fn digit(ch: &str) -> i64 {
    let mut digits: String = String::from("0123456789").clone();
    let mut i: i64 = 0;
    while (i < (digits.len() as i64)) {
        if ({ let tmp = &digits; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return 0
};
        unsafe fn parseTwo(mut s: String, mut idx: i64) -> i64 {
    return ((digit(&{ let tmp = &s; tmp.chars().skip(idx as usize).take(((idx + 1) - idx) as usize).collect::<String>() }) * 10) + digit(&{ let tmp = &s; tmp.chars().skip((idx + 1) as usize).take(((idx + 2) - (idx + 1)) as usize).collect::<String>() }))
};
        unsafe fn parseSec(s: &str) -> f64 {
    let mut h: i64 = parseTwo(s.to_string(), 0);
    let mut m: i64 = parseTwo(s.to_string(), 3);
    let mut sec: i64 = parseTwo(s.to_string(), 6);
    let mut tmp: i64 = ((((h * 60) + m) * 60) + sec);
    return (tmp as f64)
};
        unsafe fn pad(mut n: i64) -> String {
    if (n < 10) {
        return format!("{}{}", "0", n.to_string())
    }
    return n.to_string().to_string().clone()
};
        unsafe fn meanTime(times: &mut Vec<String>) -> String {
    let mut ssum: f64 = 0.0;
    let mut csum: f64 = 0.0;
    let mut i: i64 = 0;
    while (i < (times.len() as i64)) {
        let mut sec: f64 = parseSec(&times[i as usize].clone());
        let mut ang: f64 = (((sec * 2.0) * g_PI) / 86400.0);
        ssum = (ssum + sinApprox(ang));
        csum = (csum + cosApprox(ang));
        i = (i + 1);
    }
    let mut theta: f64 = atan2Approx(ssum, csum);
    let mut frac: f64 = (theta / (2.0 * g_PI));
    while (frac < 0.0) {
        frac = (frac + 1.0);
    }
    let mut total: f64 = (frac * 86400.0);
    let mut si: i64 = (total as i64);
    let mut h: i64 = (si / 3600);
    let mut m: i64 = ((si % 3600) / 60);
    let mut s: i64 = (si % 60);
    return format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad(h), ":"), pad(m)), ":"), pad(s)).clone()
};
        unsafe fn mochi_main() {
    let mut inputs: Vec<String> = vec![String::from("23:00:17"), String::from("23:40:20"), String::from("00:12:45"), String::from("00:17:19")];
    println!("{}", meanTime(&mut inputs));
};
        mochi_main();
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let mut memory_bytes: i64 = (_end_mem - _start_mem);
        if (memory_bytes <= 0) {
            memory_bytes = _end_mem;
        }
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
