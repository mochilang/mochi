warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:48:2
   |
48 | };
   |  ^ help: remove this semicolon
   |
   = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:70:2
   |
70 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:83:2
   |
83 | };
   |  ^ help: remove this semicolon

warning: unnecessary trailing semicolon
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:116:2
    |
116 | };
    |  ^ help: remove this semicolon

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:42:17
   |
42 |     let mut i = ((s.len() as i64) - 3);
   |                 ^                    ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
42 -     let mut i = ((s.len() as i64) - 3);
42 +     let mut i = (s.len() as i64) - 3;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:43:11
   |
43 |     while (i >= 1) {
   |           ^      ^
   |
help: remove these parentheses
   |
43 -     while (i >= 1) {
43 +     while i >= 1 {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:45:13
   |
45 |         i = (i - 3);
   |             ^     ^
   |
help: remove these parentheses
   |
45 -         i = (i - 3);
45 +         i = i - 3;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:52:11
   |
52 |     while (i <= n) {
   |           ^      ^
   |
help: remove these parentheses
   |
52 -     while (i <= n) {
52 +     while i <= n {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:54:13
   |
54 |         i = (i + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
54 -         i = (i + 1);
54 +         i = i + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:59:11
   |
59 |     while ((p * p) <= n) {
   |           ^            ^
   |
help: remove these parentheses
   |
59 -     while ((p * p) <= n) {
59 +     while (p * p) <= n {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:61:30
   |
61 |             let mut m: i64 = (p * p);
   |                              ^     ^
   |
help: remove these parentheses
   |
61 -             let mut m: i64 = (p * p);
61 +             let mut m: i64 = p * p;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:62:19
   |
62 |             while (m <= n) {
   |                   ^      ^
   |
help: remove these parentheses
   |
62 -             while (m <= n) {
62 +             while m <= n {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:64:21
   |
64 |                 m = (m + p);
   |                     ^     ^
   |
help: remove these parentheses
   |
64 -                 m = (m + p);
64 +                 m = m + p;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:67:13
   |
67 |         p = (p + 1);
   |             ^     ^
   |
help: remove these parentheses
   |
67 -         p = (p + 1);
67 +         p = p + 1;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:73:20
   |
73 |     let mut high = (xs.len() as i64);
   |                    ^               ^
   |
help: remove these parentheses
   |
73 -     let mut high = (xs.len() as i64);
73 +     let mut high = xs.len() as i64;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:74:11
   |
74 |     while (low < high) {
   |           ^          ^
   |
help: remove these parentheses
   |
74 -     while (low < high) {
74 +     while low < high {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:75:28
   |
75 |         let mut mid: i64 = ((low + high) / 2);
   |                            ^                ^
   |
help: remove these parentheses
   |
75 -         let mut mid: i64 = ((low + high) / 2);
75 +         let mut mid: i64 = (low + high) / 2;
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:76:12
   |
76 |         if (xs[mid as usize] < target) {
   |            ^                         ^
   |
help: remove these parentheses
   |
76 -         if (xs[mid as usize] < target) {
76 +         if xs[mid as usize] < target {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:77:19
   |
77 |             low = (mid + 1);
   |                   ^       ^
   |
help: remove these parentheses
   |
77 -             low = (mid + 1);
77 +             low = mid + 1;
   |

warning: unnecessary parentheses around `while` condition
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:92:11
   |
92 |     while (i <= limit) {
   |           ^          ^
   |
help: remove these parentheses
   |
92 -     while (i <= limit) {
92 +     while i <= limit {
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:94:20
   |
94 |             csum = (csum + i);
   |                    ^        ^
   |
help: remove these parentheses
   |
94 -             csum = (csum + i);
94 +             csum = csum + i;
   |

warning: unnecessary parentheses around assigned value
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:97:20
   |
97 |             psum = (psum + i);
   |                    ^        ^
   |
help: remove these parentheses
   |
97 -             psum = (psum + i);
97 +             psum = psum + i;
   |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:100:13
    |
100 |         i = (i + 1);
    |             ^     ^
    |
help: remove these parentheses
    |
100 -         i = (i + 1);
100 +         i = i + 1;
    |

warning: unnecessary parentheses around `while` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:105:11
    |
105 |     while (idx < (primeSums.len() as i64)) {
    |           ^                              ^
    |
help: remove these parentheses
    |
105 -     while (idx < (primeSums.len() as i64)) {
105 +     while idx < (primeSums.len() as i64) {
    |

warning: unnecessary parentheses around `if` condition
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:108:12
    |
108 |         if ((j < (compSums.len() as i64)) && (compSums[j as usize] == s)) {
    |            ^                                                            ^
    |
help: remove these parentheses
    |
108 -         if ((j < (compSums.len() as i64)) && (compSums[j as usize] == s)) {
108 +         if (j < (compSums.len() as i64)) && (compSums[j as usize] == s) {
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:110:39
    |
110 |             let mut piStr = commatize((idx + 1)).padStart(11, " ");
    |                                       ^       ^
    |
help: remove these parentheses
    |
110 -             let mut piStr = commatize((idx + 1)).padStart(11, " ");
110 +             let mut piStr = commatize(idx + 1).padStart(11, " ");
    |

warning: unnecessary parentheses around function argument
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:111:39
    |
111 |             let mut ciStr = commatize((j + 1)).padStart(15, " ");
    |                                       ^     ^
    |
help: remove these parentheses
    |
111 -             let mut ciStr = commatize((j + 1)).padStart(15, " ");
111 +             let mut ciStr = commatize(j + 1).padStart(15, " ");
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:114:15
    |
114 |         idx = (idx + 1);
    |               ^       ^
    |
help: remove these parentheses
    |
114 -         idx = (idx + 1);
114 +         idx = idx + 1;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:120:28
    |
120 |     let duration_us: i64 = ((_end - _start) / 1000);
    |                            ^                      ^
    |
help: remove these parentheses
    |
120 -     let duration_us: i64 = ((_end - _start) / 1000);
120 +     let duration_us: i64 = (_end - _start) / 1000;
    |

warning: unnecessary parentheses around assigned value
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:121:29
    |
121 |     let memory_bytes: i64 = (_end_mem - _start_mem);
    |                             ^                     ^
    |
help: remove these parentheses
    |
121 -     let memory_bytes: i64 = (_end_mem - _start_mem);
121 +     let memory_bytes: i64 = _end_mem - _start_mem;
    |

error[E0277]: the type `str` cannot be indexed by `std::ops::Range<i64>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:44:47
   |
44 |         s = format!("{}{}", format!("{}{}", s[0..i].to_vec(), ","), s[i..(s.len() as i64)].to_vec());
   |                                               ^^^^ string indices are ranges of `usize`
   |
   = help: the trait `SliceIndex<str>` is not implemented for `std::ops::Range<i64>`
   = help: the following other types implement trait `SliceIndex<T>`:
             `std::ops::Range<usize>` implements `SliceIndex<[T]>`
             `std::ops::Range<usize>` implements `SliceIndex<str>`
   = note: required for `String` to implement `Index<std::ops::Range<i64>>`

error[E0277]: the type `str` cannot be indexed by `std::ops::Range<i64>`
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:44:71
   |
44 |         s = format!("{}{}", format!("{}{}", s[0..i].to_vec(), ","), s[i..(s.len() as i64)].to_vec());
   |                                                                       ^^^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`
   |
   = help: the trait `SliceIndex<str>` is not implemented for `std::ops::Range<i64>`
   = help: the following other types implement trait `SliceIndex<T>`:
             `std::ops::Range<usize>` implements `SliceIndex<[T]>`
             `std::ops::Range<usize>` implements `SliceIndex<str>`
   = note: required for `String` to implement `Index<std::ops::Range<i64>>`

error[E0599]: no method named `padStart` found for struct `String` in the current scope
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:109:43
    |
109 |             let mut sumStr = commatize(s).padStart(10, " ");
    |                                           ^^^^^^^^ method not found in `String`

error[E0599]: no method named `padStart` found for struct `String` in the current scope
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:110:50
    |
110 |             let mut piStr = commatize((idx + 1)).padStart(11, " ");
    |                                                  ^^^^^^^^ method not found in `String`

error[E0599]: no method named `padStart` found for struct `String` in the current scope
   --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:111:48
    |
111 |             let mut ciStr = commatize((j + 1)).padStart(15, " ");
    |                                                ^^^^^^^^ method not found in `String`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:49:19
   |
49 |     fn primeSieve(mut n: i64) -> Vec<bool> {
   |                   ----^
   |                   |
   |                   help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:71:15
   |
71 |     fn search(mut xs: Vec<i64>, mut target: i64) -> i64 {
   |               ----^^
   |               |
   |               help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:71:33
   |
71 |     fn search(mut xs: Vec<i64>, mut target: i64) -> i64 {
   |                                 ----^^^^^^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> /workspace/mochi/tests/rosetta/transpiler/Rust/equal-prime-and-composite-sums.rs:75:13
   |
75 |         let mut mid: i64 = ((low + high) / 2);
   |             ----^^^
   |             |
   |             help: remove this `mut`

error: aborting due to 5 previous errors; 34 warnings emitted

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
