// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
static mut g_params: Vec<Vec<i64>> = Vec::new();
static mut g_idx: i64 = 0;
fn main() {
    unsafe {
        g_params = vec![vec![12, 1], vec![12, 2], vec![123, 45]];
        g_idx = 0;
                let _start_mem: i64 = _mem();
        let _start: i64 = _now();
        unsafe fn commatize(mut n: i64) -> String {
    let mut s = n.to_string();
    let mut i = ((s.len() as i64) % 3);
    if (i == 0) {
        i = 3;
    }
    let mut out: String = { let tmp = &s; tmp.chars().skip(0 as usize).take((i - 0) as usize).collect::<String>() }.clone();
    while (i < (s.len() as i64)) {
        out = format!("{}{}", format!("{}{}", out, ","), { let tmp = &s; tmp.chars().skip(i as usize).take(((i + 3) - i) as usize).collect::<String>() });
        i = (i + 3);
    }
    return out.clone()
};
        unsafe fn p(mut L: i64, mut n: i64) -> i64 {
    let mut Ls = L.to_string();
    let mut digits: i64 = 1;
    let mut d: i64 = 1;
    while (d <= (18 - (Ls.len() as i64))) {
        digits = (digits * 10);
        d = (d + 1);
    }
    let mut ten18: i64 = 1000000000000000000;
    let mut count: i64 = 0;
    let mut i: i64 = 0;
    let mut probe: i64 = 1;
    loop {
        probe = (probe * 2);
        i = (i + 1);
        if (probe >= ten18) {
            loop {
                if (probe >= ten18) {
                    probe = (probe / 10);
                }
                if ((probe / digits) == L) {
                    count = (count + 1);
                    if (count >= n) {
                        count = (count - 1);
                        break
                    }
                }
                probe = (probe * 2);
                i = (i + 1);
            }
        }
        let mut ps = probe.to_string();
        let mut le = (Ls.len() as i64);
        if (le > (ps.len() as i64)) {
            le = (ps.len() as i64);
        }
        if ({ let tmp = &ps; tmp.chars().skip(0 as usize).take((le - 0) as usize).collect::<String>() } == Ls) {
            count = (count + 1);
            if (count >= n) {
                break
            }
        }
    }
    return i
};
        static mut g_params: Vec<Vec<i64>> = Vec::new();;
        static mut g_idx: i64 = 0;;
        while (g_idx < (g_params.clone().len() as i64)) {
            let mut L: i64 = g_params.clone()[g_idx as usize].clone()[0 as usize];
            let mut m: i64 = g_params.clone()[g_idx as usize].clone()[1 as usize];
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "p(", L.to_string()), ", "), m.to_string()), ") = "), commatize(p(L, m))));
            g_idx = (g_idx + 1);
        }
        let _end: i64 = _now();
        let _end_mem: i64 = _mem();
        let duration_us: i64 = ((_end - _start) / 1000);
        let memory_bytes: i64 = (_end_mem - _start_mem);
        println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

    }
}
