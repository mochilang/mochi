// Generated by Mochi transpiler v0.10.57 on 2025-08-04 21:43 +0700
use std::collections::HashMap;
fn mochi_main() {
    let mut pkg_dog: String = String::from("Salt").clone();
    let mut Dog: String = String::from("Pepper").clone();
    let mut pkg_DOG: String = String::from("Mustard").clone();
    let packageSees = move |d1: &str, d2: &str, d3: &str| -> HashMap<String, bool> {
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Package sees: ", d1), " "), d2), " "), d3));
    return HashMap::from([(String::from("pkg_dog"), true), (String::from("Dog"), true), (String::from("pkg_DOG"), true)])
};
    let mut d: HashMap<String, bool> = packageSees(&pkg_dog, &Dog, &pkg_DOG);
    println!("{}", format!("{}{}", format!("{}{}", "There are ", (d.len() as i64).to_string()), " dogs.\n"));
    let mut dog: String = String::from("Benjamin").clone();
    d = packageSees(&pkg_dog, &Dog, &pkg_DOG);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), pkg_DOG));
    d.insert(String::from("dog"), true);
    d.insert(String::from("Dog"), true);
    d.insert(String::from("pkg_DOG"), true);
    println!("{}", format!("{}{}", format!("{}{}", "There are ", (d.len() as i64).to_string()), " dogs.\n"));
    Dog = String::from("Samba");
    d = packageSees(&pkg_dog, &Dog, &pkg_DOG);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), pkg_DOG));
    d.insert(String::from("dog"), true);
    d.insert(String::from("Dog"), true);
    d.insert(String::from("pkg_DOG"), true);
    println!("{}", format!("{}{}", format!("{}{}", "There are ", (d.len() as i64).to_string()), " dogs.\n"));
    let mut DOG: String = String::from("Bernie").clone();
    d = packageSees(&pkg_dog, &Dog, &pkg_DOG);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), DOG));
    d.insert(String::from("dog"), true);
    d.insert(String::from("Dog"), true);
    d.insert(String::from("pkg_DOG"), true);
    d.insert(String::from("DOG"), true);
    println!("{}", format!("{}{}", format!("{}{}", "There are ", (d.len() as i64).to_string()), " dogs."));
}

fn main() {
    mochi_main();
}
