// Generated by Mochi transpiler v0.10.50 on 2025-07-30 21:05 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(p) = s.split_whitespace().next() {
                if let Ok(v) = p.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
#[derive(Debug, Clone, Default)]
struct SumCarry {
    s: bool,
    c: bool,
}
impl std::fmt::Display for SumCarry {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"s\": {}", self.s)?;
        write!(f, ", ")?;
        write!(f, "\"c\": {}", self.c)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone, Default)]
struct Add4Result {
    v: bool,
    s3: bool,
    s2: bool,
    s1: bool,
    s0: bool,
}
impl std::fmt::Display for Add4Result {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"v\": {}", self.v)?;
        write!(f, ", ")?;
        write!(f, "\"s3\": {}", self.s3)?;
        write!(f, ", ")?;
        write!(f, "\"s2\": {}", self.s2)?;
        write!(f, ", ")?;
        write!(f, "\"s1\": {}", self.s1)?;
        write!(f, ", ")?;
        write!(f, "\"s0\": {}", self.s0)?;
        write!(f, "}}")
    }
}

fn main() {
        let _start_mem: i64 = _mem();
    let _start: i64 = _now();
    fn xor(mut a: bool, mut b: bool) -> bool {
    return ((a && !b) || (!a && b))
};
    fn ha(mut a: bool, mut b: bool) -> SumCarry {
    return SumCarry {s: xor(a, b), c: (a && b)}
};
    fn fa(mut a: bool, mut b: bool, mut c0: bool) -> SumCarry {
    let mut r1: SumCarry = ha(a, c0);
    let mut r2: SumCarry = ha(r1.s, b);
    return SumCarry {s: r2.s, c: (r1.c || r2.c)}
};
    fn add4(mut a3: bool, mut a2: bool, mut a1: bool, mut a0: bool, mut b3: bool, mut b2: bool, mut b1: bool, mut b0: bool) -> Add4Result {
    let mut r0: SumCarry = fa(a0, b0, false);
    let mut r1: SumCarry = fa(a1, b1, r0.c);
    let mut r2: SumCarry = fa(a2, b2, r1.c);
    let mut r3: SumCarry = fa(a3, b3, r2.c);
    return Add4Result {v: r3.c, s3: r3.s, s2: r2.s, s1: r1.s, s0: r0.s}
};
    fn b2i(mut b: bool) -> i64 {
    if b {
        return 1
    }
    return 0
};
    fn mochi_main() {
    let mut r: Add4Result = add4(true, false, true, false, true, false, false, true);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", b2i(r.v).to_string(), " "), b2i(r.s3).to_string()), " "), b2i(r.s2).to_string()), " "), b2i(r.s1).to_string()), " "), b2i(r.s0).to_string()));
};
    mochi_main();
    let _end: i64 = _now();
    let _end_mem: i64 = _mem();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = (_end_mem - _start_mem);
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
