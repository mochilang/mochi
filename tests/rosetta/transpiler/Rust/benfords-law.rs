// Generated by Mochi transpiler v0.10.55 on 2025-08-03 14:55 +0700
use std::sync::atomic::{AtomicBool, AtomicI64, Ordering};
use std::time::{SystemTime, UNIX_EPOCH};
static NOW_SEEDED: AtomicBool = AtomicBool::new(false);
static NOW_SEED: AtomicI64 = AtomicI64::new(0);
fn _now() -> i64 {
    if !NOW_SEEDED.load(Ordering::SeqCst) {
        if let Ok(s) = std::env::var("MOCHI_NOW_SEED") {
            if let Ok(v) = s.parse::<i64>() {
                NOW_SEED.store(v, Ordering::SeqCst);
                NOW_SEEDED.store(true, Ordering::SeqCst);
            }
        }
    }
    if NOW_SEEDED.load(Ordering::SeqCst) {
        let seed = (NOW_SEED.load(Ordering::SeqCst)*1664525 + 1013904223) % 2147483647;
        NOW_SEED.store(seed, Ordering::SeqCst);
        seed
    } else {
        SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
    }
}
fn _mem() -> i64 {
    if let Ok(mut f) = std::fs::File::open("/proc/self/statm") {
        let mut s = String::new();
        use std::io::Read;
        if f.read_to_string(&mut s).is_ok() {
            if let Some(rss) = s.split_whitespace().nth(1) {
                if let Ok(v) = rss.parse::<i64>() {
                    return v * 4096;
                }
            }
        }
    }
    0
}
fn main() {
        let _start: i64 = _now();
    fn floorf(mut x: f64) -> f64 {
    let mut y: i64 = (x as i64);
    return (y as f64)
};
    fn indexOf(mut s: String, ch: &str) -> i64 {
    let mut i: i64 = 0;
    while (i < (s.len() as i64)) {
        if ({ let tmp = &s; tmp.chars().skip(i as usize).take(((i + 1) - i) as usize).collect::<String>() } == ch) {
            return i
        }
        i = (i + 1);
    }
    return -1
};
    fn fmtF3(mut x: f64) -> String {
    let mut y: f64 = (floorf(((x * 1000.0) + 0.5)) / 1000.0);
    let mut s = y.to_string();
    let mut dot: i64 = indexOf(s.clone(), &".");
    if (dot == (0 - 1)) {
        s = format!("{}{}", s, ".000");
    } else {
        let mut decs = (((s.len() as i64) - dot) - 1);
        if (decs > 3) {
            let mut s: String = { let tmp = &s; tmp.chars().skip(0 as usize).take(((dot + 4) - 0) as usize).collect::<String>() };
        } else {
            while (decs < 3) {
                s = format!("{}{}", s, "0");
                decs = (decs + 1);
            }
        }
    }
    return s.clone()
};
    fn padFloat3(mut x: f64, mut width: i64) -> String {
    let mut s: String = fmtF3(x).clone();
    while ((s.len() as i64) < width) {
        s = format!("{}{}", " ", s);
    }
    return s.clone()
};
    fn fib1000() -> Vec<f64> {
    let mut a: f64 = 0.0;
    let mut b: f64 = 1.0;
    let mut res: Vec<f64> = vec![];
    let mut i: i64 = 0;
    while (i < 1000) {
        res = { let mut _v = res.clone(); _v.push(b); _v };
        let mut t: f64 = b;
        b = (b + a);
        a = t;
        i = (i + 1);
    }
    return res
};
    fn leadingDigit(mut x: f64) -> i64 {
    if (x < 0.0) {
        x = -x;
    }
    while (x >= 10.0) {
        x = (x / 10.0);
    }
    while ((x > 0.0) && (x < 1.0)) {
        x = (x * 10.0);
    }
    return (x as i64)
};
    fn show(mut nums: Vec<f64>, mut title: String) {
    let mut counts: Vec<i64> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0];
    for n in nums.iter().cloned() {
        let mut d: i64 = leadingDigit(n);
        if ((d >= 1) && (d <= 9)) {
            counts[(d - 1) as usize] = (counts[(d - 1) as usize] + 1);
        }
    }
    let mut preds: Vec<f64> = vec![0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046];
    let mut total = (nums.len() as i64);
    println!("{}", title);
    println!("{}", "Digit  Observed  Predicted");
    let mut i: i64 = 0;
    while (i < 9) {
        let mut obs: f64 = ((counts[i as usize] as f64) / (total as f64));
        let mut line: String = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  ", (i + 1).to_string()), "  "), padFloat3(obs, 9)), "  "), padFloat3(preds[i as usize], 8)).clone();
        println!("{}", line);
        i = (i + 1);
    }
};
    fn mochi_main() {
    show(fib1000(), String::from("First 1000 Fibonacci numbers"));
};
    mochi_main();
    let _end: i64 = _now();
    let duration_us: i64 = ((_end - _start) / 1000);
    let memory_bytes: i64 = _mem();
    println!("{{\n  \"duration_us\": {},\n  \"memory_bytes\": {},\n  \"name\": \"{}\"\n}}", duration_us, memory_bytes, "main");

}
