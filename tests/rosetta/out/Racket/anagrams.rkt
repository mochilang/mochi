; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:37:32Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (sortRunes s)
  (let/ec return
(define arr '())
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
      (let/ec continue
(set! arr (append arr (list (cond [(string? s) (substring s i (+ i 1))] [(hash? s) (hash-ref s i)] [else (take (drop s i) (- (+ i 1) i))]))))
(set! i (+ i 1))
      )
      (loop)))
)
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define m 0)
(let/ec break
  (let loop ()
    (when (_lt m n)
      (let/ec continue
(define j 0)
(let/ec break
  (let loop ()
    (when (_lt j (- n 1))
      (let/ec continue
(if (_gt (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]) (cond [(string? arr) (string-ref arr (+ j 1))] [(hash? arr) (hash-ref arr (+ j 1))] [else (list-ref arr (+ j 1))]))
  (begin
(define tmp (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]))
(set! arr (cond [(hash? arr) (hash-set arr j (cond [(string? arr) (string-ref arr (+ j 1))] [(hash? arr) (hash-ref arr (+ j 1))] [else (list-ref arr (+ j 1))]))] [else (list-set arr j (cond [(string? arr) (string-ref arr (+ j 1))] [(hash? arr) (hash-ref arr (+ j 1))] [else (list-ref arr (+ j 1))]))]))
(set! arr (cond [(hash? arr) (hash-set arr (+ j 1) tmp)] [else (list-set arr (+ j 1) tmp)]))
  )
  (void)
)
(set! j (+ j 1))
      )
      (loop)))
)
(set! m (+ m 1))
      )
      (loop)))
)
(define out "")
(set! i 0)
(let/ec break
  (let loop ()
    (when (_lt i n)
      (let/ec continue
(set! out (string-append out (cond [(string? arr) (string-ref arr i)] [(hash? arr) (hash-ref arr i)] [else (list-ref arr i)])))
(set! i (+ i 1))
      )
      (loop)))
)
(return out)
  ))
(define (sortStrings xs)
  (let/ec return
(define res '())
(define tmp xs)
(let/ec break
  (let loop ()
    (when (_gt (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]) 0)
      (let/ec continue
(define min (cond [(string? tmp) (string-ref tmp 0)] [(hash? tmp) (hash-ref tmp 0)] [else (list-ref tmp 0)]))
(define idx 0)
(define i 1)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]))
      (let/ec continue
(if (_lt (cond [(string? tmp) (string-ref tmp i)] [(hash? tmp) (hash-ref tmp i)] [else (list-ref tmp i)]) min)
  (begin
(set! min (cond [(string? tmp) (string-ref tmp i)] [(hash? tmp) (hash-ref tmp i)] [else (list-ref tmp i)]))
(set! idx i)
  )
  (void)
)
(set! i (+ i 1))
      )
      (loop)))
)
(set! res (append res (list min)))
(define out '())
(define j 0)
(let/ec break
  (let loop ()
    (when (_lt j (cond [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)]))
      (let/ec continue
(if (not (equal? j idx))
  (begin
(set! out (append out (list (cond [(string? tmp) (string-ref tmp j)] [(hash? tmp) (hash-ref tmp j)] [else (list-ref tmp j)]))))
  )
  (void)
)
(set! j (+ j 1))
      )
      (loop)))
)
(set! tmp out)
      )
      (loop)))
)
(return res)
  ))
(define (main )
  (let/ec return
(define words '("abel" "able" "bale" "bela" "elba" "alger" "glare" "lager" "large" "regal" "angel" "angle" "galen" "glean" "lange" "caret" "carte" "cater" "crate" "trace" "elan" "lane" "lean" "lena" "neal" "evil" "levi" "live" "veil" "vile"))
(define groups (hash ))
(define maxLen 0)
(for ([w (if (hash? words) (hash-keys words) words)])
(define k (sortRunes w))
(if (not (cond [(string? groups) (regexp-match? (regexp k) groups)] [(hash? groups) (hash-has-key? groups k)] [else (member k groups)]))
  (begin
(set! groups (cond [(hash? groups) (hash-set groups k (list w))] [else (list-set groups k (list w))]))
  )
  (begin
(set! groups (cond [(hash? groups) (hash-set groups k (append (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]) (list w)))] [else (list-set groups k (append (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]) (list w)))]))
  )
)
(if (_gt (cond [(string? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (string-length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [(hash? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (hash-count (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [else (length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))]) maxLen)
  (begin
(set! maxLen (cond [(string? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (string-length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [(hash? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (hash-count (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [else (length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))]))
  )
  (void)
)
)
(define printed (hash ))
(for ([w (if (hash? words) (hash-keys words) words)])
(define k (sortRunes w))
(if (equal? (cond [(string? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (string-length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [(hash? (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])) (hash-count (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))] [else (length (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)]))]) maxLen)
  (begin
(if (not (cond [(string? printed) (regexp-match? (regexp k) printed)] [(hash? printed) (hash-has-key? printed k)] [else (member k printed)]))
  (begin
(define g (sortStrings (cond [(string? groups) (string-ref groups k)] [(hash? groups) (hash-ref groups k)] [else (list-ref groups k)])))
(define line (string-append "[" (cond [(string? g) (string-ref g 0)] [(hash? g) (hash-ref g 0)] [else (list-ref g 0)])))
(define i 1)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)]))
      (let/ec continue
(set! line (string-append (string-append line " ") (cond [(string? g) (string-ref g i)] [(hash? g) (hash-ref g i)] [else (list-ref g i)])))
(set! i (+ i 1))
      )
      (loop)))
)
(set! line (string-append line "]"))
(displayln line)
(set! printed (cond [(hash? printed) (hash-set printed k #t)] [else (list-set printed k #t)]))
  )
  (void)
)
  )
  (void)
)
)
  ))
(main )
