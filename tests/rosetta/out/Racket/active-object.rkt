; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:41:38Z
#lang racket
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec return
(define term x)
(define sum x)
(define n 1)
(let/ec break
  (let loop ()
    (when (_le n 12)
      (let/ec continue
(define denom (exact->inexact (if (string? (* (* 2 n) (+ (* 2 n) 1))) (string->number (* (* 2 n) (+ (* 2 n) 1))) (* (* 2 n) (+ (* 2 n) 1)))))
(set! term (/ (* (* (- term) x) x) denom))
(set! sum (+ sum term))
(set! n (+ n 1))
      )
      (loop)))
)
(return sum)
  ))
(define dt 0.01)
(define s 0)
(define t1 0)
(define k1 (sinApprox 0))
(define i 1)
(let/ec break
  (let loop ()
    (when (_le i 200)
      (let/ec continue
(define t2 (* (exact->inexact (if (string? i) (string->number i) i)) dt))
(define k2 (sinApprox (* t2 PI)))
(set! s (+ s (* (* (+ k1 k2) 0.5) (- t2 t1))))
(set! t1 t2)
(set! k1 k2)
(set! i (+ i 1))
      )
      (loop)))
)
(define i2 1)
(let/ec break
  (let loop ()
    (when (_le i2 50)
      (let/ec continue
(define t2 (+ 2 (* (exact->inexact (if (string? i2) (string->number i2) i2)) dt)))
(define k2 0)
(set! s (+ s (* (* (+ k1 k2) 0.5) (- t2 t1))))
(set! t1 t2)
(set! k1 k2)
(set! i2 (+ i2 1))
      )
      (loop)))
)
(displayln s)
