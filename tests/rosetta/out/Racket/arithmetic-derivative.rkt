; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:41:42Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (primeFactors n)
  (let/ec return
(define factors '())
(define x n)
(let/ec break
  (let loop ()
    (when (equal? (remainder x 2) 0)
      (let/ec continue
(set! factors (append factors (list 2)))
(set! x (string->number (/ x 2)))
      )
      (loop)))
)
(define p 3)
(let/ec break
  (let loop ()
    (when (_le (* p p) x)
      (let/ec continue
(let/ec break
  (let loop ()
    (when (equal? (remainder x p) 0)
      (let/ec continue
(set! factors (append factors (list p)))
(set! x (string->number (/ x p)))
      )
      (loop)))
)
(set! p (+ p 2))
      )
      (loop)))
)
(if (_gt x 1)
  (begin
(set! factors (append factors (list x)))
  )
  (void)
)
(return factors)
  ))
(define (repeat ch n)
  (let/ec return
(define s "")
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i n)
      (let/ec continue
(set! s (string-append s ch))
(set! i (+ i 1))
      )
      (loop)))
)
(return s)
  ))
(define (D n)
  (let/ec return
(if (_lt n 0)
  (begin
(return (- (D (- n))))
  )
  (void)
)
(if (_lt n 2)
  (begin
(return 0)
  )
  (void)
)
(define factors '())
(if (_lt n 1e+19)
  (begin
(set! factors (primeFactors (string->number n)))
  )
  (begin
(define g (string->number (/ n 100)))
(set! factors (primeFactors g))
(set! factors (append factors (list 2)))
(set! factors (append factors (list 2)))
(set! factors (append factors (list 5)))
(set! factors (append factors (list 5)))
  )
)
(define c (cond [(string? factors) (string-length factors)] [(hash? factors) (hash-count factors)] [else (length factors)]))
(if (equal? c 1)
  (begin
(return 1)
  )
  (void)
)
(if (equal? c 2)
  (begin
(return (exact->inexact (if (string? (+ (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)]) (cond [(string? factors) (string-ref factors 1)] [(hash? factors) (hash-ref factors 1)] [else (list-ref factors 1)]))) (string->number (+ (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)]) (cond [(string? factors) (string-ref factors 1)] [(hash? factors) (hash-ref factors 1)] [else (list-ref factors 1)]))) (+ (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)]) (cond [(string? factors) (string-ref factors 1)] [(hash? factors) (hash-ref factors 1)] [else (list-ref factors 1)])))))
  )
  (void)
)
(define d (/ n (exact->inexact (if (string? (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])) (string->number (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])) (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])))))
(return (+ (* (D d) (exact->inexact (if (string? (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])) (string->number (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])) (cond [(string? factors) (string-ref factors 0)] [(hash? factors) (hash-ref factors 0)] [else (list-ref factors 0)])))) d))
  ))
(define (pad n)
  (let/ec return
(define s (number->string n))
(let/ec break
  (let loop ()
    (when (_lt (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 4)
      (let/ec continue
(set! s (string-append " " s))
      )
      (loop)))
)
(return s)
  ))
(define (main )
  (let/ec return
(define vals '())
(define n (- 99))
(let/ec break
  (let loop ()
    (when (_lt n 101)
      (let/ec continue
(set! vals (append vals (list (string->number (D (exact->inexact (if (string? n) (string->number n) n)))))))
(set! n (+ n 1))
      )
      (loop)))
)
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? vals) (string-length vals)] [(hash? vals) (hash-count vals)] [else (length vals)]))
      (let/ec continue
(define line "")
(define j 0)
(let/ec break
  (let loop ()
    (when (_lt j 10)
      (let/ec continue
(set! line (string-append line (pad (cond [(string? vals) (string-ref vals (+ i j))] [(hash? vals) (hash-ref vals (+ i j))] [else (list-ref vals (+ i j))]))))
(if (_lt j 9)
  (begin
(set! line (string-append line " "))
  )
  (void)
)
(set! j (+ j 1))
      )
      (loop)))
)
(displayln line)
(set! i (+ i 10))
      )
      (loop)))
)
(define pow 1)
(define m 1)
(let/ec break
  (let loop ()
    (when (_lt m 21)
      (let/ec continue
(set! pow (* pow 10))
(define exp (number->string m))
(if (_lt (cond [(string? exp) (string-length exp)] [(hash? exp) (hash-count exp)] [else (length exp)]) 2)
  (begin
(set! exp (string-append exp " "))
  )
  (void)
)
(define res (+ (number->string m) (repeat "0" (- m 1))))
(displayln (string-append (string-append (string-append "D(10^" exp) ") / 7 = ") res))
(set! m (+ m 1))
      )
      (loop)))
)
  ))
(main )
