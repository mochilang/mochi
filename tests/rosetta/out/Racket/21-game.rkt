; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:35:55Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (parseIntStr str)
  (let/ec return
(define i 0)
(define neg #f)
(if (and (_gt (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]) 0) (string=? (cond [(string? str) (substring str 0 1)] [(hash? str) (hash-ref str 0)] [else (take (drop str 0) (- 1 0))]) "-"))
  (begin
(set! neg #t)
(set! i 1)
  )
  (void)
)
(define n 0)
(define digits (hash "0" 0 "1" 1 "2" 2 "3" 3 "4" 4 "5" 5 "6" 6 "7" 7 "8" 8 "9" 9))
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? str) (string-length str)] [(hash? str) (hash-count str)] [else (length str)]))
      (let/ec continue
(set! n (+ (* n 10) (cond [(string? digits) (string-ref digits (cond [(string? str) (substring str i (+ i 1))] [(hash? str) (hash-ref str i)] [else (take (drop str i) (- (+ i 1) i))]))] [(hash? digits) (hash-ref digits (cond [(string? str) (substring str i (+ i 1))] [(hash? str) (hash-ref str i)] [else (take (drop str i) (- (+ i 1) i))]))] [else (list-ref digits (cond [(string? str) (substring str i (+ i 1))] [(hash? str) (hash-ref str i)] [else (take (drop str i) (- (+ i 1) i))]))])))
(set! i (+ i 1))
      )
      (loop)))
)
(if neg
  (begin
(set! n (- n))
  )
  (void)
)
(return n)
  ))
(define (main )
  (let/ec return
(define total 0)
(define computer (equal? (remainder (now ) 2) 0))
(displayln "Enter q to quit at any time\n")
(if computer
  (begin
(displayln "The computer will choose first")
  )
  (begin
(displayln "You will choose first")
  )
)
(displayln "\n\nRunning total is now 0\n\n")
(define round 1)
(define done #f)
(let/ec break
  (let loop ()
    (when (not done)
      (let/ec continue
(displayln (string-append (string-append "ROUND " (number->string round)) ":\n\n"))
(define i 0)
(let/ec break
  (let loop ()
    (when (and (_lt i 2) (not done))
      (let/ec continue
(if computer
  (begin
(define choice 0)
(if (_lt total 18)
  (begin
(set! choice (+ (remainder (now ) 3) 1))
  )
  (begin
(set! choice (- 21 total))
  )
)
(set! total (+ total choice))
(displayln (string-append "The computer chooses " (number->string choice)))
(displayln (string-append "Running total is now " (number->string total)))
(if (equal? total 21)
  (begin
(displayln "\nSo, commiserations, the computer has won!")
(set! done #t)
  )
  (void)
)
  )
  (begin
(let/ec break
  (let loop ()
    (when #t
      (let/ec continue
(displayln "Your choice 1 to 3 : ")
(define line (input ))
(if (or (string=? line "q") (string=? line "Q"))
  (begin
(displayln "OK, quitting the game")
(set! done #t)
(break)
  )
  (void)
)
(define num (parseIntStr line))
(if (or (_lt num 1) (_gt num 3))
  (begin
(if (_gt (+ total num) 21)
  (begin
(displayln "Too big, try again")
  )
  (begin
(displayln "Out of range, try again")
  )
)
(continue)
  )
  (void)
)
(if (_gt (+ total num) 21)
  (begin
(displayln "Too big, try again")
(continue)
  )
  (void)
)
(set! total (+ total num))
(displayln (string-append "Running total is now " (number->string total)))
(break)
      )
      (loop)))
)
(if (equal? total 21)
  (begin
(displayln "\nSo, congratulations, you've won!")
(set! done #t)
  )
  (void)
)
  )
)
(displayln "\n")
(set! computer (not computer))
(set! i (+ i 1))
      )
      (loop)))
)
(set! round (+ round 1))
      )
      (loop)))
)
  ))
(main )
