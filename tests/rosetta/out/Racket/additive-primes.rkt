; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:42Z
#lang racket
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (isPrime n)
  (let/ec return
(if (_lt n 2)
  (begin
(return #f)
  )
  (void)
)
(if (equal? (remainder n 2) 0)
  (begin
(return (equal? n 2))
  )
  (void)
)
(if (equal? (remainder n 3) 0)
  (begin
(return (equal? n 3))
  )
  (void)
)
(define d 5)
(let/ec break
  (let loop ()
    (when (_le (* d d) n)
      (let/ec continue
(if (equal? (remainder n d) 0)
  (begin
(return #f)
  )
  (void)
)
(set! d (+ d 2))
(if (equal? (remainder n d) 0)
  (begin
(return #f)
  )
  (void)
)
(set! d (+ d 4))
      )
      (loop)))
)
(return #t)
  ))
(define (sumDigits n)
  (let/ec return
(define s 0)
(define x n)
(let/ec break
  (let loop ()
    (when (_gt x 0)
      (let/ec continue
(set! s (+ s (remainder x 10)))
(set! x (string->number (/ x 10)))
      )
      (loop)))
)
(return s)
  ))
(define (pad n)
  (let/ec return
(if (_lt n 10)
  (begin
(return (string-append "  " (number->string n)))
  )
  (void)
)
(if (_lt n 100)
  (begin
(return (string-append " " (number->string n)))
  )
  (void)
)
(return (number->string n))
  ))
(define (main )
  (let/ec return
(displayln "Additive primes less than 500:")
(define count 0)
(define line "")
(define lineCount 0)
(define i 2)
(let/ec break
  (let loop ()
    (when (_lt i 500)
      (let/ec continue
(if (and (isPrime i) (isPrime (sumDigits i)))
  (begin
(set! count (+ count 1))
(set! line (string-append (string-append line (pad i)) "  "))
(set! lineCount (+ lineCount 1))
(if (equal? lineCount 10)
  (begin
(displayln (substring line 0 (- (string-length line) 2)))
(set! line "")
(set! lineCount 0)
  )
  (void)
)
  )
  (void)
)
(if (_gt i 2)
  (begin
(set! i (+ i 2))
  )
  (begin
(set! i (+ i 1))
  )
)
      )
      (loop)))
)
(if (_gt lineCount 0)
  (begin
(displayln (substring line 0 (- (string-length line) 2)))
  )
  (void)
)
(displayln (string-append (number->string count) " additive primes found."))
  ))
(main )
