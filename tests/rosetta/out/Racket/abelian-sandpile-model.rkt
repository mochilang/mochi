; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:06Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define dim 16)
(define (newPile d)
  (let/ec return
(define b '())
(define y 0)
(let/ec break
  (let loop ()
    (when (_lt y d)
      (let/ec continue
(define row '())
(define x 0)
(let/ec break
  (let loop ()
    (when (_lt x d)
      (let/ec continue
(set! row (append row (list 0)))
(set! x (+ x 1))
      )
      (loop)))
)
(set! b (append b (list row)))
(set! y (+ y 1))
      )
      (loop)))
)
(return b)
  ))
(define (handlePile pile x y)
  (let/ec return
(if (_ge (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)]) 4)
  (begin
(set! pile (cond [(hash? pile) (hash-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x (- (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)]) 4))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x (- (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)]) 4))]))] [else (list-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x (- (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)]) 4))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x (- (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) x)]) 4))]))]))
(if (_gt y 0)
  (begin
(set! pile (cond [(hash? pile) (hash-set pile (- y 1) (cond [(hash? (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-set (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (string-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (string-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)]) 1))]))] [else (list-set pile (- y 1) (cond [(hash? (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-set (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (string-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (string-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)]) 1))]))]))
(if (_ge (cond [(string? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (string-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (- y 1))] [(hash? pile) (hash-ref pile (- y 1))] [else (list-ref pile (- y 1))]) x)]) 4)
  (begin
(set! pile (handlePile pile x (- y 1)))
  )
  (void)
)
  )
  (void)
)
(if (_gt x 0)
  (begin
(set! pile (cond [(hash? pile) (hash-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))]) 1))]))] [else (list-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))]) 1))]))]))
(if (_ge (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (- x 1))]) 4)
  (begin
(set! pile (handlePile pile (- x 1) y))
  )
  (void)
)
  )
  (void)
)
(if (_lt y (- dim 1))
  (begin
(set! pile (cond [(hash? pile) (hash-set pile (+ y 1) (cond [(hash? (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-set (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (string-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (string-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)]) 1))]))] [else (list-set pile (+ y 1) (cond [(hash? (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-set (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (string-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x (+ (cond [(string? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (string-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)]) 1))]))]))
(if (_ge (cond [(string? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (string-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [(hash? (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))])) (hash-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)] [else (list-ref (cond [(string? pile) (string-ref pile (+ y 1))] [(hash? pile) (hash-ref pile (+ y 1))] [else (list-ref pile (+ y 1))]) x)]) 4)
  (begin
(set! pile (handlePile pile x (+ y 1)))
  )
  (void)
)
  )
  (void)
)
(if (_lt x (- dim 1))
  (begin
(set! pile (cond [(hash? pile) (hash-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))]) 1))]))] [else (list-set pile y (cond [(hash? (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))]) 1))] [else (list-set (cond [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1) (+ (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))]) 1))]))]))
(if (_ge (cond [(string? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (string-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [(hash? (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)])) (hash-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))] [else (list-ref (cond [(string? pile) (string-ref pile y)] [(hash? pile) (hash-ref pile y)] [else (list-ref pile y)]) (+ x 1))]) 4)
  (begin
(set! pile (handlePile pile (+ x 1) y))
  )
  (void)
)
  )
  (void)
)
(set! pile (handlePile pile x y))
  )
  (void)
)
(return pile)
  ))
(define (drawPile pile d)
  (let/ec return
(define chars '(" " "░" "▓" "█"))
(define row 0)
(let/ec break
  (let loop ()
    (when (_lt row d)
      (let/ec continue
(define line "")
(define col 0)
(let/ec break
  (let loop ()
    (when (_lt col d)
      (let/ec continue
(define v (cond [(string? (cond [(string? pile) (string-ref pile row)] [(hash? pile) (hash-ref pile row)] [else (list-ref pile row)])) (string-ref (cond [(string? pile) (string-ref pile row)] [(hash? pile) (hash-ref pile row)] [else (list-ref pile row)]) col)] [(hash? (cond [(string? pile) (string-ref pile row)] [(hash? pile) (hash-ref pile row)] [else (list-ref pile row)])) (hash-ref (cond [(string? pile) (string-ref pile row)] [(hash? pile) (hash-ref pile row)] [else (list-ref pile row)]) col)] [else (list-ref (cond [(string? pile) (string-ref pile row)] [(hash? pile) (hash-ref pile row)] [else (list-ref pile row)]) col)]))
(if (_gt v 3)
  (begin
(set! v 3)
  )
  (void)
)
(set! line (string-append line (cond [(string? chars) (string-ref chars v)] [(hash? chars) (hash-ref chars v)] [else (list-ref chars v)])))
(set! col (+ col 1))
      )
      (loop)))
)
(displayln line)
(set! row (+ row 1))
      )
      (loop)))
)
  ))
(define (main )
  (let/ec return
(define pile (newPile 16))
(define hdim 7)
(set! pile (cond [(hash? pile) (hash-set pile hdim (cond [(hash? (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)])) (hash-set (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)]) hdim 16)] [else (list-set (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)]) hdim 16)]))] [else (list-set pile hdim (cond [(hash? (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)])) (hash-set (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)]) hdim 16)] [else (list-set (cond [(hash? pile) (hash-ref pile hdim)] [else (list-ref pile hdim)]) hdim 16)]))]))
(set! pile (handlePile pile hdim hdim))
(drawPile pile 16)
  ))
(main )
