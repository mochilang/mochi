; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:35:58Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (bigTrim a)
  (let/ec return
(define n (if (and (hash? a) (hash-has-key? a 'items)) (length (hash-ref a 'items)) (length a)))
(let/ec break
  (let loop ()
    (when (and (_gt n 1) (equal? (cond [(string? a) (string-ref a (- n 1))] [(hash? a) (hash-ref a (- n 1))] [else (list-ref a (- n 1))]) 0))
      (let/ec continue
(set! a (cond [(string? a) (substring a 0 (- n 1))] [(hash? a) (hash-ref a 0)] [else (take (drop a 0) (- (- n 1) 0))]))
(set! n (- n 1))
      )
      (loop)))
)
(return a)
  ))
(define (bigFromInt x)
  (let/ec return
(if (equal? x 0)
  (begin
(return '(0))
  )
  (void)
)
(define digits '())
(define n x)
(let/ec break
  (let loop ()
    (when (_gt n 0)
      (let/ec continue
(set! digits (append digits (list (remainder n 10))))
(set! n (/ n 10))
      )
      (loop)))
)
(return digits)
  ))
(define (bigAdd a b)
  (let/ec return
(define res '())
(define carry 0)
(define i 0)
(let/ec break
  (let loop ()
    (when (or (or (_lt i (if (and (hash? a) (hash-has-key? a 'items)) (length (hash-ref a 'items)) (length a))) (_lt i (if (and (hash? b) (hash-has-key? b 'items)) (length (hash-ref b 'items)) (length b)))) (_gt carry 0))
      (let/ec continue
(define av 0)
(if (_lt i (if (and (hash? a) (hash-has-key? a 'items)) (length (hash-ref a 'items)) (length a)))
  (begin
(set! av (cond [(string? a) (string-ref a i)] [(hash? a) (hash-ref a i)] [else (list-ref a i)]))
  )
  (void)
)
(define bv 0)
(if (_lt i (if (and (hash? b) (hash-has-key? b 'items)) (length (hash-ref b 'items)) (length b)))
  (begin
(set! bv (cond [(string? b) (string-ref b i)] [(hash? b) (hash-ref b i)] [else (list-ref b i)]))
  )
  (void)
)
(define s (+ (+ av bv) carry))
(set! res (append res (list (remainder s 10))))
(set! carry (/ s 10))
(set! i (+ i 1))
      )
      (loop)))
)
(return (bigTrim res))
  ))
(define (bigSub a b)
  (let/ec return
(define res '())
(define borrow 0)
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (if (and (hash? a) (hash-has-key? a 'items)) (length (hash-ref a 'items)) (length a)))
      (let/ec continue
(define av (cond [(string? a) (string-ref a i)] [(hash? a) (hash-ref a i)] [else (list-ref a i)]))
(define bv 0)
(if (_lt i (if (and (hash? b) (hash-has-key? b 'items)) (length (hash-ref b 'items)) (length b)))
  (begin
(set! bv (cond [(string? b) (string-ref b i)] [(hash? b) (hash-ref b i)] [else (list-ref b i)]))
  )
  (void)
)
(define diff (- (- av bv) borrow))
(if (_lt diff 0)
  (begin
(set! diff (+ diff 10))
(set! borrow 1)
  )
  (begin
(set! borrow 0)
  )
)
(set! res (append res (list diff)))
(set! i (+ i 1))
      )
      (loop)))
)
(return (bigTrim res))
  ))
(define (bigToString a)
  (let/ec return
(define s "")
(define i (- (if (and (hash? a) (hash-has-key? a 'items)) (length (hash-ref a 'items)) (length a)) 1))
(let/ec break
  (let loop ()
    (when (_ge i 0)
      (let/ec continue
(set! s (string-append s (number->string (cond [(string? a) (string-ref a i)] [(hash? a) (hash-ref a i)] [else (list-ref a i)]))))
(set! i (- i 1))
      )
      (loop)))
)
(return s)
  ))
(define (minInt a b)
  (let/ec return
(if (_lt a b)
  (begin
(return a)
  )
  (begin
(return b)
  )
)
  ))
(define (cumu n)
  (let/ec return
(define cache (list (list (bigFromInt 1))))
(define y 1)
(let/ec break
  (let loop ()
    (when (_le y n)
      (let/ec continue
(define row (list (bigFromInt 0)))
(define x 1)
(let/ec break
  (let loop ()
    (when (_le x y)
      (let/ec continue
(define val (cond [(string? (cond [(string? cache) (string-ref cache (- y x))] [(hash? cache) (hash-ref cache (- y x))] [else (list-ref cache (- y x))])) (string-ref (cond [(string? cache) (string-ref cache (- y x))] [(hash? cache) (hash-ref cache (- y x))] [else (list-ref cache (- y x))]) (minInt x (- y x)))] [(hash? (cond [(string? cache) (string-ref cache (- y x))] [(hash? cache) (hash-ref cache (- y x))] [else (list-ref cache (- y x))])) (hash-ref (cond [(string? cache) (string-ref cache (- y x))] [(hash? cache) (hash-ref cache (- y x))] [else (list-ref cache (- y x))]) (minInt x (- y x)))] [else (list-ref (cond [(string? cache) (string-ref cache (- y x))] [(hash? cache) (hash-ref cache (- y x))] [else (list-ref cache (- y x))]) (minInt x (- y x)))]))
(set! row (append row (list (bigAdd (cond [(string? row) (string-ref row (- (if (and (hash? row) (hash-has-key? row 'items)) (length (hash-ref row 'items)) (length row)) 1))] [(hash? row) (hash-ref row (- (if (and (hash? row) (hash-has-key? row 'items)) (length (hash-ref row 'items)) (length row)) 1))] [else (list-ref row (- (if (and (hash? row) (hash-has-key? row 'items)) (length (hash-ref row 'items)) (length row)) 1))]) val))))
(set! x (+ x 1))
      )
      (loop)))
)
(set! cache (append cache (list row)))
(set! y (+ y 1))
      )
      (loop)))
)
(return (cond [(string? cache) (string-ref cache n)] [(hash? cache) (hash-ref cache n)] [else (list-ref cache n)]))
  ))
(define (row n)
  (let/ec return
(define e (cumu n))
(define out '())
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i n)
      (let/ec continue
(define diff (bigSub (cond [(string? e) (string-ref e (+ i 1))] [(hash? e) (hash-ref e (+ i 1))] [else (list-ref e (+ i 1))]) (cond [(string? e) (string-ref e i)] [(hash? e) (hash-ref e i)] [else (list-ref e i)])))
(set! out (append out (list (bigToString diff))))
(set! i (+ i 1))
      )
      (loop)))
)
(return out)
  ))
(displayln "rows:")
(define x 1)
(let/ec break
  (let loop ()
    (when (_lt x 11)
      (let/ec continue
(define r (row x))
(define line "")
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (if (and (hash? r) (hash-has-key? r 'items)) (length (hash-ref r 'items)) (length r)))
      (let/ec continue
(set! line (string-append (string-append (string-append line " ") (cond [(string? r) (string-ref r i)] [(hash? r) (hash-ref r i)] [else (list-ref r i)])) " "))
(set! i (+ i 1))
      )
      (loop)))
)
(displayln line)
(set! x (+ x 1))
      )
      (loop)))
)
(displayln "")
(displayln "sums:")
(for ([num (if (hash? '(23 123 1234)) (hash-keys '(23 123 1234)) '(23 123 1234))])
(define r (cumu num))
(displayln (string-append (string-append (number->string num) " ") (bigToString (cond [(string? r) (string-ref r (- (if (and (hash? r) (hash-has-key? r 'items)) (length (hash-ref r 'items)) (length r)) 1))] [(hash? r) (hash-ref r (- (if (and (hash? r) (hash-has-key? r 'items)) (length (hash-ref r 'items)) (length r)) 1))] [else (list-ref r (- (if (and (hash? r) (hash-has-key? r 'items)) (length (hash-ref r 'items)) (length r)) 1))]))))
)
