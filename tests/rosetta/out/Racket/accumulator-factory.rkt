; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:23Z
#lang racket
(require racket/list)
(define (accumulator sum)
  (let/ec return
(define store (list sum))
(define (add nv)
  (let/ec return
(set! store (cond [(hash? store) (hash-set store 0 (+ (cond [(string? store) (string-ref store 0)] [(hash? store) (hash-ref store 0)] [else (list-ref store 0)]) nv))] [else (list-set store 0 (+ (cond [(string? store) (string-ref store 0)] [(hash? store) (hash-ref store 0)] [else (list-ref store 0)]) nv))]))
(return (cond [(string? store) (string-ref store 0)] [(hash? store) (hash-ref store 0)] [else (list-ref store 0)]))
  ))
(return add)
  ))
(define (main )
  (let/ec return
(define x (accumulator 1))
(x 5)
(accumulator 3)
(displayln (number->string (x 2.3)))
  ))
(main )
