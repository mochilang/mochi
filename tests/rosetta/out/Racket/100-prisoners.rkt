; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:41:23Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (shuffle xs)
  (let/ec return
(define arr xs)
(define i 99)
(let/ec break
  (let loop ()
    (when (_gt i 0)
      (let/ec continue
(define j (remainder (now ) (+ i 1)))
(define tmp (cond [(string? arr) (string-ref arr i)] [(hash? arr) (hash-ref arr i)] [else (list-ref arr i)]))
(set! arr (cond [(hash? arr) (hash-set arr i (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]))] [else (list-set arr i (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]))]))
(set! arr (cond [(hash? arr) (hash-set arr j tmp)] [else (list-set arr j tmp)]))
(set! i (- i 1))
      )
      (loop)))
)
(return arr)
  ))
(define (doTrials trials np strategy)
  (let/ec return
(define pardoned 0)
(define t 0)
(let/ec break
  (let loop ()
    (when (_lt t trials)
      (let/ec continue
(define drawers '())
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i 100)
      (let/ec continue
(set! drawers (append drawers (list i)))
(set! i (+ i 1))
      )
      (loop)))
)
(set! drawers (shuffle drawers))
(define p 0)
(define success #t)
(let/ec break
  (let loop ()
    (when (_lt p np)
      (let/ec continue
(define found #f)
(if (string=? strategy "optimal")
  (begin
(define prev p)
(define d 0)
(let/ec break
  (let loop ()
    (when (_lt d 50)
      (let/ec continue
(define this (cond [(string? drawers) (string-ref drawers prev)] [(hash? drawers) (hash-ref drawers prev)] [else (list-ref drawers prev)]))
(if (equal? this p)
  (begin
(set! found #t)
(break)
  )
  (void)
)
(set! prev this)
(set! d (+ d 1))
      )
      (loop)))
)
  )
  (begin
(define opened '())
(define k 0)
(let/ec break
  (let loop ()
    (when (_lt k 100)
      (let/ec continue
(set! opened (append opened (list #f)))
(set! k (+ k 1))
      )
      (loop)))
)
(define d 0)
(let/ec break
  (let loop ()
    (when (_lt d 50)
      (let/ec continue
(define n (remainder (now ) 100))
(let/ec break
  (let loop ()
    (when (cond [(string? opened) (string-ref opened n)] [(hash? opened) (hash-ref opened n)] [else (list-ref opened n)])
      (let/ec continue
(set! n (remainder (now ) 100))
      )
      (loop)))
)
(set! opened (cond [(hash? opened) (hash-set opened n #t)] [else (list-set opened n #t)]))
(if (equal? (cond [(string? drawers) (string-ref drawers n)] [(hash? drawers) (hash-ref drawers n)] [else (list-ref drawers n)]) p)
  (begin
(set! found #t)
(break)
  )
  (void)
)
(set! d (+ d 1))
      )
      (loop)))
)
  )
)
(if (not found)
  (begin
(set! success #f)
(break)
  )
  (void)
)
(set! p (+ p 1))
      )
      (loop)))
)
(if success
  (begin
(set! pardoned (+ pardoned 1))
  )
  (void)
)
(set! t (+ t 1))
      )
      (loop)))
)
(define rf (* (/ (exact->inexact (if (string? pardoned) (string->number pardoned) pardoned)) (exact->inexact (if (string? trials) (string->number trials) trials))) 100))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "  strategy = " strategy) "  pardoned = ") (number->string pardoned)) " relative frequency = ") (number->string rf)) "%"))
  ))
(define (main )
  (let/ec return
(define trials 1000)
(for ([np (if (hash? '(10 100)) (hash-keys '(10 100)) '(10 100))])
(displayln (string-append (string-append (string-append (string-append "Results from " (number->string trials)) " trials with ") (number->string np)) " prisoners:\n"))
(for ([strat (if (hash? '("random" "optimal")) (hash-keys '("random" "optimal")) '("random" "optimal"))])
(doTrials trials np strat)
)
)
  ))
(main )
