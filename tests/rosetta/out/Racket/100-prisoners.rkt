; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
#lang racket
(require racket/list)
(define (shuffle xs)
  (let/ec return
(define arr xs)
(define i 99)
(let/ec break
  (let loop ()
    (when (> i 0)
      (let/ec continue
        (let ()
(define j (remainder (inexact->exact (round (* (current-inexact-milliseconds) 1000000))) (+ i 1)))
(define tmp (cond [(string? arr) (string-ref arr i)] [(hash? arr) (hash-ref arr i)] [else (list-ref arr i)]))
(set! arr (cond [(hash? arr) (hash-set arr i (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]))] [else (list-set arr i (cond [(string? arr) (string-ref arr j)] [(hash? arr) (hash-ref arr j)] [else (list-ref arr j)]))]))
(set! arr (cond [(hash? arr) (hash-set arr j tmp)] [else (list-set arr j tmp)]))
(set! i (- i 1))
        )
      )
      (loop)))
)
(return arr)
  ))
(define (doTrials trials np strategy)
  (let/ec return
(define pardoned 0)
(define t 0)
(let/ec break
  (let loop ()
    (when (< t trials)
      (let/ec continue
        (let ()
(define drawers '())
(define i 0)
(let/ec break
  (let loop ()
    (when (< i 100)
      (let/ec continue
        (let ()
(set! drawers (append drawers (list i)))
(set! i (+ i 1))
        )
      )
      (loop)))
)
(set! drawers (shuffle drawers))
(define p 0)
(define success #t)
(let/ec break
  (let loop ()
    (when (< p np)
      (let/ec continue
        (let ()
(define found #f)
(if (string=? strategy "optimal")
  (begin
    (let ()
(define prev p)
(define d 0)
(let/ec break
  (let loop ()
    (when (< d 50)
      (let/ec continue
        (let ()
(define this (cond [(string? drawers) (string-ref drawers prev)] [(hash? drawers) (hash-ref drawers prev)] [else (list-ref drawers prev)]))
(if (equal? this p)
  (begin
    (let ()
(set! found #t)
(break)
    )
  )
  (void)
)
(set! prev this)
(set! d (+ d 1))
        )
      )
      (loop)))
)
    )
  )
  (begin
    (let ()
(define opened '())
(define k 0)
(let/ec break
  (let loop ()
    (when (< k 100)
      (let/ec continue
        (let ()
(set! opened (append opened (list #f)))
(set! k (+ k 1))
        )
      )
      (loop)))
)
(define d 0)
(let/ec break
  (let loop ()
    (when (< d 50)
      (let/ec continue
        (let ()
(define n (remainder (inexact->exact (round (* (current-inexact-milliseconds) 1000000))) 100))
(let/ec break
  (let loop ()
    (when (cond [(string? opened) (string-ref opened n)] [(hash? opened) (hash-ref opened n)] [else (list-ref opened n)])
      (let/ec continue
        (let ()
(set! n (remainder (inexact->exact (round (* (current-inexact-milliseconds) 1000000))) 100))
        )
      )
      (loop)))
)
(set! opened (cond [(hash? opened) (hash-set opened n #t)] [else (list-set opened n #t)]))
(if (equal? (cond [(string? drawers) (string-ref drawers n)] [(hash? drawers) (hash-ref drawers n)] [else (list-ref drawers n)]) p)
  (begin
    (let ()
(set! found #t)
(break)
    )
  )
  (void)
)
(set! d (+ d 1))
        )
      )
      (loop)))
)
    )
  )
)
(if (not found)
  (begin
    (let ()
(set! success #f)
(break)
    )
  )
  (void)
)
(set! p (+ p 1))
        )
      )
      (loop)))
)
(if success
  (begin
    (let ()
(set! pardoned (+ pardoned 1))
    )
  )
  (void)
)
(set! t (+ t 1))
        )
      )
      (loop)))
)
(define rf (* (/ (exact->inexact (if (string? pardoned) (string->number pardoned) pardoned)) (exact->inexact (if (string? trials) (string->number trials) trials))) 100))
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "  strategy = " strategy) "  pardoned = ") (number->string pardoned)) " relative frequency = ") (number->string rf)) "%"))
  ))
(define (main )
  (let/ec return
(define trials 1000)
(for ([np (if (hash? '(10 100)) (hash-keys '(10 100)) '(10 100))])
(displayln (string-append (string-append (string-append (string-append "Results from " (number->string trials)) " trials with ") (number->string np)) " prisoners:\n"))
(for ([strat (if (hash? '("random" "optimal")) (hash-keys '("random" "optimal")) '("random" "optimal"))])
(doTrials trials np strat)
)
)
  ))
(main )
