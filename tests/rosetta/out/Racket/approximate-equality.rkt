; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:37:46Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (abs x)
  (let/ec return
(if (_lt x 0)
  (begin
(return (- x))
  )
  (void)
)
(return x)
  ))
(define (maxf a b)
  (let/ec return
(if (_gt a b)
  (begin
(return a)
  )
  (void)
)
(return b)
  ))
(define (isClose a b)
  (let/ec return
(define relTol 1e-09)
(define t (abs (- a b)))
(define u (* relTol (maxf (abs a) (abs b))))
(return (_le t u))
  ))
(define (sqrtApprox x)
  (let/ec return
(define guess x)
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i 10)
      (let/ec continue
(set! guess (/ (+ guess (/ x guess)) 2))
(set! i (+ i 1))
      )
      (loop)))
)
(return guess)
  ))
(define (main )
  (let/ec return
(define root2 (sqrtApprox 2))
(define pairs (list '(1.0000000000000002e+14 1.0000000000000002e+14) '(100.01 100.011) (list (/ 1.0000000000000002e+13 10000) 1.0000000000000001e+09) '(0.001 0.0010000001) '(1.01e-22 0) (list (* root2 root2) 2) (list (* (- root2) root2) (- 2)) '(1e+17 1e+17) '(3.141592653589793 3.141592653589793)))
(for ([pair (if (hash? pairs) (hash-keys pairs) pairs)])
(define a (cond [(string? pair) (string-ref pair 0)] [(hash? pair) (hash-ref pair 0)] [else (list-ref pair 0)]))
(define b (cond [(string? pair) (string-ref pair 1)] [(hash? pair) (hash-ref pair 1)] [else (list-ref pair 1)]))
(define s (if (isClose a b) "â‰ˆ" "â‰‰"))
(displayln (string-append (string-append (string-append (string-append (number->string a) " ") s) " ") (number->string b)))
)
  ))
(main )
