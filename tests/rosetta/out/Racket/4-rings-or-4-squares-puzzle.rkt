; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:35:57Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (validComb a b c d e f g)
  (let/ec return
(define square1 (+ a b))
(define square2 (+ (+ b c) d))
(define square3 (+ (+ d e) f))
(define square4 (+ f g))
(return (and (and (equal? square1 square2) (equal? square2 square3)) (equal? square3 square4)))
  ))
(define (isUnique a b c d e f g)
  (let/ec return
(define nums (list a b c d e f g))
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]))
      (let/ec continue
(define j (+ i 1))
(let/ec break
  (let loop ()
    (when (_lt j (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]))
      (let/ec continue
(if (equal? (cond [(string? nums) (string-ref nums i)] [(hash? nums) (hash-ref nums i)] [else (list-ref nums i)]) (cond [(string? nums) (string-ref nums j)] [(hash? nums) (hash-ref nums j)] [else (list-ref nums j)]))
  (begin
(return #f)
  )
  (void)
)
(set! j (+ j 1))
      )
      (loop)))
)
(set! i (+ i 1))
      )
      (loop)))
)
(return #t)
  ))
(define (getCombs low high unique)
  (let/ec return
(define valid '())
(define count 0)
(for ([b (in-range low (+ high 1))])
(for ([c (in-range low (+ high 1))])
(for ([d (in-range low (+ high 1))])
(define s (+ (+ b c) d))
(for ([e (in-range low (+ high 1))])
(let/ec break
  (for ([f (in-range low (+ high 1))])
    (let/ec continue
(define a (- s b))
(define g (- s f))
(if (or (_lt a low) (_gt a high))
  (begin
(continue)
  )
  (void)
)
(if (or (_lt g low) (_gt g high))
  (begin
(continue)
  )
  (void)
)
(if (not (equal? (+ (+ d e) f) s))
  (begin
(continue)
  )
  (void)
)
(if (not (equal? (+ f g) s))
  (begin
(continue)
  )
  (void)
)
(if (or (not unique) (isUnique a b c d e f g))
  (begin
(set! valid (append valid (list (list a b c d e f g))))
(set! count (+ count 1))
  )
  (void)
)
    )
  )
)
)
)
)
)
(return (hash "count" count "list" valid))
  ))
(define r1 (getCombs 1 7 #t))
(displayln (string-append (number->string (cond [(string? r1) (string-ref r1 "count")] [(hash? r1) (hash-ref r1 "count")] [else (list-ref r1 "count")])) " unique solutions in 1 to 7"))
(displayln (cond [(string? r1) (string-ref r1 "list")] [(hash? r1) (hash-ref r1 "list")] [else (list-ref r1 "list")]))
(define r2 (getCombs 3 9 #t))
(displayln (string-append (number->string (cond [(string? r2) (string-ref r2 "count")] [(hash? r2) (hash-ref r2 "count")] [else (list-ref r2 "count")])) " unique solutions in 3 to 9"))
(displayln (cond [(string? r2) (string-ref r2 "list")] [(hash? r2) (hash-ref r2 "list")] [else (list-ref r2 "list")]))
(define r3 (getCombs 0 9 #f))
(displayln (string-append (number->string (cond [(string? r3) (string-ref r3 "count")] [(hash? r3) (hash-ref r3 "count")] [else (list-ref r3 "count")])) " non-unique solutions in 0 to 9"))
