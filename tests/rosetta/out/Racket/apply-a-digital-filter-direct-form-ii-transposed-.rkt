; Generated by Mochi compiler v0.10.26 on 2025-07-16T11:37:45Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_to_string v) (format "~a" v))

(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))

(define (_gt a b) (_lt b a))
(define (_le a b) (or (_lt a b) (equal? a b)))
(define (_ge a b) (or (_gt a b) (equal? a b)))

(define (_min v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_lt n m) (set! m n))))
    m))

(define (_max v)
  (let* ([lst (cond [(and (hash? v) (hash-has-key? v 'items)) (hash-ref v 'items)]
                    [(list? v) v]
                    [else '()])]
         [m 0])
    (when (not (null? lst))
      (set! m (car lst))
      (for ([n (cdr lst)])
        (when (_gt n m) (set! m n))))
    m))

(define (_json-fix v)
  (cond
    [(and (number? v) (rational? v) (not (integer? v))) (real->double-flonum v)]
    [(list? v) (map _json-fix v)]
    [(hash? v) (for/hash ([(k val) v]) (values k (_json-fix val)))]
    [else v]))

(define (applyFilter input a b)
  (let/ec return
(define out '())
(define scale (/ 1 (cond [(string? a) (string-ref a 0)] [(hash? a) (hash-ref a 0)] [else (list-ref a 0)])))
(define i 0)
(let/ec break
  (let loop ()
    (when (_lt i (cond [(string? input) (string-length input)] [(hash? input) (hash-count input)] [else (length input)]))
      (let/ec continue
(define tmp 0)
(define j 0)
(let/ec break
  (let loop ()
    (when (and (_le j i) (_lt j (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])))
      (let/ec continue
(set! tmp (+ tmp (* (cond [(string? b) (string-ref b j)] [(hash? b) (hash-ref b j)] [else (list-ref b j)]) (cond [(string? input) (string-ref input (- i j))] [(hash? input) (hash-ref input (- i j))] [else (list-ref input (- i j))]))))
(set! j (+ j 1))
      )
      (loop)))
)
(set! j 0)
(let/ec break
  (let loop ()
    (when (and (_lt j i) (_lt (+ j 1) (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])))
      (let/ec continue
(set! tmp (- tmp (* (cond [(string? a) (string-ref a (+ j 1))] [(hash? a) (hash-ref a (+ j 1))] [else (list-ref a (+ j 1))]) (cond [(string? out) (string-ref out (- (- i j) 1))] [(hash? out) (hash-ref out (- (- i j) 1))] [else (list-ref out (- (- i j) 1))]))))
(set! j (+ j 1))
      )
      (loop)))
)
(set! out (append out (list (* tmp scale))))
(set! i (+ i 1))
      )
      (loop)))
)
(return out)
  ))
(define a (list 1 (- 2.7756e-16) 0.33333333 (- 1.85e-17)))
(define b '(0.16666667 0.5 0.5 0.16666667))
(define sig (list (- 0.917843918645) 0.141984778794 1.20536903482 0.190286794412 (- 0.662370894973) (- 1.00700480494) (- 0.404707073677) 0.800482325044 0.743500089861 1.01090520172 0.741527555207 0.277841675195 0.400833448236 (- 0.2085993586) (- 0.172842103641) (- 0.134316096293) 0.0259303398477 0.490105989562 0.549391221511 0.9047198589))
(define res (applyFilter sig a b))
(define k 0)
(let/ec break
  (let loop ()
    (when (_lt k (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]))
      (let/ec continue
(displayln (cond [(string? res) (string-ref res k)] [(hash? res) (hash-ref res k)] [else (list-ref res k)]))
(set! k (+ k 1))
      )
      (loop)))
)
