; Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
#lang racket
(require racket/list)
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))
(define (_to_string v)
  (cond
    [(eq? v #t) "true"]
    [(eq? v #f) "false"]
    [(void? v) "<nil>"]
    [(list? v) (string-join (map _to_string v) " ")]
    [else (format "~a" v)]))
(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))
(define doors '())
(for ([i (in-range 0 100)])
  (let ()
(set! doors (append doors (list #f)))
  )
)
(for ([pass (in-range 1 101)])
  (let ()
(define idx (- pass 1))
(let/ec break
  (let loop ()
    (when (< idx 100)
      (let/ec continue
        (let ()
(set! doors (cond [(hash? doors) (hash-set doors idx (not (cond [(string? doors) (string-ref doors idx)] [(hash? doors) (hash-ref doors idx)] [else (list-ref doors idx)])))] [else (list-set doors idx (not (cond [(string? doors) (string-ref doors idx)] [(hash? doors) (hash-ref doors idx)] [else (list-ref doors idx)])))]))
(set! idx (if (and (string? idx) (string? pass)) (string-append idx pass) (+ idx pass)))
        )
      )
      (loop)))
)
  )
)
(for ([row (in-range 0 10)])
  (let ()
(define line "")
(for ([col (in-range 0 10)])
  (let ()
(define idx (if (and (string? (* row 10)) (string? col)) (string-append (* row 10) col) (+ (* row 10) col)))
(if (cond [(string? doors) (string-ref doors idx)] [(hash? doors) (hash-ref doors idx)] [else (list-ref doors idx)])
  (begin
    (let ()
(set! line (string-append line "1"))
    )
  )
  (begin
    (let ()
(set! line (string-append line "0"))
    )
  )
)
(if (_lt col 9)
  (begin
    (let ()
(set! line (string-append line " "))
    )
  )
  (void)
)
  )
)
(displayln line)
  )
)
