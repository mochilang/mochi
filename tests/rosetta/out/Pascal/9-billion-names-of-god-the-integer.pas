// Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
program _BillionNamesOfGodTheInteger;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, Classes, Variants;

type
  generic TArray<T> = array of T;
generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;


var
  i: Variant;
  line: string;
  num: function(p0: Variant): integer is nested;
  r: Variant;
  x: integer;

function bigTrim(a: specialize TArray<integer>): specialize TArray<integer>;
var
  n: Variant;
begin
  n := Length(a);
  while ((n > 1) and (specialize _indexList<integer>(a, n - 1) = 0)) do
  begin
    a := specialize _sliceList<integer>(a, 0, n - 1);
    n := n - 1;
  end;
  result := a;
  exit;
end;

function bigFromInt(x: integer): specialize TArray<integer>;
var
  digits: specialize TArray<Variant>;
  n: Variant;
begin
  if (x = 0) then ;
  digits := specialize TArray<Variant>([]);
  n := x;
  while (n > 0) do
  begin
    digits := specialize _appendList<Variant>(digits, n mod 10);
    n := n div 10;
  end;
  result := digits;
  exit;
end;

function bigAdd(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<integer>;
var
  av: integer;
  bv: integer;
  carry: integer;
  i: integer;
  res: specialize TArray<Variant>;
  s: integer;
begin
  res := specialize TArray<Variant>([]);
  carry := 0;
  i := 0;
  while (((i < Length(a)) or (i < Length(b))) or (carry > 0)) do
  begin
    av := 0;
    if (i < Length(a)) then ;
    bv := 0;
    if (i < Length(b)) then ;
    s := av + bv + carry;
    res := specialize _appendList<Variant>(res, s mod 10);
    carry := s div 10;
    i := i + 1;
  end;
  result := bigTrim(res);
  exit;
end;

function bigSub(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<integer>;
var
  av: Variant;
  borrow: integer;
  bv: integer;
  diff: Variant;
  i: integer;
  res: specialize TArray<Variant>;
begin
  res := specialize TArray<Variant>([]);
  borrow := 0;
  i := 0;
  while (i < Length(a)) do
  begin
    av := specialize _indexList<integer>(a, i);
    bv := 0;
    if (i < Length(b)) then ;
    diff := av - bv - borrow;
    if (diff < 0) then
    begin
      diff := diff + 10;
      borrow := 1;
    end else
    begin
      borrow := 0;
    end;
    res := specialize _appendList<Variant>(res, diff);
    i := i + 1;
  end;
  result := bigTrim(res);
  exit;
end;

function bigToString(a: specialize TArray<integer>): string;
var
  i: Variant;
  s: string;
begin
  s := '';
  i := Length(a) - 1;
  while (i >= 0) do
  begin
    s := s + IntToStr(specialize _indexList<integer>(a, i));
    i := i - 1;
  end;
  result := s;
  exit;
end;

function minInt(a: integer; b: integer): integer;
begin
  if (a < b) then
  begin
    result := a;
    exit;
  end else
  begin
    result := b;
    exit;
  end;
end;

function cumu(n: integer): specialize TArray<specialize TArray<integer>>;
var
  cache: specialize TArray<Variant>;
  row: function(p0: integer): specialize TArray<string> is nested;
  val: specialize TArray<Variant>;
  x: integer;
  y: integer;
begin
  cache := specialize TArray<Variant>([specialize TArray<specialize TArray<integer>>([bigFromInt(1)])]);
  y := 1;
  while (y <= n) do
  begin
    row := specialize TArray<specialize TArray<integer>>([bigFromInt(0)]);
    x := 1;
    while (x <= y) do
    begin
      val := specialize _indexList<Variant>(specialize _indexList<Variant>(cache, y - x), minInt(x, y - x));
      row := specialize _appendList<Variant>(row, bigAdd(row[Length(row) - 1], val));
      x := x + 1;
    end;
    cache := specialize _appendList<Variant>(cache, row);
    y := y + 1;
  end;
  result := specialize _indexList<Variant>(cache, n);
  exit;
end;

function row(n: integer): specialize TArray<string>;
var
  diff: Variant;
  e: Variant;
  i: Variant;
  out: specialize TArray<Variant>;
begin
  e := cumu(n);
  out := specialize TArray<Variant>([]);
  i := 0;
  while (i < n) do
  begin
    diff := bigSub(e[i + 1], e[i]);
    out := specialize _appendList<Variant>(out, bigToString(diff));
    i := i + 1;
  end;
  result := out;
  exit;
end;

begin
  writeln('rows:');
  x := 1;
  while (x < 11) do
  begin
    r := row(x);
    line := '';
    i := 0;
    while (i < Length(r)) do
    begin
      line := line + ' ' + r[i] + ' ';
      i := i + 1;
    end;
    writeln(line);
    x := x + 1;
  end;
  writeln('');
  writeln('sums:');
  for num in specialize TArray<integer>([23, 123, 1234]) do
  begin
    r := cumu(num);
    writeln(IntToStr(num) + ' ' + bigToString(r[Length(r) - 1]));
  end;
end.
