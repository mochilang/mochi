// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:17Z
program CaesarCipher1;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function indexOf(s: string; ch: string): integer;
var
  i: integer;
begin
  i := 0;
  while (i < Length(s)) do
  begin
    if (_sliceString(s, i, i + i + 1) = ch) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function ord(ch: string): integer;
var
  idx: Variant;
  lower: function(p0: Variant): string is nested;
  upper: function(p0: string): string is nested;
begin
  upper := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  lower := 'abcdefghijklmnopqrstuvwxyz';
  idx := indexOf(upper, ch);
  if (idx >= 0) then ;
  idx := indexOf(lower, ch);
  if (idx >= 0) then ;
  result := 0;
  exit;
end;

function chr(n: integer): string;
var
  lower: function(p0: Variant): string is nested;
  upper: function(p0: string): string is nested;
begin
  upper := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  lower := 'abcdefghijklmnopqrstuvwxyz';
  if ((n >= 65) and (n < 91)) then ;
  if ((n >= 97) and (n < 123)) then ;
  result := '?';
  exit;
end;

function shiftRune(r: string; k: integer): string;
begin
  if ((r >= 'a') and (r <= 'z')) then ;
  if ((r >= 'A') and (r <= 'Z')) then ;
  result := r;
  exit;
end;

function encipher(s: string; k: integer): string;
var
  i: integer;
  out: string;
begin
  out := '';
  i := 0;
  while (i < Length(s)) do
  begin
    out := out + shiftRune(_sliceString(s, i, i + 1), k);
    i := i + 1;
  end;
  result := out;
  exit;
end;

function decipher(s: string; k: integer): string;
begin
  result := encipher(s, 26 - k mod 26 mod 26);
  exit;
end;

function main(): integer;
var
  ct: Variant;
  pt: string;
begin
  pt := 'The five boxing wizards jump quickly';
  writeln('Plaintext: ' + pt);
  for key in specialize TArray<integer>([0, 1, 7, 25, 26]) do
  begin
    if ((key < 1) or (key > 25)) then
    begin
      writeln('Key ' + IntToStr(key) + ' invalid');
      continue;
    end;
    ct := encipher(pt, key);
    writeln('Key ' + IntToStr(key));
    writeln('  Enciphered: ' + ct);
    writeln('  Deciphered: ' + decipher(ct, key));
  end;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
