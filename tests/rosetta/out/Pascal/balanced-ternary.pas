// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:13Z
program BalancedTernary;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function trimLeftZeros(s: string): string;
var
  i: integer;
begin
  i := 0;
  while ((i < Length(s)) and (_sliceString(s, i, i + i + 1) = '0')) do
  begin
    i := i + 1;
  end;
  result := _sliceString(s, i, i + Length(s));
  exit;
end;

function btString(s: string): specialize TFPGMap<string, any>;
var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  b: specialize TArray<integer>;
  ch: Variant;
  i: Variant;
begin
  s := trimLeftZeros(s);
  b := specialize TArray<integer>([]);
  i := Length(s) - 1;
  while (i >= 0) do
  begin
    ch := _sliceString(s, i, i + i + 1);
    if (ch = '+') then
    begin
      b := specialize _appendList<Variant>(b, 1);
    end else
    begin
      if (ch = '0') then
      begin
        b := specialize _appendList<Variant>(b, 0);
      end else
      begin
        if (ch = '-') then
        begin
          b := specialize _appendList<Variant>(b, 0 - 1);
        end else
        begin
          _tmp0 := specialize TFPGMap<string, Variant>.Create;
          _tmp0.AddOrSetData('bt', specialize TArray<integer>([]));
          _tmp0.AddOrSetData('ok', False);
          result := _tmp0;
          exit;
        end;
      end;
    end;
    i := i - 1;
  end;
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('bt', b);
  _tmp1.AddOrSetData('ok', True);
  result := _tmp1;
  exit;
end;

function btToString(b: specialize TArray<integer>): string;
var
  d: specialize TArray<integer>;
  i: Variant;
  r: string;
begin
  if (Length(b) = 0) then ;
  r := '';
  i := Length(b) - 1;
  while (i >= 0) do
  begin
    d := specialize _indexList<integer>(b, i);
    if (d = 0 - 1) then
    begin
      r := r + '-';
    end else
    begin
      if (d = 0) then
      begin
        r := r + '0';
      end else
      begin
        r := r + '+';
      end;
    end;
    i := i - 1;
  end;
  result := r;
  exit;
end;

function btInt(i: integer): specialize TArray<integer>;
var
  b: specialize TArray<integer>;
  m: Variant;
  n: Variant;
begin
  if (i = 0) then ;
  n := i;
  b := specialize TArray<integer>([]);
  while (n <> 0) do
  begin
    m := n mod 3;
    n := Trunc(n div 3);
    if (m = 2) then
    begin
      m := 0 - 1;
      n := n + 1;
    end else
    begin
      if (m = 0 - 2) then
      begin
        m := 1;
        n := n - 1;
      end;
    end;
    b := specialize _appendList<integer>(b, m);
  end;
  result := b;
  exit;
end;

function btToInt(b: specialize TArray<integer>): integer;
var
  i: Variant;
  pt: integer;
  r: string;
begin
  r := 0;
  pt := 1;
  i := 0;
  while (i < Length(b)) do
  begin
    r := r + specialize _indexList<integer>(b, i) * pt;
    pt := pt * 3;
    i := i + 1;
  end;
  result := r;
  exit;
end;

function btNeg(b: specialize TArray<integer>): specialize TArray<integer>;
var
  i: Variant;
  r: string;
begin
  r := specialize TArray<integer>([]);
  i := 0;
  while (i < Length(b)) do
  begin
    r := specialize _appendList<Variant>(r, -specialize _indexList<integer>(b, i));
    i := i + 1;
  end;
  result := r;
  exit;
end;

function btAdd(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<integer>;
begin
  result := btInt(btToInt(a) + btToInt(b));
  exit;
end;

function btMul(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<integer>;
begin
  result := btInt(btToInt(a) * btToInt(b));
  exit;
end;

function padLeft(s: string; w: integer): string;
var
  r: string;
begin
  r := s;
  while (Length(r) < w) do
  begin
    r := ' ' + r;
  end;
  result := r;
  exit;
end;

function show(_label: string; b: specialize TArray<integer>): integer;
var
  bs: Variant;
  is: Variant;
  l: Variant;
begin
  l := padLeft(_label, 7);
  bs := padLeft(btToString(b), 12);
  is := padLeft(IntToStr(btToInt(b)), 7);
  writeln(l + ' ' + bs + ' ' + is);
end;

function main(): integer;
var
  a: Variant;
  ares: Variant;
  b: specialize TArray<integer>;
  c: Variant;
  cres: Variant;
begin
  ares := btString('+-0++0+');
  a := ares['bt'];
  b := btInt(-436);
  cres := btString('+-++-');
  c := cres['bt'];
  show('a:', a);
  show('b:', b);
  show('c:', c);
  show('a(b-c):', btMul(a, btAdd(b, btNeg(c))));
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
