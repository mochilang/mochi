// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:15Z
program BitmapBZierCurvesQuadratic;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type Pixel = record
  r: integer;
  g: integer;
  b: integer;
end;

function pixelFromRgb(rgb: integer): Pixel;
var
  _tmp0: Pixel;
  b: specialize TFPGMap<string, Variant>;
  g: integer;
  r: integer;
begin
  r := Trunc(rgb div 65536 mod 256);
  g := Trunc(rgb div 256 mod 256);
  b := Trunc(rgb mod 256);
  _tmp0.r := r;
  _tmp0.g := g;
  _tmp0.b := b;
  result := _tmp0;
  exit;
end;

function newBitmap(cols: integer; rows: integer): specialize TFPGMap<string, any>;
var
  _tmp1: Pixel;
  _tmp2: specialize TFPGMap<string, Variant>;
  d: specialize TArray<specialize TArray<integer>>;
  row: specialize TArray<integer>;
  x: integer;
  y: integer;
begin
  d := specialize TArray<specialize TArray<integer>>([]);
  y := 0;
  while (y < rows) do
  begin
    row := specialize TArray<integer>([]);
    x := 0;
    while (x < cols) do
    begin
      _tmp1.r := 0;
      _tmp1.g := 0;
      _tmp1.b := 0;
      row := specialize _appendList<Variant>(row, _tmp1);
      x := x + 1;
    end;
    d := specialize _appendList<Variant>(d, row);
    y := y + 1;
  end;
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('cols', cols);
  _tmp2.AddOrSetData('rows', rows);
  _tmp2.AddOrSetData('data', d);
  result := _tmp2;
  exit;
end;

function setPx(b: specialize TFPGMap<string, any>; x: integer; y: integer; p: Pixel): integer;
var
  cols: integer;
  rows: integer;
begin
  cols := Trunc(b.KeyData['cols']);
  rows := Trunc(b.KeyData['rows']);
  if ((((x >= 0) and (x < cols)) and (y >= 0)) and (y < rows)) then ;
end;

function fill(b: specialize TFPGMap<string, any>; p: Pixel): integer;
var
  cols: integer;
  rows: integer;
  x: integer;
  y: integer;
begin
  cols := Trunc(b.KeyData['cols']);
  rows := Trunc(b.KeyData['rows']);
  y := 0;
  while (y < rows) do
  begin
    x := 0;
    while (x < cols) do
    begin
      b['data'][y][x] := p;
      x := x + 1;
    end;
    y := y + 1;
  end;
end;

function fillRgb(b: specialize TFPGMap<string, any>; rgb: integer): integer;
begin
  fill(b, pixelFromRgb(rgb));
end;

function line(b: specialize TFPGMap<string, any>; x0: integer; y0: integer; x1: integer; y1: integer; p: Pixel): integer;
var
  dx: Variant;
  dy: Variant;
  e2: integer;
  err: Variant;
  sx: integer;
  sy: integer;
begin
  dx := x1 - x0;
  if (dx < 0) then ;
  dy := y1 - y0;
  if (dy < 0) then ;
  sx := -1;
  if (x0 < x1) then ;
  sy := -1;
  if (y0 < y1) then ;
  err := dx - dy;
  while True do
  begin
    setPx(b, x0, y0, p);
    if ((x0 = x1) and (y0 = y1)) then ;
    e2 := 2 * err;
    if (e2 > 0 - dy) then
    begin
      err := err - dy;
      x0 := x0 + sx;
    end;
    if (e2 < dx) then
    begin
      err := err + dx;
      y0 := y0 + sy;
    end;
  end;
end;

function bezier2(b: specialize TFPGMap<string, any>; x1: integer; y1: integer; x2: integer; y2: integer; x3: integer; y3: integer; p: Pixel): integer;
var
  a: double;
  a2: double;
  b2: double;
  c: Variant;
  c2: Variant;
  fx1: double;
  fx2: double;
  fx3: double;
  fy1: double;
  fy2: double;
  fy3: double;
  i: integer;
  px: specialize TArray<integer>;
  py: specialize TArray<integer>;
  x: specialize TArray<integer>;
  x0: specialize TArray<integer>;
  y: specialize TArray<integer>;
  y0: specialize TArray<integer>;
begin
  px := specialize TArray<integer>([]);
  py := specialize TArray<integer>([]);
  i := 0;
  while (i <= b2Seg) do
  begin
    px := specialize _appendList<Variant>(px, 0);
    py := specialize _appendList<Variant>(py, 0);
    i := i + 1;
  end;
  fx1 := Double(x1);
  fy1 := Double(y1);
  fx2 := Double(x2);
  fy2 := Double(y2);
  fx3 := Double(x3);
  fy3 := Double(y3);
  i := 0;
  while (i <= b2Seg) do
  begin
    c := Double(i) / Double(b2Seg);
    a := 1 - c;
    a2 := a * a;
    b2 := 2 * c * a;
    c2 := c * c;
    px[i] := Trunc(a2 * fx1 + b2 * fx2 + c2 * fx3);
    py[i] := Trunc(a2 * fy1 + b2 * fy2 + c2 * fy3);
    i := i + 1;
  end;
  x0 := px[0];
  y0 := py[0];
  i := 1;
  while (i <= b2Seg) do
  begin
    x := px[i];
    y := py[i];
    line(b, x0, y0, x, y, p);
    x0 := x;
    y0 := y;
    i := i + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

var
  b: specialize TFPGMap<string, Variant>;
  b2Seg: integer;

begin
  b2Seg := 20;
  b := newBitmap(400, 300);
  fillRgb(b, 14614575);
  bezier2(b, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615));
end.
