// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:16Z
program BoyerMooreStringSearch;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function indexOfStr(h: string; n: string): integer;
var
  hlen: Variant;
  i: integer;
  nlen: Variant;
begin
  hlen := Length(h);
  nlen := Length(n);
  if (nlen = 0) then ;
  i := 0;
  while (i <= hlen - nlen) do
  begin
    if (_sliceString(h, i, i + i + nlen) = n) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function stringSearchSingle(h: string; n: string): integer;
begin
  result := indexOfStr(h, n);
  exit;
end;

function stringSearch(h: string; n: string): specialize TArray<integer>;
var
  hlen: Variant;
  idx: Variant;
  nlen: Variant;
  _result: specialize TArray<integer>;
  start: integer;
begin
  _result := specialize TArray<integer>([]);
  start := 0;
  hlen := Length(h);
  nlen := Length(n);
  while (start < hlen) do
  begin
    idx := indexOfStr(_sliceString(h, start, start + hlen), n);
    if (idx >= 0) then
    begin
      _result := specialize _appendList<Variant>(_result, start + idx);
      start := start + idx + nlen;
    end else
    begin
      break;
    end;
  end;
  result := _result;
  exit;
end;

function display(nums: specialize TArray<integer>): string;
var
  i: integer;
  s: string;
begin
  s := '[';
  i := 0;
  while (i < Length(nums)) do
  begin
    if (i > 0) then ;
    s := s + IntToStr(specialize _indexList<integer>(nums, i));
    i := i + 1;
  end;
  s := s + ']';
  result := s;
  exit;
end;

function main(): integer;
var
  i: integer;
  idxs: Variant;
  j: integer;
  patterns: specialize TArray<Variant>;
  texts: specialize TArray<Variant>;
begin
  texts := specialize TArray<string>(['GCTAGCTCTACGAGTCTA', 'GGCTATAATGCGTA', 'there would have been a time for such a word', 'needle need noodle needle', 'DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages', 'Nearby farms grew an acre of alfalfa on the dairy''s behalf, with bales of that alfalfa exchanged for milk.']);
  patterns := specialize TArray<string>(['TCTA', 'TAATAAA', 'word', 'needle', 'and', 'alfalfa']);
  i := 0;
  while (i < Length(texts)) do
  begin
    writeln('text' + IntToStr(i + 1) + ' = ' + texts[i]);
    i := i + 1;
  end;
  writeln('');
  j := 0;
  while (j < Length(texts)) do
  begin
    idxs := stringSearch(texts[j], patterns[j]);
    writeln('Found "' + patterns[j] + '" in ''text' + IntToStr(j + 1) + ''' at indexes ' + display(idxs));
    j := j + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
