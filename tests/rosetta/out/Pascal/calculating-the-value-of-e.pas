// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:30Z
program CalculatingTheValueOfE;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function absf(x: double): double;
begin
  if (x < 0) then ;
  result := x;
  exit;
end;

function pow10(n: integer): double;
var
  i: integer;
  r: double;
begin
  r := 1;
  i := 0;
  while (i < n) do
  begin
    r := r * 10;
    i := i + 1;
  end;
  result := r;
  exit;
end;

function formatFloat(f: double; prec: integer): string;
var
  digits: Variant;
  fracPart: Variant;
  intPart: Variant;
  n: Variant;
  scale: Variant;
  scaled: Variant;
begin
  scale := pow10(prec);
  scaled := f * scale + 0.5;
  n := Trunc(scaled);
  digits := IntToStr(n);
  while (Length(digits) <= prec) do
  begin
    digits := '0' + digits;
  end;
  intPart := _sliceString(digits, 0, 0 + Length(digits) - prec);
  fracPart := _sliceString(digits, Length(digits) - prec, Length(digits) - prec + Length(digits));
  result := intPart + '.' + fracPart;
  exit;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  e: double;
  epsilon: double;
  factval: integer;
  n: Variant;
  term: double;

begin
  epsilon := 1e-15;
  factval := 1;
  e := 2;
  n := 2;
  term := 1;
  while True do
  begin
    factval := factval * n;
    n := n + 1;
    term := 1 / Double(factval);
    e := e + term;
    if (absf(term) < epsilon) then ;
  end;
  writeln('e = ' + formatFloat(e, 15));
end.
