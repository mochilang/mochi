// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:11Z
program AnglesGeometricNormalizationAndConversion;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function d2d(d: double): double;
begin
  result := d mod 360;
  exit;
end;

function g2g(g: double): double;
begin
  result := g mod 400;
  exit;
end;

function m2m(m: double): double;
begin
  result := m mod 6400;
  exit;
end;

function r2r(r: double): double;
begin
  result := r mod 2 * 3.141592653589793;
  exit;
end;

function d2g(d: double): double;
begin
  result := d2d(d) * 400 div 360;
  exit;
end;

function d2m(d: double): double;
begin
  result := d2d(d) * 6400 div 360;
  exit;
end;

function d2r(d: double): double;
begin
  result := d2d(d) * 3.141592653589793 / 180;
  exit;
end;

function g2d(g: double): double;
begin
  result := g2g(g) * 360 div 400;
  exit;
end;

function g2m(g: double): double;
begin
  result := g2g(g) * 6400 div 400;
  exit;
end;

function g2r(g: double): double;
begin
  result := g2g(g) * 3.141592653589793 / 200;
  exit;
end;

function m2d(m: double): double;
begin
  result := m2m(m) * 360 div 6400;
  exit;
end;

function m2g(m: double): double;
begin
  result := m2m(m) * 400 div 6400;
  exit;
end;

function m2r(m: double): double;
begin
  result := m2m(m) * 3.141592653589793 / 3200;
  exit;
end;

function r2d(r: double): double;
begin
  result := r2r(r) * 180 / 3.141592653589793;
  exit;
end;

function r2g(r: double): double;
begin
  result := r2r(r) * 200 / 3.141592653589793;
  exit;
end;

function r2m(r: double): double;
begin
  result := r2r(r) * 3200 / 3.141592653589793;
  exit;
end;

function main(): integer;
var
  angles: specialize TArray<Variant>;
begin
  angles := specialize TArray<double>([-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 399, 6399, 1e+06]);
  writeln('degrees normalized_degs gradians mils radians');
  for a in angles do
  begin
    writeln(IntToStr(a) + ' ' + FloatToStr(d2d(a)) + ' ' + FloatToStr(d2g(a)) + ' ' + FloatToStr(d2m(a)) + ' ' + FloatToStr(d2r(a)));
  end;
  writeln('
gradians normalized_grds degrees mils radians');
  for a in angles do
  begin
    writeln(IntToStr(a) + ' ' + FloatToStr(g2g(a)) + ' ' + FloatToStr(g2d(a)) + ' ' + FloatToStr(g2m(a)) + ' ' + FloatToStr(g2r(a)));
  end;
  writeln('
mils normalized_mils degrees gradians radians');
  for a in angles do
  begin
    writeln(IntToStr(a) + ' ' + FloatToStr(m2m(a)) + ' ' + FloatToStr(m2d(a)) + ' ' + FloatToStr(m2g(a)) + ' ' + FloatToStr(m2r(a)));
  end;
  writeln('
radians normalized_rads degrees gradians mils');
  for a in angles do
  begin
    writeln(IntToStr(a) + ' ' + FloatToStr(r2r(a)) + ' ' + FloatToStr(r2d(a)) + ' ' + FloatToStr(r2g(a)) + ' ' + FloatToStr(r2m(a)));
  end;
end;

begin
  main();
end.
