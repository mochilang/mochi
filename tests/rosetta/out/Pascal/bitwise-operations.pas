// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:16Z
program BitwiseOperations;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function toUnsigned16(n: integer): integer;
var
  u: Variant;
begin
  u := n;
  if (u < 0) then ;
  result := u mod 65536;
  exit;
end;

function bin16(n: integer): string;
var
  bits: string;
  mask: integer;
  u: Variant;
begin
  u := toUnsigned16(n);
  bits := '';
  mask := 32768;
  for i := 0 to 16 - 1 do
  begin
    if (u >= mask) then
    begin
      bits := bits + '1';
      u := u - mask;
    end else
    begin
      bits := bits + '0';
    end;
    mask := Trunc(mask div 2);
  end;
  result := bits;
  exit;
end;

function bit_and(a: integer; b: integer): integer;
var
  bit: integer;
  res: integer;
  ua: Variant;
  ub: Variant;
begin
  ua := toUnsigned16(a);
  ub := toUnsigned16(b);
  res := 0;
  bit := 1;
  for i := 0 to 16 - 1 do
  begin
    if ((ua mod 2 = 1) and (ub mod 2 = 1)) then ;
    ua := Trunc(ua div 2);
    ub := Trunc(ub div 2);
    bit := bit * 2;
  end;
  result := res;
  exit;
end;

function bit_or(a: integer; b: integer): integer;
var
  bit: integer;
  res: integer;
  ua: Variant;
  ub: Variant;
begin
  ua := toUnsigned16(a);
  ub := toUnsigned16(b);
  res := 0;
  bit := 1;
  for i := 0 to 16 - 1 do
  begin
    if ((ua mod 2 = 1) or (ub mod 2 = 1)) then ;
    ua := Trunc(ua div 2);
    ub := Trunc(ub div 2);
    bit := bit * 2;
  end;
  result := res;
  exit;
end;

function bit_xor(a: integer; b: integer): integer;
var
  abit: Variant;
  bbit: Variant;
  bit: integer;
  res: integer;
  ua: Variant;
  ub: Variant;
begin
  ua := toUnsigned16(a);
  ub := toUnsigned16(b);
  res := 0;
  bit := 1;
  for i := 0 to 16 - 1 do
  begin
    abit := ua mod 2;
    bbit := ub mod 2;
    if (((abit = 1) and (bbit = 0)) or ((abit = 0) and (bbit = 1))) then ;
    ua := Trunc(ua div 2);
    ub := Trunc(ub div 2);
    bit := bit * 2;
  end;
  result := res;
  exit;
end;

function bit_not(a: integer): integer;
var
  ua: Variant;
begin
  ua := toUnsigned16(a);
  result := 65535 - ua;
  exit;
end;

function shl(a: integer; b: integer): integer;
var
  i: integer;
  ua: Variant;
begin
  ua := toUnsigned16(a);
  i := 0;
  while (i < b) do
  begin
    ua := ua * 2 mod 65536;
    i := i + 1;
  end;
  result := ua;
  exit;
end;

function shr(a: integer; b: integer): integer;
var
  i: integer;
  ua: Variant;
begin
  ua := toUnsigned16(a);
  i := 0;
  while (i < b) do
  begin
    ua := Trunc(ua div 2);
    i := i + 1;
  end;
  result := ua;
  exit;
end;

function las(a: integer; b: integer): integer;
begin
  result := shl(a, b);
  exit;
end;

function ras(a: integer; b: integer): integer;
var
  i: integer;
  val: Variant;
begin
  val := a;
  i := 0;
  while (i < b) do
  begin
    if (val >= 0) then
    begin
      val := Trunc(val div 2);
    end else
    begin
      val := Trunc(val - 1 div 2);
    end;
    i := i + 1;
  end;
  result := toUnsigned16(val);
  exit;
end;

function rol(a: integer; b: integer): integer;
var
  left: Variant;
  right: Variant;
  ua: Variant;
begin
  ua := toUnsigned16(a);
  left := shl(ua, b);
  right := shr(ua, 16 - b);
  result := toUnsigned16(left + right);
  exit;
end;

function ror(a: integer; b: integer): integer;
var
  left: Variant;
  right: Variant;
  ua: Variant;
begin
  ua := toUnsigned16(a);
  right := shr(ua, b);
  left := shl(ua, 16 - b);
  result := toUnsigned16(left + right);
  exit;
end;

function bitwise(a: integer; b: integer): integer;
begin
  writeln('a:   ' + bin16(a));
  writeln('b:   ' + bin16(b));
  writeln('and: ' + bin16(bit_and(a, b)));
  writeln('or:  ' + bin16(bit_or(a, b)));
  writeln('xor: ' + bin16(bit_xor(a, b)));
  writeln('not: ' + bin16(bit_not(a)));
  if (b < 0) then
  begin
    writeln('Right operand is negative, but all shifts require an unsigned right operand (shift distance).');
    result := Null;
    exit;
  end;
  writeln('shl: ' + bin16(shl(a, b)));
  writeln('shr: ' + bin16(shr(a, b)));
  writeln('las: ' + bin16(las(a, b)));
  writeln('ras: ' + bin16(ras(a, b)));
  writeln('rol: ' + bin16(rol(a, b)));
  writeln('ror: ' + bin16(ror(a, b)));
end;

begin
  bitwise(-460, 6);
end.
