// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:42Z
program CheckpointSynchronization3;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function lower(ch: string): string;
var
  i: integer;
  low: string;
  up: string;
begin
  up := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  low := 'abcdefghijklmnopqrstuvwxyz';
  i := 0;
  while (i < Length(up)) do
  begin
    if (ch = _sliceString(up, i, i + i + 1)) then ;
    i := i + 1;
  end;
  result := ch;
  exit;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  a: string;
  cycle: integer;
  nAssemblies: integer;
  p: string;
  partList: specialize TArray<string>;

begin
  partList := specialize TArray<string>(['A', 'B', 'C', 'D']);
  nAssemblies := 3;
  for p in partList do
  begin
    writeln(p + ' worker running');
  end;
  for cycle := 1 to nAssemblies + 1 - 1 do
  begin
    writeln('begin assembly cycle ' + IntToStr(cycle));
    a := '';
    for p in partList do
    begin
      writeln(p + ' worker begins part');
      writeln(p + ' worker completed ' + LowerCase(p));
      a := a + LowerCase(p);
    end;
    writeln(a + ' assembled.  cycle ' + IntToStr(cycle) + ' complete');
  end;
  for p in partList do
  begin
    writeln(p + ' worker stopped');
  end;
end.
