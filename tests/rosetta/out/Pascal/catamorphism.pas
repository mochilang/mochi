// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:37Z
program Catamorphism;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type
  TFunc0 = function(p0: integer; p1: integer): integer is nested;


function add(a: integer; b: integer): integer;
begin
  result := a + b;
  exit;
end;

function sub(a: integer; b: integer): integer;
begin
  result := a - b;
  exit;
end;

function mul(a: integer; b: integer): integer;
begin
  result := a * b;
  exit;
end;

function fold(f: TFunc0; xs: specialize TArray<integer>): integer;
var
  i: integer;
  r: Variant;
begin
  r := specialize _indexList<integer>(xs, 0);
  i := 1;
  while (i < Length(xs)) do
  begin
    r := f(r, specialize _indexList<integer>(xs, i));
    i := i + 1;
  end;
  result := r;
  exit;
end;

function _lambda0(a: integer; b: integer): integer;
begin
  result := add(a, b);
  exit;
end;

function _lambda1(a: integer; b: integer): integer;
begin
  result := sub(a, b);
  exit;
end;

function _lambda2(a: integer; b: integer): integer;
begin
  result := mul(a, b);
  exit;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

var
  n: specialize TArray<integer>;

begin
  n := specialize TArray<integer>([1, 2, 3, 4, 5]);
  writeln(fold(_lambda0, n));
  writeln(fold(_lambda1, n));
  writeln(fold(_lambda2, n));
end.
