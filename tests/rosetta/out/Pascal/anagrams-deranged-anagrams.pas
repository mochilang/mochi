// Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
program AnagramsDerangedAnagrams;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, Classes, Variants;

type
  generic TArray<T> = array of T;
generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;


function sortRunes(s: string): string;
var
  arr: specialize TArray<Variant>;
  i: integer;
  j: integer;
  m: integer;
  n: Variant;
  out: string;
  tmp: specialize TArray<Variant>;
begin
  arr := specialize TArray<Variant>([]);
  i := 0;
  while (i < Length(s)) do
  begin
    arr := specialize _appendList<Variant>(arr, _sliceString(s, i, i + 1));
    i := i + 1;
  end;
  n := Length(arr);
  m := 0;
  while (m < n) do
  begin
    j := 0;
    while (j < n - 1) do
    begin
      if (specialize _indexList<Variant>(arr, j) > specialize _indexList<Variant>(arr, j + 1)) then
      begin
        tmp := specialize _indexList<Variant>(arr, j);
        arr[j] := specialize _indexList<Variant>(arr, j + 1);
        arr[j + 1] := tmp;
      end;
      j := j + 1;
    end;
    m := m + 1;
  end;
  out := '';
  i := 0;
  while (i < n) do
  begin
    out := out + specialize _indexList<Variant>(arr, i);
    i := i + 1;
  end;
  result := out;
  exit;
end;

function deranged(a: string; b: string): boolean;
var
  i: integer;
begin
  if (Length(a) <> Length(b)) then ;
  i := 0;
  while (i < Length(a)) do
  begin
    if (_sliceString(a, i, i + 1) = _sliceString(b, i, i + 1)) then ;
    i := i + 1;
  end;
  result := True;
  exit;
end;

procedure main();
var
  _tmp0: specialize TFPGMap<string, integer>;
  bestLen: integer;
  c: string;
  k: Variant;
  m: specialize TFPGMap<string, specialize TArray<string>>;
  w: Variant;
  w1: string;
  w2: string;
  words: specialize TArray<Variant>;
begin
  words := specialize TArray<Variant>(['constitutionalism', 'misconstitutional']);
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  m := _tmp0;
  bestLen := 0;
  w1 := '';
  w2 := '';
  for w in words do
  begin
    if (Length(w) <= bestLen) then ;
    k := sortRunes(w);
    if not (k in m) then
    begin
      m[k] := specialize TArray<Variant>([w]);
      continue;
    end;
    for c in m[k] do
    begin
      if deranged(w, c) then
      begin
        bestLen := Length(w);
        w1 := c;
        w2 := w;
        break;
      end;
    end;
    m[k] := specialize _appendList<Variant>(m[k], w);
  end;
  writeln(w1 + ' ' + w2 + ' : Length ' + IntToStr(bestLen));
end;

begin
  main();
end.
