// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:11Z
program AverageLoopLength;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function absf(x: double): double;
begin
  if (x < 0) then ;
  result := x;
  exit;
end;

function floorf(x: double): double;
begin
  result := Double(Trunc(x));
  exit;
end;

function indexOf(s: string; ch: string): integer;
var
  i: integer;
begin
  i := 0;
  while (i < Length(s)) do
  begin
    if (_sliceString(s, i, i + i + 1) = ch) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function fmtF(x: double): string;
var
  decs: Variant;
  dot: Variant;
  s: Variant;
  y: Variant;
begin
  y := floorf(x * 10000 + 0.5) / 10000;
  s := IntToStr(y);
  dot := indexOf(s, '.');
  if (dot = 0 - 1) then
  begin
    s := s + '.0000';
  end else
  begin
    decs := Length(s) - dot - 1;
    if (decs > 4) then
    begin
      s := _sliceString(s, 0, 0 + dot + 5);
    end else
    begin
      while (decs < 4) do
      begin
        s := s + '0';
        decs := decs + 1;
      end;
    end;
  end;
  result := s;
  exit;
end;

function padInt(n: integer; width: integer): string;
var
  s: Variant;
begin
  s := IntToStr(n);
  while (Length(s) < width) do
  begin
    s := ' ' + s;
  end;
  result := s;
  exit;
end;

function padFloat(x: double; width: integer): string;
var
  s: Variant;
begin
  s := fmtF(x);
  while (Length(s) < width) do
  begin
    s := ' ' + s;
  end;
  result := s;
  exit;
end;

function avgLen(n: integer): double;
var
  i: integer;
  seed: integer;
  sum: function(p0: Variant): double is nested;
  t: integer;
  tests: integer;
  visited: specialize TArray<boolean>;
  x: integer;
begin
  tests := 10000;
  sum := 0;
  seed := 1;
  t := 0;
  while (t < tests) do
  begin
    visited := specialize TArray<boolean>([]);
    i := 0;
    while (i < n) do
    begin
      visited := specialize _appendList<Variant>(visited, False);
      i := i + 1;
    end;
    x := 0;
    while not visited[x] do
    begin
      visited[x] := True;
      sum := sum + 1;
      seed := seed * 1664525 + 1013904223 mod 2147483647;
      x := seed mod n;
    end;
    t := t + 1;
  end;
  result := Double(sum) / tests;
  exit;
end;

function ana(n: integer): double;
var
  i: double;
  nn: double;
  sum: function(p0: Variant): double is nested;
  term: double;
begin
  nn := Double(n);
  term := 1;
  sum := 1;
  i := nn - 1;
  while (i >= 1) do
  begin
    term := term * i div nn;
    sum := sum + term;
    i := i - 1;
  end;
  result := sum;
  exit;
end;

function main(): integer;
var
  a: Variant;
  b: Variant;
  err: Variant;
  line: Variant;
  n: integer;
  nmax: integer;
begin
  nmax := 20;
  writeln(' N    average    analytical    (error)');
  writeln('===  =========  ============  =========');
  n := 1;
  while (n <= nmax) do
  begin
    a := avgLen(n);
    b := ana(n);
    err := absf(a - b) div b * 100;
    line := padInt(n, 3) + '  ' + padFloat(a, 9) + '  ' + padFloat(b, 12) + '  (' + padFloat(err, 6) + '%)';
    writeln(line);
    n := n + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
