// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:24Z
program CsvToHtmlTranslation5;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function split(s: string; sep: string): specialize TArray<string>;
var
  i: integer;
  n: Variant;
  out: specialize TArray<string>;
  start: integer;
begin
  out := specialize TArray<string>([]);
  start := 0;
  i := 0;
  n := Length(sep);
  while (i <= Length(s) - n) do
  begin
    if (_sliceString(s, i, i + i + n) = sep) then
    begin
      out := specialize _appendList<Variant>(out, _sliceString(s, start, start + i));
      i := i + n;
      start := i;
    end else
    begin
      i := i + 1;
    end;
  end;
  out := specialize _appendList<Variant>(out, _sliceString(s, start, start + Length(s)));
  result := out;
  exit;
end;

function htmlEscape(s: string): string;
var
  ch: Variant;
  i: integer;
  out: specialize TArray<string>;
begin
  out := '';
  i := 0;
  while (i < Length(s)) do
  begin
    ch := _sliceString(s, i, i + i + 1);
    if (ch = '&') then
    begin
      out := Concat(out, '&amp;');
    end else if (ch = '<') then
    begin
      out := Concat(out, '&lt;');
    end else if (ch = '>') then
    begin
      out := Concat(out, '&gt;');
    end else
    begin
      out := Concat(out, ch);
    end;
    i := i + 1;
  end;
  result := out;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

function _splitString(s, sep: string): specialize TArray<string>;
var sl: TStringList; i: Integer;
begin
  sl := TStringList.Create;
  try
    sl.Delimiter := sep[1];
    sl.StrictDelimiter := True;
    sl.DelimitedText := s;
    SetLength(Result, sl.Count);
    for i := 0 to sl.Count - 1 do
      Result[i] := sl[i];
  finally
    sl.Free;
  end;
end;

var
  c: string;
  cell: Variant;
  cells: string;
  line: Variant;
  row: string;
  rows: specialize TArray<specialize TArray<string>>;

begin
  c := 'Character,Speech
' + 'The multitude,The messiah! Show us the messiah!
' + 'Brians mother,<angry>Now you listen here! He''s not the messiah; he''s a very naughty boy! Now go away!</angry>
' + 'The multitude,Who are you?
' + 'Brians mother,I''m his mother; that''s who!
' + 'The multitude,Behold his mother! Behold his mother!';
  rows := specialize TArray<specialize TArray<string>>([]);
  for line in _splitString(c, '
') do
  begin
    rows := specialize _appendList<specialize TArray<string>>(rows, _splitString(line, ','));
  end;
  writeln('<table>');
  for row in rows do
  begin
    cells := '';
    for cell in row do
    begin
      cells := cells + '<td>' + htmlEscape(cell) + '</td>';
    end;
    writeln('    <tr>' + cells + '</tr>');
  end;
  writeln('</table>');
end.
