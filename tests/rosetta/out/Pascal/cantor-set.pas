// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:35Z
program CantorSet;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function setChar(s: string; idx: integer; ch: string): string;
begin
  result := _sliceString(s, 0, 0 + idx) + ch + _sliceString(s, idx + 1, idx + 1 + Length(s));
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  frame: specialize TArray<specialize TFPGMap<string, integer>>;
  height: integer;
  i: specialize TArray<specialize TFPGMap<string, integer>>;
  index: specialize TArray<specialize TFPGMap<string, integer>>;
  j: specialize TArray<specialize TFPGMap<string, integer>>;
  lenSeg: specialize TArray<specialize TFPGMap<string, integer>>;
  line: string;
  lines: specialize TArray<string>;
  row: string;
  seg: integer;
  stack: specialize TArray<specialize TFPGMap<string, integer>>;
  start: specialize TArray<specialize TFPGMap<string, integer>>;
  width: integer;

begin
  width := 81;
  height := 5;
  lines := specialize TArray<string>([]);
  for i := 0 to height - 1 do
  begin
    row := '';
    j := 0;
    while (j < width) do
    begin
      row := row + '*';
      j := Concat(j, 1);
    end;
    lines := specialize _appendList<string>(lines, row);
  end;
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('start', 0);
  _tmp0.AddOrSetData('len', width);
  _tmp0.AddOrSetData('index', 1);
  stack := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  while (Length(stack) > 0) do
  begin
    frame := specialize _indexList<specialize TFPGMap<string, integer>>(stack, Length(stack) - 1);
    stack := specialize _sliceList<specialize TFPGMap<string, integer>>(stack, 0, Length(stack) - 1);
    start := specialize _indexList<specialize TFPGMap<string, integer>>(frame, 'start');
    lenSeg := specialize _indexList<specialize TFPGMap<string, integer>>(frame, 'len');
    index := specialize _indexList<specialize TFPGMap<string, integer>>(frame, 'index');
    seg := Trunc(lenSeg div 3);
    if (seg = 0) then ;
    i := index;
    while (i < height) do
    begin
      j := Concat(start, seg);
      while (j < Concat(start, 2 * seg)) do
      begin
        lines[i] := setChar(specialize _indexList<string>(lines, i), j, ' ');
        j := Concat(j, 1);
      end;
      i := Concat(i, 1);
    end;
    _tmp1 := specialize TFPGMap<string, Variant>.Create;
    _tmp1.AddOrSetData('start', start);
    _tmp1.AddOrSetData('len', seg);
    _tmp1.AddOrSetData('index', Concat(index, 1));
    stack := specialize _appendList<specialize TFPGMap<string, integer>>(stack, _tmp1);
    _tmp2 := specialize TFPGMap<string, Variant>.Create;
    _tmp2.AddOrSetData('start', Concat(start, seg * 2));
    _tmp2.AddOrSetData('len', seg);
    _tmp2.AddOrSetData('index', Concat(index, 1));
    stack := specialize _appendList<specialize TFPGMap<string, integer>>(stack, _tmp2);
  end;
  for line in lines do
  begin
    writeln(line);
  end;
end.
