// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:14Z
program ApproximateEquality;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function abs(x: double): double;
begin
  if (x < 0) then ;
  result := x;
  exit;
end;

function maxf(a: double; b: double): double;
begin
  if (a > b) then ;
  result := b;
  exit;
end;

function isClose(a: double; b: double): boolean;
var
  relTol: double;
  t: Variant;
  u: double;
begin
  relTol := 1e-09;
  t := Abs(a - b);
  u := relTol * maxf(Abs(a), Abs(b));
  result := (t <= u);
  exit;
end;

function sqrtApprox(x: double): double;
var
  guess: Variant;
  i: integer;
begin
  guess := x;
  i := 0;
  while (i < 10) do
  begin
    guess := guess + x div guess div 2;
    i := i + 1;
  end;
  result := guess;
  exit;
end;

function main(): integer;
var
  _tmp0: integer;
  a: Variant;
  b: Variant;
  pairs: specialize TArray<Variant>;
  root2: Variant;
  s: Variant;
begin
  root2 := sqrtApprox(2);
  pairs := specialize TArray<specialize TArray<double>>([specialize TArray<double>([1.0000000000000002e+14, 1.0000000000000002e+14]), specialize TArray<double>([100.01, 100.011]), specialize TArray<double>([1.0000000000000002e+13 / 10000, 1.0000000000000001e+09]), specialize TArray<double>([0.001, 0.0010000001]), specialize TArray<double>([1.01e-22, 0]), specialize TArray<Variant>([root2 * root2, 2]), specialize TArray<Variant>([-root2 * root2, -2]), specialize TArray<double>([1e+17, 1e+17]), specialize TArray<double>([3.141592653589793, 3.141592653589793])]);
  for pair in pairs do
  begin
    a := pair[0];
    b := pair[1];
    if isClose(a, b) then
    begin
      _tmp0 := '≈';
    end else
    begin
      _tmp0 := '≉';
    end;
    s := _tmp0;
    writeln(IntToStr(a) + ' ' + s + ' ' + IntToStr(b));
  end;
end;

begin
  main();
end.
