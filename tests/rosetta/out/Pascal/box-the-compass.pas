// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:16Z
program BoxTheCompass;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function padLeft(s: string; w: integer): string;
var
  n: Variant;
  res: string;
begin
  res := '';
  n := w - Length(s);
  while (n > 0) do
  begin
    res := res + ' ';
    n := n - 1;
  end;
  result := res + s;
  exit;
end;

function padRight(s: string; w: integer): string;
var
  i: Variant;
  out: Variant;
begin
  out := s;
  i := Length(s);
  while (i < w) do
  begin
    out := out + ' ';
    i := i + 1;
  end;
  result := out;
  exit;
end;

function indexOf(s: string; ch: string): integer;
var
  i: Variant;
begin
  i := 0;
  while (i < Length(s)) do
  begin
    if (_sliceString(s, i, i + i + 1) = ch) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function format2(f: double): string;
var
  idx: Variant;
  need: Variant;
  s: Variant;
begin
  s := IntToStr(f);
  idx := indexOf(s, '.');
  if (idx < 0) then
  begin
    s := s + '.00';
  end else
  begin
    need := idx + 3;
    if (Length(s) > need) then
    begin
      s := _sliceString(s, 0, 0 + need);
    end else
    begin
      while (Length(s) < need) do
      begin
        s := s + '0';
      end;
    end;
  end;
  result := s;
  exit;
end;

function cpx(h: double): integer;
var
  x: integer;
begin
  x := Trunc(h / 11.25 + 0.5);
  x := x mod 32;
  if (x < 0) then ;
  result := x;
  exit;
end;

function degrees2compasspoint(h: double): string;
begin
  result := specialize _indexList<string>(compassPoint, cpx(h));
  exit;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  compassPoint: specialize TArray<string>;
  cp: Variant;
  h: specialize TArray<double>;
  headings: specialize TArray<double>;
  i: Variant;
  idx: Variant;

begin
  compassPoint := specialize TArray<string>(['North', 'North by east', 'North-northeast', 'Northeast by north', 'Northeast', 'Northeast by east', 'East-northeast', 'East by north', 'East', 'East by south', 'East-southeast', 'Southeast by east', 'Southeast', 'Southeast by south', 'South-southeast', 'South by east', 'South', 'South by west', 'South-southwest', 'Southwest by south', 'Southwest', 'Southwest by west', 'West-southwest', 'West by south', 'West', 'West by north', 'West-northwest', 'Northwest by west', 'Northwest', 'Northwest by north', 'North-northwest', 'North by west']);
  headings := specialize TArray<double>([0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38]);
  writeln('Index  Compass point         Degree');
  i := 0;
  while (i < Length(headings)) do
  begin
    h := specialize _indexList<double>(headings, i);
    idx := i mod 32 + 1;
    cp := degrees2compasspoint(h);
    writeln(padLeft(IntToStr(idx), 4) + '   ' + padRight(cp, 19) + ' ' + format2(h) + 'Â°');
    i := i + 1;
  end;
end.
