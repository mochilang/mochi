// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:13Z
program BernoulliNumbers;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function bernoulli(n: integer): bigrat;
var
  a: specialize TArray<integer>;
  j: integer;
  m: integer;
begin
  a := specialize TArray<integer>([]);
  m := 0;
  while (m <= n) do
  begin
    a := specialize _appendList<Variant>(a, Trunc(1) div Trunc(m + 1));
    j := m;
    while (j >= 1) do
    begin
      a[j - 1] := Trunc(j) * a[j - 1] - a[j];
      j := j - 1;
    end;
    m := m + 1;
  end;
  result := a[0];
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

var
  b: Variant;
  denStr: Variant;
  i: integer;
  numStr: Variant;

begin
  for i := 0 to 61 - 1 do
  begin
    b := bernoulli(i);
    if (num(b) <> 0) then
    begin
      numStr := IntToStr(num(b));
      denStr := IntToStr(denom(b));
      writeln('B(' + IntToStr(i).padStart(2, ' ') + ') =' + numStr.padStart(45, ' ') + '/' + denStr);
    end;
  end;
end.
