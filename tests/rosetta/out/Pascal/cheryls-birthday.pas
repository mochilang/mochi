// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:43Z
program CherylsBirthday;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type Birthday = record
  month: integer;
  day: integer;
end;

function monthUnique(b: Birthday; list: specialize TArray<Birthday>): boolean;
var
  c: integer;
begin
  c := 0;
  for x in list do
  begin
    if (x.month = b.month) then ;
  end;
  result := (c = 1);
  exit;
end;

function dayUnique(b: Birthday; list: specialize TArray<Birthday>): boolean;
var
  c: integer;
begin
  c := 0;
  for x in list do
  begin
    if (x.day = b.day) then ;
  end;
  result := (c = 1);
  exit;
end;

function monthWithUniqueDay(b: Birthday; list: specialize TArray<Birthday>): boolean;
begin
  for x in list do
  begin
    if ((x.month = b.month) and dayUnique(x, list)) then ;
  end;
  result := False;
  exit;
end;

function bstr(b: Birthday): string;
var
  months: specialize TArray<Variant>;
begin
  months := specialize TArray<string>(['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
  result := months[b.month] + ' ' + IntToStr(b.day);
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

var
  _tmp0: Birthday;
  _tmp1: Birthday;
  _tmp2: Birthday;
  _tmp3: Birthday;
  _tmp4: Birthday;
  _tmp5: Birthday;
  _tmp6: Birthday;
  _tmp7: Birthday;
  _tmp8: Birthday;
  _tmp9: Birthday;
  bd: Birthday;
  choices: specialize TArray<Birthday>;
  filtered: specialize TArray<Birthday>;
  filtered2: specialize TArray<Birthday>;
  filtered3: specialize TArray<Birthday>;
  filtered4: specialize TArray<Birthday>;

begin
  _tmp0.month := 5;
  _tmp0.day := 15;
  _tmp1.month := 5;
  _tmp1.day := 16;
  _tmp2.month := 5;
  _tmp2.day := 19;
  _tmp3.month := 6;
  _tmp3.day := 17;
  _tmp4.month := 6;
  _tmp4.day := 18;
  _tmp5.month := 7;
  _tmp5.day := 14;
  _tmp6.month := 7;
  _tmp6.day := 16;
  _tmp7.month := 8;
  _tmp7.day := 14;
  _tmp8.month := 8;
  _tmp8.day := 15;
  _tmp9.month := 8;
  _tmp9.day := 17;
  choices := specialize TArray<Birthday>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4, _tmp5, _tmp6, _tmp7, _tmp8, _tmp9]);
  filtered := specialize TArray<Birthday>([]);
  for bd in choices do
  begin
    if not monthUnique(bd, choices) then ;
  end;
  filtered2 := specialize TArray<Birthday>([]);
  for bd in filtered do
  begin
    if not monthWithUniqueDay(bd, filtered) then ;
  end;
  filtered3 := specialize TArray<Birthday>([]);
  for bd in filtered2 do
  begin
    if dayUnique(bd, filtered2) then ;
  end;
  filtered4 := specialize TArray<Birthday>([]);
  for bd in filtered3 do
  begin
    if monthUnique(bd, filtered3) then ;
  end;
  if (Length(filtered4) = 1) then
  begin
    writeln('Cheryl''s birthday is ' + bstr(specialize _indexList<Birthday>(filtered4, 0)));
  end else
  begin
    writeln('Something went wrong!');
  end;
end.
