// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:15Z
program BitmapHistogram;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function image(): specialize TArray<specialize TArray<integer>>;
begin
  result := specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([0, 0, 10000]), specialize TArray<integer>([65535, 65535, 65535]), specialize TArray<integer>([65535, 65535, 65535])]);
  exit;
end;

function histogram(g: specialize TArray<specialize TArray<integer>>; bins: integer): specialize TArray<integer>;
var
  h: specialize TArray<integer>;
  i: integer;
  idx: integer;
  p: Variant;
  row: Variant;
  x: integer;
  y: integer;
begin
  if (bins <= 0) then ;
  h := specialize TArray<integer>([]);
  i := 0;
  while (i < bins) do
  begin
    h := specialize _appendList<Variant>(h, 0);
    i := i + 1;
  end;
  y := 0;
  while (y < Length(g)) do
  begin
    row := specialize _indexList<integer>(g, y);
    x := 0;
    while (x < Length(row)) do
    begin
      p := row[x];
      idx := Trunc(p * bins - 1 div 65535);
      h[idx] := h[idx] + 1;
      x := x + 1;
    end;
    y := y + 1;
  end;
  result := h;
  exit;
end;

function medianThreshold(h: specialize TArray<integer>): integer;
var
  lSum: integer;
  lb: integer;
  uSum: integer;
  ub: Variant;
begin
  lb := 0;
  ub := Length(h) - 1;
  lSum := 0;
  uSum := 0;
  while (lb <= ub) do
  begin
    if (lSum + specialize _indexList<integer>(h, lb) < uSum + specialize _indexList<integer>(h, ub)) then
    begin
      lSum := lSum + specialize _indexList<integer>(h, lb);
      lb := lb + 1;
    end else
    begin
      uSum := uSum + specialize _indexList<integer>(h, ub);
      ub := ub - 1;
    end;
  end;
  result := Trunc(ub * 65535 div Length(h));
  exit;
end;

function threshold(g: specialize TArray<specialize TArray<integer>>; t: integer): specialize TArray<specialize TArray<integer>>;
var
  newRow: specialize TArray<integer>;
  out: specialize TArray<specialize TArray<integer>>;
  row: Variant;
  x: integer;
  y: integer;
begin
  out := specialize TArray<specialize TArray<integer>>([]);
  y := 0;
  while (y < Length(g)) do
  begin
    row := specialize _indexList<integer>(g, y);
    newRow := specialize TArray<integer>([]);
    x := 0;
    while (x < Length(row)) do
    begin
      if (row[x] < t) then
      begin
        newRow := specialize _appendList<Variant>(newRow, 0);
      end else
      begin
        newRow := specialize _appendList<Variant>(newRow, 65535);
      end;
      x := x + 1;
    end;
    out := specialize _appendList<Variant>(out, newRow);
    y := y + 1;
  end;
  result := out;
  exit;
end;

function printImage(g: specialize TArray<specialize TArray<integer>>): integer;
var
  line: string;
  row: Variant;
  x: integer;
  y: integer;
begin
  y := 0;
  while (y < Length(g)) do
  begin
    row := specialize _indexList<integer>(g, y);
    line := '';
    x := 0;
    while (x < Length(row)) do
    begin
      if (row[x] = 0) then
      begin
        line := line + '0';
      end else
      begin
        line := line + '1';
      end;
      x := x + 1;
    end;
    writeln(line);
    y := y + 1;
  end;
end;

function main(): integer;
var
  bw: Variant;
  h: specialize TArray<integer>;
  img: Variant;
  t: Variant;
begin
  img := image();
  h := histogram(img, 0);
  writeln('Histogram: ' + IntToStr(h));
  t := medianThreshold(h);
  writeln('Threshold: ' + IntToStr(t));
  bw := threshold(img, t);
  printImage(bw);
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
