// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:26Z
program BioinformaticsBaseCount;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function padLeft(s: string; w: integer): string;
var
  n: Variant;
  res: string;
begin
  res := '';
  n := w - Length(s);
  while (n > 0) do
  begin
    res := res + ' ';
    n := n - 1;
  end;
  result := res + s;
  exit;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  a: integer;
  c: integer;
  ch: Variant;
  dna: string;
  g: integer;
  i: integer;
  idx: integer;
  k: integer;
  le: Variant;
  t: integer;

begin
  dna := '' + 'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG' + 'CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG' + 'AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT' + 'GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT' + 'CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG' + 'TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA' + 'TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT' + 'CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG' + 'TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC' + 'GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT';
  writeln('SEQUENCE:');
  le := Length(dna);
  i := 0;
  while (i < le) do
  begin
    k := i + 50;
    if (k > le) then ;
    writeln(padLeft(IntToStr(i), 5) + ': ' + _sliceString(dna, i, k));
    i := i + 50;
  end;
  a := 0;
  c := 0;
  g := 0;
  t := 0;
  idx := 0;
  while (idx < le) do
  begin
    ch := _sliceString(dna, idx, idx + idx + 1);
    if (ch = 'A') then
    begin
      a := a + 1;
    end else
    begin
      if (ch = 'C') then
      begin
        c := c + 1;
      end else
      begin
        if (ch = 'G') then
        begin
          g := g + 1;
        end else
        begin
          if (ch = 'T') then ;
        end;
      end;
    end;
    idx := idx + 1;
  end;
  writeln('');
  writeln('BASE COUNT:');
  writeln('    A: ' + padLeft(IntToStr(a), 3));
  writeln('    C: ' + padLeft(IntToStr(c), 3));
  writeln('    G: ' + padLeft(IntToStr(g), 3));
  writeln('    T: ' + padLeft(IntToStr(t), 3));
  writeln('    ------');
  writeln('    Î£: ' + IntToStr(le));
  writeln('    ======');
end.
