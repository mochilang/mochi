// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:46Z
program CsvDataManipulation;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function join(xs: specialize TArray<string>; sep: string): string;
var
  i: integer;
  res: string;
begin
  res := '';
  i := 0;
  while (i < Length(xs)) do
  begin
    if (i > 0) then ;
    res := res + specialize _indexList<integer>(xs, i);
    i := i + 1;
  end;
  result := res;
  exit;
end;

function parseIntStr(str: string): integer;
var
  _tmp0: specialize TFPGMap<string, integer>;
  digits: specialize TFPGMap<Variant, Variant>;
  i: integer;
  n: integer;
  neg: boolean;
begin
  i := 0;
  neg := False;
  if ((Length(str) > 0) and (_sliceString(str, 0, 1) = '-')) then
  begin
    neg := True;
    i := 1;
  end;
  n := 0;
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('0', 0);
  _tmp0.AddOrSetData('1', 1);
  _tmp0.AddOrSetData('2', 2);
  _tmp0.AddOrSetData('3', 3);
  _tmp0.AddOrSetData('4', 4);
  _tmp0.AddOrSetData('5', 5);
  _tmp0.AddOrSetData('6', 6);
  _tmp0.AddOrSetData('7', 7);
  _tmp0.AddOrSetData('8', 8);
  _tmp0.AddOrSetData('9', 9);
  digits := _tmp0;
  while (i < Length(str)) do
  begin
    n := n * 10 + digits[_sliceString(str, i, i + 1)];
    i := i + 1;
  end;
  if neg then ;
  result := n;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _joinStrings(parts: specialize TArray<string>; sep: string): string;
var i: Integer;
begin
  Result := '';
  for i := 0 to High(parts) do
  begin
    if i > 0 then Result := Result + sep;
    Result := Result + parts[i];
  end;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  i: integer;
  r: string;
  rows: specialize TArray<specialize TArray<string>>;
  s: string;
  sum: function(p0: Variant): double is nested;

begin
  rows := specialize TArray<specialize TArray<string>>([specialize TArray<string>(['A', 'B', 'C']), specialize TArray<string>(['1', '2', '3']), specialize TArray<string>(['4', '5', '6']), specialize TArray<string>(['7', '8', '9'])]);
  rows[0] := specialize _appendList<string>(specialize _indexList<specialize TArray<string>>(rows, 0), 'SUM');
  i := 1;
  while (i < Length(rows)) do
  begin
    sum := 0;
    for s in specialize _indexList<specialize TArray<string>>(rows, i) do
    begin
      sum := sum + parseIntStr(s);
    end;
    rows[i] := specialize _appendList<string>(specialize _indexList<specialize TArray<string>>(rows, i), IntToStr(sum));
    i := i + 1;
  end;
  for r in rows do
  begin
    writeln(_joinStrings(r, ','));
  end;
end.
