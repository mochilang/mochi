// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:18Z
program Arrays;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function listStr(xs: specialize TArray<integer>): string;
var
  i: integer;
  s: specialize TArray<integer>;
begin
  s := '[';
  i := 0;
  while (i < Length(xs)) do
  begin
    s := Concat(s, IntToStr(specialize _indexList<integer>(xs, i)));
    if (i + 1 < Length(xs)) then ;
    i := i + 1;
  end;
  s := Concat(s, ']');
  result := s;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;

var
  a: specialize TArray<integer>;
  cap_s: integer;
  i: integer;
  s: specialize TArray<integer>;

begin
  a := specialize TArray<integer>([0, 0, 0, 0, 0]);
  writeln('len(a) = ' + IntToStr(Length(a)));
  writeln('a = ' + listStr(a));
  a[0] := 3;
  writeln('a = ' + listStr(a));
  writeln('a[0] = ' + IntToStr(specialize _indexList<integer>(a, 0)));
  s := specialize _sliceList<integer>(a, 0, 4);
  cap_s := 5;
  writeln('s = ' + listStr(s));
  writeln('len(s) = ' + IntToStr(Length(s)) + '  cap(s) = ' + IntToStr(cap_s));
  s := specialize _sliceList<integer>(a, 0, 5);
  writeln('s = ' + listStr(s));
  a[0] := 22;
  s[0] := 22;
  writeln('a = ' + listStr(a));
  writeln('s = ' + listStr(s));
  s := specialize _appendList<integer>(s, 4);
  s := specialize _appendList<integer>(s, 5);
  s := specialize _appendList<integer>(s, 6);
  cap_s := 10;
  writeln('s = ' + listStr(s));
  writeln('len(s) = ' + IntToStr(Length(s)) + '  cap(s) = ' + IntToStr(cap_s));
  a[4] := -1;
  writeln('a = ' + listStr(a));
  writeln('s = ' + listStr(s));
  s := specialize TArray<integer>([]);
  for i := 0 to 8 - 1 do
  begin
    s := specialize _appendList<integer>(s, 0);
  end;
  cap_s := 8;
  writeln('s = ' + listStr(s));
  writeln('len(s) = ' + IntToStr(Length(s)) + '  cap(s) = ' + IntToStr(cap_s));
end.
