// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:13Z
program BenfordsLaw;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function floorf(x: double): double;
begin
  result := Double(Trunc(x));
  exit;
end;

function indexOf(s: string; ch: string): integer;
var
  i: integer;
begin
  i := 0;
  while (i < Length(s)) do
  begin
    if (_sliceString(s, i, i + i + 1) = ch) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function fmtF3(x: double): string;
var
  decs: Variant;
  dot: Variant;
  s: Variant;
  y: Variant;
begin
  y := floorf(x * 1000 + 0.5) / 1000;
  s := IntToStr(y);
  dot := indexOf(s, '.');
  if (dot = 0 - 1) then
  begin
    s := s + '.000';
  end else
  begin
    decs := Length(s) - dot - 1;
    if (decs > 3) then
    begin
      s := _sliceString(s, 0, 0 + dot + 4);
    end else
    begin
      while (decs < 3) do
      begin
        s := s + '0';
        decs := decs + 1;
      end;
    end;
  end;
  result := s;
  exit;
end;

function padFloat3(x: double; width: integer): string;
var
  s: Variant;
begin
  s := fmtF3(x);
  while (Length(s) < width) do
  begin
    s := ' ' + s;
  end;
  result := s;
  exit;
end;

function fib1000(): specialize TArray<double>;
var
  a: double;
  b: double;
  i: integer;
  res: specialize TArray<double>;
  t: double;
begin
  a := 0;
  b := 1;
  res := specialize TArray<double>([]);
  i := 0;
  while (i < 1000) do
  begin
    res := specialize _appendList<Variant>(res, b);
    t := b;
    b := b + a;
    a := t;
    i := i + 1;
  end;
  result := res;
  exit;
end;

function leadingDigit(x: double): integer;
begin
  if (x < 0) then ;
  while (x >= 10) do
  begin
    x := x div 10;
  end;
  while ((x > 0) and (x < 1)) do
  begin
    x := x * 10;
  end;
  result := Trunc(x);
  exit;
end;

function show(nums: specialize TArray<double>; title: string): integer;
var
  counts: specialize TArray<Variant>;
  d: Variant;
  i: integer;
  line: string;
  obs: Variant;
  preds: specialize TArray<Variant>;
  total: Variant;
begin
  counts := specialize TArray<integer>([0, 0, 0, 0, 0, 0, 0, 0, 0]);
  for n in nums do
  begin
    d := leadingDigit(n);
    if ((d >= 1) and (d <= 9)) then ;
  end;
  preds := specialize TArray<double>([0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]);
  total := Length(nums);
  writeln(title);
  writeln('Digit  Observed  Predicted');
  i := 0;
  while (i < 9) do
  begin
    obs := Double(counts[i]) / Double(total);
    line := '  ' + IntToStr(i + 1) + '  ' + padFloat3(obs, 9) + '  ' + padFloat3(preds[i], 8);
    writeln(line);
    i := i + 1;
  end;
end;

function main(): integer;
begin
  show(fib1000(), 'First 1000 Fibonacci numbers');
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
