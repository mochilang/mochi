// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:13Z
program BinGivenLimits;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function getBins(limits: specialize TArray<integer>; data: specialize TArray<integer>): specialize TArray<integer>;
var
  bins: specialize TArray<integer>;
  d: Variant;
  i: integer;
  index: integer;
  j: integer;
  n: Variant;
begin
  n := Length(limits);
  bins := specialize TArray<integer>([]);
  i := 0;
  while (i < n + 1) do
  begin
    bins := specialize _appendList<Variant>(bins, 0);
    i := i + 1;
  end;
  j := 0;
  while (j < Length(data)) do
  begin
    d := specialize _indexList<integer>(data, j);
    index := 0;
    while (index < Length(limits)) do
    begin
      if (d < specialize _indexList<integer>(limits, index)) then ;
      if (d = specialize _indexList<integer>(limits, index)) then
      begin
        index := index + 1;
        break;
      end;
      index := index + 1;
    end;
    bins[index] := bins[index] + 1;
    j := j + 1;
  end;
  result := bins;
  exit;
end;

function padLeft(n: integer; width: integer): string;
var
  i: integer;
  out: string;
  pad: Variant;
  s: Variant;
begin
  s := IntToStr(n);
  pad := width - Length(s);
  out := '';
  i := 0;
  while (i < pad) do
  begin
    out := out + ' ';
    i := i + 1;
  end;
  result := out + s;
  exit;
end;

function printBins(limits: specialize TArray<integer>; bins: specialize TArray<integer>): integer;
var
  i: integer;
  n: Variant;
begin
  n := Length(limits);
  writeln('           < ' + padLeft(specialize _indexList<integer>(limits, 0), 3) + ' = ' + padLeft(specialize _indexList<integer>(bins, 0), 2));
  i := 1;
  while (i < n) do
  begin
    writeln('>= ' + padLeft(specialize _indexList<integer>(limits, i - 1), 3) + ' and < ' + padLeft(specialize _indexList<integer>(limits, i), 3) + ' = ' + padLeft(specialize _indexList<integer>(bins, i), 2));
    i := i + 1;
  end;
  writeln('>= ' + padLeft(specialize _indexList<integer>(limits, n - 1), 3) + '           = ' + padLeft(specialize _indexList<integer>(bins, n), 2));
  writeln('');
end;

function main(): integer;
var
  bins: specialize TArray<integer>;
  dataList: specialize TArray<Variant>;
  i: integer;
  limitsList: specialize TArray<Variant>;
begin
  limitsList := specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([23, 37, 43, 53, 67, 83]), specialize TArray<integer>([14, 18, 249, 312, 389, 392, 513, 591, 634, 720])]);
  dataList := specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55]), specialize TArray<integer>([445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749])]);
  i := 0;
  while (i < Length(limitsList)) do
  begin
    writeln('Example ' + IntToStr(i + 1) + '
');
    bins := getBins(limitsList[i], dataList[i]);
    printBins(limitsList[i], bins);
    i := i + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
