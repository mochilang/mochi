// Generated by Mochi compiler v0.10.26 on 2025-07-16T10:01:26Z
program BinaryStrings;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function char(n: integer): string;
var
  idx: Variant;
  letters: string;
begin
  letters := 'abcdefghijklmnopqrstuvwxyz';
  idx := n - 97;
  if ((idx < 0) or (idx >= Length(letters))) then ;
  result := _sliceString(letters, idx, idx + idx + 1);
  exit;
end;

function fromBytes(bs: specialize TArray<integer>): string;
var
  i: integer;
  s: string;
begin
  s := '';
  i := 0;
  while (i < Length(bs)) do
  begin
    s := s + char(specialize _indexList<integer>(bs, i));
    i := i + 1;
  end;
  result := s;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

var
  b: specialize TArray<integer>;
  c: specialize TArray<integer>;
  d: specialize TArray<integer>;
  f: specialize TArray<integer>;
  i: integer;
  rem: specialize TArray<integer>;
  sub: specialize TArray<integer>;
  val: specialize TArray<integer>;
  z: specialize TArray<Variant>;

begin
  b := specialize TArray<integer>([98, 105, 110, 97, 114, 121]);
  writeln(IntToStr(b));
  c := b;
  writeln(IntToStr(c));
  writeln(IntToStr((b = c)));
  d := specialize TArray<integer>([]);
  i := 0;
  while (i < Length(b)) do
  begin
    d := specialize _appendList<integer>(d, specialize _indexList<integer>(b, i));
    i := i + 1;
  end;
  d[1] := 97;
  d[4] := 110;
  writeln(fromBytes(b));
  writeln(fromBytes(d));
  writeln(IntToStr((Length(b) = 0)));
  z := specialize _appendList<integer>(b, 122);
  writeln(fromBytes(z));
  sub := specialize _sliceList<integer>(b, 1, 3);
  writeln(fromBytes(sub));
  f := specialize TArray<integer>([]);
  i := 0;
  while (i < Length(d)) do
  begin
    val := specialize _indexList<integer>(d, i);
    if (val = 110) then
    begin
      f := specialize _appendList<integer>(f, 109);
    end else
    begin
      f := specialize _appendList<integer>(f, val);
    end;
    i := i + 1;
  end;
  writeln(fromBytes(d) + ' -> ' + fromBytes(f));
  rem := specialize TArray<integer>([]);
  rem := specialize _appendList<integer>(rem, specialize _indexList<integer>(b, 0));
  i := 3;
  while (i < Length(b)) do
  begin
    rem := specialize _appendList<integer>(rem, specialize _indexList<integer>(b, i));
    i := i + 1;
  end;
  writeln(fromBytes(rem));
end.
