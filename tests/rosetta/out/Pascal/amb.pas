// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:06Z
program Amb;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function amb(wordsets: specialize TArray<specialize TArray<string>>; res: specialize TArray<string>; idx: integer): boolean;
var
  i: integer;
  prev: string;
  w: Variant;
begin
  if (idx = Length(wordsets)) then ;
  prev := '';
  if (idx > 0) then ;
  i := 0;
  while (i < Length(specialize _indexList<integer>(wordsets, idx))) do
  begin
    w := specialize _indexList<integer>(specialize _indexList<integer>(wordsets, idx), i);
    if ((idx = 0) or (_sliceString(prev, Length(prev) - 1, Length(prev) - 1 + Length(prev)) = _sliceString(w, 0, 0 + 1))) then
    begin
      res[idx] := w;
      if amb(wordsets, res, idx + 1) then ;
    end;
    i := i + 1;
  end;
  result := False;
  exit;
end;

function main(): integer;
var
  i: integer;
  j: integer;
  out: string;
  res: specialize TArray<string>;
  wordset: specialize TArray<Variant>;
begin
  wordset := specialize TArray<specialize TArray<string>>([specialize TArray<string>(['the', 'that', 'a']), specialize TArray<string>(['frog', 'elephant', 'thing']), specialize TArray<string>(['walked', 'treaded', 'grows']), specialize TArray<string>(['slowly', 'quickly'])]);
  res := specialize TArray<string>([]);
  i := 0;
  while (i < Length(wordset)) do
  begin
    res := specialize _appendList<Variant>(res, '');
    i := i + 1;
  end;
  if amb(wordset, res, 0) then
  begin
    out := '[' + res[0];
    j := 1;
    while (j < Length(res)) do
    begin
      out := out + ' ' + res[j];
      j := j + 1;
    end;
    out := out + ']';
    writeln(out);
  end else
  begin
    writeln('No amb found');
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
