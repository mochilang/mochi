// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:15Z
program BitmapMidpointCircleAlgorithm;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function initGrid(size: integer): specialize TArray<specialize TArray<string>>;
var
  g: specialize TArray<specialize TArray<string>>;
  row: specialize TArray<string>;
  x: integer;
  y: integer;
begin
  g := specialize TArray<specialize TArray<string>>([]);
  y := 0;
  while (y < size) do
  begin
    row := specialize TArray<string>([]);
    x := 0;
    while (x < size) do
    begin
      row := specialize _appendList<Variant>(row, ' ');
      x := x + 1;
    end;
    g := specialize _appendList<specialize TArray<string>>(g, row);
    y := y + 1;
  end;
  result := g;
  exit;
end;

function _set(g: specialize TArray<specialize TArray<string>>; x: integer; y: integer): integer;
begin
  if ((((x >= 0) and (x < Length(specialize _indexList<specialize TArray<string>>(g, 0)))) and (y >= 0)) and (y < Length(g))) then ;
end;

function circle(r: integer): specialize TArray<specialize TArray<string>>;
var
  err: integer;
  g: specialize TArray<specialize TArray<string>>;
  size: Variant;
  x: Variant;
  y: integer;
begin
  size := r * 2 + 1;
  g := initGrid(size);
  x := r;
  y := 0;
  err := 1 - r;
  while (y <= x) do
  begin
    _set(g, r + x, r + y);
    _set(g, r + y, r + x);
    _set(g, r - x, r + y);
    _set(g, r - y, r + x);
    _set(g, r - x, r - y);
    _set(g, r - y, r - x);
    _set(g, r + x, r - y);
    _set(g, r + y, r - x);
    y := y + 1;
    if (err < 0) then
    begin
      err := err + 2 * y + 1;
    end else
    begin
      x := x - 1;
      err := err + 2 * y - x + 1;
    end;
  end;
  result := g;
  exit;
end;

function trimRight(row: specialize TArray<string>): string;
var
  _end: Variant;
  i: integer;
  s: string;
begin
  _end := Length(row);
  while ((_end > 0) and (specialize _indexList<string>(row, _end - 1) = ' ')) do
  begin
    _end := _end - 1;
  end;
  s := '';
  i := 0;
  while (i < _end) do
  begin
    s := s + specialize _indexList<string>(row, i);
    i := i + 1;
  end;
  result := s;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

var
  g: specialize TArray<specialize TArray<string>>;
  row: string;

begin
  g := circle(10);
  for row in g do
  begin
    writeln(trimRight(row));
  end;
end.
