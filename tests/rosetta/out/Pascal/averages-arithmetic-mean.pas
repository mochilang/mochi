// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:11Z
program AveragesArithmeticMean;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function mean(v: specialize TArray<double>): specialize TFPGMap<string, any>;
var
  _tmp0: specialize TFPGMap<string, boolean>;
  _tmp1: specialize TFPGMap<string, Variant>;
  i: integer;
  sum: function(p0: Variant): double is nested;
begin
  if (Length(v) = 0) then ;
  sum := 0;
  i := 0;
  while (i < Length(v)) do
  begin
    sum := sum + specialize _indexList<integer>(v, i);
    i := i + 1;
  end;
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ok', True);
  _tmp1.AddOrSetData('mean', sum / Double(Length(v)));
  result := _tmp1;
  exit;
end;

function main(): integer;
var
  r: Variant;
  sets: specialize TArray<Variant>;
begin
  sets := specialize TArray<specialize TArray<Variant>>([specialize TArray<integer>([]), specialize TArray<double>([3, 1, 4, 1, 5, 9]), specialize TArray<double>([1e+20, 3, 1, 4, 1, 5, 9, -1e+20]), specialize TArray<double>([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11]), specialize TArray<double>([10, 20, 30, 40, 50, -100, 4.7, -1100])]);
  for v in sets do
  begin
    writeln('Vector: ' + IntToStr(v));
    r := mean(v);
    if r['ok'] then
    begin
      writeln('Mean of ' + IntToStr(Length(v)) + ' numbers is ' + IntToStr(r['mean']));
    end else
    begin
      writeln('Mean undefined');
    end;
    writeln('');
  end;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
