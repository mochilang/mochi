// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:09Z
program ArithmeticDerivative;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function primeFactors(n: integer): specialize TArray<integer>;
var
  factors: specialize TArray<integer>;
  p: integer;
  x: Variant;
begin
  factors := specialize TArray<integer>([]);
  x := n;
  while (x mod 2 = 0) do
  begin
    factors := specialize _appendList<Variant>(factors, 2);
    x := Trunc(x div 2);
  end;
  p := 3;
  while (p * p <= x) do
  begin
    while (x mod p = 0) do
    begin
      factors := specialize _appendList<Variant>(factors, p);
      x := Trunc(x div p);
    end;
    p := p + 2;
  end;
  if (x > 1) then ;
  result := factors;
  exit;
end;

function _repeat(ch: string; n: integer): string;
var
  i: integer;
  s: string;
begin
  s := '';
  i := 0;
  while (i < n) do
  begin
    s := s + ch;
    i := i + 1;
  end;
  result := s;
  exit;
end;

function D(n: double): double;
var
  c: Variant;
  d: Variant;
  factors: specialize TArray<integer>;
  g: integer;
begin
  if (n < 0) then ;
  if (n < 2) then ;
  factors := specialize TArray<integer>([]);
  if (n < 1e+19) then
  begin
    factors := primeFactors(Trunc(n));
  end else
  begin
    g := Trunc(n div 100);
    factors := primeFactors(g);
    factors := specialize _appendList<integer>(factors, 2);
    factors := specialize _appendList<integer>(factors, 2);
    factors := specialize _appendList<integer>(factors, 5);
    factors := specialize _appendList<integer>(factors, 5);
  end;
  c := Length(factors);
  if (c = 1) then ;
  if (c = 2) then ;
  d := n / Double(specialize _indexList<integer>(factors, 0));
  result := D(d) * Double(specialize _indexList<integer>(factors, 0)) + d;
  exit;
end;

function pad(n: integer): string;
var
  s: string;
begin
  s := IntToStr(n);
  while (Length(s) < 4) do
  begin
    s := ' ' + s;
  end;
  result := s;
  exit;
end;

function main(): integer;
var
  exp: Variant;
  i: integer;
  j: integer;
  line: string;
  m: integer;
  n: integer;
  pow: double;
  res: Variant;
  vals: specialize TArray<integer>;
begin
  vals := specialize TArray<integer>([]);
  n := -99;
  while (n < 101) do
  begin
    vals := specialize _appendList<Variant>(vals, Trunc(D(Double(n))));
    n := n + 1;
  end;
  i := 0;
  while (i < Length(vals)) do
  begin
    line := '';
    j := 0;
    while (j < 10) do
    begin
      line := line + pad(vals[i + j]);
      if (j < 9) then ;
      j := j + 1;
    end;
    writeln(line);
    i := i + 10;
  end;
  pow := 1;
  m := 1;
  while (m < 21) do
  begin
    pow := pow * 10;
    exp := IntToStr(m);
    if (Length(exp) < 2) then ;
    res := IntToStr(m) + _repeat('0', m - 1);
    writeln('D(10^' + exp + ') / 7 = ' + res);
    m := m + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
