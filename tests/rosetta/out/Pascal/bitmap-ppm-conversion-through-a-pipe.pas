// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:15Z
program BitmapPpmConversionThroughAPipe;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type Pixel = record
  R: integer;
  G: integer;
  B: integer;
end;
type Bitmap = record
  cols: integer;
  rows: integer;
  px: specialize TArray<specialize TArray<Pixel>>;
end;

function pixelFromRgb(c: integer): Pixel;
var
  _tmp0: Pixel;
  b: Variant;
  g: Variant;
  r: Variant;
begin
  r := Trunc(c div 65536) mod 256;
  g := Trunc(c div 256) mod 256;
  b := c mod 256;
  _tmp0.R := r;
  _tmp0.G := g;
  _tmp0.B := b;
  result := _tmp0;
  exit;
end;

function rgbFromPixel(p: Pixel): integer;
begin
  result := p.R * 65536 + p.G * 256 + p.B;
  exit;
end;

function NewBitmap(x: integer; y: integer): Bitmap;
var
  _tmp1: Pixel;
  _tmp2: Bitmap;
  col: integer;
  data: specialize TArray<specialize TArray<integer>>;
  r: Variant;
  row: integer;
begin
  data := specialize TArray<specialize TArray<integer>>([]);
  row := 0;
  while (row < y) do
  begin
    r := specialize TArray<integer>([]);
    col := 0;
    while (col < x) do
    begin
      _tmp1.R := 0;
      _tmp1.G := 0;
      _tmp1.B := 0;
      r := specialize _appendList<Variant>(r, _tmp1);
      col := col + 1;
    end;
    data := specialize _appendList<Variant>(data, r);
    row := row + 1;
  end;
  _tmp2.cols := x;
  _tmp2.rows := y;
  _tmp2.px := data;
  result := _tmp2;
  exit;
end;

function FillRgb(b: Bitmap; c: integer): integer;
var
  p: Variant;
  px: Variant;
  row: Variant;
  x: integer;
  y: integer;
begin
  y := 0;
  p := pixelFromRgb(c);
  while (y < b.rows) do
  begin
    x := 0;
    while (x < b.cols) do
    begin
      px := b.px;
      row := px[y];
      row[x] := p;
      px[y] := row;
      b := px;
      x := x + 1;
    end;
    y := y + 1;
  end;
end;

function SetPxRgb(b: Bitmap; x: integer; y: integer; c: integer): boolean;
var
  px: Variant;
  row: Variant;
begin
  if ((((x < 0) or (x >= b.cols)) or (y < 0)) or (y >= b.rows)) then ;
  px := b.px;
  row := px[y];
  row[x] := pixelFromRgb(c);
  px[y] := row;
  b := px;
  result := True;
  exit;
end;

function nextRand(seed: integer): integer;
begin
  result := seed * 1664525 + 1013904223 mod 2147483648;
  exit;
end;

function main(): integer;
var
  bm: Variant;
  i: integer;
  seed: Variant;
  x: Variant;
  y: Variant;
begin
  bm := NewBitmap(400, 300);
  FillRgb(bm, 12615744);
  seed := now();
  i := 0;
  while (i < 2000) do
  begin
    seed := nextRand(seed);
    x := seed mod 400;
    seed := nextRand(seed);
    y := seed mod 300;
    SetPxRgb(bm, x, y, 8405024);
    i := i + 1;
  end;
  x := 0;
  while (x < 400) do
  begin
    y := 240;
    while (y < 245) do
    begin
      SetPxRgb(bm, x, y, 8405024);
      y := y + 1;
    end;
    y := 260;
    while (y < 265) do
    begin
      SetPxRgb(bm, x, y, 8405024);
      y := y + 1;
    end;
    x := x + 1;
  end;
  y := 0;
  while (y < 300) do
  begin
    x := 80;
    while (x < 85) do
    begin
      SetPxRgb(bm, x, y, 8405024);
      x := x + 1;
    end;
    x := 95;
    while (x < 100) do
    begin
      SetPxRgb(bm, x, y, 8405024);
      x := x + 1;
    end;
    y := y + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

begin
  main();
end.
