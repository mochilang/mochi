// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:12Z
program AveragesSimpleMovingAverage;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function indexOf(s: string; ch: string): integer;
var
  i: integer;
begin
  i := 0;
  while (i < Length(s)) do
  begin
    if (_sliceString(s, i, i + i + 1) = ch) then ;
    i := i + 1;
  end;
  result := -1;
  exit;
end;

function fmt3(x: double): string;
var
  decs: Variant;
  dot: Variant;
  s: Variant;
  y: double;
begin
  y := Double(Trunc(x * 1000 + 0.5)) / 1000;
  s := IntToStr(y);
  dot := indexOf(s, '.');
  if (dot = 0 - 1) then
  begin
    s := s + '.000';
  end else
  begin
    decs := Length(s) - dot - 1;
    if (decs > 3) then
    begin
      s := _sliceString(s, 0, 0 + dot + 4);
    end else
    begin
      while (decs < 3) do
      begin
        s := s + '0';
        decs := decs + 1;
      end;
    end;
  end;
  result := s;
  exit;
end;

function pad(s: string; width: integer): string;
var
  out: Variant;
begin
  out := s;
  while (Length(out) < width) do
  begin
    out := ' ' + out;
  end;
  result := out;
  exit;
end;

function smaSeries(xs: specialize TArray<double>; period: integer): specialize TArray<double>;
var
  denom: function(p0: Variant): integer is nested;
  i: integer;
  res: specialize TArray<double>;
  sum: function(p0: Variant): double is nested;
begin
  res := specialize TArray<double>([]);
  sum := 0;
  i := 0;
  while (i < Length(xs)) do
  begin
    sum := sum + specialize _indexList<integer>(xs, i);
    if (i >= period) then ;
    denom := i + 1;
    if (denom > period) then ;
    res := specialize _appendList<Variant>(res, sum / Double(denom));
    i := i + 1;
  end;
  result := res;
  exit;
end;

function main(): integer;
var
  i: integer;
  line: Variant;
  sma3: Variant;
  sma5: Variant;
  xs: specialize TArray<Variant>;
begin
  xs := specialize TArray<double>([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]);
  sma3 := smaSeries(xs, 3);
  sma5 := smaSeries(xs, 5);
  writeln('x       sma3   sma5');
  i := 0;
  while (i < Length(xs)) do
  begin
    line := pad(fmt3(xs[i]), 5) + '  ' + pad(fmt3(sma3[i]), 5) + '  ' + pad(fmt3(sma5[i]), 5);
    writeln(line);
    i := i + 1;
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
