// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:03Z
program AbcProblem;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type
  TFunc0 = function(p0: string): boolean is nested;


function fields(s: string): specialize TArray<string>;
var
  c: Variant;
  cur: string;
  i: integer;
  res: specialize TArray<string>;
begin
  res := specialize TArray<string>([]);
  cur := '';
  i := 0;
  while (i < Length(s)) do
  begin
    c := _sliceString(s, i, i + 1);
    if (c = ' ') then
    begin
      if (Length(cur) > 0) then
      begin
        res := specialize _appendList<Variant>(res, cur);
        cur := '';
      end;
    end else
    begin
      cur := cur + c;
    end;
    i := i + 1;
  end;
  if (Length(cur) > 0) then ;
  result := res;
  exit;
end;

function canSpell(word: string; blks: specialize TArray<string>): boolean;
var
  b: Variant;
  c: Variant;
  i: integer;
  j: integer;
  rest: specialize TArray<string>;
begin
  if (Length(word) = 0) then ;
  c := LowerCase(_sliceString(word, 0, 1));
  i := 0;
  while (i < Length(blks)) do
  begin
    b := specialize _indexList<integer>(blks, i);
    if ((c = LowerCase(Copy(b, 1, 1 - 0))) or (c = LowerCase(Copy(b, 1 + 1, 2 - 1)))) then
    begin
      rest := specialize TArray<string>([]);
      j := 0;
      while (j < Length(blks)) do
      begin
        if (j <> i) then ;
        j := j + 1;
      end;
      if canSpell(_sliceString(word, 1, Length(word)), rest) then ;
    end;
    i := i + 1;
  end;
  result := False;
  exit;
end;

function newSpeller(blocks: string): TFunc0;
var
  bl: Variant;
function _lambda0(w: string): boolean;
begin
  result := canSpell(w, bl);
  exit;
end;

begin
  bl := fields(blocks);
  result := @_lambda0;
  exit;
end;

function main(): integer;
var
  sp: Variant;
begin
  sp := newSpeller('BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM');
  for word in specialize TArray<string>(['A', 'BARK', 'BOOK', 'TREAT', 'COMMON', 'SQUAD', 'CONFUSE']) do
  begin
    writeln(word + ' ' + IntToStr(sp(word)));
  end;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
