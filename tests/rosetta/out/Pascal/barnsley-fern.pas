// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:13Z
program BarnsleyFern;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function randInt(s: integer; n: integer): specialize TArray<integer>;
var
  next: Variant;
begin
  next := s * 1664525 + 1013904223 mod 2147483647;
  result := specialize TArray<integer>([next, next mod n]);
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic procedure _printList<T>(arr: specialize TArray<T>);
var i: Integer;
begin
  for i := 0 to High(arr) do
  begin
    if i > 0 then Write(' ');
    Write(arr[i]);
  end;
  writeln();
end;

var
  col: integer;
  dx: double;
  dy: double;
  grid: specialize TArray<specialize TArray<string>>;
  height: integer;
  i: integer;
  ix: integer;
  iy: integer;
  line: specialize TArray<string>;
  nIter: integer;
  nx: double;
  ny: double;
  r: Variant;
  res: Variant;
  row: integer;
  seed: integer;
  width: integer;
  x: double;
  xMax: double;
  xMin: double;
  y: double;
  yMax: double;
  yMin: double;

begin
  xMin := -2.182;
  xMax := 2.6558;
  yMin := 0;
  yMax := 9.9983;
  width := 60;
  nIter := 10000;
  dx := xMax - xMin;
  dy := yMax - yMin;
  height := Trunc(width * dy div dx);
  grid := specialize TArray<specialize TArray<string>>([]);
  row := 0;
  while (row < height) do
  begin
    line := specialize TArray<string>([]);
    col := 0;
    while (col < width) do
    begin
      line := specialize _appendList<string>(line, ' ');
      col := col + 1;
    end;
    grid := specialize _appendList<specialize TArray<string>>(grid, line);
    row := row + 1;
  end;
  seed := 1;
  x := 0;
  y := 0;
  ix := Trunc(Double(width) * x - xMin / dx);
  iy := Trunc(Double(height) * yMax - y / dy);
  if ((((ix >= 0) and (ix < width)) and (iy >= 0)) and (iy < height)) then ;
  i := 0;
  while (i < nIter) do
  begin
    res := randInt(seed, 100);
    seed := res[0];
    r := res[1];
    if (r < 85) then
    begin
      nx := 0.85 * x + 0.04 * y;
      ny := -0.04 * x + 0.85 * y + 1.6;
      x := nx;
      y := ny;
    end else if (r < 92) then
    begin
      nx := 0.2 * x - 0.26 * y;
      ny := 0.23 * x + 0.22 * y + 1.6;
      x := nx;
      y := ny;
    end else if (r < 99) then
    begin
      nx := -0.15 * x + 0.28 * y;
      ny := 0.26 * x + 0.24 * y + 0.44;
      x := nx;
      y := ny;
    end else
    begin
      x := 0;
      y := 0.16 * y;
    end;
    ix := Trunc(Double(width) * x - xMin / dx);
    iy := Trunc(Double(height) * yMax - y / dy);
    if ((((ix >= 0) and (ix < width)) and (iy >= 0)) and (iy < height)) then ;
    i := i + 1;
  end;
  row := 0;
  while (row < height) do
  begin
    line := '';
    col := 0;
    while (col < width) do
    begin
      line := Concat(line, specialize _indexList<specialize TArray<string>>(specialize _indexList<specialize TArray<string>>(grid, row), col));
      col := col + 1;
    end;
    specialize _printList<string>(line);
    row := row + 1;
  end;
end.
