// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:21Z
program ChaosGame;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function randInt(s: integer; n: integer): specialize TArray<integer>;
var
  next: Variant;
begin
  next := s * 1664525 + 1013904223 mod 2147483647;
  result := specialize TArray<integer>([next, next mod n]);
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

generic procedure _printList<T>(arr: specialize TArray<T>);
var i: Integer;
begin
  for i := 0 to High(arr) do
  begin
    if i > 0 then Write(' ');
    Write(arr[i]);
  end;
  writeln();
end;

var
  grid: specialize TArray<specialize TArray<string>>;
  height: integer;
  i: integer;
  idx: integer;
  iterations: integer;
  line: specialize TArray<string>;
  px: integer;
  py: integer;
  r: Variant;
  seed: integer;
  v: specialize TArray<specialize TArray<integer>>;
  vertices: specialize TArray<specialize TArray<integer>>;
  width: integer;
  x: integer;
  y: integer;

begin
  width := 60;
  height := Trunc(Double(width) * 0.86602540378);
  iterations := 5000;
  grid := specialize TArray<specialize TArray<string>>([]);
  y := 0;
  while (y < height) do
  begin
    line := specialize TArray<string>([]);
    x := 0;
    while (x < width) do
    begin
      line := specialize _appendList<string>(line, ' ');
      x := x + 1;
    end;
    grid := specialize _appendList<specialize TArray<string>>(grid, line);
    y := y + 1;
  end;
  seed := 1;
  vertices := specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([0, height - 1]), specialize TArray<integer>([width - 1, height - 1]), specialize TArray<integer>([Trunc(width div 2), 0])]);
  px := Trunc(width div 2);
  py := Trunc(height div 2);
  i := 0;
  while (i < iterations) do
  begin
    r := randInt(seed, 3);
    seed := r[0];
    idx := Trunc(r[1]);
    v := specialize _indexList<specialize TArray<integer>>(vertices, idx);
    px := Trunc(px + specialize _indexList<specialize TArray<integer>>(v, 0) div 2);
    py := Trunc(py + specialize _indexList<specialize TArray<integer>>(v, 1) div 2);
    if ((((px >= 0) and (px < width)) and (py >= 0)) and (py < height)) then ;
    i := i + 1;
  end;
  y := 0;
  while (y < height) do
  begin
    line := '';
    x := 0;
    while (x < width) do
    begin
      line := Concat(line, specialize _indexList<specialize TArray<string>>(specialize _indexList<specialize TArray<string>>(grid, y), x));
      x := x + 1;
    end;
    specialize _printList<string>(line);
    y := y + 1;
  end;
end.
