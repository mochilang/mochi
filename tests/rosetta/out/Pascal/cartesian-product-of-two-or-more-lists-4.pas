// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:20Z
program CartesianProductOfTwoOrMoreLists4;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function listStr(xs: specialize TArray<integer>): string;
var
  i: integer;
  s: string;
begin
  s := '[';
  i := 0;
  while (i < Length(xs)) do
  begin
    s := s + IntToStr(specialize _indexList<integer>(xs, i));
    if (i < Length(xs) - 1) then ;
    i := i + 1;
  end;
  s := s + ']';
  result := s;
  exit;
end;

function llStr(lst: specialize TArray<specialize TArray<integer>>): string;
var
  i: integer;
  s: string;
begin
  s := '[';
  i := 0;
  while (i < Length(lst)) do
  begin
    s := s + listStr(specialize _indexList<integer>(lst, i));
    if (i < Length(lst) - 1) then ;
    i := i + 1;
  end;
  s := s + ']';
  result := s;
  exit;
end;

function copy(xs: specialize TArray<integer>): specialize TArray<integer>;
var
  out: specialize TArray<integer>;
begin
  out := specialize TArray<integer>([]);
  for v in xs do
  begin
    out := specialize _appendList<Variant>(out, v);
  end;
  result := out;
  exit;
end;

function cartN(lists: any): specialize TArray<specialize TArray<integer>>;
var
  a: specialize TArray<specialize TArray<integer>>;
  last: Variant;
  left: Variant;
  out: specialize TArray<integer>;
  row: Variant;
begin
  if (lists = Null) then ;
  a := Trunc(lists);
  if (Length(a) = 0) then ;
  out := specialize TArray<integer>([]);
  last := Length(a) - 1;
  left := cartN(Copy(a, 1, last - 0));
  for p in left do
  begin
    for x in a[last] do
    begin
      row := copy(p);
      row := specialize _appendList<Variant>(row, x);
      out := specialize _appendList<integer>(out, row);
    end;
  end;
  result := out;
  exit;
end;

function main(): integer;
begin
  writeln(llStr(cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([1, 2]), specialize TArray<integer>([3, 4])]))));
  writeln(llStr(cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([3, 4]), specialize TArray<integer>([1, 2])]))));
  writeln(llStr(cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([1, 2]), specialize TArray<integer>([])]))));
  writeln(llStr(cartN(specialize TArray<specialize TArray<Variant>>([specialize TArray<integer>([]), specialize TArray<integer>([1, 2])]))));
  writeln('');
  writeln('[');
  for p in cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([1776, 1789]), specialize TArray<integer>([7, 12]), specialize TArray<integer>([4, 14, 23]), specialize TArray<integer>([0, 1])])) do
  begin
    writeln(' ' + listStr(p));
  end;
  writeln(']');
  writeln(llStr(cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([1, 2, 3]), specialize TArray<integer>([30]), specialize TArray<integer>([500, 100])]))));
  writeln(llStr(cartN(specialize TArray<specialize TArray<integer>>([specialize TArray<integer>([1, 2, 3]), specialize TArray<integer>([]), specialize TArray<integer>([500, 100])]))));
  writeln('');
  writeln(llStr(cartN(Null)));
  writeln(llStr(cartN(specialize TArray<integer>([]))));
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
