// Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
program _9BottlesOfBeer2;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, Classes, Variants;

type
  generic TArray<T> = array of T;
generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _joinStrings(parts: specialize TArray<string>; sep: string): string;
var i: Integer;
begin
  Result := '';
  for i := 0 to High(parts) do
  begin
    if i > 0 then Result := Result + sep;
    Result := Result + parts[i];
  end;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;


function fields(s: string): specialize TArray<string>;
var
  ch: Variant;
  cur: string;
  i: integer;
  words: specialize TArray<Variant>;
begin
  words := specialize TArray<Variant>([]);
  cur := '';
  i := 0;
  while (i < Length(s)) do
  begin
    ch := _sliceString(s, i, i + i + 1);
    if (((ch = ' ') or (ch = '
')) or (ch = '  ')) then
    begin
      if (Length(cur) > 0) then
      begin
        words := specialize _appendList<Variant>(words, cur);
        cur := '';
      end;
    end else
    begin
      cur := cur + ch;
    end;
    i := i + 1;
  end;
  if (Length(cur) > 0) then ;
  result := words;
  exit;
end;

function join(xs: specialize TArray<string>; sep: string): string;
var
  i: integer;
  res: string;
begin
  res := '';
  i := 0;
  while (i < Length(xs)) do
  begin
    if (i > 0) then ;
    res := res + specialize _indexList<integer>(xs, i);
    i := i + 1;
  end;
  result := res;
  exit;
end;

function numberName(n: integer): string;
var
  s: Variant;
  small: specialize TArray<Variant>;
  t: specialize TArray<Variant>;
  tens: specialize TArray<Variant>;
begin
  small := specialize TArray<Variant>(['no', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']);
  tens := specialize TArray<Variant>(['ones', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']);
  if (n < 0) then ;
  if (n < 20) then ;
  if (n < 100) then
  begin
    t := specialize _indexList<Variant>(tens, Trunc(n div 10));
    s := n mod 10;
    if (s > 0) then ;
    result := t;
    exit;
  end;
  result := '';
  exit;
end;

function pluralizeFirst(s: string; n: integer): string;
var
  w: Variant;
begin
  if (n = 1) then ;
  w := fields(s);
  if (Length(w) > 0) then ;
  result := _joinStrings(w, ' ');
  exit;
end;

function randInt(seed: integer; n: integer): integer;
var
  next: Variant;
begin
  next := seed * 1664525 + 1013904223 mod 2147483647;
  result := next mod n;
  exit;
end;

function slur(p: string; d: integer): string;
var
  a: specialize TArray<Variant>;
  i: integer;
  idx: Variant;
  j: Variant;
  k: integer;
  s: Variant;
  seed: Variant;
  tmp: specialize TArray<Variant>;
  w: Variant;
begin
  if (Length(p) <= 2) then ;
  a := specialize TArray<Variant>([]);
  i := 1;
  while (i < Length(p) - 1) do
  begin
    a := specialize _appendList<Variant>(a, _sliceString(p, i, i + i + 1));
    i := i + 1;
  end;
  idx := Length(a) - 1;
  seed := d;
  while (idx >= 1) do
  begin
    seed := seed * 1664525 + 1013904223 mod 2147483647;
    if (seed mod 100 >= d) then
    begin
      j := seed mod idx + 1;
      tmp := specialize _indexList<Variant>(a, idx);
      a[idx] := specialize _indexList<Variant>(a, j);
      a[j] := tmp;
    end;
    idx := idx - 1;
  end;
  s := _sliceString(p, 0, 0 + 1);
  k := 0;
  while (k < Length(a)) do
  begin
    s := s + specialize _indexList<Variant>(a, k);
    k := k + 1;
  end;
  s := s + _sliceString(p, Length(p) - 1, Length(p) - 1 + Length(p));
  w := fields(s);
  result := _joinStrings(w, ' ');
  exit;
end;

procedure main();
var
  i: integer;
begin
  i := 99;
  while (i > 0) do
  begin
    writeln(slur(numberName(i), i) + ' ' + pluralizeFirst(slur('bottle of', i), i) + ' ' + slur('beer on the wall', i));
    writeln(slur(numberName(i), i) + ' ' + pluralizeFirst(slur('bottle of', i), i) + ' ' + slur('beer', i));
    writeln(slur('take one', i) + ' ' + slur('down', i) + ' ' + slur('pass it around', i));
    writeln(slur(numberName(i - 1), i) + ' ' + pluralizeFirst(slur('bottle of', i), i - 1) + ' ' + slur('beer on the wall', i));
    i := i - 1;
  end;
end;

begin
  main();
end.
