// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:05Z
program AlgebraicDataTypes;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function node(cl: string; le: any; aa: integer; ri: any): specialize TFPGMap<string, any>;
var
  _tmp0: specialize TFPGMap<string, Variant>;
begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cl', cl);
  _tmp0.AddOrSetData('le', le);
  _tmp0.AddOrSetData('aa', aa);
  _tmp0.AddOrSetData('ri', ri);
  result := _tmp0;
  exit;
end;

function treeString(t: any): string;
var
  m: specialize TFPGMap<string, Variant>;
begin
  if (t = Null) then ;
  m := Trunc(t);
  result := 'T(' + m['cl'] + ', ' + treeString(m['le']) + ', ' + IntToStr(m['aa']) + ', ' + treeString(m['ri']) + ')';
  exit;
end;

function balance(t: any): any;
var
  le: specialize TFPGMap<string, Variant>;
  leMap: specialize TFPGMap<string, Variant>;
  lele: specialize TFPGMap<string, Variant>;
  leleMap: specialize TFPGMap<string, Variant>;
  leri: specialize TFPGMap<string, Variant>;
  leriMap: specialize TFPGMap<string, Variant>;
  m: specialize TFPGMap<string, Variant>;
  ri: specialize TFPGMap<string, Variant>;
  riMap: specialize TFPGMap<string, Variant>;
  rile: specialize TFPGMap<string, Variant>;
  rileMap: specialize TFPGMap<string, Variant>;
  riri: specialize TFPGMap<string, Variant>;
  ririMap: specialize TFPGMap<string, Variant>;
begin
  if (t = Null) then ;
  m := Trunc(t);
  if (m.KeyData['cl'] <> 'B') then ;
  le := m.KeyData['le'];
  ri := m.KeyData['ri'];
  if (le <> Null) then
  begin
    leMap := Trunc(le);
    if (leMap['cl'] = 'R') then
    begin
      lele := leMap['le'];
      if (lele <> Null) then
      begin
        leleMap := Trunc(lele);
        if (leleMap['cl'] = 'R') then ;
      end;
      leri := leMap['ri'];
      if (leri <> Null) then
      begin
        leriMap := Trunc(leri);
        if (leriMap['cl'] = 'R') then ;
      end;
    end;
  end;
  if (ri <> Null) then
  begin
    riMap := Trunc(ri);
    if (riMap['cl'] = 'R') then
    begin
      rile := riMap['le'];
      if (rile <> Null) then
      begin
        rileMap := Trunc(rile);
        if (rileMap['cl'] = 'R') then ;
      end;
      riri := riMap['ri'];
      if (riri <> Null) then
      begin
        ririMap := Trunc(riri);
        if (ririMap['cl'] = 'R') then ;
      end;
    end;
  end;
  result := t;
  exit;
end;

function ins(tr: any; x: integer): any;
begin
  if (tr = Null) then ;
  if (x < tr['aa']) then ;
  if (x > tr['aa']) then ;
  result := tr;
  exit;
end;

function insert(tr: any; x: integer): any;
var
  m: specialize TFPGMap<string, Variant>;
  t: Variant;
begin
  t := ins(tr, x);
  if (t = Null) then ;
  m := Trunc(t);
  result := node('B', m.KeyData['le'], m.KeyData['aa'], m.KeyData['ri']);
  exit;
end;

var
  i: integer;
  tr: Variant;

begin
  tr := Null;
  i := 1;
  while (i <= 16) do
  begin
    tr := insert(tr, i);
    i := i + 1;
  end;
  writeln(treeString(tr));
end.
