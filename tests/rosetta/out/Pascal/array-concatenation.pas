// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:10Z
program ArrayConcatenation;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function concatInts(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<integer>;
var
  out: specialize TArray<integer>;
begin
  out := specialize TArray<integer>([]);
  for v in a do
  begin
    out := specialize _appendList<Variant>(out, v);
  end;
  for v in b do
  begin
    out := specialize _appendList<Variant>(out, v);
  end;
  result := out;
  exit;
end;

function concatAny(a: specialize TArray<any>; b: specialize TArray<any>): specialize TArray<any>;
var
  out: specialize TArray<integer>;
begin
  out := specialize TArray<integer>([]);
  for v in a do
  begin
    out := specialize _appendList<integer>(out, v);
  end;
  for v in b do
  begin
    out := specialize _appendList<integer>(out, v);
  end;
  result := out;
  exit;
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

var
  a: specialize TArray<integer>;
  b: specialize TArray<integer>;
  i: specialize TArray<Variant>;
  j: specialize TArray<Variant>;
  l: specialize TArray<integer>;
  m: specialize TArray<integer>;

begin
  a := specialize TArray<integer>([1, 2, 3]);
  b := specialize TArray<integer>([7, 12, 60]);
  writeln(IntToStr(concatInts(a, b)));
  i := specialize TArray<Variant>([1, 2, 3]);
  j := specialize TArray<Variant>(['Crosby', 'Stills', 'Nash', 'Young']);
  writeln(IntToStr(concatAny(i, j)));
  l := specialize TArray<integer>([1, 2, 3]);
  m := specialize TArray<integer>([7, 12, 60]);
  writeln(IntToStr(concatInts(l, m)));
end.
