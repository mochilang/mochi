// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:12Z
program AveragesMedian3;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function qsel(a: specialize TArray<double>; k: integer): double;
var
  arr: Variant;
  i: integer;
  last: Variant;
  pv: Variant;
  px: Variant;
  tmp: Variant;
  tmp2: Variant;
  v: Variant;
begin
  arr := a;
  while (Length(arr) > 1) do
  begin
    px := now() mod Length(arr);
    pv := arr[px];
    last := Length(arr) - 1;
    tmp := arr[px];
    arr[px] := arr[last];
    arr[last] := tmp;
    px := 0;
    i := 0;
    while (i < last) do
    begin
      v := arr[i];
      if (v < pv) then
      begin
        tmp2 := arr[px];
        arr[px] := arr[i];
        arr[i] := tmp2;
        px := px + 1;
      end;
      i := i + 1;
    end;
    if (px = k) then ;
    if (k < px) then
    begin
      arr := Copy(arr, 1, px - 0);
    end else
    begin
      tmp2 := arr[px];
      arr[px] := pv;
      arr[last] := tmp2;
      arr := Copy(arr, px + 1 + 1, Length(arr) - px + 1);
      k := k - px + 1;
    end;
  end;
  result := arr[0];
  exit;
end;

function median(list: specialize TArray<double>): double;
var
  arr: Variant;
  half: integer;
  med: Variant;
begin
  arr := list;
  half := Trunc(Length(arr) div 2);
  med := qsel(arr, half);
  if (Length(arr) mod 2 = 0) then ;
  result := med;
  exit;
end;

begin
  writeln(FloatToStr(median(specialize TArray<double>([3, 1, 4, 1]))));
  writeln(FloatToStr(median(specialize TArray<double>([3, 1, 4, 1, 5]))));
end.
