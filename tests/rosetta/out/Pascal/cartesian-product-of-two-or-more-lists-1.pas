// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:19Z
program CartesianProductOfTwoOrMoreLists1;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function cart2(a: specialize TArray<integer>; b: specialize TArray<integer>): specialize TArray<specialize TArray<integer>>;
var
  p: specialize TArray<specialize TArray<integer>>;
begin
  p := specialize TArray<specialize TArray<integer>>([]);
  for x in a do
  begin
    for y in b do
    begin
      p := specialize _appendList<Variant>(p, specialize TArray<integer>([x, y]));
    end;
  end;
  result := p;
  exit;
end;

function llStr(lst: specialize TArray<specialize TArray<integer>>): string;
var
  i: integer;
  j: integer;
  row: Variant;
  s: string;
begin
  s := '[';
  i := 0;
  while (i < Length(lst)) do
  begin
    row := specialize _indexList<integer>(lst, i);
    s := s + '[';
    j := 0;
    while (j < Length(row)) do
    begin
      s := s + IntToStr(row[j]);
      if (j < Length(row) - 1) then ;
      j := j + 1;
    end;
    s := s + ']';
    if (i < Length(lst) - 1) then ;
    i := i + 1;
  end;
  s := s + ']';
  result := s;
  exit;
end;

function main(): integer;
begin
  writeln(llStr(cart2(specialize TArray<integer>([1, 2]), specialize TArray<integer>([3, 4]))));
  writeln(llStr(cart2(specialize TArray<integer>([3, 4]), specialize TArray<integer>([1, 2]))));
  writeln(llStr(cart2(specialize TArray<integer>([1, 2]), specialize TArray<integer>([]))));
  writeln(llStr(cart2(specialize TArray<integer>([]), specialize TArray<integer>([1, 2]))));
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

begin
  main();
end.
