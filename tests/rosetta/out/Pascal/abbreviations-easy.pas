// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:03Z
program AbbreviationsEasy;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function fields(s: string): specialize TArray<string>;
var
  ch: Variant;
  cur: string;
  i: integer;
  words: specialize TArray<string>;
begin
  words := specialize TArray<string>([]);
  cur := '';
  i := 0;
  while (i < Length(s)) do
  begin
    ch := _sliceString(s, i, i + i + 1);
    if (((ch = ' ') or (ch = '
')) or (ch = '  ')) then
    begin
      if (Length(cur) > 0) then
      begin
        words := specialize _appendList<Variant>(words, cur);
        cur := '';
      end;
    end else
    begin
      cur := cur + ch;
    end;
    i := i + 1;
  end;
  if (Length(cur) > 0) then ;
  result := words;
  exit;
end;

function padRight(s: string; width: integer): string;
var
  i: Variant;
  out: Variant;
begin
  out := s;
  i := Length(s);
  while (i < width) do
  begin
    out := out + ' ';
    i := i + 1;
  end;
  result := out;
  exit;
end;

function join(xs: specialize TArray<string>; sep: string): string;
var
  i: Variant;
  res: string;
begin
  res := '';
  i := 0;
  while (i < Length(xs)) do
  begin
    if (i > 0) then ;
    res := res + specialize _indexList<integer>(xs, i);
    i := i + 1;
  end;
  result := res;
  exit;
end;

function validate(commands: specialize TArray<string>; words: specialize TArray<string>; mins: specialize TArray<integer>): specialize TArray<string>;
var
  c: Variant;
  ci: integer;
  cmd: Variant;
  found: boolean;
  results: specialize TArray<string>;
  w: specialize TArray<string>;
  wi: integer;
  wlen: Variant;
  ww: Variant;
begin
  results := specialize TArray<string>([]);
  if (Length(words) = 0) then ;
  wi := 0;
  while (wi < Length(words)) do
  begin
    w := specialize _indexList<string>(words, wi);
    found := False;
    wlen := Length(w);
    ci := 0;
    while (ci < Length(commands)) do
    begin
      cmd := specialize _indexList<integer>(commands, ci);
      if (((specialize _indexList<integer>(mins, ci) <> 0) and (wlen >= specialize _indexList<integer>(mins, ci))) and (wlen <= Length(cmd))) then
      begin
        c := UpperCase(cmd);
        ww := UpperCase(w);
        if (_sliceString(c, 0, 0 + wlen) = ww) then
        begin
          results := specialize _appendList<Variant>(results, c);
          found := True;
          break;
        end;
      end;
      ci := ci + 1;
    end;
    if not found then ;
    wi := wi + 1;
  end;
  result := results;
  exit;
end;

function main(): integer;
var
  ch: Variant;
  cmd: Variant;
  commands: Variant;
  count: function(p0: Variant): integer is nested;
  i: Variant;
  j: integer;
  k: integer;
  mins: specialize TArray<integer>;
  out1: string;
  results: specialize TArray<string>;
  sentence: string;
  table: string;
  words: specialize TArray<string>;
begin
  table := 'Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy ' + 'COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ' + 'NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ' + ' Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ' + 'MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ' + 'READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ' + 'RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ';
  commands := fields(table);
  mins := specialize TArray<integer>([]);
  i := 0;
  while (i < Length(commands)) do
  begin
    count := 0;
    j := 0;
    cmd := commands[i];
    while (j < Length(cmd)) do
    begin
      ch := _sliceString(cmd, j, j + j + 1);
      if ((ch >= 'A') and (ch <= 'Z')) then ;
      j := j + 1;
    end;
    mins := specialize _appendList<Variant>(mins, count);
    i := i + 1;
  end;
  sentence := 'riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin';
  words := fields(sentence);
  results := validate(commands, words, mins);
  out1 := 'user words:  ';
  k := 0;
  while (k < Length(words)) do
  begin
    out1 := out1 + padRight(specialize _indexList<string>(words, k), Length(specialize _indexList<string>(results, k))) + ' ';
    k := k + 1;
  end;
  writeln(out1);
  writeln('full words:  ' + _joinStrings(results, ' '));
end;

generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;

function _joinStrings(parts: specialize TArray<string>; sep: string): string;
var i: Integer;
begin
  Result := '';
  for i := 0 to High(parts) do
  begin
    if i > 0 then Result := Result + sep;
    Result := Result + parts[i];
  end;
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

begin
  main();
end.
