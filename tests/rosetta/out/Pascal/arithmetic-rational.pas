// Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
program ArithmeticRational;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, Classes, Variants;

type
  generic TArray<T> = array of T;

function intSqrt(x: integer): integer;
var
  ans: integer;
  left: integer;
  mid: integer;
  right: Variant;
  sq: integer;
begin
  if (x < 2) then ;
  left := 1;
  right := x div 2;
  ans := 0;
  while (left <= right) do
  begin
    mid := left + right - left div 2;
    sq := mid * mid;
    if (sq = x) then ;
    if (sq < x) then
    begin
      left := mid + 1;
      ans := mid;
    end else
    begin
      right := mid - 1;
    end;
  end;
  result := ans;
  exit;
end;

function sumRecip(n: integer): integer;
var
  f: integer;
  f2: Variant;
  limit: Variant;
  s: integer;
begin
  s := 1;
  limit := intSqrt(n);
  f := 2;
  while (f <= limit) do
  begin
    if (n mod f = 0) then
    begin
      s := s + n div f;
      f2 := n div f;
      if (f2 <> f) then ;
    end;
    f := f + 1;
  end;
  result := s;
  exit;
end;

procedure main();
var
  n: Variant;
  nums: specialize TArray<Variant>;
  perfect: string;
  s: Variant;
  val: Variant;
begin
  nums := specialize TArray<Variant>([6, 28, 120, 496, 672, 8128, 30240, 32760, 523776]);
  for n in nums do
  begin
    s := sumRecip(n);
    if (s mod n = 0) then
    begin
      val := s div n;
      perfect := '';
      if (val = 1) then ;
      writeln('Sum of recipr. factors of ' + IntToStr(n) + ' = ' + IntToStr(val) + ' exactly ' + perfect);
    end;
  end;
end;

begin
  main();
end.
