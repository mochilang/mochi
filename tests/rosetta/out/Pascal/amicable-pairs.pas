// Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
program AmicablePairs;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, Classes, Variants;

type
  generic TArray<T> = array of T;
generic function _appendList<T>(arr: specialize TArray<T>; val: T): specialize TArray<T>;
var i,n: Integer;
begin
  n := Length(arr);
  SetLength(Result, n + 1);
  for i := 0 to n - 1 do
    Result[i] := arr[i];
  Result[n] := val;
end;

generic function _indexList<T>(arr: specialize TArray<T>; i: integer): T;
begin
  if i < 0 then i := Length(arr) + i;
  if (i < 0) or (i >= Length(arr)) then
    raise Exception.Create('index out of range');
  Result := arr[i];
end;


function pfacSum(i: integer): integer;
var
  p: integer;
  sum: function(p0: Variant): double is nested;
begin
  sum := 0;
  p := 1;
  while (p <= i div 2) do
  begin
    if (i mod p = 0) then ;
    p := p + 1;
  end;
  result := sum;
  exit;
end;

function pad(n: integer; width: integer): string;
var
  s: Variant;
begin
  s := IntToStr(n);
  while (Length(s) < width) do
  begin
    s := ' ' + s;
  end;
  result := s;
  exit;
end;

procedure main();
var
  i: integer;
  m: specialize TArray<Variant>;
  n: integer;
  sums: specialize TArray<Variant>;
begin
  sums := specialize TArray<Variant>([]);
  i := 0;
  while (i < 20000) do
  begin
    sums := specialize _appendList<Variant>(sums, 0);
    i := i + 1;
  end;
  i := 1;
  while (i < 20000) do
  begin
    sums[i] := pfacSum(i);
    i := i + 1;
  end;
  writeln('The amicable pairs below 20,000 are:');
  n := 2;
  while (n < 19999) do
  begin
    m := specialize _indexList<Variant>(sums, n);
    if (((m > n) and (m < 20000)) and (n = specialize _indexList<Variant>(sums, m))) then ;
    n := n + 1;
  end;
end;

begin
  main();
end.
