// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:11Z
program AssociativeArrayCreation;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function removeKey(m: specialize TFPGMap<string, integer>; k: string): specialize TFPGMap<string, integer>;
var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: integer;
  out: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  out := _tmp0;
  for _tmp1 := 0 to m.Count - 1 do
  begin
    key := m.Keys[_tmp1];
    if (key <> k) then ;
  end;
  result := out;
  exit;
end;

function main(): integer;
var
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  ok: string;
  x: specialize TFPGMap<string, integer>;
  y1: specialize TFPGMap<string, integer>;
begin
  x := Null;
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  x := _tmp2;
  x['foo'] := 3;
  y1 := x['bar'];
  ok := ('bar' in x);
  writeln(y1);
  writeln(ok);
  x := removeKey(x, 'foo');
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('foo', 2);
  _tmp3.AddOrSetData('bar', 42);
  _tmp3.AddOrSetData('baz', -1);
  x := _tmp3;
  writeln(x['foo'], ' ', x['bar'], ' ', x['baz']);
end;

begin
  main();
end.
