# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:12Z
defmodule Main do
	@PI 3.141592653589793
	@dt 0.01
	@spec sinApprox(float()) :: float()
	def sinApprox(x) do
		try do
			term = x
			_ = term
			# sum :: (any() -> float())
			sum = x
			_ = sum
			n = 1
			_ = n
			t1 = fn t1, n, sum, term ->
				try do
					if (n <= 12) do
						# denom :: (any() -> any())
						denom = String.to_float(((2 * n) * ((2 * n) + 1)))
						term = (((-term * x) * x) / denom)
						sum = (sum + term)
						n = (n + 1)
						t1.(t1, n, sum, term)
					else
						{:ok, n, sum, term}
					end
				catch :break ->
					{:ok, n, sum, term}
				end
			end
			{_, n, sum, term} = t1.(t1, n, sum, term)
			_ = n
			_ = sum
			_ = term
			throw {:return, sum}
		catch {:return, v} -> v end
	end
	
	def main do
		# s :: float()
		s = 0
		_ = s
		# t1 :: float()
		t1 = 0
		_ = t1
		# k1 :: float()
		k1 = sinApprox(0)
		_ = k1
		# i :: integer()
		i = 1
		_ = i
		t2 = fn t2, i, k1, s, t1 ->
			try do
				if (i <= 200) do
					t2 = (String.to_float(i) * @dt)
					k2 = sinApprox((t2 * @PI))
					s = (s + (((k1 + k2) * 0.5) * (t2 - t1)))
					t1 = t2
					k1 = k2
					i = (i + 1)
					t2.(t2, i, k1, s, t1)
				else
					{:ok, i, k1, s, t1}
				end
			catch :break ->
				{:ok, i, k1, s, t1}
			end
		end
		{_, i, k1, s, t1} = t2.(t2, i, k1, s, t1)
		_ = i
		_ = k1
		_ = s
		_ = t1
		# i2 :: integer()
		i2 = 1
		_ = i2
		t3 = fn t3, i2, k1, s, t1 ->
			try do
				if (i2 <= 50) do
					t2 = (2 + (String.to_float(i2) * @dt))
					k2 = 0
					s = (s + (((k1 + k2) * 0.5) * (t2 - t1)))
					t1 = t2
					k1 = k2
					i2 = (i2 + 1)
					t3.(t3, i2, k1, s, t1)
				else
					{:ok, i2, k1, s, t1}
				end
			catch :break ->
				{:ok, i2, k1, s, t1}
			end
		end
		{_, i2, k1, s, t1} = t3.(t3, i2, k1, s, t1)
		_ = i2
		_ = k1
		_ = s
		_ = t1
		IO.inspect(s)
	end
	end
Main.main()
