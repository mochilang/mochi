# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:51Z
defmodule Main do
  @spec countDivisors(integer()) :: integer()
  def countDivisors(n) do
    try do
      if n < 2 do
        throw({:return, 1})
      end

      # count :: (any() -> integer())
      count = 2
      _ = count
      i = 2
      _ = i

      t1 = fn t1, count, i ->
        try do
          if i <= n / 2 do
            if rem(n, i) == 0 do
              count = count + 1
            end

            i = i + 1
            t1.(t1, count, i)
          else
            {:ok, count, i}
          end
        catch
          :break ->
            {:ok, count, i}
        end
      end

      {_, count, i} = t1.(t1, count, i)
      _ = count
      _ = i
      throw({:return, count})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      IO.puts("The first 20 anti-primes are:")
      maxDiv = 0
      _ = maxDiv
      # count :: (any() -> integer())
      count = 0
      _ = count
      n = 1
      _ = n
      line = ""
      _ = line

      t2 = fn t2, count, line, maxDiv, n ->
        try do
          if count < 20 do
            d = countDivisors(n)

            if d > maxDiv do
              line = (line + to_string(n)) <> " "
              maxDiv = d
              count = count + 1
            end

            n = n + 1
            t2.(t2, count, line, maxDiv, n)
          else
            {:ok, count, line, maxDiv, n}
          end
        catch
          :break ->
            {:ok, count, line, maxDiv, n}
        end
      end

      {_, count, line, maxDiv, n} = t2.(t2, count, line, maxDiv, n)
      _ = count
      _ = line
      _ = maxDiv
      _ = n
      line = _slice_string(line, 0, length(line) - 1)
      IO.inspect(line)
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
