# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:55Z
defmodule Main do
  @spec sortFloat(list(float())) :: list(float())
  def sortFloat(xs) do
    try do
      arr = xs
      _ = arr
      n = length(arr)
      _ = n
      i = 0
      _ = i

      t1 = fn t1, arr, i ->
        try do
          if i < n do
            j = 0
            _ = j

            t2 = fn t2, arr, j ->
              try do
                if j < n - 1 do
                  if Enum.at(arr, j) > Enum.at(arr, j + 1) do
                    tmp = Enum.at(arr, j)
                    arr = Map.put(arr, j, Enum.at(arr, j + 1))
                    arr = Map.put(arr, j + 1, tmp)
                  end

                  j = j + 1
                  t2.(t2, arr, j)
                else
                  {:ok, arr, j}
                end
              catch
                :break ->
                  {:ok, arr, j}
              end
            end

            {_, arr, j} = t2.(t2, arr, j)
            _ = arr
            _ = j
            i = i + 1
            t1.(t1, arr, i)
          else
            {:ok, arr, i}
          end
        catch
          :break ->
            {:ok, arr, i}
        end
      end

      {_, arr, i} = t1.(t1, arr, i)
      _ = arr
      _ = i
      throw({:return, arr})
    catch
      {:return, v} -> v
    end
  end

  @spec median(list(float())) :: float()
  def median(a) do
    try do
      arr = sortFloat(a)
      _ = arr
      half = String.to_integer(length(arr) / 2)
      m = Enum.at(arr, half)
      _ = m

      if rem(length(arr), 2) == 0 do
        m = (m + Enum.at(arr, half - 1)) / 2
      end

      throw({:return, m})
    catch
      {:return, v} -> v
    end
  end

  def main do
    IO.puts(to_string(median([3, 1, 4, 1])))
    IO.puts(to_string(median([3, 1, 4, 1, 5])))
  end
end

Main.main()
