# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:58Z
defmodule Main do
  @b [0.16666667, 0.5, 0.5, 0.16666667]
  @spec applyFilter(list(float()), list(float()), list(float())) :: list(float())
  def applyFilter(input, a, b) do
    try do
      out = []
      _ = out
      scale = 1 / Enum.at(a, 0)
      i = 0
      _ = i

      t1 = fn t1, i, out ->
        try do
          if i < length(input) do
            tmp = 0
            _ = tmp
            j = 0
            _ = j

            t2 = fn t2, j, tmp ->
              try do
                if j <= i && j < length(@b) do
                  tmp = tmp + Enum.at(@b, j) * Enum.at(input, i - j)
                  j = j + 1
                  t2.(t2, j, tmp)
                else
                  {:ok, j, tmp}
                end
              catch
                :break ->
                  {:ok, j, tmp}
              end
            end

            {_, j, tmp} = t2.(t2, j, tmp)
            _ = j
            _ = tmp
            j = 0

            t3 = fn t3, j, tmp ->
              try do
                if j < i && j + 1 < length(a) do
                  tmp = tmp - Enum.at(a, j + 1) * Enum.at(out, i - j - 1)
                  j = j + 1
                  t3.(t3, j, tmp)
                else
                  {:ok, j, tmp}
                end
              catch
                :break ->
                  {:ok, j, tmp}
              end
            end

            {_, j, tmp} = t3.(t3, j, tmp)
            _ = j
            _ = tmp
            out = out ++ [tmp * scale]
            i = i + 1
            t1.(t1, i, out)
          else
            {:ok, i, out}
          end
        catch
          :break ->
            {:ok, i, out}
        end
      end

      {_, i, out} = t1.(t1, i, out)
      _ = i
      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # a :: list(float())
    a = [1, -0.00000000000000027756, 0.33333333, -0.0000000000000000185]
    # sig :: list(float())
    sig = [
      -0.917843918645,
      0.141984778794,
      1.20536903482,
      0.190286794412,
      -0.662370894973,
      -1.00700480494,
      -0.404707073677,
      0.800482325044,
      0.743500089861,
      1.01090520172,
      0.741527555207,
      0.277841675195,
      0.400833448236,
      -0.2085993586,
      -0.172842103641,
      -0.134316096293,
      0.0259303398477,
      0.490105989562,
      0.549391221511,
      0.9047198589
    ]

    # res :: list(float())
    res = applyFilter(sig, a, @b)
    # k :: integer()
    k = 0
    _ = k

    t4 = fn t4, k ->
      try do
        if k < length(res) do
          IO.inspect(Enum.at(res, k))
          k = k + 1
          t4.(t4, k)
        else
          {:ok, k}
        end
      catch
        :break ->
          {:ok, k}
      end
    end

    {_, k} = t4.(t4, k)
    _ = k
  end
end

Main.main()
