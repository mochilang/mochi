# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:46:03Z
defmodule Main do
  @n 10
  @spec sqrtApprox(float()) :: float()
  def sqrtApprox(x) do
    try do
      guess = x
      _ = guess
      i = 0
      _ = i

      t1 = fn t1, guess, i ->
        try do
          if i < 20 do
            guess = (guess + x / guess) / 2
            i = i + 1
            t1.(t1, guess, i)
          else
            {:ok, guess, i}
          end
        catch
          :break ->
            {:ok, guess, i}
        end
      end

      {_, guess, i} = t1.(t1, guess, i)
      _ = guess
      _ = i
      throw({:return, guess})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # sum :: float()
    sum = 0
    _ = sum
    # x :: integer()
    x = 1
    _ = x

    t2 = fn t2, sum, x ->
      try do
        if x <= @n do
          sum = sum + String.to_float(x) * String.to_float(x)
          x = x + 1
          t2.(t2, sum, x)
        else
          {:ok, sum, x}
        end
      catch
        :break ->
          {:ok, sum, x}
      end
    end

    {_, sum, x} = t2.(t2, sum, x)
    _ = sum
    _ = x
    # rms :: float()
    rms = sqrtApprox(sum / String.to_float(@n))
    IO.puts(to_string(rms))
  end
end

Main.main()
