# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:00Z
defmodule Main do
  @spec pow_int(integer(), integer()) :: integer()
  def pow_int(base, exp) do
    try do
      result = 1
      _ = result
      b = base
      _ = b
      e = exp
      _ = e

      t1 = fn t1, b, e, result ->
        try do
          if e > 0 do
            if rem(e, 2) == 1 do
              result = result * b
            end

            b = b * b
            e = String.to_integer(e / 2)
            t1.(t1, b, e, result)
          else
            {:ok, b, e, result}
          end
        catch
          :break ->
            {:ok, b, e, result}
        end
      end

      {_, b, e, result} = t1.(t1, b, e, result)
      _ = b
      _ = e
      _ = result
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  @spec pow_big(any(), integer()) :: any()
  def pow_big(base, exp) do
    try do
      result = 1
      _ = result
      b = base
      _ = b
      e = exp
      _ = e

      t2 = fn t2, b, e, result ->
        try do
          if e > 0 do
            if rem(e, 2) == 1 do
              result = result * b
            end

            b = b * b
            e = String.to_integer(e / 2)
            t2.(t2, b, e, result)
          else
            {:ok, b, e, result}
          end
        catch
          :break ->
            {:ok, b, e, result}
        end
      end

      {_, b, e, result} = t2.(t2, b, e, result)
      _ = b
      _ = e
      _ = result
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # e1 :: integer()
    e1 = pow_int(3, 2)
    _ = e1
    # e2 :: integer()
    e2 = pow_int(4, e1)
    _ = e2
    # base :: any()
    base = 5
    _ = base
    # x :: any()
    x = pow_big(base, e2)
    _ = x
    # s :: String.t()
    s = to_string(x)
    _ = s

    IO.puts(
      Enum.join(
        Enum.map(
          [
            "5^(4^(3^2)) has",
            String.length(s),
            "digits:",
            _slice_string(s, 0, 20),
            "...",
            _slice_string(s, String.length(s) - 20, String.length(s))
          ],
          &inspect(&1)
        ),
        " "
      )
    )
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
