# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:57Z
defmodule Main do
	@spec each(list(integer()), (integer() -> nil)) :: nil
	def each(xs, f) do
		try do
			for x <- _iter(xs) do
				f(x)
			end
		catch {:return, v} -> v end
	end
	
	@spec Map(list(integer()), (integer() -> integer())) :: list(integer())
	def Map(xs, f) do
		try do
			r = []
			_ = r
			{r} = Enum.reduce(_iter(xs), {r}, fn x, {r} ->
				r = r ++ [f(x)]
				{r}
			end)
			_ = r
			throw {:return, r}
		catch {:return, v} -> v end
	end
	
	@spec main() :: nil
	def main() do
		try do
			s = [1, 2, 3, 4, 5]
			each(s, fn i -> IO.puts(to_string((i * i))) end)
			IO.puts(to_string(Map(s, fn i -> (i * i) end)))
		catch {:return, v} -> v end
	end
	
	def main do
		main()
	end
	defp _iter(v) do
  if is_map(v) do
    Map.keys(v)
  else
    v
  end
end

	end
Main.main()
