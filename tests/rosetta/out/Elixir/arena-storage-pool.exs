# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:04Z
defmodule Main do
  @spec poolPut(list(integer()), integer()) :: list(integer())
  def poolPut(p, x) do
    try do
      throw({:return, p ++ [x]})
    catch
      {:return, v} -> v
    end
  end

  @spec poolGet(list(integer())) :: map()
  def poolGet(p) do
    try do
      if length(p) == 0 do
        IO.puts("pool empty")
        throw({:return, %{"pool" => p, "val" => 0}})
      end

      idx = length(p) - 1
      v = Enum.at(p, idx)
      p = Enum.slice(p, 0, idx - 0)
      throw({:return, %{"pool" => p, "val" => v}})
    catch
      {:return, v} -> v
    end
  end

  @spec clearPool(list(integer())) :: list(integer())
  def clearPool(p) do
    try do
      throw({:return, []})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      pool = []
      _ = pool
      i = 1
      _ = i
      j = 2
      _ = j
      IO.puts(to_string(i + j))
      pool = poolPut(pool, i)
      pool = poolPut(pool, j)
      i = 0
      j = 0
      res1 = poolGet(pool)
      pool = Enum.at(res1, "pool")
      i = String.to_integer(Enum.at(res1, "val"))
      res2 = poolGet(pool)
      pool = Enum.at(res2, "pool")
      j = String.to_integer(Enum.at(res2, "val"))
      i = 4
      j = 5
      IO.puts(to_string(i + j))
      pool = poolPut(pool, i)
      pool = poolPut(pool, j)
      i = 0
      j = 0
      pool = clearPool(pool)
      res3 = poolGet(pool)
      pool = Enum.at(res3, "pool")
      i = String.to_integer(Enum.at(res3, "val"))
      res4 = poolGet(pool)
      pool = Enum.at(res4, "pool")
      j = String.to_integer(Enum.at(res4, "val"))
      i = 7
      j = 8
      IO.puts(to_string(i + j))
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
