# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:29Z
defmodule Dog do
  @type t :: %__MODULE__{kind: String.t(), name: String.t()}
  defstruct kind: nil, name: nil
end

defmodule Cat do
  @type t :: %__MODULE__{kind: String.t(), name: String.t()}
  defstruct kind: nil, name: nil
end

defmodule Main do
  @spec beastKind(Beast) :: String.t()
  def beastKind(b) do
    try do
      throw(
        {:return,
         (fn ->
            t1 = b

            case t1 do
              %Dog{kind: k, name: v} -> k
              %Cat{kind: k, name: v} -> k
              _ -> nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  @spec beastName(Beast) :: String.t()
  def beastName(b) do
    try do
      throw(
        {:return,
         (fn ->
            t2 = b

            case t2 do
              %Dog{kind: v, name: n} -> n
              %Cat{kind: v, name: n} -> n
              _ -> nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  @spec beastCry(Beast) :: String.t()
  def beastCry(b) do
    try do
      throw(
        {:return,
         (fn ->
            t3 = b

            case t3 do
              %Dog{kind: v, name: v} -> "Woof"
              %Cat{kind: v, name: v} -> "Meow"
              _ -> nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  @spec bprint(Beast) :: nil
  def bprint(b) do
    try do
      IO.puts(
        ((((beastName(b) <> ", who's a ") <> beastKind(b)) <> ", cries: \"") <> beastCry(b)) <>
          "\"."
      )
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      d = %Dog{kind: "labrador", name: "Max"}
      c = %Cat{kind: "siamese", name: "Sammy"}
      bprint(d)
      bprint(c)
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
