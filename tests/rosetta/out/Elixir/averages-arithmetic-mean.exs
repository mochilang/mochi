# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:51Z
defmodule Main do
  @spec mean(list(float())) :: map()
  def mean(v) do
    try do
      if length(v) == 0 do
        throw({:return, %{"ok" => false}})
      end

      # sum :: (any() -> float())
      sum = 0
      _ = sum
      i = 0
      _ = i

      t1 = fn t1, i, sum ->
        try do
          if i < length(v) do
            sum = sum + Enum.at(v, i)
            i = i + 1
            t1.(t1, i, sum)
          else
            {:ok, i, sum}
          end
        catch
          :break ->
            {:ok, i, sum}
        end
      end

      {_, i, sum} = t1.(t1, i, sum)
      _ = i
      _ = sum
      throw({:return, %{"ok" => true, "mean" => sum / String.to_float(length(v))}})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      sets = [
        [],
        [3, 1, 4, 1, 5, 9],
        [100_000_000_000_000_000_000, 3, 1, 4, 1, 5, 9, -100_000_000_000_000_000_000],
        [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11],
        [10, 20, 30, 40, 50, -100, 4.7, -1100]
      ]

      for v <- _iter(sets) do
        IO.puts("Vector: " <> to_string(v))
        r = mean(v)

        if Enum.at(r, "ok") do
          IO.puts(
            (("Mean of " <> to_string(length(v))) <> " numbers is ") <>
              to_string(Enum.at(r, "mean"))
          )
        else
          IO.puts("Mean undefined")
        end

        IO.puts("")
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
