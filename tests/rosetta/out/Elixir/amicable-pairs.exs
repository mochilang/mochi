# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:24Z
defmodule Main do
  @spec pfacSum(integer()) :: integer()
  def pfacSum(i) do
    try do
      # sum :: (any() -> float())
      sum = 0
      _ = sum
      p = 1
      _ = p

      t1 = fn t1, p, sum ->
        try do
          if p <= i / 2 do
            if rem(i, p) == 0 do
              sum = sum + p
            end

            p = p + 1
            t1.(t1, p, sum)
          else
            {:ok, p, sum}
          end
        catch
          :break ->
            {:ok, p, sum}
        end
      end

      {_, p, sum} = t1.(t1, p, sum)
      _ = p
      _ = sum
      throw({:return, sum})
    catch
      {:return, v} -> v
    end
  end

  @spec pad(integer(), integer()) :: String.t()
  def pad(n, width) do
    try do
      s = to_string(n)
      _ = s

      t2 = fn t2, s ->
        try do
          if length(s) < width do
            s = " " <> s
            t2.(t2, s)
          else
            {:ok, s}
          end
        catch
          :break ->
            {:ok, s}
        end
      end

      {_, s} = t2.(t2, s)
      _ = s
      throw({:return, s})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      sums = []
      _ = sums
      i = 0
      _ = i

      t3 = fn t3, i, sums ->
        try do
          if i < 20000 do
            sums = sums ++ [0]
            i = i + 1
            t3.(t3, i, sums)
          else
            {:ok, i, sums}
          end
        catch
          :break ->
            {:ok, i, sums}
        end
      end

      {_, i, sums} = t3.(t3, i, sums)
      _ = i
      _ = sums
      i = 1

      t4 = fn t4, i, sums ->
        try do
          if i < 20000 do
            sums = Map.put(sums, i, pfacSum(i))
            i = i + 1
            t4.(t4, i, sums)
          else
            {:ok, i, sums}
          end
        catch
          :break ->
            {:ok, i, sums}
        end
      end

      {_, i, sums} = t4.(t4, i, sums)
      _ = i
      _ = sums
      IO.puts("The amicable pairs below 20,000 are:")
      n = 2
      _ = n

      t5 = fn t5, n ->
        try do
          if n < 19999 do
            m = Enum.at(sums, n)

            if m > n && m < 20000 && n == Enum.at(sums, m) do
              IO.puts((("  " <> pad(n, 5)) <> " and ") <> pad(m, 5))
            end

            n = n + 1
            t5.(t5, n)
          else
            {:ok, n}
          end
        catch
          :break ->
            {:ok, n}
        end
      end

      {_, n} = t5.(t5, n)
      _ = n
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
