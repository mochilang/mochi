# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:46:23Z
defmodule Main do
  @spec getBins(list(integer()), list(integer())) :: list(integer())
  def getBins(limits, data) do
    try do
      n = length(limits)
      _ = n
      bins = []
      _ = bins
      i = 0
      _ = i

      t1 = fn t1, bins, i ->
        try do
          if i < n + 1 do
            bins = bins ++ [0]
            i = i + 1
            t1.(t1, bins, i)
          else
            {:ok, bins, i}
          end
        catch
          :break ->
            {:ok, bins, i}
        end
      end

      {_, bins, i} = t1.(t1, bins, i)
      _ = bins
      _ = i
      j = 0
      _ = j

      t2 = fn t2, bins, j ->
        try do
          if j < length(data) do
            d = Enum.at(data, j)
            index = 0
            _ = index

            t3 = fn t3, index ->
              try do
                if index < length(limits) do
                  if d < Enum.at(limits, index) do
                    throw(:break)
                  end

                  if d == Enum.at(limits, index) do
                    index = index + 1
                    throw(:break)
                  end

                  index = index + 1
                  t3.(t3, index)
                else
                  {:ok, index}
                end
              catch
                :break ->
                  {:ok, index}
              end
            end

            {_, index} = t3.(t3, index)
            _ = index
            bins = Map.put(bins, index, Enum.at(bins, index) + 1)
            j = j + 1
            t2.(t2, bins, j)
          else
            {:ok, bins, j}
          end
        catch
          :break ->
            {:ok, bins, j}
        end
      end

      {_, bins, j} = t2.(t2, bins, j)
      _ = bins
      _ = j
      throw({:return, bins})
    catch
      {:return, v} -> v
    end
  end

  @spec padLeft(integer(), integer()) :: String.t()
  def padLeft(n, width) do
    try do
      s = to_string(n)
      _ = s
      pad = width - length(s)
      _ = pad
      out = ""
      _ = out
      i = 0
      _ = i

      t4 = fn t4, i, out ->
        try do
          if i < pad do
            out = out <> " "
            i = i + 1
            t4.(t4, i, out)
          else
            {:ok, i, out}
          end
        catch
          :break ->
            {:ok, i, out}
        end
      end

      {_, i, out} = t4.(t4, i, out)
      _ = i
      _ = out
      throw({:return, out + s})
    catch
      {:return, v} -> v
    end
  end

  @spec printBins(list(integer()), list(integer())) :: nil
  def printBins(limits, bins) do
    try do
      n = length(limits)
      _ = n

      IO.puts(
        (("           < " <> padLeft(Enum.at(limits, 0), 3)) <> " = ") <>
          padLeft(Enum.at(bins, 0), 2)
      )

      i = 1
      _ = i

      t5 = fn t5, i ->
        try do
          if i < n do
            IO.puts(
              ((((">= " <> padLeft(Enum.at(limits, i - 1), 3)) <> " and < ") <>
                  padLeft(Enum.at(limits, i), 3)) <> " = ") <> padLeft(Enum.at(bins, i), 2)
            )

            i = i + 1
            t5.(t5, i)
          else
            {:ok, i}
          end
        catch
          :break ->
            {:ok, i}
        end
      end

      {_, i} = t5.(t5, i)
      _ = i

      IO.puts(
        ((">= " <> padLeft(Enum.at(limits, n - 1), 3)) <> "           = ") <>
          padLeft(Enum.at(bins, n), 2)
      )

      IO.puts("")
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      limitsList = [[23, 37, 43, 53, 67, 83], [14, 18, 249, 312, 389, 392, 513, 591, 634, 720]]

      dataList = [
        [
          95,
          21,
          94,
          12,
          99,
          4,
          70,
          75,
          83,
          93,
          52,
          80,
          57,
          5,
          53,
          86,
          65,
          17,
          92,
          83,
          71,
          61,
          54,
          58,
          47,
          16,
          8,
          9,
          32,
          84,
          7,
          87,
          46,
          19,
          30,
          37,
          96,
          6,
          98,
          40,
          79,
          97,
          45,
          64,
          60,
          29,
          49,
          36,
          43,
          55
        ],
        [
          445,
          814,
          519,
          697,
          700,
          130,
          255,
          889,
          481,
          122,
          932,
          77,
          323,
          525,
          570,
          219,
          367,
          523,
          442,
          933,
          416,
          589,
          930,
          373,
          202,
          253,
          775,
          47,
          731,
          685,
          293,
          126,
          133,
          450,
          545,
          100,
          741,
          583,
          763,
          306,
          655,
          267,
          248,
          477,
          549,
          238,
          62,
          678,
          98,
          534,
          622,
          907,
          406,
          714,
          184,
          391,
          913,
          42,
          560,
          247,
          346,
          860,
          56,
          138,
          546,
          38,
          985,
          948,
          58,
          213,
          799,
          319,
          390,
          634,
          458,
          945,
          733,
          507,
          916,
          123,
          345,
          110,
          720,
          917,
          313,
          845,
          426,
          9,
          457,
          628,
          410,
          723,
          354,
          895,
          881,
          953,
          677,
          137,
          397,
          97,
          854,
          740,
          83,
          216,
          421,
          94,
          517,
          479,
          292,
          963,
          376,
          981,
          480,
          39,
          257,
          272,
          157,
          5,
          316,
          395,
          787,
          942,
          456,
          242,
          759,
          898,
          576,
          67,
          298,
          425,
          894,
          435,
          831,
          241,
          989,
          614,
          987,
          770,
          384,
          692,
          698,
          765,
          331,
          487,
          251,
          600,
          879,
          342,
          982,
          527,
          736,
          795,
          585,
          40,
          54,
          901,
          408,
          359,
          577,
          237,
          605,
          847,
          353,
          968,
          832,
          205,
          838,
          427,
          876,
          959,
          686,
          646,
          835,
          127,
          621,
          892,
          443,
          198,
          988,
          791,
          466,
          23,
          707,
          467,
          33,
          670,
          921,
          180,
          991,
          396,
          160,
          436,
          717,
          918,
          8,
          374,
          101,
          684,
          727,
          749
        ]
      ]

      i = 0
      _ = i

      t6 = fn t6, i ->
        try do
          if i < length(limitsList) do
            IO.puts(("Example " <> to_string(i + 1)) <> "\n")
            bins = getBins(Enum.at(limitsList, i), Enum.at(dataList, i))
            printBins(Enum.at(limitsList, i), bins)
            i = i + 1
            t6.(t6, i)
          else
            {:ok, i}
          end
        catch
          :break ->
            {:ok, i}
        end
      end

      {_, i} = t6.(t6, i)
      _ = i
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
