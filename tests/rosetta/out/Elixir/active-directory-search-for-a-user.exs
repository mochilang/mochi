# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:46Z
defmodule Main do
  @spec search_user(map(), String.t()) :: list(String.t())
  def search_user(directory, username) do
    try do
      throw({:return, Enum.at(directory, username)})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      client = %{
        "Base" => "dc=example,dc=com",
        "Host" => "ldap.example.com",
        "Port" => 389,
        "GroupFilter" => "(memberUid=%s)"
      }

      directory = %{"username" => ["admins", "users"], "john" => ["users"]}
      groups = search_user(directory, "username")

      if length(groups) > 0 do
        out = "Groups: ["
        _ = out
        i = 0
        _ = i

        t1 = fn t1, i, out ->
          try do
            if i < length(groups) do
              out = ((out <> "\"") <> Enum.at(groups, i)) <> "\""

              if i < length(groups) - 1 do
                out = out <> ", "
              end

              i = i + 1
              t1.(t1, i, out)
            else
              {:ok, i, out}
            end
          catch
            :break ->
              {:ok, i, out}
          end
        end

        {_, i, out} = t1.(t1, i, out)
        _ = i
        _ = out
        out = out <> "]"
        IO.inspect(out)
      else
        IO.puts("User not found")
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
