# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:46:49Z
defmodule Bitmap do
  @type t :: %__MODULE__{width: integer(), height: integer(), pixels: list(list(Colour))}
  defstruct width: nil, height: nil, pixels: nil
end

defmodule Colour do
  @type t :: %__MODULE__{R: integer(), G: integer(), B: integer()}
  defstruct R: nil, G: nil, B: nil
end

defmodule Main do
  @spec newBitmap(integer(), integer(), Colour) :: Bitmap
  def newBitmap(w, h, c) do
    try do
      rows = []
      _ = rows
      y = 0
      _ = y

      t1 = fn t1, rows, y ->
        try do
          if y < h do
            row = []
            _ = row
            x = 0
            _ = x

            t2 = fn t2, row, x ->
              try do
                if x < w do
                  row = row ++ [c]
                  x = x + 1
                  t2.(t2, row, x)
                else
                  {:ok, row, x}
                end
              catch
                :break ->
                  {:ok, row, x}
              end
            end

            {_, row, x} = t2.(t2, row, x)
            _ = row
            _ = x
            rows = rows ++ [row]
            y = y + 1
            t1.(t1, rows, y)
          else
            {:ok, rows, y}
          end
        catch
          :break ->
            {:ok, rows, y}
        end
      end

      {_, rows, y} = t1.(t1, rows, y)
      _ = rows
      _ = y
      throw({:return, %Bitmap{width: w, height: h, pixels: rows}})
    catch
      {:return, v} -> v
    end
  end

  @spec setPixel(Bitmap, integer(), integer(), Colour) :: nil
  def setPixel(b, x, y, c) do
    try do
      rows = b.pixels
      _ = rows
      row = Enum.at(rows, y)
      _ = row
      row = Map.put(row, x, c)
      rows = Map.put(rows, y, row)
      b = %{b | pixels: rows}
    catch
      {:return, v} -> v
    end
  end

  @spec fillRect(Bitmap, integer(), integer(), integer(), integer(), Colour) :: nil
  def fillRect(b, x, y, w, h, c) do
    try do
      yy = y
      _ = yy

      t3 = fn t3, yy ->
        try do
          if yy < y + h do
            xx = x
            _ = xx

            t4 = fn t4, xx ->
              try do
                if xx < x + w do
                  setPixel(b, xx, yy, c)
                  xx = xx + 1
                  t4.(t4, xx)
                else
                  {:ok, xx}
                end
              catch
                :break ->
                  {:ok, xx}
              end
            end

            {_, xx} = t4.(t4, xx)
            _ = xx
            yy = yy + 1
            t3.(t3, yy)
          else
            {:ok, yy}
          end
        catch
          :break ->
            {:ok, yy}
        end
      end

      {_, yy} = t3.(t3, yy)
      _ = yy
    catch
      {:return, v} -> v
    end
  end

  @spec pad(integer(), integer()) :: String.t()
  def pad(n, width) do
    try do
      s = to_string(n)
      _ = s

      t5 = fn t5, s ->
        try do
          if length(s) < width do
            s = " " <> s
            t5.(t5, s)
          else
            {:ok, s}
          end
        catch
          :break ->
            {:ok, s}
        end
      end

      {_, s} = t5.(t5, s)
      _ = s
      throw({:return, s})
    catch
      {:return, v} -> v
    end
  end

  @spec writePPMP3(Bitmap) :: String.t()
  def writePPMP3(b) do
    try do
      maxv = 0
      _ = maxv
      y = 0
      _ = y

      t6 = fn t6, maxv, y ->
        try do
          if y < b.height do
            x = 0
            _ = x

            t7 = fn t7, maxv, x ->
              try do
                if x < b.width do
                  p = Enum.at(Enum.at(b.pixels, y), x)

                  if p.R > maxv do
                    maxv = p.R
                  end

                  if p.G > maxv do
                    maxv = p.G
                  end

                  if p.B > maxv do
                    maxv = p.B
                  end

                  x = x + 1
                  t7.(t7, maxv, x)
                else
                  {:ok, maxv, x}
                end
              catch
                :break ->
                  {:ok, maxv, x}
              end
            end

            {_, maxv, x} = t7.(t7, maxv, x)
            _ = maxv
            _ = x
            y = y + 1
            t6.(t6, maxv, y)
          else
            {:ok, maxv, y}
          end
        catch
          :break ->
            {:ok, maxv, y}
        end
      end

      {_, maxv, y} = t6.(t6, maxv, y)
      _ = maxv
      _ = y

      out =
        ((((("P3\n# generated from Bitmap.writeppmp3\n" <> to_string(b.width)) <> " ") <>
             to_string(b.height)) <> "\n") <> to_string(maxv)) <> "\n"

      _ = out
      numsize = String.length(to_string(maxv))
      _ = numsize
      y = b.height - 1

      t8 = fn t8, out, y ->
        try do
          if y >= 0 do
            line = ""
            _ = line
            x = 0
            _ = x

            t9 = fn t9, line, x ->
              try do
                if x < b.width do
                  p = Enum.at(Enum.at(b.pixels, y), x)

                  line =
                    (((((line <> "   ") <> pad(p.R, numsize)) <> " ") <> pad(p.G, numsize)) <> " ") <>
                      pad(p.B, numsize)

                  x = x + 1
                  t9.(t9, line, x)
                else
                  {:ok, line, x}
                end
              catch
                :break ->
                  {:ok, line, x}
              end
            end

            {_, line, x} = t9.(t9, line, x)
            _ = line
            _ = x
            out = out + line

            if y > 0 do
              out = out <> "\n"
            else
              out = out <> "\n"
            end

            y = y - 1
            t8.(t8, out, y)
          else
            {:ok, out, y}
          end
        catch
          :break ->
            {:ok, out, y}
        end
      end

      {_, out, y} = t8.(t8, out, y)
      _ = out
      _ = y
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      black = %Colour{R: 0, G: 0, B: 0}
      white = %Colour{R: 255, G: 255, B: 255}
      bm = newBitmap(4, 4, black)
      _ = bm
      fillRect(bm, 1, 0, 1, 2, white)
      setPixel(bm, 3, 3, %Colour{R: 127, G: 0, B: 63})
      ppm = writePPMP3(bm)
      IO.inspect(ppm)
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
