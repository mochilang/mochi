# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:23Z
defmodule Main do
  @spec amb(list(list(String.t())), list(String.t()), integer()) :: boolean()
  def amb(wordsets, res, idx) do
    try do
      if idx == length(wordsets) do
        throw({:return, true})
      end

      prev = ""
      _ = prev

      if idx > 0 do
        prev = Enum.at(res, idx - 1)
      end

      i = 0
      _ = i

      t1 = fn t1, i, res ->
        try do
          if i < length(Enum.at(wordsets, idx)) do
            w = Enum.at(Enum.at(wordsets, idx), i)

            if idx == 0 ||
                 _slice_string(prev, length(prev) - 1, length(prev)) == _slice_string(w, 0, 1) do
              res = Map.put(res, idx, w)

              if amb(wordsets, res, idx + 1) do
                throw({:return, true})
              end
            end

            i = i + 1
            t1.(t1, i, res)
          else
            {:ok, i, res}
          end
        catch
          :break ->
            {:ok, i, res}
        end
      end

      {_, i, res} = t1.(t1, i, res)
      _ = i
      _ = res
      throw({:return, false})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      wordset = [
        ["the", "that", "a"],
        ["frog", "elephant", "thing"],
        ["walked", "treaded", "grows"],
        ["slowly", "quickly"]
      ]

      res = []
      _ = res
      i = 0
      _ = i

      t2 = fn t2, i, res ->
        try do
          if i < length(wordset) do
            res = res ++ [""]
            i = i + 1
            t2.(t2, i, res)
          else
            {:ok, i, res}
          end
        catch
          :break ->
            {:ok, i, res}
        end
      end

      {_, i, res} = t2.(t2, i, res)
      _ = i
      _ = res

      if amb(wordset, res, 0) do
        out = "[" <> Enum.at(res, 0)
        _ = out
        j = 1
        _ = j

        t3 = fn t3, j, out ->
          try do
            if j < length(res) do
              out = (out <> " ") <> Enum.at(res, j)
              j = j + 1
              t3.(t3, j, out)
            else
              {:ok, j, out}
            end
          catch
            :break ->
              {:ok, j, out}
          end
        end

        {_, j, out} = t3.(t3, j, out)
        _ = j
        _ = out
        out = out <> "]"
        IO.inspect(out)
      else
        IO.puts("No amb found")
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
