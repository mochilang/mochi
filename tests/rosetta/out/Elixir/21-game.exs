# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:10Z
defmodule Main do
  @spec parseIntStr(String.t()) :: integer()
  def parseIntStr(str) do
    try do
      i = 0
      _ = i
      neg = false
      _ = neg

      if length(str) > 0 && Enum.slice(str, 0, 1 - 0) == "-" do
        neg = true
        i = 1
      end

      n = 0
      _ = n

      digits = %{
        "0" => 0,
        "1" => 1,
        "2" => 2,
        "3" => 3,
        "4" => 4,
        "5" => 5,
        "6" => 6,
        "7" => 7,
        "8" => 8,
        "9" => 9
      }

      t1 = fn t1, i, n ->
        try do
          if i < length(str) do
            n = n * 10 + Enum.at(digits, Enum.slice(str, i, i + 1 - i))
            i = i + 1
            t1.(t1, i, n)
          else
            {:ok, i, n}
          end
        catch
          :break ->
            {:ok, i, n}
        end
      end

      {_, i, n} = t1.(t1, i, n)
      _ = i
      _ = n

      if neg do
        n = -n
      end

      throw({:return, n})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      total = 0
      _ = total
      computer = rem(_now(), 2) == 0
      _ = computer
      IO.puts("Enter q to quit at any time\n")

      if computer do
        IO.puts("The computer will choose first")
      else
        IO.puts("You will choose first")
      end

      IO.puts("\n\nRunning total is now 0\n\n")
      round = 1
      _ = round
      done = false
      _ = done

      t2 = fn t2, computer, done, round, total ->
        try do
          if !done do
            IO.puts(("ROUND " <> to_string(round)) <> ":\n\n")
            i = 0
            _ = i

            t3 = fn t3, computer, done, i, total ->
              try do
                if i < 2 && !done do
                  if computer do
                    choice = 0
                    _ = choice

                    if total < 18 do
                      choice = rem(_now(), 3) + 1
                    else
                      choice = 21 - total
                    end

                    total = total + choice
                    IO.puts("The computer chooses " <> to_string(choice))
                    IO.puts("Running total is now " <> to_string(total))

                    if total == 21 do
                      IO.puts("\nSo, commiserations, the computer has won!")
                      done = true
                    end
                  else
                    t4 = fn t4, done, total ->
                      try do
                        if true do
                          IO.puts("Your choice 1 to 3 : ")
                          line = _input()

                          if line == "q" || line == "Q" do
                            IO.puts("OK, quitting the game")
                            done = true
                            throw(:break)
                          end

                          # num :: (any() -> any())
                          num = parseIntStr(line)
                          _ = num

                          if num < 1 || num > 3 do
                            if total + num > 21 do
                              IO.puts("Too big, try again")
                            else
                              IO.puts("Out of range, try again")
                            end

                            throw(:continue)
                          end

                          if total + num > 21 do
                            IO.puts("Too big, try again")
                            throw(:continue)
                          end

                          total = total + num
                          IO.puts("Running total is now " <> to_string(total))
                          throw(:break)
                          t4.(t4, done, total)
                        else
                          {:ok, done, total}
                        end
                      catch
                        :break ->
                          {:ok, done, total}
                      end
                    end

                    {_, done, total} = t4.(t4, done, total)
                    _ = done
                    _ = total

                    if total == 21 do
                      IO.puts("\nSo, congratulations, you've won!")
                      done = true
                    end
                  end

                  IO.puts("\n")
                  computer = !computer
                  i = i + 1
                  t3.(t3, computer, done, i, total)
                else
                  {:ok, computer, done, i, total}
                end
              catch
                :break ->
                  {:ok, computer, done, i, total}
              end
            end

            {_, computer, done, i, total} = t3.(t3, computer, done, i, total)
            _ = computer
            _ = done
            _ = i
            _ = total
            round = round + 1
            t2.(t2, computer, done, round, total)
          else
            {:ok, computer, done, round, total}
          end
        catch
          :break ->
            {:ok, computer, done, round, total}
        end
      end

      {_, computer, done, round, total} = t2.(t2, computer, done, round, total)
      _ = computer
      _ = done
      _ = round
      _ = total
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _input() do
    String.trim(IO.gets(""))
  end

  defp _now() do
    System.os_time(:millisecond)
  end
end

Main.main()
