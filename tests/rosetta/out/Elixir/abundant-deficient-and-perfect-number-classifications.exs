# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:30Z
defmodule Main do
  @spec pfacSum(integer()) :: integer()
  def pfacSum(i) do
    try do
      # sum :: (any() -> float())
      sum = 0
      _ = sum
      p = 1
      _ = p

      t1 = fn t1, p, sum ->
        try do
          if p <= i / 2 do
            if rem(i, p) == 0 do
              sum = sum + p
            end

            p = p + 1
            t1.(t1, p, sum)
          else
            {:ok, p, sum}
          end
        catch
          :break ->
            {:ok, p, sum}
        end
      end

      {_, p, sum} = t1.(t1, p, sum)
      _ = p
      _ = sum
      throw({:return, sum})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      d = 0
      _ = d
      a = 0
      _ = a
      pnum = 0
      _ = pnum
      i = 1
      _ = i

      t2 = fn t2, a, d, i, pnum ->
        try do
          if i <= 20000 do
            j = pfacSum(i)

            if j < i do
              d = d + 1
            end

            if j == i do
              pnum = pnum + 1
            end

            if j > i do
              a = a + 1
            end

            i = i + 1
            t2.(t2, a, d, i, pnum)
          else
            {:ok, a, d, i, pnum}
          end
        catch
          :break ->
            {:ok, a, d, i, pnum}
        end
      end

      {_, a, d, i, pnum} = t2.(t2, a, d, i, pnum)
      _ = a
      _ = d
      _ = i
      _ = pnum
      IO.puts(("There are " <> to_string(d)) <> " deficient numbers between 1 and 20000")
      IO.puts(("There are " <> to_string(a)) <> " abundant numbers  between 1 and 20000")
      IO.puts(("There are " <> to_string(pnum)) <> " perfect numbers between 1 and 20000")
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
