# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:59Z
defmodule Main do
  @spec qsel(list(float()), integer()) :: float()
  def qsel(a, k) do
    try do
      arr = a
      _ = arr

      t1 = fn t1, arr, k ->
        try do
          if length(arr) > 1 do
            px = rem(_now(), length(arr))
            _ = px
            pv = Enum.at(arr, px)
            _ = pv
            last = length(arr) - 1
            tmp = Enum.at(arr, px)
            arr = Map.put(arr, px, Enum.at(arr, last))
            arr = Map.put(arr, last, tmp)
            px = 0
            i = 0
            _ = i

            t2 = fn t2, arr, i, px ->
              try do
                if i < last do
                  v = Enum.at(arr, i)

                  if v < pv do
                    tmp2 = Enum.at(arr, px)
                    arr = Map.put(arr, px, Enum.at(arr, i))
                    arr = Map.put(arr, i, tmp2)
                    px = px + 1
                  end

                  i = i + 1
                  t2.(t2, arr, i, px)
                else
                  {:ok, arr, i, px}
                end
              catch
                :break ->
                  {:ok, arr, i, px}
              end
            end

            {_, arr, i, px} = t2.(t2, arr, i, px)
            _ = arr
            _ = i
            _ = px

            if px == k do
              throw({:return, pv})
            end

            if k < px do
              arr = Enum.slice(arr, 0, px - 0)
            else
              tmp2 = Enum.at(arr, px)
              arr = Map.put(arr, px, pv)
              arr = Map.put(arr, last, tmp2)
              arr = Enum.slice(arr, px + 1, length(String.graphemes(arr)) - (px + 1))
              k = k - (px + 1)
            end

            t1.(t1, arr, k)
          else
            {:ok, arr, k}
          end
        catch
          :break ->
            {:ok, arr, k}
        end
      end

      {_, arr, k} = t1.(t1, arr, k)
      _ = arr
      _ = k
      throw({:return, Enum.at(arr, 0)})
    catch
      {:return, v} -> v
    end
  end

  @spec median(list(float())) :: float()
  def median(list) do
    try do
      arr = list
      _ = arr
      half = String.to_integer(length(arr) / 2)
      med = qsel(arr, half)

      if rem(length(arr), 2) == 0 do
        throw({:return, (med + qsel(arr, half - 1)) / 2})
      end

      throw({:return, med})
    catch
      {:return, v} -> v
    end
  end

  def main do
    IO.puts(to_string(median([3, 1, 4, 1])))
    IO.puts(to_string(median([3, 1, 4, 1, 5])))
  end

  defp _now() do
    System.os_time(:millisecond)
  end
end

Main.main()
