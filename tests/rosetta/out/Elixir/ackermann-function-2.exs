# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:41Z
defmodule Main do
  @spec pow(integer(), integer()) :: integer()
  def pow(base, exp) do
    try do
      result = 1
      _ = result
      i = 0
      _ = i

      t1 = fn t1, i, result ->
        try do
          if i < exp do
            result = result * base
            i = i + 1
            t1.(t1, i, result)
          else
            {:ok, i, result}
          end
        catch
          :break ->
            {:ok, i, result}
        end
      end

      {_, i, result} = t1.(t1, i, result)
      _ = i
      _ = result
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  @spec ackermann2(integer(), integer()) :: integer()
  def ackermann2(m, n) do
    try do
      if m == 0 do
        throw({:return, n + 1})
      end

      if m == 1 do
        throw({:return, n + 2})
      end

      if m == 2 do
        throw({:return, 2 * n + 3})
      end

      if m == 3 do
        throw({:return, 8 * pow(2, n) - 3})
      end

      if n == 0 do
        throw({:return, ackermann2(m - 1, 1)})
      end

      throw({:return, ackermann2(m - 1, ackermann2(m, n - 1))})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      IO.puts("A(0, 0) = " <> to_string(ackermann2(0, 0)))
      IO.puts("A(1, 2) = " <> to_string(ackermann2(1, 2)))
      IO.puts("A(2, 4) = " <> to_string(ackermann2(2, 4)))
      IO.puts("A(3, 4) = " <> to_string(ackermann2(3, 4)))
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
