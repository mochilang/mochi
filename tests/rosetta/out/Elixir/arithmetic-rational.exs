# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:24Z
defmodule Main do
  @spec intSqrt(integer()) :: integer()
  def intSqrt(x) do
    try do
      if x < 2 do
        throw({:return, x})
      end

      left = 1
      _ = left
      right = x / 2
      _ = right
      ans = 0
      _ = ans

      t1 = fn t1, ans, left, right ->
        try do
          if left <= right do
            mid = left + (right - left) / 2
            sq = mid * mid

            if sq == x do
              throw({:return, mid})
            end

            if sq < x do
              left = mid + 1
              ans = mid
            else
              right = mid - 1
            end

            t1.(t1, ans, left, right)
          else
            {:ok, ans, left, right}
          end
        catch
          :break ->
            {:ok, ans, left, right}
        end
      end

      {_, ans, left, right} = t1.(t1, ans, left, right)
      _ = ans
      _ = left
      _ = right
      throw({:return, ans})
    catch
      {:return, v} -> v
    end
  end

  @spec sumRecip(integer()) :: integer()
  def sumRecip(n) do
    try do
      s = 1
      _ = s
      limit = intSqrt(n)
      f = 2
      _ = f

      t2 = fn t2, f, s ->
        try do
          if f <= limit do
            if rem(n, f) == 0 do
              s = s + n / f
              f2 = n / f

              if f2 != f do
                s = s + f
              end
            end

            f = f + 1
            t2.(t2, f, s)
          else
            {:ok, f, s}
          end
        catch
          :break ->
            {:ok, f, s}
        end
      end

      {_, f, s} = t2.(t2, f, s)
      _ = f
      _ = s
      throw({:return, s})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523_776]

      for n <- _iter(nums) do
        s = sumRecip(n)

        if rem(s, n) == 0 do
          val = s / n
          perfect = ""
          _ = perfect

          if val == 1 do
            perfect = "perfect!"
          end

          IO.inspect(
            (((("Sum of recipr. factors of " <> to_string(n)) <> " = ") <> to_string(val)) <>
               " exactly ") <> perfect
          )
        end
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
