# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:43Z
defmodule Main do
  @spec removeKey(map(), String.t()) :: map()
  def removeKey(m, k) do
    try do
      out = %{}
      _ = out

      {out} =
        Enum.reduce(_iter(m), {out}, fn key, {out} ->
          if key != k do
            out = Map.put(out, key, Enum.at(m, key))
          end

          {out}
        end)

      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      x = nil
      _ = x
      x = %{}
      x = Map.put(x, "foo", 3)
      y1 = Enum.at(x, "bar")
      ok = String.contains?(x, "bar")
      IO.inspect(y1)
      IO.inspect(ok)
      x = removeKey(x, "foo")
      x = %{"foo" => 2, "bar" => 42, "baz" => -1}

      IO.puts(
        Enum.join(
          Enum.map([Enum.at(x, "foo"), Enum.at(x, "bar"), Enum.at(x, "baz")], &inspect(&1)),
          " "
        )
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
