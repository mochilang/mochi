# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:41Z
defmodule Main do
  @spec d2d(float()) :: float()
  def d2d(d) do
    try do
      throw({:return, rem(d, 360)})
    catch
      {:return, v} -> v
    end
  end

  @spec g2g(float()) :: float()
  def g2g(g) do
    try do
      throw({:return, rem(g, 400)})
    catch
      {:return, v} -> v
    end
  end

  @spec m2m(float()) :: float()
  def m2m(m) do
    try do
      throw({:return, rem(m, 6400)})
    catch
      {:return, v} -> v
    end
  end

  @spec r2r(float()) :: float()
  def r2r(r) do
    try do
      throw({:return, rem(r, 2 * 3.141592653589793)})
    catch
      {:return, v} -> v
    end
  end

  @spec d2g(float()) :: float()
  def d2g(d) do
    try do
      throw({:return, d2d(d) * 400 / 360})
    catch
      {:return, v} -> v
    end
  end

  @spec d2m(float()) :: float()
  def d2m(d) do
    try do
      throw({:return, d2d(d) * 6400 / 360})
    catch
      {:return, v} -> v
    end
  end

  @spec d2r(float()) :: float()
  def d2r(d) do
    try do
      throw({:return, d2d(d) * 3.141592653589793 / 180})
    catch
      {:return, v} -> v
    end
  end

  @spec g2d(float()) :: float()
  def g2d(g) do
    try do
      throw({:return, g2g(g) * 360 / 400})
    catch
      {:return, v} -> v
    end
  end

  @spec g2m(float()) :: float()
  def g2m(g) do
    try do
      throw({:return, g2g(g) * 6400 / 400})
    catch
      {:return, v} -> v
    end
  end

  @spec g2r(float()) :: float()
  def g2r(g) do
    try do
      throw({:return, g2g(g) * 3.141592653589793 / 200})
    catch
      {:return, v} -> v
    end
  end

  @spec m2d(float()) :: float()
  def m2d(m) do
    try do
      throw({:return, m2m(m) * 360 / 6400})
    catch
      {:return, v} -> v
    end
  end

  @spec m2g(float()) :: float()
  def m2g(m) do
    try do
      throw({:return, m2m(m) * 400 / 6400})
    catch
      {:return, v} -> v
    end
  end

  @spec m2r(float()) :: float()
  def m2r(m) do
    try do
      throw({:return, m2m(m) * 3.141592653589793 / 3200})
    catch
      {:return, v} -> v
    end
  end

  @spec r2d(float()) :: float()
  def r2d(r) do
    try do
      throw({:return, r2r(r) * 180 / 3.141592653589793})
    catch
      {:return, v} -> v
    end
  end

  @spec r2g(float()) :: float()
  def r2g(r) do
    try do
      throw({:return, r2r(r) * 200 / 3.141592653589793})
    catch
      {:return, v} -> v
    end
  end

  @spec r2m(float()) :: float()
  def r2m(r) do
    try do
      throw({:return, r2r(r) * 3200 / 3.141592653589793})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      angles = [-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 399, 6399, 1_000_000]
      IO.puts("degrees normalized_degs gradians mils radians")

      for a <- _iter(angles) do
        IO.puts(
          (((((((to_string(a) <> " ") <> to_string(d2d(a))) <> " ") <> to_string(d2g(a))) <> " ") <>
              to_string(d2m(a))) <> " ") <> to_string(d2r(a))
        )
      end

      IO.puts("\ngradians normalized_grds degrees mils radians")

      for a <- _iter(angles) do
        IO.puts(
          (((((((to_string(a) <> " ") <> to_string(g2g(a))) <> " ") <> to_string(g2d(a))) <> " ") <>
              to_string(g2m(a))) <> " ") <> to_string(g2r(a))
        )
      end

      IO.puts("\nmils normalized_mils degrees gradians radians")

      for a <- _iter(angles) do
        IO.puts(
          (((((((to_string(a) <> " ") <> to_string(m2m(a))) <> " ") <> to_string(m2d(a))) <> " ") <>
              to_string(m2g(a))) <> " ") <> to_string(m2r(a))
        )
      end

      IO.puts("\nradians normalized_rads degrees gradians mils")

      for a <- _iter(angles) do
        IO.puts(
          (((((((to_string(a) <> " ") <> to_string(r2r(a))) <> " ") <> to_string(r2d(a))) <> " ") <>
              to_string(r2g(a))) <> " ") <> to_string(r2m(a))
        )
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
