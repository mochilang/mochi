# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:36Z
defmodule Main do
  @spec concatInts(list(integer()), list(integer())) :: list(integer())
  def concatInts(a, b) do
    try do
      out = []
      _ = out

      {out} =
        Enum.reduce(a, {out}, fn v, {out} ->
          out = out ++ [v]
          {out}
        end)

      _ = out

      {out} =
        Enum.reduce(b, {out}, fn v, {out} ->
          out = out ++ [v]
          {out}
        end)

      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  @spec concatAny(list(any()), list(any())) :: list(any())
  def concatAny(a, b) do
    try do
      out = []
      _ = out

      {out} =
        Enum.reduce(a, {out}, fn v, {out} ->
          out = out ++ [v]
          {out}
        end)

      _ = out

      {out} =
        Enum.reduce(b, {out}, fn v, {out} ->
          out = out ++ [v]
          {out}
        end)

      _ = out
      throw({:return, out})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # a :: list(integer())
    a = [1, 2, 3]
    _ = a
    # b :: list(integer())
    b = [7, 12, 60]
    _ = b
    IO.puts(to_string(concatInts(a, b)))
    # i :: list(any())
    i = [1, 2, 3]
    _ = i
    # j :: list(any())
    j = ["Crosby", "Stills", "Nash", "Young"]
    _ = j
    IO.puts(to_string(concatAny(i, j)))
    # l :: list(integer())
    l = [1, 2, 3]
    _ = l
    # m :: list(integer())
    m = [7, 12, 60]
    _ = m
    IO.puts(to_string(concatInts(l, m)))
  end
end

Main.main()
