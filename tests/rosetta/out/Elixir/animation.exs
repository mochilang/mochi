# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:45Z
defmodule Main do
  @msg "Hello World! "
  def main do
    # shift :: integer()
    shift = 0
    _ = shift
    # inc :: integer()
    inc = 1
    _ = inc
    # clicks :: integer()
    clicks = 0
    _ = clicks
    # frames :: integer()
    frames = 0
    _ = frames

    t1 = fn t1, clicks, frames, inc, shift ->
      try do
        if clicks < 5 do
          line = ""
          _ = line
          i = 0
          _ = i

          t2 = fn t2, i, line ->
            try do
              if i < String.length(@msg) do
                idx = rem(shift + i, String.length(@msg))
                line = line + _slice_string(@msg, idx, idx + 1)
                i = i + 1
                t2.(t2, i, line)
              else
                {:ok, i, line}
              end
            catch
              :break ->
                {:ok, i, line}
            end
          end

          {_, i, line} = t2.(t2, i, line)
          _ = i
          _ = line
          IO.inspect(line)
          shift = rem(shift + inc, String.length(@msg))
          frames = frames + 1

          if rem(frames, String.length(@msg)) == 0 do
            inc = String.length(@msg) - inc
            clicks = clicks + 1
          end

          t1.(t1, clicks, frames, inc, shift)
        else
          {:ok, clicks, frames, inc, shift}
        end
      catch
        :break ->
          {:ok, clicks, frames, inc, shift}
      end
    end

    {_, clicks, frames, inc, shift} = t1.(t1, clicks, frames, inc, shift)
    _ = clicks
    _ = frames
    _ = inc
    _ = shift
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
