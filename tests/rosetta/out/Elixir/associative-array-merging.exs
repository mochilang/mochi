# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:45Z
defmodule Main do
  @spec merge(map(), map()) :: map()
  def merge(base, update) do
    try do
      result = %{}
      _ = result

      {result} =
        Enum.reduce(_iter(base), {result}, fn k, {result} ->
          result = Map.put(result, k, Enum.at(base, k))
          {result}
        end)

      _ = result

      {result} =
        Enum.reduce(_iter(update), {result}, fn k, {result} ->
          result = Map.put(result, k, Enum.at(update, k))
          {result}
        end)

      _ = result
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      base = %{"name" => "Rocket Skates", "price" => 12.75, "color" => "yellow"}
      update = %{"price" => 15.25, "color" => "red", "year" => 1974}
      result = merge(base, update)
      IO.inspect(result)
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
