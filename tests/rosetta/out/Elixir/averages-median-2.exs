# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:57Z
defmodule Main do
  @spec sel(list(float()), integer()) :: float()
  def sel(list, k) do
    try do
      i = 0
      _ = i

      t1 = fn t1, i, list ->
        try do
          if i <= k do
            minIndex = i
            _ = minIndex
            j = i + 1
            _ = j

            t2 = fn t2, j, minIndex ->
              try do
                if j < length(list) do
                  if Enum.at(list, j) < Enum.at(list, minIndex) do
                    minIndex = j
                  end

                  j = j + 1
                  t2.(t2, j, minIndex)
                else
                  {:ok, j, minIndex}
                end
              catch
                :break ->
                  {:ok, j, minIndex}
              end
            end

            {_, j, minIndex} = t2.(t2, j, minIndex)
            _ = j
            _ = minIndex
            tmp = Enum.at(list, i)
            list = Map.put(list, i, Enum.at(list, minIndex))
            list = Map.put(list, minIndex, tmp)
            i = i + 1
            t1.(t1, i, list)
          else
            {:ok, i, list}
          end
        catch
          :break ->
            {:ok, i, list}
        end
      end

      {_, i, list} = t1.(t1, i, list)
      _ = i
      _ = list
      throw({:return, Enum.at(list, k)})
    catch
      {:return, v} -> v
    end
  end

  @spec median(list(float())) :: float()
  def median(a) do
    try do
      arr = a
      _ = arr
      half = String.to_integer(length(arr) / 2)
      med = sel(arr, half)

      if rem(length(arr), 2) == 0 do
        throw({:return, (med + Enum.at(arr, half - 1)) / 2})
      end

      throw({:return, med})
    catch
      {:return, v} -> v
    end
  end

  def main do
    IO.puts(to_string(median([3, 1, 4, 1])))
    IO.puts(to_string(median([3, 1, 4, 1, 5])))
  end
end

Main.main()
