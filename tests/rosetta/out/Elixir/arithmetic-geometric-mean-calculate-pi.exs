# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:45:09Z
defmodule Main do
  @spec abs(float()) :: float()
  def abs(x) do
    try do
      if x < 0 do
        throw({:return, -x})
      end

      throw({:return, x})
    catch
      {:return, v} -> v
    end
  end

  @spec sqrtApprox(float()) :: float()
  def sqrtApprox(x) do
    try do
      guess = x
      _ = guess
      i = 0
      _ = i

      t1 = fn t1, guess, i ->
        try do
          if i < 20 do
            guess = (guess + x / guess) / 2
            i = i + 1
            t1.(t1, guess, i)
          else
            {:ok, guess, i}
          end
        catch
          :break ->
            {:ok, guess, i}
        end
      end

      {_, guess, i} = t1.(t1, guess, i)
      _ = guess
      _ = i
      throw({:return, guess})
    catch
      {:return, v} -> v
    end
  end

  @spec agmPi() :: float()
  def agmPi() do
    try do
      a = 1
      _ = a
      g = 1 / sqrtApprox(2)
      _ = g
      # sum :: (any() -> float())
      sum = 0
      _ = sum
      pow = 2
      _ = pow

      t2 = fn t2, a, g, pow, sum ->
        try do
          if abs(a - g) > 0.000000000000001 do
            t = (a + g) / 2
            _ = t
            u = sqrtApprox(a * g)
            _ = u
            a = t
            g = u
            pow = pow * 2
            diff = a * a - g * g
            _ = diff
            sum = sum + diff * pow
            t2.(t2, a, g, pow, sum)
          else
            {:ok, a, g, pow, sum}
          end
        catch
          :break ->
            {:ok, a, g, pow, sum}
        end
      end

      {_, a, g, pow, sum} = t2.(t2, a, g, pow, sum)
      _ = a
      _ = g
      _ = pow
      _ = sum
      pi = 4 * a * a / (1 - sum)
      _ = pi
      throw({:return, pi})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      IO.puts(to_string(agmPi()))
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
