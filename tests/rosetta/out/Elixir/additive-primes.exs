# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:13Z
defmodule Main do
  @spec isPrime(integer()) :: boolean()
  def isPrime(n) do
    try do
      if n < 2 do
        throw({:return, false})
      end

      if rem(n, 2) == 0 do
        throw({:return, n == 2})
      end

      if rem(n, 3) == 0 do
        throw({:return, n == 3})
      end

      d = 5
      _ = d

      t1 = fn t1, d ->
        try do
          if d * d <= n do
            if rem(n, d) == 0 do
              throw({:return, false})
            end

            d = d + 2

            if rem(n, d) == 0 do
              throw({:return, false})
            end

            d = d + 4
            t1.(t1, d)
          else
            {:ok, d}
          end
        catch
          :break ->
            {:ok, d}
        end
      end

      {_, d} = t1.(t1, d)
      _ = d
      throw({:return, true})
    catch
      {:return, v} -> v
    end
  end

  @spec sumDigits(integer()) :: integer()
  def sumDigits(n) do
    try do
      s = 0
      _ = s
      x = n
      _ = x

      t2 = fn t2, s, x ->
        try do
          if x > 0 do
            s = s + rem(x, 10)
            x = String.to_integer(x / 10)
            t2.(t2, s, x)
          else
            {:ok, s, x}
          end
        catch
          :break ->
            {:ok, s, x}
        end
      end

      {_, s, x} = t2.(t2, s, x)
      _ = s
      _ = x
      throw({:return, s})
    catch
      {:return, v} -> v
    end
  end

  @spec pad(integer()) :: String.t()
  def pad(n) do
    try do
      if n < 10 do
        throw({:return, "  " <> to_string(n)})
      end

      if n < 100 do
        throw({:return, " " <> to_string(n)})
      end

      throw({:return, to_string(n)})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      IO.puts("Additive primes less than 500:")
      # count :: (any() -> integer())
      count = 0
      _ = count
      line = ""
      _ = line
      lineCount = 0
      _ = lineCount
      i = 2
      _ = i

      t3 = fn t3, count, i, line, lineCount ->
        try do
          if i < 500 do
            if isPrime(i) && isPrime(sumDigits(i)) do
              count = count + 1
              line = (line + pad(i)) <> "  "
              lineCount = lineCount + 1

              if lineCount == 10 do
                IO.puts(_slice_string(line, 0, length(line) - 2))
                line = ""
                lineCount = 0
              end
            end

            if i > 2 do
              i = i + 2
            else
              i = i + 1
            end

            t3.(t3, count, i, line, lineCount)
          else
            {:ok, count, i, line, lineCount}
          end
        catch
          :break ->
            {:ok, count, i, line, lineCount}
        end
      end

      {_, count, i, line, lineCount} = t3.(t3, count, i, line, lineCount)
      _ = count
      _ = i
      _ = line
      _ = lineCount

      if lineCount > 0 do
        IO.puts(_slice_string(line, 0, length(line) - 2))
      end

      IO.puts(to_string(count) <> " additive primes found.")
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
