# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:44:22Z
defmodule Main do
  @spec kPrime(integer(), integer()) :: boolean()
  def kPrime(n, k) do
    try do
      nf = 0
      _ = nf
      i = 2
      _ = i

      t1 = fn t1, i, n, nf ->
        try do
          if i <= n do
            t2 = fn t2, n, nf ->
              try do
                if rem(n, i) == 0 do
                  if nf == k do
                    throw({:return, false})
                  end

                  nf = nf + 1
                  n = n / i
                  t2.(t2, n, nf)
                else
                  {:ok, n, nf}
                end
              catch
                :break ->
                  {:ok, n, nf}
              end
            end

            {_, n, nf} = t2.(t2, n, nf)
            _ = n
            _ = nf
            i = i + 1
            t1.(t1, i, n, nf)
          else
            {:ok, i, n, nf}
          end
        catch
          :break ->
            {:ok, i, n, nf}
        end
      end

      {_, i, n, nf} = t1.(t1, i, n, nf)
      _ = i
      _ = n
      _ = nf
      throw({:return, nf == k})
    catch
      {:return, v} -> v
    end
  end

  @spec gen(integer(), integer()) :: list(integer())
  def gen(k, count) do
    try do
      r = []
      _ = r
      n = 2
      _ = n

      t3 = fn t3, n, r ->
        try do
          if length(r) < count do
            if kPrime(n, k) do
              r = r ++ [n]
            end

            n = n + 1
            t3.(t3, n, r)
          else
            {:ok, n, r}
          end
        catch
          :break ->
            {:ok, n, r}
        end
      end

      {_, n, r} = t3.(t3, n, r)
      _ = n
      _ = r
      throw({:return, r})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      k = 1
      _ = k

      t4 = fn t4, k ->
        try do
          if k <= 5 do
            IO.puts((to_string(k) <> " ") <> to_string(gen(k, 10)))
            k = k + 1
            t4.(t4, k)
          else
            {:ok, k}
          end
        catch
          :break ->
            {:ok, k}
        end
      end

      {_, k} = t4.(t4, k)
      _ = k
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
