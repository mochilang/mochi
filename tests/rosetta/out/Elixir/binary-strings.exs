# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:46:26Z
defmodule Main do
  @spec char(integer()) :: String.t()
  def char(n) do
    try do
      letters = "abcdefghijklmnopqrstuvwxyz"
      idx = n - 97

      if idx < 0 || idx >= length(letters) do
        throw({:return, "?"})
      end

      throw({:return, _slice_string(letters, idx, idx + 1)})
    catch
      {:return, v} -> v
    end
  end

  @spec fromBytes(list(integer())) :: String.t()
  def fromBytes(bs) do
    try do
      s = ""
      _ = s
      # i :: integer()
      i = 0
      _ = i

      t1 = fn t1, i, s ->
        try do
          if i < length(bs) do
            s = s + char(Enum.at(bs, i))
            i = i + 1
            t1.(t1, i, s)
          else
            {:ok, i, s}
          end
        catch
          :break ->
            {:ok, i, s}
        end
      end

      {_, i, s} = t1.(t1, i, s)
      _ = i
      _ = s
      throw({:return, s})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # b :: list(integer())
    b = [98, 105, 110, 97, 114, 121]
    _ = b
    IO.puts(to_string(b))
    # c :: list(integer())
    c = b
    _ = c
    IO.puts(to_string(c))
    IO.puts(to_string(b == c))
    # d :: list(integer())
    d = []
    _ = d
    # i :: integer()
    i = 0
    _ = i

    t2 = fn t2, d, i ->
      try do
        if i < length(b) do
          d = d ++ [Enum.at(b, i)]
          i = i + 1
          t2.(t2, d, i)
        else
          {:ok, d, i}
        end
      catch
        :break ->
          {:ok, d, i}
      end
    end

    {_, d, i} = t2.(t2, d, i)
    _ = d
    _ = i
    d = List.replace_at(d, 1, 97)
    d = List.replace_at(d, 4, 110)
    IO.puts(fromBytes(b))
    IO.puts(fromBytes(d))
    IO.puts(to_string(length(b) == 0))
    # z :: list(any())
    z = b ++ [122]
    _ = z
    IO.puts(fromBytes(z))
    # sub :: list(integer())
    sub = Enum.slice(b, 1, 3 - 1)
    _ = sub
    IO.puts(fromBytes(sub))
    # f :: list(integer())
    f = []
    _ = f
    i = 0

    t3 = fn t3, f, i ->
      try do
        if i < length(d) do
          val = Enum.at(d, i)

          if val == 110 do
            f = f ++ [109]
          else
            f = f ++ [val]
          end

          i = i + 1
          t3.(t3, f, i)
        else
          {:ok, f, i}
        end
      catch
        :break ->
          {:ok, f, i}
      end
    end

    {_, f, i} = t3.(t3, f, i)
    _ = f
    _ = i
    IO.puts((fromBytes(d) <> " -> ") <> fromBytes(f))
    # rem :: list(integer())
    rem = []
    _ = rem
    rem = rem ++ [Enum.at(b, 0)]
    i = 3

    t4 = fn t4, i, rem ->
      try do
        if i < length(b) do
          rem = rem ++ [Enum.at(b, i)]
          i = i + 1
          t4.(t4, i, rem)
        else
          {:ok, i, rem}
        end
      catch
        :break ->
          {:ok, i, rem}
      end
    end

    {_, i, rem} = t4.(t4, i, rem)
    _ = i
    _ = rem
    IO.puts(fromBytes(rem))
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
