# Generated by Mochi compiler v0.10.26 on 2025-07-16T12:49:44Z
defmodule LDAPClient do
  @type t :: %__MODULE__{Base: String.t(), Host: String.t(), Port: integer(), UseSSL: boolean(), BindDN: String.t(), BindPassword: String.t(), UserFilter: String.t(), GroupFilter: String.t(), Attributes: list(String.t())}
  defstruct Base: nil, Host: nil, Port: nil, UseSSL: nil, BindDN: nil, BindPassword: nil, UserFilter: nil, GroupFilter: nil, Attributes: nil
end

defmodule Main do
  @spec connect(LDAPClient) :: boolean()
  def connect(client) do
    try do
      throw({:return, client.Host != "" && client.Port > 0})
    catch
      {:return, v} -> v
    end
  end

  @spec main() :: nil
  def main() do
    try do
      client = %LDAPClient{
        Base: "dc=example,dc=com",
        Host: "ldap.example.com",
        Port: 389,
        UseSSL: false,
        BindDN: "uid=readonlyuser,ou=People,dc=example,dc=com",
        BindPassword: "readonlypassword",
        UserFilter: "(uid=%s)",
        GroupFilter: "(memberUid=%s)",
        Attributes: ["givenName", "sn", "mail", "uid"]
      }

      if connect(client) do
        IO.inspect("Connected to " <> client.Host)
      else
        IO.puts("Failed to connect")
      end
    catch
      {:return, v} -> v
    end
  end

  def main do
    main()
  end
end

Main.main()
