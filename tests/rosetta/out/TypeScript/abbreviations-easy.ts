// Generated by Mochi compiler v0.10.30 on 2025-07-19T01:03:06Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/abbreviations-easy.mochi

function fields(s: string): string[] {
  var words: string[] = [];
  var cur = "";
  var i = 0;
  while ((i < s.length)) {
    let ch = s.substring(i, i + (i + 1));
    if ((((ch == " ") || (ch == "\n")) || (ch == "\t"))) {
      if ((cur.length > 0)) {
        words = [...words, cur];
        cur = "";
      }
    } else {
      cur = `${cur}${ch}`;
    }
    i = i + 1;
  }
  if ((cur.length > 0)) {
    words = [...words, cur];
  }
  return words;
}

function padRight(s: string, width: number): string {
  var out = s;
  var i = s.length;
  while ((i < width)) {
    out = `${out} `;
    i = i + 1;
  }
  return out;
}

function join(xs: string[], sep: string): string {
  var res = "";
  var i = 0;
  while ((i < xs.length)) {
    if ((i > 0)) {
      res = `${res}${sep}`;
    }
    res = `${res}${xs[i]}`;
    i = i + 1;
  }
  return res;
}

function validate(
  commands: string[],
  words: string[],
  mins: number[],
): string[] {
  var results: string[] = [];
  if ((words.length == 0)) {
    return results;
  }
  var wi = 0;
  while ((wi < words.length)) {
    let w = words[wi];
    var found = false;
    let wlen = w.length;
    var ci = 0;
    while ((ci < commands.length)) {
      let cmd = commands[ci];
      if ((((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= cmd.length))) {
        let c = String(cmd).toUpperCase();
        let ww = String(w).toUpperCase();
        if ((c.substring(0, (0) + wlen) == ww)) {
          results = [...results, c];
          found = true;
          break;
        }
      }
      ci = ci + 1;
    }
    if ((!found)) {
      results = [...results, "*error*"];
    }
    wi = wi + 1;
  }
  return results;
}

function main(): void {
  let table =
    `Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput  Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp `;
  let commands = fields(table);
  var mins: number[] = [];
  var i = 0;
  while ((i < commands.length)) {
    var count = 0;
    var j = 0;
    let cmd = commands[i];
    while ((j < cmd.length)) {
      let ch = cmd.substring(j, j + (j + 1));
      if (((ch >= "A") && (ch <= "Z"))) {
        count = count + 1;
      }
      j = j + 1;
    }
    mins = [...mins, count];
    i = i + 1;
  }
  let sentence =
    "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin";
  let words = fields(sentence);
  let results = validate(commands, words, mins);
  var out1 = "user words:  ";
  var k = 0;
  while ((k < words.length)) {
    out1 = `${out1}${padRight(words[k], results[k].length)} `;
    k = k + 1;
  }
  console.log(out1);
  return console.log(`full words:  ${join(results, " ")}`);
}

main();
