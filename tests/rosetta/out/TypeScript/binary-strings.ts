// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:38Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/binary-strings.mochi

function char(n: number): string {
  let letters = "abcdefghijklmnopqrstuvwxyz";
  let idx = n - 97;
  if (((idx < 0) || (idx >= letters.length))) {
    return "?";
  }
  return letters.substring(idx, idx + (idx + 1));
}

function fromBytes(bs: number[]): string {
  var s = "";
  var i = 0;
  while ((i < bs.length)) {
    s = `${s}${char(bs[i])}`;
    i = i + 1;
  }
  return s;
}

var b: number[];
var c: number[];
var d: number[];
var f: number[];
var i: number;
var rem: number[];
var sub: number[];
var z: any[];

function main(): void {
  b = [
    98,
    105,
    110,
    97,
    114,
    121,
  ];
  console.log(String(b));
  c = b;
  console.log(String(c));
  console.log(String(_equal(b, c)));
  d = [];
  i = 0;
  while ((i < b.length)) {
    d = [...d, b[i]];
    i = i + 1;
  }
  d[1] = 97;
  d[4] = 110;
  console.log(fromBytes(b));
  console.log(fromBytes(d));
  console.log(String(b.length == 0));
  z = [...b, 122];
  console.log(fromBytes(z));
  sub = b.slice(1, 3);
  console.log(fromBytes(sub));
  f = [];
  i = 0;
  while ((i < d.length)) {
    let val = d[i];
    if ((val == 110)) {
      f = [...f, 109];
    } else {
      f = [...f, val];
    }
    i = i + 1;
  }
  console.log(`${fromBytes(d)} -> ${fromBytes(f)}`);
  rem = [];
  rem = [...rem, b[0]];
  i = 3;
  while ((i < b.length)) {
    rem = [...rem, b[i]];
    i = i + 1;
  }
  console.log(fromBytes(rem));
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
