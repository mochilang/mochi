// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:11Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/align-columns.mochi

function split(s: string, sep: string): string[] {
  var parts: string[] = [];
  var cur = "";
  var i = 0;
  while ((i < s.length)) {
    if (
      (((sep.length > 0) && ((i + sep.length) <= s.length)) &&
        (s.substring(i, i + (i + sep.length)) == sep))
    ) {
      parts = [...parts, cur];
      cur = "";
      i = i + sep.length;
    } else {
      cur = `${cur}${s.substring(i, i + (i + 1))}`;
      i = i + 1;
    }
  }
  parts = [...parts, cur];
  return parts;
}

function rstripEmpty(words: string[]): string[] {
  var n = words.length;
  while (((n > 0) && (words[n - 1] == ""))) {
    n = n - 1;
  }
  return words.slice(0, n);
}

function spaces(n: number): string {
  var out = "";
  var i = 0;
  while ((i < n)) {
    out = `${out} `;
    i = i + 1;
  }
  return out;
}

function pad(word: string, width: number, align: number): string {
  let diff = width - word.length;
  if ((align == 0)) {
    return `${word}${spaces(diff)}`;
  }
  if ((align == 2)) {
    return `${spaces(diff)}${word}`;
  }
  var left = Math.trunc(diff / 2);
  var right = diff - left;
  return `${spaces(left)}${word}${spaces(right)}`;
}

function newFormatter(text: string): Record<string, any> {
  var lines = split(text, "\n");
  var fmtLines: string[][] = [];
  var width: number[] = [];
  var i = 0;
  while ((i < lines.length)) {
    if ((lines[i].length == 0)) {
      i = i + 1;
      continue;
    }
    var words = rstripEmpty(split(lines[i], "$"));
    fmtLines = [...fmtLines, words];
    var j = 0;
    while ((j < words.length)) {
      let wlen = words[j].length;
      if ((j == width.length)) {
        width = [...width, wlen];
      } else if ((wlen > width[j])) {
        width[j] = wlen;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return {
    "text": fmtLines,
    "width": width,
  };
}

function printFmt(f: Record<string, any>, align: number): void {
  let lines = f["text"];
  let width = f["width"];
  var i = 0;
  while ((i < lines.length)) {
    let words = lines[i];
    var line = "";
    var j = 0;
    while ((j < words.length)) {
      line = `${line}${pad(words[j], width[j], align)} `;
      j = j + 1;
    }
    console.log(line);
    i = i + 1;
  }
  return console.log("");
}

let f: Record<string, any>;
let text: string;

function main(): void {
  text = `Given$a$text$file$of$many$lines,$where$fields$within$a$line
are$delineated$by$a$single$'dollar'$character,$write$a$program
that$aligns$each$column$of$fields$by$ensuring$that$words$in$each
column$are$separated$by$at$least$one$space.
Further,$allow$for$each$word$in$a$column$to$be$either$left
justified,$right$justified,$or$center$justified$within$its$column.`;
  f = newFormatter(text);
  printFmt(f, 0);
  printFmt(f, 1);
  printFmt(f, 2);
}
main();
