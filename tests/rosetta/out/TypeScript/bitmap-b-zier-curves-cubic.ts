// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:39Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/bitmap-b-zier-curves-cubic.mochi

type Pixel = {
  r: number;
  g: number;
  b: number;
};

function pixelFromRgb(rgb: number): Pixel {
  let r = (Math.trunc(rgb / 65536)) % 256;
  let g = (Math.trunc(rgb / 256)) % 256;
  let b = rgb % 256;
  return {
    r: r,
    g: g,
    b: b,
  };
}

function newBitmap(cols: number, rows: number): Record<string, any> {
  var d: Pixel[][] = [];
  var y = 0;
  while ((y < rows)) {
    var row: Pixel[] = [];
    var x = 0;
    while ((x < cols)) {
      row = [...row, {
        r: 0,
        g: 0,
        b: 0,
      }];
      x = x + 1;
    }
    d = [...d, row];
    y = y + 1;
  }
  return {
    "cols": cols,
    "rows": rows,
    "data": d,
  };
}

function setPx(b: Record<string, any>, x: number, y: number, p: Pixel): void {
  let cols = b["cols"];
  let rows = b["rows"];
  if (((((x >= 0) && (x < cols)) && (y >= 0)) && (y < rows))) {
    b["data"][y][x] = p;
  }
}

function fill(b: Record<string, any>, p: Pixel): void {
  let cols = b["cols"];
  let rows = b["rows"];
  var y = 0;
  while ((y < rows)) {
    var x = 0;
    while ((x < cols)) {
      b["data"][y][x] = p;
      x = x + 1;
    }
    y = y + 1;
  }
}

function fillRgb(b: Record<string, any>, rgb: number): void {
  return fill(b, pixelFromRgb(rgb));
}

function line(
  b: Record<string, any>,
  x0: number,
  y0: number,
  x1: number,
  y1: number,
  p: Pixel,
): void {
  var dx = x1 - x0;
  if ((dx < 0)) {
    dx = -dx;
  }
  var dy = y1 - y0;
  if ((dy < 0)) {
    dy = -dy;
  }
  var sx = -1;
  if ((x0 < x1)) {
    sx = 1;
  }
  var sy = -1;
  if ((y0 < y1)) {
    sy = 1;
  }
  var err = dx - dy;
  while (true) {
    setPx(b, x0, y0, p);
    if (((x0 == x1) && (y0 == y1))) {
      break;
    }
    let e2 = 2 * err;
    if ((e2 > (0 - dy))) {
      err = err - dy;
      x0 = x0 + sx;
    }
    if ((e2 < dx)) {
      err = err + dx;
      y0 = y0 + sy;
    }
  }
}

function bezier3(
  b: Record<string, any>,
  x1: number,
  y1: number,
  x2: number,
  y2: number,
  x3: number,
  y3: number,
  x4: number,
  y4: number,
  p: Pixel,
): void {
  var px: number[] = [];
  var py: number[] = [];
  var i = 0;
  while ((i <= b3Seg)) {
    px = [...px, 0];
    py = [...py, 0];
    i = i + 1;
  }
  let fx1 = x1;
  let fy1 = y1;
  let fx2 = x2;
  let fy2 = y2;
  let fx3 = x3;
  let fy3 = y3;
  let fx4 = x4;
  let fy4 = y4;
  i = 0;
  while ((i <= b3Seg)) {
    let d = i / b3Seg;
    var a = 1 - d;
    var bcoef = a * a;
    var ccoef = d * d;
    var a2 = a * bcoef;
    var b2 = (3 * bcoef) * d;
    var c2 = (3 * a) * ccoef;
    var d2 = ccoef * d;
    px[i] = (((a2 * fx1) + (b2 * fx2)) + (c2 * fx3)) + (d2 * fx4);
    py[i] = (((a2 * fy1) + (b2 * fy2)) + (c2 * fy3)) + (d2 * fy4);
    i = i + 1;
  }
  var x0 = px[0];
  var y0 = py[0];
  i = 1;
  while ((i <= b3Seg)) {
    let x = px[i];
    let y = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = i + 1;
  }
}

var b: Record<string, any>;
let b3Seg: number;

function main(): void {
  b3Seg = 30;
  b = newBitmap(400, 300);
  fillRgb(b, 16773055);
  bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
}
main();
