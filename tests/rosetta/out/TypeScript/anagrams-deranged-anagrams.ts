// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:31Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/anagrams-deranged-anagrams.mochi

function sortRunes(s: string): string {
  var arr: string[] = [];
  var i = 0;
  while ((i < s.length)) {
    arr = [...arr, _sliceString(s, i, i + 1)];
    i = i + 1;
  }
  var n = arr.length;
  var m = 0;
  while ((m < n)) {
    var j = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[j + 1])) {
        let tmp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = tmp;
      }
      j = j + 1;
    }
    m = m + 1;
  }
  var out = "";
  i = 0;
  while ((i < n)) {
    out = `${out}${arr[i]}`;
    i = i + 1;
  }
  return out;
}

function deranged(a: string, b: string): boolean {
  if ((a.length != b.length)) {
    return false;
  }
  var i = 0;
  while ((i < a.length)) {
    if ((_sliceString(a, i, i + 1) == _sliceString(b, i, i + 1))) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

function main(): void {
  let words = [
    "constitutionalism",
    "misconstitutional",
  ];
  var m: { [key: string]: string[] } = {};
  var bestLen = 0;
  var w1 = "";
  var w2 = "";
  for (const w of words) {
    if ((w.length <= bestLen)) {
      continue;
    }
    let k = sortRunes(w);
    if ((!(Object.prototype.hasOwnProperty.call(m, String(k))))) {
      m[k] = [w];
      continue;
    }
    for (const c of m[k]) {
      if (deranged(w, c)) {
        bestLen = w.length;
        w1 = c;
        w2 = w;
        break;
      }
    }
    m[k] = [...m[k], w];
  }
  return console.log(`${w1} ${w2} : Length ${String(bestLen)}`);
}

function main(): void {
  main();
}
function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
