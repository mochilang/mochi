// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:38Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/bioinformatics-base-count.mochi

function padLeft(s: string, w: number): string {
  var res = "";
  var n = w - s.length;
  while ((n > 0)) {
    res = `${res} `;
    n = n - 1;
  }
  return `${res}${s}`;
}

var a: number;
var c: number;
let dna: string;
var g: number;
var i: number;
var idx: number;
let le: number;
var t: number;

function main(): void {
  dna =
    `CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATATTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTATCGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTGTCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGACGACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT`;
  console.log("SEQUENCE:");
  le = dna.length;
  i = 0;
  while ((i < le)) {
    var k = i + 50;
    if ((k > le)) {
      k = le;
    }
    console.log(`${padLeft(String(i), 5)}: ${_sliceString(dna, i, k)}`);
    i = i + 50;
  }
  a = 0;
  c = 0;
  g = 0;
  t = 0;
  idx = 0;
  while ((idx < le)) {
    let ch = dna.substring(idx, idx + (idx + 1));
    if ((ch == "A")) {
      a = a + 1;
    } else {
      if ((ch == "C")) {
        c = c + 1;
      } else {
        if ((ch == "G")) {
          g = g + 1;
        } else {
          if ((ch == "T")) {
            t = t + 1;
          }
        }
      }
    }
    idx = idx + 1;
  }
  console.log("");
  console.log("BASE COUNT:");
  console.log(`    A: ${padLeft(String(a), 3)}`);
  console.log(`    C: ${padLeft(String(c), 3)}`);
  console.log(`    G: ${padLeft(String(g), 3)}`);
  console.log(`    T: ${padLeft(String(t), 3)}`);
  console.log("    ------");
  console.log(`    Î£: ${String(le)}`);
  console.log("    ======");
}
function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
