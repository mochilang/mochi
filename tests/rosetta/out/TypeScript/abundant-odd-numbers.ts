// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:10Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/abundant-odd-numbers.mochi

function divisors(n: number): number[] {
  var divs: number[] = [1];
  var divs2: number[] = [];
  var i = 2;
  while (((i * i) <= n)) {
    if (((n % i) == 0)) {
      let j = Math.trunc(n / i);
      divs = [...divs, i];
      if ((i != j)) {
        divs2 = [...divs2, j];
      }
    }
    i = i + 1;
  }
  var j = divs2.length - 1;
  while ((j >= 0)) {
    divs = [...divs, divs2[j]];
    j = j - 1;
  }
  return divs;
}

function sum(xs: number[]): number {
  var tot = 0;
  for (const v of xs) {
    tot = tot + v;
  }
  return tot;
}

function sumStr(xs: number[]): string {
  var s = "";
  var i = 0;
  while ((i < xs.length)) {
    s = `${s}${String(xs[i])} + `;
    i = i + 1;
  }
  return s.substring(0, (0) + (s.length - 3));
}

function pad2(n: number): string {
  let s = String(n);
  if ((s.length < 2)) {
    return ` ${s}`;
  }
  return s;
}

function pad5(n: number): string {
  var s = String(n);
  while ((s.length < 5)) {
    s = ` ${s}`;
  }
  return s;
}

function abundantOdd(
  searchFrom: number,
  countFrom: number,
  countTo: number,
  printOne: boolean,
): number {
  var count = countFrom;
  var n = searchFrom;
  while ((count < countTo)) {
    let divs = divisors(n);
    let tot = _sum(divs);
    if ((tot > n)) {
      count = count + 1;
      if ((printOne && (count < countTo))) {
        n = n + 2;
        continue;
      }
      let s = sumStr(divs);
      if ((!printOne)) {
        console.log(`${pad2(count)}. ${pad5(n)} < ${s} = ${String(tot)}`);
      } else {
        console.log(`${String(n)} < ${s} = ${String(tot)}`);
      }
    }
    n = n + 2;
  }
  return n;
}

function main(): void {
  let max = 25;
  console.log(`The first ${String(max)} abundant odd numbers are:`);
  let n = abundantOdd(1, 0, max, false);
  console.log("\nThe one thousandth abundant odd number is:");
  abundantOdd(n, max, 1000, true);
  console.log("\nThe first abundant odd number above one billion is:");
  return abundantOdd(1000000001, 0, 1, true);
}

function main(): void {
  main();
}
function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
