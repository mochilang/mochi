// Generated by Mochi compiler v0.10.30 on 2025-07-18T12:38:22Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/4-rings-or-4-squares-puzzle.mochi

function validComb(
  a: number,
  b: number,
  c: number,
  d: number,
  e: number,
  f: number,
  g: number,
): boolean {
  let square1 = a + b;
  let square2 = (b + c) + d;
  let square3 = (d + e) + f;
  let square4 = f + g;
  return (((square1 == square2) && (square2 == square3)) &&
    (square3 == square4));
}

function isUnique(
  a: number,
  b: number,
  c: number,
  d: number,
  e: number,
  f: number,
  g: number,
): boolean {
  var nums = [
    a,
    b,
    c,
    d,
    e,
    f,
    g,
  ];
  var i = 0;
  while ((i < nums.length)) {
    var j = i + 1;
    while ((j < nums.length)) {
      if ((nums[i] == nums[j])) {
        return false;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return true;
}

function getCombs(
  low: number,
  high: number,
  unique: boolean,
): Record<string, any> {
  var valid = [];
  var count = 0;
  for (let b: number = low; b < (high + 1); b++) {
    for (let c: number = low; c < (high + 1); c++) {
      for (let d: number = low; d < (high + 1); d++) {
        let s = (b + c) + d;
        for (let e: number = low; e < (high + 1); e++) {
          for (let f: number = low; f < (high + 1); f++) {
            let a = s - b;
            let g = s - f;
            if (((a < low) || (a > high))) {
              continue;
            }
            if (((g < low) || (g > high))) {
              continue;
            }
            if ((((d + e) + f) != s)) {
              continue;
            }
            if (((f + g) != s)) {
              continue;
            }
            if (((!unique) || isUnique(a, b, c, d, e, f, g))) {
              valid = [...valid, [
                a,
                b,
                c,
                d,
                e,
                f,
                g,
              ]];
              count = count + 1;
            }
          }
        }
      }
    }
  }
  return {
    "count": count,
    "list": valid,
  };
}

let r1: Record<string, any>;
let r2: Record<string, any>;
let r3: Record<string, any>;

function main(): void {
  let r1: Record<string, any> = getCombs(1, 7, true);
  console.log(
    Array.isArray(`${String(r1["count"])} unique solutions in 1 to 7`)
      ? _fmtList(`${String(r1["count"])} unique solutions in 1 to 7`)
      : (typeof `${String(r1["count"])} unique solutions in 1 to 7` === "object"
        ? _fmt(`${String(r1["count"])} unique solutions in 1 to 7`)
        : String(`${String(r1["count"])} unique solutions in 1 to 7`)),
  );
  console.log(
    Array.isArray(r1["list"])
      ? _fmtList(r1["list"])
      : (typeof r1["list"] === "object"
        ? _fmt(r1["list"])
        : String(r1["list"])),
  );
  let r2: Record<string, any> = getCombs(3, 9, true);
  console.log(
    Array.isArray(`${String(r2["count"])} unique solutions in 3 to 9`)
      ? _fmtList(`${String(r2["count"])} unique solutions in 3 to 9`)
      : (typeof `${String(r2["count"])} unique solutions in 3 to 9` === "object"
        ? _fmt(`${String(r2["count"])} unique solutions in 3 to 9`)
        : String(`${String(r2["count"])} unique solutions in 3 to 9`)),
  );
  console.log(
    Array.isArray(r2["list"])
      ? _fmtList(r2["list"])
      : (typeof r2["list"] === "object"
        ? _fmt(r2["list"])
        : String(r2["list"])),
  );
  let r3: Record<string, any> = getCombs(0, 9, false);
  console.log(
    Array.isArray(`${String(r3["count"])} non-unique solutions in 0 to 9`)
      ? _fmtList(`${String(r3["count"])} non-unique solutions in 0 to 9`)
      : (typeof `${String(r3["count"])} non-unique solutions in 0 to 9` ===
          "object"
        ? _fmt(`${String(r3["count"])} non-unique solutions in 0 to 9`)
        : String(`${String(r3["count"])} non-unique solutions in 0 to 9`)),
  );
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

function _fmtList(v: any[]): string {
  if (v.some((it) => Array.isArray(it) || (it && typeof it === "object"))) {
    return v.map((it) =>
      Array.isArray(it) ? "[" + _fmtList(it) + "]" : _fmt(it)
    ).join(" ");
  }
  return v.join(" ");
}

main();
