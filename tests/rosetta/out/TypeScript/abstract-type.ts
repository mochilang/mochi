// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:10Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/abstract-type.mochi

type Dog = {
  __name: "Dog";
  kind: string;
  name: string;
};

type Cat = {
  __name: "Cat";
  kind: string;
  name: string;
};

type Beast = Dog | Cat;

function beastKind(b: Beast): string {
  return (() => {
    const _t = b;
    if (_t.__name === "Dog") return ((k) => k)(_t.kind);
    if (_t.__name === "Cat") return ((k) => k)(_t.kind);
    return undefined;
  })();
}

function beastName(b: Beast): string {
  return (() => {
    const _t = b;
    if (_t.__name === "Dog") return ((n) => n)(_t.name);
    if (_t.__name === "Cat") return ((n) => n)(_t.name);
    return undefined;
  })();
}

function beastCry(b: Beast): string {
  return (() => {
    const _t = b;
    if (_t.__name === "Dog") return "Woof";
    if (_t.__name === "Cat") return "Meow";
    return undefined;
  })();
}

function bprint(b: Beast): void {
  return console.log(
    `${beastName(b)}, who's a ${beastKind(b)}, cries: "${beastCry(b)}".`,
  );
}

function main(): void {
  let d: Beast = { __name: "Dog", kind: "labrador", name: "Max" };
  let c: Beast = { __name: "Cat", kind: "siamese", name: "Sammy" };
  bprint(d);
  return bprint(c);
}

function main(): void {
  main();
}
main();
