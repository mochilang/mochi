// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:36Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/averages-mean-time-of-day.mochi

function sinApprox(x: number): number {
  var term = x;
  var sum = x;
  var n = 1;
  while ((n <= 8)) {
    let denom = (2 * n) * ((2 * n) + 1);
    term = (((-term) * x) * x) / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

function cosApprox(x: number): number {
  var term = 1;
  var sum = 1;
  var n = 1;
  while ((n <= 8)) {
    let denom = ((2 * n) - 1) * (2 * n);
    term = (((-term) * x) * x) / denom;
    sum = sum + term;
    n = n + 1;
  }
  return sum;
}

function atanApprox(x: number): number {
  if ((x > 1)) {
    return ((PI / 2) - (x / ((x * x) + 0.28)));
  }
  if ((x < (-1))) {
    return (((-PI) / 2) - (x / ((x * x) + 0.28)));
  }
  return (x / (1 + ((0.28 * x) * x)));
}

function atan2Approx(y: number, x: number): number {
  if ((x > 0)) {
    return atanApprox(y / x);
  }
  if ((x < 0)) {
    if ((y >= 0)) {
      return (atanApprox(y / x) + PI);
    }
    return (atanApprox(y / x) - PI);
  }
  if ((y > 0)) {
    return (PI / 2);
  }
  if ((y < 0)) {
    return ((-PI) / 2);
  }
  return 0;
}

function digit(ch: string): number {
  let digits = "0123456789";
  var i = 0;
  while ((i < digits.length)) {
    if ((digits.substring(i, i + (i + 1)) == ch)) {
      return i;
    }
    i = i + 1;
  }
  return 0;
}

function parseTwo(s: string, idx: number): number {
  return ((digit(s.substring(idx, idx + (idx + 1))) * 10) +
    digit(s.substring(idx + 1, (idx + 1) + (idx + 2))));
}

function parseSec(s: string): number {
  let h = parseTwo(s, 0);
  let m = parseTwo(s, 3);
  let sec = parseTwo(s, 6);
  return ((((h * 60) + m) * 60) + sec);
}

function pad(n: number): string {
  if ((n < 10)) {
    return `0${String(n)}`;
  }
  return String(n);
}

function meanTime(times: string[]): string {
  var ssum = 0;
  var csum = 0;
  var i = 0;
  while ((i < times.length)) {
    let sec = parseSec(times[i]);
    let ang = ((sec * 2) * PI) / 86400;
    ssum = ssum + sinApprox(ang);
    csum = csum + cosApprox(ang);
    i = i + 1;
  }
  var theta = atan2Approx(ssum, csum);
  var frac = theta / (2 * PI);
  while ((frac < 0)) {
    frac = frac + 1;
  }
  let total = frac * 86400;
  let si = total;
  let h = Math.trunc(si / 3600);
  let m = Math.trunc((si % 3600) / 60);
  let s = si % 60;
  return `${pad(h)}:${pad(m)}:${pad(s)}`;
}

function main(): void {
  let inputs = [
    "23:00:17",
    "23:40:20",
    "00:12:45",
    "00:17:19",
  ];
  return console.log(meanTime(inputs));
}

let PI: number;

function main(): void {
  PI = 3.141592653589793;
  main();
}
main();
