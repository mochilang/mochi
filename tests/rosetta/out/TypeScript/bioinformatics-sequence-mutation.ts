// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:39Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/bioinformatics-sequence-mutation.mochi

function randInt(s: number, n: number): number[] {
  let next = ((s * 1664525) + 1013904223) % 2147483647;
  return [
    next,
    next % n,
  ];
}

function padLeft(s: string, w: number): string {
  var res = "";
  var n = w - s.length;
  while ((n > 0)) {
    res = `${res} `;
    n = n - 1;
  }
  return `${res}${s}`;
}

function makeSeq(s: number, le: number): any[] {
  let bases = "ACGT";
  var out = "";
  var i = 0;
  while ((i < le)) {
    var r = randInt(s, 4);
    s = r[0];
    let idx = r[1];
    out = `${out}${bases.substring(idx, idx + (idx + 1))}`;
    i = i + 1;
  }
  return [
    s,
    out,
  ];
}

function mutate(s: number, dna: string, w: number[]): any[] {
  let bases = "ACGT";
  let le = dna.length;
  var r = randInt(s, le);
  s = r[0];
  let p = r[1];
  r = randInt(s, 300);
  s = r[0];
  let x = r[1];
  var arr: string[] = [];
  var i = 0;
  while ((i < le)) {
    arr = [...arr, dna.substring(i, i + (i + 1))];
    i = i + 1;
  }
  if ((x < w[0])) {
    r = randInt(s, 4);
    s = r[0];
    let idx = r[1];
    let b = bases.substring(idx, idx + (idx + 1));
    console.log(`  Change @${padLeft(String(p), 3)} '${arr[p]}' to '${b}'`);
    arr[p] = b;
  } else if ((x < (w[0] + w[1]))) {
    console.log(`  Delete @${padLeft(String(p), 3)} '${arr[p]}'`);
    var j = p;
    while ((j < (arr.length - 1))) {
      arr[j] = arr[j + 1];
      j = j + 1;
    }
    arr = arr.slice(0, arr.length - 1);
  } else {
    r = randInt(s, 4);
    s = r[0];
    let idx2 = r[1];
    let b = bases.substring(idx2, idx2 + (idx2 + 1));
    arr = [...arr, ""];
    var j = arr.length - 1;
    while ((j > p)) {
      arr[j] = arr[j - 1];
      j = j - 1;
    }
    console.log(`  Insert @${padLeft(String(p), 3)} '${b}'`);
    arr[p] = b;
  }
  var out = "";
  i = 0;
  while ((i < arr.length)) {
    out = `${out}${arr[i]}`;
    i = i + 1;
  }
  return [
    s,
    out,
  ];
}

function prettyPrint(dna: string, rowLen: number): void {
  console.log("SEQUENCE:");
  let le = dna.length;
  var i = 0;
  while ((i < le)) {
    var k = i + rowLen;
    if ((k > le)) {
      k = le;
    }
    console.log(`${padLeft(String(i), 5)}: ${_sliceString(dna, i, k)}`);
    i = i + rowLen;
  }
  var a = 0;
  var c = 0;
  var g = 0;
  var t = 0;
  var idx = 0;
  while ((idx < le)) {
    let ch = dna.substring(idx, idx + (idx + 1));
    if ((ch == "A")) {
      a = a + 1;
    } else {
      if ((ch == "C")) {
        c = c + 1;
      } else {
        if ((ch == "G")) {
          g = g + 1;
        } else {
          if ((ch == "T")) {
            t = t + 1;
          }
        }
      }
    }
    idx = idx + 1;
  }
  console.log("");
  console.log("BASE COUNT:");
  console.log(`    A: ${padLeft(String(a), 3)}`);
  console.log(`    C: ${padLeft(String(c), 3)}`);
  console.log(`    G: ${padLeft(String(g), 3)}`);
  console.log(`    T: ${padLeft(String(t), 3)}`);
  console.log("    ------");
  console.log(`    Î£: ${String(le)}`);
  return console.log("    ======");
}

function wstring(w: number[]): string {
  return `  Change: ${String(w[0])}
  Delete: ${String(w[1])}
  Insert: ${String(w[2])}
`;
}

function main(): void {
  var seed = 1;
  var res = makeSeq(seed, 250);
  seed = res[0];
  var dna = res[1];
  prettyPrint(dna, 50);
  let muts = 10;
  let w = [
    100,
    100,
    100,
  ];
  console.log("\nWEIGHTS (ex 300):");
  console.log(wstring(w));
  console.log(`MUTATIONS (${String(muts)}):`);
  var i = 0;
  while ((i < muts)) {
    res = mutate(seed, dna, w);
    seed = res[0];
    dna = res[1];
    i = i + 1;
  }
  console.log("");
  return prettyPrint(dna, 50);
}

function main(): void {
  main();
}
function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
