// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:39Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/bioinformatics-global-alignment.mochi

function padLeft(s: string, w: number): string {
  var res = "";
  var n = w - s.length;
  while ((n > 0)) {
    res = `${res} `;
    n = n - 1;
  }
  return `${res}${s}`;
}

function indexOfFrom(s: string, ch: string, start: number): number {
  var i = start;
  while ((i < s.length)) {
    if ((s.substring(i, i + (i + 1)) == ch)) {
      return i;
    }
    i = i + 1;
  }
  return (-1);
}

function containsStr(s: string, sub: string): boolean {
  var i = 0;
  let sl = s.length;
  let subl = sub.length;
  while ((i <= (sl - subl))) {
    if ((s.substring(i, i + (i + subl)) == sub)) {
      return true;
    }
    i = i + 1;
  }
  return false;
}

function distinct(slist: string[]): string[] {
  var res: string[] = [];
  for (const s of slist) {
    var found = false;
    for (const r of res) {
      if ((r == s)) {
        found = true;
        break;
      }
    }
    if ((!found)) {
      res = [...res, s];
    }
  }
  return res;
}

function permutations(xs: string[]): string[][] {
  if ((xs.length <= 1)) {
    return [xs];
  }
  var res: string[][] = [];
  var i = 0;
  while ((i < xs.length)) {
    var rest: string[] = [];
    var j = 0;
    while ((j < xs.length)) {
      if ((j != i)) {
        rest = [...rest, xs[j]];
      }
      j = j + 1;
    }
    let subs = permutations(rest);
    for (const p of subs) {
      var perm: string[] = [xs[i]];
      var k = 0;
      while ((k < p.length)) {
        perm = [...perm, p[k]];
        k = k + 1;
      }
      res = [...res, perm];
    }
    i = i + 1;
  }
  return res;
}

function headTailOverlap(s1: string, s2: string): number {
  var start = 0;
  while (true) {
    let ix = indexOfFrom(s1, _sliceString(s2, 0, 1), start);
    if ((ix == (0 - 1))) {
      return 0;
    }
    start = ix;
    if (
      (s2.substring(0, (0) + (s1.length - start)) ==
        s1.substring(start, start + (s1.length)))
    ) {
      return (s1.length - start);
    }
    start = start + 1;
  }
}

function deduplicate(slist: string[]): string[] {
  let arr = distinct(slist);
  var filtered: string[] = [];
  var i = 0;
  while ((i < arr.length)) {
    let s1 = arr[i];
    var within = false;
    var j = 0;
    while ((j < arr.length)) {
      if (((j != i) && containsStr(arr[j], s1))) {
        within = true;
        break;
      }
      j = j + 1;
    }
    if ((!within)) {
      filtered = [...filtered, s1];
    }
    i = i + 1;
  }
  return filtered;
}

function joinAll(ss: string[]): string {
  var out = "";
  for (const s of ss) {
    out = `${out}${s}`;
  }
  return out;
}

function shortestCommonSuperstring(slist: string[]): string {
  let ss = deduplicate(slist);
  var shortest = joinAll(ss);
  let perms = permutations(ss);
  var idx = 0;
  while ((idx < perms.length)) {
    let perm = perms[idx];
    var sup = perm[0];
    var i = 0;
    while ((i < (ss.length - 1))) {
      let ov = headTailOverlap(perm[i], perm[i + 1]);
      sup = `${sup}${perm[i + 1].substring(ov, ov + (perm[i + 1].length))}`;
      i = i + 1;
    }
    if ((sup.length < shortest.length)) {
      shortest = sup;
    }
    idx = idx + 1;
  }
  return shortest;
}

function printCounts(seq: string): void {
  var a = 0;
  var c = 0;
  var g = 0;
  var t = 0;
  var i = 0;
  while ((i < seq.length)) {
    let ch = seq.substring(i, i + (i + 1));
    if ((ch == "A")) {
      a = a + 1;
    } else {
      if ((ch == "C")) {
        c = c + 1;
      } else {
        if ((ch == "G")) {
          g = g + 1;
        } else {
          if ((ch == "T")) {
            t = t + 1;
          }
        }
      }
    }
    i = i + 1;
  }
  let total = seq.length;
  console.log(`
Nucleotide counts for ${seq}:
`);
  console.log(`${padLeft("A", 10)}${padLeft(String(a), 12)}`);
  console.log(`${padLeft("C", 10)}${padLeft(String(c), 12)}`);
  console.log(`${padLeft("G", 10)}${padLeft(String(g), 12)}`);
  console.log(`${padLeft("T", 10)}${padLeft(String(t), 12)}`);
  console.log(
    `${padLeft("Other", 10)}${
      padLeft(String(total - (((a + c) + g) + t)), 12)
    }`,
  );
  console.log("  ____________________");
  return console.log(
    `${padLeft("Total length", 14)}${padLeft(String(total), 8)}`,
  );
}

function main(): void {
  let tests: string[][] = [
    [
      "TA",
      "AAG",
      "TA",
      "GAA",
      "TA",
    ],
    [
      "CATTAGGG",
      "ATTAG",
      "GGG",
      "TA",
    ],
    [
      "AAGAUGGA",
      "GGAGCGCAUC",
      "AUCGCAAUAAGGA",
    ],
    [
      "ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT",
      "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT",
      "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA",
      "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
      "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT",
      "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC",
      "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT",
      "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
      "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC",
      "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT",
      "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
      "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA",
      "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA",
    ],
  ];
  for (const seqs of tests) {
    let scs = shortestCommonSuperstring(seqs);
    printCounts(scs);
  }
}

function main(): void {
  main();
}
function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
