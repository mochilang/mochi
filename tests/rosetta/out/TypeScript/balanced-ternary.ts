// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:37Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/balanced-ternary.mochi

function trimLeftZeros(s: string): string {
  var i = 0;
  while (((i < s.length) && (s.substring(i, i + (i + 1)) == "0"))) {
    i = i + 1;
  }
  return s.substring(i, i + (s.length));
}

function btString(s: string): Record<string, any> {
  s = trimLeftZeros(s);
  var b: number[] = [];
  var i = s.length - 1;
  while ((i >= 0)) {
    let ch = s.substring(i, i + (i + 1));
    if ((ch == "+")) {
      b = [...b, 1];
    } else {
      if ((ch == "0")) {
        b = [...b, 0];
      } else {
        if ((ch == "-")) {
          b = [...b, 0 - 1];
        } else {
          return {
            "bt": [],
            "ok": false,
          };
        }
      }
    }
    i = i - 1;
  }
  return {
    "bt": b,
    "ok": true,
  };
}

function btToString(b: number[]): string {
  if ((b.length == 0)) {
    return "0";
  }
  var r = "";
  var i = b.length - 1;
  while ((i >= 0)) {
    let d = b[i];
    if ((d == (0 - 1))) {
      r = `${r}-`;
    } else {
      if ((d == 0)) {
        r = `${r}0`;
      } else {
        r = `${r}+`;
      }
    }
    i = i - 1;
  }
  return r;
}

function btInt(i: number): number[] {
  if ((i == 0)) {
    return [];
  }
  var n = i;
  var b: number[] = [];
  while ((n != 0)) {
    var m = n % 3;
    n = Math.trunc(n / 3);
    if ((m == 2)) {
      m = 0 - 1;
      n = n + 1;
    } else {
      if ((m == (0 - 2))) {
        m = 1;
        n = n - 1;
      }
    }
    b = [...b, m];
  }
  return b;
}

function btToInt(b: number[]): number {
  var r = 0;
  var pt = 1;
  var i = 0;
  while ((i < b.length)) {
    r = r + (b[i] * pt);
    pt = pt * 3;
    i = i + 1;
  }
  return r;
}

function btNeg(b: number[]): number[] {
  var r: number[] = [];
  var i = 0;
  while ((i < b.length)) {
    r = [...r, -b[i]];
    i = i + 1;
  }
  return r;
}

function btAdd(a: number[], b: number[]): number[] {
  return btInt(btToInt(a) + btToInt(b));
}

function btMul(a: number[], b: number[]): number[] {
  return btInt(btToInt(a) * btToInt(b));
}

function padLeft(s: string, w: number): string {
  var r = s;
  while ((r.length < w)) {
    r = ` ${r}`;
  }
  return r;
}

function show(label: string, b: number[]): void {
  let l = padLeft(label, 7);
  let bs = padLeft(btToString(b), 12);
  let is = padLeft(String(btToInt(b)), 7);
  return console.log(`${l} ${bs} ${is}`);
}

function main(): void {
  let ares = btString("+-0++0+");
  let a = ares["bt"];
  let b = btInt(-436);
  let cres = btString("+-++-");
  let c = cres["bt"];
  show("a:", a);
  show("b:", b);
  show("c:", c);
  return show("a(b-c):", btMul(a, btAdd(b, btNeg(c))));
}

function main(): void {
  main();
}
main();
