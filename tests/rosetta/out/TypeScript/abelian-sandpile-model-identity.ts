// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:09Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/abelian-sandpile-model-identity.mochi

function neighborsList(): number[][] {
  return [
    [
      1,
      3,
    ],
    [
      0,
      2,
      4,
    ],
    [
      1,
      5,
    ],
    [
      0,
      4,
      6,
    ],
    [
      1,
      3,
      5,
      7,
    ],
    [
      2,
      4,
      8,
    ],
    [
      3,
      7,
    ],
    [
      4,
      6,
      8,
    ],
    [
      5,
      7,
    ],
  ];
}

function plus(a: number[], b: number[]): number[] {
  var res: number[] = [];
  var i = 0;
  while ((i < a.length)) {
    res = [...res, a[i] + b[i]];
    i = i + 1;
  }
  return res;
}

function isStable(p: number[]): boolean {
  for (const v of p) {
    if ((v > 3)) {
      return false;
    }
  }
  return true;
}

function topple(p: number[]): number {
  let neighbors = neighborsList();
  var i = 0;
  while ((i < p.length)) {
    if ((p[i] > 3)) {
      p[i] = p[i] - 4;
      let nbs = neighbors[i];
      for (const j of nbs) {
        p[j] = p[j] + 1;
      }
      return 0;
    }
    i = i + 1;
  }
  return 0;
}

function pileString(p: number[]): string {
  var s = "";
  var r = 0;
  while ((r < 3)) {
    var c = 0;
    while ((c < 3)) {
      s = `${s}${String(p[(3 * r) + c])} `;
      c = c + 1;
    }
    s = `${s}
`;
    r = r + 1;
  }
  return s;
}

var s1: number[];
var s2: number[];
var s3: number[];
var s3_a: number[];
var s3_b: number[];
var s3_id: number[];
var s4: number[];
var s4b: number[];
var s5: number[];

function main(): void {
  console.log("Avalanche of topplings:\n");
  s4 = [
    4,
    3,
    3,
    3,
    1,
    2,
    0,
    2,
    3,
  ];
  console.log(pileString(s4));
  while ((!isStable(s4))) {
    topple(s4);
    console.log(pileString(s4));
  }
  console.log("Commutative additions:\n");
  s1 = [
    1,
    2,
    0,
    2,
    1,
    1,
    0,
    1,
    3,
  ];
  s2 = [
    2,
    1,
    3,
    1,
    0,
    1,
    0,
    1,
    0,
  ];
  s3_a = plus(s1, s2);
  while ((!isStable(s3_a))) {
    topple(s3_a);
  }
  s3_b = plus(s2, s1);
  while ((!isStable(s3_b))) {
    topple(s3_b);
  }
  console.log(`${pileString(s1)}
plus

${pileString(s2)}
equals

${pileString(s3_a)}`);
  console.log(`and

${pileString(s2)}
plus

${pileString(s1)}
also equals

${pileString(s3_b)}`);
  console.log("Addition of identity sandpile:\n");
  s3 = [
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
  ];
  s3_id = [
    2,
    1,
    2,
    1,
    0,
    1,
    2,
    1,
    2,
  ];
  s4b = plus(s3, s3_id);
  while ((!isStable(s4b))) {
    topple(s4b);
  }
  console.log(`${pileString(s3)}
plus

${pileString(s3_id)}
equals

${pileString(s4b)}`);
  console.log("Addition of identities:\n");
  s5 = plus(s3_id, s3_id);
  while ((!isStable(s5))) {
    topple(s5);
  }
  console.log(`${pileString(s3_id)}
plus

${pileString(s3_id)}
equals

${pileString(s5)}`);
}
main();
