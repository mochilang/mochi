// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:31Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/anagrams.mochi

function sortRunes(s: string): string {
  var arr: string[] = [];
  var i = 0;
  while ((i < s.length)) {
    arr = [...arr, _sliceString(s, i, i + 1)];
    i = i + 1;
  }
  var n = arr.length;
  var m = 0;
  while ((m < n)) {
    var j = 0;
    while ((j < (n - 1))) {
      if ((arr[j] > arr[j + 1])) {
        let tmp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = tmp;
      }
      j = j + 1;
    }
    m = m + 1;
  }
  var out = "";
  i = 0;
  while ((i < n)) {
    out = `${out}${arr[i]}`;
    i = i + 1;
  }
  return out;
}

function sortStrings(xs: string[]): string[] {
  var res: string[] = [];
  var tmp = xs;
  while ((tmp.length > 0)) {
    var min = tmp[0];
    var idx = 0;
    var i = 1;
    while ((i < tmp.length)) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = i + 1;
    }
    res = [...res, min];
    var out: string[] = [];
    var j = 0;
    while ((j < tmp.length)) {
      if ((j != idx)) {
        out = [...out, tmp[j]];
      }
      j = j + 1;
    }
    tmp = out;
  }
  return res;
}

function main(): void {
  let words = [
    "abel",
    "able",
    "bale",
    "bela",
    "elba",
    "alger",
    "glare",
    "lager",
    "large",
    "regal",
    "angel",
    "angle",
    "galen",
    "glean",
    "lange",
    "caret",
    "carte",
    "cater",
    "crate",
    "trace",
    "elan",
    "lane",
    "lean",
    "lena",
    "neal",
    "evil",
    "levi",
    "live",
    "veil",
    "vile",
  ];
  var groups: { [key: string]: string[] } = {};
  var maxLen = 0;
  for (const w of words) {
    let k = sortRunes(w);
    if ((!(Object.prototype.hasOwnProperty.call(groups, String(k))))) {
      groups[k] = [w];
    } else {
      groups[k] = [...groups[k], w];
    }
    if ((groups[k].length > maxLen)) {
      maxLen = groups[k].length;
    }
  }
  var printed: { [key: string]: boolean } = {};
  for (const w of words) {
    let k = sortRunes(w);
    if ((groups[k].length == maxLen)) {
      if ((!(Object.prototype.hasOwnProperty.call(printed, String(k))))) {
        var g = sortStrings(groups[k]);
        var line = `[${g[0]}`;
        var i = 1;
        while ((i < g.length)) {
          line = `${line} ${g[i]}`;
          i = i + 1;
        }
        line = `${line}]`;
        console.log(line);
        printed[k] = true;
      }
    }
  }
}

function main(): void {
  main();
}
function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
