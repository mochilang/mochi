// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:10Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/achilles-numbers.mochi

function pow10(exp: number): number {
  var n = 1;
  var i = 0;
  while ((i < exp)) {
    n = n * 10;
    i = i + 1;
  }
  return n;
}

function totient(n: number): number {
  var tot = n;
  var nn = n;
  var i = 2;
  while (((i * i) <= nn)) {
    if (((nn % i) == 0)) {
      while (((nn % i) == 0)) {
        nn = Math.trunc(nn / i);
      }
      tot = tot - Math.trunc(tot / i);
    }
    if ((i == 2)) {
      i = 1;
    }
    i = i + 2;
  }
  if ((nn > 1)) {
    tot = tot - Math.trunc(tot / nn);
  }
  return tot;
}

function getPerfectPowers(maxExp: number): void {
  let upper = pow10(maxExp);
  var i = 2;
  while (((i * i) < upper)) {
    var p = i * i;
    while (true) {
      p = p * i;
      if ((p >= upper)) {
        break;
      }
      pps[p] = true;
    }
    i = i + 1;
  }
}

function getAchilles(
  minExp: number,
  maxExp: number,
): { [key: number]: boolean } {
  let lower = pow10(minExp);
  let upper = pow10(maxExp);
  var achilles: { [key: number]: boolean } = {};
  var b = 1;
  while ((((b * b) * b) < upper)) {
    let b3 = (b * b) * b;
    var a = 1;
    while (true) {
      let p = (b3 * a) * a;
      if ((p >= upper)) {
        break;
      }
      if ((p >= lower)) {
        if ((!(Object.prototype.hasOwnProperty.call(pps, String(p))))) {
          achilles[p] = true;
        }
      }
      a = a + 1;
    }
    b = b + 1;
  }
  return achilles;
}

function sortInts(xs: number[]): number[] {
  var res: number[] = [];
  var tmp = xs;
  while ((tmp.length > 0)) {
    var min = tmp[0];
    var idx = 0;
    var i = 1;
    while ((i < tmp.length)) {
      if ((tmp[i] < min)) {
        min = tmp[i];
        idx = i;
      }
      i = i + 1;
    }
    res = res.concat([min]);
    var out: number[] = [];
    var j = 0;
    while ((j < tmp.length)) {
      if ((j != idx)) {
        out = out.concat([tmp[j]]);
      }
      j = j + 1;
    }
    tmp = out;
  }
  return res;
}

function pad(n: number, width: number): string {
  var s = String(n);
  while ((s.length < width)) {
    s = ` ${s}`;
  }
  return s;
}

function main(): void {
  let maxDigits = 15;
  getPerfectPowers(maxDigits);
  let achSet = getAchilles(1, 5);
  var ach: number[] = [];
  for (const k of Object.keys(achSet).map((k) => Number(k))) {
    ach = ach.concat([k]);
  }
  ach = sortInts(ach);
  console.log("First 50 Achilles numbers:");
  var i = 0;
  while ((i < 50)) {
    var line = "";
    var j = 0;
    while ((j < 10)) {
      line = `${line}${pad(ach[i], 4)}`;
      if ((j < 9)) {
        line = `${line} `;
      }
      i = i + 1;
      j = j + 1;
    }
    console.log(line);
  }
  console.log("\nFirst 30 strong Achilles numbers:");
  var strong: number[] = [];
  var count = 0;
  var idx = 0;
  while ((count < 30)) {
    let tot = totient(ach[idx]);
    if (Object.prototype.hasOwnProperty.call(achSet, String(tot))) {
      strong = strong.concat([ach[idx]]);
      count = count + 1;
    }
    idx = idx + 1;
  }
  i = 0;
  while ((i < 30)) {
    var line = "";
    var j = 0;
    while ((j < 10)) {
      line = `${line}${pad(strong[i], 5)}`;
      if ((j < 9)) {
        line = `${line} `;
      }
      i = i + 1;
      j = j + 1;
    }
    console.log(line);
  }
  console.log("\nNumber of Achilles numbers with:");
  let counts = [
    1,
    12,
    47,
    192,
    664,
    2242,
    7395,
    24008,
    77330,
    247449,
    788855,
    2508051,
    7960336,
    25235383,
  ];
  var d = 2;
  while ((d <= maxDigits)) {
    let c = counts[d - 2];
    console.log(`${pad(d, 2)} digits: ${String(c)}`);
    d = d + 1;
  }
}

var pps: { [key: number]: boolean };

function main(): void {
  pps = {};
  main();
}
main();
