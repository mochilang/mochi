// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:37Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/benfords-law.mochi

function floorf(x: number): number {
  return x;
}

function indexOf(s: string, ch: string): number {
  var i = 0;
  while ((i < s.length)) {
    if ((s.substring(i, i + (i + 1)) == ch)) {
      return i;
    }
    i = i + 1;
  }
  return (-1);
}

function fmtF3(x: number): string {
  var y = floorf((x * 1000) + 0.5) / 1000;
  var s = String(y);
  var dot = indexOf(s, ".");
  if ((dot == (0 - 1))) {
    s = `${s}.000`;
  } else {
    var decs = (s.length - dot) - 1;
    if ((decs > 3)) {
      s = s.substring(0, (0) + (dot + 4));
    } else {
      while ((decs < 3)) {
        s = `${s}0`;
        decs = decs + 1;
      }
    }
  }
  return s;
}

function padFloat3(x: number, width: number): string {
  var s = fmtF3(x);
  while ((s.length < width)) {
    s = ` ${s}`;
  }
  return s;
}

function fib1000(): number[] {
  var a = 0;
  var b = 1;
  var res: number[] = [];
  var i = 0;
  while ((i < 1000)) {
    res = [...res, b];
    var t = b;
    b = b + a;
    a = t;
    i = i + 1;
  }
  return res;
}

function leadingDigit(x: number): number {
  if ((x < 0)) {
    x = -x;
  }
  while ((x >= 10)) {
    x = x / 10;
  }
  while (((x > 0) && (x < 1))) {
    x = x * 10;
  }
  return x;
}

function show(nums: number[], title: string): void {
  var counts = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
  ];
  for (const n of nums) {
    let d = leadingDigit(n);
    if (((d >= 1) && (d <= 9))) {
      counts[d - 1] = counts[d - 1] + 1;
    }
  }
  let preds = [
    0.301,
    0.176,
    0.125,
    0.097,
    0.079,
    0.067,
    0.058,
    0.051,
    0.046,
  ];
  let total = nums.length;
  console.log(title);
  console.log("Digit  Observed  Predicted");
  var i = 0;
  while ((i < 9)) {
    let obs = (counts[i]) / total;
    var line = `  ${String(i + 1)}  ${padFloat3(obs, 9)}  ${
      padFloat3(preds[i], 8)
    }`;
    console.log(line);
    i = i + 1;
  }
}

function main(): void {
  return show(fib1000(), "First 1000 Fibonacci numbers");
}

function main(): void {
  main();
}
main();
