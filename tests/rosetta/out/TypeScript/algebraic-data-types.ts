// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:12:11Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/algebraic-data-types.mochi

function node(cl: string, le: any, aa: number, ri: any): Record<string, any> {
  return {
    "cl": cl,
    "le": le,
    "aa": aa,
    "ri": ri,
  };
}

function treeString(t: any): string {
  if ((t == null)) {
    return "E";
  }
  let m = t;
  return `T(${m["cl"]}, ${treeString(m["le"])}, ${String(m["aa"])}, ${
    treeString(m["ri"])
  })`;
}

function balance(t: any): any {
  if ((t == null)) {
    return t;
  }
  let m = t;
  if ((m["cl"] != "B")) {
    return t;
  }
  let le = m["le"];
  let ri = m["ri"];
  if ((le != null)) {
    let leMap = le;
    if ((leMap["cl"] == "R")) {
      let lele = leMap["le"];
      if ((lele != null)) {
        let leleMap = lele;
        if ((leleMap["cl"] == "R")) {
          return node(
            "R",
            node("B", leleMap["le"], leleMap["aa"], leleMap["ri"]),
            leMap["aa"],
            node("B", leMap["ri"], m["aa"], ri),
          );
        }
      }
      let leri = leMap["ri"];
      if ((leri != null)) {
        let leriMap = leri;
        if ((leriMap["cl"] == "R")) {
          return node(
            "R",
            node("B", leMap["le"], leMap["aa"], leriMap["le"]),
            leriMap["aa"],
            node("B", leriMap["ri"], m["aa"], ri),
          );
        }
      }
    }
  }
  if ((ri != null)) {
    let riMap = ri;
    if ((riMap["cl"] == "R")) {
      let rile = riMap["le"];
      if ((rile != null)) {
        let rileMap = rile;
        if ((rileMap["cl"] == "R")) {
          return node(
            "R",
            node("B", m["le"], m["aa"], rileMap["le"]),
            rileMap["aa"],
            node("B", rileMap["ri"], riMap["aa"], riMap["ri"]),
          );
        }
      }
      let riri = riMap["ri"];
      if ((riri != null)) {
        let ririMap = riri;
        if ((ririMap["cl"] == "R")) {
          return node(
            "R",
            node("B", m["le"], m["aa"], riMap["le"]),
            riMap["aa"],
            node("B", ririMap["le"], ririMap["aa"], ririMap["ri"]),
          );
        }
      }
    }
  }
  return t;
}

function ins(tr: any, x: number): any {
  if ((tr == null)) {
    return node("R", null, x, null);
  }
  if ((x < (tr as any)["aa"])) {
    return balance(
      node(
        (tr as any)["cl"],
        ins((tr as any)["le"], x),
        (tr as any)["aa"],
        (tr as any)["ri"],
      ),
    );
  }
  if ((x > (tr as any)["aa"])) {
    return balance(
      node(
        (tr as any)["cl"],
        (tr as any)["le"],
        (tr as any)["aa"],
        ins((tr as any)["ri"], x),
      ),
    );
  }
  return tr;
}

function insert(tr: any, x: number): any {
  let t = ins(tr, x);
  if ((t == null)) {
    return null;
  }
  let m = t;
  return node("B", m["le"], m["aa"], m["ri"]);
}

var i: number;
var tr: any;

function main(): void {
  tr = null;
  i = 1;
  while ((i <= 16)) {
    tr = insert(tr, i);
    i = i + 1;
  }
  console.log(treeString(tr));
}
main();
