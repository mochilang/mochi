let _inputData: string[] | null = null;
function _input(): string {
  if (_inputData === null) {
    const fs = require("fs");
    const d = fs.readFileSync(0, "utf8");
    _inputData = d.split(/\r?\n/);
  }
  const v = _inputData.shift();
  return v === undefined ? "" : v;
}

var _nowSeed = 0;
var _nowSeeded = false;
{
  const s =
    typeof Deno !== "undefined"
      ? Deno.env.get("MOCHI_NOW_SEED")
      : process.env.MOCHI_NOW_SEED || "";
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}

// Generated by Mochi compiler v0.10.30 on 2025-07-18T18:07:51Z
// Source: /workspace/mochi/tests/rosetta/x/Mochi/15-puzzle-game.mochi

function randMove(): number {
  return _now() % 4;
}

function isSolved(): boolean {
  var i = 0;
  while (i < 16) {
    if (board[i] != solved[i]) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

function isValidMove(m: number): Record<string, any> {
  if (m == 0) {
    return {
      idx: empty - 4,
      ok: empty / 4 > 0,
    };
  }
  if (m == 1) {
    return {
      idx: empty + 4,
      ok: empty / 4 < 3,
    };
  }
  if (m == 2) {
    return {
      idx: empty + 1,
      ok: empty % 4 < 3,
    };
  }
  if (m == 3) {
    return {
      idx: empty - 1,
      ok: empty % 4 > 0,
    };
  }
  return {
    idx: 0,
    ok: false,
  };
}

function doMove(m: number): boolean {
  let r = isValidMove(m);
  if (!r["ok"]) {
    return false;
  }
  let i = empty;
  let j = Math.trunc(Number(r["idx"]));
  let tmp = board[i];
  board[i] = board[j];
  board[j] = tmp;
  empty = j;
  moves = moves + 1;
  return true;
}

function shuffle(n: number): void {
  var i = 0;
  while (i < n || isSolved()) {
    if (doMove(randMove())) {
      i = i + 1;
    }
  }
}

function printBoard(): void {
  var line = "";
  var i = 0;
  while (i < 16) {
    let val = board[i];
    if (val == 0) {
      line = `${line}  .`;
    } else {
      let s = String(val);
      if (val < 10) {
        line = `${line}  ${s}`;
      } else {
        line = `${line} ${s}`;
      }
    }
    if (i % 4 == 3) {
      console.log(line);
      line = "";
    }
    i = i + 1;
  }
}

function playOneMove(): void {
  while (true) {
    console.log(`Enter move #${String(moves + 1)} (U, D, L, R, or Q): `);
    let s = _input();
    if (s == "") {
      continue;
    }
    let c = s.slice(0, 1);
    var m = 0;
    if (c == "U" || c == "u") {
      m = 0;
    } else if (c == "D" || c == "d") {
      m = 1;
    } else if (c == "R" || c == "r") {
      m = 2;
    } else if (c == "L" || c == "l") {
      m = 3;
    } else if (c == "Q" || c == "q") {
      console.log(`Quiting after ${String(moves)} moves.`);
      quit = true;
      return undefined;
    } else {
      console.log(`Please enter "U", "D", "L", or "R" to move the empty cell
up, down, left, or right. You can also enter "Q" to quit.
Upper or lowercase is accepted and only the first non-blank
character is important (i.e. you may enter "up" if you like).`);
      continue;
    }
    if (!doMove(m)) {
      console.log("That is not a valid move at the moment.");
      continue;
    }
    return undefined;
  }
}

function play(): void {
  console.log("Starting board:");
  while (!quit && isSolved() == false) {
    console.log("");
    printBoard();
    playOneMove();
  }
  return isSolved()
    ? console.log(`You solved the puzzle in ${String(moves)} moves.`)
    : undefined;
}

function main(): void {
  shuffle(50);
  return play();
}

var board: number[];
var empty: number;
var moves: number;
var quit: boolean;
let solved: number[];

board = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0];
solved = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0];
empty = 15;
moves = 0;
quit = false;
main();
