// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:28Z
List<String> fields(String s) {
  List<String> words = [];
  var cur = '';
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch == ' ' || ch == '\n' || ch == '  ') {
      if (cur.length > 0) {
        words = List.from(words)..add(cur);
        cur = '';
      }
    }
    else {
      cur = (cur as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  if (cur.length > 0) {
    words = List.from(words)..add(cur);
  }
  return words;
}

String padRight(String s, int width) {
  var out = s;
  var i = s.length;
  while ((i as num) < width) {
    out = out + ' ';
    i = (i as num) + 1;
  }
  return out;
}

String join(List<String> xs, String sep) {
  var res = '';
  num i = 0;
  while ((i as num) < xs.length) {
    if ((i as num) > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = (i as num) + 1;
  }
  return res;
}

List<String> validate(List<String> commands, List<String> words, List<int> mins) {
  List<String> results = [];
  if (words.length == 0) {
    return results;
  }
  num wi = 0;
  while ((wi as num) < words.length) {
    var w = words[wi];
    var found = false;
    var wlen = w.length;
    num ci = 0;
    while ((ci as num) < commands.length) {
      var cmd = commands[ci];
      if (mins[ci] != 0 && (wlen as num) >= mins[ci] && (wlen as num) <= cmd.length) {
        var c = upper(cmd);
        var ww = upper(w);
        if (c.toString().substring(0, wlen) == ww) {
          results = List.from(results)..add(c);
          found = true;
          break;
        }
      }
      ci = (ci as num) + 1;
    }
    if (!found != null) {
      results = List.from(results)..add('*error*');
    }
    wi = (wi as num) + 1;
  }
  return results;
}

void _main() {
  var table = 'Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy ' + 'COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ' + 'NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ' + ' Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ' + 'MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ' + 'READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ' + 'RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ';
  var commands = fields(table);
  List<int> mins = [];
  num i = 0;
  while ((i as num) < commands.length) {
    num count = 0;
    num j = 0;
    var cmd = commands[i];
    while ((j as num) < cmd.length) {
      var ch = cmd.toString().substring(j, (j as num) + 1);
      if (ch.toString().compareTo('A'.toString()) >= 0 && ch.toString().compareTo('Z'.toString()) <= 0) {
        count = (count as num) + 1;
      }
      j = (j as num) + 1;
    }
    mins = List.from(mins)..add(count);
    i = (i as num) + 1;
  }
  var sentence = 'riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin';
  var words = fields(sentence);
  var results = validate(commands, words, mins);
  var out1 = 'user words:  ';
  num k = 0;
  while ((k as num) < words.length) {
    out1 = out1 + padRight(words[k], results[k].length) + ' ';
    k = (k as num) + 1;
  }
  print(out1);
  print('full words:  ' + join(results, ' '));
}

void main() {
  _main();
}
