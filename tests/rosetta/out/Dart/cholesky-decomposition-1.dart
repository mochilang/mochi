// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:45Z
double sqrtApprox(double x) {
  var guess = x;
  var i = 0;
  while (i.toString().compareTo(20.toString()) < 0) {
    guess = (((guess as num) + (x / (guess as num) as num)) as num) / 2;
    i = (i as num) + 1;
  }
  return guess;
}

Map<String, any> makeSym(int order, List<double> elements) {
  return {'order': order, 'ele': elements};
}

List<List<double>> unpackSym(Map<String, any> m) {
  var n = (m as Map)['order'];
  var ele = (m as Map)['ele'];
  List<List<double>> mat = [];
  var idx = 0;
  var r = 0;
  while (r.toString().compareTo(n.toString()) < 0) {
    List<double> row = [];
    var c = 0;
    while (c.toString().compareTo(r.toString()) <= 0) {
      row = List.from(row)..add(ele[idx]);
      idx = (idx as num) + 1;
      c = (c as num) + 1;
    }
    while (c.toString().compareTo(n.toString()) < 0) {
      row = List.from(row)..add(0);
      c = (c as num) + 1;
    }
    mat = List.from(mat)..add(row);
    r = (r as num) + 1;
  }
  r = 0;
  while (r.toString().compareTo(n.toString()) < 0) {
    var c = (r as num) + 1;
    while (c.toString().compareTo(n.toString()) < 0) {
      mat[r][c] = mat[c][r];
      c = (c as num) + 1;
    }
    r = (r as num) + 1;
  }
  return mat;
}

void printMat(List<List<double>> m) {
  var i = 0;
  while (i.toString().compareTo(m.length.toString()) < 0) {
    var line = '';
    var j = 0;
    while (j.toString().compareTo(m[i].length.toString()) < 0) {
      line = line + m[i][j].toString();
      if (j.toString().compareTo(m[i].length - 1.toString()) < 0) {
        line = line + ' ';
      }
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 1;
  }
}

void printSym(Map<String, any> m) {
  printMat(unpackSym(m));
}

void printLower(Map<String, any> m) {
  var n = (m as Map)['order'];
  var ele = (m as Map)['ele'];
  List<List<double>> mat = [];
  var idx = 0;
  var r = 0;
  while (r.toString().compareTo(n.toString()) < 0) {
    List<double> row = [];
    var c = 0;
    while (c.toString().compareTo(r.toString()) <= 0) {
      row = List.from(row)..add(ele[idx]);
      idx = (idx as num) + 1;
      c = (c as num) + 1;
    }
    while (c.toString().compareTo(n.toString()) < 0) {
      row = List.from(row)..add(0);
      c = (c as num) + 1;
    }
    mat = List.from(mat)..add(row);
    r = (r as num) + 1;
  }
  printMat(mat);
}

Map<String, any> choleskyLower(Map<String, any> a) {
  var n = (a as Map)['order'];
  var ae = (a as Map)['ele'];
  List<double> le = [];
  var idx = 0;
  while (idx.toString().compareTo(ae.length.toString()) < 0) {
    le = List.from(le)..add(0);
    idx = (idx as num) + 1;
  }
  var row = 1;
  var col = 1;
  var dr = 0;
  var dc = 0;
  var i = 0;
  while (i.toString().compareTo(ae.length.toString()) < 0) {
    var e = ae[i];
    if (i.toString().compareTo(dr.toString()) < 0) {
      var d = (((e as num) - (le[i] as num)) as num) / (le[dc] as num);
      le[i] = d;
      var ci = col;
      var cx = dc;
      var j = (i as num) + 1;
      while (j.toString().compareTo(dr.toString()) <= 0) {
        cx = (cx as num) + (ci as num);
        ci = (ci as num) + 1;
        le[j] = (le[j] as num) + ((d as num) * (le[cx] as num) as num);
        j = (j as num) + 1;
      }
      col = (col as num) + 1;
      dc = (dc as num) + (col as num);
    }
    else {
      le[i] = sqrtApprox((e as num) - (le[i] as num));
      row = (row as num) + 1;
      dr = (dr as num) + (row as num);
      col = 1;
      dc = 0;
    }
    i = (i as num) + 1;
  }
  return {'order': n, 'ele': le};
}

void demo(Map<String, any> a) {
  print('A:');
  printSym(a);
  print('L:');
  var l = choleskyLower(a);
  printLower(l);
}

void main() {
  demo(makeSym(3, [25, 15, 18, -5, 0, 11]));
  demo(makeSym(4, [18, 22, 70, 54, 86, 174, 42, 62, 134, 106]));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
