// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:35:18Z
double sqrtApprox(double x) {
  var guess = x;
  num i = 0;
  while ((i as num) < 20) {
    guess = (((guess as num) + (x / (guess as num) as num)) as num) / 2;
    i = (i as num) + 1;
  }
  return guess;
}

Map<String, any> makeSym(int order, List<double> elements) {
  return {'order': order, 'ele': elements};
}

List<List<double>> unpackSym(Map<String, any> m) {
  var n = (m as Map)['order'];
  var ele = (m as Map)['ele'];
  List<List<double>> mat = [];
  num idx = 0;
  num r = 0;
  while ((r as num) < (n as num)) {
    List<double> row = [];
    num c = 0;
    while ((c as num) <= (r as num)) {
      row = List.from(row)..add(ele[idx]);
      idx = (idx as num) + 1;
      c = (c as num) + 1;
    }
    while ((c as num) < (n as num)) {
      row = List.from(row)..add(0);
      c = (c as num) + 1;
    }
    mat = List.from(mat)..add(row);
    r = (r as num) + 1;
  }
  r = 0;
  while ((r as num) < (n as num)) {
    var c = (r as num) + 1;
    while ((c as num) < (n as num)) {
      mat[r][c] = mat[c][r];
      c = (c as num) + 1;
    }
    r = (r as num) + 1;
  }
  return mat;
}

void printMat(List<List<double>> m) {
  num i = 0;
  while ((i as num) < m.length) {
    var line = '';
    num j = 0;
    while ((j as num) < m[i].length) {
      line = line + m[i][j].toString();
      if ((j as num) < m[i].length - 1) {
        line = line + ' ';
      }
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 1;
  }
}

void printSym(Map<String, any> m) {
  printMat(unpackSym(m));
}

void printLower(Map<String, any> m) {
  var n = (m as Map)['order'];
  var ele = (m as Map)['ele'];
  List<List<double>> mat = [];
  num idx = 0;
  num r = 0;
  while ((r as num) < (n as num)) {
    List<double> row = [];
    num c = 0;
    while ((c as num) <= (r as num)) {
      row = List.from(row)..add(ele[idx]);
      idx = (idx as num) + 1;
      c = (c as num) + 1;
    }
    while ((c as num) < (n as num)) {
      row = List.from(row)..add(0);
      c = (c as num) + 1;
    }
    mat = List.from(mat)..add(row);
    r = (r as num) + 1;
  }
  printMat(mat);
}

Map<String, any> choleskyLower(Map<String, any> a) {
  var n = (a as Map)['order'];
  var ae = (a as Map)['ele'];
  List<double> le = [];
  num idx = 0;
  while ((idx as num) < ae.length) {
    le = List.from(le)..add(0);
    idx = (idx as num) + 1;
  }
  var row = 1;
  var col = 1;
  num dr = 0;
  num dc = 0;
  num i = 0;
  while ((i as num) < ae.length) {
    var e = ae[i];
    if ((i as num) < (dr as num)) {
      var d = (((e as num) - (le[i] as num)) as num) / (le[dc] as num);
      le[i] = d;
      var ci = col;
      var cx = dc;
      var j = (i as num) + 1;
      while ((j as num) <= (dr as num)) {
        cx = (cx as num) + (ci as num);
        ci = (ci as num) + 1;
        le[j] = (le[j] as num) + ((d as num) * (le[cx] as num) as num);
        j = (j as num) + 1;
      }
      col = (col as num) + 1;
      dc = (dc as num) + (col as num);
    }
    else {
      le[i] = sqrtApprox((e as num) - (le[i] as num));
      row = (row as num) + 1;
      dr = (dr as num) + (row as num);
      col = 1;
      dc = 0;
    }
    i = (i as num) + 1;
  }
  return {'order': n, 'ele': le};
}

void demo(Map<String, any> a) {
  print('A:');
  printSym(a);
  print('L:');
  var l = choleskyLower(a);
  printLower(l);
}

void main() {
  demo(makeSym(3, [
    25,
    15,
    18,
    -5,
    0,
    11,
  ]));
  demo(makeSym(4, [
    18,
    22,
    70,
    54,
    86,
    174,
    42,
    62,
    134,
    106,
  ]));
}
