// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:38Z
import 'dart:io';
import 'dart:convert';

List<int> divisors(int n) {
  List<int> divs = [1];
  List<int> divs2 = [];
  var i = 2;
  while (i * i <= n) {
    if (n % i == 0) {
      var j = int.parse((n / i));
      divs = List.from(divs)..add(i);
      if (i != j) {
        divs2 = List.from(divs2)..add(j);
      }
    }
    i = i + 1;
  }
  var j = divs2.length - 1;
  while (j >= 0) {
    divs = List.from(divs)..add(divs2[j]);
    j = j - 1;
  }
  return divs;
}

int sum(List<int> xs) {
  var tot = 0;
  for (var v in xs) {
    tot = tot + v;
  }
  return tot;
}

String sumStr(List<int> xs) {
  var s = '';
  var i = 0;
  while (i < xs.length) {
    s = s + xs[i].toString() + ' + ';
    i = i + 1;
  }
  return s.toString().substring(0, s.length - 3);
}

String pad2(int n) {
  var s = n.toString();
  if (s.length < 2) {
    return ' ' + s;
  }
  return s;
}

String pad5(int n) {
  var s = n.toString();
  while (s.length < 5) {
    s = ' ' + s;
  }
  return s;
}

int abundantOdd(int searchFrom, int countFrom, int countTo, bool printOne) {
  var count = countFrom;
  var n = searchFrom;
  while (count.toString().compareTo(countTo.toString()) < 0) {
    var divs = divisors(n);
    var tot = _sum(divs);
    if (tot > n) {
      count = (count as num) + 1;
      if (printOne && count.toString().compareTo(countTo.toString()) < 0) {
        n = n + 2;
        continue;
      }
      var s = sumStr(divs);
      if (!printOne) {
        print(pad2(count) + '. ' + pad5(n) + ' < ' + s + ' = ' + tot.toString());
      }
      else {
        print(n.toString() + ' < ' + s + ' = ' + tot.toString());
      }
    }
    n = n + 2;
  }
  return n;
}

void _main() {
  var max = 25;
  print('The first ' + max.toString() + ' abundant odd numbers are:');
  var n = abundantOdd(1, 0, max, false);
  print('\nThe one thousandth abundant odd number is:');
  abundantOdd(n, max, 1000, true);
  print('\nThe first abundant odd number above one billion is:');
  abundantOdd(1000000001, 0, 1, true);
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
