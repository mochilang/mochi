// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:03Z
import 'dart:io';
import 'dart:convert';

class Pixel {
  int R;
  int G;
  int B;
  Pixel(this.R, this.G, this.B);
}

Pixel pixelFromRgb(int c) {
  var r = (int.parse((c / 65536))) % 256;
  var g = (int.parse((c / 256))) % 256;
  var b = c % 256;
  return Pixel(r, g, b);
}

int rgbFromPixel(Pixel p) {
  return p.R * 65536 + p.G * 256 + p.B;
}

class Bitmap {
  int cols;
  int rows;
  List<List<Pixel>> px;
  Bitmap(this.cols, this.rows, this.px);
}

Bitmap NewBitmap(int x, int y) {
  List<List<Pixel>> data = [];
  var row = 0;
  while (row < y) {
    List<Pixel> r = [];
    var col = 0;
    while (col < x) {
      r = List.from(r)..add(Pixel(0, 0, 0));
      col = col + 1;
    }
    data = List.from(data)..add(r);
    row = row + 1;
  }
  return Bitmap(x, y, data);
}

void FillRgb(Bitmap b, int c) {
  var y = 0;
  var p = pixelFromRgb(c);
  while (y < b.rows) {
    var x = 0;
    while (x < b.cols) {
      var px = b.px;
      var row = px[y];
      row[x] = p;
      px[y] = row;
      b.px = px;
      x = x + 1;
    }
    y = y + 1;
  }
}

bool SetPxRgb(Bitmap b, int x, int y, int c) {
  if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
    return false;
  }
  var px = b.px;
  var row = px[y];
  row[x] = pixelFromRgb(c);
  px[y] = row;
  b.px = px;
  return true;
}

int nextRand(int seed) {
  return (seed * 1664525 + 1013904223) % 2147483648;
}

void _main() {
  var bm = NewBitmap(400, 300);
  FillRgb(bm, 12615744);
  var seed = DateTime.now().microsecondsSinceEpoch;
  var i = 0;
  while (i < 2000) {
    seed = nextRand(seed);
    var x = seed % 400;
    seed = nextRand(seed);
    var y = seed % 300;
    SetPxRgb(bm, x, y, 8405024);
    i = i + 1;
  }
  var x = 0;
  while (x < 400) {
    var y = 240;
    while (y < 245) {
      SetPxRgb(bm, x, y, 8405024);
      y = y + 1;
    }
    y = 260;
    while (y < 265) {
      SetPxRgb(bm, x, y, 8405024);
      y = y + 1;
    }
    x = x + 1;
  }
  var y = 0;
  while (y < 300) {
    var x = 80;
    while (x < 85) {
      SetPxRgb(bm, x, y, 8405024);
      x = x + 1;
    }
    x = 95;
    while (x < 100) {
      SetPxRgb(bm, x, y, 8405024);
      x = x + 1;
    }
    y = y + 1;
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
