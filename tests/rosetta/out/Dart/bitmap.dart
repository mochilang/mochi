// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:28Z
class Pixel {
  int R;
  int G;
  int B;
  Pixel(this.R, this.G, this.B);
}

Pixel pixelFromRgb(int c) {
  var r = (int.parse((c / 65536))) % 256;
  var g = (int.parse((c / 256))) % 256;
  var b = c % 256;
  return Pixel(r, g, b);
}

int rgbFromPixel(Pixel p) {
  return p.R * 65536 + p.G * 256 + p.B;
}

class Bitmap {
  int cols;
  int rows;
  List<List<Pixel>> px;
  Bitmap(this.cols, this.rows, this.px);
}

Bitmap NewBitmap(int x, int y) {
  List<List<Pixel>> data = [];
  var row = 0;
  while (row.toString().compareTo(y.toString()) < 0) {
    List<Pixel> r = [];
    var col = 0;
    while (col.toString().compareTo(x.toString()) < 0) {
      r = List.from(r)..add(Pixel(0, 0, 0));
      col = (col as num) + 1;
    }
    data = List.from(data)..add(r);
    row = (row as num) + 1;
  }
  return Bitmap(x, y, data);
}

Map<String, int> Extent(Bitmap b) {
  return {'cols': b.cols, 'rows': b.rows};
}

void Fill(Bitmap b, Pixel p) {
  var y = 0;
  while (y.toString().compareTo(b.rows.toString()) < 0) {
    var x = 0;
    while (x.toString().compareTo(b.cols.toString()) < 0) {
      var px = b.px;
      var row = px[y];
      row[x] = p;
      px[y] = row;
      b.px = px;
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
}

void FillRgb(Bitmap b, int c) {
  Fill(b, pixelFromRgb(c));
}

bool SetPx(Bitmap b, int x, int y, Pixel p) {
  if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
    return false;
  }
  var px = b.px;
  var row = px[y];
  row[x] = p;
  px[y] = row;
  b.px = px;
  return true;
}

bool SetPxRgb(Bitmap b, int x, int y, int c) {
  return SetPx(b, x, y, pixelFromRgb(c));
}

Map<String, any> GetPx(Bitmap b, int x, int y) {
  if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
    return {'ok': false};
  }
  var row = b.px[y];
  return {'ok': true, 'pixel': row[x]};
}

Map<String, any> GetPxRgb(Bitmap b, int x, int y) {
  var r = GetPx(b, x, y);
  if (!r['ok'] != null) {
    return {'ok': false};
  }
  return {'ok': true, 'rgb': rgbFromPixel(r['pixel'])};
}

int ppmSize(Bitmap b) {
  var header = 'P6
# Creator: Rosetta Code http://rosettacode.org/
' + b.cols.toString() + ' ' + b.rows.toString() + '
255
';
  return header.length + 3 * b.cols * b.rows;
}

String pixelStr(Pixel p) {
  return '{' + p.R.toString() + ' ' + p.G.toString() + ' ' + p.B.toString() + '}';
}

void main() {
  var bm = NewBitmap(300, 240);
  FillRgb(bm, 16711680);
  SetPxRgb(bm, 10, 20, 255);
  SetPxRgb(bm, 20, 30, 0);
  SetPxRgb(bm, 30, 40, 1056816);
  var c1 = GetPx(bm, 0, 0);
  var c2 = GetPx(bm, 10, 20);
  var c3 = GetPx(bm, 30, 40);
  print('Image size: ' + bm['cols'].toString() + ' × ' + bm['rows'].toString());
  print(ppmSize(bm).toString() + ' bytes when encoded as PPM.');
  if (c1['ok'] != null) {
    print('Pixel at (0,0) is ' + pixelStr(c1['pixel']));
  }
  if (c2['ok'] != null) {
    print('Pixel at (10,20) is ' + pixelStr(c2['pixel']));
  }
  if (c3['ok'] != null) {
    var p = c3['pixel'];
    var r16 = (p['R'] as num) * 257;
    var g16 = (p['G'] as num) * 257;
    var b16 = (p['B'] as num) * 257;
    print('Pixel at (30,40) has R=' + r16.toString() + ', G=' + g16.toString() + ', B=' + b16.toString());
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
