// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:38Z
class Pixel {
  int R;
  int G;
  int B;
  Pixel(this.R, this.G, this.B);
}

Pixel pixelFromRgb(int c) {
  var r = (int.parse((c ~/ 65536))) % 256;
  var g = (int.parse((c ~/ 256))) % 256;
  var b = c % 256;
  return Pixel(r, g, b);
}

int rgbFromPixel(Pixel p) {
  return p.R * 65536 + p.G * 256 + p.B;
}

class Bitmap {
  int cols;
  int rows;
  List<List<Pixel>> px;
  Bitmap(this.cols, this.rows, this.px);
}

Bitmap NewBitmap(int x, int y) {
  List<List<Pixel>> data = [];
  num row = 0;
  while ((row as num) < y) {
    List<Pixel> r = [];
    num col = 0;
    while ((col as num) < x) {
      r = List.from(r)..add(Pixel(0, 0, 0));
      col = (col as num) + 1;
    }
    data = List.from(data)..add(r);
    row = (row as num) + 1;
  }
  return Bitmap(x, y, data);
}

Map<String, int> Extent(Bitmap b) {
  return {'cols': b.cols, 'rows': b.rows};
}

void Fill(Bitmap b, Pixel p) {
  num y = 0;
  while ((y as num) < b.rows) {
    num x = 0;
    while ((x as num) < b.cols) {
      var px = b.px;
      var row = px[y];
      row[x] = p;
      px[y] = row;
      b.px = px;
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
}

void FillRgb(Bitmap b, int c) {
  Fill(b, pixelFromRgb(c));
}

bool SetPx(Bitmap b, int x, int y, Pixel p) {
  if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
    return false;
  }
  var px = b.px;
  var row = px[y];
  row[x] = p;
  px[y] = row;
  b.px = px;
  return true;
}

bool SetPxRgb(Bitmap b, int x, int y, int c) {
  return SetPx(b, x, y, pixelFromRgb(c));
}

Map<String, any> GetPx(Bitmap b, int x, int y) {
  if (x < 0 || x >= b.cols || y < 0 || y >= b.rows) {
    return {'ok': false};
  }
  var row = b.px[y];
  return {
    'ok': true,
    'pixel': row[x],
  };
}

Map<String, any> GetPxRgb(Bitmap b, int x, int y) {
  var r = GetPx(b, x, y);
  if (!r['ok'] != null) {
    return {'ok': false};
  }
  return {
    'ok': true,
    'rgb': rgbFromPixel(r['pixel']),
  };
}

int ppmSize(Bitmap b) {
  var header = 'P6\n# Creator: Rosetta Code http://rosettacode.org/\n' + b.cols.toString() + ' ' + b.rows.toString() + '\n255\n';
  return header.length + 3 * b.cols * b.rows;
}

String pixelStr(Pixel p) {
  return '{' + p.R.toString() + ' ' + p.G.toString() + ' ' + p.B.toString() + '}';
}

void _main() {
  var bm = NewBitmap(300, 240);
  FillRgb(bm, 16711680);
  SetPxRgb(bm, 10, 20, 255);
  SetPxRgb(bm, 20, 30, 0);
  SetPxRgb(bm, 30, 40, 1056816);
  var c1 = GetPx(bm, 0, 0);
  var c2 = GetPx(bm, 10, 20);
  var c3 = GetPx(bm, 30, 40);
  print('Image size: ' + bm['cols'].toString() + ' Ã— ' + bm['rows'].toString());
  print(ppmSize(bm).toString() + ' bytes when encoded as PPM.');
  if (c1['ok'] != null) {
    print('Pixel at (0,0) is ' + pixelStr(c1['pixel']));
  }
  if (c2['ok'] != null) {
    print('Pixel at (10,20) is ' + pixelStr(c2['pixel']));
  }
  if (c3['ok'] != null) {
    var p = c3['pixel'];
    var r16 = (p['R'] as num) * 257;
    var g16 = (p['G'] as num) * 257;
    var b16 = (p['B'] as num) * 257;
    print('Pixel at (30,40) has R=' + r16.toString() + ', G=' + g16.toString() + ', B=' + b16.toString());
  }
}

void main() {
  _main();
}
