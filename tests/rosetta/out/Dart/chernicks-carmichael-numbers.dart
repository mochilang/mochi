// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:35:16Z
bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (((d as num) * (d as num) as num) <= n) {
    if (n % (d as num) == 0) {
      return false;
    }
    d = (d as num) + 2;
    if (n % (d as num) == 0) {
      return false;
    }
    d = (d as num) + 4;
  }
  return true;
}

List<int> bigTrim(List<int> a) {
  var n = a.length;
  while ((n as num) > 1 && a[(n as num) - 1] == 0) {
    a = a.sublist(0, (n as num) - 1);
    n = (n as num) - 1;
  }
  return a;
}

List<int> bigFromInt(int x) {
  if (x == 0) {
    return [0];
  }
  List<int> digits = [];
  var n = x;
  while ((n as num) > 0) {
    digits = List.from(digits)..add((n as num) % 10);
    n = (n as num) / 10;
  }
  return digits;
}

List<int> bigMulSmall(List<int> a, int m) {
  if (m == 0) {
    return [0];
  }
  List<int> res = [];
  num carry = 0;
  num i = 0;
  while ((i as num) < a.length) {
    var prod = a[i] * m + (carry as num);
    res = List.from(res)..add((prod as num) % 10);
    carry = (prod as num) / 10;
    i = (i as num) + 1;
  }
  while ((carry as num) > 0) {
    res = List.from(res)..add((carry as num) % 10);
    carry = (carry as num) / 10;
  }
  return bigTrim(res);
}

String bigToString(List<int> a) {
  var s = '';
  var i = a.length - 1;
  while ((i as num) >= 0) {
    s = s + a[i].toString();
    i = (i as num) - 1;
  }
  return s;
}

int pow2(int k) {
  var r = 1;
  num i = 0;
  while ((i as num) < k) {
    r = (r as num) * 2;
    i = (i as num) + 1;
  }
  return r;
}

List<int> ccFactors(int n, int m) {
  var p = 6 * m + 1;
  if (!isPrime(p)) {
    return [];
  }
  var prod = bigFromInt(p);
  p = 12 * m + 1;
  if (!isPrime(p)) {
    return [];
  }
  prod = bigMulSmall(prod, p);
  var i = 1;
  while ((i as num) <= n - 2) {
    p = (pow2(i) * 9 * m) + 1;
    if (!isPrime(p)) {
      return [];
    }
    prod = bigMulSmall(prod, p);
    i = (i as num) + 1;
  }
  return prod;
}

void ccNumbers(int start, int end) {
  var n = start;
  while ((n as num) <= end) {
    var m = 1;
    if ((n as num) > 4) {
      m = pow2((n as num) - 4);
    }
    while (true) {
      var num = ccFactors(n, m);
      if (num.length > 0) {
        print('a(' + n.toString() + ') = ' + bigToString(num));
        break;
      }
      if ((n as num) <= 4) {
        m = (m as num) + 1;
      }
      else {
        m = (m as num) + pow2((n as num) - 4);
      }
    }
    n = (n as num) + 1;
  }
}

void main() {
  ccNumbers(3, 9);
}
