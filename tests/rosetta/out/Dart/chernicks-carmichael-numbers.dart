// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:20Z
import 'dart:io';
import 'dart:convert';

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

List<int> bigTrim(List<int> a) {
  var n = a.length;
  while (n > 1 && a[n - 1] == 0) {
    a = a.sublist(0, n - 1);
    n = n - 1;
  }
  return a;
}

List<int> bigFromInt(int x) {
  if (x == 0) {
    return [0];
  }
  List<int> digits = [];
  var n = x;
  while (n > 0) {
    digits = List.from(digits)..add(n % 10);
    n = n / 10;
  }
  return digits;
}

List<int> bigMulSmall(List<int> a, int m) {
  if (m == 0) {
    return [0];
  }
  List<int> res = [];
  var carry = 0;
  var i = 0;
  while (i < a.length) {
    var prod = a[i] * m + carry;
    res = List.from(res)..add(prod % 10);
    carry = prod / 10;
    i = i + 1;
  }
  while (carry > 0) {
    res = List.from(res)..add(carry % 10);
    carry = carry / 10;
  }
  return bigTrim(res);
}

String bigToString(List<int> a) {
  var s = '';
  var i = a.length - 1;
  while (i >= 0) {
    s = s + a[i].toString();
    i = i - 1;
  }
  return s;
}

int pow2(int k) {
  var r = 1;
  var i = 0;
  while (i < k) {
    r = r * 2;
    i = i + 1;
  }
  return r;
}

List<int> ccFactors(int n, int m) {
  var p = 6 * m + 1;
  if (!isPrime(p)) {
    return [];
  }
  var prod = bigFromInt(p);
  p = 12 * m + 1;
  if (!isPrime(p)) {
    return [];
  }
  prod = bigMulSmall(prod, p);
  var i = 1;
  while (i <= n - 2) {
    p = (pow2(i) * 9 * m) + 1;
    if (!isPrime(p)) {
      return [];
    }
    prod = bigMulSmall(prod, p);
    i = i + 1;
  }
  return prod;
}

void ccNumbers(int start, int end) {
  var n = start;
  while (n <= end) {
    var m = 1;
    if (n > 4) {
      m = pow2(n - 4);
    }
    while (true) {
      var num = ccFactors(n, m);
      if (num.length > 0) {
        print('a(' + n.toString() + ') = ' + bigToString(num));
        break;
      }
      if (n <= 4) {
        m = m + 1;
      }
      else {
        m = m + pow2(n - 4);
      }
    }
    n = n + 1;
  }
}

void main() {
  ccNumbers(3, 9);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
