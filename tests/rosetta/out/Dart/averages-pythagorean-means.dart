// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:20Z
double powf(double base, int exp) {
  var result = 1;
  var i = 0;
  while (i.toString().compareTo(exp.toString()) < 0) {
    result = (result as num) * base;
    i = (i as num) + 1;
  }
  return result;
}

double nthRoot(double x, int n) {
  var low = 0;
  var high = x;
  var i = 0;
  while (i.toString().compareTo(60.toString()) < 0) {
    var mid = (((low as num) + (high as num)) as num) / 2;
    if (powf(mid, n) > x) {
      high = mid;
    }
    else {
      low = mid;
    }
    i = (i as num) + 1;
  }
  return low;
}

void main() {
  var sum = 0;
  var sumRecip = 0;
  var prod = 1;
  var n = 1;
  while (n.toString().compareTo(10.toString()) <= 0) {
    var f = double.parse(n);
    sum = (sum as num) + (f as num);
    sumRecip = (sumRecip as num) + (1 / (f as num) as num);
    prod = (prod as num) * (f as num);
    n = (n as num) + 1;
  }
  var count = 10;
  var a = (sum as num) / (count as num);
  var g = nthRoot(prod, 10);
  var h = (count as num) / (sumRecip as num);
  print('A: ' + a.toString() + ' G: ' + g.toString() + ' H: ' + h.toString());
  print('A >= G >= H: ' + a.toString().compareTo(g.toString()) >= 0 && g.toString().compareTo(h.toString()) >= 0.toString());
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
