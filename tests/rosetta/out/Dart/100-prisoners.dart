// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:20Z
List<int> shuffle(List<int> xs) {
  var arr = xs;
  var i = 99;
  while ((i as num) > 0) {
    var j = DateTime.now().microsecondsSinceEpoch % (((i as num) + 1) as num);
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = (i as num) - 1;
  }
  return arr;
}

void doTrials(int trials, int np, String strategy) {
  num pardoned = 0;
  num t = 0;
  while ((t as num) < trials) {
    List<int> drawers = [];
    num i = 0;
    while ((i as num) < 100) {
      drawers = List.from(drawers)..add(i);
      i = (i as num) + 1;
    }
    drawers = shuffle(drawers);
    num p = 0;
    var success = true;
    while ((p as num) < np) {
      var found = false;
      if (strategy == 'optimal') {
        var prev = p;
        num d = 0;
        while ((d as num) < 50) {
          var _this = drawers[prev];
          if (_this == p) {
            found = true;
            break;
          }
          prev = _this;
          d = (d as num) + 1;
        }
      }
      else {
        List<bool> opened = [];
        num k = 0;
        while ((k as num) < 100) {
          opened = List.from(opened)..add(false);
          k = (k as num) + 1;
        }
        num d = 0;
        while ((d as num) < 50) {
          var n = DateTime.now().microsecondsSinceEpoch % 100;
          while (opened[n] != null) {
            n = DateTime.now().microsecondsSinceEpoch % 100;
          }
          opened[n] = true;
          if (drawers[n] == p) {
            found = true;
            break;
          }
          d = (d as num) + 1;
        }
      }
      if (!found != null) {
        success = false;
        break;
      }
      p = (p as num) + 1;
    }
    if (success != null) {
      pardoned = (pardoned as num) + 1;
    }
    t = (t as num) + 1;
  }
  var rf = (double.parse(pardoned)) / (double.parse(trials)) * 100;
  print('  strategy = ' + strategy + '  pardoned = ' + pardoned.toString() + ' relative frequency = ' + rf.toString() + '%');
}

void _main() {
  var trials = 1000;
  for (var np in [10, 100]) {
    print('Results from ' + trials.toString() + ' trials with ' + np.toString() + ' prisoners:\n');
    for (var strat in ['random', 'optimal']) {
      doTrials(trials, np, strat);
    }
  }
}

void main() {
  _main();
}
