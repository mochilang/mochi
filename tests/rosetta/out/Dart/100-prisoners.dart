// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:32Z
import 'dart:io';
import 'dart:convert';

List<int> shuffle(List<int> xs) {
  var arr = xs;
  var i = 99;
  while (i > 0) {
    var j = DateTime.now().microsecondsSinceEpoch % (i + 1);
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
    i = i - 1;
  }
  return arr;
}

void doTrials(int trials, int np, String strategy) {
  var pardoned = 0;
  var t = 0;
  while (t < trials) {
    List<int> drawers = [];
    var i = 0;
    while (i < 100) {
      drawers = List.from(drawers)..add(i);
      i = i + 1;
    }
    drawers = shuffle(drawers);
    var p = 0;
    var success = true;
    while (p < np) {
      var found = false;
      if (strategy == 'optimal') {
        var prev = p;
        var d = 0;
        while (d < 50) {
          var _this = drawers[prev];
          if (_this == p) {
            found = true;
            break;
          }
          prev = _this;
          d = d + 1;
        }
      }
      else {
        List<bool> opened = [];
        var k = 0;
        while (k < 100) {
          opened = List.from(opened)..add(false);
          k = k + 1;
        }
        var d = 0;
        while (d < 50) {
          var n = DateTime.now().microsecondsSinceEpoch % 100;
          while (opened[n] != null) {
            n = DateTime.now().microsecondsSinceEpoch % 100;
          }
          opened[n] = true;
          if (drawers[n] == p) {
            found = true;
            break;
          }
          d = d + 1;
        }
      }
      if (!found != null) {
        success = false;
        break;
      }
      p = p + 1;
    }
    if (success != null) {
      pardoned = pardoned + 1;
    }
    t = t + 1;
  }
  var rf = (double.parse(pardoned)) / (double.parse(trials)) * 100;
  print('  strategy = ' + strategy + '  pardoned = ' + pardoned.toString() + ' relative frequency = ' + rf.toString() + '%');
}

void _main() {
  var trials = 1000;
  for (var np in [10, 100]) {
    print('Results from ' + trials.toString() + ' trials with ' + np.toString() + ' prisoners:\n');
    for (var strat in ['random', 'optimal']) {
      doTrials(trials, np, strat);
    }
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
