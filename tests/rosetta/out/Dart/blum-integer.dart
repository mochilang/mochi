// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:05Z
import 'dart:io';
import 'dart:convert';

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

int firstPrimeFactor(int n) {
  if (n == 1) {
    return 1;
  }
  if (n % 3 == 0) {
    return 3;
  }
  if (n % 5 == 0) {
    return 5;
  }
  var inc = [4, 2, 4, 2, 4, 6, 2, 6];
  var k = 7;
  var i = 0;
  while (k * k <= n) {
    if (n % k == 0) {
      return k;
    }
    k = k + inc[i];
    i = (i + 1) % inc.length;
  }
  return n;
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

String padLeft(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

String formatFloat(double f, int prec) {
  var s = f.toString();
  var idx = indexOf(s, '.');
  if (idx < 0) {
    return s;
  }
  var need = idx + 1 + prec;
  if (s.length > need) {
    return s.toString().substring(0, need);
  }
  return s;
}

void _main() {
  List<int> blum = [];
  var counts = [0, 0, 0, 0];
  var digits = [1, 3, 7, 9];
  var i = 1;
  var bc = 0;
  while (true) {
    var p = firstPrimeFactor(i);
    if (p % 4 == 3) {
      var q = int.parse((i / p));
      if (q != p && q % 4 == 3 && isPrime(q)) {
        if (bc < 50) {
          blum = List.from(blum)..add(i);
        }
        var d = i % 10;
        if (d == 1) {
          counts[0] = counts[0] + 1;
        }
        else 
        if (d == 3) {
          counts[1] = counts[1] + 1;
        }
        else 
        if (d == 7) {
          counts[2] = counts[2] + 1;
        }
        else 
        if (d == 9) {
          counts[3] = counts[3] + 1;
        }
        bc = bc + 1;
        if (bc == 50) {
          print('First 50 Blum integers:');
          var idx = 0;
          while (idx < 50) {
            var line = '';
            var j = 0;
            while (j < 10) {
              line = line + padLeft(blum[idx], 3) + ' ';
              idx = idx + 1;
              j = j + 1;
            }
            print(line.toString().substring(0, line.length - 1));
          }
          break;
        }
      }
    }
    if (i % 5 == 3) {
      i = i + 4;
    }
    else {
      i = i + 2;
    }
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
