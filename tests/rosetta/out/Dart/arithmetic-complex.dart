// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:49Z
import 'dart:io';
import 'dart:convert';

class Complex {
  double re;
  double im;
  Complex(this.re, this.im);
}

Complex add(Complex a, Complex b) {
  return Complex(a.re + b.re, a.im + b.im);
}

Complex mul(Complex a, Complex b) {
  return Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);
}

Complex neg(Complex a) {
  return Complex(-a.re, -a.im);
}

Complex inv(Complex a) {
  var denom = a.re * a.re + a.im * a.im;
  return Complex(a.re / (denom as num), -a.im / (denom as num));
}

Complex conj(Complex a) {
  return Complex(a.re, -a.im);
}

String cstr(Complex a) {
  var s = '(' + a.re.toString();
  if (a.im >= 0) {
    s = s + '+' + a.im.toString() + 'i)';
  }
  else {
    s = s + a.im.toString() + 'i)';
  }
  return s;
}

var a = Complex(1, 1);

var b = Complex(3.14159, 1.25);

void main() {
  print('a:       ' + cstr(a));
  print('b:       ' + cstr(b));
  print('a + b:   ' + cstr(add(a, b)));
  print('a * b:   ' + cstr(mul(a, b)));
  print('-a:      ' + cstr(neg(a)));
  print('1 / a:   ' + cstr(inv(a)));
  print('a̅:       ' + cstr(conj(a)));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
