// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:12Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var arr1 = [2, 7, 1, 8, 2];

Map<int, int> counts1 = {};

List<int> keys1 = [];

var i = 0;

var max1 = 0;

List<int> modes1 = [];

var arr2 = [2, 7, 1, 8, 2, 8];

Map<int, int> counts2 = {};

List<int> keys2 = [];

var max2 = 0;

List<int> modes2 = [];

void main() {
  while (i < arr1.length) {
    var v = arr1[i];
    if (_in(v, counts1)) {
      counts1[v] = ((counts1 as Map)[v] + 1 as int);
    }
    else {
      counts1[v] = (1 as int);
      keys1 = List.from(keys1)..add(v);
    }
    i = (i + 1 as int);
  }
  i = (0 as int);
  while (i < keys1.length) {
    var k = keys1[i];
    var c = (counts1 as Map)[k];
    if (c > max1) {
      max1 = (c as int);
    }
    i = (i + 1 as int);
  }
  i = (0 as int);
  while (i < keys1.length) {
    var k = keys1[i];
    if ((counts1 as Map)[k] == max1) {
      modes1 = List.from(modes1)..add(k);
    }
    i = (i + 1 as int);
  }
  print(modes1.toString());
  i = (0 as int);
  while (i < arr2.length) {
    var v = arr2[i];
    if (_in(v, counts2)) {
      counts2[v] = ((counts2 as Map)[v] + 1 as int);
    }
    else {
      counts2[v] = (1 as int);
      keys2 = List.from(keys2)..add(v);
    }
    i = (i + 1 as int);
  }
  i = (0 as int);
  while (i < keys2.length) {
    var k = keys2[i];
    var c = (counts2 as Map)[k];
    if (c > max2) {
      max2 = (c as int);
    }
    i = (i + 1 as int);
  }
  i = (0 as int);
  while (i < keys2.length) {
    var k = keys2[i];
    if ((counts2 as Map)[k] == max2) {
      modes2 = List.from(modes2)..add(k);
    }
    i = (i + 1 as int);
  }
  print(modes2.toString());
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
