// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:46Z
double sqrtApprox(double x) {
  var guess = x;
  var i = 0;
  while (i.toString().compareTo(20.toString()) < 0) {
    guess = (((guess as num) + (x / (guess as num) as num)) as num) / 2;
    i = (i as num) + 1;
  }
  return guess;
}

List<List<double>> cholesky(List<List<double>> a) {
  var n = a.length;
  List<List<double>> l = [];
  var i = 0;
  while (i.toString().compareTo(n.toString()) < 0) {
    List<double> row = [];
    var j = 0;
    while (j.toString().compareTo(n.toString()) < 0) {
      row = List.from(row)..add(0);
      j = (j as num) + 1;
    }
    l = List.from(l)..add(row);
    i = (i as num) + 1;
  }
  i = 0;
  while (i.toString().compareTo(n.toString()) < 0) {
    var j = 0;
    while (j.toString().compareTo(i.toString()) <= 0) {
      var sum = a[i][j];
      var k = 0;
      while (k.toString().compareTo(j.toString()) < 0) {
        sum = (sum as num) - ((l[i][k] as num) * (l[j][k] as num) as num);
        k = (k as num) + 1;
      }
      if (i == j) {
        l[i][j] = sqrtApprox(sum);
      }
      else {
        l[i][j] = (sum as num) / (l[j][j] as num);
      }
      j = (j as num) + 1;
    }
    i = (i as num) + 1;
  }
  return l;
}

void printMat(List<List<double>> m) {
  var i = 0;
  while (i.toString().compareTo(m.length.toString()) < 0) {
    var line = '';
    var j = 0;
    while (j.toString().compareTo(m[i].length.toString()) < 0) {
      line = line + m[i][j].toString();
      if (j.toString().compareTo(m[i].length - 1.toString()) < 0) {
        line = line + ' ';
      }
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 1;
  }
}

void demo(List<List<double>> a) {
  print('A:');
  printMat(a);
  var l = cholesky(a);
  print('L:');
  printMat(l);
}

void main() {
  demo([[25, 15, -5], [15, 18, 0], [-5, 0, 11]]);
  demo([[18, 22, 54, 42], [22, 70, 86, 62], [54, 86, 174, 134], [42, 62, 134, 106]]);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
