// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:18Z
var PI = 3.141592653589793;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while (n.toString().compareTo(8.toString()) <= 0) {
    var denom = double.parse((((2 * (n as num)) as num) * (((2 * (n as num) as num) + 1) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double cosApprox(double x) {
  var term = 1;
  var sum = 1;
  var n = 1;
  while (n.toString().compareTo(8.toString()) <= 0) {
    var denom = double.parse(((((2 * (n as num) as num) - 1) as num) * ((2 * (n as num)) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double atanApprox(double x) {
  if (x > 1) {
    return PI / 2 - x / (x * x + 0.28);
  }
  if (x < (-1)) {
    return -PI / 2 - x / (x * x + 0.28);
  }
  return x / (1 + 0.28 * x * x);
}

double atan2Approx(double y, double x) {
  if (x > 0) {
    return atanApprox(y / x);
  }
  if (x < 0) {
    if (y >= 0) {
      return atanApprox(y / x) + PI;
    }
    return atanApprox(y / x) - PI;
  }
  if (y > 0) {
    return PI / 2;
  }
  if (y < 0) {
    return -PI / 2;
  }
  return 0;
}

int digit(String ch) {
  var digits = '0123456789';
  var i = 0;
  while (i.toString().compareTo(digits.length.toString()) < 0) {
    if (digits.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return 0;
}

int parseTwo(String s, int idx) {
  return digit(s.toString().substring(idx, idx + 1)) * 10 + digit(s.toString().substring(idx + 1, idx + 2));
}

double parseSec(String s) {
  var h = parseTwo(s, 0);
  var m = parseTwo(s, 3);
  var sec = parseTwo(s, 6);
  return double.parse(((((((h as num) * 60 as num) + (m as num)) as num) * 60 as num) + (sec as num)));
}

String pad(int n) {
  if (n < 10) {
    return '0' + n.toString();
  }
  return n.toString();
}

String meanTime(List<String> times) {
  var ssum = 0;
  var csum = 0;
  var i = 0;
  while (i.toString().compareTo(times.length.toString()) < 0) {
    var sec = parseSec(times[i]);
    var ang = (((sec as num) * 2 as num) * PI as num) / 86400;
    ssum = (ssum as num) + sinApprox(ang);
    csum = (csum as num) + cosApprox(ang);
    i = (i as num) + 1;
  }
  var theta = atan2Approx(ssum, csum);
  var frac = (theta as num) / (2 * PI);
  while (frac.toString().compareTo(0.toString()) < 0) {
    frac = (frac as num) + 1;
  }
  var total = (frac as num) * 86400;
  var si = int.parse(total);
  var h = int.parse(((si as num) / 3600));
  var m = int.parse(((((si as num) % 3600) as num) / 60));
  var s = int.parse(((si as num) % 60));
  return pad(h) + ':' + pad(m) + ':' + pad(s);
}

void main() {
  var inputs = ['23:00:17', '23:40:20', '00:12:45', '00:17:19'];
  print(meanTime(inputs));
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
