// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:13Z
var PI = 3.141592653589793;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while ((n as num) <= 8) {
    var denom = double.parse((((2 * (n as num)) as num) * (((2 * (n as num) as num) + 1) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double cosApprox(double x) {
  var term = 1;
  var sum = 1;
  var n = 1;
  while ((n as num) <= 8) {
    var denom = double.parse(((((2 * (n as num) as num) - 1) as num) * ((2 * (n as num)) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double atanApprox(double x) {
  if (x > 1) {
    return PI / 2 - x / (x * x + 0.28);
  }
  if (x < (-1)) {
    return -(PI as num) / 2 - x / (x * x + 0.28);
  }
  return x / (1 + 0.28 * x * x);
}

double atan2Approx(double y, double x) {
  if (x > 0) {
    return atanApprox(y / x);
  }
  if (x < 0) {
    if (y >= 0) {
      return atanApprox(y / x) + PI;
    }
    return atanApprox(y / x) - PI;
  }
  if (y > 0) {
    return PI / 2;
  }
  if (y < 0) {
    return -(PI as num) / 2;
  }
  return 0;
}

int digit(String ch) {
  var digits = '0123456789';
  num i = 0;
  while ((i as num) < digits.length) {
    if (digits.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return 0;
}

int parseTwo(String s, int idx) {
  return digit(s.toString().substring(idx, idx + 1)) * 10 + digit(s.toString().substring(idx + 1, idx + 2));
}

double parseSec(String s) {
  var h = parseTwo(s, 0);
  var m = parseTwo(s, 3);
  var sec = parseTwo(s, 6);
  return double.parse(((((((h as num) * 60 as num) + (m as num)) as num) * 60 as num) + (sec as num)));
}

String pad(int n) {
  if (n < 10) {
    return '0' + n.toString();
  }
  return n.toString();
}

String meanTime(List<String> times) {
  num ssum = 0;
  num csum = 0;
  num i = 0;
  while ((i as num) < times.length) {
    var sec = parseSec(times[i]);
    var ang = (((sec as num) * 2 as num) * PI as num) / 86400;
    ssum = (ssum as num) + sinApprox(ang);
    csum = (csum as num) + cosApprox(ang);
    i = (i as num) + 1;
  }
  var theta = atan2Approx(ssum, csum);
  var frac = (theta as num) / (2 * PI);
  while ((frac as num) < 0) {
    frac = (frac as num) + 1;
  }
  var total = (frac as num) * 86400;
  var si = int.parse(total);
  var h = int.parse(((si as num) / 3600));
  var m = int.parse(((((si as num) % 3600) as num) / 60));
  var s = int.parse(((si as num) % 60));
  return pad(h) + ':' + pad(m) + ':' + pad(s);
}

void _main() {
  var inputs = [
    '23:00:17',
    '23:40:20',
    '00:12:45',
    '00:17:19',
  ];
  print(meanTime(inputs));
}

void main() {
  _main();
}
