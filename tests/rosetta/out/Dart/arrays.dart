// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:16Z
String listStr(List<int> xs) {
  var s = '[';
  var i = 0;
  while (i.toString().compareTo(xs.length.toString()) < 0) {
    s = s + xs[i].toString();
    if ((i as num) + 1.toString().compareTo(xs.length.toString()) < 0) {
      s = s + ' ';
    }
    i = (i as num) + 1;
  }
  s = s + ']';
  return s;
}

var a = [0, 0, 0, 0, 0];

var s = a.sublist(0, 4);

var cap_s = 5;

void main() {
  print('len(a) = ' + a.length.toString());
  print('a = ' + listStr(a));
  a[0] = (3 as int);
  print('a = ' + listStr(a));
  print('a[0] = ' + a[0].toString());
  print('s = ' + listStr(s));
  print('len(s) = ' + s.length.toString() + '  cap(s) = ' + cap_s.toString());
  s = a.sublist(0, 5);
  print('s = ' + listStr(s));
  a[0] = (22 as int);
  s[0] = (22 as int);
  print('a = ' + listStr(a));
  print('s = ' + listStr(s));
  s = List.from(s)..add(4);
  s = List.from(s)..add(5);
  s = List.from(s)..add(6);
  cap_s = (10 as int);
  print('s = ' + listStr(s));
  print('len(s) = ' + s.length.toString() + '  cap(s) = ' + cap_s.toString());
  a[4] = (-1 as int);
  print('a = ' + listStr(a));
  print('s = ' + listStr(s));
  s = [];
  for (var i = 0; i < 8; i++) {
    s = List.from(s)..add(0);
  }
  cap_s = (8 as int);
  print('s = ' + listStr(s));
  print('len(s) = ' + s.length.toString() + '  cap(s) = ' + cap_s.toString());
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
