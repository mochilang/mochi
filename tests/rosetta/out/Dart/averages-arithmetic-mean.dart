// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:18Z
Map<String, any> mean(List<double> v) {
  if (v.length == 0) {
    return {'ok': false};
  }
  var sum = 0;
  var i = 0;
  while (i.toString().compareTo(v.length.toString()) < 0) {
    sum = (sum as num) + v[i];
    i = (i as num) + 1;
  }
  return {'ok': true, 'mean': (sum as num) / (double.parse(v.length))};
}

void main() {
  var sets = [[], [3, 1, 4, 1, 5, 9], [1e+20, 3, 1, 4, 1, 5, 9, -1e+20], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0.11], [10, 20, 30, 40, 50, -100, 4.7, -1100]];
  var _iter0 = sets;
  for (var v in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print('Vector: ' + v.toString());
    var r = mean(v);
    if (r['ok'] != null) {
      print('Mean of ' + v.length.toString() + ' numbers is ' + r['mean'].toString());
    }
    else {
      print('Mean undefined');
    }
    print('');
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
