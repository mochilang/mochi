// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:58:59Z
import 'dart:io';
import 'dart:convert';

var adfgvx = 'ADFGVX';

var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

String shuffleStr(String s) {
  List<String> arr = [];
  var i = 0;
  while (i < s.length) {
    arr = arr + ([s[i]] as num);
    i = i + 1;
  }
  var j = arr.length - 1;
  while (j > 0) {
    var k = DateTime.now().microsecondsSinceEpoch % (j + 1);
    var tmp = arr[j];
    arr[j] = arr[k];
    arr[k] = tmp;
    j = j - 1;
  }
  var out = '';
  i = 0;
  while (i < arr.length) {
    out = out + arr[i];
    i = i + 1;
  }
  return out;
}

List<String> createPolybius() {
  var shuffled = shuffleStr(alphabet);
  print('6 x 6 Polybius square:
');
  print('  | A D F G V X');
  print('---------------');
  List<String> p = [];
  var i = 0;
  while (i < 6) {
    var row = ((shuffled is String) ? shuffled.substring(i * 6, (i + 1) * 6) : (shuffled as List).sublist(i * 6, (i + 1) * 6));
    p = p + ([row] as num);
    var line = adfgvx[i] + ' | ';
    var j = 0;
    while (j < 6) {
      line = line + row[j] + ' ';
      j = j + 1;
    }
    print(line);
    i = i + 1;
  }
  return p;
}

String createKey(int n) {
  if (n < 7 || n > 12) {
    print('Key should be within 7 and 12 letters long.');
  }
  var pool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  var key = '';
  var i = 0;
  while (i < n) {
    var idx = DateTime.now().microsecondsSinceEpoch % pool.length;
    key = key + pool[idx];
    pool = ((pool is String) ? pool.substring(0, idx) : (pool as List).sublist(0, idx)) + ((pool is String) ? pool.substring(idx + 1, pool.length) : (pool as List).sublist(idx + 1, pool.length));
    i = i + 1;
  }
  print('
The key is ' + key);
  return key;
}

List<int> orderKey(String key) {
  var pairs = [];
  var i = 0;
  while (i < key.length) {
    pairs = pairs + ([[key[i], i]] as num);
    i = i + 1;
  }
  var n = pairs.length;
  var m = 0;
  while (m < n) {
    var j = 0;
    while (j < n - 1) {
      if (pairs[j][0] > pairs[j + 1][0]) {
        var tmp = pairs[j];
        pairs[j] = pairs[j + 1];
        pairs[j + 1] = tmp;
      }
      j = j + 1;
    }
    m = m + 1;
  }
  var res = [];
  i = 0;
  while (i < n) {
    res = res + ([int.parse(pairs[i][1])] as num);
    i = i + 1;
  }
  return res;
}

String encrypt(List<String> polybius, String key, String plainText) {
  var temp = '';
  var i = 0;
  while (i < plainText.length) {
    var r = 0;
    while (r < 6) {
      var c = 0;
      while (c < 6) {
        if (polybius[r][c] == plainText[i]) {
          temp = temp + adfgvx[r] + adfgvx[c];
        }
        c = c + 1;
      }
      r = r + 1;
    }
    i = i + 1;
  }
  var colLen = temp.length / key.length;
  if (temp.length % key.length > 0) {
    colLen = colLen + 1;
  }
  List<List<String>> table = [];
  var rIdx = 0;
  while (rIdx < colLen) {
    List<String> row = [];
    var j = 0;
    while (j < key.length) {
      row = row + ([''] as num);
      j = j + 1;
    }
    table = table + ([row] as num);
    rIdx = rIdx + 1;
  }
  var idx = 0;
  while (idx < temp.length) {
    var row = idx / key.length;
    var col = idx % key.length;
    table[row][col] = ((temp is String) ? temp.substring(idx, idx + 1) : (temp as List).sublist(idx, idx + 1));
    idx = idx + 1;
  }
  var order = orderKey(key);
  List<String> cols = [];
  var ci = 0;
  while (ci < key.length) {
    var colStr = '';
    var ri = 0;
    while (ri < colLen) {
      colStr = colStr + table[ri][order[ci]];
      ri = ri + 1;
    }
    cols = cols + ([colStr] as num);
    ci = ci + 1;
  }
  var result = '';
  ci = 0;
  while (ci < cols.length) {
    result = result + cols[ci];
    if (ci < cols.length - 1) {
      result = result + ' ';
    }
    ci = ci + 1;
  }
  return result;
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s[i] == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

String decrypt(List<String> polybius, String key, String cipherText) {
  List<String> colStrs = [];
  var start = 0;
  var i = 0;
  while (i <= cipherText.length) {
    if (i == cipherText.length || cipherText[i] == ' ') {
      colStrs = colStrs + ([cipherText.substring(start, i)] as num);
      start = i + 1;
    }
    i = i + 1;
  }
  var maxColLen = 0;
  i = 0;
  while (i < colStrs.length) {
    if (colStrs[i].length > maxColLen) {
      maxColLen = colStrs[i].length;
    }
    i = i + 1;
  }
  List<List<String>> cols = [];
  i = 0;
  while (i < colStrs.length) {
    var s = colStrs[i];
    List<String> ls = [];
    var j = 0;
    while (j < s.length) {
      ls = ls + ([s[j]] as num);
      j = j + 1;
    }
    if (s.length < maxColLen) {
      List<String> pad = [];
      var k = 0;
      while (k < maxColLen) {
        if (k < ls.length) {
          pad = pad + ([ls[k]] as num);
        }
        else {
          pad = pad + ([''] as num);
        }
        k = k + 1;
      }
      cols = cols + ([pad] as num);
    }
    else {
      cols = cols + ([ls] as num);
    }
    i = i + 1;
  }
  List<List<String>> table = [];
  var r = 0;
  while (r < maxColLen) {
    List<String> row = [];
    var c = 0;
    while (c < key.length) {
      row = row + ([''] as num);
      c = c + 1;
    }
    table = table + ([row] as num);
    r = r + 1;
  }
  var order = orderKey(key);
  r = 0;
  while (r < maxColLen) {
    var c = 0;
    while (c < key.length) {
      table[r][order[c]] = cols[c][r];
      c = c + 1;
    }
    r = r + 1;
  }
  var temp = '';
  r = 0;
  while (r < table.length) {
    var j = 0;
    while (j < table[r].length) {
      temp = temp + table[r][j];
      j = j + 1;
    }
    r = r + 1;
  }
  var plainText = '';
  var idx = 0;
  while (idx < temp.length) {
    var rIdx = indexOf(adfgvx, ((temp is String) ? temp.substring(idx, idx + 1) : (temp as List).sublist(idx, idx + 1)));
    var cIdx = indexOf(adfgvx, ((temp is String) ? temp.substring(idx + 1, idx + 2) : (temp as List).sublist(idx + 1, idx + 2)));
    plainText = plainText + polybius[rIdx][cIdx];
    idx = idx + 2;
  }
  return plainText;
}

void main() {
  var plainText = 'ATTACKAT1200AM';
  var polybius = createPolybius();
  var key = createKey(9);
  print('
Plaintext : ' + plainText);
  var cipherText = encrypt(polybius, key, plainText);
  print('
Encrypted : ' + cipherText);
  var plainText2 = decrypt(polybius, key, cipherText);
  print('
Decrypted : ' + plainText2);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
