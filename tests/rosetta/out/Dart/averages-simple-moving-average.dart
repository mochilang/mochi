// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:21Z
int indexOf(String s, String ch) {
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    if (s.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

String fmt3(double x) {
  var y = double.parse(int.parse(((x * 1000) + 0.5))) / 1000;
  var s = y.toString();
  var dot = indexOf(s, '.');
  if (dot == 0 - 1) {
    s = s + '.000';
  }
  else {
    var decs = (s.length - (dot as num) as num) - 1;
    if (decs.toString().compareTo(3.toString()) > 0) {
      s = s.toString().substring(0, (dot as num) + 4);
    }
    else {
      while (decs.toString().compareTo(3.toString()) < 0) {
        s = s + '0';
        decs = (decs as num) + 1;
      }
    }
  }
  return s;
}

String pad(String s, int width) {
  var out = s;
  while (out.length < width) {
    out = ' ' + out;
  }
  return out;
}

List<double> smaSeries(List<double> xs, int period) {
  List<double> res = [];
  var sum = 0;
  var i = 0;
  while (i.toString().compareTo(xs.length.toString()) < 0) {
    sum = (sum as num) + xs[i];
    if (i.toString().compareTo(period.toString()) >= 0) {
      sum = (sum as num) - xs[(i as num) - period];
    }
    var denom = (i as num) + 1;
    if (denom.toString().compareTo(period.toString()) > 0) {
      denom = period;
    }
    res = List.from(res)..add((sum as num) / (double.parse(denom)));
    i = (i as num) + 1;
  }
  return res;
}

void main() {
  var xs = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1];
  var sma3 = smaSeries(xs, 3);
  var sma5 = smaSeries(xs, 5);
  print('x       sma3   sma5');
  var i = 0;
  while (i.toString().compareTo(xs.length.toString()) < 0) {
    var line = pad(fmt3(xs[i]), 5) + '  ' + pad(fmt3(sma3[i]), 5) + '  ' + pad(fmt3(sma5[i]), 5);
    print(line);
    i = (i as num) + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
