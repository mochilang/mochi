// Generated by Mochi compiler v0.10.28 on 2025-07-18T11:43:17Z
bool validComb(int a, int b, int c, int d, int e, int f, int g) {
  var square1 = a + b;
  var square2 = b + c + d;
  var square3 = d + e + f;
  var square4 = f + g;
  return square1 == square2 && square2 == square3 && square3 == square4;
}

bool isUnique(int a, int b, int c, int d, int e, int f, int g) {
  var nums = [
    a,
    b,
    c,
    d,
    e,
    f,
    g,
  ];
  var i = 0;
  while (i < nums.length) {
    var j = i + 1;
    while (j < nums.length) {
      if (nums[i] == nums[j]) {
        return false;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return true;
}

Map<String, dynamic> getCombs(int low, int high, bool unique) {
  var valid = [];
  var count = 0;
  for (var b = low; b < (high + 1); b++) {
    for (var c = low; c < (high + 1); c++) {
      for (var d = low; d < (high + 1); d++) {
        var s = b + c + d;
        for (var e = low; e < (high + 1); e++) {
          for (var f = low; f < (high + 1); f++) {
            var a = s - b;
            var g = s - f;
            if (a < low || a > high) {
              continue;
            }
            if (g < low || g > high) {
              continue;
            }
            if (d + e + f != s) {
              continue;
            }
            if (f + g != s) {
              continue;
            }
            if (!unique || isUnique(a, b, c, d, e, f, g)) {
              valid = List.from(valid)..add([
                a,
                b,
                c,
                d,
                e,
                f,
                g,
              ]);
              count = count + 1;
            }
          }
        }
      }
    }
  }
  return {'count': count, 'list': valid};
}

var r1 = getCombs(1, 7, true);

var r2 = getCombs(3, 9, true);

var r3 = getCombs(0, 9, false);

void main() {
  print((r1 as Map)['count'].toString() + ' unique solutions in 1 to 7');
  print((r1 as Map)['list']);
  print((r2 as Map)['count'].toString() + ' unique solutions in 3 to 9');
  print((r2 as Map)['list']);
  print((r3 as Map)['count'].toString() + ' non-unique solutions in 0 to 9');
}
