// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:33Z
import 'dart:io';
import 'dart:convert';

bool validComb(int a, int b, int c, int d, int e, int f, int g) {
  var square1 = a + b;
  var square2 = b + c + d;
  var square3 = d + e + f;
  var square4 = f + g;
  return square1 == square2 && square2 == square3 && square3 == square4;
}

bool isUnique(int a, int b, int c, int d, int e, int f, int g) {
  var nums = [a, b, c, d, e, f, g];
  var i = 0;
  while (i < nums.length) {
    var j = i + 1;
    while (j < nums.length) {
      if (nums[i] == nums[j]) {
        return false;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return true;
}

Map<String, any> getCombs(int low, int high, bool unique) {
  var valid = [];
  var count = 0;
  for (var b = low; b < (high + 1); b++) {
    for (var c = low; c < (high + 1); c++) {
      for (var d = low; d < (high + 1); d++) {
        var s = b + c + d;
        for (var e = low; e < (high + 1); e++) {
          for (var f = low; f < (high + 1); f++) {
            var a = s - b;
            var g = s - f;
            if (a < low || a > high) {
              continue;
            }
            if (g < low || g > high) {
              continue;
            }
            if (d + e + f != s) {
              continue;
            }
            if (f + g != s) {
              continue;
            }
            if (!unique || isUnique(a, b, c, d, e, f, g)) {
              valid = List.from(valid)..add([a, b, c, d, e, f, g]);
              count = (count as num) + 1;
            }
          }
        }
      }
    }
  }
  return {'count': count, 'list': valid};
}

var r1 = getCombs(1, 7, true);

var r2 = getCombs(3, 9, true);

var r3 = getCombs(0, 9, false);

void main() {
  print((r1 as Map)['count'].toString() + ' unique solutions in 1 to 7');
  print((r1 as Map)['list']);
  print((r2 as Map)['count'].toString() + ' unique solutions in 3 to 9');
  print((r2 as Map)['list']);
  print((r3 as Map)['count'].toString() + ' non-unique solutions in 0 to 9');
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
