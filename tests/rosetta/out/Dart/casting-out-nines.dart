// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:35:03Z
int parseIntBase(String s, int base) {
  var digits = '0123456789abcdefghijklmnopqrstuvwxyz';
  num n = 0;
  num i = 0;
  while ((i as num) < s.length) {
    num j = 0;
    num v = 0;
    while ((j as num) < digits.length) {
      if (digits.toString().substring(j, (j as num) + 1) == s.substring(i, (i as num) + 1)) {
        v = j;
        break;
      }
      j = (j as num) + 1;
    }
    n = ((n as num) * base as num) + (v as num);
    i = (i as num) + 1;
  }
  return n;
}

String intToBase(int n, int base) {
  var digits = '0123456789abcdefghijklmnopqrstuvwxyz';
  if (n == 0) {
    return '0';
  }
  var out = '';
  var v = n;
  while ((v as num) > 0) {
    var d = (v as num) % base;
    out = (((digits is String) ? digits.substring(d, (d as num) + 1) : (digits as List).sublist(d, (d as num) + 1)) as num) + (out as num);
    v = (v as num) / base;
  }
  return out;
}

List<String> subset(int base, String begin, String end) {
  var b = parseIntBase(begin, base);
  var e = parseIntBase(end, base);
  List<String> out = [];
  var k = b;
  while ((k as num) <= (e as num)) {
    var ks = intToBase(k, base);
    var mod = base - 1;
    var r1 = parseIntBase(ks, base) % (mod as num);
    var r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % (mod as num);
    if (r1 == r2) {
      out = List.from(out)..add(ks);
    }
    k = (k as num) + 1;
  }
  return out;
}

var testCases = [
  {
  'base': 10,
  'begin': '1',
  'end': '100',
  'kaprekar': [
  '1',
  '9',
  '45',
  '55',
  '99',
],
},
  {
  'base': 17,
  'begin': '10',
  'end': 'gg',
  'kaprekar': ['3d', 'd4', 'gg'],
},
];

num idx = 0;

void main() {
  while (idx < testCases.length) {
    var tc = testCases[idx];
    print('\nTest case base = ' + tc['base'].toString() + ', begin = ' + tc['begin'] + ', end = ' + tc['end'] + ':');
    var s = subset(tc['base'], tc['begin'], tc['end']);
    print('Subset:  ' + s.toString());
    print('Kaprekar:' + tc['kaprekar'].toString());
    num sx = 0;
    var valid = true;
    num i = 0;
    while ((i as num) < tc['kaprekar'].length) {
      var k = tc['kaprekar'][i];
      var found = false;
      while ((sx as num) < s.length) {
        if (s[sx] == k) {
          found = true;
          sx = (sx as num) + 1;
          break;
        }
        sx = (sx as num) + 1;
      }
      if (!found != null) {
        print('Fail:' + k + ' not in subset');
        valid = false;
        break;
      }
      i = (i as num) + 1;
    }
    if (valid != null) {
      print('Valid subset.');
    }
    idx = idx + 1;
  }
}
