// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:38Z
int parseIntBase(String s, int base) {
  var digits = '0123456789abcdefghijklmnopqrstuvwxyz';
  var n = 0;
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    var j = 0;
    var v = 0;
    while (j.toString().compareTo(digits.length.toString()) < 0) {
      if (digits.toString().substring(j, (j as num) + 1) == s.substring(i, (i as num) + 1)) {
        v = j;
        break;
      }
      j = (j as num) + 1;
    }
    n = ((n as num) * base as num) + (v as num);
    i = (i as num) + 1;
  }
  return n;
}

String intToBase(int n, int base) {
  var digits = '0123456789abcdefghijklmnopqrstuvwxyz';
  if (n == 0) {
    return '0';
  }
  var out = '';
  var v = n;
  while (v.toString().compareTo(0.toString()) > 0) {
    var d = (v as num) % base;
    out = (((digits is String) ? digits.substring(d, (d as num) + 1) : (digits as List).sublist(d, (d as num) + 1)) as num) + (out as num);
    v = (v as num) / base;
  }
  return out;
}

List<String> subset(int base, String begin, String end) {
  var b = parseIntBase(begin, base);
  var e = parseIntBase(end, base);
  List<String> out = [];
  var k = b;
  while (k.toString().compareTo(e.toString()) <= 0) {
    var ks = intToBase(k, base);
    var mod = base - 1;
    var r1 = parseIntBase(ks, base) % (mod as num);
    var r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % (mod as num);
    if (r1 == r2) {
      out = List.from(out)..add(ks);
    }
    k = (k as num) + 1;
  }
  return out;
}

var testCases = [{'base': 10, 'begin': '1', 'end': '100', 'kaprekar': ['1', '9', '45', '55', '99']}, {'base': 17, 'begin': '10', 'end': 'gg', 'kaprekar': ['3d', 'd4', 'gg']}];

var idx = 0;

void main() {
  while (idx < testCases.length) {
    var tc = testCases[idx];
    print('
Test case base = ' + tc['base'].toString() + ', begin = ' + tc['begin'] + ', end = ' + tc['end'] + ':');
    var s = subset(tc['base'], tc['begin'], tc['end']);
    print('Subset:  ' + s.toString());
    print('Kaprekar:' + tc['kaprekar'].toString());
    var sx = 0;
    var valid = true;
    var i = 0;
    while (i.toString().compareTo(tc['kaprekar'].length.toString()) < 0) {
      var k = tc['kaprekar'][i];
      var found = false;
      while (sx.toString().compareTo(s.length.toString()) < 0) {
        if (s[sx] == k) {
          found = true;
          sx = (sx as num) + 1;
          break;
        }
        sx = (sx as num) + 1;
      }
      if (!found != null) {
        print('Fail:' + k + ' not in subset');
        valid = false;
        break;
      }
      i = (i as num) + 1;
    }
    if (valid != null) {
      print('Valid subset.');
    }
    idx = (idx + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
