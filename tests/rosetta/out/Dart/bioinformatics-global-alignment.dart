// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:30Z
String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while ((n as num) > 0) {
    res = res + ' ';
    n = (n as num) - 1;
  }
  return res + s;
}

int indexOfFrom(String s, String ch, int start) {
  var i = start;
  while ((i as num) < s.length) {
    if (s.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

bool containsStr(String s, String sub) {
  num i = 0;
  var sl = s.length;
  var subl = sub.length;
  while ((i as num) <= ((sl as num) - (subl as num) as num)) {
    if (s.toString().substring(i, (i as num) + (subl as num)) == sub) {
      return true;
    }
    i = (i as num) + 1;
  }
  return false;
}

List<String> distinct(List<String> slist) {
  List<String> res = [];
  for (var s in slist) {
    var found = false;
    var _iter0 = res;
    for (var r in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
      if (r == s) {
        found = true;
        break;
      }
    }
    if (!found != null) {
      res = List.from(res)..add(s);
    }
  }
  return res;
}

List<List<String>> permutations(List<String> xs) {
  if (xs.length <= 1) {
    return [xs];
  }
  List<List<String>> res = [];
  num i = 0;
  while ((i as num) < xs.length) {
    List<String> rest = [];
    num j = 0;
    while ((j as num) < xs.length) {
      if (j != i) {
        rest = List.from(rest)..add(xs[j]);
      }
      j = (j as num) + 1;
    }
    var subs = permutations(rest);
    var _iter1 = subs;
    for (var p in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
      List<String> perm = [
        xs[i],
      ];
      num k = 0;
      while ((k as num) < p.length) {
        perm = List.from(perm)..add(p[k]);
        k = (k as num) + 1;
      }
      res = List.from(res)..add(perm);
    }
    i = (i as num) + 1;
  }
  return res;
}

int headTailOverlap(String s1, String s2) {
  num start = 0;
  while (true) {
    var ix = indexOfFrom(s1, s2.substring(0, 1), start);
    if (ix == 0 - 1) {
      return 0;
    }
    start = ix;
    if (s2.toString().substring(0, s1.length - (start as num)) == s1.toString().substring(start, s1.length)) {
      return s1.length - (start as num);
    }
    start = (start as num) + 1;
  }
}

List<String> deduplicate(List<String> slist) {
  var arr = distinct(slist);
  List<String> filtered = [];
  num i = 0;
  while ((i as num) < arr.length) {
    var s1 = arr[i];
    var within = false;
    num j = 0;
    while ((j as num) < arr.length) {
      if (j != i && containsStr(arr[j], s1)) {
        within = true;
        break;
      }
      j = (j as num) + 1;
    }
    if (!within != null) {
      filtered = List.from(filtered)..add(s1);
    }
    i = (i as num) + 1;
  }
  return filtered;
}

String joinAll(List<String> ss) {
  var out = '';
  for (var s in ss) {
    out = out + s;
  }
  return out;
}

String shortestCommonSuperstring(List<String> slist) {
  var ss = deduplicate(slist);
  var shortest = joinAll(ss);
  var perms = permutations(ss);
  num idx = 0;
  while ((idx as num) < perms.length) {
    var perm = perms[idx];
    var sup = perm[0];
    num i = 0;
    while ((i as num) < ss.length - 1) {
      var ov = headTailOverlap(perm[i], perm[(i as num) + 1]);
      sup = sup + perm[(i as num) + 1].toString().substring(ov, perm[(i as num) + 1].length);
      i = (i as num) + 1;
    }
    if (sup.length < shortest.length) {
      shortest = sup;
    }
    idx = (idx as num) + 1;
  }
  return shortest;
}

void printCounts(String seq) {
  num a = 0;
  num c = 0;
  num g = 0;
  num t = 0;
  num i = 0;
  while ((i as num) < seq.length) {
    var ch = seq.toString().substring(i, (i as num) + 1);
    if (ch == 'A') {
      a = (a as num) + 1;
    }
    else {
      if (ch == 'C') {
        c = (c as num) + 1;
      }
      else {
        if (ch == 'G') {
          g = (g as num) + 1;
        }
        else {
          if (ch == 'T') {
            t = (t as num) + 1;
          }
        }
      }
    }
    i = (i as num) + 1;
  }
  var total = seq.length;
  print('\nNucleotide counts for ' + seq + ':\n');
  print(padLeft('A', 10) + padLeft(a.toString(), 12));
  print(padLeft('C', 10) + padLeft(c.toString(), 12));
  print(padLeft('G', 10) + padLeft(g.toString(), 12));
  print(padLeft('T', 10) + padLeft(t.toString(), 12));
  print(padLeft('Other', 10) + padLeft((total as num) - (((((a as num) + (c as num) as num) + (g as num) as num) + (t as num)) as num).toString(), 12));
  print('  ____________________');
  print(padLeft('Total length', 14) + padLeft(total.toString(), 8));
}

void _main() {
  List<List<String>> tests = [
    [
    'TA',
    'AAG',
    'TA',
    'GAA',
    'TA',
  ],
    [
    'CATTAGGG',
    'ATTAG',
    'GGG',
    'TA',
  ],
    ['AAGAUGGA', 'GGAGCGCAUC', 'AUCGCAAUAAGGA'],
    [
    'ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT',
    'GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT',
    'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA',
    'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC',
    'AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT',
    'GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC',
    'CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT',
    'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC',
    'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC',
    'GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT',
    'TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC',
    'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA',
    'TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA',
  ],
  ];
  var _iter2 = tests;
  for (var seqs in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
    var scs = shortestCommonSuperstring(seqs);
    printCounts(scs);
  }
}

void main() {
  _main();
}
