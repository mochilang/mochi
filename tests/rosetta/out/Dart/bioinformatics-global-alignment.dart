// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:01Z
import 'dart:io';
import 'dart:convert';

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while (n > 0) {
    res = res + ' ';
    n = n - 1;
  }
  return res + s;
}

int indexOfFrom(String s, String ch, int start) {
  var i = start;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

bool containsStr(String s, String sub) {
  var i = 0;
  var sl = s.length;
  var subl = sub.length;
  while (i <= sl - subl) {
    if (s.toString().substring(i, i + subl) == sub) {
      return true;
    }
    i = i + 1;
  }
  return false;
}

List<String> distinct(List<String> slist) {
  List<String> res = [];
  for (var s in slist) {
    var found = false;
    var _iter0 = res;
    for (var r in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
      if (r == s) {
        found = true;
        break;
      }
    }
    if (!found != null) {
      res = List.from(res)..add(s);
    }
  }
  return res;
}

List<List<String>> permutations(List<String> xs) {
  if (xs.length <= 1) {
    return [xs];
  }
  List<List<String>> res = [];
  var i = 0;
  while (i < xs.length) {
    List<String> rest = [];
    var j = 0;
    while (j < xs.length) {
      if (j != i) {
        rest = List.from(rest)..add(xs[j]);
      }
      j = j + 1;
    }
    var subs = permutations(rest);
    var _iter1 = subs;
    for (var p in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
      List<String> perm = [xs[i]];
      var k = 0;
      while (k < p.length) {
        perm = List.from(perm)..add(p[k]);
        k = k + 1;
      }
      res = List.from(res)..add(perm);
    }
    i = i + 1;
  }
  return res;
}

int headTailOverlap(String s1, String s2) {
  var start = 0;
  while (true) {
    var ix = indexOfFrom(s1, s2.substring(0, 1), start);
    if (ix == 0 - 1) {
      return 0;
    }
    start = ix;
    if (s2.toString().substring(0, s1.length - start) == s1.toString().substring(start, s1.length)) {
      return s1.length - start;
    }
    start = start + 1;
  }
}

List<String> deduplicate(List<String> slist) {
  var arr = distinct(slist);
  List<String> filtered = [];
  var i = 0;
  while (i < arr.length) {
    var s1 = arr[i];
    var within = false;
    var j = 0;
    while (j < arr.length) {
      if (j != i && containsStr(arr[j], s1)) {
        within = true;
        break;
      }
      j = j + 1;
    }
    if (!within != null) {
      filtered = List.from(filtered)..add(s1);
    }
    i = i + 1;
  }
  return filtered;
}

String joinAll(List<String> ss) {
  var out = '';
  for (var s in ss) {
    out = out + s;
  }
  return out;
}

String shortestCommonSuperstring(List<String> slist) {
  var ss = deduplicate(slist);
  var shortest = joinAll(ss);
  var perms = permutations(ss);
  var idx = 0;
  while (idx < perms.length) {
    var perm = perms[idx];
    var sup = perm[0];
    var i = 0;
    while (i < ss.length - 1) {
      var ov = headTailOverlap(perm[i], perm[i + 1]);
      sup = sup + perm[i + 1].toString().substring(ov, perm[i + 1].length);
      i = i + 1;
    }
    if (sup.length < shortest.length) {
      shortest = sup;
    }
    idx = idx + 1;
  }
  return shortest;
}

void printCounts(String seq) {
  var a = 0;
  var c = 0;
  var g = 0;
  var t = 0;
  var i = 0;
  while (i < seq.length) {
    var ch = seq.toString().substring(i, i + 1);
    if (ch == 'A') {
      a = a + 1;
    }
    else {
      if (ch == 'C') {
        c = c + 1;
      }
      else {
        if (ch == 'G') {
          g = g + 1;
        }
        else {
          if (ch == 'T') {
            t = t + 1;
          }
        }
      }
    }
    i = i + 1;
  }
  var total = seq.length;
  print('\nNucleotide counts for ' + seq + ':\n');
  print(padLeft('A', 10) + padLeft(a.toString(), 12));
  print(padLeft('C', 10) + padLeft(c.toString(), 12));
  print(padLeft('G', 10) + padLeft(g.toString(), 12));
  print(padLeft('T', 10) + padLeft(t.toString(), 12));
  print(padLeft('Other', 10) + padLeft(total - (a + c + g + t).toString(), 12));
  print('  ____________________');
  print(padLeft('Total length', 14) + padLeft(total.toString(), 8));
}

void _main() {
  List<List<String>> tests = [['TA', 'AAG', 'TA', 'GAA', 'TA'], ['CATTAGGG', 'ATTAG', 'GGG', 'TA'], ['AAGAUGGA', 'GGAGCGCAUC', 'AUCGCAAUAAGGA'], ['ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT', 'GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT', 'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA', 'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC', 'AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT', 'GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC', 'CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT', 'TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC', 'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC', 'GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT', 'TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC', 'CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA', 'TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA']];
  var _iter2 = tests;
  for (var seqs in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
    var scs = shortestCommonSuperstring(seqs);
    printCounts(scs);
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
