// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:04Z
import 'dart:io';
import 'dart:convert';

int parseIntStr(String str) {
  var i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  var n = 0;
  var digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)];
    i = i + 1;
  }
  if (neg != null) {
    n = -n;
  }
  return n;
}

List<String> splitWs(String s) {
  List<String> parts = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    var ch = s.toString().substring(i, i + 1);
    if (ch == ' ' || ch == '\n' || ch == '  ' || ch == '\r') {
var ppmData = 'P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n';
    }
    else {
      cur = cur + ch;
    }
    i = i + 1;
  }
  if (cur.length > 0) {
    parts = List.from(parts)..add(cur);
  }
  return parts;
}

Map<String, any> parsePpm(String data) {
  var toks = splitWs(data);
  if (toks.length < 4) {
    return {'err': true};
  }
  var magic = toks[0];
  var w = parseIntStr(toks[1]);
  var h = parseIntStr(toks[2]);
  var maxv = parseIntStr(toks[3]);
  List<int> px = [];
  var i = 4;
  while (i < toks.length) {
    px = List.from(px)..add(parseIntStr(toks[i]));
    i = i + 1;
  }
  return {'magic': magic, 'w': w, 'h': h, 'max': maxv, 'px': px};
}

var ppmData = 'P3
2 2
1
0 1 1 0 1 0 0 1 1 1 0 0
';

var img = parsePpm(ppmData);

void main() {
  print('width=' + img['w'].toString() + ' height=' + img['h'].toString());
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
