// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:42Z
Map<String, any> node(String cl, any le, int aa, any ri) {
  return {
    'cl': cl,
    'le': le,
    'aa': aa,
    'ri': ri,
  };
}

String treeString(any t) {
  if (t == null) {
    return 'E';
  }
  var m = (t as Map<String, any>);
  return 'T(' + m['cl'] + ', ' + treeString(m['le']) + ', ' + m['aa'].toString() + ', ' + treeString(m['ri']) + ')';
}

any balance(any t) {
  if (t == null) {
    return t;
  }
  var m = (t as Map<String, any>);
  if (m['cl'] != 'B') {
    return t;
  }
  var le = m['le'];
  var ri = m['ri'];
  if (le != null) {
    var leMap = (le as Map<String, any>);
    if (leMap['cl'] == 'R') {
      var lele = leMap['le'];
      if (lele != null) {
        var leleMap = (lele as Map<String, any>);
        if (leleMap['cl'] == 'R') {
          return node('R', node('B', leleMap['le'], leleMap['aa'], leleMap['ri']), leMap['aa'], node('B', leMap['ri'], m['aa'], ri));
        }
      }
      var leri = leMap['ri'];
      if (leri != null) {
        var leriMap = (leri as Map<String, any>);
        if (leriMap['cl'] == 'R') {
          return node('R', node('B', leMap['le'], leMap['aa'], leriMap['le']), leriMap['aa'], node('B', leriMap['ri'], m['aa'], ri));
        }
      }
    }
  }
  if (ri != null) {
    var riMap = (ri as Map<String, any>);
    if (riMap['cl'] == 'R') {
      var rile = riMap['le'];
      if (rile != null) {
        var rileMap = (rile as Map<String, any>);
        if (rileMap['cl'] == 'R') {
          return node('R', node('B', m['le'], m['aa'], rileMap['le']), rileMap['aa'], node('B', rileMap['ri'], riMap['aa'], riMap['ri']));
        }
      }
      var riri = riMap['ri'];
      if (riri != null) {
        var ririMap = (riri as Map<String, any>);
        if (ririMap['cl'] == 'R') {
          return node('R', node('B', m['le'], m['aa'], riMap['le']), riMap['aa'], node('B', ririMap['le'], ririMap['aa'], ririMap['ri']));
        }
      }
    }
  }
  return t;
}

any ins(any tr, int x) {
  if (tr == null) {
    return node('R', null, x, null);
  }
  if (x < (tr['aa'] as num)) {
    return balance(node(tr['cl'], ins(tr['le'], x), tr['aa'], tr['ri']));
  }
  if (x > (tr['aa'] as num)) {
    return balance(node(tr['cl'], tr['le'], tr['aa'], ins(tr['ri'], x)));
  }
  return tr;
}

any insert(any tr, int x) {
  var t = ins(tr, x);
  if (t == null) {
    return null;
  }
  var m = (t as Map<String, any>);
  return node('B', m['le'], m['aa'], m['ri']);
}

any tr = null;

var i = 1;

void main() {
  while (i <= 16) {
    tr = insert(tr, i);
    i = i + 1;
  }
  print(treeString(tr));
}
