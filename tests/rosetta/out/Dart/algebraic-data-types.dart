// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:00Z
import 'dart:io';
import 'dart:convert';

Map<String, any> node(String cl, any le, int aa, any ri) {
  return {'cl': cl, 'le': le, 'aa': aa, 'ri': ri};
}

String treeString(any t) {
  if (t == null) {
    return 'E';
  }
  var m = (t as Map<String, any>);
  return 'T(' + m['cl'] + ', ' + treeString(m['le']) + ', ' + m['aa'].toString() + ', ' + treeString(m['ri']) + ')';
}

any balance(any t) {
  if (t == null) {
    return t;
  }
  var m = (t as Map<String, any>);
  if (m['cl'] != 'B') {
    return t;
  }
  var le = m['le'];
  var ri = m['ri'];
  if (le != null) {
    var leMap = (le as Map<String, any>);
    if (leMap['cl'] == 'R') {
      var lele = leMap['le'];
      if (lele != null) {
        var leleMap = (lele as Map<String, any>);
        if (leleMap['cl'] == 'R') {
          return node('R', node('B', leleMap['le'], leleMap['aa'], leleMap['ri']), leMap['aa'], node('B', leMap['ri'], m['aa'], ri));
        }
      }
      var leri = leMap['ri'];
      if (leri != null) {
        var leriMap = (leri as Map<String, any>);
        if (leriMap['cl'] == 'R') {
          return node('R', node('B', leMap['le'], leMap['aa'], leriMap['le']), leriMap['aa'], node('B', leriMap['ri'], m['aa'], ri));
        }
      }
    }
  }
  if (ri != null) {
    var riMap = (ri as Map<String, any>);
    if (riMap['cl'] == 'R') {
      var rile = riMap['le'];
      if (rile != null) {
        var rileMap = (rile as Map<String, any>);
        if (rileMap['cl'] == 'R') {
          return node('R', node('B', m['le'], m['aa'], rileMap['le']), rileMap['aa'], node('B', rileMap['ri'], riMap['aa'], riMap['ri']));
        }
      }
      var riri = riMap['ri'];
      if (riri != null) {
        var ririMap = (riri as Map<String, any>);
        if (ririMap['cl'] == 'R') {
          return node('R', node('B', m['le'], m['aa'], riMap['le']), riMap['aa'], node('B', ririMap['le'], ririMap['aa'], ririMap['ri']));
        }
      }
    }
  }
  return t;
}

any ins(any tr, int x) {
  if (tr == null) {
    return node('R', null, x, null);
  }
  if (x < tr['aa']) {
    return balance(node(tr['cl'], ins(tr['le'], x), tr['aa'], tr['ri']));
  }
  if (x > tr['aa']) {
    return balance(node(tr['cl'], tr['le'], tr['aa'], ins(tr['ri'], x)));
  }
  return tr;
}

any insert(any tr, int x) {
  var t = ins(tr, x);
  if (t == null) {
    return null;
  }
  var m = (t as Map<String, any>);
  return node('B', m['le'], m['aa'], m['ri']);
}

any tr = null;

var i = 1;

void main() {
  while (i <= 16) {
    tr = insert(tr, i);
    i = (i + 1 as int);
  }
  print(treeString(tr));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
