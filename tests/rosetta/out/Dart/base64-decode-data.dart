// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:14Z
import 'dart:io';
import 'dart:convert';

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s[i] == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

int parseIntStr(String str) {
  var i = 0;
  var neg = false;
  if (str.length > 0 && str[0] == '-') {
    neg = true;
    i = 1;
  }
  var n = 0;
  var digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9};
  while (i < str.length) {
    n = n * 10 + digits[str[i]];
    i = i + 1;
  }
  if (neg != null) {
    n = -n;
  }
  return n;
}

int ord(String ch) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  var idx = indexOf(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = indexOf(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  if (ch.compareTo('0') >= 0 && ch.compareTo('9') <= 0) {
    return 48 + parseIntStr(ch);
  }
  if (ch == '+') {
    return 43;
  }
  if (ch == '/') {
    return 47;
  }
  if (ch == ' ') {
    return 32;
  }
  if (ch == '=') {
    return 61;
  }
  return 0;
}

String chr(int n) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  if (n >= 65 && n < 91) {
    return ((upper is String) ? upper.substring(n - 65, n - 64) : (upper as List).sublist(n - 65, n - 64));
  }
  if (n >= 97 && n < 123) {
    return ((lower is String) ? lower.substring(n - 97, n - 96) : (lower as List).sublist(n - 97, n - 96));
  }
  if (n >= 48 && n < 58) {
    var digits = '0123456789';
    return ((digits is String) ? digits.substring(n - 48, n - 47) : (digits as List).sublist(n - 48, n - 47));
  }
  if (n == 43) {
    return '+';
  }
  if (n == 47) {
    return '/';
  }
  if (n == 32) {
    return ' ';
  }
  if (n == 61) {
    return '=';
  }
  return '?';
}

String toBinary(int n, int bits) {
  var b = '';
  var val = n;
  var i = 0;
  while (i < bits) {
    b = val % 2.toString() + b;
    val = int.parse((val / 2));
    i = i + 1;
  }
  return b;
}

int binToInt(String bits) {
  var n = 0;
  var i = 0;
  while (i < bits.length) {
    n = n * 2 + parseIntStr(bits.substring(i, i + 1));
    i = i + 1;
  }
  return n;
}

String base64Encode(String text) {
  var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var bin = '';
  var _iter0 = text;
  for (var ch in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    bin = bin + toBinary(ord(ch), 8);
  }
  while (bin.length % 6 != 0) {
    bin = bin + '0';
  }
  var out = '';
  var i = 0;
  while (i < bin.length) {
    var chunk = ((bin is String) ? bin.substring(i, i + 6) : (bin as List).sublist(i, i + 6));
    var val = binToInt(chunk);
    out = out + ((alphabet is String) ? alphabet.substring(val, val + 1) : (alphabet as List).sublist(val, val + 1));
    i = i + 6;
  }
  var pad = (3 - (text.length % 3)) % 3;
  if (pad == 1) {
    out = ((out is String) ? out.substring(0, out.length - 1) : (out as List).sublist(0, out.length - 1)) + '=';
  }
  if (pad == 2) {
    out = ((out is String) ? out.substring(0, out.length - 2) : (out as List).sublist(0, out.length - 2)) + '==';
  }
  return out;
}

String base64Decode(String enc) {
  var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var bin = '';
  var i = 0;
  while (i < enc.length) {
    var ch = enc[i];
    if (ch == '=') {
      break;
    }
    var idx = indexOf(alphabet, ch);
    bin = bin + toBinary(idx, 6);
    i = i + 1;
  }
  var out = '';
  i = 0;
  while (i + 8 <= bin.length) {
    var chunk = ((bin is String) ? bin.substring(i, i + 8) : (bin as List).sublist(i, i + 8));
    var val = binToInt(chunk);
    out = out + chr(val);
    i = i + 8;
  }
  return out;
}

var msg = 'Rosetta Code Base64 decode data task';

var enc = base64Encode(msg);

var dec = base64Decode(enc);

void main() {
  print('Original : ' + msg);
  print('
Encoded  : ' + enc);
  print('
Decoded  : ' + dec);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
