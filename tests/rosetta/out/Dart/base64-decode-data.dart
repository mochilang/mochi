// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:23Z
int indexOf(String s, String ch) {
  num i = 0;
  while ((i as num) < s.length) {
    if (s[i] == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

int parseIntStr(String str) {
  num i = 0;
  var neg = false;
  if (str.length > 0 && str[0] == '-') {
    neg = true;
    i = 1;
  }
  num n = 0;
  var digits = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  };
  while ((i as num) < str.length) {
    n = ((n as num) * 10 as num) + (digits[str[i]] as num);
    i = (i as num) + 1;
  }
  if (neg != null) {
    n = -(n as num);
  }
  return n;
}

int ord(String ch) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  var idx = indexOf(upper, ch);
  if ((idx as num) >= 0) {
    return 65 + (idx as num);
  }
  idx = indexOf(lower, ch);
  if ((idx as num) >= 0) {
    return 97 + (idx as num);
  }
  if (ch.toString().compareTo('0'.toString()) >= 0 && ch.toString().compareTo('9'.toString()) <= 0) {
    return 48 + parseIntStr(ch);
  }
  if (ch == '+') {
    return 43;
  }
  if (ch == '/') {
    return 47;
  }
  if (ch == ' ') {
    return 32;
  }
  if (ch == '=') {
    return 61;
  }
  return 0;
}

String chr(int n) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  if (n >= 65 && n < 91) {
    return ((upper is String) ? upper.substring(n - 65, n - 64) : (upper as List).sublist(n - 65, n - 64));
  }
  if (n >= 97 && n < 123) {
    return ((lower is String) ? lower.substring(n - 97, n - 96) : (lower as List).sublist(n - 97, n - 96));
  }
  if (n >= 48 && n < 58) {
    var digits = '0123456789';
    return ((digits is String) ? digits.substring(n - 48, n - 47) : (digits as List).sublist(n - 48, n - 47));
  }
  if (n == 43) {
    return '+';
  }
  if (n == 47) {
    return '/';
  }
  if (n == 32) {
    return ' ';
  }
  if (n == 61) {
    return '=';
  }
  return '?';
}

String toBinary(int n, int bits) {
  var b = '';
  var val = n;
  num i = 0;
  while ((i as num) < bits) {
    b = (val as num) % 2.toString() + b;
    val = int.parse(((val as num) / 2));
    i = (i as num) + 1;
  }
  return b;
}

int binToInt(String bits) {
  num n = 0;
  num i = 0;
  while ((i as num) < bits.length) {
    n = ((n as num) * 2 as num) + parseIntStr(bits.substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  return n;
}

String base64Encode(String text) {
  var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var bin = '';
  var _iter0 = text;
  for (var ch in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    bin = bin + toBinary(ord(ch), 8);
  }
  while (bin.length % 6 != 0) {
    bin = bin + '0';
  }
  var out = '';
  num i = 0;
  while ((i as num) < bin.length) {
    var chunk = ((bin is String) ? bin.substring(i, (i as num) + 6) : (bin as List).sublist(i, (i as num) + 6));
    var val = binToInt(chunk);
    out = (out as num) + (((alphabet is String) ? alphabet.substring(val, (val as num) + 1) : (alphabet as List).sublist(val, (val as num) + 1)) as num);
    i = (i as num) + 6;
  }
  var pad = (3 - (text.length % 3)) % 3;
  if (pad == 1) {
    out = ((out is String) ? out.substring(0, out.length - 1) : (out as List).sublist(0, out.length - 1)) + '=';
  }
  if (pad == 2) {
    out = ((out is String) ? out.substring(0, out.length - 2) : (out as List).sublist(0, out.length - 2)) + '==';
  }
  return out;
}

String base64Decode(String enc) {
  var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var bin = '';
  num i = 0;
  while ((i as num) < enc.length) {
    var ch = enc[i];
    if (ch == '=') {
      break;
    }
    var idx = indexOf(alphabet, ch);
    bin = bin + toBinary(idx, 6);
    i = (i as num) + 1;
  }
  var out = '';
  i = 0;
  while (((i as num) + 8 as num) <= bin.length) {
    var chunk = ((bin is String) ? bin.substring(i, (i as num) + 8) : (bin as List).sublist(i, (i as num) + 8));
    var val = binToInt(chunk);
    out = out + chr(val);
    i = (i as num) + 8;
  }
  return out;
}

var msg = 'Rosetta Code Base64 decode data task';

var enc = base64Encode(msg);

var dec = base64Decode(enc);

void main() {
  print('Original : ' + msg);
  print('\nEncoded  : ' + enc);
  print('\nDecoded  : ' + dec);
}
