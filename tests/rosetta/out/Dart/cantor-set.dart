// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:36Z
var width = 81;

var height = 5;

List<String> lines = [];

String setChar(String s, int idx, String ch) {
  return s.toString().substring(0, idx) + ch + s.toString().substring(idx + 1, s.length);
}

List<Map<String, int>> stack = [{'start': 0, 'len': width, 'index': 1}];

void main() {
  for (var i = 0; i < height; i++) {
    var row = '';
    var j = 0;
    while (j.toString().compareTo(width.toString()) < 0) {
      row = row + '*';
      j = (j as num) + 1;
    }
    lines = List.from(lines)..add(row);
  }
  while (stack.length > 0) {
    var frame = stack[stack.length - 1];
    stack = stack.sublist(0, stack.length - 1);
    var start = frame['start'];
    var lenSeg = frame['len'];
    var index = frame['index'];
    var seg = int.parse(((lenSeg as num) / 3));
    if (seg == 0) {
      continue;
    }
    var i = index;
    while (i.toString().compareTo(height.toString()) < 0) {
      var j = (start as num) + (seg as num);
      while (j.toString().compareTo((start as num) + (2 * (seg as num) as num).toString()) < 0) {
        lines[i] = setChar(lines[i], j, ' ');
        j = (j as num) + 1;
      }
      i = (i as num) + 1;
    }
    stack = List.from(stack)..add({'start': start, 'len': seg, 'index': (index as num) + 1});
    stack = List.from(stack)..add({'start': (start as num) + ((seg as num) * 2 as num), 'len': seg, 'index': (index as num) + 1});
  }
  for (var line in lines) {
    print(line);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
