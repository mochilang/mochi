// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:25Z
import 'dart:io';
import 'dart:convert';

int mod(int n, int m) {
  return ((n % m) + m) % m;
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

String pad(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

void carmichael(int p1) {
  for (var h3 = 2; h3 < p1; h3++) {
    for (var d = 1; d < (h3 + p1); d++) {
      if (((h3 + p1) * (p1 - 1)) % d == 0 && mod(-p1 * p1, h3) == d % h3) {
        var p2 = 1 + ((p1 - 1) * (h3 + p1) / d);
        if (!isPrime(p2)) {
          continue;
        }
        var p3 = 1 + (p1 * p2 / h3);
        if (!isPrime(p3)) {
          continue;
        }
        if ((p2 * p3) % (p1 - 1) != 1) {
          continue;
        }
        var c = p1 * p2 * p3;
        print(pad(p1, 2) + '   ' + pad(p2, 4) + '   ' + pad(p3, 5) + '     ' + c.toString());
      }
    }
  }
}

void main() {
  print('The following are Carmichael munbers for p1 <= 61:
');
  print('p1     p2      p3     product');
  print('==     ==      ==     =======');
  for (var p1 = 2; p1 < 62; p1++) {
    if (isPrime(p1)) {
      carmichael(p1);
    }
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
