// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:28Z
import 'dart:io';
import 'dart:convert';

class Point {
  double x;
  double y;
  double z;
  Point(this.x, this.y, this.z);
}

class Edge {
  int pn1;
  int pn2;
  int fn1;
  int fn2;
  Point cp;
  Edge(this.pn1, this.pn2, this.fn1, this.fn2, this.cp);
}

class PointEx {
  Point p;
  int n;
  PointEx(this.p, this.n);
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

String fmt4(double x) {
  var y = x * 10000;
  if (y >= 0) {
    y = y + 0.5;
  }
  else {
    y = y - 0.5;
  }
  y = double.parse((int.parse(y))) / 10000;
  var s = y.toString();
  var dot = indexOf(s, '.');
  if (dot == 0 - 1) {
    s = s + '.0000';
  }
  else {
    var decs = s.length - dot - 1;
    if (decs > 4) {
      s = s.toString().substring(0, dot + 5);
    }
    else {
      while (decs < 4) {
        s = s + '0';
        decs = decs + 1;
      }
    }
  }
  if (x >= 0) {
    s = ' ' + s;
  }
  return s;
}

String fmt2(int n) {
  var s = n.toString();
  if (s.length < 2) {
    return ' ' + s;
  }
  return s;
}

Point sumPoint(Point p1, Point p2) {
  return Point(p1.x + p2.x, p1.y + p2.y, p1.z + p2.z);
}

Point mulPoint(Point p, double m) {
  return Point(p.x * m, p.y * m, p.z * m);
}

Point divPoint(Point p, double d) {
  return mulPoint(p, 1 / d);
}

Point centerPoint(Point p1, Point p2) {
  return divPoint(sumPoint(p1, p2), 2);
}

List<Point> getFacePoints(List<Point> points, List<List<int>> faces) {
  List<Point> facePoints = [];
  var i = 0;
  while (i < faces.length) {
    var face = faces[i];
    var fp = Point(0, 0, 0);
    var _iter0 = face;
    for (var idx in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
      fp = sumPoint(fp, points[idx]);
    }
    fp = divPoint(fp, (double.parse(face.length)));
    facePoints = List.from(facePoints)..add(fp);
    i = i + 1;
  }
  return facePoints;
}

List<List<int>> sortEdges(List<List<int>> edges) {
  List<List<int>> res = [];
  var tmp = edges;
  while (tmp.length > 0) {
    var min = tmp[0];
    var idx = 0;
    var j = 1;
    while (j < tmp.length) {
      var e = tmp[j];
      if (e[0] < min[0] || (e[0] == min[0] && (e[1] < min[1] || (e[1] == min[1] && e[2] < min[2])))) {
        min = e;
        idx = j;
      }
      j = j + 1;
    }
    res = List.from(res)..add(min);
    List<List<int>> out = [];
    var k = 0;
    while (k < tmp.length) {
      if (k != idx) {
        out = List.from(out)..add(tmp[k]);
      }
      k = k + 1;
    }
    tmp = out;
  }
  return res;
}

List<Edge> getEdgesFaces(List<Point> points, List<List<int>> faces) {
  List<List<int>> edges = [];
  var fnum = 0;
  while (fnum < faces.length) {
    var face = faces[fnum];
    var numP = face.length;
    var pi = 0;
    while (pi < numP) {
      var pn1 = face[pi];
      var pn2 = 0;
      if (pi < numP - 1) {
        pn2 = face[pi + 1];
      }
      else {
        pn2 = face[0];
      }
      if (pn1 > pn2) {
        var tmpn = pn1;
        pn1 = pn2;
        pn2 = tmpn;
      }
      edges = List.from(edges)..add([pn1, pn2, fnum]);
      pi = pi + 1;
    }
    fnum = fnum + 1;
  }
  edges = sortEdges(edges);
  List<List<int>> merged = [];
  var idx = 0;
  while (idx < edges.length) {
    var e1 = edges[idx];
    if (idx < edges.length - 1) {
      var e2 = edges[idx + 1];
      if (e1[0] == e2[0] && e1[1] == e2[1]) {
        merged = List.from(merged)..add([e1[0], e1[1], e1[2], e2[2]]);
        idx = idx + 2;
        continue;
      }
    }
    merged = List.from(merged)..add([e1[0], e1[1], e1[2], -1]);
    idx = idx + 1;
  }
  List<Edge> edgesCenters = [];
  var _iter1 = merged;
  for (var me in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    var p1 = points[me[0]];
    var p2 = points[me[1]];
    var cp = centerPoint(p1, p2);
    edgesCenters = List.from(edgesCenters)..add(Edge(me[0], me[1], me[2], me[3], cp));
  }
  return edgesCenters;
}

List<Point> getEdgePoints(List<Point> points, List<Edge> edgesFaces, List<Point> facePoints) {
  List<Point> edgePoints = [];
  var i = 0;
  while (i < edgesFaces.length) {
    var edge = edgesFaces[i];
    var cp = edge['cp'];
    var fp1 = facePoints[edge['fn1']];
    var fp2 = fp1;
    if (edge['fn2'] != 0 - 1) {
      fp2 = facePoints[edge['fn2']];
    }
    var cfp = centerPoint(fp1, fp2);
    edgePoints = List.from(edgePoints)..add(centerPoint(cp, cfp));
    i = i + 1;
  }
  return edgePoints;
}

List<Point> getAvgFacePoints(List<Point> points, List<List<int>> faces, List<Point> facePoints) {
  var numP = points.length;
  List<PointEx> temp = [];
  var i = 0;
  while (i < numP) {
    temp = List.from(temp)..add(PointEx(Point(0, 0, 0), 0));
    i = i + 1;
  }
  var fnum = 0;
  while (fnum < faces.length) {
    var fp = facePoints[fnum];
    for (var pn in faces[fnum]) {
      var tp = temp[pn];
      temp[pn] = PointEx(sumPoint(tp['p'], fp), tp['n'] + 1);
    }
    fnum = fnum + 1;
  }
  List<Point> avg = [];
  var j = 0;
  while (j < numP) {
    var tp = temp[j];
    avg = List.from(avg)..add(divPoint(tp['p'], double.parse(tp['n'])));
    j = j + 1;
  }
  return avg;
}

List<Point> getAvgMidEdges(List<Point> points, List<Edge> edgesFaces) {
  var numP = points.length;
  List<PointEx> temp = [];
  var i = 0;
  while (i < numP) {
    temp = List.from(temp)..add(PointEx(Point(0, 0, 0), 0));
    i = i + 1;
  }
  for (var edge in edgesFaces) {
    var cp = edge.cp;
    var arr = [edge.pn1, edge.pn2];
    var _iter2 = arr;
    for (var pn in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
      var tp = temp[pn];
      temp[pn] = PointEx(sumPoint(tp['p'], cp), tp['n'] + 1);
    }
  }
  List<Point> avg = [];
  var j = 0;
  while (j < numP) {
    var tp = temp[j];
    avg = List.from(avg)..add(divPoint(tp['p'], double.parse(tp['n'])));
    j = j + 1;
  }
  return avg;
}

List<int> getPointsFaces(List<Point> points, List<List<int>> faces) {
  List<int> pf = [];
  var i = 0;
  while (i < points.length) {
    pf = List.from(pf)..add(0);
    i = i + 1;
  }
  var fnum = 0;
  while (fnum < faces.length) {
    for (var pn in faces[fnum]) {
      pf[pn] = pf[pn] + 1;
    }
    fnum = fnum + 1;
  }
  return pf;
}

List<Point> getNewPoints(List<Point> points, List<int> pf, List<Point> afp, List<Point> ame) {
  List<Point> newPts = [];
  var i = 0;
  while (i < points.length) {
    var n = double.parse(pf[i]);
    var m1 = (n - 3) / n;
    var m2 = 1 / n;
    var m3 = 2 / n;
    var old = points[i];
    var p1 = mulPoint(old, m1);
    var p2 = mulPoint(afp[i], m2);
    var p3 = mulPoint(ame[i], m3);
    newPts = List.from(newPts)..add(sumPoint(sumPoint(p1, p2), p3));
    i = i + 1;
  }
  return newPts;
}

String key(int a, int b) {
  if (a < b) {
    return a.toString() + ',' + b.toString();
  }
  return b.toString() + ',' + a.toString();
}

List<any> cmcSubdiv(List<Point> points, List<List<int>> faces) {
  var facePoints = getFacePoints(points, faces);
  var edgesFaces = getEdgesFaces(points, faces);
  var edgePoints = getEdgePoints(points, edgesFaces, facePoints);
  var avgFacePoints = getAvgFacePoints(points, faces, facePoints);
  var avgMidEdges = getAvgMidEdges(points, edgesFaces);
  var pointsFaces = getPointsFaces(points, faces);
  var newPoints = getNewPoints(points, pointsFaces, avgFacePoints, avgMidEdges);
  List<int> facePointNums = [];
  var nextPoint = newPoints.length;
  var _iter3 = facePoints;
  for (var fp in (_iter3 is Map ? (_iter3 as Map).keys : _iter3) as Iterable) {
    newPoints = List.from(newPoints)..add(fp);
    facePointNums = List.from(facePointNums)..add(nextPoint);
    nextPoint = nextPoint + 1;
  }
  Map<String, int> edgePointNums = {};
  var idx = 0;
  while (idx < edgesFaces.length) {
    var e = edgesFaces[idx];
    newPoints = List.from(newPoints)..add(edgePoints[idx]);
    edgePointNums[key(e['pn1'], e['pn2'])] = nextPoint;
    nextPoint = nextPoint + 1;
    idx = idx + 1;
  }
  List<List<int>> newFaces = [];
  var fnum = 0;
  while (fnum < faces.length) {
    var oldFace = faces[fnum];
    if (oldFace.length == 4) {
      var a = oldFace[0];
      var b = oldFace[1];
      var c = oldFace[2];
      var d = oldFace[3];
      var fpnum = facePointNums[fnum];
      var ab = edgePointNums[key(a, b)];
      var da = edgePointNums[key(d, a)];
      var bc = edgePointNums[key(b, c)];
      var cd = edgePointNums[key(c, d)];
      newFaces = List.from(newFaces)..add([a, ab, fpnum, da]);
      newFaces = List.from(newFaces)..add([b, bc, fpnum, ab]);
      newFaces = List.from(newFaces)..add([c, cd, fpnum, bc]);
      newFaces = List.from(newFaces)..add([d, da, fpnum, cd]);
    }
    fnum = fnum + 1;
  }
  return [newPoints, newFaces];
}

String formatPoint(Point p) {
  return '[' + fmt4(p.x) + ' ' + fmt4(p.y) + ' ' + fmt4(p.z) + ']';
}

String formatFace(List<int> f) {
  if (f.length == 0) {
    return '[]';
  }
  var s = '[' + fmt2(f[0]);
  var i = 1;
  while (i < f.length) {
    s = s + ' ' + fmt2(f[i]);
    i = i + 1;
  }
  s = s + ']';
  return s;
}

void main() {
  var inputPoints = [Point(-1, 1, 1), Point(-1, -1, 1), Point(1, -1, 1), Point(1, 1, 1), Point(1, -1, -1), Point(1, 1, -1), Point(-1, -1, -1), Point(-1, 1, -1)];
  var inputFaces = [[0, 1, 2, 3], [3, 2, 4, 5], [5, 4, 6, 7], [7, 0, 3, 5], [7, 6, 1, 0], [6, 1, 2, 4]];
  var outputPoints = inputPoints;
  var outputFaces = inputFaces;
  var i = 0;
  while (i < 1) {
    var res = cmcSubdiv(outputPoints, outputFaces);
    outputPoints = res[0];
    outputFaces = res[1];
    i = i + 1;
  }
  var _iter4 = outputPoints;
  for (var p in (_iter4 is Map ? (_iter4 as Map).keys : _iter4) as Iterable) {
    print(formatPoint(p));
  }
  print('');
  var _iter5 = outputFaces;
  for (var f in (_iter5 is Map ? (_iter5 as Map).keys : _iter5) as Iterable) {
    print(formatFace(f));
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
