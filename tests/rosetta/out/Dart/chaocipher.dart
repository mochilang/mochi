// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:35:06Z
int indexOf(String s, String ch) {
  num i = 0;
  while ((i as num) < s.length) {
    if (s.substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

String rotate(String s, int n) {
  return s.substring(n, s.length) + s.substring(0, n);
}

String scrambleLeft(String s) {
  return s.substring(0, 1) + s.substring(2, 14) + s.substring(1, 2) + s.substring(14, s.length);
}

String scrambleRight(String s) {
  return s.substring(1, 3) + s.substring(4, 15) + s.substring(3, 4) + s.substring(15, s.length) + s.substring(0, 1);
}

String chao(String text, bool encode) {
  var left = 'HXUCZVAMDSLKPEFJRIGTWOBNYQ';
  var right = 'PTLNBQDEOYSFAVZKGJRIHWXUMC';
  var out = '';
  num i = 0;
  while ((i as num) < text.length) {
    var ch = text.substring(i, (i as num) + 1);
    num idx = 0;
    if (encode) {
      idx = indexOf(right, ch);
      out = (out as num) + (((left is String) ? left.substring(idx, (idx as num) + 1) : (left as List).sublist(idx, (idx as num) + 1)) as num);
    }
    else {
      idx = indexOf(left, ch);
      out = (out as num) + (((right is String) ? right.substring(idx, (idx as num) + 1) : (right as List).sublist(idx, (idx as num) + 1)) as num);
    }
    left = rotate(left, idx);
    right = rotate(right, idx);
    left = scrambleLeft(left);
    right = scrambleRight(right);
    i = (i as num) + 1;
  }
  return out;
}

void _main() {
  var plain = 'WELLDONEISBETTERTHANWELLSAID';
  var cipher = chao(plain, true);
  print(plain);
  print(cipher);
  print(chao(cipher, false));
}

void main() {
  _main();
}
