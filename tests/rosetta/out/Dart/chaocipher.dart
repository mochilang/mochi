// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:28Z
import 'dart:io';
import 'dart:convert';

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

String rotate(String s, int n) {
  return s.substring(n, s.length) + s.substring(0, n);
}

String scrambleLeft(String s) {
  return s.substring(0, 1) + s.substring(2, 14) + s.substring(1, 2) + s.substring(14, s.length);
}

String scrambleRight(String s) {
  return s.substring(1, 3) + s.substring(4, 15) + s.substring(3, 4) + s.substring(15, s.length) + s.substring(0, 1);
}

String chao(String text, bool encode) {
  var left = 'HXUCZVAMDSLKPEFJRIGTWOBNYQ';
  var right = 'PTLNBQDEOYSFAVZKGJRIHWXUMC';
  var out = '';
  var i = 0;
  while (i < text.length) {
    var ch = text.substring(i, i + 1);
    var idx = 0;
    if (encode) {
      idx = indexOf(right, ch);
      out = out + ((left is String) ? left.substring(idx, idx + 1) : (left as List).sublist(idx, idx + 1));
    }
    else {
      idx = indexOf(left, ch);
      out = out + ((right is String) ? right.substring(idx, idx + 1) : (right as List).sublist(idx, idx + 1));
    }
    left = rotate(left, idx);
    right = rotate(right, idx);
    left = scrambleLeft(left);
    right = scrambleRight(right);
    i = i + 1;
  }
  return out;
}

void main() {
  var plain = 'WELLDONEISBETTERTHANWELLSAID';
  var cipher = chao(plain, true);
  print(plain);
  print(cipher);
  print(chao(cipher, false));
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
