// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:08Z
double d2d(double d) {
  return d % 360;
}

double g2g(double g) {
  return g % 400;
}

double m2m(double m) {
  return m % 6400;
}

double r2r(double r) {
  return r % (2 * 3.141592653589793);
}

double d2g(double d) {
  return d2d(d) * 400 / 360;
}

double d2m(double d) {
  return d2d(d) * 6400 / 360;
}

double d2r(double d) {
  return d2d(d) * 3.141592653589793 / 180;
}

double g2d(double g) {
  return g2g(g) * 360 / 400;
}

double g2m(double g) {
  return g2g(g) * 6400 / 400;
}

double g2r(double g) {
  return g2g(g) * 3.141592653589793 / 200;
}

double m2d(double m) {
  return m2m(m) * 360 / 6400;
}

double m2g(double m) {
  return m2m(m) * 400 / 6400;
}

double m2r(double m) {
  return m2m(m) * 3.141592653589793 / 3200;
}

double r2d(double r) {
  return r2r(r) * 180 / 3.141592653589793;
}

double r2g(double r) {
  return r2r(r) * 200 / 3.141592653589793;
}

double r2m(double r) {
  return r2r(r) * 3200 / 3.141592653589793;
}

void main() {
  var angles = [-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 399, 6399, 1e+06];
  print('degrees normalized_degs gradians mils radians');
  var _iter0 = angles;
  for (var a in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print(a.toString() + ' ' + d2d(a).toString() + ' ' + d2g(a).toString() + ' ' + d2m(a).toString() + ' ' + d2r(a).toString());
  }
  print('
gradians normalized_grds degrees mils radians');
  var _iter1 = angles;
  for (var a in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    print(a.toString() + ' ' + g2g(a).toString() + ' ' + g2d(a).toString() + ' ' + g2m(a).toString() + ' ' + g2r(a).toString());
  }
  print('
mils normalized_mils degrees gradians radians');
  var _iter2 = angles;
  for (var a in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
    print(a.toString() + ' ' + m2m(a).toString() + ' ' + m2d(a).toString() + ' ' + m2g(a).toString() + ' ' + m2r(a).toString());
  }
  print('
radians normalized_rads degrees gradians mils');
  var _iter3 = angles;
  for (var a in (_iter3 is Map ? (_iter3 as Map).keys : _iter3) as Iterable) {
    print(a.toString() + ' ' + r2r(a).toString() + ' ' + r2d(a).toString() + ' ' + r2g(a).toString() + ' ' + r2m(a).toString());
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
