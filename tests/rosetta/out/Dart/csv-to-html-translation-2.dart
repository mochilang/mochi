// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:48Z
var c = 'Character,Speech
' + 'The multitude,The messiah! Show us the messiah!
' + 'Brians mother,<angry>Now you listen here! He\'s not the messiah; he\'s a very naughty boy! Now go away!</angry>
' + 'The multitude,Who are you?
' + 'Brians mother,I\'m his mother; that\'s who!
' + 'The multitude,Behold his mother! Behold his mother!';

List<List<String>> rows = [];

var headings = true;

void main() {
  for (var line in split(c, '
')) {
    rows = List.from(rows)..add(split(line, ','));
  }
  print('<table>');
  if (headings) {
    if (rows.length > 0) {
      var th = '';
      for (var h in rows[0]) {
        th = th + '<th>' + h + '</th>';
      }
      print('   <thead>');
      print('      <tr>' + th + '</tr>');
      print('   </thead>');
      print('   <tbody>');
      var i = 1;
      while (i.toString().compareTo(rows.length.toString()) < 0) {
        var cells = '';
        for (var cell in rows[i]) {
          cells = cells + '<td>' + cell + '</td>';
        }
        print('      <tr>' + cells + '</tr>');
        i = (i as num) + 1;
      }
      print('   </tbody>');
    }
  }
  else {
    for (var row in rows) {
      var cells = '';
      for (var cell in row) {
        cells = cells + '<td>' + cell + '</td>';
      }
      print('    <tr>' + cells + '</tr>');
    }
  }
  print('</table>');
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
