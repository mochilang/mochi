// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:12Z
int pow_int(int base, int exp) {
  var result = 1;
  var b = base;
  var e = exp;
  while (e.toString().compareTo(0.toString()) > 0) {
    if ((e as num) % 2 == 1) {
      result = (result as num) * (b as num);
    }
    b = (b as num) * (b as num);
    e = int.parse(((e as num) / 2));
  }
  return result;
}

bigint pow_big(bigint base, int exp) {
  bigint result = 1;
  bigint b = base;
  var e = exp;
  while (e.toString().compareTo(0.toString()) > 0) {
    if ((e as num) % 2 == 1) {
      result = (result as num) * (b as num);
    }
    b = (b as num) * (b as num);
    e = int.parse(((e as num) / 2));
  }
  return result;
}

var e1 = pow_int(3, 2);

var e2 = pow_int(4, e1);

bigint base = 5;

bigint x = pow_big(base, e2);

var s = x.toString();

void main() {
  print(['5^(4^(3^2)) has', s.length, 'digits:', s.toString().substring(0, 20), '...', s.toString().substring(s.length - 20, s.length)].join(' '));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
