// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:21Z
List<Map<String, int>> push(List<Map<String, int>> h, Map<String, int> it) {
  h = List.from(h)..add(it);
  var i = h.length - 1;
  while ((i as num) > 0 && (h[(i as num) - 1] as Map)['s'] > (h[i] as Map)['s']) {
    var tmp = h[(i as num) - 1];
    h[(i as num) - 1] = h[i];
    h[i] = tmp;
    i = (i as num) - 1;
  }
  return h;
}

Map<String, any> step(List<Map<String, int>> h, int nv, List<int> dir) {
  while (h.length == 0 || nv * nv <= (h[0] as Map)['s']) {
    h = push(h, {'s': nv * nv, 'a': nv, 'b': 0});
    nv = nv + 1;
  }
  var s = (h[0] as Map)['s'];
  List<List<int>> v = [];
  while (h.length > 0 && (h[0] as Map)['s'] == s) {
    var it = h[0];
    h = h.sublist(1, h.length);
    v = List.from(v)..add([
      it['a'],
      it['b'],
    ]);
    if ((it['a'] as num) > (it['b'] as num)) {
      h = push(h, {
        's': ((it['a'] as num) * (it['a'] as num) as num) + ((((it['b'] as num) + 1) as num) * (((it['b'] as num) + 1) as num) as num),
        'a': it['a'],
        'b': (it['b'] as num) + 1,
      });
    }
  }
  List<List<int>> list = [];
  var _iter0 = v;
  for (var p in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    list = List.from(list)..add(p);
  }
  List<List<int>> temp = list;
  var _iter1 = temp;
  for (var p in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    if (p[0] != p[1]) {
      list = List.from(list)..add([
        p[1],
        p[0],
      ]);
    }
  }
  temp = list;
  var _iter2 = temp;
  for (var p in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
    if (p[1] != 0) {
      list = List.from(list)..add([
        p[0],
        -(p[1] as num),
      ]);
    }
  }
  temp = list;
  var _iter3 = temp;
  for (var p in (_iter3 is Map ? (_iter3 as Map).keys : _iter3) as Iterable) {
    if (p[0] != 0) {
      list = List.from(list)..add([
        -(p[0] as num),
        p[1],
      ]);
    }
  }
  var bestDot = -999999999;
  var best = dir;
  var _iter4 = list;
  for (var p in (_iter4 is Map ? (_iter4 as Map).keys : _iter4) as Iterable) {
    var cross = ((p[0] as num) * dir[1] as num) - ((p[1] as num) * dir[0] as num);
    if ((cross as num) >= 0) {
      var dot = ((p[0] as num) * dir[0] as num) + ((p[1] as num) * dir[1] as num);
      if ((dot as num) > (bestDot as num)) {
        bestDot = dot;
        best = p;
      }
    }
  }
  return {'d': best, 'heap': h, 'n': nv};
}

List<List<int>> positions(int n) {
  List<List<int>> pos = [];
  num x = 0;
  num y = 0;
  List<int> dir = [0, 1];
  List<Map<String, int>> heap = [];
  var nv = 1;
  num i = 0;
  while ((i as num) < n) {
    pos = List.from(pos)..add([x, y]);
    var st = step(heap, nv, dir);
    dir = (st['d'] as List<int>);
    heap = (st['heap'] as List<Map<String, int>>);
    nv = int.parse(st['n']);
    x = (x as num) + (dir[0] as num);
    y = (y as num) + (dir[1] as num);
    i = (i as num) + 1;
  }
  return pos;
}

String pad(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = r + ' ';
  }
  return r;
}

void _main() {
  var pts = positions(40);
  print('The first 40 Babylonian spiral points are:');
  var line = '';
  num i = 0;
  while ((i as num) < pts.length) {
    var p = pts[i];
    var s = pad('(' + p[0].toString() + ', ' + p[1].toString() + ')', 10);
    line = (line as num) + (s as num);
    if ((((i as num) + 1) as num) % 10 == 0) {
      print(line);
      line = '';
    }
    i = (i as num) + 1;
  }
}

void main() {
  _main();
}
