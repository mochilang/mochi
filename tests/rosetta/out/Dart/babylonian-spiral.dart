// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:57Z
import 'dart:io';
import 'dart:convert';

List<Map<String, int>> push(List<Map<String, int>> h, Map<String, int> it) {
  h = List.from(h)..add(it);
  var i = h.length - 1;
  while (i > 0 && (h[i - 1] as Map)['s'] > (h[i] as Map)['s']) {
    var tmp = h[i - 1];
    h[i - 1] = h[i];
    h[i] = tmp;
    i = i - 1;
  }
  return h;
}

Map<String, any> step(List<Map<String, int>> h, int nv, List<int> dir) {
  while (h.length == 0 || nv * nv <= (h[0] as Map)['s']) {
    h = push(h, {'s': nv * nv, 'a': nv, 'b': 0});
    nv = (nv + 1 as int);
  }
  var s = (h[0] as Map)['s'];
  List<List<int>> v = [];
  while (h.length > 0 && (h[0] as Map)['s'] == s) {
    var it = h[0];
    h = h.sublist(1, h.length);
    v = List.from(v)..add([it['a'], it['b']]);
    if (it['a'] > it['b']) {
      h = push(h, {'s': it['a'] * it['a'] + (it['b'] + 1) * (it['b'] + 1), 'a': it['a'], 'b': it['b'] + 1});
    }
  }
  List<List<int>> list = [];
  var _iter0 = v;
  for (var p in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    list = List.from(list)..add(p);
  }
  List<List<int>> temp = list;
  var _iter1 = temp;
  for (var p in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    if (p[0] != p[1]) {
      list = List.from(list)..add([p[1], p[0]]);
    }
  }
  temp = list;
  var _iter2 = temp;
  for (var p in (_iter2 is Map ? (_iter2 as Map).keys : _iter2) as Iterable) {
    if (p[1] != 0) {
      list = List.from(list)..add([p[0], -p[1]]);
    }
  }
  temp = list;
  var _iter3 = temp;
  for (var p in (_iter3 is Map ? (_iter3 as Map).keys : _iter3) as Iterable) {
    if (p[0] != 0) {
      list = List.from(list)..add([-p[0], p[1]]);
    }
  }
  var bestDot = -999999999;
  var best = dir;
  var _iter4 = list;
  for (var p in (_iter4 is Map ? (_iter4 as Map).keys : _iter4) as Iterable) {
    var cross = p[0] * dir[1] - p[1] * dir[0];
    if (cross >= 0) {
      var dot = p[0] * dir[0] + p[1] * dir[1];
      if (dot > bestDot) {
        bestDot = dot;
        best = p;
      }
    }
  }
  return {'d': best, 'heap': h, 'n': nv};
}

List<List<int>> positions(int n) {
  List<List<int>> pos = [];
  var x = 0;
  var y = 0;
  List<int> dir = [0, 1];
  List<Map<String, int>> heap = [];
  var nv = 1;
  var i = 0;
  while (i < n) {
    pos = List.from(pos)..add([x, y]);
    var st = step(heap, nv, dir);
    dir = (st['d'] as List<int>);
    heap = (st['heap'] as List<Map<String, int>>);
    nv = int.parse(st['n']);
    x = x + dir[0];
    y = y + dir[1];
    i = i + 1;
  }
  return pos;
}

String pad(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = r + ' ';
  }
  return r;
}

void _main() {
  var pts = positions(40);
  print('The first 40 Babylonian spiral points are:');
  var line = '';
  var i = 0;
  while (i < pts.length) {
    var p = pts[i];
    var s = pad('(' + p[0].toString() + ', ' + p[1].toString() + ')', 10);
    line = line + s;
    if ((i + 1) % 10 == 0) {
      print(line);
      line = '';
    }
    i = i + 1;
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
