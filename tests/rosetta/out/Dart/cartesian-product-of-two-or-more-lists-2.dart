// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:26Z
import 'dart:io';
import 'dart:convert';

String listStr(List<int> xs) {
  var s = '[';
  var i = 0;
  while (i < xs.length) {
    s = s + xs[i].toString();
    if (i < xs.length - 1) {
      s = s + ' ';
    }
    i = i + 1;
  }
  s = s + ']';
  return s;
}

String llStr(List<List<int>> lst) {
  var s = '[';
  var i = 0;
  while (i < lst.length) {
    s = s + listStr(lst[i]);
    if (i < lst.length - 1) {
      s = s + ' ';
    }
    i = i + 1;
  }
  s = s + ']';
  return s;
}

List<List<int>> cartN(any lists) {
  if (lists == null) {
    return [];
  }
  var a = (lists as List<List<int>>);
  if (a.length == 0) {
    return [[]];
  }
  var c = 1;
  var _iter0 = a;
  for (var xs in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    c = c * xs.length;
  }
  if (c == 0) {
    return [];
  }
  List<List<int>> res = [];
  List<int> idx = [];
  var _iter1 = a;
  for (var _ in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    idx = List.from(idx)..add(0);
  }
  var n = a.length;
  var count = 0;
  while (count.toString().compareTo(c.toString()) < 0) {
    List<int> row = [];
    var j = 0;
    while (j < n) {
      row = List.from(row)..add(a[j][idx[j]]);
      j = j + 1;
    }
    res = List.from(res)..add(row);
    var k = n - 1;
    while (k >= 0) {
      idx[k] = idx[k] + 1;
      if (idx[k] < a[k].length) {
        break;
      }
      idx[k] = 0;
      k = k - 1;
    }
    count = (count as num) + 1;
  }
  return res;
}

void main() {
  print(llStr(cartN([[1, 2], [3, 4]])));
  print(llStr(cartN([[3, 4], [1, 2]])));
  print(llStr(cartN([[1, 2], []])));
  print(llStr(cartN([[], [1, 2]])));
  print('');
  print('[');
  for (var p in cartN([[1776, 1789], [7, 12], [4, 14, 23], [0, 1]])) {
    print(' ' + listStr(p));
  }
  print(']');
  print(llStr(cartN([[1, 2, 3], [30], [500, 100]])));
  print(llStr(cartN([[1, 2, 3], [], [500, 100]])));
  print('');
  print(llStr(cartN(null)));
  print(llStr(cartN([])));
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
