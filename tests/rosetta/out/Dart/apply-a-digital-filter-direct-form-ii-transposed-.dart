// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:56Z
List<double> applyFilter(List<double> input, List<double> a, List<double> b) {
  List<double> out = [];
  var scale = 1 / a[0];
  num i = 0;
  while ((i as num) < input.length) {
    num tmp = 0;
    num j = 0;
    while ((j as num) <= (i as num) && (j as num) < b.length) {
      tmp = (tmp as num) + b[j] * input[(i as num) - (j as num)];
      j = (j as num) + 1;
    }
    j = 0;
    while ((j as num) < (i as num) && ((j as num) + 1 as num) < a.length) {
      tmp = (tmp as num) - (a[(j as num) + 1] * (out[((i as num) - (j as num) as num) - 1] as num) as num);
      j = (j as num) + 1;
    }
    out = List.from(out)..add((tmp as num) * (scale as num));
    i = (i as num) + 1;
  }
  return out;
}

var a = [
  1,
  -2.7756e-16,
  0.33333333,
  -1.85e-17,
];

var b = [
  0.16666667,
  0.5,
  0.5,
  0.16666667,
];

var sig = [
  -0.917843918645,
  0.141984778794,
  1.20536903482,
  0.190286794412,
  -0.662370894973,
  -1.00700480494,
  -0.404707073677,
  0.800482325044,
  0.743500089861,
  1.01090520172,
  0.741527555207,
  0.277841675195,
  0.400833448236,
  -0.2085993586,
  -0.172842103641,
  -0.134316096293,
  0.0259303398477,
  0.490105989562,
  0.549391221511,
  0.9047198589,
];

var res = applyFilter(sig, a, b);

num k = 0;

void main() {
  while (k < res.length) {
    print(res[k]);
    k = k + 1;
  }
}
