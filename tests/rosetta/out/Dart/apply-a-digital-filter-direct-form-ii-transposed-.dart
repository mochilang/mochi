// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:11Z
List<double> applyFilter(List<double> input, List<double> a, List<double> b) {
  List<double> out = [];
  var scale = 1 / a[0];
  var i = 0;
  while (i.toString().compareTo(input.length.toString()) < 0) {
    var tmp = 0;
    var j = 0;
    while (j.toString().compareTo(i.toString()) <= 0 && j.toString().compareTo(b.length.toString()) < 0) {
      tmp = (tmp as num) + b[j] * input[(i as num) - (j as num)];
      j = (j as num) + 1;
    }
    j = 0;
    while (j.toString().compareTo(i.toString()) < 0 && (j as num) + 1.toString().compareTo(a.length.toString()) < 0) {
      tmp = (tmp as num) - (a[(j as num) + 1] * (out[((i as num) - (j as num) as num) - 1] as num) as num);
      j = (j as num) + 1;
    }
    out = List.from(out)..add((tmp as num) * (scale as num));
    i = (i as num) + 1;
  }
  return out;
}

var a = [1, -2.7756e-16, 0.33333333, -1.85e-17];

var b = [0.16666667, 0.5, 0.5, 0.16666667];

var sig = [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589];

var res = applyFilter(sig, a, b);

var k = 0;

void main() {
  while (k < res.length) {
    print(res[k]);
    k = (k + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
