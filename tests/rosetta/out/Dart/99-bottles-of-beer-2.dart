// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:00Z
List<String> fields(String s) {
  List<String> words = [];
  var cur = '';
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch == ' ' || ch == '
' || ch == '  ') {
      if (cur.length > 0) {
        words = List.from(words)..add(cur);
        cur = '';
      }
    }
    else {
      cur = (cur as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  if (cur.length > 0) {
    words = List.from(words)..add(cur);
  }
  return words;
}

String join(List<String> xs, String sep) {
  var res = '';
  var i = 0;
  while (i.toString().compareTo(xs.length.toString()) < 0) {
    if (i.toString().compareTo(0.toString()) > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = (i as num) + 1;
  }
  return res;
}

String numberName(int n) {
  var small = ['no', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  var tens = ['ones', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
  if (n < 0) {
    return '';
  }
  if (n < 20) {
    return small[n];
  }
  if (n < 100) {
    var t = tens[int.parse((n / 10))];
    var s = n % 10;
    if (s.toString().compareTo(0.toString()) > 0) {
      t = t + ' ' + small[s];
    }
    return t;
  }
  return '';
}

String pluralizeFirst(String s, int n) {
  if (n == 1) {
    return s;
  }
  var w = fields(s);
  if (w.length > 0) {
    w[0] = w[0] + 's';
  }
  return join(w, ' ');
}

int randInt(int seed, int n) {
  var next = (seed * 1664525 + 1013904223) % 2147483647;
  return (next as num) % n;
}

String slur(String p, int d) {
  if (p.length <= 2) {
    return p;
  }
  List<String> a = [];
  var i = 1;
  while (i.toString().compareTo(p.length - 1.toString()) < 0) {
    a = List.from(a)..add(p.toString().substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  var idx = a.length - 1;
  var seed = d;
  while (idx.toString().compareTo(1.toString()) >= 0) {
    seed = ((((seed as num) * 1664525 as num) + 1013904223) as num) % 2147483647;
    if ((seed as num) % 100.toString().compareTo(d.toString()) >= 0) {
      var j = (seed as num) % (((idx as num) + 1) as num);
      var tmp = a[idx];
      a[idx] = a[j];
      a[j] = tmp;
    }
    idx = (idx as num) - 1;
  }
  var s = p.toString().substring(0, 1);
  var k = 0;
  while (k.toString().compareTo(a.length.toString()) < 0) {
    s = (s as num) + (a[k] as num);
    k = (k as num) + 1;
  }
  s = s + p.toString().substring(p.length - 1, p.length);
  var w = fields(s);
  return join(w, ' ');
}

void main() {
  var i = 99;
  while (i.toString().compareTo(0.toString()) > 0) {
    print(slur(numberName(i), i) + ' ' + pluralizeFirst(slur('bottle of', i), i) + ' ' + slur('beer on the wall', i));
    print(slur(numberName(i), i) + ' ' + pluralizeFirst(slur('bottle of', i), i) + ' ' + slur('beer', i));
    print(slur('take one', i) + ' ' + slur('down', i) + ' ' + slur('pass it around', i));
    print(slur(numberName((i as num) - 1), i) + ' ' + pluralizeFirst(slur('bottle of', i), (i as num) - 1) + ' ' + slur('beer on the wall', i));
    i = (i as num) - 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
