// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:47Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

String sortRunes(String s) {
  List<String> arr = [];
  num i = 0;
  while ((i as num) < s.length) {
    arr = List.from(arr)..add(s.substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  var n = arr.length;
  num m = 0;
  while ((m as num) < (n as num)) {
    num j = 0;
    while ((j as num) < ((n as num) - 1 as num)) {
      if ((arr[j] as num) > (arr[(j as num) + 1] as num)) {
        var tmp = arr[j];
        arr[j] = arr[(j as num) + 1];
        arr[(j as num) + 1] = tmp;
      }
      j = (j as num) + 1;
    }
    m = (m as num) + 1;
  }
  var out = '';
  i = 0;
  while ((i as num) < (n as num)) {
    out = (out as num) + (arr[i] as num);
    i = (i as num) + 1;
  }
  return out;
}

List<String> sortStrings(List<String> xs) {
  List<String> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    num idx = 0;
    var i = 1;
    while ((i as num) < tmp.length) {
      if ((tmp[i] as num) < (min as num)) {
        min = tmp[i];
        idx = i;
      }
      i = (i as num) + 1;
    }
    res = List.from(res)..add(min);
    List<String> out = [];
    num j = 0;
    while ((j as num) < tmp.length) {
      if (j != idx) {
        out = List.from(out)..add(tmp[j]);
      }
      j = (j as num) + 1;
    }
    tmp = out;
  }
  return res;
}

void _main() {
  var words = [
    'abel',
    'able',
    'bale',
    'bela',
    'elba',
    'alger',
    'glare',
    'lager',
    'large',
    'regal',
    'angel',
    'angle',
    'galen',
    'glean',
    'lange',
    'caret',
    'carte',
    'cater',
    'crate',
    'trace',
    'elan',
    'lane',
    'lean',
    'lena',
    'neal',
    'evil',
    'levi',
    'live',
    'veil',
    'vile',
  ];
  Map<String, List<String>> groups = {};
  num maxLen = 0;
  var _iter0 = words;
  for (var w in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    var k = sortRunes(w);
    if (!(_in(k, groups)) != null) {
      groups[k] = [w];
    }
    else {
      groups[k] = List.from(groups[k])..add(w);
    }
    if (groups[k].length > (maxLen as num)) {
      maxLen = groups[k].length;
    }
  }
  Map<String, bool> printed = {};
  var _iter1 = words;
  for (var w in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    var k = sortRunes(w);
    if (groups[k].length == maxLen) {
      if (!(_in(k, printed)) != null) {
        var g = sortStrings(groups[k]);
        var line = '[' + g[0];
        var i = 1;
        while ((i as num) < g.length) {
          line = line + ' ' + g[i];
          i = (i as num) + 1;
        }
        line = line + ']';
        print(line);
        printed[k] = true;
      }
    }
  }
}

void main() {
  _main();
}
