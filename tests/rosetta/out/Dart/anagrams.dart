// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:07Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

String sortRunes(String s) {
  List<String> arr = [];
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    arr = List.from(arr)..add(s.substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  var n = arr.length;
  var m = 0;
  while (m.toString().compareTo(n.toString()) < 0) {
    var j = 0;
    while (j.toString().compareTo((n as num) - 1.toString()) < 0) {
      if (arr[j].toString().compareTo(arr[(j as num) + 1].toString()) > 0) {
        var tmp = arr[j];
        arr[j] = arr[(j as num) + 1];
        arr[(j as num) + 1] = tmp;
      }
      j = (j as num) + 1;
    }
    m = (m as num) + 1;
  }
  var out = '';
  i = 0;
  while (i.toString().compareTo(n.toString()) < 0) {
    out = (out as num) + (arr[i] as num);
    i = (i as num) + 1;
  }
  return out;
}

List<String> sortStrings(List<String> xs) {
  List<String> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    var idx = 0;
    var i = 1;
    while (i.toString().compareTo(tmp.length.toString()) < 0) {
      if (tmp[i].toString().compareTo(min.toString()) < 0) {
        min = tmp[i];
        idx = i;
      }
      i = (i as num) + 1;
    }
    res = List.from(res)..add(min);
    List<String> out = [];
    var j = 0;
    while (j.toString().compareTo(tmp.length.toString()) < 0) {
      if (j != idx) {
        out = List.from(out)..add(tmp[j]);
      }
      j = (j as num) + 1;
    }
    tmp = out;
  }
  return res;
}

void main() {
  var words = ['abel', 'able', 'bale', 'bela', 'elba', 'alger', 'glare', 'lager', 'large', 'regal', 'angel', 'angle', 'galen', 'glean', 'lange', 'caret', 'carte', 'cater', 'crate', 'trace', 'elan', 'lane', 'lean', 'lena', 'neal', 'evil', 'levi', 'live', 'veil', 'vile'];
  Map<String, List<String>> groups = {};
  var maxLen = 0;
  var _iter0 = words;
  for (var w in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    var k = sortRunes(w);
    if (!(_in(k, groups)) != null) {
      groups[k] = [w];
    }
    else {
      groups[k] = List.from(groups[k])..add(w);
    }
    if (groups[k].length.toString().compareTo(maxLen.toString()) > 0) {
      maxLen = groups[k].length;
    }
  }
  Map<String, bool> printed = {};
  var _iter1 = words;
  for (var w in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    var k = sortRunes(w);
    if (groups[k].length == maxLen) {
      if (!(_in(k, printed)) != null) {
        var g = sortStrings(groups[k]);
        var line = '[' + g[0];
        var i = 1;
        while (i.toString().compareTo(g.length.toString()) < 0) {
          line = line + ' ' + g[i];
          i = (i as num) + 1;
        }
        line = line + ']';
        print(line);
        printed[k] = true;
      }
    }
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
