// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:00Z
List<int> primeFactors(int n) {
  List<int> factors = [];
  var x = n;
  while ((x as num) % 2 == 0) {
    factors = List.from(factors)..add(2);
    x = int.parse(((x as num) / 2));
  }
  var p = 3;
  while (((p as num) * (p as num) as num) <= (x as num)) {
    while ((x as num) % (p as num) == 0) {
      factors = List.from(factors)..add(p);
      x = int.parse(((x as num) / (p as num)));
    }
    p = (p as num) + 2;
  }
  if ((x as num) > 1) {
    factors = List.from(factors)..add(x);
  }
  return factors;
}

String repeat(String ch, int n) {
  var s = '';
  num i = 0;
  while ((i as num) < n) {
    s = s + ch;
    i = (i as num) + 1;
  }
  return s;
}

double D(double n) {
  if (n < 0) {
    return -(D(-(n as num)) as num);
  }
  if (n < 2) {
    return 0;
  }
  List<int> factors = [];
  if (n < 1e+19) {
    factors = primeFactors(int.parse((n)));
  }
  else {
    var g = int.parse((n / 100));
    factors = primeFactors(g);
    factors = List.from(factors)..add(2);
    factors = List.from(factors)..add(2);
    factors = List.from(factors)..add(5);
    factors = List.from(factors)..add(5);
  }
  var c = factors.length;
  if (c == 1) {
    return 1;
  }
  if (c == 2) {
    return double.parse(((factors[0] as num) + (factors[1] as num)));
  }
  var d = n / (double.parse(factors[0]));
  return D(d) * (double.parse(factors[0])) + (d as num);
}

String pad(int n) {
  var s = n.toString();
  while (s.length < 4) {
    s = ' ' + s;
  }
  return s;
}

void _main() {
  List<int> vals = [];
  var n = -99;
  while ((n as num) < 101) {
    vals = List.from(vals)..add(int.parse((D(double.parse(n)))));
    n = (n as num) + 1;
  }
  num i = 0;
  while ((i as num) < vals.length) {
    var line = '';
    num j = 0;
    while ((j as num) < 10) {
      line = line + pad(vals[(i as num) + (j as num)]);
      if ((j as num) < 9) {
        line = line + ' ';
      }
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 10;
  }
  var pow = 1;
  var m = 1;
  while ((m as num) < 21) {
    pow = (pow as num) * 10;
    var exp = m.toString();
    if (exp.length < 2) {
      exp = exp + ' ';
    }
    var res = m.toString() + repeat('0', (m as num) - 1);
    print('D(10^' + exp + ') / 7 = ' + res);
    m = (m as num) + 1;
  }
}

void main() {
  _main();
}
