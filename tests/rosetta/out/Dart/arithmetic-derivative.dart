// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:49Z
import 'dart:io';
import 'dart:convert';

List<int> primeFactors(int n) {
  List<int> factors = [];
  var x = n;
  while (x % 2 == 0) {
    factors = List.from(factors)..add(2);
    x = int.parse((x / 2));
  }
  var p = 3;
  while (p * p <= x) {
    while (x % p == 0) {
      factors = List.from(factors)..add(p);
      x = int.parse((x / p));
    }
    p = p + 2;
  }
  if (x > 1) {
    factors = List.from(factors)..add(x);
  }
  return factors;
}

String repeat(String ch, int n) {
  var s = '';
  var i = 0;
  while (i < n) {
    s = s + ch;
    i = i + 1;
  }
  return s;
}

double D(double n) {
  if (n < 0) {
    return -D(-n);
  }
  if (n < 2) {
    return 0;
  }
  List<int> factors = [];
  if (n < 1e+19) {
    factors = primeFactors(int.parse((n)));
  }
  else {
    var g = int.parse((n / 100));
    factors = primeFactors(g);
    factors = List.from(factors)..add(2);
    factors = List.from(factors)..add(2);
    factors = List.from(factors)..add(5);
    factors = List.from(factors)..add(5);
  }
  var c = factors.length;
  if (c == 1) {
    return 1;
  }
  if (c == 2) {
    return double.parse((factors[0] + factors[1]));
  }
  var d = n / (double.parse(factors[0]));
  return D(d) * (double.parse(factors[0])) + d;
}

String pad(int n) {
  var s = n.toString();
  while (s.length < 4) {
    s = ' ' + s;
  }
  return s;
}

void _main() {
  List<int> vals = [];
  var n = -99;
  while (n < 101) {
    vals = List.from(vals)..add(int.parse((D(double.parse(n)))));
    n = n + 1;
  }
  var i = 0;
  while (i < vals.length) {
    var line = '';
    var j = 0;
    while (j < 10) {
      line = line + pad(vals[i + j]);
      if (j < 9) {
        line = line + ' ';
      }
      j = j + 1;
    }
    print(line);
    i = i + 10;
  }
  var pow = 1;
  var m = 1;
  while (m < 21) {
    pow = pow * 10;
    var exp = m.toString();
    if (exp.length < 2) {
      exp = exp + ' ';
    }
    var res = m.toString() + repeat('0', m - 1);
    print('D(10^' + exp + ') / 7 = ' + res);
    m = m + 1;
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
