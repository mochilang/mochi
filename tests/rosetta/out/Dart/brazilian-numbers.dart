// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:30Z
bool sameDigits(int n, int b) {
  var f = n % b;
  n = (int.parse((n / b)) as int);
  while (n > 0) {
    if (n % b != f) {
      return false;
    }
    n = (int.parse((n / b)) as int);
  }
  return true;
}

bool isBrazilian(int n) {
  if (n < 7) {
    return false;
  }
  if (n % 2 == 0 && n >= 8) {
    return true;
  }
  var b = 2;
  while (b.toString().compareTo(n - 1.toString()) < 0) {
    if (sameDigits(n, b)) {
      return true;
    }
    b = (b as num) + 1;
  }
  return false;
}

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while ((d as num) * (d as num).toString().compareTo(n.toString()) <= 0) {
    if (n % (d as num) == 0) {
      return false;
    }
    d = (d as num) + 2;
    if (n % (d as num) == 0) {
      return false;
    }
    d = (d as num) + 4;
  }
  return true;
}

void main() {
  var kinds = [' ', ' odd ', ' prime '];
  var _iter0 = kinds;
  for (var kind in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print('First 20' + kind + 'Brazilian numbers:');
    var c = 0;
    var n = 7;
    while (true) {
      if (isBrazilian(n)) {
        print(n.toString() + ' ');
        c = (c as num) + 1;
        if (c == 20) {
          print('
');
          break;
        }
      }
      if (kind == ' ') {
        n = (n as num) + 1;
      }
      else 
      if (kind == ' odd ') {
        n = (n as num) + 2;
      }
      else {
        while (true) {
          n = (n as num) + 2;
          if (isPrime(n)) {
            break;
          }
        }
      }
    }
  }
  var n = 7;
  var c = 0;
  while (c.toString().compareTo(100000.toString()) < 0) {
    if (isBrazilian(n)) {
      c = (c as num) + 1;
    }
    n = (n as num) + 1;
  }
  print('The 100,000th Brazilian number: ' + (n as num) - 1.toString());
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
