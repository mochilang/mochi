// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:44Z
import 'dart:io';
import 'dart:convert';

var PI = 3.141592653589793;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while (n <= 10) {
    var denom = double.parse(((2 * n) * (2 * n + 1)));
    term = -term * x * x / (denom as num);
    sum = (sum as num) + term;
    n = n + 1;
  }
  return sum;
}

double cosApprox(double x) {
  var term = 1;
  var sum = 1;
  var n = 1;
  while (n <= 10) {
    var denom = double.parse(((2 * n - 1) * (2 * n)));
    term = -term * x * x / (denom as num);
    sum = (sum as num) + term;
    n = n + 1;
  }
  return sum;
}

double sqrtApprox(double x) {
  var guess = x;
  var i = 0;
  while (i < 10) {
    guess = (guess + x / guess) / 2;
    i = i + 1;
  }
  return guess;
}

var L = 10;

var G = 9.81;

var dt = 0.2;

var phi0 = PI / 4;

var omega = sqrtApprox(G / L);

var t = 0;

void main() {
  for (var step = 0; step < 10; step++) {
    var phi = phi0 * cosApprox(omega * t);
    var pos = int.parse((10 * sinApprox(phi) + 0.5));
    print(pos.toString());
    t = t + dt;
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
