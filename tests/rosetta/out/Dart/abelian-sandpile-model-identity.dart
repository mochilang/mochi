// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:30Z
List<List<int>> neighborsList() {
  return [
    [1, 3],
    [0, 2, 4],
    [1, 5],
    [0, 4, 6],
    [
    1,
    3,
    5,
    7,
  ],
    [2, 4, 8],
    [3, 7],
    [4, 6, 8],
    [5, 7],
  ];
}

List<int> plus(List<int> a, List<int> b) {
  List<int> res = [];
  num i = 0;
  while ((i as num) < a.length) {
    res = List.from(res)..add(a[i] + b[i]);
    i = (i as num) + 1;
  }
  return res;
}

bool isStable(List<int> p) {
  for (var v in p) {
    if (v > 3) {
      return false;
    }
  }
  return true;
}

int topple(List<int> p) {
  var neighbors = neighborsList();
  num i = 0;
  while ((i as num) < p.length) {
    if (p[i] > 3) {
      p[i] = p[i] - 4;
      var nbs = neighbors[i];
      var _iter0 = nbs;
      for (var j in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
        p[j] = p[j] + 1;
      }
      return 0;
    }
    i = (i as num) + 1;
  }
  return 0;
}

String pileString(List<int> p) {
  var s = '';
  num r = 0;
  while ((r as num) < 3) {
    num c = 0;
    while ((c as num) < 3) {
      s = s + p[(3 * (r as num) as num) + (c as num)].toString() + ' ';
      c = (c as num) + 1;
    }
    s = s + '\n';
    r = (r as num) + 1;
  }
  return s;
}

var s4 = [
  4,
  3,
  3,
  3,
  1,
  2,
  0,
  2,
  3,
];

var s1 = [
  1,
  2,
  0,
  2,
  1,
  1,
  0,
  1,
  3,
];

var s2 = [
  2,
  1,
  3,
  1,
  0,
  1,
  0,
  1,
  0,
];

var s3_a = plus(s1, s2);

var s3_b = plus(s2, s1);

var s3 = [
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
];

var s3_id = [
  2,
  1,
  2,
  1,
  0,
  1,
  2,
  1,
  2,
];

var s4b = plus(s3, s3_id);

var s5 = plus(s3_id, s3_id);

void main() {
  print('Avalanche of topplings:\n');
  print(pileString(s4));
  while (!isStable(s4)) {
    topple(s4);
    print(pileString(s4));
  }
  print('Commutative additions:\n');
  while (!isStable(s3_a)) {
    topple(s3_a);
  }
  while (!isStable(s3_b)) {
    topple(s3_b);
  }
  print(pileString(s1) + '\nplus\n\n' + pileString(s2) + '\nequals\n\n' + pileString(s3_a));
  print('and\n\n' + pileString(s2) + '\nplus\n\n' + pileString(s1) + '\nalso equals\n\n' + pileString(s3_b));
  print('Addition of identity sandpile:\n');
  while (!isStable(s4b)) {
    topple(s4b);
  }
  print(pileString(s3) + '\nplus\n\n' + pileString(s3_id) + '\nequals\n\n' + pileString(s4b));
  print('Addition of identities:\n');
  while (!isStable(s5)) {
    topple(s5);
  }
  print(pileString(s3_id) + '\nplus\n\n' + pileString(s3_id) + '\nequals\n\n' + pileString(s5));
}
