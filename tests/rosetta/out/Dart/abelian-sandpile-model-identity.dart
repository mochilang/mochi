// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:01Z
List<List<int>> neighborsList() {
  return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]];
}

List<int> plus(List<int> a, List<int> b) {
  List<int> res = [];
  var i = 0;
  while (i.toString().compareTo(a.length.toString()) < 0) {
    res = List.from(res)..add(a[i] + b[i]);
    i = (i as num) + 1;
  }
  return res;
}

bool isStable(List<int> p) {
  for (var v in p) {
    if (v > 3) {
      return false;
    }
  }
  return true;
}

int topple(List<int> p) {
  var neighbors = neighborsList();
  var i = 0;
  while (i.toString().compareTo(p.length.toString()) < 0) {
    if (p[i] > 3) {
      p[i] = (p[i] - 4 as int);
      var nbs = neighbors[i];
      var _iter0 = nbs;
      for (var j in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
        p[j] = (p[j] + 1 as int);
      }
      return 0;
    }
    i = (i as num) + 1;
  }
  return 0;
}

String pileString(List<int> p) {
  var s = '';
  var r = 0;
  while (r.toString().compareTo(3.toString()) < 0) {
    var c = 0;
    while (c.toString().compareTo(3.toString()) < 0) {
      s = s + p[(3 * (r as num) as num) + (c as num)].toString() + ' ';
      c = (c as num) + 1;
    }
    s = s + '
';
    r = (r as num) + 1;
  }
  return s;
}

var s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3];

var s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3];

var s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0];

var s3_a = plus(s1, s2);

var s3_b = plus(s2, s1);

var s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3];

var s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2];

var s4b = plus(s3, s3_id);

var s5 = plus(s3_id, s3_id);

void main() {
  print('Avalanche of topplings:
');
  print(pileString(s4));
  while (!isStable(s4)) {
    topple(s4);
    print(pileString(s4));
  }
  print('Commutative additions:
');
  while (!isStable(s3_a)) {
    topple(s3_a);
  }
  while (!isStable(s3_b)) {
    topple(s3_b);
  }
  print(pileString(s1) + '
plus

' + pileString(s2) + '
equals

' + pileString(s3_a));
  print('and

' + pileString(s2) + '
plus

' + pileString(s1) + '
also equals

' + pileString(s3_b));
  print('Addition of identity sandpile:
');
  while (!isStable(s4b)) {
    topple(s4b);
  }
  print(pileString(s3) + '
plus

' + pileString(s3_id) + '
equals

' + pileString(s4b));
  print('Addition of identities:
');
  while (!isStable(s5)) {
    topple(s5);
  }
  print(pileString(s3_id) + '
plus

' + pileString(s3_id) + '
equals

' + pileString(s5));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
