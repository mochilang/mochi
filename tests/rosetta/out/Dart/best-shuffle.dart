// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:22Z
int nextRand(int seed) {
  return (seed * 1664525 + 1013904223) % 2147483647;
}

List<any> shuffleChars(String s, int seed) {
  List<String> chars = [];
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    chars = List.from(chars)..add(s.toString().substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  var sd = seed;
  var idx = chars.length - 1;
  while (idx.toString().compareTo(0.toString()) > 0) {
    sd = nextRand(sd);
    var j = (sd as num) % (((idx as num) + 1) as num);
    var tmp = chars[idx];
    chars[idx] = chars[j];
    chars[j] = tmp;
    idx = (idx as num) - 1;
  }
  var res = '';
  i = 0;
  while (i.toString().compareTo(chars.length.toString()) < 0) {
    res = (res as num) + (chars[i] as num);
    i = (i as num) + 1;
  }
  return [res, sd];
}

List<any> bestShuffle(String s, int seed) {
  var r = shuffleChars(s, seed);
  var t = r[0];
  var sd = r[1];
  List<String> arr = [];
  var i = 0;
  while (i.toString().compareTo(t.length.toString()) < 0) {
    arr = List.from(arr)..add(t.toString().substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  i = 0;
  while (i.toString().compareTo(arr.length.toString()) < 0) {
    var j = 0;
    while (j.toString().compareTo(arr.length.toString()) < 0) {
      if (i != j && arr[i] != s.toString().substring(j, (j as num) + 1) && arr[j] != s.toString().substring(i, (i as num) + 1)) {
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
        break;
      }
      j = (j as num) + 1;
    }
    i = (i as num) + 1;
  }
  var count = 0;
  i = 0;
  while (i.toString().compareTo(arr.length.toString()) < 0) {
    if (arr[i] == s.toString().substring(i, (i as num) + 1)) {
      count = (count as num) + 1;
    }
    i = (i as num) + 1;
  }
  var out = '';
  i = 0;
  while (i.toString().compareTo(arr.length.toString()) < 0) {
    out = (out as num) + (arr[i] as num);
    i = (i as num) + 1;
  }
  return [out, sd, count];
}

void main() {
  var ts = ['abracadabra', 'seesaw', 'elk', 'grrrrrr', 'up', 'a'];
  var seed = 1;
  var i = 0;
  while (i.toString().compareTo(ts.length.toString()) < 0) {
    var r = bestShuffle(ts[i], seed);
    var shuf = r[0];
    seed = r[1];
    var cnt = r[2];
    print(ts[i] + ' -> ' + shuf + ' (' + cnt.toString() + ')');
    i = (i as num) + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
