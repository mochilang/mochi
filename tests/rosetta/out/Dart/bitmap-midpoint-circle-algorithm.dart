// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:35Z
List<List<String>> initGrid(int size) {
  List<List<String>> g = [];
  num y = 0;
  while ((y as num) < size) {
    List<String> row = [];
    num x = 0;
    while ((x as num) < size) {
      row = List.from(row)..add(' ');
      x = (x as num) + 1;
    }
    g = List.from(g)..add(row);
    y = (y as num) + 1;
  }
  return g;
}

void _set(List<List<String>> g, int x, int y) {
  if (x >= 0 && x < g[0].length && y >= 0 && y < g.length) {
    g[y][x] = '#';
  }
}

List<List<String>> circle(int r) {
  var size = r * 2 + 1;
  var g = initGrid(size);
  var x = r;
  num y = 0;
  var err = 1 - r;
  while ((y as num) <= (x as num)) {
    _set(g, r + (x as num), r + (y as num));
    _set(g, r + (y as num), r + (x as num));
    _set(g, r - (x as num), r + (y as num));
    _set(g, r - (y as num), r + (x as num));
    _set(g, r - (x as num), r - (y as num));
    _set(g, r - (y as num), r - (x as num));
    _set(g, r + (x as num), r - (y as num));
    _set(g, r + (y as num), r - (x as num));
    y = (y as num) + 1;
    if ((err as num) < 0) {
      err = ((err as num) + (2 * (y as num) as num) as num) + 1;
    }
    else {
      x = (x as num) - 1;
      err = ((err as num) + (2 * (((y as num) - (x as num)) as num) as num) as num) + 1;
    }
  }
  return g;
}

String trimRight(List<String> row) {
  var end = row.length;
  while ((end as num) > 0 && row[(end as num) - 1] == ' ') {
    end = (end as num) - 1;
  }
  var s = '';
  num i = 0;
  while ((i as num) < (end as num)) {
    s = s + row[i];
    i = (i as num) + 1;
  }
  return s;
}

var g = circle(10);

void main() {
  for (var row in g) {
    print(trimRight(row));
  }
}
