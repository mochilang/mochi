// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:27Z
List<List<String>> initGrid(int size) {
  List<List<String>> g = [];
  var y = 0;
  while (y.toString().compareTo(size.toString()) < 0) {
    List<String> row = [];
    var x = 0;
    while (x.toString().compareTo(size.toString()) < 0) {
      row = List.from(row)..add(' ');
      x = (x as num) + 1;
    }
    g = List.from(g)..add(row);
    y = (y as num) + 1;
  }
  return g;
}

void set(List<List<String>> g, int x, int y) {
  if (x >= 0 && x < g[0].length && y >= 0 && y < g.length) {
    g[y][x] = '#';
  }
}

List<List<String>> circle(int r) {
  var size = r * 2 + 1;
  var g = initGrid(size);
  var x = r;
  var y = 0;
  var err = 1 - r;
  while (y.toString().compareTo(x.toString()) <= 0) {
    set(g, r + (x as num), r + (y as num));
    set(g, r + (y as num), r + (x as num));
    set(g, r - (x as num), r + (y as num));
    set(g, r - (y as num), r + (x as num));
    set(g, r - (x as num), r - (y as num));
    set(g, r - (y as num), r - (x as num));
    set(g, r + (x as num), r - (y as num));
    set(g, r + (y as num), r - (x as num));
    y = (y as num) + 1;
    if (err.toString().compareTo(0.toString()) < 0) {
      err = ((err as num) + (2 * (y as num) as num) as num) + 1;
    }
    else {
      x = (x as num) - 1;
      err = ((err as num) + (2 * (((y as num) - (x as num)) as num) as num) as num) + 1;
    }
  }
  return g;
}

String trimRight(List<String> row) {
  var end = row.length;
  while (end.toString().compareTo(0.toString()) > 0 && row[(end as num) - 1] == ' ') {
    end = (end as num) - 1;
  }
  var s = '';
  var i = 0;
  while (i.toString().compareTo(end.toString()) < 0) {
    s = s + row[i];
    i = (i as num) + 1;
  }
  return s;
}

var g = circle(10);

void main() {
  for (var row in g) {
    print(trimRight(row));
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
