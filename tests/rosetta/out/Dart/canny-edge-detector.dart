// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:56Z
var PI = 3.141592653589793;

List<List<double>> conv2d(List<List<double>> img, List<List<double>> k) {
  var h = img.length;
  var w = img[0].length;
  var n = k.length;
  var half = (n as num) / 2;
  List<List<double>> out = [];
  num y = 0;
  while ((y as num) < (h as num)) {
    List<double> row = [];
    num x = 0;
    while ((x as num) < (w as num)) {
      num sum = 0;
      num j = 0;
      while ((j as num) < (n as num)) {
        num i = 0;
        while ((i as num) < (n as num)) {
          var yy = ((y as num) + (j as num) as num) - (half as num);
          if ((yy as num) < 0) {
            yy = 0;
          }
          if ((yy as num) >= (h as num)) {
            yy = (h as num) - 1;
          }
          var xx = ((x as num) + (i as num) as num) - (half as num);
          if ((xx as num) < 0) {
            xx = 0;
          }
          if ((xx as num) >= (w as num)) {
            xx = (w as num) - 1;
          }
          sum = (sum as num) + img[yy][xx] * k[j][i];
          i = (i as num) + 1;
        }
        j = (j as num) + 1;
      }
      row = List.from(row)..add(sum);
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

List<List<double>> gradient(List<List<double>> img) {
  var hx = [
    [-1, 0, 1],
    [-2, 0, 2],
    [-1, 0, 1],
  ];
  var hy = [
    [1, 2, 1],
    [0, 0, 0],
    [-1, -2, -1],
  ];
  var gx = conv2d(img, hx);
  var gy = conv2d(img, hy);
  var h = img.length;
  var w = img[0].length;
  List<List<double>> out = [];
  num y = 0;
  while ((y as num) < (h as num)) {
    List<double> row = [];
    num x = 0;
    while ((x as num) < (w as num)) {
      var g = ((gx[y][x] as num) * (gx[y][x] as num) as num) + ((gy[y][x] as num) * (gy[y][x] as num) as num);
      row = List.from(row)..add(g);
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

List<List<int>> threshold(List<List<double>> g, double t) {
  var h = g.length;
  var w = g[0].length;
  List<List<int>> out = [];
  num y = 0;
  while ((y as num) < (h as num)) {
    List<int> row = [];
    num x = 0;
    while ((x as num) < (w as num)) {
      if (g[y][x] >= t) {
        row = List.from(row)..add(1);
      }
      else {
        row = List.from(row)..add(0);
      }
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

void printMatrix(List<List<int>> m) {
  num y = 0;
  while ((y as num) < m.length) {
    var line = '';
    num x = 0;
    while ((x as num) < m[0].length) {
      line = line + m[y][x].toString();
      if ((x as num) < m[0].length - 1) {
        line = line + ' ';
      }
      x = (x as num) + 1;
    }
    print(line);
    y = (y as num) + 1;
  }
}

void _main() {
  var img = [
    [
    0,
    0,
    0,
    0,
    0,
  ],
    [
    0,
    255,
    255,
    255,
    0,
  ],
    [
    0,
    255,
    255,
    255,
    0,
  ],
    [
    0,
    255,
    255,
    255,
    0,
  ],
    [
    0,
    0,
    0,
    0,
    0,
  ],
  ];
  var g = gradient(img);
  var edges = threshold(g, 1020 * 1020);
  printMatrix(edges);
}

void main() {
  _main();
}
