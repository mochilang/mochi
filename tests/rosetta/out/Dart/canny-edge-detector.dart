// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:36Z
var PI = 3.141592653589793;

List<List<double>> conv2d(List<List<double>> img, List<List<double>> k) {
  var h = img.length;
  var w = img[0].length;
  var n = k.length;
  var half = (n as num) / 2;
  List<List<double>> out = [];
  var y = 0;
  while (y.toString().compareTo(h.toString()) < 0) {
    List<double> row = [];
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      var sum = 0;
      var j = 0;
      while (j.toString().compareTo(n.toString()) < 0) {
        var i = 0;
        while (i.toString().compareTo(n.toString()) < 0) {
          var yy = ((y as num) + (j as num) as num) - (half as num);
          if (yy.toString().compareTo(0.toString()) < 0) {
            yy = 0;
          }
          if (yy.toString().compareTo(h.toString()) >= 0) {
            yy = (h as num) - 1;
          }
          var xx = ((x as num) + (i as num) as num) - (half as num);
          if (xx.toString().compareTo(0.toString()) < 0) {
            xx = 0;
          }
          if (xx.toString().compareTo(w.toString()) >= 0) {
            xx = (w as num) - 1;
          }
          sum = (sum as num) + img[yy][xx] * k[j][i];
          i = (i as num) + 1;
        }
        j = (j as num) + 1;
      }
      row = List.from(row)..add(sum);
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

List<List<double>> gradient(List<List<double>> img) {
  var hx = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]];
  var hy = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]];
  var gx = conv2d(img, hx);
  var gy = conv2d(img, hy);
  var h = img.length;
  var w = img[0].length;
  List<List<double>> out = [];
  var y = 0;
  while (y.toString().compareTo(h.toString()) < 0) {
    List<double> row = [];
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      var g = ((gx[y][x] as num) * (gx[y][x] as num) as num) + ((gy[y][x] as num) * (gy[y][x] as num) as num);
      row = List.from(row)..add(g);
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

List<List<int>> threshold(List<List<double>> g, double t) {
  var h = g.length;
  var w = g[0].length;
  List<List<int>> out = [];
  var y = 0;
  while (y.toString().compareTo(h.toString()) < 0) {
    List<int> row = [];
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      if (g[y][x] >= t) {
        row = List.from(row)..add(1);
      }
      else {
        row = List.from(row)..add(0);
      }
      x = (x as num) + 1;
    }
    out = List.from(out)..add(row);
    y = (y as num) + 1;
  }
  return out;
}

void printMatrix(List<List<int>> m) {
  var y = 0;
  while (y.toString().compareTo(m.length.toString()) < 0) {
    var line = '';
    var x = 0;
    while (x.toString().compareTo(m[0].length.toString()) < 0) {
      line = line + m[y][x].toString();
      if (x.toString().compareTo(m[0].length - 1.toString()) < 0) {
        line = line + ' ';
      }
      x = (x as num) + 1;
    }
    print(line);
    y = (y as num) + 1;
  }
}

void main() {
  var img = [[0, 0, 0, 0, 0], [0, 255, 255, 255, 0], [0, 255, 255, 255, 0], [0, 255, 255, 255, 0], [0, 0, 0, 0, 0]];
  var g = gradient(img);
  var edges = threshold(g, 1020 * 1020);
  printMatrix(edges);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
