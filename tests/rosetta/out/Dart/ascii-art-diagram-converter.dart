// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:09Z
import 'dart:io';
import 'dart:convert';

void main() {
  print('Diagram after trimming whitespace and removal of blank lines:
');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|                      ID                       |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|                    QDCOUNT                    |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|                    ANCOUNT                    |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|                    NSCOUNT                    |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('|                    ARCOUNT                    |');
  print('+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+');
  print('
Decoded:
');
  print('Name     Bits  Start  End');
  print('=======  ====  =====  ===');
  print('ID        16      0    15');
  print('QR         1     16    16');
  print('Opcode     4     17    20');
  print('AA         1     21    21');
  print('TC         1     22    22');
  print('RD         1     23    23');
  print('RA         1     24    24');
  print('Z          3     25    27');
  print('RCODE      4     28    31');
  print('QDCOUNT   16     32    47');
  print('ANCOUNT   16     48    63');
  print('NSCOUNT   16     64    79');
  print('ARCOUNT   16     80    95');
  print('
Test string in hex:');
  print('78477bbf5496e12e1bf169a4');
  print('
Test string in binary:');
  print('011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100');
  print('
Unpacked:
');
  print('Name     Size  Bit pattern');
  print('=======  ====  ================');
  print('ID        16   0111100001000111');
  print('QR         1   0');
  print('Opcode     4   1111');
  print('AA         1   0');
  print('TC         1   1');
  print('RD         1   1');
  print('RA         1   1');
  print('Z          3   011');
  print('RCODE      4   1111');
  print('QDCOUNT   16   0101010010010110');
  print('ANCOUNT   16   1110000100101110');
  print('NSCOUNT   16   0001101111110001');
  print('ARCOUNT   16   0110100110100100');
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
