// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:12Z
var PI = 3.141592653589793;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while (n.toString().compareTo(10.toString()) <= 0) {
    var denom = double.parse((((2 * (n as num)) as num) * (((2 * (n as num) as num) + 1) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double cosApprox(double x) {
  var term = 1;
  var sum = 1;
  var n = 1;
  while (n.toString().compareTo(10.toString()) <= 0) {
    var denom = double.parse(((((2 * (n as num) as num) - 1) as num) * ((2 * (n as num)) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

var degreesIncr = 0.1 * PI / 180;

var turns = 2;

var stop = 360 * turns * 10 * degreesIncr;

var width = 600;

var centre = width / 2;

var a = 1;

var b = 20;

var theta = 0;

var count = 0;

void main() {
  while (theta < stop) {
    var r = a + b * theta;
    var x = (r as num) * cosApprox(theta);
    var y = (r as num) * sinApprox(theta);
    if (count % 100 == 0) {
      print(centre + (x as num).toString() + ',' + centre - (y as num).toString());
    }
    theta = theta + degreesIncr;
    count = (count + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
