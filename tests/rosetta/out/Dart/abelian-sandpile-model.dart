// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:31Z
var dim = 16;

List<List<int>> newPile(int d) {
  List<List<int>> b = [];
  num y = 0;
  while ((y as num) < d) {
    List<int> row = [];
    num x = 0;
    while ((x as num) < d) {
      row = List.from(row)..add(0);
      x = (x as num) + 1;
    }
    b = List.from(b)..add(row);
    y = (y as num) + 1;
  }
  return b;
}

List<List<int>> handlePile(List<List<int>> pile, int x, int y) {
  if (pile[y][x] >= 4) {
    pile[y][x] = pile[y][x] - 4;
    if (y > 0) {
      pile[y - 1][x] = pile[y - 1][x] + 1;
      if (pile[y - 1][x] >= 4) {
        pile = handlePile(pile, x, y - 1);
      }
    }
    if (x > 0) {
      pile[y][x - 1] = pile[y][x - 1] + 1;
      if (pile[y][x - 1] >= 4) {
        pile = handlePile(pile, x - 1, y);
      }
    }
    if (y < dim - 1) {
      pile[y + 1][x] = pile[y + 1][x] + 1;
      if (pile[y + 1][x] >= 4) {
        pile = handlePile(pile, x, y + 1);
      }
    }
    if (x < dim - 1) {
      pile[y][x + 1] = pile[y][x + 1] + 1;
      if (pile[y][x + 1] >= 4) {
        pile = handlePile(pile, x + 1, y);
      }
    }
    pile = handlePile(pile, x, y);
  }
  return pile;
}

void drawPile(List<List<int>> pile, int d) {
  var chars = [
    ' ',
    '░',
    '▓',
    '█',
  ];
  num row = 0;
  while ((row as num) < d) {
    var line = '';
    num col = 0;
    while ((col as num) < d) {
      var v = pile[row][col];
      if ((v as num) > 3) {
        v = 3;
      }
      line = (line as num) + (chars[v] as num);
      col = (col as num) + 1;
    }
    print(line);
    row = (row as num) + 1;
  }
}

void _main() {
  var pile = newPile(16);
  var hdim = 7;
  pile[hdim][hdim] = 16;
  pile = handlePile(pile, hdim, hdim);
  drawPile(pile, 16);
}

void main() {
  _main();
}
