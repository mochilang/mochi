// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:02Z
var dim = 16;

List<List<int>> newPile(int d) {
  List<List<int>> b = [];
  var y = 0;
  while (y.toString().compareTo(d.toString()) < 0) {
    List<int> row = [];
    var x = 0;
    while (x.toString().compareTo(d.toString()) < 0) {
      row = List.from(row)..add(0);
      x = (x as num) + 1;
    }
    b = List.from(b)..add(row);
    y = (y as num) + 1;
  }
  return b;
}

List<List<int>> handlePile(List<List<int>> pile, int x, int y) {
  if (pile[y][x] >= 4) {
    pile[y][x] = (pile[y][x] - 4 as int);
    if (y > 0) {
      pile[y - 1][x] = (pile[y - 1][x] + 1 as int);
      if (pile[y - 1][x] >= 4) {
        pile = handlePile(pile, x, y - 1);
      }
    }
    if (x > 0) {
      pile[y][x - 1] = (pile[y][x - 1] + 1 as int);
      if (pile[y][x - 1] >= 4) {
        pile = handlePile(pile, x - 1, y);
      }
    }
    if (y < dim - 1) {
      pile[y + 1][x] = (pile[y + 1][x] + 1 as int);
      if (pile[y + 1][x] >= 4) {
        pile = handlePile(pile, x, y + 1);
      }
    }
    if (x < dim - 1) {
      pile[y][x + 1] = (pile[y][x + 1] + 1 as int);
      if (pile[y][x + 1] >= 4) {
        pile = handlePile(pile, x + 1, y);
      }
    }
    pile = handlePile(pile, x, y);
  }
  return pile;
}

void drawPile(List<List<int>> pile, int d) {
  var chars = [' ', '░', '▓', '█'];
  var row = 0;
  while (row.toString().compareTo(d.toString()) < 0) {
    var line = '';
    var col = 0;
    while (col.toString().compareTo(d.toString()) < 0) {
      var v = pile[row][col];
      if (v.toString().compareTo(3.toString()) > 0) {
        v = 3;
      }
      line = (line as num) + (chars[v] as num);
      col = (col as num) + 1;
    }
    print(line);
    row = (row as num) + 1;
  }
}

void main() {
  var pile = newPile(16);
  var hdim = 7;
  pile[hdim][hdim] = 16;
  pile = handlePile(pile, hdim, hdim);
  drawPile(pile, 16);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
