// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:06Z
String poly(int p) {
  String s = '';
  int coef = 1;
  var i = p;
  if (coef != 1) {
    s = s + coef.toString();
  }
  while (i.toString().compareTo(0.toString()) > 0) {
    s = s + 'x';
    if (i != 1) {
      s = s + '^' + i.toString();
    }
    coef = int.parse((((coef as num) * (i as num) as num) / (((p - (i as num) as num) + 1) as num)));
    var d = coef;
    if (((p - (((i as num) - 1) as num)) as num) % 2 == 1) {
      d = -(d as num);
    }
    if (d.toString().compareTo(0.toString()) < 0) {
      s = s + ' - ' + -(d as num).toString();
    }
    else {
      s = s + ' + ' + d.toString();
    }
    i = (i as num) - 1;
  }
  if (s == '') {
    s = '1';
  }
  return s;
}

bool aks(int n) {
  if (n < 2) {
    return false;
  }
  int c = n;
  var i = 1;
  while (i.toString().compareTo(n.toString()) < 0) {
    if ((c as num) % n != 0) {
      return false;
    }
    c = int.parse((((c as num) * ((n - (i as num)) as num) as num) / (((i as num) + 1) as num)));
    i = (i as num) + 1;
  }
  return true;
}

void main() {
  var p = 0;
  while (p.toString().compareTo(7.toString()) <= 0) {
    print(p.toString() + ':  ' + poly(p));
    p = (p as num) + 1;
  }
  var first = true;
  p = 2;
  String line = '';
  while (p.toString().compareTo(50.toString()) < 0) {
    if (aks(p)) {
      if (first != null) {
        line = line + p.toString();
        first = false;
      }
      else {
        line = line + ' ' + p.toString();
      }
    }
    p = (p as num) + 1;
  }
  print(line);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
