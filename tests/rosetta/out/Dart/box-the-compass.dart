// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:20Z
import 'dart:io';
import 'dart:convert';

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while (n > 0) {
    res = res + ' ';
    n = n - 1;
  }
  return res + s;
}

String padRight(String s, int w) {
  var out = s;
  var i = s.length;
  while (i < w) {
    out = out + ' ';
    i = (i + 1 as int);
  }
  return out;
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = (i + 1 as int);
  }
  return -1;
}

String format2(double f) {
  var s = f.toString();
  var idx = indexOf(s, '.');
  if (idx < 0) {
    s = s + '.00';
  }
  else {
    var need = idx + 3;
    if (s.length > need) {
      s = s.toString().substring(0, need);
    }
    else {
      while (s.length < need) {
        s = s + '0';
      }
    }
  }
  return s;
}

int cpx(double h) {
  var x = int.parse(((h / 11.25) + 0.5));
  x = x % 32;
  if (x < 0) {
    x = x + 32;
  }
  return x;
}

var compassPoint = ['North', 'North by east', 'North-northeast', 'Northeast by north', 'Northeast', 'Northeast by east', 'East-northeast', 'East by north', 'East', 'East by south', 'East-southeast', 'Southeast by east', 'Southeast', 'Southeast by south', 'South-southeast', 'South by east', 'South', 'South by west', 'South-southwest', 'Southwest by south', 'Southwest', 'Southwest by west', 'West-southwest', 'West by south', 'West', 'West by north', 'West-northwest', 'Northwest by west', 'Northwest', 'Northwest by north', 'North-northwest', 'North by west'];

String degrees2compasspoint(double h) {
  return compassPoint[cpx(h)];
}

var headings = [0, 16.87, 16.88, 33.75, 50.62, 50.63, 67.5, 84.37, 84.38, 101.25, 118.12, 118.13, 135, 151.87, 151.88, 168.75, 185.62, 185.63, 202.5, 219.37, 219.38, 236.25, 253.12, 253.13, 270, 286.87, 286.88, 303.75, 320.62, 320.63, 337.5, 354.37, 354.38];

var i = 0;

void main() {
  print('Index  Compass point         Degree');
  while (i < headings.length) {
    var h = headings[i];
    var idx = i % 32 + 1;
    var cp = degrees2compasspoint(h);
    print(padLeft(idx.toString(), 4) + '   ' + padRight(cp, 19) + ' ' + format2(h) + '°');
    i = (i + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
