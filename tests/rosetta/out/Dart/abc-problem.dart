// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:36Z
import 'dart:io';
import 'dart:convert';

List<String> fields(String s) {
  List<String> res = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    var c = s.substring(i, i + 1);
    if (c == ' ') {
      if (cur.length > 0) {
        res = List.from(res)..add(cur);
        cur = '';
      }
    }
    else {
      cur = cur + c;
    }
    i = i + 1;
  }
  if (cur.length > 0) {
    res = List.from(res)..add(cur);
  }
  return res;
}

bool canSpell(String word, List<String> blks) {
  if (word.length == 0) {
    return true;
  }
  var c = lower(word.substring(0, 1));
  var i = 0;
  while (i < blks.length) {
    var b = blks[i];
    if (c == lower(((b is String) ? b.substring(0, 1) : (b as List).sublist(0, 1))) || c == lower(((b is String) ? b.substring(1, 2) : (b as List).sublist(1, 2)))) {
      List<String> rest = [];
      var j = 0;
      while (j < blks.length) {
        if (j != i) {
          rest = List.from(rest)..add(blks[j]);
        }
        j = j + 1;
      }
      if (canSpell(word.substring(1, word.length), rest)) {
        return true;
      }
    }
    i = i + 1;
  }
  return false;
}

Function newSpeller(String blocks) {
  var bl = fields(blocks);
  return (w) => canSpell(w, bl);
}

void _main() {
  var sp = newSpeller('BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM');
  for (var word in ['A', 'BARK', 'BOOK', 'TREAT', 'COMMON', 'SQUAD', 'CONFUSE']) {
    print(word + ' ' + sp(word).toString());
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
