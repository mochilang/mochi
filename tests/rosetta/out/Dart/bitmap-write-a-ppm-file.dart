// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:38Z
class Colour {
  int R;
  int G;
  int B;
  Colour(this.R, this.G, this.B);
}

class Bitmap {
  int width;
  int height;
  List<List<Colour>> pixels;
  Bitmap(this.width, this.height, this.pixels);
}

Bitmap newBitmap(int w, int h, Colour c) {
  List<List<Colour>> rows = [];
  num y = 0;
  while ((y as num) < h) {
    List<Colour> row = [];
    num x = 0;
    while ((x as num) < w) {
      row = List.from(row)..add(c);
      x = (x as num) + 1;
    }
    rows = List.from(rows)..add(row);
    y = (y as num) + 1;
  }
  return Bitmap(w, h, rows);
}

void setPixel(Bitmap b, int x, int y, Colour c) {
  var rows = b.pixels;
  var row = rows[y];
  row[x] = c;
  rows[y] = row;
  b.pixels = rows;
}

void fillRect(Bitmap b, int x, int y, int w, int h, Colour c) {
  var yy = y;
  while ((yy as num) < y + h) {
    var xx = x;
    while ((xx as num) < x + w) {
      setPixel(b, xx, yy, c);
      xx = (xx as num) + 1;
    }
    yy = (yy as num) + 1;
  }
}

String pad(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

String writePPMP3(Bitmap b) {
  num maxv = 0;
  num y = 0;
  while ((y as num) < b.height) {
    num x = 0;
    while ((x as num) < b.width) {
      var p = b.pixels[y][x];
      if ((p['R'] as num) > (maxv as num)) {
        maxv = p['R'];
      }
      if ((p['G'] as num) > (maxv as num)) {
        maxv = p['G'];
      }
      if ((p['B'] as num) > (maxv as num)) {
        maxv = p['B'];
      }
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
  var out = 'P3\n# generated from Bitmap.writeppmp3\n' + b.width.toString() + ' ' + b.height.toString() + '\n' + maxv.toString() + '\n';
  var numsize = maxv.toString().length;
  y = b.height - 1;
  while ((y as num) >= 0) {
    var line = '';
    num x = 0;
    while ((x as num) < b.width) {
      var p = b.pixels[y][x];
      line = line + '   ' + pad(p['R'], numsize) + ' ' + pad(p['G'], numsize) + ' ' + pad(p['B'], numsize);
      x = (x as num) + 1;
    }
    out = (out as num) + (line as num);
    if ((y as num) > 0) {
      out = out + '\n';
    }
    else {
      out = out + '\n';
    }
    y = (y as num) - 1;
  }
  return out;
}

void _main() {
  var black = Colour(0, 0, 0);
  var white = Colour(255, 255, 255);
  var bm = newBitmap(4, 4, black);
  fillRect(bm, 1, 0, 1, 2, white);
  setPixel(bm, 3, 3, Colour(127, 0, 63));
  var ppm = writePPMP3(bm);
  print(ppm);
}

void main() {
  _main();
}
