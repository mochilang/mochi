// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:28Z
class Colour {
  int R;
  int G;
  int B;
  Colour(this.R, this.G, this.B);
}

class Bitmap {
  int width;
  int height;
  List<List<Colour>> pixels;
  Bitmap(this.width, this.height, this.pixels);
}

Bitmap newBitmap(int w, int h, Colour c) {
  List<List<Colour>> rows = [];
  var y = 0;
  while (y.toString().compareTo(h.toString()) < 0) {
    List<Colour> row = [];
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      row = List.from(row)..add(c);
      x = (x as num) + 1;
    }
    rows = List.from(rows)..add(row);
    y = (y as num) + 1;
  }
  return Bitmap(w, h, rows);
}

void setPixel(Bitmap b, int x, int y, Colour c) {
  var rows = b.pixels;
  var row = rows[y];
  row[x] = c;
  rows[y] = row;
  b.pixels = rows;
}

void fillRect(Bitmap b, int x, int y, int w, int h, Colour c) {
  var yy = y;
  while (yy.toString().compareTo(y + h.toString()) < 0) {
    var xx = x;
    while (xx.toString().compareTo(x + w.toString()) < 0) {
      setPixel(b, xx, yy, c);
      xx = (xx as num) + 1;
    }
    yy = (yy as num) + 1;
  }
}

String pad(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

String writePPMP3(Bitmap b) {
  var maxv = 0;
  var y = 0;
  while (y.toString().compareTo(b.height.toString()) < 0) {
    var x = 0;
    while (x.toString().compareTo(b.width.toString()) < 0) {
      var p = b.pixels[y][x];
      if (p['R'].toString().compareTo(maxv.toString()) > 0) {
        maxv = p['R'];
      }
      if (p['G'].toString().compareTo(maxv.toString()) > 0) {
        maxv = p['G'];
      }
      if (p['B'].toString().compareTo(maxv.toString()) > 0) {
        maxv = p['B'];
      }
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
  var out = 'P3
# generated from Bitmap.writeppmp3
' + b.width.toString() + ' ' + b.height.toString() + '
' + maxv.toString() + '
';
  var numsize = maxv.toString().length;
  y = b.height - 1;
  while (y.toString().compareTo(0.toString()) >= 0) {
    var line = '';
    var x = 0;
    while (x.toString().compareTo(b.width.toString()) < 0) {
      var p = b.pixels[y][x];
      line = line + '   ' + pad(p['R'], numsize) + ' ' + pad(p['G'], numsize) + ' ' + pad(p['B'], numsize);
      x = (x as num) + 1;
    }
    out = (out as num) + (line as num);
    if (y.toString().compareTo(0.toString()) > 0) {
      out = out + '
';
    }
    else {
      out = out + '
';
    }
    y = (y as num) - 1;
  }
  return out;
}

void main() {
  var black = Colour(0, 0, 0);
  var white = Colour(255, 255, 255);
  var bm = newBitmap(4, 4, black);
  fillRect(bm, 1, 0, 1, 2, white);
  setPixel(bm, 3, 3, Colour(127, 0, 63));
  var ppm = writePPMP3(bm);
  print(ppm);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
