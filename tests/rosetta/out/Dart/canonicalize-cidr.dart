// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:57Z
List<String> split(String s, String sep) {
  List<String> parts = [];
  var cur = '';
  num i = 0;
  while ((i as num) < s.length) {
    if (sep.length > 0 && ((i as num) + sep.length as num) <= s.length && s.toString().substring(i, (i as num) + sep.length) == sep) {
      parts = List.from(parts)..add(cur);
      cur = '';
      i = (i as num) + sep.length;
    }
    else {
      cur = cur + s.substring(i, (i as num) + 1);
      i = (i as num) + 1;
    }
  }
  parts = List.from(parts)..add(cur);
  return parts;
}

String join(List<String> xs, String sep) {
  var res = '';
  num i = 0;
  while ((i as num) < xs.length) {
    if ((i as num) > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = (i as num) + 1;
  }
  return res;
}

String repeat(String ch, int n) {
  var out = '';
  num i = 0;
  while ((i as num) < n) {
    out = out + ch;
    i = (i as num) + 1;
  }
  return out;
}

int parseIntStr(String str) {
  num i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  num n = 0;
  var digits = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  };
  while ((i as num) < str.length) {
    n = ((n as num) * 10 as num) + (digits[str.substring(i, (i as num) + 1)] as num);
    i = (i as num) + 1;
  }
  if (neg != null) {
    n = -(n as num);
  }
  return n;
}

String toBinary(int n, int bits) {
  var b = '';
  var val = n;
  num i = 0;
  while ((i as num) < bits) {
    b = (val as num) % 2.toString() + b;
    val = int.parse(((val as num) / 2));
    i = (i as num) + 1;
  }
  return b;
}

int binToInt(String bits) {
  num n = 0;
  num i = 0;
  while ((i as num) < bits.length) {
    n = ((n as num) * 2 as num) + parseIntStr(bits.substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  return n;
}

String padRight(String s, int width) {
  var out = s;
  while (out.length < width) {
    out = out + ' ';
  }
  return out;
}

String canonicalize(String cidr) {
  var parts = split(cidr, '/');
  var dotted = parts[0];
  var size = parseIntStr(parts[1]);
  List<String> binParts = [];
  for (var p in split(dotted, '.')) {
    binParts = List.from(binParts)..add(toBinary(parseIntStr(p), 8));
  }
  var binary = join(binParts, '');
  binary = ((binary is String) ? binary.substring(0, size) : (binary as List).sublist(0, size)) + repeat('0', 32 - (size as num));
  List<String> canonParts = [];
  num i = 0;
  while ((i as num) < binary.length) {
    canonParts = List.from(canonParts)..add(binToInt(((binary is String) ? binary.substring(i, (i as num) + 8) : (binary as List).sublist(i, (i as num) + 8))).toString());
    i = (i as num) + 8;
  }
  return join(canonParts, '.') + '/' + parts[1];
}

var tests = [
  '87.70.141.1/22',
  '36.18.154.103/12',
  '62.62.197.11/29',
  '67.137.119.181/4',
  '161.214.74.21/24',
  '184.232.176.184/18',
];

void main() {
  for (var t in tests) {
    print(padRight(t, 18) + ' -> ' + canonicalize(t));
  }
}
