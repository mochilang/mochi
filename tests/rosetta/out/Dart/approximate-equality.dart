// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:12Z
double abs(double x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

double maxf(double a, double b) {
  if (a > b) {
    return a;
  }
  return b;
}

bool isClose(double a, double b) {
  var relTol = 1e-09;
  var t = abs(a - b);
  var u = (relTol as num) * maxf(abs(a), abs(b));
  return t.toString().compareTo(u.toString()) <= 0;
}

double sqrtApprox(double x) {
  var guess = x;
  var i = 0;
  while (i.toString().compareTo(10.toString()) < 0) {
    guess = (((guess as num) + (x / (guess as num) as num)) as num) / 2;
    i = (i as num) + 1;
  }
  return guess;
}

void main() {
  var root2 = sqrtApprox(2);
  var pairs = [[1.0000000000000002e+14, 1.0000000000000002e+14], [100.01, 100.011], [1.0000000000000002e+13 / 10000, 1.0000000000000001e+09], [0.001, 0.0010000001], [1.01e-22, 0], [(root2 as num) * (root2 as num), 2], [((-(root2 as num)) as num) * (root2 as num), -2], [1e+17, 1e+17], [3.141592653589793, 3.141592653589793]];
  var _iter0 = pairs;
  for (var pair in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    var a = pair[0];
    var b = pair[1];
    var s = (isClose(a, b) ? '≈' : '≉');
    print(a.toString() + ' ' + s + ' ' + b.toString());
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
