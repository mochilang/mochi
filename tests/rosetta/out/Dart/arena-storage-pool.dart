// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:59Z
List<int> poolPut(List<int> p, int x) {
  return List.from(p)..add(x);
}

Map<String, any> poolGet(List<int> p) {
  if (p.length == 0) {
    print('pool empty');
    return {'pool': p, 'val': 0};
  }
  var idx = p.length - 1;
  var v = p[idx];
  p = p.sublist(0, idx);
  return {'pool': p, 'val': v};
}

List<int> clearPool(List<int> p) {
  return [];
}

void _main() {
  List<int> pool = [];
  var i = 1;
  var j = 2;
  print((i as num) + (j as num).toString());
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  var res1 = poolGet(pool);
  pool = (res1['pool'] as List<int>);
  i = int.parse(res1['val']);
  var res2 = poolGet(pool);
  pool = (res2['pool'] as List<int>);
  j = int.parse(res2['val']);
  i = 4;
  j = 5;
  print((i as num) + (j as num).toString());
  pool = poolPut(pool, i);
  pool = poolPut(pool, j);
  i = 0;
  j = 0;
  pool = clearPool(pool);
  var res3 = poolGet(pool);
  pool = (res3['pool'] as List<int>);
  i = int.parse(res3['val']);
  var res4 = poolGet(pool);
  pool = (res4['pool'] as List<int>);
  j = int.parse(res4['val']);
  i = 7;
  j = 8;
  print((i as num) + (j as num).toString());
}

void main() {
  _main();
}
