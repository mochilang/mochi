// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:31Z
double PI = 3.141592653589793;

double TWO_PI = 6.283185307179586;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while ((n as num) <= 8) {
    var denom = double.parse((((2 * (n as num)) as num) * (((2 * (n as num) as num) + 1) as num)));
    term = (((-(term as num) as num) * x as num) * x as num) / (denom as num);
    sum = (sum as num) + (term as num);
    n = (n as num) + 1;
  }
  return sum;
}

double floor(double x) {
  var i = int.parse(x);
  if ((double.parse(i)) > x) {
    i = (i as num) - 1;
  }
  return double.parse(i);
}

double absFloat(double x) {
  if (x < 0) {
    return -(x as num);
  }
  return x;
}

int absInt(int n) {
  if (n < 0) {
    return -(n as num);
  }
  return n;
}

int parseIntStr(String str) {
  num i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  num n = 0;
  var digits = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  };
  while ((i as num) < str.length) {
    n = ((n as num) * 10 as num) + (digits[str.substring(i, (i as num) + 1)] as num);
    i = (i as num) + 1;
  }
  if (neg != null) {
    n = -(n as num);
  }
  return n;
}

List<int> parseDate(String s) {
  var y = parseIntStr(s.substring(0, 4));
  var m = parseIntStr(s.substring(5, 7));
  var d = parseIntStr(s.substring(8, 10));
  return [y, m, d];
}

bool leap(int y) {
  if (y % 400 == 0) {
    return true;
  }
  if (y % 100 == 0) {
    return false;
  }
  return y % 4 == 0;
}

int daysInMonth(int y, int m) {
  var feb = (leap(y) ? 29 : 28);
  var lengths = [
    31,
    feb,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31,
  ];
  return lengths[m - 1];
}

List<int> addDays(int y, int m, int d, int n) {
  var yy = y;
  var mm = m;
  var dd = d;
  if (n >= 0) {
    num i = 0;
    while ((i as num) < n) {
      dd = (dd as num) + 1;
      if ((dd as num) > daysInMonth(yy, mm)) {
        dd = 1;
        mm = (mm as num) + 1;
        if ((mm as num) > 12) {
          mm = 1;
          yy = (yy as num) + 1;
        }
      }
      i = (i as num) + 1;
    }
  }
  else {
    num i = 0;
    while ((i as num) > n) {
      dd = (dd as num) - 1;
      if ((dd as num) < 1) {
        mm = (mm as num) - 1;
        if ((mm as num) < 1) {
          mm = 12;
          yy = (yy as num) - 1;
        }
        dd = daysInMonth(yy, mm);
      }
      i = (i as num) - 1;
    }
  }
  return [yy, mm, dd];
}

String pad2(int n) {
  if (n < 10) {
    return '0' + n.toString();
  }
  return n.toString();
}

String dateString(int y, int m, int d) {
  return y.toString() + '-' + pad2(m) + '-' + pad2(d);
}

int day(int y, int m, int d) {
  var part1 = 367 * y;
  var part2 = int.parse(((7 * (int.parse((y + ((m + 9) ~/ 12))))) ~/ 4));
  var part3 = int.parse(((275 * m) ~/ 9));
  return ((((part1 as num) - (part2 as num) as num) + (part3 as num) as num) + d as num) - 730530;
}

void biorhythms(String birth, String target) {
  var bparts = parseDate(birth);
  var by = bparts[0];
  var bm = bparts[1];
  var bd = bparts[2];
  var tparts = parseDate(target);
  var ty = tparts[0];
  var tm = tparts[1];
  var td = tparts[2];
  var diff = absInt(day(ty, tm, td) - day(by, bm, bd));
  print('Born ' + birth + ', Target ' + target);
  print('Day ' + diff.toString());
  var cycles = ['Physical day ', 'Emotional day', 'Mental day   '];
  var lengths = [23, 28, 33];
  var quadrants = [
    ['up and rising', 'peak'],
    ['up but falling', 'transition'],
    ['down and falling', 'valley'],
    ['down but rising', 'transition'],
  ];
  num i = 0;
  while ((i as num) < 3) {
    var length = lengths[i];
    var cycle = cycles[i];
    var position = (diff as num) % (length as num);
    var quadrant = (((position as num) * 4) as num) / (length as num);
    var percent = sinApprox(2 * PI * (double.parse(position)) / (double.parse(length)));
    percent = floor((percent as num) * 1000) / 10;
    var description = '';
    if ((percent as num) > 95) {
      description = ' peak';
    }
    else 
    if ((percent as num) < (-95)) {
      description = ' valley';
    }
    else 
    if (absFloat(percent) < 5) {
      description = ' critical transition';
    }
    else {
      var daysToAdd = (((((quadrant as num) + 1) as num) * (length as num) as num) / 4 as num) - (position as num);
      var res = addDays(ty, tm, td, daysToAdd);
      var ny = res[0];
      var nm = res[1];
      var nd = res[2];
      var transition = dateString(ny, nm, nd);
      var trend = quadrants[quadrant][0];
      var next = quadrants[quadrant][1];
      var pct = percent.toString();
      if (!contains(pct, '.')) {
        pct = pct + '.0';
      }
      description = ' ' + pct + '% (' + trend + ', next ' + next + ' ' + transition + ')';
    }
    var posStr = position.toString();
    if ((position as num) < 10) {
      posStr = ' ' + posStr;
    }
    print((cycle as num) + (posStr as num) + ' : ' + description);
    i = (i as num) + 1;
  }
  print('');
}

void _main() {
  var pairs = [
    ['1943-03-09', '1972-07-11'],
    ['1809-01-12', '1863-11-19'],
    ['1809-02-12', '1863-11-19'],
  ];
  num idx = 0;
  while ((idx as num) < pairs.length) {
    var p = pairs[idx];
    biorhythms(p[0], p[1]);
    idx = (idx as num) + 1;
  }
}

void main() {
  _main();
}
