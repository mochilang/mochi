// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:01Z
import 'dart:io';
import 'dart:convert';

double PI = 3.141592653589793;

double TWO_PI = 6.283185307179586;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while (n <= 8) {
    var denom = double.parse(((2 * n) * (2 * n + 1)));
    term = -term * x * x / (denom as num);
    sum = (sum as num) + term;
    n = n + 1;
  }
  return sum;
}

double floor(double x) {
  var i = int.parse(x);
  if ((double.parse(i)) > x) {
    i = i - 1;
  }
  return double.parse(i);
}

double absFloat(double x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

int absInt(int n) {
  if (n < 0) {
    return -n;
  }
  return n;
}

int parseIntStr(String str) {
  var i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  var n = 0;
  var digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)];
    i = i + 1;
  }
  if (neg != null) {
    n = -n;
  }
  return n;
}

List<int> parseDate(String s) {
  var y = parseIntStr(s.substring(0, 4));
  var m = parseIntStr(s.substring(5, 7));
  var d = parseIntStr(s.substring(8, 10));
  return [y, m, d];
}

bool leap(int y) {
  if (y % 400 == 0) {
    return true;
  }
  if (y % 100 == 0) {
    return false;
  }
  return y % 4 == 0;
}

int daysInMonth(int y, int m) {
  var feb = (leap(y) ? 29 : 28);
  var lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  return lengths[m - 1];
}

List<int> addDays(int y, int m, int d, int n) {
  var yy = y;
  var mm = m;
  var dd = d;
  if (n >= 0) {
    var i = 0;
    while (i < n) {
      dd = dd + 1;
      if (dd > daysInMonth(yy, mm)) {
        dd = 1;
        mm = mm + 1;
        if (mm > 12) {
          mm = 1;
          yy = yy + 1;
        }
      }
      i = i + 1;
    }
  }
  else {
    var i = 0;
    while (i > n) {
      dd = dd - 1;
      if (dd < 1) {
        mm = mm - 1;
        if (mm < 1) {
          mm = 12;
          yy = yy - 1;
        }
        dd = daysInMonth(yy, mm);
      }
      i = i - 1;
    }
  }
  return [yy, mm, dd];
}

String pad2(int n) {
  if (n < 10) {
    return '0' + n.toString();
  }
  return n.toString();
}

String dateString(int y, int m, int d) {
  return y.toString() + '-' + pad2(m) + '-' + pad2(d);
}

int day(int y, int m, int d) {
  var part1 = 367 * y;
  var part2 = int.parse(((7 * (int.parse((y + ((m + 9) / 12))))) / 4));
  var part3 = int.parse(((275 * m) / 9));
  return part1 - part2 + part3 + d - 730530;
}

void biorhythms(String birth, String target) {
  var bparts = parseDate(birth);
  var by = bparts[0];
  var bm = bparts[1];
  var bd = bparts[2];
  var tparts = parseDate(target);
  var ty = tparts[0];
  var tm = tparts[1];
  var td = tparts[2];
  var diff = absInt(day(ty, tm, td) - day(by, bm, bd));
  print('Born ' + birth + ', Target ' + target);
  print('Day ' + diff.toString());
  var cycles = ['Physical day ', 'Emotional day', 'Mental day   '];
  var lengths = [23, 28, 33];
  var quadrants = [['up and rising', 'peak'], ['up but falling', 'transition'], ['down and falling', 'valley'], ['down but rising', 'transition']];
  var i = 0;
  while (i < 3) {
    var length = lengths[i];
    var cycle = cycles[i];
    var position = diff % length;
    var quadrant = (position * 4) / length;
    var percent = sinApprox(2 * PI * (double.parse(position)) / (double.parse(length)));
    percent = floor(percent * 1000) / 10;
    var description = '';
    if (percent > 95) {
      description = ' peak';
    }
    else 
    if (percent < (-95)) {
      description = ' valley';
    }
    else 
    if (absFloat(percent) < 5) {
      description = ' critical transition';
    }
    else {
      var daysToAdd = (quadrant + 1) * length / 4 - position;
      var res = addDays(ty, tm, td, daysToAdd);
      var ny = res[0];
      var nm = res[1];
      var nd = res[2];
      var transition = dateString(ny, nm, nd);
      var trend = quadrants[quadrant][0];
      var next = quadrants[quadrant][1];
      var pct = percent.toString();
      if (!contains(pct, '.')) {
        pct = pct + '.0';
      }
      description = ' ' + pct + '% (' + trend + ', next ' + next + ' ' + transition + ')';
    }
    var posStr = position.toString();
    if (position < 10) {
      posStr = ' ' + posStr;
    }
    print(cycle + posStr + ' : ' + description);
    i = i + 1;
  }
  print('');
}

void _main() {
  var pairs = [['1943-03-09', '1972-07-11'], ['1809-01-12', '1863-11-19'], ['1809-02-12', '1863-11-19']];
  var idx = 0;
  while (idx < pairs.length) {
    var p = pairs[idx];
    biorhythms(p[0], p[1]);
    idx = idx + 1;
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
