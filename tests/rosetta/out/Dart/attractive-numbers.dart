// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:53Z
import 'dart:io';
import 'dart:convert';

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

int countPrimeFactors(int n) {
  if (n == 1) {
    return 0;
  }
  if (isPrime(n)) {
    return 1;
  }
  var count = 0;
  var f = 2;
  while (true) {
    if (n % f == 0) {
      count = (count as num) + 1;
      n = (n / f as int);
      if (n == 1) {
        return count;
      }
      if (isPrime(n)) {
        f = n;
      }
    }
    else 
    if (f >= 3) {
      f = f + 2;
    }
    else {
      f = 3;
    }
  }
  return count;
}

String pad4(int n) {
  var s = n.toString();
  while (s.length < 4) {
    s = ' ' + s;
  }
  return s;
}

void _main() {
  var max = 120;
  print('The attractive numbers up to and including ' + max.toString() + ' are:');
  var count = 0;
  var line = '';
  var lineCount = 0;
  var i = 1;
  while (i.toString().compareTo(max.toString()) <= 0) {
    var c = countPrimeFactors(i);
    if (isPrime(c)) {
      line = line + pad4(i);
      count = (count as num) + 1;
      lineCount = lineCount + 1;
      if (lineCount == 20) {
        print(line);
        line = '';
        lineCount = 0;
      }
    }
    i = i + 1;
  }
  if (lineCount > 0) {
    print(line);
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
