// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:21Z
import 'dart:io';
import 'dart:convert';

List<int> primesUpTo(int n) {
  List<bool> sieve = [];
  var i = 0;
  while (i <= n) {
    sieve = List.from(sieve)..add(true);
    i = i + 1;
  }
  var p = 2;
  while (p * p <= n) {
    if (sieve[p] != null) {
      var m = p * p;
      while (m <= n) {
        sieve[m] = false;
        m = m + p;
      }
    }
    p = p + 1;
  }
  List<int> res = [];
  var x = 2;
  while (x <= n) {
    if (sieve[x] != null) {
      res = List.from(res)..add(x);
    }
    x = x + 1;
  }
  return res;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    var idx = 0;
    var i = 1;
    while (i < tmp.length) {
      if (tmp[i].toString().compareTo(min.toString()) < 0) {
        min = tmp[i];
        idx = i;
      }
      i = i + 1;
    }
    res = List.from(res)..add(min);
    List<int> out = [];
    var j = 0;
    while (j < tmp.length) {
      if (j != idx) {
        out = List.from(out)..add(tmp[j]);
      }
      j = j + 1;
    }
    tmp = out;
  }
  return res;
}

String commatize(int n) {
  var s = n.toString();
  var i = s.length - 3;
  while (i >= 1) {
    s = ((s is String) ? s.substring(0, i) : (s as List).sublist(0, i)) + ',' + ((s is String) ? s.substring(i, s.length) : (s as List).sublist(i, s.length));
    i = i - 3;
  }
  return s;
}

var primes = primesUpTo(3200000);

Map<String, any> getBrilliant(int digits, int limit, bool countOnly) {
  List<int> brilliant = [];
  var count = 0;
  var pow = 1;
  var next = 999999999999999;
  var k = 1;
  while (k <= digits) {
    List<int> s = [];
    for (var p in primes) {
      if (p >= pow * 10) {
        break;
      }
      if (p > pow) {
        s = List.from(s)..add(p);
      }
    }
    var i = 0;
    while (i < s.length) {
      var j = i;
      while (j < s.length) {
        var prod = s[i] * s[j];
        if (prod < limit) {
          if (countOnly) {
            count = (count as num) + 1;
          }
          else {
            brilliant = List.from(brilliant)..add(prod);
          }
        }
        else {
          if (prod < next) {
            next = prod;
          }
          break;
        }
        j = j + 1;
      }
      i = i + 1;
    }
    pow = pow * 10;
    k = k + 1;
  }
  if (countOnly) {
    return {'bc': count, 'next': next};
  }
  return {'bc': brilliant, 'next': next};
}

void main() {
  print('First 100 brilliant numbers:');
  var r = getBrilliant(2, 10000, false);
  var br = sortInts(r['bc']);
  br = ((br is String) ? br.substring(0, 100) : (br as List).sublist(0, 100));
  var i = 0;
  while (i < br.length) {
    print([br[i].toString().padStart(4, ' ') + ' ', false].join(' '));
    if ((i + 1) % 10 == 0) {
      print(['', true].join(' '));
    }
    i = i + 1;
  }
  print(['', true].join(' '));
  var k = 1;
  while (k <= 13) {
    var limit = pow(10, k);
    var r2 = getBrilliant(k, limit, true);
    var total = r2['bc'];
    var next = r2['next'];
    var climit = commatize(limit);
    var ctotal = commatize(total + 1);
    var cnext = commatize(next);
    print('First >= ' + climit['padStart'](18, ' ') + ' is ' + ctotal['padStart'](14, ' ') + ' in the series: ' + cnext['padStart'](18, ' '));
    k = k + 1;
  }
}

void main() {
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
