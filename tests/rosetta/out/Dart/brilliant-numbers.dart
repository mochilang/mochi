// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:44Z
import 'dart:io';

List<int> primesUpTo(int n) {
  List<bool> sieve = [];
  num i = 0;
  while ((i as num) <= n) {
    sieve = List.from(sieve)..add(true);
    i = (i as num) + 1;
  }
  var p = 2;
  while (((p as num) * (p as num) as num) <= n) {
    if (sieve[p] != null) {
      var m = (p as num) * (p as num);
      while ((m as num) <= n) {
        sieve[m] = false;
        m = (m as num) + (p as num);
      }
    }
    p = (p as num) + 1;
  }
  List<int> res = [];
  var x = 2;
  while ((x as num) <= n) {
    if (sieve[x] != null) {
      res = List.from(res)..add(x);
    }
    x = (x as num) + 1;
  }
  return res;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    num idx = 0;
    var i = 1;
    while ((i as num) < tmp.length) {
      if ((tmp[i] as num) < (min as num)) {
        min = tmp[i];
        idx = i;
      }
      i = (i as num) + 1;
    }
    res = List.from(res)..add(min);
    List<int> out = [];
    num j = 0;
    while ((j as num) < tmp.length) {
      if (j != idx) {
        out = List.from(out)..add(tmp[j]);
      }
      j = (j as num) + 1;
    }
    tmp = out;
  }
  return res;
}

String commatize(int n) {
  var s = n.toString();
  var i = s.length - 3;
  while ((i as num) >= 1) {
    s = ((s is String) ? s.substring(0, i) : (s as List).sublist(0, i)) + ',' + ((s is String) ? s.substring(i, s.length) : (s as List).sublist(i, s.length));
    i = (i as num) - 3;
  }
  return s;
}

var primes = primesUpTo(3200000);

Map<String, any> getBrilliant(int digits, int limit, bool countOnly) {
  List<int> brilliant = [];
  num count = 0;
  var pow = 1;
  var next = 999999999999999;
  var k = 1;
  while ((k as num) <= digits) {
    List<int> s = [];
    for (var p in primes) {
      if (p >= ((pow as num) * 10 as num)) {
        break;
      }
      if (p > (pow as num)) {
        s = List.from(s)..add(p);
      }
    }
    num i = 0;
    while ((i as num) < s.length) {
      var j = i;
      while ((j as num) < s.length) {
        var prod = (s[i] as num) * (s[j] as num);
        if ((prod as num) < limit) {
          if (countOnly) {
            count = (count as num) + 1;
          }
          else {
            brilliant = List.from(brilliant)..add(prod);
          }
        }
        else {
          if ((prod as num) < (next as num)) {
            next = prod;
          }
          break;
        }
        j = (j as num) + 1;
      }
      i = (i as num) + 1;
    }
    pow = (pow as num) * 10;
    k = (k as num) + 1;
  }
  if (countOnly) {
    return {'bc': count, 'next': next};
  }
  return {'bc': brilliant, 'next': next};
}

void _main() {
  print('First 100 brilliant numbers:');
  var r = getBrilliant(2, 10000, false);
  var br = sortInts(r['bc']);
  br = ((br is String) ? br.substring(0, 100) : (br as List).sublist(0, 100));
  num i = 0;
  while ((i as num) < br.length) {
    _print([br[i].toString().padStart(4, ' ') + ' ', false]);
    if ((((i as num) + 1) as num) % 10 == 0) {
      _print(['', true]);
    }
    i = (i as num) + 1;
  }
  _print(['', true]);
  var k = 1;
  while ((k as num) <= 13) {
    var limit = pow(10, k);
    var r2 = getBrilliant(k, limit, true);
    var total = r2['bc'];
    var next = r2['next'];
    var climit = commatize(limit);
    var ctotal = commatize((total as num) + 1);
    var cnext = commatize(next);
    print('First >= ' + climit['padStart'](18, ' ') + ' is ' + ctotal['padStart'](14, ' ') + ' in the series: ' + cnext['padStart'](18, ' '));
    k = (k as num) + 1;
  }
}

void main() {
}

void _print(List<dynamic> args) {
    for (var i = 0; i < args.length; i++) {
        if (i > 0) stdout.write(' ');
        var v = args[i];
        if (v is List) {
            stdout.write(v.join(' '));
        } else if (v is double && v == v.roundToDouble()) {
            stdout.write(v.toInt());
        } else {
            stdout.write(v);
        }
    }
    stdout.writeln();
}
