// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:26Z
List<List<int>> image() {
  return [[0, 0, 10000], [65535, 65535, 65535], [65535, 65535, 65535]];
}

List<int> histogram(List<List<int>> g, int bins) {
  if (bins <= 0) {
    bins = (g[0].length as int);
  }
  List<int> h = [];
  var i = 0;
  while (i.toString().compareTo(bins.toString()) < 0) {
    h = List.from(h)..add(0);
    i = (i as num) + 1;
  }
  var y = 0;
  while (y.toString().compareTo(g.length.toString()) < 0) {
    var row = g[y];
    var x = 0;
    while (x.toString().compareTo(row.length.toString()) < 0) {
      var p = row[x];
      var idx = int.parse(((((p as num) * (bins - 1)) as num) / 65535));
      h[idx] = (h[idx] as num) + 1;
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
  return h;
}

int medianThreshold(List<int> h) {
  var lb = 0;
  var ub = h.length - 1;
  var lSum = 0;
  var uSum = 0;
  while (lb.toString().compareTo(ub.toString()) <= 0) {
    if ((lSum as num) + h[lb].toString().compareTo((uSum as num) + h[ub].toString()) < 0) {
      lSum = (lSum as num) + h[lb];
      lb = (lb as num) + 1;
    }
    else {
      uSum = (uSum as num) + h[ub];
      ub = (ub as num) - 1;
    }
  }
  return int.parse(((((ub as num) * 65535) as num) / h.length));
}

List<List<int>> threshold(List<List<int>> g, int t) {
  List<List<int>> out = [];
  var y = 0;
  while (y.toString().compareTo(g.length.toString()) < 0) {
    var row = g[y];
    List<int> newRow = [];
    var x = 0;
    while (x.toString().compareTo(row.length.toString()) < 0) {
      if (row[x].toString().compareTo(t.toString()) < 0) {
        newRow = List.from(newRow)..add(0);
      }
      else {
        newRow = List.from(newRow)..add(65535);
      }
      x = (x as num) + 1;
    }
    out = List.from(out)..add(newRow);
    y = (y as num) + 1;
  }
  return out;
}

void printImage(List<List<int>> g) {
  var y = 0;
  while (y.toString().compareTo(g.length.toString()) < 0) {
    var row = g[y];
    var line = '';
    var x = 0;
    while (x.toString().compareTo(row.length.toString()) < 0) {
      if (row[x] == 0) {
        line = line + '0';
      }
      else {
        line = line + '1';
      }
      x = (x as num) + 1;
    }
    print(line);
    y = (y as num) + 1;
  }
}

void main() {
  var img = image();
  var h = histogram(img, 0);
  print('Histogram: ' + h.toString());
  var t = medianThreshold(h);
  print('Threshold: ' + t.toString());
  var bw = threshold(img, t);
  printImage(bw);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
