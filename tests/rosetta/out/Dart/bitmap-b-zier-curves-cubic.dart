// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:17Z
import 'dart:io';
import 'dart:convert';

var b3Seg = 30;

class Pixel {
  int r;
  int g;
  int b;
  Pixel(this.r, this.g, this.b);
}

Pixel pixelFromRgb(int rgb) {
  var r = int.parse(((rgb / 65536) % 256));
  var g = int.parse(((rgb / 256) % 256));
  var b = int.parse((rgb % 256));
  return Pixel(r, g, b);
}

Map<String, any> newBitmap(int cols, int rows) {
  List<List<Pixel>> d = [];
  var y = 0;
  while (y < rows) {
    List<Pixel> row = [];
    var x = 0;
    while (x < cols) {
      row = List.from(row)..add(Pixel(0, 0, 0));
      x = x + 1;
    }
    d = List.from(d)..add(row);
    y = y + 1;
  }
  return {'cols': cols, 'rows': rows, 'data': d};
}

void setPx(Map<String, any> b, int x, int y, Pixel p) {
  var cols = int.parse((b as Map)['cols']);
  var rows = int.parse((b as Map)['rows']);
  if (x >= 0 && x < cols && y >= 0 && y < rows) {
    b['data'][y][x] = p;
  }
}

void fill(Map<String, any> b, Pixel p) {
  var cols = int.parse((b as Map)['cols']);
  var rows = int.parse((b as Map)['rows']);
  var y = 0;
  while (y < rows) {
    var x = 0;
    while (x < cols) {
      b['data'][y][x] = p;
      x = x + 1;
    }
    y = y + 1;
  }
}

void fillRgb(Map<String, any> b, int rgb) {
  fill(b, pixelFromRgb(rgb));
}

void line(Map<String, any> b, int x0, int y0, int x1, int y1, Pixel p) {
  var dx = x1 - x0;
  if (dx < 0) {
    dx = -dx;
  }
  var dy = y1 - y0;
  if (dy < 0) {
    dy = -dy;
  }
  var sx = -1;
  if (x0 < x1) {
    sx = 1;
  }
  var sy = -1;
  if (y0 < y1) {
    sy = 1;
  }
  var err = dx - dy;
  while (true) {
    setPx(b, x0, y0, p);
    if (x0 == x1 && y0 == y1) {
      break;
    }
    var e2 = 2 * err;
    if (e2 > (0 - dy)) {
      err = err - dy;
      x0 = (x0 + sx as int);
    }
    if (e2 < dx) {
      err = err + dx;
      y0 = (y0 + sy as int);
    }
  }
}

void bezier3(Map<String, any> b, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, Pixel p) {
  List<int> px = [];
  List<int> py = [];
  var i = 0;
  while (i <= b3Seg) {
    px = List.from(px)..add(0);
    py = List.from(py)..add(0);
    i = i + 1;
  }
  var fx1 = double.parse(x1);
  var fy1 = double.parse(y1);
  var fx2 = double.parse(x2);
  var fy2 = double.parse(y2);
  var fx3 = double.parse(x3);
  var fy3 = double.parse(y3);
  var fx4 = double.parse(x4);
  var fy4 = double.parse(y4);
  i = 0;
  while (i <= b3Seg) {
    var d = (double.parse(i)) / (double.parse(b3Seg));
    var a = 1 - d;
    var bcoef = a * a;
    var ccoef = d * d;
    var a2 = a * bcoef;
    var b2 = 3 * bcoef * d;
    var c2 = 3 * a * ccoef;
    var d2 = ccoef * d;
    px[i] = int.parse((a2 * fx1 + b2 * fx2 + c2 * fx3 + d2 * fx4));
    py[i] = int.parse((a2 * fy1 + b2 * fy2 + c2 * fy3 + d2 * fy4));
    i = i + 1;
  }
  var x0 = px[0];
  var y0 = py[0];
  i = 1;
  while (i <= b3Seg) {
    var x = px[i];
    var y = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = i + 1;
  }
}

var b = newBitmap(400, 300);

void main() {
  fillRgb(b, 16773055);
  bezier3(b, 20, 200, 700, 50, -300, 50, 380, 150, pixelFromRgb(4165615));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
