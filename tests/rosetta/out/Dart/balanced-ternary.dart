// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:22Z
String trimLeftZeros(String s) {
  num i = 0;
  while ((i as num) < s.length && s.toString().substring(i, (i as num) + 1) == '0') {
    i = (i as num) + 1;
  }
  return s.toString().substring(i, s.length);
}

Map<String, any> btString(String s) {
  s = trimLeftZeros(s);
  List<int> b = [];
  var i = s.length - 1;
  while ((i as num) >= 0) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch == '+') {
      b = List.from(b)..add(1);
    }
    else {
      if (ch == '0') {
        b = List.from(b)..add(0);
      }
      else {
        if (ch == '-') {
          b = List.from(b)..add(0 - 1);
        }
        else {
          return {
            'bt': [],
            'ok': false,
          };
        }
      }
    }
    i = (i as num) - 1;
  }
  return {'bt': b, 'ok': true};
}

String btToString(List<int> b) {
  if (b.length == 0) {
    return '0';
  }
  var r = '';
  var i = b.length - 1;
  while ((i as num) >= 0) {
    var d = b[i];
    if (d == 0 - 1) {
      r = r + '-';
    }
    else {
      if (d == 0) {
        r = r + '0';
      }
      else {
        r = r + '+';
      }
    }
    i = (i as num) - 1;
  }
  return r;
}

List<int> btInt(int i) {
  if (i == 0) {
    return [];
  }
  var n = i;
  List<int> b = [];
  while (n != 0) {
    var m = (n as num) % 3;
    n = int.parse(((n as num) / 3));
    if (m == 2) {
      m = 0 - 1;
      n = (n as num) + 1;
    }
    else {
      if (m == 0 - 2) {
        m = 1;
        n = (n as num) - 1;
      }
    }
    b = List.from(b)..add(m);
  }
  return b;
}

int btToInt(List<int> b) {
  num r = 0;
  var pt = 1;
  num i = 0;
  while ((i as num) < b.length) {
    r = (r as num) + (b[i] * (pt as num) as num);
    pt = (pt as num) * 3;
    i = (i as num) + 1;
  }
  return r;
}

List<int> btNeg(List<int> b) {
  List<int> r = [];
  num i = 0;
  while ((i as num) < b.length) {
    r = List.from(r)..add(-(b[i] as num));
    i = (i as num) + 1;
  }
  return r;
}

List<int> btAdd(List<int> a, List<int> b) {
  return btInt(btToInt(a) + btToInt(b));
}

List<int> btMul(List<int> a, List<int> b) {
  return btInt(btToInt(a) * btToInt(b));
}

String padLeft(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = ' ' + r;
  }
  return r;
}

void show(String label, List<int> b) {
  var l = padLeft(label, 7);
  var bs = padLeft(btToString(b), 12);
  var is = padLeft(btToInt(b).toString(), 7);
  print(l + ' ' + bs + ' ' + is);
}

void _main() {
  var ares = btString('+-0++0+');
  var a = ares['bt'];
  var b = btInt(-436);
  var cres = btString('+-++-');
  var c = cres['bt'];
  show('a:', a);
  show('b:', b);
  show('c:', c);
  show('a(b-c):', btMul(a, btAdd(b, btNeg(c))));
}

void main() {
  _main();
}
