// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:13Z
import 'dart:io';
import 'dart:convert';

String trimLeftZeros(String s) {
  var i = 0;
  while (i < s.length && s.toString().substring(i, i + 1) == '0') {
    i = i + 1;
  }
  return s.toString().substring(i, s.length);
}

Map<String, any> btString(String s) {
  s = trimLeftZeros(s);
  List<int> b = [];
  var i = s.length - 1;
  while (i >= 0) {
    var ch = s.toString().substring(i, i + 1);
    if (ch == '+') {
      b = List.from(b)..add(1);
    }
    else {
      if (ch == '0') {
        b = List.from(b)..add(0);
      }
      else {
        if (ch == '-') {
          b = List.from(b)..add(0 - 1);
        }
        else {
          return {'bt': [], 'ok': false};
        }
      }
    }
    i = i - 1;
  }
  return {'bt': b, 'ok': true};
}

String btToString(List<int> b) {
  if (b.length == 0) {
    return '0';
  }
  var r = '';
  var i = b.length - 1;
  while (i >= 0) {
    var d = b[i];
    if (d == 0 - 1) {
      r = r + '-';
    }
    else {
      if (d == 0) {
        r = r + '0';
      }
      else {
        r = r + '+';
      }
    }
    i = i - 1;
  }
  return r;
}

List<int> btInt(int i) {
  if (i == 0) {
    return [];
  }
  var n = i;
  List<int> b = [];
  while (n != 0) {
    var m = n % 3;
    n = int.parse((n / 3));
    if (m == 2) {
      m = 0 - 1;
      n = n + 1;
    }
    else {
      if (m == 0 - 2) {
        m = 1;
        n = n - 1;
      }
    }
    b = List.from(b)..add(m);
  }
  return b;
}

int btToInt(List<int> b) {
  var r = 0;
  var pt = 1;
  var i = 0;
  while (i < b.length) {
    r = r + b[i] * pt;
    pt = pt * 3;
    i = i + 1;
  }
  return r;
}

List<int> btNeg(List<int> b) {
  List<int> r = [];
  var i = 0;
  while (i < b.length) {
    r = List.from(r)..add(-b[i]);
    i = i + 1;
  }
  return r;
}

List<int> btAdd(List<int> a, List<int> b) {
  return btInt(btToInt(a) + btToInt(b));
}

List<int> btMul(List<int> a, List<int> b) {
  return btInt(btToInt(a) * btToInt(b));
}

String padLeft(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = ' ' + r;
  }
  return r;
}

void show(String label, List<int> b) {
  var l = padLeft(label, 7);
  var bs = padLeft(btToString(b), 12);
  var is = padLeft(btToInt(b).toString(), 7);
  print(l + ' ' + bs + ' ' + is);
}

void main() {
  var ares = btString('+-0++0+');
  var a = ares['bt'];
  var b = btInt(-436);
  var cres = btString('+-++-');
  var c = cres['bt'];
  show('a:', a);
  show('b:', b);
  show('c:', c);
  show('a(b-c):', btMul(a, btAdd(b, btNeg(c))));
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
