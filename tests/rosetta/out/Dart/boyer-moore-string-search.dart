// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:42Z
int indexOfStr(String h, String n) {
  var hlen = h.length;
  var nlen = n.length;
  if (nlen == 0) {
    return 0;
  }
  num i = 0;
  while ((i as num) <= ((hlen as num) - (nlen as num) as num)) {
    if (h.toString().substring(i, (i as num) + (nlen as num)) == n) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

int stringSearchSingle(String h, String n) {
  return indexOfStr(h, n);
}

List<int> stringSearch(String h, String n) {
  List<int> result = [];
  num start = 0;
  var hlen = h.length;
  var nlen = n.length;
  while ((start as num) < (hlen as num)) {
    var idx = indexOfStr(h.toString().substring(start, hlen), n);
    if ((idx as num) >= 0) {
      result = List.from(result)..add((start as num) + (idx as num));
      start = ((start as num) + (idx as num) as num) + (nlen as num);
    }
    else {
      break;
    }
  }
  return result;
}

String display(List<int> nums) {
  var s = '[';
  num i = 0;
  while ((i as num) < nums.length) {
    if ((i as num) > 0) {
      s = s + ', ';
    }
    s = s + nums[i].toString();
    i = (i as num) + 1;
  }
  s = s + ']';
  return s;
}

void _main() {
  var texts = [
    'GCTAGCTCTACGAGTCTA',
    'GGCTATAATGCGTA',
    'there would have been a time for such a word',
    'needle need noodle needle',
    'DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages',
    'Nearby farms grew an acre of alfalfa on the dairy\'s behalf, with bales of that alfalfa exchanged for milk.',
  ];
  var patterns = [
    'TCTA',
    'TAATAAA',
    'word',
    'needle',
    'and',
    'alfalfa',
  ];
  num i = 0;
  while ((i as num) < texts.length) {
    print('text' + (i as num) + 1.toString() + ' = ' + texts[i]);
    i = (i as num) + 1;
  }
  print('');
  num j = 0;
  while ((j as num) < texts.length) {
    var idxs = stringSearch(texts[j], patterns[j]);
    print('Found ' + patterns[j] + ' in \'text' + (j as num) + 1.toString() + '\' at indexes ' + display(idxs));
    j = (j as num) + 1;
  }
}

void main() {
  _main();
}
