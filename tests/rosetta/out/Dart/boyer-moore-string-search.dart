// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:20Z
import 'dart:io';
import 'dart:convert';

int indexOfStr(String h, String n) {
  var hlen = h.length;
  var nlen = n.length;
  if (nlen == 0) {
    return 0;
  }
  var i = 0;
  while (i <= hlen - nlen) {
    if (h.toString().substring(i, i + nlen) == n) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

int stringSearchSingle(String h, String n) {
  return indexOfStr(h, n);
}

List<int> stringSearch(String h, String n) {
  List<int> result = [];
  var start = 0;
  var hlen = h.length;
  var nlen = n.length;
  while (start < hlen) {
    var idx = indexOfStr(h.toString().substring(start, hlen), n);
    if (idx >= 0) {
      result = List.from(result)..add(start + idx);
      start = start + idx + nlen;
    }
    else {
      break;
    }
  }
  return result;
}

String display(List<int> nums) {
  var s = '[';
  var i = 0;
  while (i < nums.length) {
    if (i > 0) {
      s = s + ', ';
    }
    s = s + nums[i].toString();
    i = i + 1;
  }
  s = s + ']';
  return s;
}

void main() {
  var texts = ['GCTAGCTCTACGAGTCTA', 'GGCTATAATGCGTA', 'there would have been a time for such a word', 'needle need noodle needle', 'DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages', 'Nearby farms grew an acre of alfalfa on the dairy\'s behalf, with bales of that alfalfa exchanged for milk.'];
  var patterns = ['TCTA', 'TAATAAA', 'word', 'needle', 'and', 'alfalfa'];
  var i = 0;
  while (i < texts.length) {
    print('text' + i + 1.toString() + ' = ' + texts[i]);
    i = i + 1;
  }
  print('');
  var j = 0;
  while (j < texts.length) {
    var idxs = stringSearch(texts[j], patterns[j]);
    print('Found ' + patterns[j] + ' in \'text' + j + 1.toString() + '\' at indexes ' + display(idxs));
    j = j + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
