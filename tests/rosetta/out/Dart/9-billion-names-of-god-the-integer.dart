// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:28:59Z
List<int> bigTrim(List<int> a) {
  var n = a.length;
  while (n.toString().compareTo(1.toString()) > 0 && a[(n as num) - 1] == 0) {
    a = a.sublist(0, (n as num) - 1);
    n = (n as num) - 1;
  }
  return a;
}

List<int> bigFromInt(int x) {
  if (x == 0) {
    return [0];
  }
  List<int> digits = [];
  var n = x;
  while (n.toString().compareTo(0.toString()) > 0) {
    digits = List.from(digits)..add((n as num) % 10);
    n = (n as num) / 10;
  }
  return digits;
}

List<int> bigAdd(List<int> a, List<int> b) {
  List<int> res = [];
  var carry = 0;
  var i = 0;
  while (i.toString().compareTo(a.length.toString()) < 0 || i.toString().compareTo(b.length.toString()) < 0 || carry.toString().compareTo(0.toString()) > 0) {
    var av = 0;
    if (i.toString().compareTo(a.length.toString()) < 0) {
      av = a[i];
    }
    var bv = 0;
    if (i.toString().compareTo(b.length.toString()) < 0) {
      bv = b[i];
    }
    var s = ((av as num) + (bv as num) as num) + (carry as num);
    res = List.from(res)..add((s as num) % 10);
    carry = (s as num) / 10;
    i = (i as num) + 1;
  }
  return bigTrim(res);
}

List<int> bigSub(List<int> a, List<int> b) {
  List<int> res = [];
  var borrow = 0;
  var i = 0;
  while (i.toString().compareTo(a.length.toString()) < 0) {
    var av = a[i];
    var bv = 0;
    if (i.toString().compareTo(b.length.toString()) < 0) {
      bv = b[i];
    }
    var diff = ((av as num) - (bv as num) as num) - (borrow as num);
    if (diff.toString().compareTo(0.toString()) < 0) {
      diff = (diff as num) + 10;
      borrow = 1;
    }
    else {
      borrow = 0;
    }
    res = List.from(res)..add(diff);
    i = (i as num) + 1;
  }
  return bigTrim(res);
}

String bigToString(List<int> a) {
  var s = '';
  var i = a.length - 1;
  while (i.toString().compareTo(0.toString()) >= 0) {
    s = s + a[i].toString();
    i = (i as num) - 1;
  }
  return s;
}

int minInt(int a, int b) {
  if (a < b) {
    return a;
  }
  else {
    return b;
  }
}

List<List<int>> cumu(int n) {
  List<List<List<int>>> cache = [[bigFromInt(1)]];
  var y = 1;
  while (y.toString().compareTo(n.toString()) <= 0) {
    List<List<int>> row = [bigFromInt(0)];
    var x = 1;
    while (x.toString().compareTo(y.toString()) <= 0) {
      var val = cache[(y as num) - x][minInt(x, (y as num) - x)];
      row = List.from(row)..add(bigAdd(row[row.length - 1], val));
      x = (x + 1 as int);
    }
    cache = List.from(cache)..add(row);
    y = (y as num) + 1;
  }
  return cache[n];
}

List<String> row(int n) {
  var e = cumu(n);
  List<String> out = [];
  var i = 0;
  while (i.toString().compareTo(n.toString()) < 0) {
    var diff = bigSub(e[(i as num) + 1], e[i]);
    out = List.from(out)..add(bigToString(diff));
    i = (i as num) + 1;
  }
  return out;
}

var x = 1;

void main() {
  print('rows:');
  while (x < 11) {
    var r = row(x);
    var line = '';
    var i = 0;
    while (i.toString().compareTo(r.length.toString()) < 0) {
      line = line + ' ' + r[i] + ' ';
      i = (i as num) + 1;
    }
    print(line);
    x = (x + 1 as int);
  }
  print('');
  print('sums:');
  for (var num in [23, 123, 1234]) {
    var r = cumu(num);
    print(num.toString() + ' ' + bigToString(r[r.length - 1]));
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
