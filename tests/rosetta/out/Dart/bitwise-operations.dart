// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:05Z
import 'dart:io';
import 'dart:convert';

int toUnsigned16(int n) {
  var u = n;
  if (u < 0) {
    u = u + 65536;
  }
  return u % 65536;
}

String bin16(int n) {
  var u = toUnsigned16(n);
  var bits = '';
  var mask = 32768;
  for (var i = 0; i < 16; i++) {
    if (u >= mask) {
      bits = bits + '1';
      u = u - mask;
    }
    else {
      bits = bits + '0';
    }
    mask = int.parse((mask / 2));
  }
  return bits;
}

int bit_and(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  var res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    if (ua % 2 == 1 && ub % 2 == 1) {
      res = res + bit;
    }
    ua = int.parse((ua / 2));
    ub = int.parse((ub / 2));
    bit = bit * 2;
  }
  return res;
}

int bit_or(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  var res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    if (ua % 2 == 1 || ub % 2 == 1) {
      res = res + bit;
    }
    ua = int.parse((ua / 2));
    ub = int.parse((ub / 2));
    bit = bit * 2;
  }
  return res;
}

int bit_xor(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  var res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    var abit = ua % 2;
    var bbit = ub % 2;
    if ((abit == 1 && bbit == 0) || (abit == 0 && bbit == 1)) {
      res = res + bit;
    }
    ua = int.parse((ua / 2));
    ub = int.parse((ub / 2));
    bit = bit * 2;
  }
  return res;
}

int bit_not(int a) {
  var ua = toUnsigned16(a);
  return 65535 - ua;
}

int shl(int a, int b) {
  var ua = toUnsigned16(a);
  var i = 0;
  while (i < b) {
    ua = (ua * 2) % 65536;
    i = i + 1;
  }
  return ua;
}

int shr(int a, int b) {
  var ua = toUnsigned16(a);
  var i = 0;
  while (i < b) {
    ua = int.parse((ua / 2));
    i = i + 1;
  }
  return ua;
}

int las(int a, int b) {
  return shl(a, b);
}

int ras(int a, int b) {
  var val = a;
  var i = 0;
  while (i < b) {
    if (val >= 0) {
      val = int.parse((val / 2));
    }
    else {
      val = int.parse(((val - 1) / 2));
    }
    i = i + 1;
  }
  return toUnsigned16(val);
}

int rol(int a, int b) {
  var ua = toUnsigned16(a);
  var left = shl(ua, b);
  var right = shr(ua, 16 - b);
  return toUnsigned16(left + right);
}

int ror(int a, int b) {
  var ua = toUnsigned16(a);
  var right = shr(ua, b);
  var left = shl(ua, 16 - b);
  return toUnsigned16(left + right);
}

void bitwise(int a, int b) {
  print('a:   ' + bin16(a));
  print('b:   ' + bin16(b));
  print('and: ' + bin16(bit_and(a, b)));
  print('or:  ' + bin16(bit_or(a, b)));
  print('xor: ' + bin16(bit_xor(a, b)));
  print('not: ' + bin16(bit_not(a)));
  if (b < 0) {
    print('Right operand is negative, but all shifts require an unsigned right operand (shift distance).');
    return null;
  }
  print('shl: ' + bin16(shl(a, b)));
  print('shr: ' + bin16(shr(a, b)));
  print('las: ' + bin16(las(a, b)));
  print('ras: ' + bin16(ras(a, b)));
  print('rol: ' + bin16(rol(a, b)));
  print('ror: ' + bin16(ror(a, b)));
}

void main() {
  bitwise(-460, 6);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
