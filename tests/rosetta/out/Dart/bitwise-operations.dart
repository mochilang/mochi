// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:39Z
int toUnsigned16(int n) {
  var u = n;
  if ((u as num) < 0) {
    u = (u as num) + 65536;
  }
  return (u as num) % 65536;
}

String bin16(int n) {
  var u = toUnsigned16(n);
  var bits = '';
  var mask = 32768;
  for (var i = 0; i < 16; i++) {
    if ((u as num) >= (mask as num)) {
      bits = bits + '1';
      u = (u as num) - (mask as num);
    }
    else {
      bits = bits + '0';
    }
    mask = int.parse(((mask as num) / 2));
  }
  return bits;
}

int bit_and(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  num res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    if ((ua as num) % 2 == 1 && (ub as num) % 2 == 1) {
      res = (res as num) + (bit as num);
    }
    ua = int.parse(((ua as num) / 2));
    ub = int.parse(((ub as num) / 2));
    bit = (bit as num) * 2;
  }
  return res;
}

int bit_or(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  num res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    if ((ua as num) % 2 == 1 || (ub as num) % 2 == 1) {
      res = (res as num) + (bit as num);
    }
    ua = int.parse(((ua as num) / 2));
    ub = int.parse(((ub as num) / 2));
    bit = (bit as num) * 2;
  }
  return res;
}

int bit_xor(int a, int b) {
  var ua = toUnsigned16(a);
  var ub = toUnsigned16(b);
  num res = 0;
  var bit = 1;
  for (var i = 0; i < 16; i++) {
    var abit = (ua as num) % 2;
    var bbit = (ub as num) % 2;
    if ((abit == 1 && bbit == 0) || (abit == 0 && bbit == 1)) {
      res = (res as num) + (bit as num);
    }
    ua = int.parse(((ua as num) / 2));
    ub = int.parse(((ub as num) / 2));
    bit = (bit as num) * 2;
  }
  return res;
}

int bit_not(int a) {
  var ua = toUnsigned16(a);
  return 65535 - (ua as num);
}

int shl(int a, int b) {
  var ua = toUnsigned16(a);
  num i = 0;
  while ((i as num) < b) {
    ua = (((ua as num) * 2) as num) % 65536;
    i = (i as num) + 1;
  }
  return ua;
}

int shr(int a, int b) {
  var ua = toUnsigned16(a);
  num i = 0;
  while ((i as num) < b) {
    ua = int.parse(((ua as num) / 2));
    i = (i as num) + 1;
  }
  return ua;
}

int las(int a, int b) {
  return shl(a, b);
}

int ras(int a, int b) {
  var val = a;
  num i = 0;
  while ((i as num) < b) {
    if ((val as num) >= 0) {
      val = int.parse(((val as num) / 2));
    }
    else {
      val = int.parse(((((val as num) - 1) as num) / 2));
    }
    i = (i as num) + 1;
  }
  return toUnsigned16(val);
}

int rol(int a, int b) {
  var ua = toUnsigned16(a);
  var left = shl(ua, b);
  var right = shr(ua, 16 - b);
  return toUnsigned16((left as num) + (right as num));
}

int ror(int a, int b) {
  var ua = toUnsigned16(a);
  var right = shr(ua, b);
  var left = shl(ua, 16 - b);
  return toUnsigned16((left as num) + (right as num));
}

void bitwise(int a, int b) {
  print('a:   ' + bin16(a));
  print('b:   ' + bin16(b));
  print('and: ' + bin16(bit_and(a, b)));
  print('or:  ' + bin16(bit_or(a, b)));
  print('xor: ' + bin16(bit_xor(a, b)));
  print('not: ' + bin16(bit_not(a)));
  if (b < 0) {
    print('Right operand is negative, but all shifts require an unsigned right operand (shift distance).');
    return null;
  }
  print('shl: ' + bin16(shl(a, b)));
  print('shr: ' + bin16(shr(a, b)));
  print('las: ' + bin16(las(a, b)));
  print('ras: ' + bin16(ras(a, b)));
  print('rol: ' + bin16(rol(a, b)));
  print('ror: ' + bin16(ror(a, b)));
}

void main() {
  bitwise(-460, 6);
}
