// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:19Z
double qsel(List<double> a, int k) {
  var arr = a;
  while (arr.length > 1) {
    var px = now() % arr.length;
    var pv = arr[px];
    var last = arr.length - 1;
    var tmp = arr[px];
    arr[px] = arr[last];
    arr[last] = tmp;
    px = 0;
    var i = 0;
    while (i.toString().compareTo(last.toString()) < 0) {
      var v = arr[i];
      if (v.toString().compareTo(pv.toString()) < 0) {
        var tmp2 = arr[px];
        arr[px] = arr[i];
        arr[i] = tmp2;
        px = (px as num) + 1;
      }
      i = (i as num) + 1;
    }
    if (px == k) {
      return pv;
    }
    if (k.toString().compareTo(px.toString()) < 0) {
      arr = ((arr is String) ? arr.substring(0, px) : (arr as List).sublist(0, px));
    }
    else {
      var tmp2 = arr[px];
      arr[px] = pv;
      arr[last] = tmp2;
      arr = ((arr is String) ? arr.substring(((px as num) + 1), arr.length) : (arr as List).sublist(((px as num) + 1), arr.length));
      k = (k - (((px as num) + 1) as num) as int);
    }
  }
  return arr[0];
}

double median(List<double> list) {
  var arr = list;
  var half = int.parse((arr.length / 2));
  var med = qsel(arr, half);
  if (arr.length % 2 == 0) {
    return (((med as num) + qsel(arr, (half as num) - 1)) as num) / 2;
  }
  return med;
}

void main() {
  print(median([3, 1, 4, 1]).toString());
  print(median([3, 1, 4, 1, 5]).toString());
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
