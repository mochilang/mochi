// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:02Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

String sortRunes(String s) {
  List<String> arr = [];
  var i = 0;
  while (i < s.length) {
    arr = List.from(arr)..add(s.substring(i, i + 1));
    i = i + 1;
  }
  var n = arr.length;
  var m = 0;
  while (m < n) {
    var j = 0;
    while (j < n - 1) {
      if (arr[j] > arr[j + 1]) {
        var tmp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = tmp;
      }
      j = j + 1;
    }
    m = m + 1;
  }
  var out = '';
  i = 0;
  while (i < n) {
    out = out + arr[i];
    i = i + 1;
  }
  return out;
}

bool deranged(String a, String b) {
  if (a.length != b.length) {
    return false;
  }
  var i = 0;
  while (i < a.length) {
    if (a.substring(i, i + 1) == b.substring(i, i + 1)) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

void main() {
  var words = ['constitutionalism', 'misconstitutional'];
  Map<String, List<String>> m = {};
  var bestLen = 0;
  var w1 = '';
  var w2 = '';
  var _iter0 = words;
  for (var w in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    if (w.length <= bestLen) {
      continue;
    }
    var k = sortRunes(w);
    if (!(_in(k, m)) != null) {
      m[k] = [w];
      continue;
    }
    var _iter1 = m[k];
    for (var c in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
      if (deranged(w, c)) {
        bestLen = w.length;
        w1 = c;
        w2 = w;
        break;
      }
    }
    m[k] = List.from(m[k])..add(w);
  }
  print(w1 + ' ' + w2 + ' : Length ' + bestLen.toString());
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
