// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:46Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

String sortRunes(String s) {
  List<String> arr = [];
  num i = 0;
  while ((i as num) < s.length) {
    arr = List.from(arr)..add(s.substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  var n = arr.length;
  num m = 0;
  while ((m as num) < (n as num)) {
    num j = 0;
    while ((j as num) < ((n as num) - 1 as num)) {
      if ((arr[j] as num) > (arr[(j as num) + 1] as num)) {
        var tmp = arr[j];
        arr[j] = arr[(j as num) + 1];
        arr[(j as num) + 1] = tmp;
      }
      j = (j as num) + 1;
    }
    m = (m as num) + 1;
  }
  var out = '';
  i = 0;
  while ((i as num) < (n as num)) {
    out = (out as num) + (arr[i] as num);
    i = (i as num) + 1;
  }
  return out;
}

bool deranged(String a, String b) {
  if (a.length != b.length) {
    return false;
  }
  num i = 0;
  while ((i as num) < a.length) {
    if (a.substring(i, (i as num) + 1) == b.substring(i, (i as num) + 1)) {
      return false;
    }
    i = (i as num) + 1;
  }
  return true;
}

void _main() {
  var words = ['constitutionalism', 'misconstitutional'];
  Map<String, List<String>> m = {};
  num bestLen = 0;
  var w1 = '';
  var w2 = '';
  var _iter0 = words;
  for (var w in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    if (w.length <= (bestLen as num)) {
      continue;
    }
    var k = sortRunes(w);
    if (!(_in(k, m)) != null) {
      m[k] = [w];
      continue;
    }
    var _iter1 = m[k];
    for (var c in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
      if (deranged(w, c)) {
        bestLen = w.length;
        w1 = c;
        w2 = w;
        break;
      }
    }
    m[k] = List.from(m[k])..add(w);
  }
  print(w1 + ' ' + w2 + ' : Length ' + bestLen.toString());
}

void main() {
  _main();
}
