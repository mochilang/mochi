// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:33Z
var b2Seg = 20;

class Pixel {
  int r;
  int g;
  int b;
  Pixel(this.r, this.g, this.b);
}

Pixel pixelFromRgb(int rgb) {
  var r = int.parse(((rgb ~/ 65536) % 256));
  var g = int.parse(((rgb ~/ 256) % 256));
  var b = int.parse((rgb % 256));
  return Pixel(r, g, b);
}

Map<String, any> newBitmap(int cols, int rows) {
  List<List<Pixel>> d = [];
  num y = 0;
  while ((y as num) < rows) {
    List<Pixel> row = [];
    num x = 0;
    while ((x as num) < cols) {
      row = List.from(row)..add(Pixel(0, 0, 0));
      x = (x as num) + 1;
    }
    d = List.from(d)..add(row);
    y = (y as num) + 1;
  }
  return {'cols': cols, 'rows': rows, 'data': d};
}

void setPx(Map<String, any> b, int x, int y, Pixel p) {
  var cols = int.parse((b as Map)['cols']);
  var rows = int.parse((b as Map)['rows']);
  if (x >= 0 && x < (cols as num) && y >= 0 && y < (rows as num)) {
    b['data'][y][x] = p;
  }
}

void fill(Map<String, any> b, Pixel p) {
  var cols = int.parse((b as Map)['cols']);
  var rows = int.parse((b as Map)['rows']);
  num y = 0;
  while ((y as num) < (rows as num)) {
    num x = 0;
    while ((x as num) < (cols as num)) {
      b['data'][y][x] = p;
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
}

void fillRgb(Map<String, any> b, int rgb) {
  fill(b, pixelFromRgb(rgb));
}

void line(Map<String, any> b, int x0, int y0, int x1, int y1, Pixel p) {
  var dx = x1 - x0;
  if ((dx as num) < 0) {
    dx = -(dx as num);
  }
  var dy = y1 - y0;
  if ((dy as num) < 0) {
    dy = -(dy as num);
  }
  var sx = -1;
  if (x0 < x1) {
    sx = 1;
  }
  var sy = -1;
  if (y0 < y1) {
    sy = 1;
  }
  var err = (dx as num) - (dy as num);
  while (true) {
    setPx(b, x0, y0, p);
    if (x0 == x1 && y0 == y1) {
      break;
    }
    var e2 = 2 * (err as num);
    if ((e2 as num) > ((0 - (dy as num)) as num)) {
      err = (err as num) - (dy as num);
      x0 = x0 + (sx as num);
    }
    if ((e2 as num) < (dx as num)) {
      err = (err as num) + (dx as num);
      y0 = y0 + (sy as num);
    }
  }
}

void bezier2(Map<String, any> b, int x1, int y1, int x2, int y2, int x3, int y3, Pixel p) {
  List<int> px = [];
  List<int> py = [];
  num i = 0;
  while ((i as num) <= b2Seg) {
    px = List.from(px)..add(0);
    py = List.from(py)..add(0);
    i = (i as num) + 1;
  }
  var fx1 = double.parse(x1);
  var fy1 = double.parse(y1);
  var fx2 = double.parse(x2);
  var fy2 = double.parse(y2);
  var fx3 = double.parse(x3);
  var fy3 = double.parse(y3);
  i = 0;
  while ((i as num) <= b2Seg) {
    var c = (double.parse(i)) / (double.parse(b2Seg));
    var a = 1 - (c as num);
    var a2 = (a as num) * (a as num);
    var b2 = (2 * (c as num) as num) * (a as num);
    var c2 = (c as num) * (c as num);
    px[i] = int.parse(((((a2 as num) * (fx1 as num) as num) + ((b2 as num) * (fx2 as num) as num) as num) + ((c2 as num) * (fx3 as num) as num)));
    py[i] = int.parse(((((a2 as num) * (fy1 as num) as num) + ((b2 as num) * (fy2 as num) as num) as num) + ((c2 as num) * (fy3 as num) as num)));
    i = (i as num) + 1;
  }
  var x0 = px[0];
  var y0 = py[0];
  i = 1;
  while ((i as num) <= b2Seg) {
    var x = px[i];
    var y = py[i];
    line(b, x0, y0, x, y, p);
    x0 = x;
    y0 = y;
    i = (i as num) + 1;
  }
}

var b = newBitmap(400, 300);

void main() {
  fillRgb(b, 14614575);
  bezier2(b, 20, 150, 500, -100, 300, 280, pixelFromRgb(4165615));
}
