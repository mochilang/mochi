// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:08Z
import 'dart:io';
import 'dart:convert';

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

int ord(String ch) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  var idx = indexOf(upper, ch);
  if (idx >= 0) {
    return 65 + idx;
  }
  idx = indexOf(lower, ch);
  if (idx >= 0) {
    return 97 + idx;
  }
  return 0;
}

String chr(int n) {
  var upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lower = 'abcdefghijklmnopqrstuvwxyz';
  if (n >= 65 && n < 91) {
    return ((upper is String) ? upper.substring(n - 65, n - 64) : (upper as List).sublist(n - 65, n - 64));
  }
  if (n >= 97 && n < 123) {
    return ((lower is String) ? lower.substring(n - 97, n - 96) : (lower as List).sublist(n - 97, n - 96));
  }
  return '?';
}

String shiftRune(String r, int k) {
  if (r.compareTo('a') >= 0 && r.compareTo('z') <= 0) {
    return chr(((ord(r) - 97 + k) % 26) + 97);
  }
  if (r.compareTo('A') >= 0 && r.compareTo('Z') <= 0) {
    return chr(((ord(r) - 65 + k) % 26) + 65);
  }
  return r;
}

String encipher(String s, int k) {
  var out = '';
  var i = 0;
  while (i < s.length) {
    out = out + shiftRune(s.substring(i, i + 1), k);
    i = i + 1;
  }
  return out;
}

String decipher(String s, int k) {
  return encipher(s, (26 - k % 26) % 26);
}

void _main() {
  var pt = 'The five boxing wizards jump quickly';
  print('Plaintext: ' + pt);
  for (var key in [0, 1, 7, 25, 26]) {
    if (key < 1 || key > 25) {
      print('Key ' + key.toString() + ' invalid');
      continue;
    }
    var ct = encipher(pt, key);
    print('Key ' + key.toString());
    print('  Enciphered: ' + ct);
    print('  Deciphered: ' + decipher(ct, key));
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
