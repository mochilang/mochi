// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:23Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

Map<String, any> square_to_maps(List<List<String>> square) {
  Map<String, List<int>> emap = {};
  Map<String, String> dmap = {};
  var x = 0;
  while (x.toString().compareTo(square.length.toString()) < 0) {
    var row = square[x];
    var y = 0;
    while (y.toString().compareTo(row.length.toString()) < 0) {
      var ch = row[y];
      emap[ch] = [x, y];
      dmap[x.toString() + ',' + y.toString()] = ch;
      y = (y as num) + 1;
    }
    x = (x as num) + 1;
  }
  return {'e': emap, 'd': dmap};
}

String remove_space(String text, Map<String, List<int>> emap) {
  var s = upper(text);
  var out = '';
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    var ch = ((s is String) ? s.substring(i, (i as num) + 1) : (s as List).sublist(i, (i as num) + 1));
    if (ch != ' ' && _in(ch, emap)) {
      out = (out as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  return out;
}

String encrypt(String text, Map<String, List<int>> emap, Map<String, String> dmap) {
  text = remove_space(text, emap);
  List<int> row0 = [];
  List<int> row1 = [];
  var i = 0;
  while (i.toString().compareTo(text.length.toString()) < 0) {
    var ch = text.substring(i, (i as num) + 1);
    var xy = (emap as Map)[ch];
    row0 = List.from(row0)..add(xy[0]);
    row1 = List.from(row1)..add(xy[1]);
    i = (i as num) + 1;
  }
  var _iter0 = row1;
  for (var v in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    row0 = List.from(row0)..add(v);
  }
  var res = '';
  var j = 0;
  while (j.toString().compareTo(row0.length.toString()) < 0) {
    var key = row0[j].toString() + ',' + row0[(j as num) + 1].toString();
    res = res + (dmap as Map)[key];
    j = (j as num) + 2;
  }
  return res;
}

String decrypt(String text, Map<String, List<int>> emap, Map<String, String> dmap) {
  text = remove_space(text, emap);
  List<int> coords = [];
  var i = 0;
  while (i.toString().compareTo(text.length.toString()) < 0) {
    var ch = text.substring(i, (i as num) + 1);
    var xy = (emap as Map)[ch];
    coords = List.from(coords)..add(xy[0]);
    coords = List.from(coords)..add(xy[1]);
    i = (i as num) + 1;
  }
  var half = coords.length / 2;
  List<int> k1 = [];
  List<int> k2 = [];
  var idx = 0;
  while (idx.toString().compareTo(half.toString()) < 0) {
    k1 = List.from(k1)..add(coords[idx]);
    idx = (idx as num) + 1;
  }
  while (idx.toString().compareTo(coords.length.toString()) < 0) {
    k2 = List.from(k2)..add(coords[idx]);
    idx = (idx as num) + 1;
  }
  var res = '';
  var j = 0;
  while (j.toString().compareTo(half.toString()) < 0) {
    var key = k1[j].toString() + ',' + k2[j].toString();
    res = res + (dmap as Map)[key];
    j = (j as num) + 1;
  }
  return res;
}

void main() {
  var squareRosetta = [['A', 'B', 'C', 'D', 'E'], ['F', 'G', 'H', 'I', 'K'], ['L', 'M', 'N', 'O', 'P'], ['Q', 'R', 'S', 'T', 'U'], ['V', 'W', 'X', 'Y', 'Z'], ['J', '1', '2', '3', '4']];
  var squareWikipedia = [['B', 'G', 'W', 'K', 'Z'], ['Q', 'P', 'N', 'D', 'S'], ['I', 'O', 'A', 'X', 'E'], ['F', 'C', 'L', 'U', 'M'], ['T', 'H', 'Y', 'V', 'R'], ['J', '1', '2', '3', '4']];
  var textRosetta = '0ATTACKATDAWN';
  var textWikipedia = 'FLEEATONCE';
  var textTest = 'The invasion will start on the first of January';
  var maps = square_to_maps(squareRosetta);
  var emap = maps['e'];
  var dmap = maps['d'];
  print('from Rosettacode');
  print('original:   ' + textRosetta);
  var s = encrypt(textRosetta, emap, dmap);
  print('codiert:   ' + s);
  s = decrypt(s, emap, dmap);
  print('and back:   ' + s);
  maps = square_to_maps(squareWikipedia);
  emap = maps['e'];
  dmap = maps['d'];
  print('from Wikipedia');
  print('original:   ' + textWikipedia);
  s = encrypt(textWikipedia, emap, dmap);
  print('codiert:   ' + s);
  s = decrypt(s, emap, dmap);
  print('and back:   ' + s);
  maps = square_to_maps(squareWikipedia);
  emap = maps['e'];
  dmap = maps['d'];
  print('from Rosettacode long part');
  print('original:   ' + textTest);
  s = encrypt(textTest, emap, dmap);
  print('codiert:   ' + s);
  s = decrypt(s, emap, dmap);
  print('and back:   ' + s);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
