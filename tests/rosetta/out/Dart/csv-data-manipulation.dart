// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:22Z
import 'dart:io';
import 'dart:convert';

String join(List<String> xs, String sep) {
  var res = '';
  var i = 0;
  while (i < xs.length) {
    if (i > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = (i + 1 as int);
  }
  return res;
}

int parseIntStr(String str) {
  var i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = (1 as int);
  }
  var n = 0;
  var digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)];
    i = (i + 1 as int);
  }
  if (neg != null) {
    n = -n;
  }
  return n;
}

List<List<String>> rows = [['A', 'B', 'C'], ['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']];

var i = 1;

void main() {
  rows[0] = List.from(rows[0])..add('SUM');
  while (i < rows.length) {
    var sum = 0;
    for (var s in rows[i]) {
      sum = (sum as num) + parseIntStr(s);
    }
    rows[i] = List.from(rows[i])..add(sum.toString());
    i = (i + 1 as int);
  }
  for (var r in rows) {
    print(join(r, ','));
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
