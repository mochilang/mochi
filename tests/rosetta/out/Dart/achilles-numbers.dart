// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:34Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

int pow10(int exp) {
  var n = 1;
  num i = 0;
  while ((i as num) < exp) {
    n = (n as num) * 10;
    i = (i as num) + 1;
  }
  return n;
}

int totient(int n) {
  var tot = n;
  var nn = n;
  var i = 2;
  while (((i as num) * (i as num) as num) <= (nn as num)) {
    if ((nn as num) % (i as num) == 0) {
      while ((nn as num) % (i as num) == 0) {
        nn = (nn as num) / (i as num);
      }
      tot = (tot as num) - ((tot as num) / (i as num) as num);
    }
    if (i == 2) {
      i = 1;
    }
    i = (i as num) + 2;
  }
  if ((nn as num) > 1) {
    tot = (tot as num) - ((tot as num) / (nn as num) as num);
  }
  return tot;
}

Map<int, bool> pps = {};

void getPerfectPowers(int maxExp) {
  var upper = pow10(maxExp);
  var i = 2;
  while (((i as num) * (i as num) as num) < (upper as num)) {
    var p = (i as num) * (i as num);
    while (true) {
      p = (p as num) * (i as num);
      if ((p as num) >= (upper as num)) {
        break;
      }
      pps[p] = true;
    }
    i = (i as num) + 1;
  }
}

Map<int, bool> getAchilles(int minExp, int maxExp) {
  var lower = pow10(minExp);
  var upper = pow10(maxExp);
  Map<int, bool> achilles = {};
  var b = 1;
  while ((((b as num) * (b as num) as num) * (b as num) as num) < (upper as num)) {
    var b3 = ((b as num) * (b as num) as num) * (b as num);
    var a = 1;
    while (true) {
      var p = ((b3 as num) * (a as num) as num) * (a as num);
      if ((p as num) >= (upper as num)) {
        break;
      }
      if ((p as num) >= (lower as num)) {
        if (!(pps.containsKey(p))) {
          achilles[p] = true;
        }
      }
      a = (a as num) + 1;
    }
    b = (b as num) + 1;
  }
  return achilles;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    num idx = 0;
    var i = 1;
    while ((i as num) < tmp.length) {
      if ((tmp[i] as num) < (min as num)) {
        min = tmp[i];
        idx = i;
      }
      i = (i as num) + 1;
    }
    res = (res as num) + ([min] as num);
    List<int> out = [];
    num j = 0;
    while ((j as num) < tmp.length) {
      if (j != idx) {
        out = (out as num) + ([
          tmp[j],
        ] as num);
      }
      j = (j as num) + 1;
    }
    tmp = out;
  }
  return res;
}

String pad(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

void _main() {
  var maxDigits = 15;
  getPerfectPowers(maxDigits);
  var achSet = getAchilles(1, 5);
  List<int> ach = [];
  for (var k in achSet['keys']()) {
    ach = (ach as num) + ([k] as num);
  }
  ach = sortInts(ach);
  print('First 50 Achilles numbers:');
  num i = 0;
  while ((i as num) < 50) {
    var line = '';
    num j = 0;
    while ((j as num) < 10) {
      line = line + pad(ach[i], 4);
      if ((j as num) < 9) {
        line = line + ' ';
      }
      i = (i as num) + 1;
      j = (j as num) + 1;
    }
    print(line);
  }
  print('\nFirst 30 strong Achilles numbers:');
  List<int> strong = [];
  num count = 0;
  num idx = 0;
  while ((count as num) < 30) {
    var tot = totient(ach[idx]);
    if (_in(tot, achSet) != null) {
      strong = (strong as num) + ([
        ach[idx],
      ] as num);
      count = (count as num) + 1;
    }
    idx = (idx as num) + 1;
  }
  i = 0;
  while ((i as num) < 30) {
    var line = '';
    num j = 0;
    while ((j as num) < 10) {
      line = line + pad(strong[i], 5);
      if ((j as num) < 9) {
        line = line + ' ';
      }
      i = (i as num) + 1;
      j = (j as num) + 1;
    }
    print(line);
  }
  print('\nNumber of Achilles numbers with:');
  var counts = [
    1,
    12,
    47,
    192,
    664,
    2242,
    7395,
    24008,
    77330,
    247449,
    788855,
    2508051,
    7960336,
    25235383,
  ];
  var d = 2;
  while ((d as num) <= (maxDigits as num)) {
    var c = counts[(d as num) - 2];
    print(pad(d, 2) + ' digits: ' + c.toString());
    d = (d as num) + 1;
  }
}

void main() {
  _main();
}
