// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:03Z
bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

int pow10(int exp) {
  var n = 1;
  var i = 0;
  while (i.toString().compareTo(exp.toString()) < 0) {
    n = (n as num) * 10;
    i = (i as num) + 1;
  }
  return n;
}

int totient(int n) {
  var tot = n;
  var nn = n;
  var i = 2;
  while ((i as num) * (i as num).toString().compareTo(nn.toString()) <= 0) {
    if ((nn as num) % (i as num) == 0) {
      while ((nn as num) % (i as num) == 0) {
        nn = (nn as num) / (i as num);
      }
      tot = (tot as num) - ((tot as num) / (i as num) as num);
    }
    if (i == 2) {
      i = 1;
    }
    i = (i as num) + 2;
  }
  if (nn.toString().compareTo(1.toString()) > 0) {
    tot = (tot as num) - ((tot as num) / (nn as num) as num);
  }
  return tot;
}

Map<int, bool> pps = {};

void getPerfectPowers(int maxExp) {
  var upper = pow10(maxExp);
  var i = 2;
  while ((i as num) * (i as num).toString().compareTo(upper.toString()) < 0) {
    var p = (i as num) * (i as num);
    while (true) {
      p = (p as num) * (i as num);
      if (p.toString().compareTo(upper.toString()) >= 0) {
        break;
      }
      pps[p] = true;
    }
    i = (i as num) + 1;
  }
}

Map<int, bool> getAchilles(int minExp, int maxExp) {
  var lower = pow10(minExp);
  var upper = pow10(maxExp);
  Map<int, bool> achilles = {};
  var b = 1;
  while (((b as num) * (b as num) as num) * (b as num).toString().compareTo(upper.toString()) < 0) {
    var b3 = ((b as num) * (b as num) as num) * (b as num);
    var a = 1;
    while (true) {
      var p = ((b3 as num) * (a as num) as num) * (a as num);
      if (p.toString().compareTo(upper.toString()) >= 0) {
        break;
      }
      if (p.toString().compareTo(lower.toString()) >= 0) {
        if (!(_in(p, pps))) {
          achilles[p] = true;
        }
      }
      a = (a as num) + 1;
    }
    b = (b as num) + 1;
  }
  return achilles;
}

List<int> sortInts(List<int> xs) {
  List<int> res = [];
  var tmp = xs;
  while (tmp.length > 0) {
    var min = tmp[0];
    var idx = 0;
    var i = 1;
    while (i.toString().compareTo(tmp.length.toString()) < 0) {
      if (tmp[i].toString().compareTo(min.toString()) < 0) {
        min = tmp[i];
        idx = i;
      }
      i = (i as num) + 1;
    }
    res = (res as num) + ([min] as num);
    List<int> out = [];
    var j = 0;
    while (j.toString().compareTo(tmp.length.toString()) < 0) {
      if (j != idx) {
        out = (out as num) + ([tmp[j]] as num);
      }
      j = (j as num) + 1;
    }
    tmp = out;
  }
  return res;
}

String pad(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

void main() {
  var maxDigits = 15;
  getPerfectPowers(maxDigits);
  var achSet = getAchilles(1, 5);
  List<int> ach = [];
  for (var k in achSet['keys']()) {
    ach = (ach as num) + ([k] as num);
  }
  ach = sortInts(ach);
  print('First 50 Achilles numbers:');
  var i = 0;
  while (i.toString().compareTo(50.toString()) < 0) {
    var line = '';
    var j = 0;
    while (j.toString().compareTo(10.toString()) < 0) {
      line = line + pad(ach[i], 4);
      if (j.toString().compareTo(9.toString()) < 0) {
        line = line + ' ';
      }
      i = (i as num) + 1;
      j = (j as num) + 1;
    }
    print(line);
  }
  print('
First 30 strong Achilles numbers:');
  List<int> strong = [];
  var count = 0;
  var idx = 0;
  while (count.toString().compareTo(30.toString()) < 0) {
    var tot = totient(ach[idx]);
    if (_in(tot, achSet) != null) {
      strong = (strong as num) + ([ach[idx]] as num);
      count = (count as num) + 1;
    }
    idx = (idx as num) + 1;
  }
  i = 0;
  while (i.toString().compareTo(30.toString()) < 0) {
    var line = '';
    var j = 0;
    while (j.toString().compareTo(10.toString()) < 0) {
      line = line + pad(strong[i], 5);
      if (j.toString().compareTo(9.toString()) < 0) {
        line = line + ' ';
      }
      i = (i as num) + 1;
      j = (j as num) + 1;
    }
    print(line);
  }
  print('
Number of Achilles numbers with:');
  var counts = [1, 12, 47, 192, 664, 2242, 7395, 24008, 77330, 247449, 788855, 2508051, 7960336, 25235383];
  var d = 2;
  while (d.toString().compareTo(maxDigits.toString()) <= 0) {
    var c = counts[(d as num) - 2];
    print(pad(d, 2) + ' digits: ' + c.toString());
    d = (d as num) + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
