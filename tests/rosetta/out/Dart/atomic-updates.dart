// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:10Z
import 'dart:io';
import 'dart:convert';

List<int> randOrder(int seed, int n) {
  var next = (seed * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

List<int> randChaos(int seed, int n) {
  var next = (seed * 1103515245 + 12345) % 2147483647;
  return [next, next % n];
}

void main() {
  var nBuckets = 10;
  var initialSum = 1000;
  List<int> buckets = [];
  for (var i = 0; i < nBuckets; i++) {
    buckets = List.from(buckets)..add(0);
  }
  var i = nBuckets;
  var dist = initialSum;
  while (i > 0) {
    var v = dist / i;
    i = i - 1;
    buckets[i] = v;
    dist = dist - v;
  }
  var tc0 = 0;
  var tc1 = 0;
  var total = 0;
  var nTicks = 0;
  var seedOrder = 1;
  var seedChaos = 2;
  print('sum  ---updates---    mean  buckets');
  var t = 0;
  while (t < 5) {
    var r = randOrder(seedOrder, nBuckets);
    seedOrder = r[0];
    var b1 = r[1];
    var b2 = (b1 + 1) % nBuckets;
    var v1 = buckets[b1];
    var v2 = buckets[b2];
    if (v1 > v2) {
      var a = int.parse(((v1 - v2) / 2));
      if (a > buckets[b1]) {
        a = buckets[b1];
      }
      buckets[b1] = buckets[b1] - a;
      buckets[b2] = buckets[b2] + a;
    }
    else {
      var a = int.parse(((v2 - v1) / 2));
      if (a > buckets[b2]) {
        a = buckets[b2];
      }
      buckets[b2] = buckets[b2] - a;
      buckets[b1] = buckets[b1] + a;
    }
    tc0 = tc0 + 1;
    r = randChaos(seedChaos, nBuckets);
    seedChaos = r[0];
    b1 = r[1];
    b2 = (b1 + 1) % nBuckets;
    r = randChaos(seedChaos, buckets[b1] + 1);
    seedChaos = r[0];
    var amt = r[1];
    if (amt > buckets[b1]) {
      amt = buckets[b1];
    }
    buckets[b1] = buckets[b1] - amt;
    buckets[b2] = buckets[b2] + amt;
    tc1 = tc1 + 1;
    var sum = 0;
    var idx = 0;
    while (idx < nBuckets) {
      sum = (sum as num) + buckets[idx];
      idx = idx + 1;
    }
    total = total + tc0 + tc1;
    nTicks = nTicks + 1;
    print(sum.toString() + ' ' + tc0.toString() + ' ' + tc1.toString() + ' ' + total / nTicks.toString() + '  ' + buckets.toString());
    tc0 = 0;
    tc1 = 0;
    t = t + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
