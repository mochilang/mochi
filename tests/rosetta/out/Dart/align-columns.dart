// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:42Z
List<String> split(String s, String sep) {
  List<String> parts = [];
  var cur = '';
  num i = 0;
  while ((i as num) < s.length) {
    if (sep.length > 0 && ((i as num) + sep.length as num) <= s.length && s.toString().substring(i, (i as num) + sep.length) == sep) {
      parts = List.from(parts)..add(cur);
      cur = '';
      i = (i as num) + sep.length;
    }
    else {
      cur = cur + s.toString().substring(i, (i as num) + 1);
      i = (i as num) + 1;
    }
  }
  parts = List.from(parts)..add(cur);
  return parts;
}

List<String> rstripEmpty(List<String> words) {
  var n = words.length;
  while ((n as num) > 0 && words[(n as num) - 1] == '') {
    n = (n as num) - 1;
  }
  return words.sublist(0, n);
}

String spaces(int n) {
  var out = '';
  num i = 0;
  while ((i as num) < n) {
    out = out + ' ';
    i = (i as num) + 1;
  }
  return out;
}

String pad(String word, int width, int align) {
  var diff = width - word.length;
  if (align == 0) {
    return word + spaces(diff);
  }
  if (align == 2) {
    return spaces(diff) + word;
  }
  var left = int.parse(((diff as num) / 2));
  var right = (diff as num) - (left as num);
  return spaces(left) + word + spaces(right);
}

Map<String, any> newFormatter(String text) {
  var lines = split(text, '\n');
  List<List<String>> fmtLines = [];
  List<int> width = [];
  num i = 0;
  while ((i as num) < lines.length) {
    if (lines[i].length == 0) {
      i = (i as num) + 1;
      continue;
    }
    var words = rstripEmpty(split(lines[i], '\$'));
    fmtLines = List.from(fmtLines)..add(words);
    num j = 0;
    while ((j as num) < words.length) {
      var wlen = words[j].length;
      if (j == width.length) {
        width = List.from(width)..add(wlen);
      }
      else 
      if ((wlen as num) > (width[j] as num)) {
        width[j] = wlen;
      }
      j = (j as num) + 1;
    }
    i = (i as num) + 1;
  }
  return {'text': fmtLines, 'width': width};
}

void printFmt(Map<String, any> f, int align) {
  var lines = ((f as Map)['text'] as List<List<String>>);
  var width = ((f as Map)['width'] as List<int>);
  num i = 0;
  while ((i as num) < lines.length) {
    var words = lines[i];
    var line = '';
    num j = 0;
    while ((j as num) < words.length) {
      line = line + pad(words[j], width[j], align) + ' ';
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 1;
  }
  print('');
}

var text = 'Given\$a\$text\$file\$of\$many\$lines,\$where\$fields\$within\$a\$line\n' + 'are\$delineated\$by\$a\$single\$\'dollar\'\$character,\$write\$a\$program\n' + 'that\$aligns\$each\$column\$of\$fields\$by\$ensuring\$that\$words\$in\$each\n' + 'column\$are\$separated\$by\$at\$least\$one\$space.\n' + 'Further,\$allow\$for\$each\$word\$in\$a\$column\$to\$be\$either\$left\n' + 'justified,\$right\$justified,\$or\$center\$justified\$within\$its\$column.';

var f = newFormatter(text);

void main() {
  printFmt(f, 0);
  printFmt(f, 1);
  printFmt(f, 2);
}
