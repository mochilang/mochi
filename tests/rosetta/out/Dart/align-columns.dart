// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:41Z
import 'dart:io';
import 'dart:convert';

List<String> split(String s, String sep) {
  List<String> parts = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    if (sep.length > 0 && i + sep.length <= s.length && s.toString().substring(i, i + sep.length) == sep) {
      parts = List.from(parts)..add(cur);
      cur = '';
      i = i + sep.length;
    }
    else {
      cur = cur + s.toString().substring(i, i + 1);
      i = i + 1;
    }
  }
  parts = List.from(parts)..add(cur);
  return parts;
}

List<String> rstripEmpty(List<String> words) {
  var n = words.length;
  while (n > 0 && words[n - 1] == '') {
    n = n - 1;
  }
  return words.sublist(0, n);
}

String spaces(int n) {
  var out = '';
  var i = 0;
  while (i < n) {
    out = out + ' ';
    i = i + 1;
  }
  return out;
}

String pad(String word, int width, int align) {
  var diff = width - word.length;
  if (align == 0) {
    return word + spaces(diff);
  }
  if (align == 2) {
    return spaces(diff) + word;
  }
  var left = int.parse((diff / 2));
  var right = diff - left;
  return spaces(left) + word + spaces(right);
}

Map<String, any> newFormatter(String text) {
  var lines = split(text, '\n');
  List<List<String>> fmtLines = [];
  List<int> width = [];
  var i = 0;
  while (i < lines.length) {
    if (lines[i].length == 0) {
      i = i + 1;
      continue;
    }
    var words = rstripEmpty(split(lines[i], '\$'));
    fmtLines = List.from(fmtLines)..add(words);
    var j = 0;
    while (j < words.length) {
      var wlen = words[j].length;
      if (j == width.length) {
        width = List.from(width)..add(wlen);
      }
      else 
      if (wlen > width[j]) {
        width[j] = wlen;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return {'text': fmtLines, 'width': width};
}

void printFmt(Map<String, any> f, int align) {
  var lines = ((f as Map)['text'] as List<List<String>>);
  var width = ((f as Map)['width'] as List<int>);
  var i = 0;
  while (i < lines.length) {
    var words = lines[i];
    var line = '';
    var j = 0;
    while (j < words.length) {
      line = line + pad(words[j], width[j], align) + ' ';
      j = j + 1;
    }
    print(line);
    i = i + 1;
  }
  print('');
}

var text = 'Given\$a\$text\$file\$of\$many\$lines,\$where\$fields\$within\$a\$line\n' + 'are\$delineated\$by\$a\$single\$\'dollar\'\$character,\$write\$a\$program\n' + 'that\$aligns\$each\$column\$of\$fields\$by\$ensuring\$that\$words\$in\$each\n' + 'column\$are\$separated\$by\$at\$least\$one\$space.\n' + 'Further,\$allow\$for\$each\$word\$in\$a\$column\$to\$be\$either\$left\n' + 'justified,\$right\$justified,\$or\$center\$justified\$within\$its\$column.';

var f = newFormatter(text);

void main() {
  printFmt(f, 0);
  printFmt(f, 1);
  printFmt(f, 2);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
