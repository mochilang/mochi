// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:17Z
import 'dart:io';
import 'dart:convert';

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

List<int> set58(String addr) {
  var tmpl = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  List<int> a = [];
  var i = 0;
  while (i < 25) {
    a = List.from(a)..add(0);
    i = i + 1;
  }
  var idx = 0;
  while (idx < addr.length) {
    var ch = addr.substring(idx, idx + 1);
    var c = indexOf(tmpl, ch);
    if (c < 0) {
      return [];
    }
    var j = 24;
    while (j >= 0) {
      c = c + 58 * a[j];
      a[j] = c % 256;
      c = int.parse((c / 256));
      j = j - 1;
    }
    if (c > 0) {
      return [];
    }
    idx = idx + 1;
  }
  return a;
}

List<int> doubleSHA256(List<int> bs) {
  var first = sha256(bs);
  return sha256(first);
}

List<int> computeChecksum(List<int> a) {
  var hash = doubleSHA256(a.sublist(0, 21));
  return ((hash is String) ? hash.substring(0, 4) : (hash as List).sublist(0, 4));
}

bool validA58(String addr) {
  var a = set58(addr);
  if (a.length != 25) {
    return false;
  }
  if (a[0] != 0) {
    return false;
  }
  var sum = computeChecksum(a);
  var i = 0;
  while (i < 4) {
    if (a[21 + i] != sum[i]) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

void main() {
  print(validA58('1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i').toString());
  print(validA58('17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j').toString());
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
