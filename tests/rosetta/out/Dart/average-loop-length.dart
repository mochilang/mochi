// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:10Z
import 'dart:io';
import 'dart:convert';

double absf(double x) {
  if (x < 0) {
    return -x;
  }
  return x;
}

double floorf(double x) {
  return double.parse((int.parse(x)));
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

String fmtF(double x) {
  var y = floorf(x * 10000 + 0.5) / 10000;
  var s = y.toString();
  var dot = indexOf(s, '.');
  if (dot == 0 - 1) {
    s = s + '.0000';
  }
  else {
    var decs = s.length - dot - 1;
    if (decs > 4) {
      s = s.toString().substring(0, dot + 5);
    }
    else {
      while (decs < 4) {
        s = s + '0';
        decs = decs + 1;
      }
    }
  }
  return s;
}

String padInt(int n, int width) {
  var s = n.toString();
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

String padFloat(double x, int width) {
  var s = fmtF(x);
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

double avgLen(int n) {
  var tests = 10000;
  var sum = 0;
  var seed = 1;
  var t = 0;
  while (t < tests) {
    List<bool> visited = [];
    var i = 0;
    while (i < n) {
      visited = List.from(visited)..add(false);
      i = i + 1;
    }
    var x = 0;
    while (!visited[x] != null) {
      visited[x] = true;
      sum = (sum as num) + 1;
      seed = (seed * 1664525 + 1013904223) % 2147483647;
      x = seed % n;
    }
    t = t + 1;
  }
  return (double.parse(sum)) / tests;
}

double ana(int n) {
  var nn = double.parse(n);
  var term = 1;
  var sum = 1;
  var i = nn - 1;
  while (i >= 1) {
    term = term * (i / nn);
    sum = (sum as num) + term;
    i = i - 1;
  }
  return sum;
}

void main() {
  var nmax = 20;
  print(' N    average    analytical    (error)');
  print('===  =========  ============  =========');
  var n = 1;
  while (n <= nmax) {
    var a = avgLen(n);
    var b = ana(n);
    var err = absf(a - b) / b * 100;
    var line = padInt(n, 3) + '  ' + padFloat(a, 9) + '  ' + padFloat(b, 12) + '  (' + padFloat(err, 6) + '%)';
    print(line);
    n = n + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
