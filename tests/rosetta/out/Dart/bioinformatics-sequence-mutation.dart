// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:17Z
import 'dart:io';
import 'dart:convert';

List<int> randInt(int s, int n) {
  var next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while (n > 0) {
    res = res + ' ';
    n = n - 1;
  }
  return res + s;
}

List<any> makeSeq(int s, int le) {
  var bases = 'ACGT';
  var out = '';
  var i = 0;
  while (i < le) {
    var r = randInt(s, 4);
    s = (r[0] as int);
    var idx = int.parse(r[1]);
    out = out + bases.toString().substring(idx, idx + 1);
    i = i + 1;
  }
  return [s, out];
}

List<any> mutate(int s, String dna, List<int> w) {
  var bases = 'ACGT';
  var le = dna.length;
  var r = randInt(s, le);
  s = (r[0] as int);
  var p = int.parse(r[1]);
  r = randInt(s, 300);
  s = (r[0] as int);
  var x = int.parse(r[1]);
  List<String> arr = [];
  var i = 0;
  while (i < le) {
    arr = List.from(arr)..add(dna.toString().substring(i, i + 1));
    i = i + 1;
  }
  if (x < w[0]) {
    r = randInt(s, 4);
    s = (r[0] as int);
    var idx = int.parse(r[1]);
    var b = bases.toString().substring(idx, idx + 1);
    print('  Change @' + padLeft(p.toString(), 3) + ' \'' + arr[p] + '\' to \'' + b + '\'');
    arr[p] = b;
  }
  else 
  if (x < w[0] + w[1]) {
    print('  Delete @' + padLeft(p.toString(), 3) + ' \'' + arr[p] + '\'');
    var j = p;
    while (j < arr.length - 1) {
      arr[j] = arr[j + 1];
      j = j + 1;
    }
    arr = ((arr is String) ? arr.substring(0, arr.length - 1) : (arr as List).sublist(0, arr.length - 1));
  }
  else {
    r = randInt(s, 4);
    s = (r[0] as int);
    var idx2 = int.parse(r[1]);
    var b = bases.toString().substring(idx2, idx2 + 1);
    arr = List.from(arr)..add('');
    var j = arr.length - 1;
    while (j > p) {
      arr[j] = arr[j - 1];
      j = j - 1;
    }
    print('  Insert @' + padLeft(p.toString(), 3) + ' \'' + b + '\'');
    arr[p] = b;
  }
  var out = '';
  i = 0;
  while (i < arr.length) {
    out = out + arr[i];
    i = i + 1;
  }
  return [s, out];
}

void prettyPrint(String dna, int rowLen) {
  print('SEQUENCE:');
  var le = dna.length;
  var i = 0;
  while (i < le) {
    var k = i + rowLen;
    if (k > le) {
      k = le;
    }
    print(padLeft(i.toString(), 5) + ': ' + dna.substring(i, k));
    i = i + rowLen;
  }
  var a = 0;
  var c = 0;
  var g = 0;
  var t = 0;
  var idx = 0;
  while (idx < le) {
    var ch = dna.toString().substring(idx, idx + 1);
    if (ch == 'A') {
      a = a + 1;
    }
    else {
      if (ch == 'C') {
        c = c + 1;
      }
      else {
        if (ch == 'G') {
          g = g + 1;
        }
        else {
          if (ch == 'T') {
            t = t + 1;
          }
        }
      }
    }
    idx = idx + 1;
  }
  print('');
  print('BASE COUNT:');
  print('    A: ' + padLeft(a.toString(), 3));
  print('    C: ' + padLeft(c.toString(), 3));
  print('    G: ' + padLeft(g.toString(), 3));
  print('    T: ' + padLeft(t.toString(), 3));
  print('    ------');
  print('    Σ: ' + le.toString());
  print('    ======');
}

String wstring(List<int> w) {
  return '  Change: ' + w[0].toString() + '
  Delete: ' + w[1].toString() + '
  Insert: ' + w[2].toString() + '
';
}

void main() {
  var seed = 1;
  var res = makeSeq(seed, 250);
  seed = res[0];
  var dna = res[1].toString();
  prettyPrint(dna, 50);
  var muts = 10;
  var w = [100, 100, 100];
  print('
WEIGHTS (ex 300):');
  print(wstring(w));
  print('MUTATIONS (' + muts.toString() + '):');
  var i = 0;
  while (i < muts) {
    res = mutate(seed, dna, w);
    seed = res[0];
    dna = res[1].toString();
    i = i + 1;
  }
  print('');
  prettyPrint(dna, 50);
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
