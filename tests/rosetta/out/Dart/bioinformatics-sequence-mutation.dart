// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:30Z
List<int> randInt(int s, int n) {
  var next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, (next as num) % n];
}

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while ((n as num) > 0) {
    res = res + ' ';
    n = (n as num) - 1;
  }
  return res + s;
}

List<any> makeSeq(int s, int le) {
  var bases = 'ACGT';
  var out = '';
  num i = 0;
  while ((i as num) < le) {
    var r = randInt(s, 4);
    s = r[0];
    var idx = int.parse(r[1]);
    out = out + bases.toString().substring(idx, (idx as num) + 1);
    i = (i as num) + 1;
  }
  return [s, out];
}

List<any> mutate(int s, String dna, List<int> w) {
  var bases = 'ACGT';
  var le = dna.length;
  var r = randInt(s, le);
  s = r[0];
  var p = int.parse(r[1]);
  r = randInt(s, 300);
  s = r[0];
  var x = int.parse(r[1]);
  List<String> arr = [];
  num i = 0;
  while ((i as num) < (le as num)) {
    arr = List.from(arr)..add(dna.toString().substring(i, (i as num) + 1));
    i = (i as num) + 1;
  }
  if ((x as num) < w[0]) {
    r = randInt(s, 4);
    s = r[0];
    var idx = int.parse(r[1]);
    var b = bases.toString().substring(idx, (idx as num) + 1);
    print('  Change @' + padLeft(p.toString(), 3) + ' \'' + arr[p] + '\' to \'' + b + '\'');
    arr[p] = b;
  }
  else 
  if ((x as num) < w[0] + w[1]) {
    print('  Delete @' + padLeft(p.toString(), 3) + ' \'' + arr[p] + '\'');
    var j = p;
    while ((j as num) < arr.length - 1) {
      arr[j] = arr[(j as num) + 1];
      j = (j as num) + 1;
    }
    arr = ((arr is String) ? arr.substring(0, arr.length - 1) : (arr as List).sublist(0, arr.length - 1));
  }
  else {
    r = randInt(s, 4);
    s = r[0];
    var idx2 = int.parse(r[1]);
    var b = bases.toString().substring(idx2, (idx2 as num) + 1);
    arr = List.from(arr)..add('');
    var j = arr.length - 1;
    while ((j as num) > (p as num)) {
      arr[j] = arr[(j as num) - 1];
      j = (j as num) - 1;
    }
    print('  Insert @' + padLeft(p.toString(), 3) + ' \'' + b + '\'');
    arr[p] = b;
  }
  var out = '';
  i = 0;
  while ((i as num) < arr.length) {
    out = (out as num) + (arr[i] as num);
    i = (i as num) + 1;
  }
  return [s, out];
}

void prettyPrint(String dna, int rowLen) {
  print('SEQUENCE:');
  var le = dna.length;
  num i = 0;
  while ((i as num) < (le as num)) {
    var k = (i as num) + rowLen;
    if ((k as num) > (le as num)) {
      k = le;
    }
    print(padLeft(i.toString(), 5) + ': ' + dna.substring(i, k));
    i = (i as num) + rowLen;
  }
  num a = 0;
  num c = 0;
  num g = 0;
  num t = 0;
  num idx = 0;
  while ((idx as num) < (le as num)) {
    var ch = dna.toString().substring(idx, (idx as num) + 1);
    if (ch == 'A') {
      a = (a as num) + 1;
    }
    else {
      if (ch == 'C') {
        c = (c as num) + 1;
      }
      else {
        if (ch == 'G') {
          g = (g as num) + 1;
        }
        else {
          if (ch == 'T') {
            t = (t as num) + 1;
          }
        }
      }
    }
    idx = (idx as num) + 1;
  }
  print('');
  print('BASE COUNT:');
  print('    A: ' + padLeft(a.toString(), 3));
  print('    C: ' + padLeft(c.toString(), 3));
  print('    G: ' + padLeft(g.toString(), 3));
  print('    T: ' + padLeft(t.toString(), 3));
  print('    ------');
  print('    Î£: ' + le.toString());
  print('    ======');
}

String wstring(List<int> w) {
  return '  Change: ' + w[0].toString() + '\n  Delete: ' + w[1].toString() + '\n  Insert: ' + w[2].toString() + '\n';
}

void _main() {
  var seed = 1;
  var res = makeSeq(seed, 250);
  seed = res[0];
  var dna = res[1].toString();
  prettyPrint(dna, 50);
  var muts = 10;
  var w = [100, 100, 100];
  print('\nWEIGHTS (ex 300):');
  print(wstring(w));
  print('MUTATIONS (' + muts.toString() + '):');
  num i = 0;
  while ((i as num) < (muts as num)) {
    res = mutate(seed, dna, w);
    seed = res[0];
    dna = res[1].toString();
    i = (i as num) + 1;
  }
  print('');
  prettyPrint(dna, 50);
}

void main() {
  _main();
}
