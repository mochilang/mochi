// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:45Z
List<int> egcd(int a, int b) {
  if (a == 0) {
    return [b, 0, 1];
  }
  var res = egcd(b % a, a);
  var g = res[0];
  var x1 = res[1];
  var y1 = res[2];
  return [g, (y1 as num) - ((b / a) * (x1 as num) as num), x1];
}

int modInv(int a, int m) {
  var r = egcd(a, m);
  if (r[0] != 1) {
    return 0;
  }
  var x = r[1];
  if (x.toString().compareTo(0.toString()) < 0) {
    return (x as num) + m;
  }
  return x;
}

int crt(List<int> a, List<int> n) {
  var prod = 1;
  var i = 0;
  while (i.toString().compareTo(n.length.toString()) < 0) {
    prod = (prod as num) * n[i];
    i = (i as num) + 1;
  }
  var x = 0;
  i = 0;
  while (i.toString().compareTo(n.length.toString()) < 0) {
    var ni = n[i];
    var ai = a[i];
    var p = (prod as num) / (ni as num);
    var inv = modInv((p as num) % (ni as num), ni);
    x = (x as num) + (((ai as num) * (inv as num) as num) * (p as num) as num);
    i = (i as num) + 1;
  }
  return (x as num) % (prod as num);
}

var n = [3, 5, 7];

var a = [2, 3, 2];

var res = crt(a, n);

void main() {
  print(res.toString() + ' <nil>');
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
