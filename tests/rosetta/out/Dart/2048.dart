// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:32Z
import 'dart:io';
import 'dart:convert';

var SIZE = 4;

List<List<int>> newBoard() {
  List<List<int>> b = [];
  var y = 0;
  while (y < SIZE) {
    List<int> row = [];
    var x = 0;
    while (x < SIZE) {
      row = List.from(row)..add(0);
      x = x + 1;
    }
    b = List.from(b)..add(row);
    y = y + 1;
  }
  return b;
}

Map<String, any> spawnTile(List<List<int>> b) {
  List<List<int>> empty = [];
  var y = 0;
  while (y < SIZE) {
    var x = 0;
    while (x < SIZE) {
      if (b[y][x] == 0) {
        empty = List.from(empty)..add([x, y]);
      }
      x = x + 1;
    }
    y = y + 1;
  }
  if (empty.length == 0) {
    return {'board': b, 'full': true};
  }
  var idx = DateTime.now().microsecondsSinceEpoch % empty.length;
  var cell = empty[idx];
  var val = 4;
  if (DateTime.now().microsecondsSinceEpoch % 10 < 9) {
    val = 2;
  }
  b[cell[1]][cell[0]] = (val as int);
  return {'board': b, 'full': empty.length == 1};
}

String pad(int n) {
  var s = n.toString();
  var pad = 4 - s.length;
  var i = 0;
  var out = '';
  while (i.toString().compareTo(pad.toString()) < 0) {
    out = out + ' ';
    i = i + 1;
  }
  return out + s;
}

void draw(List<List<int>> b, int score) {
  print('Score: ' + score.toString());
  var y = 0;
  while (y < SIZE) {
    print('+----+----+----+----+');
    var line = '|';
    var x = 0;
    while (x < SIZE) {
      var v = b[y][x];
      if (v == 0) {
        line = line + '    |';
      }
      else {
        line = line + pad(v) + '|';
      }
      x = x + 1;
    }
    print(line);
    y = y + 1;
  }
  print('+----+----+----+----+');
  print('W=Up S=Down A=Left D=Right Q=Quit');
}

List<int> reverseRow(List<int> r) {
  List<int> out = [];
  var i = r.length - 1;
  while (i >= 0) {
    out = List.from(out)..add(r[i]);
    i = i - 1;
  }
  return out;
}

Map<String, any> slideLeft(List<int> row) {
  List<int> xs = [];
  var i = 0;
  while (i < row.length) {
    if (row[i] != 0) {
      xs = List.from(xs)..add(row[i]);
    }
    i = i + 1;
  }
  List<int> res = [];
  var gain = 0;
  i = 0;
  while (i < xs.length) {
    if (i + 1 < xs.length && xs[i] == xs[i + 1]) {
      var v = xs[i] * 2;
      gain = gain + v;
      res = List.from(res)..add(v);
      i = i + 2;
    }
    else {
      res = List.from(res)..add(xs[i]);
      i = i + 1;
    }
  }
  while (res.length < SIZE) {
    res = List.from(res)..add(0);
  }
  return {'row': res, 'gain': gain};
}

Map<String, any> moveLeft(List<List<int>> b, int score) {
  var moved = false;
  var y = 0;
  while (y < SIZE) {
    var r = slideLeft(b[y]);
    var new = (r as Map)['row'];
    score = (score + (r as Map)['gain'] as int);
    var x = 0;
    while (x < SIZE) {
      if (b[y][x] != new[x]) {
        moved = true;
      }
      b[y][x] = (new[x] as int);
      x = x + 1;
    }
    y = y + 1;
  }
  return {'board': b, 'score': score, 'moved': moved};
}

Map<String, any> moveRight(List<List<int>> b, int score) {
  var moved = false;
  var y = 0;
  while (y < SIZE) {
    var rev = reverseRow(b[y]);
    var r = slideLeft(rev);
    rev = (r as Map)['row'];
    score = (score + (r as Map)['gain'] as int);
    rev = reverseRow(rev);
    var x = 0;
    while (x < SIZE) {
      if (b[y][x] != rev[x]) {
        moved = true;
      }
      b[y][x] = (rev[x] as int);
      x = x + 1;
    }
    y = y + 1;
  }
  return {'board': b, 'score': score, 'moved': moved};
}

List<int> getCol(List<List<int>> b, int x) {
  List<int> col = [];
  var y = 0;
  while (y < SIZE) {
    col = List.from(col)..add(b[y][x]);
    y = y + 1;
  }
  return col;
}

void setCol(List<List<int>> b, int x, List<int> col) {
  var y = 0;
  while (y < SIZE) {
    b[y][x] = (col[y] as int);
    y = y + 1;
  }
}

Map<String, any> moveUp(List<List<int>> b, int score) {
  var moved = false;
  var x = 0;
  while (x < SIZE) {
    var col = getCol(b, x);
    var r = slideLeft(col);
    var new = (r as Map)['row'];
    score = (score + (r as Map)['gain'] as int);
    var y = 0;
    while (y < SIZE) {
      if (b[y][x] != new[y]) {
        moved = true;
      }
      b[y][x] = (new[y] as int);
      y = y + 1;
    }
    x = x + 1;
  }
  return {'board': b, 'score': score, 'moved': moved};
}

Map<String, any> moveDown(List<List<int>> b, int score) {
  var moved = false;
  var x = 0;
  while (x < SIZE) {
    var col = reverseRow(getCol(b, x));
    var r = slideLeft(col);
    col = (r as Map)['row'];
    score = (score + (r as Map)['gain'] as int);
    col = reverseRow(col);
    var y = 0;
    while (y < SIZE) {
      if (b[y][x] != col[y]) {
        moved = true;
      }
      b[y][x] = (col[y] as int);
      y = y + 1;
    }
    x = x + 1;
  }
  return {'board': b, 'score': score, 'moved': moved};
}

bool hasMoves(List<List<int>> b) {
  var y = 0;
  while (y < SIZE) {
    var x = 0;
    while (x < SIZE) {
      if (b[y][x] == 0) {
        return true;
      }
      if (x + 1 < SIZE && b[y][x] == b[y][x + 1]) {
        return true;
      }
      if (y + 1 < SIZE && b[y][x] == b[y + 1][x]) {
        return true;
      }
      x = x + 1;
    }
    y = y + 1;
  }
  return false;
}

bool has2048(List<List<int>> b) {
  var y = 0;
  while (y < SIZE) {
    var x = 0;
    while (x < SIZE) {
      if (b[y][x] >= 2048) {
        return true;
      }
      x = x + 1;
    }
    y = y + 1;
  }
  return false;
}

var board = newBoard();

var r = spawnTile(board);

var full = (r as Map)['full'];

var score = 0;

void main() {
  board = (r as Map)['board'];
  r = spawnTile(board);
  board = (r as Map)['board'];
  full = (r as Map)['full'];
  draw(board, score);
  while (true) {
    print('Move: ');
    var cmd = input();
    var moved = false;
    if (cmd == 'a' || cmd == 'A') {
      var m = moveLeft(board, score);
      board = m['board'];
      score = (m['score'] as int);
      moved = m['moved'];
    }
    if (cmd == 'd' || cmd == 'D') {
      var m = moveRight(board, score);
      board = m['board'];
      score = (m['score'] as int);
      moved = m['moved'];
    }
    if (cmd == 'w' || cmd == 'W') {
      var m = moveUp(board, score);
      board = m['board'];
      score = (m['score'] as int);
      moved = m['moved'];
    }
    if (cmd == 's' || cmd == 'S') {
      var m = moveDown(board, score);
      board = m['board'];
      score = (m['score'] as int);
      moved = m['moved'];
    }
    if (cmd == 'q' || cmd == 'Q') {
      break;
    }
    if (moved != null) {
      var r2 = spawnTile(board);
      board = r2['board'];
      full = r2['full'];
      if (full && (!hasMoves(board)) != null) {
        draw(board, score);
        print('Game Over');
        break;
      }
    }
    draw(board, score);
    if (has2048(board)) {
      print('You win!');
      break;
    }
    if (!hasMoves(board)) {
      print('Game Over');
      break;
    }
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
