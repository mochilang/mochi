// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:20Z
import 'dart:io';
import 'dart:convert';

class Birthday {
  int month;
  int day;
  Birthday(this.month, this.day);
}

bool monthUnique(Birthday b, List<Birthday> list) {
  var c = 0;
  for (var x in list) {
    if (x.month == b.month) {
      c = c + 1;
    }
  }
  return c == 1;
}

bool dayUnique(Birthday b, List<Birthday> list) {
  var c = 0;
  for (var x in list) {
    if (x.day == b.day) {
      c = c + 1;
    }
  }
  return c == 1;
}

bool monthWithUniqueDay(Birthday b, List<Birthday> list) {
  for (var x in list) {
    if (x.month == b.month && dayUnique(x, list)) {
      return true;
    }
  }
  return false;
}

String bstr(Birthday b) {
  var months = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  return months[b.month] + ' ' + b.day.toString();
}

List<Birthday> choices = [Birthday(5, 15), Birthday(5, 16), Birthday(5, 19), Birthday(6, 17), Birthday(6, 18), Birthday(7, 14), Birthday(7, 16), Birthday(8, 14), Birthday(8, 15), Birthday(8, 17)];

List<Birthday> filtered = [];

List<Birthday> filtered2 = [];

List<Birthday> filtered3 = [];

List<Birthday> filtered4 = [];

void main() {
  for (var bd in choices) {
    if (!monthUnique(bd, choices)) {
      filtered = List.from(filtered)..add(bd);
    }
  }
  for (var bd in filtered) {
    if (!monthWithUniqueDay(bd, filtered)) {
      filtered2 = List.from(filtered2)..add(bd);
    }
  }
  for (var bd in filtered2) {
    if (dayUnique(bd, filtered2)) {
      filtered3 = List.from(filtered3)..add(bd);
    }
  }
  for (var bd in filtered3) {
    if (monthUnique(bd, filtered3)) {
      filtered4 = List.from(filtered4)..add(bd);
    }
  }
  if (filtered4.length == 1) {
    print('Cheryl\'s birthday is ' + bstr(filtered4[0]));
  }
  else {
    print('Something went wrong!');
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
