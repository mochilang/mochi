// Generated by Mochi compiler v0.10.30 on 2025-07-19T02:17:07Z
import 'dart:io';

var board = [
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
];

var solved = [
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
];

var empty = 15;

var moves = 0;

var quit = false;

int randMove() {
  return DateTime.now().microsecondsSinceEpoch % 4;
}

bool isSolved() {
  var i = 0;
  while (i < 16) {
    if (board[i] != solved[i]) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

Map<String, dynamic> isValidMove(int m) {
  if (m == 0) {
    return {'idx': empty - 4, 'ok': empty ~/ 4 > 0};
  }
  if (m == 1) {
    return {'idx': empty + 4, 'ok': empty ~/ 4 < 3};
  }
  if (m == 2) {
    return {'idx': empty + 1, 'ok': empty % 4 < 3};
  }
  if (m == 3) {
    return {'idx': empty - 1, 'ok': empty % 4 > 0};
  }
  return {'idx': 0, 'ok': false};
}

bool doMove(int m) {
  var r = isValidMove(m);
  if (!(r as Map)['ok'] != null) {
    return false;
  }
  var i = empty;
  var j = int.parse((r as Map)['idx'].toString());
  var tmp = board[i];
  board[i] = board[j];
  board[j] = tmp;
  empty = j;
  moves = moves + 1;
  return true;
}

void shuffle(int n) {
  var i = 0;
  while (i < n || isSolved()) {
    if (doMove(randMove())) {
      i = i + 1;
    }
  }
}

void printBoard() {
  var line = '';
  var i = 0;
  while (i < 16) {
    var val = board[i];
    if (val == 0) {
      line = line + '  .';
    }
    else {
      var s = (val).toString();
      if (val < 10) {
        line = line + '  ' + s;
      }
      else {
        line = line + ' ' + s;
      }
    }
    if (i % 4 == 3) {
      print(line);
      line = '';
    }
    i = i + 1;
  }
}

void playOneMove() {
  while (true) {
    print('Enter move #' + (moves + 1).toString() + ' (U, D, L, R, or Q): ');
    var s = _input();
    if (s == '') {
      continue;
    }
    var c = s.substring(0, 1);
    var m = 0;
    if (c == 'U' || c == 'u') {
      m = 0;
    }
    else 
    if (c == 'D' || c == 'd') {
      m = 1;
    }
    else 
    if (c == 'R' || c == 'r') {
      m = 2;
    }
    else 
    if (c == 'L' || c == 'l') {
      m = 3;
    }
    else 
    if (c == 'Q' || c == 'q') {
      print('Quiting after ' + (moves).toString() + ' moves.');
      quit = true;
      return null;
    }
    else {
      print('Please enter "U", "D", "L", or "R" to move the empty cell\n' + 'up, down, left, or right. You can also enter "Q" to quit.\n' + 'Upper or lowercase is accepted and only the first non-blank\n' + 'character is important (i.e. you may enter "up" if you like).');
      continue;
    }
    if (!doMove(m)) {
      print('That is not a valid move at the moment.');
      continue;
    }
    return null;
  }
}

void play() {
  print('Starting board:');
  while (!quit && isSolved() == false) {
    print('');
    printBoard();
    playOneMove();
  }
  if (isSolved()) {
    print('You solved the puzzle in ' + (moves).toString() + ' moves.');
  }
}

void _main() {
  shuffle(50);
  play();
}

void main() {
  _main();
}

String _input() {
    return stdin.readLineSync() ?? '';
}
