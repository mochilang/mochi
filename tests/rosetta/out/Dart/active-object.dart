// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:58:58Z
import 'dart:io';
import 'dart:convert';

var PI = 3.141592653589793;

double sinApprox(double x) {
  var term = x;
  var sum = x;
  var n = 1;
  while (n <= 12) {
    var denom = double.parse(((2 * n) * (2 * n + 1)));
    term = -term * x * x / (denom as num);
    sum = (sum as num) + term;
    n = n + 1;
  }
  return sum;
}

var dt = 0.01;

var s = 0;

var t1 = 0;

var k1 = sinApprox(0);

var i = 1;

var i2 = 1;

void main() {
  while (i <= 200) {
    var t2 = (double.parse(i)) * dt;
    var k2 = sinApprox(t2 * PI);
    s = s + (k1 + k2) * 0.5 * (t2 - t1);
    t1 = t2;
    k1 = k2;
    i = (i + 1 as int);
  }
  while (i2 <= 50) {
    var t2 = 2 + (double.parse(i2)) * dt;
    var k2 = 0;
    s = s + (k1 + k2) * 0.5 * (t2 - t1);
    t1 = t2;
    k1 = k2;
    i2 = (i2 + 1 as int);
  }
  print(s);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
