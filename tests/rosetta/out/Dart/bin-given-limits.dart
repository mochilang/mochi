// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:23Z
List<int> getBins(List<int> limits, List<int> data) {
  var n = limits.length;
  List<int> bins = [];
  var i = 0;
  while (i.toString().compareTo((n as num) + 1.toString()) < 0) {
    bins = List.from(bins)..add(0);
    i = (i as num) + 1;
  }
  var j = 0;
  while (j.toString().compareTo(data.length.toString()) < 0) {
    var d = data[j];
    var index = 0;
    while (index.toString().compareTo(limits.length.toString()) < 0) {
      if (d.toString().compareTo(limits[index].toString()) < 0) {
        break;
      }
      if (d == limits[index]) {
        index = (index as num) + 1;
        break;
      }
      index = (index as num) + 1;
    }
    bins[index] = (bins[index] as num) + 1;
    j = (j as num) + 1;
  }
  return bins;
}

String padLeft(int n, int width) {
  var s = n.toString();
  var pad = width - s.length;
  var out = '';
  var i = 0;
  while (i.toString().compareTo(pad.toString()) < 0) {
    out = out + ' ';
    i = (i as num) + 1;
  }
  return (out as num) + (s as num);
}

void printBins(List<int> limits, List<int> bins) {
  var n = limits.length;
  print('           < ' + padLeft(limits[0], 3) + ' = ' + padLeft(bins[0], 2));
  var i = 1;
  while (i.toString().compareTo(n.toString()) < 0) {
    print('>= ' + padLeft(limits[(i as num) - 1], 3) + ' and < ' + padLeft(limits[i], 3) + ' = ' + padLeft(bins[i], 2));
    i = (i as num) + 1;
  }
  print('>= ' + padLeft(limits[(n as num) - 1], 3) + '           = ' + padLeft(bins[n], 2));
  print('');
}

void main() {
  var limitsList = [[23, 37, 43, 53, 67, 83], [14, 18, 249, 312, 389, 392, 513, 591, 634, 720]];
  var dataList = [[95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], [445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]];
  var i = 0;
  while (i.toString().compareTo(limitsList.length.toString()) < 0) {
    print('Example ' + (i as num) + 1.toString() + '
');
    var bins = getBins(limitsList[i], dataList[i]);
    printBins(limitsList[i], bins);
    i = (i as num) + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
