// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:22Z
import 'dart:io';
import 'dart:convert';

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

List<int> circs = [];

bool isCircular(int n) {
  var nn = n;
  var pow = 1;
  while (nn > 0) {
    pow = pow * 10;
    nn = nn / 10;
  }
  nn = n;
  while (true) {
    nn = nn * 10;
    var f = nn / pow;
    nn = nn + f * (1 - pow);
    if (nn == n) {
      break;
    }
    if (!isPrime(nn)) {
      return false;
    }
  }
  return true;
}

var digits = [1, 3, 7, 9];

var q = [1, 2, 3, 5, 7, 9];

var fq = [1, 2, 3, 5, 7, 9];

var count = 0;

String showList(List<int> xs) {
  var out = '[';
  var i = 0;
  while (i < xs.length) {
    out = out + xs[i].toString();
    if (i < xs.length - 1) {
      out = out + ', ';
    }
    i = i + 1;
  }
  return out + ']';
}

void main() {
  print('The first 19 circular primes are:');
  while (true) {
    var f = q[0];
    var fd = fq[0];
    if (isPrime(f) && isCircular(f)) {
      circs = List.from(circs)..add(f);
      count = (count + 1 as int);
      if (count == 19) {
        break;
      }
    }
    q = q.sublist(1, q.length);
    fq = fq.sublist(1, fq.length);
    if (f != 2 && f != 5) {
      for (var d in digits) {
        q = List.from(q)..add(f * 10 + d);
        fq = List.from(fq)..add(fd);
      }
    }
  }
  print(showList(circs));
  print('\nThe next 4 circular primes, in repunit format, are:');
  print('[R(19) R(23) R(317) R(1031)]');
  print('\nThe following repunits are probably circular primes:');
  for (var i in [5003, 9887, 15073, 25031, 35317, 49081]) {
    print('R(' + i.toString() + ') : true');
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
