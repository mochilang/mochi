// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:15Z
int intSqrt(int x) {
  if (x < 2) {
    return x;
  }
  var left = 1;
  var right = x / 2;
  var ans = 0;
  while (left.toString().compareTo(right.toString()) <= 0) {
    var mid = (left as num) + ((((right as num) - (left as num)) as num) / 2 as num);
    var sq = (mid as num) * (mid as num);
    if (sq == x) {
      return mid;
    }
    if (sq.toString().compareTo(x.toString()) < 0) {
      left = (mid as num) + 1;
      ans = mid;
    }
    else {
      right = (mid as num) - 1;
    }
  }
  return ans;
}

int sumRecip(int n) {
  var s = 1;
  var limit = intSqrt(n);
  var f = 2;
  while (f.toString().compareTo(limit.toString()) <= 0) {
    if (n % (f as num) == 0) {
      s = (s as num) + (n / (f as num) as num);
      var f2 = n / (f as num);
      if (f2 != f) {
        s = (s as num) + (f as num);
      }
    }
    f = (f as num) + 1;
  }
  return s;
}

void main() {
  var nums = [6, 28, 120, 496, 672, 8128, 30240, 32760, 523776];
  var _iter0 = nums;
  for (var n in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    var s = sumRecip(n);
    if ((s as num) % (n as num) == 0) {
      var val = (s as num) / (n as num);
      var perfect = '';
      if (val == 1) {
        perfect = 'perfect!';
      }
      print('Sum of recipr. factors of ' + n.toString() + ' = ' + val.toString() + ' exactly ' + perfect);
    }
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
