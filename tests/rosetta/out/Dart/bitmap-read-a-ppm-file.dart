// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:19Z
import 'dart:io';
import 'dart:convert';

class Pixel {
  int R;
  int G;
  int B;
  Pixel(this.R, this.G, this.B);
}

class Bitmap {
  int w;
  int h;
  int max;
  List<List<Pixel>> data;
  Bitmap(this.w, this.h, this.max, this.data);
}

Bitmap newBitmap(int w, int h, int max) {
  List<List<Pixel>> rows = [];
  var y = 0;
  while (y < h) {
    List<Pixel> row = [];
    var x = 0;
    while (x < w) {
      row = List.from(row)..add(Pixel(0, 0, 0));
      x = x + 1;
    }
    rows = List.from(rows)..add(row);
    y = y + 1;
  }
  return Bitmap(w, h, max, rows);
}

void setPx(Bitmap b, int x, int y, Pixel p) {
  var rows = b.data;
  var row = rows[y];
  row[x] = p;
  rows[y] = row;
  b.data = rows;
}

Pixel getPx(Bitmap b, int x, int y) {
  return b.data[y][x];
}

List<String> splitLines(String s) {
  List<String> out = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    var ch = substr(s, i, i + 1);
    if (ch == '
') {
      out = List.from(out)..add(cur);
      cur = '';
    }
    else {
      cur = cur + ch;
    }
    i = i + 1;
  }
  out = List.from(out)..add(cur);
  return out;
}

List<String> splitWS(String s) {
  List<String> out = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    var ch = substr(s, i, i + 1);
      cur = cur + ch;
    i = i + 1;
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)];
    i = i + 1;
    n = -n;
  while (i < lines.length) {
      i = i + 1;
    while (j < parts.length) {
      j = j + 1;
    }
    i = i + 1;
  }
  var y = h - 1;
  while (y >= 0) {
    while (x < w) {
      int g = parseIntStr(toks[idx + 1]);
      int b = parseIntStr(toks[idx + 2]);
      idx = idx + 3;
      x = x + 1;
    y = y - 1;
  while (y < h) {
    while (x < w) {
      var l = (p['R'] * 2126 + p['G'] * 7152 + p['B'] * 722) / 10000;
      if (l > b.max) {
      if (l > m) {
      x = x + 1;
    y = y + 1;
  var y = h - 1;
  while (y >= 0) {
    while (x < w) {
      x = x + 1;
    y = y - 1;
    n = -(n as num);
  }
  return n;
}

List<String> tokenize(String s) {
  var lines = splitLines(s);
  List<String> toks = [];
  var i = 0;
  while (i.toString().compareTo(lines.length.toString()) < 0) {
    var line = lines[i];
    if (line.length > 0 && substr(line, 0, 1) == '#') {
      i = (i as num) + 1;
      continue;
    }
    var parts = splitWS(line);
    var j = 0;
    while (j.toString().compareTo(parts.length.toString()) < 0) {
      toks = List.from(toks)..add(parts[j]);
      j = (j as num) + 1;
    }
    i = (i as num) + 1;
  }
  return toks;
}

Bitmap readP3(String text) {
  var toks = tokenize(text);
  if (toks.length < 4) {
    return newBitmap(0, 0, 0);
  }
  if (toks[0] != 'P3') {
    return newBitmap(0, 0, 0);
  }
  int w = parseIntStr(toks[1]);
  int h = parseIntStr(toks[2]);
  int maxv = parseIntStr(toks[3]);
  var idx = 4;
  var bm = newBitmap(w, h, maxv);
  var y = (h as num) - 1;
  while (y.toString().compareTo(0.toString()) >= 0) {
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      int r = parseIntStr(toks[idx]);
      int g = parseIntStr(toks[(idx as num) + 1]);
      int b = parseIntStr(toks[(idx as num) + 2]);
      setPx(bm, x, y, Pixel(r, g, b));
      idx = (idx as num) + 3;
      x = (x as num) + 1;
    }
    y = (y as num) - 1;
  }
  return bm;
}

void toGrey(Bitmap b) {
  int h = b.h;
  int w = b.w;
  var m = 0;
  var y = 0;
  while (y.toString().compareTo(h.toString()) < 0) {
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      var p = getPx(b, x, y);
      var l = (((((p['R'] as num) * 2126 as num) + ((p['G'] as num) * 7152 as num) as num) + ((p['B'] as num) * 722 as num)) as num) / 10000;
      if (l.toString().compareTo(b.max.toString()) > 0) {
        l = b.max;
      }
      setPx(b, x, y, Pixel(l, l, l));
      if (l.toString().compareTo(m.toString()) > 0) {
        m = l;
      }
      x = (x as num) + 1;
    }
    y = (y as num) + 1;
  }
  b.max = (m as int);
}

String pad(int n, int w) {
  var s = n.toString();
  while (s.length < w) {
    s = ' ' + s;
  }
  return s;
}

String writeP3(Bitmap b) {
  int h = b.h;
  int w = b.w;
  var max = b.max;
  var digits = max.toString().length;
  var out = 'P3
# generated from Bitmap.writeppmp3
' + w.toString() + ' ' + h.toString() + '
' + max.toString() + '
';
  var y = (h as num) - 1;
  while (y.toString().compareTo(0.toString()) >= 0) {
    var line = '';
    var x = 0;
    while (x.toString().compareTo(w.toString()) < 0) {
      var p = getPx(b, x, y);
      line = line + '   ' + pad(p['R'], digits) + ' ' + pad(p['G'], digits) + ' ' + pad(p['B'], digits);
      x = (x as num) + 1;
    }
    out = out + line + '
';
    y = (y as num) - 1;
  }
  return out;
}

var ppmtxt = 'P3
' + '# feep.ppm
' + '4 4
' + '15
' + ' 0  0  0    0  0  0    0  0  0   15  0 15
' + ' 0  0  0    0 15  7    0  0  0    0  0  0
' + ' 0  0  0    0  0  0    0 15  7    0  0  0
' + '15  0 15    0  0  0    0  0  0    0  0  0
';

var bm = readP3(ppmtxt);

var out = writeP3(bm);

void main() {
  print('Original Colour PPM file');
  print(ppmtxt);
  print('Grey PPM:');
  toGrey(bm);
  print(out);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
