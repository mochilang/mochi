// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:14Z
List<int> sieve(int limit) {
  List<int> spf = [];
  var i = 0;
  while (i.toString().compareTo(limit.toString()) <= 0) {
    spf = List.from(spf)..add(0);
    i = (i as num) + 1;
  }
  i = 2;
  while (i.toString().compareTo(limit.toString()) <= 0) {
    if (spf[i] == 0) {
      spf[i] = i;
      if ((i as num) * (i as num).toString().compareTo(limit.toString()) <= 0) {
        var j = (i as num) * (i as num);
        while (j.toString().compareTo(limit.toString()) <= 0) {
          if (spf[j] == 0) {
            spf[j] = i;
          }
          j = (j as num) + (i as num);
        }
      }
    }
    i = (i as num) + 1;
  }
  return spf;
}

List<int> primesFrom(List<int> spf, int limit) {
  List<int> primes = [];
  var i = 3;
  while (i.toString().compareTo(limit.toString()) <= 0) {
    if (spf[i] == i) {
      primes = List.from(primes)..add(i);
    }
    i = (i as num) + 1;
  }
  return primes;
}

String pad3(int n) {
  var s = n.toString();
  while (s.length < 3) {
    s = ' ' + s;
  }
  return s;
}

String commatize(int n) {
  var s = n.toString();
  var out = '';
  var i = s.length - 1;
  var c = 0;
  while (i.toString().compareTo(0.toString()) >= 0) {
    out = s.toString().substring(i, (i as num) + 1) + out;
    c = (c as num) + 1;
    if ((c as num) % 3 == 0 && i.toString().compareTo(0.toString()) > 0) {
      out = ',' + out;
    }
    i = (i as num) - 1;
  }
  return out;
}

int primeCount(List<int> primes, int last, List<int> spf) {
  var lo = 0;
  var hi = primes.length;
  while (lo.toString().compareTo(hi.toString()) < 0) {
    var mid = int.parse(((((lo as num) + (hi as num)) as num) / 2));
    if (primes[mid] < last) {
      lo = (mid as num) + 1;
    }
    else {
      hi = mid;
    }
  }
  var count = (lo as num) + 1;
  if (spf[last] != last) {
    count = (count as num) - 1;
  }
  return count;
}

List<int> arithmeticNumbers(int limit, List<int> spf) {
  List<int> arr = [1];
  var n = 3;
  while (arr.length < limit) {
    if (spf[n] == n) {
      arr = List.from(arr)..add(n);
    }
    else {
      var x = n;
      var sigma = 1;
      var tau = 1;
      while (x.toString().compareTo(1.toString()) > 0) {
        var p = spf[x];
        if (p == 0) {
          p = x;
        }
        var cnt = 0;
        var power = p;
        var sum = 1;
        while ((x as num) % (p as num) == 0) {
          x = (x as num) / (p as num);
          cnt = (cnt as num) + 1;
          sum = (sum as num) + (power as num);
          power = (power as num) * (p as num);
        }
        sigma = (sigma as num) * (sum as num);
        tau = (tau as num) * (((cnt as num) + 1) as num);
      }
      if ((sigma as num) % (tau as num) == 0) {
        arr = List.from(arr)..add(n);
      }
    }
    n = (n as num) + 1;
  }
  return arr;
}

void main() {
  var limit = 1228663;
  var spf = sieve(limit);
  var primes = primesFrom(spf, limit);
  var arr = arithmeticNumbers(1000000, spf);
  print('The first 100 arithmetic numbers are:');
  var i = 0;
  while (i.toString().compareTo(100.toString()) < 0) {
    var line = '';
    var j = 0;
    while (j.toString().compareTo(10.toString()) < 0) {
      line = line + pad3(arr[(i as num) + (j as num)]);
      if (j.toString().compareTo(9.toString()) < 0) {
        line = line + ' ';
      }
      j = (j as num) + 1;
    }
    print(line);
    i = (i as num) + 10;
  }
  for (var x in [1000, 10000, 100000, 1000000]) {
    var last = arr[x - 1];
    var lastc = commatize(last);
    print('
The ' + commatize(x) + 'th arithmetic number is: ' + lastc);
    var pc = primeCount(primes, last, spf);
    var comp = (x - (pc as num) as num) - 1;
    print('The count of such numbers <= ' + lastc + ' which are composite is ' + commatize(comp) + '.');
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
