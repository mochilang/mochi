// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:58:58Z
import 'dart:io';
import 'dart:convert';

bool isPrime(int n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 == 0) {
    return n == 2;
  }
  if (n % 3 == 0) {
    return n == 3;
  }
  var d = 5;
  while (d * d <= n) {
    if (n % d == 0) {
      return false;
    }
    d = d + 2;
    if (n % d == 0) {
      return false;
    }
    d = d + 4;
  }
  return true;
}

int sumDigits(int n) {
  var s = 0;
  var x = n;
  while (x > 0) {
    s = s + x % 10;
    x = int.parse((x / 10));
  }
  return s;
}

String pad(int n) {
  if (n < 10) {
    return '  ' + n.toString();
  }
  if (n < 100) {
    return ' ' + n.toString();
  }
  return n.toString();
}

void main() {
  print('Additive primes less than 500:');
  var count = 0;
  var line = '';
  var lineCount = 0;
  var i = 2;
  while (i < 500) {
    if (isPrime(i) && isPrime(sumDigits(i))) {
      count = (count as num) + 1;
      line = line + pad(i) + '  ';
      lineCount = lineCount + 1;
      if (lineCount == 10) {
        print(line.toString().substring(0, line.length - 2));
        line = '';
        lineCount = 0;
      }
    }
    if (i > 2) {
      i = i + 2;
    }
    else {
      i = i + 1;
    }
  }
  if (lineCount > 0) {
    print(line.toString().substring(0, line.length - 2));
  }
  print(count.toString() + ' additive primes found.');
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
