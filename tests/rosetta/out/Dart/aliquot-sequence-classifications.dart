// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:01Z
import 'dart:io';
import 'dart:convert';

var THRESHOLD = 140737488355328;

int indexOf(List<int> xs, int value) {
  var i = 0;
  while (i < xs.length) {
    if (xs[i] == value) {
      return i;
    }
    i = i + 1;
  }
  return 0 - 1;
}

bool contains(List<int> xs, int value) {
  return indexOf(xs, value) != 0 - 1;
}

int maxOf(int a, int b) {
  if (a > b) {
    return a;
  }
  else {
    return b;
  }
}

int intSqrt(int n) {
  if (n == 0) {
    return 0;
  }
  var x = n;
  var y = (x + 1) / 2;
  while (y < x) {
    x = y;
    y = (x + n / x) / 2;
  }
  return x;
}

int sumProperDivisors(int n) {
  if (n < 2) {
    return 0;
  }
  var sqrt = intSqrt(n);
  var sum = 1;
  var i = 2;
  while (i <= sqrt) {
    if (n % i == 0) {
      sum = (sum as num) + i + n / i;
    }
    i = i + 1;
  }
  if (sqrt * sqrt == n) {
    sum = (sum as num) - sqrt;
  }
  return sum;
}

Map<String, any> classifySequence(int k) {
  var last = k;
  List<int> seq = [k];
  while (true) {
    last = sumProperDivisors(last);
    seq = List.from(seq)..add(last);
    var n = seq.length;
    var aliquot = '';
    if (last == 0) {
      aliquot = 'Terminating';
    }
    else 
    if (n == 2 && last == k) {
      aliquot = 'Perfect';
    }
    else 
    if (n == 3 && last == k) {
      aliquot = 'Amicable';
    }
    else 
    if (n >= 4 && last == k) {
      aliquot = 'Sociable[' + n - 1.toString() + ']';
    }
    else 
    if (last == seq[n - 2]) {
      aliquot = 'Aspiring';
    }
    else 
    if (contains(((seq is String) ? seq.substring(1, maxOf(1, n - 2)) : (seq as List).sublist(1, maxOf(1, n - 2))), last)) {
      var idx = indexOf(seq, last);
      aliquot = 'Cyclic[' + n - 1 - idx.toString() + ']';
    }
    else 
    if (n == 16 || last > THRESHOLD) {
      aliquot = 'Non-Terminating';
    }
    if (aliquot != '') {
      return {'seq': seq, 'aliquot': aliquot};
    }
  }
  return {'seq': seq, 'aliquot': ''};
}

String padLeft(int n, int w) {
  var s = n.toString();
  while (s.length < w) {
    s = ' ' + s;
  }
  return s;
}

String padRight(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = r + ' ';
  }
  return r;
}

String joinWithCommas(List<int> seq) {
  var s = '[';
  var i = 0;
  while (i < seq.length) {
    s = s + seq[i].toString();
    if (i < seq.length - 1) {
      s = s + ', ';
    }
    i = i + 1;
  }
  s = s + ']';
  return s;
}

void main() {
  print('Aliquot classifications - periods for Sociable/Cyclic in square brackets:
');
  var k = 1;
  while (k <= 10) {
    var res = classifySequence(k);
    print(padLeft(k, 2) + ': ' + padRight(res['aliquot'].toString(), 15) + ' ' + joinWithCommas((res['seq'] as List<int>)));
    k = k + 1;
  }
  print('');
  var s = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488];
  var i = 0;
  while (i < s.length) {
    var val = s[i];
    var res = classifySequence(val);
    print(padLeft(val, 7) + ': ' + padRight(res['aliquot'].toString(), 15) + ' ' + joinWithCommas((res['seq'] as List<int>)));
    i = i + 1;
  }
  print('');
  var big = 15355717786080;
  var r = classifySequence(big);
  print(big.toString() + ': ' + padRight(r['aliquot'].toString(), 15) + ' ' + joinWithCommas((r['seq'] as List<int>)));
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
