// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:43Z
var THRESHOLD = 140737488355328;

int indexOf(List<int> xs, int value) {
  num i = 0;
  while ((i as num) < xs.length) {
    if (xs[i] == value) {
      return i;
    }
    i = (i as num) + 1;
  }
  return 0 - 1;
}

bool contains(List<int> xs, int value) {
  return indexOf(xs, value) != 0 - 1;
}

int maxOf(int a, int b) {
  if (a > b) {
    return a;
  }
  else {
    return b;
  }
}

int intSqrt(int n) {
  if (n == 0) {
    return 0;
  }
  var x = n;
  var y = (((x as num) + 1) as num) / 2;
  while ((y as num) < (x as num)) {
    x = y;
    y = (((x as num) + (n / (x as num) as num)) as num) / 2;
  }
  return x;
}

int sumProperDivisors(int n) {
  if (n < 2) {
    return 0;
  }
  var sqrt = intSqrt(n);
  var sum = 1;
  var i = 2;
  while ((i as num) <= (sqrt as num)) {
    if (n % (i as num) == 0) {
      sum = ((sum as num) + (i as num) as num) + (n / (i as num) as num);
    }
    i = (i as num) + 1;
  }
  if ((sqrt as num) * (sqrt as num) == n) {
    sum = (sum as num) - (sqrt as num);
  }
  return sum;
}

Map<String, any> classifySequence(int k) {
  var last = k;
  List<int> seq = [k];
  while (true) {
    last = sumProperDivisors(last);
    seq = List.from(seq)..add(last);
    var n = seq.length;
    var aliquot = '';
    if (last == 0) {
      aliquot = 'Terminating';
    }
    else 
    if (n == 2 && last == k) {
      aliquot = 'Perfect';
    }
    else 
    if (n == 3 && last == k) {
      aliquot = 'Amicable';
    }
    else 
    if ((n as num) >= 4 && last == k) {
      aliquot = 'Sociable[' + (n as num) - 1.toString() + ']';
    }
    else 
    if (last == seq[(n as num) - 2]) {
      aliquot = 'Aspiring';
    }
    else 
    if (contains(((seq is String) ? seq.substring(1, maxOf(1, (n as num) - 2)) : (seq as List).sublist(1, maxOf(1, (n as num) - 2))), last)) {
      var idx = indexOf(seq, last);
      aliquot = 'Cyclic[' + ((n as num) - 1 as num) - (idx as num).toString() + ']';
    }
    else 
    if (n == 16 || (last as num) > THRESHOLD) {
      aliquot = 'Non-Terminating';
    }
    if (aliquot != '') {
      return {'seq': seq, 'aliquot': aliquot};
    }
  }
  return {'seq': seq, 'aliquot': ''};
}

String padLeft(int n, int w) {
  var s = n.toString();
  while (s.length < w) {
    s = ' ' + s;
  }
  return s;
}

String padRight(String s, int w) {
  var r = s;
  while (r.length < w) {
    r = r + ' ';
  }
  return r;
}

String joinWithCommas(List<int> seq) {
  var s = '[';
  num i = 0;
  while ((i as num) < seq.length) {
    s = s + seq[i].toString();
    if ((i as num) < seq.length - 1) {
      s = s + ', ';
    }
    i = (i as num) + 1;
  }
  s = s + ']';
  return s;
}

void _main() {
  print('Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n');
  var k = 1;
  while ((k as num) <= 10) {
    var res = classifySequence(k);
    print(padLeft(k, 2) + ': ' + padRight(res['aliquot'].toString(), 15) + ' ' + joinWithCommas((res['seq'] as List<int>)));
    k = (k as num) + 1;
  }
  print('');
  var s = [
    11,
    12,
    28,
    496,
    220,
    1184,
    12496,
    1264460,
    790,
    909,
    562,
    1064,
    1488,
  ];
  num i = 0;
  while ((i as num) < s.length) {
    var val = s[i];
    var res = classifySequence(val);
    print(padLeft(val, 7) + ': ' + padRight(res['aliquot'].toString(), 15) + ' ' + joinWithCommas((res['seq'] as List<int>)));
    i = (i as num) + 1;
  }
  print('');
  var big = 15355717786080;
  var r = classifySequence(big);
  print(big.toString() + ': ' + padRight(r['aliquot'].toString(), 15) + ' ' + joinWithCommas((r['seq'] as List<int>)));
}

void main() {
  _main();
}
