// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:56Z
String trimSpace(String s) {
  num start = 0;
  while ((start as num) < s.length && s.substring(start, (start as num) + 1) == ' ') {
    start = (start as num) + 1;
  }
  var end = s.length;
  while ((end as num) > (start as num) && s.substring((end as num) - 1, end) == ' ') {
    end = (end as num) - 1;
  }
  return s.substring(start, end);
}

bool isUpper(String ch) {
  return ch.toString().compareTo('A'.toString()) >= 0 && ch.toString().compareTo('Z'.toString()) <= 0;
}

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while ((n as num) > 0) {
    res = res + ' ';
    n = (n as num) - 1;
  }
  return res + s;
}

String snakeToCamel(String s) {
  s = trimSpace(s);
  var out = '';
  var up = false;
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.substring(i, (i as num) + 1);
    if (ch == '_' || ch == '-' || ch == ' ' || ch == '.') {
      up = true;
      i = (i as num) + 1;
      continue;
    }
    if (i == 0) {
      out = out + lower(ch);
      up = false;
      i = (i as num) + 1;
      continue;
    }
    if (up != null) {
      out = out + upper(ch);
      up = false;
    }
    else {
      out = (out as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  return out;
}

String camelToSnake(String s) {
  s = trimSpace(s);
  var out = '';
  var prevUnd = false;
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.substring(i, (i as num) + 1);
    if (ch == ' ' || ch == '-' || ch == '.') {
      if (!prevUnd && out.length > 0 != null) {
        out = out + '_';
        prevUnd = true;
      }
      i = (i as num) + 1;
      continue;
    }
    if (ch == '_') {
      if (!prevUnd && out.length > 0 != null) {
        out = out + '_';
        prevUnd = true;
      }
      i = (i as num) + 1;
      continue;
    }
    if (isUpper(ch)) {
      if ((i as num) > 0 && (!prevUnd) != null) {
        out = out + '_';
      }
      out = out + lower(ch);
      prevUnd = false;
    }
    else {
      out = out + lower(ch);
      prevUnd = false;
    }
    i = (i as num) + 1;
  }
  num start = 0;
  while ((start as num) < out.length && ((out is String) ? out.substring(start, (start as num) + 1) : (out as List).sublist(start, (start as num) + 1)) == '_') {
    start = (start as num) + 1;
  }
  var end = out.length;
  while ((end as num) > (start as num) && ((out is String) ? out.substring((end as num) - 1, end) : (out as List).sublist((end as num) - 1, end)) == '_') {
    end = (end as num) - 1;
  }
  out = ((out is String) ? out.substring(start, end) : (out as List).sublist(start, end));
  var res = '';
  num j = 0;
  var lastUnd = false;
  while ((j as num) < out.length) {
    var c = ((out is String) ? out.substring(j, (j as num) + 1) : (out as List).sublist(j, (j as num) + 1));
    if (c == '_') {
      if (!lastUnd != null) {
        res = (res as num) + (c as num);
      }
      lastUnd = true;
    }
    else {
      res = (res as num) + (c as num);
      lastUnd = false;
    }
    j = (j as num) + 1;
  }
  return res;
}

void _main() {
  var samples = [
    'snakeCase',
    'snake_case',
    'snake-case',
    'snake case',
    'snake CASE',
    'snake.case',
    'variable_10_case',
    'variable10Case',
    'É›rgo rE tHis',
    'hurry-up-joe!',
    'c://my-docs/happy_Flag-Day/12.doc',
    ' spaces ',
  ];
  print('=== To snake_case ===');
  var _iter0 = samples;
  for (var s in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print(padLeft(s, 34) + ' => ' + camelToSnake(s));
  }
  print('');
  print('=== To camelCase ===');
  var _iter1 = samples;
  for (var s in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    print(padLeft(s, 34) + ' => ' + snakeToCamel(s));
  }
}

void main() {
  _main();
}
