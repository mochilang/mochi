// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:12Z
import 'dart:io';
import 'dart:convert';

String trimSpace(String s) {
  var start = 0;
  while (start < s.length && s.substring(start, start + 1) == ' ') {
    start = start + 1;
  }
  var end = s.length;
  while (end > start && s.substring(end - 1, end) == ' ') {
    end = end - 1;
  }
  return s.substring(start, end);
}

bool isUpper(String ch) {
  return ch.compareTo('A') >= 0 && ch.compareTo('Z') <= 0;
}

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while (n > 0) {
    res = res + ' ';
    n = n - 1;
  }
  return res + s;
}

String snakeToCamel(String s) {
  s = trimSpace(s);
  var out = '';
  var up = false;
  var i = 0;
  while (i < s.length) {
    var ch = s.substring(i, i + 1);
    if (ch == '_' || ch == '-' || ch == ' ' || ch == '.') {
      up = true;
      i = i + 1;
      continue;
    }
    if (i == 0) {
      out = out + lower(ch);
      up = false;
      i = i + 1;
      continue;
    }
    if (up != null) {
      out = out + upper(ch);
      up = false;
    }
    else {
      out = out + ch;
    }
    i = i + 1;
  }
  return out;
}

String camelToSnake(String s) {
  s = trimSpace(s);
  var out = '';
  var prevUnd = false;
  var i = 0;
  while (i < s.length) {
    var ch = s.substring(i, i + 1);
    if (ch == ' ' || ch == '-' || ch == '.') {
      if (!prevUnd && out.length > 0 != null) {
        out = out + '_';
        prevUnd = true;
      }
      i = i + 1;
      continue;
    }
    if (ch == '_') {
      if (!prevUnd && out.length > 0 != null) {
        out = out + '_';
        prevUnd = true;
      }
      i = i + 1;
      continue;
    }
    if (isUpper(ch)) {
      if (i > 0 && (!prevUnd) != null) {
        out = out + '_';
      }
      out = out + lower(ch);
      prevUnd = false;
    }
    else {
      out = out + lower(ch);
      prevUnd = false;
    }
    i = i + 1;
  }
  var start = 0;
  while (start < out.length && ((out is String) ? out.substring(start, start + 1) : (out as List).sublist(start, start + 1)) == '_') {
    start = start + 1;
  }
  var end = out.length;
  while (end > start && ((out is String) ? out.substring(end - 1, end) : (out as List).sublist(end - 1, end)) == '_') {
    end = end - 1;
  }
  out = ((out is String) ? out.substring(start, end) : (out as List).sublist(start, end));
  var res = '';
  var j = 0;
  var lastUnd = false;
  while (j < out.length) {
    var c = ((out is String) ? out.substring(j, j + 1) : (out as List).sublist(j, j + 1));
    if (c == '_') {
      if (!lastUnd != null) {
        res = res + c;
      }
      lastUnd = true;
    }
    else {
      res = res + c;
      lastUnd = false;
    }
    j = j + 1;
  }
  return res;
}

void _main() {
  var samples = ['snakeCase', 'snake_case', 'snake-case', 'snake case', 'snake CASE', 'snake.case', 'variable_10_case', 'variable10Case', 'ɛrgo rE tHis', 'hurry-up-joe!', 'c://my-docs/happy_Flag-Day/12.doc', ' spaces '];
  print('=== To snake_case ===');
  var _iter0 = samples;
  for (var s in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print(padLeft(s, 34) + ' => ' + camelToSnake(s));
  }
  print('');
  print('=== To camelCase ===');
  var _iter1 = samples;
  for (var s in (_iter1 is Map ? (_iter1 as Map).keys : _iter1) as Iterable) {
    print(padLeft(s, 34) + ' => ' + snakeToCamel(s));
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
