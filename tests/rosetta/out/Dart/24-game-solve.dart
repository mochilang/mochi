// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:58:54Z
import 'dart:io';
import 'dart:convert';

var OP_NUM = 0;

var OP_ADD = 1;

var OP_SUB = 2;

var OP_MUL = 3;

var OP_DIV = 4;

Map<String, any> newNum(int n) {
  return {'op': OP_NUM, 'value': {'num': n, 'denom': 1}};
}

Map<String, int> exprEval(Map<String, any> x) {
  if ((x as Map)['op'] == OP_NUM) {
    return (x as Map)['value'];
  }
  var l = exprEval((x as Map)['left']);
  var r = exprEval((x as Map)['right']);
  if ((x as Map)['op'] == OP_ADD) {
    return {'num': l['num'] * r['denom'] + l['denom'] * r['num'], 'denom': l['denom'] * r['denom']};
  }
  if ((x as Map)['op'] == OP_SUB) {
    return {'num': l['num'] * r['denom'] - l['denom'] * r['num'], 'denom': l['denom'] * r['denom']};
  }
  if ((x as Map)['op'] == OP_MUL) {
    return {'num': l['num'] * r['num'], 'denom': l['denom'] * r['denom']};
  }
  return {'num': l['num'] * r['denom'], 'denom': l['denom'] * r['num']};
}

String exprString(Map<String, any> x) {
  if ((x as Map)['op'] == OP_NUM) {
    return (x as Map)['value']['num'].toString();
  }
  var ls = exprString((x as Map)['left']);
  var rs = exprString((x as Map)['right']);
  var opstr = '';
  if ((x as Map)['op'] == OP_ADD) {
    opstr = ' + ';
  }
  else 
  if ((x as Map)['op'] == OP_SUB) {
    opstr = ' - ';
  }
  else 
  if ((x as Map)['op'] == OP_MUL) {
    opstr = ' * ';
  }
  else {
    opstr = ' / ';
  }
  return '(' + ls + opstr + rs + ')';
}

var n_cards = 4;

var goal = 24;

var digit_range = 9;

bool solve(List<Map<String, any>> xs) {
  if (xs.length == 1) {
    var f = exprEval(xs[0]);
    if (f['denom'] != 0 && f['num'] == f['denom'] * goal) {
      print(exprString(xs[0]));
      return true;
    }
    return false;
  }
  var i = 0;
  while (i < xs.length) {
    var j = i + 1;
    while (j < xs.length) {
      List<Map<String, any>> rest = [];
      var k = 0;
      while (k < xs.length) {
        if (k != i && k != j) {
          rest = List.from(rest)..add(xs[k]);
        }
        k = k + 1;
      }
      var a = xs[i];
      var b = xs[j];
      for (var op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
        var node = {'op': op, 'left': a, 'right': b};
        if (solve(List.from(rest)..add(node))) {
          return true;
        }
      }
      var node = {'op': OP_SUB, 'left': b, 'right': a};
      if (solve(List.from(rest)..add(node))) {
        return true;
      }
      node = {'op': OP_DIV, 'left': b, 'right': a};
      if (solve(List.from(rest)..add(node))) {
        return true;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return false;
}

void main() {
  var iter = 0;
  while (iter < 10) {
    List<Map<String, any>> cards = [];
    var i = 0;
    while (i < n_cards) {
      var n = (DateTime.now().microsecondsSinceEpoch % (digit_range - 1)) + 1;
      cards = List.from(cards)..add(newNum(n));
      print(' ' + n.toString());
      i = i + 1;
    }
    print(':  ');
    if (!solve(cards)) {
      print('No solution');
    }
    iter = iter + 1;
  }
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
