// Generated by Mochi transpiler
import 'dart:io';

int _nowSeed = 0;
bool _nowSeeded = false;
void _initNow() {
  var s = Platform.environment['MOCHI_NOW_SEED'];
  if (s != null && s.isNotEmpty) {
    var v = int.tryParse(s);
    if (v != null) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
int _now() {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return DateTime.now().microsecondsSinceEpoch;
}

class Rational {
  int num;
  int denom;
  Rational({required this.num, required this.denom});
}

final int OP_ADD = 1;
final int OP_SUB = 2;
final int OP_MUL = 3;
final int OP_DIV = 4;
Rational binEval(int op, dynamic l, dynamic r) {
  final Rational lv = exprEval(l);
  final Rational rv = exprEval(r);
  if (op == OP_ADD) {
    return Rational(num: lv.num * rv.denom + lv.denom * rv.num, denom: lv.denom * rv.denom);
  }
  if (op == OP_SUB) {
    return Rational(num: lv.num * rv.denom - lv.denom * rv.num, denom: lv.denom * rv.denom);
  }
  if (op == OP_MUL) {
    return Rational(num: lv.num * rv.num, denom: lv.denom * rv.denom);
  }
  return Rational(num: lv.num * rv.denom, denom: lv.denom * rv.num);
}

String binString(int op, dynamic l, dynamic r) {
  final String ls = exprString(l);
  final String rs = exprString(r);
  String opstr = "";
  if (op == OP_ADD) {
    opstr = " + ";
  } else {
    if (op == OP_SUB) {
    opstr = " - ";
  } else {
    if (op == OP_MUL) {
    opstr = " * ";
  } else {
    opstr = " / ";
  };
  };
  }
  return "(" + ls + opstr + rs + ")";
}

dynamic newNum(int n) {
  return {"__name": "Num", "value": Rational(num: n, denom: 1)};
}

Rational exprEval(dynamic x) {
  return x["__name"] == "Num" ? x["value"] : x["__name"] == "Bin" ? binEval(x["op"], x["left"], x["right"]) : "";
}

String exprString(dynamic x) {
  return x["__name"] == "Num" ? (v.num).toString() : x["__name"] == "Bin" ? binString(x["op"], x["left"], x["right"]) : "";
}

final int n_cards = 4;
final int goal = 24;
final int digit_range = 9;
bool solve(List<dynamic> xs) {
  if (xs.length == 1) {
    final Rational f = exprEval(xs[0]);
    if (f.denom != 0 && f.num == f.denom * goal) {
    print(exprString(xs[0]));
    return true;
  };
    return false;
  }
  int i = 0;
  while (i < xs.length) {
    num j = i + 1;
    while (j < xs.length) {
    List<dynamic> rest = [];
    int k = 0;
    while (k < xs.length) {
    if (k != i && k != j) {
    rest = [...rest, xs[k]];
  }
    k = k + 1;
  }
    final a = xs[i];
    final b = xs[j];
    for (var op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV]) {
    Map<String, dynamic> node = {"__name": "Bin", "op": op, "left": a, "right": b};
    if (solve([...rest, node])) {
    return true;
  }
  }
    Map<String, dynamic> node = {"__name": "Bin", "op": OP_SUB, "left": b, "right": a};
    if (solve([...rest, node])) {
    return true;
  }
    node = {"__name": "Bin", "op": OP_DIV, "left": b, "right": a};
    if (solve([...rest, node])) {
    return true;
  }
    j = j + 1;
  }
    i = i + 1;
  }
  return false;
}

void main() {
  int iter = 0;
  while (iter < 10) {
    List<dynamic> cards = [];
    int i = 0;
    while (i < n_cards) {
    final int n = _now() % (digit_range - 1) + 1;
    cards = [...cards, newNum(n)];
    print(" " + (n).toString());
    i = i + 1;
  }
    print(":  ");
    if (!solve(cards)) {
    print("No solution");
  }
    iter = iter + 1;
  }
}

void _start() {
  _initNow();
  main();
}
