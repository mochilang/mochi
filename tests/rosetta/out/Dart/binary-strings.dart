// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:00Z
import 'dart:io';
import 'dart:convert';

String char(int n) {
  var letters = 'abcdefghijklmnopqrstuvwxyz';
  var idx = n - 97;
  if (idx < 0 || idx >= letters.length) {
    return '?';
  }
  return letters.toString().substring(idx, idx + 1);
}

String fromBytes(List<int> bs) {
  var s = '';
  var i = 0;
  while (i < bs.length) {
    s = s + char(bs[i]);
    i = (i + 1 as int);
  }
  return s;
}

List<int> b = [98, 105, 110, 97, 114, 121];

List<int> c = b;

List<int> d = [];

var i = 0;

var z = List.from(b)..add(122);

var sub = b.sublist(1, 3);

List<int> f = [];

List<int> rem = [];

void main() {
  print(b.toString());
  print(c.toString());
  print(b == c.toString());
  while (i < b.length) {
    d = List.from(d)..add(b[i]);
    i = (i + 1 as int);
  }
  d[1] = (97 as int);
  d[4] = (110 as int);
  print(fromBytes(b));
  print(fromBytes(d));
  print(b.length == 0.toString());
  print(fromBytes(z));
  print(fromBytes(sub));
  i = (0 as int);
  while (i < d.length) {
    var val = d[i];
    if (val == 110) {
      f = List.from(f)..add(109);
    }
    else {
      f = List.from(f)..add(val);
    }
    i = (i + 1 as int);
  }
  print(fromBytes(d) + ' -> ' + fromBytes(f));
  rem = List.from(rem)..add(b[0]);
  i = (3 as int);
  while (i < b.length) {
    rem = List.from(rem)..add(b[i]);
    i = (i + 1 as int);
  }
  print(fromBytes(rem));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
