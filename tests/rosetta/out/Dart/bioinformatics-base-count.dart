// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:16Z
import 'dart:io';
import 'dart:convert';

String padLeft(String s, int w) {
  var res = '';
  var n = w - s.length;
  while (n > 0) {
    res = res + ' ';
    n = n - 1;
  }
  return res + s;
}

var dna = '' + 'CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG' + 'CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG' + 'AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT' + 'GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT' + 'CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG' + 'TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA' + 'TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT' + 'CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG' + 'TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC' + 'GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT';

var le = dna.length;

var i = 0;

var a = 0;

var c = 0;

var g = 0;

var t = 0;

var idx = 0;

void main() {
  print('SEQUENCE:');
  while (i < le) {
    var k = i + 50;
    if (k > le) {
      k = le;
    }
    print(padLeft(i.toString(), 5) + ': ' + dna.substring(i, k));
    i = (i + 50 as int);
  }
  while (idx < le) {
    var ch = dna.toString().substring(idx, idx + 1);
    if (ch == 'A') {
      a = (a + 1 as int);
    }
    else {
      if (ch == 'C') {
        c = (c + 1 as int);
      }
      else {
        if (ch == 'G') {
          g = (g + 1 as int);
        }
        else {
          if (ch == 'T') {
            t = (t + 1 as int);
          }
        }
      }
    }
    idx = (idx + 1 as int);
  }
  print('');
  print('BASE COUNT:');
  print('    A: ' + padLeft(a.toString(), 3));
  print('    C: ' + padLeft(c.toString(), 3));
  print('    G: ' + padLeft(g.toString(), 3));
  print('    T: ' + padLeft(t.toString(), 3));
  print('    ------');
  print('    Σ: ' + le.toString());
  print('    ======');
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}µs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
