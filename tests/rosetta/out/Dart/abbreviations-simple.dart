// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:35:35Z
import 'dart:io';
import 'dart:convert';

List<String> fields(String s) {
  List<String> words = [];
  var cur = '';
  var i = 0;
  while (i < s.length) {
    var ch = s.toString().substring(i, i + 1);
    if (ch == ' ' || ch == '\n' || ch == '  ') {
      if (cur.length > 0) {
        words = List.from(words)..add(cur);
        cur = '';
      }
    }
    else {
      cur = cur + ch;
    }
    i = i + 1;
  }
  if (cur.length > 0) {
    words = List.from(words)..add(cur);
  }
  return words;
}

String padRight(String s, int width) {
  var out = s;
  var i = s.length;
  while (i < width) {
    out = out + ' ';
    i = i + 1;
  }
  return out;
}

String join(List<String> xs, String sep) {
  var res = '';
  var i = 0;
  while (i < xs.length) {
    if (i > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = i + 1;
  }
  return res;
}

int parseIntStr(String str) {
  var i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  var n = 0;
  var digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9};
  while (i < str.length) {
    n = n * 10 + digits[str.substring(i, i + 1)];
    i = i + 1;
  }
  if (neg != null) {
    n = -n;
  }
  return n;
}

bool isDigits(String s) {
  if (s.length == 0) {
    return false;
  }
  var i = 0;
  while (i < s.length) {
    var ch = s.toString().substring(i, i + 1);
    if (ch.toString().compareTo('0') < 0 || ch.toString().compareTo('9') > 0) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

Map<String, any> readTable(String table) {
  var toks = fields(table);
  List<String> cmds = [];
  List<int> mins = [];
  var i = 0;
  while (i < toks.length) {
    var cmd = toks[i];
    var minlen = cmd.length;
    i = i + 1;
    if (i < toks.length && isDigits(toks[i])) {
      var num = parseIntStr(toks[i]);
      if (num.toString().compareTo(1.toString()) >= 0 && num.toString().compareTo(cmd.length.toString()) < 0) {
        minlen = num;
        i = i + 1;
      }
    }
    cmds = List.from(cmds)..add(cmd);
    mins = List.from(mins)..add(minlen);
  }
  return {'commands': cmds, 'mins': mins};
}

List<String> validate(List<String> commands, List<int> mins, List<String> words) {
  List<String> results = [];
  var wi = 0;
  while (wi < words.length) {
    var w = words[wi];
    var found = false;
    var wlen = w.length;
    var ci = 0;
    while (ci < commands.length) {
      var cmd = commands[ci];
      if (mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.length) {
        var c = upper(cmd);
        var ww = upper(w);
        if (c.toString().substring(0, wlen) == ww) {
          results = List.from(results)..add(c);
          found = true;
          break;
        }
      }
      ci = ci + 1;
    }
    if (!found != null) {
      results = List.from(results)..add('*error*');
    }
    wi = wi + 1;
  }
  return results;
}

void _main() {
  var table = '' + 'add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ' + 'compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ' + '3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ' + 'forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ' + 'locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ' + 'msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ' + 'refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ' + '2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ';
  var sentence = 'riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin';
  var tbl = readTable(table);
  var commands = (tbl['commands'] as List<String>);
  var mins = (tbl['mins'] as List<int>);
  var words = fields(sentence);
  var results = validate(commands, mins, words);
  var out1 = 'user words:';
  var k = 0;
  while (k < words.length) {
    out1 = out1 + ' ';
    if (k < words.length - 1) {
      out1 = out1 + padRight(words[k], results[k].length);
    }
    else {
      out1 = out1 + words[k];
    }
    k = k + 1;
  }
  print(out1);
  print('full words: ' + join(results, ' '));
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
