// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:33:28Z
List<String> fields(String s) {
  List<String> words = [];
  var cur = '';
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch == ' ' || ch == '\n' || ch == '  ') {
      if (cur.length > 0) {
        words = List.from(words)..add(cur);
        cur = '';
      }
    }
    else {
      cur = (cur as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  if (cur.length > 0) {
    words = List.from(words)..add(cur);
  }
  return words;
}

String padRight(String s, int width) {
  var out = s;
  var i = s.length;
  while ((i as num) < width) {
    out = out + ' ';
    i = (i as num) + 1;
  }
  return out;
}

String join(List<String> xs, String sep) {
  var res = '';
  num i = 0;
  while ((i as num) < xs.length) {
    if ((i as num) > 0) {
      res = res + sep;
    }
    res = res + xs[i];
    i = (i as num) + 1;
  }
  return res;
}

int parseIntStr(String str) {
  num i = 0;
  var neg = false;
  if (str.length > 0 && str.substring(0, 1) == '-') {
    neg = true;
    i = 1;
  }
  num n = 0;
  var digits = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  };
  while ((i as num) < str.length) {
    n = ((n as num) * 10 as num) + (digits[str.substring(i, (i as num) + 1)] as num);
    i = (i as num) + 1;
  }
  if (neg != null) {
    n = -(n as num);
  }
  return n;
}

bool isDigits(String s) {
  if (s.length == 0) {
    return false;
  }
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch.toString().compareTo('0'.toString()) < 0 || ch.toString().compareTo('9'.toString()) > 0) {
      return false;
    }
    i = (i as num) + 1;
  }
  return true;
}

Map<String, any> readTable(String table) {
  var toks = fields(table);
  List<String> cmds = [];
  List<int> mins = [];
  num i = 0;
  while ((i as num) < toks.length) {
    var cmd = toks[i];
    var minlen = cmd.length;
    i = (i as num) + 1;
    if ((i as num) < toks.length && isDigits(toks[i])) {
      var num = parseIntStr(toks[i]);
      if ((num as num) >= 1 && (num as num) < cmd.length) {
        minlen = num;
        i = (i as num) + 1;
      }
    }
    cmds = List.from(cmds)..add(cmd);
    mins = List.from(mins)..add(minlen);
  }
  return {'commands': cmds, 'mins': mins};
}

List<String> validate(List<String> commands, List<int> mins, List<String> words) {
  List<String> results = [];
  num wi = 0;
  while ((wi as num) < words.length) {
    var w = words[wi];
    var found = false;
    var wlen = w.length;
    num ci = 0;
    while ((ci as num) < commands.length) {
      var cmd = commands[ci];
      if (mins[ci] != 0 && (wlen as num) >= mins[ci] && (wlen as num) <= cmd.length) {
        var c = upper(cmd);
        var ww = upper(w);
        if (c.toString().substring(0, wlen) == ww) {
          results = List.from(results)..add(c);
          found = true;
          break;
        }
      }
      ci = (ci as num) + 1;
    }
    if (!found != null) {
      results = List.from(results)..add('*error*');
    }
    wi = (wi as num) + 1;
  }
  return results;
}

void _main() {
  var table = '' + 'add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ' + 'compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate ' + '3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 ' + 'forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load ' + 'locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 ' + 'msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 ' + 'refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left ' + '2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ';
  var sentence = 'riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin';
  var tbl = readTable(table);
  var commands = (tbl['commands'] as List<String>);
  var mins = (tbl['mins'] as List<int>);
  var words = fields(sentence);
  var results = validate(commands, mins, words);
  var out1 = 'user words:';
  num k = 0;
  while ((k as num) < words.length) {
    out1 = out1 + ' ';
    if ((k as num) < words.length - 1) {
      out1 = out1 + padRight(words[k], results[k].length);
    }
    else {
      out1 = (out1 as num) + (words[k] as num);
    }
    k = (k as num) + 1;
  }
  print(out1);
  print('full words: ' + join(results, ' '));
}

void main() {
  _main();
}
