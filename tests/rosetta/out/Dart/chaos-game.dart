// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:40Z
var width = 60;

var height = int.parse((double.parse(width) * 0.86602540378));

var iterations = 5000;

List<List<String>> grid = [];

var y = 0;

List<int> randInt(int s, int n) {
  var next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, (next as num) % n];
}

var seed = 1;

List<List<int>> vertices = [[0, height - 1], [width - 1, height - 1], [int.parse((width / 2)), 0]];

var px = int.parse((width / 2));

var py = int.parse((height / 2));

var i = 0;

void main() {
  while (y < height) {
    List<String> line = [];
    var x = 0;
    while (x.toString().compareTo(width.toString()) < 0) {
      line = List.from(line)..add(' ');
      x = (x as num) + 1;
    }
    grid = List.from(grid)..add(line);
    y = (y + 1 as int);
  }
  while (i < iterations) {
    var r = randInt(seed, 3);
    seed = (r[0] as int);
    var idx = int.parse(r[1]);
    var v = vertices[idx];
    px = (int.parse((((px + (v[0] as num)) as num) / 2)) as int);
    py = (int.parse((((py + (v[1] as num)) as num) / 2)) as int);
    if (px >= 0 && px < width && py >= 0 && py < height) {
      grid[py][px] = '*';
    }
    i = (i + 1 as int);
  }
  y = (0 as int);
  while (y < height) {
    var line = '';
    var x = 0;
    while (x.toString().compareTo(width.toString()) < 0) {
      line = line + grid[y][x];
      x = (x as num) + 1;
    }
    print(line);
    y = (y + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
