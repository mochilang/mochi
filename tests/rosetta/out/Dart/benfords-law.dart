// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:29:22Z
double floorf(double x) {
  return double.parse((int.parse(x)));
}

int indexOf(String s, String ch) {
  var i = 0;
  while (i.toString().compareTo(s.length.toString()) < 0) {
    if (s.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

String fmtF3(double x) {
  var y = floorf(x * 1000 + 0.5) / 1000;
  var s = y.toString();
  var dot = indexOf(s, '.');
  if (dot == 0 - 1) {
    s = s + '.000';
  }
  else {
    var decs = (s.length - (dot as num) as num) - 1;
    if (decs.toString().compareTo(3.toString()) > 0) {
      s = s.toString().substring(0, (dot as num) + 4);
    }
    else {
      while (decs.toString().compareTo(3.toString()) < 0) {
        s = s + '0';
        decs = (decs as num) + 1;
      }
    }
  }
  return s;
}

String padFloat3(double x, int width) {
  var s = fmtF3(x);
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

List<double> fib1000() {
  var a = 0;
  var b = 1;
  List<double> res = [];
  var i = 0;
  while (i.toString().compareTo(1000.toString()) < 0) {
    res = List.from(res)..add(b);
    var t = b;
    b = (b as num) + (a as num);
    a = t;
    i = (i as num) + 1;
  }
  return res;
}

int leadingDigit(double x) {
  if (x < 0) {
    x = -x;
  }
  while (x >= 10) {
    x = x / 10;
  }
  while (x > 0 && x < 1) {
    x = x * 10;
  }
  return int.parse(x);
}

void show(List<double> nums, String title) {
  var counts = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (var n in nums) {
    var d = leadingDigit(n);
    if (d.toString().compareTo(1.toString()) >= 0 && d.toString().compareTo(9.toString()) <= 0) {
      counts[(d as num) - 1] = (counts[(d as num) - 1] as num) + 1;
    }
  }
  var preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046];
  var total = nums.length;
  print(title);
  print('Digit  Observed  Predicted');
  var i = 0;
  while (i.toString().compareTo(9.toString()) < 0) {
    var obs = (double.parse(counts[i])) / (double.parse(total));
    var line = '  ' + (i as num) + 1.toString() + '  ' + padFloat3(obs, 9) + '  ' + padFloat3(preds[i], 8);
    print(line);
    i = (i as num) + 1;
  }
}

void main() {
  show(fib1000(), 'First 1000 Fibonacci numbers');
}

void main() {
  main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
