// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:24Z
double floorf(double x) {
  return double.parse((int.parse(x)));
}

int indexOf(String s, String ch) {
  num i = 0;
  while ((i as num) < s.length) {
    if (s.toString().substring(i, (i as num) + 1) == ch) {
      return i;
    }
    i = (i as num) + 1;
  }
  return -1;
}

String fmtF3(double x) {
  var y = floorf(x * 1000 + 0.5) / 1000;
  var s = y.toString();
  var dot = indexOf(s, '.');
  if (dot == 0 - 1) {
    s = s + '.000';
  }
  else {
    var decs = (s.length - (dot as num) as num) - 1;
    if ((decs as num) > 3) {
      s = s.toString().substring(0, (dot as num) + 4);
    }
    else {
      while ((decs as num) < 3) {
        s = s + '0';
        decs = (decs as num) + 1;
      }
    }
  }
  return s;
}

String padFloat3(double x, int width) {
  var s = fmtF3(x);
  while (s.length < width) {
    s = ' ' + s;
  }
  return s;
}

List<double> fib1000() {
  num a = 0;
  var b = 1;
  List<double> res = [];
  num i = 0;
  while ((i as num) < 1000) {
    res = List.from(res)..add(b);
    var t = b;
    b = (b as num) + (a as num);
    a = t;
    i = (i as num) + 1;
  }
  return res;
}

int leadingDigit(double x) {
  if (x < 0) {
    x = -(x as num);
  }
  while (x >= 10) {
    x = x / 10;
  }
  while (x > 0 && x < 1) {
    x = x * 10;
  }
  return int.parse(x);
}

void show(List<double> nums, String title) {
  var counts = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
  ];
  for (var n in nums) {
    var d = leadingDigit(n);
    if ((d as num) >= 1 && (d as num) <= 9) {
      counts[(d as num) - 1] = (counts[(d as num) - 1] as num) + 1;
    }
  }
  var preds = [
    0.301,
    0.176,
    0.125,
    0.097,
    0.079,
    0.067,
    0.058,
    0.051,
    0.046,
  ];
  var total = nums.length;
  print(title);
  print('Digit  Observed  Predicted');
  num i = 0;
  while ((i as num) < 9) {
    var obs = (double.parse(counts[i])) / (double.parse(total));
    var line = '  ' + (i as num) + 1.toString() + '  ' + padFloat3(obs, 9) + '  ' + padFloat3(preds[i], 8);
    print(line);
    i = (i as num) + 1;
  }
}

void _main() {
  show(fib1000(), 'First 1000 Fibonacci numbers');
}

void main() {
  _main();
}
