// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:59:14Z
import 'dart:io';
import 'dart:convert';

var xMin = -2.182;

var xMax = 2.6558;

var yMin = 0;

var yMax = 9.9983;

var width = 60;

var nIter = 10000;

var dx = xMax - xMin;

var dy = yMax - yMin;

var height = int.parse((width * dy / dx));

List<List<String>> grid = [];

var row = 0;

var seed = 1;

List<int> randInt(int s, int n) {
  var next = (s * 1664525 + 1013904223) % 2147483647;
  return [next, next % n];
}

var x = 0;

var y = 0;

var ix = int.parse(((double.parse(width)) * (x - xMin) / dx));

var iy = int.parse(((double.parse(height)) * (yMax - y) / dy));

var i = 0;

void main() {
  while (row < height) {
    List<String> line = [];
    var col = 0;
    while (col < width) {
      line = List.from(line)..add(' ');
      col = col + 1;
    }
    grid = List.from(grid)..add(line);
    row = (row + 1 as int);
  }
  if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
    grid[iy][ix] = '*';
  }
  while (i < nIter) {
    var res = randInt(seed, 100);
    seed = (res[0] as int);
    var r = res[1];
    if (r < 85) {
      var nx = 0.85 * x + 0.04 * y;
      var ny = -0.04 * x + 0.85 * y + 1.6;
      x = nx;
      y = ny;
    }
    else 
    if (r < 92) {
      var nx = 0.2 * x - 0.26 * y;
      var ny = 0.23 * x + 0.22 * y + 1.6;
      x = nx;
      y = ny;
    }
    else 
    if (r < 99) {
      var nx = -0.15 * x + 0.28 * y;
      var ny = 0.26 * x + 0.24 * y + 0.44;
      x = nx;
      y = ny;
    }
    else {
      x = 0;
      y = 0.16 * y;
    }
    ix = (int.parse(((double.parse(width)) * (x - xMin) / dx)) as int);
    iy = (int.parse(((double.parse(height)) * (yMax - y) / dy)) as int);
    if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
      grid[iy][ix] = '*';
    }
    i = (i + 1 as int);
  }
  row = (0 as int);
  while (row < height) {
    var line = '';
    var col = 0;
    while (col < width) {
      line = line + grid[row][col];
      col = col + 1;
    }
    print(line);
    row = (row + 1 as int);
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
