// Generated by Mochi compiler v0.10.28 on 2025-07-18T09:34:45Z
var stx = '';

var etx = '';

bool contains(String s, String ch) {
  num i = 0;
  while ((i as num) < s.length) {
    if (s.toString().substring(i, (i as num) + 1) == ch) {
      return true;
    }
    i = (i as num) + 1;
  }
  return false;
}

List<String> sortStrings(List<String> xs) {
  var arr = xs;
  var n = arr.length;
  num i = 0;
  while ((i as num) < (n as num)) {
    num j = 0;
    while ((j as num) < ((n as num) - 1 as num)) {
      if ((arr[j] as num) > (arr[(j as num) + 1] as num)) {
        var tmp = arr[j];
        arr[j] = arr[(j as num) + 1];
        arr[(j as num) + 1] = tmp;
      }
      j = (j as num) + 1;
    }
    i = (i as num) + 1;
  }
  return arr;
}

Map<String, any> bwt(String s) {
  if (contains(s, stx) || contains(s, etx)) {
    return {'err': true, 'res': ''};
  }
  s = stx + s + etx;
  var le = s.length;
  List<String> table = [];
  num i = 0;
  while ((i as num) < (le as num)) {
    var rot = s.toString().substring(i, le) + s.toString().substring(0, i);
    table = List.from(table)..add(rot);
    i = (i as num) + 1;
  }
  table = sortStrings(table);
  var last = '';
  i = 0;
  while ((i as num) < (le as num)) {
    last = last + table[i].toString().substring((le as num) - 1, le);
    i = (i as num) + 1;
  }
  return {'err': false, 'res': last};
}

String ibwt(String r) {
  var le = r.length;
  List<String> table = [];
  num i = 0;
  while ((i as num) < (le as num)) {
    table = List.from(table)..add('');
    i = (i as num) + 1;
  }
  num n = 0;
  while ((n as num) < (le as num)) {
    i = 0;
    while ((i as num) < (le as num)) {
      table[i] = r.toString().substring(i, (i as num) + 1) + table[i];
      i = (i as num) + 1;
    }
    table = sortStrings(table);
    n = (n as num) + 1;
  }
  i = 0;
  while ((i as num) < (le as num)) {
    if (table[i].toString().substring((le as num) - 1, le) == etx) {
      return table[i].toString().substring(1, (le as num) - 1);
    }
    i = (i as num) + 1;
  }
  return '';
}

String makePrintable(String s) {
  var out = '';
  num i = 0;
  while ((i as num) < s.length) {
    var ch = s.toString().substring(i, (i as num) + 1);
    if (ch == stx) {
      out = out + '^';
    }
    else 
    if (ch == etx) {
      out = out + '|';
    }
    else {
      out = (out as num) + (ch as num);
    }
    i = (i as num) + 1;
  }
  return out;
}

void _main() {
  var examples = [
    'banana',
    'appellee',
    'dogwood',
    'TO BE OR NOT TO BE OR WANT TO BE OR NOT?',
    'SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES',
    'ABC',
  ];
  var _iter0 = examples;
  for (var t in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print(makePrintable(t));
    var res = bwt(t);
    if (res['err'] != null) {
      print(' --> ERROR: String can\'t contain STX or ETX');
      print(' -->');
    }
    else {
      var enc = res['res'].toString();
      print(' --> ' + makePrintable(enc));
      var r = ibwt(enc);
      print(' --> ' + r);
    }
    print('');
  }
}

void main() {
  _main();
}
