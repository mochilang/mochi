// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:36:07Z
import 'dart:io';
import 'dart:convert';

var stx = '';

var etx = '';

bool contains(String s, String ch) {
  var i = 0;
  while (i < s.length) {
    if (s.toString().substring(i, i + 1) == ch) {
      return true;
    }
    i = i + 1;
  }
  return false;
}

List<String> sortStrings(List<String> xs) {
  var arr = xs;
  var n = arr.length;
  var i = 0;
  while (i < n) {
    var j = 0;
    while (j < n - 1) {
      if (arr[j] > arr[j + 1]) {
        var tmp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = tmp;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return arr;
}

Map<String, any> bwt(String s) {
  if (contains(s, stx) || contains(s, etx)) {
    return {'err': true, 'res': ''};
  }
  s = stx + s + etx;
  var le = s.length;
  List<String> table = [];
  var i = 0;
  while (i < le) {
    var rot = s.toString().substring(i, le) + s.toString().substring(0, i);
    table = List.from(table)..add(rot);
    i = i + 1;
  }
  table = sortStrings(table);
  var last = '';
  i = 0;
  while (i < le) {
    last = last + table[i].toString().substring(le - 1, le);
    i = i + 1;
  }
  return {'err': false, 'res': last};
}

String ibwt(String r) {
  var le = r.length;
  List<String> table = [];
  var i = 0;
  while (i < le) {
    table = List.from(table)..add('');
    i = i + 1;
  }
  var n = 0;
  while (n < le) {
    i = 0;
    while (i < le) {
      table[i] = r.toString().substring(i, i + 1) + table[i];
      i = i + 1;
    }
    table = sortStrings(table);
    n = n + 1;
  }
  i = 0;
  while (i < le) {
    if (table[i].toString().substring(le - 1, le) == etx) {
      return table[i].toString().substring(1, le - 1);
    }
    i = i + 1;
  }
  return '';
}

String makePrintable(String s) {
  var out = '';
  var i = 0;
  while (i < s.length) {
    var ch = s.toString().substring(i, i + 1);
    if (ch == stx) {
      out = out + '^';
    }
    else 
    if (ch == etx) {
      out = out + '|';
    }
    else {
      out = out + ch;
    }
    i = i + 1;
  }
  return out;
}

void _main() {
  var examples = ['banana', 'appellee', 'dogwood', 'TO BE OR NOT TO BE OR WANT TO BE OR NOT?', 'SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES', 'ABC'];
  var _iter0 = examples;
  for (var t in (_iter0 is Map ? (_iter0 as Map).keys : _iter0) as Iterable) {
    print(makePrintable(t));
    var res = bwt(t);
    if (res['err'] != null) {
      print(' --> ERROR: String can\'t contain STX or ETX');
      print(' -->');
    }
    else {
      var enc = res['res'].toString();
      print(' --> ' + makePrintable(enc));
      var r = ibwt(enc);
      print(' --> ' + r);
    }
    print('');
  }
}

void main() {
  _main();
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
