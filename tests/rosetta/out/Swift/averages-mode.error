run error: exit status 1
/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:3:27: error: use [:] to get an empty dictionary literal
 1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:12Z
 2 | var arr1 = [2, 7, 1, 8, 2]
 3 | var counts1: [Int: Int] = []
   |                           `- error: use [:] to get an empty dictionary literal
 4 | var keys1: [Int] = [Any]()
 5 | var i = 0

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:4:20: error: cannot assign value of type '[Any]' to type '[Int]'
 2 | var arr1 = [2, 7, 1, 8, 2]
 3 | var counts1: [Int: Int] = []
 4 | var keys1: [Int] = [Any]()
   |                    |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                    `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 5 | var i = 0
 6 | while i < arr1.count {

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:27:21: error: cannot assign value of type '[Any]' to type '[Int]'
25 |     i = i + 1
26 | }
27 | var modes1: [Int] = [Any]()
   |                     |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                     `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
28 | i = 0
29 | while i < keys1.count {

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:36:7: error: no exact matches in call to initializer 
34 |     i = i + 1
35 | }
36 | print(String(modes1))
   |       `- error: no exact matches in call to initializer 
37 | var arr2 = [2, 7, 1, 8, 2, 8]
38 | var counts2: [Int: Int] = []

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:38:27: error: use [:] to get an empty dictionary literal
36 | print(String(modes1))
37 | var arr2 = [2, 7, 1, 8, 2, 8]
38 | var counts2: [Int: Int] = []
   |                           `- error: use [:] to get an empty dictionary literal
39 | var keys2: [Int] = [Any]()
40 | i = 0

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:39:20: error: cannot assign value of type '[Any]' to type '[Int]'
37 | var arr2 = [2, 7, 1, 8, 2, 8]
38 | var counts2: [Int: Int] = []
39 | var keys2: [Int] = [Any]()
   |                    |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                    `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
40 | i = 0
41 | while i < arr2.count {

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:62:21: error: cannot assign value of type '[Any]' to type '[Int]'
60 |     i = i + 1
61 | }
62 | var modes2: [Int] = [Any]()
   |                     |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                     `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
63 | i = 0
64 | while i < keys2.count {

/tmp/TestMochiToSwiftaverages-mode2507211749/001/main.swift:71:7: error: no exact matches in call to initializer 
69 |     i = i + 1
70 | }
71 | print(String(modes2))
   |       `- error: no exact matches in call to initializer 
72 | 

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 
