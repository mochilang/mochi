// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:41Z
let stx = "\x02"
let etx = "\x03"
func contains(_ s: String, _ ch: String) -> Bool {
    var i = 0
    while i < s.count {
        if String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) == ch {
            return true
        }
        i = i + 1
    }
    return false
}
func sortStrings(_ xs: [String]) -> [String] {
    var arr = xs
    var n = arr.count
    var i = 0
    while i < n {
        var j = 0
        while j < n - 1 {
            if arr[j] > arr[j + 1] {
                let tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
            }
            j = j + 1
        }
        i = i + 1
    }
    return arr
}
func bwt(_ s: String) -> [String: any] {
    if contains(s, stx) || contains(s, etx) {
        return ["err": true, "res": ""]
    }
    s = stx + s + etx
    let le = s.count
    var table: [String] = [Any]()
    var i = 0
    while i < le {
        let rot = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: le)]) + String(s[s.index(s.startIndex, offsetBy: 0)..<s.index(s.startIndex, offsetBy: i)])
        table = table + [rot]
        i = i + 1
    }
    table = sortStrings(table)
    var last = ""
    i = 0
    while i < le {
        last = last + String(table[i][table[i].index(table[i].startIndex, offsetBy: le - 1)..<table[i].index(table[i].startIndex, offsetBy: le)])
        i = i + 1
    }
    return ["err": false, "res": last]
}
func ibwt(_ r: String) -> String {
    let le = r.count
    var table: [String] = [Any]()
    var i = 0
    while i < le {
        table = table + [""]
        i = i + 1
    }
    var n = 0
    while n < le {
        i = 0
        while i < le {
            table[i] = String(r[r.index(r.startIndex, offsetBy: i)..<r.index(r.startIndex, offsetBy: i + 1)]) + table[i]
            i = i + 1
        }
        table = sortStrings(table)
        n = n + 1
    }
    i = 0
    while i < le {
        if String(table[i][table[i].index(table[i].startIndex, offsetBy: le - 1)..<table[i].index(table[i].startIndex, offsetBy: le)]) == etx {
            return String(table[i][table[i].index(table[i].startIndex, offsetBy: 1)..<table[i].index(table[i].startIndex, offsetBy: le - 1)])
        }
        i = i + 1
    }
    return ""
}
func makePrintable(_ s: String) -> String {
    var out = ""
    var i = 0
    while i < s.count {
        let ch = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])
        if ch == stx {
            out = out + "^"
        }
        else         if ch == etx {
            out = out + "|"
        }
        else {
            out = out + ch
        }
        i = i + 1
    }
    return out
}
func main() {
    var examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]
    for t in examples {
        print(makePrintable(t))
        let res = bwt(t)
        if res["err"] {
            print(" --> ERROR: String can't contain STX or ETX")
            print(" -->")
        }
        else {
            let enc = String(res["res"])
            print(" --> " + makePrintable(enc))
            let r = ibwt(enc)
            print(" --> " + r)
        }
        print("")
    }
}
main()
