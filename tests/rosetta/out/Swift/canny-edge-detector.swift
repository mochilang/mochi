// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:48Z
let PI = 3.141592653589793
func conv2d(_ img: [[Double]], _ k: [[Double]]) -> [[Double]] {
    let h = img.count
    let w = img[0].count
    let n = k.count
    let half = n / 2
    var out: [[Double]] = [Any]()
    var y = 0
    while y < h {
        var row: [Double] = [Any]()
        var x = 0
        while x < w {
            var sum = 0.0
            var j = 0
            while j < n {
                var i = 0
                while i < n {
                    var yy = y + j - half
                    if yy < 0 {
                        yy = 0
                    }
                    if yy >= h {
                        yy = h - 1
                    }
                    var xx = x + i - half
                    if xx < 0 {
                        xx = 0
                    }
                    if xx >= w {
                        xx = w - 1
                    }
                    sum = sum + img[yy][xx] * k[j][i]
                    i = i + 1
                }
                j = j + 1
            }
            row = row + [sum]
            x = x + 1
        }
        out = out + [row]
        y = y + 1
    }
    return out
}
func gradient(_ img: [[Double]]) -> [[Double]] {
    var hx = [[-1.0, 0.0, 1.0], [-2.0, 0.0, 2.0], [-1.0, 0.0, 1.0]]
    var hy = [[1.0, 2.0, 1.0], [0.0, 0.0, 0.0], [-1.0, -2.0, -1.0]]
    var gx = conv2d(img, hx)
    var gy = conv2d(img, hy)
    var h = img.count
    var w = img[0].count
    var out: [[Double]] = [Any]()
    var y = 0
    while y < h {
        var row: [Double] = [Any]()
        var x = 0
        while x < w {
            let g = gx[y][x] * gx[y][x] + gy[y][x] * gy[y][x]
            row = row + [g]
            x = x + 1
        }
        out = out + [row]
        y = y + 1
    }
    return out
}
func threshold(_ g: [[Double]], _ t: Double) -> [[Int]] {
    var h = g.count
    var w = g[0].count
    var out: [[Int]] = [Any]()
    var y = 0
    while y < h {
        var row: [Int] = [Any]()
        var x = 0
        while x < w {
            if g[y][x] >= t {
                row = row + [1]
            }
            else {
                row = row + [0]
            }
            x = x + 1
        }
        out = out + [row]
        y = y + 1
    }
    return out
}
func printMatrix(_ m: [[Int]]) {
    var y = 0
    while y < m.count {
        var line = ""
        var x = 0
        while x < m[0].count {
            line = line + String(m[y][x])
            if x < m[0].count - 1 {
                line = line + " "
            }
            x = x + 1
        }
        print(line)
        y = y + 1
    }
}
func main() {
    var img = [[0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 255.0, 255.0, 255.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]]
    let g = gradient(img)
    let edges = threshold(g, 1020.0 * 1020.0)
    printMatrix(edges)
}
main()
