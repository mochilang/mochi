// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:57:15Z
struct Point: Equatable {
    var x: Double
    var y: Double
}
func sqrtApprox(_ x: Double) -> Double {
    var g = x
    var i = 0
    while i < 40 {
        g = (g + x / g) / 2.0
        i = i + 1
    }
    return g
}
func hypot(_ x: Double, _ y: Double) -> Double {
    return sqrtApprox(x * x + y * y)
}
let Two = "Two circles."
let R0 = "R==0.0 does not describe circles."
let Co = "Coincident points describe an infinite number of circles."
let CoR0 = "Coincident points with r==0.0 describe a degenerate circle."
let Diam = "Points form a diameter and describe only a single circle."
let Far = "Points too far apart to form circles."
func circles(_ p1: inout Point, _ p2: inout Point, _ r: Double) -> [any] {
    if p1.x == p2.x && p1.y == p2.y {
        if r == 0.0 {
            return [p1, p1, "Coincident points with r==0.0 describe a degenerate circle."]
        }
        return [p1, p2, "Coincident points describe an infinite number of circles."]
    }
    if r == 0.0 {
        return [p1, p2, "R==0.0 does not describe circles."]
    }
    let dx = p2.x - p1.x
    let dy = p2.y - p1.y
    let q = hypot(dx, dy)
    if q > 2.0 * r {
        return [p1, p2, "Points too far apart to form circles."]
    }
    let m = Point(x: (p1.x + p2.x) / 2.0, y: (p1.y + p2.y) / 2.0)
    if q == 2.0 * r {
        return [m, m, "Points form a diameter and describe only a single circle."]
    }
    let d = sqrtApprox(r * r - q * q / 4.0)
    let ox = d * dx / q
    let oy = d * dy / q
    return [Point(x: m.x - oy, y: m.y + ox), Point(x: m.x + oy, y: m.y - ox), "Two circles."]
}
var td = [[Point(x: 0.1234, y: 0.9876), Point(x: 0.8765, y: 0.2345), 2.0], [Point(x: 0.0, y: 2.0), Point(x: 0.0, y: 0.0), 1.0], [Point(x: 0.1234, y: 0.9876), Point(x: 0.1234, y: 0.9876), 2.0], [Point(x: 0.1234, y: 0.9876), Point(x: 0.8765, y: 0.2345), 0.5], [Point(x: 0.1234, y: 0.9876), Point(x: 0.1234, y: 0.9876), 0.0]]
for tc in td {
    let p1 = tc[0]
    let p2 = tc[1]
    let r = tc[2]
    print("p1:  {" + String(p1.x) + " " + String(p1.y) + "}")
    print("p2:  {" + String(p2.x) + " " + String(p2.y) + "}")
    print("r:  " + String(r))
    let res = circles(&p1, &p2, r)
    let c1 = res[0]
    let c2 = res[1]
    let caseStr = res[2]
    print("   " + caseStr)
    if caseStr == "Points form a diameter and describe only a single circle." || caseStr == "Coincident points with r==0.0 describe a degenerate circle." {
        print("   Center:  {" + String(c1.x) + " " + String(c1.y) + "}")
    }
    else {
        if caseStr == "Two circles." {
            print("   Center 1:  {" + String(c1.x) + " " + String(c1.y) + "}")
            print("   Center 2:  {" + String(c2.x) + " " + String(c2.y) + "}")
        }
    }
    print("")
}
