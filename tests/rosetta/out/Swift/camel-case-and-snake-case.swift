// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:47Z
func trimSpace(_ s: String) -> String {
    var start = 0
    while start < s.count && Array(s[start..<start + 1]) == " " {
        start = start + 1
    }
    var end = s.count
    while end > start && Array(s[end - 1..<end]) == " " {
        end = end - 1
    }
    return Array(s[start..<end])
}
func isUpper(_ ch: String) -> Bool {
    return ch >= "A" && ch <= "Z"
}
func padLeft(_ s: String, _ w: Int) -> String {
    var res = ""
    var n = w - s.count
    while n > 0 {
        res = res + " "
        n = n - 1
    }
    return res + s
}
func snakeToCamel(_ s: String) -> String {
    s = trimSpace(s)
    var out = ""
    var up = false
    var i = 0
    while i < s.count {
        let ch = Array(s[i..<i + 1])
        if ch == "_" || ch == "-" || ch == " " || ch == "." {
            up = true
            i = i + 1
            continue
        }
        if i == 0 {
            out = out + lower(ch)
            up = false
            i = i + 1
            continue
        }
        if up {
            out = out + upper(ch)
            up = false
        }
        else {
            out = out + ch
        }
        i = i + 1
    }
    return out
}
func camelToSnake(_ s: String) -> String {
    s = trimSpace(s)
    var out = ""
    var prevUnd = false
    var i = 0
    while i < s.count {
        let ch = Array(s[i..<i + 1])
        if ch == " " || ch == "-" || ch == "." {
            if !prevUnd && out.count > 0 {
                out = out + "_"
                prevUnd = true
            }
            i = i + 1
            continue
        }
        if ch == "_" {
            if !prevUnd && out.count > 0 {
                out = out + "_"
                prevUnd = true
            }
            i = i + 1
            continue
        }
        if isUpper(ch) {
            if i > 0 && (!prevUnd) {
                out = out + "_"
            }
            out = out + lower(ch)
            prevUnd = false
        }
        else {
            out = out + lower(ch)
            prevUnd = false
        }
        i = i + 1
    }
    var start = 0
    while start < out.count && Array(out[start..<start + 1]) == "_" {
        start = start + 1
    }
    var end = out.count
    while end > start && Array(out[end - 1..<end]) == "_" {
        end = end - 1
    }
    out = Array(out[start..<end])
    var res = ""
    var j = 0
    var lastUnd = false
    while j < out.count {
        let c = Array(out[j..<j + 1])
        if c == "_" {
            if !lastUnd {
                res = res + c
            }
            lastUnd = true
        }
        else {
            res = res + c
            lastUnd = false
        }
        j = j + 1
    }
    return res
}
func main() {
    var samples = ["snakeCase", "snake_case", "snake-case", "snake case", "snake CASE", "snake.case", "variable_10_case", "variable10Case", "É›rgo rE tHis", "hurry-up-joe!", "c://my-docs/happy_Flag-Day/12.doc", " spaces "]
    print("=== To snake_case ===")
    for s in samples {
        print(padLeft(s, 34) + " => " + camelToSnake(s))
    }
    print("")
    print("=== To camelCase ===")
    for s in samples {
        print(padLeft(s, 34) + " => " + snakeToCamel(s))
    }
}
main()
