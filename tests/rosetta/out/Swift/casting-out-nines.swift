// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:56:05Z
struct Auto1: Equatable {
    var base: Int
    var begin: String
    var end: String
    var kaprekar: [String]
}

func parseIntBase(_ s: String, _ base: Int) -> Int {
    let digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    var n = 0
    var i = 0
    while i < s.count {
        var j = 0
        var v = 0
        while j < digits.count {
            if String(digits[digits.index(digits.startIndex, offsetBy: j)..<digits.index(digits.startIndex, offsetBy: j + 1)]) == Array(s[i..<i + 1]) {
                v = j
                break
            }
            j = j + 1
        }
        n = n * base + v
        i = i + 1
    }
    return n
}
func intToBase(_ n: Int, _ base: Int) -> String {
    let digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n == 0 {
        return "0"
    }
    var out = ""
    var v = n
    while v > 0 {
        let d = v % base
        out = String(digits[digits.index(digits.startIndex, offsetBy: d)..<digits.index(digits.startIndex, offsetBy: d + 1)]) + out
        v = v / base
    }
    return out
}
func subset(_ base: Int, _ begin: String, _ end: String) -> [String] {
    var b = parseIntBase(begin, base)
    var e = parseIntBase(end, base)
    var out: [String] = [Any]()
    var k = b
    while k <= e {
        let ks = intToBase(k, base)
        let mod = base - 1
        let r1 = parseIntBase(ks, base) % mod
        let r2 = (parseIntBase(ks, base) * parseIntBase(ks, base)) % mod
        if r1 == r2 {
            out = out + [ks]
        }
        k = k + 1
    }
    return out
}
var testCases = [Auto1(base: 10, begin: "1", end: "100", kaprekar: ["1", "9", "45", "55", "99"]), Auto1(base: 17, begin: "10", end: "gg", kaprekar: ["3d", "d4", "gg"])]
var idx = 0
while idx < testCases.count {
    let tc = testCases[idx]
    print("\nTest case base = " + String(tc["base"]) + ", begin = " + tc["begin"] + ", end = " + tc["end"] + ":")
    let s = subset(tc["base"], tc["begin"], tc["end"])
    print("Subset:  " + String(s))
    print("Kaprekar:" + String(tc["kaprekar"]))
    var sx = 0
    var valid = true
    var i = 0
    while i < tc["kaprekar"].count {
        let k = tc["kaprekar"][i]
        var found = false
        while sx < s.count {
            if s[sx] == k {
                found = true
                sx = sx + 1
                break
            }
            sx = sx + 1
        }
        if !found {
            print("Fail:" + k + " not in subset")
            valid = false
            break
        }
        i = i + 1
    }
    if valid {
        print("Valid subset.")
    }
    idx = idx + 1
}
