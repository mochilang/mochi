// Generated by Mochi compiler v0.10.30 on 2025-07-18T17:04:05Z
import Foundation

let OP_NUM = 0
let OP_ADD = 1
let OP_SUB = 2
let OP_MUL = 3
let OP_DIV = 4
func newNum(_ n: Int) -> [String: Any] {
    return ["op": OP_NUM, "value": ["num": n, "denom": 1]]
}
func exprEval(_ x: [String: Any]) -> [String: Int] {
    if x["op"] == OP_NUM {
        return x["value"]
    }
    let l = exprEval(x["left"])
    let r = exprEval(x["right"])
    if x["op"] == OP_ADD {
        return ["num": l["num"] * r["denom"] + l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
    }
    if x["op"] == OP_SUB {
        return ["num": l["num"] * r["denom"] - l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
    }
    if x["op"] == OP_MUL {
        return ["num": l["num"] * r["num"], "denom": l["denom"] * r["denom"]]
    }
    return ["num": l["num"] * r["denom"], "denom": l["denom"] * r["num"]]
}
func exprString(_ x: [String: Any]) -> String {
    if x["op"] == OP_NUM {
        return String(x["value"]["num"])
    }
    let ls = exprString(x["left"])
    let rs = exprString(x["right"])
    var opstr = ""
    if x["op"] == OP_ADD {
        opstr = " + "
    }
    else     if x["op"] == OP_SUB {
        opstr = " - "
    }
    else     if x["op"] == OP_MUL {
        opstr = " * "
    }
    else {
        opstr = " / "
    }
    return "(" + ls + opstr + rs + ")"
}
let n_cards = 4
let goal = 24
let digit_range = 9
func solve(_ xs: [[String: Any]]) -> Bool {
    if xs.count == 1 {
        let f = exprEval(xs[0])
        if f["denom"] != 0 && f["num"] == f["denom"] * goal {
            print(exprString(xs[0]))
            return true
        }
        return false
    }
    var i = 0
    while i < xs.count {
        var j = i + 1
        while j < xs.count {
            var rest: [[String: Any]] = []
            var k = 0
            while k < xs.count {
                if k != i && k != j {
                    rest = rest + [xs[k]]
                }
                k = k + 1
            }
            let a = xs[i]
            let b = xs[j]
            for op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV] {
                var node = ["op": op, "left": a, "right": b]
                if solve(rest + [node]) {
                    return true
                }
            }
            var node = ["op": OP_SUB, "left": b, "right": a]
            if solve(rest + [node]) {
                return true
            }
            node = ["op": OP_DIV, "left": b, "right": a]
            if solve(rest + [node]) {
                return true
            }
            j = j + 1
        }
        i = i + 1
    }
    return false
}
func main() {
    var iter = 0
    while iter < 10 {
        var cards: [[String: Any]] = []
        var i = 0
        while i < n_cards {
            let n = (Int(Date().timeIntervalSince1970 * 1000000000) % (digit_range - 1)) + 1
            cards = cards + [newNum(n)]
            print(" " + String(n))
            i = i + 1
        }
        print(":  ")
        if !solve(cards) {
            print("No solution")
        }
        iter = iter + 1
    }
}
main()
