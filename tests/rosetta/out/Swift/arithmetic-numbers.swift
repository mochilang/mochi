// Generated by Mochi compiler v0.10.26 on 2025-07-16T13:16:27Z
func sieve(_ limit: Int) -> [Int] {
    var spf: [Int] = []
    var i = 0
    while i <= limit {
        spf = spf + [0]
        i = i + 1
    }
    i = 2
    while i <= limit {
        if spf[i] == 0 {
            spf[i] = i
            if i * i <= limit {
                var j = i * i
                while j <= limit {
                    if spf[j] == 0 {
                        spf[j] = i
                    }
                    j = j + i
                }
            }
        }
        i = i + 1
    }
    return spf
}
func primesFrom(_ spf: [Int], _ limit: Int) -> [Int] {
    var primes: [Int] = []
    var i = 3
    while i <= limit {
        if spf[i] == i {
            primes = primes + [i]
        }
        i = i + 1
    }
    return primes
}
func pad3(_ n: Int) -> String {
    var s = String(n)
    while s.count < 3 {
        s = " " + s
    }
    return s
}
func commatize(_ n: Int) -> String {
    var s = String(n)
    var out = ""
    var i = s.count - 1
    var c = 0
    while i >= 0 {
        out = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) + out
        c = c + 1
        if c % 3 == 0 && i > 0 {
            out = "," + out
        }
        i = i - 1
    }
    return out
}
func primeCount(_ primes: [Int], _ last: Int, _ spf: [Int]) -> Int {
    var lo = 0
    var hi = primes.count
    while lo < hi {
        var mid = Int(((lo + hi) / 2))
        if primes[mid] < last {
            lo = mid + 1
        }
        else {
            hi = mid
        }
    }
    var count = lo + 1
    if spf[last] != last {
        count = count - 1
    }
    return count
}
func arithmeticNumbers(_ limit: Int, _ spf: [Int]) -> [Int] {
    var arr: [Int] = [1]
    var n = 3
    while arr.count < limit {
        if spf[n] == n {
            arr = arr + [n]
        }
        else {
            var x = n
            var sigma = 1
            var tau = 1
            while x > 1 {
                var p = spf[x]
                if p == 0 {
                    p = x
                }
                var cnt = 0
                var power = p
                var sum = 1
                while x % p == 0 {
                    x = x / p
                    cnt = cnt + 1
                    sum = sum + power
                    power = power * p
                }
                sigma = sigma * sum
                tau = tau * (cnt + 1)
            }
            if sigma % tau == 0 {
                arr = arr + [n]
            }
        }
        n = n + 1
    }
    return arr
}
func main() {
    let limit = 1228663
    let spf = sieve(limit)
    let primes = primesFrom(spf, limit)
    let arr = arithmeticNumbers(1000000, spf)
    print("The first 100 arithmetic numbers are:")
    var i = 0
    while i < 100 {
        var line = ""
        var j = 0
        while j < 10 {
            line = line + pad3(arr[i + j])
            if j < 9 {
                line = line + " "
            }
            j = j + 1
        }
        print(line)
        i = i + 10
    }
    for x in [1000, 10000, 100000, 1000000] {
        let last = arr[x - 1]
        let lastc = commatize(last)
        print("\nThe " + commatize(x) + "th arithmetic number is: " + lastc)
        let pc = primeCount(primes, last, spf)
        let comp = x - pc - 1
        print("The count of such numbers <= " + lastc + " which are composite is " + commatize(comp) + ".")
    }
}
main()
