run error: exit status 1
/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:7:9: error: cannot assign to value: 'bins' is a 'let' constant
 5 | func histogram(_ g: [[Int]], _ bins: Int) -> [Int] {
 6 |     if bins <= 0 {
 7 |         bins = g[0].count
   |         `- error: cannot assign to value: 'bins' is a 'let' constant
 8 |     }
 9 |     var h: [Int] = [Any]()

/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:9:20: error: cannot assign value of type '[Any]' to type '[Int]'
 7 |         bins = g[0].count
 8 |     }
 9 |     var h: [Int] = [Any]()
   |                    |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                    `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
10 |     var i = 0
11 |     while i < bins {

/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:47:24: error: cannot assign value of type '[Any]' to type '[[Int]]'
45 | }
46 | func threshold(_ g: [[Int]], _ t: Int) -> [[Int]] {
47 |     var out: [[Int]] = [Any]()
   |                        |- error: cannot assign value of type '[Any]' to type '[[Int]]'
   |                        `- note: arguments to generic parameter 'Element' ('Any' and '[Int]') are expected to be equal
48 |     var y = 0
49 |     while y < g.count {

/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:51:29: error: cannot assign value of type '[Any]' to type '[Int]'
49 |     while y < g.count {
50 |         var row = g[y]
51 |         var newRow: [Int] = [Any]()
   |                             |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                             `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
52 |         var x = 0
53 |         while x < row.count {

/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:70:13: warning: variable 'row' was never mutated; consider changing to 'let' constant
68 |     var y = 0
69 |     while y < g.count {
70 |         var row = g[y]
   |             `- warning: variable 'row' was never mutated; consider changing to 'let' constant
71 |         var line = ""
72 |         var x = 0

/tmp/TestMochiToSwiftbitmap-histogram4021441396/001/main.swift:89:27: error: no exact matches in call to initializer 
87 |     let img = image()
88 |     let h = histogram(img, 0)
89 |     print("Histogram: " + String(h))
   |                           `- error: no exact matches in call to initializer 
90 |     let t = medianThreshold(h)
91 |     print("Threshold: " + String(t))

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 
