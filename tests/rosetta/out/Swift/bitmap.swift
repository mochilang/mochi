// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:37Z
struct Pixel: Equatable {
    var R: Int
    var G: Int
    var B: Int
}
func pixelFromRgb(_ c: Int) -> Pixel {
    let r = (Int((c / 65536))) % 256
    let g = (Int((c / 256))) % 256
    let b = c % 256
    return Pixel(R: r, G: g, B: b)
}
func rgbFromPixel(_ p: inout Pixel) -> Int {
    return p.R * 65536 + p.G * 256 + p.B
}
struct Bitmap: Equatable {
    var cols: Int
    var rows: Int
    var px: [[Pixel]]
}
func NewBitmap(_ x: Int, _ y: Int) -> Bitmap {
    var data: [[Pixel]] = [Any]()
    var row = 0
    while row < y {
        var r: [Pixel] = [Any]()
        var col = 0
        while col < x {
            r = r + [Pixel(R: 0, G: 0, B: 0)]
            col = col + 1
        }
        data = data + [r]
        row = row + 1
    }
    return Bitmap(cols: x, rows: y, px: data)
}
func Extent(_ b: inout Bitmap) -> [String: Int] {
    return ["cols": b.cols, "rows": b.rows]
}
func Fill(_ b: inout Bitmap, _ p: inout Pixel) {
    var y = 0
    while y < b.rows {
        var x = 0
        while x < b.cols {
            var px = b.px
            var row = px[y]
            row[x] = p
            px[y] = row
            b.px = px
            x = x + 1
        }
        y = y + 1
    }
}
func FillRgb(_ b: inout Bitmap, _ c: Int) {
    Fill(&b, &pixelFromRgb(c))
}
func SetPx(_ b: inout Bitmap, _ x: Int, _ y: Int, _ p: inout Pixel) -> Bool {
    if x < 0 || x >= b.cols || y < 0 || y >= b.rows {
        return false
    }
    var px = b.px
    var row = px[y]
    row[x] = p
    px[y] = row
    b.px = px
    return true
}
func SetPxRgb(_ b: inout Bitmap, _ x: Int, _ y: Int, _ c: Int) -> Bool {
    return SetPx(&b, x, y, &pixelFromRgb(c))
}
func GetPx(_ b: inout Bitmap, _ x: Int, _ y: Int) -> [String: any] {
    if x < 0 || x >= b.cols || y < 0 || y >= b.rows {
        return ["ok": false]
    }
    let row = b.px[y]
    return ["ok": true, "pixel": row[x]]
}
func GetPxRgb(_ b: inout Bitmap, _ x: Int, _ y: Int) -> [String: any] {
    let r = GetPx(&b, x, y)
    if !r.ok {
        return ["ok": false]
    }
    return ["ok": true, "rgb": rgbFromPixel(&r.pixel)]
}
func ppmSize(_ b: inout Bitmap) -> Int {
    let header = "P6\n# Creator: Rosetta Code http://rosettacode.org/\n" + String(b.cols) + " " + String(b.rows) + "\n255\n"
    return header.count + 3 * b.cols * b.rows
}
func pixelStr(_ p: inout Pixel) -> String {
    return "{" + String(p.R) + " " + String(p.G) + " " + String(p.B) + "}"
}
func main() {
    var bm = NewBitmap(300, 240)
    FillRgb(&bm, 16711680)
    SetPxRgb(&bm, 10, 20, 255)
    SetPxRgb(&bm, 20, 30, 0)
    SetPxRgb(&bm, 30, 40, 1056816)
    let c1 = GetPx(&bm, 0, 0)
    let c2 = GetPx(&bm, 10, 20)
    let c3 = GetPx(&bm, 30, 40)
    print("Image size: " + String(bm.cols) + " Ã— " + String(bm.rows))
    print(String(ppmSize(&bm)) + " bytes when encoded as PPM.")
    if c1.ok {
        print("Pixel at (0,0) is " + pixelStr(&c1.pixel))
    }
    if c2.ok {
        print("Pixel at (10,20) is " + pixelStr(&c2.pixel))
    }
    if c3.ok {
        let p = c3.pixel
        var r16 = p.R * 257
        var g16 = p.G * 257
        var b16 = p.B * 257
        print("Pixel at (30,40) has R=" + String(r16) + ", G=" + String(g16) + ", B=" + String(b16))
    }
}
main()
