// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:54:28Z
import Foundation

class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func divisors(_ n: Int) -> [Int] {
    var divs: [Int] = [1]
    var divs2: [Int] = [Any]()
    var i = 2
    while i * i <= n {
        if n % i == 0 {
            let j = Int((n / i))
            divs = divs + [i]
            if i != j {
                divs2 = divs2 + [j]
            }
        }
        i = i + 1
    }
    var j = divs2.count - 1
    while j >= 0 {
        divs = divs + [divs2[j]]
        j = j - 1
    }
    return divs
}
func sum(_ xs: [Int]) -> Int {
    var tot = 0
    for v in xs {
        tot = tot + v
    }
    return tot
}
func sumStr(_ xs: [Int]) -> String {
    var s = ""
    var i = 0
    while i < xs.count {
        s = s + String(xs[i]) + " + "
        i = i + 1
    }
    return String(s[s.index(s.startIndex, offsetBy: 0)..<s.index(s.startIndex, offsetBy: s.count - 3)])
}
func pad2(_ n: Int) -> String {
    let s = String(n)
    if s.count < 2 {
        return " " + s
    }
    return s
}
func pad5(_ n: Int) -> String {
    var s = String(n)
    while s.count < 5 {
        s = " " + s
    }
    return s
}
func abundantOdd(_ searchFrom: Int, _ countFrom: Int, _ countTo: Int, _ printOne: Bool) -> Int {
    var count = countFrom
    var n = searchFrom
    while count < countTo {
        let divs = divisors(n)
        let tot = _sum(divs)
        if tot > n {
            count = count + 1
            if printOne && count < countTo {
                n = n + 2
                continue
            }
            let s = sumStr(divs)
            if !printOne {
                print(pad2(count) + ". " + pad5(n) + " < " + s + " = " + String(tot))
            }
            else {
                print(String(n) + " < " + s + " = " + String(tot))
            }
        }
        n = n + 2
    }
    return n
}
func main() {
    let max = 25
    print("The first " + String(max) + " abundant odd numbers are:")
    let n = abundantOdd(1, 0, max, false)
    print("\nThe one thousandth abundant odd number is:")
    abundantOdd(n, max, 1000, true)
    print("\nThe first abundant odd number above one billion is:")
    abundantOdd(1000000001, 0, 1, true)
}
main()
