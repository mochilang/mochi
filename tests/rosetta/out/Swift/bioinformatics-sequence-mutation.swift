// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:33Z
func randInt(_ s: Int, _ n: Int) -> [Int] {
    let next = (s * 1664525 + 1013904223) % 2147483647
    return [next, next % n]
}
func padLeft(_ s: String, _ w: Int) -> String {
    var res = ""
    var n = w - s.count
    while n > 0 {
        res = res + " "
        n = n - 1
    }
    return res + s
}
func makeSeq(_ s: Int, _ le: Int) -> [any] {
    let bases = "ACGT"
    var out = ""
    var i = 0
    while i < le {
        var r = randInt(s, 4)
        s = r[0]
        let idx = Int(r[1])
        out = out + String(bases[bases.index(bases.startIndex, offsetBy: idx)..<bases.index(bases.startIndex, offsetBy: idx + 1)])
        i = i + 1
    }
    return [s, out]
}
func mutate(_ s: Int, _ dna: String, _ w: [Int]) -> [any] {
    let bases = "ACGT"
    let le = dna.count
    var r = randInt(s, le)
    s = r[0]
    let p = Int(r[1])
    r = randInt(s, 300)
    s = r[0]
    let x = Int(r[1])
    var arr: [String] = [Any]()
    var i = 0
    while i < le {
        arr = arr + [String(dna[dna.index(dna.startIndex, offsetBy: i)..<dna.index(dna.startIndex, offsetBy: i + 1)])]
        i = i + 1
    }
    if x < w[0] {
        r = randInt(s, 4)
        s = r[0]
        let idx = Int(r[1])
        let b = String(bases[bases.index(bases.startIndex, offsetBy: idx)..<bases.index(bases.startIndex, offsetBy: idx + 1)])
        print("  Change @" + padLeft(String(p), 3) + " '" + arr[p] + "' to '" + b + "'")
        arr[p] = b
    }
    else     if x < w[0] + w[1] {
        print("  Delete @" + padLeft(String(p), 3) + " '" + arr[p] + "'")
        var j = p
        while j < arr.count - 1 {
            arr[j] = arr[j + 1]
            j = j + 1
        }
        arr = Array(arr[0..<arr.count - 1])
    }
    else {
        r = randInt(s, 4)
        s = r[0]
        let idx2 = Int(r[1])
        let b = String(bases[bases.index(bases.startIndex, offsetBy: idx2)..<bases.index(bases.startIndex, offsetBy: idx2 + 1)])
        arr = arr + [""]
        var j = arr.count - 1
        while j > p {
            arr[j] = arr[j - 1]
            j = j - 1
        }
        print("  Insert @" + padLeft(String(p), 3) + " '" + b + "'")
        arr[p] = b
    }
    var out = ""
    i = 0
    while i < arr.count {
        out = out + arr[i]
        i = i + 1
    }
    return [s, out]
}
func prettyPrint(_ dna: String, _ rowLen: Int) {
    print("SEQUENCE:")
    let le = dna.count
    var i = 0
    while i < le {
        var k = i + rowLen
        if k > le {
            k = le
        }
        print(padLeft(String(i), 5) + ": " + Array(dna[i..<k]))
        i = i + rowLen
    }
    var a = 0
    var c = 0
    var g = 0
    var t = 0
    var idx = 0
    while idx < le {
        let ch = String(dna[dna.index(dna.startIndex, offsetBy: idx)..<dna.index(dna.startIndex, offsetBy: idx + 1)])
        if ch == "A" {
            a = a + 1
        }
        else {
            if ch == "C" {
                c = c + 1
            }
            else {
                if ch == "G" {
                    g = g + 1
                }
                else {
                    if ch == "T" {
                        t = t + 1
                    }
                }
            }
        }
        idx = idx + 1
    }
    print("")
    print("BASE COUNT:")
    print("    A: " + padLeft(String(a), 3))
    print("    C: " + padLeft(String(c), 3))
    print("    G: " + padLeft(String(g), 3))
    print("    T: " + padLeft(String(t), 3))
    print("    ------")
    print("    Î£: " + String(le))
    print("    ======")
}
func wstring(_ w: [Int]) -> String {
    return "  Change: " + String(w[0]) + "\n  Delete: " + String(w[1]) + "\n  Insert: " + String(w[2]) + "\n"
}
func main() {
    var seed = 1
    var res = makeSeq(seed, 250)
    seed = res[0]
    var dna = String(res[1])
    prettyPrint(dna, 50)
    let muts = 10
    var w = [100, 100, 100]
    print("\nWEIGHTS (ex 300):")
    print(wstring(w))
    print("MUTATIONS (" + String(muts) + "):")
    var i = 0
    while i < muts {
        res = mutate(seed, dna, w)
        seed = res[0]
        dna = String(res[1])
        i = i + 1
    }
    print("")
    prettyPrint(dna, 50)
}
main()
