// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:57:15Z
func sqrtApprox(_ x: Double) -> Double {
    var guess = x
    var i = 0
    while i < 20 {
        guess = (guess + x / guess) / 2.0
        i = i + 1
    }
    return guess
}
func makeSym(_ order: Int, _ elements: [Double]) -> [String: any] {
    return ["order": order, "ele": elements]
}
func unpackSym(_ m: [String: any]) -> [[Double]] {
    let n = m["order"]
    let ele = m["ele"]
    var mat: [[Double]] = [Any]()
    var idx = 0
    var r = 0
    while r < n {
        var row: [Double] = [Any]()
        var c = 0
        while c <= r {
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        }
        while c < n {
            row = row + [0.0]
            c = c + 1
        }
        mat = mat + [row]
        r = r + 1
    }
    r = 0
    while r < n {
        var c = r + 1
        while c < n {
            mat[r][c] = mat[c][r]
            c = c + 1
        }
        r = r + 1
    }
    return mat
}
func printMat(_ m: [[Double]]) {
    var i = 0
    while i < m.count {
        var line = ""
        var j = 0
        while j < m[i].count {
            line = line + String(m[i][j])
            if j < m[i].count - 1 {
                line = line + " "
            }
            j = j + 1
        }
        print(line)
        i = i + 1
    }
}
func printSym(_ m: [String: any]) {
    printMat(unpackSym(m))
}
func printLower(_ m: [String: any]) {
    let n = m["order"]
    let ele = m["ele"]
    var mat: [[Double]] = [Any]()
    var idx = 0
    var r = 0
    while r < n {
        var row: [Double] = [Any]()
        var c = 0
        while c <= r {
            row = row + [ele[idx]]
            idx = idx + 1
            c = c + 1
        }
        while c < n {
            row = row + [0.0]
            c = c + 1
        }
        mat = mat + [row]
        r = r + 1
    }
    printMat(mat)
}
func choleskyLower(_ a: [String: any]) -> [String: any] {
    let n = a["order"]
    let ae = a["ele"]
    var le: [Double] = [Any]()
    var idx = 0
    while idx < ae.count {
        le = le + [0.0]
        idx = idx + 1
    }
    var row = 1
    var col = 1
    var dr = 0
    var dc = 0
    var i = 0
    while i < ae.count {
        let e = ae[i]
        if i < dr {
            var d = (e - le[i]) / le[dc]
            le[i] = d
            var ci = col
            var cx = dc
            var j = i + 1
            while j <= dr {
                cx = cx + ci
                ci = ci + 1
                le[j] = le[j] + d * le[cx]
                j = j + 1
            }
            col = col + 1
            dc = dc + col
        }
        else {
            le[i] = sqrtApprox(e - le[i])
            row = row + 1
            dr = dr + row
            col = 1
            dc = 0
        }
        i = i + 1
    }
    return ["order": n, "ele": le]
}
func demo(_ a: [String: any]) {
    print("A:")
    printSym(a)
    print("L:")
    let l = choleskyLower(a)
    printLower(l)
}
demo(makeSym(3, [25.0, 15.0, 18.0, -5.0, 0.0, 11.0]))
demo(makeSym(4, [18.0, 22.0, 70.0, 54.0, 86.0, 174.0, 42.0, 62.0, 134.0, 106.0]))
