swiftc: exit status 1
/tmp/24-game-solve.swift:7:38: error: expected dictionary value type
  5 | let OP_MUL = 3
  6 | let OP_DIV = 4
  7 | func newNum(_ n: Int) -> [String: any] {
    |                                      `- error: expected dictionary value type
  8 |     return ["op": OP_NUM, "value": ["num": n, "denom": 1]]
  9 | }

/tmp/24-game-solve.swift:10:32: error: expected dictionary value type
  8 |     return ["op": OP_NUM, "value": ["num": n, "denom": 1]]
  9 | }
 10 | func exprEval(_ x: [String: any]) -> [String: Int] {
    |                                `- error: expected dictionary value type
 11 |     if x["op"] == OP_NUM {
 12 |         return x["value"]

/tmp/24-game-solve.swift:27:34: error: expected dictionary value type
 25 |     return ["num": l["num"] * r["denom"], "denom": l["denom"] * r["num"]]
 26 | }
 27 | func exprString(_ x: [String: any]) -> String {
    |                                  `- error: expected dictionary value type
 28 |     if x["op"] == OP_NUM {
 29 |         return String(x["value"]["num"])

/tmp/24-game-solve.swift:51:31: error: expected dictionary value type
 49 | let goal = 24
 50 | let digit_range = 9
 51 | func solve(_ xs: [[String: any]]) -> Bool {
    |                               `- error: expected dictionary value type
 52 |     if xs.count == 1 {
 53 |         let f = exprEval(xs[0])

/tmp/24-game-solve.swift:64:36: error: expected dictionary value type
 62 |         var j = i + 1
 63 |         while j < xs.count {
 64 |             var rest: [[String: any]] = []
    |                                    `- error: expected dictionary value type
 65 |             var k = 0
 66 |             while k < xs.count {

/tmp/24-game-solve.swift:97:33: error: expected dictionary value type
 95 |     var iter = 0
 96 |     while iter < 10 {
 97 |         var cards: [[String: any]] = []
    |                                 `- error: expected dictionary value type
 98 |         var i = 0
 99 |         while i < n_cards {

/tmp/24-game-solve.swift:8:12: error: unexpected non-void return value in void function
  6 | let OP_DIV = 4
  7 | func newNum(_ n: Int) -> [String: any] {
  8 |     return ["op": OP_NUM, "value": ["num": n, "denom": 1]]
    |            |- error: unexpected non-void return value in void function
    |            `- note: did you mean to add a return type?
  9 | }
 10 | func exprEval(_ x: [String: any]) -> [String: Int] {

/tmp/24-game-solve.swift:100:22: error: cannot find 'now' in scope
 98 |         var i = 0
 99 |         while i < n_cards {
100 |             let n = (now() % (digit_range - 1)) + 1
    |                      `- error: cannot find 'now' in scope
101 |             cards = cards + [newNum(n)]
102 |             print(" " + String(n))
