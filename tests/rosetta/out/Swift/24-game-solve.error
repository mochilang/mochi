swiftc: exit status 1
/tmp/24-game-solve.swift:13:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 11 | }
 12 | func exprEval(_ x: [String: Any]) -> [String: Int] {
 13 |     if x["op"] == OP_NUM {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 14 |         return x["value"]
 15 |     }

/tmp/24-game-solve.swift:14:17: error: cannot convert return expression of type 'Any?' to return type '[String : Int]'
 12 | func exprEval(_ x: [String: Any]) -> [String: Int] {
 13 |     if x["op"] == OP_NUM {
 14 |         return x["value"]
    |                 `- error: cannot convert return expression of type 'Any?' to return type '[String : Int]'
 15 |     }
 16 |     let l = exprEval(x["left"])

/tmp/24-game-solve.swift:16:23: error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 14 |         return x["value"]
 15 |     }
 16 |     let l = exprEval(x["left"])
    |                       `- error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 17 |     let r = exprEval(x["right"])
 18 |     if x["op"] == OP_ADD {

/tmp/24-game-solve.swift:17:23: error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 15 |     }
 16 |     let l = exprEval(x["left"])
 17 |     let r = exprEval(x["right"])
    |                       `- error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 18 |     if x["op"] == OP_ADD {
 19 |         return ["num": l["num"] * r["denom"] + l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]

/tmp/24-game-solve.swift:18:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 16 |     let l = exprEval(x["left"])
 17 |     let r = exprEval(x["right"])
 18 |     if x["op"] == OP_ADD {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 19 |         return ["num": l["num"] * r["denom"] + l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
 20 |     }

/tmp/24-game-solve.swift:21:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 19 |         return ["num": l["num"] * r["denom"] + l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
 20 |     }
 21 |     if x["op"] == OP_SUB {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 22 |         return ["num": l["num"] * r["denom"] - l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
 23 |     }

/tmp/24-game-solve.swift:24:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 22 |         return ["num": l["num"] * r["denom"] - l["denom"] * r["num"], "denom": l["denom"] * r["denom"]]
 23 |     }
 24 |     if x["op"] == OP_MUL {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 25 |         return ["num": l["num"] * r["num"], "denom": l["denom"] * r["denom"]]
 26 |     }

/tmp/24-game-solve.swift:30:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 28 | }
 29 | func exprString(_ x: [String: Any]) -> String {
 30 |     if x["op"] == OP_NUM {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 31 |         return String(x["value"]["num"])
 32 |     }

/tmp/24-game-solve.swift:31:33: error: value of type 'Any?' has no subscripts
 29 | func exprString(_ x: [String: Any]) -> String {
 30 |     if x["op"] == OP_NUM {
 31 |         return String(x["value"]["num"])
    |                                 `- error: value of type 'Any?' has no subscripts
 32 |     }
 33 |     let ls = exprString(x["left"])

/tmp/24-game-solve.swift:33:26: error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 31 |         return String(x["value"]["num"])
 32 |     }
 33 |     let ls = exprString(x["left"])
    |                          `- error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 34 |     let rs = exprString(x["right"])
 35 |     var opstr = ""

/tmp/24-game-solve.swift:34:26: error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 32 |     }
 33 |     let ls = exprString(x["left"])
 34 |     let rs = exprString(x["right"])
    |                          `- error: cannot convert value of type 'Any?' to expected argument type '[String : Any]'
 35 |     var opstr = ""
 36 |     if x["op"] == OP_ADD {

/tmp/24-game-solve.swift:36:9: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 34 |     let rs = exprString(x["right"])
 35 |     var opstr = ""
 36 |     if x["op"] == OP_ADD {
    |         `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 37 |         opstr = " + "
 38 |     }

/tmp/24-game-solve.swift:39:18: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 37 |         opstr = " + "
 38 |     }
 39 |     else     if x["op"] == OP_SUB {
    |                  `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 40 |         opstr = " - "
 41 |     }

/tmp/24-game-solve.swift:42:18: error: cannot convert value of type 'Any?' to expected argument type 'Int'
 40 |         opstr = " - "
 41 |     }
 42 |     else     if x["op"] == OP_MUL {
    |                  `- error: cannot convert value of type 'Any?' to expected argument type 'Int'
 43 |         opstr = " * "
 44 |     }

/tmp/24-game-solve.swift:56:44: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'
 54 |     if xs.count == 1 {
 55 |         let f = exprEval(xs[0])
 56 |         if f["denom"] != 0 && f["num"] == f["denom"] * goal {
    |                                            |- error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'
    |                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 57 |             print(exprString(xs[0]))
 58 |             return true

/tmp/24-game-solve.swift:77:28: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 75 |             let b = xs[j]
 76 |             for op in [OP_ADD, OP_SUB, OP_MUL, OP_DIV] {
 77 |                 var node = ["op": op, "left": a, "right": b]
    |                            `- error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 78 |                 if solve(rest + [node]) {
 79 |                     return true

/tmp/24-game-solve.swift:82:24: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 80 |                 }
 81 |             }
 82 |             var node = ["op": OP_SUB, "left": b, "right": a]
    |                        `- error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional
 83 |             if solve(rest + [node]) {
 84 |                 return true
