run error: exit status 1
/tmp/TestMochiToSwiftangle-difference-between-two-bearings-2560955275/001/main.swift:4:44: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead
 2 | func angleDiff(_ b1: Double, _ b2: Double) -> Double {
 3 |     let diff = b2 - b1
 4 |     return ((diff % 360.0 + 360.0 + 180.0) % 360.0) - 180.0
   |                                            `- error: '%' is unavailable: For floating point numbers use truncatingRemainder instead
 5 | }
 6 | var testCases = [[20.0, 45.0], [0 - 45.0, 45.0], [0 - 85.0, 90.0], [0 - 95.0, 90.0], [0 - 45.0, 125.0], [0 - 45.0, 145.0], [29.4803, 0 - 88.6381], [0 - 78.3251, 0 - 159.036], [0 - 70099.74233810938, 29840.67437876723], [0 - 165313.6666297357, 33693.9894517456], [1174.8380510598456, 0 - 154146.66490124757], [60175.77306795546, 42213.07192354373]]

Swift.%:2:13: note: '%' has been explicitly marked unavailable here
1 | @available(*, unavailable, message: "For floating point numbers use truncatingRemainder instead")
2 | public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint
  |             `- note: '%' has been explicitly marked unavailable here

/tmp/TestMochiToSwiftangle-difference-between-two-bearings-2560955275/001/main.swift:4:19: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead
 2 | func angleDiff(_ b1: Double, _ b2: Double) -> Double {
 3 |     let diff = b2 - b1
 4 |     return ((diff % 360.0 + 360.0 + 180.0) % 360.0) - 180.0
   |                   `- error: '%' is unavailable: For floating point numbers use truncatingRemainder instead
 5 | }
 6 | var testCases = [[20.0, 45.0], [0 - 45.0, 45.0], [0 - 85.0, 90.0], [0 - 95.0, 90.0], [0 - 45.0, 125.0], [0 - 45.0, 145.0], [29.4803, 0 - 88.6381], [0 - 78.3251, 0 - 159.036], [0 - 70099.74233810938, 29840.67437876723], [0 - 165313.6666297357, 33693.9894517456], [1174.8380510598456, 0 - 154146.66490124757], [60175.77306795546, 42213.07192354373]]

Swift.%:2:13: note: '%' has been explicitly marked unavailable here
1 | @available(*, unavailable, message: "For floating point numbers use truncatingRemainder instead")
2 | public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint
  |             `- note: '%' has been explicitly marked unavailable here
