run error: exit status 1
/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:2:13: error: invalid escape sequence in literal
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:41Z
  2 | let stx = "\x02"
    |             `- error: invalid escape sequence in literal
  3 | let etx = "\x03"
  4 | func contains(_ s: String, _ ch: String) -> Bool {

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:3:13: error: invalid escape sequence in literal
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:41Z
  2 | let stx = "\x02"
  3 | let etx = "\x03"
    |             `- error: invalid escape sequence in literal
  4 | func contains(_ s: String, _ ch: String) -> Bool {
  5 |     var i = 0

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:32:38: error: expected dictionary value type
 30 |     return arr
 31 | }
 32 | func bwt(_ s: String) -> [String: any] {
    |                                      `- error: expected dictionary value type
 33 |     if contains(s, stx) || contains(s, etx) {
 34 |         return ["err": true, "res": ""]

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:100:148: error: invalid escape sequence in literal
 98 | }
 99 | func main() {
100 |     var examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]
    |                                                                                                                                                    `- error: invalid escape sequence in literal
101 |     for t in examples {
102 |         print(makePrintable(t))

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:100:155: error: invalid escape sequence in literal
 98 | }
 99 | func main() {
100 |     var examples = ["banana", "appellee", "dogwood", "TO BE OR NOT TO BE OR WANT TO BE OR NOT?", "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES", "\x02ABC\x03"]
    |                                                                                                                                                           `- error: invalid escape sequence in literal
101 |     for t in examples {
102 |         print(makePrintable(t))

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:16:9: warning: variable 'n' was never mutated; consider changing to 'let' constant
 14 | func sortStrings(_ xs: [String]) -> [String] {
 15 |     var arr = xs
 16 |     var n = arr.count
    |         `- warning: variable 'n' was never mutated; consider changing to 'let' constant
 17 |     var i = 0
 18 |     while i < n {

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:34:16: error: unexpected non-void return value in void function
 32 | func bwt(_ s: String) -> [String: any] {
 33 |     if contains(s, stx) || contains(s, etx) {
 34 |         return ["err": true, "res": ""]
    |                |- error: unexpected non-void return value in void function
    |                `- note: did you mean to add a return type?
 35 |     }
 36 |     s = stx + s + etx

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:36:5: error: cannot assign to value: 's' is a 'let' constant
 34 |         return ["err": true, "res": ""]
 35 |     }
 36 |     s = stx + s + etx
    |     `- error: cannot assign to value: 's' is a 'let' constant
 37 |     let le = s.count
 38 |     var table: [String] = [Any]()

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:38:27: error: cannot assign value of type '[Any]' to type '[String]'
 36 |     s = stx + s + etx
 37 |     let le = s.count
 38 |     var table: [String] = [Any]()
    |                           |- error: cannot assign value of type '[Any]' to type '[String]'
    |                           `- note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal
 39 |     var i = 0
 40 |     while i < le {

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:52:12: error: unexpected non-void return value in void function
 50 |         i = i + 1
 51 |     }
 52 |     return ["err": false, "res": last]
    |            |- error: unexpected non-void return value in void function
    |            `- note: did you mean to add a return type?
 53 | }
 54 | func ibwt(_ r: String) -> String {

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:56:27: error: cannot assign value of type '[Any]' to type '[String]'
 54 | func ibwt(_ r: String) -> String {
 55 |     let le = r.count
 56 |     var table: [String] = [Any]()
    |                           |- error: cannot assign value of type '[Any]' to type '[String]'
    |                           `- note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal
 57 |     var i = 0
 58 |     while i < le {

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:103:13: warning: constant 'res' inferred to have type '()', which may be unexpected
101 |     for t in examples {
102 |         print(makePrintable(t))
103 |         let res = bwt(t)
    |             |- warning: constant 'res' inferred to have type '()', which may be unexpected
    |             `- note: add an explicit type annotation to silence this warning
104 |         if res["err"] {
105 |             print(" --> ERROR: String can't contain STX or ETX")

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:104:15: error: value of type '()' has no subscripts
102 |         print(makePrintable(t))
103 |         let res = bwt(t)
104 |         if res["err"] {
    |               `- error: value of type '()' has no subscripts
105 |             print(" --> ERROR: String can't contain STX or ETX")
106 |             print(" -->")

/tmp/TestMochiToSwiftburrows-wheeler-transform450921327/001/main.swift:109:33: error: value of type '()' has no subscripts
107 |         }
108 |         else {
109 |             let enc = String(res["res"])
    |                                 `- error: value of type '()' has no subscripts
110 |             print(" --> " + makePrintable(enc))
111 |             let r = ibwt(enc)
