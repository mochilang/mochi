run error: exit status 1
/tmp/TestMochiToSwiftbinary-strings2481060305/001/main.swift:20:7: error: no exact matches in call to initializer 
18 | }
19 | var b: [Int] = [98, 105, 110, 97, 114, 121]
20 | print(String(b))
   |       `- error: no exact matches in call to initializer 
21 | var c: [Int] = b
22 | print(String(c))

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestMochiToSwiftbinary-strings2481060305/001/main.swift:22:7: error: no exact matches in call to initializer 
20 | print(String(b))
21 | var c: [Int] = b
22 | print(String(c))
   |       `- error: no exact matches in call to initializer 
23 | print(String(b == c))
24 | var d: [Int] = [Any]()

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestMochiToSwiftbinary-strings2481060305/001/main.swift:24:16: error: cannot assign value of type '[Any]' to type '[Int]'
22 | print(String(c))
23 | print(String(b == c))
24 | var d: [Int] = [Any]()
   |                |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
25 | var i = 0
26 | while i < b.count {

/tmp/TestMochiToSwiftbinary-strings2481060305/001/main.swift:39:16: error: cannot assign value of type '[Any]' to type '[Int]'
37 | var sub = Array(b[1..<3])
38 | print(fromBytes(sub))
39 | var f: [Int] = [Any]()
   |                |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
40 | i = 0
41 | while i < d.count {

/tmp/TestMochiToSwiftbinary-strings2481060305/001/main.swift:52:18: error: cannot assign value of type '[Any]' to type '[Int]'
50 | }
51 | print(fromBytes(d) + " -> " + fromBytes(f))
52 | var rem: [Int] = [Any]()
   |                  |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                  `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
53 | rem = rem + [b[0]]
54 | i = 3
