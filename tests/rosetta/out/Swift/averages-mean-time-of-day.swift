// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:10Z
let PI = 3.141592653589793
func sinApprox(_ x: Double) -> Double {
    var term = x
    var sum = x
    var n = 1
    while n <= 8 {
        let denom = Double(((2 * n) * (2 * n + 1)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}
func cosApprox(_ x: Double) -> Double {
    var term = 1.0
    var sum = 1.0
    var n = 1
    while n <= 8 {
        let denom = Double(((2 * n - 1) * (2 * n)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}
func atanApprox(_ x: Double) -> Double {
    if x > 1.0 {
        return PI / 2.0 - x / (x * x + 0.28)
    }
    if x < (-1.0) {
        return -PI / 2.0 - x / (x * x + 0.28)
    }
    return x / (1.0 + 0.28 * x * x)
}
func atan2Approx(_ y: Double, _ x: Double) -> Double {
    if x > 0.0 {
        return atanApprox(y / x)
    }
    if x < 0.0 {
        if y >= 0.0 {
            return atanApprox(y / x) + PI
        }
        return atanApprox(y / x) - PI
    }
    if y > 0.0 {
        return PI / 2.0
    }
    if y < 0.0 {
        return -PI / 2.0
    }
    return 0.0
}
func digit(_ ch: String) -> Int {
    let digits = "0123456789"
    var i = 0
    while i < digits.count {
        if String(digits[digits.index(digits.startIndex, offsetBy: i)..<digits.index(digits.startIndex, offsetBy: i + 1)]) == ch {
            return i
        }
        i = i + 1
    }
    return 0
}
func parseTwo(_ s: String, _ idx: Int) -> Int {
    return digit(String(s[s.index(s.startIndex, offsetBy: idx)..<s.index(s.startIndex, offsetBy: idx + 1)])) * 10 + digit(String(s[s.index(s.startIndex, offsetBy: idx + 1)..<s.index(s.startIndex, offsetBy: idx + 2)]))
}
func parseSec(_ s: String) -> Double {
    let h = parseTwo(s, 0)
    let m = parseTwo(s, 3)
    let sec = parseTwo(s, 6)
    return Double(((h * 60 + m) * 60 + sec))
}
func pad(_ n: Int) -> String {
    if n < 10 {
        return "0" + String(n)
    }
    return String(n)
}
func meanTime(_ times: [String]) -> String {
    var ssum = 0.0
    var csum = 0.0
    var i = 0
    while i < times.count {
        let sec = parseSec(times[i])
        let ang = sec * 2.0 * PI / 86400.0
        ssum = ssum + sinApprox(ang)
        csum = csum + cosApprox(ang)
        i = i + 1
    }
    var theta = atan2Approx(ssum, csum)
    var frac = theta / (2.0 * PI)
    while frac < 0.0 {
        frac = frac + 1.0
    }
    let total = frac * 86400.0
    let si = Int(total)
    let h = Int((si / 3600))
    let m = Int(((si % 3600) / 60))
    let s = Int((si % 60))
    return pad(h) + ":" + pad(m) + ":" + pad(s)
}
func main() {
    var inputs = ["23:00:17", "23:40:20", "00:12:45", "00:17:19"]
    print(meanTime(inputs))
}
main()
