// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:20Z
func indexOf(_ s: String, _ ch: String) -> Int {
    var i = 0
    while i < s.count {
        if s[i] == ch {
            return i
        }
        i = i + 1
    }
    return -1
}
func parseIntStr(_ str: String) -> Int {
    var i = 0
    var neg = false
    if str.count > 0 && str[0] == "-" {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while i < str.count {
        n = n * 10 + digits[str[i]]!
        i = i + 1
    }
    if neg {
        n = -n
    }
    return n
}
func ord(_ ch: String) -> Int {
    let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower = "abcdefghijklmnopqrstuvwxyz"
    var idx = indexOf(upper, ch)
    if idx >= 0 {
        return 65 + idx
    }
    idx = indexOf(lower, ch)
    if idx >= 0 {
        return 97 + idx
    }
    if ch >= "0" && ch <= "9" {
        return 48 + parseIntStr(ch)
    }
    if ch == "+" {
        return 43
    }
    if ch == "/" {
        return 47
    }
    if ch == " " {
        return 32
    }
    if ch == "=" {
        return 61
    }
    return 0
}
func chr(_ n: Int) -> String {
    let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91 {
        return String(upper[upper.index(upper.startIndex, offsetBy: n - 65)..<upper.index(upper.startIndex, offsetBy: n - 64)])
    }
    if n >= 97 && n < 123 {
        return String(lower[lower.index(lower.startIndex, offsetBy: n - 97)..<lower.index(lower.startIndex, offsetBy: n - 96)])
    }
    if n >= 48 && n < 58 {
        let digits = "0123456789"
        return String(digits[digits.index(digits.startIndex, offsetBy: n - 48)..<digits.index(digits.startIndex, offsetBy: n - 47)])
    }
    if n == 43 {
        return "+"
    }
    if n == 47 {
        return "/"
    }
    if n == 32 {
        return " "
    }
    if n == 61 {
        return "="
    }
    return "?"
}
func toBinary(_ n: Int, _ bits: Int) -> String {
    var b = ""
    var val = n
    var i = 0
    while i < bits {
        b = String(val % 2) + b
        val = Int((val / 2))
        i = i + 1
    }
    return b
}
func binToInt(_ bits: String) -> Int {
    var n = 0
    var i = 0
    while i < bits.count {
        n = n * 2 + parseIntStr(Array(bits[i..<i + 1]))
        i = i + 1
    }
    return n
}
func base64Encode(_ text: String) -> String {
    let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    var bin = ""
    for ch in text {
        bin = bin + toBinary(ord(ch), 8)
    }
    while bin.count % 6 != 0 {
        bin = bin + "0"
    }
    var out = ""
    var i = 0
    while i < bin.count {
        let chunk = Array(bin[i..<i + 6])
        let val = binToInt(chunk)
        out = out + String(alphabet[alphabet.index(alphabet.startIndex, offsetBy: val)..<alphabet.index(alphabet.startIndex, offsetBy: val + 1)])
        i = i + 6
    }
    let pad = (3 - (text.count % 3)) % 3
    if pad == 1 {
        out = Array(out[0..<out.count - 1]) + "="
    }
    if pad == 2 {
        out = Array(out[0..<out.count - 2]) + "=="
    }
    return out
}
func base64Decode(_ enc: String) -> String {
    let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    var bin = ""
    var i = 0
    while i < enc.count {
        let ch = enc[i]
        if ch == "=" {
            break
        }
        let idx = indexOf(alphabet, ch)
        bin = bin + toBinary(idx, 6)
        i = i + 1
    }
    var out = ""
    i = 0
    while i + 8 <= bin.count {
        let chunk = Array(bin[i..<i + 8])
        let val = binToInt(chunk)
        out = out + chr(val)
        i = i + 8
    }
    return out
}
let msg = "Rosetta Code Base64 decode data task"
print("Original : " + msg)
let enc = base64Encode(msg)
print("\nEncoded  : " + enc)
let dec = base64Decode(enc)
print("\nDecoded  : " + dec)
