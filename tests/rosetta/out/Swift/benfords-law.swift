// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:21Z
func floorf(_ x: Double) -> Double {
    return Double((Int(x)))
}
func indexOf(_ s: String, _ ch: String) -> Int {
    var i = 0
    while i < s.count {
        if String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) == ch {
            return i
        }
        i = i + 1
    }
    return -1
}
func fmtF3(_ x: Double) -> String {
    var y = floorf(x * 1000.0 + 0.5) / 1000.0
    var s = String(y)
    var dot = indexOf(s, ".")
    if dot == 0 - 1 {
        s = s + ".000"
    }
    else {
        var decs = s.count - dot - 1
        if decs > 3 {
            s = String(s[s.index(s.startIndex, offsetBy: 0)..<s.index(s.startIndex, offsetBy: dot + 4)])
        }
        else {
            while decs < 3 {
                s = s + "0"
                decs = decs + 1
            }
        }
    }
    return s
}
func padFloat3(_ x: Double, _ width: Int) -> String {
    var s = fmtF3(x)
    while s.count < width {
        s = " " + s
    }
    return s
}
func fib1000() -> [Double] {
    var a = 0.0
    var b = 1.0
    var res: [Double] = [Any]()
    var i = 0
    while i < 1000 {
        res = res + [b]
        var t = b
        b = b + a
        a = t
        i = i + 1
    }
    return res
}
func leadingDigit(_ x: Double) -> Int {
    if x < 0.0 {
        x = -x
    }
    while x >= 10.0 {
        x = x / 10.0
    }
    while x > 0.0 && x < 1.0 {
        x = x * 10.0
    }
    return Int(x)
}
func show(_ nums: [Double], _ title: String) {
    var counts = [0, 0, 0, 0, 0, 0, 0, 0, 0]
    for n in nums {
        let d = leadingDigit(n)
        if d >= 1 && d <= 9 {
            counts[d - 1] = counts[d - 1] + 1
        }
    }
    var preds = [0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046]
    let total = nums.count
    print(title)
    print("Digit  Observed  Predicted")
    var i = 0
    while i < 9 {
        let obs = (Double(counts[i])) / (Double(total))
        var line = "  " + String(i + 1) + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8)
        print(line)
        i = i + 1
    }
}
func main() {
    show(fib1000(), "First 1000 Fibonacci numbers")
}
main()
