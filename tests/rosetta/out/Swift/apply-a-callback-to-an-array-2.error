swiftc: exit status 1
/tmp/apply-a-callback-to-an-array-2.swift:16:31: error: consecutive statements on a line must be separated by ';'
14 | func main() {
15 |     var s: [Int] = [1, 2, 3, 4, 5]
16 |     each(s, &{ (i: Int) -> any in print(String(i * i)) })
   |                               `- error: consecutive statements on a line must be separated by ';'
17 |     print(String(Map(s, &{ (i: Int) -> Int in i * i })))
18 | }

/tmp/apply-a-callback-to-an-array-2.swift:16:32: error: expected expression
14 | func main() {
15 |     var s: [Int] = [1, 2, 3, 4, 5]
16 |     each(s, &{ (i: Int) -> any in print(String(i * i)) })
   |                                `- error: expected expression
17 |     print(String(Map(s, &{ (i: Int) -> Int in i * i })))
18 | }

/tmp/apply-a-callback-to-an-array-2.swift:16:28: error: expected type after '->'
14 | func main() {
15 |     var s: [Int] = [1, 2, 3, 4, 5]
16 |     each(s, &{ (i: Int) -> any in print(String(i * i)) })
   |                            `- error: expected type after '->'
17 |     print(String(Map(s, &{ (i: Int) -> Int in i * i })))
18 | }

/tmp/apply-a-callback-to-an-array-2.swift:17:11: error: no exact matches in call to initializer 
15 |     var s: [Int] = [1, 2, 3, 4, 5]
16 |     each(s, &{ (i: Int) -> any in print(String(i * i)) })
17 |     print(String(Map(s, &{ (i: Int) -> Int in i * i })))
   |           `- error: no exact matches in call to initializer 
18 | }
19 | main()

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/apply-a-callback-to-an-array-2.swift:17:25: error: cannot pass immutable value of type '(Int) -> Int' as inout argument
15 |     var s: [Int] = [1, 2, 3, 4, 5]
16 |     each(s, &{ (i: Int) -> any in print(String(i * i)) })
17 |     print(String(Map(s, &{ (i: Int) -> Int in i * i })))
   |                         `- error: cannot pass immutable value of type '(Int) -> Int' as inout argument
18 | }
19 | main()
