// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:35Z
let b2Seg = 20
struct Pixel: Equatable {
    var r: Int
    var g: Int
    var b: Int
}
func pixelFromRgb(_ rgb: Int) -> Pixel {
    let r = Int(((rgb / 65536) % 256))
    let g = Int(((rgb / 256) % 256))
    let b = Int((rgb % 256))
    return Pixel(r: r, g: g, b: b)
}
func newBitmap(_ cols: Int, _ rows: Int) -> [String: any] {
    var d: [[Pixel]] = [Any]()
    var y = 0
    while y < rows {
        var row: [Pixel] = [Any]()
        var x = 0
        while x < cols {
            row = row + [Pixel(r: 0, g: 0, b: 0)]
            x = x + 1
        }
        d = d + [row]
        y = y + 1
    }
    return ["cols": cols, "rows": rows, "data": d]
}
func setPx(_ b: [String: any], _ x: Int, _ y: Int, _ p: inout Pixel) {
    let cols = Int(b["cols"])
    let rows = Int(b["rows"])
    if x >= 0 && x < cols && y >= 0 && y < rows {
        b["data"][y][x] = p
    }
}
func fill(_ b: [String: any], _ p: inout Pixel) {
    let cols = Int(b["cols"])
    let rows = Int(b["rows"])
    var y = 0
    while y < rows {
        var x = 0
        while x < cols {
            b["data"][y][x] = p
            x = x + 1
        }
        y = y + 1
    }
}
func fillRgb(_ b: [String: any], _ rgb: Int) {
    fill(b, &pixelFromRgb(rgb))
}
func line(_ b: [String: any], _ x0: Int, _ y0: Int, _ x1: Int, _ y1: Int, _ p: inout Pixel) {
    var dx = x1 - x0
    if dx < 0 {
        dx = -dx
    }
    var dy = y1 - y0
    if dy < 0 {
        dy = -dy
    }
    var sx = -1
    if x0 < x1 {
        sx = 1
    }
    var sy = -1
    if y0 < y1 {
        sy = 1
    }
    var err = dx - dy
    while true {
        setPx(b, x0, y0, &p)
        if x0 == x1 && y0 == y1 {
            break
        }
        let e2 = 2 * err
        if e2 > (0 - dy) {
            err = err - dy
            x0 = x0 + sx
        }
        if e2 < dx {
            err = err + dx
            y0 = y0 + sy
        }
    }
}
func bezier2(_ b: [String: any], _ x1: Int, _ y1: Int, _ x2: Int, _ y2: Int, _ x3: Int, _ y3: Int, _ p: inout Pixel) {
    var px: [Int] = [Any]()
    var py: [Int] = [Any]()
    var i = 0
    while i <= b2Seg {
        px = px + [0]
        py = py + [0]
        i = i + 1
    }
    let fx1 = Double(x1)
    let fy1 = Double(y1)
    let fx2 = Double(x2)
    let fy2 = Double(y2)
    let fx3 = Double(x3)
    let fy3 = Double(y3)
    i = 0
    while i <= b2Seg {
        let c = (Double(i)) / (Double(b2Seg))
        var a = 1.0 - c
        var a2 = a * a
        var b2 = 2.0 * c * a
        var c2 = c * c
        px[i] = Int((a2 * fx1 + b2 * fx2 + c2 * fx3))
        py[i] = Int((a2 * fy1 + b2 * fy2 + c2 * fy3))
        i = i + 1
    }
    var x0 = px[0]
    var y0 = py[0]
    i = 1
    while i <= b2Seg {
        let x = px[i]
        let y = py[i]
        line(b, x0, y0, x, y, &p)
        x0 = x
        y0 = y
        i = i + 1
    }
}
var b = newBitmap(400, 300)
fillRgb(b, 14614575)
bezier2(b, 20, 150, 500, -100, 300, 280, &pixelFromRgb(4165615))
