// Generated by Mochi compiler v0.10.26 on 2025-07-16T13:15:30Z
func bigTrim(_ a: [Int]) -> [Int] {
    var n = a.count
    while n > 1 && a[n - 1] == 0 {
        a = Array(a[0..<n - 1])
        n = n - 1
    }
    return a
}
func bigFromInt(_ x: Int) -> [Int] {
    if x == 0 {
        return [0]
    }
    var digits: [Int] = []
    var n = x
    while n > 0 {
        digits = digits + [n % 10]
        n = n / 10
    }
    return digits
}
func bigAdd(_ a: [Int], _ b: [Int]) -> [Int] {
    var res: [Int] = []
    var carry = 0
    var i = 0
    while i < a.count || i < b.count || carry > 0 {
        var av = 0
        if i < a.count {
            av = a[i]
        }
        var bv = 0
        if i < b.count {
            bv = b[i]
        }
        var s = av + bv + carry
        res = res + [s % 10]
        carry = s / 10
        i = i + 1
    }
    return bigTrim(res)
}
func bigSub(_ a: [Int], _ b: [Int]) -> [Int] {
    var res: [Int] = []
    var borrow = 0
    var i = 0
    while i < a.count {
        var av = a[i]
        var bv = 0
        if i < b.count {
            bv = b[i]
        }
        var diff = av - bv - borrow
        if diff < 0 {
            diff = diff + 10
            borrow = 1
        }
        else {
            borrow = 0
        }
        res = res + [diff]
        i = i + 1
    }
    return bigTrim(res)
}
func bigToString(_ a: [Int]) -> String {
    var s = ""
    var i = a.count - 1
    while i >= 0 {
        s = s + String(a[i])
        i = i - 1
    }
    return s
}
func minInt(_ a: Int, _ b: Int) -> Int {
    if a < b {
        return a
    }
    else {
        return b
    }
}
func cumu(_ n: Int) -> [[Int]] {
    var cache: [[[Int]]] = [[bigFromInt(1)]]
    var y = 1
    while y <= n {
        var row: [[Int]] = [bigFromInt(0)]
        var x = 1
        while x <= y {
            let val = cache[y - x][minInt(x, y - x)]
            row = row + [bigAdd(row[row.count - 1], val)]
            x = x + 1
        }
        cache = cache + [row]
        y = y + 1
    }
    return cache[n]
}
func row(_ n: Int) -> [String] {
    let e = cumu(n)
    var out: [String] = []
    var i = 0
    while i < n {
        let diff = bigSub(e[i + 1], e[i])
        out = out + [bigToString(diff)]
        i = i + 1
    }
    return out
}
print("rows:")
var x = 1
while x < 11 {
    let r = row(x)
    var line = ""
    var i = 0
    while i < r.count {
        line = line + " " + r[i] + " "
        i = i + 1
    }
    print(line)
    x = x + 1
}
print("")
print("sums:")
for num in [23, 123, 1234] {
    let r = cumu(num)
    print(String(num) + " " + bigToString(r[r.count - 1]))
}
