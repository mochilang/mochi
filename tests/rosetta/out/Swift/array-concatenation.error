run error: exit status 1
/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:12:25: error: expected element type
10 |     return out
11 | }
12 | func concatAny(_ a: [any], _ b: [any]) -> [any] {
   |                         `- error: expected element type
13 |     var out: [any] = [Any]()
14 |     for v in a {

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:12:37: error: expected element type
10 |     return out
11 | }
12 | func concatAny(_ a: [any], _ b: [any]) -> [any] {
   |                                     `- error: expected element type
13 |     var out: [any] = [Any]()
14 |     for v in a {

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:12:47: error: expected element type
10 |     return out
11 | }
12 | func concatAny(_ a: [any], _ b: [any]) -> [any] {
   |                                               `- error: expected element type
13 |     var out: [any] = [Any]()
14 |     for v in a {

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:13:18: error: expected element type
11 | }
12 | func concatAny(_ a: [any], _ b: [any]) -> [any] {
13 |     var out: [any] = [Any]()
   |                  `- error: expected element type
14 |     for v in a {
15 |         out = out + [v]

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:25:12: error: expected element type
23 | var b = [7, 12, 60]
24 | print(String(concatInts(a, b)))
25 | var i: [any] = [1, 2, 3]
   |            `- error: expected element type
26 | var j: [any] = ["Crosby", "Stills", "Nash", "Young"]
27 | print(String(concatAny(i, j)))

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:26:12: error: expected element type
24 | print(String(concatInts(a, b)))
25 | var i: [any] = [1, 2, 3]
26 | var j: [any] = ["Crosby", "Stills", "Nash", "Young"]
   |            `- error: expected element type
27 | print(String(concatAny(i, j)))
28 | var l = [1, 2, 3]

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:24:7: error: no exact matches in call to initializer 
22 | var a = [1, 2, 3]
23 | var b = [7, 12, 60]
24 | print(String(concatInts(a, b)))
   |       `- error: no exact matches in call to initializer 
25 | var i: [any] = [1, 2, 3]
26 | var j: [any] = ["Crosby", "Stills", "Nash", "Young"]

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:30:7: error: no exact matches in call to initializer 
28 | var l = [1, 2, 3]
29 | var m = [7, 12, 60]
30 | print(String(concatInts(l, m)))
   |       `- error: no exact matches in call to initializer 
31 | 

Swift.String.init:2:8: note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
1 | struct String {
2 | public init<S>(_ characters: S) where S : Sequence, S.Element == Character}
  |        `- note: candidate requires that the types 'Int' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')
3 | 

Swift.RangeReplaceableCollection.init:2:19: note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
1 | protocol RangeReplaceableCollection {
2 | @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element}
  |                   `- note: candidate requires that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | public init<Subject>(describing instance: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:19: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
1 | struct String {
2 | @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible}
  |                   `- note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')
3 | 

Swift.String.init:2:8: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
1 | struct String {
2 | public init<Subject>(reflecting subject: Subject)}
  |        `- note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')
3 | 

/tmp/TestMochiToSwiftarray-concatenation1362977232/001/main.swift:3:22: error: cannot assign value of type '[Any]' to type '[Int]'
 1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:04Z
 2 | func concatInts(_ a: [Int], _ b: [Int]) -> [Int] {
 3 |     var out: [Int] = [Any]()
   |                      |- error: cannot assign value of type '[Any]' to type '[Int]'
   |                      `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 4 |     for v in a {
 5 |         out = out + [v]
