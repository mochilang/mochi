// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:24Z
func padLeft(_ s: String, _ w: Int) -> String {
    var res = ""
    var n = w - s.count
    while n > 0 {
        res = res + " "
        n = n - 1
    }
    return res + s
}
func indexOfFrom(_ s: String, _ ch: String, _ start: Int) -> Int {
    var i = start
    while i < s.count {
        if String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) == ch {
            return i
        }
        i = i + 1
    }
    return -1
}
func containsStr(_ s: String, _ sub: String) -> Bool {
    var i = 0
    let sl = s.count
    let subl = sub.count
    while i <= sl - subl {
        if String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + subl)]) == sub {
            return true
        }
        i = i + 1
    }
    return false
}
func distinct(_ slist: [String]) -> [String] {
    var res: [String] = [Any]()
    for s in slist {
        var found = false
        for r in res {
            if r == s {
                found = true
                break
            }
        }
        if !found {
            res = res + [s]
        }
    }
    return res
}
func permutations(_ xs: [String]) -> [[String]] {
    if xs.count <= 1 {
        return [xs]
    }
    var res: [[String]] = [Any]()
    var i = 0
    while i < xs.count {
        var rest: [String] = [Any]()
        var j = 0
        while j < xs.count {
            if j != i {
                rest = rest + [xs[j]]
            }
            j = j + 1
        }
        let subs = permutations(rest)
        for p in subs {
            var perm: [String] = [xs[i]]
            var k = 0
            while k < p.count {
                perm = perm + [p[k]]
                k = k + 1
            }
            res = res + [perm]
        }
        i = i + 1
    }
    return res
}
func headTailOverlap(_ s1: String, _ s2: String) -> Int {
    var start = 0
    while true {
        let ix = indexOfFrom(s1, Array(s2[0..<1]), start)
        if ix == 0 - 1 {
            return 0
        }
        start = ix
        if String(s2[s2.index(s2.startIndex, offsetBy: 0)..<s2.index(s2.startIndex, offsetBy: s1.count - start)]) == String(s1[s1.index(s1.startIndex, offsetBy: start)..<s1.index(s1.startIndex, offsetBy: s1.count)]) {
            return s1.count - start
        }
        start = start + 1
    }
}
func deduplicate(_ slist: [String]) -> [String] {
    let arr = distinct(slist)
    var filtered: [String] = [Any]()
    var i = 0
    while i < arr.count {
        let s1 = arr[i]
        var within = false
        var j = 0
        while j < arr.count {
            if j != i && containsStr(arr[j], s1) {
                within = true
                break
            }
            j = j + 1
        }
        if !within {
            filtered = filtered + [s1]
        }
        i = i + 1
    }
    return filtered
}
func joinAll(_ ss: [String]) -> String {
    var out = ""
    for s in ss {
        out = out + s
    }
    return out
}
func shortestCommonSuperstring(_ slist: [String]) -> String {
    let ss = deduplicate(slist)
    var shortest = joinAll(ss)
    let perms = permutations(ss)
    var idx = 0
    while idx < perms.count {
        let perm = perms[idx]
        var sup = perm[0]
        var i = 0
        while i < ss.count - 1 {
            let ov = headTailOverlap(perm[i], perm[i + 1])
            sup = sup + String(perm[i + 1][perm[i + 1].index(perm[i + 1].startIndex, offsetBy: ov)..<perm[i + 1].index(perm[i + 1].startIndex, offsetBy: perm[i + 1].count)])
            i = i + 1
        }
        if sup.count < shortest.count {
            shortest = sup
        }
        idx = idx + 1
    }
    return shortest
}
func printCounts(_ seq: String) {
    var a = 0
    var c = 0
    var g = 0
    var t = 0
    var i = 0
    while i < seq.count {
        let ch = String(seq[seq.index(seq.startIndex, offsetBy: i)..<seq.index(seq.startIndex, offsetBy: i + 1)])
        if ch == "A" {
            a = a + 1
        }
        else {
            if ch == "C" {
                c = c + 1
            }
            else {
                if ch == "G" {
                    g = g + 1
                }
                else {
                    if ch == "T" {
                        t = t + 1
                    }
                }
            }
        }
        i = i + 1
    }
    let total = seq.count
    print("\nNucleotide counts for " + seq + ":\n")
    print(padLeft("A", 10) + padLeft(String(a), 12))
    print(padLeft("C", 10) + padLeft(String(c), 12))
    print(padLeft("G", 10) + padLeft(String(g), 12))
    print(padLeft("T", 10) + padLeft(String(t), 12))
    print(padLeft("Other", 10) + padLeft(String(total - (a + c + g + t)), 12))
    print("  ____________________")
    print(padLeft("Total length", 14) + padLeft(String(total), 8))
}
func main() {
    var tests: [[String]] = [["TA", "AAG", "TA", "GAA", "TA"], ["CATTAGGG", "ATTAG", "GGG", "TA"], ["AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"], ["ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT", "GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT", "GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC", "CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT", "TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC", "GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT", "TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC", "CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA", "TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA"]]
    for seqs in tests {
        let scs = shortestCommonSuperstring(seqs)
        printCounts(scs)
    }
}
main()
