swiftc: exit status 1
/tmp/achilles-numbers.swift:32:24: error: use [:] to get an empty dictionary literal
 30 |     return tot
 31 | }
 32 | var pps: [Int: Bool] = []
    |                        `- error: use [:] to get an empty dictionary literal
 33 | func getPerfectPowers(_ maxExp: Int) {
 34 |     let upper = pow10(maxExp)

/tmp/achilles-numbers.swift:51:33: error: use [:] to get an empty dictionary literal
 49 |     let lower = pow10(minExp)
 50 |     let upper = pow10(maxExp)
 51 |     var achilles: [Int: Bool] = []
    |                                 `- error: use [:] to get an empty dictionary literal
 52 |     var b = 1
 53 |     while b * b * b < upper {

/tmp/achilles-numbers.swift:111:21: error: cannot call value of non-function type 'Dictionary<Int, Bool>.Keys'
109 |     let achSet = getAchilles(1, 5)
110 |     var ach: [Int] = []
111 |     for k in achSet.keys() {
    |                     `- error: cannot call value of non-function type 'Dictionary<Int, Bool>.Keys'
112 |         ach = ach + [k]
113 |     }

/tmp/achilles-numbers.swift:136:28: error: missing argument label 'where:' in call
134 |     while count < 30 {
135 |         let tot = totient(ach[idx])
136 |         if achSet.contains(tot) {
    |                            `- error: missing argument label 'where:' in call
137 |             strong = strong + [ach[idx]]
138 |             count = count + 1

/tmp/achilles-numbers.swift:136:28: error: cannot convert value of type 'Int' to expected argument type '(Dictionary<Int, Bool>.Element) throws -> Bool' (aka '((key: Int, value: Bool)) throws -> Bool')
134 |     while count < 30 {
135 |         let tot = totient(ach[idx])
136 |         if achSet.contains(tot) {
    |                            `- error: cannot convert value of type 'Int' to expected argument type '(Dictionary<Int, Bool>.Element) throws -> Bool' (aka '((key: Int, value: Bool)) throws -> Bool')
137 |             strong = strong + [ach[idx]]
138 |             count = count + 1
