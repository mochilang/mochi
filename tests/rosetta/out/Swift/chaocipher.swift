// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:56:35Z
func indexOf(_ s: String, _ ch: String) -> Int {
    var i = 0
    while i < s.count {
        if Array(s[i..<i + 1]) == ch {
            return i
        }
        i = i + 1
    }
    return -1
}
func rotate(_ s: String, _ n: Int) -> String {
    return Array(s[n..<s.count]) + Array(s[0..<n])
}
func scrambleLeft(_ s: String) -> String {
    return Array(s[0..<1]) + Array(s[2..<14]) + Array(s[1..<2]) + Array(s[14..<s.count])
}
func scrambleRight(_ s: String) -> String {
    return Array(s[1..<3]) + Array(s[4..<15]) + Array(s[3..<4]) + Array(s[15..<s.count]) + Array(s[0..<1])
}
func chao(_ text: String, _ encode: Bool) -> String {
    var left = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
    var right = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
    var out = ""
    var i = 0
    while i < text.count {
        let ch = Array(text[i..<i + 1])
        var idx = 0
        if encode {
            idx = indexOf(right, ch)
            out = out + String(left[left.index(left.startIndex, offsetBy: idx)..<left.index(left.startIndex, offsetBy: idx + 1)])
        }
        else {
            idx = indexOf(left, ch)
            out = out + String(right[right.index(right.startIndex, offsetBy: idx)..<right.index(right.startIndex, offsetBy: idx + 1)])
        }
        left = rotate(left, idx)
        right = rotate(right, idx)
        left = scrambleLeft(left)
        right = scrambleRight(right)
        i = i + 1
    }
    return out
}
func main() {
    let plain = "WELLDONEISBETTERTHANWELLSAID"
    let cipher = chao(plain, true)
    print(plain)
    print(cipher)
    print(chao(cipher, false))
}
main()
