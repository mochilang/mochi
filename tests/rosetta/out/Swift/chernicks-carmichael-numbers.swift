// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:57:13Z
func isPrime(_ n: Int) -> Bool {
    if n < 2 {
        return false
    }
    if n % 2 == 0 {
        return n == 2
    }
    if n % 3 == 0 {
        return n == 3
    }
    var d = 5
    while d * d <= n {
        if n % d == 0 {
            return false
        }
        d = d + 2
        if n % d == 0 {
            return false
        }
        d = d + 4
    }
    return true
}
func bigTrim(_ a: [Int]) -> [Int] {
    var n = a.count
    while n > 1 && a[n - 1] == 0 {
        a = Array(a[0..<n - 1])
        n = n - 1
    }
    return a
}
func bigFromInt(_ x: Int) -> [Int] {
    if x == 0 {
        return [0]
    }
    var digits: [Int] = [Any]()
    var n = x
    while n > 0 {
        digits = digits + [n % 10]
        n = n / 10
    }
    return digits
}
func bigMulSmall(_ a: [Int], _ m: Int) -> [Int] {
    if m == 0 {
        return [0]
    }
    var res: [Int] = [Any]()
    var carry = 0
    var i = 0
    while i < a.count {
        var prod = a[i] * m + carry
        res = res + [prod % 10]
        carry = prod / 10
        i = i + 1
    }
    while carry > 0 {
        res = res + [carry % 10]
        carry = carry / 10
    }
    return bigTrim(res)
}
func bigToString(_ a: [Int]) -> String {
    var s = ""
    var i = a.count - 1
    while i >= 0 {
        s = s + String(a[i])
        i = i - 1
    }
    return s
}
func pow2(_ k: Int) -> Int {
    var r = 1
    var i = 0
    while i < k {
        r = r * 2
        i = i + 1
    }
    return r
}
func ccFactors(_ n: Int, _ m: Int) -> [Int] {
    var p = 6 * m + 1
    if !isPrime(p) {
        return [Any]()
    }
    var prod = bigFromInt(p)
    p = 12 * m + 1
    if !isPrime(p) {
        return [Any]()
    }
    prod = bigMulSmall(prod, p)
    var i = 1
    while i <= n - 2 {
        p = (pow2(i) * 9 * m) + 1
        if !isPrime(p) {
            return [Any]()
        }
        prod = bigMulSmall(prod, p)
        i = i + 1
    }
    return prod
}
func ccNumbers(_ start: Int, _ end: Int) {
    var n = start
    while n <= end {
        var m = 1
        if n > 4 {
            m = pow2(n - 4)
        }
        while true {
            let num = ccFactors(n, m)
            if num.count > 0 {
                print("a(" + String(n) + ") = " + bigToString(num))
                break
            }
            if n <= 4 {
                m = m + 1
            }
            else {
                m = m + pow2(n - 4)
            }
        }
        n = n + 1
    }
}
ccNumbers(3, 9)
