// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:34Z
let PI: Double = 3.141592653589793
let TWO_PI: Double = 6.283185307179586
func sinApprox(_ x: Double) -> Double {
    var term = x
    var sum = x
    var n = 1
    while n <= 8 {
        let denom = Double(((2 * n) * (2 * n + 1)))
        term = -term * x * x / denom
        sum = sum + term
        n = n + 1
    }
    return sum
}
func floor(_ x: Double) -> Double {
    var i = Int(x)
    if (Double(i)) > x {
        i = i - 1
    }
    return Double(i)
}
func absFloat(_ x: Double) -> Double {
    if x < 0.0 {
        return -x
    }
    return x
}
func absInt(_ n: Int) -> Int {
    if n < 0 {
        return -n
    }
    return n
}
func parseIntStr(_ str: String) -> Int {
    var i = 0
    var neg = false
    if str.count > 0 && Array(str[0..<1]) == "-" {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while i < str.count {
        n = n * 10 + digits[Array(str[i..<i + 1])]!
        i = i + 1
    }
    if neg {
        n = -n
    }
    return n
}
func parseDate(_ s: String) -> [Int] {
    let y = parseIntStr(Array(s[0..<4]))
    let m = parseIntStr(Array(s[5..<7]))
    let d = parseIntStr(Array(s[8..<10]))
    return [y, m, d]
}
func leap(_ y: Int) -> Bool {
    if y % 400 == 0 {
        return true
    }
    if y % 100 == 0 {
        return false
    }
    return y % 4 == 0
}
func daysInMonth(_ y: Int, _ m: Int) -> Int {
    let feb = leap(y) ? 29 : 28
    var lengths = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return lengths[m - 1]
}
func addDays(_ y: Int, _ m: Int, _ d: Int, _ n: Int) -> [Int] {
    var yy = y
    var mm = m
    var dd = d
    if n >= 0 {
        var i = 0
        while i < n {
            dd = dd + 1
            if dd > daysInMonth(yy, mm) {
                dd = 1
                mm = mm + 1
                if mm > 12 {
                    mm = 1
                    yy = yy + 1
                }
            }
            i = i + 1
        }
    }
    else {
        var i = 0
        while i > n {
            dd = dd - 1
            if dd < 1 {
                mm = mm - 1
                if mm < 1 {
                    mm = 12
                    yy = yy - 1
                }
                dd = daysInMonth(yy, mm)
            }
            i = i - 1
        }
    }
    return [yy, mm, dd]
}
func pad2(_ n: Int) -> String {
    if n < 10 {
        return "0" + String(n)
    }
    return String(n)
}
func dateString(_ y: Int, _ m: Int, _ d: Int) -> String {
    return String(y) + "-" + pad2(m) + "-" + pad2(d)
}
func day(_ y: Int, _ m: Int, _ d: Int) -> Int {
    let part1 = 367 * y
    let part2 = Int(((7 * (Int((y + ((m + 9) / 12))))) / 4))
    let part3 = Int(((275 * m) / 9))
    return part1 - part2 + part3 + d - 730530
}
func biorhythms(_ birth: String, _ target: String) {
    let bparts = parseDate(birth)
    let by = bparts[0]
    let bm = bparts[1]
    let bd = bparts[2]
    let tparts = parseDate(target)
    let ty = tparts[0]
    let tm = tparts[1]
    let td = tparts[2]
    let diff = absInt(day(ty, tm, td) - day(by, bm, bd))
    print("Born " + birth + ", Target " + target)
    print("Day " + String(diff))
    var cycles = ["Physical day ", "Emotional day", "Mental day   "]
    var lengths = [23, 28, 33]
    var quadrants = [["up and rising", "peak"], ["up but falling", "transition"], ["down and falling", "valley"], ["down but rising", "transition"]]
    var i = 0
    while i < 3 {
        let length = lengths[i]
        let cycle = cycles[i]
        let position = diff % length
        let quadrant = (position * 4) / length
        var percent = sinApprox(2.0 * PI * (Double(position)) / (Double(length)))
        percent = floor(percent * 1000.0) / 10.0
        var description = ""
        if percent > 95.0 {
            description = " peak"
        }
        else         if percent < (-95.0) {
            description = " valley"
        }
        else         if absFloat(percent) < 5.0 {
            description = " critical transition"
        }
        else {
            let daysToAdd = (quadrant + 1) * length / 4 - position
            let res = addDays(ty, tm, td, daysToAdd)
            let ny = res[0]
            let nm = res[1]
            let nd = res[2]
            let transition = dateString(ny, nm, nd)
            let trend = quadrants[quadrant][0]
            let next = quadrants[quadrant][1]
            var pct = String(percent)
            if !contains(pct, ".") {
                pct = pct + ".0"
            }
            description = " " + pct + "% (" + trend + ", next " + next + " " + transition + ")"
        }
        var posStr = String(position)
        if position < 10 {
            posStr = " " + posStr
        }
        print(cycle + posStr + " : " + description)
        i = i + 1
    }
    print("")
}
func main() {
    var pairs = [["1943-03-09", "1972-07-11"], ["1809-01-12", "1863-11-19"], ["1809-02-12", "1863-11-19"]]
    var idx = 0
    while idx < pairs.count {
        let p = pairs[idx]
        biorhythms(p[0], p[1])
        idx = idx + 1
    }
}
main()
