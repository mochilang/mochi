// Generated by Mochi compiler v0.10.26 on 2025-07-16T13:15:32Z
func fields(_ s: String) -> [String] {
    var words: [String] = []
    var cur = ""
    var i = 0
    while i < s.count {
        let ch = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])
        if ch == " " || ch == "\n" || ch == "\t" {
            if cur.count > 0 {
                words = words + [cur]
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if cur.count > 0 {
        words = words + [cur]
    }
    return words
}
func padRight(_ s: String, _ width: Int) -> String {
    var out = s
    var i = s.count
    while i < width {
        out = out + " "
        i = i + 1
    }
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var res = ""
    var i = 0
    while i < xs.count {
        if i > 0 {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}
func validate(_ commands: [String], _ words: [String], _ mins: [Int]) -> [String] {
    var results: [String] = []
    if words.count == 0 {
        return results
    }
    var wi = 0
    while wi < words.count {
        let w = words[wi]
        var found = false
        let wlen = w.count
        var ci = 0
        while ci < commands.count {
            let cmd = commands[ci]
            if mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.count {
                let c = upper(cmd)
                let ww = upper(w)
                if String(c[c.index(c.startIndex, offsetBy: 0)..<c.index(c.startIndex, offsetBy: wlen)]) == ww {
                    results = results + [c]
                    found = true
                    break
                }
            }
            ci = ci + 1
        }
        if !found {
            results = results + ["*error*"]
        }
        wi = wi + 1
    }
    return results
}
func main() {
    let table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
    let commands = fields(table)
    var mins: [Int] = []
    var i = 0
    while i < commands.count {
        var count = 0
        var j = 0
        let cmd = commands[i]
        while j < cmd.count {
            let ch = String(cmd[cmd.index(cmd.startIndex, offsetBy: j)..<cmd.index(cmd.startIndex, offsetBy: j + 1)])
            if ch >= "A" && ch <= "Z" {
                count = count + 1
            }
            j = j + 1
        }
        mins = mins + [count]
        i = i + 1
    }
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
    let words = fields(sentence)
    let results = validate(commands, words, mins)
    var out1 = "user words:  "
    var k = 0
    while k < words.count {
        out1 = out1 + padRight(words[k], results[k].count) + " "
        k = k + 1
    }
    print(out1)
    print("full words:  " + join(results, " "))
}
main()
