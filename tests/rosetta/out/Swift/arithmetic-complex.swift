// Generated by Mochi compiler v0.10.26 on 2025-07-16T12:26:59Z
struct Complex: Equatable {
    var re: Double
    var im: Double
}
func add(_ a: inout Complex, _ b: inout Complex) -> Complex {
    return Complex(re: a.re + b.re, im: a.im + b.im)
}
func mul(_ a: inout Complex, _ b: inout Complex) -> Complex {
    return Complex(re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re)
}
func neg(_ a: inout Complex) -> Complex {
    return Complex(re: -a.re, im: -a.im)
}
func inv(_ a: inout Complex) -> Complex {
    let denom = a.re * a.re + a.im * a.im
    return Complex(re: a.re / denom, im: -a.im / denom)
}
func conj(_ a: inout Complex) -> Complex {
    return Complex(re: a.re, im: -a.im)
}
func cstr(_ a: inout Complex) -> String {
    var s = "(" + String(a.re)
    if a.im >= 0 {
        s = s + "+" + String(a.im) + "i)"
    }
    else {
        s = s + String(a.im) + "i)"
    }
    return s
}
let a = Complex(re: 1.0, im: 1.0)
let b = Complex(re: 3.14159, im: 1.25)
print("a:       " + cstr(&a))
print("b:       " + cstr(&b))
print("a + b:   " + cstr(&add(&a, &b)))
print("a * b:   " + cstr(&mul(&a, &b)))
print("-a:      " + cstr(&neg(&a)))
print("1 / a:   " + cstr(&inv(&a)))
print("aÌ…:       " + cstr(&conj(&a)))
