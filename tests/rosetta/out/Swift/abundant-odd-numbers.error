run error: exit status 1
/tmp/TestMochiToSwiftabundant-odd-numbers3237265655/001/main.swift:30:24: error: cannot assign value of type '[Any]' to type '[Int]'
 28 | func divisors(_ n: Int) -> [Int] {
 29 |     var divs: [Int] = [1]
 30 |     var divs2: [Int] = [Any]()
    |                        |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                        `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 31 |     var i = 2
 32 |     while i * i <= n {

/tmp/TestMochiToSwiftabundant-odd-numbers3237265655/001/main.swift:85:16: error: binary operator '>' cannot be applied to operands of type 'Double' and 'Int'
 83 |         let divs = divisors(n)
 84 |         let tot = _sum(divs)
 85 |         if tot > n {
    |                |- error: binary operator '>' cannot be applied to operands of type 'Double' and 'Int'
    |                `- note: overloads for '>' exist with these partially matching parameter lists: (Int, Int)
 86 |             count = count + 1
 87 |             if printOne && count < countTo {

/tmp/TestMochiToSwiftabundant-odd-numbers3237265655/001/main.swift:108:5: warning: result of call to 'abundantOdd' is unused
106 |     let n = abundantOdd(1, 0, max, false)
107 |     print("\nThe one thousandth abundant odd number is:")
108 |     abundantOdd(n, max, 1000, true)
    |     `- warning: result of call to 'abundantOdd' is unused
109 |     print("\nThe first abundant odd number above one billion is:")
110 |     abundantOdd(1000000001, 0, 1, true)

/tmp/TestMochiToSwiftabundant-odd-numbers3237265655/001/main.swift:110:5: warning: result of call to 'abundantOdd' is unused
108 |     abundantOdd(n, max, 1000, true)
109 |     print("\nThe first abundant odd number above one billion is:")
110 |     abundantOdd(1000000001, 0, 1, true)
    |     `- warning: result of call to 'abundantOdd' is unused
111 | }
112 | main()
