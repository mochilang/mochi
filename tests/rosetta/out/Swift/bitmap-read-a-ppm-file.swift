// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:36Z
struct Pixel: Equatable {
    var R: Int
    var G: Int
    var B: Int
}
struct Bitmap: Equatable {
    var w: Int
    var h: Int
    var max: Int
    var data: [[Pixel]]
}
func newBitmap(_ w: Int, _ h: Int, _ max: Int) -> Bitmap {
    var rows: [[Pixel]] = [Any]()
    var y = 0
    while y < h {
        var row: [Pixel] = [Any]()
        var x = 0
        while x < w {
            row = row + [Pixel(R: 0, G: 0, B: 0)]
            x = x + 1
        }
        rows = rows + [row]
        y = y + 1
    }
    return Bitmap(w: w, h: h, max: max, data: rows)
}
func setPx(_ b: inout Bitmap, _ x: Int, _ y: Int, _ p: inout Pixel) {
    var rows = b.data
    var row = rows[y]
    row[x] = p
    rows[y] = row
    b.data = rows
}
func getPx(_ b: inout Bitmap, _ x: Int, _ y: Int) -> Pixel {
    return b.data[y][x]
}
func splitLines(_ s: String) -> [String] {
    var out: [String] = [Any]()
    var cur = ""
    var i = 0
    while i < s.count {
        let ch = substr(s, i, i + 1)
        if ch == "\n" {
            out = out + [cur]
            cur = ""
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    out = out + [cur]
    return out
}
func splitWS(_ s: String) -> [String] {
    var out: [String] = [Any]()
    var cur = ""
    var i = 0
    while i < s.count {
        let ch = substr(s, i, i + 1)
        if ch == " " || ch == "\t" || ch == "\r" || ch == "\n" {
            if cur.count > 0 {
                out = out + [cur]
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if cur.count > 0 {
        out = out + [cur]
    }
    return out
}
func parseIntStr(_ str: String) -> Int {
    var i = 0
    var neg = false
    if str.count > 0 && Array(str[0..<1]) == "-" {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while i < str.count {
        n = n * 10 + digits[Array(str[i..<i + 1])]!
        i = i + 1
    }
    if neg {
        n = -n
    }
    return n
}
func tokenize(_ s: String) -> [String] {
    let lines = splitLines(s)
    var toks: [String] = [Any]()
    var i = 0
    while i < lines.count {
        let line = lines[i]
        if line.count > 0 && substr(line, 0, 1) == "#" {
            i = i + 1
            continue
        }
        let parts = splitWS(line)
        var j = 0
        while j < parts.count {
            toks = toks + [parts[j]]
            j = j + 1
        }
        i = i + 1
    }
    return toks
}
func readP3(_ text: String) -> Bitmap {
    let toks = tokenize(text)
    if toks.count < 4 {
        return newBitmap(0, 0, 0)
    }
    if toks[0] != "P3" {
        return newBitmap(0, 0, 0)
    }
    let w: Int = parseIntStr(toks[1])
    let h: Int = parseIntStr(toks[2])
    let maxv: Int = parseIntStr(toks[3])
    var idx = 4
    var bm = newBitmap(w, h, maxv)
    var y = h - 1
    while y >= 0 {
        var x = 0
        while x < w {
            let r: Int = parseIntStr(toks[idx])
            let g: Int = parseIntStr(toks[idx + 1])
            let b: Int = parseIntStr(toks[idx + 2])
            setPx(&bm, x, y, &Pixel(R: r, G: g, B: b))
            idx = idx + 3
            x = x + 1
        }
        y = y - 1
    }
    return bm
}
func toGrey(_ b: inout Bitmap) {
    let h: Int = b.h
    let w: Int = b.w
    var m = 0
    var y = 0
    while y < h {
        var x = 0
        while x < w {
            let p = getPx(&b, x, y)
            var l = (p.R * 2126 + p.G * 7152 + p.B * 722) / 10000
            if l > b.max {
                l = b.max
            }
            setPx(&b, x, y, &Pixel(R: l, G: l, B: l))
            if l > m {
                m = l
            }
            x = x + 1
        }
        y = y + 1
    }
    b.max = m
}
func pad(_ n: Int, _ w: Int) -> String {
    var s = String(n)
    while s.count < w {
        s = " " + s
    }
    return s
}
func writeP3(_ b: inout Bitmap) -> String {
    let h: Int = b.h
    let w: Int = b.w
    var max = b.max
    let digits = String(max).count
    var out = "P3\n# generated from Bitmap.writeppmp3\n" + String(w) + " " + String(h) + "\n" + String(max) + "\n"
    var y = h - 1
    while y >= 0 {
        var line = ""
        var x = 0
        while x < w {
            let p = getPx(&b, x, y)
            line = line + "   " + pad(p.R, digits) + " " + pad(p.G, digits) + " " + pad(p.B, digits)
            x = x + 1
        }
        out = out + line + "\n"
        y = y - 1
    }
    return out
}
var ppmtxt = "P3\n" + "# feep.ppm\n" + "4 4\n" + "15\n" + " 0  0  0    0  0  0    0  0  0   15  0 15\n" + " 0  0  0    0 15  7    0  0  0    0  0  0\n" + " 0  0  0    0  0  0    0 15  7    0  0  0\n" + "15  0 15    0  0  0    0  0  0    0  0  0\n"
print("Original Colour PPM file")
print(ppmtxt)
var bm = readP3(ppmtxt)
print("Grey PPM:")
toGrey(&bm)
let out = writeP3(&bm)
print(out)
