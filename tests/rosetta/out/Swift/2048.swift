// Generated by Mochi compiler v0.10.26 on 2025-07-16T13:15:28Z
let SIZE = 4
func newBoard() -> [[Int]] {
    var b: [[Int]] = []
    var y = 0
    while y < SIZE {
        var row: [Int] = []
        var x = 0
        while x < SIZE {
            row = row + [0]
            x = x + 1
        }
        b = b + [row]
        y = y + 1
    }
    return b
}
func spawnTile(_ b: [[Int]]) -> [String: any] {
    var empty: [[Int]] = []
    var y = 0
    while y < SIZE {
        var x = 0
        while x < SIZE {
            if b[y][x] == 0 {
                empty = empty + [[x, y]]
            }
            x = x + 1
        }
        y = y + 1
    }
    if empty.count == 0 {
        return ["board": b, "full": true]
    }
    var idx = now() % empty.count
    let cell = empty[idx]
    var val = 4
    if now() % 10 < 9 {
        val = 2
    }
    b[cell[1]][cell[0]] = val
    return ["board": b, "full": empty.count == 1]
}
func pad(_ n: Int) -> String {
    var s = String(n)
    var pad = 4 - s.count
    var i = 0
    var out = ""
    while i < pad {
        out = out + " "
        i = i + 1
    }
    return out + s
}
func draw(_ b: [[Int]], _ score: Int) {
    print("Score: " + String(score))
    var y = 0
    while y < SIZE {
        print("+----+----+----+----+")
        var line = "|"
        var x = 0
        while x < SIZE {
            var v = b[y][x]
            if v == 0 {
                line = line + "    |"
            }
            else {
                line = line + pad(v) + "|"
            }
            x = x + 1
        }
        print(line)
        y = y + 1
    }
    print("+----+----+----+----+")
    print("W=Up S=Down A=Left D=Right Q=Quit")
}
func reverseRow(_ r: [Int]) -> [Int] {
    var out: [Int] = []
    var i = r.count - 1
    while i >= 0 {
        out = out + [r[i]]
        i = i - 1
    }
    return out
}
func slideLeft(_ row: [Int]) -> [String: any] {
    var xs: [Int] = []
    var i = 0
    while i < row.count {
        if row[i] != 0 {
            xs = xs + [row[i]]
        }
        i = i + 1
    }
    var res: [Int] = []
    var gain = 0
    i = 0
    while i < xs.count {
        if i + 1 < xs.count && xs[i] == xs[i + 1] {
            let v = xs[i] * 2
            gain = gain + v
            res = res + [v]
            i = i + 2
        }
        else {
            res = res + [xs[i]]
            i = i + 1
        }
    }
    while res.count < SIZE {
        res = res + [0]
    }
    return ["row": res, "gain": gain]
}
func moveLeft(_ b: [[Int]], _ score: Int) -> [String: any] {
    var moved = false
    var y = 0
    while y < SIZE {
        let r = slideLeft(b[y])
        let new = r["row"]
        score = score + r["gain"]
        var x = 0
        while x < SIZE {
            if b[y][x] != new[x] {
                moved = true
            }
            b[y][x] = new[x]
            x = x + 1
        }
        y = y + 1
    }
    return ["board": b, "score": score, "moved": moved]
}
func moveRight(_ b: [[Int]], _ score: Int) -> [String: any] {
    var moved = false
    var y = 0
    while y < SIZE {
        var rev = reverseRow(b[y])
        let r = slideLeft(rev)
        rev = r["row"]
        score = score + r["gain"]
        rev = reverseRow(rev)
        var x = 0
        while x < SIZE {
            if b[y][x] != rev[x] {
                moved = true
            }
            b[y][x] = rev[x]
            x = x + 1
        }
        y = y + 1
    }
    return ["board": b, "score": score, "moved": moved]
}
func getCol(_ b: [[Int]], _ x: Int) -> [Int] {
    var col: [Int] = []
    var y = 0
    while y < SIZE {
        col = col + [b[y][x]]
        y = y + 1
    }
    return col
}
func setCol(_ b: [[Int]], _ x: Int, _ col: [Int]) {
    var y = 0
    while y < SIZE {
        b[y][x] = col[y]
        y = y + 1
    }
}
func moveUp(_ b: [[Int]], _ score: Int) -> [String: any] {
    var moved = false
    var x = 0
    while x < SIZE {
        var col = getCol(b, x)
        let r = slideLeft(col)
        let new = r["row"]
        score = score + r["gain"]
        var y = 0
        while y < SIZE {
            if b[y][x] != new[y] {
                moved = true
            }
            b[y][x] = new[y]
            y = y + 1
        }
        x = x + 1
    }
    return ["board": b, "score": score, "moved": moved]
}
func moveDown(_ b: [[Int]], _ score: Int) -> [String: any] {
    var moved = false
    var x = 0
    while x < SIZE {
        var col = reverseRow(getCol(b, x))
        let r = slideLeft(col)
        col = r["row"]
        score = score + r["gain"]
        col = reverseRow(col)
        var y = 0
        while y < SIZE {
            if b[y][x] != col[y] {
                moved = true
            }
            b[y][x] = col[y]
            y = y + 1
        }
        x = x + 1
    }
    return ["board": b, "score": score, "moved": moved]
}
func hasMoves(_ b: [[Int]]) -> Bool {
    var y = 0
    while y < SIZE {
        var x = 0
        while x < SIZE {
            if b[y][x] == 0 {
                return true
            }
            if x + 1 < SIZE && b[y][x] == b[y][x + 1] {
                return true
            }
            if y + 1 < SIZE && b[y][x] == b[y + 1][x] {
                return true
            }
            x = x + 1
        }
        y = y + 1
    }
    return false
}
func has2048(_ b: [[Int]]) -> Bool {
    var y = 0
    while y < SIZE {
        var x = 0
        while x < SIZE {
            if b[y][x] >= 2048 {
                return true
            }
            x = x + 1
        }
        y = y + 1
    }
    return false
}
var board = newBoard()
var r = spawnTile(board)
board = r["board"]
var full = r["full"]
r = spawnTile(board)
board = r["board"]
full = r["full"]
var score = 0
draw(board, score)
while true {
    print("Move: ")
    let cmd = input()
    var moved = false
    if cmd == "a" || cmd == "A" {
        let m = moveLeft(board, score)
        board = m["board"]
        score = m["score"]
        moved = m["moved"]
    }
    if cmd == "d" || cmd == "D" {
        let m = moveRight(board, score)
        board = m["board"]
        score = m["score"]
        moved = m["moved"]
    }
    if cmd == "w" || cmd == "W" {
        let m = moveUp(board, score)
        board = m["board"]
        score = m["score"]
        moved = m["moved"]
    }
    if cmd == "s" || cmd == "S" {
        let m = moveDown(board, score)
        board = m["board"]
        score = m["score"]
        moved = m["moved"]
    }
    if cmd == "q" || cmd == "Q" {
        break
    }
    if moved {
        let r2 = spawnTile(board)
        board = r2["board"]
        full = r2["full"]
        if full && (!hasMoves(board)) {
            draw(board, score)
            print("Game Over")
            break
        }
    }
    draw(board, score)
    if has2048(board) {
        print("You win!")
        break
    }
    if !hasMoves(board) {
        print("Game Over")
        break
    }
}
