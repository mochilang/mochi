run error: exit status 1
/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:67:82: error: expected dictionary value type
 65 | }
 66 | var primes = primesUpTo(3200000)
 67 | func getBrilliant(_ digits: Int, _ limit: Int, _ countOnly: Bool) -> [String: any] {
    |                                                                                  `- error: expected dictionary value type
 68 |     var brilliant: [Int] = [Any]()
 69 |     var count = 0

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:3:25: error: cannot assign value of type '[Any]' to type '[Bool]'
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:41Z
  2 | func primesUpTo(_ n: Int) -> [Int] {
  3 |     var sieve: [Bool] = [Any]()
    |                         |- error: cannot assign value of type '[Any]' to type '[Bool]'
    |                         `- note: arguments to generic parameter 'Element' ('Any' and 'Bool') are expected to be equal
  4 |     var i = 0
  5 |     while i <= n {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:20:22: error: cannot assign value of type '[Any]' to type '[Int]'
 18 |         p = p + 1
 19 |     }
 20 |     var res: [Int] = [Any]()
    |                      |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                      `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 21 |     var x = 2
 22 |     while x <= n {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:31:22: error: cannot assign value of type '[Any]' to type '[Int]'
 29 | }
 30 | func sortInts(_ xs: [Int]) -> [Int] {
 31 |     var res: [Int] = [Any]()
    |                      |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                      `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 32 |     var tmp = xs
 33 |     while tmp.count > 0 {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:45:26: error: cannot assign value of type '[Any]' to type '[Int]'
 43 |         }
 44 |         res = res + [min]
 45 |         var out: [Int] = [Any]()
    |                          |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                          `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 46 |         var j = 0
 47 |         while j < tmp.count {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:61:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 59 |     var i = s.count - 3
 60 |     while i >= 1 {
 61 |         s = Array(s[0..<i]) + "," + Array(s[i..<s.count])
    |                   `- error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 62 |         i = i - 3
 63 |     }

Swift.String.subscript:3:10: note: 'subscript(_:)' has been explicitly marked unavailable here
1 | struct String {
2 | @available(*, unavailable, message: "cannot subscript String with an integer range, use a String.Index range instead.")
3 |   public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }}
  |          `- note: 'subscript(_:)' has been explicitly marked unavailable here
4 | 

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:61:43: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 59 |     var i = s.count - 3
 60 |     while i >= 1 {
 61 |         s = Array(s[0..<i]) + "," + Array(s[i..<s.count])
    |                                           `- error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 62 |         i = i - 3
 63 |     }

Swift.String.subscript:3:10: note: 'subscript(_:)' has been explicitly marked unavailable here
1 | struct String {
2 | @available(*, unavailable, message: "cannot subscript String with an integer range, use a String.Index range instead.")
3 |   public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }}
  |          `- note: 'subscript(_:)' has been explicitly marked unavailable here
4 | 

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:68:28: error: cannot assign value of type '[Any]' to type '[Int]'
 66 | var primes = primesUpTo(3200000)
 67 | func getBrilliant(_ digits: Int, _ limit: Int, _ countOnly: Bool) -> [String: any] {
 68 |     var brilliant: [Int] = [Any]()
    |                            |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                            `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 69 |     var count = 0
 70 |     var pow = 1

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:74:24: error: cannot assign value of type '[Any]' to type '[Int]'
 72 |     var k = 1
 73 |     while k <= digits {
 74 |         var s: [Int] = [Any]()
    |                        |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                        `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 75 |         for p in primes {
 76 |             if p >= pow * 10 {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:110:16: error: unexpected non-void return value in void function
108 |     }
109 |     if countOnly {
110 |         return ["bc": count, "next": next]
    |                |- error: unexpected non-void return value in void function
    |                `- note: did you mean to add a return type?
111 |     }
112 |     return ["bc": brilliant, "next": next]

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:112:12: error: unexpected non-void return value in void function
110 |         return ["bc": count, "next": next]
111 |     }
112 |     return ["bc": brilliant, "next": next]
    |            |- error: unexpected non-void return value in void function
    |            `- note: did you mean to add a return type?
113 | }
114 | func main() {

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:116:9: warning: constant 'r' inferred to have type '()', which may be unexpected
114 | func main() {
115 |     print("First 100 brilliant numbers:")
116 |     let r = getBrilliant(2, 10000, false)
    |         |- warning: constant 'r' inferred to have type '()', which may be unexpected
    |         `- note: add an explicit type annotation to silence this warning
117 |     var br = sortInts(r["bc"])
118 |     br = Array(br[0..<100])

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:117:24: error: value of type '()' has no subscripts
115 |     print("First 100 brilliant numbers:")
116 |     let r = getBrilliant(2, 10000, false)
117 |     var br = sortInts(r["bc"])
    |                        `- error: value of type '()' has no subscripts
118 |     br = Array(br[0..<100])
119 |     var i = 0

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:121:29: error: reference to member 'padStart' cannot be resolved without a contextual type
119 |     var i = 0
120 |     while i < br.count {
121 |         print(String(br[i]).padStart(4, " ") + " ", false)
    |                             `- error: reference to member 'padStart' cannot be resolved without a contextual type
122 |         if (i + 1) % 10 == 0 {
123 |             print("", true)

/tmp/TestMochiToSwiftbrilliant-numbers2048851915/001/main.swift:130:21: error: cannot find 'pow' in scope
128 |     var k = 1
129 |     while k <= 13 {
130 |         let limit = pow(10, k)
    |                     `- error: cannot find 'pow' in scope
131 |         let r2 = getBrilliant(k, limit, true)
132 |         let total = r2["bc"]
