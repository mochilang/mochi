// Generated by Mochi compiler v0.10.30 on 2025-07-18T17:11:10Z
func trimLeftZeros(_ s: String) -> String {
    var i = 0
    while i < s.count && String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) == "0" {
        i = i + 1
    }
    return String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: s.count)])
}
func btString(_ s: String) -> [String: Any] {
    s = trimLeftZeros(s)
    var b: [Int] = []
    var i = s.count - 1
    while i >= 0 {
        let ch = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])
        if ch == "+" {
            b = b + [1]
        }
        else {
            if ch == "0" {
                b = b + [0]
            }
            else {
                if ch == "-" {
                    b = b + [0 - 1]
                }
                else {
                    return ["bt": [], "ok": false]
                }
            }
        }
        i = i - 1
    }
    return ["bt": b, "ok": true]
}
func btToString(_ b: [Int]) -> String {
    if b.count == 0 {
        return "0"
    }
    var r = ""
    var i = b.count - 1
    while i >= 0 {
        let d = b[i]
        if d == 0 - 1 {
            r = r + "-"
        }
        else {
            if d == 0 {
                r = r + "0"
            }
            else {
                r = r + "+"
            }
        }
        i = i - 1
    }
    return r
}
func btInt(_ i: Int) -> [Int] {
    if i == 0 {
        return []
    }
    var n = i
    var b: [Int] = []
    while n != 0 {
        var m = n % 3
        n = Int((n / 3))
        if m == 2 {
            m = 0 - 1
            n = n + 1
        }
        else {
            if m == 0 - 2 {
                m = 1
                n = n - 1
            }
        }
        b = b + [m]
    }
    return b
}
func btToInt(_ b: [Int]) -> Int {
    var r = 0
    var pt = 1
    var i = 0
    while i < b.count {
        r = r + b[i] * pt
        pt = pt * 3
        i = i + 1
    }
    return r
}
func btNeg(_ b: [Int]) -> [Int] {
    var r: [Int] = []
    var i = 0
    while i < b.count {
        r = r + [-b[i]]
        i = i + 1
    }
    return r
}
func btAdd(_ a: [Int], _ b: [Int]) -> [Int] {
    return btInt(btToInt(a) + btToInt(b))
}
func btMul(_ a: [Int], _ b: [Int]) -> [Int] {
    return btInt(btToInt(a) * btToInt(b))
}
func padLeft(_ s: String, _ w: Int) -> String {
    var r: [Int] = s
    while r.count < w {
        r = " " + r
    }
    return r
}
func show(_ label: String, _ b: [Int]) {
    let l = padLeft(label, 7)
    let bs = padLeft(btToString(b), 12)
    let _is = padLeft(String(btToInt(b)), 7)
    print(l + " " + bs + " " + _is)
}
func main() {
    let ares = btString("+-0++0+")
    let a = ares["bt"]
    let b: [Int] = btInt(-436)
    let cres = btString("+-++-")
    let c = cres["bt"]
    show("a:", a)
    show("b:", b)
    show("c:", c)
    show("a(b-c):", btMul(a, btAdd(b, btNeg(c))))
}
main()
