// Generated by Mochi compiler v0.10.30 on 2025-07-19T02:52:01Z
func fields(_ s: String) -> [String] {
    var words: [String] = []
    var cur = ""
    var i = 0
    while i < s.count {
        let ch = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])
        if ch == " " || ch == "\n" || ch == "\t" {
            if cur.count > 0 {
                words = words + [cur]
                cur = ""
            }
        }
        else {
            cur = cur + ch
        }
        i = i + 1
    }
    if cur.count > 0 {
        words = words + [cur]
    }
    return words
}
func padRight(_ s: String, _ width: Int) -> String {
    var out = s
    var i = s.count
    while i < width {
        out = out + " "
        i = i + 1
    }
    return out
}
func join(_ xs: [String], _ sep: String) -> String {
    var res = ""
    var i = 0
    while i < xs.count {
        if i > 0 {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}
func parseIntStr(_ str: String) -> Int {
    var i = 0
    var neg = false
    if str.count > 0 && String(str[str.index(str.startIndex, offsetBy: 0)..<str.index(str.startIndex, offsetBy: 1)]) == "-" {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while i < str.count {
        n = n * 10 + digits[String(str[str.index(str.startIndex, offsetBy: i)..<str.index(str.startIndex, offsetBy: i + 1)])]!
        i = i + 1
    }
    if neg {
        n = -n
    }
    return n
}
func isDigits(_ s: String) -> Bool {
    if s.count == 0 {
        return false
    }
    var i = 0
    while i < s.count {
        let ch = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])
        if ch < "0" || ch > "9" {
            return false
        }
        i = i + 1
    }
    return true
}
func readTable(_ table: String) -> [String: Any] {
    let toks = fields(table)
    var cmds: [String] = []
    var mins: [Int] = []
    var i = 0
    while i < toks.count {
        let cmd = toks[i]
        var minlen = cmd.count
        i = i + 1
        if i < toks.count && isDigits(toks[i]) {
            let num = parseIntStr(toks[i])
            if num >= 1 && num < cmd.count {
                minlen = num
                i = i + 1
            }
        }
        cmds = cmds + [cmd]
        mins = mins + [minlen]
    }
    return ["commands": cmds, "mins": mins]
}
func validate(_ commands: [String], _ mins: [Int], _ words: [String]) -> [String] {
    var results: [String] = []
    var wi = 0
    while wi < words.count {
        let w = words[wi]
        var found = false
        let wlen = w.count
        var ci = 0
        while ci < commands.count {
            let cmd = commands[ci]
            if mins[ci] != 0 && wlen >= mins[ci] && wlen <= cmd.count {
                let c = cmd.uppercased()
                let ww = w.uppercased()
                if String(c[c.index(c.startIndex, offsetBy: 0)..<c.index(c.startIndex, offsetBy: wlen)]) == ww {
                    results = results + [c]
                    found = true
                    break
                }
            }
            ci = ci + 1
        }
        if !found {
            results = results + ["*error*"]
        }
        wi = wi + 1
    }
    return results
}
func main() {
    let table = "" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 " + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate " + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 " + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load " + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 " + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 " + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left " + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "
    let sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    let tbl = readTable(table)
    let commands = tbl["commands"] as! [String]
    let mins: [Int] = tbl["mins"] as! [Int]
    let words: [String] = fields(sentence)
    let results: [String] = validate(commands, mins, words)
    var out1 = "user words:"
    var k = 0
    while k < words.count {
        out1 = out1 + " "
        if k < words.count - 1 {
            out1 = out1 + padRight(words[k], results[k].count)
        }
        else {
            out1 = out1 + words[k]
        }
        k = k + 1
    }
    print(out1)
    print("full words: " + join(results, " "))
}
main()
