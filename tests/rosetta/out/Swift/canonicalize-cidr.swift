// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:48Z
func split(_ s: String, _ sep: String) -> [String] {
    var parts: [String] = [Any]()
    var cur = ""
    var i = 0
    while i < s.count {
        if sep.count > 0 && i + sep.count <= s.count && String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + sep.count)]) == sep {
            parts = parts + [cur]
            cur = ""
            i = i + sep.count
        }
        else {
            cur = cur + Array(s[i..<i + 1])
            i = i + 1
        }
    }
    parts = parts + [cur]
    return parts
}
func join(_ xs: [String], _ sep: String) -> String {
    var res = ""
    var i = 0
    while i < xs.count {
        if i > 0 {
            res = res + sep
        }
        res = res + xs[i]
        i = i + 1
    }
    return res
}
func repeat(_ ch: String, _ n: Int) -> String {
    var out = ""
    var i = 0
    while i < n {
        out = out + ch
        i = i + 1
    }
    return out
}
func parseIntStr(_ str: String) -> Int {
    var i = 0
    var neg = false
    if str.count > 0 && Array(str[0..<1]) == "-" {
        neg = true
        i = 1
    }
    var n = 0
    let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
    while i < str.count {
        n = n * 10 + digits[Array(str[i..<i + 1])]!
        i = i + 1
    }
    if neg {
        n = -n
    }
    return n
}
func toBinary(_ n: Int, _ bits: Int) -> String {
    var b = ""
    var val = n
    var i = 0
    while i < bits {
        b = String(val % 2) + b
        val = Int((val / 2))
        i = i + 1
    }
    return b
}
func binToInt(_ bits: String) -> Int {
    var n = 0
    var i = 0
    while i < bits.count {
        n = n * 2 + parseIntStr(Array(bits[i..<i + 1]))
        i = i + 1
    }
    return n
}
func padRight(_ s: String, _ width: Int) -> String {
    var out = s
    while out.count < width {
        out = out + " "
    }
    return out
}
func canonicalize(_ cidr: String) -> String {
    let parts = split(cidr, "/")
    let dotted = parts[0]
    let size = parseIntStr(parts[1])
    var binParts: [String] = [Any]()
    for p in split(dotted, ".") {
        binParts = binParts + [toBinary(parseIntStr(p), 8)]
    }
    var binary = join(binParts, "")
    binary = Array(binary[0..<size]) + repeat("0", 32 - size)
    var canonParts: [String] = [Any]()
    var i = 0
    while i < binary.count {
        canonParts = canonParts + [String(binToInt(Array(binary[i..<i + 8])))]
        i = i + 8
    }
    return join(canonParts, ".") + "/" + parts[1]
}
var tests = ["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"]
for t in tests {
    print(padRight(t, 18) + " -> " + canonicalize(t))
}
