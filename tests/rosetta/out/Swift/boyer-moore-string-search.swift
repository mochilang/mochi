// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:39Z
func indexOfStr(_ h: String, _ n: String) -> Int {
    let hlen = h.count
    let nlen = n.count
    if nlen == 0 {
        return 0
    }
    var i = 0
    while i <= hlen - nlen {
        if String(h[h.index(h.startIndex, offsetBy: i)..<h.index(h.startIndex, offsetBy: i + nlen)]) == n {
            return i
        }
        i = i + 1
    }
    return -1
}
func stringSearchSingle(_ h: String, _ n: String) -> Int {
    return indexOfStr(h, n)
}
func stringSearch(_ h: String, _ n: String) -> [Int] {
    var result: [Int] = [Any]()
    var start = 0
    let hlen = h.count
    let nlen = n.count
    while start < hlen {
        let idx = indexOfStr(String(h[h.index(h.startIndex, offsetBy: start)..<h.index(h.startIndex, offsetBy: hlen)]), n)
        if idx >= 0 {
            result = result + [start + idx]
            start = start + idx + nlen
        }
        else {
            break
        }
    }
    return result
}
func display(_ nums: [Int]) -> String {
    var s = "["
    var i = 0
    while i < nums.count {
        if i > 0 {
            s = s + ", "
        }
        s = s + String(nums[i])
        i = i + 1
    }
    s = s + "]"
    return s
}
func main() {
    var texts = ["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."]
    var patterns = ["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"]
    var i = 0
    while i < texts.count {
        print("text" + String(i + 1) + " = " + texts[i])
        i = i + 1
    }
    print("")
    var j = 0
    while j < texts.count {
        let idxs = stringSearch(texts[j], patterns[j])
        print("Found \"" + patterns[j] + "\" in 'text" + String(j + 1) + "' at indexes " + display(idxs))
        j = j + 1
    }
}
main()
