run error: exit status 1
/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:32:6: error: keyword 'repeat' cannot be used as an identifier here
 30 |     return res
 31 | }
 32 | func repeat(_ ch: String, _ n: Int) -> String {
    |      |- error: keyword 'repeat' cannot be used as an identifier here
    |      `- note: if this name is unavoidable, use backticks to escape it
 33 |     var out = ""
 34 |     var i = 0

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:3:27: error: cannot assign value of type '[Any]' to type '[String]'
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:48Z
  2 | func split(_ s: String, _ sep: String) -> [String] {
  3 |     var parts: [String] = [Any]()
    |                           |- error: cannot assign value of type '[Any]' to type '[String]'
    |                           `- note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal
  4 |     var cur = ""
  5 |     var i = 0

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:13:31: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 11 |         }
 12 |         else {
 13 |             cur = cur + Array(s[i..<i + 1])
    |                               `- error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 14 |             i = i + 1
 15 |         }

Swift.String.subscript:3:10: note: 'subscript(_:)' has been explicitly marked unavailable here
1 | struct String {
2 | @available(*, unavailable, message: "cannot subscript String with an integer range, use a String.Index range instead.")
3 |   public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }}
  |          `- note: 'subscript(_:)' has been explicitly marked unavailable here
4 | 

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:44:43: error: binary operator '==' cannot be applied to operands of type '[String.Element]' (aka 'Array<Character>') and 'String'
 42 |     var i = 0
 43 |     var neg = false
 44 |     if str.count > 0 && Array(str[0..<1]) == "-" {
    |                                           |- error: binary operator '==' cannot be applied to operands of type '[String.Element]' (aka 'Array<Character>') and 'String'
    |                                           `- note: overloads for '==' exist with these partially matching parameter lists: (String, String)
 45 |         neg = true
 46 |         i = 1

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:51:29: error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
 49 |     let digits = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9]
 50 |     while i < str.count {
 51 |         n = n * 10 + digits[Array(str[i..<i + 1])]!
    |                             `- error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
 52 |         i = i + 1
 53 |     }

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:74:33: error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
 72 |     var i = 0
 73 |     while i < bits.count {
 74 |         n = n * 2 + parseIntStr(Array(bits[i..<i + 1]))
    |                                 `- error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
 75 |         i = i + 1
 76 |     }

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:90:30: error: cannot assign value of type '[Any]' to type '[String]'
 88 |     let dotted = parts[0]
 89 |     let size = parseIntStr(parts[1])
 90 |     var binParts: [String] = [Any]()
    |                              |- error: cannot assign value of type '[Any]' to type '[String]'
    |                              `- note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal
 91 |     for p in split(dotted, ".") {
 92 |         binParts = binParts + [toBinary(parseIntStr(p), 8)]

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:95:40: error: value pack expansion must contain at least one pack reference
 93 |     }
 94 |     var binary = join(binParts, "")
 95 |     binary = Array(binary[0..<size]) + repeat("0", 32 - size)
    |                                        `- error: value pack expansion must contain at least one pack reference
 96 |     var canonParts: [String] = [Any]()
 97 |     var i = 0

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:96:32: error: cannot assign value of type '[Any]' to type '[String]'
 94 |     var binary = join(binParts, "")
 95 |     binary = Array(binary[0..<size]) + repeat("0", 32 - size)
 96 |     var canonParts: [String] = [Any]()
    |                                |- error: cannot assign value of type '[Any]' to type '[String]'
    |                                `- note: arguments to generic parameter 'Element' ('Any' and 'String') are expected to be equal
 97 |     var i = 0
 98 |     while i < binary.count {

/tmp/TestMochiToSwiftcanonicalize-cidr4252928253/001/main.swift:99:52: error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
 97 |     var i = 0
 98 |     while i < binary.count {
 99 |         canonParts = canonParts + [String(binToInt(Array(binary[i..<i + 8])))]
    |                                                    `- error: cannot convert value of type 'Array<String.Element>' (aka 'Array<Character>') to expected argument type 'String'
100 |         i = i + 8
101 |     }
