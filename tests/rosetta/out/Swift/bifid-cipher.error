run error: exit status 1
/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:2:58: error: expected dictionary value type
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:22Z
  2 | func square_to_maps(_ square: [[String]]) -> [String: any] {
    |                                                          `- error: expected dictionary value type
  3 |     var emap: [String: [Int]] = []
  4 |     var dmap: [String: String] = []

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:3:33: error: use [:] to get an empty dictionary literal
  1 | // Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:22Z
  2 | func square_to_maps(_ square: [[String]]) -> [String: any] {
  3 |     var emap: [String: [Int]] = []
    |                                 `- error: use [:] to get an empty dictionary literal
  4 |     var dmap: [String: String] = []
  5 |     var x = 0

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:4:34: error: use [:] to get an empty dictionary literal
  2 | func square_to_maps(_ square: [[String]]) -> [String: any] {
  3 |     var emap: [String: [Int]] = []
  4 |     var dmap: [String: String] = []
    |                                  `- error: use [:] to get an empty dictionary literal
  5 |     var x = 0
  6 |     while x < square.count {

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:17:12: error: unexpected non-void return value in void function
 15 |         x = x + 1
 16 |     }
 17 |     return ["e": emap, "d": dmap]
    |            |- error: unexpected non-void return value in void function
    |            `- note: did you mean to add a return type?
 18 | }
 19 | func remove_space(_ text: String, _ emap: [String: [Int]]) -> String {

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:20:13: error: cannot find 'upper' in scope
 18 | }
 19 | func remove_space(_ text: String, _ emap: [String: [Int]]) -> String {
 20 |     let s = upper(text)
    |             `- error: cannot find 'upper' in scope
 21 |     var out = ""
 22 |     var i = 0

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:25:41: error: cannot convert value of type 'Bool' to expected argument type 'Dictionary<String, [Int]>.Keys.Element' (aka 'String')
 23 |     while i < s.count {
 24 |         let ch = Array(s[i..<i + 1])
 25 |         if emap.keys.contains(ch != " " && ch) {
    |                                         `- error: cannot convert value of type 'Bool' to expected argument type 'Dictionary<String, [Int]>.Keys.Element' (aka 'String')
 26 |             out = out + ch
 27 |         }

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:33:5: error: cannot assign to value: 'text' is a 'let' constant
 31 | }
 32 | func encrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
 33 |     text = remove_space(text, emap)
    |     `- error: cannot assign to value: 'text' is a 'let' constant
 34 |     var row0: [Int] = [Any]()
 35 |     var row1: [Int] = [Any]()

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:34:23: error: cannot assign value of type '[Any]' to type '[Int]'
 32 | func encrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
 33 |     text = remove_space(text, emap)
 34 |     var row0: [Int] = [Any]()
    |                       |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                       `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 35 |     var row1: [Int] = [Any]()
 36 |     var i = 0

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:35:23: error: cannot assign value of type '[Any]' to type '[Int]'
 33 |     text = remove_space(text, emap)
 34 |     var row0: [Int] = [Any]()
 35 |     var row1: [Int] = [Any]()
    |                       |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                       `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 36 |     var i = 0
 37 |     while i < text.count {

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:38:24: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 36 |     var i = 0
 37 |     while i < text.count {
 38 |         let ch = Array(text[i..<i + 1])
    |                        `- error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 39 |         let xy = emap[ch]!
 40 |         row0 = row0 + [xy[0]]

Swift.String.subscript:3:10: note: 'subscript(_:)' has been explicitly marked unavailable here
1 | struct String {
2 | @available(*, unavailable, message: "cannot subscript String with an integer range, use a String.Index range instead.")
3 |   public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }}
  |          `- note: 'subscript(_:)' has been explicitly marked unavailable here
4 | 

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:39:23: error: cannot convert value of type '[String.Element]' (aka 'Array<Character>') to expected argument type 'String'
 37 |     while i < text.count {
 38 |         let ch = Array(text[i..<i + 1])
 39 |         let xy = emap[ch]!
    |                       `- error: cannot convert value of type '[String.Element]' (aka 'Array<Character>') to expected argument type 'String'
 40 |         row0 = row0 + [xy[0]]
 41 |         row1 = row1 + [xy[1]]

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:57:5: error: cannot assign to value: 'text' is a 'let' constant
 55 | }
 56 | func decrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
 57 |     text = remove_space(text, emap)
    |     `- error: cannot assign to value: 'text' is a 'let' constant
 58 |     var coords: [Int] = [Any]()
 59 |     var i = 0

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:58:25: error: cannot assign value of type '[Any]' to type '[Int]'
 56 | func decrypt(_ text: String, _ emap: [String: [Int]], _ dmap: [String: String]) -> String {
 57 |     text = remove_space(text, emap)
 58 |     var coords: [Int] = [Any]()
    |                         |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                         `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 59 |     var i = 0
 60 |     while i < text.count {

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:61:24: error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 59 |     var i = 0
 60 |     while i < text.count {
 61 |         let ch = Array(text[i..<i + 1])
    |                        `- error: 'subscript(_:)' is unavailable: cannot subscript String with an integer range, use a String.Index range instead.
 62 |         let xy = emap[ch]!
 63 |         coords = coords + [xy[0]]

Swift.String.subscript:3:10: note: 'subscript(_:)' has been explicitly marked unavailable here
1 | struct String {
2 | @available(*, unavailable, message: "cannot subscript String with an integer range, use a String.Index range instead.")
3 |   public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int { get }}
  |          `- note: 'subscript(_:)' has been explicitly marked unavailable here
4 | 

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:62:23: error: cannot convert value of type '[String.Element]' (aka 'Array<Character>') to expected argument type 'String'
 60 |     while i < text.count {
 61 |         let ch = Array(text[i..<i + 1])
 62 |         let xy = emap[ch]!
    |                       `- error: cannot convert value of type '[String.Element]' (aka 'Array<Character>') to expected argument type 'String'
 63 |         coords = coords + [xy[0]]
 64 |         coords = coords + [xy[1]]

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:68:21: error: cannot assign value of type '[Any]' to type '[Int]'
 66 |     }
 67 |     var half = coords.count / 2
 68 |     var k1: [Int] = [Any]()
    |                     |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                     `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 69 |     var k2: [Int] = [Any]()
 70 |     var idx = 0

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:69:21: error: cannot assign value of type '[Any]' to type '[Int]'
 67 |     var half = coords.count / 2
 68 |     var k1: [Int] = [Any]()
 69 |     var k2: [Int] = [Any]()
    |                     |- error: cannot assign value of type '[Any]' to type '[Int]'
    |                     `- note: arguments to generic parameter 'Element' ('Any' and 'Int') are expected to be equal
 70 |     var idx = 0
 71 |     while idx < half {

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:94:9: warning: variable 'maps' inferred to have type '()', which may be unexpected
 92 |     let textWikipedia = "FLEEATONCE"
 93 |     let textTest = "The invasion will start on the first of January"
 94 |     var maps = square_to_maps(squareRosetta)
    |         |- warning: variable 'maps' inferred to have type '()', which may be unexpected
    |         `- note: add an explicit type annotation to silence this warning
 95 |     var emap = maps["e"]
 96 |     var dmap = maps["d"]

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:95:20: error: value of type '()' has no subscripts
 93 |     let textTest = "The invasion will start on the first of January"
 94 |     var maps = square_to_maps(squareRosetta)
 95 |     var emap = maps["e"]
    |                    `- error: value of type '()' has no subscripts
 96 |     var dmap = maps["d"]
 97 |     print("from Rosettacode")

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:96:20: error: value of type '()' has no subscripts
 94 |     var maps = square_to_maps(squareRosetta)
 95 |     var emap = maps["e"]
 96 |     var dmap = maps["d"]
    |                    `- error: value of type '()' has no subscripts
 97 |     print("from Rosettacode")
 98 |     print("original:\t " + textRosetta)

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:104:16: error: value of type '()' has no subscripts
102 |     print("and back:\t " + s)
103 |     maps = square_to_maps(squareWikipedia)
104 |     emap = maps["e"]
    |                `- error: value of type '()' has no subscripts
105 |     dmap = maps["d"]
106 |     print("from Wikipedia")

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:105:16: error: value of type '()' has no subscripts
103 |     maps = square_to_maps(squareWikipedia)
104 |     emap = maps["e"]
105 |     dmap = maps["d"]
    |                `- error: value of type '()' has no subscripts
106 |     print("from Wikipedia")
107 |     print("original:\t " + textWikipedia)

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:113:16: error: value of type '()' has no subscripts
111 |     print("and back:\t " + s)
112 |     maps = square_to_maps(squareWikipedia)
113 |     emap = maps["e"]
    |                `- error: value of type '()' has no subscripts
114 |     dmap = maps["d"]
115 |     print("from Rosettacode long part")

/tmp/TestMochiToSwiftbifid-cipher3792984520/001/main.swift:114:16: error: value of type '()' has no subscripts
112 |     maps = square_to_maps(squareWikipedia)
113 |     emap = maps["e"]
114 |     dmap = maps["d"]
    |                `- error: value of type '()' has no subscripts
115 |     print("from Rosettacode long part")
116 |     print("original:\t " + textTest)
