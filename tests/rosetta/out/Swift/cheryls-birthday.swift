// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:57:13Z
struct Birthday: Equatable {
    var month: Int
    var day: Int
}
func monthUnique(_ b: inout Birthday, _ list: [Birthday]) -> Bool {
    var c = 0
    for x in list {
        if x.month == b.month {
            c = c + 1
        }
    }
    return c == 1
}
func dayUnique(_ b: inout Birthday, _ list: [Birthday]) -> Bool {
    var c = 0
    for x in list {
        if x.day == b.day {
            c = c + 1
        }
    }
    return c == 1
}
func monthWithUniqueDay(_ b: inout Birthday, _ list: [Birthday]) -> Bool {
    for x in list {
        if x.month == b.month && dayUnique(&x, list) {
            return true
        }
    }
    return false
}
func bstr(_ b: inout Birthday) -> String {
    var months = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    return months[b.month] + " " + String(b.day)
}
var choices: [Birthday] = [Birthday(month: 5, day: 15), Birthday(month: 5, day: 16), Birthday(month: 5, day: 19), Birthday(month: 6, day: 17), Birthday(month: 6, day: 18), Birthday(month: 7, day: 14), Birthday(month: 7, day: 16), Birthday(month: 8, day: 14), Birthday(month: 8, day: 15), Birthday(month: 8, day: 17)]
var filtered: [Birthday] = [Any]()
for bd in choices {
    if !monthUnique(&bd, choices) {
        filtered = filtered + [bd]
    }
}
var filtered2: [Birthday] = [Any]()
for bd in filtered {
    if !monthWithUniqueDay(&bd, filtered) {
        filtered2 = filtered2 + [bd]
    }
}
var filtered3: [Birthday] = [Any]()
for bd in filtered2 {
    if dayUnique(&bd, filtered2) {
        filtered3 = filtered3 + [bd]
    }
}
var filtered4: [Birthday] = [Any]()
for bd in filtered3 {
    if monthUnique(&bd, filtered3) {
        filtered4 = filtered4 + [bd]
    }
}
if filtered4.count == 1 {
    print("Cheryl's birthday is " + bstr(&filtered4[0]))
}
else {
    print("Something went wrong!")
}
