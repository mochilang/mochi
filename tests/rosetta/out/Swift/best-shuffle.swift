// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:55:21Z
func nextRand(_ seed: Int) -> Int {
    return (seed * 1664525 + 1013904223) % 2147483647
}
func shuffleChars(_ s: String, _ seed: Int) -> [any] {
    var chars: [String] = [Any]()
    var i = 0
    while i < s.count {
        chars = chars + [String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)])]
        i = i + 1
    }
    var sd = seed
    var idx = chars.count - 1
    while idx > 0 {
        sd = nextRand(sd)
        var j = sd % (idx + 1)
        let tmp = chars[idx]
        chars[idx] = chars[j]
        chars[j] = tmp
        idx = idx - 1
    }
    var res = ""
    i = 0
    while i < chars.count {
        res = res + chars[i]
        i = i + 1
    }
    return [res, sd]
}
func bestShuffle(_ s: String, _ seed: Int) -> [any] {
    let r = shuffleChars(s, seed)
    var t = r[0]
    var sd = r[1]
    var arr: [String] = [Any]()
    var i = 0
    while i < t.count {
        arr = arr + [String(t[t.index(t.startIndex, offsetBy: i)..<t.index(t.startIndex, offsetBy: i + 1)])]
        i = i + 1
    }
    i = 0
    while i < arr.count {
        var j = 0
        while j < arr.count {
            if i != j && arr[i] != String(s[s.index(s.startIndex, offsetBy: j)..<s.index(s.startIndex, offsetBy: j + 1)]) && arr[j] != String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) {
                let tmp = arr[i]
                arr[i] = arr[j]
                arr[j] = tmp
                break
            }
            j = j + 1
        }
        i = i + 1
    }
    var count = 0
    i = 0
    while i < arr.count {
        if arr[i] == String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 1)]) {
            count = count + 1
        }
        i = i + 1
    }
    var out = ""
    i = 0
    while i < arr.count {
        out = out + arr[i]
        i = i + 1
    }
    return [out, sd, count]
}
func main() {
    var ts = ["abracadabra", "seesaw", "elk", "grrrrrr", "up", "a"]
    var seed = 1
    var i = 0
    while i < ts.count {
        let r = bestShuffle(ts[i], seed)
        let shuf = r[0]
        seed = r[1]
        let cnt = r[2]
        print(ts[i] + " -> " + shuf + " (" + String(cnt) + ")")
        i = i + 1
    }
}
main()
