% Generated by Mochi compiler v0.10.28 on 2025-07-18T09:38:21Z
:- style_check(-singleton).
set_item(Container, Key, Val, Out) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), put_dict(A, Container, Val, Out).
set_item(List, Index, Val, Out) :-
    nth0(Index, List, _, Rest),
    nth0(Index, Out, Val, Rest).

print_val(V) :- number(V), !, format('~g', [V]).
print_val(V) :- write(V).

:- initialization(main, main).
main :-
    nb_setval(doors, []),
    catch(
        (
            _V0 is 100 - 1,
            between(0, _V0, I),
                catch(
                    (
                        nb_getval(doors, _V1),
                        append(_V1, [false], _V2),
                        nb_setval(doors, _V2),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            catch(
                (
                    _V3 is 101 - 1,
                    between(1, _V3, Pass),
                        catch(
                            (
                                _V4 is (Pass - 1),
                                nb_setval(idx, _V4),
                                catch(
                                    (
                                        repeat,
                                        nb_getval(idx, _V5),
                                        ((_V5 < 100) ->
                                            catch(
                                                (
                                                    nb_getval(doors, _V6),
                                                    nb_getval(idx, _V7),
                                                    nb_getval(doors, _V8),
                                                    nb_getval(idx, _V9),
                                                    nth0(_V9, _V8, _V10),
                                                    (_V10 -> _V11 = false ; _V11 = true),
                                                    set_item(_V6, _V7, _V11, _V12),
                                                    nb_setval(doors, _V12),
                                                    nb_getval(idx, _V13),
                                                    _V14 is (_V13 + Pass),
                                                    nb_setval(idx, _V14),
                                                    true
                                                ), continue, true),
                                                fail
                                            ; true)
                                        ), break, true),
                                    true
                                ), continue, true),
                                fail
                            ; true
                        ), break, true),
                        catch(
                            (
                                _V15 is 10 - 1,
                                between(0, _V15, Row),
                                    catch(
                                        (
                                            nb_setval(line, ""),
                                            catch(
                                                (
                                                    _V16 is 10 - 1,
                                                    between(0, _V16, Col),
                                                        catch(
                                                            (
                                                                Idx is ((Row * 10) + Col),
                                                                nb_getval(doors, _V17),
                                                                nb_getval(idx, _V18),
                                                                nth0(_V18, _V17, _V19),
                                                                (_V19 \= nil ->
                                                                    nb_getval(line, _V20),
                                                                    string_concat(_V20, "1", _V21),
                                                                    nb_setval(line, _V21),
                                                                    true
                                                                ;
                                                                    nb_getval(line, _V22),
                                                                    string_concat(_V22, "0", _V23),
                                                                    nb_setval(line, _V23),
                                                                    true
                                                                ),
                                                                ((Col < 9) ->
                                                                    nb_getval(line, _V24),
                                                                    string_concat(_V24, " ", _V25),
                                                                    nb_setval(line, _V25),
                                                                    true
                                                                ; true
                                                                ),
                                                                true
                                                            ), continue, true),
                                                            fail
                                                        ; true
                                                    ), break, true),
                                                    nb_getval(line, _V26),
                                                    _V27 is _V26,
                                                    print_val(_V27), nl,
                                                    true
                                                ), continue, true),
                                                fail
                                            ; true
                                        ), break, true),
                                        true.
