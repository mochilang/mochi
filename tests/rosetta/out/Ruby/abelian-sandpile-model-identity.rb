# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:16Z
def neighborsList()
	return [[1, 3], [0, 2, 4], [1, 5], [0, 4, 6], [1, 3, 5, 7], [2, 4, 8], [3, 7], [4, 6, 8], [5, 7]]
end

def plus(a, b)
	res = []
	i = 0
	while (i < (a).length)
		res = (res + [(a[i] + b[i])])
		i = (i + 1)
	end
	return res
end

def isStable(p)
	p.each do |v|
		if (v > 3)
			return false
		end
	end
	return true
end

def topple(p)
	neighbors = neighborsList()
	i = 0
	while (i < (p).length)
		if (p[i] > 3)
			p[i] = (p[i] - 4)
			nbs = neighbors[i]
			nbs.each do |j|
				p[j] = (p[j] + 1)
			end
			return 0
		end
		i = (i + 1)
	end
	return 0
end

def pileString(p)
	s = ""
	r = 0
	while (r < 3)
		c = 0
		while (c < 3)
			s = ((s + (p[((3 * r) + c)]).to_s) + " ")
			c = (c + 1)
		end
		s = (s + "\n")
		r = (r + 1)
	end
	return s
end

puts("Avalanche of topplings:\n")
$s4 = [4, 3, 3, 3, 1, 2, 0, 2, 3]
puts(pileString($s4))
while (!isStable($s4))
	topple($s4)
	puts(pileString($s4))
end
puts("Commutative additions:\n")
$s1 = [1, 2, 0, 2, 1, 1, 0, 1, 3]
$s2 = [2, 1, 3, 1, 0, 1, 0, 1, 0]
$s3_a = plus($s1, $s2)
while (!isStable($s3_a))
	topple($s3_a)
end
$s3_b = plus($s2, $s1)
while (!isStable($s3_b))
	topple($s3_b)
end
puts(((((pileString($s1) + "\nplus\n\n") + pileString($s2)) + "\nequals\n\n") + pileString($s3_a)))
puts(((((("and\n\n" + pileString($s2)) + "\nplus\n\n") + pileString($s1)) + "\nalso equals\n\n") + pileString($s3_b)))
puts("Addition of identity sandpile:\n")
$s3 = [3, 3, 3, 3, 3, 3, 3, 3, 3]
$s3_id = [2, 1, 2, 1, 0, 1, 2, 1, 2]
$s4b = plus($s3, $s3_id)
while (!isStable($s4b))
	topple($s4b)
end
puts(((((pileString($s3) + "\nplus\n\n") + pileString($s3_id)) + "\nequals\n\n") + pileString($s4b)))
puts("Addition of identities:\n")
$s5 = plus($s3_id, $s3_id)
while (!isStable($s5))
	topple($s5)
end
puts(((((pileString($s3_id) + "\nplus\n\n") + pileString($s3_id)) + "\nequals\n\n") + pileString($s5)))
