# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:33Z
def indexOf(xs, value)
	i = 0
	while (i < (xs).length)
		if (xs[i] == value)
			return i
		end
		i = (i + 1)
	end
	return (0 - 1)
end

def contains(xs, value)
	return (indexOf(xs, value) != (0 - 1))
end

def maxOf(a, b)
	if (a > b)
		return a
	else
		return b
	end
end

def intSqrt(n)
	if (n == 0)
		return 0
	end
	x = n
	y = (((x + 1)) / 2)
	while (y < x)
		x = y
		y = (((x + (n / x))) / 2)
	end
	return x
end

def sumProperDivisors(n)
	if (n < 2)
		return 0
	end
	sqrt = intSqrt(n)
	sum = 1
	i = 2
	while (i <= sqrt)
		if ((n % i) == 0)
			sum = ((sum + i) + (n / i))
		end
		i = (i + 1)
	end
	if ((sqrt * sqrt) == n)
		sum = (sum - sqrt)
	end
	return sum
end

def classifySequence(k)
	last = k
	seq = [k]
	while true
		last = sumProperDivisors(last)
		seq = (seq + [last])
		n = (seq).length
		aliquot = ""
		if (last == 0)
			aliquot = "Terminating"
		elsif ((n == 2) && (last == k))
			aliquot = "Perfect"
		elsif ((n == 3) && (last == k))
			aliquot = "Amicable"
		elsif ((n >= 4) && (last == k))
			aliquot = (("Sociable[" + ((n - 1)).to_s) + "]")
		elsif (last == seq[(n - 2)])
			aliquot = "Aspiring"
		elsif contains(seq[1...maxOf(1, (n - 2))], last)
			idx = indexOf(seq, last)
			aliquot = (("Cyclic[" + (((n - 1) - idx)).to_s) + "]")
		elsif ((n == 16) || (last > $THRESHOLD))
			aliquot = "Non-Terminating"
		end
		if (aliquot != "")
			return {"seq" => seq, "aliquot" => aliquot}
		end
	end
	return {"seq" => seq, "aliquot" => ""}
end

def padLeft(n, w)
	s = (n).to_s
	while ((s).length < w)
		s = (" " + s)
	end
	return s
end

def padRight(s, w)
	r = s
	while ((r).length < w)
		r = (r + " ")
	end
	return r
end

def joinWithCommas(seq)
	s = "["
	i = 0
	while (i < (seq).length)
		s = (s + (seq[i]).to_s)
		if (i < ((seq).length - 1))
			s = (s + ", ")
		end
		i = (i + 1)
	end
	s = (s + "]")
	return s
end

def main()
	puts("Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n")
	k = 1
	while (k <= 10)
		res = classifySequence(k)
		puts(((((padLeft(k, 2) + ": ") + padRight(res["aliquot"], 15)) + " ") + joinWithCommas(res["seq"])))
		k = (k + 1)
	end
	puts("")
	s = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488]
	i = 0
	while (i < (s).length)
		val = s[i]
		res = classifySequence(val)
		puts(((((padLeft(val, 7) + ": ") + padRight(res["aliquot"], 15)) + " ") + joinWithCommas(res["seq"])))
		i = (i + 1)
	end
	puts("")
	big = 15355717786080
	r = classifySequence(big)
	puts((((((big).to_s + ": ") + padRight(r["aliquot"], 15)) + " ") + joinWithCommas(r["seq"])))
end

$THRESHOLD = 140737488355328
main()
