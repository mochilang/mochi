# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:17Z
module Beast; end
Dog = Struct.new(:kind, :name, keyword_init: true) do
	include Beast
end
Cat = Struct.new(:kind, :name, keyword_init: true) do
	include Beast
end

def beastKind(b)
	return (begin
	_t0 = b
	case
	when _t0.is_a?(Dog)
		(->(k){ k }).call(_t0.kind)
	when _t0.is_a?(Cat)
		(->(k){ k }).call(_t0.kind)
	else
		nil
	end
end)
end

def beastName(b)
	return (begin
	_t1 = b
	case
	when _t1.is_a?(Dog)
		(->(n){ n }).call(_t1.name)
	when _t1.is_a?(Cat)
		(->(n){ n }).call(_t1.name)
	else
		nil
	end
end)
end

def beastCry(b)
	return (begin
	_t2 = b
	case
	when _t2.is_a?(Dog)
		"Woof"
	when _t2.is_a?(Cat)
		"Meow"
	else
		nil
	end
end)
end

def bprint(b)
	puts((((((beastName(b) + ", who's a ") + beastKind(b)) + ", cries: \"") + beastCry(b)) + "\"."))
end

def main()
	d = Dog.new(kind: "labrador", name: "Max")
	c = Cat.new(kind: "siamese", name: "Sammy")
	bprint(d)
	bprint(c)
end

main()
