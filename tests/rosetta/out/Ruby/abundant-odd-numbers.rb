# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:21Z
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

def divisors(n)
	divs = [1]
	divs2 = []
	i = 2
	while ((i * i) <= n)
		if ((n % i) == 0)
			j = ((n / i))
			divs = (divs + [i])
			if (i != j)
				divs2 = (divs2 + [j])
			end
		end
		i = (i + 1)
	end
	j = ((divs2).length - 1)
	while (j >= 0)
		divs = (divs + [divs2[j]])
		j = (j - 1)
	end
	return divs
end

def sum(xs)
	tot = 0
	xs.each do |v|
		tot = (tot + v)
	end
	return tot
end

def sumStr(xs)
	s = ""
	i = 0
	while (i < (xs).length)
		s = ((s + (xs[i]).to_s) + " + ")
		i = (i + 1)
	end
	return _sliceString(s, 0, ((s).length - 3))
end

def pad2(n)
	s = (n).to_s
	if ((s).length < 2)
		return (" " + s)
	end
	return s
end

def pad5(n)
	s = (n).to_s
	while ((s).length < 5)
		s = (" " + s)
	end
	return s
end

def abundantOdd(searchFrom, countFrom, countTo, printOne)
	count = countFrom
	n = searchFrom
	while (count < countTo)
		divs = divisors(n)
		tot = _sum(divs)
		if (tot > n)
			count = (count + 1)
			if (printOne && (count < countTo))
				n = (n + 2)
				next
			end
			s = sumStr(divs)
			if (!printOne)
				puts(((((((pad2(count) + ". ") + pad5(n)) + " < ") + s) + " = ") + (tot).to_s))
			else
				puts((((((n).to_s + " < ") + s) + " = ") + (tot).to_s))
			end
		end
		n = (n + 2)
	end
	return n
end

def main()
	max = 25
	puts((("The first " + (max).to_s) + " abundant odd numbers are:"))
	n = abundantOdd(1, 0, max, false)
	puts("\nThe one thousandth abundant odd number is:")
	abundantOdd(n, max, 1000, true)
	puts("\nThe first abundant odd number above one billion is:")
	abundantOdd(1000000001, 0, 1, true)
end

main()
