# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:16Z
def _joinStrings(parts, sep)
  raise 'join expects list' unless parts.is_a?(Array)
  parts.map(&:to_s).join(sep)
end
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end

def fields(s)
	words = []
	cur = ""
	i = 0
	while (i < (s).length)
		ch = _sliceString(s, i, (i + 1))
		if (((ch == " ") || (ch == "\n")) || (ch == "\t"))
			if ((cur).length > 0)
				words = (words + [cur])
				cur = ""
			end
		else
			cur = (cur + ch)
		end
		i = (i + 1)
	end
	if ((cur).length > 0)
		words = (words + [cur])
	end
	return words
end

def padRight(s, width)
	out = s
	i = (s).length
	while (i < width)
		out = (out + " ")
		i = (i + 1)
	end
	return out
end

def join(xs, sep)
	res = ""
	i = 0
	while (i < (xs).length)
		if (i > 0)
			res = (res + sep)
		end
		res = (res + xs[i])
		i = (i + 1)
	end
	return res
end

def validate(commands, words, mins)
	results = []
	if ((words).length == 0)
		return results
	end
	wi = 0
	while (wi < (words).length)
		w = words[wi]
		found = false
		wlen = (w).length
		ci = 0
		while (ci < (commands).length)
			cmd = commands[ci]
			if (((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= (cmd).length))
				c = (cmd).to_s.upcase
				ww = (w).to_s.upcase
				if (_sliceString(c, 0, wlen) == ww)
					results = (results + [c])
					found = true
					break
				end
			end
			ci = (ci + 1)
		end
		if (!found)
			results = (results + ["*error*"])
		end
		wi = (wi + 1)
	end
	return results
end

def main()
	table = (((((("Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find ") + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput ") + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO ") + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT ") + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT ") + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ")
	commands = fields(table)
	mins = []
	i = 0
	while (i < (commands).length)
		count = 0
		j = 0
		cmd = commands[i]
		while (j < (cmd).length)
			ch = _sliceString(cmd, j, (j + 1))
			if ((ch >= "A") && (ch <= "Z"))
				count = (count + 1)
			end
			j = (j + 1)
		end
		mins = (mins + [count])
		i = (i + 1)
	end
	sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
	words = fields(sentence)
	results = validate(commands, words, mins)
	out1 = "user words:  "
	k = 0
	while (k < (words).length)
		out1 = ((out1 + padRight(words[k], (results[k]).length)) + " ")
		k = (k + 1)
	end
	puts(out1)
	puts(("full words:  " + _joinStrings(results, " ")))
end

main()
