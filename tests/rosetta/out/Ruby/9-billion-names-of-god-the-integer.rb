# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:43:04Z
def bigTrim(a)
	n = (a).length
	while ((n > 1) && (a[(n - 1)] == 0))
		a = a[0...(n - 1)]
		n = (n - 1)
	end
	return a
end

def bigFromInt(x)
	if (x == 0)
		return [0]
	end
	digits = []
	n = x
	while (n > 0)
		digits = (digits + [(n % 10)])
		n = (n / 10)
	end
	return digits
end

def bigAdd(a, b)
	res = []
	carry = 0
	i = 0
	while (((i < (a).length) || (i < (b).length)) || (carry > 0))
		av = 0
		if (i < (a).length)
			av = a[i]
		end
		bv = 0
		if (i < (b).length)
			bv = b[i]
		end
		s = ((av + bv) + carry)
		res = (res + [(s % 10)])
		carry = (s / 10)
		i = (i + 1)
	end
	return bigTrim(res)
end

def bigSub(a, b)
	res = []
	borrow = 0
	i = 0
	while (i < (a).length)
		av = a[i]
		bv = 0
		if (i < (b).length)
			bv = b[i]
		end
		diff = ((av - bv) - borrow)
		if (diff < 0)
			diff = (diff + 10)
			borrow = 1
		else
			borrow = 0
		end
		res = (res + [diff])
		i = (i + 1)
	end
	return bigTrim(res)
end

def bigToString(a)
	s = ""
	i = ((a).length - 1)
	while (i >= 0)
		s = (s + (a[i]).to_s)
		i = (i - 1)
	end
	return s
end

def minInt(a, b)
	if (a < b)
		return a
	else
		return b
	end
end

def cumu(n)
	cache = [[bigFromInt(1)]]
	y = 1
	while (y <= n)
		row = [bigFromInt(0)]
		x = 1
		while (x <= y)
			val = cache[(y - x)][minInt(x, (y - x))]
			row = (row + [bigAdd(row[((row).length - 1)], val)])
			x = (x + 1)
		end
		cache = (cache + [row])
		y = (y + 1)
	end
	return cache[n]
end

def row(n)
	e = cumu(n)
	out = []
	i = 0
	while (i < n)
		diff = bigSub(e[(i + 1)], e[i])
		out = (out + [bigToString(diff)])
		i = (i + 1)
	end
	return out
end

puts("rows:")
$x = 1
while ($x < 11)
	r = row($x)
	line = ""
	i = 0
	while (i < (r).length)
		line = (((line + " ") + r[i]) + " ")
		i = (i + 1)
	end
	puts(line)
	$x = ($x + 1)
end
puts("")
puts("sums:")
[23, 123, 1234].each do |num|
	r = cumu(num)
	puts((((num).to_s + " ") + bigToString(r[((r).length - 1)])))
end
