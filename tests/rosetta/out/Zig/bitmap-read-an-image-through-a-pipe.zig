// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const ppmData = "P3\n2 2\n1\n0 1 1 0 1 0 0 1 1 1 0 0\n"; // []const u8
const img = parsePpm(ppmData); // std.StringHashMap(i32)

fn parseIntStr(str: []const u8) i32 {
    var i = 0; // i32
    var neg = false; // bool
    if (((str).len > 0) and std.mem.eql(u8, _slice_string(str, 0, 1, 1), "-")) {
        neg = true;
        i = 1;
    }
    var n = 0; // i32
    const Digits = struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
};
    const digits = Digits{
    ._ = 0,
    ._ = 1,
    ._ = 2,
    ._ = 3,
    ._ = 4,
    ._ = 5,
    ._ = 6,
    ._ = 7,
    ._ = 8,
    ._ = 9,
}; // struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
}
    while (i < (str).len) {
        n = ((n * 10) + digits[_slice_string(str, i, (i + 1), 1)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

fn splitWs(s: []const u8) []const []const u8 {
    var parts = std.ArrayList(u8).init(std.heap.page_allocator);
    var cur = ""; // []const u8
    var i = 0; // i32
    while (i < (s).len) {
        const ch: i32 = substring(s, i, (i + 1)); // i32
        if (((std.mem.eql(u8, ch, " ") or std.mem.eql(u8, ch, "\n")) or std.mem.eql(u8, ch, "\t")) or std.mem.eql(u8, ch, "\r")) {
            if ((cur).len > 0) {
                parts = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(parts) catch |err| handleError(err); _tmp0.append(cur) catch |err| handleError(err); break :blk0 _tmp0.items; };
                cur = "";
            }
        } else {
            cur = _concat_string(cur, ch);
        }
        i = (i + 1);
    }
    if ((cur).len > 0) {
        parts = blk1: { var _tmp1 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(parts) catch |err| handleError(err); _tmp1.append(cur) catch |err| handleError(err); break :blk1 _tmp1.items; };
    }
    return parts.items;
}

fn parsePpm(data: []const u8) std.AutoHashMap([]const u8, i32) {
    const toks = splitWs(data); // []const []const u8
    if ((toks).len < 4) {
        return struct { err: bool, }{ .err = true };
    }
    const magic = toks[0]; // []const u8
    const w = parseIntStr(toks[1]); // i32
    const h = parseIntStr(toks[2]); // i32
    const maxv = parseIntStr(toks[3]); // i32
    var px = std.ArrayList(i32).init(std.heap.page_allocator);
    var i = 4; // i32
    while (i < (toks).len) {
        px = blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(px) catch |err| handleError(err); _tmp2.append(parseIntStr(toks[i])) catch |err| handleError(err); break :blk2 _tmp2.items; };
        i = (i + 1);
    }
    return struct {
    magic: []const u8,
    w: i32,
    h: i32,
    max: i32,
    px: []const i32,
}{
    .magic = magic,
    .w = w,
    .h = h,
    .max = maxv,
    .px = px,
};
}

pub fn main() void {
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("width=", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{img.w}) catch |err| handleError(err)), " height="), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{img.h}) catch |err| handleError(err))});
}
