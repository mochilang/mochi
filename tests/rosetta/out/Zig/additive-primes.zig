// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn isPrime(n: i32) bool {
    if (n < 2) {
        return false;
    }
    if (@mod(n, 2) == 0) {
        return (n == 2);
    }
    if (@mod(n, 3) == 0) {
        return (n == 3);
    }
    var d = 5; // i32
    while ((d * d) <= n) {
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 2);
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

fn sumDigits(n: i32) i32 {
    var s = 0; // i32
    var x = n; // i32
    while (x > 0) {
        s = (s + @mod(x, 10));
        x = @as(i32, ((x / 10)));
    }
    return s;
}

fn pad(n: i32) []const u8 {
    if (n < 10) {
        return _concat_string("  ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err));
    }
    if (n < 100) {
        return _concat_string(" ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err));
    }
    return std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err);
}

fn main() void {
    std.debug.print("Additive primes less than 500:\n", .{});
    var count = 0; // i32
    var line = ""; // []const u8
    var lineCount = 0; // i32
    var i = 2; // i32
    while (i < 500) {
        if (isPrime(i) and isPrime(sumDigits(i))) {
            count = (count + 1);
            line = _concat_string(_concat_string(line, pad(i)), "  ");
            lineCount = (lineCount + 1);
            if (lineCount == 10) {
                std.debug.print("{s}\n", .{substring(line, 0, ((line).len - 2))});
                line = "";
                lineCount = 0;
            }
        }
        if (i > 2) {
            i = (i + 2);
        } else {
            i = (i + 1);
        }
    }
    if (lineCount > 0) {
        std.debug.print("{s}\n", .{substring(line, 0, ((line).len - 2))});
    }
    std.debug.print("{s}\n", .{_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{count}) catch |err| handleError(err), " additive primes found.")});
}

pub fn main() void {
    main();
}
