// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn pow(base: i32, exp: i32) i32 {
    var result = 1; // i32
    var i = 0; // i32
    while (i < exp) {
        result = (result * base);
        i = (i + 1);
    }
    return result;
}

fn ackermann2(m: i32, n: i32) i32 {
    if (m == 0) {
        return (n + 1);
    }
    if (m == 1) {
        return (n + 2);
    }
    if (m == 2) {
        return ((2 * n) + 3);
    }
    if (m == 3) {
        return ((8 * pow(2, n)) - 3);
    }
    if (n == 0) {
        return ackermann2((m - 1), 1);
    }
    return ackermann2((m - 1), ackermann2(m, (n - 1)));
}

fn main() void {
    std.debug.print("{s}\n", .{_concat_string("A(0, 0) = ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{ackermann2(0, 0)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string("A(1, 2) = ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{ackermann2(1, 2)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string("A(2, 4) = ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{ackermann2(2, 4)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string("A(3, 4) = ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{ackermann2(3, 4)}) catch |err| handleError(err))});
}

pub fn main() void {
    main();
}
