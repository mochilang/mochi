// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:32:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var door = 1; // i32
var incrementer = 0; // i32

pub fn main() void {
    for (1..101) |current| {
        var line = _concat_string(_concat_string("Door ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{current}) catch |err| handleError(err)), " "); // []const u8
        if (current == door) {
            line = _concat_string(line, "Open");
            incrementer = (incrementer + 1);
            door = ((door + (2 * incrementer)) + 1);
        } else {
            line = _concat_string(line, "Closed");
        }
        std.debug.print("{s}\n", .{line});
    }
}
