// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return -x;
    }
    return x;
}

fn floorf(x: f64) f64 {
    return @as(f64, (@as(i32, x)));
}

fn indexOf(s: []const u8, ch: []const u8) i32 {
    var i = 0; // i32
    while (i < (s).len) {
        if (std.mem.eql(u8, substring(s, i, (i + 1)), ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

fn fmtF(x: f64) []const u8 {
    var y = (floorf(((x * 10000.0) + 0.5)) / 10000.0); // f64
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{y}) catch |err| handleError(err); // []const u8
    var dot = indexOf(s, "."); // i32
    if (dot == (0 - 1)) {
        s = _concat_string(s, ".0000");
    } else {
        var decs = (((s).len - dot) - 1); // i32
        if (decs > 4) {
            s = substring(s, 0, (dot + 5));
        } else {
            while (decs < 4) {
                s = _concat_string(s, "0");
                decs = (decs + 1);
            }
        }
    }
    return s;
}

fn padInt(n: i32, width: i32) []const u8 {
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while ((s).len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn padFloat(x: f64, width: i32) []const u8 {
    var s = fmtF(x); // []const u8
    while ((s).len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn avgLen(n: i32) f64 {
    const tests = 10000; // i32
    var sum = 0; // i32
    var seed = 1; // i32
    var t = 0; // i32
    while (t < tests) {
        var visited = std.ArrayList(bool).init(std.heap.page_allocator);
        var i = 0; // i32
        while (i < n) {
            visited = blk0: { var _tmp0 = std.ArrayList(bool).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(visited) catch |err| handleError(err); _tmp0.append(false) catch |err| handleError(err); break :blk0 _tmp0.items; };
            i = (i + 1);
        }
        var x = 0; // i32
        while (!visited[x]) {
            visited.items[x] = true;
            sum = (sum + 1);
            seed = @mod((((seed * 1664525) + 1013904223)), 2147483647);
            x = @mod(seed, n);
        }
        t = (t + 1);
    }
    return ((@as(f64, sum)) / tests);
}

fn ana(n: i32) f64 {
    var nn = @as(f64, n); // f64
    var term = 1.0; // f64
    var sum = 1.0; // f64
    var i = (nn - 1.0); // f64
    while (i >= 1.0) {
        term = (term * ((i / nn)));
        sum = (sum + term);
        i = (i - 1.0);
    }
    return sum;
}

fn user_main() void {
    const nmax = 20; // i32
    std.debug.print(" N    average    analytical    (error)\n", .{});
    std.debug.print("===  =========  ============  =========\n", .{});
    var n = 1; // i32
    while (n <= nmax) {
        const a = avgLen(n); // f64
        const b = ana(n); // f64
        const err = ((absf((a - b)) / b) * 100.0); // f64
        var line = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(padInt(n, 3), "  "), padFloat(a, 9)), "  "), padFloat(b, 12)), "  ("), padFloat(err, 6)), "%)"); // []const u8
        std.debug.print("{s}\n", .{line});
        n = (n + 1);
    }
}

pub fn main() void {
    user_main();
}
