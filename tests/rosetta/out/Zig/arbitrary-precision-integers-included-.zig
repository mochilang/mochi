// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var e1 = pow_int(3, 2); // i32
var e2 = pow_int(4, e1); // i32
var base: i32 = 5;
var x: i32 = pow_big(base, e2);
var s = std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{x}) catch |err| handleError(err); // []const u8

fn pow_int(base: i32, exp: i32) i32 {
    var result = 1; // i32
    var b = base; // i32
    var e = exp; // i32
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = @as(i32, ((e / 2)));
    }
    return result;
}

fn pow_big(base: i32, exp: i32) i32 {
    var result: i32 = 1; // i32
    var b: i32 = base; // i32
    var e = exp; // i32
    while (e > 0) {
        if (@mod(e, 2) == 1) {
            result = (result * b);
        }
        b = (b * b);
        e = @as(i32, ((e / 2)));
    }
    return result;
}

pub fn main() void {
    std.debug.print("5^(4^(3^2)) has {d} digits: {s} ... {s}\n", .{(s).len, substring(s, 0, 20), substring(s, ((s).len - 20), (s).len)});
}
