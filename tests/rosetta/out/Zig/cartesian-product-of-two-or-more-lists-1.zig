// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn cart2(a: []const i32, b: []const i32) []const []const i32 {
    var p = std.ArrayList(i32).init(std.heap.page_allocator);
    for (a) |x| {
        for (b) |y| {
            p = blk0: { var _tmp0 = std.ArrayList([]const i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(p) catch |err| handleError(err); _tmp0.append(&[_]i32{
    x,
    y,
}) catch |err| handleError(err); break :blk0 _tmp0.items; };
        }
    }
    return p.items;
}

fn llStr(lst: []const []const i32) []const u8 {
    var s = "["; // []const u8
    var i = 0; // i32
    while (i < (lst).len) {
        var row = lst[i]; // []const i32
        s = _concat_string(s, "[");
        var j = 0; // i32
        while (j < (row).len) {
            s = _concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{row[j]}) catch |err| handleError(err));
            if (j < ((row).len - 1)) {
                s = _concat_string(s, " ");
            }
            j = (j + 1);
        }
        s = _concat_string(s, "]");
        if (i < ((lst).len - 1)) {
            s = _concat_string(s, " ");
        }
        i = (i + 1);
    }
    s = _concat_string(s, "]");
    return s;
}

fn main() void {
    std.debug.print("{s}\n", .{llStr(cart2(&[_]i32{
    1,
    2,
}, &[_]i32{
    3,
    4,
}))});
    std.debug.print("{s}\n", .{llStr(cart2(&[_]i32{
    3,
    4,
}, &[_]i32{
    1,
    2,
}))});
    std.debug.print("{s}\n", .{llStr(cart2(&[_]i32{
    1,
    2,
}, &[]i32{}))});
    std.debug.print("{s}\n", .{llStr(cart2(&[]i32{}, &[_]i32{
    1,
    2,
}))});
}

pub fn main() void {
    main();
}
