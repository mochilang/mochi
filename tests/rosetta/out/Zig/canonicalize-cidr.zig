// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn _split_string(s: []const u8, sep: []const u8) []const []const u8 {
    var res = std.ArrayList([]const u8).init(std.heap.page_allocator);
    defer res.deinit();
    var it = std.mem.split(u8, s, sep);
    while (it.next()) |p| { res.append(p) catch |err| handleError(err); }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _join_strings(parts: []const []const u8, sep: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.join(u8, sep, parts, alloc) catch |err| handleError(err);
}

const tests = &[_][]const u8{
    "87.70.141.1/22",
    "36.18.154.103/12",
    "62.62.197.11/29",
    "67.137.119.181/4",
    "161.214.74.21/24",
    "184.232.176.184/18",
}; // []const []const u8

fn split(s: []const u8, sep: []const u8) []const []const u8 {
    var parts = std.ArrayList(u8).init(std.heap.page_allocator);
    var cur = ""; // []const u8
    var i = 0; // i32
    while (i < (s).len) {
        if ((((sep).len > 0) and ((i + (sep).len) <= (s).len)) and std.mem.eql(u8, substring(s, i, (i + (sep).len)), sep)) {
            parts = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(parts) catch |err| handleError(err); _tmp0.append(cur) catch |err| handleError(err); break :blk0 _tmp0.items; };
            cur = "";
            i = (i + (sep).len);
        } else {
            cur = _concat_string(cur, _slice_string(s, i, (i + 1), 1));
            i = (i + 1);
        }
    }
    parts = blk1: { var _tmp1 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(parts) catch |err| handleError(err); _tmp1.append(cur) catch |err| handleError(err); break :blk1 _tmp1.items; };
    return parts.items;
}

fn join(xs: []const []const u8, sep: []const u8) []const u8 {
    var res = ""; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        if (i > 0) {
            res = _concat_string(res, sep);
        }
        res = _concat_string(res, xs[i]);
        i = (i + 1);
    }
    return res;
}

fn repeat(ch: []const u8, n: i32) []const u8 {
    var out = ""; // []const u8
    var i = 0; // i32
    while (i < n) {
        out = _concat_string(out, ch);
        i = (i + 1);
    }
    return out;
}

fn parseIntStr(str: []const u8) i32 {
    var i = 0; // i32
    var neg = false; // bool
    if (((str).len > 0) and std.mem.eql(u8, _slice_string(str, 0, 1, 1), "-")) {
        neg = true;
        i = 1;
    }
    var n = 0; // i32
    const Digits = struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
};
    const digits = Digits{
    ._ = 0,
    ._ = 1,
    ._ = 2,
    ._ = 3,
    ._ = 4,
    ._ = 5,
    ._ = 6,
    ._ = 7,
    ._ = 8,
    ._ = 9,
}; // struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
}
    while (i < (str).len) {
        n = ((n * 10) + digits[_slice_string(str, i, (i + 1), 1)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

fn toBinary(n: i32, bits: i32) []const u8 {
    var b = ""; // []const u8
    var val = n; // i32
    var i = 0; // i32
    while (i < bits) {
        b = _concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{@mod(val, 2)}) catch |err| handleError(err), b);
        val = @as(i32, ((val / 2)));
        i = (i + 1);
    }
    return b;
}

fn binToInt(bits: []const u8) i32 {
    var n = 0; // i32
    var i = 0; // i32
    while (i < (bits).len) {
        n = ((n * 2) + parseIntStr(_slice_string(bits, i, (i + 1), 1)));
        i = (i + 1);
    }
    return n;
}

fn padRight(s: []const u8, width: i32) []const u8 {
    var out = s; // []const u8
    while ((out).len < width) {
        out = _concat_string(out, " ");
    }
    return out;
}

fn canonicalize(cidr: []const u8) []const u8 {
    const parts = _split_string(cidr, "/"); // []const []const u8
    const dotted = parts[0]; // []const u8
    const size = parseIntStr(parts[1]); // i32
    var binParts = std.ArrayList(u8).init(std.heap.page_allocator);
    for (_split_string(dotted, ".")) |p| {
        binParts = blk2: { var _tmp2 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(binParts) catch |err| handleError(err); _tmp2.append(toBinary(parseIntStr(p), 8)) catch |err| handleError(err); break :blk2 _tmp2.items; };
    }
    var binary = _join_strings(binParts, ""); // []const u8
    binary = (_slice_string(binary, 0, size, 1) + repeat("0", (32 - size)));
    var canonParts = std.ArrayList(u8).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < (binary).len) {
        canonParts = blk3: { var _tmp3 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp3.deinit(); _tmp3.appendSlice(canonParts) catch |err| handleError(err); _tmp3.append(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{binToInt(_slice_string(binary, i, (i + 8), 1))}) catch |err| handleError(err)) catch |err| handleError(err); break :blk3 _tmp3.items; };
        i = (i + 8);
    }
    return _concat_string(_concat_string(_join_strings(canonParts, "."), "/"), parts[1]);
}

pub fn main() void {
    for (tests) |t| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(padRight(t, 18), " -> "), canonicalize(t))});
    }
}
