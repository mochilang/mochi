// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn floorf(x: f64) f64 {
    return @as(f64, (@as(i32, x)));
}

fn indexOf(s: []const u8, ch: []const u8) i32 {
    var i = 0; // i32
    while (i < (s).len) {
        if (std.mem.eql(u8, substring(s, i, (i + 1)), ch)) {
            return i;
        }
        i = (i + 1);
    }
    return -1;
}

fn fmtF3(x: f64) []const u8 {
    var y = (floorf(((x * 1000.0) + 0.5)) / 1000.0); // f64
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{y}) catch |err| handleError(err); // []const u8
    var dot = indexOf(s, "."); // i32
    if (dot == (0 - 1)) {
        s = _concat_string(s, ".000");
    } else {
        var decs = (((s).len - dot) - 1); // i32
        if (decs > 3) {
            s = substring(s, 0, (dot + 4));
        } else {
            while (decs < 3) {
                s = _concat_string(s, "0");
                decs = (decs + 1);
            }
        }
    }
    return s;
}

fn padFloat3(x: f64, width: i32) []const u8 {
    var s = fmtF3(x); // []const u8
    while ((s).len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn fib1000() []const f64 {
    var a = 0.0; // f64
    var b = 1.0; // f64
    var res = std.ArrayList(f64).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < 1000) {
        res = blk0: { var _tmp0 = std.ArrayList(f64).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(res) catch |err| handleError(err); _tmp0.append(b) catch |err| handleError(err); break :blk0 _tmp0.items; };
        var t = b; // f64
        b = (b + a);
        a = t;
        i = (i + 1);
    }
    return res.items;
}

fn leadingDigit(x: f64) i32 {
    if (x < 0.0) {
        x = -x;
    }
    while (x >= 10.0) {
        x = (x / 10.0);
    }
    while ((x > 0.0) and (x < 1.0)) {
        x = (x * 10.0);
    }
    return @as(i32, x);
}

fn show(nums: []const f64, title: []const u8) void {
    var counts = &[_]i32{
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
}; // []const i32
    for (nums) |n| {
        const d = leadingDigit(n); // i32
        if ((d >= 1) and (d <= 9)) {
            counts.items[(d - 1)] = (counts[(d - 1)] + 1);
        }
    }
    const preds = &[_]f64{
    0.301,
    0.176,
    0.125,
    0.097,
    0.079,
    0.067,
    0.058,
    0.051,
    0.046,
}; // []const f64
    const total = (nums).len; // i32
    std.debug.print("{s}\n", .{title});
    std.debug.print("Digit  Observed  Predicted\n", .{});
    var i = 0; // i32
    while (i < 9) {
        const obs = ((@as(f64, counts[i])) / (@as(f64, total))); // f64
        var line = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string("  ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{(i + 1)}) catch |err| handleError(err)), "  "), padFloat3(obs, 9)), "  "), padFloat3(preds[i], 8)); // []const u8
        std.debug.print("{s}\n", .{line});
        i = (i + 1);
    }
}

fn main() void {
    show(fib1000(), "First 1000 Fibonacci numbers");
}

pub fn main() void {
    main();
}
