// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const LDAPClient = struct {
    Base: []const u8,
    Host: []const u8,
    Port: i32,
    UseSSL: bool,
    BindDN: []const u8,
    BindPassword: []const u8,
    UserFilter: []const u8,
    GroupFilter: []const u8,
    Attributes: []const []const u8,
};

fn connect(client: *LDAPClient) bool {
    return (!std.mem.eql(u8, client.Host, "") and (client.Port > 0));
}

fn main() void {
    const client = LDAPClient{
    .Base = "dc=example,dc=com",
    .Host = "ldap.example.com",
    .Port = 389,
    .UseSSL = false,
    .BindDN = "uid=readonlyuser,ou=People,dc=example,dc=com",
    .BindPassword = "readonlypassword",
    .UserFilter = "(uid=%s)",
    .GroupFilter = "(memberUid=%s)",
    .Attributes = &[_][]const u8{
    "givenName",
    "sn",
    "mail",
    "uid",
},
}; // LDAPClient
    if (connect(&client)) {
        std.debug.print("{s}\n", .{_concat_string("Connected to ", client.Host)});
    } else {
        std.debug.print("Failed to connect\n", .{});
    }
}

pub fn main() void {
    main();
}
