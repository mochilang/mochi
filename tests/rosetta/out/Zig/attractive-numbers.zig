// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn isPrime(n: i32) bool {
    if (n < 2) {
        return false;
    }
    if (@mod(n, 2) == 0) {
        return (n == 2);
    }
    if (@mod(n, 3) == 0) {
        return (n == 3);
    }
    var d = 5; // i32
    while ((d * d) <= n) {
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 2);
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

fn countPrimeFactors(n: i32) i32 {
    if (n == 1) {
        return 0;
    }
    if (isPrime(n)) {
        return 1;
    }
    var count = 0; // i32
    var f = 2; // i32
    while (true) {
        if (@mod(n, f) == 0) {
            count = (count + 1);
            n = (n / f);
            if (n == 1) {
                return count;
            }
            if (isPrime(n)) {
                f = n;
            }
        } else         if (f >= 3) {
            f = (f + 2);
        } else {
            f = 3;
        }
    }
    return count;
}

fn pad4(n: i32) []const u8 {
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while ((s).len < 4) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn user_main() void {
    const max = 120; // i32
    std.debug.print("{s}\n", .{_concat_string(_concat_string("The attractive numbers up to and including ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{max}) catch |err| handleError(err)), " are:")});
    var count = 0; // i32
    var line = ""; // []const u8
    var lineCount = 0; // i32
    var i = 1; // i32
    while (i <= max) {
        const c = countPrimeFactors(i); // i32
        if (isPrime(c)) {
            line = _concat_string(line, pad4(i));
            count = (count + 1);
            lineCount = (lineCount + 1);
            if (lineCount == 20) {
                std.debug.print("{s}\n", .{line});
                line = "";
                lineCount = 0;
            }
        }
        i = (i + 1);
    }
    if (lineCount > 0) {
        std.debug.print("{s}\n", .{line});
    }
}

pub fn main() void {
    user_main();
}
