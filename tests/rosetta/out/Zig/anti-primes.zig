// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn countDivisors(n: i32) i32 {
    if (n < 2) {
        return 1;
    }
    var count = 2; // i32
    var i = 2; // i32
    while (i <= (n / 2)) {
        if (@mod(n, i) == 0) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    return count;
}

fn main() void {
    std.debug.print("The first 20 anti-primes are:\n", .{});
    var maxDiv = 0; // i32
    var count = 0; // i32
    var n = 1; // i32
    var line = ""; // []const u8
    while (count < 20) {
        const d = countDivisors(n); // i32
        if (d > maxDiv) {
            line = _concat_string(_concat_string(line, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err)), " ");
            maxDiv = d;
            count = (count + 1);
        }
        n = (n + 1);
    }
    line = substring(line, 0, ((line).len - 1));
    std.debug.print("{s}\n", .{line});
}

pub fn main() void {
    main();
}
