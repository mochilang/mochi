// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_list(comptime T: type, v: []const T, start: i32, end: i32, step: i32) []T {
    var s = start;
    var e = end;
    var st = step;
    const n: i32 = @as(i32, @intCast(v.len));
    if (s < 0) s += n;
    if (e < 0) e += n;
    if (st == 0) st = 1;
    if (s < 0) s = 0;
    if (e > n) e = n;
    if (st > 0 and e < s) e = s;
    if (st < 0 and e > s) e = s;
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = s;
    while ((st > 0 and i < e) or (st < 0 and i > e)) : (i += st) {
        res.append(v[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var circs: []const i32 = &[]i32{};
var digits = &[_]i32{
    1,
    3,
    7,
    9,
}; // []const i32
var q = &[_]i32{
    1,
    2,
    3,
    5,
    7,
    9,
}; // []const i32
var fq = &[_]i32{
    1,
    2,
    3,
    5,
    7,
    9,
}; // []const i32
var count = 0; // i32

fn isPrime(n: i32) bool {
    if (n < 2) {
        return false;
    }
    if (@mod(n, 2) == 0) {
        return (n == 2);
    }
    if (@mod(n, 3) == 0) {
        return (n == 3);
    }
    var d = 5; // i32
    while ((d * d) <= n) {
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 2);
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

fn isCircular(n: i32) bool {
    var nn = n; // i32
    var pow = 1; // i32
    while (nn > 0) {
        pow = (pow * 10);
        nn = (nn / 10);
    }
    nn = n;
    while (true) {
        nn = (nn * 10);
        const f = (nn / pow); // f64
        nn = (nn + (f * ((1 - pow))));
        if (nn == n) {
            break;
        }
        if (!isPrime(nn)) {
            return false;
        }
    }
    return true;
}

fn showList(xs: []const i32) []const u8 {
    var out = "["; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        out = _concat_string(out, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{xs[i]}) catch |err| handleError(err));
        if (i < ((xs).len - 1)) {
            out = _concat_string(out, ", ");
        }
        i = (i + 1);
    }
    return _concat_string(out, "]");
}

pub fn main() void {
    std.debug.print("The first 19 circular primes are:\n", .{});
    while (true) {
        const f = q[0]; // i32
        const fd = fq[0]; // i32
        if (isPrime(f) and isCircular(f)) {
            circs = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(circs) catch |err| handleError(err); _tmp0.append(f) catch |err| handleError(err); break :blk0 _tmp0.items; };
            count = (count + 1);
            if (count == 19) {
                break;
            }
        }
        q = _slice_list(i32, q, 1, q.len, 1);
        fq = _slice_list(i32, fq, 1, fq.len, 1);
        if ((f != 2) and (f != 5)) {
            for (digits) |d| {
                q = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(q) catch |err| handleError(err); _tmp1.append(((f * 10) + d)) catch |err| handleError(err); break :blk1 _tmp1.items; };
                fq = blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(fq) catch |err| handleError(err); _tmp2.append(fd) catch |err| handleError(err); break :blk2 _tmp2.items; };
            }
        }
    }
    std.debug.print("{s}\n", .{showList(circs)});
    std.debug.print("\nThe next 4 circular primes, in repunit format, are:\n", .{});
    std.debug.print("[R(19) R(23) R(317) R(1031)]\n", .{});
    std.debug.print("\nThe following repunits are probably circular primes:\n", .{});
    for (&[_]i32{
    5003,
    9887,
    15073,
    25031,
    35317,
    49081,
}) |i| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("R(", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err)), ") : true")});
    }
}
