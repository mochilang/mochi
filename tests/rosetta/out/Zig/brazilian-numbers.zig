// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:18Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn sameDigits(n: i32, b: i32) bool {
    var f = @mod(n, b); // i32
    n = @as(i32, ((n / b)));
    while (n > 0) {
        if (@mod(n, b) != f) {
            return false;
        }
        n = @as(i32, ((n / b)));
    }
    return true;
}

fn isBrazilian(n: i32) bool {
    if (n < 7) {
        return false;
    }
    if ((@mod(n, 2) == 0) and (n >= 8)) {
        return true;
    }
    var b = 2; // i32
    while (b < (n - 1)) {
        if (sameDigits(n, b)) {
            return true;
        }
        b = (b + 1);
    }
    return false;
}

fn isPrime(n: i32) bool {
    if (n < 2) {
        return false;
    }
    if (@mod(n, 2) == 0) {
        return (n == 2);
    }
    if (@mod(n, 3) == 0) {
        return (n == 3);
    }
    var d = 5; // i32
    while ((d * d) <= n) {
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 2);
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

fn user_main() void {
    var kinds = &[_][]const u8{
    " ",
    " odd ",
    " prime ",
}; // []const []const u8
    for (kinds) |kind| {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("First 20", kind), "Brazilian numbers:")});
        var c = 0; // i32
        var n = 7; // i32
        while (true) {
            if (isBrazilian(n)) {
                std.debug.print("{s}\n", .{_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err), " ")});
                c = (c + 1);
                if (c == 20) {
                    std.debug.print("\n\n", .{});
                    break;
                }
            }
            if (std.mem.eql(u8, kind, " ")) {
                n = (n + 1);
            } else             if (std.mem.eql(u8, kind, " odd ")) {
                n = (n + 2);
            } else {
                while (true) {
                    n = (n + 2);
                    if (isPrime(n)) {
                        break;
                    }
                }
            }
        }
    }
    var n = 7; // i32
    var c = 0; // i32
    while (c < 100000) {
        if (isBrazilian(n)) {
            c = (c + 1);
        }
        n = (n + 1);
    }
    std.debug.print("{s}\n", .{_concat_string("The 100,000th Brazilian number: ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(n - 1)}) catch |err| handleError(err))});
}

pub fn main() void {
    user_main();
}
