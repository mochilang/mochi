// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn accumulator(sum: i32) fn(i32) void {
    var store: []const i32 = &[_]fn(i32) f64{sum}; // []const i32
    const add = (struct { store: []const i32, fn call(self: @This(), nv: i32) i32 {
        store.items[0] = (self.store[0] + nv);
        return self.store.items[0];
} }{ .store = store }).call;
    return add;
}

fn user_main() void {
    const x: i32 = accumulator(1); // i32
    x(5);
    accumulator(3);
    std.debug.print("{any}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{x(2.3)}) catch |err| handleError(err)});
}

pub fn main() void {
    user_main();
}
