// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const epsilon = 0.000000000000001; // f64
var factval = 1; // i32
var e = 2.0; // f64
var n = 2; // i32
var term = 1.0; // f64

fn absf(x: f64) f64 {
    if (x < 0.0) {
        return -x;
    }
    return x;
}

fn pow10(n: i32) f64 {
    var r: f64 = 1.0; // f64
    var i = 0; // i32
    while (i < n) {
        r = (r * 10.0);
        i = (i + 1);
    }
    return r;
}

fn formatFloat(f: f64, prec: i32) []const u8 {
    const scale = pow10(prec); // f64
    const scaled = (((f * scale)) + 0.5); // f64
    var n = (@as(i32, scaled)); // i32
    var digits = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while ((digits).len <= prec) {
        digits = _concat_string("0", digits);
    }
    const intPart = substring(digits, 0, ((digits).len - prec)); // []const u8
    const fracPart = substring(digits, ((digits).len - prec), (digits).len); // []const u8
    return _concat_string(_concat_string(intPart, "."), fracPart);
}

pub fn main() void {
    while (true) {
        factval = (factval * n);
        n = (n + 1);
        term = (1.0 / (@as(f64, factval)));
        e = (e + term);
        if (absf(term) < epsilon) {
            break;
        }
    }
    std.debug.print("{s}\n", .{_concat_string("e = ", formatFloat(e, 15))});
}
