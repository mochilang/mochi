// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var nMech = 5; // i32
var detailsPerMech = 4; // i32

pub fn main() void {
    for (1 .. ((nMech + 1))) |mech| {
        const id = mech; // i32
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("worker ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{id}) catch |err| handleError(err)), " contracted to assemble "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{detailsPerMech}) catch |err| handleError(err)), " details")});
        std.debug.print("{s}\n", .{_concat_string(_concat_string("worker ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{id}) catch |err| handleError(err)), " enters shop")});
        var d = 0; // i32
        while (d < detailsPerMech) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string("worker ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{id}) catch |err| handleError(err)), " assembling")});
            std.debug.print("{s}\n", .{_concat_string(_concat_string("worker ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{id}) catch |err| handleError(err)), " completed detail")});
            d = (d + 1);
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string("worker ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{id}) catch |err| handleError(err)), " leaves shop")});
        std.debug.print("{s}\n", .{_concat_string(_concat_string("mechanism ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{mech}) catch |err| handleError(err)), " completed")});
    }
}
