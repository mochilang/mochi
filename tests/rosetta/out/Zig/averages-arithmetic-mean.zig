// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn mean(v: []const f64) std.AutoHashMap([]const u8, i32) {
    if ((v).len == 0) {
        return struct { ok: bool, }{ .ok = false };
    }
    var sum = 0.0; // f64
    var i = 0; // i32
    while (i < (v).len) {
        sum = (sum + v[i]);
        i = (i + 1);
    }
    return struct {
    ok: bool,
    mean: i32,
}{
    .ok = true,
    .mean = (sum / (@as(f64, (v).len))),
};
}

fn user_main() void {
    const sets = &[_][]const i32{
    &[]i32{},
    &[_]f64{
    3.0,
    1.0,
    4.0,
    1.0,
    5.0,
    9.0,
},
    &[_]f64{
    100000000000000000000.0,
    3.0,
    1.0,
    4.0,
    1.0,
    5.0,
    9.0,
    -100000000000000000000.0,
},
    &[_]f64{
    10.0,
    9.0,
    8.0,
    7.0,
    6.0,
    5.0,
    4.0,
    3.0,
    2.0,
    1.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.11,
},
    &[_]f64{
    10.0,
    20.0,
    30.0,
    40.0,
    50.0,
    -100.0,
    4.7,
    -1100.0,
},
}; // []const []const i32
    for (sets) |v| {
        std.debug.print("{s}\n", .{_concat_string("Vector: ", std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch |err| handleError(err))});
        const r = mean(v); // std.StringHashMap(i32)
        if (r["ok"]) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("Mean of ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{(v).len}) catch |err| handleError(err)), " numbers is "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{r["mean"]}) catch |err| handleError(err))});
        } else {
            std.debug.print("Mean undefined\n", .{});
        }
        std.debug.print("\n", .{});
    }
}

pub fn main() void {
    user_main();
}
