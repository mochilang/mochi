// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var b = ord("a"); // i32
var r = ord("π"); // i32
var s = "aπ"; // []const u8

fn ord(ch: []const u8) i32 {
    if (std.mem.eql(u8, ch, "a")) {
        return 97;
    }
    if (std.mem.eql(u8, ch, "π")) {
        return 960;
    }
    if (std.mem.eql(u8, ch, "A")) {
        return 65;
    }
    return 0;
}

fn chr(n: i32) []const u8 {
    if (n == 97) {
        return "a";
    }
    if (n == 960) {
        return "π";
    }
    if (n == 65) {
        return "A";
    }
    return "?";
}

pub fn main() void {
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{r}) catch |err| handleError(err)), " "), s)});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string("string cast to []rune: [", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{r}) catch |err| handleError(err)), "]")});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("    string range loop: ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{r}) catch |err| handleError(err))});
    std.debug.print("         string bytes: 0x61 0xcf 0x80\n", .{});
}
