// Generated by Mochi compiler v0.10.30 on 2025-07-19T00:25:49Z
const std = @import("std");

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn bottles(n: i32) []const u8 {
    if (n == 0) {
        return "No more bottles";
    }
    if (n == 1) {
        return "1 bottle";
    }
    return _concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err), " bottles");
}

fn user_main() void {
    var i: i32 = 99; // i32
    while (i > 0) {
        std.debug.print("{s}\n", .{_concat_string(bottles(i), " of beer on the wall")});
        std.debug.print("{s}\n", .{_concat_string(bottles(i), " of beer")});
        std.debug.print("Take one down, pass it around\n", .{});
        std.debug.print("{s}\n", .{_concat_string(bottles((i - 1)), " of beer on the wall")});
        i = (i - 1);
    }
}

pub fn main() void {
    user_main();
}
