// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn poly(p: i32) []const u8 {
    var s: []const u8 = ""; // []const u8
    var coef: i32 = 1; // i32
    var i = p; // i32
    if (coef != 1) {
        s = _concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{coef}) catch |err| handleError(err));
    }
    while (i > 0) {
        s = _concat_string(s, "x");
        if (i != 1) {
            s = _concat_string(_concat_string(s, "^"), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err));
        }
        coef = @as(i32, (((coef * i) / (((p - i) + 1)))));
        var d = coef; // i32
        if (@mod(((p - ((i - 1)))), 2) == 1) {
            d = -d;
        }
        if (d < 0) {
            s = _concat_string(_concat_string(s, " - "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{-d}) catch |err| handleError(err));
        } else {
            s = _concat_string(_concat_string(s, " + "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d}) catch |err| handleError(err));
        }
        i = (i - 1);
    }
    if (std.mem.eql(u8, s, "")) {
        s = "1";
    }
    return s;
}

fn aks(n: i32) bool {
    if (n < 2) {
        return false;
    }
    var c: i32 = n; // i32
    var i = 1; // i32
    while (i < n) {
        if (@mod(c, n) != 0) {
            return false;
        }
        c = @as(i32, (((c * ((n - i))) / ((i + 1)))));
        i = (i + 1);
    }
    return true;
}

fn user_main() void {
    var p = 0; // i32
    while (p <= 7) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{p}) catch |err| handleError(err), ":  "), poly(p))});
        p = (p + 1);
    }
    var first = true; // bool
    p = 2;
    var line: []const u8 = ""; // []const u8
    while (p < 50) {
        if (aks(p)) {
            if (first) {
                line = _concat_string(line, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{p}) catch |err| handleError(err));
                first = false;
            } else {
                line = _concat_string(_concat_string(line, " "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{p}) catch |err| handleError(err));
            }
        }
        p = (p + 1);
    }
    std.debug.print("{s}\n", .{line});
}

pub fn main() void {
    user_main();
}
