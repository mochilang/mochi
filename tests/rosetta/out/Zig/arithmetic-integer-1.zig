// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:42Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn user_main() void {
    const a = 12; // i32
    const b = 8; // i32
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err), " + "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(a + b)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err), " - "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(a - b)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err), " * "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(a * b)}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err), " / "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{@as(i32, ((a / b)))}) catch |err| handleError(err))});
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a}) catch |err| handleError(err), " % "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{b}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{@mod(a, b)}) catch |err| handleError(err))});
}

pub fn main() void {
    user_main();
}
