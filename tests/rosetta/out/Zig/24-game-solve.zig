// Generated by Mochi Zig transpiler on 2025-07-23 09:39 +0700
const std = @import("std");

fn newNum(n: i64) i64 {
    return blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("op", OP_NUM) catch unreachable; m.put("value", blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("num", n) catch unreachable; m.put("denom", 1) catch unreachable; break :blk m; }) catch unreachable; break :blk m; };
}

fn exprEval(x: i64) i64 {
    if (x[@as(usize, @intCast("op"))] == OP_NUM) {
        return x[@as(usize, @intCast("value"))];
    }
    const l = exprEval(x[@as(usize, @intCast("left"))]);
    const r = exprEval(x[@as(usize, @intCast("right"))]);
    if (x[@as(usize, @intCast("op"))] == OP_ADD) {
        return blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("num", l[@as(usize, @intCast("num"))] * r[@as(usize, @intCast("denom"))] + l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("num"))]) catch unreachable; m.put("denom", l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("denom"))]) catch unreachable; break :blk m; };
    }
    if (x[@as(usize, @intCast("op"))] == OP_SUB) {
        return blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("num", l[@as(usize, @intCast("num"))] * r[@as(usize, @intCast("denom"))] - l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("num"))]) catch unreachable; m.put("denom", l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("denom"))]) catch unreachable; break :blk m; };
    }
    if (x[@as(usize, @intCast("op"))] == OP_MUL) {
        return blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("num", l[@as(usize, @intCast("num"))] * r[@as(usize, @intCast("num"))]) catch unreachable; m.put("denom", l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("denom"))]) catch unreachable; break :blk m; };
    }
    return blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("num", l[@as(usize, @intCast("num"))] * r[@as(usize, @intCast("denom"))]) catch unreachable; m.put("denom", l[@as(usize, @intCast("denom"))] * r[@as(usize, @intCast("num"))]) catch unreachable; break :blk m; };
}

fn exprString(x: i64) []const u8 {
    if (x[@as(usize, @intCast("op"))] == OP_NUM) {
        return _str(x[@as(usize, @intCast("value"))][@as(usize, @intCast("num"))]);
    }
    const ls = exprString(x[@as(usize, @intCast("left"))]);
    const rs = exprString(x[@as(usize, @intCast("right"))]);
    var opstr = "";
    if (x[@as(usize, @intCast("op"))] == OP_ADD) {
        opstr = " + ";
    } else {
        if (x[@as(usize, @intCast("op"))] == OP_SUB) {
            opstr = " - ";
        } else {
            if (x[@as(usize, @intCast("op"))] == OP_MUL) {
                opstr = " * ";
            } else {
                opstr = " / ";
            }
        }
    }
    return _concat_string(_concat_string(_concat_string("(", ls), opstr) + rs, ")");
}

fn solve(xs: []i64) bool {
    if (std.mem.len(xs) == 1) {
        const f = exprEval(xs[@as(usize, @intCast(0))]);
        if (f[@as(usize, @intCast("denom"))] != 0 and f[@as(usize, @intCast("num"))] == f[@as(usize, @intCast("denom"))] * goal) {
            std.io.getStdOut().writer().print("{any}\n", .{exprString(xs[@as(usize, @intCast(0))])}) catch unreachable;
            return true;
        }
        return false;
    }
    var i: i64 = 0;
    while (i < std.mem.len(xs)) {
        var j = i + 1;
        while (j < std.mem.len(xs)) {
            var rest: []std.StringHashMap(i64) = &[_]std.StringHashMap(i64){};
            var k: i64 = 0;
            while (k < std.mem.len(xs)) {
                if (k != i and k != j) {
                    rest = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(xs[@as(usize, @intCast(k))]) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
                }
                k = k + 1;
            }
            const a = xs[@as(usize, @intCast(i))];
            const b = xs[@as(usize, @intCast(j))];
            for ([4]i64{OP_ADD, OP_SUB, OP_MUL, OP_DIV}) |op| {
                var node = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("op", op) catch unreachable; m.put("left", a) catch unreachable; m.put("right", b) catch unreachable; break :blk m; };
                if (solve(blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                    return true;
                }
            }
            var node = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("op", OP_SUB) catch unreachable; m.put("left", b) catch unreachable; m.put("right", a) catch unreachable; break :blk m; };
            if (solve(blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                return true;
            }
            node = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("op", OP_DIV) catch unreachable; m.put("left", b) catch unreachable; m.put("right", a) catch unreachable; break :blk m; };
            if (solve(blk: { var _tmp = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(rest) catch unreachable; _tmp.append(node) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; })) {
                return true;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return false;
}

fn mochi_main() void {
    var iter: i64 = 0;
    while (iter < 10) {
        var cards: []i64 = &[_]i64{};
        var i: i64 = 0;
        while (i < n_cards) {
            const n = @mod(_now(), digit_range - 1) + 1;
            cards = blk: { var _tmp = std.ArrayList(i64).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(cards) catch unreachable; _tmp.append(newNum(n)) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
            std.io.getStdOut().writer().print("{any}\n", .{_concat_string(" ", _str(n))}) catch unreachable;
            i = i + 1;
        }
        std.io.getStdOut().writer().print("{s}\n", .{":  "}) catch unreachable;
        if (!(solve(cards))) {
            std.io.getStdOut().writer().print("{s}\n", .{"No solution"}) catch unreachable;
        }
        iter = iter + 1;
    }
}

pub fn main() void {
    const OP_NUM = 0;
    const OP_ADD = 1;
    const OP_SUB = 2;
    const OP_MUL = 3;
    const OP_DIV = 4;
    const n_cards = 4;
    const goal = 24;
    const digit_range = 9;
    mochi_main();
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
