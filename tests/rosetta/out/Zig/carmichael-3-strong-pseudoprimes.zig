// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn mod(n: i32, m: i32) i32 {
    return @mod((((@mod(n, m)) + m)), m);
}

fn isPrime(n: i32) bool {
    if (n < 2) {
        return false;
    }
    if (@mod(n, 2) == 0) {
        return (n == 2);
    }
    if (@mod(n, 3) == 0) {
        return (n == 3);
    }
    var d = 5; // i32
    while ((d * d) <= n) {
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 2);
        if (@mod(n, d) == 0) {
            return false;
        }
        d = (d + 4);
    }
    return true;
}

fn pad(n: i32, width: i32) []const u8 {
    var s = std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err); // []const u8
    while ((s).len < width) {
        s = _concat_string(" ", s);
    }
    return s;
}

fn carmichael(p1: i32) void {
    for (2 .. p1) |h3| {
        for (1 .. ((h3 + p1))) |d| {
            if ((@mod(((((h3 + p1)) * ((p1 - 1)))), d) == 0) and (mod((-p1 * p1), h3) == @mod(d, h3))) {
                const p2 = (1 + (((((p1 - 1)) * ((h3 + p1))) / d))); // f64
                if (!isPrime(p2)) {
                    continue;
                }
                const p3 = (1 + (((p1 * p2) / h3))); // f64
                if (!isPrime(p3)) {
                    continue;
                }
                if (@mod(((p2 * p3)), ((p1 - 1))) != 1) {
                    continue;
                }
                const c = ((p1 * p2) * p3); // f64
                std.debug.print("{any}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(pad(p1, 2), "   "), pad(p2, 4)), "   "), pad(p3, 5)), "     "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{c}) catch |err| handleError(err))});
            }
        }
    }
}

pub fn main() void {
    std.debug.print("The following are Carmichael munbers for p1 <= 61:\n\n", .{});
    std.debug.print("p1     p2      p3     product\n", .{});
    std.debug.print("==     ==      ==     =======\n", .{});
    for (2 .. 62) |p1| {
        if (isPrime(p1)) {
            carmichael(p1);
        }
    }
}
