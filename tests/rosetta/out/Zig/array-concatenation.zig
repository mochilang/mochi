// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var a = &[_]i32{
    1,
    2,
    3,
}; // []const i32
var b = &[_]i32{
    7,
    12,
    60,
}; // []const i32
var i = &[_]i32{
    1,
    2,
    3,
}; // []const i32
var j = &[_][]const u8{
    "Crosby",
    "Stills",
    "Nash",
    "Young",
}; // []const i32
var l = &[_]i32{
    1,
    2,
    3,
}; // []const i32
var m = &[_]i32{
    7,
    12,
    60,
}; // []const i32

fn concatInts(a: []const i32, b: []const i32) []const i32 {
    var out = std.ArrayList(i32).init(std.heap.page_allocator);
    for (a) |v| {
        out = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(out) catch |err| handleError(err); _tmp0.append(v) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    for (b) |v| {
        out = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(out) catch |err| handleError(err); _tmp1.append(v) catch |err| handleError(err); break :blk1 _tmp1.items; };
    }
    return out.items;
}

fn concatAny(a: []const i32, b: []const i32) []const i32 {
    var out = std.ArrayList(i32).init(std.heap.page_allocator);
    for (a) |v| {
        out = blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(out) catch |err| handleError(err); _tmp2.append(v) catch |err| handleError(err); break :blk2 _tmp2.items; };
    }
    for (b) |v| {
        out = blk3: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp3.deinit(); _tmp3.appendSlice(out) catch |err| handleError(err); _tmp3.append(v) catch |err| handleError(err); break :blk3 _tmp3.items; };
    }
    return out.items;
}

pub fn main() void {
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{concatInts(a, b)}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{concatAny(i, j)}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{concatInts(l, m)}) catch |err| handleError(err)});
}
