// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:13Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const target = 269696; // i32
const modulus = 1000000; // i32
var n = 1; // i32

pub fn main() void {
    while (true) {
        const square = (n * n); // i32
        const ending = @mod(square, modulus); // i32
        if (ending == target) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("The smallest number whose square ends with ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{target}) catch |err| handleError(err)), " is "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err))});
            break;
        }
        n = (n + 1);
    }
}
