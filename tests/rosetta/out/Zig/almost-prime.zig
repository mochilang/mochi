// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn kPrime(n: i32, k: i32) bool {
    var nf = 0; // i32
    var i = 2; // i32
    while (i <= n) {
        while (@mod(n, i) == 0) {
            if (nf == k) {
                return false;
            }
            nf = (nf + 1);
            n = (n / i);
        }
        i = (i + 1);
    }
    return (nf == k);
}

fn gen(k: i32, count: i32) []const i32 {
    var r = std.ArrayList(i32).init(std.heap.page_allocator);
    var n = 2; // i32
    while ((r).len < count) {
        if (kPrime(n, k)) {
            r = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(r) catch |err| handleError(err); _tmp0.append(n) catch |err| handleError(err); break :blk0 _tmp0.items; };
        }
        n = (n + 1);
    }
    return r.items;
}

fn user_main() void {
    var k = 1; // i32
    while (k <= 5) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{k}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{gen(k, 10)}) catch |err| handleError(err))});
        k = (k + 1);
    }
}

pub fn main() void {
    user_main();
}
