// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var partList = &[_][]const u8{
    "A",
    "B",
    "C",
    "D",
}; // []const []const u8
var nAssemblies = 3; // i32

fn lower(ch: []const u8) []const u8 {
    const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; // []const u8
    const lower = "abcdefghijklmnopqrstuvwxyz"; // []const u8
    var i = 0; // i32
    while (i < (upper).len) {
        if (std.mem.eql(u8, ch, substring(upper, i, (i + 1)))) {
            return substring(lower, i, (i + 1));
        }
        i = (i + 1);
    }
    return ch;
}

pub fn main() void {
    for (1 .. ((nAssemblies + 1))) |cycle| {
        std.debug.print("{s}\n", .{_concat_string("begin assembly cycle ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{cycle}) catch |err| handleError(err))});
        var a = ""; // []const u8
        for (partList) |p| {
            std.debug.print("{s}\n", .{_concat_string(p, " worker begins part")});
            std.debug.print("{s}\n", .{_concat_string(_concat_string(p, " worker completed "), std.ascii.lowerString(p))});
            a = _concat_string(a, std.ascii.lowerString(p));
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(a, " assembled.  cycle "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{cycle}) catch |err| handleError(err)), " complete")});
    }
}
