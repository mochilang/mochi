// Generated by Mochi Zig transpiler on 2025-07-23 09:39 +0700
const std = @import("std");

fn parseIntStr(str: []const u8) i64 {
    var i: i64 = 0;
    var neg = false;
    if (std.mem.len(str) > 0 and str[0..1] == "-") {
        neg = true;
        i = 1;
    }
    var n: i64 = 0;
    const digits = blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("0", 0) catch unreachable; m.put("1", 1) catch unreachable; m.put("2", 2) catch unreachable; m.put("3", 3) catch unreachable; m.put("4", 4) catch unreachable; m.put("5", 5) catch unreachable; m.put("6", 6) catch unreachable; m.put("7", 7) catch unreachable; m.put("8", 8) catch unreachable; m.put("9", 9) catch unreachable; break :blk m; };
    while (i < std.mem.len(str)) {
        n = n * 10 + digits.get(str[i..i + 1]).?;
        i = i + 1;
    }
    if (neg) {
        n = 0 - n;
    }
    return n;
}

fn mochi_main() void {
    var total: i64 = 0;
    var computer = @mod(_now(), 2) == 0;
    std.io.getStdOut().writer().print("{s}\n", .{"Enter q to quit at any time\n"}) catch unreachable;
    if (computer) {
        std.io.getStdOut().writer().print("{s}\n", .{"The computer will choose first"}) catch unreachable;
    } else {
        std.io.getStdOut().writer().print("{s}\n", .{"You will choose first"}) catch unreachable;
    }
    std.io.getStdOut().writer().print("{s}\n", .{"\n\nRunning total is now 0\n\n"}) catch unreachable;
    var round: i64 = 1;
    var done = false;
    while (!(done)) {
        std.io.getStdOut().writer().print("{any}\n", .{_concat_string(_concat_string("ROUND ", _str(round)), ":\n\n")}) catch unreachable;
        var i: i64 = 0;
        while (i < 2 and !(done)) {
            if (computer) {
                var choice: i64 = 0;
                if (total < 18) {
                    choice = @mod(_now(), 3) + 1;
                } else {
                    choice = 21 - total;
                }
                total = total + choice;
                std.io.getStdOut().writer().print("{any}\n", .{_concat_string("The computer chooses ", _str(choice))}) catch unreachable;
                std.io.getStdOut().writer().print("{any}\n", .{_concat_string("Running total is now ", _str(total))}) catch unreachable;
                if (total == 21) {
                    std.io.getStdOut().writer().print("{s}\n", .{"\nSo, commiserations, the computer has won!"}) catch unreachable;
                    done = true;
                }
            } else {
                while (true) {
                    std.io.getStdOut().writer().print("{s}\n", .{"Your choice 1 to 3 : "}) catch unreachable;
                    const line = input();
                    if (line == "q" or line == "Q") {
                        std.io.getStdOut().writer().print("{s}\n", .{"OK, quitting the game"}) catch unreachable;
                        done = true;
                        break;
                    }
                    var num = parseIntStr(line);
                    if (num < 1 or num > 3) {
                        if (total + num > 21) {
                            std.io.getStdOut().writer().print("{s}\n", .{"Too big, try again"}) catch unreachable;
                        } else {
                            std.io.getStdOut().writer().print("{s}\n", .{"Out of range, try again"}) catch unreachable;
                        }
                        continue;
                    }
                    if (total + num > 21) {
                        std.io.getStdOut().writer().print("{s}\n", .{"Too big, try again"}) catch unreachable;
                        continue;
                    }
                    total = total + num;
                    std.io.getStdOut().writer().print("{any}\n", .{_concat_string("Running total is now ", _str(total))}) catch unreachable;
                    break;
                }
                if (total == 21) {
                    std.io.getStdOut().writer().print("{s}\n", .{"\nSo, congratulations, you've won!"}) catch unreachable;
                    done = true;
                }
            }
            std.io.getStdOut().writer().print("{s}\n", .{"\n"}) catch unreachable;
            computer = !(computer);
            i = i + 1;
        }
        round = round + 1;
    }
}

pub fn main() void {
    mochi_main();
}

var _now_seed: i64 = 0;
var _now_seeded: bool = false;
fn _now() i64 {
    if (_now_seeded) {
        _now_seed = @mod(_now_seed * 1664525 + 1013904223, 2147483647);
        return _now_seed;
    }
    if (! _now_seeded) {
        if (std.process.getEnvVarOwned(std.heap.page_allocator, "MOCHI_NOW_SEED")) |s| {
            defer std.heap.page_allocator.free(s);
            if (std.fmt.parseInt(i64, s, 10)) |v| {
                _now_seed = v;
                _now_seeded = true;
                return _now_seed;
            } else |_| {}
        } else |_| {}
    }
    return @as(i64, @intCast(std.time.nanoTimestamp()));
}

fn _str(v: anytype) []const u8 {
    return std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{v}) catch unreachable;
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
