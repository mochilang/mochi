// Generated by Mochi compiler v0.10.30 on 2025-07-19T00:25:46Z
const std = @import("std");

fn _input() []const u8 {
    var buf = std.ArrayList(u8).init(std.heap.page_allocator);
    defer buf.deinit();
    _ = std.io.getStdIn().reader().readUntilDelimiterOrEof(&buf, '
') catch return "";
    return std.mem.trim(u8, buf.items, "
");
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn parseIntStr(str: []const u8) i32 {
    var i: i32 = 0; // i32
    var neg: bool = false; // bool
    if ((@as(i32, @intCast((str).len)) > 0) and std.mem.eql(u8, str[0..1], "-")) {
        neg = true;
        i = 1;
    }
    var n: i32 = 0; // i32
    const Digits = struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
};
    const digits = Digits{
    ._ = 0,
    ._ = 1,
    ._ = 2,
    ._ = 3,
    ._ = 4,
    ._ = 5,
    ._ = 6,
    ._ = 7,
    ._ = 8,
    ._ = 9,
}; // struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
}
    while (i < @as(i32, @intCast((str).len))) {
        n = ((n * 10) + digits[_slice_string(str, i, (i + 1), 1)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

fn user_main() void {
    var total: i32 = 0; // i32
    var computer: bool = (@mod(std.time.nanoTimestamp(), 2) == 0); // bool
    std.debug.print("Enter q to quit at any time\n\n", .{});
    if (computer) {
        std.debug.print("The computer will choose first\n", .{});
    } else {
        std.debug.print("You will choose first\n", .{});
    }
    std.debug.print("\n\nRunning total is now 0\n\n\n", .{});
    var round: i32 = 1; // i32
    var done: bool = false; // bool
    while (!done) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string("ROUND ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{round}) catch |err| handleError(err)), ":\n\n")});
        var i: i32 = 0; // i32
        while ((i < 2) and (!done)) {
            if (computer) {
                var choice: i32 = 0; // i32
                if (total < 18) {
                    choice = (@mod(std.time.nanoTimestamp(), 3) + 1);
                } else {
                    choice = (21 - total);
                }
                total = (total + choice);
                std.debug.print("{s}\n", .{_concat_string("The computer chooses ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{choice}) catch |err| handleError(err))});
                std.debug.print("{s}\n", .{_concat_string("Running total is now ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{total}) catch |err| handleError(err))});
                if (total == 21) {
                    std.debug.print("\nSo, commiserations, the computer has won!\n", .{});
                    done = true;
                }
            } else {
                while (true) {
                    std.debug.print("Your choice 1 to 3 : \n", .{});
                    const line = _input(); // []const u8
                    if (std.mem.eql(u8, line, "q") or std.mem.eql(u8, line, "Q")) {
                        std.debug.print("OK, quitting the game\n", .{});
                        done = true;
                        break;
                    }
                    var num: i32 = parseIntStr(line); // i32
                    if ((num < 1) or (num > 3)) {
                        if ((total + num) > 21) {
                            std.debug.print("Too big, try again\n", .{});
                        } else {
                            std.debug.print("Out of range, try again\n", .{});
                        }
                        continue;
                    }
                    if ((total + num) > 21) {
                        std.debug.print("Too big, try again\n", .{});
                        continue;
                    }
                    total = (total + num);
                    std.debug.print("{s}\n", .{_concat_string("Running total is now ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{total}) catch |err| handleError(err))});
                    break;
                }
                if (total == 21) {
                    std.debug.print("\nSo, congratulations, you've won!\n", .{});
                    done = true;
                }
            }
            std.debug.print("\n\n", .{});
            computer = !computer;
            i = (i + 1);
        }
        round = (round + 1);
    }
}

pub fn main() void {
    user_main();
}
