// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_list(comptime T: type, v: []const T, start: i32, end: i32, step: i32) []T {
    var s = start;
    var e = end;
    var st = step;
    const n: i32 = @as(i32, @intCast(v.len));
    if (s < 0) s += n;
    if (e < 0) e += n;
    if (st == 0) st = 1;
    if (s < 0) s = 0;
    if (e > n) e = n;
    if (st > 0 and e < s) e = s;
    if (st < 0 and e > s) e = s;
    var res = std.ArrayList(T).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = s;
    while ((st > 0 and i < e) or (st < 0 and i > e)) : (i += st) {
        res.append(v[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var b = &[_]i32{
    98,
    105,
    110,
    97,
    114,
    121,
}; // []const i32
var c = b; // []const i32
var d: []const i32 = &[]i32{};
var i = 0; // i32
var z = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(b) catch |err| handleError(err); _tmp0.append(122) catch |err| handleError(err); break :blk0 _tmp0.items; }; // []const i32
var sub = _slice_list(i32, b, 1, 3, 1); // []const i32
var f: []const i32 = &[]i32{};
var rem: []const i32 = &[]i32{};

fn char(n: i32) []const u8 {
    const letters = "abcdefghijklmnopqrstuvwxyz"; // []const u8
    const idx = (n - 97); // i32
    if ((idx < 0) or (idx >= (letters).len)) {
        return "?";
    }
    return substring(letters, idx, (idx + 1));
}

fn fromBytes(bs: []const i32) []const u8 {
    var s = ""; // []const u8
    var i = 0; // i32
    while (i < (bs).len) {
        s = _concat_string(s, char(bs[i]));
        i = (i + 1);
    }
    return s;
}

pub fn main() void {
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{b}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{c}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{}", .{(b == c)}) catch |err| handleError(err)});
    while (i < (b).len) {
        d = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(d) catch |err| handleError(err); _tmp1.append(b[i]) catch |err| handleError(err); break :blk1 _tmp1.items; };
        i = (i + 1);
    }
    d.items[1] = 97;
    d.items[4] = 110;
    std.debug.print("{s}\n", .{fromBytes(b)});
    std.debug.print("{s}\n", .{fromBytes(d)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{}", .{((b).len == 0)}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{fromBytes(z)});
    std.debug.print("{s}\n", .{fromBytes(sub)});
    i = 0;
    while (i < (d).len) {
        const val = d[i]; // i32
        if (val == 110) {
            f = blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(f) catch |err| handleError(err); _tmp2.append(109) catch |err| handleError(err); break :blk2 _tmp2.items; };
        } else {
            f = blk3: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp3.deinit(); _tmp3.appendSlice(f) catch |err| handleError(err); _tmp3.append(val) catch |err| handleError(err); break :blk3 _tmp3.items; };
        }
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string(fromBytes(d), " -> "), fromBytes(f))});
    rem = blk4: { var _tmp4 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp4.deinit(); _tmp4.appendSlice(rem) catch |err| handleError(err); _tmp4.append(b[0]) catch |err| handleError(err); break :blk4 _tmp4.items; };
    i = 3;
    while (i < (b).len) {
        rem = blk5: { var _tmp5 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp5.deinit(); _tmp5.appendSlice(rem) catch |err| handleError(err); _tmp5.append(b[i]) catch |err| handleError(err); break :blk5 _tmp5.items; };
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{fromBytes(rem)});
}
