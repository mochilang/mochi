// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:01:15Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var b = &[_]i32{
    98,
    105,
    110,
    97,
    114,
    121,
}; // []const i32
var c = b; // []const i32
var d: []const i32 = &[]i32{};
var i = 0; // i32
var z = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(b) catch |err| handleError(err); _tmp0.append(122) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; }; // []const i32
var sub = b[1..3]; // []const i32
var f: []const i32 = &[]i32{};
var rem: []const i32 = &[]i32{};

fn char(n: i32) []const u8 {
    const letters = "abcdefghijklmnopqrstuvwxyz"; // []const u8
    const idx = (n - 97); // i32
    if ((idx < 0) or (idx >= @as(i32, @intCast((letters).len)))) {
        return "?";
    }
    return _slice_string(letters, idx, (idx + 1), 1);
}

fn fromBytes(bs: []const i32) []const u8 {
    var s = ""; // []const u8
    var i = 0; // i32
    while (i < @as(i32, @intCast((bs).len))) {
        s = _concat_string(s, char(bs[i]));
        i = (i + 1);
    }
    return s;
}

pub fn main() void {
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{b}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{c}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{s}", .{if ((b == c)) "true" else "false"}) catch |err| handleError(err)});
    while (i < @as(i32, @intCast((b).len))) {
        d = blk1: { var _tmp1 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(d) catch |err| handleError(err); _tmp1.append(b[i]) catch |err| handleError(err); const res = _tmp1.toOwnedSlice() catch |err| handleError(err); break :blk1 res; };
        i = (i + 1);
    }
    d.items[1] = 97;
    d.items[4] = 110;
    std.debug.print("{s}\n", .{fromBytes(b)});
    std.debug.print("{s}\n", .{fromBytes(d)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{s}", .{if ((@as(i32, @intCast((b).len)) == 0)) "true" else "false"}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{fromBytes(z)});
    std.debug.print("{s}\n", .{fromBytes(sub)});
    i = 0;
    while (i < @as(i32, @intCast((d).len))) {
        const val = d[i]; // i32
        if (val == 110) {
            f = blk2: { var _tmp2 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(f) catch |err| handleError(err); _tmp2.append(109) catch |err| handleError(err); const res = _tmp2.toOwnedSlice() catch |err| handleError(err); break :blk2 res; };
        } else {
            f = blk3: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp3.deinit(); _tmp3.appendSlice(f) catch |err| handleError(err); _tmp3.append(val) catch |err| handleError(err); const res = _tmp3.toOwnedSlice() catch |err| handleError(err); break :blk3 res; };
        }
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{_concat_string(_concat_string(fromBytes(d), " -> "), fromBytes(f))});
    rem = blk4: { var _tmp4 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp4.deinit(); _tmp4.appendSlice(rem) catch |err| handleError(err); _tmp4.append(b[0]) catch |err| handleError(err); const res = _tmp4.toOwnedSlice() catch |err| handleError(err); break :blk4 res; };
    i = 3;
    while (i < @as(i32, @intCast((b).len))) {
        rem = blk5: { var _tmp5 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp5.deinit(); _tmp5.appendSlice(rem) catch |err| handleError(err); _tmp5.append(b[i]) catch |err| handleError(err); const res = _tmp5.toOwnedSlice() catch |err| handleError(err); break :blk5 res; };
        i = (i + 1);
    }
    std.debug.print("{s}\n", .{fromBytes(rem)});
}
