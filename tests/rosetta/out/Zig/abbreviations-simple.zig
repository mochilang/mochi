// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn _join_strings(parts: []const []const u8, sep: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.join(u8, sep, parts, alloc) catch |err| handleError(err);
}

fn fields(s: []const u8) []const []const u8 {
    var words = std.ArrayList(u8).init(std.heap.page_allocator);
    var cur = ""; // []const u8
    var i = 0; // i32
    while (i < (s).len) {
        const ch: i32 = substring(s, i, (i + 1)); // i32
        if ((std.mem.eql(u8, ch, " ") or std.mem.eql(u8, ch, "\n")) or std.mem.eql(u8, ch, "\t")) {
            if ((cur).len > 0) {
                words = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(words) catch |err| handleError(err); _tmp0.append(cur) catch |err| handleError(err); break :blk0 _tmp0.items; };
                cur = "";
            }
        } else {
            cur = _concat_string(cur, ch);
        }
        i = (i + 1);
    }
    if ((cur).len > 0) {
        words = blk1: { var _tmp1 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(words) catch |err| handleError(err); _tmp1.append(cur) catch |err| handleError(err); break :blk1 _tmp1.items; };
    }
    return words.items;
}

fn padRight(s: []const u8, width: i32) []const u8 {
    var out = s; // []const u8
    var i = (s).len; // i32
    while (i < width) {
        out = _concat_string(out, " ");
        i = (i + 1);
    }
    return out;
}

fn join(xs: []const []const u8, sep: []const u8) []const u8 {
    var res = ""; // []const u8
    var i = 0; // i32
    while (i < (xs).len) {
        if (i > 0) {
            res = _concat_string(res, sep);
        }
        res = _concat_string(res, xs[i]);
        i = (i + 1);
    }
    return res;
}

fn parseIntStr(str: []const u8) i32 {
    var i = 0; // i32
    var neg = false; // bool
    if (((str).len > 0) and std.mem.eql(u8, _slice_string(str, 0, 1, 1), "-")) {
        neg = true;
        i = 1;
    }
    var n = 0; // i32
    const Digits = struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
};
    const digits = Digits{
    ._ = 0,
    ._ = 1,
    ._ = 2,
    ._ = 3,
    ._ = 4,
    ._ = 5,
    ._ = 6,
    ._ = 7,
    ._ = 8,
    ._ = 9,
}; // struct {
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
    _: i32,
}
    while (i < (str).len) {
        n = ((n * 10) + digits[_slice_string(str, i, (i + 1), 1)]);
        i = (i + 1);
    }
    if (neg) {
        n = -n;
    }
    return n;
}

fn isDigits(s: []const u8) bool {
    if ((s).len == 0) {
        return false;
    }
    var i = 0; // i32
    while (i < (s).len) {
        const ch: i32 = substring(s, i, (i + 1)); // i32
        if (std.mem.order(u8, ch, "0") == .lt or std.mem.order(u8, ch, "9") == .gt) {
            return false;
        }
        i = (i + 1);
    }
    return true;
}

fn readTable(table: []const u8) std.AutoHashMap([]const u8, i32) {
    const toks = fields(table); // []const []const u8
    var cmds = std.ArrayList(u8).init(std.heap.page_allocator);
    var mins = std.ArrayList(i32).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < (toks).len) {
        const cmd = toks[i]; // []const u8
        var minlen = (cmd).len; // i32
        i = (i + 1);
        if ((i < (toks).len) and isDigits(toks[i])) {
            const num = parseIntStr(toks[i]); // i32
            if ((num >= 1) and (num < (cmd).len)) {
                minlen = num;
                i = (i + 1);
            }
        }
        cmds = blk2: { var _tmp2 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(cmds) catch |err| handleError(err); _tmp2.append(cmd) catch |err| handleError(err); break :blk2 _tmp2.items; };
        mins = blk3: { var _tmp3 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp3.deinit(); _tmp3.appendSlice(mins) catch |err| handleError(err); _tmp3.append(minlen) catch |err| handleError(err); break :blk3 _tmp3.items; };
    }
    return struct {
    commands: []const []const u8,
    mins: []const i32,
}{
    .commands = cmds,
    .mins = mins,
};
}

fn validate(commands: []const []const u8, mins: []const i32, words: []const []const u8) []const []const u8 {
    var results = std.ArrayList(u8).init(std.heap.page_allocator);
    var wi = 0; // i32
    while (wi < (words).len) {
        const w = words[wi]; // []const u8
        var found = false; // bool
        const wlen = (w).len; // i32
        var ci = 0; // i32
        while (ci < (commands).len) {
            const cmd = commands[ci]; // []const u8
            if (((mins[ci] != 0) and (wlen >= mins[ci])) and (wlen <= (cmd).len)) {
                const c = upper(cmd); // []const u8
                const ww = upper(w); // []const u8
                if (std.mem.eql(u8, substring(c, 0, wlen), ww)) {
                    results = blk4: { var _tmp4 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp4.deinit(); _tmp4.appendSlice(results) catch |err| handleError(err); _tmp4.append(c) catch |err| handleError(err); break :blk4 _tmp4.items; };
                    found = true;
                    break;
                }
            }
            ci = (ci + 1);
        }
        if (!found) {
            results = blk5: { var _tmp5 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp5.deinit(); _tmp5.appendSlice(results) catch |err| handleError(err); _tmp5.append("*error*") catch |err| handleError(err); break :blk5 _tmp5.items; };
        }
        wi = (wi + 1);
    }
    return results.items;
}

fn user_main() void {
    const table = _concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 ", "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "), "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "), "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "), "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "), "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "), "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "), "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "); // []const u8
    const sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"; // []const u8
    const tbl = readTable(table); // std.StringHashMap(i32)
    const commands = @as([]const []const u8, tbl["commands"]); // []const []const u8
    const mins = @as([]const i32, tbl["mins"]); // []const i32
    const words = fields(sentence); // []const []const u8
    const results = validate(commands, mins, words); // []const []const u8
    var out1 = "user words:"; // []const u8
    var k = 0; // i32
    while (k < (words).len) {
        out1 = _concat_string(out1, " ");
        if (k < ((words).len - 1)) {
            out1 = _concat_string(out1, padRight(words[k], (results[k]).len));
        } else {
            out1 = _concat_string(out1, words[k]);
        }
        k = (k + 1);
    }
    std.debug.print("{s}\n", .{out1});
    std.debug.print("{s}\n", .{_concat_string("full words: ", _join_strings(results, " "))});
}

pub fn main() void {
    user_main();
}
