// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn user_main() void {
    var pkg_dog = "Salt"; // []const u8
    var Dog = "Pepper"; // []const u8
    var pkg_DOG = "Mustard"; // []const u8
    const packageSees = fn (d1: []const u8, d2: []const u8, d3: []const u8) std.AutoHashMap([]const u8, bool) {
        std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Package sees: ", d1), " "), d2), " "), d3)});
        return struct {
        pkg_dog: bool,
        Dog: bool,
        pkg_DOG: bool,
    }{
        .pkg_dog = true,
        .Dog = true,
        .pkg_DOG = true,
    };
};
    var d = packageSees(pkg_dog, Dog, pkg_DOG); // std.StringHashMap(bool)
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d.count()}) catch |err| handleError(err)), " dogs.\n")});
    var dog = "Benjamin"; // []const u8
    d = packageSees(pkg_dog, Dog, pkg_DOG);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Main sees:   ", dog), " "), Dog), " "), pkg_DOG)});
    _ = d.put("dog", true) catch |err| handleError(err);
    _ = d.put("Dog", true) catch |err| handleError(err);
    _ = d.put("pkg_DOG", true) catch |err| handleError(err);
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d.count()}) catch |err| handleError(err)), " dogs.\n")});
    Dog = "Samba";
    d = packageSees(pkg_dog, Dog, pkg_DOG);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Main sees:   ", dog), " "), Dog), " "), pkg_DOG)});
    _ = d.put("dog", true) catch |err| handleError(err);
    _ = d.put("Dog", true) catch |err| handleError(err);
    _ = d.put("pkg_DOG", true) catch |err| handleError(err);
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d.count()}) catch |err| handleError(err)), " dogs.\n")});
    var DOG = "Bernie"; // []const u8
    d = packageSees(pkg_dog, Dog, pkg_DOG);
    std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Main sees:   ", dog), " "), Dog), " "), DOG)});
    _ = d.put("dog", true) catch |err| handleError(err);
    _ = d.put("Dog", true) catch |err| handleError(err);
    _ = d.put("pkg_DOG", true) catch |err| handleError(err);
    _ = d.put("DOG", true) catch |err| handleError(err);
    std.debug.print("{s}\n", .{_concat_string(_concat_string("There are ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{d.count()}) catch |err| handleError(err)), " dogs.")});
}

pub fn main() void {
    user_main();
}
