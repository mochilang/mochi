// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PI = 3.141592653589793; // f64
const L = 10.0; // f64
const G = 9.81; // f64
const dt = 0.2; // f64
const phi0 = (PI / 4.0); // f64
const omega = sqrtApprox((G / L)); // f64
var t = 0.0; // f64

fn sinApprox(x: f64) f64 {
    var term = x; // f64
    var sum = x; // f64
    var n = 1; // i32
    while (n <= 10) {
        const denom = @as(f64, ((((2 * n)) * (((2 * n) + 1))))); // f64
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

fn cosApprox(x: f64) f64 {
    var term = 1.0; // f64
    var sum = 1.0; // f64
    var n = 1; // i32
    while (n <= 10) {
        const denom = @as(f64, (((((2 * n) - 1)) * ((2 * n))))); // f64
        term = (((-term * x) * x) / denom);
        sum = (sum + term);
        n = (n + 1);
    }
    return sum;
}

fn sqrtApprox(x: f64) f64 {
    var guess = x; // f64
    var i = 0; // i32
    while (i < 10) {
        guess = (((guess + (x / guess))) / 2.0);
        i = (i + 1);
    }
    return guess;
}

pub fn main() void {
    for (0 .. 10) |step| {
        const phi = (phi0 * cosApprox((omega * t))); // f64
        const pos = @as(i32, (((10.0 * sinApprox(phi)) + 0.5))); // i32
        std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{pos}) catch |err| handleError(err)});
        t = (t + dt);
    }
}
