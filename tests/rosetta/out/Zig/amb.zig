// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _slice_string(s: []const u8, start: i32, end: i32, step: i32) []const u8 {
    var sidx = start;
    var eidx = end;
    var stp = step;
    const n: i32 = @as(i32, @intCast(s.len));
    if (sidx < 0) sidx += n;
    if (eidx < 0) eidx += n;
    if (stp == 0) stp = 1;
    if (sidx < 0) sidx = 0;
    if (eidx > n) eidx = n;
    if (stp > 0 and eidx < sidx) eidx = sidx;
    if (stp < 0 and eidx > sidx) eidx = sidx;
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    defer res.deinit();
    var i: i32 = sidx;
    while ((stp > 0 and i < eidx) or (stp < 0 and i > eidx)) : (i += stp) {
        res.append(s[@as(usize, @intCast(i))]) catch |err| handleError(err);
    }
    return res.toOwnedSlice() catch |err| handleError(err);
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn amb(wordsets: []const []const []const u8, res: []const []const u8, idx: i32) bool {
    if (idx == @as(i32, @intCast((wordsets).len))) {
        return true;
    }
    var prev = ""; // []const u8
    if (idx > 0) {
        prev = res[(idx - 1)];
    }
    var i = 0; // i32
    while (i < @as(i32, @intCast((wordsets[idx]).len))) {
        const w = wordsets[idx][i]; // []const u8
        if ((idx == 0) or (_slice_string(prev, (@as(i32, @intCast((prev).len)) - 1), @as(i32, @intCast((prev).len)), 1) == w[0..1])) {
            res.items[idx] = w;
            if (amb(wordsets, res, (idx + 1))) {
                return true;
            }
        }
        i = (i + 1);
    }
    return false;
}

fn user_main() void {
    const wordset = &[_][]const []const u8{
    &[_][]const u8{
    "the",
    "that",
    "a",
},
    &[_][]const u8{
    "frog",
    "elephant",
    "thing",
},
    &[_][]const u8{
    "walked",
    "treaded",
    "grows",
},
    &[_][]const u8{
    "slowly",
    "quickly",
},
}; // []const []const []const u8
    var res = std.ArrayList(u8).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < @as(i32, @intCast((wordset).len))) {
        res = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(res) catch |err| handleError(err); _tmp0.append("") catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
        i = (i + 1);
    }
    if (amb(wordset, res, 0)) {
        var out = _concat_string("[", res[0]); // []const u8
        var j = 1; // i32
        while (j < @as(i32, @intCast((res).len))) {
            out = _concat_string(_concat_string(out, " "), res[j]);
            j = (j + 1);
        }
        out = _concat_string(out, "]");
        std.debug.print("{s}\n", .{out});
    } else {
        std.debug.print("No amb found\n", .{});
    }
}

pub fn main() void {
    user_main();
}
