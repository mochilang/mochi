// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn search_user(directory: std.AutoHashMap([]const u8, []const []const u8), username: []const u8) []const []const u8 {
    return directory[username];
}

fn user_main() void {
    const Client = struct {
    Base: []const u8,
    Host: []const u8,
    Port: i32,
    GroupFilter: []const u8,
};
    const client = Client{
    .Base = "dc=example,dc=com",
    .Host = "ldap.example.com",
    .Port = 389,
    .GroupFilter = "(memberUid=%s)",
}; // struct {
    Base: []const u8,
    Host: []const u8,
    Port: i32,
    GroupFilter: []const u8,
}
    const Directory = struct {
    username: []const []const u8,
    john: []const []const u8,
};
    const directory = Directory{
    .username = &[_][]const u8{
    "admins",
    "users",
},
    .john = &[_][]const u8{"users"},
}; // struct {
    username: []const []const u8,
    john: []const []const u8,
}
    const groups: i32 = search_user(directory, "username"); // i32
    if ((groups).len > 0) {
        var out = "Groups: ["; // []const u8
        var i = 0; // i32
        while (i < (groups).len) {
            out = _concat_string(_concat_string(_concat_string(out, "\""), groups[i]), "\"");
            if (i < ((groups).len - 1)) {
                out = _concat_string(out, ", ");
            }
            i = (i + 1);
        }
        out = _concat_string(out, "]");
        std.debug.print("{s}\n", .{out});
    } else {
        std.debug.print("User not found\n", .{});
    }
}

pub fn main() void {
    user_main();
}
