// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn each(xs: []const i32, f: fn(i32) void) void {
    for (xs) |x| {
        f(x);
    }
}

fn Map(xs: []const i32, f: fn(i32) i32) []const i32 {
    var r = std.ArrayList(i32).init(std.heap.page_allocator);
    for (xs) |x| {
        r = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(r) catch |err| handleError(err); _tmp0.append(f(x)) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    return r.items;
}

fn user_main() void {
    const s: []const i32 = &[_]i32{
    1,
    2,
    3,
    4,
    5,
}; // []const i32
    each(s, fn (i: i32) i32 {
        return std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{(i * i)}) catch |err| handleError(err)});
});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{Map(s, fn (i: i32) i32 {
        return (i * i);
})}) catch |err| handleError(err)});
}

pub fn main() void {
    user_main();
}
