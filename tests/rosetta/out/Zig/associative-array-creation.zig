// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn removeKey(m: std.AutoHashMap([]const u8, i32), k: []const u8) std.AutoHashMap([]const u8, i32) {
    var out = std.AutoHashMap([]const u8, i32).init(std.heap.page_allocator);
    var _tmp0 = m.keyIterator();
    while (_tmp0.next()) |k_ptr| {
        const key = k_ptr.*;
        if (!std.mem.eql(u8, key, k)) {
            _ = out.put(key, m[key]) catch |err| handleError(err);
        }
    }
    return out;
}

fn main() void {
    var x: std.StringHashMap(i32) = 0; // std.StringHashMap(i32)
    x = struct {}{  };
    _ = x.put("foo", 3) catch |err| handleError(err);
    const y1 = x["bar"]; // i32
    const ok = x.contains("bar"); // bool
    std.debug.print("{d}\n", .{y1});
    std.debug.print("{}\n", .{ok});
    x = removeKey(x, "foo");
    x = struct {
    foo: i32,
    bar: i32,
    baz: i32,
}{
    .foo = 2,
    .bar = 42,
    .baz = -1,
};
    std.debug.print("{d} {d} {d}\n", .{x["foo"], x["bar"], x["baz"]});
}

pub fn main() void {
    main();
}
