// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn toBin(n: i32) []const u8 {
    if (n == 0) {
        return "0";
    }
    var bits = ""; // []const u8
    var x: i32 = n; // i32
    while (x > 0) {
        bits = _concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{@mod(x, 2)}) catch |err| handleError(err), bits);
        x = @as(i32, ((x / 2)));
    }
    return bits;
}

pub fn main() void {
    for (0 .. 16) |i| {
        std.debug.print("{s}\n", .{toBin(i)});
    }
}
