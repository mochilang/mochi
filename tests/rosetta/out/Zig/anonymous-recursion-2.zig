// Generated by Mochi compiler v0.10.28 on 2025-07-18T10:00:27Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn fib(n: i32) i32 {
    if (n < 2) {
        return n;
    }
    var a = 0; // i32
    var b = 1; // i32
    var i = 1; // i32
    while (i < n) {
        const t = (a + b); // i32
        a = b;
        b = t;
        i = (i + 1);
    }
    return b;
}

fn user_main() void {
    for (&[_]i32{
    -1,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
}) |i| {
        if (i < 0) {
            std.debug.print("{s}\n", .{_concat_string(_concat_string("fib(", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err)), ") returned error: negative n is forbidden")});
        } else {
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string("fib(", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{i}) catch |err| handleError(err)), ") = "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{fib(i)}) catch |err| handleError(err))});
        }
    }
}

pub fn main() void {
    user_main();
}
