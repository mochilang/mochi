// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

const Complex = struct {
    re: f64,
    im: f64,
};

const a = Complex{
    .re = 1.0,
    .im = 1.0,
}; // Complex
const b = Complex{
    .re = 3.14159,
    .im = 1.25,
}; // Complex

fn add(a: *Complex, b: *Complex) Complex {
    return Complex{
    .re = (a.re + b.re),
    .im = (a.im + b.im),
};
}

fn mul(a: *Complex, b: *Complex) Complex {
    return Complex{
    .re = ((a.re * b.re) - (a.im * b.im)),
    .im = ((a.re * b.im) + (a.im * b.re)),
};
}

fn neg(a: *Complex) Complex {
    return Complex{
    .re = -a.re,
    .im = -a.im,
};
}

fn inv(a: *Complex) Complex {
    const denom = ((a.re * a.re) + (a.im * a.im)); // f64
    return Complex{
    .re = (a.re / denom),
    .im = (-a.im / denom),
};
}

fn conj(a: *Complex) Complex {
    return Complex{
    .re = a.re,
    .im = -a.im,
};
}

fn cstr(a: *Complex) []const u8 {
    var s = _concat_string("(", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a.re}) catch |err| handleError(err)); // []const u8
    if (a.im >= 0) {
        s = _concat_string(_concat_string(_concat_string(s, "+"), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a.im}) catch |err| handleError(err)), "i)");
    } else {
        s = _concat_string(_concat_string(s, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{a.im}) catch |err| handleError(err)), "i)");
    }
    return s;
}

pub fn main() void {
    std.debug.print("{s}\n", .{_concat_string("a:       ", cstr(&a))});
    std.debug.print("{s}\n", .{_concat_string("b:       ", cstr(&b))});
    std.debug.print("{s}\n", .{_concat_string("a + b:   ", cstr(&add(&a, &b)))});
    std.debug.print("{s}\n", .{_concat_string("a * b:   ", cstr(&mul(&a, &b)))});
    std.debug.print("{s}\n", .{_concat_string("-a:      ", cstr(&neg(&a)))});
    std.debug.print("{s}\n", .{_concat_string("1 / a:   ", cstr(&inv(&a)))});
    std.debug.print("{s}\n", .{_concat_string("aÌ…:       ", cstr(&conj(&a)))});
}
