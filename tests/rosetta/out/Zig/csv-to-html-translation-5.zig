// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn _split_string(s: []const u8, sep: []const u8) []const []const u8 {
    var res = std.ArrayList([]const u8).init(std.heap.page_allocator);
    defer res.deinit();
    var it = std.mem.split(u8, s, sep);
    while (it.next()) |p| { res.append(p) catch |err| handleError(err); }
    return res.toOwnedSlice() catch |err| handleError(err);
}

const c = _concat_string(_concat_string(_concat_string(_concat_string("Character,Speech\nThe multitude,The messiah! Show us the messiah!\n", "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!"); // []const u8
var rows: []const []const []const u8 = &[]i32{};

fn split(s: []const u8, sep: []const u8) []const []const u8 {
    var out = std.ArrayList(u8).init(std.heap.page_allocator);
    var start = 0; // i32
    var i = 0; // i32
    const n = (sep).len; // i32
    while (i <= ((s).len - n)) {
        if (std.mem.eql(u8, substring(s, i, (i + n)), sep)) {
            out = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(out) catch |err| handleError(err); _tmp0.append(substring(s, start, i)) catch |err| handleError(err); break :blk0 _tmp0.items; };
            i = (i + n);
            start = i;
        } else {
            i = (i + 1);
        }
    }
    out = blk1: { var _tmp1 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(out) catch |err| handleError(err); _tmp1.append(substring(s, start, (s).len)) catch |err| handleError(err); break :blk1 _tmp1.items; };
    return out.items;
}

fn htmlEscape(s: []const u8) []const u8 {
    var out = ""; // []const u8
    var i = 0; // i32
    while (i < (s).len) {
        const ch: i32 = substring(s, i, (i + 1)); // i32
        if (std.mem.eql(u8, ch, "&")) {
            out = _concat_string(out, "&amp;");
        } else         if (std.mem.eql(u8, ch, "<")) {
            out = _concat_string(out, "&lt;");
        } else         if (std.mem.eql(u8, ch, ">")) {
            out = _concat_string(out, "&gt;");
        } else {
            out = _concat_string(out, ch);
        }
        i = (i + 1);
    }
    return out;
}

pub fn main() void {
    for (_split_string(c, "\n")) |line| {
        rows = blk2: { var _tmp2 = std.ArrayList([]const []const u8).init(std.heap.page_allocator); defer _tmp2.deinit(); _tmp2.appendSlice(rows) catch |err| handleError(err); _tmp2.append(_split_string(line, ",")) catch |err| handleError(err); break :blk2 _tmp2.items; };
    }
    std.debug.print("<table>\n", .{});
    for (rows) |row| {
        var cells = ""; // []const u8
        for (row) |cell| {
            cells = _concat_string(_concat_string(_concat_string(cells, "<td>"), htmlEscape(cell)), "</td>");
        }
        std.debug.print("{s}\n", .{_concat_string(_concat_string("    <tr>", cells), "</tr>")});
    }
    std.debug.print("</table>\n", .{});
}
