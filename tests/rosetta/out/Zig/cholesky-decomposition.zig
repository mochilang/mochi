// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn sqrtApprox(x: f64) f64 {
    var guess = x; // f64
    var i = 0; // i32
    while (i < 20) {
        guess = (((guess + (x / guess))) / 2.0);
        i = (i + 1);
    }
    return guess;
}

fn cholesky(a: []const []const f64) []const []const f64 {
    const n = (a).len; // i32
    var l = std.ArrayList(f64).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < n) {
        var row = std.ArrayList(f64).init(std.heap.page_allocator);
        var j = 0; // i32
        while (j < n) {
            row = blk0: { var _tmp0 = std.ArrayList(f64).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(row) catch |err| handleError(err); _tmp0.append(0.0) catch |err| handleError(err); break :blk0 _tmp0.items; };
            j = (j + 1);
        }
        l = blk1: { var _tmp1 = std.ArrayList([]const f64).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(l) catch |err| handleError(err); _tmp1.append(row) catch |err| handleError(err); break :blk1 _tmp1.items; };
        i = (i + 1);
    }
    i = 0;
    while (i < n) {
        var j = 0; // i32
        while (j <= i) {
            var sum = a[i][j]; // f64
            var k = 0; // i32
            while (k < j) {
                sum = (sum - (l[i][k] * l[j][k]));
                k = (k + 1);
            }
            if (i == j) {
                l.items[i][j] = sqrtApprox(sum);
            } else {
                l.items[i][j] = (sum / l[j][j]);
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return l.items;
}

fn printMat(m: []const []const f64) void {
    var i = 0; // i32
    while (i < (m).len) {
        var line = ""; // []const u8
        var j = 0; // i32
        while (j < (m[i]).len) {
            line = _concat_string(line, std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{m[i][j]}) catch |err| handleError(err));
            if (j < ((m[i]).len - 1)) {
                line = _concat_string(line, " ");
            }
            j = (j + 1);
        }
        std.debug.print("{s}\n", .{line});
        i = (i + 1);
    }
}

fn demo(a: []const []const f64) void {
    std.debug.print("A:\n", .{});
    printMat(a);
    const l = cholesky(a); // []const []const f64
    std.debug.print("L:\n", .{});
    printMat(l);
}

pub fn main() void {
    demo(&[_][]const f64{
    &[_]f64{
    25.0,
    15.0,
    -5.0,
},
    &[_]f64{
    15.0,
    18.0,
    0.0,
},
    &[_]f64{
    -5.0,
    0.0,
    11.0,
},
});
    demo(&[_][]const f64{
    &[_]f64{
    18.0,
    22.0,
    54.0,
    42.0,
},
    &[_]f64{
    22.0,
    70.0,
    86.0,
    62.0,
},
    &[_]f64{
    54.0,
    86.0,
    174.0,
    134.0,
},
    &[_]f64{
    42.0,
    62.0,
    134.0,
    106.0,
},
});
}
