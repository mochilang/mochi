// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn sortFloat(xs: []const f64) []const f64 {
    var arr = xs; // []const f64
    var n = (arr).len; // i32
    var i = 0; // i32
    while (i < n) {
        var j = 0; // i32
        while (j < (n - 1)) {
            if (arr[j] > arr[(j + 1)]) {
                const tmp = arr[j]; // f64
                arr.items[j] = arr[(j + 1)];
                arr.items[(j + 1)] = tmp;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    return arr.items;
}

fn median(a: []const f64) f64 {
    var arr = sortFloat(a); // []const f64
    const half = @as(i32, (((arr).len / 2))); // i32
    var m = arr[half]; // f64
    if (@mod((arr).len, 2) == 0) {
        m = (((m + arr[(half - 1)])) / 2.0);
    }
    return m;
}

pub fn main() void {
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{median(&[_]f64{
    3.0,
    1.0,
    4.0,
    1.0,
})}) catch |err| handleError(err)});
    std.debug.print("{s}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{median(&[_]f64{
    3.0,
    1.0,
    4.0,
    1.0,
    5.0,
})}) catch |err| handleError(err)});
}
