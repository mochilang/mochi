// Generated by Mochi Zig transpiler on 2025-07-23 09:39 +0700
const std = @import("std");

pub fn main() void {
    var doors: []bool = &[_]bool{};
    for (0..100) |i| {
        doors = blk: { var _tmp = std.ArrayList(bool).init(std.heap.page_allocator); defer _tmp.deinit(); _tmp.appendSlice(doors) catch unreachable; _tmp.append(false) catch unreachable; const res = _tmp.toOwnedSlice() catch unreachable; break :blk res; };
    }
    for (1..101) |pass| {
        var idx = pass - 1;
        while (idx < 100) {
            doors[@as(usize, @intCast(idx))] = !(doors[@as(usize, @intCast(idx))]);
            idx = idx + pass;
        }
    }
    for (0..10) |row| {
        var line = "";
        for (0..10) |col| {
            const idx = row * 10 + col;
            if (doors[@as(usize, @intCast(idx))]) {
                line = _concat_string(line, "1");
            } else {
                line = _concat_string(line, "0");
            }
            if (col < 9) {
                line = _concat_string(line, " ");
            }
        }
        std.io.getStdOut().writer().print("{s}\n", .{line}) catch unreachable;
    }
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch unreachable;
}
