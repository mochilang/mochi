// Generated by Mochi compiler v0.10.30 on 2025-07-18T17:42:48Z
const std = @import("std");

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    const alloc = std.heap.page_allocator;
    return std.mem.concat(alloc, u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

var doors = std.ArrayList(i32).init(std.heap.page_allocator);

pub fn main() void {
    for (0 .. 100) |_| {
        doors = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(doors) catch |err| handleError(err); _tmp0.append(false) catch |err| handleError(err); const res = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 res; };
    }
    for (1 .. 101) |pass| {
        var idx = (pass - 1); // i32
        while (idx < 100) {
            doors.items[idx] = !doors[idx];
            idx = (idx + pass);
        }
    }
    for (0 .. 10) |row| {
        var line: []const u8 = ""; // []const u8
        for (0 .. 10) |col| {
            const idx = ((row * 10) + col); // i32
            if (doors[idx]) {
                line = _concat_string(line, "1");
            } else {
                line = _concat_string(line, "0");
            }
            if (col < 9) {
                line = _concat_string(line, " ");
            }
        }
        std.debug.print("{s}\n", .{line});
    }
}
