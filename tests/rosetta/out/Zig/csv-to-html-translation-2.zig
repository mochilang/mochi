// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn _split_string(s: []const u8, sep: []const u8) []const []const u8 {
    var res = std.ArrayList([]const u8).init(std.heap.page_allocator);
    defer res.deinit();
    var it = std.mem.split(u8, s, sep);
    while (it.next()) |p| { res.append(p) catch |err| handleError(err); }
    return res.toOwnedSlice() catch |err| handleError(err);
}

const c = _concat_string(_concat_string(_concat_string(_concat_string("Character,Speech\nThe multitude,The messiah! Show us the messiah!\n", "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n"), "The multitude,Who are you?\n"), "Brians mother,I'm his mother; that's who!\n"), "The multitude,Behold his mother! Behold his mother!"); // []const u8
var rows: []const []const []const u8 = &[]i32{};
const headings = true; // bool

pub fn main() void {
    for (_split_string(c, "\n")) |line| {
        rows = blk0: { var _tmp0 = std.ArrayList([]const []const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(rows) catch |err| handleError(err); _tmp0.append(_split_string(line, ",")) catch |err| handleError(err); break :blk0 _tmp0.items; };
    }
    std.debug.print("<table>\n", .{});
    if (headings) {
        if ((rows).len > 0) {
            var th = ""; // []const u8
            for (rows[0]) |h| {
                th = _concat_string(_concat_string(_concat_string(th, "<th>"), h), "</th>");
            }
            std.debug.print("   <thead>\n", .{});
            std.debug.print("{s}\n", .{_concat_string(_concat_string("      <tr>", th), "</tr>")});
            std.debug.print("   </thead>\n", .{});
            std.debug.print("   <tbody>\n", .{});
            var i = 1; // i32
            while (i < (rows).len) {
                var cells = ""; // []const u8
                for (rows[i]) |cell| {
                    cells = _concat_string(_concat_string(_concat_string(cells, "<td>"), cell), "</td>");
                }
                std.debug.print("{s}\n", .{_concat_string(_concat_string("      <tr>", cells), "</tr>")});
                i = (i + 1);
            }
            std.debug.print("   </tbody>\n", .{});
        }
    } else {
        for (rows) |row| {
            var cells = ""; // []const u8
            for (row) |cell| {
                cells = _concat_string(_concat_string(_concat_string(cells, "<td>"), cell), "</td>");
            }
            std.debug.print("{s}\n", .{_concat_string(_concat_string("    <tr>", cells), "</tr>")});
        }
    }
    std.debug.print("</table>\n", .{});
}
