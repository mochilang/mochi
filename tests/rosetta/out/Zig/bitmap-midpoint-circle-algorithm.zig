// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

var g = circle(10); // []const []const []const u8

fn initGrid(size: i32) []const []const []const u8 {
    var g = std.ArrayList([]const u8).init(std.heap.page_allocator);
    var y = 0; // i32
    while (y < size) {
        var row = std.ArrayList(u8).init(std.heap.page_allocator);
        var x = 0; // i32
        while (x < size) {
            row = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(row) catch |err| handleError(err); _tmp0.append(" ") catch |err| handleError(err); break :blk0 _tmp0.items; };
            x = (x + 1);
        }
        g = blk1: { var _tmp1 = std.ArrayList([]const []const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(g) catch |err| handleError(err); _tmp1.append(row) catch |err| handleError(err); break :blk1 _tmp1.items; };
        y = (y + 1);
    }
    return g.items;
}

fn set(g: []const []const []const u8, x: i32, y: i32) void {
    if ((((x >= 0) and (x < (g[0]).len)) and (y >= 0)) and (y < (g).len)) {
        g.items[y][x] = "#";
    }
}

fn circle(r: i32) []const []const []const u8 {
    const size = ((r * 2) + 1); // i32
    var g = initGrid(size); // []const []const []const u8
    var x = r; // i32
    var y = 0; // i32
    var err = (1 - r); // i32
    while (y <= x) {
        set(g, (r + x), (r + y));
        set(g, (r + y), (r + x));
        set(g, (r - x), (r + y));
        set(g, (r - y), (r + x));
        set(g, (r - x), (r - y));
        set(g, (r - y), (r - x));
        set(g, (r + x), (r - y));
        set(g, (r + y), (r - x));
        y = (y + 1);
        if (err < 0) {
            err = ((err + (2 * y)) + 1);
        } else {
            x = (x - 1);
            err = ((err + (2 * ((y - x)))) + 1);
        }
    }
    return g.items;
}

fn trimRight(row: []const []const u8) []const u8 {
    var end = (row).len; // i32
    while ((end > 0) and std.mem.eql(u8, row[(end - 1)], " ")) {
        end = (end - 1);
    }
    var s = ""; // []const u8
    var i = 0; // i32
    while (i < end) {
        s = _concat_string(s, row[i]);
        i = (i + 1);
    }
    return s;
}

pub fn main() void {
    for (g) |row| {
        std.debug.print("{s}\n", .{trimRight(row)});
    }
}
