// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn nextRand(seed: i32) i32 {
    return @mod((((seed * 1664525) + 1013904223)), 2147483647);
}

fn shuffleChars(s: []const u8, seed: i32) []const i32 {
    var chars = std.ArrayList(u8).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < (s).len) {
        chars = blk0: { var _tmp0 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp0.deinit(); _tmp0.appendSlice(chars) catch |err| handleError(err); _tmp0.append(substring(s, i, (i + 1))) catch |err| handleError(err); break :blk0 _tmp0.items; };
        i = (i + 1);
    }
    var sd = seed; // i32
    var idx = ((chars).len - 1); // i32
    while (idx > 0) {
        sd = nextRand(sd);
        var j = @mod(sd, ((idx + 1))); // i32
        const tmp = chars[idx]; // []const u8
        chars.items[idx] = chars[j];
        chars.items[j] = tmp;
        idx = (idx - 1);
    }
    var res = ""; // []const u8
    i = 0;
    while (i < (chars).len) {
        res = _concat_string(res, chars[i]);
        i = (i + 1);
    }
    return [_][]const u8{
    res,
    sd,
};
}

fn bestShuffle(s: []const u8, seed: i32) []const i32 {
    const r = shuffleChars(s, seed); // []const i32
    var t: i32 = r[0]; // i32
    var sd: i32 = r[1]; // i32
    var arr = std.ArrayList(u8).init(std.heap.page_allocator);
    var i = 0; // i32
    while (i < (t).len) {
        arr = blk1: { var _tmp1 = std.ArrayList([]const u8).init(std.heap.page_allocator); defer _tmp1.deinit(); _tmp1.appendSlice(arr) catch |err| handleError(err); _tmp1.append(substring(t, i, (i + 1))) catch |err| handleError(err); break :blk1 _tmp1.items; };
        i = (i + 1);
    }
    i = 0;
    while (i < (arr).len) {
        var j = 0; // i32
        while (j < (arr).len) {
            if (((i != j) and (arr[i] != substring(s, j, (j + 1)))) and (arr[j] != substring(s, i, (i + 1)))) {
                const tmp = arr[i]; // []const u8
                arr.items[i] = arr[j];
                arr.items[j] = tmp;
                break;
            }
            j = (j + 1);
        }
        i = (i + 1);
    }
    var count = 0; // i32
    i = 0;
    while (i < (arr).len) {
        if (arr[i] == substring(s, i, (i + 1))) {
            count = (count + 1);
        }
        i = (i + 1);
    }
    var out = ""; // []const u8
    i = 0;
    while (i < (arr).len) {
        out = _concat_string(out, arr[i]);
        i = (i + 1);
    }
    return [_][]const u8{
    out,
    sd,
    count,
};
}

fn main() void {
    const ts = &[_][]const u8{
    "abracadabra",
    "seesaw",
    "elk",
    "grrrrrr",
    "up",
    "a",
}; // []const []const u8
    var seed = 1; // i32
    var i = 0; // i32
    while (i < (ts).len) {
        const r = bestShuffle(ts[i], seed); // []const i32
        const shuf: i32 = r[0]; // i32
        seed = r[1];
        const cnt: i32 = r[2]; // i32
        std.debug.print("{any}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string(ts[i], " -> "), shuf), " ("), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{cnt}) catch |err| handleError(err)), ")")});
        i = (i + 1);
    }
}

pub fn main() void {
    main();
}
