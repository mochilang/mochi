// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn intSqrt(x: i32) i32 {
    if (x < 2) {
        return x;
    }
    var left = 1; // i32
    var right = (x / 2); // f64
    var ans = 0; // i32
    while (left <= right) {
        const mid = (left + (((right - left)) / 2)); // f64
        const sq = (mid * mid); // f64
        if (sq == x) {
            return mid;
        }
        if (sq < x) {
            left = (mid + 1);
            ans = mid;
        } else {
            right = (mid - 1);
        }
    }
    return ans;
}

fn sumRecip(n: i32) i32 {
    var s = 1; // i32
    const limit = intSqrt(n); // i32
    var f = 2; // i32
    while (f <= limit) {
        if (@mod(n, f) == 0) {
            s = (s + (n / f));
            const _f2 = (n / f); // f64
            if (_f2 != f) {
                s = (s + f);
            }
        }
        f = (f + 1);
    }
    return s;
}

fn main() void {
    const nums = &[_]i32{
    6,
    28,
    120,
    496,
    672,
    8128,
    30240,
    32760,
    523776,
}; // []const i32
    for (nums) |n| {
        const s = sumRecip(n); // i32
        if (@mod(s, n) == 0) {
            const val = (s / n); // f64
            var perfect = ""; // []const u8
            if (val == 1) {
                perfect = "perfect!";
            }
            std.debug.print("{s}\n", .{_concat_string(_concat_string(_concat_string(_concat_string(_concat_string("Sum of recipr. factors of ", std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{n}) catch |err| handleError(err)), " = "), std.fmt.allocPrint(std.heap.page_allocator, "{d}", .{val}) catch |err| handleError(err)), " exactly "), perfect)});
        }
    }
}

pub fn main() void {
    main();
}
