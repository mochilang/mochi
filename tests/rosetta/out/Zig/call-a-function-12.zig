// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _concat_string(a: []const u8, b: []const u8) []const u8 {
    return std.mem.concat(u8, &[_][]const u8{ a, b }) catch |err| handleError(err);
}

fn mkAdd(a: i32) fn(i32) i32 {
    return (struct { a: i32, fn call(self: @This(), b: i32) i32 {
        return (self.a + b);
} }{ .a = a }).call;
}

fn mysum(x: i32, y: i32) i32 {
    return (x + y);
}

fn partialSum(x: i32) fn(i32) i32 {
    return (struct { x: i32, fn call(self: @This(), y: i32) i32 {
        return mysum(self.x, y);
} }{ .x = x }).call;
}

fn main() void {
    const add2: i32 = mkAdd(2); // i32
    const add3: i32 = mkAdd(3); // i32
    std.debug.print("{any}\n", .{_concat_string(_concat_string(std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{add2(5)}) catch |err| handleError(err), " "), std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{add3(6)}) catch |err| handleError(err))});
    const partial: i32 = partialSum(13); // i32
    std.debug.print("{any}\n", .{std.fmt.allocPrint(std.heap.page_allocator, "{any}", .{partial(5)}) catch |err| handleError(err)});
}

pub fn main() void {
    main();
}
