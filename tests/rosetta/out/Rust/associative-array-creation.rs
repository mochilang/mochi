// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn removeKey(m: std::collections::HashMap<&'static str, i32>, k: &'static str) -> std::collections::HashMap<&'static str, i32> {
        let mut out: std::collections::HashMap<&'static str, i32> = { let mut m = std::collections::BTreeMap::new(); m };
        for key in m.keys() {
            if key != k {
                out.insert(key, *m.get(&key).unwrap());
            }
        }
        return out;
    }
    fn main() -> () {
        let mut x: std::collections::HashMap<&'static str, i32> = ();
        x = { let mut m = std::collections::BTreeMap::new(); m };
        x.insert("foo", 3);
        let y1 = *x.get(&"bar").unwrap();
        let ok = x.contains_key(&"bar");
        println!("{}", vec![format!("{}", y1)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", if ok {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        x = removeKey(x, "foo");
        x = { let mut m = std::collections::BTreeMap::new(); m.insert("foo", 2); m.insert("bar", 42); m.insert("baz", -1); m };
        println!("{}", vec![format!("{}", *x.get(&"foo").unwrap()), format!("{}", *x.get(&"bar").unwrap()), format!("{}", *x.get(&"baz").unwrap())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
