// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    let mut arr1 = vec![2, 7, 1, 8, 2];
    let mut counts1: std::collections::HashMap<i32, i32> = { let mut m = std::collections::BTreeMap::new(); m };
    let mut keys1: Vec<i32> = vec![];
    let mut i = 0;
    while i < arr1.len() as i32 {
        let v = arr1[i as usize];
        if counts1.contains_key(&v) {
            counts1.insert(v, *counts1.get(&v).unwrap() + 1);
        } else {
            counts1.insert(v, 1);
            keys1 = { let mut tmp = keys1.clone(); tmp.push(v); tmp };
        }
        i += 1;
    }
    let mut max1 = 0;
    i = 0;
    while i < keys1.len() as i32 {
        let k = keys1[i as usize];
        let c = *counts1.get(&k).unwrap();
        if c > max1 {
            max1 = c;
        }
        i += 1;
    }
    let mut modes1: Vec<i32> = vec![];
    i = 0;
    while i < keys1.len() as i32 {
        let k = keys1[i as usize];
        if *counts1.get(&k).unwrap() == max1 {
            modes1 = { let mut tmp = modes1.clone(); tmp.push(k); tmp };
        }
        i += 1;
    }
    println!("{}", vec![format!("{}", modes1.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut arr2 = vec![2, 7, 1, 8, 2, 8];
    let mut counts2: std::collections::HashMap<i32, i32> = { let mut m = std::collections::BTreeMap::new(); m };
    let mut keys2: Vec<i32> = vec![];
    i = 0;
    while i < arr2.len() as i32 {
        let v = arr2[i as usize];
        if counts2.contains_key(&v) {
            counts2.insert(v, *counts2.get(&v).unwrap() + 1);
        } else {
            counts2.insert(v, 1);
            keys2 = { let mut tmp = keys2.clone(); tmp.push(v); tmp };
        }
        i += 1;
    }
    let mut max2 = 0;
    i = 0;
    while i < keys2.len() as i32 {
        let k = keys2[i as usize];
        let c = *counts2.get(&k).unwrap();
        if c > max2 {
            max2 = c;
        }
        i += 1;
    }
    let mut modes2: Vec<i32> = vec![];
    i = 0;
    while i < keys2.len() as i32 {
        let k = keys2[i as usize];
        if *counts2.get(&k).unwrap() == max2 {
            modes2 = { let mut tmp = modes2.clone(); tmp.push(k); tmp };
        }
        i += 1;
    }
    println!("{}", vec![format!("{}", modes2.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
