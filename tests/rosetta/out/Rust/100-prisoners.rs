// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn shuffle(xs: Vec<i32>) -> Vec<i32> {
        let mut arr = xs;
        let mut i = 99;
        while i > 0 {
            let j = now() % (i + 1);
            let tmp = arr[i as usize];
            arr[i as usize] = arr[j as usize];
            arr[j as usize] = tmp;
            i -= 1;
        }
        return arr;
    }
    fn doTrials(trials: i32, np: i32, strategy: &'static str) -> () {
        let mut pardoned = 0;
        let mut t = 0;
        while t < trials {
            let mut drawers: Vec<i32> = vec![];
            let mut i = 0;
            while i < 100 {
                drawers = { let mut tmp = drawers.clone(); tmp.push(i); tmp };
                i += 1;
            }
            drawers = shuffle(drawers);
            let mut p = 0;
            let mut success = true;
            while p < np {
                let mut found = false;
                if strategy == "optimal" {
                    let mut prev = p;
                    let mut d = 0;
                    while d < 50 {
                        let this = drawers[prev as usize];
                        if this == p {
                            found = true;
                            break;
                        }
                        prev = this;
                        d += 1;
                    }
                } else {
                    let mut opened: Vec<bool> = vec![];
                    let mut k = 0;
                    while k < 100 {
                        opened = { let mut tmp = opened.clone(); tmp.push(false); tmp };
                        k += 1;
                    }
                    let mut d = 0;
                    while d < 50 {
                        let mut n = now() % 100;
                        while opened[n as usize] {
                            n = now() % 100;
                        }
                        opened[n as usize] = true;
                        if drawers[n as usize] == p {
                            found = true;
                            break;
                        }
                        d += 1;
                    }
                }
                if !found {
                    success = false;
                    break;
                }
                p += 1;
            }
            if success {
                pardoned += 1;
            }
            t += 1;
        }
        let rf = (pardoned.parse::<f64>().unwrap()) / (trials.parse::<f64>().unwrap()) * 100.0;
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "  strategy = ", strategy), "  pardoned = "), pardoned.to_string()), " relative frequency = "), rf.to_string()), "%"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    fn main() -> () {
        let trials = 1000;
        for np in vec![10, 100] {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Results from ", trials.to_string()), " trials with "), np.to_string()), " prisoners:
"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            for strat in vec!["random", "optimal"] {
                doTrials(trials, np, strat);
            }
        }
    }
    main();
}
