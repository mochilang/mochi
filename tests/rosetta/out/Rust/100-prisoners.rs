// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
fn _now() -> i64 {
    use std::time::{SystemTime, UNIX_EPOCH};
    SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
}

fn main() {
    let shuffle = move |xs: Vec<i32>| -> Vec<i32> {
        let mut arr = xs;
        let mut i = 99;
        while i > 0 {
            let j = _now() % (i + 1);
            let tmp = arr[(i) as usize];
            arr[(i) as usize] = arr[(j) as usize];
            arr[(j) as usize] = tmp;
            i -= 1;
        }
        return arr;
    };
    let doTrials = move |trials: i32, np: i32, strategy: String| -> () {
        let mut pardoned = 0;
        let mut t = 0;
        while t < trials {
            let mut drawers: Vec<i32> = vec![];
            let mut i = 0;
            while i < 100 {
                drawers = { let mut tmp = drawers.clone(); tmp.push(i); tmp };
                i += 1;
            }
            drawers = shuffle(drawers);
            let mut p = 0;
            let mut success = true;
            while p < np {
                let mut found = false;
                if strategy == String::from("optimal") {
                    let mut prev = p;
                    let mut d = 0;
                    while d < 50 {
                        let this = drawers[(prev) as usize];
                        if this == p {
                            found = true;
                            break;
                        }
                        prev = this;
                        d += 1;
                    }
                } else {
                    let mut opened: Vec<bool> = vec![];
                    let mut k = 0;
                    while k < 100 {
                        opened = { let mut tmp = opened.clone(); tmp.push(false); tmp };
                        k += 1;
                    }
                    let mut d = 0;
                    while d < 50 {
                        let mut n = _now() % 100;
                        while opened[(n) as usize] {
                            n = _now() % 100;
                        }
                        opened[(n) as usize] = true;
                        if drawers[(n) as usize] == p {
                            found = true;
                            break;
                        }
                        d += 1;
                    }
                }
                if !found {
                    success = false;
                    break;
                }
                p += 1;
            }
            if success {
                pardoned += 1;
            }
            t += 1;
        }
        let rf = (pardoned as f64) / (trials as f64) * 100.0;
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", String::from("  strategy = "), strategy), String::from("  pardoned = ")), pardoned.to_string()), String::from(" relative frequency = ")), rf.to_string()), String::from("%")))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    };
    let main = move || -> () {
        let trials = 1000;
        for np in vec![10, 100] {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", String::from("Results from "), trials.to_string()), String::from(" trials with ")), np.to_string()), String::from(" prisoners:
")))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            for strat in vec![String::from("random"), String::from("optimal")] {
                doTrials(trials, np, strat);
            }
        }
    };
    main();
}
