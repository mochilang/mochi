rustc: exit status 1
warning: denote infinite loops with `loop { ... }`
   --> /tmp/15_puzzle_game.rs:109:9
    |
109 |         while true {
    |         ^^^^^^^^^^ help: use `loop`
    |
    = note: `#[warn(while_true)]` on by default

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:51:169
   |
51 | ... - 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) > 0); m };
   |                                        ---------------------------   ^ expected `f64`, found integer
   |                                        |
   |                                        expected because this is `f64`
   |
help: use a float literal
   |
51 |             return { let mut m = std::collections::HashMap::new(); m.insert(String::from("idx"), empty - 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) > 0.0); m };
   |                                                                                                                                                                          ++

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:51:139
   |
51 | ...hMap::new(); m.insert(String::from("idx"), empty - 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) > 0); m };
   |                 -                             ---------     ------                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `bool`
   |                 |                             |             |
   |                 |                             |             arguments to this method are incorrect
   |                 |                             this argument has type `{integer}`...
   |                 ... which causes `m` to have type `HashMap<String, {integer}>`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/15_puzzle_game.rs:51:110
   |
51 | ...pty - 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) > 0); m };
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^
   |                                           |
   |                                           this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:54:169
   |
54 | ... + 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) < 3); m };
   |                                        ---------------------------   ^ expected `f64`, found integer
   |                                        |
   |                                        expected because this is `f64`
   |
help: use a float literal
   |
54 |             return { let mut m = std::collections::HashMap::new(); m.insert(String::from("idx"), empty + 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) < 3.0); m };
   |                                                                                                                                                                          ++

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:54:139
   |
54 | ...hMap::new(); m.insert(String::from("idx"), empty + 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) < 3); m };
   |                 -                             ---------     ------                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`
   |                 |                             |             |
   |                 |                             |             arguments to this method are incorrect
   |                 |                             this argument has type `i32`...
   |                 ... which causes `m` to have type `HashMap<String, i32>`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/15_puzzle_game.rs:54:110
   |
54 | ...pty + 4); m.insert(String::from("ok"), (empty as f64) / (4 as f64) < 3); m };
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^
   |                                           |
   |                                           this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:57:139
   |
57 | ...p::new(); m.insert(String::from("idx"), empty + 1); m.insert(String::from("ok"), empty % 4 < 3); m };
   |              -                             ---------     ------                     ^^^^^^^^^^^^^ expected `i32`, found `bool`
   |              |                             |             |
   |              |                             |             arguments to this method are incorrect
   |              |                             this argument has type `i32`...
   |              ... which causes `m` to have type `HashMap<String, i32>`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/15_puzzle_game.rs:57:110
   |
57 | ...idx"), empty + 1); m.insert(String::from("ok"), empty % 4 < 3); m };
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^
   |                                                    |
   |                                                    this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:60:139
   |
60 | ...p::new(); m.insert(String::from("idx"), empty - 1); m.insert(String::from("ok"), empty % 4 > 0); m };
   |              -                             ---------     ------                     ^^^^^^^^^^^^^ expected `i32`, found `bool`
   |              |                             |             |
   |              |                             |             arguments to this method are incorrect
   |              |                             this argument has type `i32`...
   |              ... which causes `m` to have type `HashMap<String, i32>`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/15_puzzle_game.rs:60:110
   |
60 | ...idx"), empty - 1); m.insert(String::from("ok"), empty % 4 > 0); m };
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^
   |                                                    |
   |                                                    this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
  --> /tmp/15_puzzle_game.rs:62:127
   |
62 |         return { let mut m = std::collections::HashMap::new(); m.insert(String::from("idx"), 0); m.insert(String::from("ok"), false); m };
   |                                                                -                             -     ------                     ^^^^^ expected integer, found `bool`
   |                                                                |                             |     |
   |                                                                |                             |     arguments to this method are incorrect
   |                                                                |                             this argument has type `{integer}`...
   |                                                                ... which causes `m` to have type `HashMap<String, {integer}>`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/15_puzzle_game.rs:62:98
   |
62 |         return { let mut m = std::collections::HashMap::new(); m.insert(String::from("idx"), 0); m.insert(String::from("ok"), false); m };
   |                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----^
   |                                                                                                                               |
   |                                                                                                                               this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0425]: cannot find function `int` in this scope
  --> /tmp/15_puzzle_game.rs:70:17
   |
70 |         let j = int(*r.get(&String::from("idx")).unwrap());
   |                 ^^^ not found in this scope

error[E0277]: cannot add `String` to `{integer}`
   --> /tmp/15_puzzle_game.rs:110:115
    |
110 | ...("{}{}", String::from("Enter move #"), moves + 1.to_string()), String::from(" (U, D, L, R, or Q): ")))].into_iter().filter(|s| !s.is_e...
    |                                                 ^ no implementation for `{integer} + String`
    |
    = help: the trait `Add<String>` is not implemented for `{integer}`
    = help: the following other types implement trait `Add<Rhs>`:
              `&f128` implements `Add<f128>`
              `&f128` implements `Add`
              `&f16` implements `Add<f16>`
              `&f16` implements `Add`
              `&f32` implements `Add<f32>`
              `&f32` implements `Add`
              `&f64` implements `Add<f64>`
              `&f64` implements `Add`
            and 56 others

error[E0425]: cannot find function `input` in this scope
   --> /tmp/15_puzzle_game.rs:111:21
    |
111 |             let s = input();
    |                     ^^^^^ not found in this scope

error: aborting due to 10 previous errors; 1 warning emitted

Some errors have detailed explanations: E0277, E0308, E0425.
For more information about an error, try `rustc --explain E0277`.
