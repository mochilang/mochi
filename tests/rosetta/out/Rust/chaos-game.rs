// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:53Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    let width = 60;
    let height = (width.parse::<f64>().unwrap() * 0.86602540378).parse::<i32>().unwrap();
    let iterations = 5000;
    let mut grid: Vec<Vec<&'static str>> = vec![];
    let mut y = 0;
    while y < height {
        let mut line: Vec<&'static str> = vec![];
        let mut x = 0;
        while x < width {
            line = append(line, " ");
            x += 1;
        }
        grid = append(grid, line);
        y += 1;
    }
    fn randInt(s: i32, n: i32) -> Vec<i32> {
        let next = (s * 1664525 + 1013904223) % 2147483647;
        return vec![next, next % n];
    }
    let mut seed = 1;
    let vertices: Vec<Vec<i32>> = vec![vec![0, height - 1], vec![width - 1, height - 1], vec![((width as f64) / (2 as f64)).parse::<i32>().unwrap(), 0]];
    let mut px = ((width as f64) / (2 as f64)).parse::<i32>().unwrap();
    let mut py = ((height as f64) / (2 as f64)).parse::<i32>().unwrap();
    let mut i = 0;
    while i < iterations {
        let mut r = randInt(seed, 3);
        seed = r[0];
        let idx = r[1].parse::<i32>().unwrap();
        let v = vertices[idx as usize];
        px = (((px + v[0]) as f64) / (2 as f64)).parse::<i32>().unwrap();
        py = (((py + v[1]) as f64) / (2 as f64)).parse::<i32>().unwrap();
        if px >= 0 && px < width && py >= 0 && py < height {
            grid[py as usize][px as usize] = "*";
        }
        i += 1;
    }
    y = 0;
    while y < height {
        let mut line = "";
        let mut x = 0;
        while x < width {
            line += grid[y as usize][x as usize];
            x += 1;
        }
        println!("{}", line);
        y += 1;
    }
}
