// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn trimLeftZeros(s: &'static str) -> &'static str {
        let mut i = 0;
        while i < s.len() as i32 && &s[i as usize..i + 1 as usize] == "0" {
            i += 1;
        }
        return &s[i as usize..s.len() as i32 as usize];
    }
    fn btString(s: &mut &'static str) -> std::collections::HashMap<&'static str, i32> {
        s = trimLeftZeros(s);
        let mut b: Vec<i32> = vec![];
        let mut i = s.len() as i32 - 1;
        while i >= 0 {
            let ch = &s[i as usize..i + 1 as usize];
            if ch == "+" {
                b = { let mut tmp = b.clone(); tmp.push(1); tmp };
            } else {
                if ch == "0" {
                    b = { let mut tmp = b.clone(); tmp.push(0); tmp };
                } else {
                    if ch == "-" {
                        b = { let mut tmp = b.clone(); tmp.push(0 - 1); tmp };
                    } else {
                        return { let mut m = std::collections::BTreeMap::new(); m.insert("bt", vec![]); m.insert("ok", false); m };
                    }
                }
            }
            i -= 1;
        }
        return { let mut m = std::collections::BTreeMap::new(); m.insert("bt", b); m.insert("ok", true); m };
    }
    fn btToString(b: Vec<i32>) -> &'static str {
        if b.len() as i32 == 0 {
            return "0";
        }
        let mut r = String::new();
        let mut i = b.len() as i32 - 1;
        while i >= 0 {
            let d = b[i as usize];
            if d == 0 - 1 {
                r += "-";
            } else {
                if d == 0 {
                    r += "0";
                } else {
                    r += "+";
                }
            }
            i -= 1;
        }
        return r;
    }
    fn btInt(i: i32) -> Vec<i32> {
        if i == 0 {
            return vec![];
        }
        let mut n = i;
        let mut b: Vec<i32> = vec![];
        while n != 0 {
            let mut m = n % 3;
            n = ((n as f64) / (3 as f64)).parse::<i32>().unwrap();
            if m == 2 {
                m = 0 - 1;
                n += 1;
            } else {
                if m == 0 - 2 {
                    m = 1;
                    n -= 1;
                }
            }
            b = { let mut tmp = b.clone(); tmp.push(m); tmp };
        }
        return b;
    }
    fn btToInt(b: Vec<i32>) -> i32 {
        let mut r = 0;
        let mut pt = 1;
        let mut i = 0;
        while i < b.len() as i32 {
            r = r + b[i as usize] * pt;
            pt *= 3;
            i += 1;
        }
        return r;
    }
    fn btNeg(b: Vec<i32>) -> Vec<i32> {
        let mut r: Vec<i32> = vec![];
        let mut i = 0;
        while i < b.len() as i32 {
            r = { let mut tmp = r.clone(); tmp.push(-b[i as usize]); tmp };
            i += 1;
        }
        return r;
    }
    fn btAdd(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
        return btInt(btToInt(a) + btToInt(b));
    }
    fn btMul(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
        return btInt(btToInt(a) * btToInt(b));
    }
    fn padLeft(s: &'static str, w: i32) -> &'static str {
        let mut r = s;
        while r.len() as i32 < w {
            r = format!("{}{}", " ", r);
        }
        return r;
    }
    fn show(label: &'static str, b: Vec<i32>) -> () {
        let l = padLeft(label, 7);
        let bs = padLeft(btToString(b), 12);
        let is = padLeft(btToInt(b).to_string(), 7);
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", l, " "), bs), " "), is))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    fn main() -> () {
        let ares = btString(&mut "+-0++0+");
        let a = *ares.get(&"bt").unwrap();
        let b = btInt(-436);
        let cres = btString(&mut "+-++-");
        let c = *cres.get(&"bt").unwrap();
        show("a:", a);
        show("b:", b);
        show("c:", c);
        show("a(b-c):", btMul(a, btAdd(b, btNeg(c))));
    }
    main();
}
