rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/catmull-clark-subdivision-surface.rs:70:27
   |
70 |         if s.len() as i32 < 2 {
   |                           ^ --- interpreted as generic arguments
   |                           |
   |                           not interpreted as comparison
   |
help: try comparing the cast value
   |
70 |         if (s.len() as i32) < 2 {
   |            +              +

error: cast cannot be followed by a method call
  --> /tmp/catmull-clark-subdivision-surface.rs:96:41
   |
96 |             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
   |                                         ^^^^^^^^^^^^^^^^^
   |
help: try surrounding the expression in parentheses
   |
96 |             fp = divPoint(&fp.clone(), ((face.len() as i32).parse::<f64>().unwrap()));
   |                                         +                 +

warning: unnecessary parentheses around function argument
  --> /tmp/catmull-clark-subdivision-surface.rs:96:40
   |
96 |             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
   |                                        ^                                         ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
96 -             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
96 +             fp = divPoint(&fp.clone(), face.len() as i32.parse::<f64>().unwrap());
   |

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:33:35
   |
33 |             if &s[i as usize..i + 1 as usize] == ch {
   |                                   ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:33:31
   |
33 |             if &s[i as usize..i + 1 as usize] == ch {
   |                               ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/catmull-clark-subdivision-surface.rs:33:33
   |
33 |             if &s[i as usize..i + 1 as usize] == ch {
   |                                 ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/catmull-clark-subdivision-surface.rs:47:16
   |
47 |         y = (y.parse::<i32>().unwrap()).parse::<f64>().unwrap() / 10000.0;
   |                ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:49:31
   |
49 |         let mut dot = indexOf(s, ".");
   |                       ------- ^ expected `&str`, found `String`
   |                       |
   |                       arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:30:8
   |
30 |     fn indexOf(s: &'static str, ch: &'static str) -> i32 {
   |        ^^^^^^^ ---------------
help: consider borrowing here
   |
49 |         let mut dot = indexOf(&s, ".");
   |                               +

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:55:42
   |
55 |                 s = &s[0 as usize..dot + 5 as usize];
   |                                          ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:55:36
   |
55 |                 s = &s[0 as usize..dot + 5 as usize];
   |                                    ^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/catmull-clark-subdivision-surface.rs:55:40
   |
55 |                 s = &s[0 as usize..dot + 5 as usize];
   |                                        ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:55:21
   |
48 |         let mut s = y.to_string();
   |                     ------------- expected due to this value
...
55 |                 s = &s[0 as usize..dot + 5 as usize];
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `&str`
   |
help: try using a conversion method
   |
55 |                 s = (&s[0 as usize..dot + 5 as usize]).to_string();
   |                     +                                +++++++++++++

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:66:16
   |
40 |     fn fmt4(x: f64) -> &'static str {
   |                        ------------ expected `&'static str` because of return type
...
66 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
66 |         return &s;
   |                +

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:71:20
   |
68 |     fn fmt2(n: i32) -> &'static str {
   |                        ------------ expected `&str` because of return type
...
71 |             return format!("{}{}", " ", s);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:73:16
   |
68 |     fn fmt2(n: i32) -> &'static str {
   |                        ------------ expected `&'static str` because of return type
...
73 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
73 |         return &s;
   |                +

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:82:25
   |
82 |         return mulPoint(&p.clone(), 1.0 / d);
   |                -------- ^^^^^^^^^^ expected `Point`, found `&Point`
   |                |
   |                arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:78:8
   |
78 |     fn mulPoint(p: Point, m: f64) -> Point {
   |        ^^^^^^^^ --------
help: consider removing the borrow
   |
82 -         return mulPoint(&p.clone(), 1.0 / d);
82 +         return mulPoint(p.clone(), 1.0 / d);
   |

error[E0308]: arguments to this function are incorrect
  --> /tmp/catmull-clark-subdivision-surface.rs:85:26
   |
85 |         return divPoint(&sumPoint(&p1.clone(), &p2.clone()), 2.0);
   |                          ^^^^^^^^ -----------  ----------- expected `Point`, found `&Point`
   |                                   |
   |                                   expected `Point`, found `&Point`
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:75:8
   |
75 |     fn sumPoint(p1: Point, p2: Point) -> Point {
   |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
   |
85 -         return divPoint(&sumPoint(&p1.clone(), &p2.clone()), 2.0);
85 +         return divPoint(&sumPoint(p1.clone(), &p2.clone()), 2.0);
   |
help: consider removing the borrow
   |
85 -         return divPoint(&sumPoint(&p1.clone(), &p2.clone()), 2.0);
85 +         return divPoint(&sumPoint(&p1.clone(), p2.clone()), 2.0);
   |

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:85:25
   |
85 |         return divPoint(&sumPoint(&p1.clone(), &p2.clone()), 2.0);
   |                -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Point`, found `&Point`
   |                |
   |                arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:81:8
   |
81 |     fn divPoint(p: Point, d: f64) -> Point {
   |        ^^^^^^^^ --------
help: consider removing the borrow
   |
85 -         return divPoint(&sumPoint(&p1.clone(), &p2.clone()), 2.0);
85 +         return divPoint(sumPoint(&p1.clone(), &p2.clone()), 2.0);
   |

error[E0308]: arguments to this function are incorrect
  --> /tmp/catmull-clark-subdivision-surface.rs:94:22
   |
94 |                 fp = sumPoint(&fp.clone(), &points[idx as usize]);
   |                      ^^^^^^^^ -----------  --------------------- expected `Point`, found `&Point`
   |                               |
   |                               expected `Point`, found `&Point`
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:75:8
   |
75 |     fn sumPoint(p1: Point, p2: Point) -> Point {
   |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
   |
94 -                 fp = sumPoint(&fp.clone(), &points[idx as usize]);
94 +                 fp = sumPoint(fp.clone(), &points[idx as usize]);
   |
help: consider removing the borrow
   |
94 -                 fp = sumPoint(&fp.clone(), &points[idx as usize]);
94 +                 fp = sumPoint(&fp.clone(), points[idx as usize]);
   |

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/catmull-clark-subdivision-surface.rs:96:59
   |
96 |             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
   |                                                           ^^^^^ method not found in `i32`

error[E0308]: mismatched types
  --> /tmp/catmull-clark-subdivision-surface.rs:96:27
   |
96 |             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
   |                  -------- ^^^^^^^^^^^ expected `Point`, found `&Point`
   |                  |
   |                  arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/catmull-clark-subdivision-surface.rs:81:8
   |
81 |     fn divPoint(p: Point, d: f64) -> Point {
   |        ^^^^^^^^ --------
help: consider removing the borrow
   |
96 -             fp = divPoint(&fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
96 +             fp = divPoint(fp.clone(), (face.len() as i32.parse::<f64>().unwrap()));
   |

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:141:37
    |
141 |                     pn2 = face[pi + 1 as usize];
    |                                     ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/catmull-clark-subdivision-surface.rs:141:35
    |
141 |                     pn2 = face[pi + 1 as usize];
    |                                   ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0277]: the type `[i32]` cannot be indexed by `i32`
   --> /tmp/catmull-clark-subdivision-surface.rs:141:32
    |
141 |                     pn2 = face[pi + 1 as usize];
    |                                ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i32`
    = note: required for `Vec<i32>` to implement `Index<i32>`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:161:38
    |
161 |                 let e2 = edges[idx + 1 as usize];
    |                                      ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/catmull-clark-subdivision-surface.rs:161:36
    |
161 |                 let e2 = edges[idx + 1 as usize];
    |                                    ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0277]: the type `[Vec<i32>]` cannot be indexed by `i32`
   --> /tmp/catmull-clark-subdivision-surface.rs:161:32
    |
161 |                 let e2 = edges[idx + 1 as usize];
    |                                ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[Vec<i32>]>` is not implemented for `i32`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i32`
    = note: required for `Vec<Vec<i32>>` to implement `Index<i32>`

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:175:22
    |
175 |             let cp = centerPoint(&p1.clone(), &p2.clone());
    |                      ^^^^^^^^^^^ -----------  ----------- expected `Point`, found `&Point`
    |                                  |
    |                                  expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:84:8
    |
84  |     fn centerPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
175 -             let cp = centerPoint(&p1.clone(), &p2.clone());
175 +             let cp = centerPoint(p1.clone(), &p2.clone());
    |
help: consider removing the borrow
    |
175 -             let cp = centerPoint(&p1.clone(), &p2.clone());
175 +             let cp = centerPoint(&p1.clone(), p2.clone());
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:191:23
    |
191 |             let cfp = centerPoint(&fp1.clone(), &fp2.clone());
    |                       ^^^^^^^^^^^ ------------  ------------ expected `Point`, found `&Point`
    |                                   |
    |                                   expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:84:8
    |
84  |     fn centerPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
191 -             let cfp = centerPoint(&fp1.clone(), &fp2.clone());
191 +             let cfp = centerPoint(fp1.clone(), &fp2.clone());
    |
help: consider removing the borrow
    |
191 -             let cfp = centerPoint(&fp1.clone(), &fp2.clone());
191 +             let cfp = centerPoint(&fp1.clone(), fp2.clone());
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:192:71
    |
192 |             edgePoints = { let mut tmp = edgePoints.clone(); tmp.push(centerPoint(&cp.clone(), &cfp.clone())); tmp };
    |                                                                       ^^^^^^^^^^^ -----------  ------------ expected `Point`, found `&Point`
    |                                                                                   |
    |                                                                                   expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:84:8
    |
84  |     fn centerPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
192 -             edgePoints = { let mut tmp = edgePoints.clone(); tmp.push(centerPoint(&cp.clone(), &cfp.clone())); tmp };
192 +             edgePoints = { let mut tmp = edgePoints.clone(); tmp.push(centerPoint(cp.clone(), &cfp.clone())); tmp };
    |
help: consider removing the borrow
    |
192 -             edgePoints = { let mut tmp = edgePoints.clone(); tmp.push(centerPoint(&cp.clone(), &cfp.clone())); tmp };
192 +             edgePoints = { let mut tmp = edgePoints.clone(); tmp.push(centerPoint(&cp.clone(), cfp.clone())); tmp };
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:210:50
    |
210 |                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &fp.clone()), n: tp.n + 1 };
    |                                                  ^^^^^^^^ -----  ----------- expected `Point`, found `&Point`
    |                                                           |
    |                                                           expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:75:8
    |
75  |     fn sumPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
210 -                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &fp.clone()), n: tp.n + 1 };
210 +                 temp[pn as usize] = PointEx { p: sumPoint(tp.p, &fp.clone()), n: tp.n + 1 };
    |
help: consider removing the borrow
    |
210 -                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &fp.clone()), n: tp.n + 1 };
210 +                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, fp.clone()), n: tp.n + 1 };
    |

error[E0599]: no method named `parse` found for type `i32` in the current scope
   --> /tmp/catmull-clark-subdivision-surface.rs:218:52
    |
218 |             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
    |                                                    ^^^^^ method not found in `i32`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:218:40
    |
218 |             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
    |                               -------- ^^^^^ expected `Point`, found `&Point`
    |                               |
    |                               arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:81:8
    |
81  |     fn divPoint(p: Point, d: f64) -> Point {
    |        ^^^^^^^^ --------
help: consider removing the borrow
    |
218 -             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
218 +             avg = append(avg, divPoint(tp.p, tp.n.parse::<f64>().unwrap()));
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:236:50
    |
236 |                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &cp.clone()), n: tp.n + 1 };
    |                                                  ^^^^^^^^ -----  ----------- expected `Point`, found `&Point`
    |                                                           |
    |                                                           expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:75:8
    |
75  |     fn sumPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
236 -                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &cp.clone()), n: tp.n + 1 };
236 +                 temp[pn as usize] = PointEx { p: sumPoint(tp.p, &cp.clone()), n: tp.n + 1 };
    |
help: consider removing the borrow
    |
236 -                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, &cp.clone()), n: tp.n + 1 };
236 +                 temp[pn as usize] = PointEx { p: sumPoint(&tp.p, cp.clone()), n: tp.n + 1 };
    |

error[E0599]: no method named `parse` found for type `i32` in the current scope
   --> /tmp/catmull-clark-subdivision-surface.rs:243:52
    |
243 |             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
    |                                                    ^^^^^ method not found in `i32`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:243:40
    |
243 |             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
    |                               -------- ^^^^^ expected `Point`, found `&Point`
    |                               |
    |                               arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:81:8
    |
81  |     fn divPoint(p: Point, d: f64) -> Point {
    |        ^^^^^^^^ --------
help: consider removing the borrow
    |
243 -             avg = append(avg, divPoint(&tp.p, tp.n.parse::<f64>().unwrap()));
243 +             avg = append(avg, divPoint(tp.p, tp.n.parse::<f64>().unwrap()));
    |

error[E0599]: no method named `parse` found for type `i32` in the current scope
   --> /tmp/catmull-clark-subdivision-surface.rs:268:40
    |
268 |             let mut n = pf[i as usize].parse::<f64>().unwrap();
    |                                        ^^^^^ method not found in `i32`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:273:31
    |
273 |             let p1 = mulPoint(&old.clone(), m1);
    |                      -------- ^^^^^^^^^^^^ expected `Point`, found `&Point`
    |                      |
    |                      arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:78:8
    |
78  |     fn mulPoint(p: Point, m: f64) -> Point {
    |        ^^^^^^^^ --------
help: consider removing the borrow
    |
273 -             let p1 = mulPoint(&old.clone(), m1);
273 +             let p1 = mulPoint(old.clone(), m1);
    |

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:274:31
    |
274 |             let p2 = mulPoint(&afp[i as usize], m2);
    |                      -------- ^^^^^^^^^^^^^^^^ expected `Point`, found `&Point`
    |                      |
    |                      arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:78:8
    |
78  |     fn mulPoint(p: Point, m: f64) -> Point {
    |        ^^^^^^^^ --------
help: consider removing the borrow
    |
274 -             let p2 = mulPoint(&afp[i as usize], m2);
274 +             let p2 = mulPoint(afp[i as usize], m2);
    |

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:275:31
    |
275 |             let p3 = mulPoint(&ame[i as usize], m3);
    |                      -------- ^^^^^^^^^^^^^^^^ expected `Point`, found `&Point`
    |                      |
    |                      arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:78:8
    |
78  |     fn mulPoint(p: Point, m: f64) -> Point {
    |        ^^^^^^^^ --------
help: consider removing the borrow
    |
275 -             let p3 = mulPoint(&ame[i as usize], m3);
275 +             let p3 = mulPoint(ame[i as usize], m3);
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:276:73
    |
276 |             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
    |                                                                         ^^^^^^^^ -----------  ----------- expected `Point`, found `&Point`
    |                                                                                  |
    |                                                                                  expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:75:8
    |
75  |     fn sumPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
276 -             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
276 +             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(p1.clone(), &p2.clone()), &p3.clone())); tmp };
    |
help: consider removing the borrow
    |
276 -             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
276 +             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), p2.clone()), &p3.clone())); tmp };
    |

error[E0308]: arguments to this function are incorrect
   --> /tmp/catmull-clark-subdivision-surface.rs:276:63
    |
276 |             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
    |                                                               ^^^^^^^^ -----------------------------------  ----------- expected `Point`, found `&Point`
    |                                                                        |
    |                                                                        expected `Point`, found `&Point`
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:75:8
    |
75  |     fn sumPoint(p1: Point, p2: Point) -> Point {
    |        ^^^^^^^^ ---------  ---------
help: consider removing the borrow
    |
276 -             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
276 +             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
    |
help: consider removing the borrow
    |
276 -             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), &p3.clone())); tmp };
276 +             newPts = { let mut tmp = newPts.clone(); tmp.push(sumPoint(&sumPoint(&p1.clone(), &p2.clone()), p3.clone())); tmp };
    |

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:283:20
    |
281 |     fn key(a: i32, b: i32) -> &'static str {
    |                               ------------ expected `&str` because of return type
282 |         if a < b {
283 |             return format!("{}{}", format!("{}{}", a.to_string(), ","), b.to_string());
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:285:16
    |
281 |     fn key(a: i32, b: i32) -> &'static str {
    |                               ------------ expected `&str` because of return type
...
285 |         return format!("{}{}", format!("{}{}", b.to_string(), ","), a.to_string());
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:302:128
    |
302 |         let mut edgePointNums: std::collections::HashMap<&'static str, i32> = { let mut m = std::collections::BTreeMap::new(); m };
    |                                                                                                                                ^ expected `HashMap<&str, i32>`, found `BTreeMap<_, _>`
    |
    = note: expected struct `HashMap<&'static str, i32>`
               found struct `BTreeMap<_, _>`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:332:21
    |
332 |         return vec![newPoints, newFaces];
    |                     ^^^^^^^^^ expected `i32`, found `Vec<Point>`
    |
    = note: expected type `i32`
             found struct `Vec<Point>`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:335:16
    |
334 | ...tPoint(p: Point) -> &'static str {
    |                        ------------ expected `&str` because of return type
335 | ...rn format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "[", fmt4(p.x)), " "), fmt4(p.y)), " "), fmt4(p.z)), "]");
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:348:16
    |
337 |     fn formatFace(f: Vec<i32>) -> &'static str {
    |                                   ------------ expected `&'static str` because of return type
...
348 |         return s;
    |                ^ expected `&str`, found `String`
    |
help: consider borrowing here
    |
348 |         return &s;
    |                +

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:358:28
    |
353 |         let mut outputPoints = inputPoints;
    |                                ----------- expected due to this value
...
358 |             outputPoints = res[0];
    |                            ^^^^^^ expected `Vec<Point>`, found `i32`
    |
    = note: expected struct `Vec<Point>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:359:27
    |
354 |         let mut outputFaces = inputFaces;
    |                               ---------- expected due to this value
...
359 |             outputFaces = res[1];
    |                           ^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/catmull-clark-subdivision-surface.rs:363:59
    |
363 | ...   println!("{}", vec![format!("{}", formatPoint(&p.clone()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                         ----------- ^^^^^^^^^^ expected `Point`, found `&Point`
    |                                         |
    |                                         arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/catmull-clark-subdivision-surface.rs:334:8
    |
334 |     fn formatPoint(p: Point) -> &'static str {
    |        ^^^^^^^^^^^ --------
help: consider removing the borrow
    |
363 -             println!("{}", vec![format!("{}", formatPoint(&p.clone()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
363 +             println!("{}", vec![format!("{}", formatPoint(p.clone()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |

error[E0507]: cannot move out of index of `Vec<Vec<i32>>`
   --> /tmp/catmull-clark-subdivision-surface.rs:106:27
    |
106 |             let mut min = tmp[0];
    |                           ^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait
    |
help: consider borrowing here
    |
106 |             let mut min = &tmp[0];
    |                           +
help: consider cloning the value if the performance cost is acceptable
    |
106 |             let mut min = tmp[0].clone();
    |                                 ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<i32>>`
   --> /tmp/catmull-clark-subdivision-surface.rs:110:25
    |
110 |                 let e = tmp[j as usize];
    |                         ^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait
    |
help: consider borrowing here
    |
110 |                 let e = &tmp[j as usize];
    |                         +
help: consider cloning the value if the performance cost is acceptable
    |
110 |                 let e = tmp[j as usize].clone();
    |                                        ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<i32>>`
   --> /tmp/catmull-clark-subdivision-surface.rs:122:65
    |
122 |                     out = { let mut tmp = out.clone(); tmp.push(tmp[k as usize]); tmp };
    |                                                                 ^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait
    |
help: consider cloning the value if the performance cost is acceptable
    |
122 |                     out = { let mut tmp = out.clone(); tmp.push(tmp[k as usize].clone()); tmp };
    |                                                                                ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<i32>>`
   --> /tmp/catmull-clark-subdivision-surface.rs:257:23
    |
257 |             for pn in faces[fnum as usize] {
    |                       ^^^^^^^^^^^^^^^^^^^^
    |                       |
    |                       value moved due to this implicit call to `.into_iter()`
    |                       move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait
    |
note: `into_iter` takes ownership of the receiver `self`, which moves value
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/iter/traits/collect.rs:313:18
help: consider iterating over a slice of the `Vec<i32>`'s content to avoid moving into the `for` loop
    |
257 |             for pn in &faces[fnum as usize] {
    |                       +
help: consider cloning the value if the performance cost is acceptable
    |
257 |             for pn in faces[fnum as usize].clone() {
    |                                           ++++++++

error: aborting due to 54 previous errors; 1 warning emitted

Some errors have detailed explanations: E0277, E0308, E0507, E0599.
For more information about an error, try `rustc --explain E0277`.
