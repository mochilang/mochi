// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn isPrime(n: i32) -> bool {
        if n < 2 {
            return false;
        }
        if n % 2 == 0 {
            return n == 2;
        }
        if n % 3 == 0 {
            return n == 3;
        }
        let mut d = 5;
        while d * d <= n {
            if n % d == 0 {
                return false;
            }
            d += 2;
            if n % d == 0 {
                return false;
            }
            d += 4;
        }
        return true;
    }
    fn firstPrimeFactor(n: i32) -> i32 {
        if n == 1 {
            return 1;
        }
        if n % 3 == 0 {
            return 3;
        }
        if n % 5 == 0 {
            return 5;
        }
        let mut inc = vec![4, 2, 4, 2, 4, 6, 2, 6];
        let mut k = 7;
        let mut i = 0;
        while k * k <= n {
            if n % k == 0 {
                return k;
            }
            k += inc[i as usize];
            i = (i + 1) % inc.len() as i32;
        }
        return n;
    }
    fn indexOf(s: &'static str, ch: &'static str) -> i32 {
        let mut i = 0;
        while i < s.len() as i32 {
            if &s[i as usize..i + 1 as usize] == ch {
                return i;
            }
            i += 1;
        }
        return -1;
    }
    fn padLeft(n: i32, width: i32) -> &'static str {
        let mut s = n.to_string();
        while s.len() as i32 < width {
            s = format!("{}{}", " ", s);
        }
        return s;
    }
    fn formatFloat(f: f64, prec: i32) -> &'static str {
        let s = f.to_string();
        let idx = indexOf(s, ".");
        if idx < 0 {
            return s;
        }
        let need = idx + 1 + prec;
        if s.len() as i32 > need {
            return &s[0 as usize..need as usize];
        }
        return s;
    }
    fn main() -> () {
        let mut blum: Vec<i32> = vec![];
        let mut counts = vec![0, 0, 0, 0];
        let mut digits = vec![1, 3, 7, 9];
        let mut i = 1;
        let mut bc = 0;
        while true {
            let p = firstPrimeFactor(i);
            if p % 4 == 3 {
                let q = ((i as f64) / (p as f64)).parse::<i32>().unwrap();
                if q != p && q % 4 == 3 && isPrime(q) {
                    if bc < 50 {
                        blum = { let mut tmp = blum.clone(); tmp.push(i); tmp };
                    }
                    let d = i % 10;
                    if d == 1 {
                        counts[0] = counts[0] + 1;
                    }
                    bc += 1;
                    if bc == 50 {
                        println!("First 50 Blum integers:");
                        let mut idx = 0;
                        while idx < 50 {
                            let mut line = String::new();
                            let mut j = 0;
                            while j < 10 {
                                line = format!("{}{}", format!("{}{}", line, padLeft(blum[idx as usize], 3)), " ");
                                idx += 1;
                                j += 1;
                            }
                            println!("{}", vec![format!("{}", &line[0 as usize..line.len() as i32 - 1 as usize])].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                        }
                        break;
                    }
                }
            }
            if i % 5 == 3 {
                i += 4;
            } else {
                i += 2;
            }
        }
    }
    main();
}
