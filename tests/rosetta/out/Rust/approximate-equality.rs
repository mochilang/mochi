// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn abs(x: f64) -> f64 {
        if x < 0.0 {
            return -x;
        }
        return x;
    }
    fn maxf(a: f64, b: f64) -> f64 {
        if a > b {
            return a;
        }
        return b;
    }
    fn isClose(a: f64, b: f64) -> bool {
        let relTol = 1e-09;
        let t = abs(a - b);
        let u = relTol * maxf(abs(a), abs(b));
        return t <= u;
    }
    fn sqrtApprox(x: f64) -> f64 {
        let mut guess = x;
        let mut i = 0;
        while i < 10 {
            guess = (guess + x / guess) / 2.0;
            i += 1;
        }
        return guess;
    }
    fn main() -> () {
        let root2 = sqrtApprox(2.0);
        let pairs = vec![vec![1.0000000000000002e+14, 1.0000000000000002e+14], vec![100.01, 100.011], vec![1.0000000000000002e+13 / 10000.0, 1.0000000000000001e+09], vec![0.001, 0.0010000001], vec![1.01e-22, 0.0], vec![root2 * root2, 2.0], vec![(-root2) * root2, -2.0], vec![1e+17.0, 1e+17.0], vec![3.141592653589793, 3.141592653589793]];
        for pair in pairs {
            let a = pair[0];
            let b = pair[1];
            let s = if isClose(a, b) { "≈" } else { "≉" };
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), s), " "), b.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
    }
    main();
}
