// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn add(a: i32, b: i32) -> i32 {
        return a + b;
    }
    fn sub(a: i32, b: i32) -> i32 {
        return a - b;
    }
    fn mul(a: i32, b: i32) -> i32 {
        return a * b;
    }
    fn fold(f: Box<dyn Fn(i32, i32) -> i32>, xs: Vec<i32>) -> i32 {
        let mut r = xs[0];
        let mut i = 1;
        while i < xs.len() as i32 {
            r = f(r, xs[i as usize]);
            i += 1;
        }
        return r;
    }
    let n = vec![1, 2, 3, 4, 5];
    println!("{}", vec![format!("{}", fold(Box::new(move |a: i32, b: i32| add(a, b)), n))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", fold(Box::new(move |a: i32, b: i32| sub(a, b)), n))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", fold(Box::new(move |a: i32, b: i32| mul(a, b)), n))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
