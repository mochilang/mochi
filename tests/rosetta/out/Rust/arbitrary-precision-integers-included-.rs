// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn pow_int(base: i32, exp: i32) -> i32 {
        let mut result = 1;
        let mut b = base;
        let mut e = exp;
        while e > 0 {
            if e % 2 == 1 {
                result *= b;
            }
            b *= b;
            e = ((e as f64) / (2 as f64)).parse::<i32>().unwrap();
        }
        return result;
    }
    fn pow_big(base: bigint, exp: i32) -> bigint {
        let mut result: bigint = 1;
        let mut b: bigint = base;
        let mut e = exp;
        while e > 0 {
            if e % 2 == 1 {
                result *= b;
            }
            b *= b;
            e = ((e as f64) / (2 as f64)).parse::<i32>().unwrap();
        }
        return result;
    }
    let mut e1 = pow_int(3, 2);
    let mut e2 = pow_int(4, e1);
    let mut base: bigint = 5;
    let mut x: bigint = pow_big(base, e2);
    let mut s = x.to_string();
    println!("{}", vec![format!("{}", "5^(4^(3^2)) has"), format!("{}", s.len() as i32), format!("{}", "digits:"), format!("{}", &s[0..20]), format!("{}", "..."), format!("{}", &s[s.len() as i32 - 20 as usize..s.len() as i32 as usize])].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
