// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:43Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn indexOf(s: &'static str, ch: &'static str) -> i32 {
        let mut i = 0;
        while i < s.len() as i32 {
            if &s[i as usize..i + 1 as usize] == ch {
                return i;
            }
            i += 1;
        }
        return -1;
    }
    fn fmt3(x: f64) -> &'static str {
        let mut y = ((x * 1000.0) + 0.5).parse::<i32>().unwrap().parse::<f64>().unwrap() / 1000.0;
        let mut s = y.to_string();
        let mut dot = indexOf(s, ".");
        if dot == 0 - 1 {
            s += ".000";
        } else {
            let mut decs = s.len() as i32 - dot - 1;
            if decs > 3 {
                s = &s[0 as usize..dot + 4 as usize];
            } else {
                while decs < 3 {
                    s += "0";
                    decs += 1;
                }
            }
        }
        return s;
    }
    fn pad(s: &'static str, width: i32) -> &'static str {
        let mut out = s;
        while out.len() as i32 < width {
            out = format!("{}{}", " ", out);
        }
        return out;
    }
    fn smaSeries(xs: Vec<f64>, period: i32) -> Vec<f64> {
        let mut res: Vec<f64> = vec![];
        let mut sum = 0.0;
        let mut i = 0;
        while i < xs.len() as i32 {
            sum += xs[i as usize];
            if i >= period {
                sum -= xs[i - period as usize];
            }
            let mut denom = i + 1;
            if denom > period {
                denom = period;
            }
            res = append(res, sum / (denom.parse::<f64>().unwrap()));
            i += 1;
        }
        return res;
    }
    fn main() -> () {
        let mut xs = vec![1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
        let mut sma3 = smaSeries(xs, 3);
        let mut sma5 = smaSeries(xs, 5);
        println!("x       sma3   sma5");
        let mut i = 0;
        while i < xs.len() as i32 {
            let line = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pad(fmt3(xs[i as usize]), 5), "  "), pad(fmt3(sma3[i as usize]), 5)), "  "), pad(fmt3(sma5[i as usize]), 5));
            println!("{}", line);
            i += 1;
        }
    }
    main();
}
