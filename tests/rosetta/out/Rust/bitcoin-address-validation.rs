// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn indexOf(s: &'static str, ch: &'static str) -> i32 {
        let mut i = 0;
        while i < s.len() as i32 {
            if &s[i as usize..i + 1 as usize] == ch {
                return i;
            }
            i += 1;
        }
        return -1;
    }
    fn set58(addr: &'static str) -> Vec<i32> {
        let tmpl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
        let mut a: Vec<i32> = vec![];
        let mut i = 0;
        while i < 25 {
            a = { let mut tmp = a.clone(); tmp.push(0); tmp };
            i += 1;
        }
        let mut idx = 0;
        while idx < addr.len() as i32 {
            let ch = &addr[idx as usize..idx + 1 as usize];
            let mut c = indexOf(tmpl, ch);
            if c < 0 {
                return vec![];
            }
            let mut j = 24;
            while j >= 0 {
                c = c + 58 * a[j as usize];
                a[j as usize] = c % 256;
                c = ((c as f64) / (256 as f64)).parse::<i32>().unwrap();
                j -= 1;
            }
            if c > 0 {
                return vec![];
            }
            idx += 1;
        }
        return a;
    }
    fn doubleSHA256(bs: Vec<i32>) -> Vec<i32> {
        let first = sha256(bs);
        return sha256(first);
    }
    fn computeChecksum(a: Vec<i32>) -> Vec<i32> {
        let hash = doubleSHA256(a[0..21].to_vec());
        return hash[0..4].to_vec();
    }
    fn validA58(addr: &'static str) -> bool {
        let a = set58(addr);
        if a.len() as i32 != 25 {
            return false;
        }
        if a[0] != 0 {
            return false;
        }
        let sum = computeChecksum(a);
        let mut i = 0;
        while i < 4 {
            if a[21 + i as usize] != sum[i as usize] {
                return false;
            }
            i += 1;
        }
        return true;
    }
    println!("{}", vec![format!("{}", validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i").to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j").to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
