// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:35Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn amb(wordsets: Vec<Vec<&'static str>>, res: &mut Vec<&'static str>, idx: i32) -> bool {
        if idx == wordsets.len() as i32 {
            return true;
        }
        let mut prev = "";
        if idx > 0 {
            prev = res[idx - 1 as usize];
        }
        let mut i = 0;
        while i < wordsets[idx as usize].len() as i32 {
            let w = wordsets[idx as usize][i as usize];
            if idx == 0 || &prev[prev.len() as i32 - 1 as usize..prev.len() as i32 as usize] == &w[0..1] {
                res[idx as usize] = w;
                if amb(wordsets, &mut res, idx + 1) {
                    return true;
                }
            }
            i += 1;
        }
        return false;
    }
    fn main() -> () {
        let wordset = vec![vec!["the", "that", "a"], vec!["frog", "elephant", "thing"], vec!["walked", "treaded", "grows"], vec!["slowly", "quickly"]];
        let mut res: Vec<&'static str> = vec![];
        let mut i = 0;
        while i < wordset.len() as i32 {
            res = append(res, "");
            i += 1;
        }
        if amb(wordset, &mut res, 0) {
            let mut out = format!("{}{}", "[", res[0]);
            let mut j = 1;
            while j < res.len() as i32 {
                out = format!("{}{}", format!("{}{}", out, " "), res[j as usize]);
                j += 1;
            }
            out += "]";
            println!("{}", out);
        } else {
            println!("No amb found");
        }
    }
    main();
}
