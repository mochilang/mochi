// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn concatInts(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
        let mut out: Vec<i32> = vec![];
        for v in a {
            out = { let mut tmp = out.clone(); tmp.push(v); tmp };
        }
        for v in b {
            out = { let mut tmp = out.clone(); tmp.push(v); tmp };
        }
        return out;
    }
    fn concatAny(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
        let mut out: Vec<i32> = vec![];
        for v in a {
            out = { let mut tmp = out.clone(); tmp.push(v); tmp };
        }
        for v in b {
            out = { let mut tmp = out.clone(); tmp.push(v); tmp };
        }
        return out;
    }
    let mut a = vec![1, 2, 3];
    let mut b = vec![7, 12, 60];
    println!("{}", vec![format!("{}", concatInts(a, b).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut i: Vec<i32> = vec![1, 2, 3];
    let mut j: Vec<i32> = vec!["Crosby", "Stills", "Nash", "Young"];
    println!("{}", vec![format!("{}", concatAny(i, j).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut l = vec![1, 2, 3];
    let mut m = vec![7, 12, 60];
    println!("{}", vec![format!("{}", concatInts(l, m).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
