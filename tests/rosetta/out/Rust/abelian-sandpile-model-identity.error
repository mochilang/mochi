rustc: exit status 1
error[E0308]: mismatched types
  --> /tmp/abelian-sandpile-model-identity.rs:52:16
   |
39 |     fn pileString(p: Vec<i32>) -> &'static str {
   |                                   ------------ expected `&'static str` because of return type
...
52 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
52 |         return &s;
   |                +

warning: variable does not need to be mutable
  --> /tmp/abelian-sandpile-model-identity.rs:62:9
   |
62 |     let mut s1 = vec![1, 2, 0, 2, 1, 1, 0, 1, 3];
   |         ----^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /tmp/abelian-sandpile-model-identity.rs:63:9
   |
63 |     let mut s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/abelian-sandpile-model-identity.rs:89:9
   |
89 |     let mut s3 = vec![3, 3, 3, 3, 3, 3, 3, 3, 3];
   |         ----^^
   |         |
   |         help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/abelian-sandpile-model-identity.rs:90:9
   |
90 |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

error[E0382]: use of moved value: `s4`
  --> /tmp/abelian-sandpile-model-identity.rs:57:21
   |
55 |     let mut s4 = vec![4, 3, 3, 3, 1, 2, 0, 2, 3];
   |         ------ move occurs because `s4` has type `Vec<i32>`, which does not implement the `Copy` trait
56 |     println!("{}", vec![format!("{}", pileString(s4))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
   |                                                  -- value moved here
57 |     while !isStable(s4) {
   |                     ^^ value used here after move
   |
note: consider changing this parameter type in function `pileString` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:39:22
   |
39 |     fn pileString(p: Vec<i32>) -> &'static str {
   |        ----------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
56 |     println!("{}", vec![format!("{}", pileString(s4.clone()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
   |                                                    ++++++++

error[E0382]: borrow of moved value: `s4`
  --> /tmp/abelian-sandpile-model-identity.rs:58:16
   |
55 |     let mut s4 = vec![4, 3, 3, 3, 1, 2, 0, 2, 3];
   |         ------ move occurs because `s4` has type `Vec<i32>`, which does not implement the `Copy` trait
56 |     println!("{}", vec![format!("{}", pileString(s4))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
57 |     while !isStable(s4) {
   |     -------------------
   |     |               |
   |     |               value moved here
   |     inside of this loop
58 |         topple(&mut s4);
   |                ^^^^^^^ value borrowed here after move
   |
note: consider changing this parameter type in function `isStable` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:15:20
   |
15 |     fn isStable(p: Vec<i32>) -> bool {
   |        --------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider moving the expression out of the loop so it is only moved once
   |
57 ~     let mut value = isStable(s4);
58 ~     while !value {
   |
help: consider cloning the value if the performance cost is acceptable
   |
57 |     while !isStable(s4.clone()) {
   |                       ++++++++

error[E0382]: use of moved value: `s3_a`
  --> /tmp/abelian-sandpile-model-identity.rs:65:21
   |
64 |     let mut s3_a = plus(s1, s2);
   |         -------- move occurs because `s3_a` has type `Vec<i32>`, which does not implement the `Copy` trait
65 |     while !isStable(s3_a) {
   |     ----------------^^^^-
   |     |               |
   |     |               value moved here, in previous iteration of loop
   |     inside of this loop
   |
note: consider changing this parameter type in function `isStable` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:15:20
   |
15 |     fn isStable(p: Vec<i32>) -> bool {
   |        --------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider moving the expression out of the loop so it is only moved once
   |
65 ~     let mut value = isStable(s3_a);
66 ~     while !value {
   |
help: consider cloning the value if the performance cost is acceptable
   |
65 |     while !isStable(s3_a.clone()) {
   |                         ++++++++

error[E0382]: use of moved value: `s2`
  --> /tmp/abelian-sandpile-model-identity.rs:68:25
   |
63 |     let mut s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
   |         ------ move occurs because `s2` has type `Vec<i32>`, which does not implement the `Copy` trait
64 |     let mut s3_a = plus(s1, s2);
   |                             -- value moved here
...
68 |     let mut s3_b = plus(s2, s1);
   |                         ^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:29
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----                 ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
64 |     let mut s3_a = plus(s1, s2.clone());
   |                               ++++++++

error[E0382]: use of moved value: `s1`
  --> /tmp/abelian-sandpile-model-identity.rs:68:29
   |
62 |     let mut s1 = vec![1, 2, 0, 2, 1, 1, 0, 1, 3];
   |         ------ move occurs because `s1` has type `Vec<i32>`, which does not implement the `Copy` trait
63 |     let mut s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
64 |     let mut s3_a = plus(s1, s2);
   |                         -- value moved here
...
68 |     let mut s3_b = plus(s2, s1);
   |                             ^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:16
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
64 |     let mut s3_a = plus(s1.clone(), s2);
   |                           ++++++++

error[E0382]: use of moved value: `s3_b`
  --> /tmp/abelian-sandpile-model-identity.rs:69:21
   |
68 |     let mut s3_b = plus(s2, s1);
   |         -------- move occurs because `s3_b` has type `Vec<i32>`, which does not implement the `Copy` trait
69 |     while !isStable(s3_b) {
   |     ----------------^^^^-
   |     |               |
   |     |               value moved here, in previous iteration of loop
   |     inside of this loop
   |
note: consider changing this parameter type in function `isStable` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:15:20
   |
15 |     fn isStable(p: Vec<i32>) -> bool {
   |        --------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider moving the expression out of the loop so it is only moved once
   |
69 ~     let mut value = isStable(s3_b);
70 ~     while !value {
   |
help: consider cloning the value if the performance cost is acceptable
   |
69 |     while !isStable(s3_b.clone()) {
   |                         ++++++++

error[E0382]: use of moved value: `s1`
  --> /tmp/abelian-sandpile-model-identity.rs:72:114
   |
62 |     let mut s1 = vec![1, 2, 0, 2, 1, 1, 0, 1, 3];
   |         ------ move occurs because `s1` has type `Vec<i32>`, which does not implement the `Copy` trait
...
68 |     let mut s3_b = plus(s2, s1);
   |                             -- value moved here
...
72 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s1), "
   |                                                                                                                  ^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:29
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----                 ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
68 |     let mut s3_b = plus(s2, s1.clone());
   |                               ++++++++

error[E0382]: use of moved value: `s2`
  --> /tmp/abelian-sandpile-model-identity.rs:75:16
   |
63 |     let mut s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
   |         ------ move occurs because `s2` has type `Vec<i32>`, which does not implement the `Copy` trait
...
68 |     let mut s3_b = plus(s2, s1);
   |                         -- value moved here
...
75 | "), pileString(s2)), "
   |                ^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:16
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
68 |     let mut s3_b = plus(s2.clone(), s1);
   |                           ++++++++

error[E0382]: use of moved value: `s2`
  --> /tmp/abelian-sandpile-model-identity.rs:81:15
   |
63 |     let mut s2 = vec![2, 1, 3, 1, 0, 1, 0, 1, 0];
   |         ------ move occurs because `s2` has type `Vec<i32>`, which does not implement the `Copy` trait
...
75 | "), pileString(s2)), "
   |                -- value moved here
...
81 | ", pileString(s2)), "
   |               ^^ value used here after move
   |
note: consider changing this parameter type in function `pileString` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:39:22
   |
39 |     fn pileString(p: Vec<i32>) -> &'static str {
   |        ----------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
75 | "), pileString(s2.clone())), "
   |                  ++++++++

error[E0382]: use of moved value: `s1`
  --> /tmp/abelian-sandpile-model-identity.rs:84:16
   |
62 |     let mut s1 = vec![1, 2, 0, 2, 1, 1, 0, 1, 3];
   |         ------ move occurs because `s1` has type `Vec<i32>`, which does not implement the `Copy` trait
...
72 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s1), "
   |                                                                                                                  -- value moved here
...
84 | "), pileString(s1)), "
   |                ^^ value used here after move
   |
note: consider changing this parameter type in function `pileString` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:39:22
   |
39 |     fn pileString(p: Vec<i32>) -> &'static str {
   |        ----------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
72 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s1.clone()), "
   |                                                                                                                    ++++++++

error[E0382]: use of moved value: `s4b`
  --> /tmp/abelian-sandpile-model-identity.rs:92:21
   |
91 |     let mut s4b = plus(s3, s3_id);
   |         ------- move occurs because `s4b` has type `Vec<i32>`, which does not implement the `Copy` trait
92 |     while !isStable(s4b) {
   |     ----------------^^^-
   |     |               |
   |     |               value moved here, in previous iteration of loop
   |     inside of this loop
   |
note: consider changing this parameter type in function `isStable` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:15:20
   |
15 |     fn isStable(p: Vec<i32>) -> bool {
   |        --------    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider moving the expression out of the loop so it is only moved once
   |
92 ~     let mut value = isStable(s4b);
93 ~     while !value {
   |
help: consider cloning the value if the performance cost is acceptable
   |
92 |     while !isStable(s4b.clone()) {
   |                        ++++++++

error[E0382]: use of moved value: `s3`
  --> /tmp/abelian-sandpile-model-identity.rs:95:114
   |
89 |     let mut s3 = vec![3, 3, 3, 3, 3, 3, 3, 3, 3];
   |         ------ move occurs because `s3` has type `Vec<i32>`, which does not implement the `Copy` trait
90 |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
91 |     let mut s4b = plus(s3, s3_id);
   |                        -- value moved here
...
95 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s3), "
   |                                                                                                                  ^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:16
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----    ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
91 |     let mut s4b = plus(s3.clone(), s3_id);
   |                          ++++++++

error[E0382]: use of moved value: `s3_id`
  --> /tmp/abelian-sandpile-model-identity.rs:98:16
   |
90 |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
   |         --------- move occurs because `s3_id` has type `Vec<i32>`, which does not implement the `Copy` trait
91 |     let mut s4b = plus(s3, s3_id);
   |                            ----- value moved here
...
98 | "), pileString(s3_id)), "
   |                ^^^^^ value used here after move
   |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
  --> /tmp/abelian-sandpile-model-identity.rs:6:29
   |
6  |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
   |        ----                 ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
91 |     let mut s4b = plus(s3, s3_id.clone());
   |                                 ++++++++

error[E0382]: use of moved value: `s3_id`
   --> /tmp/abelian-sandpile-model-identity.rs:103:23
    |
90  |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
    |         --------- move occurs because `s3_id` has type `Vec<i32>`, which does not implement the `Copy` trait
...
98  | "), pileString(s3_id)), "
    |                ----- value moved here
...
103 |     let mut s5 = plus(s3_id, s3_id);
    |                       ^^^^^ value used here after move
    |
note: consider changing this parameter type in function `pileString` to borrow instead if owning the value isn't necessary
   --> /tmp/abelian-sandpile-model-identity.rs:39:22
    |
39  |     fn pileString(p: Vec<i32>) -> &'static str {
    |        ----------    ^^^^^^^^ this parameter takes ownership of the value
    |        |
    |        in this function
help: consider cloning the value if the performance cost is acceptable
    |
98  | "), pileString(s3_id.clone())), "
    |                     ++++++++

error[E0382]: use of moved value: `s3_id`
   --> /tmp/abelian-sandpile-model-identity.rs:103:30
    |
90  |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
    |         --------- move occurs because `s3_id` has type `Vec<i32>`, which does not implement the `Copy` trait
...
103 |     let mut s5 = plus(s3_id, s3_id);
    |                       -----  ^^^^^ value used here after move
    |                       |
    |                       value moved here
    |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
   --> /tmp/abelian-sandpile-model-identity.rs:6:16
    |
6   |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
    |        ----    ^^^^^^^^ this parameter takes ownership of the value
    |        |
    |        in this function
help: consider cloning the value if the performance cost is acceptable
    |
103 |     let mut s5 = plus(s3_id.clone(), s3_id);
    |                            ++++++++

error[E0382]: use of moved value: `s5`
   --> /tmp/abelian-sandpile-model-identity.rs:104:21
    |
103 |     let mut s5 = plus(s3_id, s3_id);
    |         ------ move occurs because `s5` has type `Vec<i32>`, which does not implement the `Copy` trait
104 |     while !isStable(s5) {
    |     ----------------^^-
    |     |               |
    |     |               value moved here, in previous iteration of loop
    |     inside of this loop
    |
note: consider changing this parameter type in function `isStable` to borrow instead if owning the value isn't necessary
   --> /tmp/abelian-sandpile-model-identity.rs:15:20
    |
15  |     fn isStable(p: Vec<i32>) -> bool {
    |        --------    ^^^^^^^^ this parameter takes ownership of the value
    |        |
    |        in this function
help: consider moving the expression out of the loop so it is only moved once
    |
104 ~     let mut value = isStable(s5);
105 ~     while !value {
    |
help: consider cloning the value if the performance cost is acceptable
    |
104 |     while !isStable(s5.clone()) {
    |                       ++++++++

error[E0382]: use of moved value: `s3_id`
   --> /tmp/abelian-sandpile-model-identity.rs:107:114
    |
90  |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
    |         --------- move occurs because `s3_id` has type `Vec<i32>`, which does not implement the `Copy` trait
...
103 |     let mut s5 = plus(s3_id, s3_id);
    |                              ----- value moved here
...
107 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s3_id), "
    |                                                                                                                  ^^^^^ value used here after move
    |
note: consider changing this parameter type in function `plus` to borrow instead if owning the value isn't necessary
   --> /tmp/abelian-sandpile-model-identity.rs:6:29
    |
6   |     fn plus(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {
    |        ----                 ^^^^^^^^ this parameter takes ownership of the value
    |        |
    |        in this function
help: consider cloning the value if the performance cost is acceptable
    |
103 |     let mut s5 = plus(s3_id, s3_id.clone());
    |                                   ++++++++

error[E0382]: use of moved value: `s3_id`
   --> /tmp/abelian-sandpile-model-identity.rs:110:16
    |
90  |     let mut s3_id = vec![2, 1, 2, 1, 0, 1, 2, 1, 2];
    |         --------- move occurs because `s3_id` has type `Vec<i32>`, which does not implement the `Copy` trait
...
107 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s3_id), "
    |                                                                                                                  ----- value moved here
...
110 | "), pileString(s3_id)), "
    |                ^^^^^ value used here after move
    |
note: consider changing this parameter type in function `pileString` to borrow instead if owning the value isn't necessary
   --> /tmp/abelian-sandpile-model-identity.rs:39:22
    |
39  |     fn pileString(p: Vec<i32>) -> &'static str {
    |        ----------    ^^^^^^^^ this parameter takes ownership of the value
    |        |
    |        in this function
help: consider cloning the value if the performance cost is acceptable
    |
107 |     println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", pileString(s3_id.clone()), "
    |                                                                                                                       ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<i32>>`
  --> /tmp/abelian-sandpile-model-identity.rs:29:27
   |
29 |                 let nbs = neighbors[i as usize];
   |                           ^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
29 |                 let nbs = &neighbors[i as usize];
   |                           +
help: consider cloning the value if the performance cost is acceptable
   |
29 |                 let nbs = neighbors[i as usize].clone();
   |                                                ++++++++

error: aborting due to 20 previous errors; 4 warnings emitted

Some errors have detailed explanations: E0308, E0382, E0507.
For more information about an error, try `rustc --explain E0308`.
