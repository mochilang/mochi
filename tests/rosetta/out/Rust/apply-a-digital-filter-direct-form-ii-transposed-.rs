// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:38Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn applyFilter(input: Vec<f64>, a: Vec<f64>, b: Vec<f64>) -> Vec<f64> {
        let mut out: Vec<f64> = vec![];
        let scale = 1.0 / a[0];
        let mut i = 0;
        while i < input.len() as i32 {
            let mut tmp = 0.0;
            let mut j = 0;
            while j <= i && j < b.len() as i32 {
                tmp = tmp + b[j as usize] * input[i - j as usize];
                j += 1;
            }
            j = 0;
            while j < i && j + 1 < a.len() as i32 {
                tmp = tmp - a[j + 1 as usize] * out[i - j - 1 as usize];
                j += 1;
            }
            out = append(out, tmp * scale);
            i += 1;
        }
        return out;
    }
    let a = vec![1.0, -2.7756e-16, 0.33333333, -1.85e-17];
    let b = vec![0.16666667, 0.5, 0.5, 0.16666667];
    let sig = vec![-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589];
    let res = applyFilter(sig, a, b);
    let mut k = 0;
    while k < res.len() as i32 {
        println!("{}", res[k as usize]);
        k += 1;
    }
}
