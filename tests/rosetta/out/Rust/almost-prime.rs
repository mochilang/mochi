// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn kPrime(n: &mut i32, k: i32) -> bool {
        let mut nf = 0;
        let mut i = 2;
        while i <= n {
            while n % i == 0 {
                if nf == k {
                    return false;
                }
                nf += 1;
                n /= i;
            }
            i += 1;
        }
        return nf == k;
    }
    fn gen(k: i32, count: i32) -> Vec<i32> {
        let mut r: Vec<i32> = vec![];
        let mut n = 2;
        while r.len() as i32 < count {
            if kPrime(&mut n, k) {
                r = { let mut tmp = r.clone(); tmp.push(n); tmp };
            }
            n += 1;
        }
        return r;
    }
    fn main() -> () {
        let mut k = 1;
        while k <= 5 {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", k.to_string(), " "), gen(k, 10).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            k += 1;
        }
    }
    main();
}
