// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn parseIntStr(str: &'static str) -> i32 {
        let mut i = 0;
        let mut neg = false;
        if str.len() as i32 > 0 && &str[0..1] == "-" {
            neg = true;
            i = 1;
        }
        let mut n = 0;
        let digits = { let mut m = std::collections::BTreeMap::new(); m.insert("0", 0); m.insert("1", 1); m.insert("2", 2); m.insert("3", 3); m.insert("4", 4); m.insert("5", 5); m.insert("6", 6); m.insert("7", 7); m.insert("8", 8); m.insert("9", 9); m };
        while i < str.len() as i32 {
            n = n * 10 + *digits.get(&&str[i as usize..i + 1 as usize]).unwrap();
            i += 1;
        }
        if neg {
            n = -n;
        }
        return n;
    }
    fn splitWs(s: &'static str) -> Vec<&'static str> {
        let mut parts: Vec<&'static str> = vec![];
        let mut cur = String::new();
        let mut i = 0;
        while i < s.len() as i32 {
            let ch = &s[i as usize..i + 1 as usize];
            if ch == " " || ch == "
                    parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
            parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
            px = { let mut tmp = px.clone(); tmp.push(parseIntStr(toks[i as usize])); tmp };
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "width=", img.w.to_string()), " height="), img.h.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                    cur = "";
                }
            } else {
                cur += ch;
            }
            i += 1;
        }
        if cur.len() as i32 > 0 {
            parts = append(parts, cur);
        }
        return parts;
    }
    fn parsePpm(data: &'static str) -> std::collections::HashMap<&'static str, i32> {
        let toks = splitWs(data);
        if toks.len() as i32 < 4 {
            return { let mut m = std::collections::BTreeMap::new(); m.insert("err", true); m };
        }
        let magic = toks[0];
        let w = parseIntStr(toks[1]);
        let h = parseIntStr(toks[2]);
        let maxv = parseIntStr(toks[3]);
        let mut px: Vec<i32> = vec![];
        let mut i = 4;
        while i < toks.len() as i32 {
            px = append(px, parseIntStr(toks[i as usize]));
            i += 1;
        }
        return { let mut m = std::collections::BTreeMap::new(); m.insert("magic", magic); m.insert("w", w); m.insert("h", h); m.insert("max", maxv); m.insert("px", px); m };
    }
    let ppmData = "P3
2 2
1
0 1 1 0 1 0 0 1 1 1 0 0
";
    let img = parsePpm(ppmData);
    println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "width=", img.w.to_string()), " height="), img.h.to_string()));
}
