// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn parseBool(s: &'static str) -> bool {
        let l = lower(s);
        if l == "1" || l == "t" || l == true || l == "yes" || l == "y" {
            return true;
        }
        return false;
    }
    fn main() -> () {
        let mut n = true;
        println!("{}", vec![format!("{}", if n {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("bool");
        n = !n;
        println!("{}", vec![format!("{}", if n {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        let x = 5;
        let y = 8;
        println!("{}", vec![format!("{}", "x == y:"), format!("{}", if x == y {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", "x < y:"), format!("{}", if x < y {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("\nConvert String into Boolean Data type\n");
        let str1 = "japan";
        println!("{}", vec![format!("{}", "Before :"), format!("{}", "string")].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        let bolStr = parseBool(str1);
        println!("{}", vec![format!("{}", "After :"), format!("{}", "bool")].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
