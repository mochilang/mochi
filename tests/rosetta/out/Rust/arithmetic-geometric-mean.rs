// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn abs(x: f64) -> f64 {
        if x < 0.0 {
            return -x;
        }
        return x;
    }
    fn sqrtApprox(x: f64) -> f64 {
        let mut guess = x;
        let mut i = 0;
        while i < 20 {
            guess = (guess + x / guess) / 2.0;
            i += 1;
        }
        return guess;
    }
    fn agm(a: &mut f64, g: &mut f64) -> f64 {
        let eps = 1e-14;
        while abs(a - g) > abs(a) * eps {
            let newA = (a + g) / 2.0;
            let newG = sqrtApprox(a * g);
            a = newA;
            g = newG;
        }
        return a;
    }
    fn main() -> () {
        println!("{}", vec![format!("{}", agm(&mut 1.0, &mut 1.0 / sqrtApprox(2.0)).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
