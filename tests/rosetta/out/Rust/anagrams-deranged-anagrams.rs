// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:35Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn sortRunes(s: &'static str) -> &'static str {
        let mut arr: Vec<&'static str> = vec![];
        let mut i = 0;
        while i < s.len() as i32 {
            arr = append(arr, &s[i as usize..i + 1 as usize]);
            i += 1;
        }
        let mut n = arr.len() as i32;
        let mut m = 0;
        while m < n {
            let mut j = 0;
            while j < n - 1 {
                if arr[j as usize] > arr[j + 1 as usize] {
                    let tmp = arr[j as usize];
                    arr[j as usize] = arr[j + 1 as usize];
                    arr[j + 1 as usize] = tmp;
                }
                j += 1;
            }
            m += 1;
        }
        let mut out = "";
        i = 0;
        while i < n {
            out += arr[i as usize];
            i += 1;
        }
        return out;
    }
    fn deranged(a: &'static str, b: &'static str) -> bool {
        if a.len() as i32 != b.len() as i32 {
            return false;
        }
        let mut i = 0;
        while i < a.len() as i32 {
            if &a[i as usize..i + 1 as usize] == &b[i as usize..i + 1 as usize] {
                return false;
            }
            i += 1;
        }
        return true;
    }
    fn main() -> () {
        let words = vec!["constitutionalism", "misconstitutional"];
        let mut m: std::collections::HashMap<&'static str, Vec<&'static str>> = { let mut m = std::collections::BTreeMap::new(); m };
        let mut bestLen = 0;
        let mut w1 = "";
        let mut w2 = "";
        for w in words {
            if w.len() as i32 <= bestLen {
                continue;
            }
            let k = sortRunes(w);
            if !(m.contains_key(&k)) {
                m.insert(k, vec![w]);
                continue;
            }
            for c in m[&k].keys() {
                if deranged(w, c) {
                    bestLen = w.len() as i32;
                    w1 = c;
                    w2 = w;
                    break;
                }
            }
            m.insert(k, append(m[&k], w));
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", w1, " "), w2), " : Length "), bestLen.to_string()));
    }
    main();
}
