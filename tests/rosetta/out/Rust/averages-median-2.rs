// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:43Z
fn main() {
    fn sel(list: &mut Vec<f64>, k: i32) -> f64 {
        let mut i = 0;
        while i <= k {
            let mut minIndex = i;
            let mut j = i + 1;
            while j < list.len() as i32 {
                if list[j as usize] < list[minIndex as usize] {
                    minIndex = j;
                }
                j += 1;
            }
            let tmp = list[i as usize];
            list[i as usize] = list[minIndex as usize];
            list[minIndex as usize] = tmp;
            i += 1;
        }
        return list[k as usize];
    }
    fn median(a: Vec<f64>) -> f64 {
        let mut arr = a;
        let half = ((arr.len() as i32 as f64) / (2 as f64)).parse::<i32>().unwrap();
        let med = sel(&mut arr, half);
        if arr.len() as i32 % 2 == 0 {
            return (med + arr[half - 1 as usize]) / 2.0;
        }
        return med;
    }
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0]).to_string());
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0, 5.0]).to_string());
}
