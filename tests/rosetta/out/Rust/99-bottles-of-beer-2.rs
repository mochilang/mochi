// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn fields(s: &'static str) -> Vec<&'static str> {
        let mut words: Vec<&'static str> = vec![];
        let mut cur = String::new();
        let mut i = 0;
        while i < s.len() as i32 {
            let ch = &s[i as usize..i + 1 as usize];
            if ch == " " || ch == "
" || ch == "	" {
                if cur.len() as i32 > 0 {
                    words = { let mut tmp = words.clone(); tmp.push(cur); tmp };
                    cur = "";
                }
            } else {
                cur += ch;
            }
            i += 1;
        }
        if cur.len() as i32 > 0 {
            words = { let mut tmp = words.clone(); tmp.push(cur); tmp };
        }
        return words;
    }
    fn join(xs: Vec<&'static str>, sep: &'static str) -> &'static str {
        let mut res = String::new();
        let mut i = 0;
        while i < xs.len() as i32 {
            if i > 0 {
                res += sep;
            }
            res += xs[i as usize];
            i += 1;
        }
        return res;
    }
    fn numberName(n: i32) -> &'static str {
        let small = vec!["no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
        let tens = vec!["ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
        if n < 0 {
            return "";
        }
        if n < 20 {
            return small[n as usize];
        }
        if n < 100 {
            let mut t = tens[((n as f64) / (10 as f64)).parse::<i32>().unwrap() as usize];
            let mut s = n % 10;
            if s > 0 {
                t = format!("{}{}", format!("{}{}", t, " "), small[s as usize]);
            }
            return t;
        }
        return "";
    }
    fn pluralizeFirst(s: &'static str, n: i32) -> &'static str {
        if n == 1 {
            return s;
        }
        let w = fields(s);
        if w.len() as i32 > 0 {
            w[0] = format!("{}{}", w[0], "s");
        }
        return join(w, " ");
    }
    fn randInt(seed: i32, n: i32) -> i32 {
        let next = (seed * 1664525 + 1013904223) % 2147483647;
        return next % n;
    }
    fn slur(p: &'static str, d: i32) -> &'static str {
        if p.len() as i32 <= 2 {
            return p;
        }
        let mut a: Vec<&'static str> = vec![];
        let mut i = 1;
        while i < p.len() as i32 - 1 {
            a = { let mut tmp = a.clone(); tmp.push(&p[i as usize..i + 1 as usize]); tmp };
            i += 1;
        }
        let mut idx = a.len() as i32 - 1;
        let mut seed = d;
        while idx >= 1 {
            seed = (seed * 1664525 + 1013904223) % 2147483647;
            if seed % 100 >= d {
                let j = seed % (idx + 1);
                let tmp = a[idx as usize];
                a[idx as usize] = a[j as usize];
                a[j as usize] = tmp;
            }
            idx -= 1;
        }
        let mut s = &p[0..1];
        let mut k = 0;
        while k < a.len() as i32 {
            s += a[k as usize];
            k += 1;
        }
        s += &p[p.len() as i32 - 1 as usize..p.len() as i32 as usize];
        let w = fields(s);
        return join(w, " ");
    }
    fn main() -> () {
        let mut i = 99;
        while i > 0 {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur("bottle of", i), i)), " "), slur("beer on the wall", i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), " "), pluralizeFirst(slur("bottle of", i), i)), " "), slur("beer", i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur("take one", i), " "), slur("down", i)), " "), slur("pass it around", i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i - 1), i), " "), pluralizeFirst(slur("bottle of", i), i - 1)), " "), slur("beer on the wall", i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            i -= 1;
        }
    }
    main();
}
