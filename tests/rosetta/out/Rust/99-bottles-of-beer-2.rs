// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
fn main() {
    let fields = move |s: String| -> Vec<String> {
        let mut words: Vec<String> = vec![];
        let mut cur = String::new();
        let mut i = 0;
        while i < (s.len() as i32) {
            let ch = s[(i) as usize..(i + 1) as usize].to_string();
            if ch == String::from(" ") || ch == String::from("
") || ch == String::from("	") {
                if (cur.len() as i32) > 0 {
                    words = { let mut tmp = words.clone(); tmp.push(cur); tmp };
                    cur = String::from("");
                }
            } else {
                cur = format!("{}{}", cur, ch);
            }
            i += 1;
        }
        if (cur.len() as i32) > 0 {
            words = { let mut tmp = words.clone(); tmp.push(cur); tmp };
        }
        return words;
    };
    let join = move |xs: Vec<String>, sep: String| -> String {
        let mut res = String::new();
        let mut i = 0;
        while i < (xs.len() as i32) {
            if i > 0 {
                res = format!("{}{}", res, sep);
            }
            res = format!("{}{}", res, xs[(i) as usize].clone());
            i += 1;
        }
        return res;
    };
    let numberName = move |n: i32| -> String {
        let small = vec![String::from("no"), String::from("one"), String::from("two"), String::from("three"), String::from("four"), String::from("five"), String::from("six"), String::from("seven"), String::from("eight"), String::from("nine"), String::from("ten"), String::from("eleven"), String::from("twelve"), String::from("thirteen"), String::from("fourteen"), String::from("fifteen"), String::from("sixteen"), String::from("seventeen"), String::from("eighteen"), String::from("nineteen")];
        let tens = vec![String::from("ones"), String::from("ten"), String::from("twenty"), String::from("thirty"), String::from("forty"), String::from("fifty"), String::from("sixty"), String::from("seventy"), String::from("eighty"), String::from("ninety")];
        if n < 0 {
            return String::from("");
        }
        if n < 20 {
            return small[(n) as usize].clone();
        }
        if n < 100 {
            let mut t = tens[(((n as f64) / (10 as f64)) as i32) as usize].clone();
            let mut s = n % 10;
            if s > 0 {
                t = format!("{}{}", format!("{}{}", t, String::from(" ")), small[(s) as usize].clone());
            }
            return t;
        }
        return String::from("");
    };
    let pluralizeFirst = move |s: String, n: i32| -> String {
        if n == 1 {
            return s;
        }
        let w = fields(s);
        if (w.len() as i32) > 0 {
            w[0] = format!("{}{}", w[0].clone(), String::from("s"));
        }
        return join(w, String::from(" "));
    };
    let randInt = move |seed: i32, n: i32| -> i32 {
        let next = (seed * 1664525 + 1013904223) % 2147483647;
        return next % n;
    };
    let slur = move |p: String, d: i32| -> String {
        if (p.len() as i32) <= 2 {
            return p;
        }
        let mut a: Vec<String> = vec![];
        let mut i = 1;
        while i < (p.len() as i32) - 1 {
            a = { let mut tmp = a.clone(); tmp.push(p[(i) as usize..(i + 1) as usize].to_string()); tmp };
            i += 1;
        }
        let mut idx = (a.len() as i32) - 1;
        let mut seed = d;
        while idx >= 1 {
            seed = (seed * 1664525 + 1013904223) % 2147483647;
            if seed % 100 >= d {
                let j = seed % (idx + 1);
                let tmp = a[(idx) as usize].clone();
                a[(idx) as usize] = a[(j) as usize].clone();
                a[(j) as usize] = tmp;
            }
            idx -= 1;
        }
        let mut s = p[0..1].to_string();
        let mut k = 0;
        while k < (a.len() as i32) {
            s = format!("{}{}", s, a[(k) as usize].clone());
            k += 1;
        }
        s = format!("{}{}", s, p[((p.len() as i32) - 1) as usize..((p.len() as i32)) as usize].to_string());
        let w = fields(s);
        return join(w, String::from(" "));
    };
    let main = move || -> () {
        let mut i = 99;
        while i > 0 {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), String::from(" ")), pluralizeFirst(slur(String::from("bottle of"), i), i)), String::from(" ")), slur(String::from("beer on the wall"), i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i), i), String::from(" ")), pluralizeFirst(slur(String::from("bottle of"), i), i)), String::from(" ")), slur(String::from("beer"), i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(String::from("take one"), i), String::from(" ")), slur(String::from("down"), i)), String::from(" ")), slur(String::from("pass it around"), i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", slur(numberName(i - 1), i), String::from(" ")), pluralizeFirst(slur(String::from("bottle of"), i), i - 1)), String::from(" ")), slur(String::from("beer on the wall"), i)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            i -= 1;
        }
    };
    main();
}
