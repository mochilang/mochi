// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn poly(p: i32) -> &'static str {
        let mut s: String = String::new();
        let mut coef: i32 = 1;
        let mut i = p;
        if coef != 1 {
            s += coef.to_string();
        }
        while i > 0 {
            s += "x";
            if i != 1 {
                s = format!("{}{}", format!("{}{}", s, "^"), i.to_string());
            }
            coef = ((coef * i as f64) / ((p - i + 1) as f64)).parse::<i32>().unwrap();
            let mut d = coef;
            if (p - (i - 1)) % 2 == 1 {
                d = -d;
            }
            if d < 0 {
                s = format!("{}{}", format!("{}{}", s, " - "), -d.to_string());
            } else {
                s = format!("{}{}", format!("{}{}", s, " + "), d.to_string());
            }
            i -= 1;
        }
        if s == "" {
            s = "1";
        }
        return s;
    }
    fn aks(n: i32) -> bool {
        if n < 2 {
            return false;
        }
        let mut c: i32 = n;
        let mut i = 1;
        while i < n {
            if c % n != 0 {
                return false;
            }
            c = ((c * (n - i) as f64) / ((i + 1) as f64)).parse::<i32>().unwrap();
            i += 1;
        }
        return true;
    }
    fn main() -> () {
        let mut p = 0;
        while p <= 7 {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", p.to_string(), ":  "), poly(p)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            p += 1;
        }
        let mut first = true;
        p = 2;
        let mut line: String = String::new();
        while p < 50 {
            if aks(p) {
                if first != Default::default() {
                    line += p.to_string();
                    first = false;
                } else {
                    line = format!("{}{}", format!("{}{}", line, " "), p.to_string());
                }
            }
            p += 1;
        }
        println!("{}", vec![format!("{}", line)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
