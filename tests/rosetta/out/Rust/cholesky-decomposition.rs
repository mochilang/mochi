// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn sqrtApprox(x: f64) -> f64 {
        let mut guess = x;
        let mut i = 0;
        while i < 20 {
            guess = (guess + x / guess) / 2.0;
            i += 1;
        }
        return guess;
    }
    fn cholesky(a: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
        let n = a.len() as i32;
        let mut l: Vec<Vec<f64>> = vec![];
        let mut i = 0;
        while i < n {
            let mut row: Vec<f64> = vec![];
            let mut j = 0;
            while j < n {
                row = { let mut tmp = row.clone(); tmp.push(0.0); tmp };
                j += 1;
            }
            l = { let mut tmp = l.clone(); tmp.push(row); tmp };
            i += 1;
        }
        i = 0;
        while i < n {
            let mut j = 0;
            while j <= i {
                let mut sum = a[i as usize][j as usize];
                let mut k = 0;
                while k < j {
                    sum = sum - l[i as usize][k as usize] * l[j as usize][k as usize];
                    k += 1;
                }
                if i == j {
                    l[i as usize][j as usize] = sqrtApprox(sum);
                } else {
                    l[i as usize][j as usize] = sum / l[j as usize][j as usize];
                }
                j += 1;
            }
            i += 1;
        }
        return l;
    }
    fn printMat(m: Vec<Vec<f64>>) -> () {
        let mut i = 0;
        while i < m.len() as i32 {
            let mut line = String::new();
            let mut j = 0;
            while j < m[i as usize].len() as i32 {
                line += m[i as usize][j as usize].to_string();
                if j < m[i as usize].len() as i32 - 1 {
                    line += " ";
                }
                j += 1;
            }
            println!("{}", vec![format!("{}", line)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            i += 1;
        }
    }
    fn demo(a: Vec<Vec<f64>>) -> () {
        println!("A:");
        printMat(a);
        let l = cholesky(a);
        println!("L:");
        printMat(l);
    }
    demo(vec![vec![25.0, 15.0, -5.0], vec![15.0, 18.0, 0.0], vec![-5.0, 0.0, 11.0]]);
    demo(vec![vec![18.0, 22.0, 54.0, 42.0], vec![22.0, 70.0, 86.0, 62.0], vec![54.0, 86.0, 174.0, 134.0], vec![42.0, 62.0, 134.0, 106.0]]);
}
