// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn isPrime(n: i32) -> bool {
        if n < 2 {
            return false;
        }
        if n % 2 == 0 {
            return n == 2;
        }
        if n % 3 == 0 {
            return n == 3;
        }
        let mut d = 5;
        while d * d <= n {
            if n % d == 0 {
                return false;
            }
            d += 2;
            if n % d == 0 {
                return false;
            }
            d += 4;
        }
        return true;
    }
    fn sumDigits(n: i32) -> i32 {
        let mut s = 0;
        let mut x = n;
        while x > 0 {
            s = s + x % 10;
            x = ((x as f64) / (10 as f64)).parse::<i32>().unwrap();
        }
        return s;
    }
    fn pad(n: i32) -> &'static str {
        if n < 10 {
            return format!("{}{}", "  ", n.to_string());
        }
        if n < 100 {
            return format!("{}{}", " ", n.to_string());
        }
        return n.to_string();
    }
    fn main() -> () {
        println!("Additive primes less than 500:");
        let mut count = 0;
        let mut line = String::new();
        let mut lineCount = 0;
        let mut i = 2;
        while i < 500 {
            if isPrime(i) && isPrime(sumDigits(i)) {
                count += 1;
                line = format!("{}{}", format!("{}{}", line, pad(i)), "  ");
                lineCount += 1;
                if lineCount == 10 {
                    println!("{}", vec![format!("{}", &line[0 as usize..line.len() as i32 - 2 as usize])].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                    line = "";
                    lineCount = 0;
                }
            }
            if i > 2 {
                i += 2;
            } else {
                i += 1;
            }
        }
        if lineCount > 0 {
            println!("{}", vec![format!("{}", &line[0 as usize..line.len() as i32 - 2 as usize])].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
        println!("{}", vec![format!("{}", format!("{}{}", count.to_string(), " additive primes found."))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
