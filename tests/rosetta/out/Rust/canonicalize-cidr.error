rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/canonicalize-cidr.rs:81:32
   |
81 |         while out.len() as i32 < width {
   |                                ^ ------- interpreted as generic arguments
   |                                |
   |                                not interpreted as comparison
   |
help: try comparing the cast value
   |
81 |         while (out.len() as i32) < width {
   |               +                +

error[E0308]: mismatched types
 --> /tmp/canonicalize-cidr.rs:8:101
  |
8 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
  |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
 --> /tmp/canonicalize-cidr.rs:8:97
  |
8 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
  |                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
 --> /tmp/canonicalize-cidr.rs:8:99
  |
8 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
  |                                                                                                   ^ no implementation for `i32 + usize`
  |
  = help: the trait `Add<usize>` is not implemented for `i32`
  = help: the following other types implement trait `Add<Rhs>`:
            `&i32` implements `Add<i32>`
            `&i32` implements `Add`
            `i32` implements `Add<&i32>`
            `i32` implements `Add`

error[E0308]: mismatched types
 --> /tmp/canonicalize-cidr.rs:9:65
  |
9 |                 parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
  |                                                            ---- ^^^ expected `&str`, found `String`
  |                                                            |
  |                                                            arguments to this method are incorrect
  |
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12
help: consider borrowing here
  |
9 |                 parts = { let mut tmp = parts.clone(); tmp.push(&cur); tmp };
  |                                                                 +

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:10:23
   |
5  |         let mut cur = String::new();
   |                       ------------- expected due to this value
...
10 |                 cur = "";
   |                       ^^- help: try using a conversion method: `.to_string()`
   |                       |
   |                       expected `String`, found `&str`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:13:43
   |
13 |                 cur += &s[i as usize..i + 1 as usize];
   |                                           ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:13:39
   |
13 |                 cur += &s[i as usize..i + 1 as usize];
   |                                       ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/canonicalize-cidr.rs:13:41
   |
13 |                 cur += &s[i as usize..i + 1 as usize];
   |                                         ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:17:57
   |
17 |         parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
   |                                                    ---- ^^^ expected `&str`, found `String`
   |                                                    |
   |                                                    arguments to this method are incorrect
   |
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12
help: consider borrowing here
   |
17 |         parts = { let mut tmp = parts.clone(); tmp.push(&cur); tmp };
   |                                                         +

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:30:16
   |
20 |     fn join(xs: Vec<&'static str>, sep: &'static str) -> &'static str {
   |                                                          ------------ expected `&'static str` because of return type
...
30 |         return res;
   |                ^^^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
30 |         return &res;
   |                +

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:39:16
   |
32 |     fn repeat(ch: &'static str, n: i32) -> &'static str {
   |                                            ------------ expected `&'static str` because of return type
...
39 |         return out;
   |                ^^^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
39 |         return &out;
   |                +

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:51:60
   |
51 |             n = n * 10 + *digits.get(&&str[i as usize..i + 1 as usize]).unwrap();
   |                                                            ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:51:56
   |
51 |             n = n * 10 + *digits.get(&&str[i as usize..i + 1 as usize]).unwrap();
   |                                                        ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/canonicalize-cidr.rs:51:58
   |
51 |             n = n * 10 + *digits.get(&&str[i as usize..i + 1 as usize]).unwrap();
   |                                                          ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0277]: cannot calculate the remainder of `i32` divided by `String`
  --> /tmp/canonicalize-cidr.rs:64:37
   |
64 |             b = format!("{}{}", val % 2.to_string(), b);
   |                                     ^ no implementation for `i32 % String`
   |
   = help: the trait `Rem<String>` is not implemented for `i32`
   = help: the following other types implement trait `Rem<Rhs>`:
             `&i32` implements `Rem<i32>`
             `&i32` implements `Rem`
             `i32` implements `Rem<&i32>`
             `i32` implements `Rem`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/canonicalize-cidr.rs:65:47
   |
65 |             val = ((val as f64) / (2 as f64)).parse::<i32>().unwrap();
   |                                               ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:68:16
   |
59 |     fn toBinary(n: i32, bits: i32) -> &'static str {
   |                                       ------------ expected `&'static str` because of return type
...
68 |         return b;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
68 |         return &b;
   |                +

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:74:59
   |
74 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                           ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:74:55
   |
74 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                       ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/canonicalize-cidr.rs:74:57
   |
74 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                         ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/canonicalize-cidr.rs:82:13
   |
82 |             out += " ";
   |             ---^^^^^^^
   |             |
   |             cannot use `+=` on type `&str`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:95:18
   |
95 |         binary = format!("{}{}", &binary[0 as usize..size as usize], repeat("0", 32 - size));
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:99:104
   |
99 |             canonParts = { let mut tmp = canonParts.clone(); tmp.push(binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
   |                                                                                                        ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:99:100
   |
99 |             canonParts = { let mut tmp = canonParts.clone(); tmp.push(binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
   |                                                                                                    ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/canonicalize-cidr.rs:99:102
   |
99 |             canonParts = { let mut tmp = canonParts.clone(); tmp.push(binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
   |                                                                                                      ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/canonicalize-cidr.rs:99:71
   |
99 |             canonParts = { let mut tmp = canonParts.clone(); tmp.push(binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
   |                                                                  ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |                                                                  |
   |                                                                  arguments to this method are incorrect
   |
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12
help: consider borrowing here
   |
99 |             canonParts = { let mut tmp = canonParts.clone(); tmp.push(&binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
   |                                                                       +

error[E0308]: mismatched types
   --> /tmp/canonicalize-cidr.rs:102:16
    |
86  |     fn canonicalize(cidr: &'static str) -> &'static str {
    |                                            ------------ expected `&str` because of return type
...
102 |         return format!("{}{}", format!("{}{}", join(canonParts, "."), "/"), parts[1]);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 28 previous errors

Some errors have detailed explanations: E0277, E0308, E0368, E0599.
For more information about an error, try `rustc --explain E0277`.
