rustc error: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:86:32
   |
86 |         while out.len() as i32 < width {
   |                                ^ ------- interpreted as generic arguments
   |                                |
   |                                not interpreted as comparison
   |
help: try comparing the cast value
   |
86 |         while (out.len() as i32) < width {
   |               +                +

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:13:101
   |
13 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:13:97
   |
13 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
   |                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:13:99
   |
13 |             if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
   |                                                                                                   ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:18:43
   |
18 |                 cur += &s[i as usize..i + 1 as usize];
   |                                           ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:18:39
   |
18 |                 cur += &s[i as usize..i + 1 as usize];
   |                                       ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:18:41
   |
18 |                 cur += &s[i as usize..i + 1 as usize];
   |                                         ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:18:17
   |
18 |                 cur += &s[i as usize..i + 1 as usize];
   |                 ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 |
   |                 cannot use `+=` on type `&str`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:30:17
   |
30 |                 res += sep;
   |                 ---^^^^^^^
   |                 |
   |                 cannot use `+=` on type `&str`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:32:13
   |
32 |             res += xs[i as usize];
   |             ---^^^^^^^^^^^^^^^^^^
   |             |
   |             cannot use `+=` on type `&str`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:41:13
   |
41 |             out += ch;
   |             ---^^^^^^
   |             |
   |             cannot use `+=` on type `&str`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:56:55
   |
56 |             n = n * 10 + digits[&&str[i as usize..i + 1 as usize]];
   |                                                       ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:56:51
   |
56 |             n = n * 10 + digits[&&str[i as usize..i + 1 as usize]];
   |                                                   ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:56:53
   |
56 |             n = n * 10 + digits[&&str[i as usize..i + 1 as usize]];
   |                                                     ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0277]: cannot calculate the remainder of `i32` divided by `String`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:69:37
   |
69 |             b = format!("{}{}", val % 2.to_string(), b);
   |                                     ^ no implementation for `i32 % String`
   |
   = help: the trait `Rem<String>` is not implemented for `i32`
   = help: the following other types implement trait `Rem<Rhs>`:
             `&i32` implements `Rem<i32>`
             `&i32` implements `Rem`
             `i32` implements `Rem<&i32>`
             `i32` implements `Rem`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:69:17
   |
69 |             b = format!("{}{}", val % 2.to_string(), b);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:70:47
   |
70 |             val = ((val as f64) / (2 as f64)).parse::<i32>().unwrap();
   |                                               ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:79:59
   |
79 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                           ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:79:55
   |
79 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                       ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:79:57
   |
79 |             n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
   |                                                         ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`
  --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:87:13
   |
87 |             out += " ";
   |             ---^^^^^^^
   |             |
   |             cannot use `+=` on type `&str`

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:100:18
    |
100 |         binary = format!("{}{}", &binary[0 as usize..size as usize], repeat("0", 32 - size));
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:104:78
    |
104 |             canonParts = append(canonParts, binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                                                                              ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:104:74
    |
104 |             canonParts = append(canonParts, binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                                                                          ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:104:76
    |
104 |             canonParts = append(canonParts, binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                                                                            ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:104:45
    |
104 |             canonParts = append(canonParts, binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                          ------             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |                          |
    |                          arguments to this function are incorrect
    |
help: the return type of this call is `String` due to the type of the argument passed
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:104:26
    |
104 |             canonParts = append(canonParts, binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                          ^^^^^^^^^^^^^^^^^^^---------------------------------------------------------^
    |                                             |
    |                                             this argument influences the return type of `append`
note: function defined here
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:2:4
    |
2   | fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    |    ^^^^^^                          -------
help: consider borrowing here
    |
104 |             canonParts = append(canonParts, &binToInt(&binary[i as usize..i + 8 as usize]).to_string());
    |                                             +

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldencanonicalize-cidr1652982094/001/prog.rs:107:16
    |
91  |     fn canonicalize(cidr: &'static str) -> &'static str {
    |                                            ------------ expected `&str` because of return type
...
107 |         return format!("{}{}", format!("{}{}", join(canonParts, "."), "/"), parts[1]);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 27 previous errors

Some errors have detailed explanations: E0277, E0308, E0368, E0599.
For more information about an error, try `rustc --explain E0277`.
