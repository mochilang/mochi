// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:43Z
fn main() {
    fn sortFloat(xs: Vec<f64>) -> Vec<f64> {
        let mut arr = xs;
        let mut n = arr.len() as i32;
        let mut i = 0;
        while i < n {
            let mut j = 0;
            while j < n - 1 {
                if arr[j as usize] > arr[j + 1 as usize] {
                    let tmp = arr[j as usize];
                    arr[j as usize] = arr[j + 1 as usize];
                    arr[j + 1 as usize] = tmp;
                }
                j += 1;
            }
            i += 1;
        }
        return arr;
    }
    fn median(a: Vec<f64>) -> f64 {
        let mut arr = sortFloat(a);
        let half = ((arr.len() as i32 as f64) / (2 as f64)).parse::<i32>().unwrap();
        let mut m = arr[half as usize];
        if arr.len() as i32 % 2 == 0 {
            m = (m + arr[half - 1 as usize]) / 2.0;
        }
        return m;
    }
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0]).to_string());
    println!("{}", median(vec![3.0, 1.0, 4.0, 1.0, 5.0]).to_string());
}
