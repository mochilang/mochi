rustc error: exit status 1
error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:23:48
   |
23 |         let r = (((c as f64) / (65536 as f64)).parse::<i32>().unwrap()) % 256;
   |                                                ^^^^^ method not found in `f64`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:24:46
   |
24 |         let g = (((c as f64) / (256 as f64)).parse::<i32>().unwrap()) % 256;
   |                                              ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:47:117
   |
46 |     fn Extent(b: Bitmap) -> std::collections::HashMap<&'static str, i32> {
   |                             -------------------------------------------- expected `HashMap<&'static str, i32>` because of return type
47 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("cols", b.cols); m.insert("rows", b.rows); m };
   |                                                                                                                     ^ expected `HashMap<&str, i32>`, found `BTreeMap<&str, i32>`
   |
   = note: expected struct `HashMap<&'static str, i32>`
              found struct `BTreeMap<&str, i32>`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:65:30
   |
65 |         Fill(&mut b.clone(), &pixelFromRgb(c));
   |         ----                 ^^^^^^^^^^^^^^^^ expected `Pixel`, found `&Pixel`
   |         |
   |         arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:49:8
   |
49 |     fn Fill(b: &mut Bitmap, p: Pixel) -> () {
   |        ^^^^                 --------
help: consider removing the borrow
   |
65 -         Fill(&mut b.clone(), &pixelFromRgb(c));
65 +         Fill(&mut b.clone(), pixelFromRgb(c));
   |

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:79:44
   |
79 |         return SetPx(&mut b.clone(), x, y, &pixelFromRgb(c));
   |                -----                       ^^^^^^^^^^^^^^^^ expected `Pixel`, found `&Pixel`
   |                |
   |                arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:67:8
   |
67 |     fn SetPx(b: &mut Bitmap, x: i32, y: i32, p: Pixel) -> bool {
   |        ^^^^^                                 --------
help: consider removing the borrow
   |
79 -         return SetPx(&mut b.clone(), x, y, &pixelFromRgb(c));
79 +         return SetPx(&mut b.clone(), x, y, pixelFromRgb(c));
   |

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:83:92
   |
81 |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
   |                                            -------------------------------------------- expected `HashMap<&'static str, i32>` because of return type
82 |         if x < 0 || x >= b.cols || y < 0 || y >= b.rows {
83 |             return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", false); m };
   |                                                                                            ^ expected `HashMap<&str, i32>`, found `BTreeMap<&str, bool>`
   |
   = note: expected struct `HashMap<&'static str, i32>`
              found struct `BTreeMap<&str, bool>`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:86:105
   |
86 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("pixel", row[x as usize]); m };
   |                                                                 -              ----     ------          ^^^^^^^^^^^^^^^ expected `bool`, found `Pixel`
   |                                                                 |              |        |
   |                                                                 |              |        arguments to this method are incorrect
   |                                                                 |              this argument has type `bool`...
   |                                                                 ... which causes `m` to have type `BTreeMap<&str, bool>`
   |
help: the return type of this call is `Pixel` due to the type of the argument passed
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:86:87
   |
86 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("pixel", row[x as usize]); m };
   |                                                                                       ^^^^^^^^^^^^^^^^^^---------------^
   |                                                                                                         |
   |                                                                                                         this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/collections/btree/map.rs:1023:12

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:86:123
   |
81 |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
   |                                            -------------------------------------------- expected `HashMap<&'static str, i32>` because of return type
...
86 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("pixel", row[x as usize]); m };
   |                                                                                                                           ^ expected `HashMap<&str, i32>`, found `BTreeMap<&str, bool>`
   |
   = note: expected struct `HashMap<&'static str, i32>`
              found struct `BTreeMap<&str, bool>`

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:89:23
   |
89 |         let r = GetPx(&b.clone(), x, y);
   |                 ----- ^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
   |                 |
   |                 arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:81:8
   |
81 |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
   |        ^^^^^ ---------
help: consider removing the borrow
   |
89 -         let r = GetPx(&b.clone(), x, y);
89 +         let r = GetPx(b.clone(), x, y);
   |

error[E0609]: no field `ok` on type `HashMap<&str, i32>`
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:90:15
   |
90 |         if !r.ok != Default::default() {
   |               ^^ unknown field

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:91:92
   |
88 |     fn GetPxRgb(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
   |                                               -------------------------------------------- expected `HashMap<&'static str, i32>` because of return type
...
91 |             return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", false); m };
   |                                                                                            ^ expected `HashMap<&str, i32>`, found `BTreeMap<&str, bool>`
   |
   = note: expected struct `HashMap<&'static str, i32>`
              found struct `BTreeMap<&str, bool>`

error[E0609]: no field `pixel` on type `HashMap<&str, i32>`
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:93:119
   |
93 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("rgb", rgbFromPixel(&r.pixel)); m };
   |                                                                                                                       ^^^^^ unknown field

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:93:103
   |
93 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("rgb", rgbFromPixel(&r.pixel)); m };
   |                                                                 -              ----     ------        ^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `i32`
   |                                                                 |              |        |
   |                                                                 |              |        arguments to this method are incorrect
   |                                                                 |              this argument has type `bool`...
   |                                                                 ... which causes `m` to have type `BTreeMap<&str, bool>`
   |
help: the return type of this call is `i32` due to the type of the argument passed
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:93:87
   |
93 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("rgb", rgbFromPixel(&r.pixel)); m };
   |                                                                                       ^^^^^^^^^^^^^^^^----------------------^
   |                                                                                                       |
   |                                                                                                       this argument influences the return type of `insert`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/collections/btree/map.rs:1023:12

error[E0308]: mismatched types
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:93:128
   |
88 |     fn GetPxRgb(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
   |                                               -------------------------------------------- expected `HashMap<&'static str, i32>` because of return type
...
93 |         return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("rgb", rgbFromPixel(&r.pixel)); m };
   |                                                                                                                                ^ expected `HashMap<&str, i32>`, found `BTreeMap<&str, bool>`
   |
   = note: expected struct `HashMap<&'static str, i32>`
              found struct `BTreeMap<&str, bool>`

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:104:16
    |
103 | ...Str(p: Pixel) -> &'static str {
    |                     ------------ expected `&str` because of return type
104 | ...rn format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "{", p.R.to_string()), " "), p.G.to_string()), " "), p.B.to_string()), "}");
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:108:17
    |
108 |         FillRgb(&bm.clone(), 16711680);
    |         ------- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |         |
    |         arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:64:8
    |
64  |     fn FillRgb(b: Bitmap, c: i32) -> () {
    |        ^^^^^^^ ---------
help: consider removing the borrow
    |
108 -         FillRgb(&bm.clone(), 16711680);
108 +         FillRgb(bm.clone(), 16711680);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:109:18
    |
109 |         SetPxRgb(&bm.clone(), 10, 20, 255);
    |         -------- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |         |
    |         arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:78:8
    |
78  |     fn SetPxRgb(b: Bitmap, x: i32, y: i32, c: i32) -> bool {
    |        ^^^^^^^^ ---------
help: consider removing the borrow
    |
109 -         SetPxRgb(&bm.clone(), 10, 20, 255);
109 +         SetPxRgb(bm.clone(), 10, 20, 255);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:110:18
    |
110 |         SetPxRgb(&bm.clone(), 20, 30, 0);
    |         -------- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |         |
    |         arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:78:8
    |
78  |     fn SetPxRgb(b: Bitmap, x: i32, y: i32, c: i32) -> bool {
    |        ^^^^^^^^ ---------
help: consider removing the borrow
    |
110 -         SetPxRgb(&bm.clone(), 20, 30, 0);
110 +         SetPxRgb(bm.clone(), 20, 30, 0);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:111:18
    |
111 |         SetPxRgb(&bm.clone(), 30, 40, 1056816);
    |         -------- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |         |
    |         arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:78:8
    |
78  |     fn SetPxRgb(b: Bitmap, x: i32, y: i32, c: i32) -> bool {
    |        ^^^^^^^^ ---------
help: consider removing the borrow
    |
111 -         SetPxRgb(&bm.clone(), 30, 40, 1056816);
111 +         SetPxRgb(bm.clone(), 30, 40, 1056816);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:112:24
    |
112 |         let c1 = GetPx(&bm.clone(), 0, 0);
    |                  ----- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |                  |
    |                  arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:81:8
    |
81  |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
    |        ^^^^^ ---------
help: consider removing the borrow
    |
112 -         let c1 = GetPx(&bm.clone(), 0, 0);
112 +         let c1 = GetPx(bm.clone(), 0, 0);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:113:24
    |
113 |         let c2 = GetPx(&bm.clone(), 10, 20);
    |                  ----- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |                  |
    |                  arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:81:8
    |
81  |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
    |        ^^^^^ ---------
help: consider removing the borrow
    |
113 -         let c2 = GetPx(&bm.clone(), 10, 20);
113 +         let c2 = GetPx(bm.clone(), 10, 20);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:114:24
    |
114 |         let c3 = GetPx(&bm.clone(), 30, 40);
    |                  ----- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |                  |
    |                  arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:81:8
    |
81  |     fn GetPx(b: Bitmap, x: i32, y: i32) -> std::collections::HashMap<&'static str, i32> {
    |        ^^^^^ ---------
help: consider removing the borrow
    |
114 -         let c3 = GetPx(&bm.clone(), 30, 40);
114 +         let c3 = GetPx(bm.clone(), 30, 40);
    |

error[E0308]: mismatched types
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:116:48
    |
116 |         println!("{}", format!("{}{}", ppmSize(&bm.clone()).to_string(), " bytes when encoded as PPM."));
    |                                        ------- ^^^^^^^^^^^ expected `Bitmap`, found `&Bitmap`
    |                                        |
    |                                        arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:95:8
    |
95  |     fn ppmSize(b: Bitmap) -> i32 {
    |        ^^^^^^^ ---------
help: consider removing the borrow
    |
116 -         println!("{}", format!("{}{}", ppmSize(&bm.clone()).to_string(), " bytes when encoded as PPM."));
116 +         println!("{}", format!("{}{}", ppmSize(bm.clone()).to_string(), " bytes when encoded as PPM."));
    |

error[E0609]: no field `ok` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:117:15
    |
117 |         if c1.ok != Default::default() {
    |               ^^ unknown field

error[E0609]: no field `pixel` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:118:79
    |
118 |             println!("{}", format!("{}{}", "Pixel at (0,0) is ", pixelStr(&c1.pixel)));
    |                                                                               ^^^^^ unknown field

error[E0609]: no field `ok` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:120:15
    |
120 |         if c2.ok != Default::default() {
    |               ^^ unknown field

error[E0609]: no field `pixel` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:121:81
    |
121 |             println!("{}", format!("{}{}", "Pixel at (10,20) is ", pixelStr(&c2.pixel)));
    |                                                                                 ^^^^^ unknown field

error[E0609]: no field `ok` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:123:15
    |
123 |         if c3.ok != Default::default() {
    |               ^^ unknown field

error[E0609]: no field `pixel` on type `HashMap<&str, i32>`
   --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:124:24
    |
124 |             let p = c3.pixel;
    |                        ^^^^^ unknown field

error[E0507]: cannot move out of `b.px` which is behind a mutable reference
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:54:30
   |
54 |                 let mut px = b.px;
   |                              ^^^^ move occurs because `b.px` has type `Vec<Vec<Pixel>>`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
54 |                 let mut px = &b.px;
   |                              +
help: consider cloning the value if the performance cost is acceptable
   |
54 |                 let mut px = b.px.clone();
   |                                  ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<Pixel>>`
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:55:31
   |
55 |                 let mut row = px[y as usize];
   |                               ^^^^^^^^^^^^^^ move occurs because value has type `Vec<Pixel>`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
55 |                 let mut row = &px[y as usize];
   |                               +
help: consider cloning the value if the performance cost is acceptable
   |
55 |                 let mut row = px[y as usize].clone();
   |                                             ++++++++

error[E0507]: cannot move out of `b.px` which is behind a mutable reference
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:71:22
   |
71 |         let mut px = b.px;
   |                      ^^^^ move occurs because `b.px` has type `Vec<Vec<Pixel>>`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
71 |         let mut px = &b.px;
   |                      +
help: consider cloning the value if the performance cost is acceptable
   |
71 |         let mut px = b.px.clone();
   |                          ++++++++

error[E0507]: cannot move out of index of `Vec<Vec<Pixel>>`
  --> /tmp/TestMochiRustGoldenbitmap2034230232/001/prog.rs:72:23
   |
72 |         let mut row = px[y as usize];
   |                       ^^^^^^^^^^^^^^ move occurs because value has type `Vec<Pixel>`, which does not implement the `Copy` trait
   |
help: consider borrowing here
   |
72 |         let mut row = &px[y as usize];
   |                       +
help: consider cloning the value if the performance cost is acceptable
   |
72 |         let mut row = px[y as usize].clone();
   |                                     ++++++++

error: aborting due to 33 previous errors

Some errors have detailed explanations: E0308, E0507, E0599, E0609.
For more information about an error, try `rustc --explain E0308`.
