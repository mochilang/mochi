// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Foobar {
        Exported: i32,
        unexported: i32,
}

fn main() {
    fn examineAndModify(f: &mut Foobar) -> Foobar {
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", " v: {", f.Exported.to_string()), " "), f.unexported.to_string()), "} = {"), f.Exported.to_string()), " "), f.unexported.to_string()), "}"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("    Idx Name       Type CanSet");
        println!("     0: Exported   int  true");
        println!("     1: unexported int  false");
        f.Exported = 16;
        f.unexported = 44;
        println!("  modified unexported field via unsafe");
        return f.clone();
    }
    fn anotherExample() -> () {
        println!("bufio.ReadByte returned error: unsafely injected error value into bufio inner workings");
    }
    let mut obj = Foobar { Exported: 12, unexported: 42 };
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "obj: {", obj.Exported.to_string()), " "), obj.unexported.to_string()), "}"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    obj = examineAndModify(&mut obj.clone());
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "obj: {", obj.Exported.to_string()), " "), obj.unexported.to_string()), "}"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    anotherExample();
}
