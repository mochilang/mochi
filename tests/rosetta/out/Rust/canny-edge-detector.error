rustc: exit status 1
error[E0277]: cannot add `f64` to `i32`
  --> /tmp/canny-edge-detector.rs:20:41
   |
20 |                         let mut yy = (y + j as f64) - half;
   |                                         ^ no implementation for `i32 + f64`
   |
   = help: the trait `Add<f64>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0277]: can't compare `{integer}` with `f64`
  --> /tmp/canny-edge-detector.rs:21:31
   |
21 |                         if yy < 0 as f64 {
   |                               ^ no implementation for `{integer} < f64` and `{integer} > f64`
   |
   = help: the trait `PartialOrd<f64>` is not implemented for `{integer}`
   = help: the following other types implement trait `PartialOrd<Rhs>`:
             f128
             f16
             f32
             f64
             i128
             i16
             i32
             i64
           and 8 others

error[E0308]: mismatched types
  --> /tmp/canny-edge-detector.rs:24:34
   |
24 |                         if yy >= h as f64 {
   |                                  ^^^^^^^^ expected integer, found `f64`

error[E0277]: can't compare `{integer}` with `f64`
  --> /tmp/canny-edge-detector.rs:24:31
   |
24 |                         if yy >= h as f64 {
   |                               ^^ no implementation for `{integer} < f64` and `{integer} > f64`
   |
   = help: the trait `PartialOrd<f64>` is not implemented for `{integer}`
   = help: the following other types implement trait `PartialOrd<Rhs>`:
             f128
             f16
             f32
             f64
             i128
             i16
             i32
             i64
           and 8 others

error[E0277]: cannot add `f64` to `i32`
  --> /tmp/canny-edge-detector.rs:27:41
   |
27 |                         let mut xx = (x + i as f64) - half;
   |                                         ^ no implementation for `i32 + f64`
   |
   = help: the trait `Add<f64>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0277]: can't compare `{integer}` with `f64`
  --> /tmp/canny-edge-detector.rs:28:31
   |
28 |                         if xx < 0 as f64 {
   |                               ^ no implementation for `{integer} < f64` and `{integer} > f64`
   |
   = help: the trait `PartialOrd<f64>` is not implemented for `{integer}`
   = help: the following other types implement trait `PartialOrd<Rhs>`:
             f128
             f16
             f32
             f64
             i128
             i16
             i32
             i64
           and 8 others

error[E0308]: mismatched types
  --> /tmp/canny-edge-detector.rs:31:34
   |
31 |                         if xx >= w as f64 {
   |                                  ^^^^^^^^ expected integer, found `f64`

error[E0277]: can't compare `{integer}` with `f64`
  --> /tmp/canny-edge-detector.rs:31:31
   |
31 |                         if xx >= w as f64 {
   |                               ^^ no implementation for `{integer} < f64` and `{integer} > f64`
   |
   = help: the trait `PartialOrd<f64>` is not implemented for `{integer}`
   = help: the following other types implement trait `PartialOrd<Rhs>`:
             f128
             f16
             f32
             f64
             i128
             i16
             i32
             i64
           and 8 others

error[E0308]: mismatched types
  --> /tmp/canny-edge-detector.rs:96:25
   |
96 |                 line += m[y as usize][x as usize].to_string();
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
96 |                 line += &m[y as usize][x as usize].to_string();
   |                         +

warning: unused variable: `PI`
 --> /tmp/canny-edge-detector.rs:3:9
  |
3 |     let PI = 3.141592653589793;
  |         ^^ help: if this is intentional, prefix it with an underscore: `_PI`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:50:13
   |
50 |         let mut gx = conv2d(img, hx);
   |             ----^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:51:13
   |
51 |         let mut gy = conv2d(img, hy);
   |             ----^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:52:13
   |
52 |         let mut h = img.len() as i32;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:53:13
   |
53 |         let mut w = img[0].len() as i32;
   |             ----^
   |             |
   |             help: remove this `mut`

error[E0382]: use of moved value: `img`
  --> /tmp/canny-edge-detector.rs:51:29
   |
47 |     fn gradient(img: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
   |                 --- move occurs because `img` has type `Vec<Vec<f64>>`, which does not implement the `Copy` trait
...
50 |         let mut gx = conv2d(img, hx);
   |                             --- value moved here
51 |         let mut gy = conv2d(img, hy);
   |                             ^^^ value used here after move
   |
note: consider changing this parameter type in function `conv2d` to borrow instead if owning the value isn't necessary
  --> /tmp/canny-edge-detector.rs:4:20
   |
4  |     fn conv2d(img: Vec<Vec<f64>>, k: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
   |        ------      ^^^^^^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
50 |         let mut gx = conv2d(img.clone(), hx);
   |                                ++++++++

error[E0382]: borrow of moved value: `img`
  --> /tmp/canny-edge-detector.rs:52:21
   |
47 |     fn gradient(img: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
   |                 --- move occurs because `img` has type `Vec<Vec<f64>>`, which does not implement the `Copy` trait
...
51 |         let mut gy = conv2d(img, hy);
   |                             --- value moved here
52 |         let mut h = img.len() as i32;
   |                     ^^^ value borrowed here after move
   |
note: consider changing this parameter type in function `conv2d` to borrow instead if owning the value isn't necessary
  --> /tmp/canny-edge-detector.rs:4:20
   |
4  |     fn conv2d(img: Vec<Vec<f64>>, k: Vec<Vec<f64>>) -> Vec<Vec<f64>> {
   |        ------      ^^^^^^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
51 |         let mut gy = conv2d(img.clone(), hy);
   |                                ++++++++

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:70:13
   |
70 |         let mut h = g.len() as i32;
   |             ----^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/canny-edge-detector.rs:71:13
   |
71 |         let mut w = g[0].len() as i32;
   |             ----^
   |             |
   |             help: remove this `mut`

error: aborting due to 11 previous errors; 7 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0382.
For more information about an error, try `rustc --explain E0277`.
