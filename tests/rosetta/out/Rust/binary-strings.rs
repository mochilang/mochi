// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn char(n: i32) -> &'static str {
        let letters = "abcdefghijklmnopqrstuvwxyz";
        let idx = n - 97;
        if idx < 0 || idx >= letters.len() as i32 {
            return "?";
        }
        return &letters[idx as usize..idx + 1 as usize];
    }
    fn fromBytes(bs: Vec<i32>) -> &'static str {
        let mut s = String::new();
        let mut i = 0;
        while i < bs.len() as i32 {
            s += char(bs[i as usize]);
            i += 1;
        }
        return s;
    }
    let mut b: Vec<i32> = vec![98, 105, 110, 97, 114, 121];
    println!("{}", vec![format!("{}", b.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut c: Vec<i32> = b;
    println!("{}", vec![format!("{}", c.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", b == c.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut d: Vec<i32> = vec![];
    let mut i = 0;
    while i < b.len() as i32 {
        d = { let mut tmp = d.clone(); tmp.push(b[i as usize]); tmp };
        i += 1;
    }
    d[1] = 97;
    d[4] = 110;
    println!("{}", vec![format!("{}", fromBytes(b))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", fromBytes(d))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", b.len() as i32 == 0.to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut z = { let mut tmp = b.clone(); tmp.push(122); tmp };
    println!("{}", vec![format!("{}", fromBytes(z))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut sub = b[1..3].to_vec();
    println!("{}", vec![format!("{}", fromBytes(sub))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut f: Vec<i32> = vec![];
    i = 0;
    while i < d.len() as i32 {
        let val = d[i as usize];
        if val == 110 {
            f = { let mut tmp = f.clone(); tmp.push(109); tmp };
        } else {
            f = { let mut tmp = f.clone(); tmp.push(val); tmp };
        }
        i += 1;
    }
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", fromBytes(d), " -> "), fromBytes(f)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut rem: Vec<i32> = vec![];
    rem = { let mut tmp = rem.clone(); tmp.push(b[0]); tmp };
    i = 3;
    while i < b.len() as i32 {
        rem = { let mut tmp = rem.clone(); tmp.push(b[i as usize]); tmp };
        i += 1;
    }
    println!("{}", vec![format!("{}", fromBytes(rem))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
