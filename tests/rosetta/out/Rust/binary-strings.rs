// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:39:51Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn char(n: i32) -> &'static str {
        let letters = "abcdefghijklmnopqrstuvwxyz";
        let idx = n - 97;
        if idx < 0 || idx >= letters.len() as i32 {
            return "?";
        }
        return &letters[idx as usize..idx + 1 as usize];
    }
    fn fromBytes(bs: Vec<i32>) -> &'static str {
        let mut s = "";
        let mut i = 0;
        while i < bs.len() as i32 {
            s += char(bs[i as usize]);
            i += 1;
        }
        return s;
    }
    let mut b: Vec<i32> = vec![98, 105, 110, 97, 114, 121];
    println!("{}", b.to_string());
    let mut c: Vec<i32> = b;
    println!("{}", c.to_string());
    println!("{}", b == c.to_string());
    let mut d: Vec<i32> = vec![];
    let mut i = 0;
    while i < b.len() as i32 {
        d = append(d, b[i as usize]);
        i += 1;
    }
    d[1] = 97;
    d[4] = 110;
    println!("{}", fromBytes(b));
    println!("{}", fromBytes(d));
    println!("{}", b.len() as i32 == 0.to_string());
    let mut z = append(b, 122);
    println!("{}", fromBytes(z));
    let mut sub = b[1..3].to_vec();
    println!("{}", fromBytes(sub));
    let mut f: Vec<i32> = vec![];
    i = 0;
    while i < d.len() as i32 {
        let val = d[i as usize];
        if val == 110 {
            f = append(f, 109);
        } else {
            f = append(f, val);
        }
        i += 1;
    }
    println!("{}", format!("{}{}", format!("{}{}", fromBytes(d), " -> "), fromBytes(f)));
    let mut rem: Vec<i32> = vec![];
    rem = append(rem, b[0]);
    i = 3;
    while i < b.len() as i32 {
        rem = append(rem, b[i as usize]);
        i += 1;
    }
    println!("{}", fromBytes(rem));
}
