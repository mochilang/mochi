// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:42Z
fn main() {
    fn mean(v: Vec<f64>) -> std::collections::HashMap<&'static str, i32> {
        if v.len() as i32 == 0 {
            return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", false); m };
        }
        let mut sum = 0.0;
        let mut i = 0;
        while i < v.len() as i32 {
            sum += v[i as usize];
            i += 1;
        }
        return { let mut m = std::collections::BTreeMap::new(); m.insert("ok", true); m.insert("mean", sum / (v.len() as i32.parse::<f64>().unwrap())); m };
    }
    fn main() -> () {
        let sets = vec![vec![], vec![3.0, 1.0, 4.0, 1.0, 5.0, 9.0], vec![1e+20.0, 3.0, 1.0, 4.0, 1.0, 5.0, 9.0, -1e+20.0], vec![10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.11], vec![10.0, 20.0, 30.0, 40.0, 50.0, -100.0, 4.7, -1100.0]];
        for v in sets {
            println!("{}", format!("{}{}", "Vector: ", v.to_string()));
            let r = mean(v);
            if r[&"ok"] != Default::default() {
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "Mean of ", v.len() as i32.to_string()), " numbers is "), r[&"mean"].to_string()));
            } else {
                println!("Mean undefined");
            }
            println!("");
        }
    }
    main();
}
