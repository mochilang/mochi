// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    let nPts = 100;
    let rMin = 10;
    let rMax = 15;
    let span = rMax + 1 + rMax;
    let mut rows: Vec<Vec<&'static str>> = vec![];
    let mut r = 0;
    while r < span {
        let mut row: Vec<&'static str> = vec![];
        let mut c = 0;
        while c < span * 2 {
            row = { let mut tmp = row.clone(); tmp.push(" "); tmp };
            c += 1;
        }
        rows = { let mut tmp = rows.clone(); tmp.push(row); tmp };
        r += 1;
    }
    let mut u = 0;
    let mut seen: std::collections::HashMap<&'static str, bool> = { let mut m = std::collections::BTreeMap::new(); m };
    let min2 = rMin * rMin;
    let max2 = rMax * rMax;
    let mut n = 0;
    while n < nPts {
        let mut x = now() % span - rMax;
        let mut y = now() % span - rMax;
        let rs = x * x + y * y;
        if rs < min2 || rs > max2 {
            continue;
        }
        n += 1;
        let row = y + rMax;
        let col = ((x + rMax) as f64) * 2 as f64;
        rows[row as usize][col as usize] = "*";
        let key = format!("{}{}", format!("{}{}", row.to_string(), ","), col.to_string());
        if !*seen.get(&key).unwrap() {
            seen.insert(key, true);
            u += 1;
        }
    }
    let mut i = 0;
    while i < span {
        let mut line = String::new();
        let mut j = 0;
        while j < span * 2 {
            line += rows[i as usize][j as usize];
            j += 1;
        }
        println!("{}", vec![format!("{}", line)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        i += 1;
    }
    println!("{}", vec![format!("{}", format!("{}{}", u.to_string(), " unique points"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
