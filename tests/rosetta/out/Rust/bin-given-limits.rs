// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:46Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn getBins(limits: Vec<i32>, data: Vec<i32>) -> Vec<i32> {
        let mut n = limits.len() as i32;
        let mut bins: Vec<i32> = vec![];
        let mut i = 0;
        while i < n + 1 {
            bins = append(bins, 0);
            i += 1;
        }
        let mut j = 0;
        while j < data.len() as i32 {
            let d = data[j as usize];
            let mut index = 0;
            while index < limits.len() as i32 {
                if d < limits[index as usize] {
                    break;
                }
                if d == limits[index as usize] {
                    index += 1;
                    break;
                }
                index += 1;
            }
            bins[index as usize] = bins[index as usize] + 1;
            j += 1;
        }
        return bins;
    }
    fn padLeft(n: i32, width: i32) -> &'static str {
        let mut s = n.to_string();
        let mut pad = width - s.len() as i32;
        let mut out = "";
        let mut i = 0;
        while i < pad {
            out += " ";
            i += 1;
        }
        return format!("{}{}", out, s);
    }
    fn printBins(limits: Vec<i32>, bins: Vec<i32>) -> () {
        let mut n = limits.len() as i32;
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "           < ", padLeft(limits[0], 3)), " = "), padLeft(bins[0], 2)));
        let mut i = 1;
        while i < n {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", ">= ", padLeft(limits[i - 1 as usize], 3)), " and < "), padLeft(limits[i as usize], 3)), " = "), padLeft(bins[i as usize], 2)));
            i += 1;
        }
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", ">= ", padLeft(limits[n - 1 as usize], 3)), "           = "), padLeft(bins[n as usize], 2)));
        println!("");
    }
    fn main() -> () {
        let limitsList = vec![vec![23, 37, 43, 53, 67, 83], vec![14, 18, 249, 312, 389, 392, 513, 591, 634, 720]];
        let dataList = vec![vec![95, 21, 94, 12, 99, 4, 70, 75, 83, 93, 52, 80, 57, 5, 53, 86, 65, 17, 92, 83, 71, 61, 54, 58, 47, 16, 8, 9, 32, 84, 7, 87, 46, 19, 30, 37, 96, 6, 98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55], vec![445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77, 323, 525, 570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47, 731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267, 248, 477, 549, 238, 62, 678, 98, 534, 622, 907, 406, 714, 184, 391, 913, 42, 560, 247, 346, 860, 56, 138, 546, 38, 985, 948, 58, 213, 799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917, 313, 845, 426, 9, 457, 628, 410, 723, 354, 895, 881, 953, 677, 137, 397, 97, 854, 740, 83, 216, 421, 94, 517, 479, 292, 963, 376, 981, 480, 39, 257, 272, 157, 5, 316, 395, 787, 942, 456, 242, 759, 898, 576, 67, 298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692, 698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40, 54, 901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427, 876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23, 707, 467, 33, 670, 921, 180, 991, 396, 160, 436, 717, 918, 8, 374, 101, 684, 727, 749]];
        let mut i = 0;
        while i < limitsList.len() as i32 {
            println!("{}", format!("{}{}", format!("{}{}", "Example ", i + 1.to_string()), "
"));
            let bins = getBins(limitsList[i as usize], dataList[i as usize]);
            printBins(limitsList[i as usize], bins);
            i += 1;
        }
    }
    main();
}
