// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:49Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn indexOfStr(h: &'static str, n: &'static str) -> i32 {
        let hlen = h.len() as i32;
        let nlen = n.len() as i32;
        if nlen == 0 {
            return 0;
        }
        let mut i = 0;
        while i <= hlen - nlen {
            if &h[i as usize..i + nlen as usize] == n {
                return i;
            }
            i += 1;
        }
        return -1;
    }
    fn stringSearchSingle(h: &'static str, n: &'static str) -> i32 {
        return indexOfStr(h, n);
    }
    fn stringSearch(h: &'static str, n: &'static str) -> Vec<i32> {
        let mut result: Vec<i32> = vec![];
        let mut start = 0;
        let hlen = h.len() as i32;
        let nlen = n.len() as i32;
        while start < hlen {
            let idx = indexOfStr(&h[start as usize..hlen as usize], n);
            if idx >= 0 {
                result = append(result, start + idx);
                start = start + idx + nlen;
            } else {
                break;
            }
        }
        return result;
    }
    fn display(nums: Vec<i32>) -> &'static str {
        let mut s = "[";
        let mut i = 0;
        while i < nums.len() as i32 {
            if i > 0 {
                s += ", ";
            }
            s += nums[i as usize].to_string();
            i += 1;
        }
        s += "]";
        return s;
    }
    fn main() -> () {
        let texts = vec!["GCTAGCTCTACGAGTCTA", "GGCTATAATGCGTA", "there would have been a time for such a word", "needle need noodle needle", "DKnuthusesandprogramsanimaginarycomputertheMIXanditsassociatedmachinecodeandassemblylanguages", "Nearby farms grew an acre of alfalfa on the dairy's behalf, with bales of that alfalfa exchanged for milk."];
        let patterns = vec!["TCTA", "TAATAAA", "word", "needle", "and", "alfalfa"];
        let mut i = 0;
        while i < texts.len() as i32 {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "text", i + 1.to_string()), " = "), texts[i as usize]));
            i += 1;
        }
        println!("");
        let mut j = 0;
        while j < texts.len() as i32 {
            let idxs = stringSearch(texts[j as usize], patterns[j as usize]);
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Found "", patterns[j as usize]), "" in 'text"), j + 1.to_string()), "' at indexes "), display(idxs)));
            j += 1;
        }
    }
    main();
}
