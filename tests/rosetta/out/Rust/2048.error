rustc: exit status 1
warning: unused import: `Read`
 --> /tmp/2048.rs:3:25
  |
3 |     use std::io::{self, Read};
  |                         ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: denote infinite loops with `loop { ... }`
   --> /tmp/2048.rs:266:5
    |
266 |     while true {
    |     ^^^^^^^^^^ help: use `loop`
    |
    = note: `#[warn(while_true)]` on by default

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
  --> /tmp/2048.rs:45:114
   |
45 | ...oard").to_string(), b.to_string()); m.insert(String::from("full").to_string(), true.to_string()); m };
   |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
   |
   = note: the following trait bounds were not satisfied:
           `&mut Vec<Vec<i32>>: std::fmt::Display`
           which is required by `&mut Vec<Vec<i32>>: ToString`
           `Vec<Vec<i32>>: std::fmt::Display`
           which is required by `Vec<Vec<i32>>: ToString`
           `[Vec<i32>]: std::fmt::Display`
           which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
  --> /tmp/2048.rs:47:32
   |
47 |         let mut idx = _now() % (empty.len() as i32);
   |                                ^^^^^^^^^^^^^^^^^^^^ expected `i64`, found `i32`

error[E0277]: cannot calculate the remainder of `i64` divided by `i32`
  --> /tmp/2048.rs:47:30
   |
47 |         let mut idx = _now() % (empty.len() as i32);
   |                              ^ no implementation for `i64 % i32`
   |
   = help: the trait `Rem<i32>` is not implemented for `i64`
   = help: the following other types implement trait `Rem<Rhs>`:
             `&i64` implements `Rem<i64>`
             `&i64` implements `Rem`
             `i64` implements `Rem<&i64>`
             `i64` implements `Rem`

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
  --> /tmp/2048.rs:54:110
   |
54 | ...oard").to_string(), b.to_string()); m.insert(String::from("full").to_string(), (empty.len() as i32) == 1.to_string()); m };
   |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
   |
   = note: the following trait bounds were not satisfied:
           `&mut Vec<Vec<i32>>: std::fmt::Display`
           which is required by `&mut Vec<Vec<i32>>: ToString`
           `Vec<Vec<i32>>: std::fmt::Display`
           which is required by `Vec<Vec<i32>>: ToString`
           `[Vec<i32>]: std::fmt::Display`
           which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
  --> /tmp/2048.rs:54:191
   |
54 | ...tring::from("full").to_string(), (empty.len() as i32) == 1.to_string()); m };
   |                                     --------------------    ^^^^^^^^^^^^^ expected `i32`, found `String`
   |                                     |
   |                                     expected because this is `i32`
   |
help: try removing the method call
   |
54 -         return { let mut m = std::collections::HashMap::new(); m.insert(String::from("board").to_string(), b.to_string()); m.insert(String::from("full").to_string(), (empty.len() as i32) == 1.to_string()); m };
54 +         return { let mut m = std::collections::HashMap::new(); m.insert(String::from("board").to_string(), b.to_string()); m.insert(String::from("full").to_string(), (empty.len() as i32) == 1); m };
   |

error[E0599]: `Vec<i32>` doesn't implement `std::fmt::Display`
   --> /tmp/2048.rs:124:110
    |
124 | ...ng::from("row").to_string(), res.to_string()); m.insert(String::from("gain").to_string(), gain.to_string()); m };
    |                                     ^^^^^^^^^ `Vec<i32>` cannot be formatted with the default formatter
    |
    = note: the following trait bounds were not satisfied:
            `Vec<i32>: std::fmt::Display`
            which is required by `Vec<i32>: ToString`
            `[i32]: std::fmt::Display`
            which is required by `[i32]: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead

error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut i32`
   --> /tmp/2048.rs:132:13
    |
132 |             score += *r.get(&String::from("gain")).unwrap();
    |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             cannot use `+=` on type `&mut i32`
    |
help: `+=` can be used on `i32` if you dereference the left-hand side
    |
132 |             *score += *r.get(&String::from("gain")).unwrap();
    |             +

error[E0608]: cannot index into a value of type `i32`
   --> /tmp/2048.rs:135:56
    |
135 |                 if b[(y) as usize][(x) as usize] != new[(x) as usize] {
    |                                                        ^^^^^^^^^^^^^^

error[E0608]: cannot index into a value of type `i32`
   --> /tmp/2048.rs:138:52
    |
138 |                 b[(y) as usize][(x) as usize] = new[(x) as usize];
    |                                                    ^^^^^^^^^^^^^^

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
   --> /tmp/2048.rs:143:110
    |
143 | ...oard").to_string(), b.to_string()); m.insert(String::from("score").to_string(), score.to_string()); m.insert(String::from("moved").to_...
    |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `&mut Vec<Vec<i32>>: std::fmt::Display`
            which is required by `&mut Vec<Vec<i32>>: ToString`
            `Vec<Vec<i32>>: std::fmt::Display`
            which is required by `Vec<Vec<i32>>: ToString`
            `[Vec<i32>]: std::fmt::Display`
            which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
   --> /tmp/2048.rs:151:19
    |
149 |             let mut rev = reverseRow(b[(y) as usize]);
    |                           --------------------------- expected due to this value
150 |             let r = slideLeft(rev);
151 |             rev = *r.get(&String::from("row")).unwrap();
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<i32>`, found `i32`
    |
    = note: expected struct `Vec<i32>`
                 found type `i32`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut i32`
   --> /tmp/2048.rs:152:13
    |
152 |             score += *r.get(&String::from("gain")).unwrap();
    |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             cannot use `+=` on type `&mut i32`
    |
help: `+=` can be used on `i32` if you dereference the left-hand side
    |
152 |             *score += *r.get(&String::from("gain")).unwrap();
    |             +

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
   --> /tmp/2048.rs:164:110
    |
164 | ...oard").to_string(), b.to_string()); m.insert(String::from("score").to_string(), score.to_string()); m.insert(String::from("moved").to_...
    |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `&mut Vec<Vec<i32>>: std::fmt::Display`
            which is required by `&mut Vec<Vec<i32>>: ToString`
            `Vec<Vec<i32>>: std::fmt::Display`
            which is required by `Vec<Vec<i32>>: ToString`
            `[Vec<i32>]: std::fmt::Display`
            which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
   --> /tmp/2048.rs:186:34
    |
186 |             let mut col = getCol(b, x);
    |                           ------ ^- help: try using a conversion method: `.to_vec()`
    |                           |      |
    |                           |      expected `Vec<Vec<i32>>`, found `&mut Vec<Vec<i32>>`
    |                           arguments to this function are incorrect
    |
    = note:         expected struct `Vec<_>`
            found mutable reference `&mut Vec<_>`
note: closure parameter defined here
   --> /tmp/2048.rs:166:24
    |
166 |     let getCol = move |b: Vec<Vec<i32>>, x: i32| -> Vec<i32> {
    |                        ^^^^^^^^^^^^^^^^

error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut i32`
   --> /tmp/2048.rs:189:13
    |
189 |             score += *r.get(&String::from("gain")).unwrap();
    |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             cannot use `+=` on type `&mut i32`
    |
help: `+=` can be used on `i32` if you dereference the left-hand side
    |
189 |             *score += *r.get(&String::from("gain")).unwrap();
    |             +

error[E0608]: cannot index into a value of type `i32`
   --> /tmp/2048.rs:192:56
    |
192 |                 if b[(y) as usize][(x) as usize] != new[(y) as usize] {
    |                                                        ^^^^^^^^^^^^^^

error[E0608]: cannot index into a value of type `i32`
   --> /tmp/2048.rs:195:52
    |
195 |                 b[(y) as usize][(x) as usize] = new[(y) as usize];
    |                                                    ^^^^^^^^^^^^^^

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
   --> /tmp/2048.rs:200:110
    |
200 | ...oard").to_string(), b.to_string()); m.insert(String::from("score").to_string(), score.to_string()); m.insert(String::from("moved").to_...
    |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `&mut Vec<Vec<i32>>: std::fmt::Display`
            which is required by `&mut Vec<Vec<i32>>: ToString`
            `Vec<Vec<i32>>: std::fmt::Display`
            which is required by `Vec<Vec<i32>>: ToString`
            `[Vec<i32>]: std::fmt::Display`
            which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
   --> /tmp/2048.rs:206:45
    |
206 |             let mut col = reverseRow(getCol(b, x));
    |                                      ------ ^- help: try using a conversion method: `.to_vec()`
    |                                      |      |
    |                                      |      expected `Vec<Vec<i32>>`, found `&mut Vec<Vec<i32>>`
    |                                      arguments to this function are incorrect
    |
    = note:         expected struct `Vec<_>`
            found mutable reference `&mut Vec<_>`
note: closure parameter defined here
   --> /tmp/2048.rs:166:24
    |
166 |     let getCol = move |b: Vec<Vec<i32>>, x: i32| -> Vec<i32> {
    |                        ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> /tmp/2048.rs:208:19
    |
206 |             let mut col = reverseRow(getCol(b, x));
    |                           ------------------------ expected due to this value
207 |             let r = slideLeft(col);
208 |             col = *r.get(&String::from("row")).unwrap();
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<i32>`, found `i32`
    |
    = note: expected struct `Vec<i32>`
                 found type `i32`

error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut i32`
   --> /tmp/2048.rs:209:13
    |
209 |             score += *r.get(&String::from("gain")).unwrap();
    |             -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             cannot use `+=` on type `&mut i32`
    |
help: `+=` can be used on `i32` if you dereference the left-hand side
    |
209 |             *score += *r.get(&String::from("gain")).unwrap();
    |             +

error[E0599]: the method `to_string` exists for mutable reference `&mut Vec<Vec<i32>>`, but its trait bounds were not satisfied
   --> /tmp/2048.rs:221:110
    |
221 | ...oard").to_string(), b.to_string()); m.insert(String::from("score").to_string(), score.to_string()); m.insert(String::from("moved").to_...
    |                          ^^^^^^^^^ method cannot be called on `&mut Vec<Vec<i32>>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `&mut Vec<Vec<i32>>: std::fmt::Display`
            which is required by `&mut Vec<Vec<i32>>: ToString`
            `Vec<Vec<i32>>: std::fmt::Display`
            which is required by `Vec<Vec<i32>>: ToString`
            `[Vec<i32>]: std::fmt::Display`
            which is required by `[Vec<i32>]: ToString`

error[E0308]: mismatched types
   --> /tmp/2048.rs:259:13
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
258 |     let mut r = spawnTile(&mut board);
259 |     board = *r.get(&String::from("board")).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:262:13
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
262 |     board = *r.get(&String::from("board")).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:272:21
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
272 |             board = *m.get(&String::from("board")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:274:21
    |
269 |         let mut moved = false;
    |                         ----- expected due to this value
...
274 |             moved = *m.get(&String::from("moved")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:278:21
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
278 |             board = *m.get(&String::from("board")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:280:21
    |
269 |         let mut moved = false;
    |                         ----- expected due to this value
...
280 |             moved = *m.get(&String::from("moved")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:284:21
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
284 |             board = *m.get(&String::from("board")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:286:21
    |
269 |         let mut moved = false;
    |                         ----- expected due to this value
...
286 |             moved = *m.get(&String::from("moved")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:290:21
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
290 |             board = *m.get(&String::from("board")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:292:21
    |
269 |         let mut moved = false;
    |                         ----- expected due to this value
...
292 |             moved = *m.get(&String::from("moved")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:299:21
    |
257 |     let mut board = newBoard();
    |                     ---------- expected due to this value
...
299 |             board = *r2.get(&String::from("board")).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Vec<i32>>`, found `i32`
    |
    = note: expected struct `Vec<Vec<i32>>`
                 found type `i32`

error[E0308]: mismatched types
   --> /tmp/2048.rs:301:16
    |
301 |             if full && (!hasMoves(board)) != Default::default() {
    |                ^^^^ expected `bool`, found `i32`

error: aborting due to 34 previous errors; 2 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0368, E0599, E0608.
For more information about an error, try `rustc --explain E0277`.
