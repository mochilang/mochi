// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:52Z
fn main() {
    fn main() -> () {
        let mut pkg_dog = "Salt";
        let mut Dog = "Pepper";
        let mut pkg_DOG = "Mustard";
        let packageSees = move |d1: &'static str, d2: &'static str, d3: &'static str| -> std::collections::HashMap<&'static str, bool> {
            println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Package sees: ", d1), " "), d2), " "), d3));
            return { let mut m = std::collections::BTreeMap::new(); m.insert("pkg_dog", true); m.insert("Dog", true); m.insert("pkg_DOG", true); m };
        };
        let mut d = packageSees(pkg_dog, Dog, pkg_DOG);
        println!("{}", format!("{}{}", format!("{}{}", "There are ", d.len() as i32.to_string()), " dogs.
"));
        let mut dog = "Benjamin";
        d = packageSees(pkg_dog, Dog, pkg_DOG);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), pkg_DOG));
        d["dog" as usize] = true;
        d["Dog" as usize] = true;
        d["pkg_DOG" as usize] = true;
        println!("{}", format!("{}{}", format!("{}{}", "There are ", d.len() as i32.to_string()), " dogs.
"));
        Dog = "Samba";
        d = packageSees(pkg_dog, Dog, pkg_DOG);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), pkg_DOG));
        d["dog" as usize] = true;
        d["Dog" as usize] = true;
        d["pkg_DOG" as usize] = true;
        println!("{}", format!("{}{}", format!("{}{}", "There are ", d.len() as i32.to_string()), " dogs.
"));
        let mut DOG = "Bernie";
        d = packageSees(pkg_dog, Dog, pkg_DOG);
        println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Main sees:   ", dog), " "), Dog), " "), DOG));
        d["dog" as usize] = true;
        d["Dog" as usize] = true;
        d["pkg_DOG" as usize] = true;
        d["DOG" as usize] = true;
        println!("{}", format!("{}{}", format!("{}{}", "There are ", d.len() as i32.to_string()), " dogs."));
    }
    main();
}
