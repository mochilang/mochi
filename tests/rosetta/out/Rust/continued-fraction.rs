// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn newTerm(a: i32, b: i32) -> std::collections::HashMap<&'static str, i32> {
        return { let mut m = std::collections::BTreeMap::new(); m.insert("a", a); m.insert("b", b); m };
    }
    fn cfSqrt2(nTerms: i32) -> Vec<std::collections::HashMap<&'static str, i32>> {
        let mut f: Vec<std::collections::HashMap<&'static str, i32>> = vec![];
        let mut n = 0;
        while n < nTerms {
            f = { let mut tmp = f.clone(); tmp.push(newTerm(2, 1)); tmp };
            n += 1;
        }
        if nTerms > 0 {
            f[0][&"a"] = 1;
        }
        return f;
    }
    fn cfNap(nTerms: i32) -> Vec<std::collections::HashMap<&'static str, i32>> {
        let mut f: Vec<std::collections::HashMap<&'static str, i32>> = vec![];
        let mut n = 0;
        while n < nTerms {
            f = { let mut tmp = f.clone(); tmp.push(newTerm(n, n - 1)); tmp };
            n += 1;
        }
        if nTerms > 0 {
            f[0][&"a"] = 2;
        }
        if nTerms > 1 {
            f[1][&"b"] = 1;
        }
        return f;
    }
    fn cfPi(nTerms: i32) -> Vec<std::collections::HashMap<&'static str, i32>> {
        let mut f: Vec<std::collections::HashMap<&'static str, i32>> = vec![];
        let mut n = 0;
        while n < nTerms {
            let g = 2 * n - 1;
            f = { let mut tmp = f.clone(); tmp.push(newTerm(6, g * g)); tmp };
            n += 1;
        }
        if nTerms > 0 {
            f[0][&"a"] = 3;
        }
        return f;
    }
    fn real(f: Vec<std::collections::HashMap<&'static str, i32>>) -> f64 {
        let mut r = 0.0;
        let mut i = f.len() as i32 - 1;
        while i > 0 {
            r = (f[i as usize].get(&"b").unwrap().parse::<f64>().unwrap()) / ((f[i as usize].get(&"a").unwrap().parse::<f64>().unwrap()) + r);
            i -= 1;
        }
        if f.len() as i32 > 0 {
            r += (f[0].get(&"a").unwrap().parse::<f64>().unwrap());
        }
        return r;
    }
    fn main() -> () {
        println!("{}", vec![format!("{}", format!("{}{}", "sqrt2: ", real(cfSqrt2(20)).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", format!("{}{}", "nap:   ", real(cfNap(20)).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", format!("{}{}", "pi:    ", real(cfPi(20)).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
