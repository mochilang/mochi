// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn pow(base: i32, exp: i32) -> i32 {
        let mut result = 1;
        let mut i = 0;
        while i < exp {
            result *= base;
            i += 1;
        }
        return result;
    }
    fn ackermann2(m: i32, n: i32) -> i32 {
        if m == 0 {
            return n + 1;
        }
        if m == 1 {
            return n + 2;
        }
        if m == 2 {
            return 2 * n + 3;
        }
        if m == 3 {
            return 8 * pow(2, n) - 3;
        }
        if n == 0 {
            return ackermann2(m - 1, 1);
        }
        return ackermann2(m - 1, ackermann2(m, n - 1));
    }
    fn main() -> () {
        println!("{}", vec![format!("{}", format!("{}{}", "A(0, 0) = ", ackermann2(0, 0).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", format!("{}{}", "A(1, 2) = ", ackermann2(1, 2).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", format!("{}{}", "A(2, 4) = ", ackermann2(2, 4).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", format!("{}{}", "A(3, 4) = ", ackermann2(3, 4).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
