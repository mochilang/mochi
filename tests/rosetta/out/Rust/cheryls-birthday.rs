// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Birthday {
        month: i32,
        day: i32,
}

fn main() {
    fn monthUnique(b: Birthday, list: Vec<Birthday>) -> bool {
        let mut c = 0;
        for x in list {
            if x.month == b.month {
                c += 1;
            }
        }
        return c == 1;
    }
    fn dayUnique(b: Birthday, list: Vec<Birthday>) -> bool {
        let mut c = 0;
        for x in list {
            if x.day == b.day {
                c += 1;
            }
        }
        return c == 1;
    }
    fn monthWithUniqueDay(b: Birthday, list: Vec<Birthday>) -> bool {
        for x in list {
            if x.month == b.month && dayUnique(&x.clone(), list) {
                return true;
            }
        }
        return false;
    }
    fn bstr(b: Birthday) -> &'static str {
        let months = vec!["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return format!("{}{}", format!("{}{}", months[b.month as usize], " "), b.day.to_string());
    }
    let mut choices: Vec<Birthday> = vec![Birthday { month: 5, day: 15 }, Birthday { month: 5, day: 16 }, Birthday { month: 5, day: 19 }, Birthday { month: 6, day: 17 }, Birthday { month: 6, day: 18 }, Birthday { month: 7, day: 14 }, Birthday { month: 7, day: 16 }, Birthday { month: 8, day: 14 }, Birthday { month: 8, day: 15 }, Birthday { month: 8, day: 17 }];
    let mut filtered: Vec<Birthday> = vec![];
    for bd in choices {
        if !monthUnique(&bd.clone(), choices) {
            filtered = { let mut tmp = filtered.clone(); tmp.push(bd.clone()); tmp };
        }
    }
    let mut filtered2: Vec<Birthday> = vec![];
    for bd in filtered {
        if !monthWithUniqueDay(&bd.clone(), filtered) {
            filtered2 = { let mut tmp = filtered2.clone(); tmp.push(bd.clone()); tmp };
        }
    }
    let mut filtered3: Vec<Birthday> = vec![];
    for bd in filtered2 {
        if dayUnique(&bd.clone(), filtered2) {
            filtered3 = { let mut tmp = filtered3.clone(); tmp.push(bd.clone()); tmp };
        }
    }
    let mut filtered4: Vec<Birthday> = vec![];
    for bd in filtered3 {
        if monthUnique(&bd.clone(), filtered3) {
            filtered4 = { let mut tmp = filtered4.clone(); tmp.push(bd.clone()); tmp };
        }
    }
    if filtered4.len() as i32 == 1 {
        println!("{}", vec![format!("{}", format!("{}{}", "Cheryl's birthday is ", bstr(&filtered4[0])))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    } else {
        println!("Something went wrong!");
    }
}
