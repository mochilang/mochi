// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
fn main() {
    let fields = move |s: String| -> Vec<String> {
        let mut res: Vec<String> = vec![];
        let mut cur = String::new();
        let mut i = 0;
        while i < (s.len() as i32) {
            let c = &s[(i) as usize..(i + 1) as usize];
            if c == String::from(" ") {
                if (cur.len() as i32) > 0 {
                    res = { let mut tmp = res.clone(); tmp.push(cur); tmp };
                    cur = String::from("");
                }
            } else {
                cur = format!("{}{}", cur, c);
            }
            i += 1;
        }
        if (cur.len() as i32) > 0 {
            res = { let mut tmp = res.clone(); tmp.push(cur); tmp };
        }
        return res;
    };
    let canSpell = move |word: String, blks: Vec<String>| -> bool {
        if (word.len() as i32) == 0 {
            return true;
        }
        let c = lower(&word[0..1]);
        let mut i = 0;
        while i < (blks.len() as i32) {
            let b = blks[(i) as usize];
            if c == lower(&b[0..1]) || c == lower(&b[1..2]) {
                let mut rest: Vec<String> = vec![];
                let mut j = 0;
                while j < (blks.len() as i32) {
                    if j != i {
                        rest = { let mut tmp = rest.clone(); tmp.push(blks[(j) as usize]); tmp };
                    }
                    j += 1;
                }
                if canSpell(&word[(1) as usize..(word.len()) as usize], rest) {
                    return true;
                }
            }
            i += 1;
        }
        return false;
    };
    let newSpeller = move |blocks: String| -> Box<dyn Fn(String) -> bool> {
        let bl = fields(blocks);
        return Box::new(move |w: String| canSpell(w, bl));
    };
    let main = move || -> () {
        let sp = newSpeller(String::from("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"));
        for word in vec![String::from("A"), String::from("BARK"), String::from("BOOK"), String::from("TREAT"), String::from("COMMON"), String::from("SQUAD"), String::from("CONFUSE")] {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", word, String::from(" ")), sp(word).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
    };
    main();
}
