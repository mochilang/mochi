// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:32Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn fields(s: &'static str) -> Vec<&'static str> {
        let mut res: Vec<&'static str> = vec![];
        let mut cur = "";
        let mut i = 0;
        while i < s.len() as i32 {
            let c = &s[i as usize..i + 1 as usize];
            if c == " " {
                if cur.len() as i32 > 0 {
                    res = append(res, cur);
                    cur = "";
                }
            } else {
                cur += c;
            }
            i += 1;
        }
        if cur.len() as i32 > 0 {
            res = append(res, cur);
        }
        return res;
    }
    fn canSpell(word: &'static str, blks: Vec<&'static str>) -> bool {
        if word.len() as i32 == 0 {
            return true;
        }
        let c = lower(&word[0..1]);
        let mut i = 0;
        while i < blks.len() as i32 {
            let b = blks[i as usize];
            if c == lower(&b[0..1]) || c == lower(&b[1..2]) {
                let mut rest: Vec<&'static str> = vec![];
                let mut j = 0;
                while j < blks.len() as i32 {
                    if j != i {
                        rest = append(rest, blks[j as usize]);
                    }
                    j += 1;
                }
                if canSpell(&word[1 as usize..word.len() as usize], rest) {
                    return true;
                }
            }
            i += 1;
        }
        return false;
    }
    fn newSpeller(blocks: &'static str) -> Box<dyn Fn(&'static str) -> bool> {
        let bl = fields(blocks);
        return Box::new(move |w: &'static str| canSpell(w, bl));
    }
    fn main() -> () {
        let sp = newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM");
        for word in vec!["A", "BARK", "BOOK", "TREAT", "COMMON", "SQUAD", "CONFUSE"] {
            println!("{:?}", format!("{}{}", format!("{}{}", word, " "), sp(word).to_string()));
        }
    }
    main();
}
