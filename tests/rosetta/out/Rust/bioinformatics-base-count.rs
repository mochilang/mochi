// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:46Z
fn main() {
    fn padLeft(s: &'static str, w: i32) -> &'static str {
        let mut res = "";
        let mut n = w - s.len() as i32;
        while n > 0 {
            res += " ";
            n -= 1;
        }
        return format!("{}{}", res, s);
    }
    let dna = format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "", "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG"), "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG"), "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT"), "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT"), "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG"), "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA"), "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT"), "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG"), "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC"), "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT");
    println!("SEQUENCE:");
    let le = dna.len() as i32;
    let mut i = 0;
    while i < le {
        let mut k = i + 50;
        if k > le {
            k = le;
        }
        println!("{}", format!("{}{}", format!("{}{}", padLeft(i.to_string(), 5), ": "), &dna[i as usize..k as usize]));
        i += 50;
    }
    let mut a = 0;
    let mut c = 0;
    let mut g = 0;
    let mut t = 0;
    let mut idx = 0;
    while idx < le {
        let ch = &dna[idx as usize..idx + 1 as usize];
        if ch == "A" {
            a += 1;
        } else {
            if ch == "C" {
                c += 1;
            } else {
                if ch == "G" {
                    g += 1;
                } else {
                    if ch == "T" {
                        t += 1;
                    }
                }
            }
        }
        idx += 1;
    }
    println!("");
    println!("BASE COUNT:");
    println!("{}", format!("{}{}", "    A: ", padLeft(a.to_string(), 3)));
    println!("{}", format!("{}{}", "    C: ", padLeft(c.to_string(), 3)));
    println!("{}", format!("{}{}", "    G: ", padLeft(g.to_string(), 3)));
    println!("{}", format!("{}{}", "    T: ", padLeft(t.to_string(), 3)));
    println!("    ------");
    println!("{}", format!("{}{}", "    Î£: ", le.to_string()));
    println!("    ======");
}
