// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn lower(ch: &'static str) -> &'static str {
        let up = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let low = "abcdefghijklmnopqrstuvwxyz";
        let mut i = 0;
        while i < up.len() as i32 {
            if ch == &up[i as usize..i + 1 as usize] {
                return &low[i as usize..i + 1 as usize];
            }
            i += 1;
        }
        return ch;
    }
    let mut partList = vec!["A", "B", "C", "D"];
    let mut nAssemblies = 3;
    for p in partList {
        println!("{}", vec![format!("{}", format!("{}{}", p, " worker running"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    for cycle in 1..(nAssemblies + 1) {
        println!("{}", vec![format!("{}", format!("{}{}", "begin assembly cycle ", cycle.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        let mut a = String::new();
        for p in partList {
            println!("{}", vec![format!("{}", format!("{}{}", p, " worker begins part"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", p, " worker completed "), lower(p)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            a += lower(p);
        }
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", a, " assembled.  cycle "), cycle.to_string()), " complete"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    for p in partList {
        println!("{}", vec![format!("{}", format!("{}{}", p, " worker stopped"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
}
