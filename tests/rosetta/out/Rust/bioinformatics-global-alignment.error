rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
   --> /tmp/bioinformatics-global-alignment.rs:136:33
    |
136 |             if sup.len() as i32 < shortest.len() as i32 {
    |                                 ^ --------- interpreted as generic arguments
    |                                 |
    |                                 not interpreted as comparison
    |
help: try comparing the cast value
    |
136 |             if (sup.len() as i32) < shortest.len() as i32 {
    |                +                +

warning: denote infinite loops with `loop { ... }`
  --> /tmp/bioinformatics-global-alignment.rs:81:9
   |
81 |         while true {
   |         ^^^^^^^^^^ help: use `loop`
   |
   = note: `#[warn(while_true)]` on by default

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:10:16
   |
3  |     fn padLeft(s: &'static str, w: i32) -> &'static str {
   |                                            ------------ expected `&str` because of return type
...
10 |         return format!("{}{}", res, s);
   |                ^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:15:35
   |
15 |             if &s[i as usize..i + 1 as usize] == ch {
   |                                   ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:15:31
   |
15 |             if &s[i as usize..i + 1 as usize] == ch {
   |                               ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/bioinformatics-global-alignment.rs:15:33
   |
15 |             if &s[i as usize..i + 1 as usize] == ch {
   |                                 ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:27:35
   |
27 |             if &s[i as usize..i + subl as usize] == sub {
   |                                   ^^^^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:27:31
   |
27 |             if &s[i as usize..i + subl as usize] == sub {
   |                               ^^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/bioinformatics-global-alignment.rs:27:33
   |
27 |             if &s[i as usize..i + subl as usize] == sub {
   |                                 ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:87:50
   |
87 |             if &s2[0 as usize..s1.len() as i32 - start as usize] == &s1[start as usize..s1.len() as i32 as usize] {
   |                                                  ^^^^^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:87:32
   |
87 |             if &s2[0 as usize..s1.len() as i32 - start as usize] == &s1[start as usize..s1.len() as i32 as usize] {
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot subtract `usize` from `i32`
  --> /tmp/bioinformatics-global-alignment.rs:87:48
   |
87 |             if &s2[0 as usize..s1.len() as i32 - start as usize] == &s1[start as usize..s1.len() as i32 as usize] {
   |                                                ^ no implementation for `i32 - usize`
   |
   = help: the trait `Sub<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Sub<Rhs>`:
             `&i32` implements `Sub<i32>`
             `&i32` implements `Sub`
             `i32` implements `Sub<&i32>`
             `i32` implements `Sub`

error[E0308]: mismatched types
  --> /tmp/bioinformatics-global-alignment.rs:81:9
   |
79 |       fn headTailOverlap(s1: &'static str, s2: &'static str) -> i32 {
   |                                                                 --- expected `i32` because of return type
80 |           let mut start = 0;
81 | /         while true {
82 | |             let ix = indexOfFrom(s1, &s2[0..1], start);
83 | |             if ix == 0 - 1 {
84 | |                 return 0;
...  |
90 | |             start += 1;
91 | |         }
   | |_________^ expected `i32`, found `()`
   |
   = note: `while` loops evaluate to unit type `()`
help: consider returning a value here
   |
91 ~         }
92 +         /* `i32` value */
   |

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:120:16
    |
115 |     fn joinAll(ss: Vec<&'static str>) -> &'static str {
    |                                          ------------ expected `&'static str` because of return type
...
120 |         return out;
    |                ^^^ expected `&str`, found `String`
    |
help: consider borrowing here
    |
120 |         return &out;
    |                +

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:132:69
    |
132 |                 let ov = headTailOverlap(perm[i as usize], perm[i + 1 as usize]);
    |                                                                     ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/bioinformatics-global-alignment.rs:132:67
    |
132 |                 let ov = headTailOverlap(perm[i as usize], perm[i + 1 as usize]);
    |                                                                   ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0277]: the type `[&str]` cannot be indexed by `i32`
   --> /tmp/bioinformatics-global-alignment.rs:132:65
    |
132 |                 let ov = headTailOverlap(perm[i as usize], perm[i + 1 as usize]);
    |                                                                 ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[&str]>` is not implemented for `i32`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i32`
    = note: required for `Vec<&str>` to implement `Index<i32>`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:133:34
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                                  ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/bioinformatics-global-alignment.rs:133:32
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                                ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0277]: the type `[&str]` cannot be indexed by `i32`
   --> /tmp/bioinformatics-global-alignment.rs:133:30
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                              ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[&str]>` is not implemented for `i32`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i32`
    = note: required for `Vec<&str>` to implement `Index<i32>`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:133:68
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                                                                    ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/bioinformatics-global-alignment.rs:133:66
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                                                                  ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0277]: the type `[&str]` cannot be indexed by `i32`
   --> /tmp/bioinformatics-global-alignment.rs:133:64
    |
133 |                 sup += &perm[i + 1 as usize][ov as usize..perm[i + 1 as usize].len() as i32 as usize];
    |                                                                ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[&str]>` is not implemented for `i32`
            but it is implemented for `usize`
    = help: for that trait implementation, expected `usize`, found `i32`
    = note: required for `Vec<&str>` to implement `Index<i32>`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:150:43
    |
150 |             let ch = &seq[i as usize..i + 1 as usize];
    |                                           ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:150:39
    |
150 |             let ch = &seq[i as usize..i + 1 as usize];
    |                                       ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
   --> /tmp/bioinformatics-global-alignment.rs:150:41
    |
150 |             let ch = &seq[i as usize..i + 1 as usize];
    |                                         ^ no implementation for `i32 + usize`
    |
    = help: the trait `Add<usize>` is not implemented for `i32`
    = help: the following other types implement trait `Add<Rhs>`:
              `&i32` implements `Add<i32>`
              `&i32` implements `Add`
              `i32` implements `Add<&i32>`
              `i32` implements `Add`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:172:85
    |
172 | ...   println!("{}", vec![format!("{}", format!("{}{}", padLeft("A", 10), padLeft(a.to_string(), 12)))].into_iter().filter(|s| !s.is_empt...
    |                                                                           ------- ^^^^^^^^^^^^^ expected `&str`, found `String`
    |                                                                           |
    |                                                                           arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/bioinformatics-global-alignment.rs:3:8
    |
3   |     fn padLeft(s: &'static str, w: i32) -> &'static str {
    |        ^^^^^^^ ---------------
help: consider borrowing here
    |
172 |         println!("{}", vec![format!("{}", format!("{}{}", padLeft("A", 10), padLeft(&a.to_string(), 12)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                                                                     +

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:173:85
    |
173 | ...   println!("{}", vec![format!("{}", format!("{}{}", padLeft("C", 10), padLeft(c.to_string(), 12)))].into_iter().filter(|s| !s.is_empt...
    |                                                                           ------- ^^^^^^^^^^^^^ expected `&str`, found `String`
    |                                                                           |
    |                                                                           arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/bioinformatics-global-alignment.rs:3:8
    |
3   |     fn padLeft(s: &'static str, w: i32) -> &'static str {
    |        ^^^^^^^ ---------------
help: consider borrowing here
    |
173 |         println!("{}", vec![format!("{}", format!("{}{}", padLeft("C", 10), padLeft(&c.to_string(), 12)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                                                                     +

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:174:85
    |
174 | ...   println!("{}", vec![format!("{}", format!("{}{}", padLeft("G", 10), padLeft(g.to_string(), 12)))].into_iter().filter(|s| !s.is_empt...
    |                                                                           ------- ^^^^^^^^^^^^^ expected `&str`, found `String`
    |                                                                           |
    |                                                                           arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/bioinformatics-global-alignment.rs:3:8
    |
3   |     fn padLeft(s: &'static str, w: i32) -> &'static str {
    |        ^^^^^^^ ---------------
help: consider borrowing here
    |
174 |         println!("{}", vec![format!("{}", format!("{}{}", padLeft("G", 10), padLeft(&g.to_string(), 12)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                                                                     +

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:175:85
    |
175 | ...   println!("{}", vec![format!("{}", format!("{}{}", padLeft("T", 10), padLeft(t.to_string(), 12)))].into_iter().filter(|s| !s.is_empt...
    |                                                                           ------- ^^^^^^^^^^^^^ expected `&str`, found `String`
    |                                                                           |
    |                                                                           arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/bioinformatics-global-alignment.rs:3:8
    |
3   |     fn padLeft(s: &'static str, w: i32) -> &'static str {
    |        ^^^^^^^ ---------------
help: consider borrowing here
    |
175 |         println!("{}", vec![format!("{}", format!("{}{}", padLeft("T", 10), padLeft(&t.to_string(), 12)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                                                                     +

error[E0277]: cannot subtract `String` from `i32`
   --> /tmp/bioinformatics-global-alignment.rs:176:95
    |
176 | ...   println!("{}", vec![format!("{}", format!("{}{}", padLeft("Other", 10), padLeft(total - (a + c + g + t).to_string(), 12)))].into_it...
    |                                                                                             ^ no implementation for `i32 - String`
    |
    = help: the trait `Sub<String>` is not implemented for `i32`
    = help: the following other types implement trait `Sub<Rhs>`:
              `&i32` implements `Sub<i32>`
              `&i32` implements `Sub`
              `i32` implements `Sub<&i32>`
              `i32` implements `Sub`

error[E0308]: mismatched types
   --> /tmp/bioinformatics-global-alignment.rs:178:96
    |
178 | ...("{}{}", padLeft("Total length", 14), padLeft(total.to_string(), 8)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(...
    |                                          ------- ^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |                                          |
    |                                          arguments to this function are incorrect
    |
note: function defined here
   --> /tmp/bioinformatics-global-alignment.rs:3:8
    |
3   |     fn padLeft(s: &'static str, w: i32) -> &'static str {
    |        ^^^^^^^ ---------------
help: consider borrowing here
    |
178 |         println!("{}", vec![format!("{}", format!("{}{}", padLeft("Total length", 14), padLeft(&total.to_string(), 8)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    |                                                                                                +

error[E0382]: use of moved value: `res`
  --> /tmp/bioinformatics-global-alignment.rs:48:16
   |
35 |         let mut res: Vec<&'static str> = vec![];
   |             ------- move occurs because `res` has type `Vec<&str>`, which does not implement the `Copy` trait
36 |         for s in slist {
   |         -------------- inside of this loop
37 |             let mut found = false;
38 |             for r in res {
   |                      --- `res` moved due to this implicit call to `.into_iter()`, in previous iteration of loop
...
45 |                 res = { let mut tmp = res.clone(); tmp.push(s); tmp };
   |                 --- this reinitialization might get skipped
...
48 |         return res;
   |                ^^^ value used here after move
   |
note: `into_iter` takes ownership of the receiver `self`, which moves `res`
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/iter/traits/collect.rs:313:18
help: consider iterating over a slice of the `Vec<&str>`'s content to avoid moving into the `for` loop
   |
38 |             for r in &res {
   |                      +

error: aborting due to 32 previous errors; 1 warning emitted

Some errors have detailed explanations: E0277, E0308, E0382.
For more information about an error, try `rustc --explain E0277`.
