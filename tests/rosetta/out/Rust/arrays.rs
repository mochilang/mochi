// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn listStr(xs: Vec<i32>) -> &'static str {
        let mut s = String::from("[");
        let mut i = 0;
        while i < xs.len() as i32 {
            s += xs[i as usize].to_string();
            if i + 1 < xs.len() as i32 {
                s += " ";
            }
            i += 1;
        }
        s += "]";
        return s;
    }
    let mut a = vec![0, 0, 0, 0, 0];
    println!("{}", vec![format!("{}", format!("{}{}", "len(a) = ", a.len() as i32.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "a = ", listStr(a)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    a[0] = 3;
    println!("{}", vec![format!("{}", format!("{}{}", "a = ", listStr(a)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "a[0] = ", a[0].to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut s = a[0..4].to_vec();
    let mut cap_s = 5;
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", s.len() as i32.to_string()), "  cap(s) = "), cap_s.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    s = a[0..5].to_vec();
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    a[0] = 22;
    s[0] = 22;
    println!("{}", vec![format!("{}", format!("{}{}", "a = ", listStr(a)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    s = { let mut tmp = s.clone(); tmp.push(4); tmp };
    s = { let mut tmp = s.clone(); tmp.push(5); tmp };
    s = { let mut tmp = s.clone(); tmp.push(6); tmp };
    cap_s = 10;
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", s.len() as i32.to_string()), "  cap(s) = "), cap_s.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    a[4] = -1;
    println!("{}", vec![format!("{}", format!("{}{}", "a = ", listStr(a)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    s = vec![];
    for i in 0..8 {
        s = { let mut tmp = s.clone(); tmp.push(0); tmp };
    }
    cap_s = 8;
    println!("{}", vec![format!("{}", format!("{}{}", "s = ", listStr(s)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "len(s) = ", s.len() as i32.to_string()), "  cap(s) = "), cap_s.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
