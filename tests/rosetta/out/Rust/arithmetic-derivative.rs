// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn primeFactors(n: i32) -> Vec<i32> {
        let mut factors: Vec<i32> = vec![];
        let mut x = n;
        while x % 2 == 0 {
            factors = { let mut tmp = factors.clone(); tmp.push(2); tmp };
            x = ((x as f64) / (2 as f64)).parse::<i32>().unwrap();
        }
        let mut p = 3;
        while p * p <= x {
            while x % p == 0 {
                factors = { let mut tmp = factors.clone(); tmp.push(p); tmp };
                x = ((x as f64) / (p as f64)).parse::<i32>().unwrap();
            }
            p += 2;
        }
        if x > 1 {
            factors = { let mut tmp = factors.clone(); tmp.push(x); tmp };
        }
        return factors;
    }
    fn repeat(ch: &'static str, n: i32) -> &'static str {
        let mut s = String::new();
        let mut i = 0;
        while i < n {
            s += ch;
            i += 1;
        }
        return s;
    }
    fn D(n: f64) -> f64 {
        if n < 0.0 {
            return -D(-n);
        }
        if n < 2.0 {
            return 0.0;
        }
        let mut factors: Vec<i32> = vec![];
        if n < 1e+19.0 {
            factors = primeFactors((n).parse::<i32>().unwrap());
        } else {
            let g = (n / 100.0).parse::<i32>().unwrap();
            factors = primeFactors(g);
            factors = { let mut tmp = factors.clone(); tmp.push(2); tmp };
            factors = { let mut tmp = factors.clone(); tmp.push(2); tmp };
            factors = { let mut tmp = factors.clone(); tmp.push(5); tmp };
            factors = { let mut tmp = factors.clone(); tmp.push(5); tmp };
        }
        let c = factors.len() as i32;
        if c == 1 {
            return 1.0;
        }
        if c == 2 {
            return (factors[0] + factors[1]).parse::<f64>().unwrap();
        }
        let d = n / (factors[0].parse::<f64>().unwrap());
        return D(d) * (factors[0].parse::<f64>().unwrap()) + d;
    }
    fn pad(n: i32) -> &'static str {
        let mut s = n.to_string();
        while s.len() as i32 < 4 {
            s = format!("{}{}", " ", s);
        }
        return s;
    }
    fn main() -> () {
        let mut vals: Vec<i32> = vec![];
        let mut n = -99;
        while n < 101 {
            vals = { let mut tmp = vals.clone(); tmp.push((D(n.parse::<f64>().unwrap())).parse::<i32>().unwrap()); tmp };
            n += 1;
        }
        let mut i = 0;
        while i < vals.len() as i32 {
            let mut line = String::new();
            let mut j = 0;
            while j < 10 {
                line += pad(vals[i + j as usize]);
                if j < 9 {
                    line += " ";
                }
                j += 1;
            }
            println!("{}", vec![format!("{}", line)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            i += 10;
        }
        let mut pow = 1.0;
        let mut m = 1;
        while m < 21 {
            pow *= 10.0;
            let mut exp = m.to_string();
            if exp.len() as i32 < 2 {
                exp += " ";
            }
            let mut res = format!("{}{}", m.to_string(), repeat("0", m - 1));
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "D(10^", exp), ") / 7 = "), res))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            m += 1;
        }
    }
    main();
}
