// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn split(s: &'static str, sep: &'static str) -> Vec<&'static str> {
        let mut parts: Vec<&'static str> = vec![];
        let mut cur = String::new();
        let mut i = 0;
        while i < s.len() as i32 {
            if sep.len() as i32 > 0 && i + sep.len() as i32 <= s.len() as i32 && &s[i as usize..i + sep.len() as i32 as usize] == sep {
                parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
                cur = "";
                i += sep.len() as i32;
            } else {
                cur += &s[i as usize..i + 1 as usize];
                i += 1;
            }
        }
        parts = { let mut tmp = parts.clone(); tmp.push(cur); tmp };
        return parts;
    }
    fn join(xs: Vec<&'static str>, sep: &'static str) -> &'static str {
        let mut res = String::new();
        let mut i = 0;
        while i < xs.len() as i32 {
            if i > 0 {
                res += sep;
            }
            res += xs[i as usize];
            i += 1;
        }
        return res;
    }
    fn repeat(ch: &'static str, n: i32) -> &'static str {
        let mut out = String::new();
        let mut i = 0;
        while i < n {
            out += ch;
            i += 1;
        }
        return out;
    }
    fn parseIntStr(str: &'static str) -> i32 {
        let mut i = 0;
        let mut neg = false;
        if str.len() as i32 > 0 && &str[0..1] == "-" {
            neg = true;
            i = 1;
        }
        let mut n = 0;
        let digits = { let mut m = std::collections::BTreeMap::new(); m.insert("0", 0); m.insert("1", 1); m.insert("2", 2); m.insert("3", 3); m.insert("4", 4); m.insert("5", 5); m.insert("6", 6); m.insert("7", 7); m.insert("8", 8); m.insert("9", 9); m };
        while i < str.len() as i32 {
            n = n * 10 + *digits.get(&&str[i as usize..i + 1 as usize]).unwrap();
            i += 1;
        }
        if neg {
            n = -n;
        }
        return n;
    }
    fn toBinary(n: i32, bits: i32) -> &'static str {
        let mut b = String::new();
        let mut val = n;
        let mut i = 0;
        while i < bits {
            b = format!("{}{}", val % 2.to_string(), b);
            val = ((val as f64) / (2 as f64)).parse::<i32>().unwrap();
            i += 1;
        }
        return b;
    }
    fn binToInt(bits: &'static str) -> i32 {
        let mut n = 0;
        let mut i = 0;
        while i < bits.len() as i32 {
            n = n * 2 + parseIntStr(&bits[i as usize..i + 1 as usize]);
            i += 1;
        }
        return n;
    }
    fn padRight(s: &'static str, width: i32) -> &'static str {
        let mut out = s;
        while out.len() as i32 < width {
            out += " ";
        }
        return out;
    }
    fn canonicalize(cidr: &'static str) -> &'static str {
        let parts = split(cidr, "/");
        let dotted = parts[0];
        let size = parseIntStr(parts[1]);
        let mut binParts: Vec<&'static str> = vec![];
        for p in split(dotted, ".") {
            binParts = { let mut tmp = binParts.clone(); tmp.push(toBinary(parseIntStr(p), 8)); tmp };
        }
        let mut binary = join(binParts, "");
        binary = format!("{}{}", &binary[0 as usize..size as usize], repeat("0", 32 - size));
        let mut canonParts: Vec<&'static str> = vec![];
        let mut i = 0;
        while i < binary.len() as i32 {
            canonParts = { let mut tmp = canonParts.clone(); tmp.push(binToInt(&binary[i as usize..i + 8 as usize]).to_string()); tmp };
            i += 8;
        }
        return format!("{}{}", format!("{}{}", join(canonParts, "."), "/"), parts[1]);
    }
    let tests = vec!["87.70.141.1/22", "36.18.154.103/12", "62.62.197.11/29", "67.137.119.181/4", "161.214.74.21/24", "184.232.176.184/18"];
    for t in tests {
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", padRight(t, 18), " -> "), canonicalize(t)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
}
