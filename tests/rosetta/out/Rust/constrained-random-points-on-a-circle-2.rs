// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    let nPts = 100;
    let rMin = 10;
    let rMax = 15;
    let span = rMax + 1 + rMax;
    let mut poss: Vec<Vec<i32>> = vec![];
    let min2 = rMin * rMin;
    let max2 = rMax * rMax;
    let mut y = -rMax;
    while y <= rMax {
        let mut x = -rMax;
        while x <= rMax {
            let r2 = x * x + y * y;
            if r2 >= min2 && r2 <= max2 {
                poss = { let mut tmp = poss.clone(); tmp.push(vec![x, y]); tmp };
            }
            x += 1;
        }
        y += 1;
    }
    println!("{}", vec![format!("{}", format!("{}{}", poss.len() as i32.to_string(), " possible points"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let mut rows: Vec<Vec<&'static str>> = vec![];
    let mut r = 0;
    while r < span {
        let mut row: Vec<&'static str> = vec![];
        let mut c = 0;
        while c < span * 2 {
            row = { let mut tmp = row.clone(); tmp.push(" "); tmp };
            c += 1;
        }
        rows = { let mut tmp = rows.clone(); tmp.push(row); tmp };
        r += 1;
    }
    let mut u = 0;
    let mut seen: std::collections::HashMap<&'static str, bool> = { let mut m = std::collections::BTreeMap::new(); m };
    let mut n = 0;
    while n < nPts {
        let mut i = now() % poss.len() as i32;
        let x = poss[i as usize][0];
        let yy = poss[i as usize][1];
        let row = yy + rMax;
        let col = (x + rMax) * 2;
        rows[row as usize][col as usize] = "*";
        let key = format!("{}{}", format!("{}{}", row.to_string(), ","), col.to_string());
        if !*seen.get(&key).unwrap() {
            seen.insert(key, true);
            u += 1;
        }
        n += 1;
    }
    let mut i2 = 0;
    while i2 < span {
        let mut line = String::new();
        let mut j = 0;
        while j < span * 2 {
            line += rows[i2 as usize][j as usize];
            j += 1;
        }
        println!("{}", vec![format!("{}", line)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        i2 += 1;
    }
    println!("{}", vec![format!("{}", format!("{}{}", u.to_string(), " unique points"))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
