rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/benfords-law.rs:37:30
   |
37 |         while s.len() as i32 < width {
   |                              ^ ------- interpreted as generic arguments
   |                              |
   |                              not interpreted as comparison
   |
help: try comparing the cast value
   |
37 |         while (s.len() as i32) < width {
   |               +              +

error[E0599]: no method named `parse` found for type `f64` in the current scope
 --> /tmp/benfords-law.rs:4:19
  |
4 |         return (x.parse::<i32>().unwrap()).parse::<f64>().unwrap();
  |                   ^^^^^ method not found in `f64`

error[E0308]: mismatched types
 --> /tmp/benfords-law.rs:9:35
  |
9 |             if &s[i as usize..i + 1 as usize] == ch {
  |                                   ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
 --> /tmp/benfords-law.rs:9:31
  |
9 |             if &s[i as usize..i + 1 as usize] == ch {
  |                               ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
 --> /tmp/benfords-law.rs:9:33
  |
9 |             if &s[i as usize..i + 1 as usize] == ch {
  |                                 ^ no implementation for `i32 + usize`
  |
  = help: the trait `Add<usize>` is not implemented for `i32`
  = help: the following other types implement trait `Add<Rhs>`:
            `&i32` implements `Add<i32>`
            `&i32` implements `Add`
            `i32` implements `Add<&i32>`
            `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:19:31
   |
19 |         let mut dot = indexOf(s, ".");
   |                       ------- ^ expected `&str`, found `String`
   |                       |
   |                       arguments to this function are incorrect
   |
note: function defined here
  --> /tmp/benfords-law.rs:6:8
   |
6  |     fn indexOf(s: &'static str, ch: &'static str) -> i32 {
   |        ^^^^^^^ ---------------
help: consider borrowing here
   |
19 |         let mut dot = indexOf(&s, ".");
   |                               +

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:25:42
   |
25 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                          ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:25:36
   |
25 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                    ^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/benfords-law.rs:25:40
   |
25 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                        ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:25:21
   |
18 |         let mut s = y.to_string();
   |                     ------------- expected due to this value
...
25 |                 s = &s[0 as usize..dot + 4 as usize];
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `&str`
   |
help: try using a conversion method
   |
25 |                 s = (&s[0 as usize..dot + 4 as usize]).to_string();
   |                     +                                +++++++++++++

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:33:16
   |
16 |     fn fmtF3(x: f64) -> &'static str {
   |                         ------------ expected `&'static str` because of return type
...
33 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
33 |         return &s;
   |                +

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:38:17
   |
38 |             s = format!("{}{}", " ", s);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:57:16
   |
57 |         if x < 0.0 {
   |                ^^^ expected `&mut f64`, found floating-point number
   |
help: consider dereferencing the borrow
   |
57 |         if *x < 0.0 {
   |            +

error[E0600]: cannot apply unary operator `-` to type `&mut f64`
  --> /tmp/benfords-law.rs:58:17
   |
58 |             x = -x;
   |                 ^^ cannot apply unary operator `-`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:60:20
   |
60 |         while x >= 10.0 {
   |                    ^^^^ expected `&mut f64`, found floating-point number
   |
help: consider dereferencing the borrow
   |
60 |         while *x >= 10.0 {
   |               +

error[E0368]: binary assignment operation `/=` cannot be applied to type `&mut f64`
  --> /tmp/benfords-law.rs:61:13
   |
61 |             x /= 10.0;
   |             -^^^^^^^^
   |             |
   |             cannot use `/=` on type `&mut f64`
   |
help: `/=` can be used on `f64` if you dereference the left-hand side
   |
61 |             *x /= 10.0;
   |             +

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:63:19
   |
63 |         while x > 0.0 && x < 1.0 {
   |                   ^^^ expected `&mut f64`, found floating-point number
   |
help: consider dereferencing the borrow
   |
63 |         while *x > 0.0 && x < 1.0 {
   |               +

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:63:30
   |
63 |         while x > 0.0 && x < 1.0 {
   |                              ^^^ expected `&mut f64`, found floating-point number
   |
help: consider dereferencing the borrow
   |
63 |         while x > 0.0 && *x < 1.0 {
   |                          +

error[E0368]: binary assignment operation `*=` cannot be applied to type `&mut f64`
  --> /tmp/benfords-law.rs:64:13
   |
64 |             x *= 10.0;
   |             -^^^^^^^^
   |             |
   |             cannot use `*=` on type `&mut f64`
   |
help: `*=` can be used on `f64` if you dereference the left-hand side
   |
64 |             *x *= 10.0;
   |             +

error[E0599]: no method named `parse` found for mutable reference `&mut f64` in the current scope
  --> /tmp/benfords-law.rs:66:18
   |
66 |         return x.parse::<i32>().unwrap();
   |                  ^^^^^ method not found in `&mut f64`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:73:28
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                            ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot subtract `usize` from `i32`
  --> /tmp/benfords-law.rs:73:26
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                          ^ no implementation for `i32 - usize`
   |
   = help: the trait `Sub<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Sub<Rhs>`:
             `&i32` implements `Sub<i32>`
             `&i32` implements `Sub`
             `i32` implements `Sub<&i32>`
             `i32` implements `Sub`

error[E0277]: the type `[{integer}]` cannot be indexed by `i32`
  --> /tmp/benfords-law.rs:73:24
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                        ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
   |
   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`
           but it is implemented for `usize`
   = help: for that trait implementation, expected `usize`, found `i32`
   = note: required for `Vec<{integer}>` to implement `Index<i32>`

error[E0308]: mismatched types
  --> /tmp/benfords-law.rs:73:53
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                                                     ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot subtract `usize` from `i32`
  --> /tmp/benfords-law.rs:73:51
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                                                   ^ no implementation for `i32 - usize`
   |
   = help: the trait `Sub<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Sub<Rhs>`:
             `&i32` implements `Sub<i32>`
             `&i32` implements `Sub`
             `i32` implements `Sub<&i32>`
             `i32` implements `Sub`

error[E0277]: the type `[{integer}]` cannot be indexed by `i32`
  --> /tmp/benfords-law.rs:73:49
   |
73 |                 counts[d - 1 as usize] = counts[d - 1 as usize] + 1;
   |                                                 ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
   |
   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`
           but it is implemented for `usize`
   = help: for that trait implementation, expected `usize`, found `i32`
   = note: required for `Vec<{integer}>` to implement `Index<i32>`

error[E0689]: can't call method `parse` on ambiguous numeric type `{integer}`
  --> /tmp/benfords-law.rs:82:43
   |
82 |             let obs = (counts[i as usize].parse::<f64>().unwrap()) / (total.parse::<f64>().unwrap());
   |                                           ^^^^^

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/benfords-law.rs:82:77
   |
82 |             let obs = (counts[i as usize].parse::<f64>().unwrap()) / (total.parse::<f64>().unwrap());
   |                                                                             ^^^^^ method not found in `i32`

error[E0277]: cannot add `String` to `{integer}`
  --> /tmp/benfords-law.rs:83:116
   |
83 | ...{}", format!("{}{}", format!("{}{}", "  ", i + 1.to_string()), "  "), padFloat3(obs, 9)), "  "), padFloat3(preds[i as usize], 8));
   |                                                 ^ no implementation for `{integer} + String`
   |
   = help: the trait `Add<String>` is not implemented for `{integer}`
   = help: the following other types implement trait `Add<Rhs>`:
             `&f128` implements `Add<f128>`
             `&f128` implements `Add`
             `&f16` implements `Add<f16>`
             `&f16` implements `Add`
             `&f32` implements `Add<f32>`
             `&f32` implements `Add`
             `&f64` implements `Add<f64>`
             `&f64` implements `Add`
           and 56 others

warning: variable does not need to be mutable
  --> /tmp/benfords-law.rs:49:17
   |
49 |             let mut t = b;
   |                 ----^
   |                 |
   |                 help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

error: aborting due to 29 previous errors; 1 warning emitted

Some errors have detailed explanations: E0277, E0308, E0368, E0599, E0600, E0689.
For more information about an error, try `rustc --explain E0277`.
