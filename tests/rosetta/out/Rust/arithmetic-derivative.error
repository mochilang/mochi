rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/arithmetic-derivative.rs:62:30
   |
62 |         while s.len() as i32 < 4 {
   |                              ^ --- interpreted as generic arguments
   |                              |
   |                              not interpreted as comparison
   |
help: try comparing the cast value
   |
62 |         while (s.len() as i32) < 4 {
   |               +              +

error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/arithmetic-derivative.rs:93:33
   |
93 |             if exp.len() as i32 < 2 {
   |                                 ^ --- interpreted as generic arguments
   |                                 |
   |                                 not interpreted as comparison
   |
help: try comparing the cast value
   |
93 |             if (exp.len() as i32) < 2 {
   |                +                +

error[E0599]: no method named `parse` found for type `f64` in the current scope
 --> /tmp/arithmetic-derivative.rs:8:43
  |
8 |             x = ((x as f64) / (2 as f64)).parse::<i32>().unwrap();
  |                                           ^^^^^ method not found in `f64`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/arithmetic-derivative.rs:14:47
   |
14 |                 x = ((x as f64) / (p as f64)).parse::<i32>().unwrap();
   |                                               ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/arithmetic-derivative.rs:30:16
   |
23 |     fn repeat(ch: &'static str, n: i32) -> &'static str {
   |                                            ------------ expected `&'static str` because of return type
...
30 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
30 |         return &s;
   |                +

error[E0610]: `{float}` is a primitive type and therefore doesn't have fields
  --> /tmp/arithmetic-derivative.rs:40:22
   |
40 |         if n < 1e+19.0 {
   |                      ^

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/arithmetic-derivative.rs:41:40
   |
41 |             factors = primeFactors((n).parse::<i32>().unwrap());
   |                                        ^^^^^ method not found in `f64`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/arithmetic-derivative.rs:43:33
   |
43 |             let g = (n / 100.0).parse::<i32>().unwrap();
   |                                 ^^^^^ method not found in `f64`

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/arithmetic-derivative.rs:55:46
   |
55 |             return (factors[0] + factors[1]).parse::<f64>().unwrap();
   |                                              ^^^^^ method not found in `i32`

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/arithmetic-derivative.rs:57:33
   |
57 |         let d = n / (factors[0].parse::<f64>().unwrap());
   |                                 ^^^^^ method not found in `i32`

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/arithmetic-derivative.rs:58:35
   |
58 |         return D(d) * (factors[0].parse::<f64>().unwrap()) + d;
   |                                   ^^^^^ method not found in `i32`

error[E0308]: mismatched types
  --> /tmp/arithmetic-derivative.rs:65:16
   |
60 |     fn pad(n: i32) -> &'static str {
   |                       ------------ expected `&'static str` because of return type
...
65 |         return s;
   |                ^ expected `&str`, found `String`
   |
help: consider borrowing here
   |
65 |         return &s;
   |                +

error[E0689]: can't call method `parse` on ambiguous numeric type `{integer}`
  --> /tmp/arithmetic-derivative.rs:71:64
   |
71 |             vals = { let mut tmp = vals.clone(); tmp.push((D(n.parse::<f64>().unwrap())).parse::<i32>().unwrap()); tmp };
   |                                                                ^^^^^
   |
help: you must specify a type for this binding, like `i32`
   |
69 |         let mut n: i32 = -99;
   |                  +++++

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/arithmetic-derivative.rs:71:90
   |
71 |             vals = { let mut tmp = vals.clone(); tmp.push((D(n.parse::<f64>().unwrap())).parse::<i32>().unwrap()); tmp };
   |                                                                                          ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/arithmetic-derivative.rs:79:38
   |
79 |                 line += pad(vals[i + j as usize]);
   |                                      ^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/arithmetic-derivative.rs:79:36
   |
79 |                 line += pad(vals[i + j as usize]);
   |                                    ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0277]: the type `[i32]` cannot be indexed by `i32`
  --> /tmp/arithmetic-derivative.rs:79:34
   |
79 |                 line += pad(vals[i + j as usize]);
   |                                  ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
   |
   = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`
           but it is implemented for `usize`
   = help: for that trait implementation, expected `usize`, found `i32`
   = note: required for `Vec<i32>` to implement `Index<i32>`

error: aborting due to 17 previous errors

Some errors have detailed explanations: E0277, E0308, E0599, E0610, E0689.
For more information about an error, try `rustc --explain E0277`.
