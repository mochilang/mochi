// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:57Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn join(xs: Vec<&'static str>, sep: &'static str) -> &'static str {
        let mut res = "";
        let mut i = 0;
        while i < xs.len() as i32 {
            if i > 0 {
                res += sep;
            }
            res += xs[i as usize];
            i += 1;
        }
        return res;
    }
    fn parseIntStr(str: &'static str) -> i32 {
        let mut i = 0;
        let mut neg = false;
        if str.len() as i32 > 0 && &str[0..1] == "-" {
            neg = true;
            i = 1;
        }
        let mut n = 0;
        let digits = { let mut m = std::collections::BTreeMap::new(); m.insert("0", 0); m.insert("1", 1); m.insert("2", 2); m.insert("3", 3); m.insert("4", 4); m.insert("5", 5); m.insert("6", 6); m.insert("7", 7); m.insert("8", 8); m.insert("9", 9); m };
        while i < str.len() as i32 {
            n = n * 10 + digits[&&str[i as usize..i + 1 as usize]];
            i += 1;
        }
        if neg {
            n = -n;
        }
        return n;
    }
    let mut rows: Vec<Vec<&'static str>> = vec![vec!["A", "B", "C"], vec!["1", "2", "3"], vec!["4", "5", "6"], vec!["7", "8", "9"]];
    rows[0] = append(rows[0], "SUM");
    let mut i = 1;
    while i < rows.len() as i32 {
        let mut sum = 0;
        for s in rows[i as usize] {
            sum += parseIntStr(s);
        }
        rows[i as usize] = append(rows[i as usize], sum.to_string());
        i += 1;
    }
    for r in rows {
        println!("{}", join(r, ","));
    }
}
