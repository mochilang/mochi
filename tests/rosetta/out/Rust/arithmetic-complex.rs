// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#[derive(Default, Debug, Clone, PartialEq)]
struct Complex {
        re: f64,
        im: f64,
}

fn main() {
    fn add(a: Complex, b: Complex) -> Complex {
        return Complex { re: a.re + b.re, im: a.im + b.im };
    }
    fn mul(a: Complex, b: Complex) -> Complex {
        return Complex { re: a.re * b.re - a.im * b.im, im: a.re * b.im + a.im * b.re };
    }
    fn neg(a: Complex) -> Complex {
        return Complex { re: -a.re, im: -a.im };
    }
    fn inv(a: Complex) -> Complex {
        let denom = a.re * a.re + a.im * a.im;
        return Complex { re: a.re / denom, im: -a.im / denom };
    }
    fn conj(a: Complex) -> Complex {
        return Complex { re: a.re, im: -a.im };
    }
    fn cstr(a: Complex) -> &'static str {
        let mut s = format!("{}{}", "(", a.re.to_string());
        if a.im >= 0 as f64 {
            s = format!("{}{}", format!("{}{}", format!("{}{}", s, "+"), a.im.to_string()), "i)");
        } else {
            s = format!("{}{}", format!("{}{}", s, a.im.to_string()), "i)");
        }
        return s;
    }
    let a = Complex { re: 1.0, im: 1.0 };
    let b = Complex { re: 3.14159, im: 1.25 };
    println!("{}", vec![format!("{}", format!("{}{}", "a:       ", cstr(&a.clone())))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "b:       ", cstr(&b.clone())))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "a + b:   ", cstr(&add(&a.clone(), &b.clone()))))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "a * b:   ", cstr(&mul(&a.clone(), &b.clone()))))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "-a:      ", cstr(&neg(&a.clone()))))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "1 / a:   ", cstr(&inv(&a.clone()))))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", format!("{}{}", "aÌ…:       ", cstr(&conj(&a.clone()))))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
