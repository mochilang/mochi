// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:40Z
fn main() {
    fn intSqrt(x: i32) -> i32 {
        if x < 2 {
            return x;
        }
        let mut left = 1;
        let mut right = (x as f64) / (2 as f64);
        let mut ans = 0;
        while (left as f64) <= right {
            let mid = ((left as f64) as f64) + (right - left as f64) / 2 as f64 as f64;
            let sq = mid * mid;
            if sq == x as f64 {
                return mid;
            }
            if sq < x as f64 {
                left = mid + 1 as f64 as f64 as f64 as f64 as f64;
                ans = mid;
            } else {
                right = mid - 1 as f64 as f64;
            }
        }
        return ans;
    }
    fn sumRecip(n: i32) -> i32 {
        let mut s = 1;
        let limit = intSqrt(n);
        let mut f = 2;
        while f <= limit {
            if n % f == 0 {
                s = (s + n as f64) / (f as f64);
                let f2 = (n as f64) / (f as f64);
                if f2 != f as f64 {
                    s += f;
                }
            }
            f += 1;
        }
        return s;
    }
    fn main() -> () {
        let nums = vec![6, 28, 120, 496, 672, 8128, 30240, 32760, 523776];
        for n in nums {
            let s = sumRecip(n);
            if s % n == 0 {
                let val = (s as f64) / (n as f64);
                let mut perfect = "";
                if val == 1 as f64 {
                    perfect = "perfect!";
                }
                println!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", "Sum of recipr. factors of ", n.to_string()), " = "), val.to_string()), " exactly "), perfect));
            }
        }
    }
    main();
}
