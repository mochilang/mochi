// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z
fn _now() -> i64 {
    use std::time::{SystemTime, UNIX_EPOCH};
    SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as i64
}

fn main() {
    let parseIntStr = move |str: String| -> i32 {
        let mut i = 0;
        let mut neg = false;
        if (str.len() as i32) > 0 && &str[0..1] == String::from("-") {
            neg = true;
            i = 1;
        }
        let mut n = 0;
        let digits = { let mut m = std::collections::HashMap::new(); m.insert(String::from("0"), 0); m.insert(String::from("1"), 1); m.insert(String::from("2"), 2); m.insert(String::from("3"), 3); m.insert(String::from("4"), 4); m.insert(String::from("5"), 5); m.insert(String::from("6"), 6); m.insert(String::from("7"), 7); m.insert(String::from("8"), 8); m.insert(String::from("9"), 9); m };
        while i < (str.len() as i32) {
            n = n * 10 + *digits.get(&&str[(i) as usize..(i + 1) as usize]).unwrap();
            i += 1;
        }
        if neg {
            n = -n;
        }
        return n;
    };
    let main = move || -> () {
        let mut total = 0;
        let mut computer = _now() % 2 == 0;
        println!("Enter q to quit at any time\n");
        if computer {
            println!("The computer will choose first");
        } else {
            println!("You will choose first");
        }
        println!("\n\nRunning total is now 0\n\n");
        let mut round = 1;
        let mut done = false;
        while !done {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", String::from("ROUND "), round.to_string()), String::from(":

")))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            let mut i = 0;
            while i < 2 && (!done) {
                if computer {
                    let mut choice = 0;
                    if total < 18 {
                        choice = _now() % 3 + 1;
                    } else {
                        choice = 21 - total;
                    }
                    total += choice;
                    println!("{}", vec![format!("{}", format!("{}{}", String::from("The computer chooses "), choice.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                    println!("{}", vec![format!("{}", format!("{}{}", String::from("Running total is now "), total.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                    if total == 21 {
                        println!("\nSo, commiserations, the computer has won!");
                        done = true;
                    }
                } else {
                    while true {
                        println!("Your choice 1 to 3 : ");
                        let line = input();
                        if line == String::from("q") || line == String::from("Q") {
                            println!("OK, quitting the game");
                            done = true;
                            break;
                        }
                        let mut num = parseIntStr(line);
                        if num < 1 || num > 3 {
                            if total + num > 21 {
                                println!("Too big, try again");
                            } else {
                                println!("Out of range, try again");
                            }
                            continue;
                        }
                        if total + num > 21 {
                            println!("Too big, try again");
                            continue;
                        }
                        total += num;
                        println!("{}", vec![format!("{}", format!("{}{}", String::from("Running total is now "), total.to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
                        break;
                    }
                    if total == 21 {
                        println!("\nSo, congratulations, you've won!");
                        done = true;
                    }
                }
                println!("\n");
                computer = !computer;
                i += 1;
            }
            round += 1;
        }
    };
    main();
}
