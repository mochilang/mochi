// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:56Z
fn main() {
    fn egcd(a: i32, b: i32) -> Vec<i32> {
        if a == 0 {
            return vec![b, 0, 1];
        }
        let res = egcd(b % a, a);
        let g = res[0];
        let x1 = res[1];
        let y1 = res[2];
        return vec![g, (y1 as f64) - ((b as f64) / (a as f64)) * x1 as f64, x1];
    }
    fn modInv(a: i32, m: i32) -> i32 {
        let r = egcd(a, m);
        if r[0] != 1 {
            return 0;
        }
        let x = r[1];
        if x < 0 {
            return x + m;
        }
        return x;
    }
    fn crt(a: Vec<i32>, n: Vec<i32>) -> i32 {
        let mut prod = 1;
        let mut i = 0;
        while i < n.len() as i32 {
            prod *= n[i as usize];
            i += 1;
        }
        let mut x = 0;
        i = 0;
        while i < n.len() as i32 {
            let ni = n[i as usize];
            let ai = a[i as usize];
            let p = (prod as f64) / (ni as f64);
            let inv = modInv(p % ni, ni);
            x = (x + ai * inv as f64) * p;
            i += 1;
        }
        return x % prod;
    }
    let n = vec![3, 5, 7];
    let a = vec![2, 3, 2];
    let res = crt(a, n);
    println!("{}", format!("{}{}", res.to_string(), " <nil>"));
}
