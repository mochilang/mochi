// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:52Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    fn cart2(a: Vec<i32>, b: Vec<i32>) -> Vec<Vec<i32>> {
        let mut p: Vec<Vec<i32>> = vec![];
        for x in a {
            for y in b {
                p = append(p, vec![x, y]);
            }
        }
        return p;
    }
    fn llStr(lst: Vec<Vec<i32>>) -> &'static str {
        let mut s = "[";
        let mut i = 0;
        while i < lst.len() as i32 {
            let mut row = lst[i as usize];
            s += "[";
            let mut j = 0;
            while j < row.len() as i32 {
                s += row[j as usize].to_string();
                if j < row.len() as i32 - 1 {
                    s += " ";
                }
                j += 1;
            }
            s += "]";
            if i < lst.len() as i32 - 1 {
                s += " ";
            }
            i += 1;
        }
        s += "]";
        return s;
    }
    fn main() -> () {
        println!("{}", llStr(cart2(vec![1, 2], vec![3, 4])));
        println!("{}", llStr(cart2(vec![3, 4], vec![1, 2])));
        println!("{}", llStr(cart2(vec![1, 2], vec![])));
        println!("{}", llStr(cart2(vec![], vec![1, 2])));
    }
    main();
}
