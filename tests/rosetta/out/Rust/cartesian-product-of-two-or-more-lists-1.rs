// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn cart2(a: Vec<i32>, b: Vec<i32>) -> Vec<Vec<i32>> {
        let mut p: Vec<Vec<i32>> = vec![];
        for x in a {
            for y in b {
                p = { let mut tmp = p.clone(); tmp.push(vec![x, y]); tmp };
            }
        }
        return p;
    }
    fn llStr(lst: Vec<Vec<i32>>) -> &'static str {
        let mut s = String::from("[");
        let mut i = 0;
        while i < lst.len() as i32 {
            let mut row = lst[i as usize];
            s += "[";
            let mut j = 0;
            while j < row.len() as i32 {
                s += row[j as usize].to_string();
                if j < row.len() as i32 - 1 {
                    s += " ";
                }
                j += 1;
            }
            s += "]";
            if i < lst.len() as i32 - 1 {
                s += " ";
            }
            i += 1;
        }
        s += "]";
        return s;
    }
    fn main() -> () {
        println!("{}", vec![format!("{}", llStr(cart2(vec![1, 2], vec![3, 4])))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", llStr(cart2(vec![3, 4], vec![1, 2])))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", llStr(cart2(vec![1, 2], vec![])))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        println!("{}", vec![format!("{}", llStr(cart2(vec![], vec![1, 2])))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    main();
}
