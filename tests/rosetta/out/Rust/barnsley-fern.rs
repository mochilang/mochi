// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:45Z
fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn main() {
    let xMin = -2.182;
    let xMax = 2.6558;
    let yMin = 0.0;
    let yMax = 9.9983;
    let width = 60;
    let nIter = 10000;
    let dx = xMax - xMin;
    let dy = yMax - yMin;
    let height = ((width as f64) * dy / dx).parse::<i32>().unwrap();
    let mut grid: Vec<Vec<&'static str>> = vec![];
    let mut row = 0;
    while row < height {
        let mut line: Vec<&'static str> = vec![];
        let mut col = 0;
        while col < width {
            line = append(line, " ");
            col += 1;
        }
        grid = append(grid, line);
        row += 1;
    }
    let mut seed = 1;
    fn randInt(s: i32, n: i32) -> Vec<i32> {
        let next = (s * 1664525 + 1013904223) % 2147483647;
        return vec![next, next % n];
    }
    let mut x = 0.0;
    let mut y = 0.0;
    let mut ix = ((width.parse::<f64>().unwrap()) * (x - xMin) / dx).parse::<i32>().unwrap();
    let mut iy = ((height.parse::<f64>().unwrap()) * (yMax - y) / dy).parse::<i32>().unwrap();
    if ix >= 0 && ix < width && iy >= 0 && iy < height {
        grid[iy as usize][ix as usize] = "*";
    }
    let mut i = 0;
    while i < nIter {
        let mut res = randInt(seed, 100);
        seed = res[0];
        let r = res[1];
        if r < 85 {
            let nx = 0.85 * x + 0.04 * y;
            let ny = -0.04 * x + 0.85 * y + 1.6;
            x = nx;
            y = ny;
        }
        ix = ((width.parse::<f64>().unwrap()) * (x - xMin) / dx).parse::<i32>().unwrap();
        iy = ((height.parse::<f64>().unwrap()) * (yMax - y) / dy).parse::<i32>().unwrap();
        if ix >= 0 && ix < width && iy >= 0 && iy < height {
            grid[iy as usize][ix as usize] = "*";
        }
        i += 1;
    }
    row = 0;
    while row < height {
        let mut line = "";
        let mut col = 0;
        while col < width {
            line += grid[row as usize][col as usize];
            col += 1;
        }
        println!("{}", line);
        row += 1;
    }
}
