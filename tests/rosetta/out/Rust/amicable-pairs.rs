// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn pfacSum(i: i32) -> i32 {
        let mut sum = 0;
        let mut p = 1;
        while (p <= i as f64) / (2 as f64) {
            if i % p == 0 {
                sum += p;
            }
            p += 1;
        }
        return sum;
    }
    fn pad(n: i32, width: i32) -> &'static str {
        let mut s = n.to_string();
        while s.len() as i32 < width {
            s = format!("{}{}", " ", s);
        }
        return s;
    }
    fn main() -> () {
        let mut sums: Vec<i32> = vec![];
        let mut i = 0;
        while i < 20000 {
            sums = { let mut tmp = sums.clone(); tmp.push(0); tmp };
            i += 1;
        }
        i = 1;
        while i < 20000 {
            sums[i as usize] = pfacSum(i);
            i += 1;
        }
        println!("The amicable pairs below 20,000 are:");
        let mut n = 2;
        while n < 19999 {
            let m = sums[n as usize];
            if m > n && m < 20000 && n == sums[m as usize] {
                println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", "  ", pad(n, 5)), " and "), pad(m, 5)))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
            }
            n += 1;
        }
    }
    main();
}
