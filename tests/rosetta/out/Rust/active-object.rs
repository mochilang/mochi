// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    let PI = 3.141592653589793;
    fn sinApprox(x: f64) -> f64 {
        let mut term = x;
        let mut sum = x;
        let mut n = 1;
        while n <= 12 {
            let denom = ((2 * n) * (2 * n + 1)).parse::<f64>().unwrap();
            term = -term * x * x / denom;
            sum += term;
            n += 1;
        }
        return sum;
    }
    let dt = 0.01;
    let mut s = 0.0;
    let mut t1 = 0.0;
    let mut k1 = sinApprox(0.0);
    let mut i = 1;
    while i <= 200 {
        let t2 = (i.parse::<f64>().unwrap()) * dt;
        let k2 = sinApprox(t2 * PI);
        s = s + (k1 + k2) * 0.5 * (t2 - t1);
        t1 = t2;
        k1 = k2;
        i += 1;
    }
    let mut i2 = 1;
    while i2 <= 50 {
        let t2 = 2.0 + (i2.parse::<f64>().unwrap()) * dt;
        let k2 = 0.0;
        s = s + (k1 + k2) * 0.5 * (t2 - t1);
        t1 = t2;
        k1 = k2;
        i2 += 1;
    }
    println!("{}", vec![format!("{}", s)].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
