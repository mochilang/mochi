// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn d2d(d: f64) -> f64 {
        return d % 360.0;
    }
    fn g2g(g: f64) -> f64 {
        return g % 400.0;
    }
    fn m2m(m: f64) -> f64 {
        return m % 6400.0;
    }
    fn r2r(r: f64) -> f64 {
        return r % (2.0 * 3.141592653589793);
    }
    fn d2g(d: f64) -> f64 {
        return d2d(d) * 400.0 / 360.0;
    }
    fn d2m(d: f64) -> f64 {
        return d2d(d) * 6400.0 / 360.0;
    }
    fn d2r(d: f64) -> f64 {
        return d2d(d) * 3.141592653589793 / 180.0;
    }
    fn g2d(g: f64) -> f64 {
        return g2g(g) * 360.0 / 400.0;
    }
    fn g2m(g: f64) -> f64 {
        return g2g(g) * 6400.0 / 400.0;
    }
    fn g2r(g: f64) -> f64 {
        return g2g(g) * 3.141592653589793 / 200.0;
    }
    fn m2d(m: f64) -> f64 {
        return m2m(m) * 360.0 / 6400.0;
    }
    fn m2g(m: f64) -> f64 {
        return m2m(m) * 400.0 / 6400.0;
    }
    fn m2r(m: f64) -> f64 {
        return m2m(m) * 3.141592653589793 / 3200.0;
    }
    fn r2d(r: f64) -> f64 {
        return r2r(r) * 180.0 / 3.141592653589793;
    }
    fn r2g(r: f64) -> f64 {
        return r2r(r) * 200.0 / 3.141592653589793;
    }
    fn r2m(r: f64) -> f64 {
        return r2r(r) * 3200.0 / 3.141592653589793;
    }
    fn main() -> () {
        let angles = vec![-2.0, -1.0, 0.0, 1.0, 2.0, 6.2831853, 16.0, 57.2957795, 359.0, 399.0, 6399.0, 1e+06.0];
        println!("degrees normalized_degs gradians mils radians");
        for a in angles {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), d2d(a).to_string()), " "), d2g(a).to_string()), " "), d2m(a).to_string()), " "), d2r(a).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
        println!("\ngradians normalized_grds degrees mils radians");
        for a in angles {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), g2g(a).to_string()), " "), g2d(a).to_string()), " "), g2m(a).to_string()), " "), g2r(a).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
        println!("\nmils normalized_mils degrees gradians radians");
        for a in angles {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), m2m(a).to_string()), " "), m2d(a).to_string()), " "), m2g(a).to_string()), " "), m2r(a).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
        println!("\nradians normalized_rads degrees gradians mils");
        for a in angles {
            println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", a.to_string(), " "), r2r(a).to_string()), " "), r2d(a).to_string()), " "), r2g(a).to_string()), " "), r2m(a).to_string()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
        }
    }
    main();
}
