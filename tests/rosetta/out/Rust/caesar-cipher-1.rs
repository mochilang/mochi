// Generated by Mochi compiler v0.10.26 on 2025-07-16T11:36:50Z
fn main() {
    fn indexOf(s: &'static str, ch: &'static str) -> i32 {
        let mut i = 0;
        while i < s.len() as i32 {
            if &s[i as usize..i + 1 as usize] == ch {
                return i;
            }
            i += 1;
        }
        return -1;
    }
    fn ord(ch: &'static str) -> i32 {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let lower = "abcdefghijklmnopqrstuvwxyz";
        let mut idx = indexOf(upper, ch);
        if idx >= 0 {
            return 65 + idx;
        }
        idx = indexOf(lower, ch);
        if idx >= 0 {
            return 97 + idx;
        }
        return 0;
    }
    fn chr(n: i32) -> &'static str {
        let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        let lower = "abcdefghijklmnopqrstuvwxyz";
        if n >= 65 && n < 91 {
            return &upper[n - 65 as usize..n - 64 as usize];
        }
        if n >= 97 && n < 123 {
            return &lower[n - 97 as usize..n - 96 as usize];
        }
        return "?";
    }
    fn shiftRune(r: &'static str, k: i32) -> &'static str {
        if r >= "a" && r <= "z" {
            return chr(((ord(r) - 97 + k) % 26) + 97);
        }
        if r >= "A" && r <= "Z" {
            return chr(((ord(r) - 65 + k) % 26) + 65);
        }
        return r;
    }
    fn encipher(s: &'static str, k: i32) -> &'static str {
        let mut out = "";
        let mut i = 0;
        while i < s.len() as i32 {
            out += shiftRune(&s[i as usize..i + 1 as usize], k);
            i += 1;
        }
        return out;
    }
    fn decipher(s: &'static str, k: i32) -> &'static str {
        return encipher(s, (26 - k % 26) % 26);
    }
    fn main() -> () {
        let pt = "The five boxing wizards jump quickly";
        println!("{}", format!("{}{}", "Plaintext: ", pt));
        for key in vec![0, 1, 7, 25, 26] {
            if key < 1 || key > 25 {
                println!("{}", format!("{}{}", format!("{}{}", "Key ", key.to_string()), " invalid"));
                continue;
            }
            let ct = encipher(pt, key);
            println!("{}", format!("{}{}", "Key ", key.to_string()));
            println!("{}", format!("{}{}", "  Enciphered: ", ct));
            println!("{}", format!("{}{}", "  Deciphered: ", decipher(ct, key)));
        }
    }
    main();
}
