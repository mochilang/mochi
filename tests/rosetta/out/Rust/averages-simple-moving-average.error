rustc: exit status 1
error: `<` is interpreted as a start of generic arguments for `i32`, not a comparison
  --> /tmp/averages-simple-moving-average.rs:34:32
   |
34 |         while out.len() as i32 < width {
   |                                ^ ------- interpreted as generic arguments
   |                                |
   |                                not interpreted as comparison
   |
help: try comparing the cast value
   |
34 |         while (out.len() as i32) < width {
   |               +                +

error[E0308]: mismatched types
 --> /tmp/averages-simple-moving-average.rs:6:35
  |
6 |             if &s[i as usize..i + 1 as usize] == ch {
  |                                   ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
 --> /tmp/averages-simple-moving-average.rs:6:31
  |
6 |             if &s[i as usize..i + 1 as usize] == ch {
  |                               ^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
 --> /tmp/averages-simple-moving-average.rs:6:33
  |
6 |             if &s[i as usize..i + 1 as usize] == ch {
  |                                 ^ no implementation for `i32 + usize`
  |
  = help: the trait `Add<usize>` is not implemented for `i32`
  = help: the following other types implement trait `Add<Rhs>`:
            `&i32` implements `Add<i32>`
            `&i32` implements `Add`
            `i32` implements `Add<&i32>`
            `i32` implements `Add`

error[E0599]: no method named `parse` found for type `f64` in the current scope
  --> /tmp/averages-simple-moving-average.rs:14:42
   |
14 |         let mut y = ((x * 1000.0) + 0.5).parse::<i32>().unwrap().parse::<f64>().unwrap() / 1000.0;
   |                                          ^^^^^ method not found in `f64`

error[E0308]: mismatched types
  --> /tmp/averages-simple-moving-average.rs:22:42
   |
22 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                          ^^^^^^^^^^ expected `i32`, found `usize`

error[E0308]: mismatched types
  --> /tmp/averages-simple-moving-average.rs:22:36
   |
22 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                    ^^^^^^^^^^^^^^^^ expected `usize`, found `i32`

error[E0277]: cannot add `usize` to `i32`
  --> /tmp/averages-simple-moving-average.rs:22:40
   |
22 |                 s = &s[0 as usize..dot + 4 as usize];
   |                                        ^ no implementation for `i32 + usize`
   |
   = help: the trait `Add<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Add<Rhs>`:
             `&i32` implements `Add<i32>`
             `&i32` implements `Add`
             `i32` implements `Add<&i32>`
             `i32` implements `Add`

error[E0308]: mismatched types
  --> /tmp/averages-simple-moving-average.rs:35:19
   |
35 |             out = format!("{}{}", " ", out);
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> /tmp/averages-simple-moving-average.rs:46:31
   |
46 |                 sum -= xs[i - period as usize];
   |                               ^^^^^^^^^^^^^^^ expected `i32`, found `usize`

error[E0277]: cannot subtract `usize` from `i32`
  --> /tmp/averages-simple-moving-average.rs:46:29
   |
46 |                 sum -= xs[i - period as usize];
   |                             ^ no implementation for `i32 - usize`
   |
   = help: the trait `Sub<usize>` is not implemented for `i32`
   = help: the following other types implement trait `Sub<Rhs>`:
             `&i32` implements `Sub<i32>`
             `&i32` implements `Sub`
             `i32` implements `Sub<&i32>`
             `i32` implements `Sub`

error[E0277]: the type `[f64]` cannot be indexed by `i32`
  --> /tmp/averages-simple-moving-average.rs:46:27
   |
46 |                 sum -= xs[i - period as usize];
   |                           ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
   |
   = help: the trait `SliceIndex<[f64]>` is not implemented for `i32`
           but it is implemented for `usize`
   = help: for that trait implementation, expected `usize`, found `i32`
   = note: required for `Vec<f64>` to implement `Index<i32>`

error[E0599]: no method named `parse` found for type `i32` in the current scope
  --> /tmp/averages-simple-moving-average.rs:52:70
   |
52 |             res = { let mut tmp = res.clone(); tmp.push(sum / (denom.parse::<f64>().unwrap())); tmp };
   |                                                                      ^^^^^ method not found in `i32`

warning: variable does not need to be mutable
  --> /tmp/averages-simple-moving-average.rs:58:13
   |
58 |         let mut xs = vec![1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
   |             ----^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> /tmp/averages-simple-moving-average.rs:59:13
   |
59 |         let mut sma3 = smaSeries(xs, 3);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
  --> /tmp/averages-simple-moving-average.rs:60:13
   |
60 |         let mut sma5 = smaSeries(xs, 5);
   |             ----^^^^
   |             |
   |             help: remove this `mut`

error[E0382]: use of moved value: `xs`
  --> /tmp/averages-simple-moving-average.rs:60:34
   |
58 |         let mut xs = vec![1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
   |             ------ move occurs because `xs` has type `Vec<f64>`, which does not implement the `Copy` trait
59 |         let mut sma3 = smaSeries(xs, 3);
   |                                  -- value moved here
60 |         let mut sma5 = smaSeries(xs, 5);
   |                                  ^^ value used here after move
   |
note: consider changing this parameter type in function `smaSeries` to borrow instead if owning the value isn't necessary
  --> /tmp/averages-simple-moving-average.rs:39:22
   |
39 |     fn smaSeries(xs: Vec<f64>, period: i32) -> Vec<f64> {
   |        ---------     ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
59 |         let mut sma3 = smaSeries(xs.clone(), 3);
   |                                    ++++++++

error[E0382]: borrow of moved value: `xs`
  --> /tmp/averages-simple-moving-average.rs:63:19
   |
58 |         let mut xs = vec![1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 4.0, 3.0, 2.0, 1.0];
   |             ------ move occurs because `xs` has type `Vec<f64>`, which does not implement the `Copy` trait
59 |         let mut sma3 = smaSeries(xs, 3);
60 |         let mut sma5 = smaSeries(xs, 5);
   |                                  -- value moved here
...
63 |         while i < xs.len() as i32 {
   |                   ^^ value borrowed here after move
   |
note: consider changing this parameter type in function `smaSeries` to borrow instead if owning the value isn't necessary
  --> /tmp/averages-simple-moving-average.rs:39:22
   |
39 |     fn smaSeries(xs: Vec<f64>, period: i32) -> Vec<f64> {
   |        ---------     ^^^^^^^^ this parameter takes ownership of the value
   |        |
   |        in this function
help: consider cloning the value if the performance cost is acceptable
   |
60 |         let mut sma5 = smaSeries(xs.clone(), 5);
   |                                    ++++++++

error: aborting due to 15 previous errors; 3 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0382, E0599.
For more information about an error, try `rustc --explain E0277`.
