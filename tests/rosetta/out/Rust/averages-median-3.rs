// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
fn main() {
    fn qsel(a: Vec<f64>, k: &mut i32) -> f64 {
        let mut arr = a;
        while arr.len() as i32 > 1 {
            let mut px = now() % arr.len() as i32;
            let mut pv = arr[px as usize];
            let last = arr.len() as i32 - 1;
            let tmp = arr[px as usize];
            arr[px as usize] = arr[last as usize];
            arr[last as usize] = tmp;
            px = 0;
            let mut i = 0;
            while i < last {
                let v = arr[i as usize];
                if v < pv {
                    let tmp2 = arr[px as usize];
                    arr[px as usize] = arr[i as usize];
                    arr[i as usize] = tmp2;
                    px += 1;
                }
                i += 1;
            }
            if px == k {
                return pv;
            }
            if k < px {
                arr = arr[0 as usize..px as usize].to_vec();
            } else {
                let tmp2 = arr[px as usize];
                arr[px as usize] = pv;
                arr[last as usize] = tmp2;
                arr = arr[(px + 1) as usize..arr.len() as usize].to_vec();
                k -= (px + 1);
            }
        }
        return arr[0];
    }
    fn median(list: Vec<f64>) -> f64 {
        let mut arr = list;
        let half = ((arr.len() as i32 as f64) / (2 as f64)).parse::<i32>().unwrap();
        let med = qsel(arr, &mut half);
        if arr.len() as i32 % 2 == 0 {
            return (med + qsel(arr, &mut half - 1)) / 2.0;
        }
        return med;
    }
    println!("{}", vec![format!("{}", median(vec![3.0, 1.0, 4.0, 1.0]).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", median(vec![3.0, 1.0, 4.0, 1.0, 5.0]).to_string())].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
