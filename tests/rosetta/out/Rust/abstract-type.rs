// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
#[derive(Debug, Clone)]
enum Beast {
        Dog { kind: &'static str, name: &'static str },
        Cat { kind: &'static str, name: &'static str },
}

fn main() {
    fn beastKind(b: &Beast) -> &'static str {
        return match b {Beast::Dog { kind: k, name: _ } => k, Beast::Cat { kind: k, name: _ } => k, };
    }
    fn beastName(b: &Beast) -> &'static str {
        return match b {Beast::Dog { kind: _, name: n } => n, Beast::Cat { kind: _, name: n } => n, };
    }
    fn beastCry(b: &Beast) -> &'static str {
        return match b {Beast::Dog { kind: _, name: _ } => "Woof", Beast::Cat { kind: _, name: _ } => "Meow", };
    }
    fn bprint(b: &Beast) -> () {
        println!("{}", vec![format!("{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", format!("{}{}", beastName(&b), ", who's a "), beastKind(&b)), ", cries: ""), beastCry(&b)), ""."))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    }
    fn main() -> () {
        let d: Beast = Beast::Dog { kind: "labrador", name: "Max" };
        let c: Beast = Beast::Cat { kind: "siamese", name: "Sammy" };
        bprint(&d);
        bprint(&c);
    }
    main();
}
