// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let isPrime (n) =
    if n < 2 then
        false
    if n % 2 = 0 then
        n = 2
    if n % 3 = 0 then
        n = 3
    let mutable d: int = 5
    while d * d <= n do
        if n % d = 0 then
            false
        d <- d + 2
        if n % d = 0 then
            false
        d <- d + 4
    true
let bigTrim (a) =
    let mutable n: obj = List.length a
    while n > 1 && a.[n - 1] = 0 do
        a <- a.[0..(n - 1-1)]
        n <- n - 1
    a
let bigFromInt (x) =
    if x = 0 then
        [0]
    let mutable digits: obj = [||]
    let mutable n: obj = x
    while n > 0 do
        digits <- digits @ [n % 10]
        n <- n / 10
    digits
let bigMulSmall (a) (m) =
    if m = 0 then
        [0]
    let mutable res: obj = [||]
    let mutable carry: int = 0
    let mutable i: int = 0
    while i < List.length a do
        let mutable prod: obj = a.[i] * m + carry
        res <- res @ [prod % 10]
        carry <- prod / 10
        i <- i + 1
    while carry > 0 do
        res <- res @ [carry % 10]
        carry <- carry / 10
    bigTrim res
let bigToString (a) =
    let mutable s: string = ""
    let mutable i: obj = List.length a - 1
    while i >= 0 do
        s <- s + string a.[i]
        i <- i - 1
    s
let pow2 (k) =
    let mutable r: int = 1
    let mutable i: int = 0
    while i < k do
        r <- r * 2
        i <- i + 1
    r
let ccFactors (n) (m) =
    let mutable p: int = 6 * m + 1
    if not isPrime p then
        []
    let mutable prod: obj = bigFromInt p
    p <- 12 * m + 1
    if not isPrime p then
        []
    prod <- bigMulSmall prod p
    let mutable i: int = 1
    while i <= n - 2 do
        p <- (pow2 i * 9 * m) + 1
        if not isPrime p then
            []
        prod <- bigMulSmall prod p
        i <- i + 1
    prod
let ccNumbers (start) (end) =
    let mutable n: obj = start
    try
        while n <= end do
            try
                let mutable m: int = 1
                if n > 4 then
                    m <- pow2 n - 4
                try
                    while true do
                        try
                            let num: obj = ccFactors n m
                            if List.length num > 0 then
                                printfn "%s" ("a(" + string n + ") = " + bigToString num)
                                raise Break
                            if n <= 4 then
                                m <- m + 1
                            else
                                m <- m + pow2 n - 4
                        with Continue -> ()
                with Break -> ()
                n <- n + 1
            with Continue -> ()
    with Break -> ()
printfn "%A" (ccNumbers 3 9)
