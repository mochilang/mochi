// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let primeFactors (n) =
    let mutable factors: obj = [||]
    let mutable x: obj = n
    while x % 2 = 0 do
        factors <- factors @ [2]
        x <- (x / 2)
    let mutable p: int = 3
    while p * p <= x do
        while x % p = 0 do
            factors <- factors @ [p]
            x <- (x / p)
        p <- p + 2
    if x > 1 then
        factors <- factors @ [x]
    factors
let repeat (ch) (n) =
    let mutable s: string = ""
    let mutable i: int = 0
    while i < n do
        s <- s + ch
        i <- i + 1
    s
let D (n) =
    if n < 0.0 then
        -D -n
    if n < 2.0 then
        0.0
    let mutable factors: obj = [||]
    if n < 10000000000000000000.0 then
        factors <- primeFactors (n)
    else
        let g: obj = (n / 100.0)
        factors <- primeFactors g
        factors <- factors @ [2]
        factors <- factors @ [2]
        factors <- factors @ [5]
        factors <- factors @ [5]
    let c: obj = List.length factors
    if c = 1 then
        1.0
    if c = 2 then
        (factors.[0] + factors.[1])
    let d: obj = n / (factors.[0])
    D d * (factors.[0]) + d
let pad (n) =
    let mutable s: obj = string n
    while List.length s < 4 do
        s <- " " + s
    s
let main () =
    let mutable vals: obj = [||]
    let mutable n: int = -99
    while n < 101 do
        vals <- vals @ [(D n)]
        n <- n + 1
    let mutable i: int = 0
    while i < List.length vals do
        let mutable line: string = ""
        let mutable j: int = 0
        while j < 10 do
            line <- line + pad vals.[i + j]
            if j < 9 then
                line <- line + " "
            j <- j + 1
        printfn "%s" line
        i <- i + 10
    let mutable pow: float = 1.0
    let mutable m: int = 1
    while m < 21 do
        pow <- pow * 10.0
        let mutable exp: obj = string m
        if List.length exp < 2 then
            exp <- exp + " "
        let mutable res: obj = string m + repeat "0" m - 1
        printfn "%s" ("D(10^" + exp + ") / 7 = " + res)
        m <- m + 1
printfn "%A" (main())
