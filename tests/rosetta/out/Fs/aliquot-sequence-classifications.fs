// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let THRESHOLD: int = 140737488355328
let indexOf (xs) (value) =
    let mutable i: int = 0
    while i < List.length xs do
        if xs.[i] = value then
            i
        i <- i + 1
    0 - 1
let contains (xs) (value) =
    indexOf xs value <> 0 - 1
let maxOf (a) (b) =
    if a > b then
        a
    else
        b
let intSqrt (n) =
    if n = 0 then
        0
    let mutable x: obj = n
    let mutable y: obj = (x + 1) / 2
    while y < x do
        x <- y
        y <- (x + n / x) / 2
    x
let sumProperDivisors (n) =
    if n < 2 then
        0
    let sqrt: obj = intSqrt n
    let mutable sum: int = 1
    let mutable i: int = 2
    while i <= sqrt do
        if n % i = 0 then
            sum <- sum + i + n / i
        i <- i + 1
    if sqrt * sqrt = n then
        sum <- sum - sqrt
    sum
let classifySequence (k) =
    let mutable last: obj = k
    let mutable seq: obj list = [|k|]
    while true do
        last <- sumProperDivisors last
        seq <- seq @ [last]
        let n: obj = List.length seq
        let mutable aliquot: string = ""
        if last = 0 then
            aliquot <- "Terminating"
        if aliquot <> "" then
            dict [("seq", seq); ("aliquot", aliquot)]
    dict [("seq", seq); ("aliquot", "")]
let padLeft (n) (w) =
    let mutable s: obj = string n
    while List.length s < w do
        s <- " " + s
    s
let padRight (s) (w) =
    let mutable r: obj = s
    while List.length r < w do
        r <- r + " "
    r
let joinWithCommas (seq) =
    let mutable s: string = "["
    let mutable i: int = 0
    while i < List.length seq do
        s <- s + string seq.[i]
        if i < List.length seq - 1 then
            s <- s + ", "
        i <- i + 1
    s <- s + "]"
    s
let main () =
    printfn "%s" "Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"
    let mutable k: int = 1
    while k <= 10 do
        let res: obj = classifySequence k
        printfn "%A" (padLeft k 2 + ": " + padRight res.["aliquot"] 15 + " " + joinWithCommas res.["seq"])
        k <- k + 1
    printfn "%s" ""
    let s: int list = [11; 12; 28; 496; 220; 1184; 12496; 1264460; 790; 909; 562; 1064; 1488]
    let mutable i: int = 0
    while i < List.length s do
        let val: int list = s.[i]
        let res: obj = classifySequence val
        printfn "%A" (padLeft val 7 + ": " + padRight res.["aliquot"] 15 + " " + joinWithCommas res.["seq"])
        i <- i + 1
    printfn "%s" ""
    let big: int = 15355717786080
    let r: obj = classifySequence big
    printfn "%A" (string big + ": " + padRight r.["aliquot"] 15 + " " + joinWithCommas r.["seq"])
printfn "%A" (main())
