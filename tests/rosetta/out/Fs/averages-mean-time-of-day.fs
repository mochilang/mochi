// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let PI: float = 3.141592653589793
let sinApprox (x) =
    let mutable term: obj = x
    let mutable sum: obj = x
    let mutable n: int = 1
    while n <= 8 do
        let denom: obj = ((2 * n) * (2 * n + 1))
        term <- -term * x * x / denom
        sum <- sum + term
        n <- n + 1
    sum
let cosApprox (x) =
    let mutable term: float = 1.0
    let mutable sum: float = 1.0
    let mutable n: int = 1
    while n <= 8 do
        let denom: obj = ((2 * n - 1) * (2 * n))
        term <- -term * x * x / denom
        sum <- sum + term
        n <- n + 1
    sum
let atanApprox (x) =
    if x > 1.0 then
        PI / 2.0 - x / (x * x + 0.28)
    if x < (-1.0) then
        -PI / 2.0 - x / (x * x + 0.28)
    x / (1.0 + 0.28 * x * x)
let atan2Approx (y) (x) =
    if x > 0.0 then
        atanApprox y / x
    if x < 0.0 then
        if y >= 0.0 then
            atanApprox y / x + PI
        atanApprox y / x - PI
    if y > 0.0 then
        PI / 2.0
    if y < 0.0 then
        -PI / 2.0
    0.0
let digit (ch) =
    let digits: string = "0123456789"
    let mutable i: int = 0
    while i < List.length digits do
        if digits.Substring(i, i + 1 - i) = ch then
            i
        i <- i + 1
    0
let parseTwo (s) (idx) =
    digit s.Substring(idx, idx + 1 - idx) * 10 + digit s.Substring(idx + 1, idx + 2 - idx + 1)
let parseSec (s) =
    let h: obj = parseTwo s 0
    let m: obj = parseTwo s 3
    let sec: obj = parseTwo s 6
    ((h * 60 + m) * 60 + sec)
let pad (n) =
    if n < 10 then
        "0" + string n
    string n
let meanTime (times) =
    let mutable ssum: float = 0.0
    let mutable csum: float = 0.0
    let mutable i: int = 0
    while i < List.length times do
        let sec: obj = parseSec times.[i]
        let ang: obj = sec * 2.0 * PI / 86400.0
        ssum <- ssum + sinApprox ang
        csum <- csum + cosApprox ang
        i <- i + 1
    let mutable theta: obj = atan2Approx ssum csum
    let mutable frac: obj = theta / (2.0 * PI)
    while frac < 0.0 do
        frac <- frac + 1.0
    let total: obj = frac * 86400.0
    let si: obj = total
    let h: obj = (si / 3600)
    let m: obj = ((si % 3600) / 60)
    let s: obj = (si % 60)
    pad h + ":" + pad m + ":" + pad s
let main () =
    let inputs: string list = ["23:00:17"; "23:40:20"; "00:12:45"; "00:17:19"]
    printfn "%A" (meanTime inputs)
printfn "%A" (main())
