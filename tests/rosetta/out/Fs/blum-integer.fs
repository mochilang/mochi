// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let isPrime (n) =
    if n < 2 then
        false
    if n % 2 = 0 then
        n = 2
    if n % 3 = 0 then
        n = 3
    let mutable d: int = 5
    while d * d <= n do
        if n % d = 0 then
            false
        d <- d + 2
        if n % d = 0 then
            false
        d <- d + 4
    true
let firstPrimeFactor (n) =
    if n = 1 then
        1
    if n % 3 = 0 then
        3
    if n % 5 = 0 then
        5
    let mutable inc: int list = [|4; 2; 4; 2; 4; 6; 2; 6|]
    let mutable k: int = 7
    let mutable i: int = 0
    while k * k <= n do
        if n % k = 0 then
            k
        k <- k + inc.[i]
        i <- (i + 1) % List.length inc
    n
let indexOf (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.Substring(i, i + 1 - i) = ch then
            i
        i <- i + 1
    -1
let padLeft (n) (width) =
    let mutable s: obj = string n
    while List.length s < width do
        s <- " " + s
    s
let formatFloat (f) (prec) =
    let s: obj = string f
    let idx: obj = indexOf s "."
    if idx < 0 then
        s
    let need: obj = idx + 1 + prec
    if List.length s > need then
        s.Substring(0, need - 0)
    s
let main () =
    let mutable blum: obj = [||]
    let mutable counts: int list = [|0; 0; 0; 0|]
    let mutable digits: int list = [|1; 3; 7; 9|]
    let mutable i: int = 1
    let mutable bc: int = 0
    try
        while true do
            try
                let p: obj = firstPrimeFactor i
                if p % 4 = 3 then
                    let q: obj = (i / p)
                    if q <> p && q % 4 = 3 && isPrime q then
                        if bc < 50 then
                            blum <- blum @ [i]
                        let d: int = i % 10
                        if d = 1 then
                            counts.[0] <- counts.[0] + 1
                        bc <- bc + 1
                        if bc = 50 then
                            printfn "%s" "First 50 Blum integers:"
                            let mutable idx: int = 0
                            while idx < 50 do
                                let mutable line: string = ""
                                let mutable j: int = 0
                                while j < 10 do
                                    line <- line + padLeft blum.[idx] 3 + " "
                                    idx <- idx + 1
                                    j <- j + 1
                                printfn "%A" (line.Substring(0, List.length line - 1 - 0))
                            raise Break
                if i % 5 = 3 then
                    i <- i + 4
                else
                    i <- i + 2
            with Continue -> ()
    with Break -> ()
printfn "%A" (main())
