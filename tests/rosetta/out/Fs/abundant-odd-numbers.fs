// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let divisors (n) =
    let mutable divs: int list = [|1|]
    let mutable divs2: obj = [||]
    let mutable i: int = 2
    while i * i <= n do
        if n % i = 0 then
            let j: obj = (n / i)
            divs <- divs @ [i]
            if i <> j then
                divs2 <- divs2 @ [j]
        i <- i + 1
    let mutable j: obj = List.length divs2 - 1
    while j >= 0 do
        divs <- divs @ [divs2.[j]]
        j <- j - 1
    divs
let sum (xs) =
    let mutable tot: int = 0
    for v in xs do
        tot <- tot + v
    tot
let sumStr (xs) =
    let mutable s: string = ""
    let mutable i: int = 0
    while i < List.length xs do
        s <- s + string xs.[i] + " + "
        i <- i + 1
    s.Substring(0, List.length s - 3 - 0)
let pad2 (n) =
    let s: obj = string n
    if List.length s < 2 then
        " " + s
    s
let pad5 (n) =
    let mutable s: obj = string n
    while List.length s < 5 do
        s <- " " + s
    s
let abundantOdd (searchFrom) (countFrom) (countTo) (printOne) =
    let mutable count: obj = countFrom
    let mutable n: obj = searchFrom
    try
        while count < countTo do
            try
                let divs: obj = divisors n
                let tot: obj = List.sum divs
                if tot > n then
                    count <- count + 1
                    if printOne && count < countTo then
                        n <- n + 2
                        raise Continue
                    let s: obj = sumStr divs
                    if not printOne then
                        printfn "%A" (pad2 count + ". " + pad5 n + " < " + s + " = " + string tot)
                    else
                        printfn "%A" (string n + " < " + s + " = " + string tot)
                n <- n + 2
            with Continue -> ()
    with Break -> ()
    n
let main () =
    let max: int = 25
    printfn "%s" "The first " + string max + " abundant odd numbers are:"
    let n: obj = abundantOdd 1 0 max false
    printfn "%s" "\nThe one thousandth abundant odd number is:"
    printfn "%A" (abundantOdd n max 1000 true)
    printfn "%s" "\nThe first abundant odd number above one billion is:"
    printfn "%A" (abundantOdd 1000000001 0 1 true)
printfn "%A" (main())
