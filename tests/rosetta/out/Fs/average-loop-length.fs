// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let absf (x) =
    if x < 0.0 then
        -x
    x
let floorf (x) =
    (x)
let indexOf (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.Substring(i, i + 1 - i) = ch then
            i
        i <- i + 1
    -1
let fmtF (x) =
    let mutable y: obj = floorf x * 10000.0 + 0.5 / 10000.0
    let mutable s: obj = string y
    let mutable dot: obj = indexOf s "."
    if dot = 0 - 1 then
        s <- s + ".0000"
    else
        let mutable decs: obj = List.length s - dot - 1
        if decs > 4 then
            s <- s.Substring(0, dot + 5 - 0)
        else
            while decs < 4 do
                s <- s + "0"
                decs <- decs + 1
    s
let padInt (n) (width) =
    let mutable s: obj = string n
    while List.length s < width do
        s <- " " + s
    s
let padFloat (x) (width) =
    let mutable s: obj = fmtF x
    while List.length s < width do
        s <- " " + s
    s
let avgLen (n) =
    let tests: int = 10000
    let mutable sum: int = 0
    let mutable seed: int = 1
    let mutable t: int = 0
    while t < tests do
        let mutable visited: obj = [||]
        let mutable i: int = 0
        while i < n do
            visited <- visited @ [false]
            i <- i + 1
        let mutable x: int = 0
        while not visited.[x] do
            visited.[x] <- true
            sum <- sum + 1
            seed <- (seed * 1664525 + 1013904223) % 2147483647
            x <- seed % n
        t <- t + 1
    (sum) / tests
let ana (n) =
    let mutable nn: obj = n
    let mutable term: float = 1.0
    let mutable sum: float = 1.0
    let mutable i: obj = nn - 1.0
    while i >= 1.0 do
        term <- term * (i / nn)
        sum <- sum + term
        i <- i - 1.0
    sum
let main () =
    let nmax: int = 20
    printfn "%s" " N    average    analytical    (error)"
    printfn "%s" "===  =========  ============  ========="
    let mutable n: int = 1
    while n <= nmax do
        let a: obj = avgLen n
        let b: obj = ana n
        let err: obj = absf a - b / b * 100.0
        let mutable line: obj = padInt n 3 + "  " + padFloat a 9 + "  " + padFloat b 12 + "  (" + padFloat err 6 + "%)"
        printfn "%A" line
        n <- n + 1
printfn "%A" (main())
