// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let indexOf (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.[i..(i + 1-1)] = ch then
            i
        i <- i + 1
    -1
let rotate (s) (n) =
    s.[n..] + s.[0..(n-1)]
let scrambleLeft (s) =
    s.[0..(1-1)] + s.[2..(14-1)] + s.[1..(2-1)] + s.[14..]
let scrambleRight (s) =
    s.[1..(3-1)] + s.[4..(15-1)] + s.[3..(4-1)] + s.[15..] + s.[0..(1-1)]
let chao (text) (encode) =
    let mutable left: string = "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
    let mutable right: string = "PTLNBQDEOYSFAVZKGJRIHWXUMC"
    let mutable out: string = ""
    let mutable i: int = 0
    while i < List.length text do
        let ch: obj = text.[i..(i + 1-1)]
        let mutable idx: int = 0
        if encode then
            idx <- indexOf right ch
            out <- out + left.Substring(idx, idx + 1 - idx)
        else
            idx <- indexOf left ch
            out <- out + right.Substring(idx, idx + 1 - idx)
        left <- rotate left idx
        right <- rotate right idx
        left <- scrambleLeft left
        right <- scrambleRight right
        i <- i + 1
    out
let main () =
    let plain: string = "WELLDONEISBETTERTHANWELLSAID"
    let cipher: obj = chao plain true
    printfn "%s" plain
    printfn "%A" cipher
    printfn "%A" (chao cipher false)
printfn "%A" (main())
