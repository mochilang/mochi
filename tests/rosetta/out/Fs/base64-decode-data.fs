// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let indexOf (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.[i] = ch then
            i
        i <- i + 1
    -1
let parseIntStr (str) =
    let mutable i: int = 0
    let mutable neg: bool = false
    if List.length str > 0 && str.[0] = "-" then
        neg <- true
        i <- 1
    let mutable n: int = 0
    let digits: System.Collections.Generic.IDictionary<string, int> = dict [("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]
    while i < List.length str do
        n <- n * 10 + digits.[str.[i]]
        i <- i + 1
    if neg then
        n <- -n
    n
let ord (ch) =
    let upper: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower: string = "abcdefghijklmnopqrstuvwxyz"
    let mutable idx: obj = indexOf upper ch
    if idx >= 0 then
        65 + idx
    idx <- indexOf lower ch
    if idx >= 0 then
        97 + idx
    if ch >= "0" && ch <= "9" then
        48 + parseIntStr ch
    if ch = "+" then
        43
    if ch = "/" then
        47
    if ch = " " then
        32
    if ch = "=" then
        61
    0
let chr (n) =
    let upper: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower: string = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91 then
        upper.Substring(n - 65, n - 64 - n - 65)
    if n >= 97 && n < 123 then
        lower.Substring(n - 97, n - 96 - n - 97)
    if n >= 48 && n < 58 then
        let digits: string = "0123456789"
        digits.Substring(n - 48, n - 47 - n - 48)
    if n = 43 then
        "+"
    if n = 47 then
        "/"
    if n = 32 then
        " "
    if n = 61 then
        "="
    "?"
let toBinary (n) (bits) =
    let mutable b: string = ""
    let mutable val: int = n
    let mutable i: int = 0
    while i < bits do
        b <- string val % 2 + b
        val <- (val / 2)
        i <- i + 1
    b
let binToInt (bits) =
    let mutable n: int = 0
    let mutable i: int = 0
    while i < List.length bits do
        n <- n * 2 + parseIntStr bits.[i..(i + 1-1)]
        i <- i + 1
    n
let base64Encode (text) =
    let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    let mutable bin: string = ""
    for ch in text do
        bin <- bin + toBinary ord ch 8
    while List.length bin % 6 <> 0 do
        bin <- bin + "0"
    let mutable out: string = ""
    let mutable i: int = 0
    while i < List.length bin do
        let chunk: string = bin.Substring(i, i + 6 - i)
        let val: obj = binToInt chunk
        out <- out + alphabet.Substring(val, val + 1 - val)
        i <- i + 6
    let pad: obj = (3 - (List.length text % 3)) % 3
    if pad = 1 then
        out <- out.Substring(0, List.length out - 1 - 0) + "="
    if pad = 2 then
        out <- out.Substring(0, List.length out - 2 - 0) + "=="
    out
let base64Decode (enc) =
    let alphabet: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    let mutable bin: string = ""
    let mutable i: int = 0
    try
        while i < List.length enc do
            try
                let ch: obj = enc.[i]
                if ch = "=" then
                    raise Break
                let idx: obj = indexOf alphabet ch
                bin <- bin + toBinary idx 6
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    let mutable out: string = ""
    i <- 0
    while i + 8 <= List.length bin do
        let chunk: string = bin.Substring(i, i + 8 - i)
        let val: obj = binToInt chunk
        out <- out + chr val
        i <- i + 8
    out
let msg: string = "Rosetta Code Base64 decode data task"
printfn "%s" ("Original : " + msg)
let enc: obj = base64Encode msg
printfn "%s" ("\nEncoded  : " + enc)
let dec: obj = base64Decode enc
printfn "%s" ("\nDecoded  : " + dec)
