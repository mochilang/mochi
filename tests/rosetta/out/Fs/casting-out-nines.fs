// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let parseIntBase (s) (base) =
    let digits: string = "0123456789abcdefghijklmnopqrstuvwxyz"
    let mutable n: int = 0
    let mutable i: int = 0
    try
        while i < List.length s do
            try
                let mutable j: int = 0
                let mutable v: int = 0
                try
                    while j < List.length digits do
                        try
                            if digits.Substring(j, j + 1 - j) = s.[i..(i + 1-1)] then
                                v <- j
                                raise Break
                            j <- j + 1
                        with Continue -> ()
                with Break -> ()
                n <- n * base + v
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    n
let intToBase (n) (base) =
    let digits: string = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n = 0 then
        "0"
    let mutable out: string = ""
    let mutable v: int = n
    while v > 0 do
        let d: int = v % base
        out <- digits.Substring(d, d + 1 - d) + out
        v <- v / base
    out
let subset (base) (begin) (end) =
    let mutable b: obj = parseIntBase begin base
    let mutable e: obj = parseIntBase end base
    let mutable out: obj = [||]
    let mutable k: obj = b
    while k <= e do
        let ks: obj = intToBase k base
        let mod: obj = base - 1
        let r1: obj = parseIntBase ks base % mod
        let r2: obj = (parseIntBase ks base * parseIntBase ks base) % mod
        if r1 = r2 then
            out <- out @ [ks]
        k <- k + 1
    out
let testCases: obj list = [dict [("base", 10); ("begin", "1"); ("end", "100"); ("kaprekar", ["1"; "9"; "45"; "55"; "99"])]; dict [("base", 17); ("begin", "10"); ("end", "gg"); ("kaprekar", ["3d"; "d4"; "gg"])]]
let mutable idx: int = 0
try
    while idx < List.length testCases do
        try
            let tc: obj list = testCases.[idx]
            printfn "%s" "\nTest case base = " + string tc.["base"] + ", begin = " + tc.["begin"] + ", end = " + tc.["end"] + ":"
            let s: obj = subset tc.["base"] tc.["begin"] tc.["end"]
            printfn "%s" ("Subset:  " + string s)
            printfn "%s" ("Kaprekar:" + string tc.["kaprekar"])
            let mutable sx: int = 0
            let mutable valid: bool = true
            let mutable i: int = 0
            try
                while i < List.length tc.["kaprekar"] do
                    try
                        let k: obj list = tc.["kaprekar"].[i]
                        let mutable found: bool = false
                        try
                            while sx < List.length s do
                                try
                                    if s.[sx] = k then
                                        found <- true
                                        sx <- sx + 1
                                        raise Break
                                    sx <- sx + 1
                                with Continue -> ()
                        with Break -> ()
                        if not found then
                            printfn "%s" "Fail:" + k + " not in subset"
                            valid <- false
                            raise Break
                        i <- i + 1
                    with Continue -> ()
            with Break -> ()
            if valid then
                printfn "%s" "Valid subset."
            idx <- idx + 1
        with Continue -> ()
with Break -> ()
