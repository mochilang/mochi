// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let split (s) (sep) =
    let mutable parts: obj = [||]
    let mutable cur: string = ""
    let mutable i: int = 0
    while i < List.length s do
        if List.length sep > 0 && i + List.length sep <= List.length s && s.Substring(i, i + List.length sep - i) = sep then
            parts <- parts @ [cur]
            cur <- ""
            i <- i + List.length sep
        else
            cur <- cur + s.[i..(i + 1-1)]
            i <- i + 1
    parts <- parts @ [cur]
    parts
let join (xs) (sep) =
    let mutable res: string = ""
    let mutable i: int = 0
    while i < List.length xs do
        if i > 0 then
            res <- res + sep
        res <- res + xs.[i]
        i <- i + 1
    res
let repeat (ch) (n) =
    let mutable out: string = ""
    let mutable i: int = 0
    while i < n do
        out <- out + ch
        i <- i + 1
    out
let parseIntStr (str) =
    let mutable i: int = 0
    let mutable neg: bool = false
    if List.length str > 0 && str.[0..(1-1)] = "-" then
        neg <- true
        i <- 1
    let mutable n: int = 0
    let digits: System.Collections.Generic.IDictionary<string, int> = dict [("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]
    while i < List.length str do
        n <- n * 10 + digits.[str.[i..(i + 1-1)]]
        i <- i + 1
    if neg then
        n <- -n
    n
let toBinary (n) (bits) =
    let mutable b: string = ""
    let mutable val: int = n
    let mutable i: int = 0
    while i < bits do
        b <- string val % 2 + b
        val <- (val / 2)
        i <- i + 1
    b
let binToInt (bits) =
    let mutable n: int = 0
    let mutable i: int = 0
    while i < List.length bits do
        n <- n * 2 + parseIntStr bits.[i..(i + 1-1)]
        i <- i + 1
    n
let padRight (s) (width) =
    let mutable out: obj = s
    while List.length out < width do
        out <- out + " "
    out
let canonicalize (cidr) =
    let parts: obj = split cidr "/"
    let dotted: obj = parts.[0]
    let size: obj = parseIntStr parts.[1]
    let mutable binParts: obj = [||]
    for p in split dotted "." do
        binParts <- binParts @ [toBinary parseIntStr p 8]
    let mutable binary: obj = join binParts ""
    binary <- binary.[0..(size-1)] + repeat "0" 32 - size
    let mutable canonParts: obj = [||]
    let mutable i: int = 0
    while i < List.length binary do
        canonParts <- canonParts @ [string binToInt binary.[i..(i + 8-1)]]
        i <- i + 8
    join canonParts "." + "/" + parts.[1]
let tests: string list = ["87.70.141.1/22"; "36.18.154.103/12"; "62.62.197.11/29"; "67.137.119.181/4"; "161.214.74.21/24"; "184.232.176.184/18"]
for t in tests do
    printfn "%A" (padRight t 18 + " -> " + canonicalize t)
