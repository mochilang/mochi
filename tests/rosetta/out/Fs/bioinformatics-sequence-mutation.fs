// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let randInt (s) (n) =
    let next: obj = (s * 1664525 + 1013904223) % 2147483647
    [next; next % n]
let padLeft (s) (w) =
    let mutable res: string = ""
    let mutable n: obj = w - List.length s
    while n > 0 do
        res <- res + " "
        n <- n - 1
    res + s
let makeSeq (s) (le) =
    let bases: string = "ACGT"
    let mutable out: string = ""
    let mutable i: int = 0
    while i < le do
        let mutable r: obj = randInt s 4
        s <- r.[0]
        let idx: obj = r.[1]
        out <- out + bases.Substring(idx, idx + 1 - idx)
        i <- i + 1
    [s; out]
let mutate (s) (dna) (w) =
    let bases: string = "ACGT"
    let le: obj = List.length dna
    let mutable r: obj = randInt s le
    s <- r.[0]
    let p: obj = r.[1]
    r <- randInt s 300
    s <- r.[0]
    let x: obj = r.[1]
    let mutable arr: obj = [||]
    let mutable i: int = 0
    while i < le do
        arr <- arr @ [dna.Substring(i, i + 1 - i)]
        i <- i + 1
    if x < w.[0] then
        r <- randInt s 4
        s <- r.[0]
        let idx: obj = r.[1]
        let b: obj = bases.Substring(idx, idx + 1 - idx)
        printfn "%s" "  Change @" + padLeft string p 3 + " '" + arr.[p] + "' to '" + b + "'"
        arr.[p] <- b
    let mutable out: string = ""
    i <- 0
    while i < List.length arr do
        out <- out + arr.[i]
        i <- i + 1
    [s; out]
let prettyPrint (dna) (rowLen) =
    printfn "%s" "SEQUENCE:"
    let le: obj = List.length dna
    let mutable i: int = 0
    while i < le do
        let mutable k: int = i + rowLen
        if k > le then
            k <- le
        printfn "%A" (padLeft string i 5 + ": " + dna.[i..(k-1)])
        i <- i + rowLen
    let mutable a: int = 0
    let mutable c: int = 0
    let mutable g: int = 0
    let mutable t: int = 0
    let mutable idx: int = 0
    while idx < le do
        let ch: obj = dna.Substring(idx, idx + 1 - idx)
        if ch = "A" then
            a <- a + 1
        else
            if ch = "C" then
                c <- c + 1
            else
                if ch = "G" then
                    g <- g + 1
                else
                    if ch = "T" then
                        t <- t + 1
        idx <- idx + 1
    printfn "%s" ""
    printfn "%s" "BASE COUNT:"
    printfn "%s" ("    A: " + padLeft string a 3)
    printfn "%s" ("    C: " + padLeft string c 3)
    printfn "%s" ("    G: " + padLeft string g 3)
    printfn "%s" ("    T: " + padLeft string t 3)
    printfn "%s" "    ------"
    printfn "%s" ("    Î£: " + string le)
    printfn "%s" "    ======"
let wstring (w) =
    "  Change: " + string w.[0] + "\n  Delete: " + string w.[1] + "\n  Insert: " + string w.[2] + "\n"
let main () =
    let mutable seed: int = 1
    let mutable res: obj = makeSeq seed 250
    seed <- res.[0]
    let mutable dna: obj = res.[1]
    printfn "%A" (prettyPrint dna 50)
    let muts: int = 10
    let w: int list = [100; 100; 100]
    printfn "%s" "\nWEIGHTS (ex 300):"
    printfn "%A" (wstring w)
    printfn "%s" "MUTATIONS (" + string muts + "):"
    let mutable i: int = 0
    while i < muts do
        res <- mutate seed dna w
        seed <- res.[0]
        dna <- res.[1]
        i <- i + 1
    printfn "%s" ""
    printfn "%A" (prettyPrint dna 50)
printfn "%A" (main())
