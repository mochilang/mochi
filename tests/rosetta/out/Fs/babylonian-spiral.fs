// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let push (h) (it) =
    h <- h @ [it]
    let mutable i: obj = List.length h - 1
    while i > 0 && h.[i - 1].["s"] > h.[i].["s"] do
        let tmp: obj = h.[i - 1]
        h.[i - 1] <- h.[i]
        h.[i] <- tmp
        i <- i - 1
    h
let step (h) (nv) (dir) =
    while List.length h = 0 || nv * nv <= h.[0].["s"] do
        h <- push h dict [("s", nv * nv); ("a", nv); ("b", 0)]
        nv <- nv + 1
    let s: obj = h.[0].["s"]
    let mutable v: obj = [||]
    while List.length h > 0 && h.[0].["s"] = s do
        let it: obj = h.[0]
        h <- h.[1..]
        v <- v @ [[it.["a"]; it.["b"]]]
        if it.["a"] > it.["b"] then
            h <- push h dict [("s", it.["a"] * it.["a"] + (it.["b"] + 1) * (it.["b"] + 1)); ("a", it.["a"]); ("b", it.["b"] + 1)]
    let mutable list: obj = [||]
    for p in v do
        list <- list @ [p]
    let mutable temp: obj = list
    for p in temp do
        if p.[0] <> p.[1] then
            list <- list @ [[p.[1]; p.[0]]]
    temp <- list
    for p in temp do
        if p.[1] <> 0 then
            list <- list @ [[p.[0]; -p.[1]]]
    temp <- list
    for p in temp do
        if p.[0] <> 0 then
            list <- list @ [[-p.[0]; p.[1]]]
    let mutable bestDot: int = -999999999
    let mutable best: obj = dir
    for p in list do
        let cross: obj = p.[0] * dir.[1] - p.[1] * dir.[0]
        if cross >= 0 then
            let dot: obj = p.[0] * dir.[0] + p.[1] * dir.[1]
            if dot > bestDot then
                bestDot <- dot
                best <- p
    dict [("d", best); ("heap", h); ("n", nv)]
let positions (n) =
    let mutable pos: obj = [||]
    let mutable x: int = 0
    let mutable y: int = 0
    let mutable dir: int list = [|0; 1|]
    let mutable heap: obj = [||]
    let mutable nv: int = 1
    let mutable i: int = 0
    while i < n do
        pos <- pos @ [[x; y]]
        let st: obj = step heap nv dir
        dir <- st.["d"]
        heap <- st.["heap"]
        nv <- st.["n"]
        x <- x + dir.[0]
        y <- y + dir.[1]
        i <- i + 1
    pos
let pad (s) (w) =
    let mutable r: obj = s
    while List.length r < w do
        r <- r + " "
    r
let main () =
    let pts: obj = positions 40
    printfn "%s" "The first 40 Babylonian spiral points are:"
    let mutable line: string = ""
    let mutable i: int = 0
    while i < List.length pts do
        let p: obj = pts.[i]
        let s: obj = pad "(" + string p.[0] + ", " + string p.[1] + ")" 10
        line <- line + s
        if (i + 1) % 10 = 0 then
            printfn "%s" line
            line <- ""
        i <- i + 1
printfn "%A" (main())
