// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let PI: float = 3.141592653589793
let conv2d (img) (k) =
    let h: obj = List.length img
    let w: obj = List.length img.[0]
    let n: obj = List.length k
    let half: obj = n / 2
    let mutable out: obj = [||]
    let mutable y: int = 0
    while y < h do
        let mutable row: obj = [||]
        let mutable x: int = 0
        while x < w do
            let mutable sum: float = 0.0
            let mutable j: int = 0
            while j < n do
                let mutable i: int = 0
                while i < n do
                    let mutable yy: int = y + j - half
                    if yy < 0 then
                        yy <- 0
                    if yy >= h then
                        yy <- h - 1
                    let mutable xx: int = x + i - half
                    if xx < 0 then
                        xx <- 0
                    if xx >= w then
                        xx <- w - 1
                    sum <- sum + img.[yy].[xx] * k.[j].[i]
                    i <- i + 1
                j <- j + 1
            row <- row @ [sum]
            x <- x + 1
        out <- out @ [row]
        y <- y + 1
    out
let gradient (img) =
    let hx: float list list = [[-1.0; 0.0; 1.0]; [-2.0; 0.0; 2.0]; [-1.0; 0.0; 1.0]]
    let hy: float list list = [[1.0; 2.0; 1.0]; [0.0; 0.0; 0.0]; [-1.0; -2.0; -1.0]]
    let mutable gx: obj = conv2d img hx
    let mutable gy: obj = conv2d img hy
    let mutable h: obj = List.length img
    let mutable w: obj = List.length img.[0]
    let mutable out: obj = [||]
    let mutable y: int = 0
    while y < h do
        let mutable row: obj = [||]
        let mutable x: int = 0
        while x < w do
            let g: obj = gx.[y].[x] * gx.[y].[x] + gy.[y].[x] * gy.[y].[x]
            row <- row @ [g]
            x <- x + 1
        out <- out @ [row]
        y <- y + 1
    out
let threshold (g) (t) =
    let mutable h: obj = List.length g
    let mutable w: obj = List.length g.[0]
    let mutable out: obj = [||]
    let mutable y: int = 0
    while y < h do
        let mutable row: obj = [||]
        let mutable x: int = 0
        while x < w do
            if g.[y].[x] >= t then
                row <- row @ [1]
            else
                row <- row @ [0]
            x <- x + 1
        out <- out @ [row]
        y <- y + 1
    out
let printMatrix (m) =
    let mutable y: int = 0
    while y < List.length m do
        let mutable line: string = ""
        let mutable x: int = 0
        while x < List.length m.[0] do
            line <- line + string m.[y].[x]
            if x < List.length m.[0] - 1 then
                line <- line + " "
            x <- x + 1
        printfn "%s" line
        y <- y + 1
let main () =
    let img: float list list = [[0.0; 0.0; 0.0; 0.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 255.0; 255.0; 255.0; 0.0]; [0.0; 0.0; 0.0; 0.0; 0.0]]
    let g: obj = gradient img
    let edges: obj = threshold g 1020.0 * 1020.0
    printfn "%A" (printMatrix edges)
printfn "%A" (main())
