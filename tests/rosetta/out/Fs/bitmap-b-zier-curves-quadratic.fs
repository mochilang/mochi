// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let b2Seg: int = 20
type Pixel = {
    mutable r: int
    mutable g: int
    mutable b: int
}
let pixelFromRgb (rgb) =
    let r: obj = ((rgb / 65536) % 256)
    let g: obj = ((rgb / 256) % 256)
    let b: obj = (rgb % 256)
    { r = r; g = g; b = b }
let newBitmap (cols) (rows) =
    let mutable d: obj = [||]
    let mutable y: int = 0
    while y < rows do
        let mutable row: obj = [||]
        let mutable x: int = 0
        while x < cols do
            row <- row @ [{ r = 0; g = 0; b = 0 }]
            x <- x + 1
        d <- d @ [row]
        y <- y + 1
    dict [("cols", cols); ("rows", rows); ("data", d)]
let setPx (b) (x) (y) (p) =
    let cols: obj = b.["cols"]
    let rows: obj = b.["rows"]
    if x >= 0 && x < cols && y >= 0 && y < rows then
        b.["data"].[y].[x] <- p
let fill (b) (p) =
    let cols: obj = b.["cols"]
    let rows: obj = b.["rows"]
    let mutable y: int = 0
    while y < rows do
        let mutable x: int = 0
        while x < cols do
            b.["data"].[y].[x] <- p
            x <- x + 1
        y <- y + 1
let fillRgb (b) (rgb) =
    printfn "%A" (fill b pixelFromRgb rgb)
let line (b) (x0) (y0) (x1) (y1) (p) =
    let mutable dx: obj = x1 - x0
    if dx < 0 then
        dx <- -dx
    let mutable dy: obj = y1 - y0
    if dy < 0 then
        dy <- -dy
    let mutable sx: int = -1
    if x0 < x1 then
        sx <- 1
    let mutable sy: int = -1
    if y0 < y1 then
        sy <- 1
    let mutable err: obj = dx - dy
    try
        while true do
            try
                printfn "%A" (setPx b x0 y0 p)
                if x0 = x1 && y0 = y1 then
                    raise Break
                let e2: int = 2 * err
                if e2 > (0 - dy) then
                    err <- err - dy
                    x0 <- x0 + sx
                if e2 < dx then
                    err <- err + dx
                    y0 <- y0 + sy
            with Continue -> ()
    with Break -> ()
let bezier2 (b) (x1) (y1) (x2) (y2) (x3) (y3) (p) =
    let mutable px: obj = [||]
    let mutable py: obj = [||]
    let mutable i: int = 0
    while i <= b2Seg do
        px <- px @ [0]
        py <- py @ [0]
        i <- i + 1
    let fx1: obj = x1
    let fy1: obj = y1
    let fx2: obj = x2
    let fy2: obj = y2
    let fx3: obj = x3
    let fy3: obj = y3
    i <- 0
    while i <= b2Seg do
        let c: obj = (i) / (b2Seg)
        let mutable a: float = 1.0 - c
        let mutable a2: float = a * a
        let mutable b2: float = 2.0 * c * a
        let mutable c2: obj = c * c
        px.[i] <- (a2 * fx1 + b2 * fx2 + c2 * fx3)
        py.[i] <- (a2 * fy1 + b2 * fy2 + c2 * fy3)
        i <- i + 1
    let mutable x0: obj = px.[0]
    let mutable y0: obj = py.[0]
    i <- 1
    while i <= b2Seg do
        let x: obj = px.[i]
        let y: obj = py.[i]
        printfn "%A" (line b x0 y0 x y p)
        x0 <- x
        y0 <- y
        i <- i + 1
let mutable b: obj = newBitmap 400 300
printfn "%A" (fillRgb b 14614575)
printfn "%A" (bezier2 b 20 150 500 -100 300 280 pixelFromRgb 4165615)
