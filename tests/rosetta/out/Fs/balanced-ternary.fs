// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let trimLeftZeros (s) =
    let mutable i: int = 0
    while i < List.length s && s.Substring(i, i + 1 - i) = "0" do
        i <- i + 1
    s.Substring(i, List.length s - i)
let btString (s) =
    s <- trimLeftZeros s
    let mutable b: obj = [||]
    let mutable i: obj = List.length s - 1
    while i >= 0 do
        let ch: obj = s.Substring(i, i + 1 - i)
        if ch = "+" then
            b <- b @ [1]
        else
            if ch = "0" then
                b <- b @ [0]
            else
                if ch = "-" then
                    b <- b @ [0 - 1]
                else
                    dict [("bt", []); ("ok", false)]
        i <- i - 1
    dict [("bt", b); ("ok", true)]
let btToString (b) =
    if List.length b = 0 then
        "0"
    let mutable r: string = ""
    let mutable i: obj = List.length b - 1
    while i >= 0 do
        let d: obj = b.[i]
        if d = 0 - 1 then
            r <- r + "-"
        else
            if d = 0 then
                r <- r + "0"
            else
                r <- r + "+"
        i <- i - 1
    r
let btInt (i) =
    if i = 0 then
        []
    let mutable n: obj = i
    let mutable b: obj = [||]
    while n <> 0 do
        let mutable m: obj = n % 3
        n <- (n / 3)
        if m = 2 then
            m <- 0 - 1
            n <- n + 1
        else
            if m = 0 - 2 then
                m <- 1
                n <- n - 1
        b <- b @ [m]
    b
let btToInt (b) =
    let mutable r: int = 0
    let mutable pt: int = 1
    let mutable i: int = 0
    while i < List.length b do
        r <- r + b.[i] * pt
        pt <- pt * 3
        i <- i + 1
    r
let btNeg (b) =
    let mutable r: obj = [||]
    let mutable i: int = 0
    while i < List.length b do
        r <- r @ [-b.[i]]
        i <- i + 1
    r
let btAdd (a) (b) =
    btInt btToInt a + btToInt b
let btMul (a) (b) =
    btInt btToInt a * btToInt b
let padLeft (s) (w) =
    let mutable r: obj = s
    while List.length r < w do
        r <- " " + r
    r
let show (label) (b) =
    let l: obj = padLeft label 7
    let bs: obj = padLeft btToString b 12
    let is: obj = padLeft string btToInt b 7
    printfn "%A" (l + " " + bs + " " + is)
let main () =
    let ares: obj = btString "+-0++0+"
    let a: obj = ares.["bt"]
    let b: obj = btInt -436
    let cres: obj = btString "+-++-"
    let c: obj = cres.["bt"]
    printfn "%A" (show "a:" a)
    printfn "%A" (show "b:" b)
    printfn "%A" (show "c:" c)
    printfn "%A" (show "a(b-c):" btMul a btAdd b btNeg c)
printfn "%A" (main())
