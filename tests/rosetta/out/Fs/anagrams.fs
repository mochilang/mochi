// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

type Anon1 = {
}
let sortRunes (s) =
    let mutable arr: obj = [||]
    let mutable i: int = 0
    while i < List.length s do
        arr <- arr @ [s.[i..(i + 1-1)]]
        i <- i + 1
    let mutable n: obj = List.length arr
    let mutable m: int = 0
    while m < n do
        let mutable j: int = 0
        while j < n - 1 do
            if arr.[j] > arr.[j + 1] then
                let tmp: obj = arr.[j]
                arr.[j] <- arr.[j + 1]
                arr.[j + 1] <- tmp
            j <- j + 1
        m <- m + 1
    let mutable out: string = ""
    i <- 0
    while i < n do
        out <- out + arr.[i]
        i <- i + 1
    out
let sortStrings (xs) =
    let mutable res: obj = [||]
    let mutable tmp: obj = xs
    while List.length tmp > 0 do
        let mutable min: obj = tmp.[0]
        let mutable idx: int = 0
        let mutable i: int = 1
        while i < List.length tmp do
            if tmp.[i] < min then
                min <- tmp.[i]
                idx <- i
            i <- i + 1
        res <- res @ [min]
        let mutable out: obj = [||]
        let mutable j: int = 0
        while j < List.length tmp do
            if j <> idx then
                out <- out @ [tmp.[j]]
            j <- j + 1
        tmp <- out
    res
let main () =
    let words: string list = ["abel"; "able"; "bale"; "bela"; "elba"; "alger"; "glare"; "lager"; "large"; "regal"; "angel"; "angle"; "galen"; "glean"; "lange"; "caret"; "carte"; "cater"; "crate"; "trace"; "elan"; "lane"; "lean"; "lena"; "neal"; "evil"; "levi"; "live"; "veil"; "vile"]
    let mutable groups: Anon1 = {  }
    let mutable maxLen: int = 0
    for w in words do
        let k: obj = sortRunes w
        if not (groups.ContainsKey k) then
            groups.[k] <- [w]
        else
            groups.[k] <- groups.[k] @ [w]
        if List.length groups.[k] > maxLen then
            maxLen <- List.length groups.[k]
    let mutable printed: Anon1 = {  }
    for w in words do
        let k: obj = sortRunes w
        if List.length groups.[k] = maxLen then
            if not (printed.ContainsKey k) then
                let mutable g: obj = sortStrings groups.[k]
                let mutable line: string = "[" + g.[0]
                let mutable i: int = 1
                while i < List.length g do
                    line <- line + " " + g.[i]
                    i <- i + 1
                line <- line + "]"
                printfn "%s" line
                printed.[k] <- true
printfn "%A" (main())
