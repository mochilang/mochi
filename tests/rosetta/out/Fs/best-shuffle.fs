// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let nextRand (seed) =
    (seed * 1664525 + 1013904223) % 2147483647
let shuffleChars (s) (seed) =
    let mutable chars: obj = [||]
    let mutable i: int = 0
    while i < List.length s do
        chars <- chars @ [s.Substring(i, i + 1 - i)]
        i <- i + 1
    let mutable sd: obj = seed
    let mutable idx: obj = List.length chars - 1
    while idx > 0 do
        sd <- nextRand sd
        let mutable j: obj = sd % (idx + 1)
        let tmp: obj = chars.[idx]
        chars.[idx] <- chars.[j]
        chars.[j] <- tmp
        idx <- idx - 1
    let mutable res: string = ""
    i <- 0
    while i < List.length chars do
        res <- res + chars.[i]
        i <- i + 1
    [res; sd]
let bestShuffle (s) (seed) =
    let r: obj = shuffleChars s seed
    let mutable t: obj = r.[0]
    let mutable sd: obj = r.[1]
    let mutable arr: obj = [||]
    let mutable i: int = 0
    while i < List.length t do
        arr <- arr @ [t.Substring(i, i + 1 - i)]
        i <- i + 1
    i <- 0
    try
        while i < List.length arr do
            try
                let mutable j: int = 0
                try
                    while j < List.length arr do
                        try
                            if i <> j && arr.[i] <> s.Substring(j, j + 1 - j) && arr.[j] <> s.Substring(i, i + 1 - i) then
                                let tmp: obj = arr.[i]
                                arr.[i] <- arr.[j]
                                arr.[j] <- tmp
                                raise Break
                            j <- j + 1
                        with Continue -> ()
                with Break -> ()
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    let mutable count: int = 0
    i <- 0
    while i < List.length arr do
        if arr.[i] = s.Substring(i, i + 1 - i) then
            count <- count + 1
        i <- i + 1
    let mutable out: string = ""
    i <- 0
    while i < List.length arr do
        out <- out + arr.[i]
        i <- i + 1
    [out; sd; count]
let main () =
    let ts: string list = ["abracadabra"; "seesaw"; "elk"; "grrrrrr"; "up"; "a"]
    let mutable seed: int = 1
    let mutable i: int = 0
    while i < List.length ts do
        let r: obj = bestShuffle ts.[i] seed
        let shuf: obj = r.[0]
        seed <- r.[1]
        let cnt: obj = r.[2]
        printfn "%A" (ts.[i] + " -> " + shuf + " (" + string cnt + ")")
        i <- i + 1
printfn "%A" (main())
