// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

type Anon1 = {
}
let pow10 (exp) =
    let mutable n: int = 1
    let mutable i: int = 0
    while i < exp do
        n <- n * 10
        i <- i + 1
    n
let totient (n) =
    let mutable tot: int = n
    let mutable nn: int = n
    let mutable i: int = 2
    while i * i <= nn do
        if nn % i = 0 then
            while nn % i = 0 do
                nn <- nn / i
            tot <- tot - tot / i
        if i = 2 then
            i <- 1
        i <- i + 2
    if nn > 1 then
        tot <- tot - tot / nn
    tot
let mutable pps: Anon1 = {  }
let getPerfectPowers (maxExp) =
    let upper: obj = pow10 maxExp
    let mutable i: int = 2
    try
        while i * i < upper do
            try
                let mutable p: int = i * i
                try
                    while true do
                        try
                            p <- p * i
                            if p >= upper then
                                raise Break
                            pps.[p] <- true
                        with Continue -> ()
                with Break -> ()
                i <- i + 1
            with Continue -> ()
    with Break -> ()
let getAchilles (minExp) (maxExp) =
    let lower: obj = pow10 minExp
    let upper: obj = pow10 maxExp
    let mutable achilles: Anon1 = {  }
    let mutable b: int = 1
    try
        while b * b * b < upper do
            try
                let b3: int = b * b * b
                let mutable a: int = 1
                try
                    while true do
                        try
                            let p: int = b3 * a * a
                            if p >= upper then
                                raise Break
                            if p >= lower then
                                if not (pps.ContainsKey p) then
                                    achilles.[p] <- true
                            a <- a + 1
                        with Continue -> ()
                with Break -> ()
                b <- b + 1
            with Continue -> ()
    with Break -> ()
    achilles
let sortInts (xs) =
    let mutable res: obj = [||]
    let mutable tmp: obj = xs
    while List.length tmp > 0 do
        let mutable min: obj = tmp.[0]
        let mutable idx: int = 0
        let mutable i: int = 1
        while i < List.length tmp do
            if tmp.[i] < min then
                min <- tmp.[i]
                idx <- i
            i <- i + 1
        res <- res + [min]
        let mutable out: obj = [||]
        let mutable j: int = 0
        while j < List.length tmp do
            if j <> idx then
                out <- out + [tmp.[j]]
            j <- j + 1
        tmp <- out
    res
let pad (n) (width) =
    let mutable s: obj = string n
    while List.length s < width do
        s <- " " + s
    s
let main () =
    let maxDigits: int = 15
    printfn "%A" (getPerfectPowers maxDigits)
    let achSet: obj = getAchilles 1 5
    let mutable ach: obj = [||]
    for k in achSet.keys() do
        ach <- ach + [k]
    ach <- sortInts ach
    printfn "%s" "First 50 Achilles numbers:"
    let mutable i: int = 0
    while i < 50 do
        let mutable line: string = ""
        let mutable j: int = 0
        while j < 10 do
            line <- line + pad ach.[i] 4
            if j < 9 then
                line <- line + " "
            i <- i + 1
            j <- j + 1
        printfn "%s" line
    printfn "%s" "\nFirst 30 strong Achilles numbers:"
    let mutable strong: obj = [||]
    let mutable count: int = 0
    let mutable idx: int = 0
    while count < 30 do
        let tot: obj = totient ach.[idx]
        if List.contains tot achSet then
            strong <- strong + [ach.[idx]]
            count <- count + 1
        idx <- idx + 1
    i <- 0
    while i < 30 do
        let mutable line: string = ""
        let mutable j: int = 0
        while j < 10 do
            line <- line + pad strong.[i] 5
            if j < 9 then
                line <- line + " "
            i <- i + 1
            j <- j + 1
        printfn "%s" line
    printfn "%s" "\nNumber of Achilles numbers with:"
    let counts: int list = [1; 12; 47; 192; 664; 2242; 7395; 24008; 77330; 247449; 788855; 2508051; 7960336; 25235383]
    let mutable d: int = 2
    while d <= maxDigits do
        let c: int list = counts.[d - 2]
        printfn "%A" (pad d 2 + " digits: " + string c)
        d <- d + 1
printfn "%A" (main())
