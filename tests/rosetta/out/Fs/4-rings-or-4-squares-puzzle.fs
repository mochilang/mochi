// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let validComb (a) (b) (c) (d) (e) (f) (g) =
    let square1: obj = a + b
    let square2: obj = b + c + d
    let square3: obj = d + e + f
    let square4: obj = f + g
    square1 = square2 && square2 = square3 && square3 = square4
let isUnique (a) (b) (c) (d) (e) (f) (g) =
    let mutable nums: obj list = [|a; b; c; d; e; f; g|]
    let mutable i: int = 0
    while i < List.length nums do
        let mutable j: int = i + 1
        while j < List.length nums do
            if nums.[i] = nums.[j] then
                false
            j <- j + 1
        i <- i + 1
    true
let getCombs (low) (high) (unique) =
    let mutable valid: obj = [||]
    let mutable count: int = 0
    try
        for b in low .. (high + 1) do
            try
                try
                    for c in low .. (high + 1) do
                        try
                            try
                                for d in low .. (high + 1) do
                                    try
                                        let s: obj = b + c + d
                                        try
                                            for e in low .. (high + 1) do
                                                try
                                                    try
                                                        for f in low .. (high + 1) do
                                                            try
                                                                let a: obj = s - b
                                                                let g: obj = s - f
                                                                if a < low || a > high then
                                                                    raise Continue
                                                                if g < low || g > high then
                                                                    raise Continue
                                                                if d + e + f <> s then
                                                                    raise Continue
                                                                if f + g <> s then
                                                                    raise Continue
                                                                if not unique || isUnique a b c d e f g then
                                                                    valid <- valid @ [[a; b; c; d; e; f; g]]
                                                                    count <- count + 1
                                                            with Continue -> ()
                                                        with Break -> ()
                                                    with Continue -> ()
                                                with Break -> ()
                                            with Continue -> ()
                                        with Break -> ()
                                    with Continue -> ()
                                with Break -> ()
                            with Continue -> ()
                        with Break -> ()
                        dict [("count", count); ("list", valid)]
                    let r1: obj = getCombs 1 7 true
                    printfn "%A" (string r1.["count"] + " unique solutions in 1 to 7")
                    printfn "%A" (r1.["list"])
                    let r2: obj = getCombs 3 9 true
                    printfn "%A" (string r2.["count"] + " unique solutions in 3 to 9")
                    printfn "%A" (r2.["list"])
                    let r3: obj = getCombs 0 9 false
                    printfn "%A" (string r3.["count"] + " non-unique solutions in 0 to 9")
