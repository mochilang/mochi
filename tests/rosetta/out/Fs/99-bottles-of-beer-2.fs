// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let fields (s) =
    let mutable words: obj = [||]
    let mutable cur: string = ""
    let mutable i: int = 0
    while i < List.length s do
        let ch: obj = s.Substring(i, i + 1 - i)
        if ch = " " || ch = "\n" || ch = "\t" then
            if List.length cur > 0 then
                words <- words @ [cur]
                cur <- ""
        else
            cur <- cur + ch
        i <- i + 1
    if List.length cur > 0 then
        words <- words @ [cur]
    words
let join (xs) (sep) =
    let mutable res: string = ""
    let mutable i: int = 0
    while i < List.length xs do
        if i > 0 then
            res <- res + sep
        res <- res + xs.[i]
        i <- i + 1
    res
let numberName (n) =
    let small: string list = ["no"; "one"; "two"; "three"; "four"; "five"; "six"; "seven"; "eight"; "nine"; "ten"; "eleven"; "twelve"; "thirteen"; "fourteen"; "fifteen"; "sixteen"; "seventeen"; "eighteen"; "nineteen"]
    let tens: string list = ["ones"; "ten"; "twenty"; "thirty"; "forty"; "fifty"; "sixty"; "seventy"; "eighty"; "ninety"]
    if n < 0 then
        ""
    if n < 20 then
        small.[n]
    if n < 100 then
        let mutable t: string list = tens.[(n / 10)]
        let mutable s: obj = n % 10
        if s > 0 then
            t <- t + " " + small.[s]
        t
    ""
let pluralizeFirst (s) (n) =
    if n = 1 then
        s
    let w: obj = fields s
    if List.length w > 0 then
        w.[0] <- w.[0] + "s"
    join w " "
let randInt (seed) (n) =
    let next: obj = (seed * 1664525 + 1013904223) % 2147483647
    next % n
let slur (p) (d) =
    if List.length p <= 2 then
        p
    let mutable a: obj = [||]
    let mutable i: int = 1
    while i < List.length p - 1 do
        a <- a @ [p.Substring(i, i + 1 - i)]
        i <- i + 1
    let mutable idx: obj = List.length a - 1
    let mutable seed: obj = d
    while idx >= 1 do
        seed <- (seed * 1664525 + 1013904223) % 2147483647
        if seed % 100 >= d then
            let j: obj = seed % (idx + 1)
            let tmp: obj = a.[idx]
            a.[idx] <- a.[j]
            a.[j] <- tmp
        idx <- idx - 1
    let mutable s: obj = p.Substring(0, 1 - 0)
    let mutable k: int = 0
    while k < List.length a do
        s <- s + a.[k]
        k <- k + 1
    s <- s + p.Substring(List.length p - 1, List.length p - List.length p - 1)
    let w: obj = fields s
    join w " "
let main () =
    let mutable i: int = 99
    while i > 0 do
        printfn "%A" (slur numberName i i + " " + pluralizeFirst slur "bottle of" i i + " " + slur "beer on the wall" i)
        printfn "%A" (slur numberName i i + " " + pluralizeFirst slur "bottle of" i i + " " + slur "beer" i)
        printfn "%A" (slur "take one" i + " " + slur "down" i + " " + slur "pass it around" i)
        printfn "%A" (slur numberName i - 1 i + " " + pluralizeFirst slur "bottle of" i i - 1 + " " + slur "beer on the wall" i)
        i <- i - 1
printfn "%A" (main())
