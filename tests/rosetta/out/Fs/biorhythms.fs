// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let PI: float = 3.141592653589793
let TWO_PI: float = 6.283185307179586
let sinApprox (x) =
    let mutable term: obj = x
    let mutable sum: obj = x
    let mutable n: int = 1
    while n <= 8 do
        let denom: obj = ((2 * n) * (2 * n + 1))
        term <- -term * x * x / denom
        sum <- sum + term
        n <- n + 1
    sum
let floor (x) =
    let mutable i: obj = x
    if (i) > x then
        i <- i - 1
    i
let absFloat (x) =
    if x < 0.0 then
        -x
    x
let absInt (n) =
    if n < 0 then
        -n
    n
let parseIntStr (str) =
    let mutable i: int = 0
    let mutable neg: bool = false
    if List.length str > 0 && str.[0..(1-1)] = "-" then
        neg <- true
        i <- 1
    let mutable n: int = 0
    let digits: System.Collections.Generic.IDictionary<string, int> = dict [("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]
    while i < List.length str do
        n <- n * 10 + digits.[str.[i..(i + 1-1)]]
        i <- i + 1
    if neg then
        n <- -n
    n
let parseDate (s) =
    let y: obj = parseIntStr s.[0..(4-1)]
    let m: obj = parseIntStr s.[5..(7-1)]
    let d: obj = parseIntStr s.[8..(10-1)]
    [y; m; d]
let leap (y) =
    if y % 400 = 0 then
        true
    if y % 100 = 0 then
        false
    y % 4 = 0
let daysInMonth (y) (m) =
    let feb: obj = (if leap y then 29 else 28)
    let lengths: int list = [31; feb; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31]
    lengths.[m - 1]
let addDays (y) (m) (d) (n) =
    let mutable yy: obj = y
    let mutable mm: obj = m
    let mutable dd: obj = d
    if n >= 0 then
        let mutable i: int = 0
        while i < n do
            dd <- dd + 1
            if dd > daysInMonth yy mm then
                dd <- 1
                mm <- mm + 1
                if mm > 12 then
                    mm <- 1
                    yy <- yy + 1
            i <- i + 1
    else
        let mutable i: int = 0
        while i > n do
            dd <- dd - 1
            if dd < 1 then
                mm <- mm - 1
                if mm < 1 then
                    mm <- 12
                    yy <- yy - 1
                dd <- daysInMonth yy mm
            i <- i - 1
    [yy; mm; dd]
let pad2 (n) =
    if n < 10 then
        "0" + string n
    string n
let dateString (y) (m) (d) =
    string y + "-" + pad2 m + "-" + pad2 d
let day (y) (m) (d) =
    let part1: int = 367 * y
    let part2: obj = ((7 * ((y + ((m + 9) / 12)))) / 4)
    let part3: obj = ((275 * m) / 9)
    part1 - part2 + part3 + d - 730530
let biorhythms (birth) (target) =
    let bparts: obj = parseDate birth
    let by: obj = bparts.[0]
    let bm: obj = bparts.[1]
    let bd: obj = bparts.[2]
    let tparts: obj = parseDate target
    let ty: obj = tparts.[0]
    let tm: obj = tparts.[1]
    let td: obj = tparts.[2]
    let diff: obj = absInt day ty tm td - day by bm bd
    printfn "%s" ("Born " + birth + ", Target " + target)
    printfn "%s" ("Day " + string diff)
    let cycles: string list = ["Physical day "; "Emotional day"; "Mental day   "]
    let lengths: int list = [23; 28; 33]
    let quadrants: string list list = [["up and rising"; "peak"]; ["up but falling"; "transition"]; ["down and falling"; "valley"]; ["down but rising"; "transition"]]
    let mutable i: int = 0
    while i < 3 do
        let length: int list = lengths.[i]
        let cycle: string list = cycles.[i]
        let position: obj = diff % length
        let quadrant: obj = (position * 4) / length
        let mutable percent: obj = sinApprox 2.0 * PI * (position) / (length)
        percent <- floor percent * 1000.0 / 10.0
        let mutable description: string = ""
        if percent > 95.0 then
            description <- " peak"
        let mutable posStr: obj = string position
        if position < 10 then
            posStr <- " " + posStr
        printfn "%A" (cycle + posStr + " : " + description)
        i <- i + 1
    printfn "%s" ""
let main () =
    let pairs: string list list = [["1943-03-09"; "1972-07-11"]; ["1809-01-12"; "1863-11-19"]; ["1809-02-12"; "1863-11-19"]]
    let mutable idx: int = 0
    while idx < List.length pairs do
        let p: string list list = pairs.[idx]
        printfn "%A" (biorhythms p.[0] p.[1])
        idx <- idx + 1
printfn "%A" (main())
