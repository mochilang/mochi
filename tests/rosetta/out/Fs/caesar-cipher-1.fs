// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let indexOf (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.Substring(i, i + 1 - i) = ch then
            i
        i <- i + 1
    -1
let ord (ch) =
    let upper: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower: string = "abcdefghijklmnopqrstuvwxyz"
    let mutable idx: obj = indexOf upper ch
    if idx >= 0 then
        65 + idx
    idx <- indexOf lower ch
    if idx >= 0 then
        97 + idx
    0
let chr (n) =
    let upper: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let lower: string = "abcdefghijklmnopqrstuvwxyz"
    if n >= 65 && n < 91 then
        upper.Substring(n - 65, n - 64 - n - 65)
    if n >= 97 && n < 123 then
        lower.Substring(n - 97, n - 96 - n - 97)
    "?"
let shiftRune (r) (k) =
    if r >= "a" && r <= "z" then
        chr ((ord r - 97 + k) % 26) + 97
    if r >= "A" && r <= "Z" then
        chr ((ord r - 65 + k) % 26) + 65
    r
let encipher (s) (k) =
    let mutable out: string = ""
    let mutable i: int = 0
    while i < List.length s do
        out <- out + shiftRune s.[i..(i + 1-1)] k
        i <- i + 1
    out
let decipher (s) (k) =
    encipher s (26 - k % 26) % 26
let main () =
    let pt: string = "The five boxing wizards jump quickly"
    printfn "%s" ("Plaintext: " + pt)
    try
        for key in [0; 1; 7; 25; 26] do
            try
                if key < 1 || key > 25 then
                    printfn "%s" "Key " + string key + " invalid"
                    raise Continue
                let ct: obj = encipher pt key
                printfn "%s" ("Key " + string key)
                printfn "%s" ("  Enciphered: " + ct)
                printfn "%s" ("  Deciphered: " + decipher ct key)
            with Continue -> ()
        with Break -> ()
    printfn "%A" (main())
