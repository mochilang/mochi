// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let bigTrim (a) =
    let mutable n: obj = List.length a
    while n > 1 && a.[n - 1] = 0 do
        a <- a.[0..(n - 1-1)]
        n <- n - 1
    a
let bigFromInt (x) =
    if x = 0 then
        [0]
    let mutable digits: obj = [||]
    let mutable n: obj = x
    while n > 0 do
        digits <- digits @ [n % 10]
        n <- n / 10
    digits
let bigAdd (a) (b) =
    let mutable res: obj = [||]
    let mutable carry: int = 0
    let mutable i: int = 0
    while i < List.length a || i < List.length b || carry > 0 do
        let mutable av: int = 0
        if i < List.length a then
            av <- a.[i]
        let mutable bv: int = 0
        if i < List.length b then
            bv <- b.[i]
        let mutable s: int = av + bv + carry
        res <- res @ [s % 10]
        carry <- s / 10
        i <- i + 1
    bigTrim res
let bigSub (a) (b) =
    let mutable res: obj = [||]
    let mutable borrow: int = 0
    let mutable i: int = 0
    while i < List.length a do
        let mutable av: obj = a.[i]
        let mutable bv: int = 0
        if i < List.length b then
            bv <- b.[i]
        let mutable diff: obj = av - bv - borrow
        if diff < 0 then
            diff <- diff + 10
            borrow <- 1
        else
            borrow <- 0
        res <- res @ [diff]
        i <- i + 1
    bigTrim res
let bigToString (a) =
    let mutable s: string = ""
    let mutable i: obj = List.length a - 1
    while i >= 0 do
        s <- s + string a.[i]
        i <- i - 1
    s
let minInt (a) (b) =
    if a < b then
        a
    else
        b
let cumu (n) =
    let mutable cache: obj list list = [|[bigFromInt 1]|]
    let mutable y: int = 1
    while y <= n do
        let mutable row: obj list = [|bigFromInt 0|]
        let mutable x: int = 1
        while x <= y do
            let val: obj list list = cache.[y - x].[minInt x y - x]
            row <- row @ [bigAdd row.[List.length row - 1] val]
            x <- x + 1
        cache <- cache @ [row]
        y <- y + 1
    cache.[n]
let row (n) =
    let e: obj = cumu n
    let mutable out: obj = [||]
    let mutable i: int = 0
    while i < n do
        let diff: obj = bigSub e.[i + 1] e.[i]
        out <- out @ [bigToString diff]
        i <- i + 1
    out
printfn "%s" "rows:"
let mutable x: int = 1
while x < 11 do
    let r: obj = row x
    let mutable line: string = ""
    let mutable i: int = 0
    while i < List.length r do
        line <- line + " " + r.[i] + " "
        i <- i + 1
    printfn "%s" line
    x <- x + 1
printfn "%s" ""
printfn "%s" "sums:"
for num in [23; 123; 1234] do
    let r: obj = cumu num
    printfn "%A" (string num + " " + bigToString r.[List.length r - 1])
