// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let fields (s) =
    let mutable words: obj = [||]
    let mutable cur: string = ""
    let mutable i: int = 0
    while i < List.length s do
        let ch: obj = s.Substring(i, i + 1 - i)
        if ch = " " || ch = "\n" || ch = "\t" then
            if List.length cur > 0 then
                words <- words @ [cur]
                cur <- ""
        else
            cur <- cur + ch
        i <- i + 1
    if List.length cur > 0 then
        words <- words @ [cur]
    words
let padRight (s) (width) =
    let mutable out: obj = s
    let mutable i: obj = List.length s
    while i < width do
        out <- out + " "
        i <- i + 1
    out
let join (xs) (sep) =
    let mutable res: string = ""
    let mutable i: int = 0
    while i < List.length xs do
        if i > 0 then
            res <- res + sep
        res <- res + xs.[i]
        i <- i + 1
    res
let parseIntStr (str) =
    let mutable i: int = 0
    let mutable neg: bool = false
    if List.length str > 0 && str.[0..(1-1)] = "-" then
        neg <- true
        i <- 1
    let mutable n: int = 0
    let digits: System.Collections.Generic.IDictionary<string, int> = dict [("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]
    while i < List.length str do
        n <- n * 10 + digits.[str.[i..(i + 1-1)]]
        i <- i + 1
    if neg then
        n <- -n
    n
let isDigits (s) =
    if List.length s = 0 then
        false
    let mutable i: int = 0
    while i < List.length s do
        let ch: obj = s.Substring(i, i + 1 - i)
        if ch < "0" || ch > "9" then
            false
        i <- i + 1
    true
let readTable (table) =
    let toks: obj = fields table
    let mutable cmds: obj = [||]
    let mutable mins: obj = [||]
    let mutable i: int = 0
    while i < List.length toks do
        let cmd: obj = toks.[i]
        let mutable minlen: obj = List.length cmd
        i <- i + 1
        if i < List.length toks && isDigits toks.[i] then
            let num: obj = parseIntStr toks.[i]
            if num >= 1 && num < List.length cmd then
                minlen <- num
                i <- i + 1
        cmds <- cmds @ [cmd]
        mins <- mins @ [minlen]
    dict [("commands", cmds); ("mins", mins)]
let validate (commands) (mins) (words) =
    let mutable results: obj = [||]
    let mutable wi: int = 0
    try
        while wi < List.length words do
            try
                let w: obj = words.[wi]
                let mutable found: bool = false
                let wlen: obj = List.length w
                let mutable ci: int = 0
                try
                    while ci < List.length commands do
                        try
                            let cmd: obj = commands.[ci]
                            if mins.[ci] <> 0 && wlen >= mins.[ci] && wlen <= List.length cmd then
                                let c: obj = upper cmd
                                let ww: obj = upper w
                                if c.Substring(0, wlen - 0) = ww then
                                    results <- results @ [c]
                                    found <- true
                                    raise Break
                            ci <- ci + 1
                        with Continue -> ()
                with Break -> ()
                if not found then
                    results <- results @ ["*error*"]
                wi <- wi + 1
            with Continue -> ()
    with Break -> ()
    results
let main () =
    let table: string = "" + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 " + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate " + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 " + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load " + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 " + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 " + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left " + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "
    let sentence: string = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    let tbl: obj = readTable table
    let commands: obj = tbl.["commands"]
    let mins: obj = tbl.["mins"]
    let words: obj = fields sentence
    let results: obj = validate commands mins words
    let mutable out1: string = "user words:"
    let mutable k: int = 0
    while k < List.length words do
        out1 <- out1 + " "
        if k < List.length words - 1 then
            out1 <- out1 + padRight words.[k] List.length results.[k]
        else
            out1 <- out1 + words.[k]
        k <- k + 1
    printfn "%s" out1
    printfn "%s" "full words: " + join results " "
printfn "%A" (main())
