// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let trimSpace (s) =
    let mutable start: int = 0
    while start < List.length s && s.[start..(start + 1-1)] = " " do
        start <- start + 1
    let mutable end: obj = List.length s
    while end > start && s.[end - 1..(end-1)] = " " do
        end <- end - 1
    s.[start..(end-1)]
let isUpper (ch) =
    ch >= "A" && ch <= "Z"
let padLeft (s) (w) =
    let mutable res: string = ""
    let mutable n: obj = w - List.length s
    while n > 0 do
        res <- res + " "
        n <- n - 1
    res + s
let snakeToCamel (s) =
    s <- trimSpace s
    let mutable out: string = ""
    let mutable up: bool = false
    let mutable i: int = 0
    try
        while i < List.length s do
            try
                let ch: obj = s.[i..(i + 1-1)]
                if ch = "_" || ch = "-" || ch = " " || ch = "." then
                    up <- true
                    i <- i + 1
                    raise Continue
                if i = 0 then
                    out <- out + lower ch
                    up <- false
                    i <- i + 1
                    raise Continue
                if up then
                    out <- out + upper ch
                    up <- false
                else
                    out <- out + ch
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    out
let camelToSnake (s) =
    s <- trimSpace s
    let mutable out: string = ""
    let mutable prevUnd: bool = false
    let mutable i: int = 0
    try
        while i < List.length s do
            try
                let ch: obj = s.[i..(i + 1-1)]
                if ch = " " || ch = "-" || ch = "." then
                    if not prevUnd && List.length out > 0 then
                        out <- out + "_"
                        prevUnd <- true
                    i <- i + 1
                    raise Continue
                if ch = "_" then
                    if not prevUnd && List.length out > 0 then
                        out <- out + "_"
                        prevUnd <- true
                    i <- i + 1
                    raise Continue
                if isUpper ch then
                    if i > 0 && (not prevUnd) then
                        out <- out + "_"
                    out <- out + lower ch
                    prevUnd <- false
                else
                    out <- out + lower ch
                    prevUnd <- false
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    let mutable start: int = 0
    while start < List.length out && out.Substring(start, start + 1 - start) = "_" do
        start <- start + 1
    let mutable end: obj = List.length out
    while end > start && out.Substring(end - 1, end - end - 1) = "_" do
        end <- end - 1
    out <- out.Substring(start, end - start)
    let mutable res: string = ""
    let mutable j: int = 0
    let mutable lastUnd: bool = false
    while j < List.length out do
        let c: string = out.Substring(j, j + 1 - j)
        if c = "_" then
            if not lastUnd then
                res <- res + c
            lastUnd <- true
        else
            res <- res + c
            lastUnd <- false
        j <- j + 1
    res
let main () =
    let samples: string list = ["snakeCase"; "snake_case"; "snake-case"; "snake case"; "snake CASE"; "snake.case"; "variable_10_case"; "variable10Case"; "É›rgo rE tHis"; "hurry-up-joe!"; "c://my-docs/happy_Flag-Day/12.doc"; " spaces "]
    printfn "%s" "=== To snake_case ==="
    for s in samples do
        printfn "%A" (padLeft s 34 + " => " + camelToSnake s)
    printfn "%s" ""
    printfn "%s" "=== To camelCase ==="
    for s in samples do
        printfn "%A" (padLeft s 34 + " => " + snakeToCamel s)
printfn "%A" (main())
