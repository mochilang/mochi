// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let join (xs) (sep) =
    let mutable res: string = ""
    let mutable i: int = 0
    while i < List.length xs do
        if i > 0 then
            res <- res + sep
        res <- res + xs.[i]
        i <- i + 1
    res
let parseIntStr (str) =
    let mutable i: int = 0
    let mutable neg: bool = false
    if List.length str > 0 && str.[0..(1-1)] = "-" then
        neg <- true
        i <- 1
    let mutable n: int = 0
    let digits: System.Collections.Generic.IDictionary<string, int> = dict [("0", 0); ("1", 1); ("2", 2); ("3", 3); ("4", 4); ("5", 5); ("6", 6); ("7", 7); ("8", 8); ("9", 9)]
    while i < List.length str do
        n <- n * 10 + digits.[str.[i..(i + 1-1)]]
        i <- i + 1
    if neg then
        n <- -n
    n
let mutable rows: string list list = [|["A"; "B"; "C"]; ["1"; "2"; "3"]; ["4"; "5"; "6"]; ["7"; "8"; "9"]|]
rows.[0] <- rows.[0] @ ["SUM"]
let mutable i: int = 1
while i < List.length rows do
    let mutable sum: int = 0
    for s in rows.[i] do
        sum <- sum + parseIntStr s
    rows.[i] <- rows.[i] @ [string sum]
    i <- i + 1
for r in rows do
    printfn "%A" (join r ",")
