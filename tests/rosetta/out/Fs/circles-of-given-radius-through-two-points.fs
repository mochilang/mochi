// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

type Anon1 = {
    x: obj
    y: obj
}
type Anon2 = {
    x: float
    y: float
}
type Point = {
    mutable x: float
    mutable y: float
}
let sqrtApprox (x) =
    let mutable g: obj = x
    let mutable i: int = 0
    while i < 40 do
        g <- (g + x / g) / 2.0
        i <- i + 1
    g
let hypot (x) (y) =
    sqrtApprox x * x + y * y
let Two: string = "Two circles."
let R0: string = "R==0.0 does not describe circles."
let Co: string = "Coincident points describe an infinite number of circles."
let CoR0: string = "Coincident points with r==0.0 describe a degenerate circle."
let Diam: string = "Points form a diameter and describe only a single circle."
let Far: string = "Points too far apart to form circles."
let circles (p1) (p2) (r) =
    if p1.x = p2.x && p1.y = p2.y then
        if r = 0.0 then
            [p1; p1; "Coincident points with r==0.0 describe a degenerate circle."]
        [p1; p2; "Coincident points describe an infinite number of circles."]
    if r = 0.0 then
        [p1; p2; "R==0.0 does not describe circles."]
    let dx: obj = p2.x - p1.x
    let dy: obj = p2.y - p1.y
    let q: obj = hypot dx dy
    if q > 2.0 * r then
        [p1; p2; "Points too far apart to form circles."]
    let m: Anon1 = { x = (p1.x + p2.x) / 2.0; y = (p1.y + p2.y) / 2.0 }
    if q = 2.0 * r then
        [m; m; "Points form a diameter and describe only a single circle."]
    let d: obj = sqrtApprox r * r - q * q / 4.0
    let ox: obj = d * dx / q
    let oy: obj = d * dy / q
    [{ x = m.x - oy; y = m.y + ox }; { x = m.x + oy; y = m.y - ox }; "Two circles."]
let mutable td: Anon2 list list = [|[{ x = 0.1234; y = 0.9876 }; { x = 0.8765; y = 0.2345 }; 2.0]; [{ x = 0.0; y = 2.0 }; { x = 0.0; y = 0.0 }; 1.0]; [{ x = 0.1234; y = 0.9876 }; { x = 0.1234; y = 0.9876 }; 2.0]; [{ x = 0.1234; y = 0.9876 }; { x = 0.8765; y = 0.2345 }; 0.5]; [{ x = 0.1234; y = 0.9876 }; { x = 0.1234; y = 0.9876 }; 0.0]|]
for tc in td do
    let p1: Anon2 list = tc.[0]
    let p2: Anon2 list = tc.[1]
    let r: Anon2 list = tc.[2]
    printfn "%s" "p1:  {" + string p1.x + " " + string p1.y + "}"
    printfn "%s" "p2:  {" + string p2.x + " " + string p2.y + "}"
    printfn "%s" ("r:  " + string r)
    let res: obj = circles p1 p2 r
    let c1: obj = res.[0]
    let c2: obj = res.[1]
    let caseStr: obj = res.[2]
    printfn "%s" ("   " + caseStr)
    if caseStr = "Points form a diameter and describe only a single circle." || caseStr = "Coincident points with r==0.0 describe a degenerate circle." then
        printfn "%s" "   Center:  {" + string c1.x + " " + string c1.y + "}"
    else
        if caseStr = "Two circles." then
            printfn "%s" "   Center 1:  {" + string c1.x + " " + string c1.y + "}"
            printfn "%s" "   Center 2:  {" + string c2.x + " " + string c2.y + "}"
    printfn "%s" ""
