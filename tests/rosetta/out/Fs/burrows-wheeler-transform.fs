// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let stx: string = "\x02"
let etx: string = "\x03"
let contains (s) (ch) =
    let mutable i: int = 0
    while i < List.length s do
        if s.Substring(i, i + 1 - i) = ch then
            true
        i <- i + 1
    false
let sortStrings (xs) =
    let mutable arr: obj = xs
    let mutable n: obj = List.length arr
    let mutable i: int = 0
    while i < n do
        let mutable j: int = 0
        while j < n - 1 do
            if arr.[j] > arr.[j + 1] then
                let tmp: obj = arr.[j]
                arr.[j] <- arr.[j + 1]
                arr.[j + 1] <- tmp
            j <- j + 1
        i <- i + 1
    arr
let bwt (s) =
    if contains s stx || contains s etx then
        dict [("err", true); ("res", "")]
    s <- stx + s + etx
    let le: obj = List.length s
    let mutable table: obj = [||]
    let mutable i: int = 0
    while i < le do
        let rot: obj = s.Substring(i, le - i) + s.Substring(0, i - 0)
        table <- table @ [rot]
        i <- i + 1
    table <- sortStrings table
    let mutable last: string = ""
    i <- 0
    while i < le do
        last <- last + table.[i].Substring(le - 1, le - le - 1)
        i <- i + 1
    dict [("err", false); ("res", last)]
let ibwt (r) =
    let le: obj = List.length r
    let mutable table: obj = [||]
    let mutable i: int = 0
    while i < le do
        table <- table @ [""]
        i <- i + 1
    let mutable n: int = 0
    while n < le do
        i <- 0
        while i < le do
            table.[i] <- r.Substring(i, i + 1 - i) + table.[i]
            i <- i + 1
        table <- sortStrings table
        n <- n + 1
    i <- 0
    while i < le do
        if table.[i].Substring(le - 1, le - le - 1) = etx then
            table.[i].Substring(1, le - 1 - 1)
        i <- i + 1
    ""
let makePrintable (s) =
    let mutable out: string = ""
    let mutable i: int = 0
    while i < List.length s do
        let ch: obj = s.Substring(i, i + 1 - i)
        if ch = stx then
            out <- out + "^"
        i <- i + 1
    out
let main () =
    let examples: string list = ["banana"; "appellee"; "dogwood"; "TO BE OR NOT TO BE OR WANT TO BE OR NOT?"; "SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES"; "\x02ABC\x03"]
    for t in examples do
        printfn "%A" (makePrintable t)
        let res: obj = bwt t
        if res.["err"] then
            printfn "%s" " --> ERROR: String can't contain STX or ETX"
            printfn "%s" " -->"
        else
            let enc: obj = res.["res"]
            printfn "%s" (" --> " + makePrintable enc)
            let r: obj = ibwt enc
            printfn "%s" (" --> " + r)
        printfn "%s" ""
printfn "%A" (main())
