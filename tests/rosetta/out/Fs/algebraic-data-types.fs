// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let node (cl) (le) (aa) (ri) =
    dict [("cl", cl); ("le", le); ("aa", aa); ("ri", ri)]
let treeString (t) =
    if t = () then
        "E"
    let m: obj = t
    "T(" + m.["cl"] + ", " + treeString m.["le"] + ", " + string m.["aa"] + ", " + treeString m.["ri"] + ")"
let balance (t) =
    if t = () then
        t
    let m: obj = t
    if m.["cl"] <> "B" then
        t
    let le: obj = m.["le"]
    let ri: obj = m.["ri"]
    if le <> () then
        let leMap: obj = le
        if leMap.["cl"] = "R" then
            let lele: obj = leMap.["le"]
            if lele <> () then
                let leleMap: obj = lele
                if leleMap.["cl"] = "R" then
                    node "R" node "B" leleMap.["le"] leleMap.["aa"] leleMap.["ri"] leMap.["aa"] node "B" leMap.["ri"] m.["aa"] ri
            let leri: obj = leMap.["ri"]
            if leri <> () then
                let leriMap: obj = leri
                if leriMap.["cl"] = "R" then
                    node "R" node "B" leMap.["le"] leMap.["aa"] leriMap.["le"] leriMap.["aa"] node "B" leriMap.["ri"] m.["aa"] ri
    if ri <> () then
        let riMap: obj = ri
        if riMap.["cl"] = "R" then
            let rile: obj = riMap.["le"]
            if rile <> () then
                let rileMap: obj = rile
                if rileMap.["cl"] = "R" then
                    node "R" node "B" m.["le"] m.["aa"] rileMap.["le"] rileMap.["aa"] node "B" rileMap.["ri"] riMap.["aa"] riMap.["ri"]
            let riri: obj = riMap.["ri"]
            if riri <> () then
                let ririMap: obj = riri
                if ririMap.["cl"] = "R" then
                    node "R" node "B" m.["le"] m.["aa"] riMap.["le"] riMap.["aa"] node "B" ririMap.["le"] ririMap.["aa"] ririMap.["ri"]
    t
let ins (tr) (x) =
    if tr = () then
        node "R" () x ()
    if x < tr.["aa"] then
        balance node tr.["cl"] ins tr.["le"] x tr.["aa"] tr.["ri"]
    if x > tr.["aa"] then
        balance node tr.["cl"] tr.["le"] tr.["aa"] ins tr.["ri"] x
    tr
let insert (tr) (x) =
    let t: obj = ins tr x
    if t = () then
        ()
    let m: obj = t
    node "B" m.["le"] m.["aa"] m.["ri"]
let mutable tr: any = ()
let mutable i: int = 1
while i <= 16 do
    tr <- insert tr i
    i <- i + 1
printfn "%A" (treeString tr)
