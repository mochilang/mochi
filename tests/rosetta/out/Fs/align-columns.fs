// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

exception Break
exception Continue

let split (s) (sep) =
    let mutable parts: obj = [||]
    let mutable cur: string = ""
    let mutable i: int = 0
    while i < List.length s do
        if List.length sep > 0 && i + List.length sep <= List.length s && s.Substring(i, i + List.length sep - i) = sep then
            parts <- parts @ [cur]
            cur <- ""
            i <- i + List.length sep
        else
            cur <- cur + s.Substring(i, i + 1 - i)
            i <- i + 1
    parts <- parts @ [cur]
    parts
let rstripEmpty (words) =
    let mutable n: obj = List.length words
    while n > 0 && words.[n - 1] = "" do
        n <- n - 1
    words.[0..(n-1)]
let spaces (n) =
    let mutable out: string = ""
    let mutable i: int = 0
    while i < n do
        out <- out + " "
        i <- i + 1
    out
let pad (word) (width) (align) =
    let diff: obj = width - List.length word
    if align = 0 then
        word + spaces diff
    if align = 2 then
        spaces diff + word
    let mutable left: obj = (diff / 2)
    let mutable right: obj = diff - left
    spaces left + word + spaces right
let newFormatter (text) =
    let mutable lines: obj = split text "\n"
    let mutable fmtLines: obj = [||]
    let mutable width: obj = [||]
    let mutable i: int = 0
    try
        while i < List.length lines do
            try
                if List.length lines.[i] = 0 then
                    i <- i + 1
                    raise Continue
                let mutable words: obj = rstripEmpty split lines.[i] "$"
                fmtLines <- fmtLines @ [words]
                let mutable j: int = 0
                while j < List.length words do
                    let wlen: obj = List.length words.[j]
                    if j = List.length width then
                        width <- width @ [wlen]
                    j <- j + 1
                i <- i + 1
            with Continue -> ()
    with Break -> ()
    dict [("text", fmtLines); ("width", width)]
let printFmt (f) (align) =
    let lines: obj = f.["text"]
    let width: obj = f.["width"]
    let mutable i: int = 0
    while i < List.length lines do
        let words: obj = lines.[i]
        let mutable line: string = ""
        let mutable j: int = 0
        while j < List.length words do
            line <- line + pad words.[j] width.[j] align + " "
            j <- j + 1
        printfn "%s" line
        i <- i + 1
    printfn "%s" ""
let text: string = "Given$a$text$file$of$many$lines,$where$fields$within$a$line\n" + "are$delineated$by$a$single$'dollar'$character,$write$a$program\n" + "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each\n" + "column$are$separated$by$at$least$one$space.\n" + "Further,$allow$for$each$word$in$a$column$to$be$either$left\n" + "justified,$right$justified,$or$center$justified$within$its$column."
let f: obj = newFormatter text
printfn "%A" (printFmt f 0)
printfn "%A" (printFmt f 1)
printfn "%A" (printFmt f 2)
