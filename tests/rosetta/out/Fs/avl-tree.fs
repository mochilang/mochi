// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let Node (data) =
    dict [("Data", data); ("Balance", 0); ("Link", [(); ()])]
let getLink (n) (dir) =
    (n.["Link"]).[dir]
let setLink (n) (dir) (v) =
    let mutable links: obj = n.["Link"]
    links.[dir] <- v
    n.["Link"] <- links
let opp (dir) =
    1 - dir
let single (root) (dir) =
    let mutable tmp: obj = getLink root opp dir
    printfn "%A" (setLink root opp dir getLink tmp dir)
    printfn "%A" (setLink tmp dir root)
    tmp
let double (root) (dir) =
    let mutable tmp: obj = getLink getLink root opp dir dir
    printfn "%A" (setLink getLink root opp dir dir getLink tmp opp dir)
    printfn "%A" (setLink tmp opp dir getLink root opp dir)
    printfn "%A" (setLink root opp dir tmp)
    tmp <- getLink root opp dir
    printfn "%A" (setLink root opp dir getLink tmp dir)
    printfn "%A" (setLink tmp dir root)
    tmp
let adjustBalance (root) (dir) (bal) =
    let mutable n: obj = getLink root dir
    let mutable nn: obj = getLink n opp dir
    if nn.["Balance"] = 0 then
        root.["Balance"] <- 0
        n.["Balance"] <- 0
    nn.["Balance"] <- 0
let insertBalance (root) (dir) =
    let mutable n: obj = getLink root dir
    let mutable bal: int = 2 * dir - 1
    if n.["Balance"] = bal then
        root.["Balance"] <- 0
        n.["Balance"] <- 0
        single root opp dir
    printfn "%A" (adjustBalance root dir bal)
    double root opp dir
let insertR (root) (data) =
    if root = () then
        dict [("node", Node data); ("done", false)]
    let mutable node: obj = root
    let mutable dir: int = 0
    if (node.["Data"]) < data then
        dir <- 1
    let mutable r: obj = insertR getLink node dir data
    printfn "%A" (setLink node dir r.["node"])
    if r.["done"] then
        dict [("node", node); ("done", true)]
    node.["Balance"] <- (node.["Balance"]) + (2 * dir - 1)
    if node.["Balance"] = 0 then
        dict [("node", node); ("done", true)]
    if node.["Balance"] = 1 || node.["Balance"] = (-1) then
        dict [("node", node); ("done", false)]
    dict [("node", insertBalance node dir); ("done", true)]
let Insert (tree) (data) =
    let r: obj = insertR tree data
    r.["node"]
let removeBalance (root) (dir) =
    let mutable n: obj = getLink root opp dir
    let mutable bal: int = 2 * dir - 1
    if n.["Balance"] = (-bal) then
        root.["Balance"] <- 0
        n.["Balance"] <- 0
        dict [("node", single root dir); ("done", false)]
    if n.["Balance"] = bal then
        printfn "%A" (adjustBalance root opp dir (-bal))
        dict [("node", double root dir); ("done", false)]
    root.["Balance"] <- -bal
    n.["Balance"] <- bal
    dict [("node", single root dir); ("done", true)]
let removeR (root) (data) =
    if root = () then
        dict [("node", ()); ("done", false)]
    let mutable node: obj = root
    if (node.["Data"]) = data then
        if getLink node 0 = () then
            dict [("node", getLink node 1); ("done", false)]
        if getLink node 1 = () then
            dict [("node", getLink node 0); ("done", false)]
        let mutable heir: obj = getLink node 0
        while getLink heir 1 <> () do
            heir <- getLink heir 1
        node.["Data"] <- heir.["Data"]
        data <- heir.["Data"]
    let mutable dir: int = 0
    if (node.["Data"]) < data then
        dir <- 1
    let mutable r: obj = removeR getLink node dir data
    printfn "%A" (setLink node dir r.["node"])
    if r.["done"] then
        dict [("node", node); ("done", true)]
    node.["Balance"] <- (node.["Balance"]) + 1 - 2 * dir
    if node.["Balance"] = 1 || node.["Balance"] = (-1) then
        dict [("node", node); ("done", true)]
    if node.["Balance"] = 0 then
        dict [("node", node); ("done", false)]
    removeBalance node dir
let Remove (tree) (data) =
    let r: obj = removeR tree data
    r.["node"]
let indentStr (n) =
    let mutable s: string = ""
    let mutable i: int = 0
    while i < n do
        s <- s + " "
        i <- i + 1
    s
let dumpNode (node) (indent) (comma) =
    let sp: obj = indentStr indent
    if node = () then
        let mutable line: obj = sp + "null"
        if comma then
            line <- line + ","
        printfn "%A" line
    else
        printfn "%A" (sp + "{")
        printfn "%A" (indentStr indent + 3 + "\"Data\": " + string node.["Data"] + ",")
        printfn "%A" (indentStr indent + 3 + "\"Balance\": " + string node.["Balance"] + ",")
        printfn "%A" (indentStr indent + 3 + "\"Link\": [")
        printfn "%A" (dumpNode getLink node 0 indent + 6 true)
        printfn "%A" (dumpNode getLink node 1 indent + 6 false)
        printfn "%A" (indentStr indent + 3 + "]")
        let mutable end: obj = sp + "}"
        if comma then
            end <- end + ","
        printfn "%A" end
let dump (node) (indent) =
    printfn "%A" (dumpNode node indent false)
let main () =
    let mutable tree: obj = ()
    printfn "%s" "Empty tree:"
    printfn "%A" (dump tree 0)
    printfn "%s" ""
    printfn "%s" "Insert test:"
    tree <- Insert tree 3
    tree <- Insert tree 1
    tree <- Insert tree 4
    tree <- Insert tree 1
    tree <- Insert tree 5
    printfn "%A" (dump tree 0)
    printfn "%s" ""
    printfn "%s" "Remove test:"
    tree <- Remove tree 3
    tree <- Remove tree 1
    let mutable t: obj = tree
    t.["Balance"] <- 0
    tree <- t
    printfn "%A" (dump tree 0)
printfn "%A" (main())
