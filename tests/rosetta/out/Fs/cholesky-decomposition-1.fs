// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
open System

let sqrtApprox (x) =
    let mutable guess: obj = x
    let mutable i: int = 0
    while i < 20 do
        guess <- (guess + x / guess) / 2.0
        i <- i + 1
    guess
let makeSym (order) (elements) =
    dict [("order", order); ("ele", elements)]
let unpackSym (m) =
    let n: obj = m.["order"]
    let ele: obj = m.["ele"]
    let mutable mat: obj = [||]
    let mutable idx: int = 0
    let mutable r: int = 0
    while r < n do
        let mutable row: obj = [||]
        let mutable c: int = 0
        while c <= r do
            row <- row @ [ele.[idx]]
            idx <- idx + 1
            c <- c + 1
        while c < n do
            row <- row @ [0.0]
            c <- c + 1
        mat <- mat @ [row]
        r <- r + 1
    r <- 0
    while r < n do
        let mutable c: int = r + 1
        while c < n do
            mat.[r].[c] <- mat.[c].[r]
            c <- c + 1
        r <- r + 1
    mat
let printMat (m) =
    let mutable i: int = 0
    while i < List.length m do
        let mutable line: string = ""
        let mutable j: int = 0
        while j < List.length m.[i] do
            line <- line + string m.[i].[j]
            if j < List.length m.[i] - 1 then
                line <- line + " "
            j <- j + 1
        printfn "%s" line
        i <- i + 1
let printSym (m) =
    printfn "%A" (printMat unpackSym m)
let printLower (m) =
    let n: obj = m.["order"]
    let ele: obj = m.["ele"]
    let mutable mat: obj = [||]
    let mutable idx: int = 0
    let mutable r: int = 0
    while r < n do
        let mutable row: obj = [||]
        let mutable c: int = 0
        while c <= r do
            row <- row @ [ele.[idx]]
            idx <- idx + 1
            c <- c + 1
        while c < n do
            row <- row @ [0.0]
            c <- c + 1
        mat <- mat @ [row]
        r <- r + 1
    printfn "%A" (printMat mat)
let choleskyLower (a) =
    let n: obj = a.["order"]
    let ae: obj = a.["ele"]
    let mutable le: obj = [||]
    let mutable idx: int = 0
    while idx < List.length ae do
        le <- le @ [0.0]
        idx <- idx + 1
    let mutable row: int = 1
    let mutable col: int = 1
    let mutable dr: int = 0
    let mutable dc: int = 0
    let mutable i: int = 0
    while i < List.length ae do
        let e: obj = ae.[i]
        if i < dr then
            let mutable d: obj = (e - le.[i]) / le.[dc]
            le.[i] <- d
            let mutable ci: int = col
            let mutable cx: int = dc
            let mutable j: int = i + 1
            while j <= dr do
                cx <- cx + ci
                ci <- ci + 1
                le.[j] <- le.[j] + d * le.[cx]
                j <- j + 1
            col <- col + 1
            dc <- dc + col
        else
            le.[i] <- sqrtApprox e - le.[i]
            row <- row + 1
            dr <- dr + row
            col <- 1
            dc <- 0
        i <- i + 1
    dict [("order", n); ("ele", le)]
let demo (a) =
    printfn "%s" "A:"
    printfn "%A" (printSym a)
    printfn "%s" "L:"
    let l: obj = choleskyLower a
    printfn "%A" (printLower l)
printfn "%A" (demo makeSym 3 [25.0; 15.0; 18.0; -5.0; 0.0; 11.0])
printfn "%A" (demo makeSym 4 [18.0; 22.0; 70.0; 54.0; 86.0; 174.0; 42.0; 62.0; 134.0; 106.0])
