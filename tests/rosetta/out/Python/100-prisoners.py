# Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
from __future__ import annotations
import time
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()
import sys

sys.set_int_max_str_digits(0)
import os, time

_now_seeded = False
_now_seed = 0


def _now():
    global _now_seeded, _now_seed
    if not _now_seeded:
        s = os.getenv("MOCHI_NOW_SEED")
        if s and s.isdigit():
            _now_seed = int(s)
            _now_seeded = True
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def shuffle(xs):
    arr = xs
    i = 99
    while i > 0:
        j = _now() % (i + 1)
        tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        i = i - 1
    return arr


def doTrials(trials, np, strategy):
    pardoned = 0
    t = 0
    while t < trials:
        drawers = []
        i = 0
        while i < 100:
            drawers = drawers + [i]
            i = i + 1
        drawers = shuffle(drawers)
        p = 0
        success = True
        while p < np:
            found = False
            if strategy == "optimal":
                prev = p
                d = 0
                while d < 50:
                    this = drawers[prev]
                    if this == p:
                        found = True
                        break
                    prev = this
                    d = d + 1
            else:
                opened = []
                k = 0
                while k < 100:
                    opened = opened + [False]
                    k = k + 1
                d = 0
                while d < 50:
                    n = _now() % 100
                    while opened[n]:
                        n = _now() % 100
                    opened[n] = True
                    if drawers[n] == p:
                        found = True
                        break
                    d = d + 1
            if not found:
                success = False
                break
            p = p + 1
        if success:
            pardoned = pardoned + 1
        t = t + 1
    rf = float(pardoned) / float(trials) * 100.0
    print(
        "  strategy = "
        + strategy
        + "  pardoned = "
        + str(pardoned)
        + " relative frequency = "
        + str(rf)
        + "%"
    )


def main():
    trials = 1000
    for np in [10, 100]:
        print(
            "Results from " + str(trials) + " trials with " + str(np) + " prisoners:\n"
        )
        for strat in ["random", "optimal"]:
            doTrials(trials, np, strat)


main()
