# Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()
import sys

sys.set_int_max_str_digits(0)


def _int(v):
    try:
        return int(v)
    except Exception:
        return 0


def pow_big(base, exp):
    result = 1
    b = base
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = result * b
        b = b * b
        e = int(e // 2)
    return result


def bit_len(x):
    n = x
    c = 0
    while n > 0:
        n = n / 2
        c = c + 1
    return c


def ackermann2(m, n):
    global err
    if err != "":
        return 0
    if m <= 3:
        mi = _int(m)
        if mi == 0:
            return n + 1
        if mi == 1:
            return n + 2
        if mi == 2:
            return 2 * n + 3
        if mi == 3:
            nb = bit_len(n)
            if nb > 64:
                err = "A(m,n) had n of " + str(nb) + " bits; too large"
                return 0
            r = pow_big(2, _int(n))
            return 8 * r - 3
    if bit_len(n) == 0:
        return ackermann2(m - 1, 1)
    return ackermann2(m - 1, ackermann2(m, n - 1))


def show(m, n):
    global err
    err = ""
    res = ackermann2(m, n)
    if err != "":
        print("A(" + str(m) + ", " + str(n) + ") = Error: " + err)
        return
    if bit_len(res) <= 256:
        print("A(" + str(m) + ", " + str(n) + ") = " + str(res))
    else:
        s = str(res)
        pre = s[0:20]
        suf = s[len(s) - 20 : len(s)]
        print(
            "A("
            + str(m)
            + ", "
            + str(n)
            + ") = "
            + str(len(s))
            + " digits starting/ending with: "
            + pre
            + "..."
            + suf
        )


def main():
    show(0, 0)
    show(1, 2)
    show(2, 4)
    show(3, 100)
    show(3, 1000000)
    show(4, 1)
    show(4, 2)
    show(4, 3)


err = ""
main()
