# Generated by Mochi compiler v0.10.26 on 2025-07-16T09:56:24Z
def fields(s):
    words = []
    cur = ""
    i = 0
    while i < len(s):
        ch = s[i : i + 1]
        if (ch == " " or ch == "\n") or ch == "\t":
            if len(cur) > 0:
                words = words + [cur]
                cur = ""
        else:
            cur = cur + ch
        i = i + 1
    if len(cur) > 0:
        words = words + [cur]
    return words


def padRight(s, width):
    out = s
    i = len(s)
    while i < width:
        out = out + " "
        i = i + 1
    return out


def join(xs, sep):
    res = ""
    i = 0
    while i < len(xs):
        if i > 0:
            res = res + sep
        res = res + xs[i]
        i = i + 1
    return res


def parseIntStr(_str):
    i = 0
    neg = False
    if len(_str) > 0 and _str[0:1] == "-":
        neg = True
        i = 1
    n = 0
    digits = {
        "_": 0,
        "_": 1,
        "_": 2,
        "_": 3,
        "_": 4,
        "_": 5,
        "_": 6,
        "_": 7,
        "_": 8,
        "_": 9,
    }
    while i < len(_str):
        n = n * 10 + digits[_str[i : i + 1]]
        i = i + 1
    if neg:
        n = -n
    return n


def isDigits(s):
    if len(s) == 0:
        return False
    i = 0
    while i < len(s):
        ch = s[i : i + 1]
        if ch < "0" or ch > "9":
            return False
        i = i + 1
    return True


def readTable(table):
    toks = fields(table)
    cmds = []
    mins = []
    i = 0
    while i < len(toks):
        cmd = toks[i]
        minlen = len(cmd)
        i = i + 1
        if i < len(toks) and isDigits(toks[i]):
            num = parseIntStr(toks[i])
            if num >= 1 and num < len(cmd):
                minlen = num
                i = i + 1
        cmds = cmds + [cmd]
        mins = mins + [minlen]
    return {"commands": cmds, "mins": mins}


def validate(commands, mins, words):
    results = []
    wi = 0
    while wi < len(words):
        w = words[wi]
        found = False
        wlen = len(w)
        ci = 0
        while ci < len(commands):
            cmd = commands[ci]
            if (mins[ci] != 0 and wlen >= mins[ci]) and wlen <= len(cmd):
                c = upper(cmd)
                ww = upper(w)
                if c[0:wlen] == ww:
                    results = results + [c]
                    found = True
                    break
            ci = ci + 1
        if not found:
            results = results + ["*error*"]
        wi = wi + 1
    return results


def main():
    table = (
        ""
        + "add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "
        + "compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "
        + "3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "
        + "forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "
        + "locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "
        + "msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "
        + "refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "
        + "2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 "
    )
    sentence = "riG   rePEAT copies  put mo   rest    types   fup.    6\npoweRin"
    tbl = readTable(table)
    commands = tbl["commands"]
    mins = tbl["mins"]
    words = fields(sentence)
    results = validate(commands, mins, words)
    out1 = "user words:"
    k = 0
    while k < len(words):
        out1 = out1 + " "
        if k < len(words) - 1:
            out1 = out1 + padRight(words[k], len(results[k]))
        else:
            out1 = out1 + words[k]
        k = k + 1
    print(out1)
    print("full words: " + join(results, " "))


main()
