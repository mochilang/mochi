# Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
def validComb(a, b, c, d, e, f, g):
    square1 = a + b
    square2 = b + c + d
    square3 = d + e + f
    square4 = f + g
    return (square1 == square2 and square2 == square3) and square3 == square4


def isUnique(a, b, c, d, e, f, g):
    nums = [a, b, c, d, e, f, g]
    i = 0
    while i < len(nums):
        j = i + 1
        while j < len(nums):
            if nums[i] == nums[j]:
                return False
            j = j + 1
        i = i + 1
    return True


def getCombs(low, high, unique):
    valid = []
    count = 0
    for b in range(low, high + 1):
        for c in range(low, high + 1):
            for d in range(low, high + 1):
                s = b + c + d
                for e in range(low, high + 1):
                    for f in range(low, high + 1):
                        a = s - b
                        g = s - f
                        if a < low or a > high:
                            continue
                        if g < low or g > high:
                            continue
                        if d + e + f != s:
                            continue
                        if f + g != s:
                            continue
                        if not unique or isUnique(a, b, c, d, e, f, g):
                            valid = valid + [[a, b, c, d, e, f, g]]
                            count = count + 1
    return {"count": count, "_list": valid}


r1 = getCombs(1, 7, True)
print(str(r1["count"]) + " unique solutions in 1 to 7")
print(r1["_list"])
r2 = getCombs(3, 9, True)
print(str(r2["count"]) + " unique solutions in 3 to 9")
print(r2["_list"])
r3 = getCombs(0, 9, False)
print(str(r3["count"]) + " non-unique solutions in 0 to 9")
