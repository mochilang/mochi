# Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
from __future__ import annotations
import time
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()
import sys

sys.set_int_max_str_digits(0)
import os, time

_now_seeded = False
_now_seed = 0


def _now():
    global _now_seeded, _now_seed
    if not _now_seeded:
        s = os.getenv("MOCHI_NOW_SEED")
        if s and s.isdigit():
            _now_seed = int(s)
            _now_seeded = True
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def shuffleStr(s):
    arr = []
    i = 0
    while i < len(s):
        arr = arr + [s[i : i + 1]]
        i = i + 1
    j = len(arr) - 1
    while j > 0:
        k = _now() % (j + 1)
        tmp = arr[j]
        arr[j] = arr[k]
        arr[k] = tmp
        j = j - 1
    out = ""
    i = 0
    while i < len(arr):
        out = out + arr[i]
        i = i + 1
    return out


def createPolybius():
    shuffled = shuffleStr(alphabet)
    labels = []
    li = 0
    while li < len(adfgvx):
        labels = labels + [adfgvx[li : li + 1]]
        li = li + 1
    print("6 x 6 Polybius square:\n")
    print("  | A D F G V X")
    print("---------------")
    p = []
    i = 0
    while i < 6:
        row = shuffled[i * 6 : (i + 1) * 6]
        p = p + [row]
        line = str(labels[i : i + 1]) + " | "
        j = 0
        while j < 6:
            line = str(line) + row[j : j + 1] + " "
            j = j + 1
        print(line)
        i = i + 1
    return p


def createKey(n):
    if n < 7 or n > 12:
        print("Key should be within 7 and 12 letters long.")
    pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    key = ""
    i = 0
    while i < n:
        idx = _now() % len(pool)
        key = key + pool[idx]
        pool = pool[:idx] + pool[idx + 1 : len(pool)]
        i = i + 1
    print("\nThe key is " + key)
    return key


def orderKey(key):
    pairs = []
    i = 0
    while i < len(key):
        pairs = pairs + [[key[i : i + 1], i]]
        i = i + 1
    n = len(pairs)
    m = 0
    while m < n:
        j = 0
        while j < n - 1:
            if pairs[j][0] > pairs[j + 1][0]:
                tmp = pairs[j]
                pairs[j] = pairs[j + 1]
                pairs[j + 1] = tmp
            j = j + 1
        m = m + 1
    res = []
    i = 0
    while i < n:
        res = res + [int(pairs[i][1])]
        i = i + 1
    return res


def encrypt(polybius, key, plainText):
    labels = []
    li = 0
    while li < len(adfgvx):
        labels = labels + [adfgvx[li : li + 1]]
        li = li + 1
    temp = ""
    i = 0
    while i < len(plainText):
        r = 0
        while r < 6:
            c = 0
            while c < 6:
                if polybius[r][c : c + 1] == plainText[i : i + 1]:
                    temp = temp + str(labels[r : r + 1]) + str(labels[c : c + 1])
                c = c + 1
            r = r + 1
        i = i + 1
    colLen = len(temp) // len(key)
    if len(temp) % len(key) > 0:
        colLen = colLen + 1
    table = []
    rIdx = 0
    while rIdx < colLen:
        row = []
        j = 0
        while j < len(key):
            row = row + [""]
            j = j + 1
        table = table + [row]
        rIdx = rIdx + 1
    idx = 0
    while idx < len(temp):
        row = idx // len(key)
        col = idx % len(key)
        table[row][col] = temp[idx : idx + 1]
        idx = idx + 1
    order = orderKey(key)
    cols = []
    ci = 0
    while ci < len(key):
        colStr = ""
        ri = 0
        while ri < colLen:
            colStr = colStr + table[ri][order[ci]]
            ri = ri + 1
        cols = cols + [colStr]
        ci = ci + 1
    result = ""
    ci = 0
    while ci < len(cols):
        result = result + cols[ci]
        if ci < len(cols) - 1:
            result = result + " "
        ci = ci + 1
    return result


def indexOf(s, ch):
    i = 0
    while i < len(s):
        if s[i : i + 1] == ch:
            return i
        i = i + 1
    return -1


def decrypt(polybius, key, cipherText):
    colStrs = []
    start = 0
    i = 0
    while i <= len(cipherText):
        if i == len(cipherText) or cipherText[i] == " ":
            colStrs = colStrs + [cipherText[start:i]]
            start = i + 1
        i = i + 1
    maxColLen = 0
    i = 0
    while i < len(colStrs):
        if len(colStrs[i]) > maxColLen:
            maxColLen = len(colStrs[i])
        i = i + 1
    cols = []
    i = 0
    while i < len(colStrs):
        s = colStrs[i]
        ls = []
        j = 0
        while j < len(s):
            ls = ls + [s[j : j + 1]]
            j = j + 1
        if len(s) < maxColLen:
            pad = []
            k = 0
            while k < maxColLen:
                if k < len(ls):
                    pad = pad + [ls[k]]
                else:
                    pad = pad + [""]
                k = k + 1
            cols = cols + [pad]
        else:
            cols = cols + [ls]
        i = i + 1
    table = []
    r = 0
    while r < maxColLen:
        row = []
        c = 0
        while c < len(key):
            row = row + [""]
            c = c + 1
        table = table + [row]
        r = r + 1
    order = orderKey(key)
    r = 0
    while r < maxColLen:
        c = 0
        while c < len(key):
            table[r][order[c]] = cols[c][r]
            c = c + 1
        r = r + 1
    temp = ""
    r = 0
    while r < len(table):
        j = 0
        while j < len(table[r]):
            temp = temp + table[r][j]
            j = j + 1
        r = r + 1
    plainText = ""
    idx = 0
    while idx < len(temp):
        rIdx = indexOf(adfgvx, temp[idx : idx + 1])
        cIdx = indexOf(adfgvx, temp[idx + 1 : idx + 2])
        plainText = plainText + polybius[rIdx][cIdx]
        idx = idx + 2
    return plainText


def main():
    plainText = "ATTACKAT1200AM"
    polybius = createPolybius()
    key = createKey(9)
    print("\nPlaintext : " + plainText)
    cipherText = encrypt(polybius, key, plainText)
    print("\nEncrypted : " + cipherText)
    plainText2 = decrypt(polybius, key, cipherText)
    print("\nDecrypted : " + plainText2)


adfgvx = "ADFGVX"
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
main()
