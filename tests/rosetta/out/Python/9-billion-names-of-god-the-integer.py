# Generated by Mochi compiler v0.10.30 on 1970-01-01T00:00:00Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()
import sys

sys.set_int_max_str_digits(0)


def _append(lst: list[T] | None, v: T) -> list[T]:
    out: list[T] = list(lst) if lst is not None else []
    out.append(v)
    return out


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def bigTrim(a):
    n = len(a)
    while n > 1 and a[n - 1] == 0:
        a = a[0 : n - 1]
        n = n - 1
    return a


def bigFromInt(x):
    if x == 0:
        return [0]
    digits = []
    n = x
    while n > 0:
        digits = digits + [n % 10]
        n = n // 10
    return digits


def bigAdd(a, b):
    res = []
    carry = 0
    i = 0
    while (i < len(a) or i < len(b)) or carry > 0:
        av = 0
        if i < len(a):
            av = a[i]
        bv = 0
        if i < len(b):
            bv = b[i]
        s = av + bv + carry
        res = res + [s % 10]
        carry = s // 10
        i = i + 1
    return bigTrim(res)


def bigSub(a, b):
    res = []
    borrow = 0
    i = 0
    while i < len(a):
        av = a[i]
        bv = 0
        if i < len(b):
            bv = b[i]
        diff = av - bv - borrow
        if diff < 0:
            diff = diff + 10
            borrow = 1
        else:
            borrow = 0
        res = res + [diff]
        i = i + 1
    return bigTrim(res)


def bigToString(a):
    s = ""
    i = len(a) - 1
    while i >= 0:
        s = s + str(a[i])
        i = i - 1
    return s


def minInt(a, b):
    if a < b:
        return a
    else:
        return b


def cumu(n):
    cache = [[bigFromInt(1)]]
    y = 1
    while y <= n:
        row = [bigFromInt(0)]
        x = 1
        while x <= y:
            val = cache[y - x][minInt(x, y - x)]
            row = _append(row, bigAdd(row[_count(row) - 1], val))
            x = x + 1
        cache = cache + [row]
        y = y + 1
    return cache[n]


def row(n):
    e = cumu(n)
    out = []
    i = 0
    while i < n:
        diff = bigSub(e[i + 1], e[i])
        out = out + [bigToString(diff)]
        i = i + 1
    return out


print("rows:")
x = 1
while x < 11:
    r = row(x)
    line = ""
    i = 0
    while i < len(r):
        line = line + " " + r[i] + " "
        i = i + 1
    print(line)
    x = x + 1
print("")
print("sums:")
for num in [23, 123, 1234]:
    r = cumu(num)
    print(str(num) + " " + bigToString(r[len(r) - 1]))
