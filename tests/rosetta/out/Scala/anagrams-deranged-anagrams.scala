// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object anagrams_deranged_anagrams {
  def sortRunes(s: String): String = {
    var arr: List[String] = scala.collection.mutable.ArrayBuffer[String]()
    var i = 0
    while (i < s.length) {
      arr = arr :+ s.substring(i, i + 1)
      i += 1
    }
    var n = arr.length
    var m = 0
    while (m < n) {
      var j = 0
      while (j < n - 1) {
        if ((arr).apply(j) > (arr).apply(j + 1)) {
          val tmp = (arr).apply(j)
          arr(j) = (arr).apply(j + 1)
          arr(j + 1) = tmp
        }
        j += 1
      }
      m += 1
    }
    var out = ""
    i = 0
    while (i < n) {
      out += (arr).apply(i)
      i += 1
    }
    return out
  }
  
  def deranged(a: String, b: String): Boolean = {
    if (a.length != b.length) {
      return false
    }
    var i = 0
    while (i < a.length) {
      if (a.substring(i, i + 1) == b.substring(i, i + 1)) {
        return false
      }
      i += 1
    }
    return true
  }
  
  def main() = {
    val words = List("constitutionalism", "misconstitutional")
    var m: Map[String, List[String]] = scala.collection.mutable.Map[String, List[String]]()
    var bestLen = 0
    var w1 = ""
    var w2 = ""
    for(w <- words) {
      if (w.length <= bestLen) {
        // continue
      }
      val k = sortRunes(w)
      if (!(m.contains(k))) {
        m(k) = List(w)
        // continue
      }
      for(c <- (m).apply(k)) {
        if (deranged(w, c)) {
          bestLen = w.length
          w1 = c
          w2 = w
          return
        }
      }
      m(k) = (m).apply(k) :+ w
    }
    println(w1 + " " + w2 + " : Length " + bestLen.toString)
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
