// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:50:40Z
object animate_a_pendulum {
  val PI = 3.141592653589793
  def sinApprox(x: Double): Double = {
    var term = x
    var sum = x
    var n = 1
    while (n <= 10) {
      val denom = ((2 * n) * (2 * n + 1)).toDouble
      term = -term * x * x / denom
      sum += term
      n += 1
    }
    return sum
  }
  
  def cosApprox(x: Double): Double = {
    var term = 1
    var sum = 1
    var n = 1
    while (n <= 10) {
      val denom = ((2 * n - 1) * (2 * n)).toDouble
      term = -term * x * x / denom
      sum += term
      n += 1
    }
    return sum
  }
  
  def sqrtApprox(x: Double): Double = {
    var guess = x
    var i = 0
    while (i < 10) {
      guess = (guess + x / guess) / 2
      i += 1
    }
    return guess
  }
  
  def main(args: Array[String]): Unit = {
    val L = 10
    val G = 9.81
    val dt = 0.2
    val phi0 = PI / 4
    val omega = sqrtApprox(G / L)
    var t = 0
    for(step <- 0 until 10) {
      val phi = phi0 * cosApprox(omega * t)
      val pos = (10 * sinApprox(phi) + 0.5).toInt
      println(pos.toString)
      t += dt
    }
  }
}
