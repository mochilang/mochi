// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object abundant_odd_numbers {
  def divisors(n: Int): List[Int] = {
    var divs: List[Int] = scala.collection.mutable.ArrayBuffer(1)
    var divs2: List[Int] = scala.collection.mutable.ArrayBuffer[Int]()
    var i = 2
    while (i * i <= n) {
      if (n % i == 0) {
        val j = (n / i).toInt
        divs = divs :+ i
        if (i != j) {
          divs2 = divs2 :+ j
        }
      }
      i += 1
    }
    var j = divs2.length - 1
    while (j >= 0) {
      divs = divs :+ (divs2).apply(j)
      j -= 1
    }
    return divs
  }
  
  def sum(xs: List[Int]): Int = {
    var tot = 0
    for(v <- xs) {
      tot += v
    }
    return tot
  }
  
  def sumStr(xs: List[Int]): String = {
    var s = ""
    var i = 0
    while (i < xs.length) {
      s = s + (xs).apply(i).toString + " + "
      i += 1
    }
    return s.substring(0, s.length - 3)
  }
  
  def pad2(n: Int): String = {
    val s = n.toString
    if (s.length < 2) {
      return " " + s
    }
    return s
  }
  
  def pad5(n: Int): String = {
    var s = n.toString
    while (s.length < 5) {
      s = " " + s
    }
    return s
  }
  
  def abundantOdd(searchFrom: Int, countFrom: Int, countTo: Int, printOne: Boolean): Int = {
    var count = countFrom
    var n = searchFrom
    while (count < countTo) {
      val divs = divisors(n)
      val tot = divs.sum
      if (tot > n) {
        count += 1
        if (printOne && count < countTo) {
          n += 2
          // continue
        }
        val s = sumStr(divs)
        if (!printOne) {
          println(pad2(count) + ". " + pad5(n) + " < " + s + " = " + tot.toString)
        } else {
          println(n.toString + " < " + s + " = " + tot.toString)
        }
      }
      n += 2
    }
    return n
  }
  
  def main() = {
    val max = 25
    println("The first " + max.toString + " abundant odd numbers are:")
    val n = abundantOdd(1, 0, max, false)
    println("\nThe one thousandth abundant odd number is:")
    abundantOdd(n, max, 1000, true)
    println("\nThe first abundant odd number above one billion is:")
    abundantOdd(1000000001, 0, 1, true)
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
