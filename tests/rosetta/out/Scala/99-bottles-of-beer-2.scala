// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object _99_bottles_of_beer_2 {
  def fields(s: String): List[String] = {
    var words: List[String] = scala.collection.mutable.ArrayBuffer[String]()
    var cur = ""
    var i = 0
    while (i < s.length) {
      val ch = s.substring(i, i + 1)
      if (ch == " " || ch == "\n" || ch == "\t") {
        if (cur.length > 0) {
          words = words :+ cur
          cur = ""
        }
      } else {
        cur += ch
      }
      i += 1
    }
    if (cur.length > 0) {
      words = words :+ cur
    }
    return words
  }
  
  def join(xs: List[String], sep: String): String = {
    var res = ""
    var i = 0
    while (i < xs.length) {
      if (i > 0) {
        res += sep
      }
      res += (xs).apply(i)
      i += 1
    }
    return res
  }
  
  def numberName(n: Int): String = {
    val small = List("no", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
    val tens = List("ones", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
    if (n < 0) {
      return ""
    }
    if (n < 20) {
      return (small).apply(n)
    }
    if (n < 100) {
      var t = (tens).apply((n / 10).toInt)
      var s = n % 10
      if (s > 0) {
        t = t + " " + (small).apply(s)
      }
      return t
    }
    return ""
  }
  
  def pluralizeFirst(s: String, n: Int): String = {
    if (n == 1) {
      return s
    }
    val w = fields(s)
    if (w.length > 0) {
      w(0) = (w).apply(0) + "s"
    }
    return join(w, " ")
  }
  
  def randInt(seed: Int, n: Int): Int = {
    val next = (seed * 1664525 + 1013904223) % 2147483647
    return next % n
  }
  
  def slur(p: String, d: Int): String = {
    if (p.length <= 2) {
      return p
    }
    var a: List[String] = scala.collection.mutable.ArrayBuffer[String]()
    var i = 1
    while (i < p.length - 1) {
      a = a :+ p.substring(i, i + 1)
      i += 1
    }
    var idx = a.length - 1
    var seed = d
    while (idx >= 1) {
      seed = (seed * 1664525 + 1013904223) % 2147483647
      if (seed % 100 >= d) {
        val j = seed % (idx + 1)
        val tmp = (a).apply(idx)
        a(idx) = (a).apply(j)
        a(j) = tmp
      }
      idx -= 1
    }
    var s = p.substring(0, 1)
    var k = 0
    while (k < a.length) {
      s += (a).apply(k)
      k += 1
    }
    s += p.substring(p.length - 1, p.length)
    val w = fields(s)
    return join(w, " ")
  }
  
  def main() = {
    var i = 99
    while (i > 0) {
      println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i))
      println(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i))
      println(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i))
      println(slur(numberName(i - 1), i) + " " + pluralizeFirst(slur("bottle of", i), i - 1) + " " + slur("beer on the wall", i))
      i -= 1
    }
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
