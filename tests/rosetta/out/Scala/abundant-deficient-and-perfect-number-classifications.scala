// Generated by Mochi compiler v0.10.26 on 2025-07-16T09:49:45Z
object abundant_deficient_and_perfect_number_classifications {
  def pfacSum(i: Int): Int = {
    var sum = 0
    var p = 1
    while (p <= i / 2) {
      if (i % p == 0) {
        sum += p
      }
      p += 1
    }
    return sum
  }
  
  def main() = {
    var d = 0
    var a = 0
    var pnum = 0
    var i = 1
    while (i <= 20000) {
      val j = pfacSum(i)
      if (j < i) {
        d += 1
      }
      if (j == i) {
        pnum += 1
      }
      if (j > i) {
        a += 1
      }
      i += 1
    }
    println(("There are " + d.toString).asInstanceOf[Int] + " deficient numbers between 1 and 20000")
    println(("There are " + a.toString).asInstanceOf[Int] + " abundant numbers  between 1 and 20000")
    println(("There are " + pnum.toString).asInstanceOf[Int] + " perfect numbers between 1 and 20000")
  }
  
  def main(args: Array[String]): Unit = {
    main()
  }
}
