// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object _9_billion_names_of_god_the_integer {
  def bigTrim(a: List[Int]): List[Int] = {
    var n = a.size
    while (n > 1 && (a).apply(n - 1) == 0) {
      a = a.slice(0, n - 1)
      n -= 1
    }
    return a
  }
  
  def bigFromInt(x: Int): List[Int] = {
    if (x == 0) {
      return List(0)
    }
    var digits: List[Int] = scala.collection.mutable.ArrayBuffer[Int]()
    var n = x
    while (n > 0) {
      digits = digits :+ n % 10
      n /= 10
    }
    return digits
  }
  
  def bigAdd(a: List[Int], b: List[Int]): List[Int] = {
    var res: List[Int] = scala.collection.mutable.ArrayBuffer[Int]()
    var carry = 0
    var i = 0
    while (i < a.size || i < b.size || carry > 0) {
      var av = 0
      if (i < a.size) {
        av = (a).apply(i)
      }
      var bv = 0
      if (i < b.size) {
        bv = (b).apply(i)
      }
      var s = av + bv + carry
      res = res :+ s % 10
      carry = s / 10
      i += 1
    }
    return bigTrim(res)
  }
  
  def bigSub(a: List[Int], b: List[Int]): List[Int] = {
    var res: List[Int] = scala.collection.mutable.ArrayBuffer[Int]()
    var borrow = 0
    var i = 0
    while (i < a.size) {
      var av = (a).apply(i)
      var bv = 0
      if (i < b.size) {
        bv = (b).apply(i)
      }
      var diff = av - bv - borrow
      if (diff < 0) {
        diff += 10
        borrow = 1
      } else {
        borrow = 0
      }
      res = res :+ diff
      i += 1
    }
    return bigTrim(res)
  }
  
  def bigToString(a: List[Int]): String = {
    var s = ""
    var i = a.size - 1
    while (i >= 0) {
      s += (a).apply(i).toString
      i -= 1
    }
    return s
  }
  
  def minInt(a: Int, b: Int): Int = {
    if (a < b) {
      return a
    } else {
      return b
    }
  }
  
  def cumu(n: Int): List[List[Int]] = {
    var cache: List[List[List[Int]]] = scala.collection.mutable.ArrayBuffer(List(bigFromInt(1)))
    var y = 1
    while (y <= n) {
      var row: List[List[Int]] = scala.collection.mutable.ArrayBuffer(bigFromInt(0))
      var x = 1
      while (x <= y) {
        val val = ((cache).apply(y - x)).apply(minInt(x, y - x))
        row = row :+ bigAdd((row).apply(row.size - 1), val)
        x += 1
      }
      cache = cache :+ row
      y += 1
    }
    return (cache).apply(n)
  }
  
  def row(n: Int): List[String] = {
    val e = cumu(n)
    var out: List[String] = scala.collection.mutable.ArrayBuffer[String]()
    var i = 0
    while (i < n) {
      val diff = bigSub((e).apply(i + 1), (e).apply(i))
      out = out :+ bigToString(diff)
      i += 1
    }
    return out
  }
  
  def main(args: Array[String]): Unit = {
    println("rows:")
    var x = 1
    while (x < 11) {
      val r = row(x)
      var line = ""
      var i = 0
      while (i < r.size) {
        line = line + " " + (r).apply(i) + " "
        i += 1
      }
      println(line)
      x += 1
    }
    println("")
    println("sums:")
    for(num <- List(23, 123, 1234)) {
      val r = cumu(num)
      println(num.toString + " " + bigToString((r).apply(r.size - 1)))
    }
  }
}
