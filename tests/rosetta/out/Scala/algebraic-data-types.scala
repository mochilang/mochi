// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object algebraic_data_types {
  case class Auto1(cl: String, le: Any, aa: Int, ri: Any)

  def node(cl: String, le: any, aa: Int, ri: any): Map[String, any] = Auto1(cl = cl, le = le, aa = aa, ri = ri)
  
  def treeString(t: any): String = {
    if ((t).asInstanceOf[Int] == (null).asInstanceOf[Int]) {
      return "E"
    }
    val m = t.asInstanceOf[Map[String, any]]
    return "T(" + (m).apply("cl") + ", " + treeString((m).apply("le")) + ", " + (m).apply("aa").toString + ", " + treeString((m).apply("ri")) + ")"
  }
  
  def balance(t: any): any = {
    if ((t).asInstanceOf[Int] == (null).asInstanceOf[Int]) {
      return t
    }
    val m = t.asInstanceOf[Map[String, any]]
    if (((m).apply("cl")).asInstanceOf[Int] != "B") {
      return t
    }
    val le = (m).apply("le")
    val ri = (m).apply("ri")
    if ((le).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
      val leMap = le.asInstanceOf[Map[String, any]]
      if (((leMap).apply("cl")).asInstanceOf[Int] == "R") {
        val lele = (leMap).apply("le")
        if ((lele).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
          val leleMap = lele.asInstanceOf[Map[String, any]]
          if (((leleMap).apply("cl")).asInstanceOf[Int] == "R") {
            return node("R", node("B", (leleMap).apply("le"), (leleMap).apply("aa"), (leleMap).apply("ri")), (leMap).apply("aa"), node("B", (leMap).apply("ri"), (m).apply("aa"), ri))
          }
        }
        val leri = (leMap).apply("ri")
        if ((leri).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
          val leriMap = leri.asInstanceOf[Map[String, any]]
          if (((leriMap).apply("cl")).asInstanceOf[Int] == "R") {
            return node("R", node("B", (leMap).apply("le"), (leMap).apply("aa"), (leriMap).apply("le")), (leriMap).apply("aa"), node("B", (leriMap).apply("ri"), (m).apply("aa"), ri))
          }
        }
      }
    }
    if ((ri).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
      val riMap = ri.asInstanceOf[Map[String, any]]
      if (((riMap).apply("cl")).asInstanceOf[Int] == "R") {
        val rile = (riMap).apply("le")
        if ((rile).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
          val rileMap = rile.asInstanceOf[Map[String, any]]
          if (((rileMap).apply("cl")).asInstanceOf[Int] == "R") {
            return node("R", node("B", (m).apply("le"), (m).apply("aa"), (rileMap).apply("le")), (rileMap).apply("aa"), node("B", (rileMap).apply("ri"), (riMap).apply("aa"), (riMap).apply("ri")))
          }
        }
        val riri = (riMap).apply("ri")
        if ((riri).asInstanceOf[Int] != (null).asInstanceOf[Int]) {
          val ririMap = riri.asInstanceOf[Map[String, any]]
          if (((ririMap).apply("cl")).asInstanceOf[Int] == "R") {
            return node("R", node("B", (m).apply("le"), (m).apply("aa"), (riMap).apply("le")), (riMap).apply("aa"), node("B", (ririMap).apply("le"), (ririMap).apply("aa"), (ririMap).apply("ri")))
          }
        }
      }
    }
    return t
  }
  
  def ins(tr: any, x: Int): any = {
    if ((tr).asInstanceOf[Int] == (null).asInstanceOf[Int]) {
      return node("R", null, x, null)
    }
    if (x < ((tr).apply("aa")).asInstanceOf[Int]) {
      return balance(node((tr).apply("cl"), ins((tr).apply("le"), x), (tr).apply("aa"), (tr).apply("ri")))
    }
    if (x > ((tr).apply("aa")).asInstanceOf[Int]) {
      return balance(node((tr).apply("cl"), (tr).apply("le"), (tr).apply("aa"), ins((tr).apply("ri"), x)))
    }
    return tr
  }
  
  def insert(tr: any, x: Int): any = {
    val t = ins(tr, x)
    if ((t).asInstanceOf[Int] == (null).asInstanceOf[Int]) {
      return null
    }
    val m = t.asInstanceOf[Map[String, any]]
    return node("B", (m).apply("le"), (m).apply("aa"), (m).apply("ri"))
  }
  
  def main(args: Array[String]): Unit = {
    var tr: any = null
    var i = 1
    while (i <= 16) {
      tr = insert(tr, i)
      i += 1
    }
    println(treeString(tr))
  }
}
