// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
object _4_rings_or_4_squares_puzzle {
  case class Auto1(count: Int, list: List[List[Int]])

  def validComb(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean = {
    val square1 = a + b
    val square2 = b + c + d
    val square3 = d + e + f
    val square4 = f + g
    return square1 == square2 && square2 == square3 && square3 == square4
  }
  
  def isUnique(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int): Boolean = {
    var nums = scala.collection.mutable.ArrayBuffer(a, b, c, d, e, f, g)
    var i = 0
    while (i < nums.length) {
      var j = i + 1
      while (j < nums.length) {
        if ((nums).apply(i) == (nums).apply(j)) {
          return false
        }
        j += 1
      }
      i += 1
    }
    return true
  }
  
  def getCombs(low: Int, high: Int, unique: Boolean): Map[String, any] = {
    var valid = scala.collection.mutable.ArrayBuffer[Any]()
    var count = 0
    for(b <- low until (high + 1)) {
      for(c <- low until (high + 1)) {
        for(d <- low until (high + 1)) {
          val s = b + c + d
          for(e <- low until (high + 1)) {
            for(f <- low until (high + 1)) {
              val a = s - b
              val g = s - f
              if (a < low || a > high) {
                // continue
              }
              if (g < low || g > high) {
                // continue
              }
              if (d + e + f != s) {
                // continue
              }
              if (f + g != s) {
                // continue
              }
              if (!unique || isUnique(a, b, c, d, e, f, g)) {
                valid = valid :+ List(a, b, c, d, e, f, g)
                count += 1
              }
            }
          }
        }
      }
    }
    return Auto1(count = count, list = valid)
  }
  
  def main(args: Array[String]): Unit = {
    val r1 = getCombs(1, 7, true)
    println((r1).apply("count").toString + " unique solutions in 1 to 7")
    println((r1).apply("list"))
    val r2 = getCombs(3, 9, true)
    println((r2).apply("count").toString + " unique solutions in 3 to 9")
    println((r2).apply("list"))
    val r3 = getCombs(0, 9, false)
    println((r3).apply("count").toString + " non-unique solutions in 0 to 9")
  }
}
