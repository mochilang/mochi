func main (regs=40)
  // print("rows:")
  Const        r0, "rows:"
  Print        r0
  // var x = 1
  Const        r1, 1
  Move         r2, r1
L3:
  // while x < 11 {
  Const        r3, 11
  LessInt      r4, r2, r3
  JumpIfFalse  r4, L0
  // let r = row(x)
  Move         r5, r2
  Call         r6, row, r5
  // var line = ""
  Const        r7, ""
  Move         r8, r7
  // var i = 0
  Const        r9, 0
  Move         r10, r9
L2:
  // while i < count(r) {
  Count        r11, r6
  LessInt      r12, r10, r11
  JumpIfFalse  r12, L1
  // line = line + " " + r[i] + " "
  Const        r13, " "
  Add          r14, r8, r13
  Index        r15, r6, r10
  Add          r16, r14, r15
  Const        r13, " "
  Add          r17, r16, r13
  Move         r8, r17
  // i = i + 1
  Const        r1, 1
  AddInt       r18, r10, r1
  Move         r10, r18
  // while i < count(r) {
  Jump         L2
L1:
  // print(line)
  Print        r8
  // x = x + 1
  Const        r1, 1
  AddInt       r19, r2, r1
  Move         r2, r19
  // while x < 11 {
  Jump         L3
L0:
  // print("")
  Const        r7, ""
  Print        r7
  // print("sums:")
  Const        r20, "sums:"
  Print        r20
  // for num in [23, 123, 1234] {
  Const        r21, [23, 123, 1234]
  IterPrep     r22, r21
  Len          r23, r22
  Const        r24, 0
L5:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L4
  Index        r26, r22, r24
  Move         r27, r26
  // let r = cumu(num)
  Move         r28, r27
  Call         r29, cumu, r28
  // print(str(num) + " " + bigToString(r[count(r)-1]))
  Str          r30, r27
  Const        r13, " "
  Add          r31, r30, r13
  Count        r33, r29
  Const        r1, 1
  SubInt       r34, r33, r1
  Index        r35, r29, r34
  Move         r32, r35
  Call         r36, bigToString, r32
  Add          r37, r31, r36
  Print        r37
  // for num in [23, 123, 1234] {
  Const        r38, 1
  AddInt       r39, r24, r38
  Move         r24, r39
  Jump         L5
L4:
  Return       r0

  // fun bigTrim(a: list<int>): list<int> {
func bigTrim (regs=15)
  // var n = count(a)
  Count        r1, r0
  Move         r2, r1
L2:
  // while n > 1 && a[n-1] == 0 {
  Const        r3, 1
  LessInt      r4, r3, r2
  Const        r3, 1
  SubInt       r5, r2, r3
  Index        r6, r0, r5
  Const        r7, 0
  Equal        r8, r6, r7
  Move         r9, r4
  JumpIfFalse  r9, L0
  Move         r9, r8
L0:
  JumpIfFalse  r9, L1
  // a = a[0:n-1]
  Const        r7, 0
  Move         r10, r7
  Const        r3, 1
  SubInt       r12, r2, r3
  Move         r11, r12
  Slice        r13, r0, r10, r11
  Move         r0, r13
  // n = n - 1
  Const        r3, 1
  SubInt       r14, r2, r3
  Move         r2, r14
  // while n > 1 && a[n-1] == 0 {
  Jump         L2
L1:
  // return a
  Return       r0

  // fun bigFromInt(x: int): list<int> {
func bigFromInt (regs=12)
  // if x == 0 { return [0] }
  Const        r1, 0
  Equal        r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, [0]
  Return       r3
L0:
  // var digits: list<int> = []
  Const        r4, []
  Move         r5, r4
  // var n = x
  Move         r6, r0
L2:
  // while n > 0 {
  Const        r1, 0
  Less         r7, r1, r6
  JumpIfFalse  r7, L1
  // digits = append(digits, n % 10)
  Const        r8, 10
  Mod          r9, r6, r8
  Append       r10, r5, r9
  Move         r5, r10
  // n = n / 10
  Const        r8, 10
  DivFloat     r11, r6, r8
  Move         r6, r11
  // while n > 0 {
  Jump         L2
L1:
  // return digits
  Return       r5

  // fun bigAdd(a: list<int>, b: list<int>): list<int> {
func bigAdd (regs=32)
  // var res: list<int> = []
  Const        r2, []
  Move         r3, r2
  // var carry = 0
  Const        r4, 0
  Move         r5, r4
  // var i = 0
  Const        r4, 0
  Move         r6, r4
L4:
  // while i < count(a) || i < count(b) || carry > 0 {
  Count        r7, r0
  LessInt      r8, r6, r7
  Count        r9, r1
  LessInt      r10, r6, r9
  Const        r4, 0
  LessInt      r11, r4, r5
  Move         r12, r8
  JumpIfTrue   r12, L0
  Move         r12, r10
  JumpIfTrue   r12, L0
  Move         r12, r11
L0:
  JumpIfFalse  r12, L1
  // var av = 0
  Const        r4, 0
  Move         r13, r4
  // if i < count(a) { av = a[i] }
  Count        r14, r0
  LessInt      r15, r6, r14
  JumpIfFalse  r15, L2
  Index        r16, r0, r6
  Move         r13, r16
L2:
  // var bv = 0
  Const        r4, 0
  Move         r17, r4
  // if i < count(b) { bv = b[i] }
  Count        r18, r1
  LessInt      r19, r6, r18
  JumpIfFalse  r19, L3
  Index        r20, r1, r6
  Move         r17, r20
L3:
  // var s = av + bv + carry
  Add          r21, r13, r17
  Add          r22, r21, r5
  Move         r23, r22
  // res = append(res, s % 10)
  Const        r24, 10
  Mod          r25, r23, r24
  Append       r26, r3, r25
  Move         r3, r26
  // carry = s / 10
  Const        r24, 10
  DivFloat     r27, r23, r24
  Move         r5, r27
  // i = i + 1
  Const        r28, 1
  AddInt       r29, r6, r28
  Move         r6, r29
  // while i < count(a) || i < count(b) || carry > 0 {
  Jump         L4
L1:
  // return bigTrim(res)
  Move         r30, r3
  Call         r31, bigTrim, r30
  Return       r31

  // fun bigSub(a: list<int>, b: list<int>): list<int> {
func bigSub (regs=26)
  // var res: list<int> = []
  Const        r2, []
  Move         r3, r2
  // var borrow = 0
  Const        r4, 0
  Move         r5, r4
  // var i = 0
  Const        r4, 0
  Move         r6, r4
L4:
  // while i < count(a) {
  Count        r7, r0
  LessInt      r8, r6, r7
  JumpIfFalse  r8, L0
  // var av = a[i]
  Index        r9, r0, r6
  Move         r10, r9
  // var bv = 0
  Const        r4, 0
  Move         r11, r4
  // if i < count(b) { bv = b[i] }
  Count        r12, r1
  LessInt      r13, r6, r12
  JumpIfFalse  r13, L1
  Index        r14, r1, r6
  Move         r11, r14
L1:
  // var diff = av - bv - borrow
  Sub          r15, r10, r11
  Sub          r16, r15, r5
  Move         r17, r16
  // if diff < 0 {
  Const        r4, 0
  Less         r18, r17, r4
  JumpIfFalse  r18, L2
  // diff = diff + 10
  Const        r19, 10
  Add          r20, r17, r19
  Move         r17, r20
  // borrow = 1
  Const        r21, 1
  Move         r5, r21
  // if diff < 0 {
  Jump         L3
L2:
  // borrow = 0
  Const        r4, 0
  Move         r5, r4
L3:
  // res = append(res, diff)
  Append       r22, r3, r17
  Move         r3, r22
  // i = i + 1
  Const        r21, 1
  AddInt       r23, r6, r21
  Move         r6, r23
  // while i < count(a) {
  Jump         L4
L0:
  // return bigTrim(res)
  Move         r24, r3
  Call         r25, bigTrim, r24
  Return       r25

  // fun bigToString(a: list<int>): string {
func bigToString (regs=13)
  // var s = ""
  Const        r1, ""
  Move         r2, r1
  // var i = count(a) - 1
  Count        r3, r0
  Const        r4, 1
  SubInt       r5, r3, r4
  Move         r6, r5
L1:
  // while i >= 0 {
  Const        r7, 0
  LessEqInt    r8, r7, r6
  JumpIfFalse  r8, L0
  // s = s + str(a[i])
  Index        r9, r0, r6
  Str          r10, r9
  Add          r11, r2, r10
  Move         r2, r11
  // i = i - 1
  Const        r4, 1
  SubInt       r12, r6, r4
  Move         r6, r12
  // while i >= 0 {
  Jump         L1
L0:
  // return s
  Return       r2

  // fun minInt(a: int, b: int): int {
func minInt (regs=3)
  // if a < b { return a } else { return b }
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Return       r0
L0:
  Return       r1

  // fun cumu(n: int): list<list<int>> {
func cumu (regs=37)
  // var cache: list<list<list<int>>> = [[bigFromInt(1)]]
  Const        r4, 1
  Move         r3, r4
  Call         r5, bigFromInt, r3
  Move         r2, r5
  MakeList     r6, 1, r2
  Move         r1, r6
  MakeList     r7, 1, r1
  Move         r8, r7
  // var y = 1
  Const        r4, 1
  Move         r9, r4
L3:
  // while y <= n {
  LessEq       r10, r9, r0
  JumpIfFalse  r10, L0
  // var row: list<list<int>> = [bigFromInt(0)]
  Const        r13, 0
  Move         r12, r13
  Call         r14, bigFromInt, r12
  Move         r11, r14
  MakeList     r15, 1, r11
  Move         r16, r15
  // var x = 1
  Const        r4, 1
  Move         r17, r4
L2:
  // while x <= y {
  LessEqInt    r18, r17, r9
  JumpIfFalse  r18, L1
  // let val = cache[y - x][minInt(x, y - x)]
  SubInt       r19, r9, r17
  Index        r20, r8, r19
  Move         r21, r17
  SubInt       r23, r9, r17
  Move         r22, r23
  Call2        r24, minInt, r21, r22
  Index        r25, r20, r24
  // row = append(row, bigAdd(row[count(row)-1], val))
  Count        r28, r16
  Const        r4, 1
  SubInt       r29, r28, r4
  Index        r30, r16, r29
  Move         r26, r30
  Move         r27, r25
  Call2        r31, bigAdd, r26, r27
  Append       r32, r16, r31
  Move         r16, r32
  // x = x + 1
  Const        r4, 1
  AddInt       r33, r17, r4
  Move         r17, r33
  // while x <= y {
  Jump         L2
L1:
  // cache = append(cache, row)
  Append       r34, r8, r16
  Move         r8, r34
  // y = y + 1
  Const        r4, 1
  AddInt       r35, r9, r4
  Move         r9, r35
  // while y <= n {
  Jump         L3
L0:
  // return cache[n]
  Index        r36, r8, r0
  Return       r36

  // fun row(n: int): list<string> {
func row (regs=19)
  // let e = cumu(n)
  Move         r1, r0
  Call         r2, cumu, r1
  // var out: list<string> = []
  Const        r3, []
  Move         r4, r3
  // var i = 0
  Const        r5, 0
  Move         r6, r5
L1:
  // while i < n {
  Less         r7, r6, r0
  JumpIfFalse  r7, L0
  // let diff = bigSub(e[i+1], e[i])
  Const        r10, 1
  AddInt       r11, r6, r10
  Index        r12, r2, r11
  Move         r8, r12
  Index        r13, r2, r6
  Move         r9, r13
  Call2        r14, bigSub, r8, r9
  // out = append(out, bigToString(diff))
  Move         r15, r14
  Call         r16, bigToString, r15
  Append       r17, r4, r16
  Move         r4, r17
  // i = i + 1
  Const        r10, 1
  AddInt       r18, r6, r10
  Move         r6, r18
  // while i < n {
  Jump         L1
L0:
  // return out
  Return       r4
