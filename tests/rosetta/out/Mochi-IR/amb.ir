func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun amb(wordsets: list<list<string>>, res: list<string>, idx: int): bool {
func amb (regs=34)
  // if idx == len(wordsets) {
  Len          r3, r0
  Equal        r4, r2, r3
  JumpIfFalse  r4, L0
  // return true
  Const        r5, true
  Return       r5
L0:
  // var prev = ""
  Const        r6, ""
  Move         r7, r6
  // if idx > 0 {
  Const        r8, 0
  Less         r9, r8, r2
  JumpIfFalse  r9, L1
  // prev = res[idx - 1]
  Const        r10, 1
  Sub          r11, r2, r10
  Index        r12, r1, r11
  Move         r7, r12
L1:
  // var i = 0
  Const        r8, 0
  Move         r13, r8
L5:
  // while i < len(wordsets[idx]) {
  Index        r14, r0, r2
  Len          r15, r14
  LessInt      r16, r13, r15
  JumpIfFalse  r16, L2
  // let w = wordsets[idx][i]
  Index        r17, r0, r2
  Index        r18, r17, r13
  // if idx == 0 || substring(prev, len(prev) - 1, len(prev)) == substring(w, 0, 1) {
  Const        r8, 0
  Equal        r19, r2, r8
  Len          r20, r7
  Const        r10, 1
  SubInt       r21, r20, r10
  Len          r22, r7
  Slice        r23, r7, r21, r22
  Const        r8, 0
  Const        r10, 1
  Slice        r24, r18, r8, r10
  Equal        r25, r23, r24
  Move         r26, r19
  JumpIfTrue   r26, L3
  Move         r26, r25
L3:
  JumpIfFalse  r26, L4
  // res[idx] = w
  SetIndex     r1, r2, r18
  // if amb(wordsets, res, idx + 1) {
  Move         r27, r0
  Move         r28, r1
  Const        r10, 1
  Add          r30, r2, r10
  Move         r29, r30
  Call         r31, amb, r27, r28, r29
  JumpIfFalse  r31, L4
  // return true
  Const        r5, true
  Return       r5
L4:
  // i = i + 1
  Const        r10, 1
  AddInt       r32, r13, r10
  Move         r13, r32
  // while i < len(wordsets[idx]) {
  Jump         L5
L2:
  // return false
  Const        r33, false
  Return       r33

  // fun main() {
func main (regs=31)
  // let wordset = [
  Const        r0, [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]]
  // var res: list<string> = []
  Const        r1, []
  Move         r2, r1
  // var i = 0
  Const        r3, 0
  Move         r4, r3
L1:
  // while i < len(wordset) {
  Const        r5, 4
  LessInt      r6, r4, r5
  JumpIfFalse  r6, L0
  // res = append(res, "")
  Const        r7, ""
  Append       r8, r2, r7
  Move         r2, r8
  // i = i + 1
  Const        r9, 1
  AddInt       r10, r4, r9
  Move         r4, r10
  // while i < len(wordset) {
  Jump         L1
L0:
  // if amb(wordset, res, 0) {
  Const        r14, [["the", "that", "a"], ["frog", "elephant", "thing"], ["walked", "treaded", "grows"], ["slowly", "quickly"]]
  Move         r11, r14
  Move         r12, r2
  Const        r3, 0
  Move         r13, r3
  Call         r15, amb, r11, r12, r13
  JumpIfFalse  r15, L2
  // var out = "[" + res[0]
  Const        r16, "["
  Const        r3, 0
  Index        r17, r2, r3
  Add          r18, r16, r17
  Move         r19, r18
  // var j = 1
  Const        r9, 1
  Move         r20, r9
L4:
  // while j < len(res) {
  Len          r21, r2
  LessInt      r22, r20, r21
  JumpIfFalse  r22, L3
  // out = out + " " + res[j]
  Const        r23, " "
  Add          r24, r19, r23
  Index        r25, r2, r20
  Add          r26, r24, r25
  Move         r19, r26
  // j = j + 1
  Const        r9, 1
  AddInt       r27, r20, r9
  Move         r20, r27
  // while j < len(res) {
  Jump         L4
L3:
  // out = out + "]"
  Const        r28, "]"
  Add          r29, r19, r28
  Move         r19, r29
  // print(out)
  Print        r19
  // if amb(wordset, res, 0) {
  Jump         L5
L2:
  // print("No amb found")
  Const        r30, "No amb found"
  Print        r30
L5:
  Return       r0
