func main (regs=1)
  // main()
  Call         r0, main, 
  Return       r0

  // fun absf(x: float): float {
func absf (regs=4)
  // if x < 0.0 { return -x }
  Const        r1, 0.0
  LessFloat    r2, r0, r1
  JumpIfFalse  r2, L0
  Neg          r3, r0
  Return       r3
L0:
  // return x
  Return       r0

  // fun floorf(x: float): float {
func floorf (regs=3)
  // return (x as int) as float
  Cast         r1, r0, int
  Cast         r2, r1, float
  Return       r2

  // fun indexOf(s: string, ch: string): int {
func indexOf (regs=12)
  // var i = 0
  Const        r2, 0
  Move         r3, r2
L2:
  // while i < len(s) {
  Len          r4, r0
  LessInt      r5, r3, r4
  JumpIfFalse  r5, L0
  // if substring(s, i, i+1) == ch {
  Const        r6, 1
  AddInt       r7, r3, r6
  Slice        r8, r0, r3, r7
  Equal        r9, r8, r1
  JumpIfFalse  r9, L1
  // return i
  Return       r3
L1:
  // i = i + 1
  Const        r6, 1
  AddInt       r10, r3, r6
  Move         r3, r10
  // while i < len(s) {
  Jump         L2
L0:
  // return -1
  Const        r6, 1
  NegInt       r11, r6
  Return       r11

  // fun fmtF(x: float): string {
func fmtF (regs=35)
  // var y = floorf(x * 10000.0 + 0.5) / 10000.0
  Const        r2, 10000.0
  MulFloat     r3, r0, r2
  Const        r4, 0.5
  AddFloat     r5, r3, r4
  Move         r1, r5
  Call         r6, floorf, r1
  Const        r2, 10000.0
  DivFloat     r7, r6, r2
  Move         r8, r7
  // var s = str(y)
  Str          r9, r8
  Move         r10, r9
  // var dot = indexOf(s, ".")
  Move         r11, r10
  Const        r13, "."
  Move         r12, r13
  Call2        r14, indexOf, r11, r12
  Move         r15, r14
  // if dot == 0 - 1 {
  Const        r16, 0
  Const        r17, 1
  SubInt       r18, r16, r17
  Equal        r19, r15, r18
  JumpIfFalse  r19, L0
  // s = s + ".0000"
  Const        r20, ".0000"
  Add          r21, r10, r20
  Move         r10, r21
  // if dot == 0 - 1 {
  Jump         L1
L0:
  // var decs = len(s) - dot - 1
  Len          r22, r10
  Sub          r23, r22, r15
  Const        r17, 1
  Sub          r24, r23, r17
  Move         r25, r24
  // if decs > 4 {
  Const        r26, 4
  Less         r27, r26, r25
  JumpIfFalse  r27, L2
  // s = substring(s, 0, dot + 5)
  Const        r16, 0
  Const        r28, 5
  Add          r29, r15, r28
  Slice        r30, r10, r16, r29
  Move         r10, r30
  // if decs > 4 {
  Jump         L1
L2:
  // while decs < 4 {
  Const        r26, 4
  Less         r31, r25, r26
  JumpIfFalse  r31, L1
  // s = s + "0"
  Const        r32, "0"
  Add          r33, r10, r32
  Move         r10, r33
  // decs = decs + 1
  Const        r17, 1
  Add          r34, r25, r17
  Move         r25, r34
  // while decs < 4 {
  Jump         L2
L1:
  // return s
  Return       r10

  // fun padInt(n: int, width: int): string {
func padInt (regs=8)
  // var s = str(n)
  Str          r2, r0
  Move         r3, r2
L1:
  // while len(s) < width {
  Len          r4, r3
  Less         r5, r4, r1
  JumpIfFalse  r5, L0
  // s = " " + s
  Const        r6, " "
  Add          r7, r6, r3
  Move         r3, r7
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r3

  // fun padFloat(x: float, width: int): string {
func padFloat (regs=9)
  // var s = fmtF(x)
  Move         r2, r0
  Call         r3, fmtF, r2
  Move         r4, r3
L1:
  // while len(s) < width {
  Len          r5, r4
  Less         r6, r5, r1
  JumpIfFalse  r6, L0
  // s = " " + s
  Const        r7, " "
  Add          r8, r7, r4
  Move         r4, r8
  // while len(s) < width {
  Jump         L1
L0:
  // return s
  Return       r4

  // fun avgLen(n: int): float {
func avgLen (regs=30)
  // let tests = 10000
  Const        r1, 10000
  // var sum = 0
  Const        r2, 0
  Move         r3, r2
  // var seed = 1
  Const        r4, 1
  Move         r5, r4
  // var t = 0
  Const        r2, 0
  Move         r6, r2
L5:
  // while t < tests {
  Const        r1, 10000
  LessInt      r7, r6, r1
  JumpIfFalse  r7, L0
  // var visited: list<bool> = []
  Const        r8, []
  Move         r9, r8
  // var i = 0
  Const        r2, 0
  Move         r10, r2
L2:
  // while i < n {
  Less         r11, r10, r0
  JumpIfFalse  r11, L1
  // visited = append(visited, false)
  Const        r12, false
  Append       r13, r9, r12
  Move         r9, r13
  // i = i + 1
  Const        r4, 1
  AddInt       r14, r10, r4
  Move         r10, r14
  // while i < n {
  Jump         L2
L1:
  // var x = 0
  Const        r2, 0
  Move         r15, r2
L4:
  // while !visited[x] {
  Index        r16, r9, r15
  Not          r17, r16
  JumpIfFalse  r17, L3
  // visited[x] = true
  Const        r18, true
  SetIndex     r9, r15, r18
  // sum = sum + 1
  Const        r4, 1
  AddInt       r19, r3, r4
  Move         r3, r19
  // seed = (seed * 1664525 + 1013904223) % 2147483647
  Const        r20, 1664525
  MulInt       r21, r5, r20
  Const        r22, 1013904223
  AddInt       r23, r21, r22
  Const        r24, 2147483647
  ModInt       r25, r23, r24
  Move         r5, r25
  // x = seed % n
  Mod          r26, r5, r0
  Move         r15, r26
  // while !visited[x] {
  Jump         L4
L3:
  // t = t + 1
  Const        r4, 1
  AddInt       r27, r6, r4
  Move         r6, r27
  // while t < tests {
  Jump         L5
L0:
  // return (sum as float) / tests
  Cast         r28, r3, float
  Const        r1, 10000
  DivFloat     r29, r28, r1
  Return       r29

  // fun ana(n: int): float {
func ana (regs=13)
  // var nn = n as float
  Cast         r1, r0, float
  Move         r2, r1
  // var term = 1.0
  Const        r3, 1.0
  Move         r4, r3
  // var sum = 1.0
  Const        r3, 1.0
  Move         r5, r3
  // var i = nn - 1.0
  Const        r3, 1.0
  SubFloat     r6, r2, r3
  Move         r7, r6
L1:
  // while i >= 1.0 {
  Const        r3, 1.0
  LessEqFloat  r8, r3, r7
  JumpIfFalse  r8, L0
  // term = term * (i / nn)
  DivFloat     r9, r7, r2
  MulFloat     r10, r4, r9
  Move         r4, r10
  // sum = sum + term
  AddFloat     r11, r5, r4
  Move         r5, r11
  // i = i - 1.0
  Const        r3, 1.0
  SubFloat     r12, r7, r3
  Move         r7, r12
  // while i >= 1.0 {
  Jump         L1
L0:
  // return sum
  Return       r5

  // fun main() {
func main (regs=44)
  // let nmax = 20
  Const        r0, 20
  // print(" N    average    analytical    (error)")
  Const        r1, " N    average    analytical    (error)"
  Print        r1
  // print("===  =========  ============  =========")
  Const        r2, "===  =========  ============  ========="
  Print        r2
  // var n = 1
  Const        r3, 1
  Move         r4, r3
L1:
  // while n <= nmax {
  Const        r0, 20
  LessEqInt    r5, r4, r0
  JumpIfFalse  r5, L0
  // let a = avgLen(n)
  Move         r6, r4
  Call         r7, avgLen, r6
  // let b = ana(n)
  Move         r8, r4
  Call         r9, ana, r8
  // let err = absf(a - b) / b * 100.0
  Sub          r11, r7, r9
  Move         r10, r11
  Call         r12, absf, r10
  DivFloat     r13, r12, r9
  Const        r14, 100.0
  MulFloat     r15, r13, r14
  // var line = padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
  Move         r16, r4
  Const        r18, 3
  Move         r17, r18
  Call2        r19, padInt, r16, r17
  Const        r20, "  "
  Add          r21, r19, r20
  Move         r22, r7
  Const        r24, 9
  Move         r23, r24
  Call2        r25, padFloat, r22, r23
  Add          r26, r21, r25
  Const        r20, "  "
  Add          r27, r26, r20
  Move         r28, r9
  Const        r30, 12
  Move         r29, r30
  Call2        r31, padFloat, r28, r29
  Add          r32, r27, r31
  Const        r33, "  ("
  Add          r34, r32, r33
  Move         r35, r15
  Const        r37, 6
  Move         r36, r37
  Call2        r38, padFloat, r35, r36
  Add          r39, r34, r38
  Const        r40, "%)"
  Add          r41, r39, r40
  Move         r42, r41
  // print(line)
  Print        r42
  // n = n + 1
  Const        r3, 1
  AddInt       r43, r4, r3
  Move         r4, r43
  // while n <= nmax {
  Jump         L1
L0:
  Return       r0
