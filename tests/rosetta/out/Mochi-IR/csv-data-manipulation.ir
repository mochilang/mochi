func main (regs=39)
  // var rows: list<list<string>> = [
  Const        r0, [["A", "B", "C"], ["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"]]
  Move         r1, r0
  // rows[0] = append(rows[0], "SUM")
  Const        r2, 0
  Index        r3, r1, r2
  Const        r4, "SUM"
  Append       r5, r3, r4
  Const        r2, 0
  SetIndex     r1, r2, r5
  // var i = 1
  Const        r6, 1
  Move         r7, r6
L3:
  // while i < len(rows) {
  Const        r8, 4
  LessInt      r9, r7, r8
  JumpIfFalse  r9, L0
  // var sum = 0
  Const        r2, 0
  Move         r10, r2
  // for s in rows[i] { sum = sum + parseIntStr(s) }
  Index        r11, r1, r7
  IterPrep     r12, r11
  Len          r13, r12
  Const        r14, 0
L2:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L1
  Index        r16, r12, r14
  Move         r17, r16
  Move         r18, r17
  Call         r19, parseIntStr, r18
  Add          r20, r10, r19
  Move         r10, r20
  Const        r21, 1
  AddInt       r22, r14, r21
  Move         r14, r22
  Jump         L2
L1:
  // rows[i] = append(rows[i], str(sum))
  Index        r23, r1, r7
  Str          r24, r10
  Append       r25, r23, r24
  SetIndex     r1, r7, r25
  // i = i + 1
  Const        r6, 1
  AddInt       r26, r7, r6
  Move         r7, r26
  // while i < len(rows) {
  Jump         L3
L0:
  // for r in rows { print(join(r, ",")) }
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, 0
L5:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L4
  Index        r31, r27, r29
  Move         r32, r31
  Move         r33, r32
  Const        r35, ","
  Move         r34, r35
  Call2        r36, join, r33, r34
  Print        r36
  Const        r37, 1
  AddInt       r38, r29, r37
  Move         r29, r38
  Jump         L5
L4:
  Return       r0

  // fun join(xs: list<string>, sep: string): string {
func join (regs=14)
  // var res = ""
  Const        r2, ""
  Move         r3, r2
  // var i = 0
  Const        r4, 0
  Move         r5, r4
L2:
  // while i < len(xs) {
  Len          r6, r0
  LessInt      r7, r5, r6
  JumpIfFalse  r7, L0
  // if i > 0 { res = res + sep }
  Const        r4, 0
  LessInt      r8, r4, r5
  JumpIfFalse  r8, L1
  Add          r9, r3, r1
  Move         r3, r9
L1:
  // res = res + xs[i]
  Index        r10, r0, r5
  Add          r11, r3, r10
  Move         r3, r11
  // i = i + 1
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  // while i < len(xs) {
  Jump         L2
L0:
  // return res
  Return       r3

  // fun parseIntStr(str: string): int {
func parseIntStr (regs=29)
  // var i = 0
  Const        r1, 0
  Move         r2, r1
  // var neg = false
  Const        r3, false
  Move         r4, r3
  // if len(str) > 0 && str[0:1] == "-" {
  Len          r5, r0
  Const        r1, 0
  LessInt      r6, r1, r5
  Const        r1, 0
  Move         r7, r1
  Const        r9, 1
  Move         r8, r9
  Slice        r10, r0, r7, r8
  Const        r11, "-"
  Equal        r12, r10, r11
  Move         r13, r6
  JumpIfFalse  r13, L0
  Move         r13, r12
L0:
  JumpIfFalse  r13, L1
  // neg = true
  Const        r14, true
  Move         r4, r14
  // i = 1
  Const        r9, 1
  Move         r2, r9
L1:
  // var n = 0
  Const        r1, 0
  Move         r15, r1
  // let digits = {
  Const        r16, {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
L3:
  // while i < len(str) {
  Len          r17, r0
  LessInt      r18, r2, r17
  JumpIfFalse  r18, L2
  // n = n * 10 + digits[str[i:i+1]]
  Const        r19, 10
  MulInt       r20, r15, r19
  Move         r21, r2
  Const        r9, 1
  AddInt       r23, r2, r9
  Move         r22, r23
  Slice        r24, r0, r21, r22
  Index        r25, r16, r24
  Add          r26, r20, r25
  Move         r15, r26
  // i = i + 1
  Const        r9, 1
  AddInt       r27, r2, r9
  Move         r2, r27
  // while i < len(str) {
  Jump         L3
L2:
  // if neg { n = -n }
  JumpIfFalse  r4, L4
  Neg          r28, r15
  Move         r15, r28
L4:
  // return n
  Return       r15
