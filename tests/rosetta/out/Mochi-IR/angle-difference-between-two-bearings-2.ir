func main (regs=17)
  // var testCases = [
  Const        r0, [[20.0, 45.0], [-45.0, 45.0], [-85.0, 90.0], [-95.0, 90.0], [-45.0, 125.0], [-45.0, 145.0], [29.4803, -88.6381], [-78.3251, -159.036], [-70099.74233810938, 29840.67437876723], [-165313.6666297357, 33693.9894517456], [1174.8380510598456, -154146.66490124757], [60175.77306795546, 42213.07192354373]]
  Move         r1, r0
  // for tc in testCases {
  IterPrep     r2, r1
  Len          r3, r2
  Const        r4, 0
L1:
  LessInt      r5, r4, r3
  JumpIfFalse  r5, L0
  Index        r6, r2, r4
  Move         r7, r6
  // print(angleDiff(tc[0], tc[1]))
  Const        r10, 0
  Index        r11, r7, r10
  Move         r8, r11
  Const        r12, 1
  Index        r13, r7, r12
  Move         r9, r13
  Call2        r14, angleDiff, r8, r9
  Print        r14
  // for tc in testCases {
  Const        r15, 1
  AddInt       r16, r4, r15
  Move         r4, r16
  Jump         L1
L0:
  Return       r0

  // fun angleDiff(b1: float, b2: float): float {
func angleDiff (regs=10)
  // let diff = b2 - b1
  Sub          r2, r1, r0
  // return ((diff % 360.0 + 360.0 + 180.0) % 360.0) - 180.0
  Const        r3, 360.0
  ModFloat     r4, r2, r3
  Const        r3, 360.0
  AddFloat     r5, r4, r3
  Const        r6, 180.0
  AddFloat     r7, r5, r6
  Const        r3, 360.0
  ModFloat     r8, r7, r3
  Const        r6, 180.0
  SubFloat     r9, r8, r6
  Return       r9
