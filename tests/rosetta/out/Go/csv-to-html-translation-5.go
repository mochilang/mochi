//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func split(s string, sep string) []string {
	var out []string = []string{}
	start := 0
	i := 0
	n := len(any(sep))
	for i <= (len(any(s)) - n) {
		if string([]rune(s)[i:(i+n)]) == sep {
			out = append(_toAnySlice(out), any(string([]rune(s)[start:i])))
			i = (i + n)
			start = i
		} else {
			i = (i + 1)
		}
	}
	out = append(_toAnySlice(out), any(string([]rune(s)[start:len(any(s))])))
	return out
}

// line 19
func htmlEscape(s string) string {
	out := ""
	i := 0
	for i < len(any(s)) {
		ch := string([]rune(s)[i:(i + 1)])
		if ch == "&" {
			out = out + "&amp;"
		} else if ch == "<" {
			out = out + "&lt;"
		} else if ch == ">" {
			out = out + "&gt;"
		} else {
			out = out + ch
		}
		i = (i + 1)
	}
	return out
}

func main() {
	c := "Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n" + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n" + "The multitude,Who are you?\n" + "Brians mother,I'm his mother; that's who!\n" + "The multitude,Behold his mother! Behold his mother!"
	var rows [][]string = [][]string{}
	for _, line := range split(c, "\n") {
		rows = append(_toAnySlice(rows), any(split(line, ",")))
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("<table>")), "\n"))
	for _, row := range rows {
		cells := ""
		for _, cell := range row {
			cells = cells + "<td>" + htmlEscape(cell) + "</td>"
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("    <tr>"+cells+"</tr>")), "\n"))
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("</table>")), "\n"))
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
