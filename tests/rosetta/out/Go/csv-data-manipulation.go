//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func join(xs []string, sep string) string {
	res := ""
	i := 0
	for i < len(any(xs)) {
		if i > 0 {
			res = res + sep
		}
		res = res + xs[i]
		i = (i + 1)
	}
	return res
}

// line 12
func parseIntStr(str string) int {
	i := 0
	neg := false
	if (len(any(str)) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	n := 0
	digits := map[string]int{
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	}
	for i < len(any(str)) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = -n
	}
	return n
}

var i int

func main() {
	i = 1
	var rows [][]string = [][]string{
		[]string{"A", "B", "C"},
		[]string{"1", "2", "3"},
		[]string{"4", "5", "6"},
		[]string{"7", "8", "9"},
	}
	rows[0] = append(_toAnySlice(rows[0]), any("SUM"))
	for i < len(any(rows)) {
		sum := 0
		for _, s := range rows[i] {
			sum = (sum + parseIntStr(s))
		}
		rows[i] = append(_toAnySlice(rows[i]), any(fmt.Sprint(any(sum))))
		i = (i + 1)
	}
	for _, r := range rows {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(join(r, ","))), "\n"))
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
