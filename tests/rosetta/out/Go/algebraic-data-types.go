//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
	"strings"
)

type v map[string]any

// line 4
func node(cl string, le any, aa int, ri any) map[string]any {
	return map[string]any{
		"cl": cl,
		"le": le,
		"aa": aa,
		"ri": ri,
	}
}

// line 8
func treeString(t any) string {
	if _equal(t, nil) {
		return "E"
	}
	m := (t).(map[string]any)
	return ("T(" + fmt.Sprint(m["cl"]) + ", " + treeString(m["le"]) + ", " + fmt.Sprint(m["aa"]) + ", " + treeString(m["ri"]) + ")").(string)
}

// line 16
func balance(t any) any {
	if _equal(t, nil) {
		return (t).(any)
	}
	m := (t).(map[string]any)
	if !_equal(m["cl"], "B") {
		return (t).(any)
	}
	le := m["le"]
	ri := m["ri"]
	if !_equal(le, nil) {
		leMap := (le).(map[string]any)
		if _equal(leMap["cl"], "R") {
			lele := leMap["le"]
			if !_equal(lele, nil) {
				leleMap := (lele).(map[string]any)
				if _equal(leleMap["cl"], "R") {
					return any(node("R", any(node("B", leleMap["le"], (leleMap["aa"]).(int), leleMap["ri"])), (leMap["aa"]).(int), any(node("B", leMap["ri"], (m["aa"]).(int), ri))))
				}
			}
			leri := leMap["ri"]
			if !_equal(leri, nil) {
				leriMap := (leri).(map[string]any)
				if _equal(leriMap["cl"], "R") {
					return any(node("R", any(node("B", leMap["le"], (leMap["aa"]).(int), leriMap["le"])), (leriMap["aa"]).(int), any(node("B", leriMap["ri"], (m["aa"]).(int), ri))))
				}
			}
		}
	}
	if !_equal(ri, nil) {
		riMap := (ri).(map[string]any)
		if _equal(riMap["cl"], "R") {
			rile := riMap["le"]
			if !_equal(rile, nil) {
				rileMap := (rile).(map[string]any)
				if _equal(rileMap["cl"], "R") {
					return any(node("R", any(node("B", m["le"], (m["aa"]).(int), rileMap["le"])), (rileMap["aa"]).(int), any(node("B", rileMap["ri"], (riMap["aa"]).(int), riMap["ri"]))))
				}
			}
			riri := riMap["ri"]
			if !_equal(riri, nil) {
				ririMap := (riri).(map[string]any)
				if _equal(ririMap["cl"], "R") {
					return any(node("R", any(node("B", m["le"], (m["aa"]).(int), riMap["le"])), (riMap["aa"]).(int), any(node("B", ririMap["le"], (ririMap["aa"]).(int), ririMap["ri"]))))
				}
			}
		}
	}
	return (t).(any)
}

// line 65
func ins(tr any, x int) any {
	if _equal(tr, nil) {
		return any(node("R", nil, x, nil))
	}
	if x < ((tr).(map[string]any)["aa"]).(int) {
		return (balance(any(node(((tr).(map[string]any)["cl"]).(string), ins((tr).(map[string]any)["le"], x), ((tr).(map[string]any)["aa"]).(int), (tr).(map[string]any)["ri"])))).(any)
	}
	if x > ((tr).(map[string]any)["aa"]).(int) {
		return (balance(any(node(((tr).(map[string]any)["cl"]).(string), (tr).(map[string]any)["le"], ((tr).(map[string]any)["aa"]).(int), ins((tr).(map[string]any)["ri"], x))))).(any)
	}
	return (tr).(any)
}

// line 78
func insert(tr any, x int) any {
	t := ins(tr, x)
	if _equal(t, nil) {
		return (nil).(any)
	}
	m := (t).(map[string]any)
	return any(node("B", m["le"], (m["aa"]).(int), m["ri"]))
}

var tr any

func main() {
	tr = nil
	i := 1
	for i <= 16 {
		tr = insert(tr, i)
		i = (i + 1)
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(treeString(tr))), "\n"))
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
