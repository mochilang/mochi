//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

type Colour struct {
	R int `json:"R"`
	G int `json:"G"`
	B int `json:"B"`
}
type Bitmap struct {
	Width  int        `json:"width"`
	Height int        `json:"height"`
	Pixels [][]Colour `json:"pixels"`
}

// line 15
func newBitmap(w int, h int, c Colour) Bitmap {
	var rows [][]Colour = [][]Colour{}
	y := 0
	for y < h {
		var row []Colour = []Colour{}
		x := 0
		for x < w {
			row = append(_toAnySlice(row), any(c))
			x = (x + 1)
		}
		rows = append(_toAnySlice(rows), any(row))
		y = (y + 1)
	}
	return Bitmap{Width: w, Height: h, Pixels: rows}
}

// line 31
func setPixel(b *Bitmap, x int, y int, c Colour) {
	rows := b.Pixels
	row := rows[y]
	row[x] = c
	rows[y] = row
	b.Pixels = rows
}

// line 39
func fillRect(b Bitmap, x int, y int, w int, h int, c Colour) {
	yy := y
	for yy < (y + h) {
		xx := x
		for xx < (x + w) {
			setPixel(&b, xx, yy, &c)
			xx = (xx + 1)
		}
		yy = (yy + 1)
	}
}

// line 51
func pad(n int, width int) string {
	s := fmt.Sprint(any(n))
	for len(any(s)) < width {
		s = " " + s
	}
	return s
}

// line 57
func writePPMP3(b Bitmap) string {
	maxv := 0
	y := 0
	for y < b.Height {
		x := 0
		for x < b.Width {
			p := b.Pixels[y][x]
			_ = p
			if p.R > maxv {
				maxv = p.R
			}
			if p.G > maxv {
				maxv = p.G
			}
			if p.B > maxv {
				maxv = p.B
			}
			x = (x + 1)
		}
		y = (y + 1)
	}
	out := "P3\n# generated from Bitmap.writeppmp3\n" + fmt.Sprint(any(b.Width)) + " " + fmt.Sprint(any(b.Height)) + "\n" + fmt.Sprint(any(maxv)) + "\n"
	numsize := len(any(fmt.Sprint(any(maxv))))
	y = (b.Height - 1)
	for y >= 0 {
		line := ""
		x := 0
		for x < b.Width {
			p := b.Pixels[y][x]
			_ = p
			line = line + "   " + pad(p.R, numsize) + " " + pad(p.G, numsize) + " " + pad(p.B, numsize)
			x = (x + 1)
		}
		out = out + line
		if y > 0 {
			out = out + "\n"
		} else {
			out = out + "\n"
		}
		y = (y - 1)
	}
	return out
}

// line 89
func main() {
	black := Colour{R: 0, G: 0, B: 0}
	white := Colour{R: 255, G: 255, B: 255}
	bm := newBitmap(4, 4, &black)
	fillRect(&bm, 1, 0, 1, 2, &white)
	setPixel(&bm, 3, 3, &Colour{R: 127, G: 0, B: 63})
	ppm := writePPMP3(&bm)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(ppm)), "\n"))
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
