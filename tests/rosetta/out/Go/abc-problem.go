//go:build ignore

// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
)

type v map[string]any

// line 2
func fields(s string) []string {
	var res []string = []string{}
	cur := ""
	i := 0
	for i < _count(s) {
		c := string([]rune(s)[i:(i + 1)])
		if c == " " {
			if _count(cur) > 0 {
				res = append(res, cur)
				cur = ""
			}
		} else {
			cur = cur + c
		}
		i = (i + 1)
	}
	if _count(cur) > 0 {
		res = append(res, cur)
	}
	return res
}

// line 24
func canSpell(word string, blks []string) bool {
	if _count(word) == 0 {
		return true
	}
	c := strings.ToLower(any(string([]rune(word)[0:1])))
	i := 0
	for i < _count(_toAnySlice(blks)) {
		b := blks[i]
		if (c == strings.ToLower(any(string([]rune(b)[0:1])))) || (c == strings.ToLower(any(string([]rune(b)[1:2])))) {
			var rest []string = []string{}
			j := 0
			for j < _count(_toAnySlice(blks)) {
				if j != i {
					rest = append(rest, blks[j])
				}
				j = (j + 1)
			}
			if canSpell(string([]rune(word)[1:len([]rune(word))]), rest) {
				return true
			}
		}
		i = (i + 1)
	}
	return false
}

// line 44
func newSpeller(blocks string) func(string) bool {
	bl := fields(blocks)
	return func(w string) bool {
		return canSpell(w, bl)
	}
}

// line 49
func mainFn() {
	sp := newSpeller("BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM")
	for _, word := range []string{
		"A",
		"BARK",
		"BOOK",
		"TREAT",
		"COMMON",
		"SQUAD",
		"CONFUSE",
	} {
		fmt.Println(any(word + " " + fmt.Sprint(any(sp(word)))))
	}
}

func main() {
	mainFn()
}

func _count(v any) int {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items)
	}
	switch s := v.(type) {
	case []any:
		return len(s)
	case []int:
		return len(s)
	case []float64:
		return len(s)
	case []string:
		return len(s)
	case []bool:
		return len(s)
	case []map[string]any:
		return len(s)
	case map[string]any:
		return len(s)
	case string:
		return len([]rune(s))
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		return rv.Len()
	}
	panic("count() expects list or group")
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
