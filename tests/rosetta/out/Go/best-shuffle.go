//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 1
func nextRand(seed int) int {
	return (((seed * 1664525) + 1013904223) % 2147483647)
}

// line 5
func shuffleChars(s string, seed int) []any {
	var chars []string = []string{}
	i := 0
	for i < len(s) {
		chars = append(chars, string([]rune(s)[i:(i+1)]))
		i = (i + 1)
	}
	sd := seed
	idx := (len(chars) - 1)
	for idx > 0 {
		sd = nextRand(sd)
		j := (sd % (idx + 1))
		tmp := chars[idx]
		chars[idx] = chars[j]
		chars[j] = tmp
		idx = (idx - 1)
	}
	res := ""
	i = 0
	for i < len(chars) {
		res = res + chars[i]
		i = (i + 1)
	}
	return []any{res, sd}
}

// line 31
func bestShuffle(s string, seed int) []any {
	r := shuffleChars(s, seed)
	t := r[0]
	sd := r[1]
	var arr []string = []string{}
	i := 0
	for i < len(t) {
		arr = append(arr, string([]rune((t).(string))[i:(i+1)]))
		i = (i + 1)
	}
	i = 0
	for i < len(arr) {
		j := 0
		for j < len(arr) {
			if ((i != j) && (arr[i] != string([]rune(s)[j:(j+1)]))) && (arr[j] != string([]rune(s)[i:(i+1)])) {
				tmp := arr[i]
				arr[i] = arr[j]
				arr[j] = tmp
				break
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	count := 0
	i = 0
	for i < len(arr) {
		if arr[i] == string([]rune(s)[i:(i+1)]) {
			count = (count + 1)
		}
		i = (i + 1)
	}
	out := ""
	i = 0
	for i < len(arr) {
		out = out + arr[i]
		i = (i + 1)
	}
	return []any{out, sd, count}
}

// line 72
func main() {
	ts := []string{
		"abracadabra",
		"seesaw",
		"elk",
		"grrrrrr",
		"up",
		"a",
	}
	seed := 1
	i := 0
	for i < len(ts) {
		r := bestShuffle(ts[i], seed)
		shuf := r[0]
		seed = (((r[1]).(int)).(int)).(int)
		cnt := r[2]
		fmt.Println(ts[i] + " -> " + fmt.Sprint(shuf) + " (" + fmt.Sprint(cnt) + ")")
		i = (i + 1)
	}
}

func main() {
	main()
}
