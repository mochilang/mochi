//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 2
func parseBool(s string) bool {
	l := strings.ToLower(any(s))
	if ((((l == "1") || (l == "t")) || (l == true)) || (l == "yes")) || (l == "y") {
		return true
	}
	return false
}

// line 10
func main() {
	n := true
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(func() int {
		if any(n) {
			return 1
		}
		return 0
	}()), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("bool")), "\n"))
	n = !(n)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(func() int {
		if any(n) {
			return 1
		}
		return 0
	}()), "\n"))
	x := 5
	y := 8
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("x == y:"), func() int {
		if x == y {
			return 1
		}
		return 0
	}()), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("x < y:"), func() int {
		if x < y {
			return 1
		}
		return 0
	}()), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nConvert String into Boolean Data type\n")), "\n"))
	str1 := "japan"
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Before :"), "string"), "\n"))
	bolStr := parseBool(str1)
	_ = bolStr
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("After :"), "bool"), "\n"))
}

func main() {
	main()
}
