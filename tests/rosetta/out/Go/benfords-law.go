//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func floorf(x float64) float64 {
	return float64((int(x)))
}

// line 8
func indexOf(s string, ch string) int {
	i := 0
	for i < len(any(s)) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 19
func fmtF3(x float64) string {
	y := (floorf(((x * 1000.0) + 0.5)) / 1000.0)
	s := fmt.Sprint(any(y))
	dot := indexOf(s, ".")
	if dot == (0 - 1) {
		s = s + ".000"
	} else {
		decs := ((len(any(s)) - dot) - 1)
		if decs > 3 {
			s = string([]rune(s)[0:(dot + 4)])
		} else {
			for decs < 3 {
				s = s + "0"
				decs = (decs + 1)
			}
		}
	}
	return s
}

// line 39
func padFloat3(x float64, width int) string {
	s := fmtF3(x)
	for len(any(s)) < width {
		s = " " + s
	}
	return s
}

// line 47
func fib1000() []float64 {
	a := 0.0
	b := 1.0
	var res []float64 = []float64{}
	i := 0
	for i < 1000 {
		res = append(_toAnySlice(res), any(b))
		t := b
		b = (b + a)
		a = t
		i = (i + 1)
	}
	return res
}

// line 62
func leadingDigit(x float64) int {
	if x < 0.0 {
		x = -x
	}
	for x >= 10.0 {
		x = (x / 10.0)
	}
	for (x > 0.0) && (x < 1.0) {
		x = (x * 10.0)
	}
	return int(x)
}

// line 69
func show(nums []float64, title string) {
	counts := []int{
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
	}
	for _, n := range nums {
		d := leadingDigit(n)
		if (d >= 1) && (d <= 9) {
			counts[(d - 1)] = (counts[(d-1)] + 1)
		}
	}
	preds := []float64{
		0.301,
		0.176,
		0.125,
		0.097,
		0.079,
		0.067,
		0.058,
		0.051,
		0.046,
	}
	total := len(any(nums))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(title)), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Digit  Observed  Predicted")), "\n"))
	i := 0
	for i < 9 {
		obs := ((float64(counts[i])) / (float64(total)))
		line := "  " + fmt.Sprint(any((i + 1))) + "  " + padFloat3(obs, 9) + "  " + padFloat3(preds[i], 8)
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
		i = (i + 1)
	}
}

// line 90
func main() {
	show(fib1000(), "First 1000 Fibonacci numbers")
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
