//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func primeFactors(n int) []int {
	var factors []int = []int{}
	x := n
	for (x % 2) == 0 {
		factors = append(_toAnySlice(factors), any(2))
		x = int((float64(x) / float64(2)))
	}
	p := 3
	for (p * p) <= x {
		for (x % p) == 0 {
			factors = append(_toAnySlice(factors), any(p))
			x = int((float64(x) / float64(p)))
		}
		p = (p + 2)
	}
	if x > 1 {
		factors = append(_toAnySlice(factors), any(x))
	}
	return factors
}

// line 25
func repeat(ch string, n int) string {
	s := ""
	i := 0
	for i < n {
		s = s + ch
		i = (i + 1)
	}
	return s
}

// line 35
func D(n float64) float64 {
	if n < 0.0 {
		return -D(-n)
	}
	if n < 2.0 {
		return 0.0
	}
	var factors []int = []int{}
	if n < 10000000000000000000.0 {
		factors = primeFactors(int((n)))
	} else {
		g := int((n / 100.0))
		factors = primeFactors(g)
		factors = append(_toAnySlice(factors), any(2))
		factors = append(_toAnySlice(factors), any(2))
		factors = append(_toAnySlice(factors), any(5))
		factors = append(_toAnySlice(factors), any(5))
	}
	c := len(any(factors))
	if c == 1 {
		return 1.0
	}
	if c == 2 {
		return float64((factors[0] + factors[1]))
	}
	d := (n / (float64(factors[0])))
	return ((D(d) * (float64(factors[0]))) + d)
}

// line 64
func pad(n int) string {
	s := fmt.Sprint(any(n))
	for len(any(s)) < 4 {
		s = " " + s
	}
	return s
}

// line 72
func main() {
	var vals []int = []int{}
	n := -99
	for n < 101 {
		vals = append(_toAnySlice(vals), any(int((D(float64(n))))))
		n = (n + 1)
	}
	i := 0
	for i < len(any(vals)) {
		line := ""
		j := 0
		for j < 10 {
			line = line + pad(vals[(i+j)])
			if j < 9 {
				line = line + " "
			}
			j = (j + 1)
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
		i = (i + 10)
	}
	pow := 1.0
	m := 1
	for m < 21 {
		pow = (pow * 10.0)
		exp := fmt.Sprint(any(m))
		if len(any(exp)) < 2 {
			exp = exp + " "
		}
		res := fmt.Sprint(any(m)) + repeat("0", (m-1))
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("D(10^"+exp+") / 7 = "+res)), "\n"))
		m = (m + 1)
	}
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
