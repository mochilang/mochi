//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Diagram after trimming whitespace and removal of blank lines:\n")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|                      ID                       |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|                    QDCOUNT                    |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|                    ANCOUNT                    |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|                    NSCOUNT                    |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("|                    ARCOUNT                    |")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nDecoded:\n")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Name     Bits  Start  End")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("=======  ====  =====  ===")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ID        16      0    15")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("QR         1     16    16")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Opcode     4     17    20")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("AA         1     21    21")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("TC         1     22    22")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RD         1     23    23")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RA         1     24    24")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Z          3     25    27")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RCODE      4     28    31")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("QDCOUNT   16     32    47")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ANCOUNT   16     48    63")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("NSCOUNT   16     64    79")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ARCOUNT   16     80    95")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nTest string in hex:")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("78477bbf5496e12e1bf169a4")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nTest string in binary:")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nUnpacked:\n")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Name     Size  Bit pattern")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("=======  ====  ================")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ID        16   0111100001000111")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("QR         1   0")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Opcode     4   1111")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("AA         1   0")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("TC         1   1")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RD         1   1")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RA         1   1")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Z          3   011")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("RCODE      4   1111")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("QDCOUNT   16   0101010010010110")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ANCOUNT   16   1110000100101110")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("NSCOUNT   16   0001101111110001")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("ARCOUNT   16   0110100110100100")), "\n"))
}

func main() {
	main()
}
