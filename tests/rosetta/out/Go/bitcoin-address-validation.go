//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func indexOf(s string, ch string) int {
	i := 0
	for i < len(any(s)) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 12
func set58(addr string) []int {
	tmpl := "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
	var a []int = []int{}
	i := 0
	for i < 25 {
		a = append(_toAnySlice(a), any(0))
		i = (i + 1)
	}
	idx := 0
	for idx < len(any(addr)) {
		ch := string([]rune(addr)[idx:(idx + 1)])
		c := indexOf(tmpl, ch)
		if c < 0 {
			return []int{}
		}
		j := 24
		for j >= 0 {
			c = (c + (58 * a[j]))
			a[j] = (c % 256)
			c = int((float64(c) / float64(256)))
			j = (j - 1)
		}
		if c > 0 {
			return []int{}
		}
		idx = (idx + 1)
	}
	return a
}

// line 42
func doubleSHA256(bs []int) []int {
	first := sha256(any(bs))
	return sha256(any(first))
}

// line 47
func computeChecksum(a []int) []int {
	hash := doubleSHA256(a[0:21])
	return hash[0:4]
}

// line 52
func validA58(addr string) bool {
	a := set58(addr)
	if len(any(a)) != 25 {
		return false
	}
	if a[0] != 0 {
		return false
	}
	sum := computeChecksum(a)
	i := 0
	for i < 4 {
		if a[(21+i)] != sum[i] {
			return false
		}
		i = (i + 1)
	}
	return true
}

func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(validA58("1AGNa15ZQXAZUgFiqJ3i7Z2DPU2J6hW62i"))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(validA58("17NdbrSGoUotzeGCcMMCqnFkEvLymoou9j"))))), "\n"))
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
