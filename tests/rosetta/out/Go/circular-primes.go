//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	d := 5
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

// line 19
func isCircular(n int) bool {
	nn := n
	pow := 1
	for nn > 0 {
		pow = (pow * 10)
		nn = int(int(int((float64(nn) / float64(10)))))
	}
	nn = n
	for {
		nn = (nn * 10)
		f := (float64(nn) / float64(pow))
		nn = int(int(int((float64(nn) + (f * float64((1 - pow)))))))
		if nn == n {
			break
		}
		if !(isPrime(nn)) {
			return false
		}
	}
	return true
}

// line 59
func showList(xs []int) string {
	out := "["
	i := 0
	for i < len(any(xs)) {
		out = out + fmt.Sprint(any(xs[i]))
		if i < (len(any(xs)) - 1) {
			out = out + ", "
		}
		i = (i + 1)
	}
	return out + "]"
}

func main() {
	var circs []int = []int{}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("The first 19 circular primes are:")), "\n"))
	digits := []int{
		1,
		3,
		7,
		9,
	}
	q := []int{
		1,
		2,
		3,
		5,
		7,
		9,
	}
	fq := []int{
		1,
		2,
		3,
		5,
		7,
		9,
	}
	count := 0
	for {
		f := q[0]
		fd := fq[0]
		if isPrime(f) && isCircular(f) {
			circs = append(_toAnySlice(circs), any(f))
			count = (count + 1)
			if count == 19 {
				break
			}
		}
		q = q[1:len(q)]
		fq = fq[1:len(fq)]
		if (f != 2) && (f != 5) {
			for _, d := range digits {
				q = append(_toAnySlice(q), any(((f * 10) + d)))
				fq = append(_toAnySlice(fq), any(fd))
			}
		}
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(showList(circs))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nThe next 4 circular primes, in repunit format, are:")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("[R(19) R(23) R(317) R(1031)]")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nThe following repunits are probably circular primes:")), "\n"))
	for _, i := range []int{
		5003,
		9887,
		15073,
		25031,
		35317,
		49081,
	} {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("R("+fmt.Sprint(any(i))+") : true")), "\n"))
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
