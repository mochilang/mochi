//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func main() {
	pkg_dog := "Salt"
	Dog := "Pepper"
	pkg_DOG := "Mustard"
	// line 9
	var packageSees = func(d1 string, d2 string, d3 string) map[string]bool {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Package sees: "+d1+" "+d2+" "+d3)), "\n"))
		return map[string]bool{
			"pkg_dog": true,
			"Dog":     true,
			"pkg_DOG": true,
		}
	}
	d := packageSees(pkg_dog, Dog, pkg_DOG)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("There are "+fmt.Sprint(any(len(any(d))))+" dogs.\n")), "\n"))
	dog := "Benjamin"
	d = packageSees(pkg_dog, Dog, pkg_DOG)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Main sees:   "+dog+" "+Dog+" "+pkg_DOG)), "\n"))
	d["dog"] = true
	d["Dog"] = true
	d["pkg_DOG"] = true
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("There are "+fmt.Sprint(any(len(any(d))))+" dogs.\n")), "\n"))
	Dog = "Samba"
	d = packageSees(pkg_dog, Dog, pkg_DOG)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Main sees:   "+dog+" "+Dog+" "+pkg_DOG)), "\n"))
	d["dog"] = true
	d["Dog"] = true
	d["pkg_DOG"] = true
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("There are "+fmt.Sprint(any(len(any(d))))+" dogs.\n")), "\n"))
	DOG := "Bernie"
	d = packageSees(pkg_dog, Dog, pkg_DOG)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Main sees:   "+dog+" "+Dog+" "+DOG)), "\n"))
	d["dog"] = true
	d["Dog"] = true
	d["pkg_DOG"] = true
	d["DOG"] = true
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("There are "+fmt.Sprint(any(len(any(d))))+" dogs.")), "\n"))
}

func main() {
	main()
}
