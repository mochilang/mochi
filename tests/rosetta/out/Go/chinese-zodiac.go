//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v = Info

type Info struct {
	Animal     string `json:"animal"`
	YinYang    string `json:"yinYang"`
	Element    string `json:"element"`
	StemBranch string `json:"stemBranch"`
	Cycle      int    `json:"cycle"`
}

// line 17
func cz(yr int, animal []string, yinYang []string, element []string, sc []string, bc []string) Info {
	y := (yr - 4)
	stem := (y % 10)
	branch := (y % 12)
	sb := sc[stem] + bc[branch]
	return Info{Animal: animal[branch], YinYang: yinYang[(stem % 2)], Element: element[int((float64(stem) / float64(2)))], StemBranch: sb, Cycle: ((y % 60) + 1)}
}

var animal []string
var yinYang []string
var element []string

func main() {
	animal = []string{
		"Rat",
		"Ox",
		"Tiger",
		"Rabbit",
		"Dragon",
		"Snake",
		"Horse",
		"Goat",
		"Monkey",
		"Rooster",
		"Dog",
		"Pig",
	}
	yinYang = []string{"Yang", "Yin"}
	element = []string{
		"Wood",
		"Fire",
		"Earth",
		"Metal",
		"Water",
	}
	stemChArr := []string{
		"甲",
		"乙",
		"丙",
		"丁",
		"戊",
		"己",
		"庚",
		"辛",
		"壬",
		"癸",
	}
	branchChArr := []string{
		"子",
		"丑",
		"寅",
		"卯",
		"辰",
		"巳",
		"午",
		"未",
		"申",
		"酉",
		"戌",
		"亥",
	}
	for _, yr := range []int{
		1935,
		1938,
		1968,
		1972,
		1976,
	} {
		r := cz(yr, animal, yinYang, element, stemChArr, branchChArr)
		_ = r
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(yr))+": "+r.Element+" "+r.Animal+", "+r.YinYang+", Cycle year "+fmt.Sprint(any(r.Cycle))+" "+r.StemBranch)), "\n"))
	}
}
