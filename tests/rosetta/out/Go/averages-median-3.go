//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
	"time"
)

type v map[string]any

// line 4
func qsel(a []float64, k int) float64 {
	arr := a
	for len(any(arr)) > 1 {
		px := (int64(time.Now().UnixNano()) % int64(len(any(arr))))
		pv := arr[px]
		last := (len(any(arr)) - 1)
		tmp := arr[px]
		arr[px] = arr[last]
		arr[last] = tmp
		px = 0
		i := 0
		for i < last {
			v := arr[i]
			if v < pv {
				tmp2 := arr[px]
				arr[px] = arr[i]
				arr[i] = tmp2
				px = (int64(px) + int64(1))
			}
			i = (i + 1)
		}
		if px == k {
			return pv
		}
		if k < px {
			arr = arr[0:px]
		} else {
			tmp2 := arr[px]
			arr[px] = pv
			arr[last] = tmp2
			arr = arr[(int64(px) + int64(1)):len(arr)]
			k = (int64(k) - int64((int64(px) + int64(1))))
		}
	}
	return arr[0]
}

// line 41
func median(list []float64) float64 {
	arr := list
	half := int((float64(len(any(arr))) / float64(2)))
	med := qsel(arr, half)
	if (len(any(arr)) % 2) == 0 {
		return ((med + qsel(arr, (half-1))) / 2.0)
	}
	return med
}

func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(median([]float64{
		3.0,
		1.0,
		4.0,
		1.0,
	}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(median([]float64{
		3.0,
		1.0,
		4.0,
		1.0,
		5.0,
	}))))), "\n"))
}
