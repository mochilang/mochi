//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func poolPut(p []int, x int) []int {
	return append(_toAnySlice(p), any(x))
}

// line 8
func poolGet(p []int) map[string]any {
	if len(any(p)) == 0 {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("pool empty")), "\n"))
		return map[string]any{"pool": p, "val": 0}
	}
	idx := (len(any(p)) - 1)
	v := p[idx]
	p = p[0:idx]
	return map[string]any{"pool": p, "val": v}
}

// line 19
func clearPool(p []int) []int {
	return []int{}
}

// line 23
func main() {
	var pool []int = []int{}
	i := 1
	j := 2
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any((i + j))))), "\n"))
	pool = poolPut(pool, i)
	pool = poolPut(pool, j)
	i = 0
	j = 0
	res1 := poolGet(pool)
	pool = (res1["pool"]).([]int)
	i = (res1["val"]).(int)
	res2 := poolGet(pool)
	pool = (res2["pool"]).([]int)
	j = (res2["val"]).(int)
	i = 4
	j = 5
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any((i + j))))), "\n"))
	pool = poolPut(pool, i)
	pool = poolPut(pool, j)
	i = 0
	j = 0
	pool = clearPool(pool)
	res3 := poolGet(pool)
	pool = (res3["pool"]).([]int)
	i = (res3["val"]).(int)
	res4 := poolGet(pool)
	pool = (res4["pool"]).([]int)
	j = (res4["val"]).(int)
	i = 7
	j = 8
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any((i + j))))), "\n"))
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
