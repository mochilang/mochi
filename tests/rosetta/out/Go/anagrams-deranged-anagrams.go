//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 4
func sortRunes(s string) string {
	var arr []string = []string{}
	i := 0
	for i < len(s) {
		arr = append(arr, string([]rune(s)[i:(i+1)]))
		i = (i + 1)
	}
	n := len(arr)
	m := 0
	for m < n {
		j := 0
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				tmp := arr[j]
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		m = (m + 1)
	}
	out := ""
	i = 0
	for i < n {
		out = out + arr[i]
		i = (i + 1)
	}
	return out
}

// line 34
func deranged(a string, b string) bool {
	if len(a) != len(b) {
		return false
	}
	i := 0
	for i < len(a) {
		if string([]rune(a)[i:(i+1)]) == string([]rune(b)[i:(i+1)]) {
			return false
		}
		i = (i + 1)
	}
	return true
}

// line 44
func main() {
	words := []string{"constitutionalism", "misconstitutional"}
	var m map[string][]string = map[string][]string{}
	bestLen := 0
	w1 := ""
	w2 := ""
	for _, w := range words {
		if len(w) <= bestLen {
			continue
		}
		k := sortRunes(w)
		key0 := k
		m1 := m
		_, ok2 := m1[key0]
		if !(ok2) {
			m[k] = []string{w}
			continue
		}
		for _, c := range m[k] {
			if deranged(w, c) {
				bestLen = len(w)
				w1 = c
				w2 = w
				break
			}
		}
		m[k] = append(m[k], w)
	}
	fmt.Println(w1 + " " + w2 + " : Length " + fmt.Sprint(bestLen))
}

func main() {
	main()
}
