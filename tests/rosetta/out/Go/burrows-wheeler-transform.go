//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
)

type v map[string]any

// line 6
func contains(s string, ch string) bool {
	i := 0
	for i < len(s) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return true
		}
		i = (i + 1)
	}
	return false
}

// line 15
func sortStrings(xs []string) []string {
	arr := xs
	n := len(arr)
	i := 0
	for i < n {
		j := 0
		for j < (n - 1) {
			if arr[j] > arr[(j+1)] {
				tmp := arr[j]
				arr[j] = arr[(j + 1)]
				arr[(j + 1)] = tmp
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return arr
}

// line 34
func bwt(s string) map[string]any {
	if _contains(s, stx) || _contains(s, etx) {
		return map[string]any{"err": true, "res": ""}
	}
	s = stx + s + etx
	le := len(s)
	var table []string = []string{}
	i := 0
	for i < le {
		rot := string([]rune(s)[i:le]) + string([]rune(s)[0:i])
		table = append(table, rot)
		i = (i + 1)
	}
	table = sortStrings(table)
	last := ""
	i = 0
	for i < le {
		last = last + string([]rune(table[i])[(le-1):le])
		i = (i + 1)
	}
	return map[string]any{"err": false, "res": last}
}

// line 57
func ibwt(r string) string {
	le := len(r)
	var table []string = []string{}
	i := 0
	for i < le {
		table = append(table, "")
		i = (i + 1)
	}
	n := 0
	for n < le {
		i = 0
		for i < le {
			table[i] = string([]rune(r)[i:(i+1)]) + table[i]
			i = (i + 1)
		}
		table = sortStrings(table)
		n = (n + 1)
	}
	i = 0
	for i < le {
		if string([]rune(table[i])[(le-1):le]) == etx {
			return string([]rune(table[i])[1:(le - 1)])
		}
		i = (i + 1)
	}
	return ""
}

// line 85
func makePrintable(s string) string {
	out := ""
	i := 0
	for i < len(s) {
		ch := string([]rune(s)[i:(i + 1)])
		if ch == stx {
			out = out + "^"
		} else if ch == etx {
			out = out + "|"
		} else {
			out = out + ch
		}
		i = (i + 1)
	}
	return out
}

// line 98
func main() {
	examples := []string{
		"banana",
		"appellee",
		"dogwood",
		"TO BE OR NOT TO BE OR WANT TO BE OR NOT?",
		"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES",
		"\x02ABC\x03",
	}
	for _, t := range examples {
		fmt.Println(makePrintable(t))
		res := bwt(t)
		if _exists(res["err"]) {
			fmt.Println(" --> ERROR: String can't contain STX or ETX")
			fmt.Println(" -->")
		} else {
			enc := (res["res"]).(string)
			fmt.Println(" --> " + makePrintable(enc))
			r := ibwt(enc)
			fmt.Println(" --> " + r)
		}
		fmt.Println("")
	}
}

var stx string
var etx string

func main() {
	stx = "\x02"
	etx = "\x03"
	main()
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case map[string]int:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Slice, reflect.Array:
		return rv.Len() > 0
	case reflect.Map:
		return !rv.IsNil() && rv.Len() > 0
	case reflect.Pointer:
		return !rv.IsNil()
	case reflect.Struct:
		return !rv.IsZero()
	}
	return false
}
