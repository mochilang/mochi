//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
	"strings"
)

type v map[string]any

// line 1
func listStr(xs []int) string {
	s := "["
	i := 0
	for i < len(any(xs)) {
		s = s + fmt.Sprint(any(xs[i]))
		if i < (len(any(xs)) - 1) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

// line 13
func llStr(lst [][]int) string {
	s := "["
	i := 0
	for i < len(any(lst)) {
		s = s + listStr(lst[i])
		if i < (len(any(lst)) - 1) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

// line 25
func cartN(lists any) [][]int {
	if _equal(lists, nil) {
		return [][]int{}
	}
	a := (lists).([][]int)
	if len(any(a)) == 0 {
		return [][]any{[]any{}}
	}
	c := 1
	for _, xs := range a {
		c = (c * len(any(xs)))
	}
	if c == 0 {
		return [][]int{}
	}
	var res [][]int = [][]int{}
	var idx []int = []int{}
	for _, v := range a {
		idx = append(_toAnySlice(idx), any(0))
	}
	n := len(any(a))
	count := 0
	for count < c {
		var row []int = []int{}
		j := 0
		for j < n {
			row = append(_toAnySlice(row), any(a[j][idx[j]]))
			j = (j + 1)
		}
		res = append(_toAnySlice(res), any(row))
		k := (n - 1)
		for k >= 0 {
			idx[k] = (idx[k] + 1)
			if idx[k] < len(any(a[k])) {
				break
			}
			idx[k] = 0
			k = (k - 1)
		}
		count = (count + 1)
	}
	return res
}

// line 57
func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([][]int{[]int{1, 2}, []int{3, 4}}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([][]int{[]int{3, 4}, []int{1, 2}}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([]any{_toAnySlice([]int{1, 2}), []any{}}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([]any{[]any{}, _toAnySlice([]int{1, 2})}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("[")), "\n"))
	for _, p := range cartN(any([][]int{
		[]int{1776, 1789},
		[]int{7, 12},
		[]int{4, 14, 23},
		[]int{0, 1},
	})) {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(" "+listStr(p))), "\n"))
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("]")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([][]int{[]int{1, 2, 3}, []int{30}, []int{500, 100}}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([]any{_toAnySlice([]int{1, 2, 3}), []any{}, _toAnySlice([]int{500, 100})}))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(nil)))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cartN(any([]any{}))))), "\n"))
}

func main() {
	main()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
