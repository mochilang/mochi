//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
)

type v map[string]any

// line 1
func listStr(xs []int) string {
	s := "["
	i := 0
	for i < len(xs) {
		s = s + fmt.Sprint(xs[i])
		if i < (len(xs) - 1) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

// line 13
func llStr(lst [][]int) string {
	s := "["
	i := 0
	for i < len(lst) {
		s = s + listStr(lst[i])
		if i < (len(lst) - 1) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

// line 25
func cartN(lists any) [][]int {
	if _equal(lists, nil) {
		return [][]int{}
	}
	a := (lists).([][]int)
	if len(a) == 0 {
		return [][]any{[]any{}}
	}
	c := 1
	for _, xs := range a {
		c = (c * len(xs))
	}
	if c == 0 {
		return [][]int{}
	}
	var res [][]int = [][]int{}
	var idx []int = []int{}
	for _, v := range a {
		idx = append(idx, 0)
	}
	n := len(a)
	count := 0
	for count < c {
		var row []int = []int{}
		j := 0
		for j < n {
			row = append(row, a[j][idx[j]])
			j = (j + 1)
		}
		res = append(res, row)
		k := (n - 1)
		for k >= 0 {
			idx[k] = (idx[k] + 1)
			if idx[k] < len(a[k]) {
				break
			}
			idx[k] = 0
			k = (k - 1)
		}
		count = (count + 1)
	}
	return res
}

// line 57
func main() {
	fmt.Println(llStr(cartN([][]int{[]int{1, 2}, []int{3, 4}})))
	fmt.Println(llStr(cartN([][]int{[]int{3, 4}, []int{1, 2}})))
	fmt.Println(llStr(cartN([]any{_toAnySlice([]int{1, 2}), []any{}})))
	fmt.Println(llStr(cartN([]any{[]any{}, _toAnySlice([]int{1, 2})})))
	fmt.Println("")
	fmt.Println("[")
	for _, p := range cartN([][]int{
		[]int{1776, 1789},
		[]int{7, 12},
		[]int{4, 14, 23},
		[]int{0, 1},
	}) {
		fmt.Println(" " + listStr(p))
	}
	fmt.Println("]")
	fmt.Println(llStr(cartN([][]int{[]int{1, 2, 3}, []int{30}, []int{500, 100}})))
	fmt.Println(llStr(cartN([]any{_toAnySlice([]int{1, 2, 3}), []any{}, _toAnySlice([]int{500, 100})})))
	fmt.Println("")
	fmt.Println(llStr(cartN(nil)))
	fmt.Println(llStr(cartN([]any{})))
}

func main() {
	main()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
