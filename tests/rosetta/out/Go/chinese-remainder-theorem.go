//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
)

type v map[string]any

// line 4
func egcd(a int, b int) []int {
	if a == 0 {
		return []int{b, 0, 1}
	}
	res := egcd((b % a), a)
	g := res[0]
	x1 := res[1]
	y1 := res[2]
	return []any{g, (float64(y1) - ((float64(b) / float64(a)) * float64(x1))), x1}
}

// line 13
func modInv(a int, m int) int {
	r := egcd(a, m)
	if r[0] != 1 {
		return 0
	}
	x := r[1]
	if x < 0 {
		return (x + m)
	}
	return x
}

// line 21
func crt(a []int, n []int) int {
	prod := 1
	i := 0
	for i < len(n) {
		prod = (prod * n[i])
		i = (i + 1)
	}
	x := 0
	i = 0
	for i < len(n) {
		ni := n[i]
		ai := a[i]
		p := (float64(prod) / float64(ni))
		inv := modInv(int((p % float64(ni))), ni)
		x = int(int(int((float64(x) + (float64((ai * inv)) * p)))))
		i = (i + 1)
	}
	return (x % prod)
}

var n []int
var a []int
var res int

func main() {
	n = []int{3, 5, 7}
	a = []int{2, 3, 2}
	res = crt(a, n)
	fmt.Println(fmt.Sprint(res) + " <nil>")
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
