//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func newPile(d int) [][]int {
	var b [][]int = [][]int{}
	y := 0
	for y < d {
		var row []int = []int{}
		x := 0
		for x < d {
			row = append(_toAnySlice(row), any(0))
			x = (x + 1)
		}
		b = append(_toAnySlice(b), any(row))
		y = (y + 1)
	}
	return b
}

// line 20
func handlePile(pile *[][]int, x int, y int) [][]int {
	if pile[y][x] >= 4 {
		pile[y][x] = (pile[y][x] - 4)
		if y > 0 {
			pile[(y - 1)][x] = (pile[(y - 1)][x] + 1)
			if pile[(y - 1)][x] >= 4 {
				pile = handlePile(pile, x, (y - 1))
			}
		}
		if x > 0 {
			pile[y][(x - 1)] = (pile[y][(x-1)] + 1)
			if pile[y][(x-1)] >= 4 {
				pile = handlePile(pile, (x - 1), y)
			}
		}
		if y < (dim - 1) {
			pile[(y + 1)][x] = (pile[(y + 1)][x] + 1)
			if pile[(y + 1)][x] >= 4 {
				pile = handlePile(pile, x, (y + 1))
			}
		}
		if x < (dim - 1) {
			pile[y][(x + 1)] = (pile[y][(x+1)] + 1)
			if pile[y][(x+1)] >= 4 {
				pile = handlePile(pile, (x + 1), y)
			}
		}
		pile = handlePile(pile, x, y)
	}
	return pile
}

// line 44
func drawPile(pile [][]int, d int) {
	chars := []string{
		" ",
		"░",
		"▓",
		"█",
	}
	row := 0
	for row < d {
		line := ""
		col := 0
		for col < d {
			v := pile[row][col]
			if v > 3 {
				v = 3
			}
			line = line + chars[v]
			col = (col + 1)
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
		row = (row + 1)
	}
}

// line 61
func main() {
	pile := newPile(16)
	hdim := 7
	pile[hdim][hdim] = 16
	pile = handlePile(pile, hdim, hdim)
	drawPile(pile, 16)
}

var dim int

func main() {
	dim = 16
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
