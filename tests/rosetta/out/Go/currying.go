//go:build ignore

// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v = Foo

type Foo struct {
	Value int `json:"value"`
}

func (s *Foo) Method(b int) int {
	return (s.Value + b)
}

// line 4
func pow(base float64, exp float64) float64 {
	result := 1.0
	i := 0
	for i < int(exp) {
		result = (result * base)
		i = (i + 1)
	}
	return result
}

// line 14
func PowN(b float64) func(float64) float64 {
	return func(e float64) float64 {
		return pow(b, e)
	}
}

// line 18
func PowE(e float64) func(float64) float64 {
	return func(b float64) float64 {
		return pow(b, e)
	}
}

// line 30
func mainFn() {
	pow2 := PowN(2.0)
	cube := PowE(3.0)
	fmt.Println(any("2^8 = " + fmt.Sprint(any(pow2(8.0)))))
	fmt.Println(any("4Â³ = " + fmt.Sprint(any(cube(4.0)))))
	a := Foo{Value: 2}
	fn1 := func(b int) int {
		return a.Method(b)
	}
	fn2 := func(f Foo, b int) int {
		return f.Method(b)
	}
	fmt.Println(any("2 + 2 = " + fmt.Sprint(a.Method(2))))
	fmt.Println(any("2 + 3 = " + fmt.Sprint(any(fn1(3)))))
	fmt.Println(any("2 + 4 = " + fmt.Sprint(any(fn2(&a, 4)))))
	fmt.Println(any("3 + 5 = " + fmt.Sprint(any(fn2(&Foo{Value: 3}, 5)))))
}

func main() {
	mainFn()
}
