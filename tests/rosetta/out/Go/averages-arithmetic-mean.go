//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
)

type v map[string]any

// line 1
func mean(v []float64) map[string]any {
	if len(v) == 0 {
		return map[string]bool{"ok": false}
	}
	sum := 0.0
	i := 0
	for i < len(v) {
		sum = (sum + v[i])
		i = (i + 1)
	}
	return map[string]any{"ok": true, "mean": (sum / (float64(len(v))))}
}

// line 12
func main() {
	sets := []any{
		[]any{},
		[]float64{
			3.0,
			1.0,
			4.0,
			1.0,
			5.0,
			9.0,
		},
		[]float64{
			100000000000000000000.0,
			3.0,
			1.0,
			4.0,
			1.0,
			5.0,
			9.0,
			-100000000000000000000.0,
		},
		[]float64{
			10.0,
			9.0,
			8.0,
			7.0,
			6.0,
			5.0,
			4.0,
			3.0,
			2.0,
			1.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.11,
		},
		[]float64{
			10.0,
			20.0,
			30.0,
			40.0,
			50.0,
			-100.0,
			4.7,
			-1100.0,
		},
	}
	for _, v := range sets {
		fmt.Println("Vector: " + fmt.Sprint(v))
		r := mean((v).([]float64))
		if _exists(r["ok"]) {
			fmt.Println("Mean of " + fmt.Sprint(len(v)) + " numbers is " + fmt.Sprint(r["mean"]))
		} else {
			fmt.Println("Mean undefined")
		}
		fmt.Println("")
	}
}

func main() {
	main()
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case map[string]int:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Slice, reflect.Array:
		return rv.Len() > 0
	case reflect.Map:
		return !rv.IsNil() && rv.Len() > 0
	case reflect.Pointer:
		return !rv.IsNil()
	case reflect.Struct:
		return !rv.IsZero()
	}
	return false
}
