//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 18
func setChar(s string, idx int, ch string) string {
	return string([]rune(s)[0:idx]) + ch + string([]rune(s)[(idx+1):len(any(s))])
}

func main() {
	width := 81
	height := 5
	var lines []string = []string{}
	for i := 0; i < height; i++ {
		row := ""
		j := 0
		for j < width {
			row = row + "*"
			j = (j + 1)
		}
		lines = append(_toAnySlice(lines), any(row))
	}
	var stack []map[string]int = []map[string]int{map[string]int{
		"start": 0,
		"len":   width,
		"index": 1,
	}}
	for len(any(stack)) > 0 {
		frame := stack[(len(any(stack)) - 1)]
		stack = stack[0:(len(any(stack)) - 1)]
		start := frame["start"]
		lenSeg := frame["len"]
		index := frame["index"]
		seg := int((float64(lenSeg) / float64(3)))
		if seg == 0 {
			continue
		}
		i := index
		for i < height {
			j := (start + seg)
			for j < (start + (2 * seg)) {
				lines[i] = setChar(lines[i], j, " ")
				j = (j + 1)
			}
			i = (i + 1)
		}
		stack = append(_toAnySlice(stack), any(map[string]int{
			"start": start,
			"len":   seg,
			"index": (index + 1),
		}))
		stack = append(_toAnySlice(stack), any(map[string]int{
			"start": (start + (seg * 2)),
			"len":   seg,
			"index": (index + 1),
		}))
	}
	for _, line := range lines {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
