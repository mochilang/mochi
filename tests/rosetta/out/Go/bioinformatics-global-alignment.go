//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func padLeft(s string, w int) string {
	res := ""
	n := (w - len(any(s)))
	for n > 0 {
		res = res + " "
		n = (n - 1)
	}
	return res + s
}

// line 14
func indexOfFrom(s string, ch string, start int) int {
	i := start
	for i < len(any(s)) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 25
func containsStr(s string, sub string) bool {
	i := 0
	sl := len(any(s))
	subl := len(any(sub))
	for i <= (sl - subl) {
		if string([]rune(s)[i:(i+subl)]) == sub {
			return true
		}
		i = (i + 1)
	}
	return false
}

// line 36
func distinct(slist []string) []string {
	var res []string = []string{}
	for _, s := range slist {
		found := false
		for _, r := range res {
			if r == s {
				found = true
				break
			}
		}
		if !(found) {
			res = append(_toAnySlice(res), any(s))
		}
	}
	return res
}

// line 51
func permutations(xs []string) [][]string {
	if len(any(xs)) <= 1 {
		return [][]string{xs}
	}
	var res [][]string = [][]string{}
	i := 0
	for i < len(any(xs)) {
		var rest []string = []string{}
		j := 0
		for j < len(any(xs)) {
			if j != i {
				rest = append(_toAnySlice(rest), any(xs[j]))
			}
			j = (j + 1)
		}
		subs := permutations(rest)
		for _, p := range subs {
			var perm []string = []string{xs[i]}
			k := 0
			for k < len(any(p)) {
				perm = append(_toAnySlice(perm), any(p[k]))
				k = (k + 1)
			}
			res = append(_toAnySlice(res), any(perm))
		}
		i = (i + 1)
	}
	return res
}

// line 77
func headTailOverlap(s1 string, s2 string) int {
	start := 0
	for {
		ix := indexOfFrom(s1, string([]rune(s2)[0:1]), start)
		if ix == (0 - 1) {
			return 0
		}
		start = ix
		if string([]rune(s2)[0:(len(any(s1))-start)]) == string([]rune(s1)[start:len(any(s1))]) {
			return (len(any(s1)) - start)
		}
		start = (start + 1)
	}
}

// line 90
func deduplicate(slist []string) []string {
	arr := distinct(slist)
	var filtered []string = []string{}
	i := 0
	for i < len(any(arr)) {
		s1 := arr[i]
		within := false
		j := 0
		for j < len(any(arr)) {
			if (j != i) && containsStr(arr[j], s1) {
				within = true
				break
			}
			j = (j + 1)
		}
		if !(within) {
			filtered = append(_toAnySlice(filtered), any(s1))
		}
		i = (i + 1)
	}
	return filtered
}

// line 111
func joinAll(ss []string) string {
	out := ""
	for _, s := range ss {
		out = out + s
	}
	return out
}

// line 117
func shortestCommonSuperstring(slist []string) string {
	ss := deduplicate(slist)
	shortest := joinAll(ss)
	perms := permutations(ss)
	idx := 0
	for idx < len(any(perms)) {
		perm := perms[idx]
		sup := perm[0]
		i := 0
		for i < (len(any(ss)) - 1) {
			ov := headTailOverlap(perm[i], perm[(i+1)])
			sup = sup + string([]rune(perm[(i + 1)])[ov:len(any(perm[(i+1)]))])
			i = (i + 1)
		}
		if len(any(sup)) < len(any(shortest)) {
			shortest = sup
		}
		idx = (idx + 1)
	}
	return shortest
}

// line 137
func printCounts(seq string) {
	a := 0
	c := 0
	g := 0
	t := 0
	i := 0
	for i < len(any(seq)) {
		ch := string([]rune(seq)[i:(i + 1)])
		if ch == "A" {
			a = (a + 1)
		} else {
			if ch == "C" {
				c = (c + 1)
			} else {
				if ch == "G" {
					g = (g + 1)
				} else {
					if ch == "T" {
						t = (t + 1)
					}
				}
			}
		}
		i = (i + 1)
	}
	total := len(any(seq))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("\nNucleotide counts for "+seq+":\n")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("A", 10)+padLeft(fmt.Sprint(any(a)), 12))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("C", 10)+padLeft(fmt.Sprint(any(c)), 12))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("G", 10)+padLeft(fmt.Sprint(any(g)), 12))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("T", 10)+padLeft(fmt.Sprint(any(t)), 12))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("Other", 10)+padLeft(fmt.Sprint(any((total-(((a+c)+g)+t)))), 12))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("  ____________________")), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(padLeft("Total length", 14)+padLeft(fmt.Sprint(any(total)), 8))), "\n"))
}

// line 173
func main() {
	var tests [][]string = [][]string{
		[]string{
			"TA",
			"AAG",
			"TA",
			"GAA",
			"TA",
		},
		[]string{
			"CATTAGGG",
			"ATTAG",
			"GGG",
			"TA",
		},
		[]string{"AAGAUGGA", "GGAGCGCAUC", "AUCGCAAUAAGGA"},
		[]string{
			"ATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTAT",
			"GGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGT",
			"CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA",
			"TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
			"AACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT",
			"GCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTC",
			"CGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATTCTGCTTATAACACTATGTTCT",
			"TGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
			"CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATGCTCGTGC",
			"GATGGAGCGCATCGAACGCAATAAGGATCATTTGATGGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTTCGATT",
			"TTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGATGGAGCGCATC",
			"CTATGTTCTTATGAAATGGATGTTCTGAGTTGGTCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA",
			"TCTCTTAAACTCCTGCTAAATGCTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTGAGGACAAAGGTCAAGA",
		},
	}
	for _, seqs := range tests {
		scs := shortestCommonSuperstring(seqs)
		printCounts(scs)
	}
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
