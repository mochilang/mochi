//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v = Birthday

type Birthday struct {
	Month int `json:"month"`
	Day   int `json:"day"`
}

// line 9
func monthUnique(b Birthday, list []Birthday) bool {
	c := 0
	for _, x := range list {
		if x.Month == b.Month {
			c = (c + 1)
		}
	}
	return (c == 1)
}

// line 19
func dayUnique(b Birthday, list []Birthday) bool {
	c := 0
	for _, x := range list {
		if x.Day == b.Day {
			c = (c + 1)
		}
	}
	return (c == 1)
}

// line 29
func monthWithUniqueDay(b Birthday, list []Birthday) bool {
	for _, x := range list {
		if (x.Month == b.Month) && dayUnique(&x, list) {
			return true
		}
	}
	return false
}

// line 38
func bstr(b Birthday) string {
	months := []string{
		"",
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
	}
	return months[b.Month] + " " + fmt.Sprint(any(b.Day))
}

func main() {
	var choices []Birthday = []Birthday{
		Birthday{Month: 5, Day: 15},
		Birthday{Month: 5, Day: 16},
		Birthday{Month: 5, Day: 19},
		Birthday{Month: 6, Day: 17},
		Birthday{Month: 6, Day: 18},
		Birthday{Month: 7, Day: 14},
		Birthday{Month: 7, Day: 16},
		Birthday{Month: 8, Day: 14},
		Birthday{Month: 8, Day: 15},
		Birthday{Month: 8, Day: 17},
	}
	var filtered []Birthday = []Birthday{}
	for _, bd := range choices {
		if !(monthUnique(&bd, choices)) {
			filtered = append(_toAnySlice(filtered), any(bd))
		}
	}
	var filtered2 []Birthday = []Birthday{}
	for _, bd := range filtered {
		if !(monthWithUniqueDay(&bd, filtered)) {
			filtered2 = append(_toAnySlice(filtered2), any(bd))
		}
	}
	var filtered3 []Birthday = []Birthday{}
	for _, bd := range filtered2 {
		if dayUnique(&bd, filtered2) {
			filtered3 = append(_toAnySlice(filtered3), any(bd))
		}
	}
	var filtered4 []Birthday = []Birthday{}
	for _, bd := range filtered3 {
		if monthUnique(&bd, filtered3) {
			filtered4 = append(_toAnySlice(filtered4), any(bd))
		}
	}
	if len(any(filtered4)) == 1 {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Cheryl's birthday is "+bstr(&filtered4[0]))), "\n"))
	} else {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Something went wrong!")), "\n"))
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
