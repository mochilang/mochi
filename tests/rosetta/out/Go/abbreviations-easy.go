//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func fields(s string) []string {
	var words []string = []string{}
	cur := ""
	i := 0
	for i < len(any(s)) {
		ch := string([]rune(s)[i:(i + 1)])
		if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
			if len(any(cur)) > 0 {
				words = append(words, cur)
				cur = ""
			}
		} else {
			cur = cur + ch
		}
		i = (i + 1)
	}
	if len(any(cur)) > 0 {
		words = append(words, cur)
	}
	return words
}

// line 23
func padRight(s string, width int) string {
	out := s
	i := len(any(s))
	for i < width {
		out = out + " "
		i = (i + 1)
	}
	return out
}

// line 33
func join(xs []string, sep string) string {
	res := ""
	i := 0
	for i < len(any(xs)) {
		if i > 0 {
			res = res + sep
		}
		res = res + xs[i]
		i = (i + 1)
	}
	return res
}

// line 46
func validate(commands []string, words []string, mins []int) []string {
	var results []string = []string{}
	if len(any(words)) == 0 {
		return results
	}
	wi := 0
	for wi < len(any(words)) {
		w := words[wi]
		found := false
		wlen := len(any(w))
		ci := 0
		for ci < len(any(commands)) {
			cmd := commands[ci]
			if ((mins[ci] != 0) && (wlen >= mins[ci])) && (wlen <= len(any(cmd))) {
				c := strings.ToUpper(cmd)
				ww := strings.ToUpper(w)
				if string([]rune(c)[0:wlen]) == ww {
					results = append(results, c)
					found = true
					break
				}
			}
			ci = (ci + 1)
		}
		if !(found) {
			results = append(results, "*error*")
		}
		wi = (wi + 1)
	}
	return results
}

// line 78
func mainFn() {
	table := "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " + "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " + "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " + " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " + "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " + "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " + "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp "
	commands := fields(table)
	var mins []int = []int{}
	i := 0
	for i < len(any(commands)) {
		count := 0
		j := 0
		cmd := commands[i]
		for j < len(any(cmd)) {
			ch := string([]rune(cmd)[j:(j + 1)])
			if (ch >= "A") && (ch <= "Z") {
				count = (count + 1)
			}
			j = (j + 1)
		}
		mins = append(mins, count)
		i = (i + 1)
	}
	sentence := "riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"
	words := fields(sentence)
	results := validate(commands, words, mins)
	out1 := "user words:  "
	k := 0
	for k < len(any(words)) {
		out1 = out1 + padRight(words[k], len(any(results[k]))) + " "
		k = (k + 1)
	}
	fmt.Println(any(out1))
	fmt.Println(any("full words:  " + join(results, " ")))
}

func main() {
	mainFn()
}
