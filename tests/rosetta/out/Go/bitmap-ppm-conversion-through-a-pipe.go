//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"time"
)

type Bitmap struct {
	Cols int       `json:"cols"`
	Rows int       `json:"rows"`
	Px   [][]Pixel `json:"px"`
}

type Pixel struct {
	R int `json:"R"`
	G int `json:"G"`
	B int `json:"B"`
}

type v map[string]any

// line 10
func pixelFromRgb(c int) Pixel {
	r := ((int((float64(c) / float64(65536)))) % 256)
	g := ((int((float64(c) / float64(256)))) % 256)
	b := (c % 256)
	return Pixel{R: r, G: g, B: b}
}

// line 17
func rgbFromPixel(p Pixel) int {
	return (((p.R * 65536) + (p.G * 256)) + p.B)
}

// line 27
func NewBitmap(x int, y int) Bitmap {
	var dataVar [][]Pixel = [][]Pixel{}
	row := 0
	for row < y {
		var r []Pixel = []Pixel{}
		col := 0
		for col < x {
			r = append(r, Pixel{R: 0, G: 0, B: 0})
			col = (col + 1)
		}
		dataVar = append(dataVar, r)
		row = (row + 1)
	}
	return Bitmap{Cols: x, Rows: y, Px: dataVar}
}

// line 43
func FillRgb(b *Bitmap, c int) {
	y := 0
	p := pixelFromRgb(c)
	for y < b.Rows {
		x := 0
		for x < b.Cols {
			px := b.Px
			row := px[y]
			row[x] = p
			px[y] = row
			b.Px = px
			x = (x + 1)
		}
		y = (y + 1)
	}
}

// line 60
func SetPxRgb(b *Bitmap, x int, y int, c int) bool {
	if (((x < 0) || (x >= b.Cols)) || (y < 0)) || (y >= b.Rows) {
		return false
	}
	px := b.Px
	row := px[y]
	row[x] = pixelFromRgb(c)
	px[y] = row
	b.Px = px
	return true
}

// line 71
func nextRand(seed int) int {
	return (((seed * 1664525) + 1013904223) % 2147483648)
}

// line 73
func main() {
	bm := NewBitmap(400, 300)
	FillRgb(&bm, 12615744)
	seed := time.Now().UnixNano()
	i := 0
	for i < 2000 {
		seed = nextRand(seed)
		x := (int64(seed) % int64(400))
		seed = nextRand(seed)
		y := (int64(seed) % int64(300))
		SetPxRgb(&bm, x, y, 8405024)
		i = (i + 1)
	}
	x := 0
	for x < 400 {
		y := 240
		for y < 245 {
			SetPxRgb(&bm, x, y, 8405024)
			y = (y + 1)
		}
		y = 260
		for y < 265 {
			SetPxRgb(&bm, x, y, 8405024)
			y = (y + 1)
		}
		x = (x + 1)
	}
	y := 0
	for y < 300 {
		x := 80
		for x < 85 {
			SetPxRgb(&bm, x, y, 8405024)
			x = (x + 1)
		}
		x = 95
		for x < 100 {
			SetPxRgb(&bm, x, y, 8405024)
			x = (x + 1)
		}
		y = (y + 1)
	}
}

func main() {
	main()
}
