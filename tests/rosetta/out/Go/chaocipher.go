//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 1
func indexOf(s string, ch string) int {
	i := 0
	for i < len(s) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 12
func rotate(s string, n int) string {
	return string([]rune(s)[n:len([]rune(s))]) + string([]rune(s)[0:n])
}

// line 16
func scrambleLeft(s string) string {
	return string([]rune(s)[0:1]) + string([]rune(s)[2:14]) + string([]rune(s)[1:2]) + string([]rune(s)[14:len([]rune(s))])
}

// line 20
func scrambleRight(s string) string {
	return string([]rune(s)[1:3]) + string([]rune(s)[4:15]) + string([]rune(s)[3:4]) + string([]rune(s)[15:len([]rune(s))]) + string([]rune(s)[0:1])
}

// line 24
func chao(text string, encode bool) string {
	left := "HXUCZVAMDSLKPEFJRIGTWOBNYQ"
	right := "PTLNBQDEOYSFAVZKGJRIHWXUMC"
	out := ""
	i := 0
	for i < len(text) {
		ch := string([]rune(text)[i:(i + 1)])
		idx := 0
		if encode {
			idx = indexOf(right, ch)
			out = out + string([]rune(left)[idx:(idx+1)])
		} else {
			idx = indexOf(left, ch)
			out = out + string([]rune(right)[idx:(idx+1)])
		}
		left = rotate(left, idx)
		right = rotate(right, idx)
		left = scrambleLeft(left)
		right = scrambleRight(right)
		i = (i + 1)
	}
	return out
}

// line 48
func main() {
	plain := "WELLDONEISBETTERTHANWELLSAID"
	cipher := chao(plain, true)
	fmt.Println(plain)
	fmt.Println(cipher)
	fmt.Println(chao(cipher, false))
}

func main() {
	main()
}
