//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
	"strings"
)

type v map[string]any

// line 1
func char(n int) string {
	letters := "abcdefghijklmnopqrstuvwxyz"
	idx := (n - 97)
	if (idx < 0) || (idx >= 26) {
		return "?"
	}
	return string([]rune(letters)[idx:(idx + 1)])
}

// line 10
func fromBytes(bs []int) string {
	s := ""
	i := 0
	for i < len(any(bs)) {
		s = s + char(bs[i])
		i = (i + 1)
	}
	return s
}

var i int

func main() {
	i = 0
	var b []int = []int{
		98,
		105,
		110,
		97,
		114,
		121,
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(b)))), "\n"))
	var c []int = b
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(c)))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(_equal(b, c))))), "\n"))
	var d []int = []int{}
	for i < len(any(b)) {
		d = append(_toAnySlice(d), any(b[i]))
		i = (i + 1)
	}
	d[1] = 97
	d[4] = 110
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(b))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(d))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any((len(any(b)) == 0))))), "\n"))
	z := append(_toAnySlice(b), any(122))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(z))), "\n"))
	sub := b[1:3]
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(sub))), "\n"))
	var f []int = []int{}
	i = 0
	for i < len(any(d)) {
		val := d[i]
		if val == 110 {
			f = append(_toAnySlice(f), any(109))
		} else {
			f = append(_toAnySlice(f), any(val))
		}
		i = (i + 1)
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(d)+" -> "+fromBytes(f))), "\n"))
	var rem []int = []int{}
	rem = append(_toAnySlice(rem), any(b[0]))
	i = 3
	for i < len(any(b)) {
		rem = append(_toAnySlice(rem), any(b[i]))
		i = (i + 1)
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fromBytes(rem))), "\n"))
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
