//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
)

type v map[string]any

// line 1
func char(n int) string {
	letters := "abcdefghijklmnopqrstuvwxyz"
	idx := (n - 97)
	if (idx < 0) || (idx >= 26) {
		return "?"
	}
	return string([]rune(letters)[idx:(idx + 1)])
}

// line 10
func fromBytes(bs []int) string {
	s := ""
	i := 0
	for i < len(bs) {
		s = s + char(bs[i])
		i = (i + 1)
	}
	return s
}

var i int

func main() {
	i = 0
	var b []int = []int{
		98,
		105,
		110,
		97,
		114,
		121,
	}
	fmt.Println(fmt.Sprint(b))
	var c []int = b
	fmt.Println(fmt.Sprint(c))
	fmt.Println(fmt.Sprint(_equal(b, c)))
	var d []int = []int{}
	for i < len(b) {
		d = append(d, b[i])
		i = (i + 1)
	}
	d[1] = 97
	d[4] = 110
	fmt.Println(fromBytes(b))
	fmt.Println(fromBytes(d))
	fmt.Println(fmt.Sprint((len(b) == 0)))
	z := append(b, 122)
	fmt.Println(fromBytes(z))
	sub := b[1:3]
	fmt.Println(fromBytes(sub))
	var f []int = []int{}
	i = 0
	for i < len(d) {
		val := d[i]
		if val == 110 {
			f = append(f, 109)
		} else {
			f = append(f, val)
		}
		i = (i + 1)
	}
	fmt.Println(fromBytes(d) + " -> " + fromBytes(f))
	var rem []int = []int{}
	rem = append(rem, b[0])
	i = 3
	for i < len(b) {
		rem = append(rem, b[i])
		i = (i + 1)
	}
	fmt.Println(fromBytes(rem))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
