//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"os"
	"strconv"
	"time"
)

type v map[string]any

// line 3
func parseIntStr(str string) int {
	i := 0
	neg := false
	if (len(any(str)) > 0) && (string([]rune(str)[0:1]) == "-") {
		neg = true
		i = 1
	}
	n := 0
	digits := map[string]int{
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	}
	for i < len(any(str)) {
		n = ((n * 10) + digits[string([]rune(str)[i:(i+1)])])
		i = (i + 1)
	}
	if neg {
		n = -n
	}
	return n
}

// line 31
func mainFn() {
	total := 0
	computer := ((int64(_now()) % int64(2)) == 0)
	fmt.Println(any("Enter q to quit at any time\n"))
	if computer {
		fmt.Println(any("The computer will choose first"))
	} else {
		fmt.Println(any("You will choose first"))
	}
	fmt.Println(any("\n\nRunning total is now 0\n\n"))
	round := 1
	done := false
	for !(done) {
		fmt.Println(any("ROUND " + fmt.Sprint(any(round)) + ":\n\n"))
		i := 0
		for (i < 2) && (!(done)) {
			if computer {
				choice := 0
				if total < 18 {
					choice = (int64((int64(_now()) % int64(3))) + int64(1))
				} else {
					choice = (21 - total)
				}
				total = (total + choice)
				fmt.Println(any("The computer chooses " + fmt.Sprint(any(choice))))
				fmt.Println(any("Running total is now " + fmt.Sprint(any(total))))
				if total == 21 {
					fmt.Println(any("\nSo, commiserations, the computer has won!"))
					done = true
				}
			} else {
				for {
					fmt.Println(any("Your choice 1 to 3 : "))
					line := _input()
					if (line == "q") || (line == "Q") {
						fmt.Println(any("OK, quitting the game"))
						done = true
						break
					}
					num := parseIntStr(line)
					if (num < 1) || (num > 3) {
						if (total + num) > 21 {
							fmt.Println(any("Too big, try again"))
						} else {
							fmt.Println(any("Out of range, try again"))
						}
						continue
					}
					if (total + num) > 21 {
						fmt.Println(any("Too big, try again"))
						continue
					}
					total = (total + num)
					fmt.Println(any("Running total is now " + fmt.Sprint(any(total))))
					break
				}
				if total == 21 {
					fmt.Println(any("\nSo, congratulations, you've won!"))
					done = true
				}
			}
			fmt.Println(any("\n"))
			computer = !(computer)
			i = (i + 1)
		}
		round = (round + 1)
	}
}

func main() {
	mainFn()
}

func _input() string {
	var s string
	fmt.Scanln(&s)
	return s
}

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int64 {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return nowSeed
	}
	return time.Now().UnixNano()
}
