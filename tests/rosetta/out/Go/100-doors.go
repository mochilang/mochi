//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
)

type v map[string]any

func main() {
	doors := []any{}
	for i := 0; i < 100; i++ {
		doors = append(doors, any(false))
	}
	for pass := 1; pass < 101; pass++ {
		idx := (pass - 1)
		for idx < 100 {
			doors[idx] = !((doors[idx]).(bool))
			idx = (idx + pass)
		}
	}
	for row := 0; row < 10; row++ {
		line := ""
		for col := 0; col < 10; col++ {
			idx := ((row * 10) + col)
			if _exists(doors[idx]) {
				line = line + "1"
			} else {
				line = line + "0"
			}
			if col < 9 {
				line = line + " "
			}
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
	}
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case bool:
		return s
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case map[string]int:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Slice, reflect.Array:
		return rv.Len() > 0
	case reflect.Map:
		return !rv.IsNil() && rv.Len() > 0
	case reflect.Pointer:
		return !rv.IsNil()
	case reflect.Struct:
		return !rv.IsZero()
	}
	return false
}
