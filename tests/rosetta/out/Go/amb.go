//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func amb(wordsets [][]string, res *[]string, idx int) bool {
	if idx == len(any(wordsets)) {
		return true
	}
	prev := ""
	if idx > 0 {
		prev = res[(idx - 1)]
	}
	i := 0
	for i < len(any(wordsets[idx])) {
		w := wordsets[idx][i]
		if (idx == 0) || (string([]rune(prev)[(len(any(prev))-1):len(any(prev))]) == string([]rune(w)[0:1])) {
			res[idx] = w
			if amb(wordsets, res, (idx + 1)) {
				return true
			}
		}
		i = (i + 1)
	}
	return false
}

// line 26
func main() {
	wordset := [][]string{
		[]string{"the", "that", "a"},
		[]string{"frog", "elephant", "thing"},
		[]string{"walked", "treaded", "grows"},
		[]string{"slowly", "quickly"},
	}
	var res []string = []string{}
	i := 0
	for i < len(any(wordset)) {
		res = append(_toAnySlice(res), any(""))
		i = (i + 1)
	}
	if amb(wordset, res, 0) {
		out := "[" + res[0]
		j := 1
		for j < len(any(res)) {
			out = out + " " + res[j]
			j = (j + 1)
		}
		out = out + "]"
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(out)), "\n"))
	} else {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("No amb found")), "\n"))
	}
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
