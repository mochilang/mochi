//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 4
func padLeft(s string, w int) string {
	res := ""
	n := (w - len(s))
	for n > 0 {
		res = res + " "
		n = (n - 1)
	}
	return res + s
}

func main() {
	dna := "" + "CGTAAAAAATTACAACGTCCTTTGGCTATCTCTTAAACTCCTGCTAAATG" + "CTCGTGCTTTCCAATTATGTAAGCGTTCCGAGACGGGGTGGTCGATTCTG" + "AGGACAAAGGTCAAGATGGAGCGCATCGAACGCAATAAGGATCATTTGAT" + "GGGACGTTTCGTCGACAAAGTCTTGTTTCGAGAGTAACGGCTACCGTCTT" + "CGATTCTGCTTATAACACTATGTTCTTATGAAATGGATGTTCTGAGTTGG" + "TCAGTCCCAATGTGCGGGGTTTCTTTTAGTACGTCGGGAGTGGTATTATA" + "TTTAATTTTTCTATATAGCGATCTGTATTTAAGCAATTCATTTAGGTTAT" + "CGCCGCGATGCTCGGTTCGGACCGCCAAGCATCTGGCTCCACTGCTAGTG" + "TCCTAAATTTGAATGGCAAACACAAATAAGATTTAGCAATTCGTGTAGAC" + "GACCGGGGACTTGCATGATGGGAGCAGCTTTGTTAAACTACGAACGTAAT"
	fmt.Println("SEQUENCE:")
	le := len(dna)
	i := 0
	for i < le {
		k := (i + 50)
		if k > le {
			k = le
		}
		fmt.Println(padLeft(fmt.Sprint(i), 5) + ": " + string([]rune(dna)[i:k]))
		i = (i + 50)
	}
	a := 0
	c := 0
	g := 0
	t := 0
	idx := 0
	for idx < le {
		ch := string([]rune(dna)[idx:(idx + 1)])
		if ch == "A" {
			a = (a + 1)
		} else {
			if ch == "C" {
				c = (c + 1)
			} else {
				if ch == "G" {
					g = (g + 1)
				} else {
					if ch == "T" {
						t = (t + 1)
					}
				}
			}
		}
		idx = (idx + 1)
	}
	fmt.Println("")
	fmt.Println("BASE COUNT:")
	fmt.Println("    A: " + padLeft(fmt.Sprint(a), 3))
	fmt.Println("    C: " + padLeft(fmt.Sprint(c), 3))
	fmt.Println("    G: " + padLeft(fmt.Sprint(g), 3))
	fmt.Println("    T: " + padLeft(fmt.Sprint(t), 3))
	fmt.Println("    ------")
	fmt.Println("    Î£: " + fmt.Sprint(le))
	fmt.Println("    ======")
}
