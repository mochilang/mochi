//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func isPrime(n int) bool {
	if n < 2 {
		return false
	}
	if (n % 2) == 0 {
		return (n == 2)
	}
	if (n % 3) == 0 {
		return (n == 3)
	}
	d := 5
	for (d * d) <= n {
		if (n % d) == 0 {
			return false
		}
		d = (d + 2)
		if (n % d) == 0 {
			return false
		}
		d = (d + 4)
	}
	return true
}

// line 15
func firstPrimeFactor(n int) int {
	if n == 1 {
		return 1
	}
	if (n % 3) == 0 {
		return 3
	}
	if (n % 5) == 0 {
		return 5
	}
	inc := []int{
		4,
		2,
		4,
		2,
		4,
		6,
		2,
		6,
	}
	k := 7
	i := 0
	for (k * k) <= n {
		if (n % k) == 0 {
			return k
		}
		k = (k + inc[i])
		i = ((i + 1) % len(any(inc)))
	}
	return n
}

// line 30
func indexOf(s string, ch string) int {
	i := 0
	for i < len(any(s)) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 39
func padLeft(n int, width int) string {
	s := fmt.Sprint(any(n))
	for len(any(s)) < width {
		s = " " + s
	}
	return s
}

// line 47
func formatFloat(f float64, prec int) string {
	s := fmt.Sprint(any(f))
	idx := indexOf(s, ".")
	if idx < 0 {
		return s
	}
	need := ((idx + 1) + prec)
	if len(any(s)) > need {
		return string([]rune(s)[0:need])
	}
	return s
}

// line 56
func main() {
	var blum []int = []int{}
	counts := []int{
		0,
		0,
		0,
		0,
	}
	digits := []int{
		1,
		3,
		7,
		9,
	}
	_ = digits
	i := 1
	bc := 0
	for {
		p := firstPrimeFactor(i)
		if (p % 4) == 3 {
			q := int((float64(i) / float64(p)))
			if ((q != p) && ((q % 4) == 3)) && isPrime(q) {
				if bc < 50 {
					blum = append(_toAnySlice(blum), any(i))
				}
				d := (i % 10)
				if d == 1 {
					counts[0] = (counts[0] + 1)
				} else if d == 3 {
					counts[1] = (counts[1] + 1)
				} else if d == 7 {
					counts[2] = (counts[2] + 1)
				} else if d == 9 {
					counts[3] = (counts[3] + 1)
				}
				bc = (bc + 1)
				if bc == 50 {
					fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("First 50 Blum integers:")), "\n"))
					idx := 0
					for idx < 50 {
						line := ""
						j := 0
						for j < 10 {
							line = line + padLeft(blum[idx], 3) + " "
							idx = (idx + 1)
							j = (j + 1)
						}
						fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(string([]rune(line)[0:(len(any(line))-1)]))), "\n"))
					}
					break
				}
			}
		}
		if (i % 5) == 3 {
			i = (i + 4)
		} else {
			i = (i + 2)
		}
	}
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
