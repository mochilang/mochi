//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 5
func applyFilter(input []float64, a []float64, b []float64) []float64 {
	var out []float64 = []float64{}
	scale := (1.0 / a[0])
	i := 0
	for i < len(any(input)) {
		tmp := 0.0
		j := 0
		for (j <= i) && (j < len(any(b))) {
			tmp = (tmp + (b[j] * input[(i-j)]))
			j = (j + 1)
		}
		j = 0
		for (j < i) && ((j + 1) < len(any(a))) {
			tmp = (tmp - (a[(j+1)] * out[((i-j)-1)]))
			j = (j + 1)
		}
		out = append(_toAnySlice(out), any((tmp * scale)))
		i = (i + 1)
	}
	return out
}

var a []float64
var b []float64

func main() {
	a = []float64{
		1.0,
		-0.00000000000000027756,
		0.33333333,
		-0.0000000000000000185,
	}
	b = []float64{
		0.16666667,
		0.5,
		0.5,
		0.16666667,
	}
	sig := []float64{
		-0.917843918645,
		0.141984778794,
		1.20536903482,
		0.190286794412,
		-0.662370894973,
		-1.00700480494,
		-0.404707073677,
		0.800482325044,
		0.743500089861,
		1.01090520172,
		0.741527555207,
		0.277841675195,
		0.400833448236,
		-0.2085993586,
		-0.172842103641,
		-0.134316096293,
		0.0259303398477,
		0.490105989562,
		0.549391221511,
		0.9047198589,
	}
	res := applyFilter(sig, a, b)
	k := 0
	for k < len(any(res)) {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(res[k])), "\n"))
		k = (k + 1)
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
