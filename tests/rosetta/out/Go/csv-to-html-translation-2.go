//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

func main() {
	c := "Character,Speech\n" + "The multitude,The messiah! Show us the messiah!\n" + "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n" + "The multitude,Who are you?\n" + "Brians mother,I'm his mother; that's who!\n" + "The multitude,Behold his mother! Behold his mother!"
	var rows [][]string = [][]string{}
	for _, line := range split(c, "\n") {
		rows = append(_toAnySlice(rows), any(split(line, ",")))
	}
	headings := true
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("<table>")), "\n"))
	if headings {
		if len(any(rows)) > 0 {
			th := ""
			for _, h := range rows[0] {
				th = th + "<th>" + h + "</th>"
			}
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   <thead>")), "\n"))
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("      <tr>"+th+"</tr>")), "\n"))
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   </thead>")), "\n"))
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   <tbody>")), "\n"))
			i := 1
			for i < len(any(rows)) {
				cells := ""
				for _, cell := range rows[i] {
					cells = cells + "<td>" + cell + "</td>"
				}
				fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("      <tr>"+cells+"</tr>")), "\n"))
				i = (i + 1)
			}
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   </tbody>")), "\n"))
		}
	} else {
		for _, row := range rows {
			cells := ""
			for _, cell := range row {
				cells = cells + "<td>" + cell + "</td>"
			}
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("    <tr>"+cells+"</tr>")), "\n"))
		}
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("</table>")), "\n"))
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
