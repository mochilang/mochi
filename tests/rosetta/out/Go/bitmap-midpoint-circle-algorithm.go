//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func initGrid(size int) [][]string {
	var g [][]string = [][]string{}
	y := 0
	for y < size {
		var row []string = []string{}
		x := 0
		for x < size {
			row = append(_toAnySlice(row), any(" "))
			x = (x + 1)
		}
		g = append(_toAnySlice(g), any(row))
		y = (y + 1)
	}
	return g
}

// line 17
func set(g *[][]string, x int, y int) {
	if (((x >= 0) && (x < len(any(g[0])))) && (y >= 0)) && (y < len(any(g))) {
		g[y][x] = "#"
	}
}

// line 23
func circle(r int) [][]string {
	size := ((r * 2) + 1)
	g := initGrid(size)
	x := r
	y := 0
	err := (1 - r)
	for y <= x {
		set(g, (r + x), (r + y))
		set(g, (r + y), (r + x))
		set(g, (r - x), (r + y))
		set(g, (r - y), (r + x))
		set(g, (r - x), (r - y))
		set(g, (r - y), (r - x))
		set(g, (r + x), (r - y))
		set(g, (r + y), (r - x))
		y = (y + 1)
		if err < 0 {
			err = ((err + (2 * y)) + 1)
		} else {
			x = (x - 1)
			err = ((err + (2 * (y - x))) + 1)
		}
	}
	return g
}

// line 49
func trimRight(row []string) string {
	end := len(any(row))
	for (end > 0) && (row[(end-1)] == " ") {
		end = (end - 1)
	}
	s := ""
	i := 0
	for i < end {
		s = s + row[i]
		i = (i + 1)
	}
	return s
}

var g [][]string

func main() {
	g = circle(10)
	for _, row := range g {
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(trimRight(row))), "\n"))
	}
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
