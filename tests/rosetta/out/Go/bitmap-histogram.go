//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 1
func image() [][]int {
	return [][]int{[]int{0, 0, 10000}, []int{65535, 65535, 65535}, []int{65535, 65535, 65535}}
}

// line 5
func histogram(g [][]int, bins int) []int {
	if bins <= 0 {
		bins = len(g[0])
	}
	var h []int = []int{}
	i := 0
	for i < bins {
		h = append(h, 0)
		i = (i + 1)
	}
	y := 0
	for y < len(g) {
		row := g[y]
		x := 0
		for x < len(row) {
			p := row[x]
			idx := int((float64((p * (bins - 1))) / float64(65535)))
			h[idx] = (h[idx] + 1)
			x = (x + 1)
		}
		y = (y + 1)
	}
	return h
}

// line 28
func medianThreshold(h []int) int {
	lb := 0
	ub := (len(h) - 1)
	lSum := 0
	uSum := 0
	for lb <= ub {
		if (lSum + h[lb]) < (uSum + h[ub]) {
			lSum = (lSum + h[lb])
			lb = (lb + 1)
		} else {
			uSum = (uSum + h[ub])
			ub = (ub - 1)
		}
	}
	return int((float64((ub * 65535)) / float64(len(h))))
}

// line 45
func threshold(g [][]int, t int) [][]int {
	var out [][]int = [][]int{}
	y := 0
	for y < len(g) {
		row := g[y]
		var newRow []int = []int{}
		x := 0
		for x < len(row) {
			if row[x] < t {
				newRow = append(newRow, 0)
			} else {
				newRow = append(newRow, 65535)
			}
			x = (x + 1)
		}
		out = append(out, newRow)
		y = (y + 1)
	}
	return out
}

// line 66
func printImage(g [][]int) {
	y := 0
	for y < len(g) {
		row := g[y]
		line := ""
		x := 0
		for x < len(row) {
			if row[x] == 0 {
				line = line + "0"
			} else {
				line = line + "1"
			}
			x = (x + 1)
		}
		fmt.Println(line)
		y = (y + 1)
	}
}

// line 85
func main() {
	img := image()
	h := histogram(img, 0)
	fmt.Println("Histogram: " + fmt.Sprint(h))
	t := medianThreshold(h)
	fmt.Println("Threshold: " + fmt.Sprint(t))
	bw := threshold(img, t)
	printImage(bw)
}

func main() {
	main()
}
