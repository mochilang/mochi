//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func concatInts(a []int, b []int) []int {
	var out []int = []int{}
	for _, v := range a {
		out = append(_toAnySlice(out), any(v))
	}
	for _, v := range b {
		out = append(_toAnySlice(out), any(v))
	}
	return out
}

// line 10
func concatAny(a []any, b []any) []any {
	var out []any = []any{}
	for _, v := range a {
		out = append(out, v)
	}
	for _, v := range b {
		out = append(out, v)
	}
	return out
}

var a []int
var b []int

func main() {
	a = []int{1, 2, 3}
	b = []int{7, 12, 60}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(concatInts(a, b))))), "\n"))
	var i []any = _toAnySlice([]any{any(1), any(2), any(3)})
	var j []any = _toAnySlice([]any{
		any("Crosby"),
		any("Stills"),
		any("Nash"),
		any("Young"),
	})
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(concatAny(i, j))))), "\n"))
	l := []int{1, 2, 3}
	m := []int{7, 12, 60}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any(concatInts(l, m))))), "\n"))
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
