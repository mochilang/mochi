//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func absf(x float64) float64 {
	if x < 0.0 {
		return -x
	}
	return x
}

// line 8
func pow10(n int) float64 {
	var r float64 = 1.0
	i := 0
	for i < n {
		r = (r * 10.0)
		i = (i + 1)
	}
	return r
}

// line 18
func formatFloat(f float64, prec int) string {
	scale := pow10(prec)
	scaled := ((f * scale) + 0.5)
	n := (int(scaled))
	digits := fmt.Sprint(any(n))
	for len(any(digits)) <= prec {
		digits = "0" + digits
	}
	intPart := string([]rune(digits)[0:(len(any(digits)) - prec)])
	fracPart := string([]rune(digits)[(len(any(digits)) - prec):len(any(digits))])
	return intPart + "." + fracPart
}

var n int

func main() {
	n = 2
	epsilon := 0.000000000000001
	factval := 1
	var e float64 = 2.0
	var term float64 = 1.0
	for {
		factval = (factval * n)
		n = (n + 1)
		term = (1.0 / (float64(factval)))
		e = (e + term)
		if absf(term) < epsilon {
			break
		}
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("e = "+formatFloat(e, 15))), "\n"))
}
