//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 2
func absf(x float64) float64 {
	if x < 0.0 {
		return -x
	}
	return x
}

// line 7
func floorf(x float64) float64 {
	return float64((int(x)))
}

// line 11
func indexOf(s string, ch string) int {
	i := 0
	for i < len(s) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 22
func fmtF(x float64) string {
	y := (floorf(((x * 10000.0) + 0.5)) / 10000.0)
	s := fmt.Sprint(y)
	dot := indexOf(s, ".")
	if dot == (0 - 1) {
		s = s + ".0000"
	} else {
		decs := ((len(s) - dot) - 1)
		if decs > 4 {
			s = string([]rune(s)[0:(dot + 5)])
		} else {
			for decs < 4 {
				s = s + "0"
				decs = (decs + 1)
			}
		}
	}
	return s
}

// line 42
func padInt(n int, width int) string {
	s := fmt.Sprint(n)
	for len(s) < width {
		s = " " + s
	}
	return s
}

// line 50
func padFloat(x float64, width int) string {
	s := fmtF(x)
	for len(s) < width {
		s = " " + s
	}
	return s
}

// line 58
func avgLen(n int) float64 {
	tests := 10000
	sum := 0
	seed := 1
	t := 0
	for t < tests {
		var visited []bool = []bool{}
		i := 0
		for i < n {
			visited = append(visited, false)
			i = (i + 1)
		}
		x := 0
		for !visited[x] {
			visited[x] = true
			sum = (sum + 1)
			seed = (((seed * 1664525) + 1013904223) % 2147483647)
			x = (seed % n)
		}
		t = (t + 1)
	}
	return ((float64(sum)) / float64(tests))
}

// line 82
func ana(n int) float64 {
	nn := float64(n)
	term := 1.0
	sum := 1.0
	i := (nn - 1.0)
	for i >= 1.0 {
		term = (term * (i / nn))
		sum = (sum + term)
		i = (i - 1.0)
	}
	return sum
}

// line 95
func main() {
	nmax := 20
	fmt.Println(" N    average    analytical    (error)")
	fmt.Println("===  =========  ============  =========")
	n := 1
	for n <= nmax {
		a := avgLen(n)
		b := ana(n)
		err := ((absf((a - b)) / b) * 100.0)
		line := padInt(n, 3) + "  " + padFloat(a, 9) + "  " + padFloat(b, 12) + "  (" + padFloat(err, 6) + "%)"
		fmt.Println(line)
		n = (n + 1)
	}
}

func main() {
	main()
}
