//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func newTerm(a int, b int) map[string]int {
	return map[string]int{"a": a, "b": b}
}

// line 8
func cfSqrt2(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	n := 0
	for n < nTerms {
		f = append(_toAnySlice(f), any(newTerm(2, 1)))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 1
	}
	return f
}

// line 19
func cfNap(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	n := 0
	for n < nTerms {
		f = append(_toAnySlice(f), any(newTerm(n, (n-1))))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 2
	}
	if nTerms > 1 {
		f[1]["b"] = 1
	}
	return f
}

// line 31
func cfPi(nTerms int) []map[string]int {
	var f []map[string]int = []map[string]int{}
	n := 0
	for n < nTerms {
		g := ((2 * n) - 1)
		f = append(_toAnySlice(f), any(newTerm(6, (g*g))))
		n = (n + 1)
	}
	if nTerms > 0 {
		f[0]["a"] = 3
	}
	return f
}

// line 43
func real(f []map[string]int) float64 {
	r := 0.0
	i := (len(any(f)) - 1)
	for i > 0 {
		r = ((float64(f[i]["b"])) / ((float64(f[i]["a"])) + r))
		i = (i - 1)
	}
	if len(any(f)) > 0 {
		r = (r + (float64(f[0]["a"])))
	}
	return r
}

// line 54
func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("sqrt2: "+fmt.Sprint(any(real(cfSqrt2(20)))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("nap:   "+fmt.Sprint(any(real(cfNap(20)))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("pi:    "+fmt.Sprint(any(real(cfPi(20)))))), "\n"))
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
