//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 3
func validComb(a int, b int, c int, d int, e int, f int, g int) bool {
	square1 := (a + b)
	square2 := ((b + c) + d)
	square3 := ((d + e) + f)
	square4 := (f + g)
	return (((square1 == square2) && (square2 == square3)) && (square3 == square4))
}

// line 11
func isUnique(a int, b int, c int, d int, e int, f int, g int) bool {
	nums := []int{
		a,
		b,
		c,
		d,
		e,
		f,
		g,
	}
	i := 0
	for i < len(nums) {
		j := (i + 1)
		for j < len(nums) {
			if nums[i] == nums[j] {
				return false
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return true
}

// line 25
func getCombs(low int, high int, unique bool) map[string]any {
	valid := []any{}
	count := 0
	for b := low; b < (high + 1); b++ {
		for c := low; c < (high + 1); c++ {
			for d := low; d < (high + 1); d++ {
				s := ((b + c) + d)
				for e := low; e < (high + 1); e++ {
					for f := low; f < (high + 1); f++ {
						a := (s - b)
						g := (s - f)
						if (a < low) || (a > high) {
							continue
						}
						if (g < low) || (g > high) {
							continue
						}
						if ((d + e) + f) != s {
							continue
						}
						if (f + g) != s {
							continue
						}
						if !unique || isUnique(a, b, c, d, e, f, g) {
							valid = append(valid, []int{
								a,
								b,
								c,
								d,
								e,
								f,
								g,
							})
							count = (count + 1)
						}
					}
				}
			}
		}
	}
	return map[string]any{"count": count, "list": valid}
}

func main() {
	r1 := getCombs(1, 7, true)
	fmt.Println(fmt.Sprint(r1["count"]) + " unique solutions in 1 to 7")
	fmt.Println(r1["list"])
	r2 := getCombs(3, 9, true)
	fmt.Println(fmt.Sprint(r2["count"]) + " unique solutions in 3 to 9")
	fmt.Println(r2["list"])
	r3 := getCombs(0, 9, false)
	fmt.Println(fmt.Sprint(r3["count"]) + " non-unique solutions in 0 to 9")
}
