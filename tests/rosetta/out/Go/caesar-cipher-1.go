//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func indexOf(s string, ch string) int {
	i := 0
	for i < len(any(s)) {
		if string([]rune(s)[i:(i+1)]) == ch {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 12
func ord(ch string) int {
	upper := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	lower := "abcdefghijklmnopqrstuvwxyz"
	idx := indexOf(upper, ch)
	if idx >= 0 {
		return (65 + idx)
	}
	idx = indexOf(lower, ch)
	if idx >= 0 {
		return (97 + idx)
	}
	return 0
}

// line 22
func chr(n int) string {
	upper := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	lower := "abcdefghijklmnopqrstuvwxyz"
	if (n >= 65) && (n < 91) {
		return string([]rune(upper)[(n - 65):(n - 64)])
	}
	if (n >= 97) && (n < 123) {
		return string([]rune(lower)[(n - 97):(n - 96)])
	}
	return "?"
}

// line 30
func shiftRune(r string, k int) string {
	if (r >= "a") && (r <= "z") {
		return chr(((((ord(r) - 97) + k) % 26) + 97))
	}
	if (r >= "A") && (r <= "Z") {
		return chr(((((ord(r) - 65) + k) % 26) + 65))
	}
	return r
}

// line 40
func encipher(s string, k int) string {
	out := ""
	i := 0
	for i < len(any(s)) {
		out = out + shiftRune(string([]rune(s)[i:(i+1)]), k)
		i = (i + 1)
	}
	return out
}

// line 50
func decipher(s string, k int) string {
	return encipher(s, ((26 - (k % 26)) % 26))
}

// line 54
func main() {
	pt := "The five boxing wizards jump quickly"
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Plaintext: "+pt)), "\n"))
	for _, key := range []int{
		0,
		1,
		7,
		25,
		26,
	} {
		if (key < 1) || (key > 25) {
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Key "+fmt.Sprint(any(key))+" invalid")), "\n"))
			continue
		}
		ct := encipher(pt, key)
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Key "+fmt.Sprint(any(key)))), "\n"))
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("  Enciphered: "+ct)), "\n"))
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("  Deciphered: "+decipher(ct, key))), "\n"))
	}
}

func main() {
	main()
}
