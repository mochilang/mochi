//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func sqrtApprox(x float64) float64 {
	guess := x
	i := 0
	for i < 20 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

// line 13
func cholesky(a [][]float64) [][]float64 {
	n := len(any(a))
	var l [][]float64 = [][]float64{}
	i := 0
	for i < n {
		var row []float64 = []float64{}
		j := 0
		for j < n {
			row = append(_toAnySlice(row), any(0.0))
			j = (j + 1)
		}
		l = append(_toAnySlice(l), any(row))
		i = (i + 1)
	}
	i = 0
	for i < n {
		j := 0
		for j <= i {
			sum := a[i][j]
			k := 0
			for k < j {
				sum = (sum - (l[i][k] * l[j][k]))
				k = (k + 1)
			}
			if i == j {
				l[i][j] = sqrtApprox(sum)
			} else {
				l[i][j] = (sum / l[j][j])
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return l
}

// line 49
func printMat(m [][]float64) {
	i := 0
	for i < len(any(m)) {
		line := ""
		j := 0
		for j < len(any(m[i])) {
			line = line + fmt.Sprint(any(m[i][j]))
			if j < (len(any(m[i])) - 1) {
				line = line + " "
			}
			j = (j + 1)
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(line)), "\n"))
		i = (i + 1)
	}
}

// line 64
func demo(a [][]float64) {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("A:")), "\n"))
	printMat(a)
	l := cholesky(a)
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("L:")), "\n"))
	printMat(l)
}

func main() {
	demo([][]float64{[]float64{25.0, 15.0, -5.0}, []float64{15.0, 18.0, 0.0}, []float64{-5.0, 0.0, 11.0}})
	demo([][]float64{
		[]float64{
			18.0,
			22.0,
			54.0,
			42.0,
		},
		[]float64{
			22.0,
			70.0,
			86.0,
			62.0,
		},
		[]float64{
			54.0,
			86.0,
			174.0,
			134.0,
		},
		[]float64{
			42.0,
			62.0,
			134.0,
			106.0,
		},
	})
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
