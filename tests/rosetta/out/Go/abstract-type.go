//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

type Beast interface{ isBeast() }
type Dog struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Dog) isBeast() {}

type Cat struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (Cat) isBeast() {}

// line 8
func beastKind(b Beast) string {
	return (func() any {
		_t := b
		if tmp0, ok := _t.(Dog); ok {
			k := tmp0.Kind
			return k
		}
		if tmp1, ok := _t.(Cat); ok {
			k := tmp1.Kind
			return k
		}
		return nil
	}()).(string)
}

// line 15
func beastName(b Beast) string {
	return (func() any {
		_t := b
		if tmp2, ok := _t.(Dog); ok {
			n := tmp2.Name
			return n
		}
		if tmp3, ok := _t.(Cat); ok {
			n := tmp3.Name
			return n
		}
		return nil
	}()).(string)
}

// line 22
func beastCry(b Beast) string {
	return func() string {
		_t := b
		if tmp4, ok := _t.(Dog); ok {
			return "Woof"
		}
		if tmp5, ok := _t.(Cat); ok {
			return "Meow"
		}
		var zeroVal string
		return zeroVal
	}()
}

// line 29
func bprint(b Beast) {
	fmt.Println(any(beastName(b) + ", who's a " + beastKind(b) + ", cries: \"" + beastCry(b) + "\"."))
}

// line 33
func mainFn() {
	var d Beast = Dog{Kind: "labrador", Name: "Max"}
	var c Beast = Cat{Kind: "siamese", Name: "Sammy"}
	bprint(d)
	bprint(c)
}

func main() {
	mainFn()
}
