//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"reflect"
	"strings"
)

type v = Point

type Point struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

// line 9
func sqrtApprox(x float64) float64 {
	g := x
	i := 0
	for i < 40 {
		g = ((g + (x / g)) / 2.0)
		i = (i + 1)
	}
	return g
}

// line 19
func hypot(x float64, y float64) float64 {
	return sqrtApprox(((x * x) + (y * y)))
}

// line 28
func circles(p1 Point, p2 Point, r float64) []any {
	if (p1.X == p2.X) && (p1.Y == p2.Y) {
		if r == 0.0 {
			return []any{p1, p1, "Coincident points with r==0.0 describe a degenerate circle."}
		}
		return []any{p1, p2, "Coincident points describe an infinite number of circles."}
	}
	if r == 0.0 {
		return []any{p1, p2, "R==0.0 does not describe circles."}
	}
	dx := (p2.X - p1.X)
	dy := (p2.Y - p1.Y)
	q := hypot(dx, dy)
	if q > (2.0 * r) {
		return []any{p1, p2, "Points too far apart to form circles."}
	}
	m := Point{X: ((p1.X + p2.X) / 2.0), Y: ((p1.Y + p2.Y) / 2.0)}
	if q == (2.0 * r) {
		return []any{m, m, "Points form a diameter and describe only a single circle."}
	}
	d := sqrtApprox(((r * r) - ((q * q) / 4.0)))
	ox := ((d * dx) / q)
	oy := ((d * dy) / q)
	return []any{Point{X: (m.X - oy), Y: (m.Y + ox)}, Point{X: (m.X + oy), Y: (m.Y - ox)}, "Two circles."}
}

func main() {
	Two := "Two circles."
	_ = Two
	R0 := "R==0.0 does not describe circles."
	_ = R0
	Co := "Coincident points describe an infinite number of circles."
	_ = Co
	CoR0 := "Coincident points with r==0.0 describe a degenerate circle."
	_ = CoR0
	Diam := "Points form a diameter and describe only a single circle."
	_ = Diam
	Far := "Points too far apart to form circles."
	_ = Far
	td := [][]any{
		[]any{any(Point{X: 0.1234, Y: 0.9876}), any(Point{X: 0.8765, Y: 0.2345}), any(2.0)},
		[]any{any(Point{X: 0.0, Y: 2.0}), any(Point{X: 0.0, Y: 0.0}), any(1.0)},
		[]any{any(Point{X: 0.1234, Y: 0.9876}), any(Point{X: 0.1234, Y: 0.9876}), any(2.0)},
		[]any{any(Point{X: 0.1234, Y: 0.9876}), any(Point{X: 0.8765, Y: 0.2345}), any(0.5)},
		[]any{any(Point{X: 0.1234, Y: 0.9876}), any(Point{X: 0.1234, Y: 0.9876}), any(0.0)},
	}
	for _, tc := range td {
		p1 := tc[0]
		p2 := tc[1]
		r := tc[2]
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("p1:  {"+fmt.Sprint(_getField(p1, "x"))+" "+fmt.Sprint(_getField(p1, "y"))+"}")), "\n"))
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("p2:  {"+fmt.Sprint(_getField(p2, "x"))+" "+fmt.Sprint(_getField(p2, "y"))+"}")), "\n"))
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("r:  "+fmt.Sprint(r))), "\n"))
		res := circles(&(p1).(Point), &(p2).(Point), (r).(float64))
		c1 := res[0]
		_ = c1
		c2 := res[1]
		_ = c2
		caseStr := res[2]
		fmt.Println(strings.TrimSuffix(fmt.Sprintln("   "+fmt.Sprint(caseStr)), "\n"))
		if _equal(caseStr, "Points form a diameter and describe only a single circle.") || _equal(caseStr, "Coincident points with r==0.0 describe a degenerate circle.") {
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   Center:  {"+fmt.Sprint(_getField(c1, "x"))+" "+fmt.Sprint(_getField(c1, "y"))+"}")), "\n"))
		} else {
			if _equal(caseStr, "Two circles.") {
				fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   Center 1:  {"+fmt.Sprint(_getField(c1, "x"))+" "+fmt.Sprint(_getField(c1, "y"))+"}")), "\n"))
				fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("   Center 2:  {"+fmt.Sprint(_getField(c2, "x"))+" "+fmt.Sprint(_getField(c2, "y"))+"}")), "\n"))
			}
		}
		fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("")), "\n"))
	}
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Struct && bv.Kind() == reflect.Map {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Struct {
		am := map[string]any{}
		_copyToMap(am, a)
		bm := map[string]any{}
		_copyToMap(bm, b)
		return _equal(am, bm)
	}
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}
