//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 4
func abs(x float64) float64 {
	if x < 0.0 {
		return -x
	}
	return x
}

// line 9
func maxf(a float64, b float64) float64 {
	if a > b {
		return a
	}
	return b
}

// line 14
func isClose(a float64, b float64) bool {
	relTol := 0.000000001
	t := abs((a - b))
	u := (relTol * maxf(abs(a), abs(b)))
	return (t <= u)
}

// line 21
func sqrtApprox(x float64) float64 {
	guess := x
	i := 0
	for i < 10 {
		guess = ((guess + (x / guess)) / 2.0)
		i = (i + 1)
	}
	return guess
}

// line 31
func main() {
	root2 := sqrtApprox(2.0)
	pairs := [][]float64{
		[]float64{100000000000000.02, 100000000000000.02},
		[]float64{100.01, 100.011},
		[]float64{(10000000000000.002 / 10000.0), 1000000000.0000001},
		[]float64{0.001, 0.0010000001},
		[]float64{0.000000000000000000000101, 0.0},
		[]float64{(root2 * root2), 2.0},
		[]float64{((-root2) * root2), -2.0},
		[]float64{100000000000000000.0, 100000000000000000.0},
		[]float64{3.141592653589793, 3.141592653589793},
	}
	for _, pair := range pairs {
		a := pair[0]
		b := pair[1]
		s := func() string {
			if isClose(a, b) {
				return "≈"
			} else {
				return "≉"
			}
		}()
		fmt.Println(fmt.Sprint(a) + " " + s + " " + fmt.Sprint(b))
	}
}

func main() {
	main()
}
