//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 3
func listStr(xs []int) string {
	s := "["
	i := 0
	for i < len(any(xs)) {
		s = s + fmt.Sprint(any(xs[i]))
		if (i + 1) < len(any(xs)) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

var s []int

func main() {
	s = a[0:4]
	a := []int{
		0,
		0,
		0,
		0,
		0,
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("len(a) = "+fmt.Sprint(any(len(any(a)))))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("a = "+listStr(a))), "\n"))
	a[0] = 3
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("a = "+listStr(a))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("a[0] = "+fmt.Sprint(any(a[0])))), "\n"))
	cap_s := 5
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("len(s) = "+fmt.Sprint(any(len(any(s))))+"  cap(s) = "+fmt.Sprint(any(cap_s)))), "\n"))
	s = a[0:5]
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	a[0] = 22
	s[0] = 22
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("a = "+listStr(a))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	s = append(_toAnySlice(s), any(4))
	s = append(_toAnySlice(s), any(5))
	s = append(_toAnySlice(s), any(6))
	cap_s = 10
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("len(s) = "+fmt.Sprint(any(len(any(s))))+"  cap(s) = "+fmt.Sprint(any(cap_s)))), "\n"))
	a[4] = -1
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("a = "+listStr(a))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	s = []int{}
	for i := 0; i < 8; i++ {
		s = append(_toAnySlice(s), any(0))
	}
	cap_s = 8
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("s = "+listStr(s))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("len(s) = "+fmt.Sprint(any(len(any(s))))+"  cap(s) = "+fmt.Sprint(any(cap_s)))), "\n"))
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
