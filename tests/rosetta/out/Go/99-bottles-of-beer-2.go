//go:build ignore

// Generated by Mochi compiler v0.10.30 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
)

type v map[string]any

// line 1
func fields(s string) []string {
	var words []string = []string{}
	var cur string = ""
	var i int = 0
	for i < len([]rune(s)) {
		var ch string = string([]rune(s)[i:(i + 1)])
		if ((ch == " ") || (ch == "\n")) || (ch == "\t") {
			if len([]rune(cur)) > 0 {
				words = append(words, cur)
				cur = ""
			}
		} else {
			cur = cur + ch
		}
		i = (i + 1)
	}
	if len([]rune(cur)) > 0 {
		words = append(words, cur)
	}
	return words
}

// line 23
func join(xs []string, sep string) string {
	var res string = ""
	var i int = 0
	for i < len(xs) {
		if i > 0 {
			res = res + sep
		}
		res = res + xs[i]
		i = (i + 1)
	}
	return res
}

// line 36
func numberName(n int) string {
	var small []string = []string{
		"no",
		"one",
		"two",
		"three",
		"four",
		"five",
		"six",
		"seven",
		"eight",
		"nine",
		"ten",
		"eleven",
		"twelve",
		"thirteen",
		"fourteen",
		"fifteen",
		"sixteen",
		"seventeen",
		"eighteen",
		"nineteen",
	}
	var tens []string = []string{
		"ones",
		"ten",
		"twenty",
		"thirty",
		"forty",
		"fifty",
		"sixty",
		"seventy",
		"eighty",
		"ninety",
	}
	if n < 0 {
		return ""
	}
	if n < 20 {
		return small[n]
	}
	if n < 100 {
		var t string = tens[(float64(n) / float64(10))]
		var s int = (n % 10)
		if s > 0 {
			t = t + " " + small[s]
		}
		return t
	}
	return ""
}

// line 59
func pluralizeFirst(s string, n int) string {
	if n == 1 {
		return s
	}
	var w []string = fields(s)
	if len(w) > 0 {
		w[0] = w[0] + "s"
	}
	return join(w, " ")
}

// line 67
func randInt(seed int, n int) int {
	var next int = (((seed * 1664525) + 1013904223) % 2147483647)
	return (next % n)
}

// line 72
func slur(p string, d int) string {
	if len([]rune(p)) <= 2 {
		return p
	}
	var a []string = []string{}
	var i int = 1
	for i < (len([]rune(p)) - 1) {
		a = append(a, string([]rune(p)[i:(i+1)]))
		i = (i + 1)
	}
	var idx int = (len(a) - 1)
	var seed int = d
	for idx >= 1 {
		seed = (((seed * 1664525) + 1013904223) % 2147483647)
		if (seed % 100) >= d {
			var j int = (seed % (idx + 1))
			var tmp string = a[idx]
			a[idx] = a[j]
			a[j] = tmp
		}
		idx = (idx - 1)
	}
	var s string = string([]rune(p)[0:1])
	var k int = 0
	for k < len(a) {
		s = s + a[k]
		k = (k + 1)
	}
	s = s + string([]rune(p)[(len([]rune(p))-1):len([]rune(p))])
	var w []string = fields(s)
	return join(w, " ")
}

// line 103
func mainFn() {
	var i int = 99
	for i > 0 {
		fmt.Println(any(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer on the wall", i)))
		fmt.Println(any(slur(numberName(i), i) + " " + pluralizeFirst(slur("bottle of", i), i) + " " + slur("beer", i)))
		fmt.Println(any(slur("take one", i) + " " + slur("down", i) + " " + slur("pass it around", i)))
		fmt.Println(any(slur(numberName((i-1)), i) + " " + pluralizeFirst(slur("bottle of", i), (i-1)) + " " + slur("beer on the wall", i)))
		i = (i - 1)
	}
}

func main() {
	mainFn()
}
