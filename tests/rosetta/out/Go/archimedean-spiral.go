//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 2
func sinApprox(x float64) float64 {
	term := x
	sum := x
	n := 1
	for n <= 10 {
		denom := float64(((2 * n) * ((2 * n) + 1)))
		term = (((-term * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

// line 14
func cosApprox(x float64) float64 {
	term := 1.0
	sum := 1.0
	n := 1
	for n <= 10 {
		denom := float64((((2 * n) - 1) * (2 * n)))
		term = (((-term * x) * x) / denom)
		sum = (sum + term)
		n = (n + 1)
	}
	return sum
}

func main() {
	PI := 3.141592653589793
	degreesIncr := ((0.1 * PI) / 180.0)
	turns := 2.0
	stop := (((360.0 * turns) * 10.0) * degreesIncr)
	width := 600.0
	centre := (width / 2.0)
	a := 1.0
	b := 20.0
	theta := 0.0
	count := 0
	for theta < stop {
		r := (a + (b * theta))
		x := (r * cosApprox(theta))
		y := (r * sinApprox(theta))
		if (count % 100) == 0 {
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(fmt.Sprint(any((centre+x)))+","+fmt.Sprint(any((centre-y))))), "\n"))
		}
		theta = (theta + degreesIncr)
		count = (count + 1)
	}
}
