//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func intSqrt(x int) int {
	if x < 2 {
		return x
	}
	left := 1
	right := (float64(x) / float64(2))
	ans := 0
	for float64(left) <= right {
		mid := (float64(left) + ((right - float64(left)) / float64(2)))
		sq := (mid * mid)
		if sq == x {
			return int(mid)
		}
		if sq < float64(x) {
			left = int(int(int((mid + float64(1)))))
			ans = int(int(int(mid)))
		} else {
			right = (mid - float64(1))
		}
	}
	return ans
}

// line 23
func sumRecip(n int) int {
	s := 1
	limit := intSqrt(n)
	f := 2
	for f <= limit {
		if (n % f) == 0 {
			s = int(int(int((float64(s) + (float64(n) / float64(f))))))
			f2 := (float64(n) / float64(f))
			if f2 != f {
				s = (s + f)
			}
		}
		f = (f + 1)
	}
	return s
}

// line 39
func main() {
	nums := []int{
		6,
		28,
		120,
		496,
		672,
		8128,
		30240,
		32760,
		523776,
	}
	for _, n := range nums {
		s := sumRecip(n)
		if (s % n) == 0 {
			val := (float64(s) / float64(n))
			perfect := ""
			if val == 1 {
				perfect = "perfect!"
			}
			fmt.Println(strings.TrimSuffix(fmt.Sprintln(any("Sum of recipr. factors of "+fmt.Sprint(any(n))+" = "+fmt.Sprint(any(val))+" exactly "+perfect)), "\n"))
		}
	}
}

func main() {
	main()
}
