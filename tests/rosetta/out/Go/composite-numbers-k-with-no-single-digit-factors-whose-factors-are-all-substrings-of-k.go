//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 4
func primeFactors(n int) []int {
	var factors []int = []int{}
	x := n
	for (x % 2) == 0 {
		factors = append(_toAnySlice(factors), any(2))
		x = int((float64(x) / float64(2)))
	}
	p := 3
	for (p * p) <= x {
		for (x % p) == 0 {
			factors = append(_toAnySlice(factors), any(p))
			x = int((float64(x) / float64(p)))
		}
		p = (p + 2)
	}
	if x > 1 {
		factors = append(_toAnySlice(factors), any(x))
	}
	return factors
}

// line 25
func commatize(n int) string {
	s := fmt.Sprint(any(n))
	out := ""
	i := (len(any(s)) - 1)
	c := 0
	for i >= 0 {
		out = string([]rune(s)[i:(i+1)]) + out
		c = (c + 1)
		if ((c % 3) == 0) && (i > 0) {
			out = "," + out
		}
		i = (i - 1)
	}
	return out
}

// line 39
func indexOf(s string, sub string) int {
	i := 0
	for (i + len(any(sub))) <= len(any(s)) {
		if string([]rune(s)[i:(i+len(any(sub)))]) == sub {
			return i
		}
		i = (i + 1)
	}
	return -1
}

// line 48
func pad10(s string) string {
	str := s
	for len(any(str)) < 10 {
		str = " " + str
	}
	return str
}

// line 54
func trimRightStr(s string) string {
	end := len(any(s))
	for (end > 0) && (string([]rune(s)[(end-1):end]) == " ") {
		end = (end - 1)
	}
	return string([]rune(s)[0:end])
}

// line 60
func main() {
	var res []int = []int{}
	count := 0
	k := (11 * 11)
	for count < 20 {
		if (((k % 3) == 0) || ((k % 5) == 0)) || ((k % 7) == 0) {
			k = (k + 2)
			continue
		}
		factors := primeFactors(k)
		if len(any(factors)) > 1 {
			s := fmt.Sprint(any(k))
			includesAll := true
			prev := -1
			for _, f := range factors {
				if f == prev {
					continue
				}
				fs := fmt.Sprint(any(f))
				if indexOf(s, fs) == (-1) {
					includesAll = false
					break
				}
				prev = f
			}
			if includesAll {
				res = append(_toAnySlice(res), any(k))
				count = (count + 1)
			}
		}
		k = (k + 2)
	}
	line := ""
	for _, e := range res[0:10] {
		line = line + pad10(commatize(e)) + " "
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(trimRightStr(line))), "\n"))
	line = ""
	for _, e := range res[10:20] {
		line = line + pad10(commatize(e)) + " "
	}
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(trimRightStr(line))), "\n"))
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
