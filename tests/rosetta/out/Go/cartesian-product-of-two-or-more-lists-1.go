//go:build ignore

// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z

package main

import (
	"fmt"
	"strings"
)

type v map[string]any

// line 1
func cart2(a []int, b []int) [][]int {
	var p [][]int = [][]int{}
	for _, x := range a {
		for _, y := range b {
			p = append(_toAnySlice(p), any([]int{x, y}))
		}
	}
	return p
}

// line 11
func llStr(lst [][]int) string {
	s := "["
	i := 0
	for i < len(any(lst)) {
		row := lst[i]
		s = s + "["
		j := 0
		for j < len(any(row)) {
			s = s + fmt.Sprint(any(row[j]))
			if j < (len(any(row)) - 1) {
				s = s + " "
			}
			j = (j + 1)
		}
		s = s + "]"
		if i < (len(any(lst)) - 1) {
			s = s + " "
		}
		i = (i + 1)
	}
	s = s + "]"
	return s
}

// line 31
func main() {
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cart2([]int{1, 2}, []int{3, 4})))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cart2([]int{3, 4}, []int{1, 2})))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cart2([]int{1, 2}, []int{})))), "\n"))
	fmt.Println(strings.TrimSuffix(fmt.Sprintln(any(llStr(cart2([]int{}, []int{1, 2})))), "\n"))
}

func main() {
	main()
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
