(* Generated by Mochi compiler v0.10.30 on 2025-07-19T00:24:49Z *)
let rec __show v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"

exception Break
exception Continue


let rec validComb (a : int) (b : int) (c : int) (d : int) (e : int) (f : int) (g : int) : bool =
  let square1 = (a + b) in
  let square2 = ((b + c) + d) in
  let square3 = ((d + e) + f) in
  let square4 = (f + g) in
  (((square1 = square2) && (square2 = square3)) && (square3 = square4))

let rec isUnique (a : int) (b : int) (c : int) (d : int) (e : int) (f : int) (g : int) : bool =
  let nums = ref [a;b;c;d;e;f;g] in
  let i : int ref = ref 0 in
  let rec __loop0 () =
    if ((!i) < List.length (!nums)) then (
      try
        let j = ref ((!i) + 1) in
        let rec __loop1 () =
          if ((!j) < List.length (!nums)) then (
            try
              if (List.nth ((!nums)) (!i) = List.nth ((!nums)) (!j)) then (
                false
              ) ;
              j := ((!j) + 1);
              __loop1 ()
            with Continue -> ()
          ) else ()
        in try __loop1 () with Break -> ()
        ;
        i := ((!i) + 1);
        __loop0 ()
      with Continue -> ()
    ) else ()
  in try __loop0 () with Break -> ()
  ;
  true

let rec getCombs (low : int) (high : int) (unique : bool) : (string * Obj.t) list =
  let valid = ref [] in
  let count : int ref = ref 0 in
  try
    for b = low to ((high + 1)) do
      try
        try
          for c = low to ((high + 1)) do
            try
              try
                for d = low to ((high + 1)) do
                  try
                    let s = ((b + c) + d) in
                    try
                      for e = low to ((high + 1)) do
                        try
                          try
                            for f = low to ((high + 1)) do
                              try
                                let a = (s - b) in
                                let g = (s - f) in
                                if ((a < low) || (a > high)) then (
                                  raise Continue
                                ) ;
                                if ((g < low) || (g > high)) then (
                                  raise Continue
                                ) ;
                                if (((d + e) + f) <> s) then (
                                  raise Continue
                                ) ;
                                if ((f + g) <> s) then (
                                  raise Continue
                                ) ;
                                if (not (unique) || isUnique a b c d e f g) then (
                                  valid := ((!valid) @ [[a;b;c;d;e;f;g]]);
                                  count := ((!count) + 1);
                                ) ;
                              with Continue -> ()
                            done
                          with Break -> () ;
                        with Continue -> ()
                      done
                    with Break -> () ;
                  with Continue -> ()
                done
              with Break -> () ;
            with Continue -> ()
          done
        with Break -> () ;
      with Continue -> ()
    done
  with Break -> () ;
  [("count",Obj.repr ((!count)));("list",Obj.repr ((!valid)))]

let r1 = getCombs 1 7 true
let r2 = getCombs 3 9 true
let r3 = getCombs 0 9 false

let () =
  print_endline ((__show (Obj.obj (List.assoc "count" (r1))) ^ " unique solutions in 1 to 7"));
  print_endline (__show (Obj.obj (List.assoc "list" (r1))));
  print_endline ((__show (Obj.obj (List.assoc "count" (r2))) ^ " unique solutions in 3 to 9"));
  print_endline (__show (Obj.obj (List.assoc "list" (r2))));
  print_endline ((__show (Obj.obj (List.assoc "count" (r3))) ^ " non-unique solutions in 0 to 9"));
