run: exit status 127
/tmp/21-game.erl:12:37: variable 'N' is unbound
%   12|     (case Neg1 of undefined -> N2 = N; false -> N2 = N; _ -> N2 = -N2 end),
%     |                                     ^

/tmp/21-game.erl:12:54: variable 'N' is unbound
%   12|     (case Neg1 of undefined -> N2 = N; false -> N2 = N; _ -> N2 = -N2 end),
%     |                                                      ^

/tmp/21-game.erl:12:68: variable 'N2' is unbound
%   12|     (case Neg1 of undefined -> N2 = N; false -> N2 = N; _ -> N2 = -N2 end),
%     |                                                                    ^

/tmp/21-game.erl:23:292: variable 'Choice' is unbound
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                                                                                                                                                    ^

/tmp/21-game.erl:23:406: function input/0 undefined
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                                                                                                                                                                                                                                                                      ^

/tmp/21-game.erl:23:1223: variable 'Done2' is unbound
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1254: variable 'Choice' is unbound
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1368: function input/0 undefined
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2185: variable 'Done2' is unbound
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^

/tmp/21-game.erl:11:6: Warning: variable 'N1' is unused
%   11|     {N1, I2} = (fun Loop0(N, I) -> case (I < length(Str)) of true -> N1 = ((N * 10) + maps:get(string:substr(Str, (I)+1, ((I + 1))-(I)), Digits, undefined)), I2 = (I + 1), Loop0(N1, I2); _ -> {N, I} end end)(N0, I1),
%     |      ^

/tmp/21-game.erl:11:10: Warning: variable 'I2' is unused
%   11|     {N1, I2} = (fun Loop0(N, I) -> case (I < length(Str)) of true -> N1 = ((N * 10) + maps:get(string:substr(Str, (I)+1, ((I + 1))-(I)), Digits, undefined)), I2 = (I + 1), Loop0(N1, I2); _ -> {N, I} end end)(N0, I1),
%     |          ^

/tmp/21-game.erl:17:19: Warning: erlang:now/0 is deprecated; see the "Time and Time Correction in Erlang" chapter of the ERTS User's Guide for more information
%   17|     Computer0 = ((now() rem 2) == 0),
%     |                   ^

/tmp/21-game.erl:23:6: Warning: variable 'Round1' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |      ^

/tmp/21-game.erl:23:161: Warning: variable 'Computer1' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                 ^

/tmp/21-game.erl:23:172: Warning: variable 'I4' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                            ^

/tmp/21-game.erl:23:282: Warning: variable 'Choice0' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                                                                                                                                          ^

/tmp/21-game.erl:23:515: Warning: variable 'Done2' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:548: Warning: variable 'Done2' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1196: Warning: variable 'Done3' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^

/tmp/21-game.erl:23:1215: Warning: variable 'Done3' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1244: Warning: variable 'Choice0' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1477: Warning: variable 'Done2' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:1510: Warning: variable 'Done2' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2158: Warning: variable 'Done3' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2177: Warning: variable 'Done3' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2258: Warning: erlang:now/0 is deprecated; see the "Time and Time Correction in Erlang" chapter of the ERTS User's Guide for more information
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2630: Warning: variable 'Done1' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

/tmp/21-game.erl:23:2649: Warning: variable 'Done1' is unused
%   23|     {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).
%     |

escript: There were compilation errors.
