#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.30 on 2025-07-19T01:03:38Z
% 21-game.erl - generated from 21-game.mochi

parseIntStr(Str) ->
    I0 = 0,
    Neg0 = false,
    (case ((length(Str) > 0) andalso (string:substr(Str, (0)+1, (1)-(0)) == "-")) of true -> Neg1 = true, I1 = 1; _ -> I1 = I0, Neg1 = Neg0 end),
    N0 = 0,
    Digits = #{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9},
    {I2, N1} = (fun Loop0(N, I) -> case (I < length(Str)) of true -> N1 = ((N * 10) + maps:get(string:substr(Str, (I)+1, ((I + 1))-(I)), Digits, undefined)), I2 = (I + 1), Loop0(I2, N1); _ -> {N, I} end end)(N0, I1),
    (case Neg1 of undefined -> N2 = N; false -> N2 = N; _ -> N2 = -N2 end),
    N2.

main() ->
    Total0 = 0,
    Computer0 = ((now() rem 2) == 0),
    io:format("~s~n", ["Enter q to quit at any time\n"]),
    (case Computer0 of undefined -> io:format("~s~n", ["You will choose first"]); false -> io:format("~s~n", ["You will choose first"]); _ -> io:format("~s~n", ["The computer will choose first"]) end),
    io:format("~s~n", ["\n\nRunning total is now 0\n\n"]),
    Round0 = 1,
    Done0 = false,
    {Round1} = (fun Loop3(Round) -> case not Done0 of true -> io:format("~p~n", ["ROUND " ++ lists:flatten(io_lib:format("~p", [Round])) ++ ":\n\n"]), I3 = 0, {Computer1, I4} = (fun Loop2(Computer, I) -> case ((I < 2) andalso (not Done0)) of true -> (case Computer of undefined -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); false -> Choice0 = Choice, {Total1} = (fun Loop1(Total) -> case true of true -> io:format("~s~n", ["Your choice 1 to 3 : "]), Line = input(), (case ((Line == "q") orelse (Line == "Q")) of true -> io:format("~s~n", ["OK, quitting the game"]), Done2 = true, throw(break); _ -> Done2 = Done0 end), Num0 = parseIntStr(Line), (case ((Num0 < 1) orelse (Num0 > 3)) of true -> (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]); _ -> io:format("~s~n", ["Out of range, try again"]) end), throw(continue); _ -> ok end), (case ((Total + Num0) > 21) of true -> io:format("~s~n", ["Too big, try again"]), throw(continue); _ -> ok end), Total1 = (Total + Num0), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), throw(break), Loop1(Total1); _ -> {Total} end end)(Total0), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, congratulations, you've won!"]), Done3 = true; _ -> Done3 = Done2 end); _ -> Choice0 = 0, (case (Total0 < 18) of true -> Choice0 = ((now() rem 3) + 1); _ -> Choice0 = (21 - Total0) end), Total1 = (Total0 + Choice0), io:format("~p~n", ["The computer chooses " ++ lists:flatten(io_lib:format("~p", [Choice0]))]), io:format("~p~n", ["Running total is now " ++ lists:flatten(io_lib:format("~p", [Total1]))]), (case (Total1 == 21) of true -> io:format("~s~n", ["\nSo, commiserations, the computer has won!"]), Done1 = true; _ -> Done1 = Done0 end) end), io:format("~s~n", ["\n"]), Computer1 = not Computer, I4 = (I + 1), Loop2(Computer1, I4); _ -> {Computer, I} end end)(Computer0, I3), Round1 = (Round + 1), Loop3(Round1); _ -> {Round} end end)(Round0).

main(_) ->
    main().
