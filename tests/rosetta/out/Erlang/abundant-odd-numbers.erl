#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-16T09:59:12Z
% abundant-odd-numbers.erl - generated from abundant-odd-numbers.mochi

divisors(N) ->
    Divs0 = [1],
    Divs20 = [],
    I0 = 2,
    (fun Loop0(I) -> case ((I * I) =< N) of true -> (case (rem(N, I) == 0) of true -> J = ((N / I)), Divs1 = Divs0 ++ [I], (case (I /= J) of true -> Divs21 = Divs20 ++ [J]; _ -> ok end); _ -> ok end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
    J0 = (length(Divs21) - 1),
    (fun Loop1(Divs, J) -> case (J >= 0) of true -> Divs2 = Divs ++ [lists:nth((J)+1, Divs21)], J1 = (J - 1), Loop1(J1, Divs2); _ -> ok end end(Divs1, J)),
    Divs2.

sum(Xs) ->
    Tot0 = 0,
    {Tot1} = lists:foldl(fun(V, {Tot}) -> Tot1 = (Tot + V), {Tot1} end, {Tot0}, Xs),
    Tot1.

sumStr(Xs) ->
    S0 = "",
    I2 = 0,
    (fun Loop2(I, S) -> case (I < length(Xs)) of true -> S1 = (S + lists:flatten(io_lib:format("~p", [lists:nth((I)+1, Xs)]))) ++ " + ", I3 = (I + 1), Loop2(S1, I3); _ -> ok end end(I2, S0)),
    string:substr(S1, (0)+1, ((length(S1) - 3))-(0)).

pad2(N) ->
    S = lists:flatten(io_lib:format("~p", [N])),
    (case (length(S) < 2) of true -> " " ++ S; _ -> ok end),
    S.

pad5(N) ->
    S2 = lists:flatten(io_lib:format("~p", [N])),
    (fun Loop3(S) -> case (length(S) < 5) of true -> S3 = " " ++ S, Loop3(S3); _ -> ok end end(S)),
    S3.

abundantOdd(SearchFrom, CountFrom, CountTo, PrintOne) ->
    Count0 = CountFrom,
    N0 = SearchFrom,
    (fun Loop4(N) -> case (Count0 < CountTo) of true -> Divs = divisors(N), Tot = lists:sum(Divs), (case (Tot > N) of true -> Count1 = (Count0 + 1), (case (PrintOne andalso (Count1 < CountTo)) of true -> N1 = (N + 2), throw(continue); _ -> ok end), S = sumStr(Divs), (case not PrintOne of true -> io:format("~p~n", [pad2(Count1) ++ ". " ++ pad5(N) ++ " < " ++ S ++ " = " ++ lists:flatten(io_lib:format("~p", [Tot]))]); _ -> io:format("~p~n", [lists:flatten(io_lib:format("~p", [N])) ++ " < " ++ S ++ " = " ++ lists:flatten(io_lib:format("~p", [Tot]))]) end); _ -> ok end), N2 = (N + 2), Loop4(N2); _ -> ok end end(N0)),
    N2.

main() ->
    io:format("~p~n", ["The first " ++ lists:flatten(io_lib:format("~p", [Max])) ++ " abundant odd numbers are:"]),
    N = abundantOdd(1, 0, Max, false),
    io:format("~p~n", ["\nThe one thousandth abundant odd number is:"]),
    abundantOdd(N, Max, 1000, true),
    io:format("~p~n", ["\nThe first abundant odd number above one billion is:"]),
    abundantOdd(1000000001, 0, 1, true).

main(_) ->
    main().
