#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-16T09:59:11Z
% abelian-sandpile-model.erl - generated from abelian-sandpile-model.mochi

newPile(D) ->
    B0 = [],
    Y0 = 0,
    (fun Loop1(B, Y) -> case (Y < D) of true -> Row0 = [], X0 = 0, (fun Loop0(Row, X) -> case (X < D) of true -> Row1 = Row ++ [0], X1 = (X + 1), Loop0(Row1, X1); _ -> ok end end(Row0, X0)), B1 = B ++ [Row1], Y1 = (Y + 1), Loop1(B1, Y1); _ -> ok end end(B0, Y0)),
    B1.

handlePile(Pile, X, Y) ->
    (case (mochi_get(X1, lists:nth((Y1)+1, Pile)) >= 4) of true -> PileInner0 = mochi_get(Y1, Pile), PileInnerUpd0 = maps:put(X1, (mochi_get(X1, lists:nth((Y1)+1, Pile)) - 4), PileInner0), Pile0 = Pile#{Y1 => PileInnerUpd0}, (case (Y1 > 0) of true -> PileInner1 = mochi_get((Y1 - 1), Pile0), PileInnerUpd1 = maps:put(X1, (mochi_get(X1, mochi_get((Y1 - 1), Pile0)) + 1), PileInner1), Pile1 = Pile0#{(Y1 - 1) => PileInnerUpd1}, (case (mochi_get(X1, mochi_get((Y1 - 1), Pile1)) >= 4) of true -> Pile2 = handlePile(Pile1, X1, (Y1 - 1)); _ -> ok end); _ -> ok end), (case (X1 > 0) of true -> PileInner2 = mochi_get(Y1, Pile2), PileInnerUpd2 = maps:put((X1 - 1), (mochi_get((X1 - 1), mochi_get(Y1, Pile2)) + 1), PileInner2), Pile3 = Pile2#{Y1 => PileInnerUpd2}, (case (mochi_get((X1 - 1), mochi_get(Y1, Pile3)) >= 4) of true -> Pile4 = handlePile(Pile3, (X1 - 1), Y1); _ -> ok end); _ -> ok end), (case (Y1 < (16 - 1)) of true -> PileInner3 = mochi_get((Y1 + 1), Pile4), PileInnerUpd3 = maps:put(X1, (mochi_get(X1, mochi_get((Y1 + 1), Pile4)) + 1), PileInner3), Pile5 = Pile4#{(Y1 + 1) => PileInnerUpd3}, (case (mochi_get(X1, mochi_get((Y1 + 1), Pile5)) >= 4) of true -> Pile6 = handlePile(Pile5, X1, (Y1 + 1)); _ -> ok end); _ -> ok end), (case (X1 < (16 - 1)) of true -> PileInner4 = mochi_get(Y1, Pile6), PileInnerUpd4 = maps:put((X1 + 1), (mochi_get((X1 + 1), mochi_get(Y1, Pile6)) + 1), PileInner4), Pile7 = Pile6#{Y1 => PileInnerUpd4}, (case (mochi_get((X1 + 1), mochi_get(Y1, Pile7)) >= 4) of true -> Pile8 = handlePile(Pile7, (X1 + 1), Y1); _ -> ok end); _ -> ok end), Pile9 = handlePile(Pile8, X1, Y1); _ -> ok end),
    Pile9.

drawPile(Pile, D) ->
    Chars = [" ", "░", "▓", "█"],
    Row2 = 0,
    (fun Loop3(Row) -> case (Row < D) of true -> Line0 = "", Col0 = 0, (fun Loop2(Line, Col) -> case (Col < D) of true -> V0 = mochi_get(Col, lists:nth((Row)+1, Pile9)), (case (V0 > 3) of true -> V1 = 3; _ -> ok end), Line1 = (Line + lists:nth((V1)+1, Chars)), Col1 = (Col + 1), Loop2(Col1, Line1); _ -> ok end end(Line0, Col0)), io:format("~p~n", [Line1]), Row3 = (Row + 1), Loop3(Row3); _ -> ok end end(Row2)).

main() ->
    Pile10 = newPile(16),
    PileInner5 = mochi_get(Hdim, Pile10), PileInnerUpd5 = maps:put(Hdim, 16, PileInner5), Pile11 = Pile10#{Hdim => PileInnerUpd5},
    Pile12 = handlePile(Pile11, Hdim, Hdim),
    drawPile(Pile12, 16).

main(_) ->
    main().

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
