#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-16T12:03:23Z
% 100-prisoners.erl - generated from 100-prisoners.mochi

shuffle(Xs) ->
    Arr0 = Xs,
    I0 = 99,
    (fun Loop0(Arr, I) -> case (I > 0) of true -> J = rem(now(), ((I + 1))), Tmp = mochi_get(I, Arr), Arr1 = maps:put(I, mochi_get(J, Arr), Arr), Arr2 = maps:put(J, Tmp, Arr), I1 = (I - 1), Loop0(Arr2, I1); _ -> ok end end)(Arr0, I0),
    Arr2.

doTrials(Trials, Np, Strategy) ->
    Pardoned0 = 0,
    T0 = 0,
    (fun Loop7(Drawers, T) -> case (T < Trials) of true -> Drawers0 = [], I2 = 0, (fun Loop1(Drawers, I) -> case (I < 100) of true -> Drawers1 = Drawers ++ [I], I3 = (I + 1), Loop1(Drawers1, I3); _ -> ok end end)(Drawers, I2), Drawers2 = shuffle(Drawers1), P0 = 0, Success0 = true, (fun Loop6(P) -> case (P < Np) of true -> Found0 = false, (case (Strategy == "optimal") of true -> Prev0 = P, D0 = 0, (fun Loop2(Prev, D) -> case (D < 50) of true -> This = lists:nth((Prev)+1, Drawers2), (case (This == P) of true -> Found1 = true, throw(break); _ -> ok end), Prev1 = This, D1 = (D + 1), Loop2(Prev1, D1); _ -> ok end end)(Prev0, D0); _ -> Opened0 = [], K0 = 0, (fun Loop3(Opened, K) -> case (K < 100) of true -> Opened1 = Opened ++ [false], K1 = (K + 1), Loop3(K1, Opened1); _ -> ok end end)(Opened0, K0), D2 = 0, (fun Loop5(Opened, D) -> case (D < 50) of true -> N0 = rem(now(), 100), (fun Loop4(N) -> case lists:nth((N)+1, Opened) of true -> N1 = rem(now(), 100), Loop4(N1); _ -> ok end end)(N0), Opened2 = lists:sublist(Opened, N1) ++ [true] ++ lists:nthtail((N1)+1, Opened), (case (lists:nth((N1)+1, Drawers2) == P) of true -> Found2 = true, throw(break); _ -> ok end), D3 = (D + 1), Loop5(Opened2, D3); _ -> ok end end)(Opened1, D2) end), (case not Found2 of true -> Success1 = false, throw(break); _ -> ok end), P1 = (P + 1), Loop6(P1); _ -> ok end end)(P0), (case Success1 of undefined -> ok; false -> ok; _ -> Pardoned1 = (Pardoned0 + 1) end), T1 = (T + 1), Loop7(Drawers2, T1); _ -> ok end end)(Drawers, T0),
    Rf = (((Pardoned1) / (Trials)) * 100),
    io:format("~p~n", ["  strategy = " ++ Strategy ++ "  pardoned = " ++ lists:flatten(io_lib:format("~p", [Pardoned1])) ++ " relative frequency = " ++ lists:flatten(io_lib:format("~p", [Rf])) ++ "%"]).

main() ->
    lists:foreach(fun(Np) -> io:format("~p~n", ["Results from " ++ lists:flatten(io_lib:format("~p", [Trials])) ++ " trials with " ++ lists:flatten(io_lib:format("~p", [Np])) ++ " prisoners:\n"]), lists:foreach(fun(Strat) -> doTrials(Trials, Np, Strat) end, ["random", "optimal"]) end, [10, 100]).

main(_) ->
    main().

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
