run: exit status 127
/tmp/100-doors-2.erl:8:313: variable 'Line1' is unbound
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                                                                                                                                                                                                                                                                                                                         ^

/tmp/100-doors-2.erl:8:373: variable 'Incrementer1' unsafe in 'case' (line 8, column 165)
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                                                                                                                                                                                                                                                                                                                                                                                     ^

/tmp/100-doors-2.erl:8:387: variable 'Door1' unsafe in 'case' (line 8, column 165)
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                                                                                                                                                                                                                                                                                                                                                                                                   ^

/tmp/100-doors-2.erl:8:400: variable 'Line' is unbound
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                                                                                                                                                                                                                                                                                                                                                                                                                ^

/tmp/100-doors-2.erl:8:6: Warning: variable 'Line1' is unused
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |      ^

/tmp/100-doors-2.erl:8:13: Warning: variable 'Incrementer1' is unused
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |             ^

/tmp/100-doors-2.erl:8:27: Warning: variable 'Door1' is unused
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                           ^

/tmp/100-doors-2.erl:8:91: Warning: variable 'Line0' is unused
%    8|     {Line1, Incrementer1, Door1} = lists:foldl(fun(Current, {Line, Incrementer, Door}) -> Line0 = "Door " ++ lists:flatten(io_lib:format("~p", [Current])) ++ " ", (case (Current == Door) of true -> Line1 = Line ++ "Open", Incrementer1 = (Incrementer + 1), Door1 = ((Door + (2 * Incrementer1)) + 1); _ -> Line1 = Line1 ++ "Closed" end), io:format("~p~n", [Line1]), {Line1, Incrementer1, Door1} end, {Line, Incrementer0, Door0}, lists:seq(1, (101)-1)).
%     |                                                                                           ^

escript: There were compilation errors.
