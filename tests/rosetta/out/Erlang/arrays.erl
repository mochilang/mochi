% arrays.erl - generated from arrays.mochi

listStr(Xs) ->
    S0 = "[",
    I0 = 0,
    (fun Loop0(S, I) -> case (I < length(Xs)) of true -> S1 = (S + lists:flatten(io_lib:format("~p", [lists:nth((I)+1, Xs)]))), (case ((I + 1) < length(Xs)) of true -> S2 = S ++ " "; _ -> ok end), I1 = (I + 1), Loop0(S2, I1); _ -> ok end end(S0, I0)),
    S3 = S2 ++ "]",
    S3.

main(_) ->
    A0 = [0, 0, 0, 0, 0],
    io:format("~p~n", ["len(a) = " ++ lists:flatten(io_lib:format("~p", [length(A0)]))]),
    io:format("~p~n", ["a = " ++ listStr(A0)]),
    A1 = lists:sublist(A0, 0) ++ [3] ++ lists:nthtail((0)+1, A0),
    io:format("~p~n", ["a = " ++ listStr(A1)]),
    io:format("~p~n", ["a[0] = " ++ lists:flatten(io_lib:format("~p", [lists:nth((0)+1, A1)]))]),
    S4 = lists:sublist(A1, (0)+1, (4)-(0)),
    Cap_s0 = 5,
    io:format("~p~n", ["s = " ++ listStr(S4)]),
    io:format("~p~n", ["len(s) = " ++ lists:flatten(io_lib:format("~p", [length(S4)])) ++ "  cap(s) = " ++ lists:flatten(io_lib:format("~p", [Cap_s0]))]),
    S5 = lists:sublist(A1, (0)+1, (5)-(0)),
    io:format("~p~n", ["s = " ++ listStr(S5)]),
    A2 = lists:sublist(A1, 0) ++ [22] ++ lists:nthtail((0)+1, A1),
    S6 = lists:sublist(S5, 0) ++ [22] ++ lists:nthtail((0)+1, S5),
    io:format("~p~n", ["a = " ++ listStr(A2)]),
    io:format("~p~n", ["s = " ++ listStr(S6)]),
    S7 = S6 ++ [4],
    S8 = S7 ++ [5],
    S9 = S8 ++ [6],
    Cap_s1 = 10,
    io:format("~p~n", ["s = " ++ listStr(S9)]),
    io:format("~p~n", ["len(s) = " ++ lists:flatten(io_lib:format("~p", [length(S9)])) ++ "  cap(s) = " ++ lists:flatten(io_lib:format("~p", [Cap_s1]))]),
    A3 = lists:sublist(A2, 4) ++ [-1] ++ lists:nthtail((4)+1, A2),
    io:format("~p~n", ["a = " ++ listStr(A3)]),
    io:format("~p~n", ["s = " ++ listStr(S9)]),
    S10 = [],
    {S11} = lists:foldl(fun(I, {S}) -> S11 = S ++ [0], {S11} end, {S10}, lists:seq(0, (8)-1)),
    Cap_s2 = 8,
    io:format("~p~n", ["s = " ++ listStr(S11)]),
    io:format("~p~n", ["len(s) = " ++ lists:flatten(io_lib:format("~p", [length(S11)])) ++ "  cap(s) = " ++ lists:flatten(io_lib:format("~p", [Cap_s2]))]).
