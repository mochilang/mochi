run: exit status 127
/tmp/100-doors.erl:8:311: variable 'Doors2' is unbound
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                                                                                                                                                                                                                                                                                       ^

/tmp/100-doors.erl:8:319: variable 'Idx1' is unbound
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                                                                                                                                                                                                                                                                                               ^

/tmp/100-doors.erl:8:339: variable 'Idx' is unbound
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                                                                                                                                                                                                                                                                                                                   ^

/tmp/100-doors.erl:9:184: variable 'Line1' is unbound
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                                                                                                                                                                        ^

/tmp/100-doors.erl:9:215: variable 'Line1' is unbound
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                                                                                                                                                                                                       ^

/tmp/100-doors.erl:9:324: variable 'Line2' unsafe in 'case' (line 9, column 261)
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                                                                                                                                                                                                                                                                                                                    ^

/tmp/100-doors.erl:9:409: variable 'Line' is unbound
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                                                                                                                                                                                                                                                                                                                                                                                                         ^

/tmp/100-doors.erl:7:32: Warning: variable 'I' is unused
%    7|     {Doors1} = lists:foldl(fun(I, {Doors}) -> Doors1 = Doors ++ [false], {Doors1} end, {Doors0}, lists:seq(0, (100)-1)),
%     |                                ^

/tmp/100-doors.erl:8:14: Warning: variable 'Idx1' is unused
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |              ^

/tmp/100-doors.erl:8:61: Warning: variable 'Idx0' is unused
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                             ^

/tmp/100-doors.erl:8:91: Warning: variable 'Doors' shadowed in 'fun'
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                                                           ^

/tmp/100-doors.erl:8:98: Warning: variable 'Idx' shadowed in 'fun'
%    8|     {Doors2, Idx1} = lists:foldl(fun(Pass, {Doors, Idx}) -> Idx0 = (Pass - 1), (fun Loop0(Doors, Idx) -> case (Idx < 100) of true -> Doors2 = lists:sublist(Doors, Idx) ++ [not lists:nth((Idx)+1, Doors)] ++ lists:nthtail((Idx)+1, Doors), Idx1 = (Idx + Pass), Loop0(Doors2, Idx1); _ -> ok end end)(Doors, Idx), {Doors2, Idx1} end, {Doors1, Idx}, lists:seq(1, (101)-1)),
%     |                                                                                                  ^

/tmp/100-doors.erl:9:6: Warning: variable 'Line2' is unused
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |      ^

/tmp/100-doors.erl:9:47: Warning: variable 'Line0' is unused
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                               ^

/tmp/100-doors.erl:9:91: Warning: variable 'Line' shadowed in 'fun'
%    9|     {Line2} = lists:foldl(fun(Row, {Line}) -> Line0 = "", {Line2} = lists:foldl(fun(Col, {Line}) -> Idx = ((Row * 10) + Col), (case lists:nth((Idx)+1, Doors2) of undefined -> Line1 = Line1 ++ "0"; false -> Line1 = Line1 ++ "0"; _ -> Line1 = Line ++ "1" end), (case (Col < 9) of true -> Line2 = Line1 ++ " "; _ -> ok end), {Line2} end, {Line}, lists:seq(0, (10)-1)), io:format("~p~n", [Line2]), {Line2} end, {Line}, lists:seq(0, (10)-1)).
%     |                                                                                           ^

escript: There were compilation errors.
