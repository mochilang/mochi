run error: exit status 127
/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:9:223: variable 'Cur1' is unbound
%    9|     (fun Loop0(I) -> case (I < length(S)) of true -> C = string:substr(S, (I)+1, ((I + 1))-(I)), (case (C == " ") of true -> (case (length(Cur0) > 0) of true -> Res1 = Res0 ++ [Cur0], Cur1 = ""; _ -> ok end); _ -> Cur2 = (Cur1 + C) end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
%     |                                                                                                                                                                                                                               ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:10:19: variable 'Cur2' is unbound
%   10|     (case (length(Cur2) > 0) of true -> Res2 = Res1 ++ [Cur2]; _ -> ok end),
%     |                   ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:10:48: variable 'Res1' is unbound
%   10|     (case (length(Cur2) > 0) of true -> Res2 = Res1 ++ [Cur2]; _ -> ok end),
%     |                                                ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:11:5: variable 'Res2' unsafe in 'case' (line 10, column 6)
%   11|     Res2.
%     |     ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:15:9: function lower/1 undefined
%   15|     C = lower(string:substr(Word, (0)+1, (1)-(0))),
%     |         ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:17:98: function lower/1 undefined
%   17|     (fun Loop2(I) -> case (I < length(Blks)) of true -> B = lists:nth((I)+1, Blks), (case ((C == lower(lists:sublist(B, (0)+1, (1)-(0)))) orelse (C == lower(lists:sublist(B, (1)+1, (2)-(1))))) of true -> Rest0 = [], J0 = 0, (fun Loop1(J) -> case (J < length(Blks)) of true -> (case (J /= I) of true -> Rest1 = Rest0 ++ [lists:nth((J)+1, Blks)]; _ -> ok end), J1 = (J + 1), Loop1(J1); _ -> ok end end(J0)), (case canSpell(string:substr(Word, (1)+1, (length(Word))-(1)), Rest1) of undefined -> ok; false -> ok; _ -> true end); _ -> ok end), I3 = (I + 1), Loop2(I3); _ -> ok end end(I2)),
%     |                                                                                                  ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:17:152: function lower/1 undefined
%   17|     (fun Loop2(I) -> case (I < length(Blks)) of true -> B = lists:nth((I)+1, Blks), (case ((C == lower(lists:sublist(B, (0)+1, (1)-(0)))) orelse (C == lower(lists:sublist(B, (1)+1, (2)-(1))))) of true -> Rest0 = [], J0 = 0, (fun Loop1(J) -> case (J < length(Blks)) of true -> (case (J /= I) of true -> Rest1 = Rest0 ++ [lists:nth((J)+1, Blks)]; _ -> ok end), J1 = (J + 1), Loop1(J1); _ -> ok end end(J0)), (case canSpell(string:substr(Word, (1)+1, (length(Word))-(1)), Rest1) of undefined -> ok; false -> ok; _ -> true end); _ -> ok end), I3 = (I + 1), Loop2(I3); _ -> ok end end(I2)),
%     |                                                                                                                                                        ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:17:470: variable 'Rest1' is unbound
%   17|     (fun Loop2(I) -> case (I < length(Blks)) of true -> B = lists:nth((I)+1, Blks), (case ((C == lower(lists:sublist(B, (0)+1, (1)-(0)))) orelse (C == lower(lists:sublist(B, (1)+1, (2)-(1))))) of true -> Rest0 = [], J0 = 0, (fun Loop1(J) -> case (J < length(Blks)) of true -> (case (J /= I) of true -> Rest1 = Rest0 ++ [lists:nth((J)+1, Blks)]; _ -> ok end), J1 = (J + 1), Loop1(J1); _ -> ok end end(J0)), (case canSpell(string:substr(Word, (1)+1, (length(Word))-(1)), Rest1) of undefined -> ok; false -> ok; _ -> true end); _ -> ok end), I3 = (I + 1), Loop2(I3); _ -> ok end end(I2)),
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:9:162: Warning: variable 'Res1' is unused
%    9|     (fun Loop0(I) -> case (I < length(S)) of true -> C = string:substr(S, (I)+1, ((I + 1))-(I)), (case (C == " ") of true -> (case (length(Cur0) > 0) of true -> Res1 = Res0 ++ [Cur0], Cur1 = ""; _ -> ok end); _ -> Cur2 = (Cur1 + C) end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
%     |                                                                                                                                                                  ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:9:185: Warning: variable 'Cur1' is unused
%    9|     (fun Loop0(I) -> case (I < length(S)) of true -> C = string:substr(S, (I)+1, ((I + 1))-(I)), (case (C == " ") of true -> (case (length(Cur0) > 0) of true -> Res1 = Res0 ++ [Cur0], Cur1 = ""; _ -> ok end); _ -> Cur2 = (Cur1 + C) end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
%     |                                                                                                                                                                                         ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:9:215: Warning: variable 'Cur2' is unused
%    9|     (fun Loop0(I) -> case (I < length(S)) of true -> C = string:substr(S, (I)+1, ((I + 1))-(I)), (case (C == " ") of true -> (case (length(Cur0) > 0) of true -> Res1 = Res0 ++ [Cur0], Cur1 = ""; _ -> ok end); _ -> Cur2 = (Cur1 + C) end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
%     |                                                                                                                                                                                                                       ^

/workspace/mochi/tests/rosetta/out/Erlang/abc-problem.erl:17:303: Warning: variable 'Rest1' is unused
%   17|     (fun Loop2(I) -> case (I < length(Blks)) of true -> B = lists:nth((I)+1, Blks), (case ((C == lower(lists:sublist(B, (0)+1, (1)-(0)))) orelse (C == lower(lists:sublist(B, (1)+1, (2)-(1))))) of true -> Rest0 = [], J0 = 0, (fun Loop1(J) -> case (J < length(Blks)) of true -> (case (J /= I) of true -> Rest1 = Rest0 ++ [lists:nth((J)+1, Blks)]; _ -> ok end), J1 = (J + 1), Loop1(J1); _ -> ok end end(J0)), (case canSpell(string:substr(Word, (1)+1, (length(Word))-(1)), Rest1) of undefined -> ok; false -> ok; _ -> true end); _ -> ok end), I3 = (I + 1), Loop2(I3); _ -> ok end end(I2)),
%     |                                                                                                                                                                                                                                                                                                               ^

escript: There were compilation errors.
