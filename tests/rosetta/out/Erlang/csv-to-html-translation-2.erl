% csv-to-html-translation-2.erl - generated from csv-to-html-translation-2.mochi

main(_) ->
    C = "Character,Speech\n" ++ "The multitude,The messiah! Show us the messiah!\n" ++ "Brians mother,<angry>Now you listen here! He's not the messiah; he's a very naughty boy! Now go away!</angry>\n" ++ "The multitude,Who are you?\n" ++ "Brians mother,I'm his mother; that's who!\n" ++ "The multitude,Behold his mother! Behold his mother!",
    Rows0 = [],
    {Rows1} = lists:foldl(fun(Line, {Rows}) -> Rows1 = Rows ++ [split(Line, ",")], {Rows1} end, {Rows0}, split(C, "\n")),
    io:format("~p~n", ["<table>"]),
    (case true of undefined -> lists:foreach(fun(Row) -> Cells2 = "", {Cells3} = lists:foldl(fun(Cell, {Cells}) -> Cells3 = Cells ++ "<td>" ++ Cell ++ "</td>", {Cells3} end, {Cells2}, Row), io:format("~p~n", ["    <tr>" ++ Cells3 ++ "</tr>"]) end, Rows1); false -> lists:foreach(fun(Row) -> Cells2 = "", {Cells3} = lists:foldl(fun(Cell, {Cells}) -> Cells3 = Cells ++ "<td>" ++ Cell ++ "</td>", {Cells3} end, {Cells2}, Row), io:format("~p~n", ["    <tr>" ++ Cells3 ++ "</tr>"]) end, Rows1); _ -> (case (length(Rows1) > 0) of true -> Th0 = "", {Th1} = lists:foldl(fun(H, {Th}) -> Th1 = Th ++ "<th>" ++ H ++ "</th>", {Th1} end, {Th0}, lists:nth((0)+1, Rows1)), io:format("~p~n", ["   <thead>"]), io:format("~p~n", ["      <tr>" ++ Th1 ++ "</tr>"]), io:format("~p~n", ["   </thead>"]), io:format("~p~n", ["   <tbody>"]), I0 = 1, (fun Loop0(I) -> case (I < length(Rows1)) of true -> Cells0 = "", {Cells1} = lists:foldl(fun(Cell, {Cells}) -> Cells1 = Cells ++ "<td>" ++ Cell ++ "</td>", {Cells1} end, {Cells0}, lists:nth((I)+1, Rows1)), io:format("~p~n", ["      <tr>" ++ Cells1 ++ "</tr>"]), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)), io:format("~p~n", ["   </tbody>"]); _ -> ok end) end),
    io:format("~p~n", ["</table>"]).
