#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-16T09:59:09Z
% abbreviations-easy.erl - generated from abbreviations-easy.mochi

fields(S) ->
    Words0 = [],
    Cur0 = "",
    I0 = 0,
    (fun Loop0(I) -> case (I < length(S)) of true -> Ch = string:substr(S, (I)+1, ((I + 1))-(I)), (case (((Ch == " ") orelse (Ch == "\n")) orelse (Ch == "\t")) of true -> (case (length(Cur0) > 0) of true -> Words1 = Words0 ++ [Cur0], Cur1 = ""; _ -> ok end); _ -> Cur2 = (Cur1 + Ch) end), I1 = (I + 1), Loop0(I1); _ -> ok end end(I0)),
    (case (length(Cur2) > 0) of true -> Words2 = Words1 ++ [Cur2]; _ -> ok end),
    Words2.

padRight(S, Width) ->
    Out0 = S,
    I2 = length(S),
    (fun Loop1(Out, I) -> case (I < Width) of true -> Out1 = Out ++ " ", I3 = (I + 1), Loop1(Out1, I3); _ -> ok end end(Out0, I2)),
    Out1.

join(Xs, Sep) ->
    Res0 = "",
    I4 = 0,
    (fun Loop2(Res, I) -> case (I < length(Xs)) of true -> (case (I > 0) of true -> Res1 = (Res + Sep); _ -> ok end), Res2 = (Res + lists:nth((I)+1, Xs)), I5 = (I + 1), Loop2(Res2, I5); _ -> ok end end(Res0, I4)),
    Res2.

validate(Commands, Words, Mins) ->
    Results0 = [],
    (case (length(Words2) == 0) of true -> Results0; _ -> ok end),
    Wi0 = 0,
    (fun Loop4(Wi) -> case (Wi < length(Words2)) of true -> W = lists:nth((Wi)+1, Words2), Found0 = false, Wlen = length(W), Ci0 = 0, (fun Loop3(Ci) -> case (Ci < length(Commands)) of true -> Cmd = lists:nth((Ci)+1, Commands), (case (((lists:nth((Ci)+1, Mins) /= 0) andalso (Wlen >= lists:nth((Ci)+1, Mins))) andalso (Wlen =< length(Cmd))) of true -> C = upper(Cmd), Ww = upper(W), (case (string:substr(C, (0)+1, (Wlen)-(0)) == Ww) of true -> Results1 = Results0 ++ [C], Found1 = true, throw(break); _ -> ok end); _ -> ok end), Ci1 = (Ci + 1), Loop3(Ci1); _ -> ok end end(Ci0)), (case not Found1 of true -> Results2 = Results1 ++ ["*error*"]; _ -> ok end), Wi1 = (Wi + 1), Loop4(Wi1); _ -> ok end end(Wi0)),
    Results2.

main() ->
    Table = "Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress Copy " ++ "COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find " ++ "NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput " ++ " Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO " ++ "MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT " ++ "READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT " ++ "RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer TypeUp ",
    Commands = fields(Table),
    Mins0 = [],
    I6 = 0,
    (fun Loop6(Mins, I) -> case (I < length(Commands)) of true -> Count0 = 0, J0 = 0, Cmd = lists:nth((I)+1, Commands), (fun Loop5(J) -> case (J < length(Cmd)) of true -> Ch = string:substr(Cmd, (J)+1, ((J + 1))-(J)), (case ((Ch >= "A") andalso (Ch =< "Z")) of true -> Count1 = (Count0 + 1); _ -> ok end), J1 = (J + 1), Loop5(J1); _ -> ok end end(J0)), Mins1 = Mins ++ [Count1], I7 = (I + 1), Loop6(Mins1, I7); _ -> ok end end(Mins0, I6)),
    Words = fields(Sentence),
    Results = validate(Commands, Words, Mins1),
    Out10 = "user words:  ",
    K0 = 0,
    (fun Loop7(Out1, K) -> case (K < length(Words)) of true -> Out11 = (Out1 + padRight(lists:nth((K)+1, Words), length(lists:nth((K)+1, Results)))) ++ " ", K1 = (K + 1), Loop7(Out11, K1); _ -> ok end end(Out10, K0)),
    io:format("~p~n", [Out11]),
    io:format("~p~n", ["full words:  " ++ join(Results, " ")]).

main(_) ->
    main().
